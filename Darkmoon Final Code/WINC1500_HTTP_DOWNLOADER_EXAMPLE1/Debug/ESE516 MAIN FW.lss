
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002c954  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000037c  20000000  0003e954  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005928  20000380  0003ece0  00030380  2**4
                  ALLOC
  3 .stack        00002000  20005ca8  00044608  00030380  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00122a83  00000000  00000000  000303fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010980  00000000  00000000  00152e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00014b95  00000000  00000000  00163800  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003838  00000000  00000000  00178395  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003490  00000000  00000000  0017bbcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003f894  00000000  00000000  0017f05d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005962b  00000000  00000000  001be8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bf78d  00000000  00000000  00217f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000d5a8  00000000  00000000  002d76ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	a8 7c 00 20 c1 de 02 00 b9 df 02 00 b9 df 02 00     .|. ............
	...
   1202c:	c1 ce 01 00 00 00 00 00 00 00 00 00 e1 cf 01 00     ................
   1203c:	29 d0 01 00 b9 df 02 00 b9 df 02 00 b9 df 02 00     )...............
   1204c:	11 a0 02 00 3d 95 02 00 b9 df 02 00 7d 42 01 00     ....=.......}B..
   1205c:	b9 df 02 00 c1 43 01 00 b5 a6 02 00 cd a6 02 00     .....C..........
   1206c:	e5 a6 02 00 fd a6 02 00 15 a7 02 00 2d a7 02 00     ............-...
   1207c:	09 de 02 00 1d de 02 00 31 de 02 00 ad ab 01 00     ........1.......
   1208c:	c1 ab 01 00 d5 ab 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	05 41 01 00 b9 df 02 00 41 42 01 00 b9 df 02 00     .A......AB......
   120ac:	b9 df 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000380 	.word	0x20000380
   120d4:	00000000 	.word	0x00000000
   120d8:	0003e954 	.word	0x0003e954

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000384 	.word	0x20000384
   12108:	0003e954 	.word	0x0003e954
   1210c:	0003e954 	.word	0x0003e954
   12110:	00000000 	.word	0x00000000

00012114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	0002      	movs	r2, r0
   1211c:	1dfb      	adds	r3, r7, #7
   1211e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12120:	230f      	movs	r3, #15
   12122:	18fb      	adds	r3, r7, r3
   12124:	1dfa      	adds	r2, r7, #7
   12126:	7812      	ldrb	r2, [r2, #0]
   12128:	09d2      	lsrs	r2, r2, #7
   1212a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1212c:	230e      	movs	r3, #14
   1212e:	18fb      	adds	r3, r7, r3
   12130:	1dfa      	adds	r2, r7, #7
   12132:	7812      	ldrb	r2, [r2, #0]
   12134:	0952      	lsrs	r2, r2, #5
   12136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12138:	4b0d      	ldr	r3, [pc, #52]	; (12170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1213a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1213c:	230f      	movs	r3, #15
   1213e:	18fb      	adds	r3, r7, r3
   12140:	781b      	ldrb	r3, [r3, #0]
   12142:	2b00      	cmp	r3, #0
   12144:	d10f      	bne.n	12166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   12146:	230f      	movs	r3, #15
   12148:	18fb      	adds	r3, r7, r3
   1214a:	781b      	ldrb	r3, [r3, #0]
   1214c:	009b      	lsls	r3, r3, #2
   1214e:	2210      	movs	r2, #16
   12150:	4694      	mov	ip, r2
   12152:	44bc      	add	ip, r7
   12154:	4463      	add	r3, ip
   12156:	3b08      	subs	r3, #8
   12158:	681a      	ldr	r2, [r3, #0]
   1215a:	230e      	movs	r3, #14
   1215c:	18fb      	adds	r3, r7, r3
   1215e:	781b      	ldrb	r3, [r3, #0]
   12160:	01db      	lsls	r3, r3, #7
   12162:	18d3      	adds	r3, r2, r3
   12164:	e000      	b.n	12168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   12166:	2300      	movs	r3, #0
	}
}
   12168:	0018      	movs	r0, r3
   1216a:	46bd      	mov	sp, r7
   1216c:	b004      	add	sp, #16
   1216e:	bd80      	pop	{r7, pc}
   12170:	41004400 	.word	0x41004400

00012174 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
   12174:	b580      	push	{r7, lr}
   12176:	b082      	sub	sp, #8
   12178:	af00      	add	r7, sp, #0
   1217a:	0002      	movs	r2, r0
   1217c:	1dfb      	adds	r3, r7, #7
   1217e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12180:	4b06      	ldr	r3, [pc, #24]	; (1219c <system_interrupt_enable+0x28>)
   12182:	1dfa      	adds	r2, r7, #7
   12184:	7812      	ldrb	r2, [r2, #0]
   12186:	0011      	movs	r1, r2
   12188:	221f      	movs	r2, #31
   1218a:	400a      	ands	r2, r1
   1218c:	2101      	movs	r1, #1
   1218e:	4091      	lsls	r1, r2
   12190:	000a      	movs	r2, r1
   12192:	601a      	str	r2, [r3, #0]
}
   12194:	46c0      	nop			; (mov r8, r8)
   12196:	46bd      	mov	sp, r7
   12198:	b002      	add	sp, #8
   1219a:	bd80      	pop	{r7, pc}
   1219c:	e000e100 	.word	0xe000e100

000121a0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   121a0:	b580      	push	{r7, lr}
   121a2:	b082      	sub	sp, #8
   121a4:	af00      	add	r7, sp, #0
   121a6:	0002      	movs	r2, r0
   121a8:	1dfb      	adds	r3, r7, #7
   121aa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   121ac:	1dfb      	adds	r3, r7, #7
   121ae:	781b      	ldrb	r3, [r3, #0]
   121b0:	0018      	movs	r0, r3
   121b2:	4b03      	ldr	r3, [pc, #12]	; (121c0 <port_get_group_from_gpio_pin+0x20>)
   121b4:	4798      	blx	r3
   121b6:	0003      	movs	r3, r0
}
   121b8:	0018      	movs	r0, r3
   121ba:	46bd      	mov	sp, r7
   121bc:	b002      	add	sp, #8
   121be:	bd80      	pop	{r7, pc}
   121c0:	00012115 	.word	0x00012115

000121c4 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   121c4:	b580      	push	{r7, lr}
   121c6:	b082      	sub	sp, #8
   121c8:	af00      	add	r7, sp, #0
   121ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   121cc:	687b      	ldr	r3, [r7, #4]
   121ce:	2200      	movs	r2, #0
   121d0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   121d2:	687b      	ldr	r3, [r7, #4]
   121d4:	2201      	movs	r2, #1
   121d6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   121d8:	687b      	ldr	r3, [r7, #4]
   121da:	2200      	movs	r2, #0
   121dc:	709a      	strb	r2, [r3, #2]
}
   121de:	46c0      	nop			; (mov r8, r8)
   121e0:	46bd      	mov	sp, r7
   121e2:	b002      	add	sp, #8
   121e4:	bd80      	pop	{r7, pc}
	...

000121e8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   121e8:	b580      	push	{r7, lr}
   121ea:	b084      	sub	sp, #16
   121ec:	af00      	add	r7, sp, #0
   121ee:	0002      	movs	r2, r0
   121f0:	1dfb      	adds	r3, r7, #7
   121f2:	701a      	strb	r2, [r3, #0]
   121f4:	1dbb      	adds	r3, r7, #6
   121f6:	1c0a      	adds	r2, r1, #0
   121f8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   121fa:	1dfb      	adds	r3, r7, #7
   121fc:	781b      	ldrb	r3, [r3, #0]
   121fe:	0018      	movs	r0, r3
   12200:	4b0d      	ldr	r3, [pc, #52]	; (12238 <port_pin_set_output_level+0x50>)
   12202:	4798      	blx	r3
   12204:	0003      	movs	r3, r0
   12206:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12208:	1dfb      	adds	r3, r7, #7
   1220a:	781b      	ldrb	r3, [r3, #0]
   1220c:	221f      	movs	r2, #31
   1220e:	4013      	ands	r3, r2
   12210:	2201      	movs	r2, #1
   12212:	409a      	lsls	r2, r3
   12214:	0013      	movs	r3, r2
   12216:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   12218:	1dbb      	adds	r3, r7, #6
   1221a:	781b      	ldrb	r3, [r3, #0]
   1221c:	2b00      	cmp	r3, #0
   1221e:	d003      	beq.n	12228 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   12220:	68fb      	ldr	r3, [r7, #12]
   12222:	68ba      	ldr	r2, [r7, #8]
   12224:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   12226:	e002      	b.n	1222e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   12228:	68fb      	ldr	r3, [r7, #12]
   1222a:	68ba      	ldr	r2, [r7, #8]
   1222c:	615a      	str	r2, [r3, #20]
}
   1222e:	46c0      	nop			; (mov r8, r8)
   12230:	46bd      	mov	sp, r7
   12232:	b004      	add	sp, #16
   12234:	bd80      	pop	{r7, pc}
   12236:	46c0      	nop			; (mov r8, r8)
   12238:	000121a1 	.word	0x000121a1

0001223c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1223c:	b580      	push	{r7, lr}
   1223e:	b084      	sub	sp, #16
   12240:	af00      	add	r7, sp, #0
   12242:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12244:	687b      	ldr	r3, [r7, #4]
   12246:	681b      	ldr	r3, [r3, #0]
   12248:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1224a:	68fb      	ldr	r3, [r7, #12]
   1224c:	69db      	ldr	r3, [r3, #28]
   1224e:	1e5a      	subs	r2, r3, #1
   12250:	4193      	sbcs	r3, r2
   12252:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   12254:	0018      	movs	r0, r3
   12256:	46bd      	mov	sp, r7
   12258:	b004      	add	sp, #16
   1225a:	bd80      	pop	{r7, pc}

0001225c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1225c:	b580      	push	{r7, lr}
   1225e:	b082      	sub	sp, #8
   12260:	af00      	add	r7, sp, #0
   12262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   12264:	687b      	ldr	r3, [r7, #4]
   12266:	2201      	movs	r2, #1
   12268:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1226a:	687b      	ldr	r3, [r7, #4]
   1226c:	2200      	movs	r2, #0
   1226e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   12270:	687b      	ldr	r3, [r7, #4]
   12272:	2200      	movs	r2, #0
   12274:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   12276:	687b      	ldr	r3, [r7, #4]
   12278:	22c0      	movs	r2, #192	; 0xc0
   1227a:	0392      	lsls	r2, r2, #14
   1227c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1227e:	687b      	ldr	r3, [r7, #4]
   12280:	2200      	movs	r2, #0
   12282:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   12284:	687b      	ldr	r3, [r7, #4]
   12286:	2200      	movs	r2, #0
   12288:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1228a:	687b      	ldr	r3, [r7, #4]
   1228c:	2201      	movs	r2, #1
   1228e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   12290:	687b      	ldr	r3, [r7, #4]
   12292:	2201      	movs	r2, #1
   12294:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   12296:	687b      	ldr	r3, [r7, #4]
   12298:	2200      	movs	r2, #0
   1229a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1229c:	687b      	ldr	r3, [r7, #4]
   1229e:	2224      	movs	r2, #36	; 0x24
   122a0:	2100      	movs	r1, #0
   122a2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   122a4:	687b      	ldr	r3, [r7, #4]
   122a6:	3318      	adds	r3, #24
   122a8:	220c      	movs	r2, #12
   122aa:	2100      	movs	r1, #0
   122ac:	0018      	movs	r0, r3
   122ae:	4b0a      	ldr	r3, [pc, #40]	; (122d8 <spi_get_config_defaults+0x7c>)
   122b0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   122b2:	687b      	ldr	r3, [r7, #4]
   122b4:	4a09      	ldr	r2, [pc, #36]	; (122dc <spi_get_config_defaults+0x80>)
   122b6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   122b8:	687b      	ldr	r3, [r7, #4]
   122ba:	2200      	movs	r2, #0
   122bc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   122be:	687b      	ldr	r3, [r7, #4]
   122c0:	2200      	movs	r2, #0
   122c2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   122c4:	687b      	ldr	r3, [r7, #4]
   122c6:	2200      	movs	r2, #0
   122c8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   122ca:	687b      	ldr	r3, [r7, #4]
   122cc:	2200      	movs	r2, #0
   122ce:	635a      	str	r2, [r3, #52]	; 0x34

};
   122d0:	46c0      	nop			; (mov r8, r8)
   122d2:	46bd      	mov	sp, r7
   122d4:	b002      	add	sp, #8
   122d6:	bd80      	pop	{r7, pc}
   122d8:	00038507 	.word	0x00038507
   122dc:	000186a0 	.word	0x000186a0

000122e0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   122e8:	687b      	ldr	r3, [r7, #4]
   122ea:	220a      	movs	r2, #10
   122ec:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   122ee:	687b      	ldr	r3, [r7, #4]
   122f0:	2200      	movs	r2, #0
   122f2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   122f4:	687b      	ldr	r3, [r7, #4]
   122f6:	2200      	movs	r2, #0
   122f8:	709a      	strb	r2, [r3, #2]
}
   122fa:	46c0      	nop			; (mov r8, r8)
   122fc:	46bd      	mov	sp, r7
   122fe:	b002      	add	sp, #8
   12300:	bd80      	pop	{r7, pc}
	...

00012304 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   12304:	b580      	push	{r7, lr}
   12306:	b084      	sub	sp, #16
   12308:	af00      	add	r7, sp, #0
   1230a:	6078      	str	r0, [r7, #4]
   1230c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1230e:	683b      	ldr	r3, [r7, #0]
   12310:	781a      	ldrb	r2, [r3, #0]
   12312:	687b      	ldr	r3, [r7, #4]
   12314:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   12316:	683b      	ldr	r3, [r7, #0]
   12318:	785a      	ldrb	r2, [r3, #1]
   1231a:	687b      	ldr	r3, [r7, #4]
   1231c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1231e:	683b      	ldr	r3, [r7, #0]
   12320:	789a      	ldrb	r2, [r3, #2]
   12322:	687b      	ldr	r3, [r7, #4]
   12324:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   12326:	230c      	movs	r3, #12
   12328:	18fb      	adds	r3, r7, r3
   1232a:	0018      	movs	r0, r3
   1232c:	4b0b      	ldr	r3, [pc, #44]	; (1235c <spi_attach_slave+0x58>)
   1232e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   12330:	230c      	movs	r3, #12
   12332:	18fb      	adds	r3, r7, r3
   12334:	2201      	movs	r2, #1
   12336:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   12338:	687b      	ldr	r3, [r7, #4]
   1233a:	781b      	ldrb	r3, [r3, #0]
   1233c:	220c      	movs	r2, #12
   1233e:	18ba      	adds	r2, r7, r2
   12340:	0011      	movs	r1, r2
   12342:	0018      	movs	r0, r3
   12344:	4b06      	ldr	r3, [pc, #24]	; (12360 <spi_attach_slave+0x5c>)
   12346:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   12348:	687b      	ldr	r3, [r7, #4]
   1234a:	781b      	ldrb	r3, [r3, #0]
   1234c:	2101      	movs	r1, #1
   1234e:	0018      	movs	r0, r3
   12350:	4b04      	ldr	r3, [pc, #16]	; (12364 <spi_attach_slave+0x60>)
   12352:	4798      	blx	r3
}
   12354:	46c0      	nop			; (mov r8, r8)
   12356:	46bd      	mov	sp, r7
   12358:	b004      	add	sp, #16
   1235a:	bd80      	pop	{r7, pc}
   1235c:	000121c5 	.word	0x000121c5
   12360:	000299a1 	.word	0x000299a1
   12364:	000121e9 	.word	0x000121e9

00012368 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   12368:	b580      	push	{r7, lr}
   1236a:	b084      	sub	sp, #16
   1236c:	af00      	add	r7, sp, #0
   1236e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   12370:	687b      	ldr	r3, [r7, #4]
   12372:	681b      	ldr	r3, [r3, #0]
   12374:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   12376:	687b      	ldr	r3, [r7, #4]
   12378:	681b      	ldr	r3, [r3, #0]
   1237a:	0018      	movs	r0, r3
   1237c:	4b0b      	ldr	r3, [pc, #44]	; (123ac <spi_enable+0x44>)
   1237e:	4798      	blx	r3
   12380:	0003      	movs	r3, r0
   12382:	0018      	movs	r0, r3
   12384:	4b0a      	ldr	r3, [pc, #40]	; (123b0 <spi_enable+0x48>)
   12386:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   12388:	46c0      	nop			; (mov r8, r8)
   1238a:	687b      	ldr	r3, [r7, #4]
   1238c:	0018      	movs	r0, r3
   1238e:	4b09      	ldr	r3, [pc, #36]	; (123b4 <spi_enable+0x4c>)
   12390:	4798      	blx	r3
   12392:	1e03      	subs	r3, r0, #0
   12394:	d1f9      	bne.n	1238a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   12396:	68fb      	ldr	r3, [r7, #12]
   12398:	681b      	ldr	r3, [r3, #0]
   1239a:	2202      	movs	r2, #2
   1239c:	431a      	orrs	r2, r3
   1239e:	68fb      	ldr	r3, [r7, #12]
   123a0:	601a      	str	r2, [r3, #0]
}
   123a2:	46c0      	nop			; (mov r8, r8)
   123a4:	46bd      	mov	sp, r7
   123a6:	b004      	add	sp, #16
   123a8:	bd80      	pop	{r7, pc}
   123aa:	46c0      	nop			; (mov r8, r8)
   123ac:	0002a671 	.word	0x0002a671
   123b0:	00012175 	.word	0x00012175
   123b4:	0001223d 	.word	0x0001223d

000123b8 <sendSPI_DMA>:
/******************************************************************************
* Local Functions
******************************************************************************/

static void sendSPI_DMA(uint8_t beat)
{
   123b8:	b580      	push	{r7, lr}
   123ba:	b082      	sub	sp, #8
   123bc:	af00      	add	r7, sp, #0
   123be:	0002      	movs	r2, r0
   123c0:	1dfb      	adds	r3, r7, #7
   123c2:	701a      	strb	r2, [r3, #0]
	vTaskSuspendAll();
   123c4:	4b10      	ldr	r3, [pc, #64]	; (12408 <sendSPI_DMA+0x50>)
   123c6:	4798      	blx	r3
	dmaDescriptorArray[0].srcaddr = &beat + DMA_BUFFER_LENGTH;
   123c8:	1dfb      	adds	r3, r7, #7
   123ca:	3301      	adds	r3, #1
   123cc:	001a      	movs	r2, r3
   123ce:	4b0f      	ldr	r3, [pc, #60]	; (1240c <sendSPI_DMA+0x54>)
   123d0:	605a      	str	r2, [r3, #4]
	// Start the transfer!
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
   123d2:	4a0f      	ldr	r2, [pc, #60]	; (12410 <sendSPI_DMA+0x58>)
   123d4:	490e      	ldr	r1, [pc, #56]	; (12410 <sendSPI_DMA+0x58>)
   123d6:	2340      	movs	r3, #64	; 0x40
   123d8:	5ccb      	ldrb	r3, [r1, r3]
   123da:	b2db      	uxtb	r3, r3
   123dc:	2102      	movs	r1, #2
   123de:	430b      	orrs	r3, r1
   123e0:	b2d9      	uxtb	r1, r3
   123e2:	2340      	movs	r3, #64	; 0x40
   123e4:	54d1      	strb	r1, [r2, r3]

	while (DMAC->CHINTFLAG.reg != 2) {};
   123e6:	46c0      	nop			; (mov r8, r8)
   123e8:	4a09      	ldr	r2, [pc, #36]	; (12410 <sendSPI_DMA+0x58>)
   123ea:	234e      	movs	r3, #78	; 0x4e
   123ec:	5cd3      	ldrb	r3, [r2, r3]
   123ee:	b2db      	uxtb	r3, r3
   123f0:	2b02      	cmp	r3, #2
   123f2:	d1f9      	bne.n	123e8 <sendSPI_DMA+0x30>
	DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_MASK;
   123f4:	4a06      	ldr	r2, [pc, #24]	; (12410 <sendSPI_DMA+0x58>)
   123f6:	234e      	movs	r3, #78	; 0x4e
   123f8:	2107      	movs	r1, #7
   123fa:	54d1      	strb	r1, [r2, r3]

	#if SPI_FREQ < 12000000
	delay_cycles_us(1);
	#endif
	
	xTaskResumeAll();
   123fc:	4b05      	ldr	r3, [pc, #20]	; (12414 <sendSPI_DMA+0x5c>)
   123fe:	4798      	blx	r3
}
   12400:	46c0      	nop			; (mov r8, r8)
   12402:	46bd      	mov	sp, r7
   12404:	b002      	add	sp, #8
   12406:	bd80      	pop	{r7, pc}
   12408:	0001f231 	.word	0x0001f231
   1240c:	20004650 	.word	0x20004650
   12410:	41004800 	.word	0x41004800
   12414:	0001f249 	.word	0x0001f249

00012418 <dma_init>:

static void dma_init()
{
   12418:	b580      	push	{r7, lr}
   1241a:	af00      	add	r7, sp, #0
	PM->AHBMASK.bit.DMAC_ = 1;
   1241c:	4a19      	ldr	r2, [pc, #100]	; (12484 <dma_init+0x6c>)
   1241e:	6953      	ldr	r3, [r2, #20]
   12420:	2120      	movs	r1, #32
   12422:	430b      	orrs	r3, r1
   12424:	6153      	str	r3, [r2, #20]
	PM->APBBMASK.bit.DMAC_ = 1;
   12426:	4a17      	ldr	r2, [pc, #92]	; (12484 <dma_init+0x6c>)
   12428:	69d3      	ldr	r3, [r2, #28]
   1242a:	2110      	movs	r1, #16
   1242c:	430b      	orrs	r3, r1
   1242e:	61d3      	str	r3, [r2, #28]
	
	DMAC->BASEADDR.reg = (uint32_t)dmaDescriptorArray;
   12430:	4b15      	ldr	r3, [pc, #84]	; (12488 <dma_init+0x70>)
   12432:	4a16      	ldr	r2, [pc, #88]	; (1248c <dma_init+0x74>)
   12434:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (uint32_t)dmaDescriptorWritebackArray;
   12436:	4b14      	ldr	r3, [pc, #80]	; (12488 <dma_init+0x70>)
   12438:	4a15      	ldr	r2, [pc, #84]	; (12490 <dma_init+0x78>)
   1243a:	639a      	str	r2, [r3, #56]	; 0x38
	
	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
   1243c:	4b12      	ldr	r3, [pc, #72]	; (12488 <dma_init+0x70>)
   1243e:	4a15      	ldr	r2, [pc, #84]	; (12494 <dma_init+0x7c>)
   12440:	801a      	strh	r2, [r3, #0]
	
	dmaDescriptorArray[0].btctrl =	(1 << 0) |  // VALID: Descriptor Valid
   12442:	4b12      	ldr	r3, [pc, #72]	; (1248c <dma_init+0x74>)
   12444:	4a14      	ldr	r2, [pc, #80]	; (12498 <dma_init+0x80>)
   12446:	801a      	strh	r2, [r3, #0]
	(0 << 3) |  // BLOCKACT=NOACT: Block Action
	(1 << 10) | // SRCINC: Source Address Increment Enable
	(0 << 11) | // DSTINC: Destination Address Increment Enable
	(1 << 12) | // STEPSEL=SRC: Step Selection
	(0 << 13);  // STEPSIZE=X1: Address Increment Step Size
	dmaDescriptorArray[0].btcnt = DMA_BUFFER_LENGTH; // beat count
   12448:	4b10      	ldr	r3, [pc, #64]	; (1248c <dma_init+0x74>)
   1244a:	2201      	movs	r2, #1
   1244c:	805a      	strh	r2, [r3, #2]
	dmaDescriptorArray[0].dstaddr = (uint32_t)(&spi_master_instance.hw->SPI.DATA.reg);
   1244e:	4b13      	ldr	r3, [pc, #76]	; (1249c <dma_init+0x84>)
   12450:	681b      	ldr	r3, [r3, #0]
   12452:	3328      	adds	r3, #40	; 0x28
   12454:	001a      	movs	r2, r3
   12456:	4b0d      	ldr	r3, [pc, #52]	; (1248c <dma_init+0x74>)
   12458:	609a      	str	r2, [r3, #8]
	dmaDescriptorArray[0].srcaddr = &buffer_tx + DMA_BUFFER_LENGTH;
   1245a:	4b11      	ldr	r3, [pc, #68]	; (124a0 <dma_init+0x88>)
   1245c:	001a      	movs	r2, r3
   1245e:	4b0b      	ldr	r3, [pc, #44]	; (1248c <dma_init+0x74>)
   12460:	605a      	str	r2, [r3, #4]
	dmaDescriptorArray[0].descaddr = 0;
   12462:	4b0a      	ldr	r3, [pc, #40]	; (1248c <dma_init+0x74>)
   12464:	2200      	movs	r2, #0
   12466:	60da      	str	r2, [r3, #12]
	
	DMAC->CHID.reg = 0; // select channel 0
   12468:	4a07      	ldr	r2, [pc, #28]	; (12488 <dma_init+0x70>)
   1246a:	233f      	movs	r3, #63	; 0x3f
   1246c:	2100      	movs	r1, #0
   1246e:	54d1      	strb	r1, [r2, r3]
	DMAC->CHCTRLB.reg = DMAC_CHCTRLB_LVL(0) | DMAC_CHCTRLB_TRIGSRC(SERCOM5_DMAC_ID_TX) | DMAC_CHCTRLB_TRIGACT_BEAT;
   12470:	4b05      	ldr	r3, [pc, #20]	; (12488 <dma_init+0x70>)
   12472:	4a0c      	ldr	r2, [pc, #48]	; (124a4 <dma_init+0x8c>)
   12474:	645a      	str	r2, [r3, #68]	; 0x44
	
	DMAC->CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;		//Enable interrupt
   12476:	4a04      	ldr	r2, [pc, #16]	; (12488 <dma_init+0x70>)
   12478:	234d      	movs	r3, #77	; 0x4d
   1247a:	2102      	movs	r1, #2
   1247c:	54d1      	strb	r1, [r2, r3]
}
   1247e:	46c0      	nop			; (mov r8, r8)
   12480:	46bd      	mov	sp, r7
   12482:	bd80      	pop	{r7, pc}
   12484:	40000400 	.word	0x40000400
   12488:	41004800 	.word	0x41004800
   1248c:	20004650 	.word	0x20004650
   12490:	20004660 	.word	0x20004660
   12494:	00000f02 	.word	0x00000f02
   12498:	00001401 	.word	0x00001401
   1249c:	200046b0 	.word	0x200046b0
   124a0:	2000039d 	.word	0x2000039d
   124a4:	00800c00 	.word	0x00800c00

000124a8 <swap_num>:
* @fn			static void swap_num(short* a,short* b)
* @brief		Swap linker of two short integers
* @note			
*****************************************************************************/
static void swap_num(short* a,short* b)
{
   124a8:	b580      	push	{r7, lr}
   124aa:	b084      	sub	sp, #16
   124ac:	af00      	add	r7, sp, #0
   124ae:	6078      	str	r0, [r7, #4]
   124b0:	6039      	str	r1, [r7, #0]
	short t = *a;
   124b2:	230e      	movs	r3, #14
   124b4:	18fb      	adds	r3, r7, r3
   124b6:	687a      	ldr	r2, [r7, #4]
   124b8:	8812      	ldrh	r2, [r2, #0]
   124ba:	801a      	strh	r2, [r3, #0]
	*a = *b;
   124bc:	683b      	ldr	r3, [r7, #0]
   124be:	2200      	movs	r2, #0
   124c0:	5e9a      	ldrsh	r2, [r3, r2]
   124c2:	687b      	ldr	r3, [r7, #4]
   124c4:	801a      	strh	r2, [r3, #0]
	*b = t;
   124c6:	683b      	ldr	r3, [r7, #0]
   124c8:	220e      	movs	r2, #14
   124ca:	18ba      	adds	r2, r7, r2
   124cc:	8812      	ldrh	r2, [r2, #0]
   124ce:	801a      	strh	r2, [r3, #0]
}
   124d0:	46c0      	nop			; (mov r8, r8)
   124d2:	46bd      	mov	sp, r7
   124d4:	b004      	add	sp, #16
   124d6:	bd80      	pop	{r7, pc}

000124d8 <Adafruit358LCD_spi_select_device>:
* @fn			static void Adafruit358LCD_spi_select_device(void)
* @brief		Select device by pulling CS pin to GND
* @note
*****************************************************************************/
static void Adafruit358LCD_spi_select_device(void)
{
   124d8:	b580      	push	{r7, lr}
   124da:	af00      	add	r7, sp, #0
	DISPLAY_NCS_LOW();		
   124dc:	4b03      	ldr	r3, [pc, #12]	; (124ec <Adafruit358LCD_spi_select_device+0x14>)
   124de:	2280      	movs	r2, #128	; 0x80
   124e0:	0112      	lsls	r2, r2, #4
   124e2:	601a      	str	r2, [r3, #0]
}
   124e4:	46c0      	nop			; (mov r8, r8)
   124e6:	46bd      	mov	sp, r7
   124e8:	bd80      	pop	{r7, pc}
   124ea:	46c0      	nop			; (mov r8, r8)
   124ec:	41004414 	.word	0x41004414

000124f0 <Adafruit358LCD_spi_deselect_device>:
* @fn			static void Adafruit358LCD_spi_deselect_device(void)
* @brief		De-select device by returning CS pin to VDD
* @note
*****************************************************************************/
static void Adafruit358LCD_spi_deselect_device(void)
{
   124f0:	b580      	push	{r7, lr}
   124f2:	af00      	add	r7, sp, #0
	DISPLAY_NCS_HIGH();		
   124f4:	4b03      	ldr	r3, [pc, #12]	; (12504 <Adafruit358LCD_spi_deselect_device+0x14>)
   124f6:	2280      	movs	r2, #128	; 0x80
   124f8:	0112      	lsls	r2, r2, #4
   124fa:	601a      	str	r2, [r3, #0]
}
   124fc:	46c0      	nop			; (mov r8, r8)
   124fe:	46bd      	mov	sp, r7
   12500:	bd80      	pop	{r7, pc}
   12502:	46c0      	nop			; (mov r8, r8)
   12504:	41004418 	.word	0x41004418

00012508 <Adafruit358LCD_spi_send_stream>:
* @fn			static void Adafruit358LCD_spi_send_stream(uint8_t cmd)
* @brief		Send a command to LCD through SPI without CS
* @note
*****************************************************************************/
static void Adafruit358LCD_spi_send_stream(uint8_t cmd)
{
   12508:	b580      	push	{r7, lr}
   1250a:	b082      	sub	sp, #8
   1250c:	af00      	add	r7, sp, #0
   1250e:	0002      	movs	r2, r0
   12510:	1dfb      	adds	r3, r7, #7
   12512:	701a      	strb	r2, [r3, #0]
	sendSPI_DMA(cmd);
   12514:	1dfb      	adds	r3, r7, #7
   12516:	781b      	ldrb	r3, [r3, #0]
   12518:	0018      	movs	r0, r3
   1251a:	4b03      	ldr	r3, [pc, #12]	; (12528 <Adafruit358LCD_spi_send_stream+0x20>)
   1251c:	4798      	blx	r3
}
   1251e:	46c0      	nop			; (mov r8, r8)
   12520:	46bd      	mov	sp, r7
   12522:	b002      	add	sp, #8
   12524:	bd80      	pop	{r7, pc}
   12526:	46c0      	nop			; (mov r8, r8)
   12528:	000123b9 	.word	0x000123b9

0001252c <Adafruit358LCD_spi_send_16bit_stream>:
* @fn			static void Adafruit358LCD_spi_send_16bit_stream(uint16_t data)
* @brief		Send 16 bit data to LCD through SPI without CS or DC
* @note			Used for color information
*****************************************************************************/
static void Adafruit358LCD_spi_send_16bit_stream(uint16_t data)
{
   1252c:	b580      	push	{r7, lr}
   1252e:	b084      	sub	sp, #16
   12530:	af00      	add	r7, sp, #0
   12532:	0002      	movs	r2, r0
   12534:	1dbb      	adds	r3, r7, #6
   12536:	801a      	strh	r2, [r3, #0]
	uint8_t temp = data >> 8;
   12538:	1dbb      	adds	r3, r7, #6
   1253a:	881b      	ldrh	r3, [r3, #0]
   1253c:	0a1b      	lsrs	r3, r3, #8
   1253e:	b29a      	uxth	r2, r3
   12540:	230f      	movs	r3, #15
   12542:	18fb      	adds	r3, r7, r3
   12544:	701a      	strb	r2, [r3, #0]
	sendSPI_DMA(temp);
   12546:	230f      	movs	r3, #15
   12548:	18fb      	adds	r3, r7, r3
   1254a:	781b      	ldrb	r3, [r3, #0]
   1254c:	0018      	movs	r0, r3
   1254e:	4b06      	ldr	r3, [pc, #24]	; (12568 <Adafruit358LCD_spi_send_16bit_stream+0x3c>)
   12550:	4798      	blx	r3
	sendSPI_DMA(data);
   12552:	1dbb      	adds	r3, r7, #6
   12554:	881b      	ldrh	r3, [r3, #0]
   12556:	b2db      	uxtb	r3, r3
   12558:	0018      	movs	r0, r3
   1255a:	4b03      	ldr	r3, [pc, #12]	; (12568 <Adafruit358LCD_spi_send_16bit_stream+0x3c>)
   1255c:	4798      	blx	r3
}
   1255e:	46c0      	nop			; (mov r8, r8)
   12560:	46bd      	mov	sp, r7
   12562:	b004      	add	sp, #16
   12564:	bd80      	pop	{r7, pc}
   12566:	46c0      	nop			; (mov r8, r8)
   12568:	000123b9 	.word	0x000123b9

0001256c <Adafruit358LCD_spi_send_data16>:
* @fn			static void Adafruit358LCD_spi_send_data16(uint16_t data)
* @brief		Send 16 bit data to LCD through SPI
* @note			Used for color information
*****************************************************************************/
static void Adafruit358LCD_spi_send_data16(uint16_t data)
{
   1256c:	b580      	push	{r7, lr}
   1256e:	b084      	sub	sp, #16
   12570:	af00      	add	r7, sp, #0
   12572:	0002      	movs	r2, r0
   12574:	1dbb      	adds	r3, r7, #6
   12576:	801a      	strh	r2, [r3, #0]
	Adafruit358LCD_spi_select_device();
   12578:	4b0f      	ldr	r3, [pc, #60]	; (125b8 <Adafruit358LCD_spi_send_data16+0x4c>)
   1257a:	4798      	blx	r3
	DISPLAY_DC_HIGH();
   1257c:	4b0f      	ldr	r3, [pc, #60]	; (125bc <Adafruit358LCD_spi_send_data16+0x50>)
   1257e:	2280      	movs	r2, #128	; 0x80
   12580:	00d2      	lsls	r2, r2, #3
   12582:	601a      	str	r2, [r3, #0]
	uint8_t temp = data >> 8;
   12584:	1dbb      	adds	r3, r7, #6
   12586:	881b      	ldrh	r3, [r3, #0]
   12588:	0a1b      	lsrs	r3, r3, #8
   1258a:	b29a      	uxth	r2, r3
   1258c:	230f      	movs	r3, #15
   1258e:	18fb      	adds	r3, r7, r3
   12590:	701a      	strb	r2, [r3, #0]
	sendSPI_DMA(temp);
   12592:	230f      	movs	r3, #15
   12594:	18fb      	adds	r3, r7, r3
   12596:	781b      	ldrb	r3, [r3, #0]
   12598:	0018      	movs	r0, r3
   1259a:	4b09      	ldr	r3, [pc, #36]	; (125c0 <Adafruit358LCD_spi_send_data16+0x54>)
   1259c:	4798      	blx	r3
	sendSPI_DMA(data);
   1259e:	1dbb      	adds	r3, r7, #6
   125a0:	881b      	ldrh	r3, [r3, #0]
   125a2:	b2db      	uxtb	r3, r3
   125a4:	0018      	movs	r0, r3
   125a6:	4b06      	ldr	r3, [pc, #24]	; (125c0 <Adafruit358LCD_spi_send_data16+0x54>)
   125a8:	4798      	blx	r3
	Adafruit358LCD_spi_deselect_device();
   125aa:	4b06      	ldr	r3, [pc, #24]	; (125c4 <Adafruit358LCD_spi_send_data16+0x58>)
   125ac:	4798      	blx	r3
}
   125ae:	46c0      	nop			; (mov r8, r8)
   125b0:	46bd      	mov	sp, r7
   125b2:	b004      	add	sp, #16
   125b4:	bd80      	pop	{r7, pc}
   125b6:	46c0      	nop			; (mov r8, r8)
   125b8:	000124d9 	.word	0x000124d9
   125bc:	41004418 	.word	0x41004418
   125c0:	000123b9 	.word	0x000123b9
   125c4:	000124f1 	.word	0x000124f1

000125c8 <sendCommands>:
* @fn			static void sendCommands (const uint8_t *cmds, uint8_t length)
* @brief		Parse and send array of commands thru SPI
* @note			
*****************************************************************************/
static void sendCommands (const uint8_t *cmds, uint8_t length)
{
   125c8:	b580      	push	{r7, lr}
   125ca:	b084      	sub	sp, #16
   125cc:	af00      	add	r7, sp, #0
   125ce:	6078      	str	r0, [r7, #4]
   125d0:	000a      	movs	r2, r1
   125d2:	1cfb      	adds	r3, r7, #3
   125d4:	701a      	strb	r2, [r3, #0]

	uint8_t numCommands, numData, waitTime;
	numCommands = length;
   125d6:	230f      	movs	r3, #15
   125d8:	18fb      	adds	r3, r7, r3
   125da:	1cfa      	adds	r2, r7, #3
   125dc:	7812      	ldrb	r2, [r2, #0]
   125de:	701a      	strb	r2, [r3, #0]
	
	Adafruit358LCD_spi_select_device();
   125e0:	4b29      	ldr	r3, [pc, #164]	; (12688 <sendCommands+0xc0>)
   125e2:	4798      	blx	r3
	
	while (numCommands--)
   125e4:	e040      	b.n	12668 <sendCommands+0xa0>
	{
		DISPLAY_DC_LOW();
   125e6:	4b29      	ldr	r3, [pc, #164]	; (1268c <sendCommands+0xc4>)
   125e8:	2280      	movs	r2, #128	; 0x80
   125ea:	00d2      	lsls	r2, r2, #3
   125ec:	601a      	str	r2, [r3, #0]
		Adafruit358LCD_spi_send_stream(*cmds++);
   125ee:	687b      	ldr	r3, [r7, #4]
   125f0:	1c5a      	adds	r2, r3, #1
   125f2:	607a      	str	r2, [r7, #4]
   125f4:	781b      	ldrb	r3, [r3, #0]
   125f6:	0018      	movs	r0, r3
   125f8:	4b25      	ldr	r3, [pc, #148]	; (12690 <sendCommands+0xc8>)
   125fa:	4798      	blx	r3
		numData = *cmds++;	// # of data bytes to send
   125fc:	687b      	ldr	r3, [r7, #4]
   125fe:	1c5a      	adds	r2, r3, #1
   12600:	607a      	str	r2, [r7, #4]
   12602:	220e      	movs	r2, #14
   12604:	18ba      	adds	r2, r7, r2
   12606:	781b      	ldrb	r3, [r3, #0]
   12608:	7013      	strb	r3, [r2, #0]
		
		DISPLAY_DC_HIGH();
   1260a:	4b22      	ldr	r3, [pc, #136]	; (12694 <sendCommands+0xcc>)
   1260c:	2280      	movs	r2, #128	; 0x80
   1260e:	00d2      	lsls	r2, r2, #3
   12610:	601a      	str	r2, [r3, #0]
		while (numData--)	// Send each data byte...
   12612:	e006      	b.n	12622 <sendCommands+0x5a>
		{
			Adafruit358LCD_spi_send_stream(*cmds++);
   12614:	687b      	ldr	r3, [r7, #4]
   12616:	1c5a      	adds	r2, r3, #1
   12618:	607a      	str	r2, [r7, #4]
   1261a:	781b      	ldrb	r3, [r3, #0]
   1261c:	0018      	movs	r0, r3
   1261e:	4b1c      	ldr	r3, [pc, #112]	; (12690 <sendCommands+0xc8>)
   12620:	4798      	blx	r3
		while (numData--)	// Send each data byte...
   12622:	230e      	movs	r3, #14
   12624:	18fb      	adds	r3, r7, r3
   12626:	781b      	ldrb	r3, [r3, #0]
   12628:	220e      	movs	r2, #14
   1262a:	18ba      	adds	r2, r7, r2
   1262c:	1e59      	subs	r1, r3, #1
   1262e:	7011      	strb	r1, [r2, #0]
   12630:	2b00      	cmp	r3, #0
   12632:	d1ef      	bne.n	12614 <sendCommands+0x4c>
		}
		
		waitTime = *cmds++;     // Read post-command delay time (ms)
   12634:	687b      	ldr	r3, [r7, #4]
   12636:	1c5a      	adds	r2, r3, #1
   12638:	607a      	str	r2, [r7, #4]
   1263a:	220d      	movs	r2, #13
   1263c:	18ba      	adds	r2, r7, r2
   1263e:	781b      	ldrb	r3, [r3, #0]
   12640:	7013      	strb	r3, [r2, #0]
		if (waitTime!=0)
   12642:	230d      	movs	r3, #13
   12644:	18fb      	adds	r3, r7, r3
   12646:	781b      	ldrb	r3, [r3, #0]
   12648:	2b00      	cmp	r3, #0
   1264a:	d00d      	beq.n	12668 <sendCommands+0xa0>
		{
			delay_cycles_ms((waitTime==255 ? 500 : waitTime));
   1264c:	230d      	movs	r3, #13
   1264e:	18fb      	adds	r3, r7, r3
   12650:	781b      	ldrb	r3, [r3, #0]
   12652:	2bff      	cmp	r3, #255	; 0xff
   12654:	d003      	beq.n	1265e <sendCommands+0x96>
   12656:	230d      	movs	r3, #13
   12658:	18fb      	adds	r3, r7, r3
   1265a:	781b      	ldrb	r3, [r3, #0]
   1265c:	e001      	b.n	12662 <sendCommands+0x9a>
   1265e:	23fa      	movs	r3, #250	; 0xfa
   12660:	005b      	lsls	r3, r3, #1
   12662:	0018      	movs	r0, r3
   12664:	4b0c      	ldr	r3, [pc, #48]	; (12698 <sendCommands+0xd0>)
   12666:	4798      	blx	r3
	while (numCommands--)
   12668:	230f      	movs	r3, #15
   1266a:	18fb      	adds	r3, r7, r3
   1266c:	781b      	ldrb	r3, [r3, #0]
   1266e:	220f      	movs	r2, #15
   12670:	18ba      	adds	r2, r7, r2
   12672:	1e59      	subs	r1, r3, #1
   12674:	7011      	strb	r1, [r2, #0]
   12676:	2b00      	cmp	r3, #0
   12678:	d1b5      	bne.n	125e6 <sendCommands+0x1e>
		}
	}
	
	Adafruit358LCD_spi_deselect_device();
   1267a:	4b08      	ldr	r3, [pc, #32]	; (1269c <sendCommands+0xd4>)
   1267c:	4798      	blx	r3
}
   1267e:	46c0      	nop			; (mov r8, r8)
   12680:	46bd      	mov	sp, r7
   12682:	b004      	add	sp, #16
   12684:	bd80      	pop	{r7, pc}
   12686:	46c0      	nop			; (mov r8, r8)
   12688:	000124d9 	.word	0x000124d9
   1268c:	41004414 	.word	0x41004414
   12690:	00012509 	.word	0x00012509
   12694:	41004418 	.word	0x41004418
   12698:	000230b1 	.word	0x000230b1
   1269c:	000124f1 	.word	0x000124f1

000126a0 <lcd_pin_config>:
* @fn			static void lcd_pin_config(void)
* @brief		Initialize pins for LCD
* @note			
*****************************************************************************/
static void lcd_pin_config(void)
{
   126a0:	b580      	push	{r7, lr}
   126a2:	b082      	sub	sp, #8
   126a4:	af00      	add	r7, sp, #0
	/* Configure LCD control pins as outputs, turn them on */
	struct port_config pin_conf;
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   126a6:	1d3b      	adds	r3, r7, #4
   126a8:	2201      	movs	r2, #1
   126aa:	701a      	strb	r2, [r3, #0]
	
	delay_cycles_ms(100);
   126ac:	2064      	movs	r0, #100	; 0x64
   126ae:	4b11      	ldr	r3, [pc, #68]	; (126f4 <lcd_pin_config+0x54>)
   126b0:	4798      	blx	r3
	port_pin_set_config(LCD_RST, &pin_conf);
   126b2:	1d3b      	adds	r3, r7, #4
   126b4:	0019      	movs	r1, r3
   126b6:	2036      	movs	r0, #54	; 0x36
   126b8:	4b0f      	ldr	r3, [pc, #60]	; (126f8 <lcd_pin_config+0x58>)
   126ba:	4798      	blx	r3
	port_pin_set_output_level(LCD_RST, 0);		//LCD Reset
   126bc:	2100      	movs	r1, #0
   126be:	2036      	movs	r0, #54	; 0x36
   126c0:	4b0e      	ldr	r3, [pc, #56]	; (126fc <lcd_pin_config+0x5c>)
   126c2:	4798      	blx	r3
	delay_cycles_ms(50);
   126c4:	2032      	movs	r0, #50	; 0x32
   126c6:	4b0b      	ldr	r3, [pc, #44]	; (126f4 <lcd_pin_config+0x54>)
   126c8:	4798      	blx	r3
	port_pin_set_output_level(LCD_RST, 1);		//LCD Enable
   126ca:	2101      	movs	r1, #1
   126cc:	2036      	movs	r0, #54	; 0x36
   126ce:	4b0b      	ldr	r3, [pc, #44]	; (126fc <lcd_pin_config+0x5c>)
   126d0:	4798      	blx	r3
	
	port_pin_set_config(LCD_DC, &pin_conf);
   126d2:	1d3b      	adds	r3, r7, #4
   126d4:	0019      	movs	r1, r3
   126d6:	200a      	movs	r0, #10
   126d8:	4b07      	ldr	r3, [pc, #28]	; (126f8 <lcd_pin_config+0x58>)
   126da:	4798      	blx	r3
	port_pin_set_output_level(LCD_DC, 1);		//LCD_DC pin
   126dc:	2101      	movs	r1, #1
   126de:	200a      	movs	r0, #10
   126e0:	4b06      	ldr	r3, [pc, #24]	; (126fc <lcd_pin_config+0x5c>)
   126e2:	4798      	blx	r3
	delay_cycles_ms(100);
   126e4:	2064      	movs	r0, #100	; 0x64
   126e6:	4b03      	ldr	r3, [pc, #12]	; (126f4 <lcd_pin_config+0x54>)
   126e8:	4798      	blx	r3
}
   126ea:	46c0      	nop			; (mov r8, r8)
   126ec:	46bd      	mov	sp, r7
   126ee:	b002      	add	sp, #8
   126f0:	bd80      	pop	{r7, pc}
   126f2:	46c0      	nop			; (mov r8, r8)
   126f4:	000230b1 	.word	0x000230b1
   126f8:	000299a1 	.word	0x000299a1
   126fc:	000121e9 	.word	0x000121e9

00012700 <lcd_spi_init>:
* @fn			static void lcd_spi_init(void)
* @brief		Initialize SPI for LCD
* @note			
*****************************************************************************/
static void lcd_spi_init(void)
{	
   12700:	b580      	push	{r7, lr}
   12702:	b090      	sub	sp, #64	; 0x40
   12704:	af00      	add	r7, sp, #0
	struct spi_config config_spi_master;
	struct spi_slave_inst_config slave_dev_config;
	/* Configure and initialize software device instance of peripheral slave */
	spi_slave_inst_get_config_defaults(&slave_dev_config);
   12706:	1d3b      	adds	r3, r7, #4
   12708:	0018      	movs	r0, r3
   1270a:	4b1d      	ldr	r3, [pc, #116]	; (12780 <lcd_spi_init+0x80>)
   1270c:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
   1270e:	1d3b      	adds	r3, r7, #4
   12710:	220b      	movs	r2, #11
   12712:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave, &slave_dev_config);
   12714:	1d3a      	adds	r2, r7, #4
   12716:	4b1b      	ldr	r3, [pc, #108]	; (12784 <lcd_spi_init+0x84>)
   12718:	0011      	movs	r1, r2
   1271a:	0018      	movs	r0, r3
   1271c:	4b1a      	ldr	r3, [pc, #104]	; (12788 <lcd_spi_init+0x88>)
   1271e:	4798      	blx	r3
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
   12720:	2308      	movs	r3, #8
   12722:	18fb      	adds	r3, r7, r3
   12724:	0018      	movs	r0, r3
   12726:	4b19      	ldr	r3, [pc, #100]	; (1278c <lcd_spi_init+0x8c>)
   12728:	4798      	blx	r3
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
   1272a:	2308      	movs	r3, #8
   1272c:	18fb      	adds	r3, r7, r3
   1272e:	2298      	movs	r2, #152	; 0x98
   12730:	0352      	lsls	r2, r2, #13
   12732:	60da      	str	r2, [r3, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
   12734:	2308      	movs	r3, #8
   12736:	18fb      	adds	r3, r7, r3
   12738:	4a15      	ldr	r2, [pc, #84]	; (12790 <lcd_spi_init+0x90>)
   1273a:	629a      	str	r2, [r3, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
   1273c:	2308      	movs	r3, #8
   1273e:	18fb      	adds	r3, r7, r3
   12740:	4a14      	ldr	r2, [pc, #80]	; (12794 <lcd_spi_init+0x94>)
   12742:	62da      	str	r2, [r3, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
   12744:	2308      	movs	r3, #8
   12746:	18fb      	adds	r3, r7, r3
   12748:	2201      	movs	r2, #1
   1274a:	4252      	negs	r2, r2
   1274c:	631a      	str	r2, [r3, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
   1274e:	2308      	movs	r3, #8
   12750:	18fb      	adds	r3, r7, r3
   12752:	4a11      	ldr	r2, [pc, #68]	; (12798 <lcd_spi_init+0x98>)
   12754:	635a      	str	r2, [r3, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  SPI_FREQ;
   12756:	2308      	movs	r3, #8
   12758:	18fb      	adds	r3, r7, r3
   1275a:	4a10      	ldr	r2, [pc, #64]	; (1279c <lcd_spi_init+0x9c>)
   1275c:	619a      	str	r2, [r3, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
   1275e:	2308      	movs	r3, #8
   12760:	18fa      	adds	r2, r7, r3
   12762:	490f      	ldr	r1, [pc, #60]	; (127a0 <lcd_spi_init+0xa0>)
   12764:	4b0f      	ldr	r3, [pc, #60]	; (127a4 <lcd_spi_init+0xa4>)
   12766:	0018      	movs	r0, r3
   12768:	4b0f      	ldr	r3, [pc, #60]	; (127a8 <lcd_spi_init+0xa8>)
   1276a:	4798      	blx	r3
	spi_enable(&spi_master_instance);
   1276c:	4b0d      	ldr	r3, [pc, #52]	; (127a4 <lcd_spi_init+0xa4>)
   1276e:	0018      	movs	r0, r3
   12770:	4b0e      	ldr	r3, [pc, #56]	; (127ac <lcd_spi_init+0xac>)
   12772:	4798      	blx	r3
	dma_init();
   12774:	4b0e      	ldr	r3, [pc, #56]	; (127b0 <lcd_spi_init+0xb0>)
   12776:	4798      	blx	r3
}
   12778:	46c0      	nop			; (mov r8, r8)
   1277a:	46bd      	mov	sp, r7
   1277c:	b010      	add	sp, #64	; 0x40
   1277e:	bd80      	pop	{r7, pc}
   12780:	000122e1 	.word	0x000122e1
   12784:	200046ec 	.word	0x200046ec
   12788:	00012305 	.word	0x00012305
   1278c:	0001225d 	.word	0x0001225d
   12790:	00220003 	.word	0x00220003
   12794:	00230003 	.word	0x00230003
   12798:	00150002 	.word	0x00150002
   1279c:	016e3600 	.word	0x016e3600
   127a0:	42001c00 	.word	0x42001c00
   127a4:	200046b0 	.word	0x200046b0
   127a8:	0002ae21 	.word	0x0002ae21
   127ac:	00012369 	.word	0x00012369
   127b0:	00012419 	.word	0x00012419

000127b4 <rgb565>:
* @fn			uint16_t rgb565(uint8_t red, uint8_t green, uint8_t blue)
* @brief		Convert RGB888 value to RGB565 16-bit color data
* @note
*****************************************************************************/
uint16_t rgb565(uint8_t red, uint8_t green, uint8_t blue)
{
   127b4:	b590      	push	{r4, r7, lr}
   127b6:	b083      	sub	sp, #12
   127b8:	af00      	add	r7, sp, #0
   127ba:	0004      	movs	r4, r0
   127bc:	0008      	movs	r0, r1
   127be:	0011      	movs	r1, r2
   127c0:	1dfb      	adds	r3, r7, #7
   127c2:	1c22      	adds	r2, r4, #0
   127c4:	701a      	strb	r2, [r3, #0]
   127c6:	1dbb      	adds	r3, r7, #6
   127c8:	1c02      	adds	r2, r0, #0
   127ca:	701a      	strb	r2, [r3, #0]
   127cc:	1d7b      	adds	r3, r7, #5
   127ce:	1c0a      	adds	r2, r1, #0
   127d0:	701a      	strb	r2, [r3, #0]
	return ((((31*(red+4))/255)<<11) | (((63*(green+2))/255)<<5) | ((31*(blue+4))/255));
   127d2:	1dfb      	adds	r3, r7, #7
   127d4:	781b      	ldrb	r3, [r3, #0]
   127d6:	1d1a      	adds	r2, r3, #4
   127d8:	0013      	movs	r3, r2
   127da:	015b      	lsls	r3, r3, #5
   127dc:	1a9a      	subs	r2, r3, r2
   127de:	4b14      	ldr	r3, [pc, #80]	; (12830 <rgb565+0x7c>)
   127e0:	21ff      	movs	r1, #255	; 0xff
   127e2:	0010      	movs	r0, r2
   127e4:	4798      	blx	r3
   127e6:	0003      	movs	r3, r0
   127e8:	02db      	lsls	r3, r3, #11
   127ea:	b21c      	sxth	r4, r3
   127ec:	1dbb      	adds	r3, r7, #6
   127ee:	781b      	ldrb	r3, [r3, #0]
   127f0:	1c9a      	adds	r2, r3, #2
   127f2:	0013      	movs	r3, r2
   127f4:	019b      	lsls	r3, r3, #6
   127f6:	1a9a      	subs	r2, r3, r2
   127f8:	4b0d      	ldr	r3, [pc, #52]	; (12830 <rgb565+0x7c>)
   127fa:	21ff      	movs	r1, #255	; 0xff
   127fc:	0010      	movs	r0, r2
   127fe:	4798      	blx	r3
   12800:	0003      	movs	r3, r0
   12802:	015b      	lsls	r3, r3, #5
   12804:	b21b      	sxth	r3, r3
   12806:	4323      	orrs	r3, r4
   12808:	b21c      	sxth	r4, r3
   1280a:	1d7b      	adds	r3, r7, #5
   1280c:	781b      	ldrb	r3, [r3, #0]
   1280e:	1d1a      	adds	r2, r3, #4
   12810:	0013      	movs	r3, r2
   12812:	015b      	lsls	r3, r3, #5
   12814:	1a9a      	subs	r2, r3, r2
   12816:	4b06      	ldr	r3, [pc, #24]	; (12830 <rgb565+0x7c>)
   12818:	21ff      	movs	r1, #255	; 0xff
   1281a:	0010      	movs	r0, r2
   1281c:	4798      	blx	r3
   1281e:	0003      	movs	r3, r0
   12820:	b21b      	sxth	r3, r3
   12822:	4323      	orrs	r3, r4
   12824:	b21b      	sxth	r3, r3
   12826:	b29b      	uxth	r3, r3
}
   12828:	0018      	movs	r0, r3
   1282a:	46bd      	mov	sp, r7
   1282c:	b003      	add	sp, #12
   1282e:	bd90      	pop	{r4, r7, pc}
   12830:	00035b05 	.word	0x00035b05

00012834 <lcd_init>:
* @fn			void lcd_init(void)
* @brief		Initialize LCD settings
* @note			
*****************************************************************************/
void lcd_init(void)
{
   12834:	b580      	push	{r7, lr}
   12836:	af00      	add	r7, sp, #0
	lcd_pin_config();
   12838:	4b0a      	ldr	r3, [pc, #40]	; (12864 <lcd_init+0x30>)
   1283a:	4798      	blx	r3
	delay_cycles_ms(1000);
   1283c:	23fa      	movs	r3, #250	; 0xfa
   1283e:	009b      	lsls	r3, r3, #2
   12840:	0018      	movs	r0, r3
   12842:	4b09      	ldr	r3, [pc, #36]	; (12868 <lcd_init+0x34>)
   12844:	4798      	blx	r3
	lcd_spi_init();
   12846:	4b09      	ldr	r3, [pc, #36]	; (1286c <lcd_init+0x38>)
   12848:	4798      	blx	r3
	delay_cycles_ms(1000);
   1284a:	23fa      	movs	r3, #250	; 0xfa
   1284c:	009b      	lsls	r3, r3, #2
   1284e:	0018      	movs	r0, r3
   12850:	4b05      	ldr	r3, [pc, #20]	; (12868 <lcd_init+0x34>)
   12852:	4798      	blx	r3
		ST7735_NORON, 0, 10,	//Normal display on
		ST7735_DISPON, 0, 100,            // Set display on
		ST7735_MADCTL, 1, MADCTL_MX | MADCTL_MV | MADCTL_RGB, 10		//Default to rotation 3
	};
	
	sendCommands(ST7735_cmds, 22);
   12854:	4b06      	ldr	r3, [pc, #24]	; (12870 <lcd_init+0x3c>)
   12856:	2116      	movs	r1, #22
   12858:	0018      	movs	r0, r3
   1285a:	4b06      	ldr	r3, [pc, #24]	; (12874 <lcd_init+0x40>)
   1285c:	4798      	blx	r3
}
   1285e:	46c0      	nop			; (mov r8, r8)
   12860:	46bd      	mov	sp, r7
   12862:	bd80      	pop	{r7, pc}
   12864:	000126a1 	.word	0x000126a1
   12868:	000230b1 	.word	0x000230b1
   1286c:	00012701 	.word	0x00012701
   12870:	20000000 	.word	0x20000000
   12874:	000125c9 	.word	0x000125c9

00012878 <LCD_setAddr>:
/**************************************************************************//**
* @fn			void LCD_setAddr(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
* @brief		Set pixel memory address to write to
* @note
*****************************************************************************/
void LCD_setAddr(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
   12878:	b5b0      	push	{r4, r5, r7, lr}
   1287a:	b088      	sub	sp, #32
   1287c:	af00      	add	r7, sp, #0
   1287e:	0005      	movs	r5, r0
   12880:	000c      	movs	r4, r1
   12882:	0010      	movs	r0, r2
   12884:	0019      	movs	r1, r3
   12886:	1dfb      	adds	r3, r7, #7
   12888:	1c2a      	adds	r2, r5, #0
   1288a:	701a      	strb	r2, [r3, #0]
   1288c:	1dbb      	adds	r3, r7, #6
   1288e:	1c22      	adds	r2, r4, #0
   12890:	701a      	strb	r2, [r3, #0]
   12892:	1d7b      	adds	r3, r7, #5
   12894:	1c02      	adds	r2, r0, #0
   12896:	701a      	strb	r2, [r3, #0]
   12898:	1d3b      	adds	r3, r7, #4
   1289a:	1c0a      	adds	r2, r1, #0
   1289c:	701a      	strb	r2, [r3, #0]
	uint8_t ST7735_cmds[]  =
   1289e:	230c      	movs	r3, #12
   128a0:	18fb      	adds	r3, r7, r3
   128a2:	222a      	movs	r2, #42	; 0x2a
   128a4:	701a      	strb	r2, [r3, #0]
   128a6:	230c      	movs	r3, #12
   128a8:	18fb      	adds	r3, r7, r3
   128aa:	2204      	movs	r2, #4
   128ac:	705a      	strb	r2, [r3, #1]
   128ae:	230c      	movs	r3, #12
   128b0:	18fb      	adds	r3, r7, r3
   128b2:	2200      	movs	r2, #0
   128b4:	709a      	strb	r2, [r3, #2]
   128b6:	230c      	movs	r3, #12
   128b8:	18fb      	adds	r3, r7, r3
   128ba:	1dfa      	adds	r2, r7, #7
   128bc:	7812      	ldrb	r2, [r2, #0]
   128be:	70da      	strb	r2, [r3, #3]
   128c0:	230c      	movs	r3, #12
   128c2:	18fb      	adds	r3, r7, r3
   128c4:	2200      	movs	r2, #0
   128c6:	711a      	strb	r2, [r3, #4]
   128c8:	230c      	movs	r3, #12
   128ca:	18fb      	adds	r3, r7, r3
   128cc:	1d7a      	adds	r2, r7, #5
   128ce:	7812      	ldrb	r2, [r2, #0]
   128d0:	715a      	strb	r2, [r3, #5]
   128d2:	230c      	movs	r3, #12
   128d4:	18fb      	adds	r3, r7, r3
   128d6:	2200      	movs	r2, #0
   128d8:	719a      	strb	r2, [r3, #6]
   128da:	230c      	movs	r3, #12
   128dc:	18fb      	adds	r3, r7, r3
   128de:	222b      	movs	r2, #43	; 0x2b
   128e0:	71da      	strb	r2, [r3, #7]
   128e2:	230c      	movs	r3, #12
   128e4:	18fb      	adds	r3, r7, r3
   128e6:	2204      	movs	r2, #4
   128e8:	721a      	strb	r2, [r3, #8]
   128ea:	230c      	movs	r3, #12
   128ec:	18fb      	adds	r3, r7, r3
   128ee:	2200      	movs	r2, #0
   128f0:	725a      	strb	r2, [r3, #9]
   128f2:	230c      	movs	r3, #12
   128f4:	18fb      	adds	r3, r7, r3
   128f6:	1dba      	adds	r2, r7, #6
   128f8:	7812      	ldrb	r2, [r2, #0]
   128fa:	729a      	strb	r2, [r3, #10]
   128fc:	230c      	movs	r3, #12
   128fe:	18fb      	adds	r3, r7, r3
   12900:	2200      	movs	r2, #0
   12902:	72da      	strb	r2, [r3, #11]
   12904:	230c      	movs	r3, #12
   12906:	18fb      	adds	r3, r7, r3
   12908:	1d3a      	adds	r2, r7, #4
   1290a:	7812      	ldrb	r2, [r2, #0]
   1290c:	731a      	strb	r2, [r3, #12]
   1290e:	230c      	movs	r3, #12
   12910:	18fb      	adds	r3, r7, r3
   12912:	2200      	movs	r2, #0
   12914:	735a      	strb	r2, [r3, #13]
   12916:	230c      	movs	r3, #12
   12918:	18fb      	adds	r3, r7, r3
   1291a:	222c      	movs	r2, #44	; 0x2c
   1291c:	739a      	strb	r2, [r3, #14]
   1291e:	230c      	movs	r3, #12
   12920:	18fb      	adds	r3, r7, r3
   12922:	2200      	movs	r2, #0
   12924:	73da      	strb	r2, [r3, #15]
   12926:	230c      	movs	r3, #12
   12928:	18fb      	adds	r3, r7, r3
   1292a:	2205      	movs	r2, #5
   1292c:	741a      	strb	r2, [r3, #16]
	{
		ST7735_CASET, 4, 0x00, x0, 0x00, x1, 0,		
		ST7735_RASET, 4, 0x00, y0, 0x00, y1, 0,		
		ST7735_RAMWR, 0, 5				
	};
	sendCommands(ST7735_cmds, 3);
   1292e:	230c      	movs	r3, #12
   12930:	18fb      	adds	r3, r7, r3
   12932:	2103      	movs	r1, #3
   12934:	0018      	movs	r0, r3
   12936:	4b03      	ldr	r3, [pc, #12]	; (12944 <LCD_setAddr+0xcc>)
   12938:	4798      	blx	r3
}
   1293a:	46c0      	nop			; (mov r8, r8)
   1293c:	46bd      	mov	sp, r7
   1293e:	b008      	add	sp, #32
   12940:	bdb0      	pop	{r4, r5, r7, pc}
   12942:	46c0      	nop			; (mov r8, r8)
   12944:	000125c9 	.word	0x000125c9

00012948 <LCD_drawPixel>:
/**************************************************************************//**
* @fn			void LCD_drawPixel(uint8_t x, uint8_t y, uint16_t color)
* @brief		Draw a single pixel to a color
* @note
*****************************************************************************/
void LCD_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
   12948:	b590      	push	{r4, r7, lr}
   1294a:	b083      	sub	sp, #12
   1294c:	af00      	add	r7, sp, #0
   1294e:	0004      	movs	r4, r0
   12950:	0008      	movs	r0, r1
   12952:	0011      	movs	r1, r2
   12954:	1dfb      	adds	r3, r7, #7
   12956:	1c22      	adds	r2, r4, #0
   12958:	701a      	strb	r2, [r3, #0]
   1295a:	1dbb      	adds	r3, r7, #6
   1295c:	1c02      	adds	r2, r0, #0
   1295e:	701a      	strb	r2, [r3, #0]
   12960:	1d3b      	adds	r3, r7, #4
   12962:	1c0a      	adds	r2, r1, #0
   12964:	801a      	strh	r2, [r3, #0]
	LCD_setAddr(x,y,x,y);
   12966:	1dbb      	adds	r3, r7, #6
   12968:	781c      	ldrb	r4, [r3, #0]
   1296a:	1dfb      	adds	r3, r7, #7
   1296c:	781a      	ldrb	r2, [r3, #0]
   1296e:	1dbb      	adds	r3, r7, #6
   12970:	7819      	ldrb	r1, [r3, #0]
   12972:	1dfb      	adds	r3, r7, #7
   12974:	7818      	ldrb	r0, [r3, #0]
   12976:	0023      	movs	r3, r4
   12978:	4c05      	ldr	r4, [pc, #20]	; (12990 <LCD_drawPixel+0x48>)
   1297a:	47a0      	blx	r4
	Adafruit358LCD_spi_send_data16(color);
   1297c:	1d3b      	adds	r3, r7, #4
   1297e:	881b      	ldrh	r3, [r3, #0]
   12980:	0018      	movs	r0, r3
   12982:	4b04      	ldr	r3, [pc, #16]	; (12994 <LCD_drawPixel+0x4c>)
   12984:	4798      	blx	r3
}
   12986:	46c0      	nop			; (mov r8, r8)
   12988:	46bd      	mov	sp, r7
   1298a:	b003      	add	sp, #12
   1298c:	bd90      	pop	{r4, r7, pc}
   1298e:	46c0      	nop			; (mov r8, r8)
   12990:	00012879 	.word	0x00012879
   12994:	0001256d 	.word	0x0001256d

00012998 <LCD_drawBlock>:
/**************************************************************************//**
* @fn			void LCD_drawBlock(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint16_t color)
* @brief		Draw a colored block at coordinates
* @note
*****************************************************************************/
void LCD_drawBlock(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint16_t color) {
   12998:	b5b0      	push	{r4, r5, r7, lr}
   1299a:	b084      	sub	sp, #16
   1299c:	af00      	add	r7, sp, #0
   1299e:	0005      	movs	r5, r0
   129a0:	000c      	movs	r4, r1
   129a2:	0010      	movs	r0, r2
   129a4:	0019      	movs	r1, r3
   129a6:	1dfb      	adds	r3, r7, #7
   129a8:	1c2a      	adds	r2, r5, #0
   129aa:	701a      	strb	r2, [r3, #0]
   129ac:	1dbb      	adds	r3, r7, #6
   129ae:	1c22      	adds	r2, r4, #0
   129b0:	701a      	strb	r2, [r3, #0]
   129b2:	1d7b      	adds	r3, r7, #5
   129b4:	1c02      	adds	r2, r0, #0
   129b6:	701a      	strb	r2, [r3, #0]
   129b8:	1d3b      	adds	r3, r7, #4
   129ba:	1c0a      	adds	r2, r1, #0
   129bc:	701a      	strb	r2, [r3, #0]
	int i;
	
	if (x0 > x1) {
   129be:	1dfb      	adds	r3, r7, #7
   129c0:	781a      	ldrb	r2, [r3, #0]
   129c2:	1d7b      	adds	r3, r7, #5
   129c4:	781b      	ldrb	r3, [r3, #0]
   129c6:	429a      	cmp	r2, r3
   129c8:	d905      	bls.n	129d6 <LCD_drawBlock+0x3e>
		swap_num(&x0, &x1);
   129ca:	1d7a      	adds	r2, r7, #5
   129cc:	1dfb      	adds	r3, r7, #7
   129ce:	0011      	movs	r1, r2
   129d0:	0018      	movs	r0, r3
   129d2:	4b21      	ldr	r3, [pc, #132]	; (12a58 <LCD_drawBlock+0xc0>)
   129d4:	4798      	blx	r3
	}
	if (y0 > y1) {
   129d6:	1dbb      	adds	r3, r7, #6
   129d8:	781a      	ldrb	r2, [r3, #0]
   129da:	1d3b      	adds	r3, r7, #4
   129dc:	781b      	ldrb	r3, [r3, #0]
   129de:	429a      	cmp	r2, r3
   129e0:	d905      	bls.n	129ee <LCD_drawBlock+0x56>
		swap_num(&y0, &y1);
   129e2:	1d3a      	adds	r2, r7, #4
   129e4:	1dbb      	adds	r3, r7, #6
   129e6:	0011      	movs	r1, r2
   129e8:	0018      	movs	r0, r3
   129ea:	4b1b      	ldr	r3, [pc, #108]	; (12a58 <LCD_drawBlock+0xc0>)
   129ec:	4798      	blx	r3
	}
	
	LCD_setAddr(x0, y0, x1, y1);
   129ee:	1dfb      	adds	r3, r7, #7
   129f0:	7818      	ldrb	r0, [r3, #0]
   129f2:	1dbb      	adds	r3, r7, #6
   129f4:	7819      	ldrb	r1, [r3, #0]
   129f6:	1d7b      	adds	r3, r7, #5
   129f8:	781a      	ldrb	r2, [r3, #0]
   129fa:	1d3b      	adds	r3, r7, #4
   129fc:	781b      	ldrb	r3, [r3, #0]
   129fe:	4c17      	ldr	r4, [pc, #92]	; (12a5c <LCD_drawBlock+0xc4>)
   12a00:	47a0      	blx	r4
	
	Adafruit358LCD_spi_select_device();		//Manually control CS
   12a02:	4b17      	ldr	r3, [pc, #92]	; (12a60 <LCD_drawBlock+0xc8>)
   12a04:	4798      	blx	r3
	DISPLAY_DC_HIGH();
   12a06:	4b17      	ldr	r3, [pc, #92]	; (12a64 <LCD_drawBlock+0xcc>)
   12a08:	2280      	movs	r2, #128	; 0x80
   12a0a:	00d2      	lsls	r2, r2, #3
   12a0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < ((x1-x0+1)*(y1-y0+1)); i++)
   12a0e:	2300      	movs	r3, #0
   12a10:	60fb      	str	r3, [r7, #12]
   12a12:	e008      	b.n	12a26 <LCD_drawBlock+0x8e>
	{
		Adafruit358LCD_spi_send_16bit_stream(color);
   12a14:	2320      	movs	r3, #32
   12a16:	18fb      	adds	r3, r7, r3
   12a18:	881b      	ldrh	r3, [r3, #0]
   12a1a:	0018      	movs	r0, r3
   12a1c:	4b12      	ldr	r3, [pc, #72]	; (12a68 <LCD_drawBlock+0xd0>)
   12a1e:	4798      	blx	r3
	for (i = 0; i < ((x1-x0+1)*(y1-y0+1)); i++)
   12a20:	68fb      	ldr	r3, [r7, #12]
   12a22:	3301      	adds	r3, #1
   12a24:	60fb      	str	r3, [r7, #12]
   12a26:	1d7b      	adds	r3, r7, #5
   12a28:	781b      	ldrb	r3, [r3, #0]
   12a2a:	001a      	movs	r2, r3
   12a2c:	1dfb      	adds	r3, r7, #7
   12a2e:	781b      	ldrb	r3, [r3, #0]
   12a30:	1ad3      	subs	r3, r2, r3
   12a32:	3301      	adds	r3, #1
   12a34:	1d3a      	adds	r2, r7, #4
   12a36:	7812      	ldrb	r2, [r2, #0]
   12a38:	0011      	movs	r1, r2
   12a3a:	1dba      	adds	r2, r7, #6
   12a3c:	7812      	ldrb	r2, [r2, #0]
   12a3e:	1a8a      	subs	r2, r1, r2
   12a40:	3201      	adds	r2, #1
   12a42:	435a      	muls	r2, r3
   12a44:	68fb      	ldr	r3, [r7, #12]
   12a46:	429a      	cmp	r2, r3
   12a48:	dce4      	bgt.n	12a14 <LCD_drawBlock+0x7c>
	}

	Adafruit358LCD_spi_deselect_device();		//Manually control CS
   12a4a:	4b08      	ldr	r3, [pc, #32]	; (12a6c <LCD_drawBlock+0xd4>)
   12a4c:	4798      	blx	r3
}
   12a4e:	46c0      	nop			; (mov r8, r8)
   12a50:	46bd      	mov	sp, r7
   12a52:	b004      	add	sp, #16
   12a54:	bdb0      	pop	{r4, r5, r7, pc}
   12a56:	46c0      	nop			; (mov r8, r8)
   12a58:	000124a9 	.word	0x000124a9
   12a5c:	00012879 	.word	0x00012879
   12a60:	000124d9 	.word	0x000124d9
   12a64:	41004418 	.word	0x41004418
   12a68:	0001252d 	.word	0x0001252d
   12a6c:	000124f1 	.word	0x000124f1

00012a70 <LCD_setScreen>:
/**************************************************************************//**
* @fn			void LCD_setScreen(uint16_t color)
* @brief		Draw the entire screen to a color
* @note
*****************************************************************************/
void LCD_setScreen(uint16_t color) {
   12a70:	b590      	push	{r4, r7, lr}
   12a72:	b085      	sub	sp, #20
   12a74:	af00      	add	r7, sp, #0
   12a76:	0002      	movs	r2, r0
   12a78:	1dbb      	adds	r3, r7, #6
   12a7a:	801a      	strh	r2, [r3, #0]
	LCD_setAddr(0, 0, LCD_WIDTH, LCD_HEIGHT);
   12a7c:	2380      	movs	r3, #128	; 0x80
   12a7e:	22a0      	movs	r2, #160	; 0xa0
   12a80:	2100      	movs	r1, #0
   12a82:	2000      	movs	r0, #0
   12a84:	4c0e      	ldr	r4, [pc, #56]	; (12ac0 <LCD_setScreen+0x50>)
   12a86:	47a0      	blx	r4
	
	Adafruit358LCD_spi_select_device();		//Manually control CS
   12a88:	4b0e      	ldr	r3, [pc, #56]	; (12ac4 <LCD_setScreen+0x54>)
   12a8a:	4798      	blx	r3
	DISPLAY_DC_HIGH();
   12a8c:	4b0e      	ldr	r3, [pc, #56]	; (12ac8 <LCD_setScreen+0x58>)
   12a8e:	2280      	movs	r2, #128	; 0x80
   12a90:	00d2      	lsls	r2, r2, #3
   12a92:	601a      	str	r2, [r3, #0]
	
	for (int i = 0; i < LCD_SIZE; i++){
   12a94:	2300      	movs	r3, #0
   12a96:	60fb      	str	r3, [r7, #12]
   12a98:	e007      	b.n	12aaa <LCD_setScreen+0x3a>
		Adafruit358LCD_spi_send_16bit_stream(color);
   12a9a:	1dbb      	adds	r3, r7, #6
   12a9c:	881b      	ldrh	r3, [r3, #0]
   12a9e:	0018      	movs	r0, r3
   12aa0:	4b0a      	ldr	r3, [pc, #40]	; (12acc <LCD_setScreen+0x5c>)
   12aa2:	4798      	blx	r3
	for (int i = 0; i < LCD_SIZE; i++){
   12aa4:	68fb      	ldr	r3, [r7, #12]
   12aa6:	3301      	adds	r3, #1
   12aa8:	60fb      	str	r3, [r7, #12]
   12aaa:	68fb      	ldr	r3, [r7, #12]
   12aac:	4a08      	ldr	r2, [pc, #32]	; (12ad0 <LCD_setScreen+0x60>)
   12aae:	4293      	cmp	r3, r2
   12ab0:	ddf3      	ble.n	12a9a <LCD_setScreen+0x2a>
	}
	
	Adafruit358LCD_spi_deselect_device();		//Manually control CS
   12ab2:	4b08      	ldr	r3, [pc, #32]	; (12ad4 <LCD_setScreen+0x64>)
   12ab4:	4798      	blx	r3
}
   12ab6:	46c0      	nop			; (mov r8, r8)
   12ab8:	46bd      	mov	sp, r7
   12aba:	b005      	add	sp, #20
   12abc:	bd90      	pop	{r4, r7, pc}
   12abe:	46c0      	nop			; (mov r8, r8)
   12ac0:	00012879 	.word	0x00012879
   12ac4:	000124d9 	.word	0x000124d9
   12ac8:	41004418 	.word	0x41004418
   12acc:	0001252d 	.word	0x0001252d
   12ad0:	00004fff 	.word	0x00004fff
   12ad4:	000124f1 	.word	0x000124f1

00012ad8 <LCD_drawLine>:
/**************************************************************************//**
* @fn			void LCD_drawLine(short x0,short y0,short x1,short y1,uint16_t c)
* @brief		Draw a line from and to a point with a color
* @note
*****************************************************************************/
void LCD_drawLine(short x0,short y0,short x1,short y1,uint16_t c){
   12ad8:	b5b0      	push	{r4, r5, r7, lr}
   12ada:	b086      	sub	sp, #24
   12adc:	af00      	add	r7, sp, #0
   12ade:	0005      	movs	r5, r0
   12ae0:	000c      	movs	r4, r1
   12ae2:	0010      	movs	r0, r2
   12ae4:	0019      	movs	r1, r3
   12ae6:	1dbb      	adds	r3, r7, #6
   12ae8:	1c2a      	adds	r2, r5, #0
   12aea:	801a      	strh	r2, [r3, #0]
   12aec:	1d3b      	adds	r3, r7, #4
   12aee:	1c22      	adds	r2, r4, #0
   12af0:	801a      	strh	r2, [r3, #0]
   12af2:	1cbb      	adds	r3, r7, #2
   12af4:	1c02      	adds	r2, r0, #0
   12af6:	801a      	strh	r2, [r3, #0]
   12af8:	003b      	movs	r3, r7
   12afa:	1c0a      	adds	r2, r1, #0
   12afc:	801a      	strh	r2, [r3, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   12afe:	003b      	movs	r3, r7
   12b00:	2200      	movs	r2, #0
   12b02:	5e9b      	ldrsh	r3, [r3, r2]
   12b04:	001a      	movs	r2, r3
   12b06:	1d3b      	adds	r3, r7, #4
   12b08:	2100      	movs	r1, #0
   12b0a:	5e5b      	ldrsh	r3, [r3, r1]
   12b0c:	1ad3      	subs	r3, r2, r3
   12b0e:	17d9      	asrs	r1, r3, #31
   12b10:	185a      	adds	r2, r3, r1
   12b12:	404a      	eors	r2, r1
   12b14:	1cbb      	adds	r3, r7, #2
   12b16:	2100      	movs	r1, #0
   12b18:	5e5b      	ldrsh	r3, [r3, r1]
   12b1a:	0019      	movs	r1, r3
   12b1c:	1dbb      	adds	r3, r7, #6
   12b1e:	2000      	movs	r0, #0
   12b20:	5e1b      	ldrsh	r3, [r3, r0]
   12b22:	1acb      	subs	r3, r1, r3
   12b24:	17d9      	asrs	r1, r3, #31
   12b26:	185b      	adds	r3, r3, r1
   12b28:	404b      	eors	r3, r1
   12b2a:	2101      	movs	r1, #1
   12b2c:	429a      	cmp	r2, r3
   12b2e:	dc01      	bgt.n	12b34 <LCD_drawLine+0x5c>
   12b30:	2300      	movs	r3, #0
   12b32:	1c19      	adds	r1, r3, #0
   12b34:	b2ca      	uxtb	r2, r1
   12b36:	2312      	movs	r3, #18
   12b38:	18fb      	adds	r3, r7, r3
   12b3a:	801a      	strh	r2, [r3, #0]
	if (steep) {
   12b3c:	2312      	movs	r3, #18
   12b3e:	18fb      	adds	r3, r7, r3
   12b40:	2200      	movs	r2, #0
   12b42:	5e9b      	ldrsh	r3, [r3, r2]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00b      	beq.n	12b60 <LCD_drawLine+0x88>
		swap_num(&x0, &y0);
   12b48:	1d3a      	adds	r2, r7, #4
   12b4a:	1dbb      	adds	r3, r7, #6
   12b4c:	0011      	movs	r1, r2
   12b4e:	0018      	movs	r0, r3
   12b50:	4b5a      	ldr	r3, [pc, #360]	; (12cbc <LCD_drawLine+0x1e4>)
   12b52:	4798      	blx	r3
		swap_num(&x1, &y1);
   12b54:	003a      	movs	r2, r7
   12b56:	1cbb      	adds	r3, r7, #2
   12b58:	0011      	movs	r1, r2
   12b5a:	0018      	movs	r0, r3
   12b5c:	4b57      	ldr	r3, [pc, #348]	; (12cbc <LCD_drawLine+0x1e4>)
   12b5e:	4798      	blx	r3
	}

	if (x0 > x1) {
   12b60:	1dbb      	adds	r3, r7, #6
   12b62:	2200      	movs	r2, #0
   12b64:	5e9a      	ldrsh	r2, [r3, r2]
   12b66:	1cbb      	adds	r3, r7, #2
   12b68:	2100      	movs	r1, #0
   12b6a:	5e5b      	ldrsh	r3, [r3, r1]
   12b6c:	429a      	cmp	r2, r3
   12b6e:	dd0b      	ble.n	12b88 <LCD_drawLine+0xb0>
		swap_num(&x0, &x1);
   12b70:	1cba      	adds	r2, r7, #2
   12b72:	1dbb      	adds	r3, r7, #6
   12b74:	0011      	movs	r1, r2
   12b76:	0018      	movs	r0, r3
   12b78:	4b50      	ldr	r3, [pc, #320]	; (12cbc <LCD_drawLine+0x1e4>)
   12b7a:	4798      	blx	r3
		swap_num(&y0, &y1);
   12b7c:	003a      	movs	r2, r7
   12b7e:	1d3b      	adds	r3, r7, #4
   12b80:	0011      	movs	r1, r2
   12b82:	0018      	movs	r0, r3
   12b84:	4b4d      	ldr	r3, [pc, #308]	; (12cbc <LCD_drawLine+0x1e4>)
   12b86:	4798      	blx	r3
	}

	int16_t dx, dy;
	dx = x1 - x0;
   12b88:	1cbb      	adds	r3, r7, #2
   12b8a:	2200      	movs	r2, #0
   12b8c:	5e9b      	ldrsh	r3, [r3, r2]
   12b8e:	b29a      	uxth	r2, r3
   12b90:	1dbb      	adds	r3, r7, #6
   12b92:	2100      	movs	r1, #0
   12b94:	5e5b      	ldrsh	r3, [r3, r1]
   12b96:	b29b      	uxth	r3, r3
   12b98:	1ad3      	subs	r3, r2, r3
   12b9a:	b29a      	uxth	r2, r3
   12b9c:	2310      	movs	r3, #16
   12b9e:	18fb      	adds	r3, r7, r3
   12ba0:	801a      	strh	r2, [r3, #0]
	dy = abs(y1 - y0);
   12ba2:	003b      	movs	r3, r7
   12ba4:	2200      	movs	r2, #0
   12ba6:	5e9b      	ldrsh	r3, [r3, r2]
   12ba8:	001a      	movs	r2, r3
   12baa:	1d3b      	adds	r3, r7, #4
   12bac:	2100      	movs	r1, #0
   12bae:	5e5b      	ldrsh	r3, [r3, r1]
   12bb0:	1ad3      	subs	r3, r2, r3
   12bb2:	17d9      	asrs	r1, r3, #31
   12bb4:	185a      	adds	r2, r3, r1
   12bb6:	404a      	eors	r2, r1
   12bb8:	230e      	movs	r3, #14
   12bba:	18fb      	adds	r3, r7, r3
   12bbc:	801a      	strh	r2, [r3, #0]

	int16_t err = dx / 2;
   12bbe:	2316      	movs	r3, #22
   12bc0:	18fa      	adds	r2, r7, r3
   12bc2:	2310      	movs	r3, #16
   12bc4:	18fb      	adds	r3, r7, r3
   12bc6:	2100      	movs	r1, #0
   12bc8:	5e5b      	ldrsh	r3, [r3, r1]
   12bca:	2b00      	cmp	r3, #0
   12bcc:	da00      	bge.n	12bd0 <LCD_drawLine+0xf8>
   12bce:	3301      	adds	r3, #1
   12bd0:	105b      	asrs	r3, r3, #1
   12bd2:	8013      	strh	r3, [r2, #0]
	int16_t ystep;

	if (y0 < y1) {
   12bd4:	1d3b      	adds	r3, r7, #4
   12bd6:	2200      	movs	r2, #0
   12bd8:	5e9a      	ldrsh	r2, [r3, r2]
   12bda:	003b      	movs	r3, r7
   12bdc:	2100      	movs	r1, #0
   12bde:	5e5b      	ldrsh	r3, [r3, r1]
   12be0:	429a      	cmp	r2, r3
   12be2:	da04      	bge.n	12bee <LCD_drawLine+0x116>
		ystep = 1;
   12be4:	2314      	movs	r3, #20
   12be6:	18fb      	adds	r3, r7, r3
   12be8:	2201      	movs	r2, #1
   12bea:	801a      	strh	r2, [r3, #0]
   12bec:	e059      	b.n	12ca2 <LCD_drawLine+0x1ca>
		} else {
		ystep = -1;
   12bee:	2314      	movs	r3, #20
   12bf0:	18fb      	adds	r3, r7, r3
   12bf2:	2201      	movs	r2, #1
   12bf4:	4252      	negs	r2, r2
   12bf6:	801a      	strh	r2, [r3, #0]
	}

	for (; x0<=x1; x0++) {
   12bf8:	e053      	b.n	12ca2 <LCD_drawLine+0x1ca>
		if (steep) {
   12bfa:	2312      	movs	r3, #18
   12bfc:	18fb      	adds	r3, r7, r3
   12bfe:	2200      	movs	r2, #0
   12c00:	5e9b      	ldrsh	r3, [r3, r2]
   12c02:	2b00      	cmp	r3, #0
   12c04:	d00e      	beq.n	12c24 <LCD_drawLine+0x14c>
			LCD_drawPixel(y0, x0, c);
   12c06:	1d3b      	adds	r3, r7, #4
   12c08:	2200      	movs	r2, #0
   12c0a:	5e9b      	ldrsh	r3, [r3, r2]
   12c0c:	b2d8      	uxtb	r0, r3
   12c0e:	1dbb      	adds	r3, r7, #6
   12c10:	2200      	movs	r2, #0
   12c12:	5e9b      	ldrsh	r3, [r3, r2]
   12c14:	b2db      	uxtb	r3, r3
   12c16:	2228      	movs	r2, #40	; 0x28
   12c18:	18ba      	adds	r2, r7, r2
   12c1a:	8812      	ldrh	r2, [r2, #0]
   12c1c:	0019      	movs	r1, r3
   12c1e:	4b28      	ldr	r3, [pc, #160]	; (12cc0 <LCD_drawLine+0x1e8>)
   12c20:	4798      	blx	r3
   12c22:	e00d      	b.n	12c40 <LCD_drawLine+0x168>
			} else {
			LCD_drawPixel(x0, y0, c);
   12c24:	1dbb      	adds	r3, r7, #6
   12c26:	2200      	movs	r2, #0
   12c28:	5e9b      	ldrsh	r3, [r3, r2]
   12c2a:	b2d8      	uxtb	r0, r3
   12c2c:	1d3b      	adds	r3, r7, #4
   12c2e:	2200      	movs	r2, #0
   12c30:	5e9b      	ldrsh	r3, [r3, r2]
   12c32:	b2db      	uxtb	r3, r3
   12c34:	2228      	movs	r2, #40	; 0x28
   12c36:	18ba      	adds	r2, r7, r2
   12c38:	8812      	ldrh	r2, [r2, #0]
   12c3a:	0019      	movs	r1, r3
   12c3c:	4b20      	ldr	r3, [pc, #128]	; (12cc0 <LCD_drawLine+0x1e8>)
   12c3e:	4798      	blx	r3
		}
		err -= dy;
   12c40:	2316      	movs	r3, #22
   12c42:	18fb      	adds	r3, r7, r3
   12c44:	881a      	ldrh	r2, [r3, #0]
   12c46:	230e      	movs	r3, #14
   12c48:	18fb      	adds	r3, r7, r3
   12c4a:	881b      	ldrh	r3, [r3, #0]
   12c4c:	1ad3      	subs	r3, r2, r3
   12c4e:	b29a      	uxth	r2, r3
   12c50:	2316      	movs	r3, #22
   12c52:	18fb      	adds	r3, r7, r3
   12c54:	801a      	strh	r2, [r3, #0]
		if (err < 0) {
   12c56:	2316      	movs	r3, #22
   12c58:	18fb      	adds	r3, r7, r3
   12c5a:	2200      	movs	r2, #0
   12c5c:	5e9b      	ldrsh	r3, [r3, r2]
   12c5e:	2b00      	cmp	r3, #0
   12c60:	da16      	bge.n	12c90 <LCD_drawLine+0x1b8>
			y0 += ystep;
   12c62:	1d3b      	adds	r3, r7, #4
   12c64:	2200      	movs	r2, #0
   12c66:	5e9b      	ldrsh	r3, [r3, r2]
   12c68:	b29a      	uxth	r2, r3
   12c6a:	2314      	movs	r3, #20
   12c6c:	18fb      	adds	r3, r7, r3
   12c6e:	881b      	ldrh	r3, [r3, #0]
   12c70:	18d3      	adds	r3, r2, r3
   12c72:	b29b      	uxth	r3, r3
   12c74:	b21a      	sxth	r2, r3
   12c76:	1d3b      	adds	r3, r7, #4
   12c78:	801a      	strh	r2, [r3, #0]
			err += dx;
   12c7a:	2316      	movs	r3, #22
   12c7c:	18fb      	adds	r3, r7, r3
   12c7e:	881a      	ldrh	r2, [r3, #0]
   12c80:	2310      	movs	r3, #16
   12c82:	18fb      	adds	r3, r7, r3
   12c84:	881b      	ldrh	r3, [r3, #0]
   12c86:	18d3      	adds	r3, r2, r3
   12c88:	b29a      	uxth	r2, r3
   12c8a:	2316      	movs	r3, #22
   12c8c:	18fb      	adds	r3, r7, r3
   12c8e:	801a      	strh	r2, [r3, #0]
	for (; x0<=x1; x0++) {
   12c90:	1dbb      	adds	r3, r7, #6
   12c92:	2200      	movs	r2, #0
   12c94:	5e9b      	ldrsh	r3, [r3, r2]
   12c96:	b29b      	uxth	r3, r3
   12c98:	3301      	adds	r3, #1
   12c9a:	b29b      	uxth	r3, r3
   12c9c:	b21a      	sxth	r2, r3
   12c9e:	1dbb      	adds	r3, r7, #6
   12ca0:	801a      	strh	r2, [r3, #0]
   12ca2:	1dbb      	adds	r3, r7, #6
   12ca4:	2200      	movs	r2, #0
   12ca6:	5e9a      	ldrsh	r2, [r3, r2]
   12ca8:	1cbb      	adds	r3, r7, #2
   12caa:	2100      	movs	r1, #0
   12cac:	5e5b      	ldrsh	r3, [r3, r1]
   12cae:	429a      	cmp	r2, r3
   12cb0:	dda3      	ble.n	12bfa <LCD_drawLine+0x122>
		}
	}
}
   12cb2:	46c0      	nop			; (mov r8, r8)
   12cb4:	46bd      	mov	sp, r7
   12cb6:	b006      	add	sp, #24
   12cb8:	bdb0      	pop	{r4, r5, r7, pc}
   12cba:	46c0      	nop			; (mov r8, r8)
   12cbc:	000124a9 	.word	0x000124a9
   12cc0:	00012949 	.word	0x00012949

00012cc4 <LCD_drawYLine>:
/**************************************************************************//**
* @fn			void LCD_drawYLine(uint8_t y,uint16_t c)
* @brief		Draw a vertical line with a color
* @note
*****************************************************************************/
void LCD_drawYLine(uint8_t y,uint16_t c){
   12cc4:	b590      	push	{r4, r7, lr}
   12cc6:	b085      	sub	sp, #20
   12cc8:	af00      	add	r7, sp, #0
   12cca:	0002      	movs	r2, r0
   12ccc:	1dfb      	adds	r3, r7, #7
   12cce:	701a      	strb	r2, [r3, #0]
   12cd0:	1d3b      	adds	r3, r7, #4
   12cd2:	1c0a      	adds	r2, r1, #0
   12cd4:	801a      	strh	r2, [r3, #0]
	
	LCD_setAddr(y, 0, y, LCD_HEIGHT);
   12cd6:	1dfb      	adds	r3, r7, #7
   12cd8:	781a      	ldrb	r2, [r3, #0]
   12cda:	1dfb      	adds	r3, r7, #7
   12cdc:	7818      	ldrb	r0, [r3, #0]
   12cde:	2380      	movs	r3, #128	; 0x80
   12ce0:	2100      	movs	r1, #0
   12ce2:	4c0e      	ldr	r4, [pc, #56]	; (12d1c <LCD_drawYLine+0x58>)
   12ce4:	47a0      	blx	r4
	Adafruit358LCD_spi_select_device();		//Manually control CS
   12ce6:	4b0e      	ldr	r3, [pc, #56]	; (12d20 <LCD_drawYLine+0x5c>)
   12ce8:	4798      	blx	r3
	DISPLAY_DC_HIGH();
   12cea:	4b0e      	ldr	r3, [pc, #56]	; (12d24 <LCD_drawYLine+0x60>)
   12cec:	2280      	movs	r2, #128	; 0x80
   12cee:	00d2      	lsls	r2, r2, #3
   12cf0:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < LCD_HEIGHT; i++){
   12cf2:	2300      	movs	r3, #0
   12cf4:	60fb      	str	r3, [r7, #12]
   12cf6:	e007      	b.n	12d08 <LCD_drawYLine+0x44>
		Adafruit358LCD_spi_send_16bit_stream(c);
   12cf8:	1d3b      	adds	r3, r7, #4
   12cfa:	881b      	ldrh	r3, [r3, #0]
   12cfc:	0018      	movs	r0, r3
   12cfe:	4b0a      	ldr	r3, [pc, #40]	; (12d28 <LCD_drawYLine+0x64>)
   12d00:	4798      	blx	r3
	for (int i = 0; i < LCD_HEIGHT; i++){
   12d02:	68fb      	ldr	r3, [r7, #12]
   12d04:	3301      	adds	r3, #1
   12d06:	60fb      	str	r3, [r7, #12]
   12d08:	68fb      	ldr	r3, [r7, #12]
   12d0a:	2b7f      	cmp	r3, #127	; 0x7f
   12d0c:	ddf4      	ble.n	12cf8 <LCD_drawYLine+0x34>
	}

	Adafruit358LCD_spi_deselect_device();		//Manually control CS
   12d0e:	4b07      	ldr	r3, [pc, #28]	; (12d2c <LCD_drawYLine+0x68>)
   12d10:	4798      	blx	r3
}
   12d12:	46c0      	nop			; (mov r8, r8)
   12d14:	46bd      	mov	sp, r7
   12d16:	b005      	add	sp, #20
   12d18:	bd90      	pop	{r4, r7, pc}
   12d1a:	46c0      	nop			; (mov r8, r8)
   12d1c:	00012879 	.word	0x00012879
   12d20:	000124d9 	.word	0x000124d9
   12d24:	41004418 	.word	0x41004418
   12d28:	0001252d 	.word	0x0001252d
   12d2c:	000124f1 	.word	0x000124f1

00012d30 <LCD_drawXLine>:
/**************************************************************************//**
* @fn			void LCD_drawXLine(uint8_t y,uint16_t c)
* @brief		Draw a horizontal line with a color
* @note
*****************************************************************************/
void LCD_drawXLine(uint8_t x,uint16_t c){
   12d30:	b590      	push	{r4, r7, lr}
   12d32:	b085      	sub	sp, #20
   12d34:	af00      	add	r7, sp, #0
   12d36:	0002      	movs	r2, r0
   12d38:	1dfb      	adds	r3, r7, #7
   12d3a:	701a      	strb	r2, [r3, #0]
   12d3c:	1d3b      	adds	r3, r7, #4
   12d3e:	1c0a      	adds	r2, r1, #0
   12d40:	801a      	strh	r2, [r3, #0]
		
	LCD_setAddr(0, x, LCD_WIDTH, x);
   12d42:	1dfb      	adds	r3, r7, #7
   12d44:	781a      	ldrb	r2, [r3, #0]
   12d46:	1dfb      	adds	r3, r7, #7
   12d48:	7819      	ldrb	r1, [r3, #0]
   12d4a:	0013      	movs	r3, r2
   12d4c:	22a0      	movs	r2, #160	; 0xa0
   12d4e:	2000      	movs	r0, #0
   12d50:	4c0d      	ldr	r4, [pc, #52]	; (12d88 <LCD_drawXLine+0x58>)
   12d52:	47a0      	blx	r4
	Adafruit358LCD_spi_select_device();		//Manually control CS
   12d54:	4b0d      	ldr	r3, [pc, #52]	; (12d8c <LCD_drawXLine+0x5c>)
   12d56:	4798      	blx	r3
	DISPLAY_DC_HIGH();
   12d58:	4b0d      	ldr	r3, [pc, #52]	; (12d90 <LCD_drawXLine+0x60>)
   12d5a:	2280      	movs	r2, #128	; 0x80
   12d5c:	00d2      	lsls	r2, r2, #3
   12d5e:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < LCD_WIDTH; i++){
   12d60:	2300      	movs	r3, #0
   12d62:	60fb      	str	r3, [r7, #12]
   12d64:	e007      	b.n	12d76 <LCD_drawXLine+0x46>
		Adafruit358LCD_spi_send_16bit_stream(c);
   12d66:	1d3b      	adds	r3, r7, #4
   12d68:	881b      	ldrh	r3, [r3, #0]
   12d6a:	0018      	movs	r0, r3
   12d6c:	4b09      	ldr	r3, [pc, #36]	; (12d94 <LCD_drawXLine+0x64>)
   12d6e:	4798      	blx	r3
	for (int i = 0; i < LCD_WIDTH; i++){
   12d70:	68fb      	ldr	r3, [r7, #12]
   12d72:	3301      	adds	r3, #1
   12d74:	60fb      	str	r3, [r7, #12]
   12d76:	68fb      	ldr	r3, [r7, #12]
   12d78:	2b9f      	cmp	r3, #159	; 0x9f
   12d7a:	ddf4      	ble.n	12d66 <LCD_drawXLine+0x36>
	}

	Adafruit358LCD_spi_deselect_device();		//Manually control CS
   12d7c:	4b06      	ldr	r3, [pc, #24]	; (12d98 <LCD_drawXLine+0x68>)
   12d7e:	4798      	blx	r3
}
   12d80:	46c0      	nop			; (mov r8, r8)
   12d82:	46bd      	mov	sp, r7
   12d84:	b005      	add	sp, #20
   12d86:	bd90      	pop	{r4, r7, pc}
   12d88:	00012879 	.word	0x00012879
   12d8c:	000124d9 	.word	0x000124d9
   12d90:	41004418 	.word	0x41004418
   12d94:	0001252d 	.word	0x0001252d
   12d98:	000124f1 	.word	0x000124f1

00012d9c <LCD_drawChar>:
/**************************************************************************//**
* @fn			void LCD_drawChar(uint8_t x, uint8_t y, uint16_t character, uint16_t fColor, uint16_t bColor)
* @brief		Draw a character starting at the point with foreground and background colors
* @note
*****************************************************************************/
void LCD_drawChar(uint8_t x, uint8_t y, uint16_t character, uint16_t fColor, uint16_t bColor){
   12d9c:	b5b0      	push	{r4, r5, r7, lr}
   12d9e:	b086      	sub	sp, #24
   12da0:	af00      	add	r7, sp, #0
   12da2:	0005      	movs	r5, r0
   12da4:	000c      	movs	r4, r1
   12da6:	0010      	movs	r0, r2
   12da8:	0019      	movs	r1, r3
   12daa:	1dfb      	adds	r3, r7, #7
   12dac:	1c2a      	adds	r2, r5, #0
   12dae:	701a      	strb	r2, [r3, #0]
   12db0:	1dbb      	adds	r3, r7, #6
   12db2:	1c22      	adds	r2, r4, #0
   12db4:	701a      	strb	r2, [r3, #0]
   12db6:	1d3b      	adds	r3, r7, #4
   12db8:	1c02      	adds	r2, r0, #0
   12dba:	801a      	strh	r2, [r3, #0]
   12dbc:	1cbb      	adds	r3, r7, #2
   12dbe:	1c0a      	adds	r2, r1, #0
   12dc0:	801a      	strh	r2, [r3, #0]
	uint16_t row = character - 0x20;		//Determine row of ASCII table starting at space
   12dc2:	230e      	movs	r3, #14
   12dc4:	18fb      	adds	r3, r7, r3
   12dc6:	1d3a      	adds	r2, r7, #4
   12dc8:	8812      	ldrh	r2, [r2, #0]
   12dca:	3a20      	subs	r2, #32
   12dcc:	801a      	strh	r2, [r3, #0]
	int i, j;
	if ((LCD_WIDTH-x>7)&&(LCD_HEIGHT-y>7)){
   12dce:	1dfb      	adds	r3, r7, #7
   12dd0:	781b      	ldrb	r3, [r3, #0]
   12dd2:	22a0      	movs	r2, #160	; 0xa0
   12dd4:	1ad3      	subs	r3, r2, r3
   12dd6:	2b07      	cmp	r3, #7
   12dd8:	dd52      	ble.n	12e80 <LCD_drawChar+0xe4>
   12dda:	1dbb      	adds	r3, r7, #6
   12ddc:	781b      	ldrb	r3, [r3, #0]
   12dde:	2280      	movs	r2, #128	; 0x80
   12de0:	1ad3      	subs	r3, r2, r3
   12de2:	2b07      	cmp	r3, #7
   12de4:	dd4c      	ble.n	12e80 <LCD_drawChar+0xe4>
		for(i=0;i<5;i++){
   12de6:	2300      	movs	r3, #0
   12de8:	617b      	str	r3, [r7, #20]
   12dea:	e046      	b.n	12e7a <LCD_drawChar+0xde>
			uint8_t pixels = ASCII[row][i]; //Go through the list of pixels
   12dec:	230e      	movs	r3, #14
   12dee:	18fb      	adds	r3, r7, r3
   12df0:	881a      	ldrh	r2, [r3, #0]
   12df2:	230d      	movs	r3, #13
   12df4:	18f9      	adds	r1, r7, r3
   12df6:	4824      	ldr	r0, [pc, #144]	; (12e88 <LCD_drawChar+0xec>)
   12df8:	0013      	movs	r3, r2
   12dfa:	009b      	lsls	r3, r3, #2
   12dfc:	189b      	adds	r3, r3, r2
   12dfe:	18c2      	adds	r2, r0, r3
   12e00:	697b      	ldr	r3, [r7, #20]
   12e02:	18d3      	adds	r3, r2, r3
   12e04:	781b      	ldrb	r3, [r3, #0]
   12e06:	700b      	strb	r3, [r1, #0]
			for(j=0;j<8;j++){
   12e08:	2300      	movs	r3, #0
   12e0a:	613b      	str	r3, [r7, #16]
   12e0c:	e02f      	b.n	12e6e <LCD_drawChar+0xd2>
				if ((pixels>>j)&1==1){
   12e0e:	230d      	movs	r3, #13
   12e10:	18fb      	adds	r3, r7, r3
   12e12:	781a      	ldrb	r2, [r3, #0]
   12e14:	693b      	ldr	r3, [r7, #16]
   12e16:	411a      	asrs	r2, r3
   12e18:	0013      	movs	r3, r2
   12e1a:	2201      	movs	r2, #1
   12e1c:	4013      	ands	r3, r2
   12e1e:	d011      	beq.n	12e44 <LCD_drawChar+0xa8>
					LCD_drawPixel(x+i,y+j,fColor);
   12e20:	697b      	ldr	r3, [r7, #20]
   12e22:	b2da      	uxtb	r2, r3
   12e24:	1dfb      	adds	r3, r7, #7
   12e26:	781b      	ldrb	r3, [r3, #0]
   12e28:	18d3      	adds	r3, r2, r3
   12e2a:	b2d8      	uxtb	r0, r3
   12e2c:	693b      	ldr	r3, [r7, #16]
   12e2e:	b2da      	uxtb	r2, r3
   12e30:	1dbb      	adds	r3, r7, #6
   12e32:	781b      	ldrb	r3, [r3, #0]
   12e34:	18d3      	adds	r3, r2, r3
   12e36:	b2d9      	uxtb	r1, r3
   12e38:	1cbb      	adds	r3, r7, #2
   12e3a:	881b      	ldrh	r3, [r3, #0]
   12e3c:	001a      	movs	r2, r3
   12e3e:	4b13      	ldr	r3, [pc, #76]	; (12e8c <LCD_drawChar+0xf0>)
   12e40:	4798      	blx	r3
   12e42:	e011      	b.n	12e68 <LCD_drawChar+0xcc>
				}
				else {
					LCD_drawPixel(x+i,y+j,bColor);
   12e44:	697b      	ldr	r3, [r7, #20]
   12e46:	b2da      	uxtb	r2, r3
   12e48:	1dfb      	adds	r3, r7, #7
   12e4a:	781b      	ldrb	r3, [r3, #0]
   12e4c:	18d3      	adds	r3, r2, r3
   12e4e:	b2d8      	uxtb	r0, r3
   12e50:	693b      	ldr	r3, [r7, #16]
   12e52:	b2da      	uxtb	r2, r3
   12e54:	1dbb      	adds	r3, r7, #6
   12e56:	781b      	ldrb	r3, [r3, #0]
   12e58:	18d3      	adds	r3, r2, r3
   12e5a:	b2db      	uxtb	r3, r3
   12e5c:	2228      	movs	r2, #40	; 0x28
   12e5e:	18ba      	adds	r2, r7, r2
   12e60:	8812      	ldrh	r2, [r2, #0]
   12e62:	0019      	movs	r1, r3
   12e64:	4b09      	ldr	r3, [pc, #36]	; (12e8c <LCD_drawChar+0xf0>)
   12e66:	4798      	blx	r3
			for(j=0;j<8;j++){
   12e68:	693b      	ldr	r3, [r7, #16]
   12e6a:	3301      	adds	r3, #1
   12e6c:	613b      	str	r3, [r7, #16]
   12e6e:	693b      	ldr	r3, [r7, #16]
   12e70:	2b07      	cmp	r3, #7
   12e72:	ddcc      	ble.n	12e0e <LCD_drawChar+0x72>
		for(i=0;i<5;i++){
   12e74:	697b      	ldr	r3, [r7, #20]
   12e76:	3301      	adds	r3, #1
   12e78:	617b      	str	r3, [r7, #20]
   12e7a:	697b      	ldr	r3, [r7, #20]
   12e7c:	2b04      	cmp	r3, #4
   12e7e:	ddb5      	ble.n	12dec <LCD_drawChar+0x50>
				}
			}
		}
	}
}
   12e80:	46c0      	nop			; (mov r8, r8)
   12e82:	46bd      	mov	sp, r7
   12e84:	b006      	add	sp, #24
   12e86:	bdb0      	pop	{r4, r5, r7, pc}
   12e88:	000398c8 	.word	0x000398c8
   12e8c:	00012949 	.word	0x00012949

00012e90 <LCD_drawFastChar>:
/**************************************************************************//**
* @fn			void LCD_drawFastChar(uint8_t x, uint8_t y, uint16_t character, uint16_t fColor, uint16_t bColor)
* @brief		Draw block then character on top
* @note
*****************************************************************************/
void LCD_drawFastChar(uint8_t x, uint8_t y, uint16_t character, uint16_t fColor, uint16_t bColor){
   12e90:	b5b0      	push	{r4, r5, r7, lr}
   12e92:	b088      	sub	sp, #32
   12e94:	af02      	add	r7, sp, #8
   12e96:	0005      	movs	r5, r0
   12e98:	000c      	movs	r4, r1
   12e9a:	0010      	movs	r0, r2
   12e9c:	0019      	movs	r1, r3
   12e9e:	1dfb      	adds	r3, r7, #7
   12ea0:	1c2a      	adds	r2, r5, #0
   12ea2:	701a      	strb	r2, [r3, #0]
   12ea4:	1dbb      	adds	r3, r7, #6
   12ea6:	1c22      	adds	r2, r4, #0
   12ea8:	701a      	strb	r2, [r3, #0]
   12eaa:	1d3b      	adds	r3, r7, #4
   12eac:	1c02      	adds	r2, r0, #0
   12eae:	801a      	strh	r2, [r3, #0]
   12eb0:	1cbb      	adds	r3, r7, #2
   12eb2:	1c0a      	adds	r2, r1, #0
   12eb4:	801a      	strh	r2, [r3, #0]
	uint16_t row = character - 0x20;		//Determine row of ASCII table starting at space
   12eb6:	230e      	movs	r3, #14
   12eb8:	18fb      	adds	r3, r7, r3
   12eba:	1d3a      	adds	r2, r7, #4
   12ebc:	8812      	ldrh	r2, [r2, #0]
   12ebe:	3a20      	subs	r2, #32
   12ec0:	801a      	strh	r2, [r3, #0]
	int i, j;
	
	LCD_drawBlock(x,y,x+5,y+9,bColor);
   12ec2:	1dfb      	adds	r3, r7, #7
   12ec4:	781b      	ldrb	r3, [r3, #0]
   12ec6:	3305      	adds	r3, #5
   12ec8:	b2da      	uxtb	r2, r3
   12eca:	1dbb      	adds	r3, r7, #6
   12ecc:	781b      	ldrb	r3, [r3, #0]
   12ece:	3309      	adds	r3, #9
   12ed0:	b2dc      	uxtb	r4, r3
   12ed2:	1dbb      	adds	r3, r7, #6
   12ed4:	7819      	ldrb	r1, [r3, #0]
   12ed6:	1dfb      	adds	r3, r7, #7
   12ed8:	7818      	ldrb	r0, [r3, #0]
   12eda:	2328      	movs	r3, #40	; 0x28
   12edc:	18fb      	adds	r3, r7, r3
   12ede:	881b      	ldrh	r3, [r3, #0]
   12ee0:	9300      	str	r3, [sp, #0]
   12ee2:	0023      	movs	r3, r4
   12ee4:	4c26      	ldr	r4, [pc, #152]	; (12f80 <LCD_drawFastChar+0xf0>)
   12ee6:	47a0      	blx	r4
		
	if ((LCD_WIDTH-x>=5)&&(LCD_HEIGHT-y>=8)){
   12ee8:	1dfb      	adds	r3, r7, #7
   12eea:	781b      	ldrb	r3, [r3, #0]
   12eec:	22a0      	movs	r2, #160	; 0xa0
   12eee:	1ad3      	subs	r3, r2, r3
   12ef0:	2b04      	cmp	r3, #4
   12ef2:	dd41      	ble.n	12f78 <LCD_drawFastChar+0xe8>
   12ef4:	1dbb      	adds	r3, r7, #6
   12ef6:	781b      	ldrb	r3, [r3, #0]
   12ef8:	2280      	movs	r2, #128	; 0x80
   12efa:	1ad3      	subs	r3, r2, r3
   12efc:	2b07      	cmp	r3, #7
   12efe:	dd3b      	ble.n	12f78 <LCD_drawFastChar+0xe8>
		for(i=0;i<5;i++){
   12f00:	2300      	movs	r3, #0
   12f02:	617b      	str	r3, [r7, #20]
   12f04:	e035      	b.n	12f72 <LCD_drawFastChar+0xe2>
			char pixels = ASCII[row][i]; //Go through the list of pixels
   12f06:	230e      	movs	r3, #14
   12f08:	18fb      	adds	r3, r7, r3
   12f0a:	881a      	ldrh	r2, [r3, #0]
   12f0c:	230d      	movs	r3, #13
   12f0e:	18f9      	adds	r1, r7, r3
   12f10:	481c      	ldr	r0, [pc, #112]	; (12f84 <LCD_drawFastChar+0xf4>)
   12f12:	0013      	movs	r3, r2
   12f14:	009b      	lsls	r3, r3, #2
   12f16:	189b      	adds	r3, r3, r2
   12f18:	18c2      	adds	r2, r0, r3
   12f1a:	697b      	ldr	r3, [r7, #20]
   12f1c:	18d3      	adds	r3, r2, r3
   12f1e:	781b      	ldrb	r3, [r3, #0]
   12f20:	700b      	strb	r3, [r1, #0]
			for(j=0;j<9;j++){
   12f22:	2300      	movs	r3, #0
   12f24:	613b      	str	r3, [r7, #16]
   12f26:	e01e      	b.n	12f66 <LCD_drawFastChar+0xd6>
				if ((pixels>>j)&1==1){
   12f28:	230d      	movs	r3, #13
   12f2a:	18fb      	adds	r3, r7, r3
   12f2c:	781a      	ldrb	r2, [r3, #0]
   12f2e:	693b      	ldr	r3, [r7, #16]
   12f30:	411a      	asrs	r2, r3
   12f32:	0013      	movs	r3, r2
   12f34:	2201      	movs	r2, #1
   12f36:	4013      	ands	r3, r2
   12f38:	d012      	beq.n	12f60 <LCD_drawFastChar+0xd0>
					LCD_drawPixel(x+i,y+j+1,fColor);
   12f3a:	697b      	ldr	r3, [r7, #20]
   12f3c:	b2da      	uxtb	r2, r3
   12f3e:	1dfb      	adds	r3, r7, #7
   12f40:	781b      	ldrb	r3, [r3, #0]
   12f42:	18d3      	adds	r3, r2, r3
   12f44:	b2d8      	uxtb	r0, r3
   12f46:	693b      	ldr	r3, [r7, #16]
   12f48:	b2da      	uxtb	r2, r3
   12f4a:	1dbb      	adds	r3, r7, #6
   12f4c:	781b      	ldrb	r3, [r3, #0]
   12f4e:	18d3      	adds	r3, r2, r3
   12f50:	b2db      	uxtb	r3, r3
   12f52:	3301      	adds	r3, #1
   12f54:	b2d9      	uxtb	r1, r3
   12f56:	1cbb      	adds	r3, r7, #2
   12f58:	881b      	ldrh	r3, [r3, #0]
   12f5a:	001a      	movs	r2, r3
   12f5c:	4b0a      	ldr	r3, [pc, #40]	; (12f88 <LCD_drawFastChar+0xf8>)
   12f5e:	4798      	blx	r3
			for(j=0;j<9;j++){
   12f60:	693b      	ldr	r3, [r7, #16]
   12f62:	3301      	adds	r3, #1
   12f64:	613b      	str	r3, [r7, #16]
   12f66:	693b      	ldr	r3, [r7, #16]
   12f68:	2b08      	cmp	r3, #8
   12f6a:	dddd      	ble.n	12f28 <LCD_drawFastChar+0x98>
		for(i=0;i<5;i++){
   12f6c:	697b      	ldr	r3, [r7, #20]
   12f6e:	3301      	adds	r3, #1
   12f70:	617b      	str	r3, [r7, #20]
   12f72:	697b      	ldr	r3, [r7, #20]
   12f74:	2b04      	cmp	r3, #4
   12f76:	ddc6      	ble.n	12f06 <LCD_drawFastChar+0x76>
				}
			}
		}
	}
}
   12f78:	46c0      	nop			; (mov r8, r8)
   12f7a:	46bd      	mov	sp, r7
   12f7c:	b006      	add	sp, #24
   12f7e:	bdb0      	pop	{r4, r5, r7, pc}
   12f80:	00012999 	.word	0x00012999
   12f84:	000398c8 	.word	0x000398c8
   12f88:	00012949 	.word	0x00012949

00012f8c <LCD_drawString>:
/**************************************************************************//**
* @fn			void LCD_drawString(uint8_t x, uint8_t y, char* str, uint16_t fg, uint16_t bg)
* @brief		Draw a string starting at the point with foreground and background colors
* @note
*****************************************************************************/
void LCD_drawString(uint8_t x, uint8_t y, char* str, uint16_t fg, uint16_t bg){
   12f8c:	b590      	push	{r4, r7, lr}
   12f8e:	b087      	sub	sp, #28
   12f90:	af02      	add	r7, sp, #8
   12f92:	0004      	movs	r4, r0
   12f94:	0008      	movs	r0, r1
   12f96:	603a      	str	r2, [r7, #0]
   12f98:	0019      	movs	r1, r3
   12f9a:	1dfb      	adds	r3, r7, #7
   12f9c:	1c22      	adds	r2, r4, #0
   12f9e:	701a      	strb	r2, [r3, #0]
   12fa0:	1dbb      	adds	r3, r7, #6
   12fa2:	1c02      	adds	r2, r0, #0
   12fa4:	701a      	strb	r2, [r3, #0]
   12fa6:	1d3b      	adds	r3, r7, #4
   12fa8:	1c0a      	adds	r2, r1, #0
   12faa:	801a      	strh	r2, [r3, #0]
	int i = 0;
   12fac:	2300      	movs	r3, #0
   12fae:	60fb      	str	r3, [r7, #12]
	while(str[i]){
   12fb0:	e01c      	b.n	12fec <LCD_drawString+0x60>
		LCD_drawFastChar(x+5*i,y,str[i],fg,bg);
   12fb2:	68fb      	ldr	r3, [r7, #12]
   12fb4:	b2db      	uxtb	r3, r3
   12fb6:	1c1a      	adds	r2, r3, #0
   12fb8:	0092      	lsls	r2, r2, #2
   12fba:	18d3      	adds	r3, r2, r3
   12fbc:	b2da      	uxtb	r2, r3
   12fbe:	1dfb      	adds	r3, r7, #7
   12fc0:	781b      	ldrb	r3, [r3, #0]
   12fc2:	18d3      	adds	r3, r2, r3
   12fc4:	b2d8      	uxtb	r0, r3
   12fc6:	68fb      	ldr	r3, [r7, #12]
   12fc8:	683a      	ldr	r2, [r7, #0]
   12fca:	18d3      	adds	r3, r2, r3
   12fcc:	781b      	ldrb	r3, [r3, #0]
   12fce:	b29a      	uxth	r2, r3
   12fd0:	1d3b      	adds	r3, r7, #4
   12fd2:	881c      	ldrh	r4, [r3, #0]
   12fd4:	1dbb      	adds	r3, r7, #6
   12fd6:	7819      	ldrb	r1, [r3, #0]
   12fd8:	2320      	movs	r3, #32
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	881b      	ldrh	r3, [r3, #0]
   12fde:	9300      	str	r3, [sp, #0]
   12fe0:	0023      	movs	r3, r4
   12fe2:	4c07      	ldr	r4, [pc, #28]	; (13000 <LCD_drawString+0x74>)
   12fe4:	47a0      	blx	r4
		i++;
   12fe6:	68fb      	ldr	r3, [r7, #12]
   12fe8:	3301      	adds	r3, #1
   12fea:	60fb      	str	r3, [r7, #12]
	while(str[i]){
   12fec:	68fb      	ldr	r3, [r7, #12]
   12fee:	683a      	ldr	r2, [r7, #0]
   12ff0:	18d3      	adds	r3, r2, r3
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	d1dc      	bne.n	12fb2 <LCD_drawString+0x26>
	}
}
   12ff8:	46c0      	nop			; (mov r8, r8)
   12ffa:	46bd      	mov	sp, r7
   12ffc:	b005      	add	sp, #20
   12ffe:	bd90      	pop	{r4, r7, pc}
   13000:	00012e91 	.word	0x00012e91

00013004 <lcd_draw_circle_arc>:
/**************************************************************************//**
* @fn			void draw_circle_arc(int x0, int y0, int r, bool down
* @brief		draw arc
* @note
*****************************************************************************/
void lcd_draw_circle_arc(int x0, int y0, int r, bool down, uint16_t HEART_COLOR) {
   13004:	b590      	push	{r4, r7, lr}
   13006:	b08d      	sub	sp, #52	; 0x34
   13008:	af02      	add	r7, sp, #8
   1300a:	60f8      	str	r0, [r7, #12]
   1300c:	60b9      	str	r1, [r7, #8]
   1300e:	607a      	str	r2, [r7, #4]
   13010:	001a      	movs	r2, r3
   13012:	1cfb      	adds	r3, r7, #3
   13014:	701a      	strb	r2, [r3, #0]
	int x = -r;
   13016:	687b      	ldr	r3, [r7, #4]
   13018:	425b      	negs	r3, r3
   1301a:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
   1301c:	2300      	movs	r3, #0
   1301e:	623b      	str	r3, [r7, #32]
	int err = 2 - 2 * r;
   13020:	687b      	ldr	r3, [r7, #4]
   13022:	2201      	movs	r2, #1
   13024:	1ad3      	subs	r3, r2, r3
   13026:	005b      	lsls	r3, r3, #1
   13028:	61fb      	str	r3, [r7, #28]
	int x_start, x_end;

	do {
		x_start = x0 - x;
   1302a:	68fa      	ldr	r2, [r7, #12]
   1302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1302e:	1ad3      	subs	r3, r2, r3
   13030:	61bb      	str	r3, [r7, #24]
		x_end = x0 + x;
   13032:	68fa      	ldr	r2, [r7, #12]
   13034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13036:	18d3      	adds	r3, r2, r3
   13038:	617b      	str	r3, [r7, #20]

		if (down) {
   1303a:	1cfb      	adds	r3, r7, #3
   1303c:	781b      	ldrb	r3, [r3, #0]
   1303e:	2b00      	cmp	r3, #0
   13040:	d01a      	beq.n	13078 <lcd_draw_circle_arc+0x74>
			LCD_drawLine(x_start, y0 + y, x_end, y0 + y, HEART_COLOR);
   13042:	69bb      	ldr	r3, [r7, #24]
   13044:	b218      	sxth	r0, r3
   13046:	68bb      	ldr	r3, [r7, #8]
   13048:	b29a      	uxth	r2, r3
   1304a:	6a3b      	ldr	r3, [r7, #32]
   1304c:	b29b      	uxth	r3, r3
   1304e:	18d3      	adds	r3, r2, r3
   13050:	b29b      	uxth	r3, r3
   13052:	b219      	sxth	r1, r3
   13054:	697b      	ldr	r3, [r7, #20]
   13056:	b21c      	sxth	r4, r3
   13058:	68bb      	ldr	r3, [r7, #8]
   1305a:	b29a      	uxth	r2, r3
   1305c:	6a3b      	ldr	r3, [r7, #32]
   1305e:	b29b      	uxth	r3, r3
   13060:	18d3      	adds	r3, r2, r3
   13062:	b29b      	uxth	r3, r3
   13064:	b21a      	sxth	r2, r3
   13066:	2338      	movs	r3, #56	; 0x38
   13068:	18fb      	adds	r3, r7, r3
   1306a:	881b      	ldrh	r3, [r3, #0]
   1306c:	9300      	str	r3, [sp, #0]
   1306e:	0013      	movs	r3, r2
   13070:	0022      	movs	r2, r4
   13072:	4c22      	ldr	r4, [pc, #136]	; (130fc <lcd_draw_circle_arc+0xf8>)
   13074:	47a0      	blx	r4
   13076:	e019      	b.n	130ac <lcd_draw_circle_arc+0xa8>
			} else {
			LCD_drawLine(x_start, y0 - y, x_end, y0 - y, HEART_COLOR);
   13078:	69bb      	ldr	r3, [r7, #24]
   1307a:	b218      	sxth	r0, r3
   1307c:	68bb      	ldr	r3, [r7, #8]
   1307e:	b29a      	uxth	r2, r3
   13080:	6a3b      	ldr	r3, [r7, #32]
   13082:	b29b      	uxth	r3, r3
   13084:	1ad3      	subs	r3, r2, r3
   13086:	b29b      	uxth	r3, r3
   13088:	b219      	sxth	r1, r3
   1308a:	697b      	ldr	r3, [r7, #20]
   1308c:	b21c      	sxth	r4, r3
   1308e:	68bb      	ldr	r3, [r7, #8]
   13090:	b29a      	uxth	r2, r3
   13092:	6a3b      	ldr	r3, [r7, #32]
   13094:	b29b      	uxth	r3, r3
   13096:	1ad3      	subs	r3, r2, r3
   13098:	b29b      	uxth	r3, r3
   1309a:	b21a      	sxth	r2, r3
   1309c:	2338      	movs	r3, #56	; 0x38
   1309e:	18fb      	adds	r3, r7, r3
   130a0:	881b      	ldrh	r3, [r3, #0]
   130a2:	9300      	str	r3, [sp, #0]
   130a4:	0013      	movs	r3, r2
   130a6:	0022      	movs	r2, r4
   130a8:	4c14      	ldr	r4, [pc, #80]	; (130fc <lcd_draw_circle_arc+0xf8>)
   130aa:	47a0      	blx	r4
		}

		r = err;
   130ac:	69fb      	ldr	r3, [r7, #28]
   130ae:	607b      	str	r3, [r7, #4]
		if (r <= y) {
   130b0:	687a      	ldr	r2, [r7, #4]
   130b2:	6a3b      	ldr	r3, [r7, #32]
   130b4:	429a      	cmp	r2, r3
   130b6:	dc08      	bgt.n	130ca <lcd_draw_circle_arc+0xc6>
			err += ++y * 2 + 1;
   130b8:	6a3b      	ldr	r3, [r7, #32]
   130ba:	3301      	adds	r3, #1
   130bc:	623b      	str	r3, [r7, #32]
   130be:	6a3b      	ldr	r3, [r7, #32]
   130c0:	005b      	lsls	r3, r3, #1
   130c2:	3301      	adds	r3, #1
   130c4:	69fa      	ldr	r2, [r7, #28]
   130c6:	18d3      	adds	r3, r2, r3
   130c8:	61fb      	str	r3, [r7, #28]
		}
		if (r > x || err > y) {
   130ca:	687a      	ldr	r2, [r7, #4]
   130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130ce:	429a      	cmp	r2, r3
   130d0:	dc03      	bgt.n	130da <lcd_draw_circle_arc+0xd6>
   130d2:	69fa      	ldr	r2, [r7, #28]
   130d4:	6a3b      	ldr	r3, [r7, #32]
   130d6:	429a      	cmp	r2, r3
   130d8:	dd08      	ble.n	130ec <lcd_draw_circle_arc+0xe8>
			err += ++x * 2 + 1;
   130da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130dc:	3301      	adds	r3, #1
   130de:	627b      	str	r3, [r7, #36]	; 0x24
   130e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130e2:	005b      	lsls	r3, r3, #1
   130e4:	3301      	adds	r3, #1
   130e6:	69fa      	ldr	r2, [r7, #28]
   130e8:	18d3      	adds	r3, r2, r3
   130ea:	61fb      	str	r3, [r7, #28]
		}
	} while (x < 0);
   130ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   130ee:	2b00      	cmp	r3, #0
   130f0:	db9b      	blt.n	1302a <lcd_draw_circle_arc+0x26>
}
   130f2:	46c0      	nop			; (mov r8, r8)
   130f4:	46bd      	mov	sp, r7
   130f6:	b00b      	add	sp, #44	; 0x2c
   130f8:	bd90      	pop	{r4, r7, pc}
   130fa:	46c0      	nop			; (mov r8, r8)
   130fc:	00012ad9 	.word	0x00012ad9

00013100 <draw_heart>:
/**************************************************************************//**
* @fn			void draw_heart(int x, int y, int r, uint16 HEART_COLOR)
* @brief		draw heart
* @note
*****************************************************************************/
void draw_heart(int x, int y, int r, uint16_t HEART_COLOR) {
   13100:	b590      	push	{r4, r7, lr}
   13102:	b089      	sub	sp, #36	; 0x24
   13104:	af02      	add	r7, sp, #8
   13106:	60f8      	str	r0, [r7, #12]
   13108:	60b9      	str	r1, [r7, #8]
   1310a:	607a      	str	r2, [r7, #4]
   1310c:	001a      	movs	r2, r3
   1310e:	1cbb      	adds	r3, r7, #2
   13110:	801a      	strh	r2, [r3, #0]
	lcd_draw_circle_arc(x - r / 2, y - r / 3, r / 2, false, HEART_COLOR);
   13112:	687b      	ldr	r3, [r7, #4]
   13114:	2b00      	cmp	r3, #0
   13116:	da00      	bge.n	1311a <draw_heart+0x1a>
   13118:	3301      	adds	r3, #1
   1311a:	105b      	asrs	r3, r3, #1
   1311c:	425b      	negs	r3, r3
   1311e:	001a      	movs	r2, r3
   13120:	68fb      	ldr	r3, [r7, #12]
   13122:	18d4      	adds	r4, r2, r3
   13124:	6878      	ldr	r0, [r7, #4]
   13126:	4b38      	ldr	r3, [pc, #224]	; (13208 <draw_heart+0x108>)
   13128:	2203      	movs	r2, #3
   1312a:	4251      	negs	r1, r2
   1312c:	4798      	blx	r3
   1312e:	0003      	movs	r3, r0
   13130:	001a      	movs	r2, r3
   13132:	68bb      	ldr	r3, [r7, #8]
   13134:	18d1      	adds	r1, r2, r3
   13136:	687b      	ldr	r3, [r7, #4]
   13138:	2b00      	cmp	r3, #0
   1313a:	da00      	bge.n	1313e <draw_heart+0x3e>
   1313c:	3301      	adds	r3, #1
   1313e:	105b      	asrs	r3, r3, #1
   13140:	001a      	movs	r2, r3
   13142:	1cbb      	adds	r3, r7, #2
   13144:	881b      	ldrh	r3, [r3, #0]
   13146:	9300      	str	r3, [sp, #0]
   13148:	2300      	movs	r3, #0
   1314a:	0020      	movs	r0, r4
   1314c:	4c2f      	ldr	r4, [pc, #188]	; (1320c <draw_heart+0x10c>)
   1314e:	47a0      	blx	r4
	lcd_draw_circle_arc(x + r / 2, y - r / 3, r / 2, false, HEART_COLOR);
   13150:	687b      	ldr	r3, [r7, #4]
   13152:	2b00      	cmp	r3, #0
   13154:	da00      	bge.n	13158 <draw_heart+0x58>
   13156:	3301      	adds	r3, #1
   13158:	105b      	asrs	r3, r3, #1
   1315a:	001a      	movs	r2, r3
   1315c:	68fb      	ldr	r3, [r7, #12]
   1315e:	18d4      	adds	r4, r2, r3
   13160:	6878      	ldr	r0, [r7, #4]
   13162:	4b29      	ldr	r3, [pc, #164]	; (13208 <draw_heart+0x108>)
   13164:	2203      	movs	r2, #3
   13166:	4251      	negs	r1, r2
   13168:	4798      	blx	r3
   1316a:	0003      	movs	r3, r0
   1316c:	001a      	movs	r2, r3
   1316e:	68bb      	ldr	r3, [r7, #8]
   13170:	18d1      	adds	r1, r2, r3
   13172:	687b      	ldr	r3, [r7, #4]
   13174:	2b00      	cmp	r3, #0
   13176:	da00      	bge.n	1317a <draw_heart+0x7a>
   13178:	3301      	adds	r3, #1
   1317a:	105b      	asrs	r3, r3, #1
   1317c:	001a      	movs	r2, r3
   1317e:	1cbb      	adds	r3, r7, #2
   13180:	881b      	ldrh	r3, [r3, #0]
   13182:	9300      	str	r3, [sp, #0]
   13184:	2300      	movs	r3, #0
   13186:	0020      	movs	r0, r4
   13188:	4c20      	ldr	r4, [pc, #128]	; (1320c <draw_heart+0x10c>)
   1318a:	47a0      	blx	r4

	for (int i = 0; i < r; i++) {
   1318c:	2300      	movs	r3, #0
   1318e:	617b      	str	r3, [r7, #20]
   13190:	e031      	b.n	131f6 <draw_heart+0xf6>
		LCD_drawLine(x - r + i, y + i - 26 / 2, x + r - i, y + i - 26 / 2, HEART_COLOR);
   13192:	68fb      	ldr	r3, [r7, #12]
   13194:	b29a      	uxth	r2, r3
   13196:	687b      	ldr	r3, [r7, #4]
   13198:	b29b      	uxth	r3, r3
   1319a:	1ad3      	subs	r3, r2, r3
   1319c:	b29a      	uxth	r2, r3
   1319e:	697b      	ldr	r3, [r7, #20]
   131a0:	b29b      	uxth	r3, r3
   131a2:	18d3      	adds	r3, r2, r3
   131a4:	b29b      	uxth	r3, r3
   131a6:	b218      	sxth	r0, r3
   131a8:	68bb      	ldr	r3, [r7, #8]
   131aa:	b29a      	uxth	r2, r3
   131ac:	697b      	ldr	r3, [r7, #20]
   131ae:	b29b      	uxth	r3, r3
   131b0:	18d3      	adds	r3, r2, r3
   131b2:	b29b      	uxth	r3, r3
   131b4:	3b0d      	subs	r3, #13
   131b6:	b29b      	uxth	r3, r3
   131b8:	b219      	sxth	r1, r3
   131ba:	68fb      	ldr	r3, [r7, #12]
   131bc:	b29a      	uxth	r2, r3
   131be:	687b      	ldr	r3, [r7, #4]
   131c0:	b29b      	uxth	r3, r3
   131c2:	18d3      	adds	r3, r2, r3
   131c4:	b29a      	uxth	r2, r3
   131c6:	697b      	ldr	r3, [r7, #20]
   131c8:	b29b      	uxth	r3, r3
   131ca:	1ad3      	subs	r3, r2, r3
   131cc:	b29b      	uxth	r3, r3
   131ce:	b21c      	sxth	r4, r3
   131d0:	68bb      	ldr	r3, [r7, #8]
   131d2:	b29a      	uxth	r2, r3
   131d4:	697b      	ldr	r3, [r7, #20]
   131d6:	b29b      	uxth	r3, r3
   131d8:	18d3      	adds	r3, r2, r3
   131da:	b29b      	uxth	r3, r3
   131dc:	3b0d      	subs	r3, #13
   131de:	b29b      	uxth	r3, r3
   131e0:	b21a      	sxth	r2, r3
   131e2:	1cbb      	adds	r3, r7, #2
   131e4:	881b      	ldrh	r3, [r3, #0]
   131e6:	9300      	str	r3, [sp, #0]
   131e8:	0013      	movs	r3, r2
   131ea:	0022      	movs	r2, r4
   131ec:	4c08      	ldr	r4, [pc, #32]	; (13210 <draw_heart+0x110>)
   131ee:	47a0      	blx	r4
	for (int i = 0; i < r; i++) {
   131f0:	697b      	ldr	r3, [r7, #20]
   131f2:	3301      	adds	r3, #1
   131f4:	617b      	str	r3, [r7, #20]
   131f6:	697a      	ldr	r2, [r7, #20]
   131f8:	687b      	ldr	r3, [r7, #4]
   131fa:	429a      	cmp	r2, r3
   131fc:	dbc9      	blt.n	13192 <draw_heart+0x92>
	}
}
   131fe:	46c0      	nop			; (mov r8, r8)
   13200:	46bd      	mov	sp, r7
   13202:	b007      	add	sp, #28
   13204:	bd90      	pop	{r4, r7, pc}
   13206:	46c0      	nop			; (mov r8, r8)
   13208:	00035b05 	.word	0x00035b05
   1320c:	00013005 	.word	0x00013005
   13210:	00012ad9 	.word	0x00012ad9

00013214 <draw_title>:
/**************************************************************************//**
* @fn			void draw_title(const char *title)
* @brief		draw title
* @note
*****************************************************************************/
void draw_title(const char *title) {
   13214:	b590      	push	{r4, r7, lr}
   13216:	b089      	sub	sp, #36	; 0x24
   13218:	af02      	add	r7, sp, #8
   1321a:	6078      	str	r0, [r7, #4]
	int x = (SCREEN_WIDTH - strlen(title) * 6) / 2;
   1321c:	687b      	ldr	r3, [r7, #4]
   1321e:	0018      	movs	r0, r3
   13220:	4b1c      	ldr	r3, [pc, #112]	; (13294 <draw_title+0x80>)
   13222:	4798      	blx	r3
   13224:	0002      	movs	r2, r0
   13226:	0013      	movs	r3, r2
   13228:	005b      	lsls	r3, r3, #1
   1322a:	189b      	adds	r3, r3, r2
   1322c:	005b      	lsls	r3, r3, #1
   1322e:	001a      	movs	r2, r3
   13230:	23a0      	movs	r3, #160	; 0xa0
   13232:	1a9b      	subs	r3, r3, r2
   13234:	085b      	lsrs	r3, r3, #1
   13236:	613b      	str	r3, [r7, #16]
	int y = 10;
   13238:	230a      	movs	r3, #10
   1323a:	60fb      	str	r3, [r7, #12]

	for (size_t i = 0; i < strlen(title); i++) {
   1323c:	2300      	movs	r3, #0
   1323e:	617b      	str	r3, [r7, #20]
   13240:	e01b      	b.n	1327a <draw_title+0x66>
		LCD_drawChar(x + i * 6, y, title[i], TITLE_COLOR, BG_COLOR);
   13242:	697b      	ldr	r3, [r7, #20]
   13244:	b2db      	uxtb	r3, r3
   13246:	1c1a      	adds	r2, r3, #0
   13248:	1c13      	adds	r3, r2, #0
   1324a:	18db      	adds	r3, r3, r3
   1324c:	189b      	adds	r3, r3, r2
   1324e:	18db      	adds	r3, r3, r3
   13250:	b2da      	uxtb	r2, r3
   13252:	693b      	ldr	r3, [r7, #16]
   13254:	b2db      	uxtb	r3, r3
   13256:	18d3      	adds	r3, r2, r3
   13258:	b2d8      	uxtb	r0, r3
   1325a:	68fb      	ldr	r3, [r7, #12]
   1325c:	b2d9      	uxtb	r1, r3
   1325e:	687a      	ldr	r2, [r7, #4]
   13260:	697b      	ldr	r3, [r7, #20]
   13262:	18d3      	adds	r3, r2, r3
   13264:	781b      	ldrb	r3, [r3, #0]
   13266:	b29a      	uxth	r2, r3
   13268:	4c0b      	ldr	r4, [pc, #44]	; (13298 <draw_title+0x84>)
   1326a:	2300      	movs	r3, #0
   1326c:	9300      	str	r3, [sp, #0]
   1326e:	0023      	movs	r3, r4
   13270:	4c0a      	ldr	r4, [pc, #40]	; (1329c <draw_title+0x88>)
   13272:	47a0      	blx	r4
	for (size_t i = 0; i < strlen(title); i++) {
   13274:	697b      	ldr	r3, [r7, #20]
   13276:	3301      	adds	r3, #1
   13278:	617b      	str	r3, [r7, #20]
   1327a:	687b      	ldr	r3, [r7, #4]
   1327c:	0018      	movs	r0, r3
   1327e:	4b05      	ldr	r3, [pc, #20]	; (13294 <draw_title+0x80>)
   13280:	4798      	blx	r3
   13282:	0002      	movs	r2, r0
   13284:	697b      	ldr	r3, [r7, #20]
   13286:	429a      	cmp	r2, r3
   13288:	d8db      	bhi.n	13242 <draw_title+0x2e>
	}
}
   1328a:	46c0      	nop			; (mov r8, r8)
   1328c:	46bd      	mov	sp, r7
   1328e:	b007      	add	sp, #28
   13290:	bd90      	pop	{r4, r7, pc}
   13292:	46c0      	nop			; (mov r8, r8)
   13294:	000388bf 	.word	0x000388bf
   13298:	0000ffe0 	.word	0x0000ffe0
   1329c:	00012d9d 	.word	0x00012d9d

000132a0 <draw_border>:
/**************************************************************************//**
* @fn			void draw_title(const char *title)
* @brief		draw title
* @note
*****************************************************************************/
void draw_border(int thickness, uint16_t color) {
   132a0:	b580      	push	{r7, lr}
   132a2:	b084      	sub	sp, #16
   132a4:	af00      	add	r7, sp, #0
   132a6:	6078      	str	r0, [r7, #4]
   132a8:	000a      	movs	r2, r1
   132aa:	1cbb      	adds	r3, r7, #2
   132ac:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < thickness; i++) {
   132ae:	2300      	movs	r3, #0
   132b0:	60fb      	str	r3, [r7, #12]
   132b2:	e029      	b.n	13308 <draw_border+0x68>
		LCD_drawXLine(i, color);
   132b4:	68fb      	ldr	r3, [r7, #12]
   132b6:	b2da      	uxtb	r2, r3
   132b8:	1cbb      	adds	r3, r7, #2
   132ba:	881b      	ldrh	r3, [r3, #0]
   132bc:	0019      	movs	r1, r3
   132be:	0010      	movs	r0, r2
   132c0:	4b15      	ldr	r3, [pc, #84]	; (13318 <draw_border+0x78>)
   132c2:	4798      	blx	r3
		LCD_drawYLine(i, color);
   132c4:	68fb      	ldr	r3, [r7, #12]
   132c6:	b2da      	uxtb	r2, r3
   132c8:	1cbb      	adds	r3, r7, #2
   132ca:	881b      	ldrh	r3, [r3, #0]
   132cc:	0019      	movs	r1, r3
   132ce:	0010      	movs	r0, r2
   132d0:	4b12      	ldr	r3, [pc, #72]	; (1331c <draw_border+0x7c>)
   132d2:	4798      	blx	r3
		LCD_drawXLine(SCREEN_HEIGHT - 1 - i, color);
   132d4:	68fb      	ldr	r3, [r7, #12]
   132d6:	b2db      	uxtb	r3, r3
   132d8:	227f      	movs	r2, #127	; 0x7f
   132da:	1ad3      	subs	r3, r2, r3
   132dc:	b2da      	uxtb	r2, r3
   132de:	1cbb      	adds	r3, r7, #2
   132e0:	881b      	ldrh	r3, [r3, #0]
   132e2:	0019      	movs	r1, r3
   132e4:	0010      	movs	r0, r2
   132e6:	4b0c      	ldr	r3, [pc, #48]	; (13318 <draw_border+0x78>)
   132e8:	4798      	blx	r3
		LCD_drawYLine(SCREEN_WIDTH - 1 - i, color);
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	b2db      	uxtb	r3, r3
   132ee:	2261      	movs	r2, #97	; 0x61
   132f0:	4252      	negs	r2, r2
   132f2:	1ad3      	subs	r3, r2, r3
   132f4:	b2da      	uxtb	r2, r3
   132f6:	1cbb      	adds	r3, r7, #2
   132f8:	881b      	ldrh	r3, [r3, #0]
   132fa:	0019      	movs	r1, r3
   132fc:	0010      	movs	r0, r2
   132fe:	4b07      	ldr	r3, [pc, #28]	; (1331c <draw_border+0x7c>)
   13300:	4798      	blx	r3
	for (int i = 0; i < thickness; i++) {
   13302:	68fb      	ldr	r3, [r7, #12]
   13304:	3301      	adds	r3, #1
   13306:	60fb      	str	r3, [r7, #12]
   13308:	68fa      	ldr	r2, [r7, #12]
   1330a:	687b      	ldr	r3, [r7, #4]
   1330c:	429a      	cmp	r2, r3
   1330e:	dbd1      	blt.n	132b4 <draw_border+0x14>
	}
}
   13310:	46c0      	nop			; (mov r8, r8)
   13312:	46bd      	mov	sp, r7
   13314:	b004      	add	sp, #16
   13316:	bd80      	pop	{r7, pc}
   13318:	00012d31 	.word	0x00012d31
   1331c:	00012cc5 	.word	0x00012cc5

00013320 <draw_filled_circle>:
/**************************************************************************//**
* @fn			void draw_title(const char *title)
* @brief		draw title
* @note
*****************************************************************************/
void draw_filled_circle(int x0, int y0, int r, uint16_t color) {
   13320:	b590      	push	{r4, r7, lr}
   13322:	b08b      	sub	sp, #44	; 0x2c
   13324:	af02      	add	r7, sp, #8
   13326:	60f8      	str	r0, [r7, #12]
   13328:	60b9      	str	r1, [r7, #8]
   1332a:	607a      	str	r2, [r7, #4]
   1332c:	001a      	movs	r2, r3
   1332e:	1cbb      	adds	r3, r7, #2
   13330:	801a      	strh	r2, [r3, #0]
	int x = -r;
   13332:	687b      	ldr	r3, [r7, #4]
   13334:	425b      	negs	r3, r3
   13336:	61fb      	str	r3, [r7, #28]
	int y = 0;
   13338:	2300      	movs	r3, #0
   1333a:	61bb      	str	r3, [r7, #24]
	int err = 2 - 2 * r;
   1333c:	687b      	ldr	r3, [r7, #4]
   1333e:	2201      	movs	r2, #1
   13340:	1ad3      	subs	r3, r2, r3
   13342:	005b      	lsls	r3, r3, #1
   13344:	617b      	str	r3, [r7, #20]

	do {
		LCD_drawLine(x0 - x, y0 - y, x0 - x, y0 + y, color);
   13346:	68fb      	ldr	r3, [r7, #12]
   13348:	b29a      	uxth	r2, r3
   1334a:	69fb      	ldr	r3, [r7, #28]
   1334c:	b29b      	uxth	r3, r3
   1334e:	1ad3      	subs	r3, r2, r3
   13350:	b29b      	uxth	r3, r3
   13352:	b218      	sxth	r0, r3
   13354:	68bb      	ldr	r3, [r7, #8]
   13356:	b29a      	uxth	r2, r3
   13358:	69bb      	ldr	r3, [r7, #24]
   1335a:	b29b      	uxth	r3, r3
   1335c:	1ad3      	subs	r3, r2, r3
   1335e:	b29b      	uxth	r3, r3
   13360:	b219      	sxth	r1, r3
   13362:	68fb      	ldr	r3, [r7, #12]
   13364:	b29a      	uxth	r2, r3
   13366:	69fb      	ldr	r3, [r7, #28]
   13368:	b29b      	uxth	r3, r3
   1336a:	1ad3      	subs	r3, r2, r3
   1336c:	b29b      	uxth	r3, r3
   1336e:	b21c      	sxth	r4, r3
   13370:	68bb      	ldr	r3, [r7, #8]
   13372:	b29a      	uxth	r2, r3
   13374:	69bb      	ldr	r3, [r7, #24]
   13376:	b29b      	uxth	r3, r3
   13378:	18d3      	adds	r3, r2, r3
   1337a:	b29b      	uxth	r3, r3
   1337c:	b21a      	sxth	r2, r3
   1337e:	1cbb      	adds	r3, r7, #2
   13380:	881b      	ldrh	r3, [r3, #0]
   13382:	9300      	str	r3, [sp, #0]
   13384:	0013      	movs	r3, r2
   13386:	0022      	movs	r2, r4
   13388:	4c25      	ldr	r4, [pc, #148]	; (13420 <draw_filled_circle+0x100>)
   1338a:	47a0      	blx	r4
		LCD_drawLine(x0 + x, y0 - y, x0 + x, y0 + y, color);
   1338c:	68fb      	ldr	r3, [r7, #12]
   1338e:	b29a      	uxth	r2, r3
   13390:	69fb      	ldr	r3, [r7, #28]
   13392:	b29b      	uxth	r3, r3
   13394:	18d3      	adds	r3, r2, r3
   13396:	b29b      	uxth	r3, r3
   13398:	b218      	sxth	r0, r3
   1339a:	68bb      	ldr	r3, [r7, #8]
   1339c:	b29a      	uxth	r2, r3
   1339e:	69bb      	ldr	r3, [r7, #24]
   133a0:	b29b      	uxth	r3, r3
   133a2:	1ad3      	subs	r3, r2, r3
   133a4:	b29b      	uxth	r3, r3
   133a6:	b219      	sxth	r1, r3
   133a8:	68fb      	ldr	r3, [r7, #12]
   133aa:	b29a      	uxth	r2, r3
   133ac:	69fb      	ldr	r3, [r7, #28]
   133ae:	b29b      	uxth	r3, r3
   133b0:	18d3      	adds	r3, r2, r3
   133b2:	b29b      	uxth	r3, r3
   133b4:	b21c      	sxth	r4, r3
   133b6:	68bb      	ldr	r3, [r7, #8]
   133b8:	b29a      	uxth	r2, r3
   133ba:	69bb      	ldr	r3, [r7, #24]
   133bc:	b29b      	uxth	r3, r3
   133be:	18d3      	adds	r3, r2, r3
   133c0:	b29b      	uxth	r3, r3
   133c2:	b21a      	sxth	r2, r3
   133c4:	1cbb      	adds	r3, r7, #2
   133c6:	881b      	ldrh	r3, [r3, #0]
   133c8:	9300      	str	r3, [sp, #0]
   133ca:	0013      	movs	r3, r2
   133cc:	0022      	movs	r2, r4
   133ce:	4c14      	ldr	r4, [pc, #80]	; (13420 <draw_filled_circle+0x100>)
   133d0:	47a0      	blx	r4

		r = err;
   133d2:	697b      	ldr	r3, [r7, #20]
   133d4:	607b      	str	r3, [r7, #4]
		if (r <= y) {
   133d6:	687a      	ldr	r2, [r7, #4]
   133d8:	69bb      	ldr	r3, [r7, #24]
   133da:	429a      	cmp	r2, r3
   133dc:	dc08      	bgt.n	133f0 <draw_filled_circle+0xd0>
			err += ++y * 2 + 1;
   133de:	69bb      	ldr	r3, [r7, #24]
   133e0:	3301      	adds	r3, #1
   133e2:	61bb      	str	r3, [r7, #24]
   133e4:	69bb      	ldr	r3, [r7, #24]
   133e6:	005b      	lsls	r3, r3, #1
   133e8:	3301      	adds	r3, #1
   133ea:	697a      	ldr	r2, [r7, #20]
   133ec:	18d3      	adds	r3, r2, r3
   133ee:	617b      	str	r3, [r7, #20]
		}
		if (r > x || err > y) {
   133f0:	687a      	ldr	r2, [r7, #4]
   133f2:	69fb      	ldr	r3, [r7, #28]
   133f4:	429a      	cmp	r2, r3
   133f6:	dc03      	bgt.n	13400 <draw_filled_circle+0xe0>
   133f8:	697a      	ldr	r2, [r7, #20]
   133fa:	69bb      	ldr	r3, [r7, #24]
   133fc:	429a      	cmp	r2, r3
   133fe:	dd08      	ble.n	13412 <draw_filled_circle+0xf2>
			err += ++x * 2 + 1;
   13400:	69fb      	ldr	r3, [r7, #28]
   13402:	3301      	adds	r3, #1
   13404:	61fb      	str	r3, [r7, #28]
   13406:	69fb      	ldr	r3, [r7, #28]
   13408:	005b      	lsls	r3, r3, #1
   1340a:	3301      	adds	r3, #1
   1340c:	697a      	ldr	r2, [r7, #20]
   1340e:	18d3      	adds	r3, r2, r3
   13410:	617b      	str	r3, [r7, #20]
		}
	} while (x < 1);
   13412:	69fb      	ldr	r3, [r7, #28]
   13414:	2b00      	cmp	r3, #0
   13416:	dd96      	ble.n	13346 <draw_filled_circle+0x26>
}
   13418:	46c0      	nop			; (mov r8, r8)
   1341a:	46bd      	mov	sp, r7
   1341c:	b009      	add	sp, #36	; 0x24
   1341e:	bd90      	pop	{r4, r7, pc}
   13420:	00012ad9 	.word	0x00012ad9

00013424 <draw_moon_icon>:

/**************************************************************************//**
* @fn			void draw_moon_icon(int x, int y, int size)
* @note
*****************************************************************************/
void draw_moon_icon(int x, int y, int size) {
   13424:	b590      	push	{r4, r7, lr}
   13426:	b089      	sub	sp, #36	; 0x24
   13428:	af00      	add	r7, sp, #0
   1342a:	60f8      	str	r0, [r7, #12]
   1342c:	60b9      	str	r1, [r7, #8]
   1342e:	607a      	str	r2, [r7, #4]
	int r_outer = size / 2;
   13430:	687b      	ldr	r3, [r7, #4]
   13432:	2b00      	cmp	r3, #0
   13434:	da00      	bge.n	13438 <draw_moon_icon+0x14>
   13436:	3301      	adds	r3, #1
   13438:	105b      	asrs	r3, r3, #1
   1343a:	61fb      	str	r3, [r7, #28]
	int r_inner = r_outer * 3 / 4;
   1343c:	69fa      	ldr	r2, [r7, #28]
   1343e:	0013      	movs	r3, r2
   13440:	005b      	lsls	r3, r3, #1
   13442:	189b      	adds	r3, r3, r2
   13444:	2b00      	cmp	r3, #0
   13446:	da00      	bge.n	1344a <draw_moon_icon+0x26>
   13448:	3303      	adds	r3, #3
   1344a:	109b      	asrs	r3, r3, #2
   1344c:	61bb      	str	r3, [r7, #24]
	int offset = r_outer - r_inner;
   1344e:	69fa      	ldr	r2, [r7, #28]
   13450:	69bb      	ldr	r3, [r7, #24]
   13452:	1ad3      	subs	r3, r2, r3
   13454:	617b      	str	r3, [r7, #20]

	draw_filled_circle(x + r_outer , y + r_outer, r_outer, YELLOW);
   13456:	68fa      	ldr	r2, [r7, #12]
   13458:	69fb      	ldr	r3, [r7, #28]
   1345a:	18d0      	adds	r0, r2, r3
   1345c:	68ba      	ldr	r2, [r7, #8]
   1345e:	69fb      	ldr	r3, [r7, #28]
   13460:	18d1      	adds	r1, r2, r3
   13462:	4b0a      	ldr	r3, [pc, #40]	; (1348c <draw_moon_icon+0x68>)
   13464:	69fa      	ldr	r2, [r7, #28]
   13466:	4c0a      	ldr	r4, [pc, #40]	; (13490 <draw_moon_icon+0x6c>)
   13468:	47a0      	blx	r4
	draw_filled_circle(x + r_outer + offset , y + r_outer, r_inner, BG_COLOR);
   1346a:	68fa      	ldr	r2, [r7, #12]
   1346c:	69fb      	ldr	r3, [r7, #28]
   1346e:	18d2      	adds	r2, r2, r3
   13470:	697b      	ldr	r3, [r7, #20]
   13472:	18d0      	adds	r0, r2, r3
   13474:	68ba      	ldr	r2, [r7, #8]
   13476:	69fb      	ldr	r3, [r7, #28]
   13478:	18d1      	adds	r1, r2, r3
   1347a:	69ba      	ldr	r2, [r7, #24]
   1347c:	2300      	movs	r3, #0
   1347e:	4c04      	ldr	r4, [pc, #16]	; (13490 <draw_moon_icon+0x6c>)
   13480:	47a0      	blx	r4
}
   13482:	46c0      	nop			; (mov r8, r8)
   13484:	46bd      	mov	sp, r7
   13486:	b009      	add	sp, #36	; 0x24
   13488:	bd90      	pop	{r4, r7, pc}
   1348a:	46c0      	nop			; (mov r8, r8)
   1348c:	0000ffe0 	.word	0x0000ffe0
   13490:	00013321 	.word	0x00013321

00013494 <draw_boot_screen_title>:
/**************************************************************************//**
* @fn			void draw_boot_screen_title(const char *title)
* @brief		draw title
* @note
*****************************************************************************/
void draw_boot_screen_title(const char *title) {
   13494:	b590      	push	{r4, r7, lr}
   13496:	b089      	sub	sp, #36	; 0x24
   13498:	af02      	add	r7, sp, #8
   1349a:	6078      	str	r0, [r7, #4]
	int x = (SCREEN_WIDTH - strlen(title) * 6) / 2; 
   1349c:	687b      	ldr	r3, [r7, #4]
   1349e:	0018      	movs	r0, r3
   134a0:	4b1c      	ldr	r3, [pc, #112]	; (13514 <draw_boot_screen_title+0x80>)
   134a2:	4798      	blx	r3
   134a4:	0002      	movs	r2, r0
   134a6:	0013      	movs	r3, r2
   134a8:	005b      	lsls	r3, r3, #1
   134aa:	189b      	adds	r3, r3, r2
   134ac:	005b      	lsls	r3, r3, #1
   134ae:	001a      	movs	r2, r3
   134b0:	23a0      	movs	r3, #160	; 0xa0
   134b2:	1a9b      	subs	r3, r3, r2
   134b4:	085b      	lsrs	r3, r3, #1
   134b6:	613b      	str	r3, [r7, #16]
	int y = 30;
   134b8:	231e      	movs	r3, #30
   134ba:	60fb      	str	r3, [r7, #12]

	for (size_t i = 0; i < strlen(title); i++) {
   134bc:	2300      	movs	r3, #0
   134be:	617b      	str	r3, [r7, #20]
   134c0:	e01b      	b.n	134fa <draw_boot_screen_title+0x66>
		LCD_drawChar(x + i * 6, y, title[i], BOOT_SCREEN_TITLE_COLOR, BOOT_SCREEN_BG_COLOR);
   134c2:	697b      	ldr	r3, [r7, #20]
   134c4:	b2db      	uxtb	r3, r3
   134c6:	1c1a      	adds	r2, r3, #0
   134c8:	1c13      	adds	r3, r2, #0
   134ca:	18db      	adds	r3, r3, r3
   134cc:	189b      	adds	r3, r3, r2
   134ce:	18db      	adds	r3, r3, r3
   134d0:	b2da      	uxtb	r2, r3
   134d2:	693b      	ldr	r3, [r7, #16]
   134d4:	b2db      	uxtb	r3, r3
   134d6:	18d3      	adds	r3, r2, r3
   134d8:	b2d8      	uxtb	r0, r3
   134da:	68fb      	ldr	r3, [r7, #12]
   134dc:	b2d9      	uxtb	r1, r3
   134de:	687a      	ldr	r2, [r7, #4]
   134e0:	697b      	ldr	r3, [r7, #20]
   134e2:	18d3      	adds	r3, r2, r3
   134e4:	781b      	ldrb	r3, [r3, #0]
   134e6:	b29a      	uxth	r2, r3
   134e8:	4c0b      	ldr	r4, [pc, #44]	; (13518 <draw_boot_screen_title+0x84>)
   134ea:	2300      	movs	r3, #0
   134ec:	9300      	str	r3, [sp, #0]
   134ee:	0023      	movs	r3, r4
   134f0:	4c0a      	ldr	r4, [pc, #40]	; (1351c <draw_boot_screen_title+0x88>)
   134f2:	47a0      	blx	r4
	for (size_t i = 0; i < strlen(title); i++) {
   134f4:	697b      	ldr	r3, [r7, #20]
   134f6:	3301      	adds	r3, #1
   134f8:	617b      	str	r3, [r7, #20]
   134fa:	687b      	ldr	r3, [r7, #4]
   134fc:	0018      	movs	r0, r3
   134fe:	4b05      	ldr	r3, [pc, #20]	; (13514 <draw_boot_screen_title+0x80>)
   13500:	4798      	blx	r3
   13502:	0002      	movs	r2, r0
   13504:	697b      	ldr	r3, [r7, #20]
   13506:	429a      	cmp	r2, r3
   13508:	d8db      	bhi.n	134c2 <draw_boot_screen_title+0x2e>
	}
}
   1350a:	46c0      	nop			; (mov r8, r8)
   1350c:	46bd      	mov	sp, r7
   1350e:	b007      	add	sp, #28
   13510:	bd90      	pop	{r4, r7, pc}
   13512:	46c0      	nop			; (mov r8, r8)
   13514:	000388bf 	.word	0x000388bf
   13518:	0000ffe0 	.word	0x0000ffe0
   1351c:	00012d9d 	.word	0x00012d9d

00013520 <draw_boot_screen_subtitle>:
/**************************************************************************//**
* @fn			void draw_boot_screen_subtitle(const char *subtitle)
* @brief		draw title
* @note
*****************************************************************************/
void draw_boot_screen_subtitle(const char *subtitle) {
   13520:	b590      	push	{r4, r7, lr}
   13522:	b089      	sub	sp, #36	; 0x24
   13524:	af02      	add	r7, sp, #8
   13526:	6078      	str	r0, [r7, #4]
	int x = (SCREEN_WIDTH - strlen(subtitle) * 6) / 2; 
   13528:	687b      	ldr	r3, [r7, #4]
   1352a:	0018      	movs	r0, r3
   1352c:	4b1c      	ldr	r3, [pc, #112]	; (135a0 <draw_boot_screen_subtitle+0x80>)
   1352e:	4798      	blx	r3
   13530:	0002      	movs	r2, r0
   13532:	0013      	movs	r3, r2
   13534:	005b      	lsls	r3, r3, #1
   13536:	189b      	adds	r3, r3, r2
   13538:	005b      	lsls	r3, r3, #1
   1353a:	001a      	movs	r2, r3
   1353c:	23a0      	movs	r3, #160	; 0xa0
   1353e:	1a9b      	subs	r3, r3, r2
   13540:	085b      	lsrs	r3, r3, #1
   13542:	613b      	str	r3, [r7, #16]
	int y = 60;
   13544:	233c      	movs	r3, #60	; 0x3c
   13546:	60fb      	str	r3, [r7, #12]

	for (size_t i = 0; i < strlen(subtitle); i++) {
   13548:	2300      	movs	r3, #0
   1354a:	617b      	str	r3, [r7, #20]
   1354c:	e01c      	b.n	13588 <draw_boot_screen_subtitle+0x68>
		LCD_drawChar(x + i * 6, y, subtitle[i], BOOT_SCREEN_SUBTITLE_COLOR, BOOT_SCREEN_BG_COLOR);
   1354e:	697b      	ldr	r3, [r7, #20]
   13550:	b2db      	uxtb	r3, r3
   13552:	1c1a      	adds	r2, r3, #0
   13554:	1c13      	adds	r3, r2, #0
   13556:	18db      	adds	r3, r3, r3
   13558:	189b      	adds	r3, r3, r2
   1355a:	18db      	adds	r3, r3, r3
   1355c:	b2da      	uxtb	r2, r3
   1355e:	693b      	ldr	r3, [r7, #16]
   13560:	b2db      	uxtb	r3, r3
   13562:	18d3      	adds	r3, r2, r3
   13564:	b2d8      	uxtb	r0, r3
   13566:	68fb      	ldr	r3, [r7, #12]
   13568:	b2d9      	uxtb	r1, r3
   1356a:	687a      	ldr	r2, [r7, #4]
   1356c:	697b      	ldr	r3, [r7, #20]
   1356e:	18d3      	adds	r3, r2, r3
   13570:	781b      	ldrb	r3, [r3, #0]
   13572:	b29a      	uxth	r2, r3
   13574:	23fc      	movs	r3, #252	; 0xfc
   13576:	00dc      	lsls	r4, r3, #3
   13578:	2300      	movs	r3, #0
   1357a:	9300      	str	r3, [sp, #0]
   1357c:	0023      	movs	r3, r4
   1357e:	4c09      	ldr	r4, [pc, #36]	; (135a4 <draw_boot_screen_subtitle+0x84>)
   13580:	47a0      	blx	r4
	for (size_t i = 0; i < strlen(subtitle); i++) {
   13582:	697b      	ldr	r3, [r7, #20]
   13584:	3301      	adds	r3, #1
   13586:	617b      	str	r3, [r7, #20]
   13588:	687b      	ldr	r3, [r7, #4]
   1358a:	0018      	movs	r0, r3
   1358c:	4b04      	ldr	r3, [pc, #16]	; (135a0 <draw_boot_screen_subtitle+0x80>)
   1358e:	4798      	blx	r3
   13590:	0002      	movs	r2, r0
   13592:	697b      	ldr	r3, [r7, #20]
   13594:	429a      	cmp	r2, r3
   13596:	d8da      	bhi.n	1354e <draw_boot_screen_subtitle+0x2e>
	}
}
   13598:	46c0      	nop			; (mov r8, r8)
   1359a:	46bd      	mov	sp, r7
   1359c:	b007      	add	sp, #28
   1359e:	bd90      	pop	{r4, r7, pc}
   135a0:	000388bf 	.word	0x000388bf
   135a4:	00012d9d 	.word	0x00012d9d

000135a8 <draw_rotating_squares>:
/**************************************************************************//**
* @fn			void draw_rotating_squares(int centerX, int centerY, int num_squares, uint16_t color)
* @brief		draw title
* @note
*****************************************************************************/
void draw_rotating_squares(int centerX, int centerY, int num_squares, uint16_t color) {
   135a8:	b590      	push	{r4, r7, lr}
   135aa:	b08b      	sub	sp, #44	; 0x2c
   135ac:	af02      	add	r7, sp, #8
   135ae:	60f8      	str	r0, [r7, #12]
   135b0:	60b9      	str	r1, [r7, #8]
   135b2:	607a      	str	r2, [r7, #4]
   135b4:	001a      	movs	r2, r3
   135b6:	1cbb      	adds	r3, r7, #2
   135b8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < num_squares; i++) {
   135ba:	2300      	movs	r3, #0
   135bc:	61fb      	str	r3, [r7, #28]
   135be:	e081      	b.n	136c4 <draw_rotating_squares+0x11c>
		int side_length = i * 4;
   135c0:	69fb      	ldr	r3, [r7, #28]
   135c2:	009b      	lsls	r3, r3, #2
   135c4:	61bb      	str	r3, [r7, #24]
		int x = centerX - side_length / 2;
   135c6:	69bb      	ldr	r3, [r7, #24]
   135c8:	2b00      	cmp	r3, #0
   135ca:	da00      	bge.n	135ce <draw_rotating_squares+0x26>
   135cc:	3301      	adds	r3, #1
   135ce:	105b      	asrs	r3, r3, #1
   135d0:	425b      	negs	r3, r3
   135d2:	001a      	movs	r2, r3
   135d4:	68fb      	ldr	r3, [r7, #12]
   135d6:	18d3      	adds	r3, r2, r3
   135d8:	617b      	str	r3, [r7, #20]
		int y = centerY - side_length / 2;
   135da:	69bb      	ldr	r3, [r7, #24]
   135dc:	2b00      	cmp	r3, #0
   135de:	da00      	bge.n	135e2 <draw_rotating_squares+0x3a>
   135e0:	3301      	adds	r3, #1
   135e2:	105b      	asrs	r3, r3, #1
   135e4:	425b      	negs	r3, r3
   135e6:	001a      	movs	r2, r3
   135e8:	68bb      	ldr	r3, [r7, #8]
   135ea:	18d3      	adds	r3, r2, r3
   135ec:	613b      	str	r3, [r7, #16]

		LCD_drawLine(x, y, x + side_length, y, color);
   135ee:	697b      	ldr	r3, [r7, #20]
   135f0:	b218      	sxth	r0, r3
   135f2:	693b      	ldr	r3, [r7, #16]
   135f4:	b219      	sxth	r1, r3
   135f6:	697b      	ldr	r3, [r7, #20]
   135f8:	b29a      	uxth	r2, r3
   135fa:	69bb      	ldr	r3, [r7, #24]
   135fc:	b29b      	uxth	r3, r3
   135fe:	18d3      	adds	r3, r2, r3
   13600:	b29b      	uxth	r3, r3
   13602:	b21a      	sxth	r2, r3
   13604:	693b      	ldr	r3, [r7, #16]
   13606:	b21c      	sxth	r4, r3
   13608:	1cbb      	adds	r3, r7, #2
   1360a:	881b      	ldrh	r3, [r3, #0]
   1360c:	9300      	str	r3, [sp, #0]
   1360e:	0023      	movs	r3, r4
   13610:	4c31      	ldr	r4, [pc, #196]	; (136d8 <draw_rotating_squares+0x130>)
   13612:	47a0      	blx	r4
		LCD_drawLine(x + side_length, y, x + side_length, y + side_length, color);
   13614:	697b      	ldr	r3, [r7, #20]
   13616:	b29a      	uxth	r2, r3
   13618:	69bb      	ldr	r3, [r7, #24]
   1361a:	b29b      	uxth	r3, r3
   1361c:	18d3      	adds	r3, r2, r3
   1361e:	b29b      	uxth	r3, r3
   13620:	b218      	sxth	r0, r3
   13622:	693b      	ldr	r3, [r7, #16]
   13624:	b219      	sxth	r1, r3
   13626:	697b      	ldr	r3, [r7, #20]
   13628:	b29a      	uxth	r2, r3
   1362a:	69bb      	ldr	r3, [r7, #24]
   1362c:	b29b      	uxth	r3, r3
   1362e:	18d3      	adds	r3, r2, r3
   13630:	b29b      	uxth	r3, r3
   13632:	b21c      	sxth	r4, r3
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	b29a      	uxth	r2, r3
   13638:	69bb      	ldr	r3, [r7, #24]
   1363a:	b29b      	uxth	r3, r3
   1363c:	18d3      	adds	r3, r2, r3
   1363e:	b29b      	uxth	r3, r3
   13640:	b21a      	sxth	r2, r3
   13642:	1cbb      	adds	r3, r7, #2
   13644:	881b      	ldrh	r3, [r3, #0]
   13646:	9300      	str	r3, [sp, #0]
   13648:	0013      	movs	r3, r2
   1364a:	0022      	movs	r2, r4
   1364c:	4c22      	ldr	r4, [pc, #136]	; (136d8 <draw_rotating_squares+0x130>)
   1364e:	47a0      	blx	r4
		LCD_drawLine(x + side_length, y + side_length, x, y + side_length, color);
   13650:	697b      	ldr	r3, [r7, #20]
   13652:	b29a      	uxth	r2, r3
   13654:	69bb      	ldr	r3, [r7, #24]
   13656:	b29b      	uxth	r3, r3
   13658:	18d3      	adds	r3, r2, r3
   1365a:	b29b      	uxth	r3, r3
   1365c:	b218      	sxth	r0, r3
   1365e:	693b      	ldr	r3, [r7, #16]
   13660:	b29a      	uxth	r2, r3
   13662:	69bb      	ldr	r3, [r7, #24]
   13664:	b29b      	uxth	r3, r3
   13666:	18d3      	adds	r3, r2, r3
   13668:	b29b      	uxth	r3, r3
   1366a:	b219      	sxth	r1, r3
   1366c:	697b      	ldr	r3, [r7, #20]
   1366e:	b21c      	sxth	r4, r3
   13670:	693b      	ldr	r3, [r7, #16]
   13672:	b29a      	uxth	r2, r3
   13674:	69bb      	ldr	r3, [r7, #24]
   13676:	b29b      	uxth	r3, r3
   13678:	18d3      	adds	r3, r2, r3
   1367a:	b29b      	uxth	r3, r3
   1367c:	b21a      	sxth	r2, r3
   1367e:	1cbb      	adds	r3, r7, #2
   13680:	881b      	ldrh	r3, [r3, #0]
   13682:	9300      	str	r3, [sp, #0]
   13684:	0013      	movs	r3, r2
   13686:	0022      	movs	r2, r4
   13688:	4c13      	ldr	r4, [pc, #76]	; (136d8 <draw_rotating_squares+0x130>)
   1368a:	47a0      	blx	r4
		LCD_drawLine(x, y + side_length, x, y, color);
   1368c:	697b      	ldr	r3, [r7, #20]
   1368e:	b218      	sxth	r0, r3
   13690:	693b      	ldr	r3, [r7, #16]
   13692:	b29a      	uxth	r2, r3
   13694:	69bb      	ldr	r3, [r7, #24]
   13696:	b29b      	uxth	r3, r3
   13698:	18d3      	adds	r3, r2, r3
   1369a:	b29b      	uxth	r3, r3
   1369c:	b219      	sxth	r1, r3
   1369e:	697b      	ldr	r3, [r7, #20]
   136a0:	b21a      	sxth	r2, r3
   136a2:	693b      	ldr	r3, [r7, #16]
   136a4:	b21c      	sxth	r4, r3
   136a6:	1cbb      	adds	r3, r7, #2
   136a8:	881b      	ldrh	r3, [r3, #0]
   136aa:	9300      	str	r3, [sp, #0]
   136ac:	0023      	movs	r3, r4
   136ae:	4c0a      	ldr	r4, [pc, #40]	; (136d8 <draw_rotating_squares+0x130>)
   136b0:	47a0      	blx	r4

		centerX += 2;
   136b2:	68fb      	ldr	r3, [r7, #12]
   136b4:	3302      	adds	r3, #2
   136b6:	60fb      	str	r3, [r7, #12]
		centerY += 2;
   136b8:	68bb      	ldr	r3, [r7, #8]
   136ba:	3302      	adds	r3, #2
   136bc:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < num_squares; i++) {
   136be:	69fb      	ldr	r3, [r7, #28]
   136c0:	3301      	adds	r3, #1
   136c2:	61fb      	str	r3, [r7, #28]
   136c4:	69fa      	ldr	r2, [r7, #28]
   136c6:	687b      	ldr	r3, [r7, #4]
   136c8:	429a      	cmp	r2, r3
   136ca:	da00      	bge.n	136ce <draw_rotating_squares+0x126>
   136cc:	e778      	b.n	135c0 <draw_rotating_squares+0x18>
	}
}
   136ce:	46c0      	nop			; (mov r8, r8)
   136d0:	46bd      	mov	sp, r7
   136d2:	b009      	add	sp, #36	; 0x24
   136d4:	bd90      	pop	{r4, r7, pc}
   136d6:	46c0      	nop			; (mov r8, r8)
   136d8:	00012ad9 	.word	0x00012ad9

000136dc <draw_main_page>:
/**************************************************************************//**
* @fn			void draw_main_page(void)
* @brief		draw title
* @note
*****************************************************************************/
void draw_main_page(void){
   136dc:	b590      	push	{r4, r7, lr}
   136de:	b083      	sub	sp, #12
   136e0:	af02      	add	r7, sp, #8
	
		LCD_setScreen(BG_COLOR);
   136e2:	2000      	movs	r0, #0
   136e4:	4b18      	ldr	r3, [pc, #96]	; (13748 <draw_main_page+0x6c>)
   136e6:	4798      	blx	r3
		
		draw_border(3, WHITE);
   136e8:	4b18      	ldr	r3, [pc, #96]	; (1374c <draw_main_page+0x70>)
   136ea:	0019      	movs	r1, r3
   136ec:	2003      	movs	r0, #3
   136ee:	4b18      	ldr	r3, [pc, #96]	; (13750 <draw_main_page+0x74>)
   136f0:	4798      	blx	r3
		
		draw_title("IOT Watch V1.0");
   136f2:	4b18      	ldr	r3, [pc, #96]	; (13754 <draw_main_page+0x78>)
   136f4:	0018      	movs	r0, r3
   136f6:	4b18      	ldr	r3, [pc, #96]	; (13758 <draw_main_page+0x7c>)
   136f8:	4798      	blx	r3
		
		draw_moon_icon(SCREEN_WIDTH / 2 - 70, SCREEN_HEIGHT / 2 - 60, 20);
   136fa:	2214      	movs	r2, #20
   136fc:	2104      	movs	r1, #4
   136fe:	200a      	movs	r0, #10
   13700:	4b16      	ldr	r3, [pc, #88]	; (1375c <draw_main_page+0x80>)
   13702:	4798      	blx	r3
		
		LCD_drawString(25, 40, "M S G :", YELLOW, BLACK);
   13704:	4916      	ldr	r1, [pc, #88]	; (13760 <draw_main_page+0x84>)
   13706:	4a17      	ldr	r2, [pc, #92]	; (13764 <draw_main_page+0x88>)
   13708:	2300      	movs	r3, #0
   1370a:	9300      	str	r3, [sp, #0]
   1370c:	000b      	movs	r3, r1
   1370e:	2128      	movs	r1, #40	; 0x28
   13710:	2019      	movs	r0, #25
   13712:	4c15      	ldr	r4, [pc, #84]	; (13768 <draw_main_page+0x8c>)
   13714:	47a0      	blx	r4
		
		LCD_drawString(25, 80, "T I M E :", YELLOW, BLACK);
   13716:	4912      	ldr	r1, [pc, #72]	; (13760 <draw_main_page+0x84>)
   13718:	4a14      	ldr	r2, [pc, #80]	; (1376c <draw_main_page+0x90>)
   1371a:	2300      	movs	r3, #0
   1371c:	9300      	str	r3, [sp, #0]
   1371e:	000b      	movs	r3, r1
   13720:	2150      	movs	r1, #80	; 0x50
   13722:	2019      	movs	r0, #25
   13724:	4c10      	ldr	r4, [pc, #64]	; (13768 <draw_main_page+0x8c>)
   13726:	47a0      	blx	r4
		
		LCD_fillCircle(30, 65, 3, YELLOW);
   13728:	4b0d      	ldr	r3, [pc, #52]	; (13760 <draw_main_page+0x84>)
   1372a:	2203      	movs	r2, #3
   1372c:	2141      	movs	r1, #65	; 0x41
   1372e:	201e      	movs	r0, #30
   13730:	4c0f      	ldr	r4, [pc, #60]	; (13770 <draw_main_page+0x94>)
   13732:	47a0      	blx	r4
		
		LCD_fillCircle(30, 105, 3, YELLOW);
   13734:	4b0a      	ldr	r3, [pc, #40]	; (13760 <draw_main_page+0x84>)
   13736:	2203      	movs	r2, #3
   13738:	2169      	movs	r1, #105	; 0x69
   1373a:	201e      	movs	r0, #30
   1373c:	4c0c      	ldr	r4, [pc, #48]	; (13770 <draw_main_page+0x94>)
   1373e:	47a0      	blx	r4
		
}
   13740:	46c0      	nop			; (mov r8, r8)
   13742:	46bd      	mov	sp, r7
   13744:	b001      	add	sp, #4
   13746:	bd90      	pop	{r4, r7, pc}
   13748:	00012a71 	.word	0x00012a71
   1374c:	0000ffff 	.word	0x0000ffff
   13750:	000132a1 	.word	0x000132a1
   13754:	00039aa8 	.word	0x00039aa8
   13758:	00013215 	.word	0x00013215
   1375c:	00013425 	.word	0x00013425
   13760:	0000ffe0 	.word	0x0000ffe0
   13764:	00039ab8 	.word	0x00039ab8
   13768:	00012f8d 	.word	0x00012f8d
   1376c:	00039ac0 	.word	0x00039ac0
   13770:	00013775 	.word	0x00013775

00013774 <LCD_fillCircle>:
/**************************************************************************//**
* @fn			void LCD_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color
* @brief		draw circle
* @note
*****************************************************************************/
void LCD_fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color) {
   13774:	b5b0      	push	{r4, r5, r7, lr}
   13776:	b088      	sub	sp, #32
   13778:	af02      	add	r7, sp, #8
   1377a:	0005      	movs	r5, r0
   1377c:	000c      	movs	r4, r1
   1377e:	0010      	movs	r0, r2
   13780:	0019      	movs	r1, r3
   13782:	1dbb      	adds	r3, r7, #6
   13784:	1c2a      	adds	r2, r5, #0
   13786:	801a      	strh	r2, [r3, #0]
   13788:	1d3b      	adds	r3, r7, #4
   1378a:	1c22      	adds	r2, r4, #0
   1378c:	801a      	strh	r2, [r3, #0]
   1378e:	1cbb      	adds	r3, r7, #2
   13790:	1c02      	adds	r2, r0, #0
   13792:	801a      	strh	r2, [r3, #0]
   13794:	003b      	movs	r3, r7
   13796:	1c0a      	adds	r2, r1, #0
   13798:	801a      	strh	r2, [r3, #0]
	int16_t x = -r;
   1379a:	1cbb      	adds	r3, r7, #2
   1379c:	881b      	ldrh	r3, [r3, #0]
   1379e:	425b      	negs	r3, r3
   137a0:	b29a      	uxth	r2, r3
   137a2:	2316      	movs	r3, #22
   137a4:	18fb      	adds	r3, r7, r3
   137a6:	801a      	strh	r2, [r3, #0]
	int16_t y = 0;
   137a8:	2314      	movs	r3, #20
   137aa:	18fb      	adds	r3, r7, r3
   137ac:	2200      	movs	r2, #0
   137ae:	801a      	strh	r2, [r3, #0]
	int16_t err = 2 - 2 * r;
   137b0:	1cbb      	adds	r3, r7, #2
   137b2:	2200      	movs	r2, #0
   137b4:	5e9b      	ldrsh	r3, [r3, r2]
   137b6:	2201      	movs	r2, #1
   137b8:	1ad3      	subs	r3, r2, r3
   137ba:	b29b      	uxth	r3, r3
   137bc:	18db      	adds	r3, r3, r3
   137be:	b29a      	uxth	r2, r3
   137c0:	2312      	movs	r3, #18
   137c2:	18fb      	adds	r3, r7, r3
   137c4:	801a      	strh	r2, [r3, #0]

	do {
		LCD_drawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
   137c6:	1dbb      	adds	r3, r7, #6
   137c8:	881a      	ldrh	r2, [r3, #0]
   137ca:	2316      	movs	r3, #22
   137cc:	18fb      	adds	r3, r7, r3
   137ce:	881b      	ldrh	r3, [r3, #0]
   137d0:	1ad3      	subs	r3, r2, r3
   137d2:	b29b      	uxth	r3, r3
   137d4:	b218      	sxth	r0, r3
   137d6:	1d3b      	adds	r3, r7, #4
   137d8:	881a      	ldrh	r2, [r3, #0]
   137da:	2314      	movs	r3, #20
   137dc:	18fb      	adds	r3, r7, r3
   137de:	881b      	ldrh	r3, [r3, #0]
   137e0:	18d3      	adds	r3, r2, r3
   137e2:	b29b      	uxth	r3, r3
   137e4:	b219      	sxth	r1, r3
   137e6:	1dbb      	adds	r3, r7, #6
   137e8:	881a      	ldrh	r2, [r3, #0]
   137ea:	2316      	movs	r3, #22
   137ec:	18fb      	adds	r3, r7, r3
   137ee:	881b      	ldrh	r3, [r3, #0]
   137f0:	18d3      	adds	r3, r2, r3
   137f2:	b29b      	uxth	r3, r3
   137f4:	b21c      	sxth	r4, r3
   137f6:	1d3b      	adds	r3, r7, #4
   137f8:	881a      	ldrh	r2, [r3, #0]
   137fa:	2314      	movs	r3, #20
   137fc:	18fb      	adds	r3, r7, r3
   137fe:	881b      	ldrh	r3, [r3, #0]
   13800:	18d3      	adds	r3, r2, r3
   13802:	b29b      	uxth	r3, r3
   13804:	b21a      	sxth	r2, r3
   13806:	003b      	movs	r3, r7
   13808:	881b      	ldrh	r3, [r3, #0]
   1380a:	9300      	str	r3, [sp, #0]
   1380c:	0013      	movs	r3, r2
   1380e:	0022      	movs	r2, r4
   13810:	4c44      	ldr	r4, [pc, #272]	; (13924 <LCD_fillCircle+0x1b0>)
   13812:	47a0      	blx	r4
		LCD_drawLine(x0 - x, y0 - y, x0 + x, y0 - y, color);
   13814:	1dbb      	adds	r3, r7, #6
   13816:	881a      	ldrh	r2, [r3, #0]
   13818:	2316      	movs	r3, #22
   1381a:	18fb      	adds	r3, r7, r3
   1381c:	881b      	ldrh	r3, [r3, #0]
   1381e:	1ad3      	subs	r3, r2, r3
   13820:	b29b      	uxth	r3, r3
   13822:	b218      	sxth	r0, r3
   13824:	1d3b      	adds	r3, r7, #4
   13826:	881a      	ldrh	r2, [r3, #0]
   13828:	2314      	movs	r3, #20
   1382a:	18fb      	adds	r3, r7, r3
   1382c:	881b      	ldrh	r3, [r3, #0]
   1382e:	1ad3      	subs	r3, r2, r3
   13830:	b29b      	uxth	r3, r3
   13832:	b219      	sxth	r1, r3
   13834:	1dbb      	adds	r3, r7, #6
   13836:	881a      	ldrh	r2, [r3, #0]
   13838:	2316      	movs	r3, #22
   1383a:	18fb      	adds	r3, r7, r3
   1383c:	881b      	ldrh	r3, [r3, #0]
   1383e:	18d3      	adds	r3, r2, r3
   13840:	b29b      	uxth	r3, r3
   13842:	b21c      	sxth	r4, r3
   13844:	1d3b      	adds	r3, r7, #4
   13846:	881a      	ldrh	r2, [r3, #0]
   13848:	2314      	movs	r3, #20
   1384a:	18fb      	adds	r3, r7, r3
   1384c:	881b      	ldrh	r3, [r3, #0]
   1384e:	1ad3      	subs	r3, r2, r3
   13850:	b29b      	uxth	r3, r3
   13852:	b21a      	sxth	r2, r3
   13854:	003b      	movs	r3, r7
   13856:	881b      	ldrh	r3, [r3, #0]
   13858:	9300      	str	r3, [sp, #0]
   1385a:	0013      	movs	r3, r2
   1385c:	0022      	movs	r2, r4
   1385e:	4c31      	ldr	r4, [pc, #196]	; (13924 <LCD_fillCircle+0x1b0>)
   13860:	47a0      	blx	r4

		int32_t e2 = err;
   13862:	2312      	movs	r3, #18
   13864:	18fb      	adds	r3, r7, r3
   13866:	2200      	movs	r2, #0
   13868:	5e9b      	ldrsh	r3, [r3, r2]
   1386a:	60fb      	str	r3, [r7, #12]

		if (e2 <= y) {
   1386c:	2314      	movs	r3, #20
   1386e:	18fb      	adds	r3, r7, r3
   13870:	2200      	movs	r2, #0
   13872:	5e9a      	ldrsh	r2, [r3, r2]
   13874:	68fb      	ldr	r3, [r7, #12]
   13876:	429a      	cmp	r2, r3
   13878:	db2a      	blt.n	138d0 <LCD_fillCircle+0x15c>
			err += ++y * 2 + 1;
   1387a:	2314      	movs	r3, #20
   1387c:	18fb      	adds	r3, r7, r3
   1387e:	881b      	ldrh	r3, [r3, #0]
   13880:	3301      	adds	r3, #1
   13882:	b29a      	uxth	r2, r3
   13884:	2314      	movs	r3, #20
   13886:	18fb      	adds	r3, r7, r3
   13888:	801a      	strh	r2, [r3, #0]
   1388a:	2314      	movs	r3, #20
   1388c:	18fb      	adds	r3, r7, r3
   1388e:	2200      	movs	r2, #0
   13890:	5e9b      	ldrsh	r3, [r3, r2]
   13892:	005b      	lsls	r3, r3, #1
   13894:	3301      	adds	r3, #1
   13896:	b29a      	uxth	r2, r3
   13898:	2312      	movs	r3, #18
   1389a:	18fb      	adds	r3, r7, r3
   1389c:	881b      	ldrh	r3, [r3, #0]
   1389e:	18d3      	adds	r3, r2, r3
   138a0:	b29a      	uxth	r2, r3
   138a2:	2312      	movs	r3, #18
   138a4:	18fb      	adds	r3, r7, r3
   138a6:	801a      	strh	r2, [r3, #0]

			if (-x == y && e2 <= x)
   138a8:	2316      	movs	r3, #22
   138aa:	18fb      	adds	r3, r7, r3
   138ac:	2200      	movs	r2, #0
   138ae:	5e9b      	ldrsh	r3, [r3, r2]
   138b0:	425a      	negs	r2, r3
   138b2:	2314      	movs	r3, #20
   138b4:	18fb      	adds	r3, r7, r3
   138b6:	2100      	movs	r1, #0
   138b8:	5e5b      	ldrsh	r3, [r3, r1]
   138ba:	429a      	cmp	r2, r3
   138bc:	d108      	bne.n	138d0 <LCD_fillCircle+0x15c>
   138be:	2316      	movs	r3, #22
   138c0:	18fb      	adds	r3, r7, r3
   138c2:	2200      	movs	r2, #0
   138c4:	5e9a      	ldrsh	r2, [r3, r2]
   138c6:	68fb      	ldr	r3, [r7, #12]
   138c8:	429a      	cmp	r2, r3
   138ca:	db01      	blt.n	138d0 <LCD_fillCircle+0x15c>
			e2 = 0;
   138cc:	2300      	movs	r3, #0
   138ce:	60fb      	str	r3, [r7, #12]
		}

		if (e2 > x)
   138d0:	2316      	movs	r3, #22
   138d2:	18fb      	adds	r3, r7, r3
   138d4:	2200      	movs	r2, #0
   138d6:	5e9a      	ldrsh	r2, [r3, r2]
   138d8:	68fb      	ldr	r3, [r7, #12]
   138da:	429a      	cmp	r2, r3
   138dc:	da16      	bge.n	1390c <LCD_fillCircle+0x198>
		err += ++x * 2 + 1;
   138de:	2316      	movs	r3, #22
   138e0:	18fb      	adds	r3, r7, r3
   138e2:	881b      	ldrh	r3, [r3, #0]
   138e4:	3301      	adds	r3, #1
   138e6:	b29a      	uxth	r2, r3
   138e8:	2316      	movs	r3, #22
   138ea:	18fb      	adds	r3, r7, r3
   138ec:	801a      	strh	r2, [r3, #0]
   138ee:	2316      	movs	r3, #22
   138f0:	18fb      	adds	r3, r7, r3
   138f2:	2200      	movs	r2, #0
   138f4:	5e9b      	ldrsh	r3, [r3, r2]
   138f6:	005b      	lsls	r3, r3, #1
   138f8:	3301      	adds	r3, #1
   138fa:	b29a      	uxth	r2, r3
   138fc:	2312      	movs	r3, #18
   138fe:	18fb      	adds	r3, r7, r3
   13900:	881b      	ldrh	r3, [r3, #0]
   13902:	18d3      	adds	r3, r2, r3
   13904:	b29a      	uxth	r2, r3
   13906:	2312      	movs	r3, #18
   13908:	18fb      	adds	r3, r7, r3
   1390a:	801a      	strh	r2, [r3, #0]

	} while (x <= 0);
   1390c:	2316      	movs	r3, #22
   1390e:	18fb      	adds	r3, r7, r3
   13910:	2200      	movs	r2, #0
   13912:	5e9b      	ldrsh	r3, [r3, r2]
   13914:	2b00      	cmp	r3, #0
   13916:	dc00      	bgt.n	1391a <LCD_fillCircle+0x1a6>
   13918:	e755      	b.n	137c6 <LCD_fillCircle+0x52>
   1391a:	46c0      	nop			; (mov r8, r8)
   1391c:	46bd      	mov	sp, r7
   1391e:	b006      	add	sp, #24
   13920:	bdb0      	pop	{r4, r5, r7, pc}
   13922:	46c0      	nop			; (mov r8, r8)
   13924:	00012ad9 	.word	0x00012ad9

00013928 <system_pinmux_get_group_from_gpio_pin>:
{
   13928:	b580      	push	{r7, lr}
   1392a:	b084      	sub	sp, #16
   1392c:	af00      	add	r7, sp, #0
   1392e:	0002      	movs	r2, r0
   13930:	1dfb      	adds	r3, r7, #7
   13932:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   13934:	230f      	movs	r3, #15
   13936:	18fb      	adds	r3, r7, r3
   13938:	1dfa      	adds	r2, r7, #7
   1393a:	7812      	ldrb	r2, [r2, #0]
   1393c:	09d2      	lsrs	r2, r2, #7
   1393e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   13940:	230e      	movs	r3, #14
   13942:	18fb      	adds	r3, r7, r3
   13944:	1dfa      	adds	r2, r7, #7
   13946:	7812      	ldrb	r2, [r2, #0]
   13948:	0952      	lsrs	r2, r2, #5
   1394a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1394c:	4b0d      	ldr	r3, [pc, #52]	; (13984 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1394e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   13950:	230f      	movs	r3, #15
   13952:	18fb      	adds	r3, r7, r3
   13954:	781b      	ldrb	r3, [r3, #0]
   13956:	2b00      	cmp	r3, #0
   13958:	d10f      	bne.n	1397a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1395a:	230f      	movs	r3, #15
   1395c:	18fb      	adds	r3, r7, r3
   1395e:	781b      	ldrb	r3, [r3, #0]
   13960:	009b      	lsls	r3, r3, #2
   13962:	2210      	movs	r2, #16
   13964:	4694      	mov	ip, r2
   13966:	44bc      	add	ip, r7
   13968:	4463      	add	r3, ip
   1396a:	3b08      	subs	r3, #8
   1396c:	681a      	ldr	r2, [r3, #0]
   1396e:	230e      	movs	r3, #14
   13970:	18fb      	adds	r3, r7, r3
   13972:	781b      	ldrb	r3, [r3, #0]
   13974:	01db      	lsls	r3, r3, #7
   13976:	18d3      	adds	r3, r2, r3
   13978:	e000      	b.n	1397c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1397a:	2300      	movs	r3, #0
}
   1397c:	0018      	movs	r0, r3
   1397e:	46bd      	mov	sp, r7
   13980:	b004      	add	sp, #16
   13982:	bd80      	pop	{r7, pc}
   13984:	41004400 	.word	0x41004400

00013988 <port_get_group_from_gpio_pin>:
{
   13988:	b580      	push	{r7, lr}
   1398a:	b082      	sub	sp, #8
   1398c:	af00      	add	r7, sp, #0
   1398e:	0002      	movs	r2, r0
   13990:	1dfb      	adds	r3, r7, #7
   13992:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   13994:	1dfb      	adds	r3, r7, #7
   13996:	781b      	ldrb	r3, [r3, #0]
   13998:	0018      	movs	r0, r3
   1399a:	4b03      	ldr	r3, [pc, #12]	; (139a8 <port_get_group_from_gpio_pin+0x20>)
   1399c:	4798      	blx	r3
   1399e:	0003      	movs	r3, r0
}
   139a0:	0018      	movs	r0, r3
   139a2:	46bd      	mov	sp, r7
   139a4:	b002      	add	sp, #8
   139a6:	bd80      	pop	{r7, pc}
   139a8:	00013929 	.word	0x00013929

000139ac <port_get_config_defaults>:
{
   139ac:	b580      	push	{r7, lr}
   139ae:	b082      	sub	sp, #8
   139b0:	af00      	add	r7, sp, #0
   139b2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   139b4:	687b      	ldr	r3, [r7, #4]
   139b6:	2200      	movs	r2, #0
   139b8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   139ba:	687b      	ldr	r3, [r7, #4]
   139bc:	2201      	movs	r2, #1
   139be:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   139c0:	687b      	ldr	r3, [r7, #4]
   139c2:	2200      	movs	r2, #0
   139c4:	709a      	strb	r2, [r3, #2]
}
   139c6:	46c0      	nop			; (mov r8, r8)
   139c8:	46bd      	mov	sp, r7
   139ca:	b002      	add	sp, #8
   139cc:	bd80      	pop	{r7, pc}
	...

000139d0 <port_pin_get_input_level>:
{
   139d0:	b580      	push	{r7, lr}
   139d2:	b084      	sub	sp, #16
   139d4:	af00      	add	r7, sp, #0
   139d6:	0002      	movs	r2, r0
   139d8:	1dfb      	adds	r3, r7, #7
   139da:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   139dc:	1dfb      	adds	r3, r7, #7
   139de:	781b      	ldrb	r3, [r3, #0]
   139e0:	0018      	movs	r0, r3
   139e2:	4b0b      	ldr	r3, [pc, #44]	; (13a10 <port_pin_get_input_level+0x40>)
   139e4:	4798      	blx	r3
   139e6:	0003      	movs	r3, r0
   139e8:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   139ea:	1dfb      	adds	r3, r7, #7
   139ec:	781b      	ldrb	r3, [r3, #0]
   139ee:	221f      	movs	r2, #31
   139f0:	4013      	ands	r3, r2
   139f2:	2201      	movs	r2, #1
   139f4:	409a      	lsls	r2, r3
   139f6:	0013      	movs	r3, r2
   139f8:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   139fa:	68fb      	ldr	r3, [r7, #12]
   139fc:	6a1b      	ldr	r3, [r3, #32]
   139fe:	68ba      	ldr	r2, [r7, #8]
   13a00:	4013      	ands	r3, r2
   13a02:	1e5a      	subs	r2, r3, #1
   13a04:	4193      	sbcs	r3, r2
   13a06:	b2db      	uxtb	r3, r3
}
   13a08:	0018      	movs	r0, r3
   13a0a:	46bd      	mov	sp, r7
   13a0c:	b004      	add	sp, #16
   13a0e:	bd80      	pop	{r7, pc}
   13a10:	00013989 	.word	0x00013989

00013a14 <port_pin_set_output_level>:
{
   13a14:	b580      	push	{r7, lr}
   13a16:	b084      	sub	sp, #16
   13a18:	af00      	add	r7, sp, #0
   13a1a:	0002      	movs	r2, r0
   13a1c:	1dfb      	adds	r3, r7, #7
   13a1e:	701a      	strb	r2, [r3, #0]
   13a20:	1dbb      	adds	r3, r7, #6
   13a22:	1c0a      	adds	r2, r1, #0
   13a24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   13a26:	1dfb      	adds	r3, r7, #7
   13a28:	781b      	ldrb	r3, [r3, #0]
   13a2a:	0018      	movs	r0, r3
   13a2c:	4b0d      	ldr	r3, [pc, #52]	; (13a64 <port_pin_set_output_level+0x50>)
   13a2e:	4798      	blx	r3
   13a30:	0003      	movs	r3, r0
   13a32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   13a34:	1dfb      	adds	r3, r7, #7
   13a36:	781b      	ldrb	r3, [r3, #0]
   13a38:	221f      	movs	r2, #31
   13a3a:	4013      	ands	r3, r2
   13a3c:	2201      	movs	r2, #1
   13a3e:	409a      	lsls	r2, r3
   13a40:	0013      	movs	r3, r2
   13a42:	60bb      	str	r3, [r7, #8]
	if (level) {
   13a44:	1dbb      	adds	r3, r7, #6
   13a46:	781b      	ldrb	r3, [r3, #0]
   13a48:	2b00      	cmp	r3, #0
   13a4a:	d003      	beq.n	13a54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   13a4c:	68fb      	ldr	r3, [r7, #12]
   13a4e:	68ba      	ldr	r2, [r7, #8]
   13a50:	619a      	str	r2, [r3, #24]
}
   13a52:	e002      	b.n	13a5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   13a54:	68fb      	ldr	r3, [r7, #12]
   13a56:	68ba      	ldr	r2, [r7, #8]
   13a58:	615a      	str	r2, [r3, #20]
}
   13a5a:	46c0      	nop			; (mov r8, r8)
   13a5c:	46bd      	mov	sp, r7
   13a5e:	b004      	add	sp, #16
   13a60:	bd80      	pop	{r7, pc}
   13a62:	46c0      	nop			; (mov r8, r8)
   13a64:	00013989 	.word	0x00013989

00013a68 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   13a68:	b590      	push	{r4, r7, lr}
   13a6a:	b09b      	sub	sp, #108	; 0x6c
   13a6c:	af02      	add	r7, sp, #8
   13a6e:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   13a70:	4b90      	ldr	r3, [pc, #576]	; (13cb4 <vUiHandlerTask+0x24c>)
   13a72:	0018      	movs	r0, r3
   13a74:	4b90      	ldr	r3, [pc, #576]	; (13cb8 <vUiHandlerTask+0x250>)
   13a76:	4798      	blx	r3
    uiState = UI_STATE_INIT;  // Initial state
   13a78:	4b90      	ldr	r3, [pc, #576]	; (13cbc <vUiHandlerTask+0x254>)
   13a7a:	2200      	movs	r2, #0
   13a7c:	701a      	strb	r2, [r3, #0]
	
	// Initialize button
	struct port_config msg_pin;
	port_get_config_defaults(&msg_pin);
   13a7e:	2354      	movs	r3, #84	; 0x54
   13a80:	18fb      	adds	r3, r7, r3
   13a82:	0018      	movs	r0, r3
   13a84:	4b8e      	ldr	r3, [pc, #568]	; (13cc0 <vUiHandlerTask+0x258>)
   13a86:	4798      	blx	r3
	msg_pin.direction = PORT_PIN_DIR_INPUT;
   13a88:	2354      	movs	r3, #84	; 0x54
   13a8a:	18fb      	adds	r3, r7, r3
   13a8c:	2200      	movs	r2, #0
   13a8e:	701a      	strb	r2, [r3, #0]
	msg_pin.input_pull = PORT_PIN_PULL_UP;
   13a90:	2354      	movs	r3, #84	; 0x54
   13a92:	18fb      	adds	r3, r7, r3
   13a94:	2201      	movs	r2, #1
   13a96:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIN_PA20, &msg_pin);
   13a98:	2354      	movs	r3, #84	; 0x54
   13a9a:	18fb      	adds	r3, r7, r3
   13a9c:	0019      	movs	r1, r3
   13a9e:	2014      	movs	r0, #20
   13aa0:	4b88      	ldr	r3, [pc, #544]	; (13cc4 <vUiHandlerTask+0x25c>)
   13aa2:	4798      	blx	r3
	
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   13aa4:	2350      	movs	r3, #80	; 0x50
   13aa6:	18fb      	adds	r3, r7, r3
   13aa8:	0018      	movs	r0, r3
   13aaa:	4b85      	ldr	r3, [pc, #532]	; (13cc0 <vUiHandlerTask+0x258>)
   13aac:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   13aae:	2350      	movs	r3, #80	; 0x50
   13ab0:	18fb      	adds	r3, r7, r3
   13ab2:	2201      	movs	r2, #1
   13ab4:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(PIN_PA06, &pin_conf);
   13ab6:	2350      	movs	r3, #80	; 0x50
   13ab8:	18fb      	adds	r3, r7, r3
   13aba:	0019      	movs	r1, r3
   13abc:	2006      	movs	r0, #6
   13abe:	4b81      	ldr	r3, [pc, #516]	; (13cc4 <vUiHandlerTask+0x25c>)
   13ac0:	4798      	blx	r3

	int flag = 0;
   13ac2:	2300      	movs	r3, #0
   13ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t raw_red_data = 0;
   13ac6:	234f      	movs	r3, #79	; 0x4f
   13ac8:	18fb      	adds	r3, r7, r3
   13aca:	2200      	movs	r2, #0
   13acc:	701a      	strb	r2, [r3, #0]
			uint8_t raw_ir_data = 0;
   13ace:	234e      	movs	r3, #78	; 0x4e
   13ad0:	18fb      	adds	r3, r7, r3
   13ad2:	2200      	movs	r2, #0
   13ad4:	701a      	strb	r2, [r3, #0]
			uint8_t len = 1;
   13ad6:	234d      	movs	r3, #77	; 0x4d
   13ad8:	18fb      	adds	r3, r7, r3
   13ada:	2201      	movs	r2, #1
   13adc:	701a      	strb	r2, [r3, #0]
			char temp[30];
    while (1) {
		
		if (flag == 0){
   13ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   13ae0:	2b00      	cmp	r3, #0
   13ae2:	d109      	bne.n	13af8 <vUiHandlerTask+0x90>
			delay_cycles_ms(500);
   13ae4:	23fa      	movs	r3, #250	; 0xfa
   13ae6:	005b      	lsls	r3, r3, #1
   13ae8:	0018      	movs	r0, r3
   13aea:	4b77      	ldr	r3, [pc, #476]	; (13cc8 <vUiHandlerTask+0x260>)
   13aec:	4798      	blx	r3
			draw_main_page();
   13aee:	4b77      	ldr	r3, [pc, #476]	; (13ccc <vUiHandlerTask+0x264>)
   13af0:	4798      	blx	r3
			flag = 1;
   13af2:	2301      	movs	r3, #1
   13af4:	65fb      	str	r3, [r7, #92]	; 0x5c
   13af6:	e1ea      	b.n	13ece <vUiHandlerTask+0x466>
		}
		else if (flag == 1){
   13af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   13afa:	2b01      	cmp	r3, #1
   13afc:	d128      	bne.n	13b50 <vUiHandlerTask+0xe8>
			if(!port_pin_get_input_level(PIN_PA20)){
   13afe:	2014      	movs	r0, #20
   13b00:	4b73      	ldr	r3, [pc, #460]	; (13cd0 <vUiHandlerTask+0x268>)
   13b02:	4798      	blx	r3
   13b04:	0003      	movs	r3, r0
   13b06:	001a      	movs	r2, r3
   13b08:	2301      	movs	r3, #1
   13b0a:	4053      	eors	r3, r2
   13b0c:	b2db      	uxtb	r3, r3
   13b0e:	2b00      	cmp	r3, #0
   13b10:	d01b      	beq.n	13b4a <vUiHandlerTask+0xe2>
				delay_cycles_ms(1500);
   13b12:	4b70      	ldr	r3, [pc, #448]	; (13cd4 <vUiHandlerTask+0x26c>)
   13b14:	0018      	movs	r0, r3
   13b16:	4b6c      	ldr	r3, [pc, #432]	; (13cc8 <vUiHandlerTask+0x260>)
   13b18:	4798      	blx	r3
				if(!port_pin_get_input_level(PIN_PA20)){
   13b1a:	2014      	movs	r0, #20
   13b1c:	4b6c      	ldr	r3, [pc, #432]	; (13cd0 <vUiHandlerTask+0x268>)
   13b1e:	4798      	blx	r3
   13b20:	0003      	movs	r3, r0
   13b22:	001a      	movs	r2, r3
   13b24:	2301      	movs	r3, #1
   13b26:	4053      	eors	r3, r2
   13b28:	b2db      	uxtb	r3, r3
   13b2a:	2b00      	cmp	r3, #0
   13b2c:	d006      	beq.n	13b3c <vUiHandlerTask+0xd4>
					SerialConsoleWriteString("Temperature Mode!\r\n");
   13b2e:	4b6a      	ldr	r3, [pc, #424]	; (13cd8 <vUiHandlerTask+0x270>)
   13b30:	0018      	movs	r0, r3
   13b32:	4b61      	ldr	r3, [pc, #388]	; (13cb8 <vUiHandlerTask+0x250>)
   13b34:	4798      	blx	r3
					flag = 3;
   13b36:	2303      	movs	r3, #3
   13b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   13b3a:	e1c8      	b.n	13ece <vUiHandlerTask+0x466>
				}
				else{
					SerialConsoleWriteString("Heart Rate Mode!\r\n");
   13b3c:	4b67      	ldr	r3, [pc, #412]	; (13cdc <vUiHandlerTask+0x274>)
   13b3e:	0018      	movs	r0, r3
   13b40:	4b5d      	ldr	r3, [pc, #372]	; (13cb8 <vUiHandlerTask+0x250>)
   13b42:	4798      	blx	r3
					flag = 2;
   13b44:	2302      	movs	r3, #2
   13b46:	65fb      	str	r3, [r7, #92]	; 0x5c
   13b48:	e1c1      	b.n	13ece <vUiHandlerTask+0x466>
				}
			}else{
				flag = 1;
   13b4a:	2301      	movs	r3, #1
   13b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   13b4e:	e1be      	b.n	13ece <vUiHandlerTask+0x466>
			}
		}
		else if (flag == 2) {
   13b50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   13b52:	2b02      	cmp	r3, #2
   13b54:	d000      	beq.n	13b58 <vUiHandlerTask+0xf0>
   13b56:	e0e5      	b.n	13d24 <vUiHandlerTask+0x2bc>
			port_pin_set_output_level(PIN_PA06, 1);
   13b58:	2101      	movs	r1, #1
   13b5a:	2006      	movs	r0, #6
   13b5c:	4b60      	ldr	r3, [pc, #384]	; (13ce0 <vUiHandlerTask+0x278>)
   13b5e:	4798      	blx	r3
			delay_cycles_ms(1000);
   13b60:	23fa      	movs	r3, #250	; 0xfa
   13b62:	009b      	lsls	r3, r3, #2
   13b64:	0018      	movs	r0, r3
   13b66:	4b58      	ldr	r3, [pc, #352]	; (13cc8 <vUiHandlerTask+0x260>)
   13b68:	4798      	blx	r3
			port_pin_set_output_level(PIN_PA06, 0);
   13b6a:	2100      	movs	r1, #0
   13b6c:	2006      	movs	r0, #6
   13b6e:	4b5c      	ldr	r3, [pc, #368]	; (13ce0 <vUiHandlerTask+0x278>)
   13b70:	4798      	blx	r3
			LCD_setScreen(BLACK);
   13b72:	2000      	movs	r0, #0
   13b74:	4b5b      	ldr	r3, [pc, #364]	; (13ce4 <vUiHandlerTask+0x27c>)
   13b76:	4798      	blx	r3
			draw_border(3, RED);
   13b78:	23f8      	movs	r3, #248	; 0xf8
   13b7a:	021b      	lsls	r3, r3, #8
   13b7c:	0019      	movs	r1, r3
   13b7e:	2003      	movs	r0, #3
   13b80:	4b59      	ldr	r3, [pc, #356]	; (13ce8 <vUiHandlerTask+0x280>)
   13b82:	4798      	blx	r3
			LCD_drawString(21,20,"H E A R T  R A T E",RED,BLACK);
   13b84:	23f8      	movs	r3, #248	; 0xf8
   13b86:	0219      	lsls	r1, r3, #8
   13b88:	4a58      	ldr	r2, [pc, #352]	; (13cec <vUiHandlerTask+0x284>)
   13b8a:	2300      	movs	r3, #0
   13b8c:	9300      	str	r3, [sp, #0]
   13b8e:	000b      	movs	r3, r1
   13b90:	2114      	movs	r1, #20
   13b92:	2015      	movs	r0, #21
   13b94:	4c56      	ldr	r4, [pc, #344]	; (13cf0 <vUiHandlerTask+0x288>)
   13b96:	47a0      	blx	r4
			LCD_drawString(21,35,"Entering ... ...",rgb565(255,255,255),BLACK);
   13b98:	22ff      	movs	r2, #255	; 0xff
   13b9a:	21ff      	movs	r1, #255	; 0xff
   13b9c:	20ff      	movs	r0, #255	; 0xff
   13b9e:	4b55      	ldr	r3, [pc, #340]	; (13cf4 <vUiHandlerTask+0x28c>)
   13ba0:	4798      	blx	r3
   13ba2:	0003      	movs	r3, r0
   13ba4:	0019      	movs	r1, r3
   13ba6:	4a54      	ldr	r2, [pc, #336]	; (13cf8 <vUiHandlerTask+0x290>)
   13ba8:	2300      	movs	r3, #0
   13baa:	9300      	str	r3, [sp, #0]
   13bac:	000b      	movs	r3, r1
   13bae:	2123      	movs	r1, #35	; 0x23
   13bb0:	2015      	movs	r0, #21
   13bb2:	4c4f      	ldr	r4, [pc, #316]	; (13cf0 <vUiHandlerTask+0x288>)
   13bb4:	47a0      	blx	r4
			LCD_drawString(21,35,"Entering ... ...",rgb565(255,255,255),BLACK);
   13bb6:	22ff      	movs	r2, #255	; 0xff
   13bb8:	21ff      	movs	r1, #255	; 0xff
   13bba:	20ff      	movs	r0, #255	; 0xff
   13bbc:	4b4d      	ldr	r3, [pc, #308]	; (13cf4 <vUiHandlerTask+0x28c>)
   13bbe:	4798      	blx	r3
   13bc0:	0003      	movs	r3, r0
   13bc2:	0019      	movs	r1, r3
   13bc4:	4a4c      	ldr	r2, [pc, #304]	; (13cf8 <vUiHandlerTask+0x290>)
   13bc6:	2300      	movs	r3, #0
   13bc8:	9300      	str	r3, [sp, #0]
   13bca:	000b      	movs	r3, r1
   13bcc:	2123      	movs	r1, #35	; 0x23
   13bce:	2015      	movs	r0, #21
   13bd0:	4c47      	ldr	r4, [pc, #284]	; (13cf0 <vUiHandlerTask+0x288>)
   13bd2:	47a0      	blx	r4
			delay_cycles_ms(1000);
   13bd4:	23fa      	movs	r3, #250	; 0xfa
   13bd6:	009b      	lsls	r3, r3, #2
   13bd8:	0018      	movs	r0, r3
   13bda:	4b3b      	ldr	r3, [pc, #236]	; (13cc8 <vUiHandlerTask+0x260>)
   13bdc:	4798      	blx	r3
			
			LCD_setScreen(WHITE);
   13bde:	4b47      	ldr	r3, [pc, #284]	; (13cfc <vUiHandlerTask+0x294>)
   13be0:	0018      	movs	r0, r3
   13be2:	4b40      	ldr	r3, [pc, #256]	; (13ce4 <vUiHandlerTask+0x27c>)
   13be4:	4798      	blx	r3
			draw_heart(80, 60, 40, RED);
   13be6:	23f8      	movs	r3, #248	; 0xf8
   13be8:	021b      	lsls	r3, r3, #8
   13bea:	2228      	movs	r2, #40	; 0x28
   13bec:	213c      	movs	r1, #60	; 0x3c
   13bee:	2050      	movs	r0, #80	; 0x50
   13bf0:	4c43      	ldr	r4, [pc, #268]	; (13d00 <vUiHandlerTask+0x298>)
   13bf2:	47a0      	blx	r4
			LCD_drawString(21,101,"Put on your finger, plz", BLACK, WHITE);
   13bf4:	4a43      	ldr	r2, [pc, #268]	; (13d04 <vUiHandlerTask+0x29c>)
   13bf6:	4b41      	ldr	r3, [pc, #260]	; (13cfc <vUiHandlerTask+0x294>)
   13bf8:	9300      	str	r3, [sp, #0]
   13bfa:	2300      	movs	r3, #0
   13bfc:	2165      	movs	r1, #101	; 0x65
   13bfe:	2015      	movs	r0, #21
   13c00:	4c3b      	ldr	r4, [pc, #236]	; (13cf0 <vUiHandlerTask+0x288>)
   13c02:	47a0      	blx	r4
			LCD_drawString(21,111,"Starting ... ...       ", BLACK, WHITE);
   13c04:	4a40      	ldr	r2, [pc, #256]	; (13d08 <vUiHandlerTask+0x2a0>)
   13c06:	4b3d      	ldr	r3, [pc, #244]	; (13cfc <vUiHandlerTask+0x294>)
   13c08:	9300      	str	r3, [sp, #0]
   13c0a:	2300      	movs	r3, #0
   13c0c:	216f      	movs	r1, #111	; 0x6f
   13c0e:	2015      	movs	r0, #21
   13c10:	4c37      	ldr	r4, [pc, #220]	; (13cf0 <vUiHandlerTask+0x288>)
   13c12:	47a0      	blx	r4
			
			max30102_fifo_read(&raw_red_data, &raw_ir_data, &len);
   13c14:	234d      	movs	r3, #77	; 0x4d
   13c16:	18fa      	adds	r2, r7, r3
   13c18:	234e      	movs	r3, #78	; 0x4e
   13c1a:	18f9      	adds	r1, r7, r3
   13c1c:	234f      	movs	r3, #79	; 0x4f
   13c1e:	18fb      	adds	r3, r7, r3
   13c20:	0018      	movs	r0, r3
   13c22:	4b3a      	ldr	r3, [pc, #232]	; (13d0c <vUiHandlerTask+0x2a4>)
   13c24:	4798      	blx	r3
			
			if (raw_red_data == 0){
   13c26:	234f      	movs	r3, #79	; 0x4f
   13c28:	18fb      	adds	r3, r7, r3
   13c2a:	781b      	ldrb	r3, [r3, #0]
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d113      	bne.n	13c58 <vUiHandlerTask+0x1f0>
				sprintf(temp, " H R :       FAILED !!  ", raw_red_data);
   13c30:	234f      	movs	r3, #79	; 0x4f
   13c32:	18fb      	adds	r3, r7, r3
   13c34:	781b      	ldrb	r3, [r3, #0]
   13c36:	001a      	movs	r2, r3
   13c38:	4935      	ldr	r1, [pc, #212]	; (13d10 <vUiHandlerTask+0x2a8>)
   13c3a:	232c      	movs	r3, #44	; 0x2c
   13c3c:	18fb      	adds	r3, r7, r3
   13c3e:	0018      	movs	r0, r3
   13c40:	4b34      	ldr	r3, [pc, #208]	; (13d14 <vUiHandlerTask+0x2ac>)
   13c42:	4798      	blx	r3
				LCD_drawString(21,101,temp, BLACK, WHITE);
   13c44:	232c      	movs	r3, #44	; 0x2c
   13c46:	18fa      	adds	r2, r7, r3
   13c48:	4b2c      	ldr	r3, [pc, #176]	; (13cfc <vUiHandlerTask+0x294>)
   13c4a:	9300      	str	r3, [sp, #0]
   13c4c:	2300      	movs	r3, #0
   13c4e:	2165      	movs	r1, #101	; 0x65
   13c50:	2015      	movs	r0, #21
   13c52:	4c27      	ldr	r4, [pc, #156]	; (13cf0 <vUiHandlerTask+0x288>)
   13c54:	47a0      	blx	r4
   13c56:	e012      	b.n	13c7e <vUiHandlerTask+0x216>
			} else{
				sprintf(temp, " H R :       %d/min     ", raw_red_data);
   13c58:	234f      	movs	r3, #79	; 0x4f
   13c5a:	18fb      	adds	r3, r7, r3
   13c5c:	781b      	ldrb	r3, [r3, #0]
   13c5e:	001a      	movs	r2, r3
   13c60:	492d      	ldr	r1, [pc, #180]	; (13d18 <vUiHandlerTask+0x2b0>)
   13c62:	232c      	movs	r3, #44	; 0x2c
   13c64:	18fb      	adds	r3, r7, r3
   13c66:	0018      	movs	r0, r3
   13c68:	4b2a      	ldr	r3, [pc, #168]	; (13d14 <vUiHandlerTask+0x2ac>)
   13c6a:	4798      	blx	r3
				LCD_drawString(21,101,temp, BLACK, WHITE);
   13c6c:	232c      	movs	r3, #44	; 0x2c
   13c6e:	18fa      	adds	r2, r7, r3
   13c70:	4b22      	ldr	r3, [pc, #136]	; (13cfc <vUiHandlerTask+0x294>)
   13c72:	9300      	str	r3, [sp, #0]
   13c74:	2300      	movs	r3, #0
   13c76:	2165      	movs	r1, #101	; 0x65
   13c78:	2015      	movs	r0, #21
   13c7a:	4c1d      	ldr	r4, [pc, #116]	; (13cf0 <vUiHandlerTask+0x288>)
   13c7c:	47a0      	blx	r4
			}

			sprintf(temp, " S P O 2 :   %d         ", raw_ir_data);
   13c7e:	234e      	movs	r3, #78	; 0x4e
   13c80:	18fb      	adds	r3, r7, r3
   13c82:	781b      	ldrb	r3, [r3, #0]
   13c84:	001a      	movs	r2, r3
   13c86:	4925      	ldr	r1, [pc, #148]	; (13d1c <vUiHandlerTask+0x2b4>)
   13c88:	232c      	movs	r3, #44	; 0x2c
   13c8a:	18fb      	adds	r3, r7, r3
   13c8c:	0018      	movs	r0, r3
   13c8e:	4b21      	ldr	r3, [pc, #132]	; (13d14 <vUiHandlerTask+0x2ac>)
   13c90:	4798      	blx	r3
			LCD_drawString(21,111,temp, BLACK, WHITE);
   13c92:	232c      	movs	r3, #44	; 0x2c
   13c94:	18fa      	adds	r2, r7, r3
   13c96:	4b19      	ldr	r3, [pc, #100]	; (13cfc <vUiHandlerTask+0x294>)
   13c98:	9300      	str	r3, [sp, #0]
   13c9a:	2300      	movs	r3, #0
   13c9c:	216f      	movs	r1, #111	; 0x6f
   13c9e:	2015      	movs	r0, #21
   13ca0:	4c13      	ldr	r4, [pc, #76]	; (13cf0 <vUiHandlerTask+0x288>)
   13ca2:	47a0      	blx	r4
			delay_cycles_ms(20000);
   13ca4:	4b1e      	ldr	r3, [pc, #120]	; (13d20 <vUiHandlerTask+0x2b8>)
   13ca6:	0018      	movs	r0, r3
   13ca8:	4b07      	ldr	r3, [pc, #28]	; (13cc8 <vUiHandlerTask+0x260>)
   13caa:	4798      	blx	r3
			flag = 0;
   13cac:	2300      	movs	r3, #0
   13cae:	65fb      	str	r3, [r7, #92]	; 0x5c
   13cb0:	e10d      	b.n	13ece <vUiHandlerTask+0x466>
   13cb2:	46c0      	nop			; (mov r8, r8)
   13cb4:	00039acc 	.word	0x00039acc
   13cb8:	00020bc5 	.word	0x00020bc5
   13cbc:	200046ef 	.word	0x200046ef
   13cc0:	000139ad 	.word	0x000139ad
   13cc4:	000299a1 	.word	0x000299a1
   13cc8:	000230b1 	.word	0x000230b1
   13ccc:	000136dd 	.word	0x000136dd
   13cd0:	000139d1 	.word	0x000139d1
   13cd4:	000005dc 	.word	0x000005dc
   13cd8:	00039ae0 	.word	0x00039ae0
   13cdc:	00039af4 	.word	0x00039af4
   13ce0:	00013a15 	.word	0x00013a15
   13ce4:	00012a71 	.word	0x00012a71
   13ce8:	000132a1 	.word	0x000132a1
   13cec:	00039b08 	.word	0x00039b08
   13cf0:	00012f8d 	.word	0x00012f8d
   13cf4:	000127b5 	.word	0x000127b5
   13cf8:	00039b1c 	.word	0x00039b1c
   13cfc:	0000ffff 	.word	0x0000ffff
   13d00:	00013101 	.word	0x00013101
   13d04:	00039b30 	.word	0x00039b30
   13d08:	00039b48 	.word	0x00039b48
   13d0c:	0001773d 	.word	0x0001773d
   13d10:	00039b60 	.word	0x00039b60
   13d14:	000387c5 	.word	0x000387c5
   13d18:	00039b7c 	.word	0x00039b7c
   13d1c:	00039b98 	.word	0x00039b98
   13d20:	00004e20 	.word	0x00004e20
			
		}
		else if (flag == 3) {
   13d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   13d26:	2b03      	cmp	r3, #3
   13d28:	d000      	beq.n	13d2c <vUiHandlerTask+0x2c4>
   13d2a:	e0d0      	b.n	13ece <vUiHandlerTask+0x466>
			port_pin_set_output_level(PIN_PA06, 1);
   13d2c:	2101      	movs	r1, #1
   13d2e:	2006      	movs	r0, #6
   13d30:	4b69      	ldr	r3, [pc, #420]	; (13ed8 <vUiHandlerTask+0x470>)
   13d32:	4798      	blx	r3
			delay_cycles_ms(500);
   13d34:	23fa      	movs	r3, #250	; 0xfa
   13d36:	005b      	lsls	r3, r3, #1
   13d38:	0018      	movs	r0, r3
   13d3a:	4b68      	ldr	r3, [pc, #416]	; (13edc <vUiHandlerTask+0x474>)
   13d3c:	4798      	blx	r3
			port_pin_set_output_level(PIN_PA06, 0);
   13d3e:	2100      	movs	r1, #0
   13d40:	2006      	movs	r0, #6
   13d42:	4b65      	ldr	r3, [pc, #404]	; (13ed8 <vUiHandlerTask+0x470>)
   13d44:	4798      	blx	r3
			delay_cycles_ms(500);
   13d46:	23fa      	movs	r3, #250	; 0xfa
   13d48:	005b      	lsls	r3, r3, #1
   13d4a:	0018      	movs	r0, r3
   13d4c:	4b63      	ldr	r3, [pc, #396]	; (13edc <vUiHandlerTask+0x474>)
   13d4e:	4798      	blx	r3
			port_pin_set_output_level(PIN_PA06, 1);
   13d50:	2101      	movs	r1, #1
   13d52:	2006      	movs	r0, #6
   13d54:	4b60      	ldr	r3, [pc, #384]	; (13ed8 <vUiHandlerTask+0x470>)
   13d56:	4798      	blx	r3
			delay_cycles_ms(500);
   13d58:	23fa      	movs	r3, #250	; 0xfa
   13d5a:	005b      	lsls	r3, r3, #1
   13d5c:	0018      	movs	r0, r3
   13d5e:	4b5f      	ldr	r3, [pc, #380]	; (13edc <vUiHandlerTask+0x474>)
   13d60:	4798      	blx	r3
			port_pin_set_output_level(PIN_PA06, 0);
   13d62:	2100      	movs	r1, #0
   13d64:	2006      	movs	r0, #6
   13d66:	4b5c      	ldr	r3, [pc, #368]	; (13ed8 <vUiHandlerTask+0x470>)
   13d68:	4798      	blx	r3
			delay_cycles_ms(500);
   13d6a:	23fa      	movs	r3, #250	; 0xfa
   13d6c:	005b      	lsls	r3, r3, #1
   13d6e:	0018      	movs	r0, r3
   13d70:	4b5a      	ldr	r3, [pc, #360]	; (13edc <vUiHandlerTask+0x474>)
   13d72:	4798      	blx	r3
			LCD_setScreen(BLACK);
   13d74:	2000      	movs	r0, #0
   13d76:	4b5a      	ldr	r3, [pc, #360]	; (13ee0 <vUiHandlerTask+0x478>)
   13d78:	4798      	blx	r3
			draw_border(3, BLUE);
   13d7a:	211f      	movs	r1, #31
   13d7c:	2003      	movs	r0, #3
   13d7e:	4b59      	ldr	r3, [pc, #356]	; (13ee4 <vUiHandlerTask+0x47c>)
   13d80:	4798      	blx	r3
			LCD_drawString(21,20,"T E M P E R A T U R E",BLUE,BLACK);
   13d82:	4a59      	ldr	r2, [pc, #356]	; (13ee8 <vUiHandlerTask+0x480>)
   13d84:	2300      	movs	r3, #0
   13d86:	9300      	str	r3, [sp, #0]
   13d88:	231f      	movs	r3, #31
   13d8a:	2114      	movs	r1, #20
   13d8c:	2015      	movs	r0, #21
   13d8e:	4c57      	ldr	r4, [pc, #348]	; (13eec <vUiHandlerTask+0x484>)
   13d90:	47a0      	blx	r4
			LCD_drawString(21,35,"Entering ... ...",rgb565(255,255,255),BLACK);
   13d92:	22ff      	movs	r2, #255	; 0xff
   13d94:	21ff      	movs	r1, #255	; 0xff
   13d96:	20ff      	movs	r0, #255	; 0xff
   13d98:	4b55      	ldr	r3, [pc, #340]	; (13ef0 <vUiHandlerTask+0x488>)
   13d9a:	4798      	blx	r3
   13d9c:	0003      	movs	r3, r0
   13d9e:	0019      	movs	r1, r3
   13da0:	4a54      	ldr	r2, [pc, #336]	; (13ef4 <vUiHandlerTask+0x48c>)
   13da2:	2300      	movs	r3, #0
   13da4:	9300      	str	r3, [sp, #0]
   13da6:	000b      	movs	r3, r1
   13da8:	2123      	movs	r1, #35	; 0x23
   13daa:	2015      	movs	r0, #21
   13dac:	4c4f      	ldr	r4, [pc, #316]	; (13eec <vUiHandlerTask+0x484>)
   13dae:	47a0      	blx	r4
			LCD_drawString(21,35,"Entering ... ...",rgb565(255,255,255),BLACK);
   13db0:	22ff      	movs	r2, #255	; 0xff
   13db2:	21ff      	movs	r1, #255	; 0xff
   13db4:	20ff      	movs	r0, #255	; 0xff
   13db6:	4b4e      	ldr	r3, [pc, #312]	; (13ef0 <vUiHandlerTask+0x488>)
   13db8:	4798      	blx	r3
   13dba:	0003      	movs	r3, r0
   13dbc:	0019      	movs	r1, r3
   13dbe:	4a4d      	ldr	r2, [pc, #308]	; (13ef4 <vUiHandlerTask+0x48c>)
   13dc0:	2300      	movs	r3, #0
   13dc2:	9300      	str	r3, [sp, #0]
   13dc4:	000b      	movs	r3, r1
   13dc6:	2123      	movs	r1, #35	; 0x23
   13dc8:	2015      	movs	r0, #21
   13dca:	4c48      	ldr	r4, [pc, #288]	; (13eec <vUiHandlerTask+0x484>)
   13dcc:	47a0      	blx	r4
			delay_cycles_ms(1000);
   13dce:	23fa      	movs	r3, #250	; 0xfa
   13dd0:	009b      	lsls	r3, r3, #2
   13dd2:	0018      	movs	r0, r3
   13dd4:	4b41      	ldr	r3, [pc, #260]	; (13edc <vUiHandlerTask+0x474>)
   13dd6:	4798      	blx	r3
			static int16_t data_raw_temperature;
			uint8_t fla = 0;
   13dd8:	232b      	movs	r3, #43	; 0x2b
   13dda:	18fb      	adds	r3, r7, r3
   13ddc:	2200      	movs	r2, #0
   13dde:	701a      	strb	r2, [r3, #0]
			static float temperature_degC;
			char temp[20];
				
			stmdev_ctx_t *dev_ctx_lis = GetAccStruct();
   13de0:	4b45      	ldr	r3, [pc, #276]	; (13ef8 <vUiHandlerTask+0x490>)
   13de2:	4798      	blx	r3
   13de4:	0003      	movs	r3, r0
   13de6:	65bb      	str	r3, [r7, #88]	; 0x58

				
			lis2dh12_temp_data_ready_get(dev_ctx_lis, &fla);
   13de8:	232b      	movs	r3, #43	; 0x2b
   13dea:	18fa      	adds	r2, r7, r3
   13dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13dee:	0011      	movs	r1, r2
   13df0:	0018      	movs	r0, r3
   13df2:	4b42      	ldr	r3, [pc, #264]	; (13efc <vUiHandlerTask+0x494>)
   13df4:	4798      	blx	r3

			if (fla) {
   13df6:	232b      	movs	r3, #43	; 0x2b
   13df8:	18fb      	adds	r3, r7, r3
   13dfa:	781b      	ldrb	r3, [r3, #0]
   13dfc:	2b00      	cmp	r3, #0
   13dfe:	d041      	beq.n	13e84 <vUiHandlerTask+0x41c>
				/* Read temperature data */
				memset(&data_raw_temperature, 0x00, sizeof(int16_t));
   13e00:	4b3f      	ldr	r3, [pc, #252]	; (13f00 <vUiHandlerTask+0x498>)
   13e02:	2200      	movs	r2, #0
   13e04:	801a      	strh	r2, [r3, #0]
				lis2dh12_temperature_raw_get(dev_ctx_lis, &data_raw_temperature);
   13e06:	4a3e      	ldr	r2, [pc, #248]	; (13f00 <vUiHandlerTask+0x498>)
   13e08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13e0a:	0011      	movs	r1, r2
   13e0c:	0018      	movs	r0, r3
   13e0e:	4b3d      	ldr	r3, [pc, #244]	; (13f04 <vUiHandlerTask+0x49c>)
   13e10:	4798      	blx	r3
				temperature_degC = lis2dh12_from_lsb_hr_to_celsius(data_raw_temperature);
   13e12:	4b3b      	ldr	r3, [pc, #236]	; (13f00 <vUiHandlerTask+0x498>)
   13e14:	2200      	movs	r2, #0
   13e16:	5e9b      	ldrsh	r3, [r3, r2]
   13e18:	0018      	movs	r0, r3
   13e1a:	4b3b      	ldr	r3, [pc, #236]	; (13f08 <vUiHandlerTask+0x4a0>)
   13e1c:	4798      	blx	r3
   13e1e:	1c02      	adds	r2, r0, #0
   13e20:	4b3a      	ldr	r3, [pc, #232]	; (13f0c <vUiHandlerTask+0x4a4>)
   13e22:	601a      	str	r2, [r3, #0]
				sprintf(temp, "Temperature: %d degC", (int)temperature_degC);
   13e24:	4b39      	ldr	r3, [pc, #228]	; (13f0c <vUiHandlerTask+0x4a4>)
   13e26:	681a      	ldr	r2, [r3, #0]
   13e28:	4b39      	ldr	r3, [pc, #228]	; (13f10 <vUiHandlerTask+0x4a8>)
   13e2a:	1c10      	adds	r0, r2, #0
   13e2c:	4798      	blx	r3
   13e2e:	0002      	movs	r2, r0
   13e30:	4938      	ldr	r1, [pc, #224]	; (13f14 <vUiHandlerTask+0x4ac>)
   13e32:	2314      	movs	r3, #20
   13e34:	18fb      	adds	r3, r7, r3
   13e36:	0018      	movs	r0, r3
   13e38:	4b37      	ldr	r3, [pc, #220]	; (13f18 <vUiHandlerTask+0x4b0>)
   13e3a:	4798      	blx	r3
				SerialConsoleWriteString(temp);
   13e3c:	2314      	movs	r3, #20
   13e3e:	18fb      	adds	r3, r7, r3
   13e40:	0018      	movs	r0, r3
   13e42:	4b36      	ldr	r3, [pc, #216]	; (13f1c <vUiHandlerTask+0x4b4>)
   13e44:	4798      	blx	r3
				struct ImuDataPacket imuPacket;
					imuPacket.xmg = 0;
   13e46:	230c      	movs	r3, #12
   13e48:	18fb      	adds	r3, r7, r3
   13e4a:	2200      	movs	r2, #0
   13e4c:	801a      	strh	r2, [r3, #0]
					imuPacket.ymg = 0;
   13e4e:	230c      	movs	r3, #12
   13e50:	18fb      	adds	r3, r7, r3
   13e52:	2200      	movs	r2, #0
   13e54:	805a      	strh	r2, [r3, #2]
					imuPacket.zmg = 0;
   13e56:	230c      	movs	r3, #12
   13e58:	18fb      	adds	r3, r7, r3
   13e5a:	2200      	movs	r2, #0
   13e5c:	809a      	strh	r2, [r3, #4]
					imuPacket.alarm= false;
   13e5e:	230c      	movs	r3, #12
   13e60:	18fb      	adds	r3, r7, r3
   13e62:	2200      	movs	r2, #0
   13e64:	719a      	strb	r2, [r3, #6]
					imuPacket.temp = (int)temperature_degC;
   13e66:	4b29      	ldr	r3, [pc, #164]	; (13f0c <vUiHandlerTask+0x4a4>)
   13e68:	681a      	ldr	r2, [r3, #0]
   13e6a:	4b29      	ldr	r3, [pc, #164]	; (13f10 <vUiHandlerTask+0x4a8>)
   13e6c:	1c10      	adds	r0, r2, #0
   13e6e:	4798      	blx	r3
   13e70:	0003      	movs	r3, r0
   13e72:	b25a      	sxtb	r2, r3
   13e74:	230c      	movs	r3, #12
   13e76:	18fb      	adds	r3, r7, r3
   13e78:	71da      	strb	r2, [r3, #7]
					WifiAddImuDataToQueue(&imuPacket);
   13e7a:	230c      	movs	r3, #12
   13e7c:	18fb      	adds	r3, r7, r3
   13e7e:	0018      	movs	r0, r3
   13e80:	4b27      	ldr	r3, [pc, #156]	; (13f20 <vUiHandlerTask+0x4b8>)
   13e82:	4798      	blx	r3
			}
			sprintf(temp, "T E M P:  %d DegC", (int)temperature_degC);
   13e84:	4b21      	ldr	r3, [pc, #132]	; (13f0c <vUiHandlerTask+0x4a4>)
   13e86:	681a      	ldr	r2, [r3, #0]
   13e88:	4b21      	ldr	r3, [pc, #132]	; (13f10 <vUiHandlerTask+0x4a8>)
   13e8a:	1c10      	adds	r0, r2, #0
   13e8c:	4798      	blx	r3
   13e8e:	0002      	movs	r2, r0
   13e90:	4924      	ldr	r1, [pc, #144]	; (13f24 <vUiHandlerTask+0x4bc>)
   13e92:	2314      	movs	r3, #20
   13e94:	18fb      	adds	r3, r7, r3
   13e96:	0018      	movs	r0, r3
   13e98:	4b1f      	ldr	r3, [pc, #124]	; (13f18 <vUiHandlerTask+0x4b0>)
   13e9a:	4798      	blx	r3
			LCD_setScreen(BLACK);
   13e9c:	2000      	movs	r0, #0
   13e9e:	4b10      	ldr	r3, [pc, #64]	; (13ee0 <vUiHandlerTask+0x478>)
   13ea0:	4798      	blx	r3
			LCD_drawString(21,50,temp,rgb565(255,255,255),BLACK);
   13ea2:	22ff      	movs	r2, #255	; 0xff
   13ea4:	21ff      	movs	r1, #255	; 0xff
   13ea6:	20ff      	movs	r0, #255	; 0xff
   13ea8:	4b11      	ldr	r3, [pc, #68]	; (13ef0 <vUiHandlerTask+0x488>)
   13eaa:	4798      	blx	r3
   13eac:	0003      	movs	r3, r0
   13eae:	0019      	movs	r1, r3
   13eb0:	2314      	movs	r3, #20
   13eb2:	18fa      	adds	r2, r7, r3
   13eb4:	2300      	movs	r3, #0
   13eb6:	9300      	str	r3, [sp, #0]
   13eb8:	000b      	movs	r3, r1
   13eba:	2132      	movs	r1, #50	; 0x32
   13ebc:	2015      	movs	r0, #21
   13ebe:	4c0b      	ldr	r4, [pc, #44]	; (13eec <vUiHandlerTask+0x484>)
   13ec0:	47a0      	blx	r4
			
			delay_cycles_ms(20000);
   13ec2:	4b19      	ldr	r3, [pc, #100]	; (13f28 <vUiHandlerTask+0x4c0>)
   13ec4:	0018      	movs	r0, r3
   13ec6:	4b05      	ldr	r3, [pc, #20]	; (13edc <vUiHandlerTask+0x474>)
   13ec8:	4798      	blx	r3
			flag = 0;
   13eca:	2300      	movs	r3, #0
   13ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		
        vTaskDelay(50);
   13ece:	2032      	movs	r0, #50	; 0x32
   13ed0:	4b16      	ldr	r3, [pc, #88]	; (13f2c <vUiHandlerTask+0x4c4>)
   13ed2:	4798      	blx	r3
		if (flag == 0){
   13ed4:	e603      	b.n	13ade <vUiHandlerTask+0x76>
   13ed6:	46c0      	nop			; (mov r8, r8)
   13ed8:	00013a15 	.word	0x00013a15
   13edc:	000230b1 	.word	0x000230b1
   13ee0:	00012a71 	.word	0x00012a71
   13ee4:	000132a1 	.word	0x000132a1
   13ee8:	00039bb4 	.word	0x00039bb4
   13eec:	00012f8d 	.word	0x00012f8d
   13ef0:	000127b5 	.word	0x000127b5
   13ef4:	00039b1c 	.word	0x00039b1c
   13ef8:	00018915 	.word	0x00018915
   13efc:	00018379 	.word	0x00018379
   13f00:	2000039e 	.word	0x2000039e
   13f04:	000183b5 	.word	0x000183b5
   13f08:	00018321 	.word	0x00018321
   13f0c:	200003a0 	.word	0x200003a0
   13f10:	00036a21 	.word	0x00036a21
   13f14:	00039bcc 	.word	0x00039bcc
   13f18:	000387c5 	.word	0x000387c5
   13f1c:	00020bc5 	.word	0x00020bc5
   13f20:	0001a2e5 	.word	0x0001a2e5
   13f24:	00039be4 	.word	0x00039be4
   13f28:	00004e20 	.word	0x00004e20
   13f2c:	0001ef71 	.word	0x0001ef71

00013f30 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   13f30:	b580      	push	{r7, lr}
   13f32:	b084      	sub	sp, #16
   13f34:	af00      	add	r7, sp, #0
   13f36:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   13f38:	687b      	ldr	r3, [r7, #4]
   13f3a:	681b      	ldr	r3, [r3, #0]
   13f3c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13f3e:	68fb      	ldr	r3, [r7, #12]
   13f40:	7e5b      	ldrb	r3, [r3, #25]
   13f42:	b2db      	uxtb	r3, r3
   13f44:	b25b      	sxtb	r3, r3
   13f46:	2b00      	cmp	r3, #0
   13f48:	da01      	bge.n	13f4e <adc_is_syncing+0x1e>
		return true;
   13f4a:	2301      	movs	r3, #1
   13f4c:	e000      	b.n	13f50 <adc_is_syncing+0x20>
	}

	return false;
   13f4e:	2300      	movs	r3, #0
}
   13f50:	0018      	movs	r0, r3
   13f52:	46bd      	mov	sp, r7
   13f54:	b004      	add	sp, #16
   13f56:	bd80      	pop	{r7, pc}

00013f58 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   13f58:	b580      	push	{r7, lr}
   13f5a:	b084      	sub	sp, #16
   13f5c:	af00      	add	r7, sp, #0
   13f5e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13f60:	687b      	ldr	r3, [r7, #4]
   13f62:	681b      	ldr	r3, [r3, #0]
   13f64:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   13f66:	46c0      	nop			; (mov r8, r8)
   13f68:	687b      	ldr	r3, [r7, #4]
   13f6a:	0018      	movs	r0, r3
   13f6c:	4b0b      	ldr	r3, [pc, #44]	; (13f9c <adc_start_conversion+0x44>)
   13f6e:	4798      	blx	r3
   13f70:	1e03      	subs	r3, r0, #0
   13f72:	d1f9      	bne.n	13f68 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   13f74:	68fb      	ldr	r3, [r7, #12]
   13f76:	7b1b      	ldrb	r3, [r3, #12]
   13f78:	b2db      	uxtb	r3, r3
   13f7a:	2202      	movs	r2, #2
   13f7c:	4313      	orrs	r3, r2
   13f7e:	b2da      	uxtb	r2, r3
   13f80:	68fb      	ldr	r3, [r7, #12]
   13f82:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   13f84:	46c0      	nop			; (mov r8, r8)
   13f86:	687b      	ldr	r3, [r7, #4]
   13f88:	0018      	movs	r0, r3
   13f8a:	4b04      	ldr	r3, [pc, #16]	; (13f9c <adc_start_conversion+0x44>)
   13f8c:	4798      	blx	r3
   13f8e:	1e03      	subs	r3, r0, #0
   13f90:	d1f9      	bne.n	13f86 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   13f92:	46c0      	nop			; (mov r8, r8)
   13f94:	46bd      	mov	sp, r7
   13f96:	b004      	add	sp, #16
   13f98:	bd80      	pop	{r7, pc}
   13f9a:	46c0      	nop			; (mov r8, r8)
   13f9c:	00013f31 	.word	0x00013f31

00013fa0 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   13fa0:	b580      	push	{r7, lr}
   13fa2:	b084      	sub	sp, #16
   13fa4:	af00      	add	r7, sp, #0
   13fa6:	6078      	str	r0, [r7, #4]
   13fa8:	000a      	movs	r2, r1
   13faa:	1cfb      	adds	r3, r7, #3
   13fac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13fae:	687b      	ldr	r3, [r7, #4]
   13fb0:	681b      	ldr	r3, [r3, #0]
   13fb2:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   13fb4:	68fb      	ldr	r3, [r7, #12]
   13fb6:	1cfa      	adds	r2, r7, #3
   13fb8:	7812      	ldrb	r2, [r2, #0]
   13fba:	759a      	strb	r2, [r3, #22]
}
   13fbc:	46c0      	nop			; (mov r8, r8)
   13fbe:	46bd      	mov	sp, r7
   13fc0:	b004      	add	sp, #16
   13fc2:	bd80      	pop	{r7, pc}

00013fc4 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   13fc4:	b580      	push	{r7, lr}
   13fc6:	b084      	sub	sp, #16
   13fc8:	af00      	add	r7, sp, #0
   13fca:	0002      	movs	r2, r0
   13fcc:	1dfb      	adds	r3, r7, #7
   13fce:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   13fd0:	1dfb      	adds	r3, r7, #7
   13fd2:	781a      	ldrb	r2, [r3, #0]
   13fd4:	4b47      	ldr	r3, [pc, #284]	; (140f4 <_adc_interrupt_handler+0x130>)
   13fd6:	0092      	lsls	r2, r2, #2
   13fd8:	58d3      	ldr	r3, [r2, r3]
   13fda:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   13fdc:	68fb      	ldr	r3, [r7, #12]
   13fde:	681b      	ldr	r3, [r3, #0]
   13fe0:	7e1b      	ldrb	r3, [r3, #24]
   13fe2:	b2da      	uxtb	r2, r3
   13fe4:	68fb      	ldr	r3, [r7, #12]
   13fe6:	681b      	ldr	r3, [r3, #0]
   13fe8:	7ddb      	ldrb	r3, [r3, #23]
   13fea:	b2db      	uxtb	r3, r3
   13fec:	4013      	ands	r3, r2
   13fee:	b2db      	uxtb	r3, r3
   13ff0:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   13ff2:	68bb      	ldr	r3, [r7, #8]
   13ff4:	2201      	movs	r2, #1
   13ff6:	4013      	ands	r3, r2
   13ff8:	d045      	beq.n	14086 <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   13ffa:	68fb      	ldr	r3, [r7, #12]
   13ffc:	681b      	ldr	r3, [r3, #0]
   13ffe:	2201      	movs	r2, #1
   14000:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   14002:	46c0      	nop			; (mov r8, r8)
   14004:	68fb      	ldr	r3, [r7, #12]
   14006:	0018      	movs	r0, r3
   14008:	4b3b      	ldr	r3, [pc, #236]	; (140f8 <_adc_interrupt_handler+0x134>)
   1400a:	4798      	blx	r3
   1400c:	1e03      	subs	r3, r0, #0
   1400e:	d1f9      	bne.n	14004 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   14010:	68fb      	ldr	r3, [r7, #12]
   14012:	695b      	ldr	r3, [r3, #20]
   14014:	1c99      	adds	r1, r3, #2
   14016:	68fa      	ldr	r2, [r7, #12]
   14018:	6151      	str	r1, [r2, #20]
   1401a:	68fa      	ldr	r2, [r7, #12]
   1401c:	6812      	ldr	r2, [r2, #0]
   1401e:	8b52      	ldrh	r2, [r2, #26]
   14020:	b292      	uxth	r2, r2
   14022:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   14024:	68fb      	ldr	r3, [r7, #12]
   14026:	8b1b      	ldrh	r3, [r3, #24]
   14028:	b29b      	uxth	r3, r3
   1402a:	3b01      	subs	r3, #1
   1402c:	b29b      	uxth	r3, r3
   1402e:	68fa      	ldr	r2, [r7, #12]
   14030:	1c19      	adds	r1, r3, #0
   14032:	8311      	strh	r1, [r2, #24]
   14034:	2b00      	cmp	r3, #0
   14036:	d008      	beq.n	1404a <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   14038:	68fb      	ldr	r3, [r7, #12]
   1403a:	7f5b      	ldrb	r3, [r3, #29]
   1403c:	2b00      	cmp	r3, #0
   1403e:	d022      	beq.n	14086 <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   14040:	68fb      	ldr	r3, [r7, #12]
   14042:	0018      	movs	r0, r3
   14044:	4b2d      	ldr	r3, [pc, #180]	; (140fc <_adc_interrupt_handler+0x138>)
   14046:	4798      	blx	r3
   14048:	e01d      	b.n	14086 <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1404a:	68fb      	ldr	r3, [r7, #12]
   1404c:	2101      	movs	r1, #1
   1404e:	0018      	movs	r0, r3
   14050:	4b2b      	ldr	r3, [pc, #172]	; (14100 <_adc_interrupt_handler+0x13c>)
   14052:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   14054:	68fb      	ldr	r3, [r7, #12]
   14056:	7f1b      	ldrb	r3, [r3, #28]
   14058:	b2db      	uxtb	r3, r3
   1405a:	2b05      	cmp	r3, #5
   1405c:	d113      	bne.n	14086 <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   1405e:	68fb      	ldr	r3, [r7, #12]
   14060:	2200      	movs	r2, #0
   14062:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   14064:	68fb      	ldr	r3, [r7, #12]
   14066:	7edb      	ldrb	r3, [r3, #27]
   14068:	001a      	movs	r2, r3
   1406a:	2301      	movs	r3, #1
   1406c:	4013      	ands	r3, r2
   1406e:	d00a      	beq.n	14086 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   14070:	68fb      	ldr	r3, [r7, #12]
   14072:	7e9b      	ldrb	r3, [r3, #26]
   14074:	001a      	movs	r2, r3
   14076:	2301      	movs	r3, #1
   14078:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1407a:	d004      	beq.n	14086 <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   1407c:	68fb      	ldr	r3, [r7, #12]
   1407e:	689b      	ldr	r3, [r3, #8]
   14080:	68fa      	ldr	r2, [r7, #12]
   14082:	0010      	movs	r0, r2
   14084:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   14086:	68bb      	ldr	r3, [r7, #8]
   14088:	2204      	movs	r2, #4
   1408a:	4013      	ands	r3, r2
   1408c:	d014      	beq.n	140b8 <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   1408e:	68fb      	ldr	r3, [r7, #12]
   14090:	681b      	ldr	r3, [r3, #0]
   14092:	2204      	movs	r2, #4
   14094:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   14096:	68fb      	ldr	r3, [r7, #12]
   14098:	7edb      	ldrb	r3, [r3, #27]
   1409a:	001a      	movs	r2, r3
   1409c:	2302      	movs	r3, #2
   1409e:	4013      	ands	r3, r2
   140a0:	d00a      	beq.n	140b8 <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   140a2:	68fb      	ldr	r3, [r7, #12]
   140a4:	7e9b      	ldrb	r3, [r3, #26]
   140a6:	001a      	movs	r2, r3
   140a8:	2302      	movs	r3, #2
   140aa:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   140ac:	d004      	beq.n	140b8 <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   140ae:	68fb      	ldr	r3, [r7, #12]
   140b0:	68db      	ldr	r3, [r3, #12]
   140b2:	68fa      	ldr	r2, [r7, #12]
   140b4:	0010      	movs	r0, r2
   140b6:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   140b8:	68bb      	ldr	r3, [r7, #8]
   140ba:	2202      	movs	r2, #2
   140bc:	4013      	ands	r3, r2
   140be:	d014      	beq.n	140ea <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   140c0:	68fb      	ldr	r3, [r7, #12]
   140c2:	681b      	ldr	r3, [r3, #0]
   140c4:	2202      	movs	r2, #2
   140c6:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   140c8:	68fb      	ldr	r3, [r7, #12]
   140ca:	7edb      	ldrb	r3, [r3, #27]
   140cc:	001a      	movs	r2, r3
   140ce:	2304      	movs	r3, #4
   140d0:	4013      	ands	r3, r2
   140d2:	d00a      	beq.n	140ea <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   140d4:	68fb      	ldr	r3, [r7, #12]
   140d6:	7e9b      	ldrb	r3, [r3, #26]
   140d8:	001a      	movs	r2, r3
   140da:	2304      	movs	r3, #4
   140dc:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   140de:	d004      	beq.n	140ea <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   140e0:	68fb      	ldr	r3, [r7, #12]
   140e2:	691b      	ldr	r3, [r3, #16]
   140e4:	68fa      	ldr	r2, [r7, #12]
   140e6:	0010      	movs	r0, r2
   140e8:	4798      	blx	r3
		}
	}
}
   140ea:	46c0      	nop			; (mov r8, r8)
   140ec:	46bd      	mov	sp, r7
   140ee:	b004      	add	sp, #16
   140f0:	bd80      	pop	{r7, pc}
   140f2:	46c0      	nop			; (mov r8, r8)
   140f4:	200046f0 	.word	0x200046f0
   140f8:	00013f31 	.word	0x00013f31
   140fc:	00013f59 	.word	0x00013f59
   14100:	00013fa1 	.word	0x00013fa1

00014104 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   14104:	b580      	push	{r7, lr}
   14106:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   14108:	2000      	movs	r0, #0
   1410a:	4b02      	ldr	r3, [pc, #8]	; (14114 <ADC_Handler+0x10>)
   1410c:	4798      	blx	r3
}
   1410e:	46c0      	nop			; (mov r8, r8)
   14110:	46bd      	mov	sp, r7
   14112:	bd80      	pop	{r7, pc}
   14114:	00013fc5 	.word	0x00013fc5

00014118 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   14118:	b580      	push	{r7, lr}
   1411a:	b082      	sub	sp, #8
   1411c:	af00      	add	r7, sp, #0
   1411e:	0002      	movs	r2, r0
   14120:	1dfb      	adds	r3, r7, #7
   14122:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14124:	4a07      	ldr	r2, [pc, #28]	; (14144 <system_interrupt_disable+0x2c>)
   14126:	1dfb      	adds	r3, r7, #7
   14128:	781b      	ldrb	r3, [r3, #0]
   1412a:	0019      	movs	r1, r3
   1412c:	231f      	movs	r3, #31
   1412e:	400b      	ands	r3, r1
   14130:	2101      	movs	r1, #1
   14132:	4099      	lsls	r1, r3
   14134:	000b      	movs	r3, r1
   14136:	0019      	movs	r1, r3
   14138:	2380      	movs	r3, #128	; 0x80
   1413a:	50d1      	str	r1, [r2, r3]
}
   1413c:	46c0      	nop			; (mov r8, r8)
   1413e:	46bd      	mov	sp, r7
   14140:	b002      	add	sp, #8
   14142:	bd80      	pop	{r7, pc}
   14144:	e000e100 	.word	0xe000e100

00014148 <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   14148:	b580      	push	{r7, lr}
   1414a:	b084      	sub	sp, #16
   1414c:	af00      	add	r7, sp, #0
   1414e:	0002      	movs	r2, r0
   14150:	1dfb      	adds	r3, r7, #7
   14152:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   14154:	1dfb      	adds	r3, r7, #7
   14156:	781a      	ldrb	r2, [r3, #0]
   14158:	4b37      	ldr	r3, [pc, #220]	; (14238 <_dac_interrupt_handler+0xf0>)
   1415a:	0092      	lsls	r2, r2, #2
   1415c:	58d3      	ldr	r3, [r2, r3]
   1415e:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   14160:	68fb      	ldr	r3, [r7, #12]
   14162:	681b      	ldr	r3, [r3, #0]
   14164:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   14166:	68bb      	ldr	r3, [r7, #8]
   14168:	799b      	ldrb	r3, [r3, #6]
   1416a:	b2db      	uxtb	r3, r3
   1416c:	001a      	movs	r2, r3
   1416e:	2301      	movs	r3, #1
   14170:	4013      	ands	r3, r2
   14172:	d00e      	beq.n	14192 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   14174:	68bb      	ldr	r3, [r7, #8]
   14176:	2201      	movs	r2, #1
   14178:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1417a:	68fb      	ldr	r3, [r7, #12]
   1417c:	3314      	adds	r3, #20
   1417e:	2b00      	cmp	r3, #0
   14180:	d007      	beq.n	14192 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   14182:	68fb      	ldr	r3, [r7, #12]
   14184:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   14186:	2b00      	cmp	r3, #0
   14188:	d003      	beq.n	14192 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1418a:	68fb      	ldr	r3, [r7, #12]
   1418c:	699b      	ldr	r3, [r3, #24]
   1418e:	2000      	movs	r0, #0
   14190:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   14192:	68bb      	ldr	r3, [r7, #8]
   14194:	799b      	ldrb	r3, [r3, #6]
   14196:	b2db      	uxtb	r3, r3
   14198:	001a      	movs	r2, r3
   1419a:	2302      	movs	r3, #2
   1419c:	4013      	ands	r3, r2
   1419e:	d047      	beq.n	14230 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   141a0:	68bb      	ldr	r3, [r7, #8]
   141a2:	2202      	movs	r2, #2
   141a4:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   141a6:	68fb      	ldr	r3, [r7, #12]
   141a8:	899b      	ldrh	r3, [r3, #12]
   141aa:	b29b      	uxth	r3, r3
   141ac:	2b00      	cmp	r3, #0
   141ae:	d033      	beq.n	14218 <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   141b0:	68fb      	ldr	r3, [r7, #12]
   141b2:	689a      	ldr	r2, [r3, #8]
   141b4:	68fb      	ldr	r3, [r7, #12]
   141b6:	89db      	ldrh	r3, [r3, #14]
   141b8:	b29b      	uxth	r3, r3
   141ba:	1c59      	adds	r1, r3, #1
   141bc:	b288      	uxth	r0, r1
   141be:	68f9      	ldr	r1, [r7, #12]
   141c0:	81c8      	strh	r0, [r1, #14]
   141c2:	005b      	lsls	r3, r3, #1
   141c4:	18d3      	adds	r3, r2, r3
   141c6:	881b      	ldrh	r3, [r3, #0]
   141c8:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   141ca:	68bb      	ldr	r3, [r7, #8]
   141cc:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   141ce:	68fb      	ldr	r3, [r7, #12]
   141d0:	899b      	ldrh	r3, [r3, #12]
   141d2:	b29b      	uxth	r3, r3
   141d4:	3b01      	subs	r3, #1
   141d6:	b29a      	uxth	r2, r3
   141d8:	68fb      	ldr	r3, [r7, #12]
   141da:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   141dc:	68fb      	ldr	r3, [r7, #12]
   141de:	899b      	ldrh	r3, [r3, #12]
   141e0:	b29b      	uxth	r3, r3
   141e2:	2b00      	cmp	r3, #0
   141e4:	d118      	bne.n	14218 <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   141e6:	68fb      	ldr	r3, [r7, #12]
   141e8:	2220      	movs	r2, #32
   141ea:	2100      	movs	r1, #0
   141ec:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   141ee:	68bb      	ldr	r3, [r7, #8]
   141f0:	2202      	movs	r2, #2
   141f2:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   141f4:	68bb      	ldr	r3, [r7, #8]
   141f6:	2202      	movs	r2, #2
   141f8:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   141fa:	2019      	movs	r0, #25
   141fc:	4b0f      	ldr	r3, [pc, #60]	; (1423c <_dac_interrupt_handler+0xf4>)
   141fe:	4798      	blx	r3

				if ((module->callback) &&
   14200:	68fb      	ldr	r3, [r7, #12]
   14202:	3314      	adds	r3, #20
   14204:	2b00      	cmp	r3, #0
   14206:	d007      	beq.n	14218 <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   14208:	68fb      	ldr	r3, [r7, #12]
   1420a:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   1420c:	2b00      	cmp	r3, #0
   1420e:	d003      	beq.n	14218 <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   14210:	68fb      	ldr	r3, [r7, #12]
   14212:	69db      	ldr	r3, [r3, #28]
   14214:	2000      	movs	r0, #0
   14216:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   14218:	68fb      	ldr	r3, [r7, #12]
   1421a:	3314      	adds	r3, #20
   1421c:	2b00      	cmp	r3, #0
   1421e:	d007      	beq.n	14230 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   14220:	68fb      	ldr	r3, [r7, #12]
   14222:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   14224:	2b00      	cmp	r3, #0
   14226:	d003      	beq.n	14230 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   14228:	68fb      	ldr	r3, [r7, #12]
   1422a:	695b      	ldr	r3, [r3, #20]
   1422c:	2000      	movs	r0, #0
   1422e:	4798      	blx	r3
		}
	}
}
   14230:	46c0      	nop			; (mov r8, r8)
   14232:	46bd      	mov	sp, r7
   14234:	b004      	add	sp, #16
   14236:	bd80      	pop	{r7, pc}
   14238:	200046f4 	.word	0x200046f4
   1423c:	00014119 	.word	0x00014119

00014240 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   14240:	b580      	push	{r7, lr}
   14242:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   14244:	2000      	movs	r0, #0
   14246:	4b02      	ldr	r3, [pc, #8]	; (14250 <DAC_Handler+0x10>)
   14248:	4798      	blx	r3
}
   1424a:	46c0      	nop			; (mov r8, r8)
   1424c:	46bd      	mov	sp, r7
   1424e:	bd80      	pop	{r7, pc}
   14250:	00014149 	.word	0x00014149

00014254 <system_interrupt_enter_critical_section>:
{
   14254:	b580      	push	{r7, lr}
   14256:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   14258:	4b02      	ldr	r3, [pc, #8]	; (14264 <system_interrupt_enter_critical_section+0x10>)
   1425a:	4798      	blx	r3
}
   1425c:	46c0      	nop			; (mov r8, r8)
   1425e:	46bd      	mov	sp, r7
   14260:	bd80      	pop	{r7, pc}
   14262:	46c0      	nop			; (mov r8, r8)
   14264:	0002919d 	.word	0x0002919d

00014268 <system_interrupt_leave_critical_section>:
{
   14268:	b580      	push	{r7, lr}
   1426a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1426c:	4b02      	ldr	r3, [pc, #8]	; (14278 <system_interrupt_leave_critical_section+0x10>)
   1426e:	4798      	blx	r3
}
   14270:	46c0      	nop			; (mov r8, r8)
   14272:	46bd      	mov	sp, r7
   14274:	bd80      	pop	{r7, pc}
   14276:	46c0      	nop			; (mov r8, r8)
   14278:	000291f1 	.word	0x000291f1

0001427c <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   1427c:	b580      	push	{r7, lr}
   1427e:	b086      	sub	sp, #24
   14280:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   14282:	4b49      	ldr	r3, [pc, #292]	; (143a8 <DMAC_Handler+0x12c>)
   14284:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   14286:	4b49      	ldr	r3, [pc, #292]	; (143ac <DMAC_Handler+0x130>)
   14288:	8c1b      	ldrh	r3, [r3, #32]
   1428a:	b29b      	uxth	r3, r3
   1428c:	b2da      	uxtb	r2, r3
   1428e:	2317      	movs	r3, #23
   14290:	18fb      	adds	r3, r7, r3
   14292:	210f      	movs	r1, #15
   14294:	400a      	ands	r2, r1
   14296:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   14298:	2317      	movs	r3, #23
   1429a:	18fb      	adds	r3, r7, r3
   1429c:	781a      	ldrb	r2, [r3, #0]
   1429e:	4b44      	ldr	r3, [pc, #272]	; (143b0 <DMAC_Handler+0x134>)
   142a0:	0092      	lsls	r2, r2, #2
   142a2:	58d3      	ldr	r3, [r2, r3]
   142a4:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   142a6:	4a41      	ldr	r2, [pc, #260]	; (143ac <DMAC_Handler+0x130>)
   142a8:	693b      	ldr	r3, [r7, #16]
   142aa:	781b      	ldrb	r3, [r3, #0]
   142ac:	210f      	movs	r1, #15
   142ae:	400b      	ands	r3, r1
   142b0:	b2d9      	uxtb	r1, r3
   142b2:	233f      	movs	r3, #63	; 0x3f
   142b4:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   142b6:	493d      	ldr	r1, [pc, #244]	; (143ac <DMAC_Handler+0x130>)
   142b8:	230f      	movs	r3, #15
   142ba:	18fb      	adds	r3, r7, r3
   142bc:	224e      	movs	r2, #78	; 0x4e
   142be:	5c8a      	ldrb	r2, [r1, r2]
   142c0:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   142c2:	693b      	ldr	r3, [r7, #16]
   142c4:	781b      	ldrb	r3, [r3, #0]
   142c6:	4a3b      	ldr	r2, [pc, #236]	; (143b4 <DMAC_Handler+0x138>)
   142c8:	011b      	lsls	r3, r3, #4
   142ca:	18d3      	adds	r3, r2, r3
   142cc:	3302      	adds	r3, #2
   142ce:	881b      	ldrh	r3, [r3, #0]
   142d0:	b29b      	uxth	r3, r3
   142d2:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   142d4:	693b      	ldr	r3, [r7, #16]
   142d6:	781b      	ldrb	r3, [r3, #0]
   142d8:	4a37      	ldr	r2, [pc, #220]	; (143b8 <DMAC_Handler+0x13c>)
   142da:	011b      	lsls	r3, r3, #4
   142dc:	18d3      	adds	r3, r2, r3
   142de:	3302      	adds	r3, #2
   142e0:	881b      	ldrh	r3, [r3, #0]
   142e2:	b29b      	uxth	r3, r3
   142e4:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   142e6:	68ba      	ldr	r2, [r7, #8]
   142e8:	687b      	ldr	r3, [r7, #4]
   142ea:	1ad2      	subs	r2, r2, r3
   142ec:	693b      	ldr	r3, [r7, #16]
   142ee:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   142f0:	230f      	movs	r3, #15
   142f2:	18fb      	adds	r3, r7, r3
   142f4:	781b      	ldrb	r3, [r3, #0]
   142f6:	2201      	movs	r2, #1
   142f8:	4013      	ands	r3, r2
   142fa:	d016      	beq.n	1432a <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   142fc:	4a2b      	ldr	r2, [pc, #172]	; (143ac <DMAC_Handler+0x130>)
   142fe:	234e      	movs	r3, #78	; 0x4e
   14300:	2101      	movs	r1, #1
   14302:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   14304:	693b      	ldr	r3, [r7, #16]
   14306:	2210      	movs	r2, #16
   14308:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1430a:	693b      	ldr	r3, [r7, #16]
   1430c:	7c1b      	ldrb	r3, [r3, #16]
   1430e:	001a      	movs	r2, r3
   14310:	2301      	movs	r3, #1
   14312:	4013      	ands	r3, r2
   14314:	d042      	beq.n	1439c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   14316:	693b      	ldr	r3, [r7, #16]
   14318:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1431a:	2b00      	cmp	r3, #0
   1431c:	d03e      	beq.n	1439c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   1431e:	693b      	ldr	r3, [r7, #16]
   14320:	685b      	ldr	r3, [r3, #4]
   14322:	693a      	ldr	r2, [r7, #16]
   14324:	0010      	movs	r0, r2
   14326:	4798      	blx	r3
   14328:	e038      	b.n	1439c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1432a:	230f      	movs	r3, #15
   1432c:	18fb      	adds	r3, r7, r3
   1432e:	781b      	ldrb	r3, [r3, #0]
   14330:	2202      	movs	r2, #2
   14332:	4013      	ands	r3, r2
   14334:	d016      	beq.n	14364 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   14336:	4a1d      	ldr	r2, [pc, #116]	; (143ac <DMAC_Handler+0x130>)
   14338:	234e      	movs	r3, #78	; 0x4e
   1433a:	2102      	movs	r1, #2
   1433c:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   1433e:	693b      	ldr	r3, [r7, #16]
   14340:	2200      	movs	r2, #0
   14342:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   14344:	693b      	ldr	r3, [r7, #16]
   14346:	7c1b      	ldrb	r3, [r3, #16]
   14348:	001a      	movs	r2, r3
   1434a:	2302      	movs	r3, #2
   1434c:	4013      	ands	r3, r2
   1434e:	d025      	beq.n	1439c <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   14350:	693b      	ldr	r3, [r7, #16]
   14352:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   14354:	2b00      	cmp	r3, #0
   14356:	d021      	beq.n	1439c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   14358:	693b      	ldr	r3, [r7, #16]
   1435a:	689b      	ldr	r3, [r3, #8]
   1435c:	693a      	ldr	r2, [r7, #16]
   1435e:	0010      	movs	r0, r2
   14360:	4798      	blx	r3
   14362:	e01b      	b.n	1439c <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   14364:	230f      	movs	r3, #15
   14366:	18fb      	adds	r3, r7, r3
   14368:	781b      	ldrb	r3, [r3, #0]
   1436a:	2204      	movs	r2, #4
   1436c:	4013      	ands	r3, r2
   1436e:	d015      	beq.n	1439c <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   14370:	4a0e      	ldr	r2, [pc, #56]	; (143ac <DMAC_Handler+0x130>)
   14372:	234e      	movs	r3, #78	; 0x4e
   14374:	2104      	movs	r1, #4
   14376:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   14378:	693b      	ldr	r3, [r7, #16]
   1437a:	2206      	movs	r2, #6
   1437c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1437e:	693b      	ldr	r3, [r7, #16]
   14380:	7c1b      	ldrb	r3, [r3, #16]
   14382:	001a      	movs	r2, r3
   14384:	2304      	movs	r3, #4
   14386:	4013      	ands	r3, r2
   14388:	d008      	beq.n	1439c <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1438a:	693b      	ldr	r3, [r7, #16]
   1438c:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   1438e:	2b00      	cmp	r3, #0
   14390:	d004      	beq.n	1439c <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   14392:	693b      	ldr	r3, [r7, #16]
   14394:	68db      	ldr	r3, [r3, #12]
   14396:	693a      	ldr	r2, [r7, #16]
   14398:	0010      	movs	r0, r2
   1439a:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   1439c:	4b07      	ldr	r3, [pc, #28]	; (143bc <DMAC_Handler+0x140>)
   1439e:	4798      	blx	r3
}
   143a0:	46c0      	nop			; (mov r8, r8)
   143a2:	46bd      	mov	sp, r7
   143a4:	b006      	add	sp, #24
   143a6:	bd80      	pop	{r7, pc}
   143a8:	00014255 	.word	0x00014255
   143ac:	41004800 	.word	0x41004800
   143b0:	20000400 	.word	0x20000400
   143b4:	20004700 	.word	0x20004700
   143b8:	200003b0 	.word	0x200003b0
   143bc:	00014269 	.word	0x00014269

000143c0 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   143c0:	b580      	push	{r7, lr}
   143c2:	b082      	sub	sp, #8
   143c4:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   143c6:	4b15      	ldr	r3, [pc, #84]	; (1441c <EVSYS_Handler+0x5c>)
   143c8:	691b      	ldr	r3, [r3, #16]
   143ca:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   143cc:	4b14      	ldr	r3, [pc, #80]	; (14420 <EVSYS_Handler+0x60>)
   143ce:	699b      	ldr	r3, [r3, #24]
   143d0:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   143d2:	4b12      	ldr	r3, [pc, #72]	; (1441c <EVSYS_Handler+0x5c>)
   143d4:	689a      	ldr	r2, [r3, #8]
   143d6:	683b      	ldr	r3, [r7, #0]
   143d8:	431a      	orrs	r2, r3
   143da:	4b10      	ldr	r3, [pc, #64]	; (1441c <EVSYS_Handler+0x5c>)
   143dc:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   143de:	4b10      	ldr	r3, [pc, #64]	; (14420 <EVSYS_Handler+0x60>)
   143e0:	4a10      	ldr	r2, [pc, #64]	; (14424 <EVSYS_Handler+0x64>)
   143e2:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   143e4:	e008      	b.n	143f8 <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   143e6:	687b      	ldr	r3, [r7, #4]
   143e8:	685a      	ldr	r2, [r3, #4]
   143ea:	687b      	ldr	r3, [r7, #4]
   143ec:	681b      	ldr	r3, [r3, #0]
   143ee:	0018      	movs	r0, r3
   143f0:	4790      	blx	r2
		current_hook = current_hook->next;
   143f2:	687b      	ldr	r3, [r7, #4]
   143f4:	689b      	ldr	r3, [r3, #8]
   143f6:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   143f8:	687b      	ldr	r3, [r7, #4]
   143fa:	2b00      	cmp	r3, #0
   143fc:	d1f3      	bne.n	143e6 <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   143fe:	4b07      	ldr	r3, [pc, #28]	; (1441c <EVSYS_Handler+0x5c>)
   14400:	68db      	ldr	r3, [r3, #12]
   14402:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   14404:	4b05      	ldr	r3, [pc, #20]	; (1441c <EVSYS_Handler+0x5c>)
   14406:	689b      	ldr	r3, [r3, #8]
   14408:	683a      	ldr	r2, [r7, #0]
   1440a:	43d2      	mvns	r2, r2
   1440c:	401a      	ands	r2, r3
   1440e:	4b03      	ldr	r3, [pc, #12]	; (1441c <EVSYS_Handler+0x5c>)
   14410:	609a      	str	r2, [r3, #8]
}
   14412:	46c0      	nop			; (mov r8, r8)
   14414:	46bd      	mov	sp, r7
   14416:	b002      	add	sp, #8
   14418:	bd80      	pop	{r7, pc}
   1441a:	46c0      	nop			; (mov r8, r8)
   1441c:	20000088 	.word	0x20000088
   14420:	42000400 	.word	0x42000400
   14424:	0f0fffff 	.word	0x0f0fffff

00014428 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   14428:	b580      	push	{r7, lr}
   1442a:	b082      	sub	sp, #8
   1442c:	af00      	add	r7, sp, #0
   1442e:	0002      	movs	r2, r0
   14430:	6039      	str	r1, [r7, #0]
   14432:	1dfb      	adds	r3, r7, #7
   14434:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   14436:	1dfb      	adds	r3, r7, #7
   14438:	781b      	ldrb	r3, [r3, #0]
   1443a:	2b01      	cmp	r3, #1
   1443c:	d00a      	beq.n	14454 <system_apb_clock_set_mask+0x2c>
   1443e:	2b02      	cmp	r3, #2
   14440:	d00f      	beq.n	14462 <system_apb_clock_set_mask+0x3a>
   14442:	2b00      	cmp	r3, #0
   14444:	d114      	bne.n	14470 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   14446:	4b0e      	ldr	r3, [pc, #56]	; (14480 <system_apb_clock_set_mask+0x58>)
   14448:	4a0d      	ldr	r2, [pc, #52]	; (14480 <system_apb_clock_set_mask+0x58>)
   1444a:	6991      	ldr	r1, [r2, #24]
   1444c:	683a      	ldr	r2, [r7, #0]
   1444e:	430a      	orrs	r2, r1
   14450:	619a      	str	r2, [r3, #24]
			break;
   14452:	e00f      	b.n	14474 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   14454:	4b0a      	ldr	r3, [pc, #40]	; (14480 <system_apb_clock_set_mask+0x58>)
   14456:	4a0a      	ldr	r2, [pc, #40]	; (14480 <system_apb_clock_set_mask+0x58>)
   14458:	69d1      	ldr	r1, [r2, #28]
   1445a:	683a      	ldr	r2, [r7, #0]
   1445c:	430a      	orrs	r2, r1
   1445e:	61da      	str	r2, [r3, #28]
			break;
   14460:	e008      	b.n	14474 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   14462:	4b07      	ldr	r3, [pc, #28]	; (14480 <system_apb_clock_set_mask+0x58>)
   14464:	4a06      	ldr	r2, [pc, #24]	; (14480 <system_apb_clock_set_mask+0x58>)
   14466:	6a11      	ldr	r1, [r2, #32]
   14468:	683a      	ldr	r2, [r7, #0]
   1446a:	430a      	orrs	r2, r1
   1446c:	621a      	str	r2, [r3, #32]
			break;
   1446e:	e001      	b.n	14474 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   14470:	2317      	movs	r3, #23
   14472:	e000      	b.n	14476 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   14474:	2300      	movs	r3, #0
}
   14476:	0018      	movs	r0, r3
   14478:	46bd      	mov	sp, r7
   1447a:	b002      	add	sp, #8
   1447c:	bd80      	pop	{r7, pc}
   1447e:	46c0      	nop			; (mov r8, r8)
   14480:	40000400 	.word	0x40000400

00014484 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   14484:	b580      	push	{r7, lr}
   14486:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   14488:	2102      	movs	r1, #2
   1448a:	2002      	movs	r0, #2
   1448c:	4b07      	ldr	r3, [pc, #28]	; (144ac <_system_events_init+0x28>)
   1448e:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   14490:	4b07      	ldr	r3, [pc, #28]	; (144b0 <_system_events_init+0x2c>)
   14492:	2201      	movs	r2, #1
   14494:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   14496:	46c0      	nop			; (mov r8, r8)
   14498:	4b05      	ldr	r3, [pc, #20]	; (144b0 <_system_events_init+0x2c>)
   1449a:	781b      	ldrb	r3, [r3, #0]
   1449c:	b2db      	uxtb	r3, r3
   1449e:	001a      	movs	r2, r3
   144a0:	2301      	movs	r3, #1
   144a2:	4013      	ands	r3, r2
   144a4:	d1f8      	bne.n	14498 <_system_events_init+0x14>
	}
}
   144a6:	46c0      	nop			; (mov r8, r8)
   144a8:	46bd      	mov	sp, r7
   144aa:	bd80      	pop	{r7, pc}
   144ac:	00014429 	.word	0x00014429
   144b0:	42000400 	.word	0x42000400

000144b4 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   144b4:	b580      	push	{r7, lr}
   144b6:	b084      	sub	sp, #16
   144b8:	af00      	add	r7, sp, #0
   144ba:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   144bc:	687b      	ldr	r3, [r7, #4]
   144be:	681b      	ldr	r3, [r3, #0]
   144c0:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   144c2:	68fb      	ldr	r3, [r7, #12]
   144c4:	69db      	ldr	r3, [r3, #28]
   144c6:	2207      	movs	r2, #7
   144c8:	4013      	ands	r3, r2
   144ca:	1e5a      	subs	r2, r3, #1
   144cc:	4193      	sbcs	r3, r2
   144ce:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   144d0:	0018      	movs	r0, r3
   144d2:	46bd      	mov	sp, r7
   144d4:	b004      	add	sp, #16
   144d6:	bd80      	pop	{r7, pc}

000144d8 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   144d8:	b580      	push	{r7, lr}
   144da:	b082      	sub	sp, #8
   144dc:	af00      	add	r7, sp, #0
   144de:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   144e0:	46c0      	nop			; (mov r8, r8)
   144e2:	687b      	ldr	r3, [r7, #4]
   144e4:	0018      	movs	r0, r3
   144e6:	4b04      	ldr	r3, [pc, #16]	; (144f8 <_i2c_master_wait_for_sync+0x20>)
   144e8:	4798      	blx	r3
   144ea:	1e03      	subs	r3, r0, #0
   144ec:	d1f9      	bne.n	144e2 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   144ee:	46c0      	nop			; (mov r8, r8)
   144f0:	46bd      	mov	sp, r7
   144f2:	b002      	add	sp, #8
   144f4:	bd80      	pop	{r7, pc}
   144f6:	46c0      	nop			; (mov r8, r8)
   144f8:	000144b5 	.word	0x000144b5

000144fc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   144fc:	b580      	push	{r7, lr}
   144fe:	b084      	sub	sp, #16
   14500:	af00      	add	r7, sp, #0
   14502:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14504:	687b      	ldr	r3, [r7, #4]
   14506:	681b      	ldr	r3, [r3, #0]
   14508:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1450a:	68fb      	ldr	r3, [r7, #12]
   1450c:	681b      	ldr	r3, [r3, #0]
   1450e:	011b      	lsls	r3, r3, #4
   14510:	0fdb      	lsrs	r3, r3, #31
   14512:	b2db      	uxtb	r3, r3
   14514:	001a      	movs	r2, r3
   14516:	230b      	movs	r3, #11
   14518:	18fb      	adds	r3, r7, r3
   1451a:	1e51      	subs	r1, r2, #1
   1451c:	418a      	sbcs	r2, r1
   1451e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   14520:	2308      	movs	r3, #8
   14522:	18fb      	adds	r3, r7, r3
   14524:	687a      	ldr	r2, [r7, #4]
   14526:	8b52      	ldrh	r2, [r2, #26]
   14528:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	8b9b      	ldrh	r3, [r3, #28]
   1452e:	b29a      	uxth	r2, r3
   14530:	2308      	movs	r3, #8
   14532:	18fb      	adds	r3, r7, r3
   14534:	2108      	movs	r1, #8
   14536:	1879      	adds	r1, r7, r1
   14538:	8809      	ldrh	r1, [r1, #0]
   1453a:	1a8a      	subs	r2, r1, r2
   1453c:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   1453e:	687b      	ldr	r3, [r7, #4]
   14540:	8b9b      	ldrh	r3, [r3, #28]
   14542:	b29b      	uxth	r3, r3
   14544:	3b01      	subs	r3, #1
   14546:	b29a      	uxth	r2, r3
   14548:	687b      	ldr	r3, [r7, #4]
   1454a:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   1454c:	230b      	movs	r3, #11
   1454e:	18fb      	adds	r3, r7, r3
   14550:	781b      	ldrb	r3, [r3, #0]
   14552:	2b00      	cmp	r3, #0
   14554:	d010      	beq.n	14578 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   14556:	687b      	ldr	r3, [r7, #4]
   14558:	7adb      	ldrb	r3, [r3, #11]
   1455a:	2b00      	cmp	r3, #0
   1455c:	d01c      	beq.n	14598 <_i2c_master_read+0x9c>
   1455e:	687b      	ldr	r3, [r7, #4]
   14560:	8b9b      	ldrh	r3, [r3, #28]
   14562:	b29b      	uxth	r3, r3
   14564:	2b01      	cmp	r3, #1
   14566:	d117      	bne.n	14598 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   14568:	68fb      	ldr	r3, [r7, #12]
   1456a:	685b      	ldr	r3, [r3, #4]
   1456c:	2280      	movs	r2, #128	; 0x80
   1456e:	02d2      	lsls	r2, r2, #11
   14570:	431a      	orrs	r2, r3
   14572:	68fb      	ldr	r3, [r7, #12]
   14574:	605a      	str	r2, [r3, #4]
   14576:	e00f      	b.n	14598 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   14578:	687b      	ldr	r3, [r7, #4]
   1457a:	7adb      	ldrb	r3, [r3, #11]
   1457c:	2b00      	cmp	r3, #0
   1457e:	d00b      	beq.n	14598 <_i2c_master_read+0x9c>
   14580:	687b      	ldr	r3, [r7, #4]
   14582:	8b9b      	ldrh	r3, [r3, #28]
   14584:	b29b      	uxth	r3, r3
   14586:	2b00      	cmp	r3, #0
   14588:	d106      	bne.n	14598 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1458a:	68fb      	ldr	r3, [r7, #12]
   1458c:	685b      	ldr	r3, [r3, #4]
   1458e:	2280      	movs	r2, #128	; 0x80
   14590:	02d2      	lsls	r2, r2, #11
   14592:	431a      	orrs	r2, r3
   14594:	68fb      	ldr	r3, [r7, #12]
   14596:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   14598:	687b      	ldr	r3, [r7, #4]
   1459a:	8b9b      	ldrh	r3, [r3, #28]
   1459c:	b29b      	uxth	r3, r3
   1459e:	2b00      	cmp	r3, #0
   145a0:	d10e      	bne.n	145c0 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   145a2:	687b      	ldr	r3, [r7, #4]
   145a4:	7a9b      	ldrb	r3, [r3, #10]
   145a6:	2b00      	cmp	r3, #0
   145a8:	d00a      	beq.n	145c0 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   145aa:	687b      	ldr	r3, [r7, #4]
   145ac:	0018      	movs	r0, r3
   145ae:	4b0e      	ldr	r3, [pc, #56]	; (145e8 <_i2c_master_read+0xec>)
   145b0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   145b2:	68fb      	ldr	r3, [r7, #12]
   145b4:	685b      	ldr	r3, [r3, #4]
   145b6:	22c0      	movs	r2, #192	; 0xc0
   145b8:	0292      	lsls	r2, r2, #10
   145ba:	431a      	orrs	r2, r3
   145bc:	68fb      	ldr	r3, [r7, #12]
   145be:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   145c0:	687b      	ldr	r3, [r7, #4]
   145c2:	0018      	movs	r0, r3
   145c4:	4b08      	ldr	r3, [pc, #32]	; (145e8 <_i2c_master_read+0xec>)
   145c6:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   145c8:	687b      	ldr	r3, [r7, #4]
   145ca:	6a1a      	ldr	r2, [r3, #32]
   145cc:	2308      	movs	r3, #8
   145ce:	18fb      	adds	r3, r7, r3
   145d0:	881b      	ldrh	r3, [r3, #0]
   145d2:	18d3      	adds	r3, r2, r3
   145d4:	68fa      	ldr	r2, [r7, #12]
   145d6:	2128      	movs	r1, #40	; 0x28
   145d8:	5c52      	ldrb	r2, [r2, r1]
   145da:	b2d2      	uxtb	r2, r2
   145dc:	701a      	strb	r2, [r3, #0]
}
   145de:	46c0      	nop			; (mov r8, r8)
   145e0:	46bd      	mov	sp, r7
   145e2:	b004      	add	sp, #16
   145e4:	bd80      	pop	{r7, pc}
   145e6:	46c0      	nop			; (mov r8, r8)
   145e8:	000144d9 	.word	0x000144d9

000145ec <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   145ec:	b580      	push	{r7, lr}
   145ee:	b084      	sub	sp, #16
   145f0:	af00      	add	r7, sp, #0
   145f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   145f4:	687b      	ldr	r3, [r7, #4]
   145f6:	681b      	ldr	r3, [r3, #0]
   145f8:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   145fa:	68fb      	ldr	r3, [r7, #12]
   145fc:	8b5b      	ldrh	r3, [r3, #26]
   145fe:	b29b      	uxth	r3, r3
   14600:	001a      	movs	r2, r3
   14602:	2304      	movs	r3, #4
   14604:	4013      	ands	r3, r2
   14606:	d004      	beq.n	14612 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   14608:	687b      	ldr	r3, [r7, #4]
   1460a:	2225      	movs	r2, #37	; 0x25
   1460c:	211e      	movs	r1, #30
   1460e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   14610:	e024      	b.n	1465c <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   14612:	230a      	movs	r3, #10
   14614:	18fb      	adds	r3, r7, r3
   14616:	687a      	ldr	r2, [r7, #4]
   14618:	8b52      	ldrh	r2, [r2, #26]
   1461a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1461c:	687b      	ldr	r3, [r7, #4]
   1461e:	8b9b      	ldrh	r3, [r3, #28]
   14620:	b29a      	uxth	r2, r3
   14622:	230a      	movs	r3, #10
   14624:	18fb      	adds	r3, r7, r3
   14626:	210a      	movs	r1, #10
   14628:	1879      	adds	r1, r7, r1
   1462a:	8809      	ldrh	r1, [r1, #0]
   1462c:	1a8a      	subs	r2, r1, r2
   1462e:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   14630:	687b      	ldr	r3, [r7, #4]
   14632:	8b9b      	ldrh	r3, [r3, #28]
   14634:	b29b      	uxth	r3, r3
   14636:	3b01      	subs	r3, #1
   14638:	b29a      	uxth	r2, r3
   1463a:	687b      	ldr	r3, [r7, #4]
   1463c:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   1463e:	687b      	ldr	r3, [r7, #4]
   14640:	0018      	movs	r0, r3
   14642:	4b08      	ldr	r3, [pc, #32]	; (14664 <_i2c_master_write+0x78>)
   14644:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   14646:	687b      	ldr	r3, [r7, #4]
   14648:	6a1a      	ldr	r2, [r3, #32]
   1464a:	230a      	movs	r3, #10
   1464c:	18fb      	adds	r3, r7, r3
   1464e:	881b      	ldrh	r3, [r3, #0]
   14650:	18d3      	adds	r3, r2, r3
   14652:	781b      	ldrb	r3, [r3, #0]
   14654:	b2d9      	uxtb	r1, r3
   14656:	68fb      	ldr	r3, [r7, #12]
   14658:	2228      	movs	r2, #40	; 0x28
   1465a:	5499      	strb	r1, [r3, r2]
}
   1465c:	46bd      	mov	sp, r7
   1465e:	b004      	add	sp, #16
   14660:	bd80      	pop	{r7, pc}
   14662:	46c0      	nop			; (mov r8, r8)
   14664:	000144d9 	.word	0x000144d9

00014668 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   14668:	b580      	push	{r7, lr}
   1466a:	b084      	sub	sp, #16
   1466c:	af00      	add	r7, sp, #0
   1466e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14670:	687b      	ldr	r3, [r7, #4]
   14672:	681b      	ldr	r3, [r3, #0]
   14674:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   14676:	68fb      	ldr	r3, [r7, #12]
   14678:	7e1b      	ldrb	r3, [r3, #24]
   1467a:	b2db      	uxtb	r3, r3
   1467c:	001a      	movs	r2, r3
   1467e:	2301      	movs	r3, #1
   14680:	4013      	ands	r3, r2
   14682:	d02b      	beq.n	146dc <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   14684:	68fb      	ldr	r3, [r7, #12]
   14686:	2201      	movs	r2, #1
   14688:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1468a:	68fb      	ldr	r3, [r7, #12]
   1468c:	8b5b      	ldrh	r3, [r3, #26]
   1468e:	b29b      	uxth	r3, r3
   14690:	001a      	movs	r2, r3
   14692:	2302      	movs	r3, #2
   14694:	4013      	ands	r3, r2
   14696:	d004      	beq.n	146a2 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   14698:	687b      	ldr	r3, [r7, #4]
   1469a:	2225      	movs	r2, #37	; 0x25
   1469c:	2141      	movs	r1, #65	; 0x41
   1469e:	5499      	strb	r1, [r3, r2]
   146a0:	e01c      	b.n	146dc <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   146a2:	68fb      	ldr	r3, [r7, #12]
   146a4:	8b5b      	ldrh	r3, [r3, #26]
   146a6:	b29b      	uxth	r3, r3
   146a8:	001a      	movs	r2, r3
   146aa:	2304      	movs	r3, #4
   146ac:	4013      	ands	r3, r2
   146ae:	d015      	beq.n	146dc <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   146b0:	687b      	ldr	r3, [r7, #4]
   146b2:	2225      	movs	r2, #37	; 0x25
   146b4:	2118      	movs	r1, #24
   146b6:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   146b8:	687b      	ldr	r3, [r7, #4]
   146ba:	2200      	movs	r2, #0
   146bc:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   146be:	687b      	ldr	r3, [r7, #4]
   146c0:	7a9b      	ldrb	r3, [r3, #10]
   146c2:	2b00      	cmp	r3, #0
   146c4:	d00a      	beq.n	146dc <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   146c6:	687b      	ldr	r3, [r7, #4]
   146c8:	0018      	movs	r0, r3
   146ca:	4b13      	ldr	r3, [pc, #76]	; (14718 <_i2c_master_async_address_response+0xb0>)
   146cc:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   146ce:	68fb      	ldr	r3, [r7, #12]
   146d0:	685b      	ldr	r3, [r3, #4]
   146d2:	22c0      	movs	r2, #192	; 0xc0
   146d4:	0292      	lsls	r2, r2, #10
   146d6:	431a      	orrs	r2, r3
   146d8:	68fb      	ldr	r3, [r7, #12]
   146da:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   146dc:	687b      	ldr	r3, [r7, #4]
   146de:	8b9b      	ldrh	r3, [r3, #28]
   146e0:	b29a      	uxth	r2, r3
   146e2:	687b      	ldr	r3, [r7, #4]
   146e4:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   146e6:	687b      	ldr	r3, [r7, #4]
   146e8:	2225      	movs	r2, #37	; 0x25
   146ea:	5c9b      	ldrb	r3, [r3, r2]
   146ec:	b2db      	uxtb	r3, r3
   146ee:	2b05      	cmp	r3, #5
   146f0:	d10e      	bne.n	14710 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   146f2:	687b      	ldr	r3, [r7, #4]
   146f4:	2224      	movs	r2, #36	; 0x24
   146f6:	5c9b      	ldrb	r3, [r3, r2]
   146f8:	b2db      	uxtb	r3, r3
   146fa:	2b00      	cmp	r3, #0
   146fc:	d104      	bne.n	14708 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   146fe:	687b      	ldr	r3, [r7, #4]
   14700:	0018      	movs	r0, r3
   14702:	4b06      	ldr	r3, [pc, #24]	; (1471c <_i2c_master_async_address_response+0xb4>)
   14704:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   14706:	e003      	b.n	14710 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   14708:	687b      	ldr	r3, [r7, #4]
   1470a:	0018      	movs	r0, r3
   1470c:	4b04      	ldr	r3, [pc, #16]	; (14720 <_i2c_master_async_address_response+0xb8>)
   1470e:	4798      	blx	r3
}
   14710:	46c0      	nop			; (mov r8, r8)
   14712:	46bd      	mov	sp, r7
   14714:	b004      	add	sp, #16
   14716:	bd80      	pop	{r7, pc}
   14718:	000144d9 	.word	0x000144d9
   1471c:	000145ed 	.word	0x000145ed
   14720:	000144fd 	.word	0x000144fd

00014724 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   14724:	b580      	push	{r7, lr}
   14726:	b084      	sub	sp, #16
   14728:	af00      	add	r7, sp, #0
   1472a:	60f8      	str	r0, [r7, #12]
   1472c:	60b9      	str	r1, [r7, #8]
   1472e:	1dfb      	adds	r3, r7, #7
   14730:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   14732:	1dfb      	adds	r3, r7, #7
   14734:	781b      	ldrb	r3, [r3, #0]
   14736:	68fa      	ldr	r2, [r7, #12]
   14738:	3302      	adds	r3, #2
   1473a:	009b      	lsls	r3, r3, #2
   1473c:	18d3      	adds	r3, r2, r3
   1473e:	3304      	adds	r3, #4
   14740:	68ba      	ldr	r2, [r7, #8]
   14742:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   14744:	68fb      	ldr	r3, [r7, #12]
   14746:	7e1b      	ldrb	r3, [r3, #24]
   14748:	b2db      	uxtb	r3, r3
   1474a:	b25a      	sxtb	r2, r3
   1474c:	1dfb      	adds	r3, r7, #7
   1474e:	781b      	ldrb	r3, [r3, #0]
   14750:	2101      	movs	r1, #1
   14752:	4099      	lsls	r1, r3
   14754:	000b      	movs	r3, r1
   14756:	b25b      	sxtb	r3, r3
   14758:	4313      	orrs	r3, r2
   1475a:	b25b      	sxtb	r3, r3
   1475c:	b2da      	uxtb	r2, r3
   1475e:	68fb      	ldr	r3, [r7, #12]
   14760:	761a      	strb	r2, [r3, #24]
}
   14762:	46c0      	nop			; (mov r8, r8)
   14764:	46bd      	mov	sp, r7
   14766:	b004      	add	sp, #16
   14768:	bd80      	pop	{r7, pc}
	...

0001476c <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   1476c:	b590      	push	{r4, r7, lr}
   1476e:	b087      	sub	sp, #28
   14770:	af00      	add	r7, sp, #0
   14772:	6078      	str	r0, [r7, #4]
   14774:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14776:	687b      	ldr	r3, [r7, #4]
   14778:	681b      	ldr	r3, [r3, #0]
   1477a:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   1477c:	683b      	ldr	r3, [r7, #0]
   1477e:	685a      	ldr	r2, [r3, #4]
   14780:	687b      	ldr	r3, [r7, #4]
   14782:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   14784:	683b      	ldr	r3, [r7, #0]
   14786:	885a      	ldrh	r2, [r3, #2]
   14788:	687b      	ldr	r3, [r7, #4]
   1478a:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   1478c:	687b      	ldr	r3, [r7, #4]
   1478e:	2224      	movs	r2, #36	; 0x24
   14790:	2101      	movs	r1, #1
   14792:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   14794:	687b      	ldr	r3, [r7, #4]
   14796:	2225      	movs	r2, #37	; 0x25
   14798:	2105      	movs	r1, #5
   1479a:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   1479c:	693b      	ldr	r3, [r7, #16]
   1479e:	681b      	ldr	r3, [r3, #0]
   147a0:	011b      	lsls	r3, r3, #4
   147a2:	0fdb      	lsrs	r3, r3, #31
   147a4:	b2db      	uxtb	r3, r3
   147a6:	001a      	movs	r2, r3
   147a8:	230f      	movs	r3, #15
   147aa:	18fb      	adds	r3, r7, r3
   147ac:	1e51      	subs	r1, r2, #1
   147ae:	418a      	sbcs	r2, r1
   147b0:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   147b2:	683b      	ldr	r3, [r7, #0]
   147b4:	7a5b      	ldrb	r3, [r3, #9]
   147b6:	2b00      	cmp	r3, #0
   147b8:	d006      	beq.n	147c8 <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   147ba:	683b      	ldr	r3, [r7, #0]
   147bc:	7a9a      	ldrb	r2, [r3, #10]
   147be:	687b      	ldr	r3, [r7, #4]
   147c0:	0011      	movs	r1, r2
   147c2:	0018      	movs	r0, r3
   147c4:	4b3b      	ldr	r3, [pc, #236]	; (148b4 <_i2c_master_read_packet+0x148>)
   147c6:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   147c8:	230f      	movs	r3, #15
   147ca:	18fb      	adds	r3, r7, r3
   147cc:	781b      	ldrb	r3, [r3, #0]
   147ce:	2b00      	cmp	r3, #0
   147d0:	d00b      	beq.n	147ea <_i2c_master_read_packet+0x7e>
   147d2:	683b      	ldr	r3, [r7, #0]
   147d4:	885b      	ldrh	r3, [r3, #2]
   147d6:	2b01      	cmp	r3, #1
   147d8:	d107      	bne.n	147ea <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   147da:	693b      	ldr	r3, [r7, #16]
   147dc:	685b      	ldr	r3, [r3, #4]
   147de:	2280      	movs	r2, #128	; 0x80
   147e0:	02d2      	lsls	r2, r2, #11
   147e2:	431a      	orrs	r2, r3
   147e4:	693b      	ldr	r3, [r7, #16]
   147e6:	605a      	str	r2, [r3, #4]
   147e8:	e005      	b.n	147f6 <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   147ea:	693b      	ldr	r3, [r7, #16]
   147ec:	685b      	ldr	r3, [r3, #4]
   147ee:	4a32      	ldr	r2, [pc, #200]	; (148b8 <_i2c_master_read_packet+0x14c>)
   147f0:	401a      	ands	r2, r3
   147f2:	693b      	ldr	r3, [r7, #16]
   147f4:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   147f6:	683b      	ldr	r3, [r7, #0]
   147f8:	7a1b      	ldrb	r3, [r3, #8]
   147fa:	2b00      	cmp	r3, #0
   147fc:	d045      	beq.n	1488a <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   147fe:	683b      	ldr	r3, [r7, #0]
   14800:	881b      	ldrh	r3, [r3, #0]
   14802:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   14804:	683b      	ldr	r3, [r7, #0]
   14806:	7a5b      	ldrb	r3, [r3, #9]
   14808:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   1480a:	4313      	orrs	r3, r2
   1480c:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1480e:	2380      	movs	r3, #128	; 0x80
   14810:	021b      	lsls	r3, r3, #8
   14812:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   14814:	693b      	ldr	r3, [r7, #16]
   14816:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   14818:	2317      	movs	r3, #23
   1481a:	18fc      	adds	r4, r7, r3
   1481c:	687b      	ldr	r3, [r7, #4]
   1481e:	0018      	movs	r0, r3
   14820:	4b26      	ldr	r3, [pc, #152]	; (148bc <_i2c_master_read_packet+0x150>)
   14822:	4798      	blx	r3
   14824:	0003      	movs	r3, r0
   14826:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   14828:	693b      	ldr	r3, [r7, #16]
   1482a:	685b      	ldr	r3, [r3, #4]
   1482c:	4a22      	ldr	r2, [pc, #136]	; (148b8 <_i2c_master_read_packet+0x14c>)
   1482e:	401a      	ands	r2, r3
   14830:	693b      	ldr	r3, [r7, #16]
   14832:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   14834:	2317      	movs	r3, #23
   14836:	18fb      	adds	r3, r7, r3
   14838:	781b      	ldrb	r3, [r3, #0]
   1483a:	2b00      	cmp	r3, #0
   1483c:	d107      	bne.n	1484e <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   1483e:	2317      	movs	r3, #23
   14840:	18fc      	adds	r4, r7, r3
   14842:	687b      	ldr	r3, [r7, #4]
   14844:	0018      	movs	r0, r3
   14846:	4b1e      	ldr	r3, [pc, #120]	; (148c0 <_i2c_master_read_packet+0x154>)
   14848:	4798      	blx	r3
   1484a:	0003      	movs	r3, r0
   1484c:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   1484e:	2317      	movs	r3, #23
   14850:	18fb      	adds	r3, r7, r3
   14852:	781b      	ldrb	r3, [r3, #0]
   14854:	2b00      	cmp	r3, #0
   14856:	d114      	bne.n	14882 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   14858:	693b      	ldr	r3, [r7, #16]
   1485a:	2203      	movs	r2, #3
   1485c:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1485e:	683b      	ldr	r3, [r7, #0]
   14860:	881b      	ldrh	r3, [r3, #0]
   14862:	0a1b      	lsrs	r3, r3, #8
   14864:	b29b      	uxth	r3, r3
   14866:	2278      	movs	r2, #120	; 0x78
   14868:	4313      	orrs	r3, r2
   1486a:	b29b      	uxth	r3, r3
   1486c:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1486e:	683b      	ldr	r3, [r7, #0]
   14870:	7a5b      	ldrb	r3, [r3, #9]
   14872:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   14874:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   14876:	2201      	movs	r2, #1
   14878:	4313      	orrs	r3, r2
   1487a:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   1487c:	693b      	ldr	r3, [r7, #16]
   1487e:	625a      	str	r2, [r3, #36]	; 0x24
   14880:	e012      	b.n	148a8 <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   14882:	2317      	movs	r3, #23
   14884:	18fb      	adds	r3, r7, r3
   14886:	781b      	ldrb	r3, [r3, #0]
   14888:	e00f      	b.n	148aa <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   1488a:	693b      	ldr	r3, [r7, #16]
   1488c:	2203      	movs	r2, #3
   1488e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   14890:	683b      	ldr	r3, [r7, #0]
   14892:	881b      	ldrh	r3, [r3, #0]
   14894:	005b      	lsls	r3, r3, #1
   14896:	2201      	movs	r2, #1
   14898:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   1489a:	683b      	ldr	r3, [r7, #0]
   1489c:	7a5b      	ldrb	r3, [r3, #9]
   1489e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   148a0:	4313      	orrs	r3, r2
   148a2:	001a      	movs	r2, r3
   148a4:	693b      	ldr	r3, [r7, #16]
   148a6:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   148a8:	2300      	movs	r3, #0
}
   148aa:	0018      	movs	r0, r3
   148ac:	46bd      	mov	sp, r7
   148ae:	b007      	add	sp, #28
   148b0:	bd90      	pop	{r4, r7, pc}
   148b2:	46c0      	nop			; (mov r8, r8)
   148b4:	0001ab59 	.word	0x0001ab59
   148b8:	fffbffff 	.word	0xfffbffff
   148bc:	0001aafb 	.word	0x0001aafb
   148c0:	0001aa9d 	.word	0x0001aa9d

000148c4 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   148c4:	b580      	push	{r7, lr}
   148c6:	b082      	sub	sp, #8
   148c8:	af00      	add	r7, sp, #0
   148ca:	6078      	str	r0, [r7, #4]
   148cc:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   148ce:	687b      	ldr	r3, [r7, #4]
   148d0:	8b9b      	ldrh	r3, [r3, #28]
   148d2:	b29b      	uxth	r3, r3
   148d4:	2b00      	cmp	r3, #0
   148d6:	d001      	beq.n	148dc <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   148d8:	2305      	movs	r3, #5
   148da:	e00c      	b.n	148f6 <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   148dc:	687b      	ldr	r3, [r7, #4]
   148de:	2201      	movs	r2, #1
   148e0:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   148e2:	687b      	ldr	r3, [r7, #4]
   148e4:	2201      	movs	r2, #1
   148e6:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   148e8:	683a      	ldr	r2, [r7, #0]
   148ea:	687b      	ldr	r3, [r7, #4]
   148ec:	0011      	movs	r1, r2
   148ee:	0018      	movs	r0, r3
   148f0:	4b03      	ldr	r3, [pc, #12]	; (14900 <i2c_master_read_packet_job+0x3c>)
   148f2:	4798      	blx	r3
   148f4:	0003      	movs	r3, r0
}
   148f6:	0018      	movs	r0, r3
   148f8:	46bd      	mov	sp, r7
   148fa:	b002      	add	sp, #8
   148fc:	bd80      	pop	{r7, pc}
   148fe:	46c0      	nop			; (mov r8, r8)
   14900:	0001476d 	.word	0x0001476d

00014904 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   14904:	b580      	push	{r7, lr}
   14906:	b084      	sub	sp, #16
   14908:	af00      	add	r7, sp, #0
   1490a:	6078      	str	r0, [r7, #4]
   1490c:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1490e:	687b      	ldr	r3, [r7, #4]
   14910:	681b      	ldr	r3, [r3, #0]
   14912:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   14914:	683b      	ldr	r3, [r7, #0]
   14916:	7a5b      	ldrb	r3, [r3, #9]
   14918:	2b00      	cmp	r3, #0
   1491a:	d006      	beq.n	1492a <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1491c:	683b      	ldr	r3, [r7, #0]
   1491e:	7a9a      	ldrb	r2, [r3, #10]
   14920:	687b      	ldr	r3, [r7, #4]
   14922:	0011      	movs	r1, r2
   14924:	0018      	movs	r0, r3
   14926:	4b1e      	ldr	r3, [pc, #120]	; (149a0 <_i2c_master_write_packet+0x9c>)
   14928:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   1492a:	68fb      	ldr	r3, [r7, #12]
   1492c:	685b      	ldr	r3, [r3, #4]
   1492e:	4a1d      	ldr	r2, [pc, #116]	; (149a4 <_i2c_master_write_packet+0xa0>)
   14930:	401a      	ands	r2, r3
   14932:	68fb      	ldr	r3, [r7, #12]
   14934:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   14936:	683b      	ldr	r3, [r7, #0]
   14938:	685a      	ldr	r2, [r3, #4]
   1493a:	687b      	ldr	r3, [r7, #4]
   1493c:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   1493e:	683b      	ldr	r3, [r7, #0]
   14940:	885a      	ldrh	r2, [r3, #2]
   14942:	687b      	ldr	r3, [r7, #4]
   14944:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   14946:	687b      	ldr	r3, [r7, #4]
   14948:	2224      	movs	r2, #36	; 0x24
   1494a:	2100      	movs	r1, #0
   1494c:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   1494e:	687b      	ldr	r3, [r7, #4]
   14950:	2225      	movs	r2, #37	; 0x25
   14952:	2105      	movs	r1, #5
   14954:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   14956:	68fb      	ldr	r3, [r7, #12]
   14958:	2203      	movs	r2, #3
   1495a:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   1495c:	683b      	ldr	r3, [r7, #0]
   1495e:	7a1b      	ldrb	r3, [r3, #8]
   14960:	2b00      	cmp	r3, #0
   14962:	d00d      	beq.n	14980 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   14964:	683b      	ldr	r3, [r7, #0]
   14966:	881b      	ldrh	r3, [r3, #0]
   14968:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   1496a:	683b      	ldr	r3, [r7, #0]
   1496c:	7a5b      	ldrb	r3, [r3, #9]
   1496e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   14970:	4313      	orrs	r3, r2
   14972:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   14974:	2380      	movs	r3, #128	; 0x80
   14976:	021b      	lsls	r3, r3, #8
   14978:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1497a:	68fb      	ldr	r3, [r7, #12]
   1497c:	625a      	str	r2, [r3, #36]	; 0x24
   1497e:	e009      	b.n	14994 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   14980:	683b      	ldr	r3, [r7, #0]
   14982:	881b      	ldrh	r3, [r3, #0]
   14984:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   14986:	683b      	ldr	r3, [r7, #0]
   14988:	7a5b      	ldrb	r3, [r3, #9]
   1498a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   1498c:	4313      	orrs	r3, r2
   1498e:	001a      	movs	r2, r3
   14990:	68fb      	ldr	r3, [r7, #12]
   14992:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   14994:	2300      	movs	r3, #0
}
   14996:	0018      	movs	r0, r3
   14998:	46bd      	mov	sp, r7
   1499a:	b004      	add	sp, #16
   1499c:	bd80      	pop	{r7, pc}
   1499e:	46c0      	nop			; (mov r8, r8)
   149a0:	0001ab59 	.word	0x0001ab59
   149a4:	fffbffff 	.word	0xfffbffff

000149a8 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   149a8:	b580      	push	{r7, lr}
   149aa:	b082      	sub	sp, #8
   149ac:	af00      	add	r7, sp, #0
   149ae:	6078      	str	r0, [r7, #4]
   149b0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   149b2:	687b      	ldr	r3, [r7, #4]
   149b4:	8b9b      	ldrh	r3, [r3, #28]
   149b6:	b29b      	uxth	r3, r3
   149b8:	2b00      	cmp	r3, #0
   149ba:	d001      	beq.n	149c0 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   149bc:	2305      	movs	r3, #5
   149be:	e00c      	b.n	149da <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   149c0:	687b      	ldr	r3, [r7, #4]
   149c2:	2201      	movs	r2, #1
   149c4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   149c6:	687b      	ldr	r3, [r7, #4]
   149c8:	2201      	movs	r2, #1
   149ca:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   149cc:	683a      	ldr	r2, [r7, #0]
   149ce:	687b      	ldr	r3, [r7, #4]
   149d0:	0011      	movs	r1, r2
   149d2:	0018      	movs	r0, r3
   149d4:	4b03      	ldr	r3, [pc, #12]	; (149e4 <i2c_master_write_packet_job+0x3c>)
   149d6:	4798      	blx	r3
   149d8:	0003      	movs	r3, r0
}
   149da:	0018      	movs	r0, r3
   149dc:	46bd      	mov	sp, r7
   149de:	b002      	add	sp, #8
   149e0:	bd80      	pop	{r7, pc}
   149e2:	46c0      	nop			; (mov r8, r8)
   149e4:	00014905 	.word	0x00014905

000149e8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   149e8:	b580      	push	{r7, lr}
   149ea:	b086      	sub	sp, #24
   149ec:	af00      	add	r7, sp, #0
   149ee:	0002      	movs	r2, r0
   149f0:	1dfb      	adds	r3, r7, #7
   149f2:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   149f4:	1dfb      	adds	r3, r7, #7
   149f6:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   149f8:	4b93      	ldr	r3, [pc, #588]	; (14c48 <_i2c_master_interrupt_handler+0x260>)
   149fa:	0092      	lsls	r2, r2, #2
   149fc:	58d3      	ldr	r3, [r2, r3]
   149fe:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14a00:	697b      	ldr	r3, [r7, #20]
   14a02:	681b      	ldr	r3, [r3, #0]
   14a04:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   14a06:	693b      	ldr	r3, [r7, #16]
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	011b      	lsls	r3, r3, #4
   14a0c:	0fdb      	lsrs	r3, r3, #31
   14a0e:	b2db      	uxtb	r3, r3
   14a10:	001a      	movs	r2, r3
   14a12:	230f      	movs	r3, #15
   14a14:	18fb      	adds	r3, r7, r3
   14a16:	1e51      	subs	r1, r2, #1
   14a18:	418a      	sbcs	r2, r1
   14a1a:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   14a1c:	230e      	movs	r3, #14
   14a1e:	18fb      	adds	r3, r7, r3
   14a20:	697a      	ldr	r2, [r7, #20]
   14a22:	7e52      	ldrb	r2, [r2, #25]
   14a24:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   14a26:	697b      	ldr	r3, [r7, #20]
   14a28:	7e1b      	ldrb	r3, [r3, #24]
   14a2a:	b2da      	uxtb	r2, r3
   14a2c:	230e      	movs	r3, #14
   14a2e:	18fb      	adds	r3, r7, r3
   14a30:	210e      	movs	r1, #14
   14a32:	1879      	adds	r1, r7, r1
   14a34:	7809      	ldrb	r1, [r1, #0]
   14a36:	400a      	ands	r2, r1
   14a38:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   14a3a:	697b      	ldr	r3, [r7, #20]
   14a3c:	8b5b      	ldrh	r3, [r3, #26]
   14a3e:	b29b      	uxth	r3, r3
   14a40:	2b00      	cmp	r3, #0
   14a42:	d109      	bne.n	14a58 <_i2c_master_interrupt_handler+0x70>
   14a44:	697b      	ldr	r3, [r7, #20]
   14a46:	8b9b      	ldrh	r3, [r3, #28]
   14a48:	b29b      	uxth	r3, r3
   14a4a:	2b00      	cmp	r3, #0
   14a4c:	d004      	beq.n	14a58 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   14a4e:	697b      	ldr	r3, [r7, #20]
   14a50:	0018      	movs	r0, r3
   14a52:	4b7e      	ldr	r3, [pc, #504]	; (14c4c <_i2c_master_interrupt_handler+0x264>)
   14a54:	4798      	blx	r3
   14a56:	e070      	b.n	14b3a <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   14a58:	697b      	ldr	r3, [r7, #20]
   14a5a:	8b5b      	ldrh	r3, [r3, #26]
   14a5c:	b29b      	uxth	r3, r3
   14a5e:	2b00      	cmp	r3, #0
   14a60:	d039      	beq.n	14ad6 <_i2c_master_interrupt_handler+0xee>
   14a62:	697b      	ldr	r3, [r7, #20]
   14a64:	8b9b      	ldrh	r3, [r3, #28]
   14a66:	b29b      	uxth	r3, r3
   14a68:	2b00      	cmp	r3, #0
   14a6a:	d134      	bne.n	14ad6 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   14a6c:	697b      	ldr	r3, [r7, #20]
   14a6e:	2225      	movs	r2, #37	; 0x25
   14a70:	5c9b      	ldrb	r3, [r3, r2]
   14a72:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   14a74:	2b05      	cmp	r3, #5
   14a76:	d12e      	bne.n	14ad6 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   14a78:	697b      	ldr	r3, [r7, #20]
   14a7a:	2224      	movs	r2, #36	; 0x24
   14a7c:	5c9b      	ldrb	r3, [r3, r2]
   14a7e:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   14a80:	2b00      	cmp	r3, #0
   14a82:	d128      	bne.n	14ad6 <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   14a84:	693b      	ldr	r3, [r7, #16]
   14a86:	2203      	movs	r2, #3
   14a88:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   14a8a:	697b      	ldr	r3, [r7, #20]
   14a8c:	2200      	movs	r2, #0
   14a8e:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   14a90:	697b      	ldr	r3, [r7, #20]
   14a92:	2225      	movs	r2, #37	; 0x25
   14a94:	2100      	movs	r1, #0
   14a96:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   14a98:	697b      	ldr	r3, [r7, #20]
   14a9a:	7a9b      	ldrb	r3, [r3, #10]
   14a9c:	2b00      	cmp	r3, #0
   14a9e:	d00b      	beq.n	14ab8 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   14aa0:	697b      	ldr	r3, [r7, #20]
   14aa2:	0018      	movs	r0, r3
   14aa4:	4b6a      	ldr	r3, [pc, #424]	; (14c50 <_i2c_master_interrupt_handler+0x268>)
   14aa6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   14aa8:	693b      	ldr	r3, [r7, #16]
   14aaa:	685b      	ldr	r3, [r3, #4]
   14aac:	22c0      	movs	r2, #192	; 0xc0
   14aae:	0292      	lsls	r2, r2, #10
   14ab0:	431a      	orrs	r2, r3
   14ab2:	693b      	ldr	r3, [r7, #16]
   14ab4:	605a      	str	r2, [r3, #4]
   14ab6:	e002      	b.n	14abe <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   14ab8:	693b      	ldr	r3, [r7, #16]
   14aba:	2201      	movs	r2, #1
   14abc:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   14abe:	230e      	movs	r3, #14
   14ac0:	18fb      	adds	r3, r7, r3
   14ac2:	781b      	ldrb	r3, [r3, #0]
   14ac4:	2201      	movs	r2, #1
   14ac6:	4013      	ands	r3, r2
   14ac8:	d037      	beq.n	14b3a <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   14aca:	697b      	ldr	r3, [r7, #20]
   14acc:	68db      	ldr	r3, [r3, #12]
   14ace:	697a      	ldr	r2, [r7, #20]
   14ad0:	0010      	movs	r0, r2
   14ad2:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   14ad4:	e031      	b.n	14b3a <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   14ad6:	697b      	ldr	r3, [r7, #20]
   14ad8:	8b5b      	ldrh	r3, [r3, #26]
   14ada:	b29b      	uxth	r3, r3
   14adc:	2b00      	cmp	r3, #0
   14ade:	d02c      	beq.n	14b3a <_i2c_master_interrupt_handler+0x152>
   14ae0:	697b      	ldr	r3, [r7, #20]
   14ae2:	8b9b      	ldrh	r3, [r3, #28]
   14ae4:	b29b      	uxth	r3, r3
   14ae6:	2b00      	cmp	r3, #0
   14ae8:	d027      	beq.n	14b3a <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   14aea:	693b      	ldr	r3, [r7, #16]
   14aec:	8b5b      	ldrh	r3, [r3, #26]
   14aee:	b29b      	uxth	r3, r3
   14af0:	001a      	movs	r2, r3
   14af2:	2320      	movs	r3, #32
   14af4:	4013      	ands	r3, r2
   14af6:	d111      	bne.n	14b1c <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   14af8:	230f      	movs	r3, #15
   14afa:	18fb      	adds	r3, r7, r3
   14afc:	781b      	ldrb	r3, [r3, #0]
   14afe:	2201      	movs	r2, #1
   14b00:	4053      	eors	r3, r2
   14b02:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   14b04:	2b00      	cmp	r3, #0
   14b06:	d104      	bne.n	14b12 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   14b08:	697b      	ldr	r3, [r7, #20]
   14b0a:	8b9b      	ldrh	r3, [r3, #28]
   14b0c:	b29b      	uxth	r3, r3
   14b0e:	2b01      	cmp	r3, #1
   14b10:	d004      	beq.n	14b1c <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   14b12:	697b      	ldr	r3, [r7, #20]
   14b14:	2225      	movs	r2, #37	; 0x25
   14b16:	2141      	movs	r1, #65	; 0x41
   14b18:	5499      	strb	r1, [r3, r2]
   14b1a:	e00e      	b.n	14b3a <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   14b1c:	697b      	ldr	r3, [r7, #20]
   14b1e:	2224      	movs	r2, #36	; 0x24
   14b20:	5c9b      	ldrb	r3, [r3, r2]
   14b22:	b2db      	uxtb	r3, r3
   14b24:	2b00      	cmp	r3, #0
   14b26:	d104      	bne.n	14b32 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   14b28:	697b      	ldr	r3, [r7, #20]
   14b2a:	0018      	movs	r0, r3
   14b2c:	4b49      	ldr	r3, [pc, #292]	; (14c54 <_i2c_master_interrupt_handler+0x26c>)
   14b2e:	4798      	blx	r3
   14b30:	e003      	b.n	14b3a <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   14b32:	697b      	ldr	r3, [r7, #20]
   14b34:	0018      	movs	r0, r3
   14b36:	4b48      	ldr	r3, [pc, #288]	; (14c58 <_i2c_master_interrupt_handler+0x270>)
   14b38:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   14b3a:	697b      	ldr	r3, [r7, #20]
   14b3c:	8b5b      	ldrh	r3, [r3, #26]
   14b3e:	b29b      	uxth	r3, r3
   14b40:	2b00      	cmp	r3, #0
   14b42:	d047      	beq.n	14bd4 <_i2c_master_interrupt_handler+0x1ec>
   14b44:	697b      	ldr	r3, [r7, #20]
   14b46:	8b9b      	ldrh	r3, [r3, #28]
   14b48:	b29b      	uxth	r3, r3
   14b4a:	2b00      	cmp	r3, #0
   14b4c:	d142      	bne.n	14bd4 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   14b4e:	697b      	ldr	r3, [r7, #20]
   14b50:	2225      	movs	r2, #37	; 0x25
   14b52:	5c9b      	ldrb	r3, [r3, r2]
   14b54:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   14b56:	2b05      	cmp	r3, #5
   14b58:	d13c      	bne.n	14bd4 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   14b5a:	697b      	ldr	r3, [r7, #20]
   14b5c:	2224      	movs	r2, #36	; 0x24
   14b5e:	5c9b      	ldrb	r3, [r3, r2]
   14b60:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   14b62:	2b01      	cmp	r3, #1
   14b64:	d136      	bne.n	14bd4 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   14b66:	693b      	ldr	r3, [r7, #16]
   14b68:	7e1b      	ldrb	r3, [r3, #24]
   14b6a:	b2db      	uxtb	r3, r3
   14b6c:	001a      	movs	r2, r3
   14b6e:	2302      	movs	r3, #2
   14b70:	4013      	ands	r3, r2
   14b72:	d002      	beq.n	14b7a <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   14b74:	693b      	ldr	r3, [r7, #16]
   14b76:	2202      	movs	r2, #2
   14b78:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   14b7a:	693b      	ldr	r3, [r7, #16]
   14b7c:	2203      	movs	r2, #3
   14b7e:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   14b80:	697b      	ldr	r3, [r7, #20]
   14b82:	2200      	movs	r2, #0
   14b84:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   14b86:	697b      	ldr	r3, [r7, #20]
   14b88:	2225      	movs	r2, #37	; 0x25
   14b8a:	2100      	movs	r1, #0
   14b8c:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   14b8e:	230e      	movs	r3, #14
   14b90:	18fb      	adds	r3, r7, r3
   14b92:	781b      	ldrb	r3, [r3, #0]
   14b94:	2202      	movs	r2, #2
   14b96:	4013      	ands	r3, r2
   14b98:	d00b      	beq.n	14bb2 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   14b9a:	697b      	ldr	r3, [r7, #20]
   14b9c:	2224      	movs	r2, #36	; 0x24
   14b9e:	5c9b      	ldrb	r3, [r3, r2]
   14ba0:	b2db      	uxtb	r3, r3
   14ba2:	2b01      	cmp	r3, #1
   14ba4:	d105      	bne.n	14bb2 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   14ba6:	697b      	ldr	r3, [r7, #20]
   14ba8:	691b      	ldr	r3, [r3, #16]
   14baa:	697a      	ldr	r2, [r7, #20]
   14bac:	0010      	movs	r0, r2
   14bae:	4798      	blx	r3
   14bb0:	e010      	b.n	14bd4 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   14bb2:	230e      	movs	r3, #14
   14bb4:	18fb      	adds	r3, r7, r3
   14bb6:	781b      	ldrb	r3, [r3, #0]
   14bb8:	2201      	movs	r2, #1
   14bba:	4013      	ands	r3, r2
   14bbc:	d00a      	beq.n	14bd4 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   14bbe:	697b      	ldr	r3, [r7, #20]
   14bc0:	2224      	movs	r2, #36	; 0x24
   14bc2:	5c9b      	ldrb	r3, [r3, r2]
   14bc4:	b2db      	uxtb	r3, r3
   14bc6:	2b00      	cmp	r3, #0
   14bc8:	d104      	bne.n	14bd4 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   14bca:	697b      	ldr	r3, [r7, #20]
   14bcc:	68db      	ldr	r3, [r3, #12]
   14bce:	697a      	ldr	r2, [r7, #20]
   14bd0:	0010      	movs	r0, r2
   14bd2:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   14bd4:	697b      	ldr	r3, [r7, #20]
   14bd6:	2225      	movs	r2, #37	; 0x25
   14bd8:	5c9b      	ldrb	r3, [r3, r2]
   14bda:	b2db      	uxtb	r3, r3
   14bdc:	2b05      	cmp	r3, #5
   14bde:	d02e      	beq.n	14c3e <_i2c_master_interrupt_handler+0x256>
   14be0:	697b      	ldr	r3, [r7, #20]
   14be2:	2225      	movs	r2, #37	; 0x25
   14be4:	5c9b      	ldrb	r3, [r3, r2]
   14be6:	b2db      	uxtb	r3, r3
   14be8:	2b00      	cmp	r3, #0
   14bea:	d028      	beq.n	14c3e <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   14bec:	693b      	ldr	r3, [r7, #16]
   14bee:	2203      	movs	r2, #3
   14bf0:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   14bf2:	697b      	ldr	r3, [r7, #20]
   14bf4:	2200      	movs	r2, #0
   14bf6:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   14bf8:	697b      	ldr	r3, [r7, #20]
   14bfa:	2200      	movs	r2, #0
   14bfc:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   14bfe:	697b      	ldr	r3, [r7, #20]
   14c00:	2225      	movs	r2, #37	; 0x25
   14c02:	5c9b      	ldrb	r3, [r3, r2]
   14c04:	b2db      	uxtb	r3, r3
   14c06:	2b41      	cmp	r3, #65	; 0x41
   14c08:	d00e      	beq.n	14c28 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   14c0a:	697b      	ldr	r3, [r7, #20]
   14c0c:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   14c0e:	2b00      	cmp	r3, #0
   14c10:	d00a      	beq.n	14c28 <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   14c12:	697b      	ldr	r3, [r7, #20]
   14c14:	0018      	movs	r0, r3
   14c16:	4b0e      	ldr	r3, [pc, #56]	; (14c50 <_i2c_master_interrupt_handler+0x268>)
   14c18:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   14c1a:	693b      	ldr	r3, [r7, #16]
   14c1c:	685b      	ldr	r3, [r3, #4]
   14c1e:	22e0      	movs	r2, #224	; 0xe0
   14c20:	02d2      	lsls	r2, r2, #11
   14c22:	431a      	orrs	r2, r3
   14c24:	693b      	ldr	r3, [r7, #16]
   14c26:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   14c28:	230e      	movs	r3, #14
   14c2a:	18fb      	adds	r3, r7, r3
   14c2c:	781b      	ldrb	r3, [r3, #0]
   14c2e:	2204      	movs	r2, #4
   14c30:	4013      	ands	r3, r2
   14c32:	d004      	beq.n	14c3e <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   14c34:	697b      	ldr	r3, [r7, #20]
   14c36:	695b      	ldr	r3, [r3, #20]
   14c38:	697a      	ldr	r2, [r7, #20]
   14c3a:	0010      	movs	r0, r2
   14c3c:	4798      	blx	r3
		}
	}
}
   14c3e:	46c0      	nop			; (mov r8, r8)
   14c40:	46bd      	mov	sp, r7
   14c42:	b006      	add	sp, #24
   14c44:	bd80      	pop	{r7, pc}
   14c46:	46c0      	nop			; (mov r8, r8)
   14c48:	20005c1c 	.word	0x20005c1c
   14c4c:	00014669 	.word	0x00014669
   14c50:	000144d9 	.word	0x000144d9
   14c54:	000145ed 	.word	0x000145ed
   14c58:	000144fd 	.word	0x000144fd

00014c5c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   14c5c:	b580      	push	{r7, lr}
   14c5e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   14c60:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   14c64:	4b02      	ldr	r3, [pc, #8]	; (14c70 <NVIC_SystemReset+0x14>)
   14c66:	4a03      	ldr	r2, [pc, #12]	; (14c74 <NVIC_SystemReset+0x18>)
   14c68:	60da      	str	r2, [r3, #12]
   14c6a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   14c6e:	e7fe      	b.n	14c6e <NVIC_SystemReset+0x12>
   14c70:	e000ed00 	.word	0xe000ed00
   14c74:	05fa0004 	.word	0x05fa0004

00014c78 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   14c78:	b580      	push	{r7, lr}
   14c7a:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   14c7c:	4b02      	ldr	r3, [pc, #8]	; (14c88 <system_reset+0x10>)
   14c7e:	4798      	blx	r3
}
   14c80:	46c0      	nop			; (mov r8, r8)
   14c82:	46bd      	mov	sp, r7
   14c84:	bd80      	pop	{r7, pc}
   14c86:	46c0      	nop			; (mov r8, r8)
   14c88:	00014c5d 	.word	0x00014c5d

00014c8c <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   14c8c:	b580      	push	{r7, lr}
   14c8e:	b086      	sub	sp, #24
   14c90:	af00      	add	r7, sp, #0
   14c92:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   14c94:	4b9a      	ldr	r3, [pc, #616]	; (14f00 <vCommandConsoleTask+0x274>)
   14c96:	0018      	movs	r0, r3
   14c98:	4b9a      	ldr	r3, [pc, #616]	; (14f04 <vCommandConsoleTask+0x278>)
   14c9a:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
	FreeRTOS_CLIRegisterCommand(&xImuAccCommand);
   14c9c:	4b9a      	ldr	r3, [pc, #616]	; (14f08 <vCommandConsoleTask+0x27c>)
   14c9e:	0018      	movs	r0, r3
   14ca0:	4b98      	ldr	r3, [pc, #608]	; (14f04 <vCommandConsoleTask+0x278>)
   14ca2:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xImuListmpCommand);
   14ca4:	4b99      	ldr	r3, [pc, #612]	; (14f0c <vCommandConsoleTask+0x280>)
   14ca6:	0018      	movs	r0, r3
   14ca8:	4b96      	ldr	r3, [pc, #600]	; (14f04 <vCommandConsoleTask+0x278>)
   14caa:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   14cac:	4b98      	ldr	r3, [pc, #608]	; (14f10 <vCommandConsoleTask+0x284>)
   14cae:	0018      	movs	r0, r3
   14cb0:	4b94      	ldr	r3, [pc, #592]	; (14f04 <vCommandConsoleTask+0x278>)
   14cb2:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   14cb4:	4b97      	ldr	r3, [pc, #604]	; (14f14 <vCommandConsoleTask+0x288>)
   14cb6:	0018      	movs	r0, r3
   14cb8:	4b92      	ldr	r3, [pc, #584]	; (14f04 <vCommandConsoleTask+0x278>)
   14cba:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    //FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   // FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   14cbc:	4b96      	ldr	r3, [pc, #600]	; (14f18 <vCommandConsoleTask+0x28c>)
   14cbe:	0018      	movs	r0, r3
   14cc0:	4b90      	ldr	r3, [pc, #576]	; (14f04 <vCommandConsoleTask+0x278>)
   14cc2:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xMaxCommand);
   14cc4:	4b95      	ldr	r3, [pc, #596]	; (14f1c <vCommandConsoleTask+0x290>)
   14cc6:	0018      	movs	r0, r3
   14cc8:	4b8e      	ldr	r3, [pc, #568]	; (14f04 <vCommandConsoleTask+0x278>)
   14cca:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   14ccc:	2317      	movs	r3, #23
   14cce:	18fb      	adds	r3, r7, r3
   14cd0:	2200      	movs	r2, #0
   14cd2:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   14cd4:	4b92      	ldr	r3, [pc, #584]	; (14f20 <vCommandConsoleTask+0x294>)
   14cd6:	0018      	movs	r0, r3
   14cd8:	4b92      	ldr	r3, [pc, #584]	; (14f24 <vCommandConsoleTask+0x298>)
   14cda:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   14cdc:	2203      	movs	r2, #3
   14cde:	2100      	movs	r1, #0
   14ce0:	2001      	movs	r0, #1
   14ce2:	4b91      	ldr	r3, [pc, #580]	; (14f28 <vCommandConsoleTask+0x29c>)
   14ce4:	4798      	blx	r3
   14ce6:	0002      	movs	r2, r0
   14ce8:	4b90      	ldr	r3, [pc, #576]	; (14f2c <vCommandConsoleTask+0x2a0>)
   14cea:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   14cec:	4b8f      	ldr	r3, [pc, #572]	; (14f2c <vCommandConsoleTask+0x2a0>)
   14cee:	681b      	ldr	r3, [r3, #0]
   14cf0:	2b00      	cmp	r3, #0
   14cf2:	d107      	bne.n	14d04 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   14cf4:	4b8e      	ldr	r3, [pc, #568]	; (14f30 <vCommandConsoleTask+0x2a4>)
   14cf6:	0019      	movs	r1, r3
   14cf8:	2003      	movs	r0, #3
   14cfa:	4b8e      	ldr	r3, [pc, #568]	; (14f34 <vCommandConsoleTask+0x2a8>)
   14cfc:	4798      	blx	r3
        vTaskSuspend(NULL);
   14cfe:	2000      	movs	r0, #0
   14d00:	4b8d      	ldr	r3, [pc, #564]	; (14f38 <vCommandConsoleTask+0x2ac>)
   14d02:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   14d04:	230c      	movs	r3, #12
   14d06:	18fb      	adds	r3, r7, r3
   14d08:	0018      	movs	r0, r3
   14d0a:	4b8c      	ldr	r3, [pc, #560]	; (14f3c <vCommandConsoleTask+0x2b0>)
   14d0c:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   14d0e:	230c      	movs	r3, #12
   14d10:	18fb      	adds	r3, r7, r3
   14d12:	781b      	ldrb	r3, [r3, #0]
   14d14:	2b0a      	cmp	r3, #10
   14d16:	d004      	beq.n	14d22 <vCommandConsoleTask+0x96>
   14d18:	230c      	movs	r3, #12
   14d1a:	18fb      	adds	r3, r7, r3
   14d1c:	781b      	ldrb	r3, [r3, #0]
   14d1e:	2b0d      	cmp	r3, #13
   14d20:	d137      	bne.n	14d92 <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14d22:	4b87      	ldr	r3, [pc, #540]	; (14f40 <vCommandConsoleTask+0x2b4>)
   14d24:	0018      	movs	r0, r3
   14d26:	4b7f      	ldr	r3, [pc, #508]	; (14f24 <vCommandConsoleTask+0x298>)
   14d28:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   14d2a:	4b86      	ldr	r3, [pc, #536]	; (14f44 <vCommandConsoleTask+0x2b8>)
   14d2c:	2200      	movs	r2, #0
   14d2e:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14d30:	4b85      	ldr	r3, [pc, #532]	; (14f48 <vCommandConsoleTask+0x2bc>)
   14d32:	2200      	movs	r2, #0
   14d34:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   14d36:	4985      	ldr	r1, [pc, #532]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14d38:	4b85      	ldr	r3, [pc, #532]	; (14f50 <vCommandConsoleTask+0x2c4>)
   14d3a:	2231      	movs	r2, #49	; 0x31
   14d3c:	0018      	movs	r0, r3
   14d3e:	4b85      	ldr	r3, [pc, #532]	; (14f54 <vCommandConsoleTask+0x2c8>)
   14d40:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14d42:	4b83      	ldr	r3, [pc, #524]	; (14f50 <vCommandConsoleTask+0x2c4>)
   14d44:	2231      	movs	r2, #49	; 0x31
   14d46:	2100      	movs	r1, #0
   14d48:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   14d4a:	4983      	ldr	r1, [pc, #524]	; (14f58 <vCommandConsoleTask+0x2cc>)
   14d4c:	4b7f      	ldr	r3, [pc, #508]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14d4e:	2264      	movs	r2, #100	; 0x64
   14d50:	0018      	movs	r0, r3
   14d52:	4b82      	ldr	r3, [pc, #520]	; (14f5c <vCommandConsoleTask+0x2d0>)
   14d54:	4798      	blx	r3
   14d56:	0003      	movs	r3, r0
   14d58:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   14d5a:	4b7f      	ldr	r3, [pc, #508]	; (14f58 <vCommandConsoleTask+0x2cc>)
   14d5c:	2263      	movs	r2, #99	; 0x63
   14d5e:	2100      	movs	r1, #0
   14d60:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14d62:	4b7d      	ldr	r3, [pc, #500]	; (14f58 <vCommandConsoleTask+0x2cc>)
   14d64:	0018      	movs	r0, r3
   14d66:	4b6f      	ldr	r3, [pc, #444]	; (14f24 <vCommandConsoleTask+0x298>)
   14d68:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   14d6a:	693b      	ldr	r3, [r7, #16]
   14d6c:	2b00      	cmp	r3, #0
   14d6e:	d1ec      	bne.n	14d4a <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14d70:	2317      	movs	r3, #23
   14d72:	18fb      	adds	r3, r7, r3
   14d74:	2200      	movs	r2, #0
   14d76:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14d78:	4b74      	ldr	r3, [pc, #464]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14d7a:	2232      	movs	r2, #50	; 0x32
   14d7c:	2100      	movs	r1, #0
   14d7e:	0018      	movs	r0, r3
   14d80:	4b77      	ldr	r3, [pc, #476]	; (14f60 <vCommandConsoleTask+0x2d4>)
   14d82:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14d84:	4b74      	ldr	r3, [pc, #464]	; (14f58 <vCommandConsoleTask+0x2cc>)
   14d86:	2264      	movs	r2, #100	; 0x64
   14d88:	2100      	movs	r1, #0
   14d8a:	0018      	movs	r0, r3
   14d8c:	4b74      	ldr	r3, [pc, #464]	; (14f60 <vCommandConsoleTask+0x2d4>)
   14d8e:	4798      	blx	r3
   14d90:	e0b5      	b.n	14efe <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   14d92:	4b6c      	ldr	r3, [pc, #432]	; (14f44 <vCommandConsoleTask+0x2b8>)
   14d94:	781b      	ldrb	r3, [r3, #0]
   14d96:	2b00      	cmp	r3, #0
   14d98:	d059      	beq.n	14e4e <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   14d9a:	4b6b      	ldr	r3, [pc, #428]	; (14f48 <vCommandConsoleTask+0x2bc>)
   14d9c:	781b      	ldrb	r3, [r3, #0]
   14d9e:	2b03      	cmp	r3, #3
   14da0:	d80c      	bhi.n	14dbc <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   14da2:	4b69      	ldr	r3, [pc, #420]	; (14f48 <vCommandConsoleTask+0x2bc>)
   14da4:	781b      	ldrb	r3, [r3, #0]
   14da6:	1c5a      	adds	r2, r3, #1
   14da8:	b2d1      	uxtb	r1, r2
   14daa:	4a67      	ldr	r2, [pc, #412]	; (14f48 <vCommandConsoleTask+0x2bc>)
   14dac:	7011      	strb	r1, [r2, #0]
   14dae:	001a      	movs	r2, r3
   14db0:	230c      	movs	r3, #12
   14db2:	18fb      	adds	r3, r7, r3
   14db4:	7819      	ldrb	r1, [r3, #0]
   14db6:	4b6b      	ldr	r3, [pc, #428]	; (14f64 <vCommandConsoleTask+0x2d8>)
   14db8:	5499      	strb	r1, [r3, r2]
   14dba:	e005      	b.n	14dc8 <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   14dbc:	4b61      	ldr	r3, [pc, #388]	; (14f44 <vCommandConsoleTask+0x2b8>)
   14dbe:	2200      	movs	r2, #0
   14dc0:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14dc2:	4b61      	ldr	r3, [pc, #388]	; (14f48 <vCommandConsoleTask+0x2bc>)
   14dc4:	2200      	movs	r2, #0
   14dc6:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   14dc8:	4b5f      	ldr	r3, [pc, #380]	; (14f48 <vCommandConsoleTask+0x2bc>)
   14dca:	781b      	ldrb	r3, [r3, #0]
   14dcc:	2b01      	cmp	r3, #1
   14dce:	d999      	bls.n	14d04 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   14dd0:	4a65      	ldr	r2, [pc, #404]	; (14f68 <vCommandConsoleTask+0x2dc>)
   14dd2:	4b64      	ldr	r3, [pc, #400]	; (14f64 <vCommandConsoleTask+0x2d8>)
   14dd4:	0011      	movs	r1, r2
   14dd6:	0018      	movs	r0, r3
   14dd8:	4b64      	ldr	r3, [pc, #400]	; (14f6c <vCommandConsoleTask+0x2e0>)
   14dda:	4798      	blx	r3
   14ddc:	1e03      	subs	r3, r0, #0
   14dde:	d02f      	beq.n	14e40 <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   14de0:	4963      	ldr	r1, [pc, #396]	; (14f70 <vCommandConsoleTask+0x2e4>)
   14de2:	4b5a      	ldr	r3, [pc, #360]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14de4:	221b      	movs	r2, #27
   14de6:	0018      	movs	r0, r3
   14de8:	4b62      	ldr	r3, [pc, #392]	; (14f74 <vCommandConsoleTask+0x2e8>)
   14dea:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   14dec:	4b57      	ldr	r3, [pc, #348]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14dee:	0018      	movs	r0, r3
   14df0:	4b4c      	ldr	r3, [pc, #304]	; (14f24 <vCommandConsoleTask+0x298>)
   14df2:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   14df4:	2317      	movs	r3, #23
   14df6:	18fb      	adds	r3, r7, r3
   14df8:	2200      	movs	r2, #0
   14dfa:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   14dfc:	4b53      	ldr	r3, [pc, #332]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14dfe:	2232      	movs	r2, #50	; 0x32
   14e00:	2100      	movs	r1, #0
   14e02:	0018      	movs	r0, r3
   14e04:	4b56      	ldr	r3, [pc, #344]	; (14f60 <vCommandConsoleTask+0x2d4>)
   14e06:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   14e08:	4951      	ldr	r1, [pc, #324]	; (14f50 <vCommandConsoleTask+0x2c4>)
   14e0a:	4b50      	ldr	r3, [pc, #320]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14e0c:	2231      	movs	r2, #49	; 0x31
   14e0e:	0018      	movs	r0, r3
   14e10:	4b50      	ldr	r3, [pc, #320]	; (14f54 <vCommandConsoleTask+0x2c8>)
   14e12:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   14e14:	4b4d      	ldr	r3, [pc, #308]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14e16:	0018      	movs	r0, r3
   14e18:	4b57      	ldr	r3, [pc, #348]	; (14f78 <vCommandConsoleTask+0x2ec>)
   14e1a:	4798      	blx	r3
   14e1c:	0003      	movs	r3, r0
   14e1e:	2b30      	cmp	r3, #48	; 0x30
   14e20:	d806      	bhi.n	14e30 <vCommandConsoleTask+0x1a4>
   14e22:	4b4b      	ldr	r3, [pc, #300]	; (14f50 <vCommandConsoleTask+0x2c4>)
   14e24:	0018      	movs	r0, r3
   14e26:	4b54      	ldr	r3, [pc, #336]	; (14f78 <vCommandConsoleTask+0x2ec>)
   14e28:	4798      	blx	r3
   14e2a:	0003      	movs	r3, r0
   14e2c:	b2da      	uxtb	r2, r3
   14e2e:	e000      	b.n	14e32 <vCommandConsoleTask+0x1a6>
   14e30:	2231      	movs	r2, #49	; 0x31
   14e32:	2317      	movs	r3, #23
   14e34:	18fb      	adds	r3, r7, r3
   14e36:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   14e38:	4b44      	ldr	r3, [pc, #272]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14e3a:	0018      	movs	r0, r3
   14e3c:	4b39      	ldr	r3, [pc, #228]	; (14f24 <vCommandConsoleTask+0x298>)
   14e3e:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14e40:	4b40      	ldr	r3, [pc, #256]	; (14f44 <vCommandConsoleTask+0x2b8>)
   14e42:	2200      	movs	r2, #0
   14e44:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   14e46:	4b40      	ldr	r3, [pc, #256]	; (14f48 <vCommandConsoleTask+0x2bc>)
   14e48:	2200      	movs	r2, #0
   14e4a:	701a      	strb	r2, [r3, #0]
   14e4c:	e75a      	b.n	14d04 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14e4e:	230c      	movs	r3, #12
   14e50:	18fb      	adds	r3, r7, r3
   14e52:	781b      	ldrb	r3, [r3, #0]
   14e54:	2b0d      	cmp	r3, #13
   14e56:	d100      	bne.n	14e5a <vCommandConsoleTask+0x1ce>
   14e58:	e754      	b.n	14d04 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14e5a:	230c      	movs	r3, #12
   14e5c:	18fb      	adds	r3, r7, r3
   14e5e:	781b      	ldrb	r3, [r3, #0]
   14e60:	2b08      	cmp	r3, #8
   14e62:	d004      	beq.n	14e6e <vCommandConsoleTask+0x1e2>
   14e64:	230c      	movs	r3, #12
   14e66:	18fb      	adds	r3, r7, r3
   14e68:	781b      	ldrb	r3, [r3, #0]
   14e6a:	2b7f      	cmp	r3, #127	; 0x7f
   14e6c:	d11c      	bne.n	14ea8 <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14e6e:	2308      	movs	r3, #8
   14e70:	18fb      	adds	r3, r7, r3
   14e72:	4a42      	ldr	r2, [pc, #264]	; (14f7c <vCommandConsoleTask+0x2f0>)
   14e74:	6812      	ldr	r2, [r2, #0]
   14e76:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   14e78:	2308      	movs	r3, #8
   14e7a:	18fb      	adds	r3, r7, r3
   14e7c:	0018      	movs	r0, r3
   14e7e:	4b29      	ldr	r3, [pc, #164]	; (14f24 <vCommandConsoleTask+0x298>)
   14e80:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14e82:	2317      	movs	r3, #23
   14e84:	18fb      	adds	r3, r7, r3
   14e86:	781b      	ldrb	r3, [r3, #0]
   14e88:	2b00      	cmp	r3, #0
   14e8a:	d037      	beq.n	14efc <vCommandConsoleTask+0x270>
                    cInputIndex--;
   14e8c:	2317      	movs	r3, #23
   14e8e:	18fb      	adds	r3, r7, r3
   14e90:	781a      	ldrb	r2, [r3, #0]
   14e92:	2317      	movs	r3, #23
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	3a01      	subs	r2, #1
   14e98:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   14e9a:	2317      	movs	r3, #23
   14e9c:	18fb      	adds	r3, r7, r3
   14e9e:	781b      	ldrb	r3, [r3, #0]
   14ea0:	4a2a      	ldr	r2, [pc, #168]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14ea2:	2100      	movs	r1, #0
   14ea4:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14ea6:	e029      	b.n	14efc <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   14ea8:	230c      	movs	r3, #12
   14eaa:	18fb      	adds	r3, r7, r3
   14eac:	781b      	ldrb	r3, [r3, #0]
   14eae:	2b1b      	cmp	r3, #27
   14eb0:	d106      	bne.n	14ec0 <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   14eb2:	4b24      	ldr	r3, [pc, #144]	; (14f44 <vCommandConsoleTask+0x2b8>)
   14eb4:	2201      	movs	r2, #1
   14eb6:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   14eb8:	4b23      	ldr	r3, [pc, #140]	; (14f48 <vCommandConsoleTask+0x2bc>)
   14eba:	2200      	movs	r2, #0
   14ebc:	701a      	strb	r2, [r3, #0]
   14ebe:	e721      	b.n	14d04 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   14ec0:	2317      	movs	r3, #23
   14ec2:	18fb      	adds	r3, r7, r3
   14ec4:	781b      	ldrb	r3, [r3, #0]
   14ec6:	2b31      	cmp	r3, #49	; 0x31
   14ec8:	d80e      	bhi.n	14ee8 <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   14eca:	2317      	movs	r3, #23
   14ecc:	18fb      	adds	r3, r7, r3
   14ece:	781b      	ldrb	r3, [r3, #0]
   14ed0:	220c      	movs	r2, #12
   14ed2:	18ba      	adds	r2, r7, r2
   14ed4:	7811      	ldrb	r1, [r2, #0]
   14ed6:	4a1d      	ldr	r2, [pc, #116]	; (14f4c <vCommandConsoleTask+0x2c0>)
   14ed8:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   14eda:	2317      	movs	r3, #23
   14edc:	18fb      	adds	r3, r7, r3
   14ede:	781a      	ldrb	r2, [r3, #0]
   14ee0:	2317      	movs	r3, #23
   14ee2:	18fb      	adds	r3, r7, r3
   14ee4:	3201      	adds	r2, #1
   14ee6:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   14ee8:	230c      	movs	r3, #12
   14eea:	18fb      	adds	r3, r7, r3
   14eec:	2200      	movs	r2, #0
   14eee:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   14ef0:	230c      	movs	r3, #12
   14ef2:	18fb      	adds	r3, r7, r3
   14ef4:	0018      	movs	r0, r3
   14ef6:	4b0b      	ldr	r3, [pc, #44]	; (14f24 <vCommandConsoleTask+0x298>)
   14ef8:	4798      	blx	r3
   14efa:	e703      	b.n	14d04 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   14efc:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   14efe:	e701      	b.n	14d04 <vCommandConsoleTask+0x78>
   14f00:	00039ec8 	.word	0x00039ec8
   14f04:	0001aca1 	.word	0x0001aca1
   14f08:	00039e98 	.word	0x00039e98
   14f0c:	00039eb8 	.word	0x00039eb8
   14f10:	00039ef8 	.word	0x00039ef8
   14f14:	00039ed8 	.word	0x00039ed8
   14f18:	00039ee8 	.word	0x00039ee8
   14f1c:	00039ea8 	.word	0x00039ea8
   14f20:	00039bf8 	.word	0x00039bf8
   14f24:	00020bc5 	.word	0x00020bc5
   14f28:	0001d265 	.word	0x0001d265
   14f2c:	20004750 	.word	0x20004750
   14f30:	00039d9c 	.word	0x00039d9c
   14f34:	00020cb1 	.word	0x00020cb1
   14f38:	0001f051 	.word	0x0001f051
   14f3c:	00014f81 	.word	0x00014f81
   14f40:	00039dbc 	.word	0x00039dbc
   14f44:	20000424 	.word	0x20000424
   14f48:	20000425 	.word	0x20000425
   14f4c:	2000045c 	.word	0x2000045c
   14f50:	20000428 	.word	0x20000428
   14f54:	000388ef 	.word	0x000388ef
   14f58:	20000490 	.word	0x20000490
   14f5c:	0001ad11 	.word	0x0001ad11
   14f60:	00038507 	.word	0x00038507
   14f64:	200004f4 	.word	0x200004f4
   14f68:	00039dc0 	.word	0x00039dc0
   14f6c:	00038809 	.word	0x00038809
   14f70:	00039dc4 	.word	0x00039dc4
   14f74:	000387c5 	.word	0x000387c5
   14f78:	000388bf 	.word	0x000388bf
   14f7c:	00039dcc 	.word	0x00039dcc

00014f80 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   14f80:	b580      	push	{r7, lr}
   14f82:	b084      	sub	sp, #16
   14f84:	af00      	add	r7, sp, #0
   14f86:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   14f88:	687b      	ldr	r3, [r7, #4]
   14f8a:	0018      	movs	r0, r3
   14f8c:	4b0c      	ldr	r3, [pc, #48]	; (14fc0 <FreeRTOS_read+0x40>)
   14f8e:	4798      	blx	r3
   14f90:	0003      	movs	r3, r0
   14f92:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   14f94:	e00d      	b.n	14fb2 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   14f96:	4b0b      	ldr	r3, [pc, #44]	; (14fc4 <FreeRTOS_read+0x44>)
   14f98:	681a      	ldr	r2, [r3, #0]
   14f9a:	2301      	movs	r3, #1
   14f9c:	425b      	negs	r3, r3
   14f9e:	0019      	movs	r1, r3
   14fa0:	0010      	movs	r0, r2
   14fa2:	4b09      	ldr	r3, [pc, #36]	; (14fc8 <FreeRTOS_read+0x48>)
   14fa4:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   14fa6:	687b      	ldr	r3, [r7, #4]
   14fa8:	0018      	movs	r0, r3
   14faa:	4b05      	ldr	r3, [pc, #20]	; (14fc0 <FreeRTOS_read+0x40>)
   14fac:	4798      	blx	r3
   14fae:	0003      	movs	r3, r0
   14fb0:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   14fb2:	68fb      	ldr	r3, [r7, #12]
   14fb4:	3301      	adds	r3, #1
   14fb6:	d0ee      	beq.n	14f96 <FreeRTOS_read+0x16>
    }
}
   14fb8:	46c0      	nop			; (mov r8, r8)
   14fba:	46bd      	mov	sp, r7
   14fbc:	b004      	add	sp, #16
   14fbe:	bd80      	pop	{r7, pc}
   14fc0:	00020c61 	.word	0x00020c61
   14fc4:	20004750 	.word	0x20004750
   14fc8:	0001e21d 	.word	0x0001e21d

00014fcc <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   14fcc:	b580      	push	{r7, lr}
   14fce:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   14fd0:	4b0a      	ldr	r3, [pc, #40]	; (14ffc <CliCharReadySemaphoreGiveFromISR+0x30>)
   14fd2:	2200      	movs	r2, #0
   14fd4:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   14fd6:	4b0a      	ldr	r3, [pc, #40]	; (15000 <CliCharReadySemaphoreGiveFromISR+0x34>)
   14fd8:	681b      	ldr	r3, [r3, #0]
   14fda:	4a08      	ldr	r2, [pc, #32]	; (14ffc <CliCharReadySemaphoreGiveFromISR+0x30>)
   14fdc:	0011      	movs	r1, r2
   14fde:	0018      	movs	r0, r3
   14fe0:	4b08      	ldr	r3, [pc, #32]	; (15004 <CliCharReadySemaphoreGiveFromISR+0x38>)
   14fe2:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14fe4:	4b05      	ldr	r3, [pc, #20]	; (14ffc <CliCharReadySemaphoreGiveFromISR+0x30>)
   14fe6:	681b      	ldr	r3, [r3, #0]
   14fe8:	2b00      	cmp	r3, #0
   14fea:	d003      	beq.n	14ff4 <CliCharReadySemaphoreGiveFromISR+0x28>
   14fec:	4b06      	ldr	r3, [pc, #24]	; (15008 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   14fee:	2280      	movs	r2, #128	; 0x80
   14ff0:	0552      	lsls	r2, r2, #21
   14ff2:	601a      	str	r2, [r3, #0]
}
   14ff4:	46c0      	nop			; (mov r8, r8)
   14ff6:	46bd      	mov	sp, r7
   14ff8:	bd80      	pop	{r7, pc}
   14ffa:	46c0      	nop			; (mov r8, r8)
   14ffc:	200004f8 	.word	0x200004f8
   15000:	20004750 	.word	0x20004750
   15004:	0001db95 	.word	0x0001db95
   15008:	e000ed04 	.word	0xe000ed04

0001500c <CLI_GetAccData>:
    //return pdFALSE;
//}


BaseType_t CLI_GetAccData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1500c:	b5b0      	push	{r4, r5, r7, lr}
   1500e:	b08c      	sub	sp, #48	; 0x30
   15010:	af02      	add	r7, sp, #8
   15012:	60f8      	str	r0, [r7, #12]
   15014:	60b9      	str	r1, [r7, #8]
   15016:	607a      	str	r2, [r7, #4]
	static int16_t data_raw_acceleration[3];
	static float acceleration_mg[3];
	uint8_t flag = 0;
   15018:	231f      	movs	r3, #31
   1501a:	18fb      	adds	r3, r7, r3
   1501c:	2200      	movs	r2, #0
   1501e:	701a      	strb	r2, [r3, #0]
	int32_t error = 0;
   15020:	2300      	movs	r3, #0
   15022:	627b      	str	r3, [r7, #36]	; 0x24
	struct ImuDataPacket imuPacket;
	stmdev_ctx_t *dev_ctx_lis = GetAccStruct();
   15024:	4b49      	ldr	r3, [pc, #292]	; (1514c <CLI_GetAccData+0x140>)
   15026:	4798      	blx	r3
   15028:	0003      	movs	r3, r0
   1502a:	623b      	str	r3, [r7, #32]

	lis2dh12_xl_data_ready_get(dev_ctx_lis, &flag);
   1502c:	231f      	movs	r3, #31
   1502e:	18fa      	adds	r2, r7, r3
   15030:	6a3b      	ldr	r3, [r7, #32]
   15032:	0011      	movs	r1, r2
   15034:	0018      	movs	r0, r3
   15036:	4b46      	ldr	r3, [pc, #280]	; (15150 <CLI_GetAccData+0x144>)
   15038:	4798      	blx	r3

	if (flag) {
   1503a:	231f      	movs	r3, #31
   1503c:	18fb      	adds	r3, r7, r3
   1503e:	781b      	ldrb	r3, [r3, #0]
   15040:	2b00      	cmp	r3, #0
   15042:	d078      	beq.n	15136 <CLI_GetAccData+0x12a>
		/* Read accelerometer data */
		// initial raw data to 0
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   15044:	4b43      	ldr	r3, [pc, #268]	; (15154 <CLI_GetAccData+0x148>)
   15046:	2206      	movs	r2, #6
   15048:	2100      	movs	r1, #0
   1504a:	0018      	movs	r0, r3
   1504c:	4b42      	ldr	r3, [pc, #264]	; (15158 <CLI_GetAccData+0x14c>)
   1504e:	4798      	blx	r3
		error = lis2dh12_acceleration_raw_get(dev_ctx_lis, data_raw_acceleration);
   15050:	4a40      	ldr	r2, [pc, #256]	; (15154 <CLI_GetAccData+0x148>)
   15052:	6a3b      	ldr	r3, [r7, #32]
   15054:	0011      	movs	r1, r2
   15056:	0018      	movs	r0, r3
   15058:	4b40      	ldr	r3, [pc, #256]	; (1515c <CLI_GetAccData+0x150>)
   1505a:	4798      	blx	r3
   1505c:	0003      	movs	r3, r0
   1505e:	627b      	str	r3, [r7, #36]	; 0x24
		if (!error){
   15060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15062:	2b00      	cmp	r3, #0
   15064:	d160      	bne.n	15128 <CLI_GetAccData+0x11c>
			acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
   15066:	4b3b      	ldr	r3, [pc, #236]	; (15154 <CLI_GetAccData+0x148>)
   15068:	2200      	movs	r2, #0
   1506a:	5e9b      	ldrsh	r3, [r3, r2]
   1506c:	0018      	movs	r0, r3
   1506e:	4b3c      	ldr	r3, [pc, #240]	; (15160 <CLI_GetAccData+0x154>)
   15070:	4798      	blx	r3
   15072:	1c02      	adds	r2, r0, #0
   15074:	4b3b      	ldr	r3, [pc, #236]	; (15164 <CLI_GetAccData+0x158>)
   15076:	601a      	str	r2, [r3, #0]
			acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
   15078:	4b36      	ldr	r3, [pc, #216]	; (15154 <CLI_GetAccData+0x148>)
   1507a:	2202      	movs	r2, #2
   1507c:	5e9b      	ldrsh	r3, [r3, r2]
   1507e:	0018      	movs	r0, r3
   15080:	4b37      	ldr	r3, [pc, #220]	; (15160 <CLI_GetAccData+0x154>)
   15082:	4798      	blx	r3
   15084:	1c02      	adds	r2, r0, #0
   15086:	4b37      	ldr	r3, [pc, #220]	; (15164 <CLI_GetAccData+0x158>)
   15088:	605a      	str	r2, [r3, #4]
			acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
   1508a:	4b32      	ldr	r3, [pc, #200]	; (15154 <CLI_GetAccData+0x148>)
   1508c:	2204      	movs	r2, #4
   1508e:	5e9b      	ldrsh	r3, [r3, r2]
   15090:	0018      	movs	r0, r3
   15092:	4b33      	ldr	r3, [pc, #204]	; (15160 <CLI_GetAccData+0x154>)
   15094:	4798      	blx	r3
   15096:	1c02      	adds	r2, r0, #0
   15098:	4b32      	ldr	r3, [pc, #200]	; (15164 <CLI_GetAccData+0x158>)
   1509a:	609a      	str	r2, [r3, #8]
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   1509c:	4b31      	ldr	r3, [pc, #196]	; (15164 <CLI_GetAccData+0x158>)
   1509e:	681a      	ldr	r2, [r3, #0]
   150a0:	4b31      	ldr	r3, [pc, #196]	; (15168 <CLI_GetAccData+0x15c>)
   150a2:	1c10      	adds	r0, r2, #0
   150a4:	4798      	blx	r3
   150a6:	0005      	movs	r5, r0
   150a8:	4b2e      	ldr	r3, [pc, #184]	; (15164 <CLI_GetAccData+0x158>)
   150aa:	685a      	ldr	r2, [r3, #4]
   150ac:	4b2e      	ldr	r3, [pc, #184]	; (15168 <CLI_GetAccData+0x15c>)
   150ae:	1c10      	adds	r0, r2, #0
   150b0:	4798      	blx	r3
   150b2:	0004      	movs	r4, r0
   150b4:	4b2b      	ldr	r3, [pc, #172]	; (15164 <CLI_GetAccData+0x158>)
   150b6:	689a      	ldr	r2, [r3, #8]
   150b8:	4b2b      	ldr	r3, [pc, #172]	; (15168 <CLI_GetAccData+0x15c>)
   150ba:	1c10      	adds	r0, r2, #0
   150bc:	4798      	blx	r3
   150be:	0003      	movs	r3, r0
   150c0:	4a2a      	ldr	r2, [pc, #168]	; (1516c <CLI_GetAccData+0x160>)
   150c2:	68b9      	ldr	r1, [r7, #8]
   150c4:	68f8      	ldr	r0, [r7, #12]
   150c6:	9301      	str	r3, [sp, #4]
   150c8:	9400      	str	r4, [sp, #0]
   150ca:	002b      	movs	r3, r5
   150cc:	4c28      	ldr	r4, [pc, #160]	; (15170 <CLI_GetAccData+0x164>)
   150ce:	47a0      	blx	r4
			imuPacket.xmg = (int)acceleration_mg[0];
   150d0:	4b24      	ldr	r3, [pc, #144]	; (15164 <CLI_GetAccData+0x158>)
   150d2:	681a      	ldr	r2, [r3, #0]
   150d4:	4b24      	ldr	r3, [pc, #144]	; (15168 <CLI_GetAccData+0x15c>)
   150d6:	1c10      	adds	r0, r2, #0
   150d8:	4798      	blx	r3
   150da:	0003      	movs	r3, r0
   150dc:	b21a      	sxth	r2, r3
   150de:	2314      	movs	r3, #20
   150e0:	18fb      	adds	r3, r7, r3
   150e2:	801a      	strh	r2, [r3, #0]
			imuPacket.ymg = (int)acceleration_mg[1];
   150e4:	4b1f      	ldr	r3, [pc, #124]	; (15164 <CLI_GetAccData+0x158>)
   150e6:	685a      	ldr	r2, [r3, #4]
   150e8:	4b1f      	ldr	r3, [pc, #124]	; (15168 <CLI_GetAccData+0x15c>)
   150ea:	1c10      	adds	r0, r2, #0
   150ec:	4798      	blx	r3
   150ee:	0003      	movs	r3, r0
   150f0:	b21a      	sxth	r2, r3
   150f2:	2314      	movs	r3, #20
   150f4:	18fb      	adds	r3, r7, r3
   150f6:	805a      	strh	r2, [r3, #2]
			imuPacket.zmg = (int)acceleration_mg[2];
   150f8:	4b1a      	ldr	r3, [pc, #104]	; (15164 <CLI_GetAccData+0x158>)
   150fa:	689a      	ldr	r2, [r3, #8]
   150fc:	4b1a      	ldr	r3, [pc, #104]	; (15168 <CLI_GetAccData+0x15c>)
   150fe:	1c10      	adds	r0, r2, #0
   15100:	4798      	blx	r3
   15102:	0003      	movs	r3, r0
   15104:	b21a      	sxth	r2, r3
   15106:	2314      	movs	r3, #20
   15108:	18fb      	adds	r3, r7, r3
   1510a:	809a      	strh	r2, [r3, #4]
			imuPacket.alarm= false;
   1510c:	2314      	movs	r3, #20
   1510e:	18fb      	adds	r3, r7, r3
   15110:	2200      	movs	r2, #0
   15112:	719a      	strb	r2, [r3, #6]
			imuPacket.temp = -100;
   15114:	2314      	movs	r3, #20
   15116:	18fb      	adds	r3, r7, r3
   15118:	229c      	movs	r2, #156	; 0x9c
   1511a:	71da      	strb	r2, [r3, #7]
			WifiAddImuDataToQueue(&imuPacket);
   1511c:	2314      	movs	r3, #20
   1511e:	18fb      	adds	r3, r7, r3
   15120:	0018      	movs	r0, r3
   15122:	4b14      	ldr	r3, [pc, #80]	; (15174 <CLI_GetAccData+0x168>)
   15124:	4798      	blx	r3
   15126:	e00c      	b.n	15142 <CLI_GetAccData+0x136>
			
		}
		else {
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration data update failed! No data sent.");
   15128:	4a13      	ldr	r2, [pc, #76]	; (15178 <CLI_GetAccData+0x16c>)
   1512a:	68b9      	ldr	r1, [r7, #8]
   1512c:	68fb      	ldr	r3, [r7, #12]
   1512e:	0018      	movs	r0, r3
   15130:	4b0f      	ldr	r3, [pc, #60]	; (15170 <CLI_GetAccData+0x164>)
   15132:	4798      	blx	r3
   15134:	e005      	b.n	15142 <CLI_GetAccData+0x136>
		}

	}
	else
	{
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready.");
   15136:	4a11      	ldr	r2, [pc, #68]	; (1517c <CLI_GetAccData+0x170>)
   15138:	68b9      	ldr	r1, [r7, #8]
   1513a:	68fb      	ldr	r3, [r7, #12]
   1513c:	0018      	movs	r0, r3
   1513e:	4b0c      	ldr	r3, [pc, #48]	; (15170 <CLI_GetAccData+0x164>)
   15140:	4798      	blx	r3
	}
	return pdFALSE;
   15142:	2300      	movs	r3, #0
}
   15144:	0018      	movs	r0, r3
   15146:	46bd      	mov	sp, r7
   15148:	b00a      	add	sp, #40	; 0x28
   1514a:	bdb0      	pop	{r4, r5, r7, pc}
   1514c:	00018915 	.word	0x00018915
   15150:	0001869d 	.word	0x0001869d
   15154:	200004fc 	.word	0x200004fc
   15158:	00038507 	.word	0x00038507
   1515c:	000186d9 	.word	0x000186d9
   15160:	000182e9 	.word	0x000182e9
   15164:	20000504 	.word	0x20000504
   15168:	00036a21 	.word	0x00036a21
   1516c:	00039dd0 	.word	0x00039dd0
   15170:	00038761 	.word	0x00038761
   15174:	0001a2e5 	.word	0x0001a2e5
   15178:	00039df4 	.word	0x00039df4
   1517c:	00039e24 	.word	0x00039e24

00015180 <CLI_GetListmpData>:



BaseType_t CLI_GetListmpData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   15180:	b590      	push	{r4, r7, lr}
   15182:	b089      	sub	sp, #36	; 0x24
   15184:	af00      	add	r7, sp, #0
   15186:	60f8      	str	r0, [r7, #12]
   15188:	60b9      	str	r1, [r7, #8]
   1518a:	607a      	str	r2, [r7, #4]
	static int16_t data_raw_temperature;
	uint8_t flag = 0;
   1518c:	231b      	movs	r3, #27
   1518e:	18fb      	adds	r3, r7, r3
   15190:	2200      	movs	r2, #0
   15192:	701a      	strb	r2, [r3, #0]
	static float temperature_degC;
	struct ImuDataPacket imuPacket;
	
	stmdev_ctx_t *dev_ctx_lis = GetAccStruct();
   15194:	4b28      	ldr	r3, [pc, #160]	; (15238 <CLI_GetListmpData+0xb8>)
   15196:	4798      	blx	r3
   15198:	0003      	movs	r3, r0
   1519a:	61fb      	str	r3, [r7, #28]

	
lis2dh12_temp_data_ready_get(dev_ctx_lis, &flag);
   1519c:	231b      	movs	r3, #27
   1519e:	18fa      	adds	r2, r7, r3
   151a0:	69fb      	ldr	r3, [r7, #28]
   151a2:	0011      	movs	r1, r2
   151a4:	0018      	movs	r0, r3
   151a6:	4b25      	ldr	r3, [pc, #148]	; (1523c <CLI_GetListmpData+0xbc>)
   151a8:	4798      	blx	r3

if (flag) {
   151aa:	231b      	movs	r3, #27
   151ac:	18fb      	adds	r3, r7, r3
   151ae:	781b      	ldrb	r3, [r3, #0]
   151b0:	2b00      	cmp	r3, #0
   151b2:	d03b      	beq.n	1522c <CLI_GetListmpData+0xac>
	/* Read temperature data */
	memset(&data_raw_temperature, 0x00, sizeof(int16_t));
   151b4:	4b22      	ldr	r3, [pc, #136]	; (15240 <CLI_GetListmpData+0xc0>)
   151b6:	2200      	movs	r2, #0
   151b8:	801a      	strh	r2, [r3, #0]
	lis2dh12_temperature_raw_get(dev_ctx_lis, &data_raw_temperature);
   151ba:	4a21      	ldr	r2, [pc, #132]	; (15240 <CLI_GetListmpData+0xc0>)
   151bc:	69fb      	ldr	r3, [r7, #28]
   151be:	0011      	movs	r1, r2
   151c0:	0018      	movs	r0, r3
   151c2:	4b20      	ldr	r3, [pc, #128]	; (15244 <CLI_GetListmpData+0xc4>)
   151c4:	4798      	blx	r3
	temperature_degC = lis2dh12_from_lsb_hr_to_celsius(data_raw_temperature);
   151c6:	4b1e      	ldr	r3, [pc, #120]	; (15240 <CLI_GetListmpData+0xc0>)
   151c8:	2200      	movs	r2, #0
   151ca:	5e9b      	ldrsh	r3, [r3, r2]
   151cc:	0018      	movs	r0, r3
   151ce:	4b1e      	ldr	r3, [pc, #120]	; (15248 <CLI_GetListmpData+0xc8>)
   151d0:	4798      	blx	r3
   151d2:	1c02      	adds	r2, r0, #0
   151d4:	4b1d      	ldr	r3, [pc, #116]	; (1524c <CLI_GetListmpData+0xcc>)
   151d6:	601a      	str	r2, [r3, #0]
	snprintf((char *)pcWriteBuffer, xWriteBufferLen,"Temperature [degC]:%d\r\n", (int)temperature_degC);
   151d8:	4b1c      	ldr	r3, [pc, #112]	; (1524c <CLI_GetListmpData+0xcc>)
   151da:	681a      	ldr	r2, [r3, #0]
   151dc:	4b1c      	ldr	r3, [pc, #112]	; (15250 <CLI_GetListmpData+0xd0>)
   151de:	1c10      	adds	r0, r2, #0
   151e0:	4798      	blx	r3
   151e2:	0003      	movs	r3, r0
   151e4:	4a1b      	ldr	r2, [pc, #108]	; (15254 <CLI_GetListmpData+0xd4>)
   151e6:	68b9      	ldr	r1, [r7, #8]
   151e8:	68f8      	ldr	r0, [r7, #12]
   151ea:	4c1b      	ldr	r4, [pc, #108]	; (15258 <CLI_GetListmpData+0xd8>)
   151ec:	47a0      	blx	r4
	//sprintf((char *)tx_buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC);
	//tx_com(tx_buffer, strlen((char const *)tx_buffer));
	imuPacket.xmg = 0;
   151ee:	2310      	movs	r3, #16
   151f0:	18fb      	adds	r3, r7, r3
   151f2:	2200      	movs	r2, #0
   151f4:	801a      	strh	r2, [r3, #0]
	imuPacket.ymg = 0;
   151f6:	2310      	movs	r3, #16
   151f8:	18fb      	adds	r3, r7, r3
   151fa:	2200      	movs	r2, #0
   151fc:	805a      	strh	r2, [r3, #2]
	imuPacket.zmg = 0;
   151fe:	2310      	movs	r3, #16
   15200:	18fb      	adds	r3, r7, r3
   15202:	2200      	movs	r2, #0
   15204:	809a      	strh	r2, [r3, #4]
	imuPacket.alarm= false;
   15206:	2310      	movs	r3, #16
   15208:	18fb      	adds	r3, r7, r3
   1520a:	2200      	movs	r2, #0
   1520c:	719a      	strb	r2, [r3, #6]
	imuPacket.temp = (int)temperature_degC;
   1520e:	4b0f      	ldr	r3, [pc, #60]	; (1524c <CLI_GetListmpData+0xcc>)
   15210:	681a      	ldr	r2, [r3, #0]
   15212:	4b0f      	ldr	r3, [pc, #60]	; (15250 <CLI_GetListmpData+0xd0>)
   15214:	1c10      	adds	r0, r2, #0
   15216:	4798      	blx	r3
   15218:	0003      	movs	r3, r0
   1521a:	b25a      	sxtb	r2, r3
   1521c:	2310      	movs	r3, #16
   1521e:	18fb      	adds	r3, r7, r3
   15220:	71da      	strb	r2, [r3, #7]
	WifiAddImuDataToQueue(&imuPacket);
   15222:	2310      	movs	r3, #16
   15224:	18fb      	adds	r3, r7, r3
   15226:	0018      	movs	r0, r3
   15228:	4b0c      	ldr	r3, [pc, #48]	; (1525c <CLI_GetListmpData+0xdc>)
   1522a:	4798      	blx	r3
}

	return pdFALSE;
   1522c:	2300      	movs	r3, #0
}
   1522e:	0018      	movs	r0, r3
   15230:	46bd      	mov	sp, r7
   15232:	b009      	add	sp, #36	; 0x24
   15234:	bd90      	pop	{r4, r7, pc}
   15236:	46c0      	nop			; (mov r8, r8)
   15238:	00018915 	.word	0x00018915
   1523c:	00018379 	.word	0x00018379
   15240:	20000510 	.word	0x20000510
   15244:	000183b5 	.word	0x000183b5
   15248:	00018321 	.word	0x00018321
   1524c:	20000514 	.word	0x20000514
   15250:	00036a21 	.word	0x00036a21
   15254:	00039e34 	.word	0x00039e34
   15258:	00038761 	.word	0x00038761
   1525c:	0001a2e5 	.word	0x0001a2e5

00015260 <CLI_GetMaxData>:


BaseType_t CLI_GetMaxData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{	
   15260:	b590      	push	{r4, r7, lr}
   15262:	b087      	sub	sp, #28
   15264:	af00      	add	r7, sp, #0
   15266:	60f8      	str	r0, [r7, #12]
   15268:	60b9      	str	r1, [r7, #8]
   1526a:	607a      	str	r2, [r7, #4]
	uint8_t raw_red_data = 0;
   1526c:	2316      	movs	r3, #22
   1526e:	18fb      	adds	r3, r7, r3
   15270:	2200      	movs	r2, #0
   15272:	701a      	strb	r2, [r3, #0]
	uint8_t raw_ir_data = 0;
   15274:	2315      	movs	r3, #21
   15276:	18fb      	adds	r3, r7, r3
   15278:	2200      	movs	r2, #0
   1527a:	701a      	strb	r2, [r3, #0]
	uint8_t len = 1;
   1527c:	2314      	movs	r3, #20
   1527e:	18fb      	adds	r3, r7, r3
   15280:	2201      	movs	r2, #1
   15282:	701a      	strb	r2, [r3, #0]
	uint8_t error = 0;
   15284:	2317      	movs	r3, #23
   15286:	18fb      	adds	r3, r7, r3
   15288:	2200      	movs	r2, #0
   1528a:	701a      	strb	r2, [r3, #0]
	
	error = max30102_fifo_read(&raw_red_data, &raw_ir_data, &len);
   1528c:	2317      	movs	r3, #23
   1528e:	18fc      	adds	r4, r7, r3
   15290:	2314      	movs	r3, #20
   15292:	18fa      	adds	r2, r7, r3
   15294:	2315      	movs	r3, #21
   15296:	18f9      	adds	r1, r7, r3
   15298:	2316      	movs	r3, #22
   1529a:	18fb      	adds	r3, r7, r3
   1529c:	0018      	movs	r0, r3
   1529e:	4b04      	ldr	r3, [pc, #16]	; (152b0 <CLI_GetMaxData+0x50>)
   152a0:	4798      	blx	r3
   152a2:	0003      	movs	r3, r0
   152a4:	7023      	strb	r3, [r4, #0]
	//snprintf((char *)pcWriteBuffer, xWriteBufferLen,"Heart Rate: %d, Spo2: %d% \r\n", (int)raw_red_data, (int)raw_ir_data);
	
	return pdFALSE;
   152a6:	2300      	movs	r3, #0
}
   152a8:	0018      	movs	r0, r3
   152aa:	46bd      	mov	sp, r7
   152ac:	b007      	add	sp, #28
   152ae:	bd90      	pop	{r4, r7, pc}
   152b0:	0001773d 	.word	0x0001773d

000152b4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   152b4:	b590      	push	{r4, r7, lr}
   152b6:	b087      	sub	sp, #28
   152b8:	af00      	add	r7, sp, #0
   152ba:	60f8      	str	r0, [r7, #12]
   152bc:	60b9      	str	r1, [r7, #8]
   152be:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   152c0:	2317      	movs	r3, #23
   152c2:	18fb      	adds	r3, r7, r3
   152c4:	221b      	movs	r2, #27
   152c6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   152c8:	2317      	movs	r3, #23
   152ca:	18fb      	adds	r3, r7, r3
   152cc:	781b      	ldrb	r3, [r3, #0]
   152ce:	4a08      	ldr	r2, [pc, #32]	; (152f0 <xCliClearTerminalScreen+0x3c>)
   152d0:	4808      	ldr	r0, [pc, #32]	; (152f4 <xCliClearTerminalScreen+0x40>)
   152d2:	210f      	movs	r1, #15
   152d4:	4c08      	ldr	r4, [pc, #32]	; (152f8 <xCliClearTerminalScreen+0x44>)
   152d6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   152d8:	4a06      	ldr	r2, [pc, #24]	; (152f4 <xCliClearTerminalScreen+0x40>)
   152da:	68b9      	ldr	r1, [r7, #8]
   152dc:	68fb      	ldr	r3, [r7, #12]
   152de:	0018      	movs	r0, r3
   152e0:	4b05      	ldr	r3, [pc, #20]	; (152f8 <xCliClearTerminalScreen+0x44>)
   152e2:	4798      	blx	r3
    return pdFALSE;
   152e4:	2300      	movs	r3, #0
}
   152e6:	0018      	movs	r0, r3
   152e8:	46bd      	mov	sp, r7
   152ea:	b007      	add	sp, #28
   152ec:	bd90      	pop	{r4, r7, pc}
   152ee:	46c0      	nop			; (mov r8, r8)
   152f0:	00039e4c 	.word	0x00039e4c
   152f4:	20000414 	.word	0x20000414
   152f8:	00038761 	.word	0x00038761

000152fc <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   152fc:	b580      	push	{r7, lr}
   152fe:	b084      	sub	sp, #16
   15300:	af00      	add	r7, sp, #0
   15302:	60f8      	str	r0, [r7, #12]
   15304:	60b9      	str	r1, [r7, #8]
   15306:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   15308:	2002      	movs	r0, #2
   1530a:	4b03      	ldr	r3, [pc, #12]	; (15318 <CLI_OTAU+0x1c>)
   1530c:	4798      	blx	r3

    return pdFALSE;
   1530e:	2300      	movs	r3, #0
}
   15310:	0018      	movs	r0, r3
   15312:	46bd      	mov	sp, r7
   15314:	b004      	add	sp, #16
   15316:	bd80      	pop	{r7, pc}
   15318:	0001a2b1 	.word	0x0001a2b1

0001531c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1531c:	b580      	push	{r7, lr}
   1531e:	b084      	sub	sp, #16
   15320:	af00      	add	r7, sp, #0
   15322:	60f8      	str	r0, [r7, #12]
   15324:	60b9      	str	r1, [r7, #8]
   15326:	607a      	str	r2, [r7, #4]
    system_reset();
   15328:	4b03      	ldr	r3, [pc, #12]	; (15338 <CLI_ResetDevice+0x1c>)
   1532a:	4798      	blx	r3
    return pdFALSE;
   1532c:	2300      	movs	r3, #0
}
   1532e:	0018      	movs	r0, r3
   15330:	46bd      	mov	sp, r7
   15332:	b004      	add	sp, #16
   15334:	bd80      	pop	{r7, pc}
   15336:	46c0      	nop			; (mov r8, r8)
   15338:	00014c79 	.word	0x00014c79

0001533c <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1533c:	b590      	push	{r4, r7, lr}
   1533e:	b08f      	sub	sp, #60	; 0x3c
   15340:	af00      	add	r7, sp, #0
   15342:	60f8      	str	r0, [r7, #12]
   15344:	60b9      	str	r1, [r7, #8]
   15346:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   15348:	2318      	movs	r3, #24
   1534a:	18fb      	adds	r3, r7, r3
   1534c:	2200      	movs	r2, #0
   1534e:	701a      	strb	r2, [r3, #0]
   15350:	2318      	movs	r3, #24
   15352:	18fb      	adds	r3, r7, r3
   15354:	2200      	movs	r2, #0
   15356:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   15358:	2318      	movs	r3, #24
   1535a:	18fb      	adds	r3, r7, r3
   1535c:	2200      	movs	r2, #0
   1535e:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   15360:	2318      	movs	r3, #24
   15362:	18fb      	adds	r3, r7, r3
   15364:	2200      	movs	r2, #0
   15366:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   15368:	231c      	movs	r3, #28
   1536a:	18fb      	adds	r3, r7, r3
   1536c:	2200      	movs	r2, #0
   1536e:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   15370:	231c      	movs	r3, #28
   15372:	18fb      	adds	r3, r7, r3
   15374:	2214      	movs	r2, #20
   15376:	18ba      	adds	r2, r7, r2
   15378:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   1537a:	231c      	movs	r3, #28
   1537c:	18fb      	adds	r3, r7, r3
   1537e:	2201      	movs	r2, #1
   15380:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   15382:	231c      	movs	r3, #28
   15384:	18fb      	adds	r3, r7, r3
   15386:	2218      	movs	r2, #24
   15388:	18ba      	adds	r2, r7, r2
   1538a:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   1538c:	231c      	movs	r3, #28
   1538e:	18fb      	adds	r3, r7, r3
   15390:	2201      	movs	r2, #1
   15392:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   15394:	4b2a      	ldr	r3, [pc, #168]	; (15440 <CLI_i2cScan+0x104>)
   15396:	0018      	movs	r0, r3
   15398:	4b2a      	ldr	r3, [pc, #168]	; (15444 <CLI_i2cScan+0x108>)
   1539a:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   1539c:	2300      	movs	r3, #0
   1539e:	637b      	str	r3, [r7, #52]	; 0x34
   153a0:	e042      	b.n	15428 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   153a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153a4:	4a28      	ldr	r2, [pc, #160]	; (15448 <CLI_i2cScan+0x10c>)
   153a6:	4829      	ldr	r0, [pc, #164]	; (1544c <CLI_i2cScan+0x110>)
   153a8:	210f      	movs	r1, #15
   153aa:	4c29      	ldr	r4, [pc, #164]	; (15450 <CLI_i2cScan+0x114>)
   153ac:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   153ae:	4b27      	ldr	r3, [pc, #156]	; (1544c <CLI_i2cScan+0x110>)
   153b0:	0018      	movs	r0, r3
   153b2:	4b24      	ldr	r3, [pc, #144]	; (15444 <CLI_i2cScan+0x108>)
   153b4:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   153b6:	2300      	movs	r3, #0
   153b8:	633b      	str	r3, [r7, #48]	; 0x30
   153ba:	e02b      	b.n	15414 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   153bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153be:	b2da      	uxtb	r2, r3
   153c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   153c2:	b2db      	uxtb	r3, r3
   153c4:	18d3      	adds	r3, r2, r3
   153c6:	b2da      	uxtb	r2, r3
   153c8:	231c      	movs	r3, #28
   153ca:	18fb      	adds	r3, r7, r3
   153cc:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   153ce:	231c      	movs	r3, #28
   153d0:	18fb      	adds	r3, r7, r3
   153d2:	2264      	movs	r2, #100	; 0x64
   153d4:	2164      	movs	r1, #100	; 0x64
   153d6:	0018      	movs	r0, r3
   153d8:	4b1e      	ldr	r3, [pc, #120]	; (15454 <CLI_i2cScan+0x118>)
   153da:	4798      	blx	r3
   153dc:	0003      	movs	r3, r0
   153de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   153e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   153e2:	2b00      	cmp	r3, #0
   153e4:	d10c      	bne.n	15400 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   153e6:	231c      	movs	r3, #28
   153e8:	18fb      	adds	r3, r7, r3
   153ea:	781b      	ldrb	r3, [r3, #0]
   153ec:	4a1a      	ldr	r2, [pc, #104]	; (15458 <CLI_i2cScan+0x11c>)
   153ee:	4817      	ldr	r0, [pc, #92]	; (1544c <CLI_i2cScan+0x110>)
   153f0:	210f      	movs	r1, #15
   153f2:	4c17      	ldr	r4, [pc, #92]	; (15450 <CLI_i2cScan+0x114>)
   153f4:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   153f6:	4b15      	ldr	r3, [pc, #84]	; (1544c <CLI_i2cScan+0x110>)
   153f8:	0018      	movs	r0, r3
   153fa:	4b12      	ldr	r3, [pc, #72]	; (15444 <CLI_i2cScan+0x108>)
   153fc:	4798      	blx	r3
   153fe:	e006      	b.n	1540e <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   15400:	4b12      	ldr	r3, [pc, #72]	; (1544c <CLI_i2cScan+0x110>)
   15402:	4a16      	ldr	r2, [pc, #88]	; (1545c <CLI_i2cScan+0x120>)
   15404:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   15406:	4b11      	ldr	r3, [pc, #68]	; (1544c <CLI_i2cScan+0x110>)
   15408:	0018      	movs	r0, r3
   1540a:	4b0e      	ldr	r3, [pc, #56]	; (15444 <CLI_i2cScan+0x108>)
   1540c:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   1540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15410:	3301      	adds	r3, #1
   15412:	633b      	str	r3, [r7, #48]	; 0x30
   15414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15416:	2b0f      	cmp	r3, #15
   15418:	ddd0      	ble.n	153bc <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   1541a:	4b11      	ldr	r3, [pc, #68]	; (15460 <CLI_i2cScan+0x124>)
   1541c:	0018      	movs	r0, r3
   1541e:	4b09      	ldr	r3, [pc, #36]	; (15444 <CLI_i2cScan+0x108>)
   15420:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   15422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15424:	3310      	adds	r3, #16
   15426:	637b      	str	r3, [r7, #52]	; 0x34
   15428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1542a:	2b7f      	cmp	r3, #127	; 0x7f
   1542c:	ddb9      	ble.n	153a2 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   1542e:	4b0c      	ldr	r3, [pc, #48]	; (15460 <CLI_i2cScan+0x124>)
   15430:	0018      	movs	r0, r3
   15432:	4b04      	ldr	r3, [pc, #16]	; (15444 <CLI_i2cScan+0x108>)
   15434:	4798      	blx	r3
			return pdFALSE;
   15436:	2300      	movs	r3, #0

}
   15438:	0018      	movs	r0, r3
   1543a:	46bd      	mov	sp, r7
   1543c:	b00f      	add	sp, #60	; 0x3c
   1543e:	bd90      	pop	{r4, r7, pc}
   15440:	00039e54 	.word	0x00039e54
   15444:	00020bc5 	.word	0x00020bc5
   15448:	00039e88 	.word	0x00039e88
   1544c:	20000414 	.word	0x20000414
   15450:	00038761 	.word	0x00038761
   15454:	00018191 	.word	0x00018191
   15458:	00039e90 	.word	0x00039e90
   1545c:	00202058 	.word	0x00202058
   15460:	00039dbc 	.word	0x00039dbc

00015464 <max30102_init>:
 *            - 5 reset failed
 *            - 6 reset fifo failed
 * @note      none
 */
uint8_t max30102_init(max30102_handle_t *handle)
{
   15464:	b5b0      	push	{r4, r5, r7, lr}
   15466:	b084      	sub	sp, #16
   15468:	af00      	add	r7, sp, #0
   1546a:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    uint8_t part_id;

    if (handle->iic_init() != 0)                                                                            /* init iic */
   1546c:	687b      	ldr	r3, [r7, #4]
   1546e:	681b      	ldr	r3, [r3, #0]
   15470:	4798      	blx	r3
   15472:	1e03      	subs	r3, r0, #0
   15474:	d006      	beq.n	15484 <max30102_init+0x20>
    {
        handle->debug_print("max30102: iic init failed.\n");                                                /* iic init failed */
   15476:	687b      	ldr	r3, [r7, #4]
   15478:	699b      	ldr	r3, [r3, #24]
   1547a:	4a82      	ldr	r2, [pc, #520]	; (15684 <max30102_init+0x220>)
   1547c:	0010      	movs	r0, r2
   1547e:	4798      	blx	r3
        
        return 1;                                                                                           /* return error */
   15480:	2301      	movs	r3, #1
   15482:	e0fa      	b.n	1567a <max30102_init+0x216>
    }
    res = handle->iic_read(0x57, 0xFF, (uint8_t *)&part_id, 1);                 /* read part id */
   15484:	687b      	ldr	r3, [r7, #4]
   15486:	689d      	ldr	r5, [r3, #8]
   15488:	230f      	movs	r3, #15
   1548a:	18fc      	adds	r4, r7, r3
   1548c:	230d      	movs	r3, #13
   1548e:	18fa      	adds	r2, r7, r3
   15490:	2301      	movs	r3, #1
   15492:	21ff      	movs	r1, #255	; 0xff
   15494:	2057      	movs	r0, #87	; 0x57
   15496:	47a8      	blx	r5
   15498:	0003      	movs	r3, r0
   1549a:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                           /* check result */
   1549c:	230f      	movs	r3, #15
   1549e:	18fb      	adds	r3, r7, r3
   154a0:	781b      	ldrb	r3, [r3, #0]
   154a2:	2b00      	cmp	r3, #0
   154a4:	d009      	beq.n	154ba <max30102_init+0x56>
    {
        handle->debug_print("max30102: read part id failed.\n");                                            /* read part id failed */
   154a6:	687b      	ldr	r3, [r7, #4]
   154a8:	699b      	ldr	r3, [r3, #24]
   154aa:	4a77      	ldr	r2, [pc, #476]	; (15688 <max30102_init+0x224>)
   154ac:	0010      	movs	r0, r2
   154ae:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   154b0:	687b      	ldr	r3, [r7, #4]
   154b2:	685b      	ldr	r3, [r3, #4]
   154b4:	4798      	blx	r3
        
        return 4;                                                                                           /* return error */
   154b6:	2304      	movs	r3, #4
   154b8:	e0df      	b.n	1567a <max30102_init+0x216>
    }
    if (part_id != 0x15)                                                                                    /* check part id */
   154ba:	230d      	movs	r3, #13
   154bc:	18fb      	adds	r3, r7, r3
   154be:	781b      	ldrb	r3, [r3, #0]
   154c0:	2b15      	cmp	r3, #21
   154c2:	d009      	beq.n	154d8 <max30102_init+0x74>
    {
        handle->debug_print("max30102: id is invalid.\n");                                                  /* id is invalid */
   154c4:	687b      	ldr	r3, [r7, #4]
   154c6:	699b      	ldr	r3, [r3, #24]
   154c8:	4a70      	ldr	r2, [pc, #448]	; (1568c <max30102_init+0x228>)
   154ca:	0010      	movs	r0, r2
   154cc:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   154ce:	687b      	ldr	r3, [r7, #4]
   154d0:	685b      	ldr	r3, [r3, #4]
   154d2:	4798      	blx	r3
        
        return 4;                                                                                           /* return error */
   154d4:	2304      	movs	r3, #4
   154d6:	e0d0      	b.n	1567a <max30102_init+0x216>
    }
    res = handle->iic_read(0x57, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);                /* read mode config */
   154d8:	687b      	ldr	r3, [r7, #4]
   154da:	689d      	ldr	r5, [r3, #8]
   154dc:	230f      	movs	r3, #15
   154de:	18fc      	adds	r4, r7, r3
   154e0:	230e      	movs	r3, #14
   154e2:	18fa      	adds	r2, r7, r3
   154e4:	2301      	movs	r3, #1
   154e6:	2109      	movs	r1, #9
   154e8:	2057      	movs	r0, #87	; 0x57
   154ea:	47a8      	blx	r5
   154ec:	0003      	movs	r3, r0
   154ee:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                           /* check result */
   154f0:	230f      	movs	r3, #15
   154f2:	18fb      	adds	r3, r7, r3
   154f4:	781b      	ldrb	r3, [r3, #0]
   154f6:	2b00      	cmp	r3, #0
   154f8:	d009      	beq.n	1550e <max30102_init+0xaa>
    {
        handle->debug_print("max30102: read mode config failed.\n");                                        /* read mode config failed */
   154fa:	687b      	ldr	r3, [r7, #4]
   154fc:	699b      	ldr	r3, [r3, #24]
   154fe:	4a64      	ldr	r2, [pc, #400]	; (15690 <max30102_init+0x22c>)
   15500:	0010      	movs	r0, r2
   15502:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   15504:	687b      	ldr	r3, [r7, #4]
   15506:	685b      	ldr	r3, [r3, #4]
   15508:	4798      	blx	r3
        
        return 5;                                                                                           /* return error */
   1550a:	2305      	movs	r3, #5
   1550c:	e0b5      	b.n	1567a <max30102_init+0x216>
    }
    prev &= ~(1 << 6);                                                                                      /* clear config */
   1550e:	230e      	movs	r3, #14
   15510:	18fb      	adds	r3, r7, r3
   15512:	781b      	ldrb	r3, [r3, #0]
   15514:	2240      	movs	r2, #64	; 0x40
   15516:	4393      	bics	r3, r2
   15518:	b2da      	uxtb	r2, r3
   1551a:	230e      	movs	r3, #14
   1551c:	18fb      	adds	r3, r7, r3
   1551e:	701a      	strb	r2, [r3, #0]
    prev |= 1 << 6;                                                                                         /* set 1 */
   15520:	230e      	movs	r3, #14
   15522:	18fb      	adds	r3, r7, r3
   15524:	781b      	ldrb	r3, [r3, #0]
   15526:	2240      	movs	r2, #64	; 0x40
   15528:	4313      	orrs	r3, r2
   1552a:	b2da      	uxtb	r2, r3
   1552c:	230e      	movs	r3, #14
   1552e:	18fb      	adds	r3, r7, r3
   15530:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(0x57, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);                           /* write mode config */
   15532:	687b      	ldr	r3, [r7, #4]
   15534:	68dd      	ldr	r5, [r3, #12]
   15536:	230f      	movs	r3, #15
   15538:	18fc      	adds	r4, r7, r3
   1553a:	230e      	movs	r3, #14
   1553c:	18fa      	adds	r2, r7, r3
   1553e:	2301      	movs	r3, #1
   15540:	2109      	movs	r1, #9
   15542:	2057      	movs	r0, #87	; 0x57
   15544:	47a8      	blx	r5
   15546:	0003      	movs	r3, r0
   15548:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                           /* check result */
   1554a:	230f      	movs	r3, #15
   1554c:	18fb      	adds	r3, r7, r3
   1554e:	781b      	ldrb	r3, [r3, #0]
   15550:	2b00      	cmp	r3, #0
   15552:	d009      	beq.n	15568 <max30102_init+0x104>
    {
        handle->debug_print("max30102: write mode config failed.\n");                                       /* write mode config failed */
   15554:	687b      	ldr	r3, [r7, #4]
   15556:	699b      	ldr	r3, [r3, #24]
   15558:	4a4e      	ldr	r2, [pc, #312]	; (15694 <max30102_init+0x230>)
   1555a:	0010      	movs	r0, r2
   1555c:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   1555e:	687b      	ldr	r3, [r7, #4]
   15560:	685b      	ldr	r3, [r3, #4]
   15562:	4798      	blx	r3
        
        return 5;                                                                                           /* return error */
   15564:	2305      	movs	r3, #5
   15566:	e088      	b.n	1567a <max30102_init+0x216>
    }
    handle->delay_ms(10);                                                                                   /* delay 10 ms */
   15568:	687b      	ldr	r3, [r7, #4]
   1556a:	695b      	ldr	r3, [r3, #20]
   1556c:	200a      	movs	r0, #10
   1556e:	4798      	blx	r3
    res = handle->iic_read(0x57, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);                /* read mode config */
   15570:	687b      	ldr	r3, [r7, #4]
   15572:	689d      	ldr	r5, [r3, #8]
   15574:	230f      	movs	r3, #15
   15576:	18fc      	adds	r4, r7, r3
   15578:	230e      	movs	r3, #14
   1557a:	18fa      	adds	r2, r7, r3
   1557c:	2301      	movs	r3, #1
   1557e:	2109      	movs	r1, #9
   15580:	2057      	movs	r0, #87	; 0x57
   15582:	47a8      	blx	r5
   15584:	0003      	movs	r3, r0
   15586:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                           /* check result */
   15588:	230f      	movs	r3, #15
   1558a:	18fb      	adds	r3, r7, r3
   1558c:	781b      	ldrb	r3, [r3, #0]
   1558e:	2b00      	cmp	r3, #0
   15590:	d009      	beq.n	155a6 <max30102_init+0x142>
    {
        handle->debug_print("max30102: read mode config failed.\n");                                        /* read mode config failed */
   15592:	687b      	ldr	r3, [r7, #4]
   15594:	699b      	ldr	r3, [r3, #24]
   15596:	4a3e      	ldr	r2, [pc, #248]	; (15690 <max30102_init+0x22c>)
   15598:	0010      	movs	r0, r2
   1559a:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   1559c:	687b      	ldr	r3, [r7, #4]
   1559e:	685b      	ldr	r3, [r3, #4]
   155a0:	4798      	blx	r3
        
        return 5;                                                                                           /* return error */
   155a2:	2305      	movs	r3, #5
   155a4:	e069      	b.n	1567a <max30102_init+0x216>
    }
    if ((prev & (1 << 6)) != 0)                                                                             /* check result */
   155a6:	230e      	movs	r3, #14
   155a8:	18fb      	adds	r3, r7, r3
   155aa:	781b      	ldrb	r3, [r3, #0]
   155ac:	001a      	movs	r2, r3
   155ae:	2340      	movs	r3, #64	; 0x40
   155b0:	4013      	ands	r3, r2
   155b2:	d009      	beq.n	155c8 <max30102_init+0x164>
    {
        handle->debug_print("max30102: reset failed.\n");                                                   /* reset failed */
   155b4:	687b      	ldr	r3, [r7, #4]
   155b6:	699b      	ldr	r3, [r3, #24]
   155b8:	4a37      	ldr	r2, [pc, #220]	; (15698 <max30102_init+0x234>)
   155ba:	0010      	movs	r0, r2
   155bc:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   155be:	687b      	ldr	r3, [r7, #4]
   155c0:	685b      	ldr	r3, [r3, #4]
   155c2:	4798      	blx	r3
        
        return 5;                                                                                           /* return error */
   155c4:	2305      	movs	r3, #5
   155c6:	e058      	b.n	1567a <max30102_init+0x216>
    }
    prev = 0;                                                                                               /* set zero */
   155c8:	230e      	movs	r3, #14
   155ca:	18fb      	adds	r3, r7, r3
   155cc:	2200      	movs	r2, #0
   155ce:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(0x57, MAX30102_REG_FIFO_READ_POINTER, (uint8_t *)&prev, 1);         /* write fifo read pointer */
   155d0:	687b      	ldr	r3, [r7, #4]
   155d2:	68dd      	ldr	r5, [r3, #12]
   155d4:	230f      	movs	r3, #15
   155d6:	18fc      	adds	r4, r7, r3
   155d8:	230e      	movs	r3, #14
   155da:	18fa      	adds	r2, r7, r3
   155dc:	2301      	movs	r3, #1
   155de:	2106      	movs	r1, #6
   155e0:	2057      	movs	r0, #87	; 0x57
   155e2:	47a8      	blx	r5
   155e4:	0003      	movs	r3, r0
   155e6:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                           /* check result */
   155e8:	230f      	movs	r3, #15
   155ea:	18fb      	adds	r3, r7, r3
   155ec:	781b      	ldrb	r3, [r3, #0]
   155ee:	2b00      	cmp	r3, #0
   155f0:	d009      	beq.n	15606 <max30102_init+0x1a2>
    {
        handle->debug_print("max30102: write fifo read pointer failed.\n");                                 /* write fifo read pointer failed */
   155f2:	687b      	ldr	r3, [r7, #4]
   155f4:	699b      	ldr	r3, [r3, #24]
   155f6:	4a29      	ldr	r2, [pc, #164]	; (1569c <max30102_init+0x238>)
   155f8:	0010      	movs	r0, r2
   155fa:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   155fc:	687b      	ldr	r3, [r7, #4]
   155fe:	685b      	ldr	r3, [r3, #4]
   15600:	4798      	blx	r3
        
        return 6;                                                                                           /* return error */
   15602:	2306      	movs	r3, #6
   15604:	e039      	b.n	1567a <max30102_init+0x216>
    }
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_FIFO_WRITE_POINTER, (uint8_t *)&prev, 1);        /* write fifo write pointer */
   15606:	687b      	ldr	r3, [r7, #4]
   15608:	68dd      	ldr	r5, [r3, #12]
   1560a:	230f      	movs	r3, #15
   1560c:	18fc      	adds	r4, r7, r3
   1560e:	230e      	movs	r3, #14
   15610:	18fa      	adds	r2, r7, r3
   15612:	2301      	movs	r3, #1
   15614:	2104      	movs	r1, #4
   15616:	2057      	movs	r0, #87	; 0x57
   15618:	47a8      	blx	r5
   1561a:	0003      	movs	r3, r0
   1561c:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                           /* check result */
   1561e:	230f      	movs	r3, #15
   15620:	18fb      	adds	r3, r7, r3
   15622:	781b      	ldrb	r3, [r3, #0]
   15624:	2b00      	cmp	r3, #0
   15626:	d009      	beq.n	1563c <max30102_init+0x1d8>
    {
        handle->debug_print("max30102: write fifo write pointer failed.\n");                                /* write fifo write pointer failed */
   15628:	687b      	ldr	r3, [r7, #4]
   1562a:	699b      	ldr	r3, [r3, #24]
   1562c:	4a1c      	ldr	r2, [pc, #112]	; (156a0 <max30102_init+0x23c>)
   1562e:	0010      	movs	r0, r2
   15630:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   15632:	687b      	ldr	r3, [r7, #4]
   15634:	685b      	ldr	r3, [r3, #4]
   15636:	4798      	blx	r3
        
        return 6;                                                                                           /* return error */
   15638:	2306      	movs	r3, #6
   1563a:	e01e      	b.n	1567a <max30102_init+0x216>
    }
	
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_OVERFLOW_COUNTER, (uint8_t *)&prev, 1);          /* write overflow counter */
   1563c:	687b      	ldr	r3, [r7, #4]
   1563e:	68dd      	ldr	r5, [r3, #12]
   15640:	230f      	movs	r3, #15
   15642:	18fc      	adds	r4, r7, r3
   15644:	230e      	movs	r3, #14
   15646:	18fa      	adds	r2, r7, r3
   15648:	2301      	movs	r3, #1
   1564a:	2105      	movs	r1, #5
   1564c:	2057      	movs	r0, #87	; 0x57
   1564e:	47a8      	blx	r5
   15650:	0003      	movs	r3, r0
   15652:	7023      	strb	r3, [r4, #0]
	if (res != 0)                                                                                           /* check result */
   15654:	230f      	movs	r3, #15
   15656:	18fb      	adds	r3, r7, r3
   15658:	781b      	ldrb	r3, [r3, #0]
   1565a:	2b00      	cmp	r3, #0
   1565c:	d009      	beq.n	15672 <max30102_init+0x20e>
    {
        handle->debug_print("max30102: write overflow counter failed.\n");                                  /* write overflow counter failed */
   1565e:	687b      	ldr	r3, [r7, #4]
   15660:	699b      	ldr	r3, [r3, #24]
   15662:	4a10      	ldr	r2, [pc, #64]	; (156a4 <max30102_init+0x240>)
   15664:	0010      	movs	r0, r2
   15666:	4798      	blx	r3
        (void)handle->iic_deinit();                                                                         /* iic deinit */
   15668:	687b      	ldr	r3, [r7, #4]
   1566a:	685b      	ldr	r3, [r3, #4]
   1566c:	4798      	blx	r3
        
        return 6;                                                                                           /* return error */
   1566e:	2306      	movs	r3, #6
   15670:	e003      	b.n	1567a <max30102_init+0x216>
    }
    handle->inited = 1;                                                                              /* flag finish initialization */
   15672:	687b      	ldr	r3, [r7, #4]
   15674:	2201      	movs	r2, #1
   15676:	771a      	strb	r2, [r3, #28]
    
    return 0;                                                                                               /* success return 0 */
   15678:	2300      	movs	r3, #0
}
   1567a:	0018      	movs	r0, r3
   1567c:	46bd      	mov	sp, r7
   1567e:	b004      	add	sp, #16
   15680:	bdb0      	pop	{r4, r5, r7, pc}
   15682:	46c0      	nop			; (mov r8, r8)
   15684:	00039f08 	.word	0x00039f08
   15688:	00039f24 	.word	0x00039f24
   1568c:	00039f44 	.word	0x00039f44
   15690:	00039f60 	.word	0x00039f60
   15694:	00039f84 	.word	0x00039f84
   15698:	00039fac 	.word	0x00039fac
   1569c:	00039fc8 	.word	0x00039fc8
   156a0:	00039ff4 	.word	0x00039ff4
   156a4:	0003a020 	.word	0x0003a020

000156a8 <max30102_deinit>:
 *            - 3 handle is not initialized
 *            - 4 power down failed
 * @note      none
 */
uint8_t max30102_deinit(max30102_handle_t *handle)
{
   156a8:	b5b0      	push	{r4, r5, r7, lr}
   156aa:	b084      	sub	sp, #16
   156ac:	af00      	add	r7, sp, #0
   156ae:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                              /* check handle */
   156b0:	687b      	ldr	r3, [r7, #4]
   156b2:	2b00      	cmp	r3, #0
   156b4:	d101      	bne.n	156ba <max30102_deinit+0x12>
    {
        return 2;                                                                                    /* return error */
   156b6:	2302      	movs	r3, #2
   156b8:	e058      	b.n	1576c <max30102_deinit+0xc4>
    }
    if (handle->inited != 1)                                                                         /* check handle initialization */
   156ba:	687b      	ldr	r3, [r7, #4]
   156bc:	7f1b      	ldrb	r3, [r3, #28]
   156be:	2b01      	cmp	r3, #1
   156c0:	d001      	beq.n	156c6 <max30102_deinit+0x1e>
    {
        return 3;                                                                                    /* return error */
   156c2:	2303      	movs	r3, #3
   156c4:	e052      	b.n	1576c <max30102_deinit+0xc4>
    }
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);         /* read mode config */
   156c6:	687b      	ldr	r3, [r7, #4]
   156c8:	689d      	ldr	r5, [r3, #8]
   156ca:	230f      	movs	r3, #15
   156cc:	18fc      	adds	r4, r7, r3
   156ce:	230e      	movs	r3, #14
   156d0:	18fa      	adds	r2, r7, r3
   156d2:	2301      	movs	r3, #1
   156d4:	2109      	movs	r1, #9
   156d6:	2057      	movs	r0, #87	; 0x57
   156d8:	47a8      	blx	r5
   156da:	0003      	movs	r3, r0
   156dc:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   156de:	230f      	movs	r3, #15
   156e0:	18fb      	adds	r3, r7, r3
   156e2:	781b      	ldrb	r3, [r3, #0]
   156e4:	2b00      	cmp	r3, #0
   156e6:	d006      	beq.n	156f6 <max30102_deinit+0x4e>
    {
        handle->debug_print("max30102: read mode config failed.\n");                                 /* read mode config failed */
   156e8:	687b      	ldr	r3, [r7, #4]
   156ea:	699b      	ldr	r3, [r3, #24]
   156ec:	4a21      	ldr	r2, [pc, #132]	; (15774 <max30102_deinit+0xcc>)
   156ee:	0010      	movs	r0, r2
   156f0:	4798      	blx	r3
       
        return 4;                                                                                    /* return error */
   156f2:	2304      	movs	r3, #4
   156f4:	e03a      	b.n	1576c <max30102_deinit+0xc4>
    }
    prev &= ~(1 << 7);                                                                               /* clear config */
   156f6:	230e      	movs	r3, #14
   156f8:	18fb      	adds	r3, r7, r3
   156fa:	781b      	ldrb	r3, [r3, #0]
   156fc:	227f      	movs	r2, #127	; 0x7f
   156fe:	4013      	ands	r3, r2
   15700:	b2da      	uxtb	r2, r3
   15702:	230e      	movs	r3, #14
   15704:	18fb      	adds	r3, r7, r3
   15706:	701a      	strb	r2, [r3, #0]
    prev |= 1 << 7;                                                                                  /* set bool */
   15708:	230e      	movs	r3, #14
   1570a:	18fb      	adds	r3, r7, r3
   1570c:	781b      	ldrb	r3, [r3, #0]
   1570e:	2280      	movs	r2, #128	; 0x80
   15710:	4252      	negs	r2, r2
   15712:	4313      	orrs	r3, r2
   15714:	b2da      	uxtb	r2, r3
   15716:	230e      	movs	r3, #14
   15718:	18fb      	adds	r3, r7, r3
   1571a:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);        /* write mode config */
   1571c:	687b      	ldr	r3, [r7, #4]
   1571e:	68dd      	ldr	r5, [r3, #12]
   15720:	230f      	movs	r3, #15
   15722:	18fc      	adds	r4, r7, r3
   15724:	230e      	movs	r3, #14
   15726:	18fa      	adds	r2, r7, r3
   15728:	2301      	movs	r3, #1
   1572a:	2109      	movs	r1, #9
   1572c:	2057      	movs	r0, #87	; 0x57
   1572e:	47a8      	blx	r5
   15730:	0003      	movs	r3, r0
   15732:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   15734:	230f      	movs	r3, #15
   15736:	18fb      	adds	r3, r7, r3
   15738:	781b      	ldrb	r3, [r3, #0]
   1573a:	2b00      	cmp	r3, #0
   1573c:	d006      	beq.n	1574c <max30102_deinit+0xa4>
    {
        handle->debug_print("max30102: write mode config failed.\n");                                /* write mode config failed */
   1573e:	687b      	ldr	r3, [r7, #4]
   15740:	699b      	ldr	r3, [r3, #24]
   15742:	4a0d      	ldr	r2, [pc, #52]	; (15778 <max30102_deinit+0xd0>)
   15744:	0010      	movs	r0, r2
   15746:	4798      	blx	r3
       
        return 4;                                                                                    /* return error */
   15748:	2304      	movs	r3, #4
   1574a:	e00f      	b.n	1576c <max30102_deinit+0xc4>
    }
    if (handle->iic_deinit() != 0)                                                                   /* iic deinit */
   1574c:	687b      	ldr	r3, [r7, #4]
   1574e:	685b      	ldr	r3, [r3, #4]
   15750:	4798      	blx	r3
   15752:	1e03      	subs	r3, r0, #0
   15754:	d006      	beq.n	15764 <max30102_deinit+0xbc>
    {
        handle->debug_print("max30102: iic deinit failed.\n");                                       /* iic deinit failed */
   15756:	687b      	ldr	r3, [r7, #4]
   15758:	699b      	ldr	r3, [r3, #24]
   1575a:	4a08      	ldr	r2, [pc, #32]	; (1577c <max30102_deinit+0xd4>)
   1575c:	0010      	movs	r0, r2
   1575e:	4798      	blx	r3
        
        return 1;                                                                                    /* return error */
   15760:	2301      	movs	r3, #1
   15762:	e003      	b.n	1576c <max30102_deinit+0xc4>
    }
    
    handle->inited = 0;                                                                              /* flag close */
   15764:	687b      	ldr	r3, [r7, #4]
   15766:	2200      	movs	r2, #0
   15768:	771a      	strb	r2, [r3, #28]
    
    return 0;                                                                                        /* success return 0 */
   1576a:	2300      	movs	r3, #0
}
   1576c:	0018      	movs	r0, r3
   1576e:	46bd      	mov	sp, r7
   15770:	b004      	add	sp, #16
   15772:	bdb0      	pop	{r4, r5, r7, pc}
   15774:	00039f60 	.word	0x00039f60
   15778:	00039f84 	.word	0x00039f84
   1577c:	0003a04c 	.word	0x0003a04c

00015780 <max30102_read>:
 *                - 4 fifo overrun
 *                - 5 mode is invalid
 * @note          none
 */
uint8_t max30102_read(max30102_handle_t *handle, uint8_t *hr, uint8_t *spo2, uint8_t *len)
{
   15780:	b5f0      	push	{r4, r5, r6, r7, lr}
   15782:	46c6      	mov	lr, r8
   15784:	b500      	push	{lr}
   15786:	b0b2      	sub	sp, #200	; 0xc8
   15788:	af00      	add	r7, sp, #0
   1578a:	62f8      	str	r0, [r7, #44]	; 0x2c
   1578c:	62b9      	str	r1, [r7, #40]	; 0x28
   1578e:	627a      	str	r2, [r7, #36]	; 0x24
   15790:	623b      	str	r3, [r7, #32]
	
	
	
	
	
	res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_OVERFLOW_COUNTER, (uint8_t *)&prev, 1);                 /* read overflow counter */
   15792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15794:	689b      	ldr	r3, [r3, #8]
   15796:	4698      	mov	r8, r3
   15798:	2363      	movs	r3, #99	; 0x63
   1579a:	2220      	movs	r2, #32
   1579c:	18ba      	adds	r2, r7, r2
   1579e:	18d6      	adds	r6, r2, r3
   157a0:	232f      	movs	r3, #47	; 0x2f
   157a2:	2220      	movs	r2, #32
   157a4:	18ba      	adds	r2, r7, r2
   157a6:	18d2      	adds	r2, r2, r3
   157a8:	2301      	movs	r3, #1
   157aa:	2105      	movs	r1, #5
   157ac:	2057      	movs	r0, #87	; 0x57
   157ae:	47c0      	blx	r8
   157b0:	0003      	movs	r3, r0
   157b2:	7033      	strb	r3, [r6, #0]
	if (res != 0)                                                                                                 /* check result */
   157b4:	2363      	movs	r3, #99	; 0x63
   157b6:	2220      	movs	r2, #32
   157b8:	4694      	mov	ip, r2
   157ba:	44bc      	add	ip, r7
   157bc:	4463      	add	r3, ip
   157be:	781b      	ldrb	r3, [r3, #0]
   157c0:	2b00      	cmp	r3, #0
   157c2:	d007      	beq.n	157d4 <max30102_read+0x54>
	{
		handle->debug_print("max30102: read overflow counter failed.\n");                                         /* read overflow counter failed */
   157c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   157c6:	699b      	ldr	r3, [r3, #24]
   157c8:	4add      	ldr	r2, [pc, #884]	; (15b40 <max30102_read+0x3c0>)
   157ca:	0010      	movs	r0, r2
   157cc:	4798      	blx	r3
		
		return 1;                                                                                                 /* return error */
   157ce:	2301      	movs	r3, #1
   157d0:	f001 f9ac 	bl	16b2c <max30102_read+0x13ac>
	}
	r = 0;                                                                                                        /* set 0 */
   157d4:	23a3      	movs	r3, #163	; 0xa3
   157d6:	2220      	movs	r2, #32
   157d8:	4694      	mov	ip, r2
   157da:	44bc      	add	ip, r7
   157dc:	4463      	add	r3, ip
   157de:	2200      	movs	r2, #0
   157e0:	701a      	strb	r2, [r3, #0]
	if (prev != 0)                                                                                                /* check overflow */
   157e2:	232f      	movs	r3, #47	; 0x2f
   157e4:	2220      	movs	r2, #32
   157e6:	4694      	mov	ip, r2
   157e8:	44bc      	add	ip, r7
   157ea:	4463      	add	r3, ip
   157ec:	781b      	ldrb	r3, [r3, #0]
   157ee:	2b00      	cmp	r3, #0
   157f0:	d006      	beq.n	15800 <max30102_read+0x80>
	{
		r = 4;                                                                                                    /* set 4 */
   157f2:	23a3      	movs	r3, #163	; 0xa3
   157f4:	2220      	movs	r2, #32
   157f6:	4694      	mov	ip, r2
   157f8:	44bc      	add	ip, r7
   157fa:	4463      	add	r3, ip
   157fc:	2204      	movs	r2, #4
   157fe:	701a      	strb	r2, [r3, #0]
		
		// handle->debug_print("max30102: fifo overrun.\n");                                                         /* fifo overrun*/
	}
	res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_READ_POINTER, (uint8_t *)&read_point, 1);          /* read fifo read point */
   15800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15802:	689b      	ldr	r3, [r3, #8]
   15804:	4698      	mov	r8, r3
   15806:	2363      	movs	r3, #99	; 0x63
   15808:	2220      	movs	r2, #32
   1580a:	18ba      	adds	r2, r7, r2
   1580c:	18d6      	adds	r6, r2, r3
   1580e:	232e      	movs	r3, #46	; 0x2e
   15810:	2220      	movs	r2, #32
   15812:	18ba      	adds	r2, r7, r2
   15814:	18d2      	adds	r2, r2, r3
   15816:	2301      	movs	r3, #1
   15818:	2106      	movs	r1, #6
   1581a:	2057      	movs	r0, #87	; 0x57
   1581c:	47c0      	blx	r8
   1581e:	0003      	movs	r3, r0
   15820:	7033      	strb	r3, [r6, #0]
	if (res != 0)                                                                                                 /* check result */
   15822:	2363      	movs	r3, #99	; 0x63
   15824:	2220      	movs	r2, #32
   15826:	4694      	mov	ip, r2
   15828:	44bc      	add	ip, r7
   1582a:	4463      	add	r3, ip
   1582c:	781b      	ldrb	r3, [r3, #0]
   1582e:	2b00      	cmp	r3, #0
   15830:	d007      	beq.n	15842 <max30102_read+0xc2>
	{
		handle->debug_print("max30102: read fifo read point failed.\n");                                          /* read fifo read point failed */
   15832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15834:	699b      	ldr	r3, [r3, #24]
   15836:	4ac3      	ldr	r2, [pc, #780]	; (15b44 <max30102_read+0x3c4>)
   15838:	0010      	movs	r0, r2
   1583a:	4798      	blx	r3
		
		return 1;                                                                                                 /* return error */
   1583c:	2301      	movs	r3, #1
   1583e:	f001 f975 	bl	16b2c <max30102_read+0x13ac>
	}
	res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_WRITE_POINTER, (uint8_t *)&write_point, 1);        /* read fifo write point */
   15842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15844:	689b      	ldr	r3, [r3, #8]
   15846:	4698      	mov	r8, r3
   15848:	2363      	movs	r3, #99	; 0x63
   1584a:	2220      	movs	r2, #32
   1584c:	18ba      	adds	r2, r7, r2
   1584e:	18d6      	adds	r6, r2, r3
   15850:	232d      	movs	r3, #45	; 0x2d
   15852:	2220      	movs	r2, #32
   15854:	18ba      	adds	r2, r7, r2
   15856:	18d2      	adds	r2, r2, r3
   15858:	2301      	movs	r3, #1
   1585a:	2104      	movs	r1, #4
   1585c:	2057      	movs	r0, #87	; 0x57
   1585e:	47c0      	blx	r8
   15860:	0003      	movs	r3, r0
   15862:	7033      	strb	r3, [r6, #0]
	if (res != 0)                                                                                                 /* check result */
   15864:	2363      	movs	r3, #99	; 0x63
   15866:	2220      	movs	r2, #32
   15868:	4694      	mov	ip, r2
   1586a:	44bc      	add	ip, r7
   1586c:	4463      	add	r3, ip
   1586e:	781b      	ldrb	r3, [r3, #0]
   15870:	2b00      	cmp	r3, #0
   15872:	d007      	beq.n	15884 <max30102_read+0x104>
	{
		handle->debug_print("max30102: read fifo write point failed.\n");                                         /* read fifo write point failed */
   15874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15876:	699b      	ldr	r3, [r3, #24]
   15878:	4ab3      	ldr	r2, [pc, #716]	; (15b48 <max30102_read+0x3c8>)
   1587a:	0010      	movs	r0, r2
   1587c:	4798      	blx	r3
		
		return 1;                                                                                                 /* return error */
   1587e:	2301      	movs	r3, #1
   15880:	f001 f954 	bl	16b2c <max30102_read+0x13ac>
	}
	
	if (write_point > read_point)                                                                                 /* check point */
   15884:	232d      	movs	r3, #45	; 0x2d
   15886:	2220      	movs	r2, #32
   15888:	4694      	mov	ip, r2
   1588a:	44bc      	add	ip, r7
   1588c:	4463      	add	r3, ip
   1588e:	781a      	ldrb	r2, [r3, #0]
   15890:	232e      	movs	r3, #46	; 0x2e
   15892:	2120      	movs	r1, #32
   15894:	468c      	mov	ip, r1
   15896:	44bc      	add	ip, r7
   15898:	4463      	add	r3, ip
   1589a:	781b      	ldrb	r3, [r3, #0]
   1589c:	429a      	cmp	r2, r3
   1589e:	d913      	bls.n	158c8 <max30102_read+0x148>
	{
		l = write_point - read_point;                                                                             /* get length */
   158a0:	232d      	movs	r3, #45	; 0x2d
   158a2:	2220      	movs	r2, #32
   158a4:	4694      	mov	ip, r2
   158a6:	44bc      	add	ip, r7
   158a8:	4463      	add	r3, ip
   158aa:	7819      	ldrb	r1, [r3, #0]
   158ac:	232e      	movs	r3, #46	; 0x2e
   158ae:	2220      	movs	r2, #32
   158b0:	4694      	mov	ip, r2
   158b2:	44bc      	add	ip, r7
   158b4:	4463      	add	r3, ip
   158b6:	781a      	ldrb	r2, [r3, #0]
   158b8:	23a6      	movs	r3, #166	; 0xa6
   158ba:	2020      	movs	r0, #32
   158bc:	4684      	mov	ip, r0
   158be:	44bc      	add	ip, r7
   158c0:	4463      	add	r3, ip
   158c2:	1a8a      	subs	r2, r1, r2
   158c4:	701a      	strb	r2, [r3, #0]
   158c6:	e014      	b.n	158f2 <max30102_read+0x172>
	}
	else
	{
		l = 32 + write_point - read_point;                                                                        /* get length */
   158c8:	232d      	movs	r3, #45	; 0x2d
   158ca:	2220      	movs	r2, #32
   158cc:	4694      	mov	ip, r2
   158ce:	44bc      	add	ip, r7
   158d0:	4463      	add	r3, ip
   158d2:	781a      	ldrb	r2, [r3, #0]
   158d4:	232e      	movs	r3, #46	; 0x2e
   158d6:	2120      	movs	r1, #32
   158d8:	468c      	mov	ip, r1
   158da:	44bc      	add	ip, r7
   158dc:	4463      	add	r3, ip
   158de:	781b      	ldrb	r3, [r3, #0]
   158e0:	1ad3      	subs	r3, r2, r3
   158e2:	b2da      	uxtb	r2, r3
   158e4:	23a6      	movs	r3, #166	; 0xa6
   158e6:	2120      	movs	r1, #32
   158e8:	468c      	mov	ip, r1
   158ea:	44bc      	add	ip, r7
   158ec:	4463      	add	r3, ip
   158ee:	3220      	adds	r2, #32
   158f0:	701a      	strb	r2, [r3, #0]
	}
	*len = ((*len) > l) ? l : (*len);
   158f2:	6a3b      	ldr	r3, [r7, #32]
   158f4:	781a      	ldrb	r2, [r3, #0]
   158f6:	23a6      	movs	r3, #166	; 0xa6
   158f8:	2120      	movs	r1, #32
   158fa:	468c      	mov	ip, r1
   158fc:	44bc      	add	ip, r7
   158fe:	4463      	add	r3, ip
   15900:	7819      	ldrb	r1, [r3, #0]
   15902:	1c10      	adds	r0, r2, #0
   15904:	b2c2      	uxtb	r2, r0
   15906:	b2cb      	uxtb	r3, r1
   15908:	429a      	cmp	r2, r3
   1590a:	d900      	bls.n	1590e <max30102_read+0x18e>
   1590c:	1c08      	adds	r0, r1, #0
   1590e:	b2c2      	uxtb	r2, r0
   15910:	6a3b      	ldr	r3, [r7, #32]
   15912:	701a      	strb	r2, [r3, #0]
	//handle->delay_ms(10000);
	//*len=1;                                                                             /* set read length */
	res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);                      /* read mode config */
   15914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15916:	689b      	ldr	r3, [r3, #8]
   15918:	4698      	mov	r8, r3
   1591a:	2363      	movs	r3, #99	; 0x63
   1591c:	2220      	movs	r2, #32
   1591e:	18ba      	adds	r2, r7, r2
   15920:	18d6      	adds	r6, r2, r3
   15922:	232f      	movs	r3, #47	; 0x2f
   15924:	2220      	movs	r2, #32
   15926:	18ba      	adds	r2, r7, r2
   15928:	18d2      	adds	r2, r2, r3
   1592a:	2301      	movs	r3, #1
   1592c:	2109      	movs	r1, #9
   1592e:	2057      	movs	r0, #87	; 0x57
   15930:	47c0      	blx	r8
   15932:	0003      	movs	r3, r0
   15934:	7033      	strb	r3, [r6, #0]
	if (res != 0)                                                                                                 /* check result */
   15936:	2363      	movs	r3, #99	; 0x63
   15938:	2220      	movs	r2, #32
   1593a:	4694      	mov	ip, r2
   1593c:	44bc      	add	ip, r7
   1593e:	4463      	add	r3, ip
   15940:	781b      	ldrb	r3, [r3, #0]
   15942:	2b00      	cmp	r3, #0
   15944:	d007      	beq.n	15956 <max30102_read+0x1d6>
	{
		handle->debug_print("max30102: read mode config failed.\n");                                              /* read mode config failed */
   15946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15948:	699b      	ldr	r3, [r3, #24]
   1594a:	4a80      	ldr	r2, [pc, #512]	; (15b4c <max30102_read+0x3cc>)
   1594c:	0010      	movs	r0, r2
   1594e:	4798      	blx	r3
		
		return 1;                                                                                                 /* return error */
   15950:	2301      	movs	r3, #1
   15952:	f001 f8eb 	bl	16b2c <max30102_read+0x13ac>
	}
	mode = (max30102_mode_t)(prev & 0x7);                                                                         /* get mode */
   15956:	232f      	movs	r3, #47	; 0x2f
   15958:	2220      	movs	r2, #32
   1595a:	4694      	mov	ip, r2
   1595c:	44bc      	add	ip, r7
   1595e:	4463      	add	r3, ip
   15960:	781a      	ldrb	r2, [r3, #0]
   15962:	2362      	movs	r3, #98	; 0x62
   15964:	2120      	movs	r1, #32
   15966:	468c      	mov	ip, r1
   15968:	44bc      	add	ip, r7
   1596a:	4463      	add	r3, ip
   1596c:	2107      	movs	r1, #7
   1596e:	400a      	ands	r2, r1
   15970:	701a      	strb	r2, [r3, #0]
	if (mode == MAX30102_MODE_HEART_RATE)                                                                         /* check heart rate mode */
   15972:	2362      	movs	r3, #98	; 0x62
   15974:	2220      	movs	r2, #32
   15976:	4694      	mov	ip, r2
   15978:	44bc      	add	ip, r7
   1597a:	4463      	add	r3, ip
   1597c:	781b      	ldrb	r3, [r3, #0]
   1597e:	2b02      	cmp	r3, #2
   15980:	d107      	bne.n	15992 <max30102_read+0x212>
	{
		k = 3;                                                                                                    /* 3 */
   15982:	23a7      	movs	r3, #167	; 0xa7
   15984:	2220      	movs	r2, #32
   15986:	4694      	mov	ip, r2
   15988:	44bc      	add	ip, r7
   1598a:	4463      	add	r3, ip
   1598c:	2203      	movs	r2, #3
   1598e:	701a      	strb	r2, [r3, #0]
   15990:	e027      	b.n	159e2 <max30102_read+0x262>
	}
	else if (mode == MAX30102_MODE_SPO2)                                                                          /* check spo2 mode*/
   15992:	2362      	movs	r3, #98	; 0x62
   15994:	2220      	movs	r2, #32
   15996:	4694      	mov	ip, r2
   15998:	44bc      	add	ip, r7
   1599a:	4463      	add	r3, ip
   1599c:	781b      	ldrb	r3, [r3, #0]
   1599e:	2b03      	cmp	r3, #3
   159a0:	d107      	bne.n	159b2 <max30102_read+0x232>
	{
		k = 6;                                                                                                    /* 6 */
   159a2:	23a7      	movs	r3, #167	; 0xa7
   159a4:	2220      	movs	r2, #32
   159a6:	4694      	mov	ip, r2
   159a8:	44bc      	add	ip, r7
   159aa:	4463      	add	r3, ip
   159ac:	2206      	movs	r2, #6
   159ae:	701a      	strb	r2, [r3, #0]
   159b0:	e017      	b.n	159e2 <max30102_read+0x262>
	}
	else if (mode == MAX30102_MODE_MULTI_LED)                                                                     /* check multi led mode */
   159b2:	2362      	movs	r3, #98	; 0x62
   159b4:	2220      	movs	r2, #32
   159b6:	4694      	mov	ip, r2
   159b8:	44bc      	add	ip, r7
   159ba:	4463      	add	r3, ip
   159bc:	781b      	ldrb	r3, [r3, #0]
   159be:	2b07      	cmp	r3, #7
   159c0:	d107      	bne.n	159d2 <max30102_read+0x252>
	{
		k = 6;                                                                                                    /* 6 */
   159c2:	23a7      	movs	r3, #167	; 0xa7
   159c4:	2220      	movs	r2, #32
   159c6:	4694      	mov	ip, r2
   159c8:	44bc      	add	ip, r7
   159ca:	4463      	add	r3, ip
   159cc:	2206      	movs	r2, #6
   159ce:	701a      	strb	r2, [r3, #0]
   159d0:	e007      	b.n	159e2 <max30102_read+0x262>
	}
	else
	{
		handle->debug_print("max30105: mode is invalid.\n");                                                      /* mode is invalid */
   159d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   159d4:	699b      	ldr	r3, [r3, #24]
   159d6:	4a5e      	ldr	r2, [pc, #376]	; (15b50 <max30102_read+0x3d0>)
   159d8:	0010      	movs	r0, r2
   159da:	4798      	blx	r3
		
		return 5;                                                                                                 /* return error */
   159dc:	2305      	movs	r3, #5
   159de:	f001 f8a5 	bl	16b2c <max30102_read+0x13ac>
	}
	//FILE *fp;
	//fp = fopen("C:\\Users\\watsom\\Desktop\\output.csv", "w");
	
	res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_SPO2_CONFIG, (uint8_t *)&prev, 1);                      /* read spo2 config */
   159e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   159e4:	689b      	ldr	r3, [r3, #8]
   159e6:	4698      	mov	r8, r3
   159e8:	2363      	movs	r3, #99	; 0x63
   159ea:	2220      	movs	r2, #32
   159ec:	18ba      	adds	r2, r7, r2
   159ee:	18d6      	adds	r6, r2, r3
   159f0:	232f      	movs	r3, #47	; 0x2f
   159f2:	2220      	movs	r2, #32
   159f4:	18ba      	adds	r2, r7, r2
   159f6:	18d2      	adds	r2, r2, r3
   159f8:	2301      	movs	r3, #1
   159fa:	210a      	movs	r1, #10
   159fc:	2057      	movs	r0, #87	; 0x57
   159fe:	47c0      	blx	r8
   15a00:	0003      	movs	r3, r0
   15a02:	7033      	strb	r3, [r6, #0]
	if (res != 0)                                                                                                 /* check result */
   15a04:	2363      	movs	r3, #99	; 0x63
   15a06:	2220      	movs	r2, #32
   15a08:	4694      	mov	ip, r2
   15a0a:	44bc      	add	ip, r7
   15a0c:	4463      	add	r3, ip
   15a0e:	781b      	ldrb	r3, [r3, #0]
   15a10:	2b00      	cmp	r3, #0
   15a12:	d007      	beq.n	15a24 <max30102_read+0x2a4>
	{
		handle->debug_print("max30102: read spo2 config failed.\n");                                              /* read spo2 config failed */
   15a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15a16:	699b      	ldr	r3, [r3, #24]
   15a18:	4a4e      	ldr	r2, [pc, #312]	; (15b54 <max30102_read+0x3d4>)
   15a1a:	0010      	movs	r0, r2
   15a1c:	4798      	blx	r3
		
		return 1;                                                                                                 /* return error */
   15a1e:	2301      	movs	r3, #1
   15a20:	f001 f884 	bl	16b2c <max30102_read+0x13ac>
	}
	prev = prev & 0x3;                                                                                            /* get config */
   15a24:	232f      	movs	r3, #47	; 0x2f
   15a26:	2220      	movs	r2, #32
   15a28:	4694      	mov	ip, r2
   15a2a:	44bc      	add	ip, r7
   15a2c:	4463      	add	r3, ip
   15a2e:	781b      	ldrb	r3, [r3, #0]
   15a30:	2203      	movs	r2, #3
   15a32:	4013      	ands	r3, r2
   15a34:	b2da      	uxtb	r2, r3
   15a36:	232f      	movs	r3, #47	; 0x2f
   15a38:	2120      	movs	r1, #32
   15a3a:	468c      	mov	ip, r1
   15a3c:	44bc      	add	ip, r7
   15a3e:	4463      	add	r3, ip
   15a40:	701a      	strb	r2, [r3, #0]
	if (prev == 0)                                                                                                /* if 0 */
   15a42:	232f      	movs	r3, #47	; 0x2f
   15a44:	2220      	movs	r2, #32
   15a46:	4694      	mov	ip, r2
   15a48:	44bc      	add	ip, r7
   15a4a:	4463      	add	r3, ip
   15a4c:	781b      	ldrb	r3, [r3, #0]
   15a4e:	2b00      	cmp	r3, #0
   15a50:	d107      	bne.n	15a62 <max30102_read+0x2e2>
	{
		bit = 3;                                                                                                  /* 15 bits */
   15a52:	23a5      	movs	r3, #165	; 0xa5
   15a54:	2220      	movs	r2, #32
   15a56:	4694      	mov	ip, r2
   15a58:	44bc      	add	ip, r7
   15a5a:	4463      	add	r3, ip
   15a5c:	2203      	movs	r2, #3
   15a5e:	701a      	strb	r2, [r3, #0]
   15a60:	e026      	b.n	15ab0 <max30102_read+0x330>
	}
	else if (prev == 1)                                                                                           /* if 1 */
   15a62:	232f      	movs	r3, #47	; 0x2f
   15a64:	2220      	movs	r2, #32
   15a66:	4694      	mov	ip, r2
   15a68:	44bc      	add	ip, r7
   15a6a:	4463      	add	r3, ip
   15a6c:	781b      	ldrb	r3, [r3, #0]
   15a6e:	2b01      	cmp	r3, #1
   15a70:	d107      	bne.n	15a82 <max30102_read+0x302>
	{
		bit = 2;                                                                                                  /* 16 bits */
   15a72:	23a5      	movs	r3, #165	; 0xa5
   15a74:	2220      	movs	r2, #32
   15a76:	4694      	mov	ip, r2
   15a78:	44bc      	add	ip, r7
   15a7a:	4463      	add	r3, ip
   15a7c:	2202      	movs	r2, #2
   15a7e:	701a      	strb	r2, [r3, #0]
   15a80:	e016      	b.n	15ab0 <max30102_read+0x330>
	}
	else if (prev == 2)                                                                                           /* if 2 */
   15a82:	232f      	movs	r3, #47	; 0x2f
   15a84:	2220      	movs	r2, #32
   15a86:	4694      	mov	ip, r2
   15a88:	44bc      	add	ip, r7
   15a8a:	4463      	add	r3, ip
   15a8c:	781b      	ldrb	r3, [r3, #0]
   15a8e:	2b02      	cmp	r3, #2
   15a90:	d107      	bne.n	15aa2 <max30102_read+0x322>
	{
		bit = 1;                                                                                                  /* 17 bits */
   15a92:	23a5      	movs	r3, #165	; 0xa5
   15a94:	2220      	movs	r2, #32
   15a96:	4694      	mov	ip, r2
   15a98:	44bc      	add	ip, r7
   15a9a:	4463      	add	r3, ip
   15a9c:	2201      	movs	r2, #1
   15a9e:	701a      	strb	r2, [r3, #0]
   15aa0:	e006      	b.n	15ab0 <max30102_read+0x330>
	}
	else                                                                                                          /* if 3 */
	{
		bit = 0;                                                                                                  /* 18 bits */
   15aa2:	23a5      	movs	r3, #165	; 0xa5
   15aa4:	2220      	movs	r2, #32
   15aa6:	4694      	mov	ip, r2
   15aa8:	44bc      	add	ip, r7
   15aaa:	4463      	add	r3, ip
   15aac:	2200      	movs	r2, #0
   15aae:	701a      	strb	r2, [r3, #0]
	}
	handle->debug_print("Please put your finger on the sensor\n");
   15ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ab2:	699b      	ldr	r3, [r3, #24]
   15ab4:	4a28      	ldr	r2, [pc, #160]	; (15b58 <max30102_read+0x3d8>)
   15ab6:	0010      	movs	r0, r2
   15ab8:	4798      	blx	r3
	//LCD_drawString(31,11,"F I N G E R !",rgb565(255,255,255),rgb565(255,0,0));
	//handle->delay_ms(3000);
		char tmppp[20];
		int tmp1 = 0;
   15aba:	2300      	movs	r3, #0
   15abc:	67fb      	str	r3, [r7, #124]	; 0x7c
	while (1){
		res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_DATA_REGISTER, handle->buf, (*len) * k);
   15abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ac0:	689b      	ldr	r3, [r3, #8]
   15ac2:	4698      	mov	r8, r3
   15ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ac6:	3324      	adds	r3, #36	; 0x24
   15ac8:	0019      	movs	r1, r3
   15aca:	6a3b      	ldr	r3, [r7, #32]
   15acc:	781b      	ldrb	r3, [r3, #0]
   15ace:	b29b      	uxth	r3, r3
   15ad0:	22a7      	movs	r2, #167	; 0xa7
   15ad2:	2020      	movs	r0, #32
   15ad4:	4684      	mov	ip, r0
   15ad6:	44bc      	add	ip, r7
   15ad8:	4462      	add	r2, ip
   15ada:	7812      	ldrb	r2, [r2, #0]
   15adc:	b292      	uxth	r2, r2
   15ade:	4353      	muls	r3, r2
   15ae0:	b29b      	uxth	r3, r3
   15ae2:	2263      	movs	r2, #99	; 0x63
   15ae4:	2020      	movs	r0, #32
   15ae6:	1838      	adds	r0, r7, r0
   15ae8:	1886      	adds	r6, r0, r2
   15aea:	000a      	movs	r2, r1
   15aec:	2107      	movs	r1, #7
   15aee:	2057      	movs	r0, #87	; 0x57
   15af0:	47c0      	blx	r8
   15af2:	0003      	movs	r3, r0
   15af4:	7033      	strb	r3, [r6, #0]
		handle->delay_ms(200);
   15af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15af8:	695b      	ldr	r3, [r3, #20]
   15afa:	20c8      	movs	r0, #200	; 0xc8
   15afc:	4798      	blx	r3
		int tmp1 = ((uint32_t)handle->buf[  0] << 16) |                                               /* get raw red data */
   15afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15b00:	2224      	movs	r2, #36	; 0x24
   15b02:	5c9b      	ldrb	r3, [r3, r2]
   15b04:	041a      	lsls	r2, r3, #16
			((uint32_t)handle->buf[ 1] << 8) |                                                /* get raw red data */
   15b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15b08:	2125      	movs	r1, #37	; 0x25
   15b0a:	5c5b      	ldrb	r3, [r3, r1]
   15b0c:	021b      	lsls	r3, r3, #8
		int tmp1 = ((uint32_t)handle->buf[  0] << 16) |                                               /* get raw red data */
   15b0e:	4313      	orrs	r3, r2
			((uint32_t)handle->buf[ 2] << 0);                                                 /* get raw red data */
   15b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15b12:	2126      	movs	r1, #38	; 0x26
   15b14:	5c52      	ldrb	r2, [r2, r1]
			((uint32_t)handle->buf[ 1] << 8) |                                                /* get raw red data */
   15b16:	4313      	orrs	r3, r2
		int tmp1 = ((uint32_t)handle->buf[  0] << 16) |                                               /* get raw red data */
   15b18:	67bb      	str	r3, [r7, #120]	; 0x78
			//raw_red[i] = tmp1;
			tmp1 &= 0x03FFFF;
   15b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   15b1c:	039b      	lsls	r3, r3, #14
   15b1e:	0b9b      	lsrs	r3, r3, #14
   15b20:	67bb      	str	r3, [r7, #120]	; 0x78
			tmp1 = tmp1 >> bit; 
   15b22:	23a5      	movs	r3, #165	; 0xa5
   15b24:	2220      	movs	r2, #32
   15b26:	4694      	mov	ip, r2
   15b28:	44bc      	add	ip, r7
   15b2a:	4463      	add	r3, ip
   15b2c:	781b      	ldrb	r3, [r3, #0]
   15b2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
   15b30:	411a      	asrs	r2, r3
   15b32:	0013      	movs	r3, r2
   15b34:	67bb      	str	r3, [r7, #120]	; 0x78
			//sprintf(tmppp, "%d", (int)tmp1);
			//handle->debug_print(tmppp);
			if (tmp1>180000){
   15b36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   15b38:	4a08      	ldr	r2, [pc, #32]	; (15b5c <max30102_read+0x3dc>)
   15b3a:	4293      	cmp	r3, r2
   15b3c:	dc10      	bgt.n	15b60 <max30102_read+0x3e0>
	while (1){
   15b3e:	e7be      	b.n	15abe <max30102_read+0x33e>
   15b40:	0003a11c 	.word	0x0003a11c
   15b44:	0003a148 	.word	0x0003a148
   15b48:	0003a170 	.word	0x0003a170
   15b4c:	00039f60 	.word	0x00039f60
   15b50:	0003a19c 	.word	0x0003a19c
   15b54:	0003a1b8 	.word	0x0003a1b8
   15b58:	0003a1dc 	.word	0x0003a1dc
   15b5c:	0002bf20 	.word	0x0002bf20
				break;
   15b60:	46c0      	nop			; (mov r8, r8)
			}		
	}
	handle->debug_print("Finger detected! Do not remove your finger."); 
   15b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15b64:	699b      	ldr	r3, [r3, #24]
   15b66:	4ab1      	ldr	r2, [pc, #708]	; (15e2c <max30102_read+0x6ac>)
   15b68:	0010      	movs	r0, r2
   15b6a:	4798      	blx	r3
	handle->debug_print("Waiting signals to be stable... \n");
   15b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15b6e:	699b      	ldr	r3, [r3, #24]
   15b70:	4aaf      	ldr	r2, [pc, #700]	; (15e30 <max30102_read+0x6b0>)
   15b72:	0010      	movs	r0, r2
   15b74:	4798      	blx	r3
	//LCD_drawString(31,11," S T A B L E",rgb565(255,255,255),rgb565(255,0,0));
	handle->delay_ms(8000);
   15b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15b78:	695b      	ldr	r3, [r3, #20]
   15b7a:	22fa      	movs	r2, #250	; 0xfa
   15b7c:	0152      	lsls	r2, r2, #5
   15b7e:	0010      	movs	r0, r2
   15b80:	4798      	blx	r3
	int recordsize = 30;
   15b82:	231e      	movs	r3, #30
   15b84:	677b      	str	r3, [r7, #116]	; 0x74
	int record[recordsize];
   15b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15b88:	466a      	mov	r2, sp
   15b8a:	607a      	str	r2, [r7, #4]
   15b8c:	1e5a      	subs	r2, r3, #1
   15b8e:	673a      	str	r2, [r7, #112]	; 0x70
   15b90:	001a      	movs	r2, r3
   15b92:	613a      	str	r2, [r7, #16]
   15b94:	2200      	movs	r2, #0
   15b96:	617a      	str	r2, [r7, #20]
   15b98:	6938      	ldr	r0, [r7, #16]
   15b9a:	6979      	ldr	r1, [r7, #20]
   15b9c:	0002      	movs	r2, r0
   15b9e:	0ed2      	lsrs	r2, r2, #27
   15ba0:	000e      	movs	r6, r1
   15ba2:	0176      	lsls	r6, r6, #5
   15ba4:	61fe      	str	r6, [r7, #28]
   15ba6:	69fe      	ldr	r6, [r7, #28]
   15ba8:	4316      	orrs	r6, r2
   15baa:	61fe      	str	r6, [r7, #28]
   15bac:	0002      	movs	r2, r0
   15bae:	0152      	lsls	r2, r2, #5
   15bb0:	61ba      	str	r2, [r7, #24]
   15bb2:	001a      	movs	r2, r3
   15bb4:	60ba      	str	r2, [r7, #8]
   15bb6:	2200      	movs	r2, #0
   15bb8:	60fa      	str	r2, [r7, #12]
   15bba:	68b8      	ldr	r0, [r7, #8]
   15bbc:	68f9      	ldr	r1, [r7, #12]
   15bbe:	0002      	movs	r2, r0
   15bc0:	0ed2      	lsrs	r2, r2, #27
   15bc2:	000e      	movs	r6, r1
   15bc4:	0175      	lsls	r5, r6, #5
   15bc6:	4315      	orrs	r5, r2
   15bc8:	0002      	movs	r2, r0
   15bca:	0154      	lsls	r4, r2, #5
   15bcc:	009b      	lsls	r3, r3, #2
   15bce:	3303      	adds	r3, #3
   15bd0:	3307      	adds	r3, #7
   15bd2:	08db      	lsrs	r3, r3, #3
   15bd4:	00db      	lsls	r3, r3, #3
   15bd6:	466a      	mov	r2, sp
   15bd8:	1ad3      	subs	r3, r2, r3
   15bda:	469d      	mov	sp, r3
   15bdc:	466b      	mov	r3, sp
   15bde:	3303      	adds	r3, #3
   15be0:	089b      	lsrs	r3, r3, #2
   15be2:	009b      	lsls	r3, r3, #2
   15be4:	66fb      	str	r3, [r7, #108]	; 0x6c
	int ii=0;
   15be6:	2300      	movs	r3, #0
   15be8:	229c      	movs	r2, #156	; 0x9c
   15bea:	2120      	movs	r1, #32
   15bec:	468c      	mov	ip, r1
   15bee:	44bc      	add	ip, r7
   15bf0:	4462      	add	r2, ip
   15bf2:	6013      	str	r3, [r2, #0]
	int num = 0;
   15bf4:	2300      	movs	r3, #0
   15bf6:	2298      	movs	r2, #152	; 0x98
   15bf8:	2120      	movs	r1, #32
   15bfa:	468c      	mov	ip, r1
   15bfc:	44bc      	add	ip, r7
   15bfe:	4462      	add	r2, ip
   15c00:	6013      	str	r3, [r2, #0]
	float mean, variance, stddev, sum, peak = 0.0;
   15c02:	2300      	movs	r3, #0
   15c04:	228c      	movs	r2, #140	; 0x8c
   15c06:	2120      	movs	r1, #32
   15c08:	468c      	mov	ip, r1
   15c0a:	44bc      	add	ip, r7
   15c0c:	4462      	add	r2, ip
   15c0e:	6013      	str	r3, [r2, #0]
	float valley = 300000;
   15c10:	4b88      	ldr	r3, [pc, #544]	; (15e34 <max30102_read+0x6b4>)
   15c12:	2288      	movs	r2, #136	; 0x88
   15c14:	2120      	movs	r1, #32
   15c16:	468c      	mov	ip, r1
   15c18:	44bc      	add	ip, r7
   15c1a:	4462      	add	r2, ip
   15c1c:	6013      	str	r3, [r2, #0]
	float heartrate=0;
   15c1e:	2300      	movs	r3, #0
   15c20:	2284      	movs	r2, #132	; 0x84
   15c22:	2120      	movs	r1, #32
   15c24:	468c      	mov	ip, r1
   15c26:	44bc      	add	ip, r7
   15c28:	4462      	add	r2, ip
   15c2a:	6013      	str	r3, [r2, #0]
	uint8_t state, prevlen, peaknum, valleynum = 0; //0: finding peak, 1: finding valley
   15c2c:	2380      	movs	r3, #128	; 0x80
   15c2e:	2220      	movs	r2, #32
   15c30:	4694      	mov	ip, r2
   15c32:	44bc      	add	ip, r7
   15c34:	4463      	add	r3, ip
   15c36:	2200      	movs	r2, #0
   15c38:	701a      	strb	r2, [r3, #0]
	uint8_t prevthres = 20;
   15c3a:	234b      	movs	r3, #75	; 0x4b
   15c3c:	2220      	movs	r2, #32
   15c3e:	4694      	mov	ip, r2
   15c40:	44bc      	add	ip, r7
   15c42:	4463      	add	r3, ip
   15c44:	2214      	movs	r2, #20
   15c46:	701a      	strb	r2, [r3, #0]
	uint32_t initialTime, endTime = 0;
   15c48:	2300      	movs	r3, #0
   15c4a:	667b      	str	r3, [r7, #100]	; 0x64
	peaknum = 0;
   15c4c:	2381      	movs	r3, #129	; 0x81
   15c4e:	2220      	movs	r2, #32
   15c50:	4694      	mov	ip, r2
   15c52:	44bc      	add	ip, r7
   15c54:	4463      	add	r3, ip
   15c56:	2200      	movs	r2, #0
   15c58:	701a      	strb	r2, [r3, #0]
	prevlen = 0;
   15c5a:	2382      	movs	r3, #130	; 0x82
   15c5c:	2220      	movs	r2, #32
   15c5e:	4694      	mov	ip, r2
   15c60:	44bc      	add	ip, r7
   15c62:	4463      	add	r3, ip
   15c64:	2200      	movs	r2, #0
   15c66:	701a      	strb	r2, [r3, #0]
	state = 0;
   15c68:	2383      	movs	r3, #131	; 0x83
   15c6a:	2220      	movs	r2, #32
   15c6c:	4694      	mov	ip, r2
   15c6e:	44bc      	add	ip, r7
   15c70:	4463      	add	r3, ip
   15c72:	2200      	movs	r2, #0
   15c74:	701a      	strb	r2, [r3, #0]
	int startnum = 0;
   15c76:	2300      	movs	r3, #0
   15c78:	229c      	movs	r2, #156	; 0x9c
   15c7a:	18ba      	adds	r2, r7, r2
   15c7c:	6013      	str	r3, [r2, #0]
	while (num<3000){
   15c7e:	f000 fc2c 	bl	164da <max30102_read+0xd5a>
		sum = 0;
   15c82:	2300      	movs	r3, #0
   15c84:	2290      	movs	r2, #144	; 0x90
   15c86:	2120      	movs	r1, #32
   15c88:	468c      	mov	ip, r1
   15c8a:	44bc      	add	ip, r7
   15c8c:	4462      	add	r2, ip
   15c8e:	6013      	str	r3, [r2, #0]
		mean = 0;
   15c90:	2300      	movs	r3, #0
   15c92:	2294      	movs	r2, #148	; 0x94
   15c94:	2120      	movs	r1, #32
   15c96:	468c      	mov	ip, r1
   15c98:	44bc      	add	ip, r7
   15c9a:	4462      	add	r2, ip
   15c9c:	6013      	str	r3, [r2, #0]
		//uint x = 0;
		//while(x<192){
		res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_DATA_REGISTER, handle->buf, (*len) * k);
   15c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ca0:	689d      	ldr	r5, [r3, #8]
   15ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ca4:	3324      	adds	r3, #36	; 0x24
   15ca6:	0019      	movs	r1, r3
   15ca8:	6a3b      	ldr	r3, [r7, #32]
   15caa:	781b      	ldrb	r3, [r3, #0]
   15cac:	b29b      	uxth	r3, r3
   15cae:	22a7      	movs	r2, #167	; 0xa7
   15cb0:	2020      	movs	r0, #32
   15cb2:	4684      	mov	ip, r0
   15cb4:	44bc      	add	ip, r7
   15cb6:	4462      	add	r2, ip
   15cb8:	7812      	ldrb	r2, [r2, #0]
   15cba:	b292      	uxth	r2, r2
   15cbc:	4353      	muls	r3, r2
   15cbe:	b29b      	uxth	r3, r3
   15cc0:	2263      	movs	r2, #99	; 0x63
   15cc2:	2020      	movs	r0, #32
   15cc4:	1838      	adds	r0, r7, r0
   15cc6:	1884      	adds	r4, r0, r2
   15cc8:	000a      	movs	r2, r1
   15cca:	2107      	movs	r1, #7
   15ccc:	2057      	movs	r0, #87	; 0x57
   15cce:	47a8      	blx	r5
   15cd0:	0003      	movs	r3, r0
   15cd2:	7023      	strb	r3, [r4, #0]
		//x+=6;  }
		/* read fifo read point */
		//res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_DATA_REGISTER, handle->buf+6, (*len) * k);
		if (res != 0)                                                                                                 /* check result */
   15cd4:	2363      	movs	r3, #99	; 0x63
   15cd6:	2220      	movs	r2, #32
   15cd8:	4694      	mov	ip, r2
   15cda:	44bc      	add	ip, r7
   15cdc:	4463      	add	r3, ip
   15cde:	781b      	ldrb	r3, [r3, #0]
   15ce0:	2b00      	cmp	r3, #0
   15ce2:	d007      	beq.n	15cf4 <max30102_read+0x574>
		{
			handle->debug_print("max30102: read fifo data register failed.\n");                                       /* read fifo data register failed */
   15ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15ce6:	699b      	ldr	r3, [r3, #24]
   15ce8:	4a53      	ldr	r2, [pc, #332]	; (15e38 <max30102_read+0x6b8>)
   15cea:	0010      	movs	r0, r2
   15cec:	4798      	blx	r3
			
			return 1;                                                                                                 /* return error */
   15cee:	2301      	movs	r3, #1
   15cf0:	f000 ff1a 	bl	16b28 <max30102_read+0x13a8>
		
		//for (i = 0; i < (*len); i++)
		//int raw_red2[32];
		//for (i = 0; i < 1; i++)                                                                                  /* copy data */
		//{
		i=0;
   15cf4:	23a4      	movs	r3, #164	; 0xa4
   15cf6:	2220      	movs	r2, #32
   15cf8:	4694      	mov	ip, r2
   15cfa:	44bc      	add	ip, r7
   15cfc:	4463      	add	r3, ip
   15cfe:	2200      	movs	r2, #0
   15d00:	701a      	strb	r2, [r3, #0]
		if (mode == MAX30102_MODE_HEART_RATE)                                                                     /* check red mode */
   15d02:	2362      	movs	r3, #98	; 0x62
   15d04:	2220      	movs	r2, #32
   15d06:	4694      	mov	ip, r2
   15d08:	44bc      	add	ip, r7
   15d0a:	4463      	add	r3, ip
   15d0c:	781b      	ldrb	r3, [r3, #0]
   15d0e:	2b02      	cmp	r3, #2
   15d10:	d000      	beq.n	15d14 <max30102_read+0x594>
   15d12:	e093      	b.n	15e3c <max30102_read+0x6bc>
		{
			raw_red[i] = ((uint32_t)handle->buf[i * 3 + 0] << 16) |                                               /* get raw red data */
   15d14:	23a4      	movs	r3, #164	; 0xa4
   15d16:	2220      	movs	r2, #32
   15d18:	4694      	mov	ip, r2
   15d1a:	44bc      	add	ip, r7
   15d1c:	4463      	add	r3, ip
   15d1e:	7819      	ldrb	r1, [r3, #0]
   15d20:	23a4      	movs	r3, #164	; 0xa4
   15d22:	2220      	movs	r2, #32
   15d24:	4694      	mov	ip, r2
   15d26:	44bc      	add	ip, r7
   15d28:	4463      	add	r3, ip
   15d2a:	781a      	ldrb	r2, [r3, #0]
   15d2c:	0013      	movs	r3, r2
   15d2e:	005b      	lsls	r3, r3, #1
   15d30:	189b      	adds	r3, r3, r2
   15d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15d34:	2024      	movs	r0, #36	; 0x24
   15d36:	18d3      	adds	r3, r2, r3
   15d38:	181b      	adds	r3, r3, r0
   15d3a:	781b      	ldrb	r3, [r3, #0]
   15d3c:	0418      	lsls	r0, r3, #16
			((uint32_t)handle->buf[i * 3 + 1] << 8) |                                                /* get raw red data */
   15d3e:	23a4      	movs	r3, #164	; 0xa4
   15d40:	2220      	movs	r2, #32
   15d42:	4694      	mov	ip, r2
   15d44:	44bc      	add	ip, r7
   15d46:	4463      	add	r3, ip
   15d48:	781a      	ldrb	r2, [r3, #0]
   15d4a:	0013      	movs	r3, r2
   15d4c:	005b      	lsls	r3, r3, #1
   15d4e:	189b      	adds	r3, r3, r2
   15d50:	3301      	adds	r3, #1
   15d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15d54:	2424      	movs	r4, #36	; 0x24
   15d56:	18d3      	adds	r3, r2, r3
   15d58:	191b      	adds	r3, r3, r4
   15d5a:	781b      	ldrb	r3, [r3, #0]
   15d5c:	021b      	lsls	r3, r3, #8
			raw_red[i] = ((uint32_t)handle->buf[i * 3 + 0] << 16) |                                               /* get raw red data */
   15d5e:	4318      	orrs	r0, r3
			((uint32_t)handle->buf[i * 3 + 2] << 0);                                                 /* get raw red data */
   15d60:	23a4      	movs	r3, #164	; 0xa4
   15d62:	2220      	movs	r2, #32
   15d64:	4694      	mov	ip, r2
   15d66:	44bc      	add	ip, r7
   15d68:	4463      	add	r3, ip
   15d6a:	781a      	ldrb	r2, [r3, #0]
   15d6c:	0013      	movs	r3, r2
   15d6e:	005b      	lsls	r3, r3, #1
   15d70:	189b      	adds	r3, r3, r2
   15d72:	3302      	adds	r3, #2
   15d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15d76:	2424      	movs	r4, #36	; 0x24
   15d78:	18d3      	adds	r3, r2, r3
   15d7a:	191b      	adds	r3, r3, r4
   15d7c:	781b      	ldrb	r3, [r3, #0]
			((uint32_t)handle->buf[i * 3 + 1] << 8) |                                                /* get raw red data */
   15d7e:	0002      	movs	r2, r0
   15d80:	431a      	orrs	r2, r3
			raw_red[i] = ((uint32_t)handle->buf[i * 3 + 0] << 16) |                                               /* get raw red data */
   15d82:	008b      	lsls	r3, r1, #2
   15d84:	21a8      	movs	r1, #168	; 0xa8
   15d86:	468c      	mov	ip, r1
   15d88:	2120      	movs	r1, #32
   15d8a:	4688      	mov	r8, r1
   15d8c:	44b8      	add	r8, r7
   15d8e:	44c4      	add	ip, r8
   15d90:	4463      	add	r3, ip
   15d92:	3b80      	subs	r3, #128	; 0x80
   15d94:	601a      	str	r2, [r3, #0]
			raw_red[i] &= 0x03FFFF;
   15d96:	23a4      	movs	r3, #164	; 0xa4
   15d98:	2220      	movs	r2, #32
   15d9a:	4694      	mov	ip, r2
   15d9c:	44bc      	add	ip, r7
   15d9e:	4463      	add	r3, ip
   15da0:	7819      	ldrb	r1, [r3, #0]
   15da2:	23a4      	movs	r3, #164	; 0xa4
   15da4:	2220      	movs	r2, #32
   15da6:	4694      	mov	ip, r2
   15da8:	44bc      	add	ip, r7
   15daa:	4463      	add	r3, ip
   15dac:	781b      	ldrb	r3, [r3, #0]
   15dae:	009b      	lsls	r3, r3, #2
   15db0:	22a8      	movs	r2, #168	; 0xa8
   15db2:	4694      	mov	ip, r2
   15db4:	2220      	movs	r2, #32
   15db6:	4690      	mov	r8, r2
   15db8:	44b8      	add	r8, r7
   15dba:	44c4      	add	ip, r8
   15dbc:	4463      	add	r3, ip
   15dbe:	3b80      	subs	r3, #128	; 0x80
   15dc0:	681b      	ldr	r3, [r3, #0]
   15dc2:	039b      	lsls	r3, r3, #14
   15dc4:	0b9a      	lsrs	r2, r3, #14
   15dc6:	008b      	lsls	r3, r1, #2
   15dc8:	21a8      	movs	r1, #168	; 0xa8
   15dca:	468c      	mov	ip, r1
   15dcc:	2120      	movs	r1, #32
   15dce:	4688      	mov	r8, r1
   15dd0:	44b8      	add	r8, r7
   15dd2:	44c4      	add	ip, r8
   15dd4:	4463      	add	r3, ip
   15dd6:	3b80      	subs	r3, #128	; 0x80
   15dd8:	601a      	str	r2, [r3, #0]
			raw_red[i] = raw_red[i] >> bit;                                                                       /* right shift bit */
   15dda:	23a4      	movs	r3, #164	; 0xa4
   15ddc:	2220      	movs	r2, #32
   15dde:	4694      	mov	ip, r2
   15de0:	44bc      	add	ip, r7
   15de2:	4463      	add	r3, ip
   15de4:	7819      	ldrb	r1, [r3, #0]
   15de6:	23a4      	movs	r3, #164	; 0xa4
   15de8:	2220      	movs	r2, #32
   15dea:	4694      	mov	ip, r2
   15dec:	44bc      	add	ip, r7
   15dee:	4463      	add	r3, ip
   15df0:	781b      	ldrb	r3, [r3, #0]
   15df2:	009b      	lsls	r3, r3, #2
   15df4:	22a8      	movs	r2, #168	; 0xa8
   15df6:	4694      	mov	ip, r2
   15df8:	2220      	movs	r2, #32
   15dfa:	4690      	mov	r8, r2
   15dfc:	44b8      	add	r8, r7
   15dfe:	44c4      	add	ip, r8
   15e00:	4463      	add	r3, ip
   15e02:	3b80      	subs	r3, #128	; 0x80
   15e04:	681a      	ldr	r2, [r3, #0]
   15e06:	23a5      	movs	r3, #165	; 0xa5
   15e08:	2020      	movs	r0, #32
   15e0a:	4684      	mov	ip, r0
   15e0c:	44bc      	add	ip, r7
   15e0e:	4463      	add	r3, ip
   15e10:	781b      	ldrb	r3, [r3, #0]
   15e12:	40da      	lsrs	r2, r3
   15e14:	008b      	lsls	r3, r1, #2
   15e16:	21a8      	movs	r1, #168	; 0xa8
   15e18:	468c      	mov	ip, r1
   15e1a:	2120      	movs	r1, #32
   15e1c:	4688      	mov	r8, r1
   15e1e:	44b8      	add	r8, r7
   15e20:	44c4      	add	ip, r8
   15e22:	4463      	add	r3, ip
   15e24:	3b80      	subs	r3, #128	; 0x80
   15e26:	601a      	str	r2, [r3, #0]
   15e28:	e124      	b.n	16074 <max30102_read+0x8f4>
   15e2a:	46c0      	nop			; (mov r8, r8)
   15e2c:	0003a204 	.word	0x0003a204
   15e30:	0003a230 	.word	0x0003a230
   15e34:	48927c00 	.word	0x48927c00
   15e38:	0003a254 	.word	0x0003a254
		}
		else
		{
			raw_red[i] = ((uint32_t)handle->buf[i * 6 + 0] << 16) |                                               /* get raw red data */
   15e3c:	23a4      	movs	r3, #164	; 0xa4
   15e3e:	2220      	movs	r2, #32
   15e40:	4694      	mov	ip, r2
   15e42:	44bc      	add	ip, r7
   15e44:	4463      	add	r3, ip
   15e46:	7819      	ldrb	r1, [r3, #0]
   15e48:	23a4      	movs	r3, #164	; 0xa4
   15e4a:	2220      	movs	r2, #32
   15e4c:	4694      	mov	ip, r2
   15e4e:	44bc      	add	ip, r7
   15e50:	4463      	add	r3, ip
   15e52:	781a      	ldrb	r2, [r3, #0]
   15e54:	0013      	movs	r3, r2
   15e56:	005b      	lsls	r3, r3, #1
   15e58:	189b      	adds	r3, r3, r2
   15e5a:	005b      	lsls	r3, r3, #1
   15e5c:	0018      	movs	r0, r3
   15e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15e60:	2224      	movs	r2, #36	; 0x24
   15e62:	181b      	adds	r3, r3, r0
   15e64:	189b      	adds	r3, r3, r2
   15e66:	781b      	ldrb	r3, [r3, #0]
   15e68:	0418      	lsls	r0, r3, #16
			((uint32_t)handle->buf[i * 6 + 1] << 8) |                                                /* get raw red data */
   15e6a:	23a4      	movs	r3, #164	; 0xa4
   15e6c:	2220      	movs	r2, #32
   15e6e:	4694      	mov	ip, r2
   15e70:	44bc      	add	ip, r7
   15e72:	4463      	add	r3, ip
   15e74:	781a      	ldrb	r2, [r3, #0]
   15e76:	0013      	movs	r3, r2
   15e78:	005b      	lsls	r3, r3, #1
   15e7a:	189b      	adds	r3, r3, r2
   15e7c:	005b      	lsls	r3, r3, #1
   15e7e:	3301      	adds	r3, #1
   15e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15e82:	2424      	movs	r4, #36	; 0x24
   15e84:	18d3      	adds	r3, r2, r3
   15e86:	191b      	adds	r3, r3, r4
   15e88:	781b      	ldrb	r3, [r3, #0]
   15e8a:	021b      	lsls	r3, r3, #8
			raw_red[i] = ((uint32_t)handle->buf[i * 6 + 0] << 16) |                                               /* get raw red data */
   15e8c:	4318      	orrs	r0, r3
			((uint32_t)handle->buf[i * 6 + 2] << 0);                                                 /* get raw red data */
   15e8e:	23a4      	movs	r3, #164	; 0xa4
   15e90:	2220      	movs	r2, #32
   15e92:	4694      	mov	ip, r2
   15e94:	44bc      	add	ip, r7
   15e96:	4463      	add	r3, ip
   15e98:	781a      	ldrb	r2, [r3, #0]
   15e9a:	0013      	movs	r3, r2
   15e9c:	005b      	lsls	r3, r3, #1
   15e9e:	189b      	adds	r3, r3, r2
   15ea0:	005b      	lsls	r3, r3, #1
   15ea2:	3302      	adds	r3, #2
   15ea4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15ea6:	2424      	movs	r4, #36	; 0x24
   15ea8:	18d3      	adds	r3, r2, r3
   15eaa:	191b      	adds	r3, r3, r4
   15eac:	781b      	ldrb	r3, [r3, #0]
			((uint32_t)handle->buf[i * 6 + 1] << 8) |                                                /* get raw red data */
   15eae:	0002      	movs	r2, r0
   15eb0:	431a      	orrs	r2, r3
			raw_red[i] = ((uint32_t)handle->buf[i * 6 + 0] << 16) |                                               /* get raw red data */
   15eb2:	008b      	lsls	r3, r1, #2
   15eb4:	21a8      	movs	r1, #168	; 0xa8
   15eb6:	468c      	mov	ip, r1
   15eb8:	2120      	movs	r1, #32
   15eba:	4688      	mov	r8, r1
   15ebc:	44b8      	add	r8, r7
   15ebe:	44c4      	add	ip, r8
   15ec0:	4463      	add	r3, ip
   15ec2:	3b80      	subs	r3, #128	; 0x80
   15ec4:	601a      	str	r2, [r3, #0]
			//raw_red[i] = tmp;
			raw_red[i] &= 0x03FFFF;
   15ec6:	23a4      	movs	r3, #164	; 0xa4
   15ec8:	2220      	movs	r2, #32
   15eca:	4694      	mov	ip, r2
   15ecc:	44bc      	add	ip, r7
   15ece:	4463      	add	r3, ip
   15ed0:	7819      	ldrb	r1, [r3, #0]
   15ed2:	23a4      	movs	r3, #164	; 0xa4
   15ed4:	2220      	movs	r2, #32
   15ed6:	4694      	mov	ip, r2
   15ed8:	44bc      	add	ip, r7
   15eda:	4463      	add	r3, ip
   15edc:	781b      	ldrb	r3, [r3, #0]
   15ede:	009b      	lsls	r3, r3, #2
   15ee0:	22a8      	movs	r2, #168	; 0xa8
   15ee2:	4694      	mov	ip, r2
   15ee4:	2220      	movs	r2, #32
   15ee6:	4690      	mov	r8, r2
   15ee8:	44b8      	add	r8, r7
   15eea:	44c4      	add	ip, r8
   15eec:	4463      	add	r3, ip
   15eee:	3b80      	subs	r3, #128	; 0x80
   15ef0:	681b      	ldr	r3, [r3, #0]
   15ef2:	039b      	lsls	r3, r3, #14
   15ef4:	0b9a      	lsrs	r2, r3, #14
   15ef6:	008b      	lsls	r3, r1, #2
   15ef8:	21a8      	movs	r1, #168	; 0xa8
   15efa:	468c      	mov	ip, r1
   15efc:	2120      	movs	r1, #32
   15efe:	4688      	mov	r8, r1
   15f00:	44b8      	add	r8, r7
   15f02:	44c4      	add	ip, r8
   15f04:	4463      	add	r3, ip
   15f06:	3b80      	subs	r3, #128	; 0x80
   15f08:	601a      	str	r2, [r3, #0]
			raw_red[i] = raw_red[i] >> bit;                                                                       /* right shift bit */
   15f0a:	23a4      	movs	r3, #164	; 0xa4
   15f0c:	2220      	movs	r2, #32
   15f0e:	4694      	mov	ip, r2
   15f10:	44bc      	add	ip, r7
   15f12:	4463      	add	r3, ip
   15f14:	7819      	ldrb	r1, [r3, #0]
   15f16:	23a4      	movs	r3, #164	; 0xa4
   15f18:	2220      	movs	r2, #32
   15f1a:	4694      	mov	ip, r2
   15f1c:	44bc      	add	ip, r7
   15f1e:	4463      	add	r3, ip
   15f20:	781b      	ldrb	r3, [r3, #0]
   15f22:	009b      	lsls	r3, r3, #2
   15f24:	22a8      	movs	r2, #168	; 0xa8
   15f26:	4694      	mov	ip, r2
   15f28:	2220      	movs	r2, #32
   15f2a:	4690      	mov	r8, r2
   15f2c:	44b8      	add	r8, r7
   15f2e:	44c4      	add	ip, r8
   15f30:	4463      	add	r3, ip
   15f32:	3b80      	subs	r3, #128	; 0x80
   15f34:	681a      	ldr	r2, [r3, #0]
   15f36:	23a5      	movs	r3, #165	; 0xa5
   15f38:	2020      	movs	r0, #32
   15f3a:	4684      	mov	ip, r0
   15f3c:	44bc      	add	ip, r7
   15f3e:	4463      	add	r3, ip
   15f40:	781b      	ldrb	r3, [r3, #0]
   15f42:	40da      	lsrs	r2, r3
   15f44:	008b      	lsls	r3, r1, #2
   15f46:	21a8      	movs	r1, #168	; 0xa8
   15f48:	468c      	mov	ip, r1
   15f4a:	2120      	movs	r1, #32
   15f4c:	4688      	mov	r8, r1
   15f4e:	44b8      	add	r8, r7
   15f50:	44c4      	add	ip, r8
   15f52:	4463      	add	r3, ip
   15f54:	3b80      	subs	r3, #128	; 0x80
   15f56:	601a      	str	r2, [r3, #0]
			//raw_red[i] = raw_red2[i];
			raw_ir[i] = ((uint32_t)handle->buf[i * 6 + 3] << 16) |                                                /* get raw ir data */
   15f58:	23a4      	movs	r3, #164	; 0xa4
   15f5a:	2220      	movs	r2, #32
   15f5c:	4694      	mov	ip, r2
   15f5e:	44bc      	add	ip, r7
   15f60:	4463      	add	r3, ip
   15f62:	7819      	ldrb	r1, [r3, #0]
   15f64:	23a4      	movs	r3, #164	; 0xa4
   15f66:	2220      	movs	r2, #32
   15f68:	4694      	mov	ip, r2
   15f6a:	44bc      	add	ip, r7
   15f6c:	4463      	add	r3, ip
   15f6e:	781a      	ldrb	r2, [r3, #0]
   15f70:	0013      	movs	r3, r2
   15f72:	005b      	lsls	r3, r3, #1
   15f74:	189b      	adds	r3, r3, r2
   15f76:	005b      	lsls	r3, r3, #1
   15f78:	3303      	adds	r3, #3
   15f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15f7c:	2024      	movs	r0, #36	; 0x24
   15f7e:	18d3      	adds	r3, r2, r3
   15f80:	181b      	adds	r3, r3, r0
   15f82:	781b      	ldrb	r3, [r3, #0]
   15f84:	0418      	lsls	r0, r3, #16
			((uint32_t)handle->buf[i * 6 + 4] << 8) |                                                 /* get raw ir data */
   15f86:	23a4      	movs	r3, #164	; 0xa4
   15f88:	2220      	movs	r2, #32
   15f8a:	4694      	mov	ip, r2
   15f8c:	44bc      	add	ip, r7
   15f8e:	4463      	add	r3, ip
   15f90:	781a      	ldrb	r2, [r3, #0]
   15f92:	0013      	movs	r3, r2
   15f94:	005b      	lsls	r3, r3, #1
   15f96:	189b      	adds	r3, r3, r2
   15f98:	005b      	lsls	r3, r3, #1
   15f9a:	3304      	adds	r3, #4
   15f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15f9e:	2424      	movs	r4, #36	; 0x24
   15fa0:	18d3      	adds	r3, r2, r3
   15fa2:	191b      	adds	r3, r3, r4
   15fa4:	781b      	ldrb	r3, [r3, #0]
   15fa6:	021b      	lsls	r3, r3, #8
			raw_ir[i] = ((uint32_t)handle->buf[i * 6 + 3] << 16) |                                                /* get raw ir data */
   15fa8:	4318      	orrs	r0, r3
			((uint32_t)handle->buf[i * 6 + 5] << 0);                                                  /* get raw ir data */
   15faa:	23a4      	movs	r3, #164	; 0xa4
   15fac:	2220      	movs	r2, #32
   15fae:	4694      	mov	ip, r2
   15fb0:	44bc      	add	ip, r7
   15fb2:	4463      	add	r3, ip
   15fb4:	781a      	ldrb	r2, [r3, #0]
   15fb6:	0013      	movs	r3, r2
   15fb8:	005b      	lsls	r3, r3, #1
   15fba:	189b      	adds	r3, r3, r2
   15fbc:	005b      	lsls	r3, r3, #1
   15fbe:	3305      	adds	r3, #5
   15fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15fc2:	2424      	movs	r4, #36	; 0x24
   15fc4:	18d3      	adds	r3, r2, r3
   15fc6:	191b      	adds	r3, r3, r4
   15fc8:	781b      	ldrb	r3, [r3, #0]
			((uint32_t)handle->buf[i * 6 + 4] << 8) |                                                 /* get raw ir data */
   15fca:	0002      	movs	r2, r0
   15fcc:	431a      	orrs	r2, r3
			raw_ir[i] = ((uint32_t)handle->buf[i * 6 + 3] << 16) |                                                /* get raw ir data */
   15fce:	008b      	lsls	r3, r1, #2
   15fd0:	21a8      	movs	r1, #168	; 0xa8
   15fd2:	468c      	mov	ip, r1
   15fd4:	2120      	movs	r1, #32
   15fd6:	4688      	mov	r8, r1
   15fd8:	44b8      	add	r8, r7
   15fda:	44c4      	add	ip, r8
   15fdc:	4463      	add	r3, ip
   15fde:	3b84      	subs	r3, #132	; 0x84
   15fe0:	601a      	str	r2, [r3, #0]
			raw_ir[i] &= 0x03FFFF;
   15fe2:	23a4      	movs	r3, #164	; 0xa4
   15fe4:	2220      	movs	r2, #32
   15fe6:	4694      	mov	ip, r2
   15fe8:	44bc      	add	ip, r7
   15fea:	4463      	add	r3, ip
   15fec:	7819      	ldrb	r1, [r3, #0]
   15fee:	23a4      	movs	r3, #164	; 0xa4
   15ff0:	2220      	movs	r2, #32
   15ff2:	4694      	mov	ip, r2
   15ff4:	44bc      	add	ip, r7
   15ff6:	4463      	add	r3, ip
   15ff8:	781b      	ldrb	r3, [r3, #0]
   15ffa:	009b      	lsls	r3, r3, #2
   15ffc:	22a8      	movs	r2, #168	; 0xa8
   15ffe:	4694      	mov	ip, r2
   16000:	2220      	movs	r2, #32
   16002:	4690      	mov	r8, r2
   16004:	44b8      	add	r8, r7
   16006:	44c4      	add	ip, r8
   16008:	4463      	add	r3, ip
   1600a:	3b84      	subs	r3, #132	; 0x84
   1600c:	681b      	ldr	r3, [r3, #0]
   1600e:	039b      	lsls	r3, r3, #14
   16010:	0b9a      	lsrs	r2, r3, #14
   16012:	008b      	lsls	r3, r1, #2
   16014:	21a8      	movs	r1, #168	; 0xa8
   16016:	468c      	mov	ip, r1
   16018:	2120      	movs	r1, #32
   1601a:	4688      	mov	r8, r1
   1601c:	44b8      	add	r8, r7
   1601e:	44c4      	add	ip, r8
   16020:	4463      	add	r3, ip
   16022:	3b84      	subs	r3, #132	; 0x84
   16024:	601a      	str	r2, [r3, #0]
			raw_ir[i] = raw_ir[i] >> bit;                                                                         /* right shift bit */
   16026:	23a4      	movs	r3, #164	; 0xa4
   16028:	2220      	movs	r2, #32
   1602a:	4694      	mov	ip, r2
   1602c:	44bc      	add	ip, r7
   1602e:	4463      	add	r3, ip
   16030:	7819      	ldrb	r1, [r3, #0]
   16032:	23a4      	movs	r3, #164	; 0xa4
   16034:	2220      	movs	r2, #32
   16036:	4694      	mov	ip, r2
   16038:	44bc      	add	ip, r7
   1603a:	4463      	add	r3, ip
   1603c:	781b      	ldrb	r3, [r3, #0]
   1603e:	009b      	lsls	r3, r3, #2
   16040:	22a8      	movs	r2, #168	; 0xa8
   16042:	4694      	mov	ip, r2
   16044:	2220      	movs	r2, #32
   16046:	4690      	mov	r8, r2
   16048:	44b8      	add	r8, r7
   1604a:	44c4      	add	ip, r8
   1604c:	4463      	add	r3, ip
   1604e:	3b84      	subs	r3, #132	; 0x84
   16050:	681a      	ldr	r2, [r3, #0]
   16052:	23a5      	movs	r3, #165	; 0xa5
   16054:	2020      	movs	r0, #32
   16056:	4684      	mov	ip, r0
   16058:	44bc      	add	ip, r7
   1605a:	4463      	add	r3, ip
   1605c:	781b      	ldrb	r3, [r3, #0]
   1605e:	40da      	lsrs	r2, r3
   16060:	008b      	lsls	r3, r1, #2
   16062:	21a8      	movs	r1, #168	; 0xa8
   16064:	468c      	mov	ip, r1
   16066:	2120      	movs	r1, #32
   16068:	4688      	mov	r8, r1
   1606a:	44b8      	add	r8, r7
   1606c:	44c4      	add	ip, r8
   1606e:	4463      	add	r3, ip
   16070:	3b84      	subs	r3, #132	; 0x84
   16072:	601a      	str	r2, [r3, #0]
			//sprintf(tmpp, "%d", (int)raw_red[i]);
			//handle->debug_print(tmpp);
			
			//fprintf(fp, "%s\n", tmpp);
		}
		record[num%recordsize] = raw_red[i];
   16074:	2398      	movs	r3, #152	; 0x98
   16076:	2220      	movs	r2, #32
   16078:	4694      	mov	ip, r2
   1607a:	44bc      	add	ip, r7
   1607c:	4463      	add	r3, ip
   1607e:	681a      	ldr	r2, [r3, #0]
   16080:	4be1      	ldr	r3, [pc, #900]	; (16408 <max30102_read+0xc88>)
   16082:	6f79      	ldr	r1, [r7, #116]	; 0x74
   16084:	0010      	movs	r0, r2
   16086:	4798      	blx	r3
   16088:	000b      	movs	r3, r1
   1608a:	001a      	movs	r2, r3
   1608c:	23a4      	movs	r3, #164	; 0xa4
   1608e:	2120      	movs	r1, #32
   16090:	468c      	mov	ip, r1
   16092:	44bc      	add	ip, r7
   16094:	4463      	add	r3, ip
   16096:	781b      	ldrb	r3, [r3, #0]
   16098:	009b      	lsls	r3, r3, #2
   1609a:	21a8      	movs	r1, #168	; 0xa8
   1609c:	468c      	mov	ip, r1
   1609e:	2120      	movs	r1, #32
   160a0:	4688      	mov	r8, r1
   160a2:	44b8      	add	r8, r7
   160a4:	44c4      	add	ip, r8
   160a6:	4463      	add	r3, ip
   160a8:	3b80      	subs	r3, #128	; 0x80
   160aa:	681b      	ldr	r3, [r3, #0]
   160ac:	0019      	movs	r1, r3
   160ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   160b0:	0092      	lsls	r2, r2, #2
   160b2:	50d1      	str	r1, [r2, r3]
		if (num<recordsize){
   160b4:	2398      	movs	r3, #152	; 0x98
   160b6:	2220      	movs	r2, #32
   160b8:	4694      	mov	ip, r2
   160ba:	44bc      	add	ip, r7
   160bc:	4463      	add	r3, ip
   160be:	681a      	ldr	r2, [r3, #0]
   160c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   160c2:	429a      	cmp	r2, r3
   160c4:	da3d      	bge.n	16142 <max30102_read+0x9c2>
			num+=1;
   160c6:	2398      	movs	r3, #152	; 0x98
   160c8:	2220      	movs	r2, #32
   160ca:	4694      	mov	ip, r2
   160cc:	44bc      	add	ip, r7
   160ce:	4463      	add	r3, ip
   160d0:	681b      	ldr	r3, [r3, #0]
   160d2:	3301      	adds	r3, #1
   160d4:	2298      	movs	r2, #152	; 0x98
   160d6:	2120      	movs	r1, #32
   160d8:	468c      	mov	ip, r1
   160da:	44bc      	add	ip, r7
   160dc:	4462      	add	r2, ip
   160de:	6013      	str	r3, [r2, #0]
   160e0:	2383      	movs	r3, #131	; 0x83
   160e2:	2220      	movs	r2, #32
   160e4:	4694      	mov	ip, r2
   160e6:	44bc      	add	ip, r7
   160e8:	4463      	add	r3, ip
   160ea:	2283      	movs	r2, #131	; 0x83
   160ec:	2120      	movs	r1, #32
   160ee:	468c      	mov	ip, r1
   160f0:	44bc      	add	ip, r7
   160f2:	4462      	add	r2, ip
   160f4:	7812      	ldrb	r2, [r2, #0]
   160f6:	701a      	strb	r2, [r3, #0]
   160f8:	2382      	movs	r3, #130	; 0x82
   160fa:	2220      	movs	r2, #32
   160fc:	4694      	mov	ip, r2
   160fe:	44bc      	add	ip, r7
   16100:	4463      	add	r3, ip
   16102:	2282      	movs	r2, #130	; 0x82
   16104:	2120      	movs	r1, #32
   16106:	468c      	mov	ip, r1
   16108:	44bc      	add	ip, r7
   1610a:	4462      	add	r2, ip
   1610c:	7812      	ldrb	r2, [r2, #0]
   1610e:	701a      	strb	r2, [r3, #0]
   16110:	2381      	movs	r3, #129	; 0x81
   16112:	2220      	movs	r2, #32
   16114:	4694      	mov	ip, r2
   16116:	44bc      	add	ip, r7
   16118:	4463      	add	r3, ip
   1611a:	2281      	movs	r2, #129	; 0x81
   1611c:	2120      	movs	r1, #32
   1611e:	468c      	mov	ip, r1
   16120:	44bc      	add	ip, r7
   16122:	4462      	add	r2, ip
   16124:	7812      	ldrb	r2, [r2, #0]
   16126:	701a      	strb	r2, [r3, #0]
   16128:	2380      	movs	r3, #128	; 0x80
   1612a:	2220      	movs	r2, #32
   1612c:	4694      	mov	ip, r2
   1612e:	44bc      	add	ip, r7
   16130:	4463      	add	r3, ip
   16132:	2280      	movs	r2, #128	; 0x80
   16134:	2120      	movs	r1, #32
   16136:	468c      	mov	ip, r1
   16138:	44bc      	add	ip, r7
   1613a:	4462      	add	r2, ip
   1613c:	7812      	ldrb	r2, [r2, #0]
   1613e:	701a      	strb	r2, [r3, #0]
			continue;
   16140:	e1cb      	b.n	164da <max30102_read+0xd5a>
		}
		else{
			for (ii = 0; ii < recordsize; ii++) {
   16142:	2300      	movs	r3, #0
   16144:	229c      	movs	r2, #156	; 0x9c
   16146:	2120      	movs	r1, #32
   16148:	468c      	mov	ip, r1
   1614a:	44bc      	add	ip, r7
   1614c:	4462      	add	r2, ip
   1614e:	6013      	str	r3, [r2, #0]
   16150:	e029      	b.n	161a6 <max30102_read+0xa26>
				mean += record[ii] ;
   16152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16154:	229c      	movs	r2, #156	; 0x9c
   16156:	2120      	movs	r1, #32
   16158:	468c      	mov	ip, r1
   1615a:	44bc      	add	ip, r7
   1615c:	4462      	add	r2, ip
   1615e:	6812      	ldr	r2, [r2, #0]
   16160:	0092      	lsls	r2, r2, #2
   16162:	58d2      	ldr	r2, [r2, r3]
   16164:	4ba9      	ldr	r3, [pc, #676]	; (1640c <max30102_read+0xc8c>)
   16166:	0010      	movs	r0, r2
   16168:	4798      	blx	r3
   1616a:	1c02      	adds	r2, r0, #0
   1616c:	4ba8      	ldr	r3, [pc, #672]	; (16410 <max30102_read+0xc90>)
   1616e:	1c11      	adds	r1, r2, #0
   16170:	2294      	movs	r2, #148	; 0x94
   16172:	2020      	movs	r0, #32
   16174:	4684      	mov	ip, r0
   16176:	44bc      	add	ip, r7
   16178:	4462      	add	r2, ip
   1617a:	6810      	ldr	r0, [r2, #0]
   1617c:	4798      	blx	r3
   1617e:	1c03      	adds	r3, r0, #0
   16180:	2294      	movs	r2, #148	; 0x94
   16182:	2120      	movs	r1, #32
   16184:	468c      	mov	ip, r1
   16186:	44bc      	add	ip, r7
   16188:	4462      	add	r2, ip
   1618a:	6013      	str	r3, [r2, #0]
			for (ii = 0; ii < recordsize; ii++) {
   1618c:	239c      	movs	r3, #156	; 0x9c
   1618e:	2220      	movs	r2, #32
   16190:	4694      	mov	ip, r2
   16192:	44bc      	add	ip, r7
   16194:	4463      	add	r3, ip
   16196:	681b      	ldr	r3, [r3, #0]
   16198:	3301      	adds	r3, #1
   1619a:	229c      	movs	r2, #156	; 0x9c
   1619c:	2120      	movs	r1, #32
   1619e:	468c      	mov	ip, r1
   161a0:	44bc      	add	ip, r7
   161a2:	4462      	add	r2, ip
   161a4:	6013      	str	r3, [r2, #0]
   161a6:	239c      	movs	r3, #156	; 0x9c
   161a8:	2220      	movs	r2, #32
   161aa:	4694      	mov	ip, r2
   161ac:	44bc      	add	ip, r7
   161ae:	4463      	add	r3, ip
   161b0:	681a      	ldr	r2, [r3, #0]
   161b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   161b4:	429a      	cmp	r2, r3
   161b6:	dbcc      	blt.n	16152 <max30102_read+0x9d2>
			}
			mean = mean/ recordsize;
   161b8:	4b94      	ldr	r3, [pc, #592]	; (1640c <max30102_read+0xc8c>)
   161ba:	6f78      	ldr	r0, [r7, #116]	; 0x74
   161bc:	4798      	blx	r3
   161be:	1c02      	adds	r2, r0, #0
   161c0:	4b94      	ldr	r3, [pc, #592]	; (16414 <max30102_read+0xc94>)
   161c2:	1c11      	adds	r1, r2, #0
   161c4:	2294      	movs	r2, #148	; 0x94
   161c6:	2020      	movs	r0, #32
   161c8:	4684      	mov	ip, r0
   161ca:	44bc      	add	ip, r7
   161cc:	4462      	add	r2, ip
   161ce:	6810      	ldr	r0, [r2, #0]
   161d0:	4798      	blx	r3
   161d2:	1c03      	adds	r3, r0, #0
   161d4:	2294      	movs	r2, #148	; 0x94
   161d6:	2120      	movs	r1, #32
   161d8:	468c      	mov	ip, r1
   161da:	44bc      	add	ip, r7
   161dc:	4462      	add	r2, ip
   161de:	6013      	str	r3, [r2, #0]
			
			for (ii = 0; ii < recordsize; ii++) {
   161e0:	2300      	movs	r3, #0
   161e2:	229c      	movs	r2, #156	; 0x9c
   161e4:	2120      	movs	r1, #32
   161e6:	468c      	mov	ip, r1
   161e8:	44bc      	add	ip, r7
   161ea:	4462      	add	r2, ip
   161ec:	6013      	str	r3, [r2, #0]
   161ee:	e040      	b.n	16272 <max30102_read+0xaf2>
				float testmp = record[ii] - mean;
   161f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   161f2:	229c      	movs	r2, #156	; 0x9c
   161f4:	2120      	movs	r1, #32
   161f6:	468c      	mov	ip, r1
   161f8:	44bc      	add	ip, r7
   161fa:	4462      	add	r2, ip
   161fc:	6812      	ldr	r2, [r2, #0]
   161fe:	0092      	lsls	r2, r2, #2
   16200:	58d2      	ldr	r2, [r2, r3]
   16202:	4b82      	ldr	r3, [pc, #520]	; (1640c <max30102_read+0xc8c>)
   16204:	0010      	movs	r0, r2
   16206:	4798      	blx	r3
   16208:	1c02      	adds	r2, r0, #0
   1620a:	4b83      	ldr	r3, [pc, #524]	; (16418 <max30102_read+0xc98>)
   1620c:	2194      	movs	r1, #148	; 0x94
   1620e:	2020      	movs	r0, #32
   16210:	4684      	mov	ip, r0
   16212:	44bc      	add	ip, r7
   16214:	4461      	add	r1, ip
   16216:	6809      	ldr	r1, [r1, #0]
   16218:	1c10      	adds	r0, r2, #0
   1621a:	4798      	blx	r3
   1621c:	1c03      	adds	r3, r0, #0
   1621e:	663b      	str	r3, [r7, #96]	; 0x60
				sum += (testmp < 0) ? -testmp : testmp;
   16220:	4b7e      	ldr	r3, [pc, #504]	; (1641c <max30102_read+0xc9c>)
   16222:	2100      	movs	r1, #0
   16224:	6e38      	ldr	r0, [r7, #96]	; 0x60
   16226:	4798      	blx	r3
   16228:	1e03      	subs	r3, r0, #0
   1622a:	d004      	beq.n	16236 <max30102_read+0xab6>
   1622c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1622e:	2280      	movs	r2, #128	; 0x80
   16230:	0612      	lsls	r2, r2, #24
   16232:	4053      	eors	r3, r2
   16234:	e000      	b.n	16238 <max30102_read+0xab8>
   16236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16238:	4a75      	ldr	r2, [pc, #468]	; (16410 <max30102_read+0xc90>)
   1623a:	1c19      	adds	r1, r3, #0
   1623c:	2390      	movs	r3, #144	; 0x90
   1623e:	2020      	movs	r0, #32
   16240:	4684      	mov	ip, r0
   16242:	44bc      	add	ip, r7
   16244:	4463      	add	r3, ip
   16246:	6818      	ldr	r0, [r3, #0]
   16248:	4790      	blx	r2
   1624a:	1c03      	adds	r3, r0, #0
   1624c:	2290      	movs	r2, #144	; 0x90
   1624e:	2120      	movs	r1, #32
   16250:	468c      	mov	ip, r1
   16252:	44bc      	add	ip, r7
   16254:	4462      	add	r2, ip
   16256:	6013      	str	r3, [r2, #0]
			for (ii = 0; ii < recordsize; ii++) {
   16258:	239c      	movs	r3, #156	; 0x9c
   1625a:	2220      	movs	r2, #32
   1625c:	4694      	mov	ip, r2
   1625e:	44bc      	add	ip, r7
   16260:	4463      	add	r3, ip
   16262:	681b      	ldr	r3, [r3, #0]
   16264:	3301      	adds	r3, #1
   16266:	229c      	movs	r2, #156	; 0x9c
   16268:	2120      	movs	r1, #32
   1626a:	468c      	mov	ip, r1
   1626c:	44bc      	add	ip, r7
   1626e:	4462      	add	r2, ip
   16270:	6013      	str	r3, [r2, #0]
   16272:	239c      	movs	r3, #156	; 0x9c
   16274:	2220      	movs	r2, #32
   16276:	4694      	mov	ip, r2
   16278:	44bc      	add	ip, r7
   1627a:	4463      	add	r3, ip
   1627c:	681a      	ldr	r2, [r3, #0]
   1627e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16280:	429a      	cmp	r2, r3
   16282:	dbb5      	blt.n	161f0 <max30102_read+0xa70>
			
			//char tmpp[20];
			//sprintf(tmpp, "%d", (int)sum);
			//handle->debug_print(tmpp);
			
			if (state == 0){// finding peak
   16284:	2383      	movs	r3, #131	; 0x83
   16286:	2220      	movs	r2, #32
   16288:	4694      	mov	ip, r2
   1628a:	44bc      	add	ip, r7
   1628c:	4463      	add	r3, ip
   1628e:	781b      	ldrb	r3, [r3, #0]
   16290:	2b00      	cmp	r3, #0
   16292:	d000      	beq.n	16296 <max30102_read+0xb16>
   16294:	e093      	b.n	163be <max30102_read+0xc3e>
				if (prevlen<prevthres){
   16296:	2382      	movs	r3, #130	; 0x82
   16298:	2220      	movs	r2, #32
   1629a:	18ba      	adds	r2, r7, r2
   1629c:	18d2      	adds	r2, r2, r3
   1629e:	234b      	movs	r3, #75	; 0x4b
   162a0:	2120      	movs	r1, #32
   162a2:	468c      	mov	ip, r1
   162a4:	44bc      	add	ip, r7
   162a6:	4463      	add	r3, ip
   162a8:	7812      	ldrb	r2, [r2, #0]
   162aa:	781b      	ldrb	r3, [r3, #0]
   162ac:	429a      	cmp	r2, r3
   162ae:	d230      	bcs.n	16312 <max30102_read+0xb92>
					peak = (peak > sum)? peak:sum;
   162b0:	4b5b      	ldr	r3, [pc, #364]	; (16420 <max30102_read+0xca0>)
   162b2:	2290      	movs	r2, #144	; 0x90
   162b4:	2120      	movs	r1, #32
   162b6:	468c      	mov	ip, r1
   162b8:	44bc      	add	ip, r7
   162ba:	4462      	add	r2, ip
   162bc:	6811      	ldr	r1, [r2, #0]
   162be:	228c      	movs	r2, #140	; 0x8c
   162c0:	2020      	movs	r0, #32
   162c2:	4684      	mov	ip, r0
   162c4:	44bc      	add	ip, r7
   162c6:	4462      	add	r2, ip
   162c8:	6810      	ldr	r0, [r2, #0]
   162ca:	4798      	blx	r3
   162cc:	1e03      	subs	r3, r0, #0
   162ce:	d006      	beq.n	162de <max30102_read+0xb5e>
   162d0:	238c      	movs	r3, #140	; 0x8c
   162d2:	2220      	movs	r2, #32
   162d4:	4694      	mov	ip, r2
   162d6:	44bc      	add	ip, r7
   162d8:	4463      	add	r3, ip
   162da:	681b      	ldr	r3, [r3, #0]
   162dc:	e005      	b.n	162ea <max30102_read+0xb6a>
   162de:	2390      	movs	r3, #144	; 0x90
   162e0:	2220      	movs	r2, #32
   162e2:	4694      	mov	ip, r2
   162e4:	44bc      	add	ip, r7
   162e6:	4463      	add	r3, ip
   162e8:	681b      	ldr	r3, [r3, #0]
   162ea:	228c      	movs	r2, #140	; 0x8c
   162ec:	2120      	movs	r1, #32
   162ee:	468c      	mov	ip, r1
   162f0:	44bc      	add	ip, r7
   162f2:	4462      	add	r2, ip
   162f4:	6013      	str	r3, [r2, #0]
					prevlen+=1;
   162f6:	2382      	movs	r3, #130	; 0x82
   162f8:	2220      	movs	r2, #32
   162fa:	4694      	mov	ip, r2
   162fc:	44bc      	add	ip, r7
   162fe:	4463      	add	r3, ip
   16300:	2282      	movs	r2, #130	; 0x82
   16302:	2120      	movs	r1, #32
   16304:	468c      	mov	ip, r1
   16306:	44bc      	add	ip, r7
   16308:	4462      	add	r2, ip
   1630a:	7812      	ldrb	r2, [r2, #0]
   1630c:	3201      	adds	r2, #1
   1630e:	701a      	strb	r2, [r3, #0]
   16310:	e0d6      	b.n	164c0 <max30102_read+0xd40>
				}
				else{
					if (sum > peak){
   16312:	4b43      	ldr	r3, [pc, #268]	; (16420 <max30102_read+0xca0>)
   16314:	228c      	movs	r2, #140	; 0x8c
   16316:	2120      	movs	r1, #32
   16318:	468c      	mov	ip, r1
   1631a:	44bc      	add	ip, r7
   1631c:	4462      	add	r2, ip
   1631e:	6811      	ldr	r1, [r2, #0]
   16320:	2290      	movs	r2, #144	; 0x90
   16322:	2020      	movs	r0, #32
   16324:	4684      	mov	ip, r0
   16326:	44bc      	add	ip, r7
   16328:	4462      	add	r2, ip
   1632a:	6810      	ldr	r0, [r2, #0]
   1632c:	4798      	blx	r3
   1632e:	1e03      	subs	r3, r0, #0
   16330:	d100      	bne.n	16334 <max30102_read+0xbb4>
   16332:	e0c5      	b.n	164c0 <max30102_read+0xd40>
						//handle->debug_print("peak");
						peaknum +=1 ;
   16334:	2381      	movs	r3, #129	; 0x81
   16336:	2220      	movs	r2, #32
   16338:	4694      	mov	ip, r2
   1633a:	44bc      	add	ip, r7
   1633c:	4463      	add	r3, ip
   1633e:	2281      	movs	r2, #129	; 0x81
   16340:	2120      	movs	r1, #32
   16342:	468c      	mov	ip, r1
   16344:	44bc      	add	ip, r7
   16346:	4462      	add	r2, ip
   16348:	7812      	ldrb	r2, [r2, #0]
   1634a:	3201      	adds	r2, #1
   1634c:	701a      	strb	r2, [r3, #0]
						state = 1;
   1634e:	2383      	movs	r3, #131	; 0x83
   16350:	2220      	movs	r2, #32
   16352:	4694      	mov	ip, r2
   16354:	44bc      	add	ip, r7
   16356:	4463      	add	r3, ip
   16358:	2201      	movs	r2, #1
   1635a:	701a      	strb	r2, [r3, #0]
						peak = 0;
   1635c:	2300      	movs	r3, #0
   1635e:	228c      	movs	r2, #140	; 0x8c
   16360:	2120      	movs	r1, #32
   16362:	468c      	mov	ip, r1
   16364:	44bc      	add	ip, r7
   16366:	4462      	add	r2, ip
   16368:	6013      	str	r3, [r2, #0]
						prevlen = 0;
   1636a:	2382      	movs	r3, #130	; 0x82
   1636c:	2220      	movs	r2, #32
   1636e:	4694      	mov	ip, r2
   16370:	44bc      	add	ip, r7
   16372:	4463      	add	r3, ip
   16374:	2200      	movs	r2, #0
   16376:	701a      	strb	r2, [r3, #0]
						//clock_t clock()
						uint32_t current_count2 = 0;
   16378:	2300      	movs	r3, #0
   1637a:	65fb      	str	r3, [r7, #92]	; 0x5c
						if (peaknum == 1){
   1637c:	2381      	movs	r3, #129	; 0x81
   1637e:	2220      	movs	r2, #32
   16380:	4694      	mov	ip, r2
   16382:	44bc      	add	ip, r7
   16384:	4463      	add	r3, ip
   16386:	781b      	ldrb	r3, [r3, #0]
   16388:	2b01      	cmp	r3, #1
   1638a:	d10e      	bne.n	163aa <max30102_read+0xc2a>
							startnum = num;
   1638c:	2398      	movs	r3, #152	; 0x98
   1638e:	2220      	movs	r2, #32
   16390:	4694      	mov	ip, r2
   16392:	44bc      	add	ip, r7
   16394:	4463      	add	r3, ip
   16396:	681b      	ldr	r3, [r3, #0]
   16398:	229c      	movs	r2, #156	; 0x9c
   1639a:	18ba      	adds	r2, r7, r2
   1639c:	6013      	str	r3, [r2, #0]
							handle->debug_print("Measuring");
   1639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   163a0:	699b      	ldr	r3, [r3, #24]
   163a2:	4a20      	ldr	r2, [pc, #128]	; (16424 <max30102_read+0xca4>)
   163a4:	0010      	movs	r0, r2
   163a6:	4798      	blx	r3
   163a8:	e08a      	b.n	164c0 <max30102_read+0xd40>
							//current_count2 = tc_get_count_value(&instance_tc);
							//handle->delay_ms(20000);
							//current_count2 = tc_get_count_value(&instance_tc);
							//handle->delay_ms(20000);
						}
						else if (peaknum == 15)
   163aa:	2381      	movs	r3, #129	; 0x81
   163ac:	2220      	movs	r2, #32
   163ae:	4694      	mov	ip, r2
   163b0:	44bc      	add	ip, r7
   163b2:	4463      	add	r3, ip
   163b4:	781b      	ldrb	r3, [r3, #0]
   163b6:	2b0f      	cmp	r3, #15
   163b8:	d000      	beq.n	163bc <max30102_read+0xc3c>
   163ba:	e081      	b.n	164c0 <max30102_read+0xd40>
						{
							//uint32_t current_count1 = 0;
							//current_count1 = tc_get_count_value(&instance_tc);
							//startnum = num-startnum;
							//heartrate = 15*3000/(float)(num-startnum)*60/22;
							break;
   163bc:	e098      	b.n	164f0 <max30102_read+0xd70>
						}
					}
				}
			}
			else{// find valley
				if (prevlen<prevthres){
   163be:	2382      	movs	r3, #130	; 0x82
   163c0:	2220      	movs	r2, #32
   163c2:	18ba      	adds	r2, r7, r2
   163c4:	18d2      	adds	r2, r2, r3
   163c6:	234b      	movs	r3, #75	; 0x4b
   163c8:	2120      	movs	r1, #32
   163ca:	468c      	mov	ip, r1
   163cc:	44bc      	add	ip, r7
   163ce:	4463      	add	r3, ip
   163d0:	7812      	ldrb	r2, [r2, #0]
   163d2:	781b      	ldrb	r3, [r3, #0]
   163d4:	429a      	cmp	r2, r3
   163d6:	d241      	bcs.n	1645c <max30102_read+0xcdc>
					valley = (valley < sum)? valley:sum;
   163d8:	4b10      	ldr	r3, [pc, #64]	; (1641c <max30102_read+0xc9c>)
   163da:	2290      	movs	r2, #144	; 0x90
   163dc:	2120      	movs	r1, #32
   163de:	468c      	mov	ip, r1
   163e0:	44bc      	add	ip, r7
   163e2:	4462      	add	r2, ip
   163e4:	6811      	ldr	r1, [r2, #0]
   163e6:	2288      	movs	r2, #136	; 0x88
   163e8:	2020      	movs	r0, #32
   163ea:	4684      	mov	ip, r0
   163ec:	44bc      	add	ip, r7
   163ee:	4462      	add	r2, ip
   163f0:	6810      	ldr	r0, [r2, #0]
   163f2:	4798      	blx	r3
   163f4:	1e03      	subs	r3, r0, #0
   163f6:	d017      	beq.n	16428 <max30102_read+0xca8>
   163f8:	2388      	movs	r3, #136	; 0x88
   163fa:	2220      	movs	r2, #32
   163fc:	4694      	mov	ip, r2
   163fe:	44bc      	add	ip, r7
   16400:	4463      	add	r3, ip
   16402:	681b      	ldr	r3, [r3, #0]
   16404:	e016      	b.n	16434 <max30102_read+0xcb4>
   16406:	46c0      	nop			; (mov r8, r8)
   16408:	00035cd1 	.word	0x00035cd1
   1640c:	00036a61 	.word	0x00036a61
   16410:	00035da5 	.word	0x00035da5
   16414:	000360c9 	.word	0x000360c9
   16418:	000366e9 	.word	0x000366e9
   1641c:	00035d01 	.word	0x00035d01
   16420:	00035d29 	.word	0x00035d29
   16424:	0003a280 	.word	0x0003a280
   16428:	2390      	movs	r3, #144	; 0x90
   1642a:	2220      	movs	r2, #32
   1642c:	4694      	mov	ip, r2
   1642e:	44bc      	add	ip, r7
   16430:	4463      	add	r3, ip
   16432:	681b      	ldr	r3, [r3, #0]
   16434:	2288      	movs	r2, #136	; 0x88
   16436:	2120      	movs	r1, #32
   16438:	468c      	mov	ip, r1
   1643a:	44bc      	add	ip, r7
   1643c:	4462      	add	r2, ip
   1643e:	6013      	str	r3, [r2, #0]
					prevlen+=1;
   16440:	2382      	movs	r3, #130	; 0x82
   16442:	2220      	movs	r2, #32
   16444:	4694      	mov	ip, r2
   16446:	44bc      	add	ip, r7
   16448:	4463      	add	r3, ip
   1644a:	2282      	movs	r2, #130	; 0x82
   1644c:	2120      	movs	r1, #32
   1644e:	468c      	mov	ip, r1
   16450:	44bc      	add	ip, r7
   16452:	4462      	add	r2, ip
   16454:	7812      	ldrb	r2, [r2, #0]
   16456:	3201      	adds	r2, #1
   16458:	701a      	strb	r2, [r3, #0]
   1645a:	e031      	b.n	164c0 <max30102_read+0xd40>
				}
				else{
					if (sum < valley){
   1645c:	4b65      	ldr	r3, [pc, #404]	; (165f4 <max30102_read+0xe74>)
   1645e:	2288      	movs	r2, #136	; 0x88
   16460:	2120      	movs	r1, #32
   16462:	468c      	mov	ip, r1
   16464:	44bc      	add	ip, r7
   16466:	4462      	add	r2, ip
   16468:	6811      	ldr	r1, [r2, #0]
   1646a:	2290      	movs	r2, #144	; 0x90
   1646c:	2020      	movs	r0, #32
   1646e:	4684      	mov	ip, r0
   16470:	44bc      	add	ip, r7
   16472:	4462      	add	r2, ip
   16474:	6810      	ldr	r0, [r2, #0]
   16476:	4798      	blx	r3
   16478:	1e03      	subs	r3, r0, #0
   1647a:	d021      	beq.n	164c0 <max30102_read+0xd40>
						valleynum +=1 ;
   1647c:	2380      	movs	r3, #128	; 0x80
   1647e:	2220      	movs	r2, #32
   16480:	4694      	mov	ip, r2
   16482:	44bc      	add	ip, r7
   16484:	4463      	add	r3, ip
   16486:	2280      	movs	r2, #128	; 0x80
   16488:	2120      	movs	r1, #32
   1648a:	468c      	mov	ip, r1
   1648c:	44bc      	add	ip, r7
   1648e:	4462      	add	r2, ip
   16490:	7812      	ldrb	r2, [r2, #0]
   16492:	3201      	adds	r2, #1
   16494:	701a      	strb	r2, [r3, #0]
						state = 0;
   16496:	2383      	movs	r3, #131	; 0x83
   16498:	2220      	movs	r2, #32
   1649a:	4694      	mov	ip, r2
   1649c:	44bc      	add	ip, r7
   1649e:	4463      	add	r3, ip
   164a0:	2200      	movs	r2, #0
   164a2:	701a      	strb	r2, [r3, #0]
						valley = 300000;
   164a4:	4b54      	ldr	r3, [pc, #336]	; (165f8 <max30102_read+0xe78>)
   164a6:	2288      	movs	r2, #136	; 0x88
   164a8:	2120      	movs	r1, #32
   164aa:	468c      	mov	ip, r1
   164ac:	44bc      	add	ip, r7
   164ae:	4462      	add	r2, ip
   164b0:	6013      	str	r3, [r2, #0]
						prevlen = 0;
   164b2:	2382      	movs	r3, #130	; 0x82
   164b4:	2220      	movs	r2, #32
   164b6:	4694      	mov	ip, r2
   164b8:	44bc      	add	ip, r7
   164ba:	4463      	add	r3, ip
   164bc:	2200      	movs	r2, #0
   164be:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			
		}
		num+=1;
   164c0:	2398      	movs	r3, #152	; 0x98
   164c2:	2220      	movs	r2, #32
   164c4:	4694      	mov	ip, r2
   164c6:	44bc      	add	ip, r7
   164c8:	4463      	add	r3, ip
   164ca:	681b      	ldr	r3, [r3, #0]
   164cc:	3301      	adds	r3, #1
   164ce:	2298      	movs	r2, #152	; 0x98
   164d0:	2120      	movs	r1, #32
   164d2:	468c      	mov	ip, r1
   164d4:	44bc      	add	ip, r7
   164d6:	4462      	add	r2, ip
   164d8:	6013      	str	r3, [r2, #0]
	while (num<3000){
   164da:	2398      	movs	r3, #152	; 0x98
   164dc:	2220      	movs	r2, #32
   164de:	4694      	mov	ip, r2
   164e0:	44bc      	add	ip, r7
   164e2:	4463      	add	r3, ip
   164e4:	681b      	ldr	r3, [r3, #0]
   164e6:	4a45      	ldr	r2, [pc, #276]	; (165fc <max30102_read+0xe7c>)
   164e8:	4293      	cmp	r3, r2
   164ea:	dc01      	bgt.n	164f0 <max30102_read+0xd70>
   164ec:	f7ff fbc9 	bl	15c82 <max30102_read+0x502>
		
		//}
	}
	//char tmppp[20];
	if (peaknum>=12){
   164f0:	2381      	movs	r3, #129	; 0x81
   164f2:	2220      	movs	r2, #32
   164f4:	4694      	mov	ip, r2
   164f6:	44bc      	add	ip, r7
   164f8:	4463      	add	r3, ip
   164fa:	781b      	ldrb	r3, [r3, #0]
   164fc:	2b0b      	cmp	r3, #11
   164fe:	d937      	bls.n	16570 <max30102_read+0xdf0>
	heartrate = 15*3000/(float)(num-startnum)*60/22;
   16500:	2398      	movs	r3, #152	; 0x98
   16502:	2220      	movs	r2, #32
   16504:	4694      	mov	ip, r2
   16506:	44bc      	add	ip, r7
   16508:	4463      	add	r3, ip
   1650a:	681a      	ldr	r2, [r3, #0]
   1650c:	239c      	movs	r3, #156	; 0x9c
   1650e:	18fb      	adds	r3, r7, r3
   16510:	681b      	ldr	r3, [r3, #0]
   16512:	1ad2      	subs	r2, r2, r3
   16514:	4b3a      	ldr	r3, [pc, #232]	; (16600 <max30102_read+0xe80>)
   16516:	0010      	movs	r0, r2
   16518:	4798      	blx	r3
   1651a:	1c02      	adds	r2, r0, #0
   1651c:	4b39      	ldr	r3, [pc, #228]	; (16604 <max30102_read+0xe84>)
   1651e:	1c11      	adds	r1, r2, #0
   16520:	4839      	ldr	r0, [pc, #228]	; (16608 <max30102_read+0xe88>)
   16522:	4798      	blx	r3
   16524:	1c03      	adds	r3, r0, #0
   16526:	1c1a      	adds	r2, r3, #0
   16528:	4b38      	ldr	r3, [pc, #224]	; (1660c <max30102_read+0xe8c>)
   1652a:	4939      	ldr	r1, [pc, #228]	; (16610 <max30102_read+0xe90>)
   1652c:	1c10      	adds	r0, r2, #0
   1652e:	4798      	blx	r3
   16530:	1c03      	adds	r3, r0, #0
   16532:	1c1a      	adds	r2, r3, #0
   16534:	4b33      	ldr	r3, [pc, #204]	; (16604 <max30102_read+0xe84>)
   16536:	4937      	ldr	r1, [pc, #220]	; (16614 <max30102_read+0xe94>)
   16538:	1c10      	adds	r0, r2, #0
   1653a:	4798      	blx	r3
   1653c:	1c03      	adds	r3, r0, #0
   1653e:	2284      	movs	r2, #132	; 0x84
   16540:	2120      	movs	r1, #32
   16542:	468c      	mov	ip, r1
   16544:	44bc      	add	ip, r7
   16546:	4462      	add	r2, ip
   16548:	6013      	str	r3, [r2, #0]
	sprintf(tmppp, "%d", (int)heartrate);
   1654a:	4b33      	ldr	r3, [pc, #204]	; (16618 <max30102_read+0xe98>)
   1654c:	2284      	movs	r2, #132	; 0x84
   1654e:	2120      	movs	r1, #32
   16550:	468c      	mov	ip, r1
   16552:	44bc      	add	ip, r7
   16554:	4462      	add	r2, ip
   16556:	6810      	ldr	r0, [r2, #0]
   16558:	4798      	blx	r3
   1655a:	0002      	movs	r2, r0
   1655c:	492f      	ldr	r1, [pc, #188]	; (1661c <max30102_read+0xe9c>)
   1655e:	2310      	movs	r3, #16
   16560:	2020      	movs	r0, #32
   16562:	4684      	mov	ip, r0
   16564:	44bc      	add	ip, r7
   16566:	4463      	add	r3, ip
   16568:	0018      	movs	r0, r3
   1656a:	4b2d      	ldr	r3, [pc, #180]	; (16620 <max30102_read+0xea0>)
   1656c:	4798      	blx	r3
   1656e:	e009      	b.n	16584 <max30102_read+0xe04>
	//handle->debug_print(tmppp);
	}
	else
	{
		handle->debug_print("Unstable signal. Please try again.");
   16570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16572:	699b      	ldr	r3, [r3, #24]
   16574:	4a2b      	ldr	r2, [pc, #172]	; (16624 <max30102_read+0xea4>)
   16576:	0010      	movs	r0, r2
   16578:	4798      	blx	r3
		handle->debug_print("Information not sent.");
   1657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1657c:	699b      	ldr	r3, [r3, #24]
   1657e:	4a2a      	ldr	r2, [pc, #168]	; (16628 <max30102_read+0xea8>)
   16580:	0010      	movs	r0, r2
   16582:	4798      	blx	r3
		//LCD_drawString(31,11,"   F A I L E D !   ",rgb565(255,255,255),rgb565(255,0,0));
	}
	//sprintf(tmppp, "%d", peaknum);
	//handle->debug_print(tmppp);
	
	int spo2out = 0;
   16584:	2300      	movs	r3, #0
   16586:	2298      	movs	r2, #152	; 0x98
   16588:	18ba      	adds	r2, r7, r2
   1658a:	6013      	str	r3, [r2, #0]
		int lenn = 50;
   1658c:	2332      	movs	r3, #50	; 0x32
   1658e:	65bb      	str	r3, [r7, #88]	; 0x58
		float redvec=0;
   16590:	2300      	movs	r3, #0
   16592:	2294      	movs	r2, #148	; 0x94
   16594:	18ba      	adds	r2, r7, r2
   16596:	6013      	str	r3, [r2, #0]
		float irvec=0;
   16598:	2300      	movs	r3, #0
   1659a:	2290      	movs	r2, #144	; 0x90
   1659c:	18ba      	adds	r2, r7, r2
   1659e:	6013      	str	r3, [r2, #0]
		float maxred = 0;
   165a0:	2300      	movs	r3, #0
   165a2:	228c      	movs	r2, #140	; 0x8c
   165a4:	18ba      	adds	r2, r7, r2
   165a6:	6013      	str	r3, [r2, #0]
		float maxir = 0;
   165a8:	2300      	movs	r3, #0
   165aa:	2288      	movs	r2, #136	; 0x88
   165ac:	18ba      	adds	r2, r7, r2
   165ae:	6013      	str	r3, [r2, #0]
		int kk =0;
   165b0:	2300      	movs	r3, #0
   165b2:	2284      	movs	r2, #132	; 0x84
   165b4:	18ba      	adds	r2, r7, r2
   165b6:	6013      	str	r3, [r2, #0]
	for(kk=0;kk<3;kk++){	
   165b8:	2300      	movs	r3, #0
   165ba:	2284      	movs	r2, #132	; 0x84
   165bc:	18ba      	adds	r2, r7, r2
   165be:	6013      	str	r3, [r2, #0]
   165c0:	e25e      	b.n	16a80 <max30102_read+0x1300>

		//int lenn = 50;
		redvec=0;
   165c2:	2300      	movs	r3, #0
   165c4:	2294      	movs	r2, #148	; 0x94
   165c6:	18ba      	adds	r2, r7, r2
   165c8:	6013      	str	r3, [r2, #0]
		irvec=0;
   165ca:	2300      	movs	r3, #0
   165cc:	2290      	movs	r2, #144	; 0x90
   165ce:	18ba      	adds	r2, r7, r2
   165d0:	6013      	str	r3, [r2, #0]
		maxred = 0;
   165d2:	2300      	movs	r3, #0
   165d4:	228c      	movs	r2, #140	; 0x8c
   165d6:	18ba      	adds	r2, r7, r2
   165d8:	6013      	str	r3, [r2, #0]
		maxir = 0;
   165da:	2300      	movs	r3, #0
   165dc:	2288      	movs	r2, #136	; 0x88
   165de:	18ba      	adds	r2, r7, r2
   165e0:	6013      	str	r3, [r2, #0]
	for (ii=0; ii<50;ii++){
   165e2:	2300      	movs	r3, #0
   165e4:	229c      	movs	r2, #156	; 0x9c
   165e6:	2120      	movs	r1, #32
   165e8:	468c      	mov	ip, r1
   165ea:	44bc      	add	ip, r7
   165ec:	4462      	add	r2, ip
   165ee:	6013      	str	r3, [r2, #0]
   165f0:	e1bc      	b.n	1696c <max30102_read+0x11ec>
   165f2:	46c0      	nop			; (mov r8, r8)
   165f4:	00035d01 	.word	0x00035d01
   165f8:	48927c00 	.word	0x48927c00
   165fc:	00000bb7 	.word	0x00000bb7
   16600:	00036a61 	.word	0x00036a61
   16604:	000360c9 	.word	0x000360c9
   16608:	472fc800 	.word	0x472fc800
   1660c:	000364a9 	.word	0x000364a9
   16610:	42700000 	.word	0x42700000
   16614:	41b00000 	.word	0x41b00000
   16618:	00036a21 	.word	0x00036a21
   1661c:	0003a28c 	.word	0x0003a28c
   16620:	000387c5 	.word	0x000387c5
   16624:	0003a290 	.word	0x0003a290
   16628:	0003a2b4 	.word	0x0003a2b4
		res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_DATA_REGISTER, handle->buf, (*len) * k);
   1662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1662e:	689d      	ldr	r5, [r3, #8]
   16630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16632:	3324      	adds	r3, #36	; 0x24
   16634:	0019      	movs	r1, r3
   16636:	6a3b      	ldr	r3, [r7, #32]
   16638:	781b      	ldrb	r3, [r3, #0]
   1663a:	b29b      	uxth	r3, r3
   1663c:	22a7      	movs	r2, #167	; 0xa7
   1663e:	2020      	movs	r0, #32
   16640:	4684      	mov	ip, r0
   16642:	44bc      	add	ip, r7
   16644:	4462      	add	r2, ip
   16646:	7812      	ldrb	r2, [r2, #0]
   16648:	b292      	uxth	r2, r2
   1664a:	4353      	muls	r3, r2
   1664c:	b29b      	uxth	r3, r3
   1664e:	2263      	movs	r2, #99	; 0x63
   16650:	2020      	movs	r0, #32
   16652:	1838      	adds	r0, r7, r0
   16654:	1884      	adds	r4, r0, r2
   16656:	000a      	movs	r2, r1
   16658:	2107      	movs	r1, #7
   1665a:	2057      	movs	r0, #87	; 0x57
   1665c:	47a8      	blx	r5
   1665e:	0003      	movs	r3, r0
   16660:	7023      	strb	r3, [r4, #0]
	int tmp = ((uint32_t)handle->buf[ 0] << 16) |                                               /* get raw red data */
   16662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16664:	2224      	movs	r2, #36	; 0x24
   16666:	5c9b      	ldrb	r3, [r3, r2]
   16668:	041a      	lsls	r2, r3, #16
			((uint32_t)handle->buf[  1] << 8) |                                                /* get raw red data */
   1666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1666c:	2125      	movs	r1, #37	; 0x25
   1666e:	5c5b      	ldrb	r3, [r3, r1]
   16670:	021b      	lsls	r3, r3, #8
	int tmp = ((uint32_t)handle->buf[ 0] << 16) |                                               /* get raw red data */
   16672:	4313      	orrs	r3, r2
			((uint32_t)handle->buf[  2] << 0);                                                 /* get raw red data */
   16674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16676:	2126      	movs	r1, #38	; 0x26
   16678:	5c52      	ldrb	r2, [r2, r1]
			((uint32_t)handle->buf[  1] << 8) |                                                /* get raw red data */
   1667a:	4313      	orrs	r3, r2
	int tmp = ((uint32_t)handle->buf[ 0] << 16) |                                               /* get raw red data */
   1667c:	657b      	str	r3, [r7, #84]	; 0x54
			raw_red[i] = tmp;
   1667e:	23a4      	movs	r3, #164	; 0xa4
   16680:	2220      	movs	r2, #32
   16682:	4694      	mov	ip, r2
   16684:	44bc      	add	ip, r7
   16686:	4463      	add	r3, ip
   16688:	781b      	ldrb	r3, [r3, #0]
   1668a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1668c:	009b      	lsls	r3, r3, #2
   1668e:	21a8      	movs	r1, #168	; 0xa8
   16690:	468c      	mov	ip, r1
   16692:	2120      	movs	r1, #32
   16694:	4688      	mov	r8, r1
   16696:	44b8      	add	r8, r7
   16698:	44c4      	add	ip, r8
   1669a:	4463      	add	r3, ip
   1669c:	3b80      	subs	r3, #128	; 0x80
   1669e:	601a      	str	r2, [r3, #0]
			raw_red[i] &= 0x03FFFF;
   166a0:	23a4      	movs	r3, #164	; 0xa4
   166a2:	2220      	movs	r2, #32
   166a4:	4694      	mov	ip, r2
   166a6:	44bc      	add	ip, r7
   166a8:	4463      	add	r3, ip
   166aa:	7819      	ldrb	r1, [r3, #0]
   166ac:	23a4      	movs	r3, #164	; 0xa4
   166ae:	2220      	movs	r2, #32
   166b0:	4694      	mov	ip, r2
   166b2:	44bc      	add	ip, r7
   166b4:	4463      	add	r3, ip
   166b6:	781b      	ldrb	r3, [r3, #0]
   166b8:	009b      	lsls	r3, r3, #2
   166ba:	22a8      	movs	r2, #168	; 0xa8
   166bc:	4694      	mov	ip, r2
   166be:	2220      	movs	r2, #32
   166c0:	4690      	mov	r8, r2
   166c2:	44b8      	add	r8, r7
   166c4:	44c4      	add	ip, r8
   166c6:	4463      	add	r3, ip
   166c8:	3b80      	subs	r3, #128	; 0x80
   166ca:	681b      	ldr	r3, [r3, #0]
   166cc:	039b      	lsls	r3, r3, #14
   166ce:	0b9a      	lsrs	r2, r3, #14
   166d0:	008b      	lsls	r3, r1, #2
   166d2:	21a8      	movs	r1, #168	; 0xa8
   166d4:	468c      	mov	ip, r1
   166d6:	2120      	movs	r1, #32
   166d8:	4688      	mov	r8, r1
   166da:	44b8      	add	r8, r7
   166dc:	44c4      	add	ip, r8
   166de:	4463      	add	r3, ip
   166e0:	3b80      	subs	r3, #128	; 0x80
   166e2:	601a      	str	r2, [r3, #0]
			raw_red[i] = raw_red[i] >> bit;                                                                       /* right shift bit */
   166e4:	23a4      	movs	r3, #164	; 0xa4
   166e6:	2220      	movs	r2, #32
   166e8:	4694      	mov	ip, r2
   166ea:	44bc      	add	ip, r7
   166ec:	4463      	add	r3, ip
   166ee:	7819      	ldrb	r1, [r3, #0]
   166f0:	23a4      	movs	r3, #164	; 0xa4
   166f2:	2220      	movs	r2, #32
   166f4:	4694      	mov	ip, r2
   166f6:	44bc      	add	ip, r7
   166f8:	4463      	add	r3, ip
   166fa:	781b      	ldrb	r3, [r3, #0]
   166fc:	009b      	lsls	r3, r3, #2
   166fe:	22a8      	movs	r2, #168	; 0xa8
   16700:	4694      	mov	ip, r2
   16702:	2220      	movs	r2, #32
   16704:	4690      	mov	r8, r2
   16706:	44b8      	add	r8, r7
   16708:	44c4      	add	ip, r8
   1670a:	4463      	add	r3, ip
   1670c:	3b80      	subs	r3, #128	; 0x80
   1670e:	681a      	ldr	r2, [r3, #0]
   16710:	23a5      	movs	r3, #165	; 0xa5
   16712:	2020      	movs	r0, #32
   16714:	4684      	mov	ip, r0
   16716:	44bc      	add	ip, r7
   16718:	4463      	add	r3, ip
   1671a:	781b      	ldrb	r3, [r3, #0]
   1671c:	40da      	lsrs	r2, r3
   1671e:	008b      	lsls	r3, r1, #2
   16720:	21a8      	movs	r1, #168	; 0xa8
   16722:	468c      	mov	ip, r1
   16724:	2120      	movs	r1, #32
   16726:	4688      	mov	r8, r1
   16728:	44b8      	add	r8, r7
   1672a:	44c4      	add	ip, r8
   1672c:	4463      	add	r3, ip
   1672e:	3b80      	subs	r3, #128	; 0x80
   16730:	601a      	str	r2, [r3, #0]
			//raw_red[i] = raw_red2[i];
			raw_ir[i] = ((uint32_t)handle->buf[  3] << 16) |                                                /* get raw ir data */
   16732:	23a4      	movs	r3, #164	; 0xa4
   16734:	2220      	movs	r2, #32
   16736:	4694      	mov	ip, r2
   16738:	44bc      	add	ip, r7
   1673a:	4463      	add	r3, ip
   1673c:	781b      	ldrb	r3, [r3, #0]
   1673e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16740:	2127      	movs	r1, #39	; 0x27
   16742:	5c52      	ldrb	r2, [r2, r1]
   16744:	0411      	lsls	r1, r2, #16
			((uint32_t)handle->buf[4] << 8) |                                                 /* get raw ir data */
   16746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16748:	2028      	movs	r0, #40	; 0x28
   1674a:	5c12      	ldrb	r2, [r2, r0]
   1674c:	0212      	lsls	r2, r2, #8
			raw_ir[i] = ((uint32_t)handle->buf[  3] << 16) |                                                /* get raw ir data */
   1674e:	430a      	orrs	r2, r1
			((uint32_t)handle->buf[ 5] << 0);                                                  /* get raw ir data */
   16750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16752:	2029      	movs	r0, #41	; 0x29
   16754:	5c09      	ldrb	r1, [r1, r0]
			((uint32_t)handle->buf[4] << 8) |                                                 /* get raw ir data */
   16756:	430a      	orrs	r2, r1
			raw_ir[i] = ((uint32_t)handle->buf[  3] << 16) |                                                /* get raw ir data */
   16758:	009b      	lsls	r3, r3, #2
   1675a:	21a8      	movs	r1, #168	; 0xa8
   1675c:	468c      	mov	ip, r1
   1675e:	2120      	movs	r1, #32
   16760:	4688      	mov	r8, r1
   16762:	44b8      	add	r8, r7
   16764:	44c4      	add	ip, r8
   16766:	4463      	add	r3, ip
   16768:	3b84      	subs	r3, #132	; 0x84
   1676a:	601a      	str	r2, [r3, #0]
			raw_ir[i] &= 0x03FFFF;
   1676c:	23a4      	movs	r3, #164	; 0xa4
   1676e:	2220      	movs	r2, #32
   16770:	4694      	mov	ip, r2
   16772:	44bc      	add	ip, r7
   16774:	4463      	add	r3, ip
   16776:	7819      	ldrb	r1, [r3, #0]
   16778:	23a4      	movs	r3, #164	; 0xa4
   1677a:	2220      	movs	r2, #32
   1677c:	4694      	mov	ip, r2
   1677e:	44bc      	add	ip, r7
   16780:	4463      	add	r3, ip
   16782:	781b      	ldrb	r3, [r3, #0]
   16784:	009b      	lsls	r3, r3, #2
   16786:	22a8      	movs	r2, #168	; 0xa8
   16788:	4694      	mov	ip, r2
   1678a:	2220      	movs	r2, #32
   1678c:	4690      	mov	r8, r2
   1678e:	44b8      	add	r8, r7
   16790:	44c4      	add	ip, r8
   16792:	4463      	add	r3, ip
   16794:	3b84      	subs	r3, #132	; 0x84
   16796:	681b      	ldr	r3, [r3, #0]
   16798:	039b      	lsls	r3, r3, #14
   1679a:	0b9a      	lsrs	r2, r3, #14
   1679c:	008b      	lsls	r3, r1, #2
   1679e:	21a8      	movs	r1, #168	; 0xa8
   167a0:	468c      	mov	ip, r1
   167a2:	2120      	movs	r1, #32
   167a4:	4688      	mov	r8, r1
   167a6:	44b8      	add	r8, r7
   167a8:	44c4      	add	ip, r8
   167aa:	4463      	add	r3, ip
   167ac:	3b84      	subs	r3, #132	; 0x84
   167ae:	601a      	str	r2, [r3, #0]
			raw_ir[i] = raw_ir[i] >> bit;  
   167b0:	23a4      	movs	r3, #164	; 0xa4
   167b2:	2220      	movs	r2, #32
   167b4:	4694      	mov	ip, r2
   167b6:	44bc      	add	ip, r7
   167b8:	4463      	add	r3, ip
   167ba:	7819      	ldrb	r1, [r3, #0]
   167bc:	23a4      	movs	r3, #164	; 0xa4
   167be:	2220      	movs	r2, #32
   167c0:	4694      	mov	ip, r2
   167c2:	44bc      	add	ip, r7
   167c4:	4463      	add	r3, ip
   167c6:	781b      	ldrb	r3, [r3, #0]
   167c8:	009b      	lsls	r3, r3, #2
   167ca:	22a8      	movs	r2, #168	; 0xa8
   167cc:	4694      	mov	ip, r2
   167ce:	2220      	movs	r2, #32
   167d0:	4690      	mov	r8, r2
   167d2:	44b8      	add	r8, r7
   167d4:	44c4      	add	ip, r8
   167d6:	4463      	add	r3, ip
   167d8:	3b84      	subs	r3, #132	; 0x84
   167da:	681a      	ldr	r2, [r3, #0]
   167dc:	23a5      	movs	r3, #165	; 0xa5
   167de:	2020      	movs	r0, #32
   167e0:	4684      	mov	ip, r0
   167e2:	44bc      	add	ip, r7
   167e4:	4463      	add	r3, ip
   167e6:	781b      	ldrb	r3, [r3, #0]
   167e8:	40da      	lsrs	r2, r3
   167ea:	008b      	lsls	r3, r1, #2
   167ec:	21a8      	movs	r1, #168	; 0xa8
   167ee:	468c      	mov	ip, r1
   167f0:	2120      	movs	r1, #32
   167f2:	4688      	mov	r8, r1
   167f4:	44b8      	add	r8, r7
   167f6:	44c4      	add	ip, r8
   167f8:	4463      	add	r3, ip
   167fa:	3b84      	subs	r3, #132	; 0x84
   167fc:	601a      	str	r2, [r3, #0]
			redvec  +=  raw_red[i];
   167fe:	23a4      	movs	r3, #164	; 0xa4
   16800:	2220      	movs	r2, #32
   16802:	4694      	mov	ip, r2
   16804:	44bc      	add	ip, r7
   16806:	4463      	add	r3, ip
   16808:	781b      	ldrb	r3, [r3, #0]
   1680a:	009b      	lsls	r3, r3, #2
   1680c:	22a8      	movs	r2, #168	; 0xa8
   1680e:	4694      	mov	ip, r2
   16810:	2220      	movs	r2, #32
   16812:	4690      	mov	r8, r2
   16814:	44b8      	add	r8, r7
   16816:	44c4      	add	ip, r8
   16818:	4463      	add	r3, ip
   1681a:	3b80      	subs	r3, #128	; 0x80
   1681c:	681a      	ldr	r2, [r3, #0]
   1681e:	4bc6      	ldr	r3, [pc, #792]	; (16b38 <max30102_read+0x13b8>)
   16820:	0010      	movs	r0, r2
   16822:	4798      	blx	r3
   16824:	1c02      	adds	r2, r0, #0
   16826:	4bc5      	ldr	r3, [pc, #788]	; (16b3c <max30102_read+0x13bc>)
   16828:	1c11      	adds	r1, r2, #0
   1682a:	2294      	movs	r2, #148	; 0x94
   1682c:	18ba      	adds	r2, r7, r2
   1682e:	6810      	ldr	r0, [r2, #0]
   16830:	4798      	blx	r3
   16832:	1c03      	adds	r3, r0, #0
   16834:	2294      	movs	r2, #148	; 0x94
   16836:	18ba      	adds	r2, r7, r2
   16838:	6013      	str	r3, [r2, #0]
			irvec += raw_ir[i];
   1683a:	23a4      	movs	r3, #164	; 0xa4
   1683c:	2220      	movs	r2, #32
   1683e:	4694      	mov	ip, r2
   16840:	44bc      	add	ip, r7
   16842:	4463      	add	r3, ip
   16844:	781b      	ldrb	r3, [r3, #0]
   16846:	009b      	lsls	r3, r3, #2
   16848:	22a8      	movs	r2, #168	; 0xa8
   1684a:	4694      	mov	ip, r2
   1684c:	2220      	movs	r2, #32
   1684e:	4690      	mov	r8, r2
   16850:	44b8      	add	r8, r7
   16852:	44c4      	add	ip, r8
   16854:	4463      	add	r3, ip
   16856:	3b84      	subs	r3, #132	; 0x84
   16858:	681a      	ldr	r2, [r3, #0]
   1685a:	4bb7      	ldr	r3, [pc, #732]	; (16b38 <max30102_read+0x13b8>)
   1685c:	0010      	movs	r0, r2
   1685e:	4798      	blx	r3
   16860:	1c02      	adds	r2, r0, #0
   16862:	4bb6      	ldr	r3, [pc, #728]	; (16b3c <max30102_read+0x13bc>)
   16864:	1c11      	adds	r1, r2, #0
   16866:	2290      	movs	r2, #144	; 0x90
   16868:	18ba      	adds	r2, r7, r2
   1686a:	6810      	ldr	r0, [r2, #0]
   1686c:	4798      	blx	r3
   1686e:	1c03      	adds	r3, r0, #0
   16870:	2290      	movs	r2, #144	; 0x90
   16872:	18ba      	adds	r2, r7, r2
   16874:	6013      	str	r3, [r2, #0]
			maxred = (maxred > raw_red[i])? maxred:raw_red[i];
   16876:	23a4      	movs	r3, #164	; 0xa4
   16878:	2220      	movs	r2, #32
   1687a:	4694      	mov	ip, r2
   1687c:	44bc      	add	ip, r7
   1687e:	4463      	add	r3, ip
   16880:	781b      	ldrb	r3, [r3, #0]
   16882:	009b      	lsls	r3, r3, #2
   16884:	22a8      	movs	r2, #168	; 0xa8
   16886:	4694      	mov	ip, r2
   16888:	2220      	movs	r2, #32
   1688a:	4690      	mov	r8, r2
   1688c:	44b8      	add	r8, r7
   1688e:	44c4      	add	ip, r8
   16890:	4463      	add	r3, ip
   16892:	3b80      	subs	r3, #128	; 0x80
   16894:	681a      	ldr	r2, [r3, #0]
   16896:	4ba8      	ldr	r3, [pc, #672]	; (16b38 <max30102_read+0x13b8>)
   16898:	0010      	movs	r0, r2
   1689a:	4798      	blx	r3
   1689c:	1c02      	adds	r2, r0, #0
   1689e:	4ba8      	ldr	r3, [pc, #672]	; (16b40 <max30102_read+0x13c0>)
   168a0:	218c      	movs	r1, #140	; 0x8c
   168a2:	1879      	adds	r1, r7, r1
   168a4:	6809      	ldr	r1, [r1, #0]
   168a6:	1c10      	adds	r0, r2, #0
   168a8:	4798      	blx	r3
   168aa:	1e03      	subs	r3, r0, #0
   168ac:	d003      	beq.n	168b6 <max30102_read+0x1136>
   168ae:	238c      	movs	r3, #140	; 0x8c
   168b0:	18fb      	adds	r3, r7, r3
   168b2:	681b      	ldr	r3, [r3, #0]
   168b4:	e013      	b.n	168de <max30102_read+0x115e>
   168b6:	23a4      	movs	r3, #164	; 0xa4
   168b8:	2220      	movs	r2, #32
   168ba:	4694      	mov	ip, r2
   168bc:	44bc      	add	ip, r7
   168be:	4463      	add	r3, ip
   168c0:	781b      	ldrb	r3, [r3, #0]
   168c2:	009b      	lsls	r3, r3, #2
   168c4:	22a8      	movs	r2, #168	; 0xa8
   168c6:	4694      	mov	ip, r2
   168c8:	2220      	movs	r2, #32
   168ca:	4690      	mov	r8, r2
   168cc:	44b8      	add	r8, r7
   168ce:	44c4      	add	ip, r8
   168d0:	4463      	add	r3, ip
   168d2:	3b80      	subs	r3, #128	; 0x80
   168d4:	681a      	ldr	r2, [r3, #0]
   168d6:	4b98      	ldr	r3, [pc, #608]	; (16b38 <max30102_read+0x13b8>)
   168d8:	0010      	movs	r0, r2
   168da:	4798      	blx	r3
   168dc:	1c03      	adds	r3, r0, #0
   168de:	228c      	movs	r2, #140	; 0x8c
   168e0:	18ba      	adds	r2, r7, r2
   168e2:	6013      	str	r3, [r2, #0]
			maxir = (maxir > raw_ir[i])? maxir:raw_ir[i];
   168e4:	23a4      	movs	r3, #164	; 0xa4
   168e6:	2220      	movs	r2, #32
   168e8:	4694      	mov	ip, r2
   168ea:	44bc      	add	ip, r7
   168ec:	4463      	add	r3, ip
   168ee:	781b      	ldrb	r3, [r3, #0]
   168f0:	009b      	lsls	r3, r3, #2
   168f2:	22a8      	movs	r2, #168	; 0xa8
   168f4:	4694      	mov	ip, r2
   168f6:	2220      	movs	r2, #32
   168f8:	4690      	mov	r8, r2
   168fa:	44b8      	add	r8, r7
   168fc:	44c4      	add	ip, r8
   168fe:	4463      	add	r3, ip
   16900:	3b84      	subs	r3, #132	; 0x84
   16902:	681a      	ldr	r2, [r3, #0]
   16904:	4b8c      	ldr	r3, [pc, #560]	; (16b38 <max30102_read+0x13b8>)
   16906:	0010      	movs	r0, r2
   16908:	4798      	blx	r3
   1690a:	1c02      	adds	r2, r0, #0
   1690c:	4b8c      	ldr	r3, [pc, #560]	; (16b40 <max30102_read+0x13c0>)
   1690e:	2188      	movs	r1, #136	; 0x88
   16910:	1879      	adds	r1, r7, r1
   16912:	6809      	ldr	r1, [r1, #0]
   16914:	1c10      	adds	r0, r2, #0
   16916:	4798      	blx	r3
   16918:	1e03      	subs	r3, r0, #0
   1691a:	d003      	beq.n	16924 <max30102_read+0x11a4>
   1691c:	2388      	movs	r3, #136	; 0x88
   1691e:	18fb      	adds	r3, r7, r3
   16920:	681b      	ldr	r3, [r3, #0]
   16922:	e013      	b.n	1694c <max30102_read+0x11cc>
   16924:	23a4      	movs	r3, #164	; 0xa4
   16926:	2220      	movs	r2, #32
   16928:	4694      	mov	ip, r2
   1692a:	44bc      	add	ip, r7
   1692c:	4463      	add	r3, ip
   1692e:	781b      	ldrb	r3, [r3, #0]
   16930:	009b      	lsls	r3, r3, #2
   16932:	22a8      	movs	r2, #168	; 0xa8
   16934:	4694      	mov	ip, r2
   16936:	2220      	movs	r2, #32
   16938:	4690      	mov	r8, r2
   1693a:	44b8      	add	r8, r7
   1693c:	44c4      	add	ip, r8
   1693e:	4463      	add	r3, ip
   16940:	3b84      	subs	r3, #132	; 0x84
   16942:	681a      	ldr	r2, [r3, #0]
   16944:	4b7c      	ldr	r3, [pc, #496]	; (16b38 <max30102_read+0x13b8>)
   16946:	0010      	movs	r0, r2
   16948:	4798      	blx	r3
   1694a:	1c03      	adds	r3, r0, #0
   1694c:	2288      	movs	r2, #136	; 0x88
   1694e:	18ba      	adds	r2, r7, r2
   16950:	6013      	str	r3, [r2, #0]
	for (ii=0; ii<50;ii++){
   16952:	239c      	movs	r3, #156	; 0x9c
   16954:	2220      	movs	r2, #32
   16956:	4694      	mov	ip, r2
   16958:	44bc      	add	ip, r7
   1695a:	4463      	add	r3, ip
   1695c:	681b      	ldr	r3, [r3, #0]
   1695e:	3301      	adds	r3, #1
   16960:	229c      	movs	r2, #156	; 0x9c
   16962:	2120      	movs	r1, #32
   16964:	468c      	mov	ip, r1
   16966:	44bc      	add	ip, r7
   16968:	4462      	add	r2, ip
   1696a:	6013      	str	r3, [r2, #0]
   1696c:	239c      	movs	r3, #156	; 0x9c
   1696e:	2220      	movs	r2, #32
   16970:	4694      	mov	ip, r2
   16972:	44bc      	add	ip, r7
   16974:	4463      	add	r3, ip
   16976:	681b      	ldr	r3, [r3, #0]
   16978:	2b31      	cmp	r3, #49	; 0x31
   1697a:	dc00      	bgt.n	1697e <max30102_read+0x11fe>
   1697c:	e656      	b.n	1662c <max30102_read+0xeac>
	}
	redvec/=lenn;
   1697e:	4b71      	ldr	r3, [pc, #452]	; (16b44 <max30102_read+0x13c4>)
   16980:	6db8      	ldr	r0, [r7, #88]	; 0x58
   16982:	4798      	blx	r3
   16984:	1c02      	adds	r2, r0, #0
   16986:	4b70      	ldr	r3, [pc, #448]	; (16b48 <max30102_read+0x13c8>)
   16988:	1c11      	adds	r1, r2, #0
   1698a:	2294      	movs	r2, #148	; 0x94
   1698c:	18ba      	adds	r2, r7, r2
   1698e:	6810      	ldr	r0, [r2, #0]
   16990:	4798      	blx	r3
   16992:	1c03      	adds	r3, r0, #0
   16994:	2294      	movs	r2, #148	; 0x94
   16996:	18ba      	adds	r2, r7, r2
   16998:	6013      	str	r3, [r2, #0]
	irvec/=lenn;
   1699a:	4b6a      	ldr	r3, [pc, #424]	; (16b44 <max30102_read+0x13c4>)
   1699c:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1699e:	4798      	blx	r3
   169a0:	1c02      	adds	r2, r0, #0
   169a2:	4b69      	ldr	r3, [pc, #420]	; (16b48 <max30102_read+0x13c8>)
   169a4:	1c11      	adds	r1, r2, #0
   169a6:	2290      	movs	r2, #144	; 0x90
   169a8:	18ba      	adds	r2, r7, r2
   169aa:	6810      	ldr	r0, [r2, #0]
   169ac:	4798      	blx	r3
   169ae:	1c03      	adds	r3, r0, #0
   169b0:	2290      	movs	r2, #144	; 0x90
   169b2:	18ba      	adds	r2, r7, r2
   169b4:	6013      	str	r3, [r2, #0]
	float spo2 = 110-25*(((maxred-redvec)/(redvec))/((maxir-irvec)/(irvec)));
   169b6:	4b65      	ldr	r3, [pc, #404]	; (16b4c <max30102_read+0x13cc>)
   169b8:	2294      	movs	r2, #148	; 0x94
   169ba:	18ba      	adds	r2, r7, r2
   169bc:	6811      	ldr	r1, [r2, #0]
   169be:	228c      	movs	r2, #140	; 0x8c
   169c0:	18ba      	adds	r2, r7, r2
   169c2:	6810      	ldr	r0, [r2, #0]
   169c4:	4798      	blx	r3
   169c6:	1c03      	adds	r3, r0, #0
   169c8:	1c1a      	adds	r2, r3, #0
   169ca:	4b5f      	ldr	r3, [pc, #380]	; (16b48 <max30102_read+0x13c8>)
   169cc:	2194      	movs	r1, #148	; 0x94
   169ce:	1879      	adds	r1, r7, r1
   169d0:	6809      	ldr	r1, [r1, #0]
   169d2:	1c10      	adds	r0, r2, #0
   169d4:	4798      	blx	r3
   169d6:	1c03      	adds	r3, r0, #0
   169d8:	1c1c      	adds	r4, r3, #0
   169da:	4b5c      	ldr	r3, [pc, #368]	; (16b4c <max30102_read+0x13cc>)
   169dc:	2290      	movs	r2, #144	; 0x90
   169de:	18ba      	adds	r2, r7, r2
   169e0:	6811      	ldr	r1, [r2, #0]
   169e2:	2288      	movs	r2, #136	; 0x88
   169e4:	18ba      	adds	r2, r7, r2
   169e6:	6810      	ldr	r0, [r2, #0]
   169e8:	4798      	blx	r3
   169ea:	1c03      	adds	r3, r0, #0
   169ec:	1c1a      	adds	r2, r3, #0
   169ee:	4b56      	ldr	r3, [pc, #344]	; (16b48 <max30102_read+0x13c8>)
   169f0:	2190      	movs	r1, #144	; 0x90
   169f2:	1879      	adds	r1, r7, r1
   169f4:	6809      	ldr	r1, [r1, #0]
   169f6:	1c10      	adds	r0, r2, #0
   169f8:	4798      	blx	r3
   169fa:	1c03      	adds	r3, r0, #0
   169fc:	1c1a      	adds	r2, r3, #0
   169fe:	4b52      	ldr	r3, [pc, #328]	; (16b48 <max30102_read+0x13c8>)
   16a00:	1c11      	adds	r1, r2, #0
   16a02:	1c20      	adds	r0, r4, #0
   16a04:	4798      	blx	r3
   16a06:	1c03      	adds	r3, r0, #0
   16a08:	1c1a      	adds	r2, r3, #0
   16a0a:	4b51      	ldr	r3, [pc, #324]	; (16b50 <max30102_read+0x13d0>)
   16a0c:	4951      	ldr	r1, [pc, #324]	; (16b54 <max30102_read+0x13d4>)
   16a0e:	1c10      	adds	r0, r2, #0
   16a10:	4798      	blx	r3
   16a12:	1c03      	adds	r3, r0, #0
   16a14:	1c1a      	adds	r2, r3, #0
   16a16:	4b4d      	ldr	r3, [pc, #308]	; (16b4c <max30102_read+0x13cc>)
   16a18:	1c11      	adds	r1, r2, #0
   16a1a:	484f      	ldr	r0, [pc, #316]	; (16b58 <max30102_read+0x13d8>)
   16a1c:	4798      	blx	r3
   16a1e:	1c03      	adds	r3, r0, #0
   16a20:	653b      	str	r3, [r7, #80]	; 0x50
	spo2 = (spo2>100)? 100:spo2;
   16a22:	4b4e      	ldr	r3, [pc, #312]	; (16b5c <max30102_read+0x13dc>)
   16a24:	494e      	ldr	r1, [pc, #312]	; (16b60 <max30102_read+0x13e0>)
   16a26:	6d38      	ldr	r0, [r7, #80]	; 0x50
   16a28:	4798      	blx	r3
   16a2a:	1e03      	subs	r3, r0, #0
   16a2c:	d001      	beq.n	16a32 <max30102_read+0x12b2>
   16a2e:	4b4c      	ldr	r3, [pc, #304]	; (16b60 <max30102_read+0x13e0>)
   16a30:	e000      	b.n	16a34 <max30102_read+0x12b4>
   16a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16a34:	653b      	str	r3, [r7, #80]	; 0x50
	spo2out = (spo2out>spo2)? spo2out:spo2;
   16a36:	4b43      	ldr	r3, [pc, #268]	; (16b44 <max30102_read+0x13c4>)
   16a38:	2298      	movs	r2, #152	; 0x98
   16a3a:	18ba      	adds	r2, r7, r2
   16a3c:	6810      	ldr	r0, [r2, #0]
   16a3e:	4798      	blx	r3
   16a40:	1c02      	adds	r2, r0, #0
   16a42:	4b46      	ldr	r3, [pc, #280]	; (16b5c <max30102_read+0x13dc>)
   16a44:	6d39      	ldr	r1, [r7, #80]	; 0x50
   16a46:	1c10      	adds	r0, r2, #0
   16a48:	4798      	blx	r3
   16a4a:	1e03      	subs	r3, r0, #0
   16a4c:	d00a      	beq.n	16a64 <max30102_read+0x12e4>
   16a4e:	4b3d      	ldr	r3, [pc, #244]	; (16b44 <max30102_read+0x13c4>)
   16a50:	2298      	movs	r2, #152	; 0x98
   16a52:	18ba      	adds	r2, r7, r2
   16a54:	6810      	ldr	r0, [r2, #0]
   16a56:	4798      	blx	r3
   16a58:	1c02      	adds	r2, r0, #0
   16a5a:	4b42      	ldr	r3, [pc, #264]	; (16b64 <max30102_read+0x13e4>)
   16a5c:	1c10      	adds	r0, r2, #0
   16a5e:	4798      	blx	r3
   16a60:	0003      	movs	r3, r0
   16a62:	e003      	b.n	16a6c <max30102_read+0x12ec>
   16a64:	4b3f      	ldr	r3, [pc, #252]	; (16b64 <max30102_read+0x13e4>)
   16a66:	6d38      	ldr	r0, [r7, #80]	; 0x50
   16a68:	4798      	blx	r3
   16a6a:	0003      	movs	r3, r0
   16a6c:	2298      	movs	r2, #152	; 0x98
   16a6e:	18ba      	adds	r2, r7, r2
   16a70:	6013      	str	r3, [r2, #0]
	for(kk=0;kk<3;kk++){	
   16a72:	2384      	movs	r3, #132	; 0x84
   16a74:	18fb      	adds	r3, r7, r3
   16a76:	681b      	ldr	r3, [r3, #0]
   16a78:	3301      	adds	r3, #1
   16a7a:	2284      	movs	r2, #132	; 0x84
   16a7c:	18ba      	adds	r2, r7, r2
   16a7e:	6013      	str	r3, [r2, #0]
   16a80:	2384      	movs	r3, #132	; 0x84
   16a82:	18fb      	adds	r3, r7, r3
   16a84:	681b      	ldr	r3, [r3, #0]
   16a86:	2b02      	cmp	r3, #2
   16a88:	dc00      	bgt.n	16a8c <max30102_read+0x130c>
   16a8a:	e59a      	b.n	165c2 <max30102_read+0xe42>
	}
	sprintf(tmppp, "%d", (int)spo2out);
   16a8c:	2398      	movs	r3, #152	; 0x98
   16a8e:	18fb      	adds	r3, r7, r3
   16a90:	681a      	ldr	r2, [r3, #0]
   16a92:	4935      	ldr	r1, [pc, #212]	; (16b68 <max30102_read+0x13e8>)
   16a94:	2310      	movs	r3, #16
   16a96:	2020      	movs	r0, #32
   16a98:	4684      	mov	ip, r0
   16a9a:	44bc      	add	ip, r7
   16a9c:	4463      	add	r3, ip
   16a9e:	0018      	movs	r0, r3
   16aa0:	4b32      	ldr	r3, [pc, #200]	; (16b6c <max30102_read+0x13ec>)
   16aa2:	4798      	blx	r3
	//handle->debug_print(tmppp);
	
	hr[0] = (int) heartrate;
   16aa4:	4b2f      	ldr	r3, [pc, #188]	; (16b64 <max30102_read+0x13e4>)
   16aa6:	2284      	movs	r2, #132	; 0x84
   16aa8:	2120      	movs	r1, #32
   16aaa:	468c      	mov	ip, r1
   16aac:	44bc      	add	ip, r7
   16aae:	4462      	add	r2, ip
   16ab0:	6810      	ldr	r0, [r2, #0]
   16ab2:	4798      	blx	r3
   16ab4:	0003      	movs	r3, r0
   16ab6:	b2da      	uxtb	r2, r3
   16ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16aba:	701a      	strb	r2, [r3, #0]
	spo2[0] = (int)spo2out;
   16abc:	2398      	movs	r3, #152	; 0x98
   16abe:	18fb      	adds	r3, r7, r3
   16ac0:	681b      	ldr	r3, [r3, #0]
   16ac2:	b2da      	uxtb	r2, r3
   16ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16ac6:	701a      	strb	r2, [r3, #0]
	//LCD_drawString(31,11,"H R:         ",rgb565(255,255,255),rgb565(255,0,0));
	//LCD_drawString(41,11,"Spo2?       ",rgb565(255,255,255),rgb565(255,0,0));
	sprintf(tmppp,"Heart Rate: %d\r", hr[0]);
   16ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16aca:	781b      	ldrb	r3, [r3, #0]
   16acc:	001a      	movs	r2, r3
   16ace:	4928      	ldr	r1, [pc, #160]	; (16b70 <max30102_read+0x13f0>)
   16ad0:	2310      	movs	r3, #16
   16ad2:	2020      	movs	r0, #32
   16ad4:	4684      	mov	ip, r0
   16ad6:	44bc      	add	ip, r7
   16ad8:	4463      	add	r3, ip
   16ada:	0018      	movs	r0, r3
   16adc:	4b23      	ldr	r3, [pc, #140]	; (16b6c <max30102_read+0x13ec>)
   16ade:	4798      	blx	r3
	handle->debug_print(tmppp);
   16ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16ae2:	699b      	ldr	r3, [r3, #24]
   16ae4:	2210      	movs	r2, #16
   16ae6:	2120      	movs	r1, #32
   16ae8:	468c      	mov	ip, r1
   16aea:	44bc      	add	ip, r7
   16aec:	4462      	add	r2, ip
   16aee:	0010      	movs	r0, r2
   16af0:	4798      	blx	r3
	sprintf(tmppp,"Spo2: %d\% \r",  spo2[0]);
   16af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16af4:	781b      	ldrb	r3, [r3, #0]
   16af6:	001a      	movs	r2, r3
   16af8:	491e      	ldr	r1, [pc, #120]	; (16b74 <max30102_read+0x13f4>)
   16afa:	2310      	movs	r3, #16
   16afc:	2020      	movs	r0, #32
   16afe:	4684      	mov	ip, r0
   16b00:	44bc      	add	ip, r7
   16b02:	4463      	add	r3, ip
   16b04:	0018      	movs	r0, r3
   16b06:	4b19      	ldr	r3, [pc, #100]	; (16b6c <max30102_read+0x13ec>)
   16b08:	4798      	blx	r3
	handle->debug_print(tmppp);
   16b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16b0c:	699b      	ldr	r3, [r3, #24]
   16b0e:	2210      	movs	r2, #16
   16b10:	2120      	movs	r1, #32
   16b12:	468c      	mov	ip, r1
   16b14:	44bc      	add	ip, r7
   16b16:	4462      	add	r2, ip
   16b18:	0010      	movs	r0, r2
   16b1a:	4798      	blx	r3
	return r;         
   16b1c:	23a3      	movs	r3, #163	; 0xa3
   16b1e:	2220      	movs	r2, #32
   16b20:	4694      	mov	ip, r2
   16b22:	44bc      	add	ip, r7
   16b24:	4463      	add	r3, ip
   16b26:	781b      	ldrb	r3, [r3, #0]
   16b28:	687a      	ldr	r2, [r7, #4]
   16b2a:	4695      	mov	sp, r2
	
	                                                                                            /* success return 0 */
}
   16b2c:	0018      	movs	r0, r3
   16b2e:	46bd      	mov	sp, r7
   16b30:	b032      	add	sp, #200	; 0xc8
   16b32:	bc04      	pop	{r2}
   16b34:	4690      	mov	r8, r2
   16b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b38:	00036b01 	.word	0x00036b01
   16b3c:	00035da5 	.word	0x00035da5
   16b40:	00035d01 	.word	0x00035d01
   16b44:	00036a61 	.word	0x00036a61
   16b48:	000360c9 	.word	0x000360c9
   16b4c:	000366e9 	.word	0x000366e9
   16b50:	000364a9 	.word	0x000364a9
   16b54:	41c80000 	.word	0x41c80000
   16b58:	42dc0000 	.word	0x42dc0000
   16b5c:	00035d29 	.word	0x00035d29
   16b60:	42c80000 	.word	0x42c80000
   16b64:	00036a21 	.word	0x00036a21
   16b68:	0003a28c 	.word	0x0003a28c
   16b6c:	000387c5 	.word	0x000387c5
   16b70:	0003a2cc 	.word	0x0003a2cc
   16b74:	0003a2dc 	.word	0x0003a2dc

00016b78 <max30102_get_interrupt_status>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t max30102_get_interrupt_status(max30102_handle_t *handle, max30102_interrupt_status_t status, max30102_bool_t *enable)
{
   16b78:	b5b0      	push	{r4, r5, r7, lr}
   16b7a:	b086      	sub	sp, #24
   16b7c:	af00      	add	r7, sp, #0
   16b7e:	60f8      	str	r0, [r7, #12]
   16b80:	607a      	str	r2, [r7, #4]
   16b82:	230b      	movs	r3, #11
   16b84:	18fb      	adds	r3, r7, r3
   16b86:	1c0a      	adds	r2, r1, #0
   16b88:	701a      	strb	r2, [r3, #0]
    //if (handle->inited != 1)                                                                                   /* check handle initialization */
    //{
        //return 3;                                                                                              /* return error */
    //}

    if (status == MAX30102_INTERRUPT_STATUS_DIE_TEMP_RDY)                                                      /* if die temp ready status */
   16b8a:	230b      	movs	r3, #11
   16b8c:	18fb      	adds	r3, r7, r3
   16b8e:	781b      	ldrb	r3, [r3, #0]
   16b90:	2b01      	cmp	r3, #1
   16b92:	d128      	bne.n	16be6 <max30102_get_interrupt_status+0x6e>
    {
        res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_INTERRUPT_STATUS_2, (uint8_t *)&prev, 1);        /* read interrupt status2 */
   16b94:	68fb      	ldr	r3, [r7, #12]
   16b96:	689d      	ldr	r5, [r3, #8]
   16b98:	2317      	movs	r3, #23
   16b9a:	18fc      	adds	r4, r7, r3
   16b9c:	2316      	movs	r3, #22
   16b9e:	18fa      	adds	r2, r7, r3
   16ba0:	2301      	movs	r3, #1
   16ba2:	2101      	movs	r1, #1
   16ba4:	2057      	movs	r0, #87	; 0x57
   16ba6:	47a8      	blx	r5
   16ba8:	0003      	movs	r3, r0
   16baa:	7023      	strb	r3, [r4, #0]
        if (res != 0)                                                                                          /* check result */
   16bac:	2317      	movs	r3, #23
   16bae:	18fb      	adds	r3, r7, r3
   16bb0:	781b      	ldrb	r3, [r3, #0]
   16bb2:	2b00      	cmp	r3, #0
   16bb4:	d006      	beq.n	16bc4 <max30102_get_interrupt_status+0x4c>
        {
            handle->debug_print("max30102: read interrupt status2 failed.\n");                                 /* read interrupt status2 failed */
   16bb6:	68fb      	ldr	r3, [r7, #12]
   16bb8:	699b      	ldr	r3, [r3, #24]
   16bba:	4a21      	ldr	r2, [pc, #132]	; (16c40 <max30102_get_interrupt_status+0xc8>)
   16bbc:	0010      	movs	r0, r2
   16bbe:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
   16bc0:	2301      	movs	r3, #1
   16bc2:	e038      	b.n	16c36 <max30102_get_interrupt_status+0xbe>
        }
        *enable = (max30102_bool_t)((prev >> status) & 0x01);                                                  /* get bool */
   16bc4:	2316      	movs	r3, #22
   16bc6:	18fb      	adds	r3, r7, r3
   16bc8:	781b      	ldrb	r3, [r3, #0]
   16bca:	001a      	movs	r2, r3
   16bcc:	230b      	movs	r3, #11
   16bce:	18fb      	adds	r3, r7, r3
   16bd0:	781b      	ldrb	r3, [r3, #0]
   16bd2:	411a      	asrs	r2, r3
   16bd4:	0013      	movs	r3, r2
   16bd6:	b2db      	uxtb	r3, r3
   16bd8:	2201      	movs	r2, #1
   16bda:	4013      	ands	r3, r2
   16bdc:	b2da      	uxtb	r2, r3
   16bde:	687b      	ldr	r3, [r7, #4]
   16be0:	701a      	strb	r2, [r3, #0]
    
        return 0;                                                                                              /* success return 0 */
   16be2:	2300      	movs	r3, #0
   16be4:	e027      	b.n	16c36 <max30102_get_interrupt_status+0xbe>
    }
    else
    {
        res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_INTERRUPT_STATUS_1, (uint8_t *)&prev, 1);        /* read interrupt status1 */
   16be6:	68fb      	ldr	r3, [r7, #12]
   16be8:	689d      	ldr	r5, [r3, #8]
   16bea:	2317      	movs	r3, #23
   16bec:	18fc      	adds	r4, r7, r3
   16bee:	2316      	movs	r3, #22
   16bf0:	18fa      	adds	r2, r7, r3
   16bf2:	2301      	movs	r3, #1
   16bf4:	2100      	movs	r1, #0
   16bf6:	2057      	movs	r0, #87	; 0x57
   16bf8:	47a8      	blx	r5
   16bfa:	0003      	movs	r3, r0
   16bfc:	7023      	strb	r3, [r4, #0]
        if (res != 0)                                                                                          /* check result */
   16bfe:	2317      	movs	r3, #23
   16c00:	18fb      	adds	r3, r7, r3
   16c02:	781b      	ldrb	r3, [r3, #0]
   16c04:	2b00      	cmp	r3, #0
   16c06:	d006      	beq.n	16c16 <max30102_get_interrupt_status+0x9e>
        {
            handle->debug_print("max30102: read interrupt status1 failed.\n");                                 /* read interrupt status1 failed */
   16c08:	68fb      	ldr	r3, [r7, #12]
   16c0a:	699b      	ldr	r3, [r3, #24]
   16c0c:	4a0d      	ldr	r2, [pc, #52]	; (16c44 <max30102_get_interrupt_status+0xcc>)
   16c0e:	0010      	movs	r0, r2
   16c10:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
   16c12:	2301      	movs	r3, #1
   16c14:	e00f      	b.n	16c36 <max30102_get_interrupt_status+0xbe>
        }
        *enable = (max30102_bool_t)((prev >> status) & 0x01);                                                  /* get bool */
   16c16:	2316      	movs	r3, #22
   16c18:	18fb      	adds	r3, r7, r3
   16c1a:	781b      	ldrb	r3, [r3, #0]
   16c1c:	001a      	movs	r2, r3
   16c1e:	230b      	movs	r3, #11
   16c20:	18fb      	adds	r3, r7, r3
   16c22:	781b      	ldrb	r3, [r3, #0]
   16c24:	411a      	asrs	r2, r3
   16c26:	0013      	movs	r3, r2
   16c28:	b2db      	uxtb	r3, r3
   16c2a:	2201      	movs	r2, #1
   16c2c:	4013      	ands	r3, r2
   16c2e:	b2da      	uxtb	r2, r3
   16c30:	687b      	ldr	r3, [r7, #4]
   16c32:	701a      	strb	r2, [r3, #0]
    
        return 0;                                                                                              /* success return 0 */
   16c34:	2300      	movs	r3, #0
    }
}
   16c36:	0018      	movs	r0, r3
   16c38:	46bd      	mov	sp, r7
   16c3a:	b006      	add	sp, #24
   16c3c:	bdb0      	pop	{r4, r5, r7, pc}
   16c3e:	46c0      	nop			; (mov r8, r8)
   16c40:	0003a098 	.word	0x0003a098
   16c44:	0003a06c 	.word	0x0003a06c

00016c48 <max30102_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_interrupt(max30102_handle_t *handle, max30102_interrupt_t type, max30102_bool_t enable)
{
   16c48:	b5b0      	push	{r4, r5, r7, lr}
   16c4a:	b084      	sub	sp, #16
   16c4c:	af00      	add	r7, sp, #0
   16c4e:	6078      	str	r0, [r7, #4]
   16c50:	0008      	movs	r0, r1
   16c52:	0011      	movs	r1, r2
   16c54:	1cfb      	adds	r3, r7, #3
   16c56:	1c02      	adds	r2, r0, #0
   16c58:	701a      	strb	r2, [r3, #0]
   16c5a:	1cbb      	adds	r3, r7, #2
   16c5c:	1c0a      	adds	r2, r1, #0
   16c5e:	701a      	strb	r2, [r3, #0]
    //if (handle->inited != 1)                                                                                   /* check handle initialization */
    //{
        //return 3;                                                                                              /* return error */
    //}

    if (type == MAX30102_INTERRUPT_DIE_TEMP_RDY_EN)                                                            /* if internal temperature enable */
   16c60:	1cfb      	adds	r3, r7, #3
   16c62:	781b      	ldrb	r3, [r3, #0]
   16c64:	2b01      	cmp	r3, #1
   16c66:	d154      	bne.n	16d12 <max30102_set_interrupt+0xca>
    {
        res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_INTERRUPT_ENABLE_2, (uint8_t *)&prev, 1);        /* read interrupt enable2 */
   16c68:	687b      	ldr	r3, [r7, #4]
   16c6a:	689d      	ldr	r5, [r3, #8]
   16c6c:	230f      	movs	r3, #15
   16c6e:	18fc      	adds	r4, r7, r3
   16c70:	230e      	movs	r3, #14
   16c72:	18fa      	adds	r2, r7, r3
   16c74:	2301      	movs	r3, #1
   16c76:	2103      	movs	r1, #3
   16c78:	2057      	movs	r0, #87	; 0x57
   16c7a:	47a8      	blx	r5
   16c7c:	0003      	movs	r3, r0
   16c7e:	7023      	strb	r3, [r4, #0]
        if (res != 0)                                                                                          /* check result */
   16c80:	230f      	movs	r3, #15
   16c82:	18fb      	adds	r3, r7, r3
   16c84:	781b      	ldrb	r3, [r3, #0]
   16c86:	2b00      	cmp	r3, #0
   16c88:	d006      	beq.n	16c98 <max30102_set_interrupt+0x50>
        {
            handle->debug_print("max30102: read interrupt enable2 failed.\n");                                 /* read interrupt enable2 failed */
   16c8a:	687b      	ldr	r3, [r7, #4]
   16c8c:	699b      	ldr	r3, [r3, #24]
   16c8e:	4a4d      	ldr	r2, [pc, #308]	; (16dc4 <max30102_set_interrupt+0x17c>)
   16c90:	0010      	movs	r0, r2
   16c92:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
   16c94:	2301      	movs	r3, #1
   16c96:	e090      	b.n	16dba <max30102_set_interrupt+0x172>
        }
        prev &= ~(1 << type);                                                                                  /* clear interrupt */
   16c98:	1cfb      	adds	r3, r7, #3
   16c9a:	781b      	ldrb	r3, [r3, #0]
   16c9c:	2201      	movs	r2, #1
   16c9e:	409a      	lsls	r2, r3
   16ca0:	0013      	movs	r3, r2
   16ca2:	b25b      	sxtb	r3, r3
   16ca4:	43db      	mvns	r3, r3
   16ca6:	b25b      	sxtb	r3, r3
   16ca8:	220e      	movs	r2, #14
   16caa:	18ba      	adds	r2, r7, r2
   16cac:	7812      	ldrb	r2, [r2, #0]
   16cae:	b252      	sxtb	r2, r2
   16cb0:	4013      	ands	r3, r2
   16cb2:	b25b      	sxtb	r3, r3
   16cb4:	b2da      	uxtb	r2, r3
   16cb6:	230e      	movs	r3, #14
   16cb8:	18fb      	adds	r3, r7, r3
   16cba:	701a      	strb	r2, [r3, #0]
        prev |= enable << type;                                                                                /* set interrupt */
   16cbc:	1cbb      	adds	r3, r7, #2
   16cbe:	781a      	ldrb	r2, [r3, #0]
   16cc0:	1cfb      	adds	r3, r7, #3
   16cc2:	781b      	ldrb	r3, [r3, #0]
   16cc4:	409a      	lsls	r2, r3
   16cc6:	0013      	movs	r3, r2
   16cc8:	b25a      	sxtb	r2, r3
   16cca:	230e      	movs	r3, #14
   16ccc:	18fb      	adds	r3, r7, r3
   16cce:	781b      	ldrb	r3, [r3, #0]
   16cd0:	b25b      	sxtb	r3, r3
   16cd2:	4313      	orrs	r3, r2
   16cd4:	b25b      	sxtb	r3, r3
   16cd6:	b2da      	uxtb	r2, r3
   16cd8:	230e      	movs	r3, #14
   16cda:	18fb      	adds	r3, r7, r3
   16cdc:	701a      	strb	r2, [r3, #0]
        res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_INTERRUPT_ENABLE_2, (uint8_t *)&prev, 1);       /* write interrupt enable2 */
   16cde:	687b      	ldr	r3, [r7, #4]
   16ce0:	68dd      	ldr	r5, [r3, #12]
   16ce2:	230f      	movs	r3, #15
   16ce4:	18fc      	adds	r4, r7, r3
   16ce6:	230e      	movs	r3, #14
   16ce8:	18fa      	adds	r2, r7, r3
   16cea:	2301      	movs	r3, #1
   16cec:	2103      	movs	r1, #3
   16cee:	2057      	movs	r0, #87	; 0x57
   16cf0:	47a8      	blx	r5
   16cf2:	0003      	movs	r3, r0
   16cf4:	7023      	strb	r3, [r4, #0]
        if (res != 0)                                                                                          /* check result */
   16cf6:	230f      	movs	r3, #15
   16cf8:	18fb      	adds	r3, r7, r3
   16cfa:	781b      	ldrb	r3, [r3, #0]
   16cfc:	2b00      	cmp	r3, #0
   16cfe:	d006      	beq.n	16d0e <max30102_set_interrupt+0xc6>
        {
            handle->debug_print("max30102: write interrupt enable2 failed.\n");                                /* write interrupt enable2 failed */
   16d00:	687b      	ldr	r3, [r7, #4]
   16d02:	699b      	ldr	r3, [r3, #24]
   16d04:	4a30      	ldr	r2, [pc, #192]	; (16dc8 <max30102_set_interrupt+0x180>)
   16d06:	0010      	movs	r0, r2
   16d08:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
   16d0a:	2301      	movs	r3, #1
   16d0c:	e055      	b.n	16dba <max30102_set_interrupt+0x172>
        }
        
        return 0;                                                                                              /* success return 0 */
   16d0e:	2300      	movs	r3, #0
   16d10:	e053      	b.n	16dba <max30102_set_interrupt+0x172>
    }
    else
    {
        res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_INTERRUPT_ENABLE_1, (uint8_t *)&prev, 1);        /* read interrupt enable1 */
   16d12:	687b      	ldr	r3, [r7, #4]
   16d14:	689d      	ldr	r5, [r3, #8]
   16d16:	230f      	movs	r3, #15
   16d18:	18fc      	adds	r4, r7, r3
   16d1a:	230e      	movs	r3, #14
   16d1c:	18fa      	adds	r2, r7, r3
   16d1e:	2301      	movs	r3, #1
   16d20:	2102      	movs	r1, #2
   16d22:	2057      	movs	r0, #87	; 0x57
   16d24:	47a8      	blx	r5
   16d26:	0003      	movs	r3, r0
   16d28:	7023      	strb	r3, [r4, #0]
        if (res != 0)                                                                                          /* check result */
   16d2a:	230f      	movs	r3, #15
   16d2c:	18fb      	adds	r3, r7, r3
   16d2e:	781b      	ldrb	r3, [r3, #0]
   16d30:	2b00      	cmp	r3, #0
   16d32:	d006      	beq.n	16d42 <max30102_set_interrupt+0xfa>
        {
            handle->debug_print("max30102: read interrupt enable1 failed.\n");                                 /* read interrupt enable1 failed */
   16d34:	687b      	ldr	r3, [r7, #4]
   16d36:	699b      	ldr	r3, [r3, #24]
   16d38:	4a24      	ldr	r2, [pc, #144]	; (16dcc <max30102_set_interrupt+0x184>)
   16d3a:	0010      	movs	r0, r2
   16d3c:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
   16d3e:	2301      	movs	r3, #1
   16d40:	e03b      	b.n	16dba <max30102_set_interrupt+0x172>
        }
        prev &= ~(1 << type);                                                                                  /* clear interrupt */
   16d42:	1cfb      	adds	r3, r7, #3
   16d44:	781b      	ldrb	r3, [r3, #0]
   16d46:	2201      	movs	r2, #1
   16d48:	409a      	lsls	r2, r3
   16d4a:	0013      	movs	r3, r2
   16d4c:	b25b      	sxtb	r3, r3
   16d4e:	43db      	mvns	r3, r3
   16d50:	b25b      	sxtb	r3, r3
   16d52:	220e      	movs	r2, #14
   16d54:	18ba      	adds	r2, r7, r2
   16d56:	7812      	ldrb	r2, [r2, #0]
   16d58:	b252      	sxtb	r2, r2
   16d5a:	4013      	ands	r3, r2
   16d5c:	b25b      	sxtb	r3, r3
   16d5e:	b2da      	uxtb	r2, r3
   16d60:	230e      	movs	r3, #14
   16d62:	18fb      	adds	r3, r7, r3
   16d64:	701a      	strb	r2, [r3, #0]
        prev |= enable << type;                                                                                /* set interrupt */
   16d66:	1cbb      	adds	r3, r7, #2
   16d68:	781a      	ldrb	r2, [r3, #0]
   16d6a:	1cfb      	adds	r3, r7, #3
   16d6c:	781b      	ldrb	r3, [r3, #0]
   16d6e:	409a      	lsls	r2, r3
   16d70:	0013      	movs	r3, r2
   16d72:	b25a      	sxtb	r2, r3
   16d74:	230e      	movs	r3, #14
   16d76:	18fb      	adds	r3, r7, r3
   16d78:	781b      	ldrb	r3, [r3, #0]
   16d7a:	b25b      	sxtb	r3, r3
   16d7c:	4313      	orrs	r3, r2
   16d7e:	b25b      	sxtb	r3, r3
   16d80:	b2da      	uxtb	r2, r3
   16d82:	230e      	movs	r3, #14
   16d84:	18fb      	adds	r3, r7, r3
   16d86:	701a      	strb	r2, [r3, #0]
        res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_INTERRUPT_ENABLE_1, (uint8_t *)&prev, 1);       /* write interrupt enable1 */
   16d88:	687b      	ldr	r3, [r7, #4]
   16d8a:	68dd      	ldr	r5, [r3, #12]
   16d8c:	230f      	movs	r3, #15
   16d8e:	18fc      	adds	r4, r7, r3
   16d90:	230e      	movs	r3, #14
   16d92:	18fa      	adds	r2, r7, r3
   16d94:	2301      	movs	r3, #1
   16d96:	2102      	movs	r1, #2
   16d98:	2057      	movs	r0, #87	; 0x57
   16d9a:	47a8      	blx	r5
   16d9c:	0003      	movs	r3, r0
   16d9e:	7023      	strb	r3, [r4, #0]
        if (res != 0)                                                                                          /* check result */
   16da0:	230f      	movs	r3, #15
   16da2:	18fb      	adds	r3, r7, r3
   16da4:	781b      	ldrb	r3, [r3, #0]
   16da6:	2b00      	cmp	r3, #0
   16da8:	d006      	beq.n	16db8 <max30102_set_interrupt+0x170>
        {
            handle->debug_print("max30102: write interrupt enable1 failed.\n");                                /* write interrupt enable1 failed */
   16daa:	687b      	ldr	r3, [r7, #4]
   16dac:	699b      	ldr	r3, [r3, #24]
   16dae:	4a08      	ldr	r2, [pc, #32]	; (16dd0 <max30102_set_interrupt+0x188>)
   16db0:	0010      	movs	r0, r2
   16db2:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
   16db4:	2301      	movs	r3, #1
   16db6:	e000      	b.n	16dba <max30102_set_interrupt+0x172>
        }
    
        return 0;                                                                                              /* success return 0 */
   16db8:	2300      	movs	r3, #0
    }
}
   16dba:	0018      	movs	r0, r3
   16dbc:	46bd      	mov	sp, r7
   16dbe:	b004      	add	sp, #16
   16dc0:	bdb0      	pop	{r4, r5, r7, pc}
   16dc2:	46c0      	nop			; (mov r8, r8)
   16dc4:	0003a2e8 	.word	0x0003a2e8
   16dc8:	0003a314 	.word	0x0003a314
   16dcc:	0003a3b0 	.word	0x0003a3b0
   16dd0:	0003a3dc 	.word	0x0003a3dc

00016dd4 <max30102_set_fifo_sample_averaging>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_fifo_sample_averaging(max30102_handle_t *handle, max30102_sample_averaging_t sample)
{
   16dd4:	b5b0      	push	{r4, r5, r7, lr}
   16dd6:	b084      	sub	sp, #16
   16dd8:	af00      	add	r7, sp, #0
   16dda:	6078      	str	r0, [r7, #4]
   16ddc:	000a      	movs	r2, r1
   16dde:	1cfb      	adds	r3, r7, #3
   16de0:	701a      	strb	r2, [r3, #0]
    //if (handle->inited != 1)                                                                         /* check handle initialization */
    //{
        //return 3;                                                                                    /* return error */
    //}
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_CONFIG, (uint8_t *)&prev, 1);         /* read fifo config */
   16de2:	687b      	ldr	r3, [r7, #4]
   16de4:	689d      	ldr	r5, [r3, #8]
   16de6:	230f      	movs	r3, #15
   16de8:	18fc      	adds	r4, r7, r3
   16dea:	230e      	movs	r3, #14
   16dec:	18fa      	adds	r2, r7, r3
   16dee:	2301      	movs	r3, #1
   16df0:	2108      	movs	r1, #8
   16df2:	2057      	movs	r0, #87	; 0x57
   16df4:	47a8      	blx	r5
   16df6:	0003      	movs	r3, r0
   16df8:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   16dfa:	230f      	movs	r3, #15
   16dfc:	18fb      	adds	r3, r7, r3
   16dfe:	781b      	ldrb	r3, [r3, #0]
   16e00:	2b00      	cmp	r3, #0
   16e02:	d006      	beq.n	16e12 <max30102_set_fifo_sample_averaging+0x3e>
    {
        handle->debug_print("max30102: read fifo config failed.\n");                                 /* read fifo config failed */
   16e04:	687b      	ldr	r3, [r7, #4]
   16e06:	699b      	ldr	r3, [r3, #24]
   16e08:	4a1c      	ldr	r2, [pc, #112]	; (16e7c <max30102_set_fifo_sample_averaging+0xa8>)
   16e0a:	0010      	movs	r0, r2
   16e0c:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   16e0e:	2301      	movs	r3, #1
   16e10:	e02f      	b.n	16e72 <max30102_set_fifo_sample_averaging+0x9e>
    }
    prev &= ~(0x7 << 5);                                                                             /* clear config */
   16e12:	230e      	movs	r3, #14
   16e14:	18fb      	adds	r3, r7, r3
   16e16:	781b      	ldrb	r3, [r3, #0]
   16e18:	221f      	movs	r2, #31
   16e1a:	4013      	ands	r3, r2
   16e1c:	b2da      	uxtb	r2, r3
   16e1e:	230e      	movs	r3, #14
   16e20:	18fb      	adds	r3, r7, r3
   16e22:	701a      	strb	r2, [r3, #0]
    prev |= sample << 5;                                                                             /* set sample */
   16e24:	1cfb      	adds	r3, r7, #3
   16e26:	781b      	ldrb	r3, [r3, #0]
   16e28:	015b      	lsls	r3, r3, #5
   16e2a:	b25a      	sxtb	r2, r3
   16e2c:	230e      	movs	r3, #14
   16e2e:	18fb      	adds	r3, r7, r3
   16e30:	781b      	ldrb	r3, [r3, #0]
   16e32:	b25b      	sxtb	r3, r3
   16e34:	4313      	orrs	r3, r2
   16e36:	b25b      	sxtb	r3, r3
   16e38:	b2da      	uxtb	r2, r3
   16e3a:	230e      	movs	r3, #14
   16e3c:	18fb      	adds	r3, r7, r3
   16e3e:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_FIFO_CONFIG, (uint8_t *)&prev, 1);        /* write fifo config */
   16e40:	687b      	ldr	r3, [r7, #4]
   16e42:	68dd      	ldr	r5, [r3, #12]
   16e44:	230f      	movs	r3, #15
   16e46:	18fc      	adds	r4, r7, r3
   16e48:	230e      	movs	r3, #14
   16e4a:	18fa      	adds	r2, r7, r3
   16e4c:	2301      	movs	r3, #1
   16e4e:	2108      	movs	r1, #8
   16e50:	2057      	movs	r0, #87	; 0x57
   16e52:	47a8      	blx	r5
   16e54:	0003      	movs	r3, r0
   16e56:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   16e58:	230f      	movs	r3, #15
   16e5a:	18fb      	adds	r3, r7, r3
   16e5c:	781b      	ldrb	r3, [r3, #0]
   16e5e:	2b00      	cmp	r3, #0
   16e60:	d006      	beq.n	16e70 <max30102_set_fifo_sample_averaging+0x9c>
    {
        handle->debug_print("max30102: write fifo config failed.\n");                                /* write fifo config failed */
   16e62:	687b      	ldr	r3, [r7, #4]
   16e64:	699b      	ldr	r3, [r3, #24]
   16e66:	4a06      	ldr	r2, [pc, #24]	; (16e80 <max30102_set_fifo_sample_averaging+0xac>)
   16e68:	0010      	movs	r0, r2
   16e6a:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   16e6c:	2301      	movs	r3, #1
   16e6e:	e000      	b.n	16e72 <max30102_set_fifo_sample_averaging+0x9e>
    }
    
    return 0;                                                                                        /* success return 0 */
   16e70:	2300      	movs	r3, #0
}
   16e72:	0018      	movs	r0, r3
   16e74:	46bd      	mov	sp, r7
   16e76:	b004      	add	sp, #16
   16e78:	bdb0      	pop	{r4, r5, r7, pc}
   16e7a:	46c0      	nop			; (mov r8, r8)
   16e7c:	0003a53c 	.word	0x0003a53c
   16e80:	0003a560 	.word	0x0003a560

00016e84 <max30102_set_fifo_roll>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_fifo_roll(max30102_handle_t *handle, max30102_bool_t enable)
{
   16e84:	b5b0      	push	{r4, r5, r7, lr}
   16e86:	b084      	sub	sp, #16
   16e88:	af00      	add	r7, sp, #0
   16e8a:	6078      	str	r0, [r7, #4]
   16e8c:	000a      	movs	r2, r1
   16e8e:	1cfb      	adds	r3, r7, #3
   16e90:	701a      	strb	r2, [r3, #0]
    //if (handle->inited != 1)                                                                         /* check handle initialization */
    //{
        //return 3;                                                                                    /* return error */
    //}
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_CONFIG, (uint8_t *)&prev, 1);         /* read fifo config */
   16e92:	687b      	ldr	r3, [r7, #4]
   16e94:	689d      	ldr	r5, [r3, #8]
   16e96:	230f      	movs	r3, #15
   16e98:	18fc      	adds	r4, r7, r3
   16e9a:	230e      	movs	r3, #14
   16e9c:	18fa      	adds	r2, r7, r3
   16e9e:	2301      	movs	r3, #1
   16ea0:	2108      	movs	r1, #8
   16ea2:	2057      	movs	r0, #87	; 0x57
   16ea4:	47a8      	blx	r5
   16ea6:	0003      	movs	r3, r0
   16ea8:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   16eaa:	230f      	movs	r3, #15
   16eac:	18fb      	adds	r3, r7, r3
   16eae:	781b      	ldrb	r3, [r3, #0]
   16eb0:	2b00      	cmp	r3, #0
   16eb2:	d006      	beq.n	16ec2 <max30102_set_fifo_roll+0x3e>
    {
        handle->debug_print("max30102: read fifo config failed.\n");                                 /* read fifo config failed */
   16eb4:	687b      	ldr	r3, [r7, #4]
   16eb6:	699b      	ldr	r3, [r3, #24]
   16eb8:	4a1c      	ldr	r2, [pc, #112]	; (16f2c <max30102_set_fifo_roll+0xa8>)
   16eba:	0010      	movs	r0, r2
   16ebc:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   16ebe:	2301      	movs	r3, #1
   16ec0:	e02f      	b.n	16f22 <max30102_set_fifo_roll+0x9e>
    }
    prev &= ~(0x1 << 4);                                                                             /* clear config */
   16ec2:	230e      	movs	r3, #14
   16ec4:	18fb      	adds	r3, r7, r3
   16ec6:	781b      	ldrb	r3, [r3, #0]
   16ec8:	2210      	movs	r2, #16
   16eca:	4393      	bics	r3, r2
   16ecc:	b2da      	uxtb	r2, r3
   16ece:	230e      	movs	r3, #14
   16ed0:	18fb      	adds	r3, r7, r3
   16ed2:	701a      	strb	r2, [r3, #0]
    prev |= enable << 4;                                                                             /* set enable */
   16ed4:	1cfb      	adds	r3, r7, #3
   16ed6:	781b      	ldrb	r3, [r3, #0]
   16ed8:	011b      	lsls	r3, r3, #4
   16eda:	b25a      	sxtb	r2, r3
   16edc:	230e      	movs	r3, #14
   16ede:	18fb      	adds	r3, r7, r3
   16ee0:	781b      	ldrb	r3, [r3, #0]
   16ee2:	b25b      	sxtb	r3, r3
   16ee4:	4313      	orrs	r3, r2
   16ee6:	b25b      	sxtb	r3, r3
   16ee8:	b2da      	uxtb	r2, r3
   16eea:	230e      	movs	r3, #14
   16eec:	18fb      	adds	r3, r7, r3
   16eee:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_FIFO_CONFIG, (uint8_t *)&prev, 1);        /* write fifo config */
   16ef0:	687b      	ldr	r3, [r7, #4]
   16ef2:	68dd      	ldr	r5, [r3, #12]
   16ef4:	230f      	movs	r3, #15
   16ef6:	18fc      	adds	r4, r7, r3
   16ef8:	230e      	movs	r3, #14
   16efa:	18fa      	adds	r2, r7, r3
   16efc:	2301      	movs	r3, #1
   16efe:	2108      	movs	r1, #8
   16f00:	2057      	movs	r0, #87	; 0x57
   16f02:	47a8      	blx	r5
   16f04:	0003      	movs	r3, r0
   16f06:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   16f08:	230f      	movs	r3, #15
   16f0a:	18fb      	adds	r3, r7, r3
   16f0c:	781b      	ldrb	r3, [r3, #0]
   16f0e:	2b00      	cmp	r3, #0
   16f10:	d006      	beq.n	16f20 <max30102_set_fifo_roll+0x9c>
    {
        handle->debug_print("max30102: write fifo config failed.\n");                                /* write fifo config failed */
   16f12:	687b      	ldr	r3, [r7, #4]
   16f14:	699b      	ldr	r3, [r3, #24]
   16f16:	4a06      	ldr	r2, [pc, #24]	; (16f30 <max30102_set_fifo_roll+0xac>)
   16f18:	0010      	movs	r0, r2
   16f1a:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   16f1c:	2301      	movs	r3, #1
   16f1e:	e000      	b.n	16f22 <max30102_set_fifo_roll+0x9e>
    }
    
    return 0;                                                                                        /* success return 0 */
   16f20:	2300      	movs	r3, #0
}
   16f22:	0018      	movs	r0, r3
   16f24:	46bd      	mov	sp, r7
   16f26:	b004      	add	sp, #16
   16f28:	bdb0      	pop	{r4, r5, r7, pc}
   16f2a:	46c0      	nop			; (mov r8, r8)
   16f2c:	0003a53c 	.word	0x0003a53c
   16f30:	0003a560 	.word	0x0003a560

00016f34 <max30102_set_fifo_almost_full>:
 *            - 3 handle is not initialized
 *            - 4 value can't be over 0xF
 * @note      none
 */
uint8_t max30102_set_fifo_almost_full(max30102_handle_t *handle, uint8_t value)
{
   16f34:	b5b0      	push	{r4, r5, r7, lr}
   16f36:	b084      	sub	sp, #16
   16f38:	af00      	add	r7, sp, #0
   16f3a:	6078      	str	r0, [r7, #4]
   16f3c:	000a      	movs	r2, r1
   16f3e:	1cfb      	adds	r3, r7, #3
   16f40:	701a      	strb	r2, [r3, #0]
    //}
    //if (handle->inited != 1)                                                                         /* check handle initialization */
    //{
        //return 3;                                                                                    /* return error */
    //}
    if (value > 0xF)                                                                                 /* check value */
   16f42:	1cfb      	adds	r3, r7, #3
   16f44:	781b      	ldrb	r3, [r3, #0]
   16f46:	2b0f      	cmp	r3, #15
   16f48:	d906      	bls.n	16f58 <max30102_set_fifo_almost_full+0x24>
    {
        handle->debug_print("max30102: value can't be over 0xF.\n");                                 /* value can't be over 0xF */
   16f4a:	687b      	ldr	r3, [r7, #4]
   16f4c:	699b      	ldr	r3, [r3, #24]
   16f4e:	4a26      	ldr	r2, [pc, #152]	; (16fe8 <max30102_set_fifo_almost_full+0xb4>)
   16f50:	0010      	movs	r0, r2
   16f52:	4798      	blx	r3
       
        return 4;                                                                                    /* return error */
   16f54:	2304      	movs	r3, #4
   16f56:	e043      	b.n	16fe0 <max30102_set_fifo_almost_full+0xac>
    }
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_FIFO_CONFIG, (uint8_t *)&prev, 1);         /* read fifo config */
   16f58:	687b      	ldr	r3, [r7, #4]
   16f5a:	689d      	ldr	r5, [r3, #8]
   16f5c:	230f      	movs	r3, #15
   16f5e:	18fc      	adds	r4, r7, r3
   16f60:	230e      	movs	r3, #14
   16f62:	18fa      	adds	r2, r7, r3
   16f64:	2301      	movs	r3, #1
   16f66:	2108      	movs	r1, #8
   16f68:	2057      	movs	r0, #87	; 0x57
   16f6a:	47a8      	blx	r5
   16f6c:	0003      	movs	r3, r0
   16f6e:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   16f70:	230f      	movs	r3, #15
   16f72:	18fb      	adds	r3, r7, r3
   16f74:	781b      	ldrb	r3, [r3, #0]
   16f76:	2b00      	cmp	r3, #0
   16f78:	d006      	beq.n	16f88 <max30102_set_fifo_almost_full+0x54>
    {
        handle->debug_print("max30102: read fifo config failed.\n");                                 /* read fifo config failed */
   16f7a:	687b      	ldr	r3, [r7, #4]
   16f7c:	699b      	ldr	r3, [r3, #24]
   16f7e:	4a1b      	ldr	r2, [pc, #108]	; (16fec <max30102_set_fifo_almost_full+0xb8>)
   16f80:	0010      	movs	r0, r2
   16f82:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   16f84:	2301      	movs	r3, #1
   16f86:	e02b      	b.n	16fe0 <max30102_set_fifo_almost_full+0xac>
    }
    prev &= ~(0xF << 0);                                                                             /* clear config */
   16f88:	230e      	movs	r3, #14
   16f8a:	18fb      	adds	r3, r7, r3
   16f8c:	781b      	ldrb	r3, [r3, #0]
   16f8e:	220f      	movs	r2, #15
   16f90:	4393      	bics	r3, r2
   16f92:	b2da      	uxtb	r2, r3
   16f94:	230e      	movs	r3, #14
   16f96:	18fb      	adds	r3, r7, r3
   16f98:	701a      	strb	r2, [r3, #0]
    prev |= value << 0;                                                                              /* set value */
   16f9a:	230e      	movs	r3, #14
   16f9c:	18fb      	adds	r3, r7, r3
   16f9e:	781a      	ldrb	r2, [r3, #0]
   16fa0:	1cfb      	adds	r3, r7, #3
   16fa2:	781b      	ldrb	r3, [r3, #0]
   16fa4:	4313      	orrs	r3, r2
   16fa6:	b2da      	uxtb	r2, r3
   16fa8:	230e      	movs	r3, #14
   16faa:	18fb      	adds	r3, r7, r3
   16fac:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_FIFO_CONFIG, (uint8_t *)&prev, 1);        /* write fifo config */
   16fae:	687b      	ldr	r3, [r7, #4]
   16fb0:	68dd      	ldr	r5, [r3, #12]
   16fb2:	230f      	movs	r3, #15
   16fb4:	18fc      	adds	r4, r7, r3
   16fb6:	230e      	movs	r3, #14
   16fb8:	18fa      	adds	r2, r7, r3
   16fba:	2301      	movs	r3, #1
   16fbc:	2108      	movs	r1, #8
   16fbe:	2057      	movs	r0, #87	; 0x57
   16fc0:	47a8      	blx	r5
   16fc2:	0003      	movs	r3, r0
   16fc4:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   16fc6:	230f      	movs	r3, #15
   16fc8:	18fb      	adds	r3, r7, r3
   16fca:	781b      	ldrb	r3, [r3, #0]
   16fcc:	2b00      	cmp	r3, #0
   16fce:	d006      	beq.n	16fde <max30102_set_fifo_almost_full+0xaa>
    {
        handle->debug_print("max30102: write fifo config failed.\n");                                /* write fifo config failed */
   16fd0:	687b      	ldr	r3, [r7, #4]
   16fd2:	699b      	ldr	r3, [r3, #24]
   16fd4:	4a06      	ldr	r2, [pc, #24]	; (16ff0 <max30102_set_fifo_almost_full+0xbc>)
   16fd6:	0010      	movs	r0, r2
   16fd8:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   16fda:	2301      	movs	r3, #1
   16fdc:	e000      	b.n	16fe0 <max30102_set_fifo_almost_full+0xac>
    }
    
    return 0;                                                                                        /* success return 0 */
   16fde:	2300      	movs	r3, #0
}
   16fe0:	0018      	movs	r0, r3
   16fe2:	46bd      	mov	sp, r7
   16fe4:	b004      	add	sp, #16
   16fe6:	bdb0      	pop	{r4, r5, r7, pc}
   16fe8:	0003a588 	.word	0x0003a588
   16fec:	0003a53c 	.word	0x0003a53c
   16ff0:	0003a560 	.word	0x0003a560

00016ff4 <max30102_set_shutdown>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_shutdown(max30102_handle_t *handle, max30102_bool_t enable)
{
   16ff4:	b5b0      	push	{r4, r5, r7, lr}
   16ff6:	b084      	sub	sp, #16
   16ff8:	af00      	add	r7, sp, #0
   16ffa:	6078      	str	r0, [r7, #4]
   16ffc:	000a      	movs	r2, r1
   16ffe:	1cfb      	adds	r3, r7, #3
   17000:	701a      	strb	r2, [r3, #0]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                              /* check handle */
   17002:	687b      	ldr	r3, [r7, #4]
   17004:	2b00      	cmp	r3, #0
   17006:	d101      	bne.n	1700c <max30102_set_shutdown+0x18>
    {
        return 2;                                                                                    /* return error */
   17008:	2302      	movs	r3, #2
   1700a:	e047      	b.n	1709c <max30102_set_shutdown+0xa8>
    //if (handle->inited != 1)                                                                         /* check handle initialization */
    //{
        //return 3;                                                                                    /* return error */
    //}
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);         /* read mode config */
   1700c:	687b      	ldr	r3, [r7, #4]
   1700e:	689d      	ldr	r5, [r3, #8]
   17010:	230f      	movs	r3, #15
   17012:	18fc      	adds	r4, r7, r3
   17014:	230e      	movs	r3, #14
   17016:	18fa      	adds	r2, r7, r3
   17018:	2301      	movs	r3, #1
   1701a:	2109      	movs	r1, #9
   1701c:	2057      	movs	r0, #87	; 0x57
   1701e:	47a8      	blx	r5
   17020:	0003      	movs	r3, r0
   17022:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   17024:	230f      	movs	r3, #15
   17026:	18fb      	adds	r3, r7, r3
   17028:	781b      	ldrb	r3, [r3, #0]
   1702a:	2b00      	cmp	r3, #0
   1702c:	d006      	beq.n	1703c <max30102_set_shutdown+0x48>
    {
        handle->debug_print("max30102: read mode config failed.\n");                                 /* read mode config failed */
   1702e:	687b      	ldr	r3, [r7, #4]
   17030:	699b      	ldr	r3, [r3, #24]
   17032:	4a1c      	ldr	r2, [pc, #112]	; (170a4 <max30102_set_shutdown+0xb0>)
   17034:	0010      	movs	r0, r2
   17036:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   17038:	2301      	movs	r3, #1
   1703a:	e02f      	b.n	1709c <max30102_set_shutdown+0xa8>
    }
    prev &= ~(1 << 7);                                                                               /* clear config */
   1703c:	230e      	movs	r3, #14
   1703e:	18fb      	adds	r3, r7, r3
   17040:	781b      	ldrb	r3, [r3, #0]
   17042:	227f      	movs	r2, #127	; 0x7f
   17044:	4013      	ands	r3, r2
   17046:	b2da      	uxtb	r2, r3
   17048:	230e      	movs	r3, #14
   1704a:	18fb      	adds	r3, r7, r3
   1704c:	701a      	strb	r2, [r3, #0]
    prev |= enable << 7;                                                                             /* set bool */
   1704e:	1cfb      	adds	r3, r7, #3
   17050:	781b      	ldrb	r3, [r3, #0]
   17052:	01db      	lsls	r3, r3, #7
   17054:	b25a      	sxtb	r2, r3
   17056:	230e      	movs	r3, #14
   17058:	18fb      	adds	r3, r7, r3
   1705a:	781b      	ldrb	r3, [r3, #0]
   1705c:	b25b      	sxtb	r3, r3
   1705e:	4313      	orrs	r3, r2
   17060:	b25b      	sxtb	r3, r3
   17062:	b2da      	uxtb	r2, r3
   17064:	230e      	movs	r3, #14
   17066:	18fb      	adds	r3, r7, r3
   17068:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);        /* write mode config */
   1706a:	687b      	ldr	r3, [r7, #4]
   1706c:	68dd      	ldr	r5, [r3, #12]
   1706e:	230f      	movs	r3, #15
   17070:	18fc      	adds	r4, r7, r3
   17072:	230e      	movs	r3, #14
   17074:	18fa      	adds	r2, r7, r3
   17076:	2301      	movs	r3, #1
   17078:	2109      	movs	r1, #9
   1707a:	2057      	movs	r0, #87	; 0x57
   1707c:	47a8      	blx	r5
   1707e:	0003      	movs	r3, r0
   17080:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   17082:	230f      	movs	r3, #15
   17084:	18fb      	adds	r3, r7, r3
   17086:	781b      	ldrb	r3, [r3, #0]
   17088:	2b00      	cmp	r3, #0
   1708a:	d006      	beq.n	1709a <max30102_set_shutdown+0xa6>
    {
        handle->debug_print("max30102: write mode config failed.\n");                                /* write mode config failed */
   1708c:	687b      	ldr	r3, [r7, #4]
   1708e:	699b      	ldr	r3, [r3, #24]
   17090:	4a05      	ldr	r2, [pc, #20]	; (170a8 <max30102_set_shutdown+0xb4>)
   17092:	0010      	movs	r0, r2
   17094:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   17096:	2301      	movs	r3, #1
   17098:	e000      	b.n	1709c <max30102_set_shutdown+0xa8>
    }
    
    return 0;                                                                                        /* success return 0 */
   1709a:	2300      	movs	r3, #0
}
   1709c:	0018      	movs	r0, r3
   1709e:	46bd      	mov	sp, r7
   170a0:	b004      	add	sp, #16
   170a2:	bdb0      	pop	{r4, r5, r7, pc}
   170a4:	00039f60 	.word	0x00039f60
   170a8:	00039f84 	.word	0x00039f84

000170ac <max30102_set_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_mode(max30102_handle_t *handle, max30102_mode_t mode)
{
   170ac:	b5b0      	push	{r4, r5, r7, lr}
   170ae:	b084      	sub	sp, #16
   170b0:	af00      	add	r7, sp, #0
   170b2:	6078      	str	r0, [r7, #4]
   170b4:	000a      	movs	r2, r1
   170b6:	1cfb      	adds	r3, r7, #3
   170b8:	701a      	strb	r2, [r3, #0]
    uint8_t res;
    uint8_t prev;
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);         /* read mode config */
   170ba:	687b      	ldr	r3, [r7, #4]
   170bc:	689d      	ldr	r5, [r3, #8]
   170be:	230f      	movs	r3, #15
   170c0:	18fc      	adds	r4, r7, r3
   170c2:	230e      	movs	r3, #14
   170c4:	18fa      	adds	r2, r7, r3
   170c6:	2301      	movs	r3, #1
   170c8:	2109      	movs	r1, #9
   170ca:	2057      	movs	r0, #87	; 0x57
   170cc:	47a8      	blx	r5
   170ce:	0003      	movs	r3, r0
   170d0:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   170d2:	230f      	movs	r3, #15
   170d4:	18fb      	adds	r3, r7, r3
   170d6:	781b      	ldrb	r3, [r3, #0]
   170d8:	2b00      	cmp	r3, #0
   170da:	d006      	beq.n	170ea <max30102_set_mode+0x3e>
    {
        handle->debug_print("max30102: read mode config failed.\n");                                 /* read mode config failed */
   170dc:	687b      	ldr	r3, [r7, #4]
   170de:	699b      	ldr	r3, [r3, #24]
   170e0:	4a1a      	ldr	r2, [pc, #104]	; (1714c <max30102_set_mode+0xa0>)
   170e2:	0010      	movs	r0, r2
   170e4:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   170e6:	2301      	movs	r3, #1
   170e8:	e02b      	b.n	17142 <max30102_set_mode+0x96>
    }
    prev &= ~(7 << 0);                                                                               /* clear config */
   170ea:	230e      	movs	r3, #14
   170ec:	18fb      	adds	r3, r7, r3
   170ee:	781b      	ldrb	r3, [r3, #0]
   170f0:	2207      	movs	r2, #7
   170f2:	4393      	bics	r3, r2
   170f4:	b2da      	uxtb	r2, r3
   170f6:	230e      	movs	r3, #14
   170f8:	18fb      	adds	r3, r7, r3
   170fa:	701a      	strb	r2, [r3, #0]
    prev |= mode << 0;                                                                               /* set mode */
   170fc:	230e      	movs	r3, #14
   170fe:	18fb      	adds	r3, r7, r3
   17100:	781a      	ldrb	r2, [r3, #0]
   17102:	1cfb      	adds	r3, r7, #3
   17104:	781b      	ldrb	r3, [r3, #0]
   17106:	4313      	orrs	r3, r2
   17108:	b2da      	uxtb	r2, r3
   1710a:	230e      	movs	r3, #14
   1710c:	18fb      	adds	r3, r7, r3
   1710e:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_MODE_CONFIG, (uint8_t *)&prev, 1);        /* write mode config */
   17110:	687b      	ldr	r3, [r7, #4]
   17112:	68dd      	ldr	r5, [r3, #12]
   17114:	230f      	movs	r3, #15
   17116:	18fc      	adds	r4, r7, r3
   17118:	230e      	movs	r3, #14
   1711a:	18fa      	adds	r2, r7, r3
   1711c:	2301      	movs	r3, #1
   1711e:	2109      	movs	r1, #9
   17120:	2057      	movs	r0, #87	; 0x57
   17122:	47a8      	blx	r5
   17124:	0003      	movs	r3, r0
   17126:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   17128:	230f      	movs	r3, #15
   1712a:	18fb      	adds	r3, r7, r3
   1712c:	781b      	ldrb	r3, [r3, #0]
   1712e:	2b00      	cmp	r3, #0
   17130:	d006      	beq.n	17140 <max30102_set_mode+0x94>
    {
        handle->debug_print("max30102: write mode config failed.\n");                                /* write mode config failed */
   17132:	687b      	ldr	r3, [r7, #4]
   17134:	699b      	ldr	r3, [r3, #24]
   17136:	4a06      	ldr	r2, [pc, #24]	; (17150 <max30102_set_mode+0xa4>)
   17138:	0010      	movs	r0, r2
   1713a:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   1713c:	2301      	movs	r3, #1
   1713e:	e000      	b.n	17142 <max30102_set_mode+0x96>
    }
    
    return 0;                                                                                        /* success return 0 */
   17140:	2300      	movs	r3, #0
}
   17142:	0018      	movs	r0, r3
   17144:	46bd      	mov	sp, r7
   17146:	b004      	add	sp, #16
   17148:	bdb0      	pop	{r4, r5, r7, pc}
   1714a:	46c0      	nop			; (mov r8, r8)
   1714c:	00039f60 	.word	0x00039f60
   17150:	00039f84 	.word	0x00039f84

00017154 <max30102_set_spo2_adc_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_spo2_adc_range(max30102_handle_t *handle, max30102_spo2_adc_range_t range)
{
   17154:	b5b0      	push	{r4, r5, r7, lr}
   17156:	b084      	sub	sp, #16
   17158:	af00      	add	r7, sp, #0
   1715a:	6078      	str	r0, [r7, #4]
   1715c:	000a      	movs	r2, r1
   1715e:	1cfb      	adds	r3, r7, #3
   17160:	701a      	strb	r2, [r3, #0]
    //if (handle->inited != 1)                                                                         /* check handle initialization */
    //{
        //return 3;                                                                                    /* return error */
    //}
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_SPO2_CONFIG, (uint8_t *)&prev, 1);         /* read spo2 config */
   17162:	687b      	ldr	r3, [r7, #4]
   17164:	689d      	ldr	r5, [r3, #8]
   17166:	230f      	movs	r3, #15
   17168:	18fc      	adds	r4, r7, r3
   1716a:	230e      	movs	r3, #14
   1716c:	18fa      	adds	r2, r7, r3
   1716e:	2301      	movs	r3, #1
   17170:	210a      	movs	r1, #10
   17172:	2057      	movs	r0, #87	; 0x57
   17174:	47a8      	blx	r5
   17176:	0003      	movs	r3, r0
   17178:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   1717a:	230f      	movs	r3, #15
   1717c:	18fb      	adds	r3, r7, r3
   1717e:	781b      	ldrb	r3, [r3, #0]
   17180:	2b00      	cmp	r3, #0
   17182:	d006      	beq.n	17192 <max30102_set_spo2_adc_range+0x3e>
    {
        handle->debug_print("max30102: read spo2 config failed.\n");                                 /* read spo2 config failed */
   17184:	687b      	ldr	r3, [r7, #4]
   17186:	699b      	ldr	r3, [r3, #24]
   17188:	4a1c      	ldr	r2, [pc, #112]	; (171fc <max30102_set_spo2_adc_range+0xa8>)
   1718a:	0010      	movs	r0, r2
   1718c:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   1718e:	2301      	movs	r3, #1
   17190:	e02f      	b.n	171f2 <max30102_set_spo2_adc_range+0x9e>
    }
    prev &= ~(3 << 5);                                                                               /* clear config */
   17192:	230e      	movs	r3, #14
   17194:	18fb      	adds	r3, r7, r3
   17196:	781b      	ldrb	r3, [r3, #0]
   17198:	2260      	movs	r2, #96	; 0x60
   1719a:	4393      	bics	r3, r2
   1719c:	b2da      	uxtb	r2, r3
   1719e:	230e      	movs	r3, #14
   171a0:	18fb      	adds	r3, r7, r3
   171a2:	701a      	strb	r2, [r3, #0]
    prev |= range << 5;                                                                              /* set range */
   171a4:	1cfb      	adds	r3, r7, #3
   171a6:	781b      	ldrb	r3, [r3, #0]
   171a8:	015b      	lsls	r3, r3, #5
   171aa:	b25a      	sxtb	r2, r3
   171ac:	230e      	movs	r3, #14
   171ae:	18fb      	adds	r3, r7, r3
   171b0:	781b      	ldrb	r3, [r3, #0]
   171b2:	b25b      	sxtb	r3, r3
   171b4:	4313      	orrs	r3, r2
   171b6:	b25b      	sxtb	r3, r3
   171b8:	b2da      	uxtb	r2, r3
   171ba:	230e      	movs	r3, #14
   171bc:	18fb      	adds	r3, r7, r3
   171be:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_SPO2_CONFIG, (uint8_t *)&prev, 1);        /* write spo2 config */
   171c0:	687b      	ldr	r3, [r7, #4]
   171c2:	68dd      	ldr	r5, [r3, #12]
   171c4:	230f      	movs	r3, #15
   171c6:	18fc      	adds	r4, r7, r3
   171c8:	230e      	movs	r3, #14
   171ca:	18fa      	adds	r2, r7, r3
   171cc:	2301      	movs	r3, #1
   171ce:	210a      	movs	r1, #10
   171d0:	2057      	movs	r0, #87	; 0x57
   171d2:	47a8      	blx	r5
   171d4:	0003      	movs	r3, r0
   171d6:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   171d8:	230f      	movs	r3, #15
   171da:	18fb      	adds	r3, r7, r3
   171dc:	781b      	ldrb	r3, [r3, #0]
   171de:	2b00      	cmp	r3, #0
   171e0:	d006      	beq.n	171f0 <max30102_set_spo2_adc_range+0x9c>
    {
        handle->debug_print("max30102: write spo2 config failed.\n");                                /* write spo2 config failed */
   171e2:	687b      	ldr	r3, [r7, #4]
   171e4:	699b      	ldr	r3, [r3, #24]
   171e6:	4a06      	ldr	r2, [pc, #24]	; (17200 <max30102_set_spo2_adc_range+0xac>)
   171e8:	0010      	movs	r0, r2
   171ea:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   171ec:	2301      	movs	r3, #1
   171ee:	e000      	b.n	171f2 <max30102_set_spo2_adc_range+0x9e>
    }
    
    return 0;                                                                                        /* success return 0 */
   171f0:	2300      	movs	r3, #0
}
   171f2:	0018      	movs	r0, r3
   171f4:	46bd      	mov	sp, r7
   171f6:	b004      	add	sp, #16
   171f8:	bdb0      	pop	{r4, r5, r7, pc}
   171fa:	46c0      	nop			; (mov r8, r8)
   171fc:	0003a1b8 	.word	0x0003a1b8
   17200:	0003a5ac 	.word	0x0003a5ac

00017204 <max30102_set_spo2_sample_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_spo2_sample_rate(max30102_handle_t *handle, max30102_spo2_sample_rate_t rate)
{
   17204:	b5b0      	push	{r4, r5, r7, lr}
   17206:	b084      	sub	sp, #16
   17208:	af00      	add	r7, sp, #0
   1720a:	6078      	str	r0, [r7, #4]
   1720c:	000a      	movs	r2, r1
   1720e:	1cfb      	adds	r3, r7, #3
   17210:	701a      	strb	r2, [r3, #0]
    uint8_t res;
    uint8_t prev;
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_SPO2_CONFIG, (uint8_t *)&prev, 1);         /* read spo2 config */
   17212:	687b      	ldr	r3, [r7, #4]
   17214:	689d      	ldr	r5, [r3, #8]
   17216:	230f      	movs	r3, #15
   17218:	18fc      	adds	r4, r7, r3
   1721a:	230e      	movs	r3, #14
   1721c:	18fa      	adds	r2, r7, r3
   1721e:	2301      	movs	r3, #1
   17220:	210a      	movs	r1, #10
   17222:	2057      	movs	r0, #87	; 0x57
   17224:	47a8      	blx	r5
   17226:	0003      	movs	r3, r0
   17228:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   1722a:	230f      	movs	r3, #15
   1722c:	18fb      	adds	r3, r7, r3
   1722e:	781b      	ldrb	r3, [r3, #0]
   17230:	2b00      	cmp	r3, #0
   17232:	d006      	beq.n	17242 <max30102_set_spo2_sample_rate+0x3e>
    {
        handle->debug_print("max30102: read spo2 config failed.\n");                                 /* read spo2 config failed */
   17234:	687b      	ldr	r3, [r7, #4]
   17236:	699b      	ldr	r3, [r3, #24]
   17238:	4a1c      	ldr	r2, [pc, #112]	; (172ac <max30102_set_spo2_sample_rate+0xa8>)
   1723a:	0010      	movs	r0, r2
   1723c:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   1723e:	2301      	movs	r3, #1
   17240:	e02f      	b.n	172a2 <max30102_set_spo2_sample_rate+0x9e>
    }
    prev &= ~(7 << 2);                                                                               /* clear config */
   17242:	230e      	movs	r3, #14
   17244:	18fb      	adds	r3, r7, r3
   17246:	781b      	ldrb	r3, [r3, #0]
   17248:	221c      	movs	r2, #28
   1724a:	4393      	bics	r3, r2
   1724c:	b2da      	uxtb	r2, r3
   1724e:	230e      	movs	r3, #14
   17250:	18fb      	adds	r3, r7, r3
   17252:	701a      	strb	r2, [r3, #0]
    prev |= rate << 2;                                                                               /* set sample rate */
   17254:	1cfb      	adds	r3, r7, #3
   17256:	781b      	ldrb	r3, [r3, #0]
   17258:	009b      	lsls	r3, r3, #2
   1725a:	b25a      	sxtb	r2, r3
   1725c:	230e      	movs	r3, #14
   1725e:	18fb      	adds	r3, r7, r3
   17260:	781b      	ldrb	r3, [r3, #0]
   17262:	b25b      	sxtb	r3, r3
   17264:	4313      	orrs	r3, r2
   17266:	b25b      	sxtb	r3, r3
   17268:	b2da      	uxtb	r2, r3
   1726a:	230e      	movs	r3, #14
   1726c:	18fb      	adds	r3, r7, r3
   1726e:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_SPO2_CONFIG, (uint8_t *)&prev, 1);        /* write spo2 config */
   17270:	687b      	ldr	r3, [r7, #4]
   17272:	68dd      	ldr	r5, [r3, #12]
   17274:	230f      	movs	r3, #15
   17276:	18fc      	adds	r4, r7, r3
   17278:	230e      	movs	r3, #14
   1727a:	18fa      	adds	r2, r7, r3
   1727c:	2301      	movs	r3, #1
   1727e:	210a      	movs	r1, #10
   17280:	2057      	movs	r0, #87	; 0x57
   17282:	47a8      	blx	r5
   17284:	0003      	movs	r3, r0
   17286:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   17288:	230f      	movs	r3, #15
   1728a:	18fb      	adds	r3, r7, r3
   1728c:	781b      	ldrb	r3, [r3, #0]
   1728e:	2b00      	cmp	r3, #0
   17290:	d006      	beq.n	172a0 <max30102_set_spo2_sample_rate+0x9c>
    {
        handle->debug_print("max30102: write spo2 config failed.\n");                                /* write spo2 config failed */
   17292:	687b      	ldr	r3, [r7, #4]
   17294:	699b      	ldr	r3, [r3, #24]
   17296:	4a06      	ldr	r2, [pc, #24]	; (172b0 <max30102_set_spo2_sample_rate+0xac>)
   17298:	0010      	movs	r0, r2
   1729a:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   1729c:	2301      	movs	r3, #1
   1729e:	e000      	b.n	172a2 <max30102_set_spo2_sample_rate+0x9e>
    }
    
    return 0;                                                                                        /* success return 0 */
   172a0:	2300      	movs	r3, #0
}
   172a2:	0018      	movs	r0, r3
   172a4:	46bd      	mov	sp, r7
   172a6:	b004      	add	sp, #16
   172a8:	bdb0      	pop	{r4, r5, r7, pc}
   172aa:	46c0      	nop			; (mov r8, r8)
   172ac:	0003a1b8 	.word	0x0003a1b8
   172b0:	0003a5ac 	.word	0x0003a5ac

000172b4 <max30102_set_adc_resolution>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_adc_resolution(max30102_handle_t *handle, max30102_adc_resolution_t resolution)
{
   172b4:	b5b0      	push	{r4, r5, r7, lr}
   172b6:	b084      	sub	sp, #16
   172b8:	af00      	add	r7, sp, #0
   172ba:	6078      	str	r0, [r7, #4]
   172bc:	000a      	movs	r2, r1
   172be:	1cfb      	adds	r3, r7, #3
   172c0:	701a      	strb	r2, [r3, #0]
    //if (handle->inited != 1)                                                                         /* check handle initialization */
    //{
        //return 3;                                                                                    /* return error */
    //}
    
    res = handle->iic_read(MAX30102_ADDRESS, MAX30102_REG_SPO2_CONFIG, (uint8_t *)&prev, 1);         /* read spo2 config */
   172c2:	687b      	ldr	r3, [r7, #4]
   172c4:	689d      	ldr	r5, [r3, #8]
   172c6:	230f      	movs	r3, #15
   172c8:	18fc      	adds	r4, r7, r3
   172ca:	230e      	movs	r3, #14
   172cc:	18fa      	adds	r2, r7, r3
   172ce:	2301      	movs	r3, #1
   172d0:	210a      	movs	r1, #10
   172d2:	2057      	movs	r0, #87	; 0x57
   172d4:	47a8      	blx	r5
   172d6:	0003      	movs	r3, r0
   172d8:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   172da:	230f      	movs	r3, #15
   172dc:	18fb      	adds	r3, r7, r3
   172de:	781b      	ldrb	r3, [r3, #0]
   172e0:	2b00      	cmp	r3, #0
   172e2:	d006      	beq.n	172f2 <max30102_set_adc_resolution+0x3e>
    {
        handle->debug_print("max30102: read spo2 config failed.\n");                                 /* read spo2 config failed */
   172e4:	687b      	ldr	r3, [r7, #4]
   172e6:	699b      	ldr	r3, [r3, #24]
   172e8:	4a1a      	ldr	r2, [pc, #104]	; (17354 <max30102_set_adc_resolution+0xa0>)
   172ea:	0010      	movs	r0, r2
   172ec:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   172ee:	2301      	movs	r3, #1
   172f0:	e02b      	b.n	1734a <max30102_set_adc_resolution+0x96>
    }
    prev &= ~(3 << 0);                                                                               /* clear config */
   172f2:	230e      	movs	r3, #14
   172f4:	18fb      	adds	r3, r7, r3
   172f6:	781b      	ldrb	r3, [r3, #0]
   172f8:	2203      	movs	r2, #3
   172fa:	4393      	bics	r3, r2
   172fc:	b2da      	uxtb	r2, r3
   172fe:	230e      	movs	r3, #14
   17300:	18fb      	adds	r3, r7, r3
   17302:	701a      	strb	r2, [r3, #0]
    prev |= resolution << 0;                                                                         /* set adc resolution */
   17304:	230e      	movs	r3, #14
   17306:	18fb      	adds	r3, r7, r3
   17308:	781a      	ldrb	r2, [r3, #0]
   1730a:	1cfb      	adds	r3, r7, #3
   1730c:	781b      	ldrb	r3, [r3, #0]
   1730e:	4313      	orrs	r3, r2
   17310:	b2da      	uxtb	r2, r3
   17312:	230e      	movs	r3, #14
   17314:	18fb      	adds	r3, r7, r3
   17316:	701a      	strb	r2, [r3, #0]
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_SPO2_CONFIG, (uint8_t *)&prev, 1);        /* write spo2 config */
   17318:	687b      	ldr	r3, [r7, #4]
   1731a:	68dd      	ldr	r5, [r3, #12]
   1731c:	230f      	movs	r3, #15
   1731e:	18fc      	adds	r4, r7, r3
   17320:	230e      	movs	r3, #14
   17322:	18fa      	adds	r2, r7, r3
   17324:	2301      	movs	r3, #1
   17326:	210a      	movs	r1, #10
   17328:	2057      	movs	r0, #87	; 0x57
   1732a:	47a8      	blx	r5
   1732c:	0003      	movs	r3, r0
   1732e:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                    /* check result */
   17330:	230f      	movs	r3, #15
   17332:	18fb      	adds	r3, r7, r3
   17334:	781b      	ldrb	r3, [r3, #0]
   17336:	2b00      	cmp	r3, #0
   17338:	d006      	beq.n	17348 <max30102_set_adc_resolution+0x94>
    {
        handle->debug_print("max30102: write spo2 config failed.\n");                                /* write spo2 config failed */
   1733a:	687b      	ldr	r3, [r7, #4]
   1733c:	699b      	ldr	r3, [r3, #24]
   1733e:	4a06      	ldr	r2, [pc, #24]	; (17358 <max30102_set_adc_resolution+0xa4>)
   17340:	0010      	movs	r0, r2
   17342:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
   17344:	2301      	movs	r3, #1
   17346:	e000      	b.n	1734a <max30102_set_adc_resolution+0x96>
    }
    
    return 0;                                                                                        /* success return 0 */
   17348:	2300      	movs	r3, #0
}
   1734a:	0018      	movs	r0, r3
   1734c:	46bd      	mov	sp, r7
   1734e:	b004      	add	sp, #16
   17350:	bdb0      	pop	{r4, r5, r7, pc}
   17352:	46c0      	nop			; (mov r8, r8)
   17354:	0003a1b8 	.word	0x0003a1b8
   17358:	0003a5ac 	.word	0x0003a5ac

0001735c <max30102_set_led_red_pulse_amplitude>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_led_red_pulse_amplitude(max30102_handle_t *handle, uint8_t amp)
{
   1735c:	b5b0      	push	{r4, r5, r7, lr}
   1735e:	b084      	sub	sp, #16
   17360:	af00      	add	r7, sp, #0
   17362:	6078      	str	r0, [r7, #4]
   17364:	000a      	movs	r2, r1
   17366:	1cfb      	adds	r3, r7, #3
   17368:	701a      	strb	r2, [r3, #0]
    //if (handle->inited != 1)                                                                        /* check handle initialization */
    //{
        //return 3;                                                                                   /* return error */
    //}
    
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_LED_PULSE_1, (uint8_t *)&amp, 1);        /* write led pulse 1 */
   1736a:	687b      	ldr	r3, [r7, #4]
   1736c:	68dd      	ldr	r5, [r3, #12]
   1736e:	230f      	movs	r3, #15
   17370:	18fc      	adds	r4, r7, r3
   17372:	1cfa      	adds	r2, r7, #3
   17374:	2301      	movs	r3, #1
   17376:	210c      	movs	r1, #12
   17378:	2057      	movs	r0, #87	; 0x57
   1737a:	47a8      	blx	r5
   1737c:	0003      	movs	r3, r0
   1737e:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                   /* check result */
   17380:	230f      	movs	r3, #15
   17382:	18fb      	adds	r3, r7, r3
   17384:	781b      	ldrb	r3, [r3, #0]
   17386:	2b00      	cmp	r3, #0
   17388:	d006      	beq.n	17398 <max30102_set_led_red_pulse_amplitude+0x3c>
    {
        handle->debug_print("max30102: write led pulse 1 failed.\n");                               /* write led pulse 1 failed */
   1738a:	687b      	ldr	r3, [r7, #4]
   1738c:	699b      	ldr	r3, [r3, #24]
   1738e:	4a05      	ldr	r2, [pc, #20]	; (173a4 <max30102_set_led_red_pulse_amplitude+0x48>)
   17390:	0010      	movs	r0, r2
   17392:	4798      	blx	r3
       
        return 1;                                                                                   /* return error */
   17394:	2301      	movs	r3, #1
   17396:	e000      	b.n	1739a <max30102_set_led_red_pulse_amplitude+0x3e>
    }
    
    return 0;                                                                                       /* success return 0 */
   17398:	2300      	movs	r3, #0
}
   1739a:	0018      	movs	r0, r3
   1739c:	46bd      	mov	sp, r7
   1739e:	b004      	add	sp, #16
   173a0:	bdb0      	pop	{r4, r5, r7, pc}
   173a2:	46c0      	nop			; (mov r8, r8)
   173a4:	0003a5d4 	.word	0x0003a5d4

000173a8 <max30102_set_led_ir_pulse_amplitude>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t max30102_set_led_ir_pulse_amplitude(max30102_handle_t *handle, uint8_t amp)
{
   173a8:	b5b0      	push	{r4, r5, r7, lr}
   173aa:	b084      	sub	sp, #16
   173ac:	af00      	add	r7, sp, #0
   173ae:	6078      	str	r0, [r7, #4]
   173b0:	000a      	movs	r2, r1
   173b2:	1cfb      	adds	r3, r7, #3
   173b4:	701a      	strb	r2, [r3, #0]
    //if (handle->inited != 1)                                                                        /* check handle initialization */
    //{
        //return 3;                                                                                   /* return error */
    //}
    
    res = handle->iic_write(MAX30102_ADDRESS, MAX30102_REG_LED_PULSE_2, (uint8_t *)&amp, 1);        /* write led pulse 2 */
   173b6:	687b      	ldr	r3, [r7, #4]
   173b8:	68dd      	ldr	r5, [r3, #12]
   173ba:	230f      	movs	r3, #15
   173bc:	18fc      	adds	r4, r7, r3
   173be:	1cfa      	adds	r2, r7, #3
   173c0:	2301      	movs	r3, #1
   173c2:	210d      	movs	r1, #13
   173c4:	2057      	movs	r0, #87	; 0x57
   173c6:	47a8      	blx	r5
   173c8:	0003      	movs	r3, r0
   173ca:	7023      	strb	r3, [r4, #0]
    if (res != 0)                                                                                   /* check result */
   173cc:	230f      	movs	r3, #15
   173ce:	18fb      	adds	r3, r7, r3
   173d0:	781b      	ldrb	r3, [r3, #0]
   173d2:	2b00      	cmp	r3, #0
   173d4:	d006      	beq.n	173e4 <max30102_set_led_ir_pulse_amplitude+0x3c>
    {
        handle->debug_print("max30102: write led pulse 2 failed.\n");                               /* write led pulse 2 failed */
   173d6:	687b      	ldr	r3, [r7, #4]
   173d8:	699b      	ldr	r3, [r3, #24]
   173da:	4a05      	ldr	r2, [pc, #20]	; (173f0 <max30102_set_led_ir_pulse_amplitude+0x48>)
   173dc:	0010      	movs	r0, r2
   173de:	4798      	blx	r3
       
        return 1;                                                                                   /* return error */
   173e0:	2301      	movs	r3, #1
   173e2:	e000      	b.n	173e6 <max30102_set_led_ir_pulse_amplitude+0x3e>
    }
    
    return 0;                                                                                       /* success return 0 */
   173e4:	2300      	movs	r3, #0
}
   173e6:	0018      	movs	r0, r3
   173e8:	46bd      	mov	sp, r7
   173ea:	b004      	add	sp, #16
   173ec:	bdb0      	pop	{r4, r5, r7, pc}
   173ee:	46c0      	nop			; (mov r8, r8)
   173f0:	0003a620 	.word	0x0003a620

000173f4 <max30102_fifo_init>:
 *            - 1 init failed
 * @note      none
 */
//uint8_t max30102_fifo_init(void (*fifo_receive_callback)(uint8_t type))
uint8_t max30102_fifo_init()
{
   173f4:	b590      	push	{r4, r7, lr}
   173f6:	b083      	sub	sp, #12
   173f8:	af00      	add	r7, sp, #0
    uint8_t res;
    max30102_bool_t enable;
    
    /* enable shutdown */
    res = max30102_set_shutdown(&gs_handle, MAX30102_BOOL_TRUE);
   173fa:	1dfc      	adds	r4, r7, #7
   173fc:	4bb4      	ldr	r3, [pc, #720]	; (176d0 <max30102_fifo_init+0x2dc>)
   173fe:	2101      	movs	r1, #1
   17400:	0018      	movs	r0, r3
   17402:	4bb4      	ldr	r3, [pc, #720]	; (176d4 <max30102_fifo_init+0x2e0>)
   17404:	4798      	blx	r3
   17406:	0003      	movs	r3, r0
   17408:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   1740a:	1dfb      	adds	r3, r7, #7
   1740c:	781b      	ldrb	r3, [r3, #0]
   1740e:	2b00      	cmp	r3, #0
   17410:	d009      	beq.n	17426 <max30102_fifo_init+0x32>
    {
        max30102_interface_debug_print("max30102: set shutdown failed.\n");
   17412:	4bb1      	ldr	r3, [pc, #708]	; (176d8 <max30102_fifo_init+0x2e4>)
   17414:	0018      	movs	r0, r3
   17416:	4bb1      	ldr	r3, [pc, #708]	; (176dc <max30102_fifo_init+0x2e8>)
   17418:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   1741a:	4bad      	ldr	r3, [pc, #692]	; (176d0 <max30102_fifo_init+0x2dc>)
   1741c:	0018      	movs	r0, r3
   1741e:	4bb0      	ldr	r3, [pc, #704]	; (176e0 <max30102_fifo_init+0x2ec>)
   17420:	4798      	blx	r3
       
        return 1;
   17422:	2301      	movs	r3, #1
   17424:	e14f      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set fifo sample averaging */
    res = max30102_set_fifo_sample_averaging(&gs_handle, 0x00); //MAX30102_FIFO_DEFAULT_SAMPLE_AVERAGING);
   17426:	1dfc      	adds	r4, r7, #7
   17428:	4ba9      	ldr	r3, [pc, #676]	; (176d0 <max30102_fifo_init+0x2dc>)
   1742a:	2100      	movs	r1, #0
   1742c:	0018      	movs	r0, r3
   1742e:	4bad      	ldr	r3, [pc, #692]	; (176e4 <max30102_fifo_init+0x2f0>)
   17430:	4798      	blx	r3
   17432:	0003      	movs	r3, r0
   17434:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   17436:	1dfb      	adds	r3, r7, #7
   17438:	781b      	ldrb	r3, [r3, #0]
   1743a:	2b00      	cmp	r3, #0
   1743c:	d009      	beq.n	17452 <max30102_fifo_init+0x5e>
    {
        max30102_interface_debug_print("max30102: set fifo sample averaging failed.\n");
   1743e:	4baa      	ldr	r3, [pc, #680]	; (176e8 <max30102_fifo_init+0x2f4>)
   17440:	0018      	movs	r0, r3
   17442:	4ba6      	ldr	r3, [pc, #664]	; (176dc <max30102_fifo_init+0x2e8>)
   17444:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   17446:	4ba2      	ldr	r3, [pc, #648]	; (176d0 <max30102_fifo_init+0x2dc>)
   17448:	0018      	movs	r0, r3
   1744a:	4ba5      	ldr	r3, [pc, #660]	; (176e0 <max30102_fifo_init+0x2ec>)
   1744c:	4798      	blx	r3
       
        return 1;
   1744e:	2301      	movs	r3, #1
   17450:	e139      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set fifo roll */
    res = max30102_set_fifo_roll(&gs_handle, MAX30102_FIFO_DEFAULT_FIFO_ROLL);
   17452:	1dfc      	adds	r4, r7, #7
   17454:	4b9e      	ldr	r3, [pc, #632]	; (176d0 <max30102_fifo_init+0x2dc>)
   17456:	2101      	movs	r1, #1
   17458:	0018      	movs	r0, r3
   1745a:	4ba4      	ldr	r3, [pc, #656]	; (176ec <max30102_fifo_init+0x2f8>)
   1745c:	4798      	blx	r3
   1745e:	0003      	movs	r3, r0
   17460:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   17462:	1dfb      	adds	r3, r7, #7
   17464:	781b      	ldrb	r3, [r3, #0]
   17466:	2b00      	cmp	r3, #0
   17468:	d009      	beq.n	1747e <max30102_fifo_init+0x8a>
    {
        max30102_interface_debug_print("max30102: set fifo roll failed.\n");
   1746a:	4ba1      	ldr	r3, [pc, #644]	; (176f0 <max30102_fifo_init+0x2fc>)
   1746c:	0018      	movs	r0, r3
   1746e:	4b9b      	ldr	r3, [pc, #620]	; (176dc <max30102_fifo_init+0x2e8>)
   17470:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   17472:	4b97      	ldr	r3, [pc, #604]	; (176d0 <max30102_fifo_init+0x2dc>)
   17474:	0018      	movs	r0, r3
   17476:	4b9a      	ldr	r3, [pc, #616]	; (176e0 <max30102_fifo_init+0x2ec>)
   17478:	4798      	blx	r3
       
        return 1;
   1747a:	2301      	movs	r3, #1
   1747c:	e123      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set fifo almost full */
    res = max30102_set_fifo_almost_full(&gs_handle, MAX30102_FIFO_DEFAULT_FIFO_ALMOST_FULL);
   1747e:	1dfc      	adds	r4, r7, #7
   17480:	4b93      	ldr	r3, [pc, #588]	; (176d0 <max30102_fifo_init+0x2dc>)
   17482:	210f      	movs	r1, #15
   17484:	0018      	movs	r0, r3
   17486:	4b9b      	ldr	r3, [pc, #620]	; (176f4 <max30102_fifo_init+0x300>)
   17488:	4798      	blx	r3
   1748a:	0003      	movs	r3, r0
   1748c:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   1748e:	1dfb      	adds	r3, r7, #7
   17490:	781b      	ldrb	r3, [r3, #0]
   17492:	2b00      	cmp	r3, #0
   17494:	d009      	beq.n	174aa <max30102_fifo_init+0xb6>
    {
        max30102_interface_debug_print("max30102: set fifo almost full failed.\n");
   17496:	4b98      	ldr	r3, [pc, #608]	; (176f8 <max30102_fifo_init+0x304>)
   17498:	0018      	movs	r0, r3
   1749a:	4b90      	ldr	r3, [pc, #576]	; (176dc <max30102_fifo_init+0x2e8>)
   1749c:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   1749e:	4b8c      	ldr	r3, [pc, #560]	; (176d0 <max30102_fifo_init+0x2dc>)
   174a0:	0018      	movs	r0, r3
   174a2:	4b8f      	ldr	r3, [pc, #572]	; (176e0 <max30102_fifo_init+0x2ec>)
   174a4:	4798      	blx	r3
       
        return 1;
   174a6:	2301      	movs	r3, #1
   174a8:	e10d      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set mode */
    res = max30102_set_mode(&gs_handle, MAX30102_FIFO_DEFAULT_MODE);//MAX30102_FIFO_DEFAULT_MODE
   174aa:	1dfc      	adds	r4, r7, #7
   174ac:	4b88      	ldr	r3, [pc, #544]	; (176d0 <max30102_fifo_init+0x2dc>)
   174ae:	2103      	movs	r1, #3
   174b0:	0018      	movs	r0, r3
   174b2:	4b92      	ldr	r3, [pc, #584]	; (176fc <max30102_fifo_init+0x308>)
   174b4:	4798      	blx	r3
   174b6:	0003      	movs	r3, r0
   174b8:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   174ba:	1dfb      	adds	r3, r7, #7
   174bc:	781b      	ldrb	r3, [r3, #0]
   174be:	2b00      	cmp	r3, #0
   174c0:	d009      	beq.n	174d6 <max30102_fifo_init+0xe2>
    {
        max30102_interface_debug_print("max30102: set mode failed.\n");
   174c2:	4b8f      	ldr	r3, [pc, #572]	; (17700 <max30102_fifo_init+0x30c>)
   174c4:	0018      	movs	r0, r3
   174c6:	4b85      	ldr	r3, [pc, #532]	; (176dc <max30102_fifo_init+0x2e8>)
   174c8:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   174ca:	4b81      	ldr	r3, [pc, #516]	; (176d0 <max30102_fifo_init+0x2dc>)
   174cc:	0018      	movs	r0, r3
   174ce:	4b84      	ldr	r3, [pc, #528]	; (176e0 <max30102_fifo_init+0x2ec>)
   174d0:	4798      	blx	r3
       
        return 1;
   174d2:	2301      	movs	r3, #1
   174d4:	e0f7      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set spo2 adc range */
    res = max30102_set_spo2_adc_range(&gs_handle,  2);//changed MAX30102_FIFO_DEFAULT_SPO2_ADC_RANGE
   174d6:	1dfc      	adds	r4, r7, #7
   174d8:	4b7d      	ldr	r3, [pc, #500]	; (176d0 <max30102_fifo_init+0x2dc>)
   174da:	2102      	movs	r1, #2
   174dc:	0018      	movs	r0, r3
   174de:	4b89      	ldr	r3, [pc, #548]	; (17704 <max30102_fifo_init+0x310>)
   174e0:	4798      	blx	r3
   174e2:	0003      	movs	r3, r0
   174e4:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   174e6:	1dfb      	adds	r3, r7, #7
   174e8:	781b      	ldrb	r3, [r3, #0]
   174ea:	2b00      	cmp	r3, #0
   174ec:	d009      	beq.n	17502 <max30102_fifo_init+0x10e>
    {
        max30102_interface_debug_print("max30102: set spo2 adc range failed.\n");
   174ee:	4b86      	ldr	r3, [pc, #536]	; (17708 <max30102_fifo_init+0x314>)
   174f0:	0018      	movs	r0, r3
   174f2:	4b7a      	ldr	r3, [pc, #488]	; (176dc <max30102_fifo_init+0x2e8>)
   174f4:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   174f6:	4b76      	ldr	r3, [pc, #472]	; (176d0 <max30102_fifo_init+0x2dc>)
   174f8:	0018      	movs	r0, r3
   174fa:	4b79      	ldr	r3, [pc, #484]	; (176e0 <max30102_fifo_init+0x2ec>)
   174fc:	4798      	blx	r3
       
        return 1;
   174fe:	2301      	movs	r3, #1
   17500:	e0e1      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set spo2 sample rate */
    res = max30102_set_spo2_sample_rate(&gs_handle, MAX30102_FIFO_DEFAULT_SPO2_SAMPLE_RATE);
   17502:	1dfc      	adds	r4, r7, #7
   17504:	4b72      	ldr	r3, [pc, #456]	; (176d0 <max30102_fifo_init+0x2dc>)
   17506:	2101      	movs	r1, #1
   17508:	0018      	movs	r0, r3
   1750a:	4b80      	ldr	r3, [pc, #512]	; (1770c <max30102_fifo_init+0x318>)
   1750c:	4798      	blx	r3
   1750e:	0003      	movs	r3, r0
   17510:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   17512:	1dfb      	adds	r3, r7, #7
   17514:	781b      	ldrb	r3, [r3, #0]
   17516:	2b00      	cmp	r3, #0
   17518:	d009      	beq.n	1752e <max30102_fifo_init+0x13a>
    {
        max30102_interface_debug_print("max30102: set spo2 sample rate failed.\n");
   1751a:	4b7d      	ldr	r3, [pc, #500]	; (17710 <max30102_fifo_init+0x31c>)
   1751c:	0018      	movs	r0, r3
   1751e:	4b6f      	ldr	r3, [pc, #444]	; (176dc <max30102_fifo_init+0x2e8>)
   17520:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   17522:	4b6b      	ldr	r3, [pc, #428]	; (176d0 <max30102_fifo_init+0x2dc>)
   17524:	0018      	movs	r0, r3
   17526:	4b6e      	ldr	r3, [pc, #440]	; (176e0 <max30102_fifo_init+0x2ec>)
   17528:	4798      	blx	r3
       
        return 1;
   1752a:	2301      	movs	r3, #1
   1752c:	e0cb      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set adc resolution */
    res = max30102_set_adc_resolution(&gs_handle, MAX30102_FIFO_DEFAULT_ADC_RESOLUTION);//changed MAX30102_FIFO_DEFAULT_ADC_RESOLUTION
   1752e:	1dfc      	adds	r4, r7, #7
   17530:	4b67      	ldr	r3, [pc, #412]	; (176d0 <max30102_fifo_init+0x2dc>)
   17532:	2103      	movs	r1, #3
   17534:	0018      	movs	r0, r3
   17536:	4b77      	ldr	r3, [pc, #476]	; (17714 <max30102_fifo_init+0x320>)
   17538:	4798      	blx	r3
   1753a:	0003      	movs	r3, r0
   1753c:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   1753e:	1dfb      	adds	r3, r7, #7
   17540:	781b      	ldrb	r3, [r3, #0]
   17542:	2b00      	cmp	r3, #0
   17544:	d009      	beq.n	1755a <max30102_fifo_init+0x166>
    {
        max30102_interface_debug_print("max30102: set adc resolution failed.\n");
   17546:	4b74      	ldr	r3, [pc, #464]	; (17718 <max30102_fifo_init+0x324>)
   17548:	0018      	movs	r0, r3
   1754a:	4b64      	ldr	r3, [pc, #400]	; (176dc <max30102_fifo_init+0x2e8>)
   1754c:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   1754e:	4b60      	ldr	r3, [pc, #384]	; (176d0 <max30102_fifo_init+0x2dc>)
   17550:	0018      	movs	r0, r3
   17552:	4b63      	ldr	r3, [pc, #396]	; (176e0 <max30102_fifo_init+0x2ec>)
   17554:	4798      	blx	r3
       
        return 1;
   17556:	2301      	movs	r3, #1
   17558:	e0b5      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set led red pulse amplitude */ // set the red led current
    res = max30102_set_led_red_pulse_amplitude(&gs_handle, 0x6F);
   1755a:	1dfc      	adds	r4, r7, #7
   1755c:	4b5c      	ldr	r3, [pc, #368]	; (176d0 <max30102_fifo_init+0x2dc>)
   1755e:	216f      	movs	r1, #111	; 0x6f
   17560:	0018      	movs	r0, r3
   17562:	4b6e      	ldr	r3, [pc, #440]	; (1771c <max30102_fifo_init+0x328>)
   17564:	4798      	blx	r3
   17566:	0003      	movs	r3, r0
   17568:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   1756a:	1dfb      	adds	r3, r7, #7
   1756c:	781b      	ldrb	r3, [r3, #0]
   1756e:	2b00      	cmp	r3, #0
   17570:	d009      	beq.n	17586 <max30102_fifo_init+0x192>
    {
        max30102_interface_debug_print("max30102: set led red pulse amplitude failed.\n");
   17572:	4b6b      	ldr	r3, [pc, #428]	; (17720 <max30102_fifo_init+0x32c>)
   17574:	0018      	movs	r0, r3
   17576:	4b59      	ldr	r3, [pc, #356]	; (176dc <max30102_fifo_init+0x2e8>)
   17578:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   1757a:	4b55      	ldr	r3, [pc, #340]	; (176d0 <max30102_fifo_init+0x2dc>)
   1757c:	0018      	movs	r0, r3
   1757e:	4b58      	ldr	r3, [pc, #352]	; (176e0 <max30102_fifo_init+0x2ec>)
   17580:	4798      	blx	r3
       
        return 1;
   17582:	2301      	movs	r3, #1
   17584:	e09f      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set led ir pulse amplitude */ // set the ir led current
    res = max30102_set_led_ir_pulse_amplitude(&gs_handle, 0x6F);
   17586:	1dfc      	adds	r4, r7, #7
   17588:	4b51      	ldr	r3, [pc, #324]	; (176d0 <max30102_fifo_init+0x2dc>)
   1758a:	216f      	movs	r1, #111	; 0x6f
   1758c:	0018      	movs	r0, r3
   1758e:	4b65      	ldr	r3, [pc, #404]	; (17724 <max30102_fifo_init+0x330>)
   17590:	4798      	blx	r3
   17592:	0003      	movs	r3, r0
   17594:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   17596:	1dfb      	adds	r3, r7, #7
   17598:	781b      	ldrb	r3, [r3, #0]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d009      	beq.n	175b2 <max30102_fifo_init+0x1be>
    {
        max30102_interface_debug_print("max30102: set led ir pulse amplitude failed.\n");
   1759e:	4b62      	ldr	r3, [pc, #392]	; (17728 <max30102_fifo_init+0x334>)
   175a0:	0018      	movs	r0, r3
   175a2:	4b4e      	ldr	r3, [pc, #312]	; (176dc <max30102_fifo_init+0x2e8>)
   175a4:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   175a6:	4b4a      	ldr	r3, [pc, #296]	; (176d0 <max30102_fifo_init+0x2dc>)
   175a8:	0018      	movs	r0, r3
   175aa:	4b4d      	ldr	r3, [pc, #308]	; (176e0 <max30102_fifo_init+0x2ec>)
   175ac:	4798      	blx	r3
       
        return 1;
   175ae:	2301      	movs	r3, #1
   175b0:	e089      	b.n	176c6 <max30102_fifo_init+0x2d2>
        //return 1;
    //}
   
	/*********************************************** INT *************************************************************/
    /* set interrupt */
    res = max30102_set_interrupt(&gs_handle, MAX30102_INTERRUPT_FIFO_FULL_EN, MAX30102_BOOL_TRUE);
   175b2:	1dfc      	adds	r4, r7, #7
   175b4:	4b46      	ldr	r3, [pc, #280]	; (176d0 <max30102_fifo_init+0x2dc>)
   175b6:	2201      	movs	r2, #1
   175b8:	2107      	movs	r1, #7
   175ba:	0018      	movs	r0, r3
   175bc:	4b5b      	ldr	r3, [pc, #364]	; (1772c <max30102_fifo_init+0x338>)
   175be:	4798      	blx	r3
   175c0:	0003      	movs	r3, r0
   175c2:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   175c4:	1dfb      	adds	r3, r7, #7
   175c6:	781b      	ldrb	r3, [r3, #0]
   175c8:	2b00      	cmp	r3, #0
   175ca:	d009      	beq.n	175e0 <max30102_fifo_init+0x1ec>
    {
        max30102_interface_debug_print("max30102: set interrupt failed.\n");
   175cc:	4b58      	ldr	r3, [pc, #352]	; (17730 <max30102_fifo_init+0x33c>)
   175ce:	0018      	movs	r0, r3
   175d0:	4b42      	ldr	r3, [pc, #264]	; (176dc <max30102_fifo_init+0x2e8>)
   175d2:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   175d4:	4b3e      	ldr	r3, [pc, #248]	; (176d0 <max30102_fifo_init+0x2dc>)
   175d6:	0018      	movs	r0, r3
   175d8:	4b41      	ldr	r3, [pc, #260]	; (176e0 <max30102_fifo_init+0x2ec>)
   175da:	4798      	blx	r3
       
        return 1;
   175dc:	2301      	movs	r3, #1
   175de:	e072      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set interrupt */
    res = max30102_set_interrupt(&gs_handle, MAX30102_INTERRUPT_PPG_RDY_EN, MAX30102_FIFO_DEFAULT_INTERRUPT_PPG_RDY_EN);
   175e0:	1dfc      	adds	r4, r7, #7
   175e2:	4b3b      	ldr	r3, [pc, #236]	; (176d0 <max30102_fifo_init+0x2dc>)
   175e4:	2200      	movs	r2, #0
   175e6:	2106      	movs	r1, #6
   175e8:	0018      	movs	r0, r3
   175ea:	4b50      	ldr	r3, [pc, #320]	; (1772c <max30102_fifo_init+0x338>)
   175ec:	4798      	blx	r3
   175ee:	0003      	movs	r3, r0
   175f0:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   175f2:	1dfb      	adds	r3, r7, #7
   175f4:	781b      	ldrb	r3, [r3, #0]
   175f6:	2b00      	cmp	r3, #0
   175f8:	d009      	beq.n	1760e <max30102_fifo_init+0x21a>
    {
        max30102_interface_debug_print("max30102: set interrupt failed.\n");
   175fa:	4b4d      	ldr	r3, [pc, #308]	; (17730 <max30102_fifo_init+0x33c>)
   175fc:	0018      	movs	r0, r3
   175fe:	4b37      	ldr	r3, [pc, #220]	; (176dc <max30102_fifo_init+0x2e8>)
   17600:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   17602:	4b33      	ldr	r3, [pc, #204]	; (176d0 <max30102_fifo_init+0x2dc>)
   17604:	0018      	movs	r0, r3
   17606:	4b36      	ldr	r3, [pc, #216]	; (176e0 <max30102_fifo_init+0x2ec>)
   17608:	4798      	blx	r3
       
        return 1;
   1760a:	2301      	movs	r3, #1
   1760c:	e05b      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set interrupt */
    res = max30102_set_interrupt(&gs_handle, MAX30102_INTERRUPT_ALC_OVF_EN, MAX30102_FIFO_DEFAULT_INTERRUPT_ALC_OVF_EN);
   1760e:	1dfc      	adds	r4, r7, #7
   17610:	4b2f      	ldr	r3, [pc, #188]	; (176d0 <max30102_fifo_init+0x2dc>)
   17612:	2201      	movs	r2, #1
   17614:	2105      	movs	r1, #5
   17616:	0018      	movs	r0, r3
   17618:	4b44      	ldr	r3, [pc, #272]	; (1772c <max30102_fifo_init+0x338>)
   1761a:	4798      	blx	r3
   1761c:	0003      	movs	r3, r0
   1761e:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   17620:	1dfb      	adds	r3, r7, #7
   17622:	781b      	ldrb	r3, [r3, #0]
   17624:	2b00      	cmp	r3, #0
   17626:	d009      	beq.n	1763c <max30102_fifo_init+0x248>
    {
        max30102_interface_debug_print("max30102: set interrupt failed.\n");
   17628:	4b41      	ldr	r3, [pc, #260]	; (17730 <max30102_fifo_init+0x33c>)
   1762a:	0018      	movs	r0, r3
   1762c:	4b2b      	ldr	r3, [pc, #172]	; (176dc <max30102_fifo_init+0x2e8>)
   1762e:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   17630:	4b27      	ldr	r3, [pc, #156]	; (176d0 <max30102_fifo_init+0x2dc>)
   17632:	0018      	movs	r0, r3
   17634:	4b2a      	ldr	r3, [pc, #168]	; (176e0 <max30102_fifo_init+0x2ec>)
   17636:	4798      	blx	r3
       
        return 1;
   17638:	2301      	movs	r3, #1
   1763a:	e044      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* set interrupt */
    res = max30102_set_interrupt(&gs_handle, MAX30102_INTERRUPT_DIE_TEMP_RDY_EN, MAX30102_FIFO_DEFAULT_INTERRUPT_DIE_TEMP_RDY_EN);
   1763c:	1dfc      	adds	r4, r7, #7
   1763e:	4b24      	ldr	r3, [pc, #144]	; (176d0 <max30102_fifo_init+0x2dc>)
   17640:	2201      	movs	r2, #1
   17642:	2101      	movs	r1, #1
   17644:	0018      	movs	r0, r3
   17646:	4b39      	ldr	r3, [pc, #228]	; (1772c <max30102_fifo_init+0x338>)
   17648:	4798      	blx	r3
   1764a:	0003      	movs	r3, r0
   1764c:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   1764e:	1dfb      	adds	r3, r7, #7
   17650:	781b      	ldrb	r3, [r3, #0]
   17652:	2b00      	cmp	r3, #0
   17654:	d009      	beq.n	1766a <max30102_fifo_init+0x276>
    {
        max30102_interface_debug_print("max30102: set interrupt failed.\n");
   17656:	4b36      	ldr	r3, [pc, #216]	; (17730 <max30102_fifo_init+0x33c>)
   17658:	0018      	movs	r0, r3
   1765a:	4b20      	ldr	r3, [pc, #128]	; (176dc <max30102_fifo_init+0x2e8>)
   1765c:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   1765e:	4b1c      	ldr	r3, [pc, #112]	; (176d0 <max30102_fifo_init+0x2dc>)
   17660:	0018      	movs	r0, r3
   17662:	4b1f      	ldr	r3, [pc, #124]	; (176e0 <max30102_fifo_init+0x2ec>)
   17664:	4798      	blx	r3
       
        return 1;
   17666:	2301      	movs	r3, #1
   17668:	e02d      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* disable shutdown */
    res = max30102_set_shutdown(&gs_handle, MAX30102_BOOL_FALSE);
   1766a:	1dfc      	adds	r4, r7, #7
   1766c:	4b18      	ldr	r3, [pc, #96]	; (176d0 <max30102_fifo_init+0x2dc>)
   1766e:	2100      	movs	r1, #0
   17670:	0018      	movs	r0, r3
   17672:	4b18      	ldr	r3, [pc, #96]	; (176d4 <max30102_fifo_init+0x2e0>)
   17674:	4798      	blx	r3
   17676:	0003      	movs	r3, r0
   17678:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   1767a:	1dfb      	adds	r3, r7, #7
   1767c:	781b      	ldrb	r3, [r3, #0]
   1767e:	2b00      	cmp	r3, #0
   17680:	d009      	beq.n	17696 <max30102_fifo_init+0x2a2>
    {
        max30102_interface_debug_print("max30102: set shutdown failed.\n");
   17682:	4b15      	ldr	r3, [pc, #84]	; (176d8 <max30102_fifo_init+0x2e4>)
   17684:	0018      	movs	r0, r3
   17686:	4b15      	ldr	r3, [pc, #84]	; (176dc <max30102_fifo_init+0x2e8>)
   17688:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   1768a:	4b11      	ldr	r3, [pc, #68]	; (176d0 <max30102_fifo_init+0x2dc>)
   1768c:	0018      	movs	r0, r3
   1768e:	4b14      	ldr	r3, [pc, #80]	; (176e0 <max30102_fifo_init+0x2ec>)
   17690:	4798      	blx	r3
       
        return 1;
   17692:	2301      	movs	r3, #1
   17694:	e017      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    /* get status */
    res = max30102_get_interrupt_status(&gs_handle, MAX30102_INTERRUPT_STATUS_FIFO_FULL, &enable);
   17696:	1dfc      	adds	r4, r7, #7
   17698:	1dba      	adds	r2, r7, #6
   1769a:	4b0d      	ldr	r3, [pc, #52]	; (176d0 <max30102_fifo_init+0x2dc>)
   1769c:	2107      	movs	r1, #7
   1769e:	0018      	movs	r0, r3
   176a0:	4b24      	ldr	r3, [pc, #144]	; (17734 <max30102_fifo_init+0x340>)
   176a2:	4798      	blx	r3
   176a4:	0003      	movs	r3, r0
   176a6:	7023      	strb	r3, [r4, #0]
    if (res != 0)
   176a8:	1dfb      	adds	r3, r7, #7
   176aa:	781b      	ldrb	r3, [r3, #0]
   176ac:	2b00      	cmp	r3, #0
   176ae:	d009      	beq.n	176c4 <max30102_fifo_init+0x2d0>
    {
        max30102_interface_debug_print("max30102: get interrupt status failed.\n");
   176b0:	4b21      	ldr	r3, [pc, #132]	; (17738 <max30102_fifo_init+0x344>)
   176b2:	0018      	movs	r0, r3
   176b4:	4b09      	ldr	r3, [pc, #36]	; (176dc <max30102_fifo_init+0x2e8>)
   176b6:	4798      	blx	r3
        (void)max30102_deinit(&gs_handle);
   176b8:	4b05      	ldr	r3, [pc, #20]	; (176d0 <max30102_fifo_init+0x2dc>)
   176ba:	0018      	movs	r0, r3
   176bc:	4b08      	ldr	r3, [pc, #32]	; (176e0 <max30102_fifo_init+0x2ec>)
   176be:	4798      	blx	r3
       
        return 1;
   176c0:	2301      	movs	r3, #1
   176c2:	e000      	b.n	176c6 <max30102_fifo_init+0x2d2>
    }
    
    return 0;
   176c4:	2300      	movs	r3, #0
}
   176c6:	0018      	movs	r0, r3
   176c8:	46bd      	mov	sp, r7
   176ca:	b003      	add	sp, #12
   176cc:	bd90      	pop	{r4, r7, pc}
   176ce:	46c0      	nop			; (mov r8, r8)
   176d0:	20004754 	.word	0x20004754
   176d4:	00016ff5 	.word	0x00016ff5
   176d8:	0003a728 	.word	0x0003a728
   176dc:	0001795d 	.word	0x0001795d
   176e0:	000156a9 	.word	0x000156a9
   176e4:	00016dd5 	.word	0x00016dd5
   176e8:	0003a748 	.word	0x0003a748
   176ec:	00016e85 	.word	0x00016e85
   176f0:	0003a778 	.word	0x0003a778
   176f4:	00016f35 	.word	0x00016f35
   176f8:	0003a79c 	.word	0x0003a79c
   176fc:	000170ad 	.word	0x000170ad
   17700:	0003a7c4 	.word	0x0003a7c4
   17704:	00017155 	.word	0x00017155
   17708:	0003a7e0 	.word	0x0003a7e0
   1770c:	00017205 	.word	0x00017205
   17710:	0003a808 	.word	0x0003a808
   17714:	000172b5 	.word	0x000172b5
   17718:	0003a830 	.word	0x0003a830
   1771c:	0001735d 	.word	0x0001735d
   17720:	0003a858 	.word	0x0003a858
   17724:	000173a9 	.word	0x000173a9
   17728:	0003a888 	.word	0x0003a888
   1772c:	00016c49 	.word	0x00016c49
   17730:	0003a8b8 	.word	0x0003a8b8
   17734:	00016b79 	.word	0x00016b79
   17738:	0003a8dc 	.word	0x0003a8dc

0001773c <max30102_fifo_read>:
 *                - 0 success
 *                - 1 read failed
 * @note          none
 */
uint8_t max30102_fifo_read(uint8_t *raw_red, uint8_t *raw_ir, uint8_t *len)
{
   1773c:	b5b0      	push	{r4, r5, r7, lr}
   1773e:	b086      	sub	sp, #24
   17740:	af00      	add	r7, sp, #0
   17742:	60f8      	str	r0, [r7, #12]
   17744:	60b9      	str	r1, [r7, #8]
   17746:	607a      	str	r2, [r7, #4]
	uint8_t res = 0;
   17748:	2317      	movs	r3, #23
   1774a:	18fb      	adds	r3, r7, r3
   1774c:	2200      	movs	r2, #0
   1774e:	701a      	strb	r2, [r3, #0]
	res = max30102_read(&gs_handle, raw_red, raw_ir, len);
   17750:	2317      	movs	r3, #23
   17752:	18fc      	adds	r4, r7, r3
   17754:	687b      	ldr	r3, [r7, #4]
   17756:	68ba      	ldr	r2, [r7, #8]
   17758:	68f9      	ldr	r1, [r7, #12]
   1775a:	4811      	ldr	r0, [pc, #68]	; (177a0 <max30102_fifo_read+0x64>)
   1775c:	4d11      	ldr	r5, [pc, #68]	; (177a4 <max30102_fifo_read+0x68>)
   1775e:	47a8      	blx	r5
   17760:	0003      	movs	r3, r0
   17762:	7023      	strb	r3, [r4, #0]
	struct HrPacket HrinfoPacket;
	if (raw_red[0]< 10){
   17764:	68fb      	ldr	r3, [r7, #12]
   17766:	781b      	ldrb	r3, [r3, #0]
   17768:	2b09      	cmp	r3, #9
   1776a:	d803      	bhi.n	17774 <max30102_fifo_read+0x38>
		return res;
   1776c:	2317      	movs	r3, #23
   1776e:	18fb      	adds	r3, r7, r3
   17770:	781b      	ldrb	r3, [r3, #0]
   17772:	e011      	b.n	17798 <max30102_fifo_read+0x5c>
	}
	HrinfoPacket.hr = raw_red[0];
   17774:	68fb      	ldr	r3, [r7, #12]
   17776:	781a      	ldrb	r2, [r3, #0]
   17778:	2314      	movs	r3, #20
   1777a:	18fb      	adds	r3, r7, r3
   1777c:	701a      	strb	r2, [r3, #0]
	HrinfoPacket.spo2 = raw_ir[0];
   1777e:	68bb      	ldr	r3, [r7, #8]
   17780:	781a      	ldrb	r2, [r3, #0]
   17782:	2314      	movs	r3, #20
   17784:	18fb      	adds	r3, r7, r3
   17786:	705a      	strb	r2, [r3, #1]
	WifiAddHrDataToQueue(&HrinfoPacket);
   17788:	2314      	movs	r3, #20
   1778a:	18fb      	adds	r3, r7, r3
   1778c:	0018      	movs	r0, r3
   1778e:	4b06      	ldr	r3, [pc, #24]	; (177a8 <max30102_fifo_read+0x6c>)
   17790:	4798      	blx	r3
	return res;
   17792:	2317      	movs	r3, #23
   17794:	18fb      	adds	r3, r7, r3
   17796:	781b      	ldrb	r3, [r3, #0]
}
   17798:	0018      	movs	r0, r3
   1779a:	46bd      	mov	sp, r7
   1779c:	b006      	add	sp, #24
   1779e:	bdb0      	pop	{r4, r5, r7, pc}
   177a0:	20004754 	.word	0x20004754
   177a4:	00015781 	.word	0x00015781
   177a8:	0001a311 	.word	0x0001a311

000177ac <max30102_init_f>:
 *                - 0 success
 *                - 1 failed
 * @note          none
 */
uint8_t max30102_init_f()
{
   177ac:	b580      	push	{r7, lr}
   177ae:	af00      	add	r7, sp, #0
	/* link interface function */
	DRIVER_MAX30102_LINK_INIT(&gs_handle, max30102_handle_t);
   177b0:	4b0f      	ldr	r3, [pc, #60]	; (177f0 <max30102_init_f+0x44>)
   177b2:	22e4      	movs	r2, #228	; 0xe4
   177b4:	2100      	movs	r1, #0
   177b6:	0018      	movs	r0, r3
   177b8:	4b0e      	ldr	r3, [pc, #56]	; (177f4 <max30102_init_f+0x48>)
   177ba:	4798      	blx	r3
	DRIVER_MAX30102_LINK_IIC_INIT(&gs_handle, max30102_interface_iic_init);
   177bc:	4b0c      	ldr	r3, [pc, #48]	; (177f0 <max30102_init_f+0x44>)
   177be:	4a0e      	ldr	r2, [pc, #56]	; (177f8 <max30102_init_f+0x4c>)
   177c0:	601a      	str	r2, [r3, #0]
	DRIVER_MAX30102_LINK_IIC_DEINIT(&gs_handle, max30102_interface_iic_deinit);
   177c2:	4b0b      	ldr	r3, [pc, #44]	; (177f0 <max30102_init_f+0x44>)
   177c4:	4a0d      	ldr	r2, [pc, #52]	; (177fc <max30102_init_f+0x50>)
   177c6:	605a      	str	r2, [r3, #4]
	DRIVER_MAX30102_LINK_IIC_READ(&gs_handle, max30102_interface_iic_read);
   177c8:	4b09      	ldr	r3, [pc, #36]	; (177f0 <max30102_init_f+0x44>)
   177ca:	4a0d      	ldr	r2, [pc, #52]	; (17800 <max30102_init_f+0x54>)
   177cc:	609a      	str	r2, [r3, #8]
	DRIVER_MAX30102_LINK_IIC_WRITE(&gs_handle, max30102_interface_iic_write);
   177ce:	4b08      	ldr	r3, [pc, #32]	; (177f0 <max30102_init_f+0x44>)
   177d0:	4a0c      	ldr	r2, [pc, #48]	; (17804 <max30102_init_f+0x58>)
   177d2:	60da      	str	r2, [r3, #12]
	DRIVER_MAX30102_LINK_DELAY_MS(&gs_handle, max30102_interface_delay_ms);
   177d4:	4b06      	ldr	r3, [pc, #24]	; (177f0 <max30102_init_f+0x44>)
   177d6:	4a0c      	ldr	r2, [pc, #48]	; (17808 <max30102_init_f+0x5c>)
   177d8:	615a      	str	r2, [r3, #20]
	DRIVER_MAX30102_LINK_DEBUG_PRINT(&gs_handle, max30102_interface_debug_print);
   177da:	4b05      	ldr	r3, [pc, #20]	; (177f0 <max30102_init_f+0x44>)
   177dc:	4a0b      	ldr	r2, [pc, #44]	; (1780c <max30102_init_f+0x60>)
   177de:	619a      	str	r2, [r3, #24]
	
	// initialize max30102
	return max30102_init(&gs_handle);
   177e0:	4b03      	ldr	r3, [pc, #12]	; (177f0 <max30102_init_f+0x44>)
   177e2:	0018      	movs	r0, r3
   177e4:	4b0a      	ldr	r3, [pc, #40]	; (17810 <max30102_init_f+0x64>)
   177e6:	4798      	blx	r3
   177e8:	0003      	movs	r3, r0
}
   177ea:	0018      	movs	r0, r3
   177ec:	46bd      	mov	sp, r7
   177ee:	bd80      	pop	{r7, pc}
   177f0:	20004754 	.word	0x20004754
   177f4:	00038507 	.word	0x00038507
   177f8:	00017815 	.word	0x00017815
   177fc:	00017821 	.word	0x00017821
   17800:	0001782d 	.word	0x0001782d
   17804:	00017899 	.word	0x00017899
   17808:	00017941 	.word	0x00017941
   1780c:	0001795d 	.word	0x0001795d
   17810:	00015465 	.word	0x00015465

00017814 <max30102_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t max30102_interface_iic_init(void)
{
   17814:	b580      	push	{r7, lr}
   17816:	af00      	add	r7, sp, #0
    return 0;
   17818:	2300      	movs	r3, #0
}
   1781a:	0018      	movs	r0, r3
   1781c:	46bd      	mov	sp, r7
   1781e:	bd80      	pop	{r7, pc}

00017820 <max30102_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t max30102_interface_iic_deinit(void)
{
   17820:	b580      	push	{r7, lr}
   17822:	af00      	add	r7, sp, #0
    return 0;
   17824:	2300      	movs	r3, #0
}
   17826:	0018      	movs	r0, r3
   17828:	46bd      	mov	sp, r7
   1782a:	bd80      	pop	{r7, pc}

0001782c <max30102_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t max30102_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{	
   1782c:	b590      	push	{r4, r7, lr}
   1782e:	b087      	sub	sp, #28
   17830:	af00      	add	r7, sp, #0
   17832:	0004      	movs	r4, r0
   17834:	0008      	movs	r0, r1
   17836:	603a      	str	r2, [r7, #0]
   17838:	0019      	movs	r1, r3
   1783a:	1dfb      	adds	r3, r7, #7
   1783c:	1c22      	adds	r2, r4, #0
   1783e:	701a      	strb	r2, [r3, #0]
   17840:	1dbb      	adds	r3, r7, #6
   17842:	1c02      	adds	r2, r0, #0
   17844:	701a      	strb	r2, [r3, #0]
   17846:	1d3b      	adds	r3, r7, #4
   17848:	1c0a      	adds	r2, r1, #0
   1784a:	801a      	strh	r2, [r3, #0]

	I2C_Data maxData;
	
	maxData.address = addr;
   1784c:	2308      	movs	r3, #8
   1784e:	18fb      	adds	r3, r7, r3
   17850:	1dfa      	adds	r2, r7, #7
   17852:	7812      	ldrb	r2, [r2, #0]
   17854:	701a      	strb	r2, [r3, #0]
	maxData.msgOut = &reg;
   17856:	2308      	movs	r3, #8
   17858:	18fb      	adds	r3, r7, r3
   1785a:	1dba      	adds	r2, r7, #6
   1785c:	605a      	str	r2, [r3, #4]
	maxData.lenOut = 1;
   1785e:	2308      	movs	r3, #8
   17860:	18fb      	adds	r3, r7, r3
   17862:	2201      	movs	r2, #1
   17864:	81da      	strh	r2, [r3, #14]
	
	maxData.msgIn = buf;
   17866:	2308      	movs	r3, #8
   17868:	18fb      	adds	r3, r7, r3
   1786a:	683a      	ldr	r2, [r7, #0]
   1786c:	609a      	str	r2, [r3, #8]
	maxData.lenIn = len;
   1786e:	2308      	movs	r3, #8
   17870:	18fb      	adds	r3, r7, r3
   17872:	1d3a      	adds	r2, r7, #4
   17874:	8812      	ldrh	r2, [r2, #0]
   17876:	819a      	strh	r2, [r3, #12]

	return I2cReadDataWait(&maxData,0, 100);
   17878:	2308      	movs	r3, #8
   1787a:	18fb      	adds	r3, r7, r3
   1787c:	2264      	movs	r2, #100	; 0x64
   1787e:	2100      	movs	r1, #0
   17880:	0018      	movs	r0, r3
   17882:	4b04      	ldr	r3, [pc, #16]	; (17894 <max30102_interface_iic_read+0x68>)
   17884:	4798      	blx	r3
   17886:	0003      	movs	r3, r0
   17888:	b2db      	uxtb	r3, r3
}
   1788a:	0018      	movs	r0, r3
   1788c:	46bd      	mov	sp, r7
   1788e:	b007      	add	sp, #28
   17890:	bd90      	pop	{r4, r7, pc}
   17892:	46c0      	nop			; (mov r8, r8)
   17894:	0001807d 	.word	0x0001807d

00017898 <max30102_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t max30102_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
   17898:	b590      	push	{r4, r7, lr}
   1789a:	b099      	sub	sp, #100	; 0x64
   1789c:	af00      	add	r7, sp, #0
   1789e:	0004      	movs	r4, r0
   178a0:	0008      	movs	r0, r1
   178a2:	603a      	str	r2, [r7, #0]
   178a4:	0019      	movs	r1, r3
   178a6:	1dfb      	adds	r3, r7, #7
   178a8:	1c22      	adds	r2, r4, #0
   178aa:	701a      	strb	r2, [r3, #0]
   178ac:	1dbb      	adds	r3, r7, #6
   178ae:	1c02      	adds	r2, r0, #0
   178b0:	701a      	strb	r2, [r3, #0]
   178b2:	1d3b      	adds	r3, r7, #4
   178b4:	1c0a      	adds	r2, r1, #0
   178b6:	801a      	strh	r2, [r3, #0]
	uint8_t msgbuffer[64]; // buffer
	I2C_Data maxData;
	
	msgbuffer[0] = reg;
   178b8:	231c      	movs	r3, #28
   178ba:	18fb      	adds	r3, r7, r3
   178bc:	1dba      	adds	r2, r7, #6
   178be:	7812      	ldrb	r2, [r2, #0]
   178c0:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < len; i++){
   178c2:	235e      	movs	r3, #94	; 0x5e
   178c4:	18fb      	adds	r3, r7, r3
   178c6:	2200      	movs	r2, #0
   178c8:	801a      	strh	r2, [r3, #0]
   178ca:	e013      	b.n	178f4 <max30102_interface_iic_write+0x5c>
		msgbuffer[i+1] = buf[i];
   178cc:	235e      	movs	r3, #94	; 0x5e
   178ce:	18fb      	adds	r3, r7, r3
   178d0:	881b      	ldrh	r3, [r3, #0]
   178d2:	3301      	adds	r3, #1
   178d4:	225e      	movs	r2, #94	; 0x5e
   178d6:	18ba      	adds	r2, r7, r2
   178d8:	8812      	ldrh	r2, [r2, #0]
   178da:	6839      	ldr	r1, [r7, #0]
   178dc:	188a      	adds	r2, r1, r2
   178de:	7811      	ldrb	r1, [r2, #0]
   178e0:	221c      	movs	r2, #28
   178e2:	18ba      	adds	r2, r7, r2
   178e4:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < len; i++){
   178e6:	235e      	movs	r3, #94	; 0x5e
   178e8:	18fb      	adds	r3, r7, r3
   178ea:	881a      	ldrh	r2, [r3, #0]
   178ec:	235e      	movs	r3, #94	; 0x5e
   178ee:	18fb      	adds	r3, r7, r3
   178f0:	3201      	adds	r2, #1
   178f2:	801a      	strh	r2, [r3, #0]
   178f4:	235e      	movs	r3, #94	; 0x5e
   178f6:	18fa      	adds	r2, r7, r3
   178f8:	1d3b      	adds	r3, r7, #4
   178fa:	8812      	ldrh	r2, [r2, #0]
   178fc:	881b      	ldrh	r3, [r3, #0]
   178fe:	429a      	cmp	r2, r3
   17900:	d3e4      	bcc.n	178cc <max30102_interface_iic_write+0x34>
	}
	
	maxData.address = addr;
   17902:	230c      	movs	r3, #12
   17904:	18fb      	adds	r3, r7, r3
   17906:	1dfa      	adds	r2, r7, #7
   17908:	7812      	ldrb	r2, [r2, #0]
   1790a:	701a      	strb	r2, [r3, #0]
	maxData.msgOut = &msgbuffer;
   1790c:	230c      	movs	r3, #12
   1790e:	18fb      	adds	r3, r7, r3
   17910:	221c      	movs	r2, #28
   17912:	18ba      	adds	r2, r7, r2
   17914:	605a      	str	r2, [r3, #4]
	maxData.lenOut = len + 1;
   17916:	1d3b      	adds	r3, r7, #4
   17918:	881b      	ldrh	r3, [r3, #0]
   1791a:	3301      	adds	r3, #1
   1791c:	b29a      	uxth	r2, r3
   1791e:	230c      	movs	r3, #12
   17920:	18fb      	adds	r3, r7, r3
   17922:	81da      	strh	r2, [r3, #14]

	return I2cWriteDataWait(&maxData, 100);
   17924:	230c      	movs	r3, #12
   17926:	18fb      	adds	r3, r7, r3
   17928:	2164      	movs	r1, #100	; 0x64
   1792a:	0018      	movs	r0, r3
   1792c:	4b03      	ldr	r3, [pc, #12]	; (1793c <max30102_interface_iic_write+0xa4>)
   1792e:	4798      	blx	r3
   17930:	0003      	movs	r3, r0
   17932:	b2db      	uxtb	r3, r3
}
   17934:	0018      	movs	r0, r3
   17936:	46bd      	mov	sp, r7
   17938:	b019      	add	sp, #100	; 0x64
   1793a:	bd90      	pop	{r4, r7, pc}
   1793c:	00017fa5 	.word	0x00017fa5

00017940 <max30102_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void max30102_interface_delay_ms(uint32_t ms)
{
   17940:	b580      	push	{r7, lr}
   17942:	b082      	sub	sp, #8
   17944:	af00      	add	r7, sp, #0
   17946:	6078      	str	r0, [r7, #4]
	delay_cycles_ms(ms);
   17948:	687b      	ldr	r3, [r7, #4]
   1794a:	0018      	movs	r0, r3
   1794c:	4b02      	ldr	r3, [pc, #8]	; (17958 <max30102_interface_delay_ms+0x18>)
   1794e:	4798      	blx	r3
}
   17950:	46c0      	nop			; (mov r8, r8)
   17952:	46bd      	mov	sp, r7
   17954:	b002      	add	sp, #8
   17956:	bd80      	pop	{r7, pc}
   17958:	000230b1 	.word	0x000230b1

0001795c <max30102_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void max30102_interface_debug_print(const char *const fmt, ...)
{
   1795c:	b40f      	push	{r0, r1, r2, r3}
   1795e:	b590      	push	{r4, r7, lr}
   17960:	b0c3      	sub	sp, #268	; 0x10c
   17962:	af00      	add	r7, sp, #0
    char buffer[256]; 
    va_list args;     

    va_start(args, fmt);              
   17964:	238e      	movs	r3, #142	; 0x8e
   17966:	005b      	lsls	r3, r3, #1
   17968:	18fb      	adds	r3, r7, r3
   1796a:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args); 
   1796c:	687c      	ldr	r4, [r7, #4]
   1796e:	238c      	movs	r3, #140	; 0x8c
   17970:	005b      	lsls	r3, r3, #1
   17972:	18fb      	adds	r3, r7, r3
   17974:	681a      	ldr	r2, [r3, #0]
   17976:	2380      	movs	r3, #128	; 0x80
   17978:	0059      	lsls	r1, r3, #1
   1797a:	2308      	movs	r3, #8
   1797c:	18f8      	adds	r0, r7, r3
   1797e:	0023      	movs	r3, r4
   17980:	4c08      	ldr	r4, [pc, #32]	; (179a4 <max30102_interface_debug_print+0x48>)
   17982:	47a0      	blx	r4
    va_end(args);                    

    SerialConsoleWriteString(buffer);
   17984:	2308      	movs	r3, #8
   17986:	18fb      	adds	r3, r7, r3
   17988:	0018      	movs	r0, r3
   1798a:	4b07      	ldr	r3, [pc, #28]	; (179a8 <max30102_interface_debug_print+0x4c>)
   1798c:	4798      	blx	r3
    SerialConsoleWriteString("\r\n");
   1798e:	4b07      	ldr	r3, [pc, #28]	; (179ac <max30102_interface_debug_print+0x50>)
   17990:	0018      	movs	r0, r3
   17992:	4b05      	ldr	r3, [pc, #20]	; (179a8 <max30102_interface_debug_print+0x4c>)
   17994:	4798      	blx	r3
}
   17996:	46c0      	nop			; (mov r8, r8)
   17998:	46bd      	mov	sp, r7
   1799a:	b043      	add	sp, #268	; 0x10c
   1799c:	bc90      	pop	{r4, r7}
   1799e:	bc08      	pop	{r3}
   179a0:	b004      	add	sp, #16
   179a2:	4718      	bx	r3
   179a4:	00038af9 	.word	0x00038af9
   179a8:	00020bc5 	.word	0x00020bc5
   179ac:	0003a904 	.word	0x0003a904

000179b0 <system_interrupt_enable>:
{
   179b0:	b580      	push	{r7, lr}
   179b2:	b082      	sub	sp, #8
   179b4:	af00      	add	r7, sp, #0
   179b6:	0002      	movs	r2, r0
   179b8:	1dfb      	adds	r3, r7, #7
   179ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   179bc:	4b06      	ldr	r3, [pc, #24]	; (179d8 <system_interrupt_enable+0x28>)
   179be:	1dfa      	adds	r2, r7, #7
   179c0:	7812      	ldrb	r2, [r2, #0]
   179c2:	0011      	movs	r1, r2
   179c4:	221f      	movs	r2, #31
   179c6:	400a      	ands	r2, r1
   179c8:	2101      	movs	r1, #1
   179ca:	4091      	lsls	r1, r2
   179cc:	000a      	movs	r2, r1
   179ce:	601a      	str	r2, [r3, #0]
}
   179d0:	46c0      	nop			; (mov r8, r8)
   179d2:	46bd      	mov	sp, r7
   179d4:	b002      	add	sp, #8
   179d6:	bd80      	pop	{r7, pc}
   179d8:	e000e100 	.word	0xe000e100

000179dc <i2c_master_is_syncing>:
{
   179dc:	b580      	push	{r7, lr}
   179de:	b084      	sub	sp, #16
   179e0:	af00      	add	r7, sp, #0
   179e2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   179e4:	687b      	ldr	r3, [r7, #4]
   179e6:	681b      	ldr	r3, [r3, #0]
   179e8:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   179ea:	68fb      	ldr	r3, [r7, #12]
   179ec:	69db      	ldr	r3, [r3, #28]
   179ee:	2207      	movs	r2, #7
   179f0:	4013      	ands	r3, r2
   179f2:	1e5a      	subs	r2, r3, #1
   179f4:	4193      	sbcs	r3, r2
   179f6:	b2db      	uxtb	r3, r3
}
   179f8:	0018      	movs	r0, r3
   179fa:	46bd      	mov	sp, r7
   179fc:	b004      	add	sp, #16
   179fe:	bd80      	pop	{r7, pc}

00017a00 <_i2c_master_wait_for_sync>:
{
   17a00:	b580      	push	{r7, lr}
   17a02:	b082      	sub	sp, #8
   17a04:	af00      	add	r7, sp, #0
   17a06:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17a08:	46c0      	nop			; (mov r8, r8)
   17a0a:	687b      	ldr	r3, [r7, #4]
   17a0c:	0018      	movs	r0, r3
   17a0e:	4b04      	ldr	r3, [pc, #16]	; (17a20 <_i2c_master_wait_for_sync+0x20>)
   17a10:	4798      	blx	r3
   17a12:	1e03      	subs	r3, r0, #0
   17a14:	d1f9      	bne.n	17a0a <_i2c_master_wait_for_sync+0xa>
}
   17a16:	46c0      	nop			; (mov r8, r8)
   17a18:	46bd      	mov	sp, r7
   17a1a:	b002      	add	sp, #8
   17a1c:	bd80      	pop	{r7, pc}
   17a1e:	46c0      	nop			; (mov r8, r8)
   17a20:	000179dd 	.word	0x000179dd

00017a24 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   17a24:	b580      	push	{r7, lr}
   17a26:	b082      	sub	sp, #8
   17a28:	af00      	add	r7, sp, #0
   17a2a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   17a2c:	687b      	ldr	r3, [r7, #4]
   17a2e:	2264      	movs	r2, #100	; 0x64
   17a30:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   17a32:	687b      	ldr	r3, [r7, #4]
   17a34:	4a1b      	ldr	r2, [pc, #108]	; (17aa4 <i2c_master_get_config_defaults+0x80>)
   17a36:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   17a38:	687b      	ldr	r3, [r7, #4]
   17a3a:	2200      	movs	r2, #0
   17a3c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   17a3e:	687b      	ldr	r3, [r7, #4]
   17a40:	2200      	movs	r2, #0
   17a42:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   17a44:	687b      	ldr	r3, [r7, #4]
   17a46:	2200      	movs	r2, #0
   17a48:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   17a4a:	687b      	ldr	r3, [r7, #4]
   17a4c:	2280      	movs	r2, #128	; 0x80
   17a4e:	0392      	lsls	r2, r2, #14
   17a50:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   17a52:	687b      	ldr	r3, [r7, #4]
   17a54:	2201      	movs	r2, #1
   17a56:	4252      	negs	r2, r2
   17a58:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   17a5a:	687b      	ldr	r3, [r7, #4]
   17a5c:	2201      	movs	r2, #1
   17a5e:	4252      	negs	r2, r2
   17a60:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   17a62:	687b      	ldr	r3, [r7, #4]
   17a64:	2200      	movs	r2, #0
   17a66:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   17a68:	687b      	ldr	r3, [r7, #4]
   17a6a:	2200      	movs	r2, #0
   17a6c:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   17a6e:	687b      	ldr	r3, [r7, #4]
   17a70:	2224      	movs	r2, #36	; 0x24
   17a72:	2100      	movs	r1, #0
   17a74:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   17a76:	687b      	ldr	r3, [r7, #4]
   17a78:	2200      	movs	r2, #0
   17a7a:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   17a7c:	687b      	ldr	r3, [r7, #4]
   17a7e:	222c      	movs	r2, #44	; 0x2c
   17a80:	2100      	movs	r1, #0
   17a82:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   17a84:	687b      	ldr	r3, [r7, #4]
   17a86:	222d      	movs	r2, #45	; 0x2d
   17a88:	2100      	movs	r1, #0
   17a8a:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   17a8c:	687b      	ldr	r3, [r7, #4]
   17a8e:	222e      	movs	r2, #46	; 0x2e
   17a90:	2100      	movs	r1, #0
   17a92:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   17a94:	687b      	ldr	r3, [r7, #4]
   17a96:	22d7      	movs	r2, #215	; 0xd7
   17a98:	861a      	strh	r2, [r3, #48]	; 0x30
}
   17a9a:	46c0      	nop			; (mov r8, r8)
   17a9c:	46bd      	mov	sp, r7
   17a9e:	b002      	add	sp, #8
   17aa0:	bd80      	pop	{r7, pc}
   17aa2:	46c0      	nop			; (mov r8, r8)
   17aa4:	00000d48 	.word	0x00000d48

00017aa8 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   17aa8:	b580      	push	{r7, lr}
   17aaa:	b084      	sub	sp, #16
   17aac:	af00      	add	r7, sp, #0
   17aae:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17ab0:	687b      	ldr	r3, [r7, #4]
   17ab2:	681b      	ldr	r3, [r3, #0]
   17ab4:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   17ab6:	2300      	movs	r3, #0
   17ab8:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17aba:	687b      	ldr	r3, [r7, #4]
   17abc:	0018      	movs	r0, r3
   17abe:	4b14      	ldr	r3, [pc, #80]	; (17b10 <i2c_master_enable+0x68>)
   17ac0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   17ac2:	68bb      	ldr	r3, [r7, #8]
   17ac4:	681b      	ldr	r3, [r3, #0]
   17ac6:	2202      	movs	r2, #2
   17ac8:	431a      	orrs	r2, r3
   17aca:	68bb      	ldr	r3, [r7, #8]
   17acc:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   17ace:	687b      	ldr	r3, [r7, #4]
   17ad0:	681b      	ldr	r3, [r3, #0]
   17ad2:	0018      	movs	r0, r3
   17ad4:	4b0f      	ldr	r3, [pc, #60]	; (17b14 <i2c_master_enable+0x6c>)
   17ad6:	4798      	blx	r3
   17ad8:	0003      	movs	r3, r0
   17ada:	0018      	movs	r0, r3
   17adc:	4b0e      	ldr	r3, [pc, #56]	; (17b18 <i2c_master_enable+0x70>)
   17ade:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   17ae0:	e00c      	b.n	17afc <i2c_master_enable+0x54>
		timeout_counter++;
   17ae2:	68fb      	ldr	r3, [r7, #12]
   17ae4:	3301      	adds	r3, #1
   17ae6:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   17ae8:	687b      	ldr	r3, [r7, #4]
   17aea:	88db      	ldrh	r3, [r3, #6]
   17aec:	001a      	movs	r2, r3
   17aee:	68fb      	ldr	r3, [r7, #12]
   17af0:	429a      	cmp	r2, r3
   17af2:	d803      	bhi.n	17afc <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   17af4:	68bb      	ldr	r3, [r7, #8]
   17af6:	2210      	movs	r2, #16
   17af8:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   17afa:	e006      	b.n	17b0a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   17afc:	68bb      	ldr	r3, [r7, #8]
   17afe:	8b5b      	ldrh	r3, [r3, #26]
   17b00:	b29b      	uxth	r3, r3
   17b02:	001a      	movs	r2, r3
   17b04:	2310      	movs	r3, #16
   17b06:	4013      	ands	r3, r2
   17b08:	d0eb      	beq.n	17ae2 <i2c_master_enable+0x3a>
		}
	}
}
   17b0a:	46bd      	mov	sp, r7
   17b0c:	b004      	add	sp, #16
   17b0e:	bd80      	pop	{r7, pc}
   17b10:	00017a01 	.word	0x00017a01
   17b14:	0002a671 	.word	0x0002a671
   17b18:	000179b1 	.word	0x000179b1

00017b1c <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   17b1c:	b580      	push	{r7, lr}
   17b1e:	b082      	sub	sp, #8
   17b20:	af00      	add	r7, sp, #0
   17b22:	6078      	str	r0, [r7, #4]
   17b24:	000a      	movs	r2, r1
   17b26:	1cfb      	adds	r3, r7, #3
   17b28:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   17b2a:	687b      	ldr	r3, [r7, #4]
   17b2c:	7e5b      	ldrb	r3, [r3, #25]
   17b2e:	b2db      	uxtb	r3, r3
   17b30:	b25a      	sxtb	r2, r3
   17b32:	1cfb      	adds	r3, r7, #3
   17b34:	781b      	ldrb	r3, [r3, #0]
   17b36:	2101      	movs	r1, #1
   17b38:	4099      	lsls	r1, r3
   17b3a:	000b      	movs	r3, r1
   17b3c:	b25b      	sxtb	r3, r3
   17b3e:	4313      	orrs	r3, r2
   17b40:	b25b      	sxtb	r3, r3
   17b42:	b2da      	uxtb	r2, r3
   17b44:	687b      	ldr	r3, [r7, #4]
   17b46:	765a      	strb	r2, [r3, #25]
}
   17b48:	46c0      	nop			; (mov r8, r8)
   17b4a:	46bd      	mov	sp, r7
   17b4c:	b002      	add	sp, #8
   17b4e:	bd80      	pop	{r7, pc}

00017b50 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   17b50:	b590      	push	{r4, r7, lr}
   17b52:	b091      	sub	sp, #68	; 0x44
   17b54:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   17b56:	2300      	movs	r3, #0
   17b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   17b5a:	233a      	movs	r3, #58	; 0x3a
   17b5c:	18fb      	adds	r3, r7, r3
   17b5e:	2200      	movs	r2, #0
   17b60:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   17b62:	1d3b      	adds	r3, r7, #4
   17b64:	0018      	movs	r0, r3
   17b66:	4b21      	ldr	r3, [pc, #132]	; (17bec <I2cDriverConfigureSensorBus+0x9c>)
   17b68:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   17b6a:	1d3b      	adds	r3, r7, #4
   17b6c:	4a20      	ldr	r2, [pc, #128]	; (17bf0 <I2cDriverConfigureSensorBus+0xa0>)
   17b6e:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   17b70:	1d3b      	adds	r3, r7, #4
   17b72:	4a20      	ldr	r2, [pc, #128]	; (17bf4 <I2cDriverConfigureSensorBus+0xa4>)
   17b74:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   17b76:	1d3b      	adds	r3, r7, #4
   17b78:	22fa      	movs	r2, #250	; 0xfa
   17b7a:	0092      	lsls	r2, r2, #2
   17b7c:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   17b7e:	233b      	movs	r3, #59	; 0x3b
   17b80:	18fb      	adds	r3, r7, r3
   17b82:	2203      	movs	r2, #3
   17b84:	701a      	strb	r2, [r3, #0]
   17b86:	e01e      	b.n	17bc6 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   17b88:	233a      	movs	r3, #58	; 0x3a
   17b8a:	18fc      	adds	r4, r7, r3
   17b8c:	1d3a      	adds	r2, r7, #4
   17b8e:	491a      	ldr	r1, [pc, #104]	; (17bf8 <I2cDriverConfigureSensorBus+0xa8>)
   17b90:	4b1a      	ldr	r3, [pc, #104]	; (17bfc <I2cDriverConfigureSensorBus+0xac>)
   17b92:	0018      	movs	r0, r3
   17b94:	4b1a      	ldr	r3, [pc, #104]	; (17c00 <I2cDriverConfigureSensorBus+0xb0>)
   17b96:	4798      	blx	r3
   17b98:	0003      	movs	r3, r0
   17b9a:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   17b9c:	233a      	movs	r3, #58	; 0x3a
   17b9e:	18fb      	adds	r3, r7, r3
   17ba0:	781b      	ldrb	r3, [r3, #0]
   17ba2:	2b00      	cmp	r3, #0
   17ba4:	d104      	bne.n	17bb0 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   17ba6:	233a      	movs	r3, #58	; 0x3a
   17ba8:	18fb      	adds	r3, r7, r3
   17baa:	781b      	ldrb	r3, [r3, #0]
   17bac:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   17bae:	e00f      	b.n	17bd0 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   17bb0:	4b12      	ldr	r3, [pc, #72]	; (17bfc <I2cDriverConfigureSensorBus+0xac>)
   17bb2:	0018      	movs	r0, r3
   17bb4:	4b13      	ldr	r3, [pc, #76]	; (17c04 <I2cDriverConfigureSensorBus+0xb4>)
   17bb6:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   17bb8:	233b      	movs	r3, #59	; 0x3b
   17bba:	18fb      	adds	r3, r7, r3
   17bbc:	781a      	ldrb	r2, [r3, #0]
   17bbe:	233b      	movs	r3, #59	; 0x3b
   17bc0:	18fb      	adds	r3, r7, r3
   17bc2:	3a01      	subs	r2, #1
   17bc4:	701a      	strb	r2, [r3, #0]
   17bc6:	233b      	movs	r3, #59	; 0x3b
   17bc8:	18fb      	adds	r3, r7, r3
   17bca:	781b      	ldrb	r3, [r3, #0]
   17bcc:	2b00      	cmp	r3, #0
   17bce:	d1db      	bne.n	17b88 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   17bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	d104      	bne.n	17be0 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   17bd6:	4b09      	ldr	r3, [pc, #36]	; (17bfc <I2cDriverConfigureSensorBus+0xac>)
   17bd8:	0018      	movs	r0, r3
   17bda:	4b0b      	ldr	r3, [pc, #44]	; (17c08 <I2cDriverConfigureSensorBus+0xb8>)
   17bdc:	4798      	blx	r3
   17bde:	e000      	b.n	17be2 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   17be0:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   17be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   17be4:	0018      	movs	r0, r3
   17be6:	46bd      	mov	sp, r7
   17be8:	b011      	add	sp, #68	; 0x44
   17bea:	bd90      	pop	{r4, r7, pc}
   17bec:	00017a25 	.word	0x00017a25
   17bf0:	00080002 	.word	0x00080002
   17bf4:	00090002 	.word	0x00090002
   17bf8:	42000800 	.word	0x42000800
   17bfc:	2000483c 	.word	0x2000483c
   17c00:	0001a901 	.word	0x0001a901
   17c04:	0001aa35 	.word	0x0001aa35
   17c08:	00017aa9 	.word	0x00017aa9

00017c0c <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   17c0c:	b580      	push	{r7, lr}
   17c0e:	b084      	sub	sp, #16
   17c10:	af00      	add	r7, sp, #0
   17c12:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   17c14:	4b0e      	ldr	r3, [pc, #56]	; (17c50 <I2cSensorsTxComplete+0x44>)
   17c16:	2200      	movs	r2, #0
   17c18:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   17c1a:	4b0d      	ldr	r3, [pc, #52]	; (17c50 <I2cSensorsTxComplete+0x44>)
   17c1c:	2201      	movs	r2, #1
   17c1e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   17c20:	2300      	movs	r3, #0
   17c22:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   17c24:	4b0b      	ldr	r3, [pc, #44]	; (17c54 <I2cSensorsTxComplete+0x48>)
   17c26:	681b      	ldr	r3, [r3, #0]
   17c28:	220c      	movs	r2, #12
   17c2a:	18ba      	adds	r2, r7, r2
   17c2c:	0011      	movs	r1, r2
   17c2e:	0018      	movs	r0, r3
   17c30:	4b09      	ldr	r3, [pc, #36]	; (17c58 <I2cSensorsTxComplete+0x4c>)
   17c32:	4798      	blx	r3
    sensorTransmitError = false;
   17c34:	4b09      	ldr	r3, [pc, #36]	; (17c5c <I2cSensorsTxComplete+0x50>)
   17c36:	2200      	movs	r2, #0
   17c38:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   17c3a:	68fb      	ldr	r3, [r7, #12]
   17c3c:	2b00      	cmp	r3, #0
   17c3e:	d003      	beq.n	17c48 <I2cSensorsTxComplete+0x3c>
   17c40:	4b07      	ldr	r3, [pc, #28]	; (17c60 <I2cSensorsTxComplete+0x54>)
   17c42:	2280      	movs	r2, #128	; 0x80
   17c44:	0552      	lsls	r2, r2, #21
   17c46:	601a      	str	r2, [r3, #0]
}
   17c48:	46c0      	nop			; (mov r8, r8)
   17c4a:	46bd      	mov	sp, r7
   17c4c:	b004      	add	sp, #16
   17c4e:	bd80      	pop	{r7, pc}
   17c50:	2000051c 	.word	0x2000051c
   17c54:	20004864 	.word	0x20004864
   17c58:	0001db95 	.word	0x0001db95
   17c5c:	20000518 	.word	0x20000518
   17c60:	e000ed04 	.word	0xe000ed04

00017c64 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   17c64:	b580      	push	{r7, lr}
   17c66:	b084      	sub	sp, #16
   17c68:	af00      	add	r7, sp, #0
   17c6a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   17c6c:	4b0e      	ldr	r3, [pc, #56]	; (17ca8 <I2cSensorsRxComplete+0x44>)
   17c6e:	2200      	movs	r2, #0
   17c70:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   17c72:	4b0d      	ldr	r3, [pc, #52]	; (17ca8 <I2cSensorsRxComplete+0x44>)
   17c74:	2201      	movs	r2, #1
   17c76:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   17c78:	2300      	movs	r3, #0
   17c7a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   17c7c:	4b0b      	ldr	r3, [pc, #44]	; (17cac <I2cSensorsRxComplete+0x48>)
   17c7e:	681b      	ldr	r3, [r3, #0]
   17c80:	220c      	movs	r2, #12
   17c82:	18ba      	adds	r2, r7, r2
   17c84:	0011      	movs	r1, r2
   17c86:	0018      	movs	r0, r3
   17c88:	4b09      	ldr	r3, [pc, #36]	; (17cb0 <I2cSensorsRxComplete+0x4c>)
   17c8a:	4798      	blx	r3
    sensorTransmitError = false;
   17c8c:	4b09      	ldr	r3, [pc, #36]	; (17cb4 <I2cSensorsRxComplete+0x50>)
   17c8e:	2200      	movs	r2, #0
   17c90:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   17c92:	68fb      	ldr	r3, [r7, #12]
   17c94:	2b00      	cmp	r3, #0
   17c96:	d003      	beq.n	17ca0 <I2cSensorsRxComplete+0x3c>
   17c98:	4b07      	ldr	r3, [pc, #28]	; (17cb8 <I2cSensorsRxComplete+0x54>)
   17c9a:	2280      	movs	r2, #128	; 0x80
   17c9c:	0552      	lsls	r2, r2, #21
   17c9e:	601a      	str	r2, [r3, #0]
}
   17ca0:	46c0      	nop			; (mov r8, r8)
   17ca2:	46bd      	mov	sp, r7
   17ca4:	b004      	add	sp, #16
   17ca6:	bd80      	pop	{r7, pc}
   17ca8:	2000051c 	.word	0x2000051c
   17cac:	20004864 	.word	0x20004864
   17cb0:	0001db95 	.word	0x0001db95
   17cb4:	20000518 	.word	0x20000518
   17cb8:	e000ed04 	.word	0xe000ed04

00017cbc <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   17cbc:	b580      	push	{r7, lr}
   17cbe:	b084      	sub	sp, #16
   17cc0:	af00      	add	r7, sp, #0
   17cc2:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   17cc4:	4b0e      	ldr	r3, [pc, #56]	; (17d00 <I2cSensorsError+0x44>)
   17cc6:	2200      	movs	r2, #0
   17cc8:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   17cca:	4b0d      	ldr	r3, [pc, #52]	; (17d00 <I2cSensorsError+0x44>)
   17ccc:	2201      	movs	r2, #1
   17cce:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   17cd0:	2300      	movs	r3, #0
   17cd2:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   17cd4:	4b0b      	ldr	r3, [pc, #44]	; (17d04 <I2cSensorsError+0x48>)
   17cd6:	681b      	ldr	r3, [r3, #0]
   17cd8:	220c      	movs	r2, #12
   17cda:	18ba      	adds	r2, r7, r2
   17cdc:	0011      	movs	r1, r2
   17cde:	0018      	movs	r0, r3
   17ce0:	4b09      	ldr	r3, [pc, #36]	; (17d08 <I2cSensorsError+0x4c>)
   17ce2:	4798      	blx	r3
    sensorTransmitError = true;
   17ce4:	4b09      	ldr	r3, [pc, #36]	; (17d0c <I2cSensorsError+0x50>)
   17ce6:	2201      	movs	r2, #1
   17ce8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   17cea:	68fb      	ldr	r3, [r7, #12]
   17cec:	2b00      	cmp	r3, #0
   17cee:	d003      	beq.n	17cf8 <I2cSensorsError+0x3c>
   17cf0:	4b07      	ldr	r3, [pc, #28]	; (17d10 <I2cSensorsError+0x54>)
   17cf2:	2280      	movs	r2, #128	; 0x80
   17cf4:	0552      	lsls	r2, r2, #21
   17cf6:	601a      	str	r2, [r3, #0]
}
   17cf8:	46c0      	nop			; (mov r8, r8)
   17cfa:	46bd      	mov	sp, r7
   17cfc:	b004      	add	sp, #16
   17cfe:	bd80      	pop	{r7, pc}
   17d00:	2000051c 	.word	0x2000051c
   17d04:	20004864 	.word	0x20004864
   17d08:	0001db95 	.word	0x0001db95
   17d0c:	20000518 	.word	0x20000518
   17d10:	e000ed04 	.word	0xe000ed04

00017d14 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   17d14:	b580      	push	{r7, lr}
   17d16:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   17d18:	4911      	ldr	r1, [pc, #68]	; (17d60 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   17d1a:	4b12      	ldr	r3, [pc, #72]	; (17d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   17d1c:	2200      	movs	r2, #0
   17d1e:	0018      	movs	r0, r3
   17d20:	4b11      	ldr	r3, [pc, #68]	; (17d68 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   17d22:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   17d24:	4b0f      	ldr	r3, [pc, #60]	; (17d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   17d26:	2100      	movs	r1, #0
   17d28:	0018      	movs	r0, r3
   17d2a:	4b10      	ldr	r3, [pc, #64]	; (17d6c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   17d2c:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   17d2e:	4910      	ldr	r1, [pc, #64]	; (17d70 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   17d30:	4b0c      	ldr	r3, [pc, #48]	; (17d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   17d32:	2201      	movs	r2, #1
   17d34:	0018      	movs	r0, r3
   17d36:	4b0c      	ldr	r3, [pc, #48]	; (17d68 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   17d38:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   17d3a:	4b0a      	ldr	r3, [pc, #40]	; (17d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   17d3c:	2101      	movs	r1, #1
   17d3e:	0018      	movs	r0, r3
   17d40:	4b0a      	ldr	r3, [pc, #40]	; (17d6c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   17d42:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   17d44:	490b      	ldr	r1, [pc, #44]	; (17d74 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   17d46:	4b07      	ldr	r3, [pc, #28]	; (17d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   17d48:	2202      	movs	r2, #2
   17d4a:	0018      	movs	r0, r3
   17d4c:	4b06      	ldr	r3, [pc, #24]	; (17d68 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   17d4e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   17d50:	4b04      	ldr	r3, [pc, #16]	; (17d64 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   17d52:	2102      	movs	r1, #2
   17d54:	0018      	movs	r0, r3
   17d56:	4b05      	ldr	r3, [pc, #20]	; (17d6c <I2cDriverRegisterSensorBusCallbacks+0x58>)
   17d58:	4798      	blx	r3
}
   17d5a:	46c0      	nop			; (mov r8, r8)
   17d5c:	46bd      	mov	sp, r7
   17d5e:	bd80      	pop	{r7, pc}
   17d60:	00017c0d 	.word	0x00017c0d
   17d64:	2000483c 	.word	0x2000483c
   17d68:	00014725 	.word	0x00014725
   17d6c:	00017b1d 	.word	0x00017b1d
   17d70:	00017c65 	.word	0x00017c65
   17d74:	00017cbd 	.word	0x00017cbd

00017d78 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   17d78:	b580      	push	{r7, lr}
   17d7a:	b082      	sub	sp, #8
   17d7c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   17d7e:	2300      	movs	r3, #0
   17d80:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   17d82:	4b14      	ldr	r3, [pc, #80]	; (17dd4 <I2cInitializeDriver+0x5c>)
   17d84:	4798      	blx	r3
   17d86:	0003      	movs	r3, r0
   17d88:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   17d8a:	687b      	ldr	r3, [r7, #4]
   17d8c:	2b00      	cmp	r3, #0
   17d8e:	d11a      	bne.n	17dc6 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   17d90:	4b11      	ldr	r3, [pc, #68]	; (17dd8 <I2cInitializeDriver+0x60>)
   17d92:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   17d94:	2001      	movs	r0, #1
   17d96:	4b11      	ldr	r3, [pc, #68]	; (17ddc <I2cInitializeDriver+0x64>)
   17d98:	4798      	blx	r3
   17d9a:	0002      	movs	r2, r0
   17d9c:	4b10      	ldr	r3, [pc, #64]	; (17de0 <I2cInitializeDriver+0x68>)
   17d9e:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   17da0:	2203      	movs	r2, #3
   17da2:	2100      	movs	r1, #0
   17da4:	2001      	movs	r0, #1
   17da6:	4b0f      	ldr	r3, [pc, #60]	; (17de4 <I2cInitializeDriver+0x6c>)
   17da8:	4798      	blx	r3
   17daa:	0002      	movs	r2, r0
   17dac:	4b0e      	ldr	r3, [pc, #56]	; (17de8 <I2cInitializeDriver+0x70>)
   17dae:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   17db0:	4b0b      	ldr	r3, [pc, #44]	; (17de0 <I2cInitializeDriver+0x68>)
   17db2:	681b      	ldr	r3, [r3, #0]
   17db4:	2b00      	cmp	r3, #0
   17db6:	d003      	beq.n	17dc0 <I2cInitializeDriver+0x48>
   17db8:	4b0b      	ldr	r3, [pc, #44]	; (17de8 <I2cInitializeDriver+0x70>)
   17dba:	681b      	ldr	r3, [r3, #0]
   17dbc:	2b00      	cmp	r3, #0
   17dbe:	d103      	bne.n	17dc8 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   17dc0:	2306      	movs	r3, #6
   17dc2:	607b      	str	r3, [r7, #4]
        goto exit;
   17dc4:	e000      	b.n	17dc8 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   17dc6:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   17dc8:	687b      	ldr	r3, [r7, #4]
}
   17dca:	0018      	movs	r0, r3
   17dcc:	46bd      	mov	sp, r7
   17dce:	b002      	add	sp, #8
   17dd0:	bd80      	pop	{r7, pc}
   17dd2:	46c0      	nop			; (mov r8, r8)
   17dd4:	00017b51 	.word	0x00017b51
   17dd8:	00017d15 	.word	0x00017d15
   17ddc:	0001d4cd 	.word	0x0001d4cd
   17de0:	20004838 	.word	0x20004838
   17de4:	0001d265 	.word	0x0001d265
   17de8:	20004864 	.word	0x20004864

00017dec <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   17dec:	b590      	push	{r4, r7, lr}
   17dee:	b085      	sub	sp, #20
   17df0:	af00      	add	r7, sp, #0
   17df2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   17df4:	2300      	movs	r3, #0
   17df6:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   17df8:	687b      	ldr	r3, [r7, #4]
   17dfa:	2b00      	cmp	r3, #0
   17dfc:	d003      	beq.n	17e06 <I2cWriteData+0x1a>
   17dfe:	687b      	ldr	r3, [r7, #4]
   17e00:	685b      	ldr	r3, [r3, #4]
   17e02:	2b00      	cmp	r3, #0
   17e04:	d103      	bne.n	17e0e <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   17e06:	2308      	movs	r3, #8
   17e08:	425b      	negs	r3, r3
   17e0a:	60fb      	str	r3, [r7, #12]
        goto exit;
   17e0c:	e01f      	b.n	17e4e <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   17e0e:	687b      	ldr	r3, [r7, #4]
   17e10:	781b      	ldrb	r3, [r3, #0]
   17e12:	b29a      	uxth	r2, r3
   17e14:	4b10      	ldr	r3, [pc, #64]	; (17e58 <I2cWriteData+0x6c>)
   17e16:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   17e18:	687b      	ldr	r3, [r7, #4]
   17e1a:	685a      	ldr	r2, [r3, #4]
   17e1c:	4b0e      	ldr	r3, [pc, #56]	; (17e58 <I2cWriteData+0x6c>)
   17e1e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   17e20:	687b      	ldr	r3, [r7, #4]
   17e22:	89da      	ldrh	r2, [r3, #14]
   17e24:	4b0c      	ldr	r3, [pc, #48]	; (17e58 <I2cWriteData+0x6c>)
   17e26:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   17e28:	230b      	movs	r3, #11
   17e2a:	18fc      	adds	r4, r7, r3
   17e2c:	4a0a      	ldr	r2, [pc, #40]	; (17e58 <I2cWriteData+0x6c>)
   17e2e:	4b0b      	ldr	r3, [pc, #44]	; (17e5c <I2cWriteData+0x70>)
   17e30:	0011      	movs	r1, r2
   17e32:	0018      	movs	r0, r3
   17e34:	4b0a      	ldr	r3, [pc, #40]	; (17e60 <I2cWriteData+0x74>)
   17e36:	4798      	blx	r3
   17e38:	0003      	movs	r3, r0
   17e3a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   17e3c:	230b      	movs	r3, #11
   17e3e:	18fb      	adds	r3, r7, r3
   17e40:	781b      	ldrb	r3, [r3, #0]
   17e42:	2b00      	cmp	r3, #0
   17e44:	d003      	beq.n	17e4e <I2cWriteData+0x62>
        error = ERROR_IO;
   17e46:	2306      	movs	r3, #6
   17e48:	425b      	negs	r3, r3
   17e4a:	60fb      	str	r3, [r7, #12]
        goto exit;
   17e4c:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   17e4e:	68fb      	ldr	r3, [r7, #12]
}
   17e50:	0018      	movs	r0, r3
   17e52:	46bd      	mov	sp, r7
   17e54:	b005      	add	sp, #20
   17e56:	bd90      	pop	{r4, r7, pc}
   17e58:	20004868 	.word	0x20004868
   17e5c:	2000483c 	.word	0x2000483c
   17e60:	000149a9 	.word	0x000149a9

00017e64 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   17e64:	b590      	push	{r4, r7, lr}
   17e66:	b085      	sub	sp, #20
   17e68:	af00      	add	r7, sp, #0
   17e6a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   17e6c:	2300      	movs	r3, #0
   17e6e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   17e70:	687b      	ldr	r3, [r7, #4]
   17e72:	2b00      	cmp	r3, #0
   17e74:	d003      	beq.n	17e7e <I2cReadData+0x1a>
   17e76:	687b      	ldr	r3, [r7, #4]
   17e78:	685b      	ldr	r3, [r3, #4]
   17e7a:	2b00      	cmp	r3, #0
   17e7c:	d103      	bne.n	17e86 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   17e7e:	2308      	movs	r3, #8
   17e80:	425b      	negs	r3, r3
   17e82:	60fb      	str	r3, [r7, #12]
        goto exit;
   17e84:	e01f      	b.n	17ec6 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   17e86:	687b      	ldr	r3, [r7, #4]
   17e88:	781b      	ldrb	r3, [r3, #0]
   17e8a:	b29a      	uxth	r2, r3
   17e8c:	4b10      	ldr	r3, [pc, #64]	; (17ed0 <I2cReadData+0x6c>)
   17e8e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   17e90:	687b      	ldr	r3, [r7, #4]
   17e92:	689a      	ldr	r2, [r3, #8]
   17e94:	4b0e      	ldr	r3, [pc, #56]	; (17ed0 <I2cReadData+0x6c>)
   17e96:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   17e98:	687b      	ldr	r3, [r7, #4]
   17e9a:	899a      	ldrh	r2, [r3, #12]
   17e9c:	4b0c      	ldr	r3, [pc, #48]	; (17ed0 <I2cReadData+0x6c>)
   17e9e:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   17ea0:	230b      	movs	r3, #11
   17ea2:	18fc      	adds	r4, r7, r3
   17ea4:	4a0a      	ldr	r2, [pc, #40]	; (17ed0 <I2cReadData+0x6c>)
   17ea6:	4b0b      	ldr	r3, [pc, #44]	; (17ed4 <I2cReadData+0x70>)
   17ea8:	0011      	movs	r1, r2
   17eaa:	0018      	movs	r0, r3
   17eac:	4b0a      	ldr	r3, [pc, #40]	; (17ed8 <I2cReadData+0x74>)
   17eae:	4798      	blx	r3
   17eb0:	0003      	movs	r3, r0
   17eb2:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   17eb4:	230b      	movs	r3, #11
   17eb6:	18fb      	adds	r3, r7, r3
   17eb8:	781b      	ldrb	r3, [r3, #0]
   17eba:	2b00      	cmp	r3, #0
   17ebc:	d003      	beq.n	17ec6 <I2cReadData+0x62>
        error = ERROR_IO;
   17ebe:	2306      	movs	r3, #6
   17ec0:	425b      	negs	r3, r3
   17ec2:	60fb      	str	r3, [r7, #12]
        goto exit;
   17ec4:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   17ec6:	68fb      	ldr	r3, [r7, #12]
}
   17ec8:	0018      	movs	r0, r3
   17eca:	46bd      	mov	sp, r7
   17ecc:	b005      	add	sp, #20
   17ece:	bd90      	pop	{r4, r7, pc}
   17ed0:	20004868 	.word	0x20004868
   17ed4:	2000483c 	.word	0x2000483c
   17ed8:	000148c5 	.word	0x000148c5

00017edc <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   17edc:	b590      	push	{r4, r7, lr}
   17ede:	b083      	sub	sp, #12
   17ee0:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   17ee2:	2300      	movs	r3, #0
   17ee4:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   17ee6:	4b09      	ldr	r3, [pc, #36]	; (17f0c <I2cFreeMutex+0x30>)
   17ee8:	6818      	ldr	r0, [r3, #0]
   17eea:	2300      	movs	r3, #0
   17eec:	2200      	movs	r2, #0
   17eee:	2100      	movs	r1, #0
   17ef0:	4c07      	ldr	r4, [pc, #28]	; (17f10 <I2cFreeMutex+0x34>)
   17ef2:	47a0      	blx	r4
   17ef4:	0003      	movs	r3, r0
   17ef6:	2b01      	cmp	r3, #1
   17ef8:	d002      	beq.n	17f00 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   17efa:	2314      	movs	r3, #20
   17efc:	425b      	negs	r3, r3
   17efe:	607b      	str	r3, [r7, #4]
    }
    return error;
   17f00:	687b      	ldr	r3, [r7, #4]
}
   17f02:	0018      	movs	r0, r3
   17f04:	46bd      	mov	sp, r7
   17f06:	b003      	add	sp, #12
   17f08:	bd90      	pop	{r4, r7, pc}
   17f0a:	46c0      	nop			; (mov r8, r8)
   17f0c:	20004838 	.word	0x20004838
   17f10:	0001d50d 	.word	0x0001d50d

00017f14 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   17f14:	b580      	push	{r7, lr}
   17f16:	b084      	sub	sp, #16
   17f18:	af00      	add	r7, sp, #0
   17f1a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   17f1c:	2300      	movs	r3, #0
   17f1e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   17f20:	4b08      	ldr	r3, [pc, #32]	; (17f44 <I2cGetMutex+0x30>)
   17f22:	681b      	ldr	r3, [r3, #0]
   17f24:	687a      	ldr	r2, [r7, #4]
   17f26:	0011      	movs	r1, r2
   17f28:	0018      	movs	r0, r3
   17f2a:	4b07      	ldr	r3, [pc, #28]	; (17f48 <I2cGetMutex+0x34>)
   17f2c:	4798      	blx	r3
   17f2e:	0003      	movs	r3, r0
   17f30:	2b01      	cmp	r3, #1
   17f32:	d002      	beq.n	17f3a <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   17f34:	231d      	movs	r3, #29
   17f36:	425b      	negs	r3, r3
   17f38:	60fb      	str	r3, [r7, #12]
    }
    return error;
   17f3a:	68fb      	ldr	r3, [r7, #12]
}
   17f3c:	0018      	movs	r0, r3
   17f3e:	46bd      	mov	sp, r7
   17f40:	b004      	add	sp, #16
   17f42:	bd80      	pop	{r7, pc}
   17f44:	20004838 	.word	0x20004838
   17f48:	0001e21d 	.word	0x0001e21d

00017f4c <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   17f4c:	b580      	push	{r7, lr}
   17f4e:	b084      	sub	sp, #16
   17f50:	af00      	add	r7, sp, #0
   17f52:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   17f54:	2300      	movs	r3, #0
   17f56:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   17f58:	4b04      	ldr	r3, [pc, #16]	; (17f6c <I2cGetSemaphoreHandle+0x20>)
   17f5a:	681a      	ldr	r2, [r3, #0]
   17f5c:	687b      	ldr	r3, [r7, #4]
   17f5e:	601a      	str	r2, [r3, #0]
    return error;
   17f60:	68fb      	ldr	r3, [r7, #12]
}
   17f62:	0018      	movs	r0, r3
   17f64:	46bd      	mov	sp, r7
   17f66:	b004      	add	sp, #16
   17f68:	bd80      	pop	{r7, pc}
   17f6a:	46c0      	nop			; (mov r8, r8)
   17f6c:	20004864 	.word	0x20004864

00017f70 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   17f70:	b580      	push	{r7, lr}
   17f72:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   17f74:	4b02      	ldr	r3, [pc, #8]	; (17f80 <I2cGetTaskErrorStatus+0x10>)
   17f76:	781b      	ldrb	r3, [r3, #0]
}
   17f78:	0018      	movs	r0, r3
   17f7a:	46bd      	mov	sp, r7
   17f7c:	bd80      	pop	{r7, pc}
   17f7e:	46c0      	nop			; (mov r8, r8)
   17f80:	20000518 	.word	0x20000518

00017f84 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   17f84:	b580      	push	{r7, lr}
   17f86:	b082      	sub	sp, #8
   17f88:	af00      	add	r7, sp, #0
   17f8a:	0002      	movs	r2, r0
   17f8c:	1dfb      	adds	r3, r7, #7
   17f8e:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   17f90:	4b03      	ldr	r3, [pc, #12]	; (17fa0 <I2cSetTaskErrorStatus+0x1c>)
   17f92:	1dfa      	adds	r2, r7, #7
   17f94:	7812      	ldrb	r2, [r2, #0]
   17f96:	701a      	strb	r2, [r3, #0]
}
   17f98:	46c0      	nop			; (mov r8, r8)
   17f9a:	46bd      	mov	sp, r7
   17f9c:	b002      	add	sp, #8
   17f9e:	bd80      	pop	{r7, pc}
   17fa0:	20000518 	.word	0x20000518

00017fa4 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   17fa4:	b580      	push	{r7, lr}
   17fa6:	b084      	sub	sp, #16
   17fa8:	af00      	add	r7, sp, #0
   17faa:	6078      	str	r0, [r7, #4]
   17fac:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   17fae:	2300      	movs	r3, #0
   17fb0:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   17fb2:	2300      	movs	r3, #0
   17fb4:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   17fb6:	2396      	movs	r3, #150	; 0x96
   17fb8:	005b      	lsls	r3, r3, #1
   17fba:	0018      	movs	r0, r3
   17fbc:	4b28      	ldr	r3, [pc, #160]	; (18060 <I2cWriteDataWait+0xbc>)
   17fbe:	4798      	blx	r3
   17fc0:	0003      	movs	r3, r0
   17fc2:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   17fc4:	68fb      	ldr	r3, [r7, #12]
   17fc6:	2b00      	cmp	r3, #0
   17fc8:	d138      	bne.n	1803c <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   17fca:	2308      	movs	r3, #8
   17fcc:	18fb      	adds	r3, r7, r3
   17fce:	0018      	movs	r0, r3
   17fd0:	4b24      	ldr	r3, [pc, #144]	; (18064 <I2cWriteDataWait+0xc0>)
   17fd2:	4798      	blx	r3
   17fd4:	0003      	movs	r3, r0
   17fd6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   17fd8:	68fb      	ldr	r3, [r7, #12]
   17fda:	2b00      	cmp	r3, #0
   17fdc:	d130      	bne.n	18040 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   17fde:	687b      	ldr	r3, [r7, #4]
   17fe0:	0018      	movs	r0, r3
   17fe2:	4b21      	ldr	r3, [pc, #132]	; (18068 <I2cWriteDataWait+0xc4>)
   17fe4:	4798      	blx	r3
   17fe6:	0003      	movs	r3, r0
   17fe8:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   17fea:	68fb      	ldr	r3, [r7, #12]
   17fec:	2b00      	cmp	r3, #0
   17fee:	d12a      	bne.n	18046 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   17ff0:	68bb      	ldr	r3, [r7, #8]
   17ff2:	683a      	ldr	r2, [r7, #0]
   17ff4:	0011      	movs	r1, r2
   17ff6:	0018      	movs	r0, r3
   17ff8:	4b1c      	ldr	r3, [pc, #112]	; (1806c <I2cWriteDataWait+0xc8>)
   17ffa:	4798      	blx	r3
   17ffc:	0003      	movs	r3, r0
   17ffe:	2b01      	cmp	r3, #1
   18000:	d111      	bne.n	18026 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   18002:	4b1b      	ldr	r3, [pc, #108]	; (18070 <I2cWriteDataWait+0xcc>)
   18004:	4798      	blx	r3
   18006:	1e03      	subs	r3, r0, #0
   18008:	d011      	beq.n	1802e <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   1800a:	2000      	movs	r0, #0
   1800c:	4b19      	ldr	r3, [pc, #100]	; (18074 <I2cWriteDataWait+0xd0>)
   1800e:	4798      	blx	r3
            if (error != ERROR_NONE) {
   18010:	68fb      	ldr	r3, [r7, #12]
   18012:	2b00      	cmp	r3, #0
   18014:	d003      	beq.n	1801e <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   18016:	2321      	movs	r3, #33	; 0x21
   18018:	425b      	negs	r3, r3
   1801a:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   1801c:	e014      	b.n	18048 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1801e:	2303      	movs	r3, #3
   18020:	425b      	negs	r3, r3
   18022:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   18024:	e010      	b.n	18048 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   18026:	2303      	movs	r3, #3
   18028:	425b      	negs	r3, r3
   1802a:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   1802c:	e00c      	b.n	18048 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1802e:	4b12      	ldr	r3, [pc, #72]	; (18078 <I2cWriteDataWait+0xd4>)
   18030:	4798      	blx	r3
   18032:	0002      	movs	r2, r0
   18034:	68fb      	ldr	r3, [r7, #12]
   18036:	4313      	orrs	r3, r2
   18038:	60fb      	str	r3, [r7, #12]
   1803a:	e002      	b.n	18042 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1803c:	46c0      	nop			; (mov r8, r8)
   1803e:	e000      	b.n	18042 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   18040:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   18042:	68fb      	ldr	r3, [r7, #12]
   18044:	e007      	b.n	18056 <I2cWriteDataWait+0xb2>
        goto exitError0;
   18046:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   18048:	4b0b      	ldr	r3, [pc, #44]	; (18078 <I2cWriteDataWait+0xd4>)
   1804a:	4798      	blx	r3
   1804c:	0002      	movs	r2, r0
   1804e:	68fb      	ldr	r3, [r7, #12]
   18050:	4313      	orrs	r3, r2
   18052:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   18054:	68fb      	ldr	r3, [r7, #12]
}
   18056:	0018      	movs	r0, r3
   18058:	46bd      	mov	sp, r7
   1805a:	b004      	add	sp, #16
   1805c:	bd80      	pop	{r7, pc}
   1805e:	46c0      	nop			; (mov r8, r8)
   18060:	00017f15 	.word	0x00017f15
   18064:	00017f4d 	.word	0x00017f4d
   18068:	00017ded 	.word	0x00017ded
   1806c:	0001e21d 	.word	0x0001e21d
   18070:	00017f71 	.word	0x00017f71
   18074:	00017f85 	.word	0x00017f85
   18078:	00017edd 	.word	0x00017edd

0001807c <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   1807c:	b580      	push	{r7, lr}
   1807e:	b086      	sub	sp, #24
   18080:	af00      	add	r7, sp, #0
   18082:	60f8      	str	r0, [r7, #12]
   18084:	60b9      	str	r1, [r7, #8]
   18086:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   18088:	2300      	movs	r3, #0
   1808a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   1808c:	2300      	movs	r3, #0
   1808e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   18090:	2396      	movs	r3, #150	; 0x96
   18092:	005b      	lsls	r3, r3, #1
   18094:	0018      	movs	r0, r3
   18096:	4b35      	ldr	r3, [pc, #212]	; (1816c <I2cReadDataWait+0xf0>)
   18098:	4798      	blx	r3
   1809a:	0003      	movs	r3, r0
   1809c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1809e:	697b      	ldr	r3, [r7, #20]
   180a0:	2b00      	cmp	r3, #0
   180a2:	d155      	bne.n	18150 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   180a4:	2310      	movs	r3, #16
   180a6:	18fb      	adds	r3, r7, r3
   180a8:	0018      	movs	r0, r3
   180aa:	4b31      	ldr	r3, [pc, #196]	; (18170 <I2cReadDataWait+0xf4>)
   180ac:	4798      	blx	r3
   180ae:	0003      	movs	r3, r0
   180b0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   180b2:	697b      	ldr	r3, [r7, #20]
   180b4:	2b00      	cmp	r3, #0
   180b6:	d14d      	bne.n	18154 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   180b8:	68fb      	ldr	r3, [r7, #12]
   180ba:	0018      	movs	r0, r3
   180bc:	4b2d      	ldr	r3, [pc, #180]	; (18174 <I2cReadDataWait+0xf8>)
   180be:	4798      	blx	r3
   180c0:	0003      	movs	r3, r0
   180c2:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   180c4:	697b      	ldr	r3, [r7, #20]
   180c6:	2b00      	cmp	r3, #0
   180c8:	d147      	bne.n	1815a <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   180ca:	693b      	ldr	r3, [r7, #16]
   180cc:	687a      	ldr	r2, [r7, #4]
   180ce:	0011      	movs	r1, r2
   180d0:	0018      	movs	r0, r3
   180d2:	4b29      	ldr	r3, [pc, #164]	; (18178 <I2cReadDataWait+0xfc>)
   180d4:	4798      	blx	r3
   180d6:	0003      	movs	r3, r0
   180d8:	2b01      	cmp	r3, #1
   180da:	d118      	bne.n	1810e <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   180dc:	4b27      	ldr	r3, [pc, #156]	; (1817c <I2cReadDataWait+0x100>)
   180de:	4798      	blx	r3
   180e0:	1e03      	subs	r3, r0, #0
   180e2:	d006      	beq.n	180f2 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   180e4:	2000      	movs	r0, #0
   180e6:	4b26      	ldr	r3, [pc, #152]	; (18180 <I2cReadDataWait+0x104>)
   180e8:	4798      	blx	r3
            error = ERROR_ABORTED;
   180ea:	2303      	movs	r3, #3
   180ec:	425b      	negs	r3, r3
   180ee:	617b      	str	r3, [r7, #20]
            goto exitError0;
   180f0:	e034      	b.n	1815c <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   180f2:	68bb      	ldr	r3, [r7, #8]
   180f4:	0018      	movs	r0, r3
   180f6:	4b23      	ldr	r3, [pc, #140]	; (18184 <I2cReadDataWait+0x108>)
   180f8:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   180fa:	68fb      	ldr	r3, [r7, #12]
   180fc:	0018      	movs	r0, r3
   180fe:	4b22      	ldr	r3, [pc, #136]	; (18188 <I2cReadDataWait+0x10c>)
   18100:	4798      	blx	r3
   18102:	0003      	movs	r3, r0
   18104:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   18106:	697b      	ldr	r3, [r7, #20]
   18108:	2b00      	cmp	r3, #0
   1810a:	d004      	beq.n	18116 <I2cReadDataWait+0x9a>
        goto exitError0;
   1810c:	e026      	b.n	1815c <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1810e:	2303      	movs	r3, #3
   18110:	425b      	negs	r3, r3
   18112:	617b      	str	r3, [r7, #20]
        goto exitError0;
   18114:	e022      	b.n	1815c <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   18116:	693b      	ldr	r3, [r7, #16]
   18118:	687a      	ldr	r2, [r7, #4]
   1811a:	0011      	movs	r1, r2
   1811c:	0018      	movs	r0, r3
   1811e:	4b16      	ldr	r3, [pc, #88]	; (18178 <I2cReadDataWait+0xfc>)
   18120:	4798      	blx	r3
   18122:	0003      	movs	r3, r0
   18124:	2b01      	cmp	r3, #1
   18126:	d10a      	bne.n	1813e <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   18128:	4b14      	ldr	r3, [pc, #80]	; (1817c <I2cReadDataWait+0x100>)
   1812a:	4798      	blx	r3
   1812c:	1e03      	subs	r3, r0, #0
   1812e:	d00a      	beq.n	18146 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   18130:	2000      	movs	r0, #0
   18132:	4b13      	ldr	r3, [pc, #76]	; (18180 <I2cReadDataWait+0x104>)
   18134:	4798      	blx	r3
            error = ERROR_ABORTED;
   18136:	2303      	movs	r3, #3
   18138:	425b      	negs	r3, r3
   1813a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1813c:	e00e      	b.n	1815c <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1813e:	2303      	movs	r3, #3
   18140:	425b      	negs	r3, r3
   18142:	617b      	str	r3, [r7, #20]
        goto exitError0;
   18144:	e00a      	b.n	1815c <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   18146:	4b11      	ldr	r3, [pc, #68]	; (1818c <I2cReadDataWait+0x110>)
   18148:	4798      	blx	r3
   1814a:	0003      	movs	r3, r0
   1814c:	617b      	str	r3, [r7, #20]
   1814e:	e002      	b.n	18156 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   18150:	46c0      	nop			; (mov r8, r8)
   18152:	e000      	b.n	18156 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   18154:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   18156:	697b      	ldr	r3, [r7, #20]
   18158:	e003      	b.n	18162 <I2cReadDataWait+0xe6>
        goto exitError0;
   1815a:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   1815c:	4b0b      	ldr	r3, [pc, #44]	; (1818c <I2cReadDataWait+0x110>)
   1815e:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   18160:	697b      	ldr	r3, [r7, #20]
}
   18162:	0018      	movs	r0, r3
   18164:	46bd      	mov	sp, r7
   18166:	b006      	add	sp, #24
   18168:	bd80      	pop	{r7, pc}
   1816a:	46c0      	nop			; (mov r8, r8)
   1816c:	00017f15 	.word	0x00017f15
   18170:	00017f4d 	.word	0x00017f4d
   18174:	00017ded 	.word	0x00017ded
   18178:	0001e21d 	.word	0x0001e21d
   1817c:	00017f71 	.word	0x00017f71
   18180:	00017f85 	.word	0x00017f85
   18184:	0001ef71 	.word	0x0001ef71
   18188:	00017e65 	.word	0x00017e65
   1818c:	00017edd 	.word	0x00017edd

00018190 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   18190:	b580      	push	{r7, lr}
   18192:	b086      	sub	sp, #24
   18194:	af00      	add	r7, sp, #0
   18196:	60f8      	str	r0, [r7, #12]
   18198:	60b9      	str	r1, [r7, #8]
   1819a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   1819c:	2300      	movs	r3, #0
   1819e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   181a0:	2300      	movs	r3, #0
   181a2:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   181a4:	2396      	movs	r3, #150	; 0x96
   181a6:	005b      	lsls	r3, r3, #1
   181a8:	0018      	movs	r0, r3
   181aa:	4b24      	ldr	r3, [pc, #144]	; (1823c <I2cPingAddressWait+0xac>)
   181ac:	4798      	blx	r3
   181ae:	0003      	movs	r3, r0
   181b0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   181b2:	697b      	ldr	r3, [r7, #20]
   181b4:	2b00      	cmp	r3, #0
   181b6:	d133      	bne.n	18220 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   181b8:	2310      	movs	r3, #16
   181ba:	18fb      	adds	r3, r7, r3
   181bc:	0018      	movs	r0, r3
   181be:	4b20      	ldr	r3, [pc, #128]	; (18240 <I2cPingAddressWait+0xb0>)
   181c0:	4798      	blx	r3
   181c2:	0003      	movs	r3, r0
   181c4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   181c6:	697b      	ldr	r3, [r7, #20]
   181c8:	2b00      	cmp	r3, #0
   181ca:	d12b      	bne.n	18224 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   181cc:	68fb      	ldr	r3, [r7, #12]
   181ce:	0018      	movs	r0, r3
   181d0:	4b1c      	ldr	r3, [pc, #112]	; (18244 <I2cPingAddressWait+0xb4>)
   181d2:	4798      	blx	r3
   181d4:	0003      	movs	r3, r0
   181d6:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   181d8:	697b      	ldr	r3, [r7, #20]
   181da:	2b00      	cmp	r3, #0
   181dc:	d125      	bne.n	1822a <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   181de:	693b      	ldr	r3, [r7, #16]
   181e0:	687a      	ldr	r2, [r7, #4]
   181e2:	0011      	movs	r1, r2
   181e4:	0018      	movs	r0, r3
   181e6:	4b18      	ldr	r3, [pc, #96]	; (18248 <I2cPingAddressWait+0xb8>)
   181e8:	4798      	blx	r3
   181ea:	0003      	movs	r3, r0
   181ec:	2b01      	cmp	r3, #1
   181ee:	d113      	bne.n	18218 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   181f0:	4b16      	ldr	r3, [pc, #88]	; (1824c <I2cPingAddressWait+0xbc>)
   181f2:	4798      	blx	r3
   181f4:	1e03      	subs	r3, r0, #0
   181f6:	d006      	beq.n	18206 <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   181f8:	2000      	movs	r0, #0
   181fa:	4b15      	ldr	r3, [pc, #84]	; (18250 <I2cPingAddressWait+0xc0>)
   181fc:	4798      	blx	r3
            error = ERROR_ABORTED;
   181fe:	2303      	movs	r3, #3
   18200:	425b      	negs	r3, r3
   18202:	617b      	str	r3, [r7, #20]
            goto exitError0;
   18204:	e012      	b.n	1822c <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   18206:	68bb      	ldr	r3, [r7, #8]
   18208:	0018      	movs	r0, r3
   1820a:	4b12      	ldr	r3, [pc, #72]	; (18254 <I2cPingAddressWait+0xc4>)
   1820c:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   1820e:	4b12      	ldr	r3, [pc, #72]	; (18258 <I2cPingAddressWait+0xc8>)
   18210:	4798      	blx	r3
   18212:	0003      	movs	r3, r0
   18214:	617b      	str	r3, [r7, #20]
   18216:	e006      	b.n	18226 <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   18218:	2303      	movs	r3, #3
   1821a:	425b      	negs	r3, r3
   1821c:	617b      	str	r3, [r7, #20]
        goto exitError0;
   1821e:	e005      	b.n	1822c <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   18220:	46c0      	nop			; (mov r8, r8)
   18222:	e000      	b.n	18226 <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   18224:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   18226:	697b      	ldr	r3, [r7, #20]
   18228:	e003      	b.n	18232 <I2cPingAddressWait+0xa2>
        goto exitError0;
   1822a:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   1822c:	4b0a      	ldr	r3, [pc, #40]	; (18258 <I2cPingAddressWait+0xc8>)
   1822e:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   18230:	697b      	ldr	r3, [r7, #20]
}
   18232:	0018      	movs	r0, r3
   18234:	46bd      	mov	sp, r7
   18236:	b006      	add	sp, #24
   18238:	bd80      	pop	{r7, pc}
   1823a:	46c0      	nop			; (mov r8, r8)
   1823c:	00017f15 	.word	0x00017f15
   18240:	00017f4d 	.word	0x00017f4d
   18244:	00017ded 	.word	0x00017ded
   18248:	0001e21d 	.word	0x0001e21d
   1824c:	00017f71 	.word	0x00017f71
   18250:	00017f85 	.word	0x00017f85
   18254:	0001ef71 	.word	0x0001ef71
   18258:	00017edd 	.word	0x00017edd

0001825c <lis2dh12_read_reg>:
  *
  */
int32_t __weak lis2dh12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
   1825c:	b5b0      	push	{r4, r5, r7, lr}
   1825e:	b086      	sub	sp, #24
   18260:	af00      	add	r7, sp, #0
   18262:	60f8      	str	r0, [r7, #12]
   18264:	0008      	movs	r0, r1
   18266:	607a      	str	r2, [r7, #4]
   18268:	0019      	movs	r1, r3
   1826a:	230b      	movs	r3, #11
   1826c:	18fb      	adds	r3, r7, r3
   1826e:	1c02      	adds	r2, r0, #0
   18270:	701a      	strb	r2, [r3, #0]
   18272:	2308      	movs	r3, #8
   18274:	18fb      	adds	r3, r7, r3
   18276:	1c0a      	adds	r2, r1, #0
   18278:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1827a:	68fb      	ldr	r3, [r7, #12]
   1827c:	685c      	ldr	r4, [r3, #4]
   1827e:	68fb      	ldr	r3, [r7, #12]
   18280:	68d8      	ldr	r0, [r3, #12]
   18282:	2308      	movs	r3, #8
   18284:	18fb      	adds	r3, r7, r3
   18286:	881d      	ldrh	r5, [r3, #0]
   18288:	687a      	ldr	r2, [r7, #4]
   1828a:	230b      	movs	r3, #11
   1828c:	18fb      	adds	r3, r7, r3
   1828e:	7819      	ldrb	r1, [r3, #0]
   18290:	002b      	movs	r3, r5
   18292:	47a0      	blx	r4
   18294:	0003      	movs	r3, r0
   18296:	617b      	str	r3, [r7, #20]

  return ret;
   18298:	697b      	ldr	r3, [r7, #20]
}
   1829a:	0018      	movs	r0, r3
   1829c:	46bd      	mov	sp, r7
   1829e:	b006      	add	sp, #24
   182a0:	bdb0      	pop	{r4, r5, r7, pc}

000182a2 <lis2dh12_write_reg>:
  *
  */
int32_t __weak lis2dh12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
   182a2:	b5b0      	push	{r4, r5, r7, lr}
   182a4:	b086      	sub	sp, #24
   182a6:	af00      	add	r7, sp, #0
   182a8:	60f8      	str	r0, [r7, #12]
   182aa:	0008      	movs	r0, r1
   182ac:	607a      	str	r2, [r7, #4]
   182ae:	0019      	movs	r1, r3
   182b0:	230b      	movs	r3, #11
   182b2:	18fb      	adds	r3, r7, r3
   182b4:	1c02      	adds	r2, r0, #0
   182b6:	701a      	strb	r2, [r3, #0]
   182b8:	2308      	movs	r3, #8
   182ba:	18fb      	adds	r3, r7, r3
   182bc:	1c0a      	adds	r2, r1, #0
   182be:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   182c0:	68fb      	ldr	r3, [r7, #12]
   182c2:	681c      	ldr	r4, [r3, #0]
   182c4:	68fb      	ldr	r3, [r7, #12]
   182c6:	68d8      	ldr	r0, [r3, #12]
   182c8:	2308      	movs	r3, #8
   182ca:	18fb      	adds	r3, r7, r3
   182cc:	881d      	ldrh	r5, [r3, #0]
   182ce:	687a      	ldr	r2, [r7, #4]
   182d0:	230b      	movs	r3, #11
   182d2:	18fb      	adds	r3, r7, r3
   182d4:	7819      	ldrb	r1, [r3, #0]
   182d6:	002b      	movs	r3, r5
   182d8:	47a0      	blx	r4
   182da:	0003      	movs	r3, r0
   182dc:	617b      	str	r3, [r7, #20]

  return ret;
   182de:	697b      	ldr	r3, [r7, #20]
}
   182e0:	0018      	movs	r0, r3
   182e2:	46bd      	mov	sp, r7
   182e4:	b006      	add	sp, #24
   182e6:	bdb0      	pop	{r4, r5, r7, pc}

000182e8 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
   182e8:	b580      	push	{r7, lr}
   182ea:	b082      	sub	sp, #8
   182ec:	af00      	add	r7, sp, #0
   182ee:	0002      	movs	r2, r0
   182f0:	1dbb      	adds	r3, r7, #6
   182f2:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb / 16.0f) * 1.0f;
   182f4:	1dbb      	adds	r3, r7, #6
   182f6:	2200      	movs	r2, #0
   182f8:	5e9a      	ldrsh	r2, [r3, r2]
   182fa:	4b07      	ldr	r3, [pc, #28]	; (18318 <lis2dh12_from_fs2_hr_to_mg+0x30>)
   182fc:	0010      	movs	r0, r2
   182fe:	4798      	blx	r3
   18300:	1c02      	adds	r2, r0, #0
   18302:	4b06      	ldr	r3, [pc, #24]	; (1831c <lis2dh12_from_fs2_hr_to_mg+0x34>)
   18304:	2183      	movs	r1, #131	; 0x83
   18306:	05c9      	lsls	r1, r1, #23
   18308:	1c10      	adds	r0, r2, #0
   1830a:	4798      	blx	r3
   1830c:	1c03      	adds	r3, r0, #0
}
   1830e:	1c18      	adds	r0, r3, #0
   18310:	46bd      	mov	sp, r7
   18312:	b002      	add	sp, #8
   18314:	bd80      	pop	{r7, pc}
   18316:	46c0      	nop			; (mov r8, r8)
   18318:	00036a61 	.word	0x00036a61
   1831c:	000360c9 	.word	0x000360c9

00018320 <lis2dh12_from_lsb_hr_to_celsius>:
{
  return ((float_t)lsb / 16.0f) * 12.0f;
}

float_t lis2dh12_from_lsb_hr_to_celsius(int16_t lsb)
{
   18320:	b580      	push	{r7, lr}
   18322:	b082      	sub	sp, #8
   18324:	af00      	add	r7, sp, #0
   18326:	0002      	movs	r2, r0
   18328:	1dbb      	adds	r3, r7, #6
   1832a:	801a      	strh	r2, [r3, #0]
  return (((float_t)lsb / 64.0f) / 4.0f) + 25.0f;
   1832c:	1dbb      	adds	r3, r7, #6
   1832e:	2200      	movs	r2, #0
   18330:	5e9a      	ldrsh	r2, [r3, r2]
   18332:	4b0d      	ldr	r3, [pc, #52]	; (18368 <lis2dh12_from_lsb_hr_to_celsius+0x48>)
   18334:	0010      	movs	r0, r2
   18336:	4798      	blx	r3
   18338:	1c02      	adds	r2, r0, #0
   1833a:	4b0c      	ldr	r3, [pc, #48]	; (1836c <lis2dh12_from_lsb_hr_to_celsius+0x4c>)
   1833c:	2185      	movs	r1, #133	; 0x85
   1833e:	05c9      	lsls	r1, r1, #23
   18340:	1c10      	adds	r0, r2, #0
   18342:	4798      	blx	r3
   18344:	1c03      	adds	r3, r0, #0
   18346:	1c1a      	adds	r2, r3, #0
   18348:	4b08      	ldr	r3, [pc, #32]	; (1836c <lis2dh12_from_lsb_hr_to_celsius+0x4c>)
   1834a:	2181      	movs	r1, #129	; 0x81
   1834c:	05c9      	lsls	r1, r1, #23
   1834e:	1c10      	adds	r0, r2, #0
   18350:	4798      	blx	r3
   18352:	1c03      	adds	r3, r0, #0
   18354:	1c1a      	adds	r2, r3, #0
   18356:	4b06      	ldr	r3, [pc, #24]	; (18370 <lis2dh12_from_lsb_hr_to_celsius+0x50>)
   18358:	4906      	ldr	r1, [pc, #24]	; (18374 <lis2dh12_from_lsb_hr_to_celsius+0x54>)
   1835a:	1c10      	adds	r0, r2, #0
   1835c:	4798      	blx	r3
   1835e:	1c03      	adds	r3, r0, #0
}
   18360:	1c18      	adds	r0, r3, #0
   18362:	46bd      	mov	sp, r7
   18364:	b002      	add	sp, #8
   18366:	bd80      	pop	{r7, pc}
   18368:	00036a61 	.word	0x00036a61
   1836c:	000360c9 	.word	0x000360c9
   18370:	00035da5 	.word	0x00035da5
   18374:	41c80000 	.word	0x41c80000

00018378 <lis2dh12_temp_data_ready_get>:
  * @param  val      change the values of tda in reg STATUS_REG_AUX
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temp_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   18378:	b590      	push	{r4, r7, lr}
   1837a:	b085      	sub	sp, #20
   1837c:	af00      	add	r7, sp, #0
   1837e:	6078      	str	r0, [r7, #4]
   18380:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_aux_t status_reg_aux;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG_AUX,
   18382:	2308      	movs	r3, #8
   18384:	18fa      	adds	r2, r7, r3
   18386:	6878      	ldr	r0, [r7, #4]
   18388:	2301      	movs	r3, #1
   1838a:	2107      	movs	r1, #7
   1838c:	4c08      	ldr	r4, [pc, #32]	; (183b0 <lis2dh12_temp_data_ready_get+0x38>)
   1838e:	47a0      	blx	r4
   18390:	0003      	movs	r3, r0
   18392:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&status_reg_aux, 1);
  *val = status_reg_aux.tda;
   18394:	2308      	movs	r3, #8
   18396:	18fb      	adds	r3, r7, r3
   18398:	781b      	ldrb	r3, [r3, #0]
   1839a:	075b      	lsls	r3, r3, #29
   1839c:	0fdb      	lsrs	r3, r3, #31
   1839e:	b2db      	uxtb	r3, r3
   183a0:	001a      	movs	r2, r3
   183a2:	683b      	ldr	r3, [r7, #0]
   183a4:	701a      	strb	r2, [r3, #0]

  return ret;
   183a6:	68fb      	ldr	r3, [r7, #12]
}
   183a8:	0018      	movs	r0, r3
   183aa:	46bd      	mov	sp, r7
   183ac:	b005      	add	sp, #20
   183ae:	bd90      	pop	{r4, r7, pc}
   183b0:	0001825d 	.word	0x0001825d

000183b4 <lis2dh12_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   183b4:	b590      	push	{r4, r7, lr}
   183b6:	b085      	sub	sp, #20
   183b8:	af00      	add	r7, sp, #0
   183ba:	6078      	str	r0, [r7, #4]
   183bc:	6039      	str	r1, [r7, #0]
  uint8_t buff0;
  uint8_t buff1;
  int32_t ret;

 // ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_L, buff, 2);
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_L, &buff0, 1);
   183be:	230b      	movs	r3, #11
   183c0:	18fa      	adds	r2, r7, r3
   183c2:	6878      	ldr	r0, [r7, #4]
   183c4:	2301      	movs	r3, #1
   183c6:	210c      	movs	r1, #12
   183c8:	4c13      	ldr	r4, [pc, #76]	; (18418 <lis2dh12_temperature_raw_get+0x64>)
   183ca:	47a0      	blx	r4
   183cc:	0003      	movs	r3, r0
   183ce:	60fb      	str	r3, [r7, #12]
  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_TEMP_H, &buff1, 1);
   183d0:	230a      	movs	r3, #10
   183d2:	18fa      	adds	r2, r7, r3
   183d4:	6878      	ldr	r0, [r7, #4]
   183d6:	2301      	movs	r3, #1
   183d8:	210d      	movs	r1, #13
   183da:	4c0f      	ldr	r4, [pc, #60]	; (18418 <lis2dh12_temperature_raw_get+0x64>)
   183dc:	47a0      	blx	r4
   183de:	0003      	movs	r3, r0
   183e0:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff1;
   183e2:	230a      	movs	r3, #10
   183e4:	18fb      	adds	r3, r7, r3
   183e6:	781b      	ldrb	r3, [r3, #0]
   183e8:	b21a      	sxth	r2, r3
   183ea:	683b      	ldr	r3, [r7, #0]
   183ec:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff0;
   183ee:	683b      	ldr	r3, [r7, #0]
   183f0:	2200      	movs	r2, #0
   183f2:	5e9b      	ldrsh	r3, [r3, r2]
   183f4:	b29b      	uxth	r3, r3
   183f6:	021b      	lsls	r3, r3, #8
   183f8:	b29a      	uxth	r2, r3
   183fa:	230b      	movs	r3, #11
   183fc:	18fb      	adds	r3, r7, r3
   183fe:	781b      	ldrb	r3, [r3, #0]
   18400:	b29b      	uxth	r3, r3
   18402:	18d3      	adds	r3, r2, r3
   18404:	b29b      	uxth	r3, r3
   18406:	b21a      	sxth	r2, r3
   18408:	683b      	ldr	r3, [r7, #0]
   1840a:	801a      	strh	r2, [r3, #0]

  return ret;
   1840c:	68fb      	ldr	r3, [r7, #12]
}
   1840e:	0018      	movs	r0, r3
   18410:	46bd      	mov	sp, r7
   18412:	b005      	add	sp, #20
   18414:	bd90      	pop	{r4, r7, pc}
   18416:	46c0      	nop			; (mov r8, r8)
   18418:	0001825d 	.word	0x0001825d

0001841c <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(stmdev_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
   1841c:	b590      	push	{r4, r7, lr}
   1841e:	b085      	sub	sp, #20
   18420:	af00      	add	r7, sp, #0
   18422:	6078      	str	r0, [r7, #4]
   18424:	000a      	movs	r2, r1
   18426:	1cfb      	adds	r3, r7, #3
   18428:	701a      	strb	r2, [r3, #0]
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG,
   1842a:	2308      	movs	r3, #8
   1842c:	18fa      	adds	r2, r7, r3
   1842e:	6878      	ldr	r0, [r7, #4]
   18430:	2301      	movs	r3, #1
   18432:	211f      	movs	r1, #31
   18434:	4c11      	ldr	r4, [pc, #68]	; (1847c <lis2dh12_temperature_meas_set+0x60>)
   18436:	47a0      	blx	r4
   18438:	0003      	movs	r3, r0
   1843a:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0)
   1843c:	68fb      	ldr	r3, [r7, #12]
   1843e:	2b00      	cmp	r3, #0
   18440:	d117      	bne.n	18472 <lis2dh12_temperature_meas_set+0x56>
  {
    temp_cfg_reg.temp_en = (uint8_t) val;
   18442:	1cfb      	adds	r3, r7, #3
   18444:	781b      	ldrb	r3, [r3, #0]
   18446:	2203      	movs	r2, #3
   18448:	4013      	ands	r3, r2
   1844a:	b2da      	uxtb	r2, r3
   1844c:	2308      	movs	r3, #8
   1844e:	18fb      	adds	r3, r7, r3
   18450:	0190      	lsls	r0, r2, #6
   18452:	781a      	ldrb	r2, [r3, #0]
   18454:	213f      	movs	r1, #63	; 0x3f
   18456:	400a      	ands	r2, r1
   18458:	1c11      	adds	r1, r2, #0
   1845a:	1c02      	adds	r2, r0, #0
   1845c:	430a      	orrs	r2, r1
   1845e:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG,
   18460:	2308      	movs	r3, #8
   18462:	18fa      	adds	r2, r7, r3
   18464:	6878      	ldr	r0, [r7, #4]
   18466:	2301      	movs	r3, #1
   18468:	211f      	movs	r1, #31
   1846a:	4c05      	ldr	r4, [pc, #20]	; (18480 <lis2dh12_temperature_meas_set+0x64>)
   1846c:	47a0      	blx	r4
   1846e:	0003      	movs	r3, r0
   18470:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
   18472:	68fb      	ldr	r3, [r7, #12]
}
   18474:	0018      	movs	r0, r3
   18476:	46bd      	mov	sp, r7
   18478:	b005      	add	sp, #20
   1847a:	bd90      	pop	{r4, r7, pc}
   1847c:	0001825d 	.word	0x0001825d
   18480:	000182a3 	.word	0x000182a3

00018484 <lis2dh12_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(stmdev_ctx_t *ctx,
                                    lis2dh12_op_md_t val)
{
   18484:	b590      	push	{r4, r7, lr}
   18486:	b087      	sub	sp, #28
   18488:	af00      	add	r7, sp, #0
   1848a:	6078      	str	r0, [r7, #4]
   1848c:	000a      	movs	r2, r1
   1848e:	1cfb      	adds	r3, r7, #3
   18490:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
   18492:	2310      	movs	r3, #16
   18494:	18fa      	adds	r2, r7, r3
   18496:	6878      	ldr	r0, [r7, #4]
   18498:	2301      	movs	r3, #1
   1849a:	2120      	movs	r1, #32
   1849c:	4c2e      	ldr	r4, [pc, #184]	; (18558 <lis2dh12_operating_mode_set+0xd4>)
   1849e:	47a0      	blx	r4
   184a0:	0003      	movs	r3, r0
   184a2:	617b      	str	r3, [r7, #20]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
   184a4:	697b      	ldr	r3, [r7, #20]
   184a6:	2b00      	cmp	r3, #0
   184a8:	d108      	bne.n	184bc <lis2dh12_operating_mode_set+0x38>
  {
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
   184aa:	230c      	movs	r3, #12
   184ac:	18fa      	adds	r2, r7, r3
   184ae:	6878      	ldr	r0, [r7, #4]
   184b0:	2301      	movs	r3, #1
   184b2:	2123      	movs	r1, #35	; 0x23
   184b4:	4c28      	ldr	r4, [pc, #160]	; (18558 <lis2dh12_operating_mode_set+0xd4>)
   184b6:	47a0      	blx	r4
   184b8:	0003      	movs	r3, r0
   184ba:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
   184bc:	697b      	ldr	r3, [r7, #20]
   184be:	2b00      	cmp	r3, #0
   184c0:	d138      	bne.n	18534 <lis2dh12_operating_mode_set+0xb0>
  {
    if (val == LIS2DH12_HR_12bit)
   184c2:	1cfb      	adds	r3, r7, #3
   184c4:	781b      	ldrb	r3, [r3, #0]
   184c6:	2b00      	cmp	r3, #0
   184c8:	d10b      	bne.n	184e2 <lis2dh12_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
   184ca:	2310      	movs	r3, #16
   184cc:	18fb      	adds	r3, r7, r3
   184ce:	781a      	ldrb	r2, [r3, #0]
   184d0:	2108      	movs	r1, #8
   184d2:	438a      	bics	r2, r1
   184d4:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
   184d6:	230c      	movs	r3, #12
   184d8:	18fb      	adds	r3, r7, r3
   184da:	781a      	ldrb	r2, [r3, #0]
   184dc:	2108      	movs	r1, #8
   184de:	430a      	orrs	r2, r1
   184e0:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS2DH12_NM_10bit)
   184e2:	1cfb      	adds	r3, r7, #3
   184e4:	781b      	ldrb	r3, [r3, #0]
   184e6:	2b01      	cmp	r3, #1
   184e8:	d10b      	bne.n	18502 <lis2dh12_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
   184ea:	2310      	movs	r3, #16
   184ec:	18fb      	adds	r3, r7, r3
   184ee:	781a      	ldrb	r2, [r3, #0]
   184f0:	2108      	movs	r1, #8
   184f2:	438a      	bics	r2, r1
   184f4:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
   184f6:	230c      	movs	r3, #12
   184f8:	18fb      	adds	r3, r7, r3
   184fa:	781a      	ldrb	r2, [r3, #0]
   184fc:	2108      	movs	r1, #8
   184fe:	438a      	bics	r2, r1
   18500:	701a      	strb	r2, [r3, #0]
    }

    if (val == LIS2DH12_LP_8bit)
   18502:	1cfb      	adds	r3, r7, #3
   18504:	781b      	ldrb	r3, [r3, #0]
   18506:	2b02      	cmp	r3, #2
   18508:	d10b      	bne.n	18522 <lis2dh12_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
   1850a:	2310      	movs	r3, #16
   1850c:	18fb      	adds	r3, r7, r3
   1850e:	781a      	ldrb	r2, [r3, #0]
   18510:	2108      	movs	r1, #8
   18512:	430a      	orrs	r2, r1
   18514:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
   18516:	230c      	movs	r3, #12
   18518:	18fb      	adds	r3, r7, r3
   1851a:	781a      	ldrb	r2, [r3, #0]
   1851c:	2108      	movs	r1, #8
   1851e:	438a      	bics	r2, r1
   18520:	701a      	strb	r2, [r3, #0]
    }

    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
   18522:	2310      	movs	r3, #16
   18524:	18fa      	adds	r2, r7, r3
   18526:	6878      	ldr	r0, [r7, #4]
   18528:	2301      	movs	r3, #1
   1852a:	2120      	movs	r1, #32
   1852c:	4c0b      	ldr	r4, [pc, #44]	; (1855c <lis2dh12_operating_mode_set+0xd8>)
   1852e:	47a0      	blx	r4
   18530:	0003      	movs	r3, r0
   18532:	617b      	str	r3, [r7, #20]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  if (ret == 0)
   18534:	697b      	ldr	r3, [r7, #20]
   18536:	2b00      	cmp	r3, #0
   18538:	d108      	bne.n	1854c <lis2dh12_operating_mode_set+0xc8>
  {
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
   1853a:	230c      	movs	r3, #12
   1853c:	18fa      	adds	r2, r7, r3
   1853e:	6878      	ldr	r0, [r7, #4]
   18540:	2301      	movs	r3, #1
   18542:	2123      	movs	r1, #35	; 0x23
   18544:	4c05      	ldr	r4, [pc, #20]	; (1855c <lis2dh12_operating_mode_set+0xd8>)
   18546:	47a0      	blx	r4
   18548:	0003      	movs	r3, r0
   1854a:	617b      	str	r3, [r7, #20]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
   1854c:	697b      	ldr	r3, [r7, #20]
}
   1854e:	0018      	movs	r0, r3
   18550:	46bd      	mov	sp, r7
   18552:	b007      	add	sp, #28
   18554:	bd90      	pop	{r4, r7, pc}
   18556:	46c0      	nop			; (mov r8, r8)
   18558:	0001825d 	.word	0x0001825d
   1855c:	000182a3 	.word	0x000182a3

00018560 <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(stmdev_ctx_t *ctx, lis2dh12_odr_t val)
{
   18560:	b590      	push	{r4, r7, lr}
   18562:	b085      	sub	sp, #20
   18564:	af00      	add	r7, sp, #0
   18566:	6078      	str	r0, [r7, #4]
   18568:	000a      	movs	r2, r1
   1856a:	1cfb      	adds	r3, r7, #3
   1856c:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
   1856e:	2308      	movs	r3, #8
   18570:	18fa      	adds	r2, r7, r3
   18572:	6878      	ldr	r0, [r7, #4]
   18574:	2301      	movs	r3, #1
   18576:	2120      	movs	r1, #32
   18578:	4c11      	ldr	r4, [pc, #68]	; (185c0 <lis2dh12_data_rate_set+0x60>)
   1857a:	47a0      	blx	r4
   1857c:	0003      	movs	r3, r0
   1857e:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
   18580:	68fb      	ldr	r3, [r7, #12]
   18582:	2b00      	cmp	r3, #0
   18584:	d117      	bne.n	185b6 <lis2dh12_data_rate_set+0x56>
  {
    ctrl_reg1.odr = (uint8_t)val;
   18586:	1cfb      	adds	r3, r7, #3
   18588:	781b      	ldrb	r3, [r3, #0]
   1858a:	220f      	movs	r2, #15
   1858c:	4013      	ands	r3, r2
   1858e:	b2da      	uxtb	r2, r3
   18590:	2308      	movs	r3, #8
   18592:	18fb      	adds	r3, r7, r3
   18594:	0110      	lsls	r0, r2, #4
   18596:	781a      	ldrb	r2, [r3, #0]
   18598:	210f      	movs	r1, #15
   1859a:	400a      	ands	r2, r1
   1859c:	1c11      	adds	r1, r2, #0
   1859e:	1c02      	adds	r2, r0, #0
   185a0:	430a      	orrs	r2, r1
   185a2:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
   185a4:	2308      	movs	r3, #8
   185a6:	18fa      	adds	r2, r7, r3
   185a8:	6878      	ldr	r0, [r7, #4]
   185aa:	2301      	movs	r3, #1
   185ac:	2120      	movs	r1, #32
   185ae:	4c05      	ldr	r4, [pc, #20]	; (185c4 <lis2dh12_data_rate_set+0x64>)
   185b0:	47a0      	blx	r4
   185b2:	0003      	movs	r3, r0
   185b4:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
   185b6:	68fb      	ldr	r3, [r7, #12]
}
   185b8:	0018      	movs	r0, r3
   185ba:	46bd      	mov	sp, r7
   185bc:	b005      	add	sp, #20
   185be:	bd90      	pop	{r4, r7, pc}
   185c0:	0001825d 	.word	0x0001825d
   185c4:	000182a3 	.word	0x000182a3

000185c8 <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(stmdev_ctx_t *ctx, lis2dh12_fs_t val)
{
   185c8:	b590      	push	{r4, r7, lr}
   185ca:	b085      	sub	sp, #20
   185cc:	af00      	add	r7, sp, #0
   185ce:	6078      	str	r0, [r7, #4]
   185d0:	000a      	movs	r2, r1
   185d2:	1cfb      	adds	r3, r7, #3
   185d4:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
   185d6:	2308      	movs	r3, #8
   185d8:	18fa      	adds	r2, r7, r3
   185da:	6878      	ldr	r0, [r7, #4]
   185dc:	2301      	movs	r3, #1
   185de:	2123      	movs	r1, #35	; 0x23
   185e0:	4c12      	ldr	r4, [pc, #72]	; (1862c <lis2dh12_full_scale_set+0x64>)
   185e2:	47a0      	blx	r4
   185e4:	0003      	movs	r3, r0
   185e6:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
   185e8:	68fb      	ldr	r3, [r7, #12]
   185ea:	2b00      	cmp	r3, #0
   185ec:	d119      	bne.n	18622 <lis2dh12_full_scale_set+0x5a>
  {
    ctrl_reg4.fs = (uint8_t)val;
   185ee:	1cfb      	adds	r3, r7, #3
   185f0:	781b      	ldrb	r3, [r3, #0]
   185f2:	2203      	movs	r2, #3
   185f4:	4013      	ands	r3, r2
   185f6:	b2da      	uxtb	r2, r3
   185f8:	2308      	movs	r3, #8
   185fa:	18fb      	adds	r3, r7, r3
   185fc:	2103      	movs	r1, #3
   185fe:	400a      	ands	r2, r1
   18600:	0110      	lsls	r0, r2, #4
   18602:	781a      	ldrb	r2, [r3, #0]
   18604:	2130      	movs	r1, #48	; 0x30
   18606:	438a      	bics	r2, r1
   18608:	1c11      	adds	r1, r2, #0
   1860a:	1c02      	adds	r2, r0, #0
   1860c:	430a      	orrs	r2, r1
   1860e:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
   18610:	2308      	movs	r3, #8
   18612:	18fa      	adds	r2, r7, r3
   18614:	6878      	ldr	r0, [r7, #4]
   18616:	2301      	movs	r3, #1
   18618:	2123      	movs	r1, #35	; 0x23
   1861a:	4c05      	ldr	r4, [pc, #20]	; (18630 <lis2dh12_full_scale_set+0x68>)
   1861c:	47a0      	blx	r4
   1861e:	0003      	movs	r3, r0
   18620:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
   18622:	68fb      	ldr	r3, [r7, #12]
}
   18624:	0018      	movs	r0, r3
   18626:	46bd      	mov	sp, r7
   18628:	b005      	add	sp, #20
   1862a:	bd90      	pop	{r4, r7, pc}
   1862c:	0001825d 	.word	0x0001825d
   18630:	000182a3 	.word	0x000182a3

00018634 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   18634:	b590      	push	{r4, r7, lr}
   18636:	b085      	sub	sp, #20
   18638:	af00      	add	r7, sp, #0
   1863a:	6078      	str	r0, [r7, #4]
   1863c:	000a      	movs	r2, r1
   1863e:	1cfb      	adds	r3, r7, #3
   18640:	701a      	strb	r2, [r3, #0]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
   18642:	2308      	movs	r3, #8
   18644:	18fa      	adds	r2, r7, r3
   18646:	6878      	ldr	r0, [r7, #4]
   18648:	2301      	movs	r3, #1
   1864a:	2123      	movs	r1, #35	; 0x23
   1864c:	4c11      	ldr	r4, [pc, #68]	; (18694 <lis2dh12_block_data_update_set+0x60>)
   1864e:	47a0      	blx	r4
   18650:	0003      	movs	r3, r0
   18652:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
   18654:	68fb      	ldr	r3, [r7, #12]
   18656:	2b00      	cmp	r3, #0
   18658:	d117      	bne.n	1868a <lis2dh12_block_data_update_set+0x56>
  {
    ctrl_reg4.bdu = val;
   1865a:	1cfb      	adds	r3, r7, #3
   1865c:	781b      	ldrb	r3, [r3, #0]
   1865e:	2201      	movs	r2, #1
   18660:	4013      	ands	r3, r2
   18662:	b2da      	uxtb	r2, r3
   18664:	2308      	movs	r3, #8
   18666:	18fb      	adds	r3, r7, r3
   18668:	01d0      	lsls	r0, r2, #7
   1866a:	781a      	ldrb	r2, [r3, #0]
   1866c:	217f      	movs	r1, #127	; 0x7f
   1866e:	400a      	ands	r2, r1
   18670:	1c11      	adds	r1, r2, #0
   18672:	1c02      	adds	r2, r0, #0
   18674:	430a      	orrs	r2, r1
   18676:	701a      	strb	r2, [r3, #0]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
   18678:	2308      	movs	r3, #8
   1867a:	18fa      	adds	r2, r7, r3
   1867c:	6878      	ldr	r0, [r7, #4]
   1867e:	2301      	movs	r3, #1
   18680:	2123      	movs	r1, #35	; 0x23
   18682:	4c05      	ldr	r4, [pc, #20]	; (18698 <lis2dh12_block_data_update_set+0x64>)
   18684:	47a0      	blx	r4
   18686:	0003      	movs	r3, r0
   18688:	60fb      	str	r3, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
   1868a:	68fb      	ldr	r3, [r7, #12]
}
   1868c:	0018      	movs	r0, r3
   1868e:	46bd      	mov	sp, r7
   18690:	b005      	add	sp, #20
   18692:	bd90      	pop	{r4, r7, pc}
   18694:	0001825d 	.word	0x0001825d
   18698:	000182a3 	.word	0x000182a3

0001869c <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   1869c:	b590      	push	{r4, r7, lr}
   1869e:	b085      	sub	sp, #20
   186a0:	af00      	add	r7, sp, #0
   186a2:	6078      	str	r0, [r7, #4]
   186a4:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG,
   186a6:	2308      	movs	r3, #8
   186a8:	18fa      	adds	r2, r7, r3
   186aa:	6878      	ldr	r0, [r7, #4]
   186ac:	2301      	movs	r3, #1
   186ae:	2127      	movs	r1, #39	; 0x27
   186b0:	4c08      	ldr	r4, [pc, #32]	; (186d4 <lis2dh12_xl_data_ready_get+0x38>)
   186b2:	47a0      	blx	r4
   186b4:	0003      	movs	r3, r0
   186b6:	60fb      	str	r3, [r7, #12]
                          (uint8_t *)&status_reg, 1);
  *val = status_reg.zyxda;
   186b8:	2308      	movs	r3, #8
   186ba:	18fb      	adds	r3, r7, r3
   186bc:	781b      	ldrb	r3, [r3, #0]
   186be:	071b      	lsls	r3, r3, #28
   186c0:	0fdb      	lsrs	r3, r3, #31
   186c2:	b2db      	uxtb	r3, r3
   186c4:	001a      	movs	r2, r3
   186c6:	683b      	ldr	r3, [r7, #0]
   186c8:	701a      	strb	r2, [r3, #0]

  return ret;
   186ca:	68fb      	ldr	r3, [r7, #12]
}
   186cc:	0018      	movs	r0, r3
   186ce:	46bd      	mov	sp, r7
   186d0:	b005      	add	sp, #20
   186d2:	bd90      	pop	{r4, r7, pc}
   186d4:	0001825d 	.word	0x0001825d

000186d8 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   186d8:	b590      	push	{r4, r7, lr}
   186da:	b087      	sub	sp, #28
   186dc:	af00      	add	r7, sp, #0
   186de:	6078      	str	r0, [r7, #4]
   186e0:	6039      	str	r1, [r7, #0]
uint8_t buff4;
uint8_t buff5;

int32_t ret;

ret = lis2dh12_read_reg(ctx, 0x28U, &buff0, 1);
   186e2:	2313      	movs	r3, #19
   186e4:	18fa      	adds	r2, r7, r3
   186e6:	6878      	ldr	r0, [r7, #4]
   186e8:	2301      	movs	r3, #1
   186ea:	2128      	movs	r1, #40	; 0x28
   186ec:	4c3d      	ldr	r4, [pc, #244]	; (187e4 <lis2dh12_acceleration_raw_get+0x10c>)
   186ee:	47a0      	blx	r4
   186f0:	0003      	movs	r3, r0
   186f2:	617b      	str	r3, [r7, #20]
ret = lis2dh12_read_reg(ctx, 0x29U, &buff1, 1);
   186f4:	2312      	movs	r3, #18
   186f6:	18fa      	adds	r2, r7, r3
   186f8:	6878      	ldr	r0, [r7, #4]
   186fa:	2301      	movs	r3, #1
   186fc:	2129      	movs	r1, #41	; 0x29
   186fe:	4c39      	ldr	r4, [pc, #228]	; (187e4 <lis2dh12_acceleration_raw_get+0x10c>)
   18700:	47a0      	blx	r4
   18702:	0003      	movs	r3, r0
   18704:	617b      	str	r3, [r7, #20]
ret = lis2dh12_read_reg(ctx, 0x2AU, &buff2, 1);
   18706:	2311      	movs	r3, #17
   18708:	18fa      	adds	r2, r7, r3
   1870a:	6878      	ldr	r0, [r7, #4]
   1870c:	2301      	movs	r3, #1
   1870e:	212a      	movs	r1, #42	; 0x2a
   18710:	4c34      	ldr	r4, [pc, #208]	; (187e4 <lis2dh12_acceleration_raw_get+0x10c>)
   18712:	47a0      	blx	r4
   18714:	0003      	movs	r3, r0
   18716:	617b      	str	r3, [r7, #20]
ret = lis2dh12_read_reg(ctx, 0x2BU, &buff3, 1);
   18718:	2310      	movs	r3, #16
   1871a:	18fa      	adds	r2, r7, r3
   1871c:	6878      	ldr	r0, [r7, #4]
   1871e:	2301      	movs	r3, #1
   18720:	212b      	movs	r1, #43	; 0x2b
   18722:	4c30      	ldr	r4, [pc, #192]	; (187e4 <lis2dh12_acceleration_raw_get+0x10c>)
   18724:	47a0      	blx	r4
   18726:	0003      	movs	r3, r0
   18728:	617b      	str	r3, [r7, #20]
ret = lis2dh12_read_reg(ctx, 0x2CU, &buff4, 1);
   1872a:	230f      	movs	r3, #15
   1872c:	18fa      	adds	r2, r7, r3
   1872e:	6878      	ldr	r0, [r7, #4]
   18730:	2301      	movs	r3, #1
   18732:	212c      	movs	r1, #44	; 0x2c
   18734:	4c2b      	ldr	r4, [pc, #172]	; (187e4 <lis2dh12_acceleration_raw_get+0x10c>)
   18736:	47a0      	blx	r4
   18738:	0003      	movs	r3, r0
   1873a:	617b      	str	r3, [r7, #20]
ret = lis2dh12_read_reg(ctx, 0x2DU, &buff5, 1);
   1873c:	230e      	movs	r3, #14
   1873e:	18fa      	adds	r2, r7, r3
   18740:	6878      	ldr	r0, [r7, #4]
   18742:	2301      	movs	r3, #1
   18744:	212d      	movs	r1, #45	; 0x2d
   18746:	4c27      	ldr	r4, [pc, #156]	; (187e4 <lis2dh12_acceleration_raw_get+0x10c>)
   18748:	47a0      	blx	r4
   1874a:	0003      	movs	r3, r0
   1874c:	617b      	str	r3, [r7, #20]
val[0] = (int16_t)buff1;
   1874e:	2312      	movs	r3, #18
   18750:	18fb      	adds	r3, r7, r3
   18752:	781b      	ldrb	r3, [r3, #0]
   18754:	b21a      	sxth	r2, r3
   18756:	683b      	ldr	r3, [r7, #0]
   18758:	801a      	strh	r2, [r3, #0]
val[0] = (val[0] * 256) + (int16_t)buff0;
   1875a:	683b      	ldr	r3, [r7, #0]
   1875c:	2200      	movs	r2, #0
   1875e:	5e9b      	ldrsh	r3, [r3, r2]
   18760:	b29b      	uxth	r3, r3
   18762:	021b      	lsls	r3, r3, #8
   18764:	b29a      	uxth	r2, r3
   18766:	2313      	movs	r3, #19
   18768:	18fb      	adds	r3, r7, r3
   1876a:	781b      	ldrb	r3, [r3, #0]
   1876c:	b29b      	uxth	r3, r3
   1876e:	18d3      	adds	r3, r2, r3
   18770:	b29b      	uxth	r3, r3
   18772:	b21a      	sxth	r2, r3
   18774:	683b      	ldr	r3, [r7, #0]
   18776:	801a      	strh	r2, [r3, #0]
val[1] = (int16_t)buff3;
   18778:	683b      	ldr	r3, [r7, #0]
   1877a:	3302      	adds	r3, #2
   1877c:	2210      	movs	r2, #16
   1877e:	18ba      	adds	r2, r7, r2
   18780:	7812      	ldrb	r2, [r2, #0]
   18782:	b212      	sxth	r2, r2
   18784:	801a      	strh	r2, [r3, #0]
val[1] = (val[1] * 256) + (int16_t)buff2;
   18786:	683b      	ldr	r3, [r7, #0]
   18788:	3302      	adds	r3, #2
   1878a:	683a      	ldr	r2, [r7, #0]
   1878c:	3202      	adds	r2, #2
   1878e:	2100      	movs	r1, #0
   18790:	5e52      	ldrsh	r2, [r2, r1]
   18792:	b292      	uxth	r2, r2
   18794:	0212      	lsls	r2, r2, #8
   18796:	b291      	uxth	r1, r2
   18798:	2211      	movs	r2, #17
   1879a:	18ba      	adds	r2, r7, r2
   1879c:	7812      	ldrb	r2, [r2, #0]
   1879e:	b292      	uxth	r2, r2
   187a0:	188a      	adds	r2, r1, r2
   187a2:	b292      	uxth	r2, r2
   187a4:	b212      	sxth	r2, r2
   187a6:	801a      	strh	r2, [r3, #0]
val[2] = (int16_t)buff5;
   187a8:	683b      	ldr	r3, [r7, #0]
   187aa:	3304      	adds	r3, #4
   187ac:	220e      	movs	r2, #14
   187ae:	18ba      	adds	r2, r7, r2
   187b0:	7812      	ldrb	r2, [r2, #0]
   187b2:	b212      	sxth	r2, r2
   187b4:	801a      	strh	r2, [r3, #0]
val[2] = (val[2] * 256) + (int16_t)buff4;
   187b6:	683b      	ldr	r3, [r7, #0]
   187b8:	3304      	adds	r3, #4
   187ba:	683a      	ldr	r2, [r7, #0]
   187bc:	3204      	adds	r2, #4
   187be:	2100      	movs	r1, #0
   187c0:	5e52      	ldrsh	r2, [r2, r1]
   187c2:	b292      	uxth	r2, r2
   187c4:	0212      	lsls	r2, r2, #8
   187c6:	b291      	uxth	r1, r2
   187c8:	220f      	movs	r2, #15
   187ca:	18ba      	adds	r2, r7, r2
   187cc:	7812      	ldrb	r2, [r2, #0]
   187ce:	b292      	uxth	r2, r2
   187d0:	188a      	adds	r2, r1, r2
   187d2:	b292      	uxth	r2, r2
   187d4:	b212      	sxth	r2, r2
   187d6:	801a      	strh	r2, [r3, #0]

return ret;
   187d8:	697b      	ldr	r3, [r7, #20]
//val[1] = (val[1] * 256) + (int16_t)buff2[0];
//val[2] = (int16_t)buff5[0];
//val[2] = (val[2] * 256) + (int16_t)buff4[0];
//
//return ret;
}
   187da:	0018      	movs	r0, r3
   187dc:	46bd      	mov	sp, r7
   187de:	b007      	add	sp, #28
   187e0:	bd90      	pop	{r4, r7, pc}
   187e2:	46c0      	nop			; (mov r8, r8)
   187e4:	0001825d 	.word	0x0001825d

000187e8 <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   187e8:	b590      	push	{r4, r7, lr}
   187ea:	b085      	sub	sp, #20
   187ec:	af00      	add	r7, sp, #0
   187ee:	6078      	str	r0, [r7, #4]
   187f0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
   187f2:	683a      	ldr	r2, [r7, #0]
   187f4:	6878      	ldr	r0, [r7, #4]
   187f6:	2301      	movs	r3, #1
   187f8:	210f      	movs	r1, #15
   187fa:	4c04      	ldr	r4, [pc, #16]	; (1880c <lis2dh12_device_id_get+0x24>)
   187fc:	47a0      	blx	r4
   187fe:	0003      	movs	r3, r0
   18800:	60fb      	str	r3, [r7, #12]

  return ret;
   18802:	68fb      	ldr	r3, [r7, #12]
}
   18804:	0018      	movs	r0, r3
   18806:	46bd      	mov	sp, r7
   18808:	b005      	add	sp, #20
   1880a:	bd90      	pop	{r4, r7, pc}
   1880c:	0001825d 	.word	0x0001825d

00018810 <platform_write_lis>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write_lis(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   18810:	b580      	push	{r7, lr}
   18812:	b086      	sub	sp, #24
   18814:	af00      	add	r7, sp, #0
   18816:	60f8      	str	r0, [r7, #12]
   18818:	0008      	movs	r0, r1
   1881a:	607a      	str	r2, [r7, #4]
   1881c:	0019      	movs	r1, r3
   1881e:	230b      	movs	r3, #11
   18820:	18fb      	adds	r3, r7, r3
   18822:	1c02      	adds	r2, r0, #0
   18824:	701a      	strb	r2, [r3, #0]
   18826:	2308      	movs	r3, #8
   18828:	18fb      	adds	r3, r7, r3
   1882a:	1c0a      	adds	r2, r1, #0
   1882c:	801a      	strh	r2, [r3, #0]
	
    msgOutAcc[0] = reg;
   1882e:	4b1e      	ldr	r3, [pc, #120]	; (188a8 <platform_write_lis+0x98>)
   18830:	220b      	movs	r2, #11
   18832:	18ba      	adds	r2, r7, r2
   18834:	7812      	ldrb	r2, [r2, #0]
   18836:	701a      	strb	r2, [r3, #0]
	
    for(uint16_t i = 0; i < len; i++){
   18838:	2316      	movs	r3, #22
   1883a:	18fb      	adds	r3, r7, r3
   1883c:	2200      	movs	r2, #0
   1883e:	801a      	strh	r2, [r3, #0]
   18840:	e012      	b.n	18868 <platform_write_lis+0x58>
	    msgOutAcc[i+1] = bufp[i];
   18842:	2316      	movs	r3, #22
   18844:	18fb      	adds	r3, r7, r3
   18846:	881b      	ldrh	r3, [r3, #0]
   18848:	3301      	adds	r3, #1
   1884a:	2216      	movs	r2, #22
   1884c:	18ba      	adds	r2, r7, r2
   1884e:	8812      	ldrh	r2, [r2, #0]
   18850:	6879      	ldr	r1, [r7, #4]
   18852:	188a      	adds	r2, r1, r2
   18854:	7811      	ldrb	r1, [r2, #0]
   18856:	4a14      	ldr	r2, [pc, #80]	; (188a8 <platform_write_lis+0x98>)
   18858:	54d1      	strb	r1, [r2, r3]
    for(uint16_t i = 0; i < len; i++){
   1885a:	2316      	movs	r3, #22
   1885c:	18fb      	adds	r3, r7, r3
   1885e:	881a      	ldrh	r2, [r3, #0]
   18860:	2316      	movs	r3, #22
   18862:	18fb      	adds	r3, r7, r3
   18864:	3201      	adds	r2, #1
   18866:	801a      	strh	r2, [r3, #0]
   18868:	2316      	movs	r3, #22
   1886a:	18fa      	adds	r2, r7, r3
   1886c:	2308      	movs	r3, #8
   1886e:	18fb      	adds	r3, r7, r3
   18870:	8812      	ldrh	r2, [r2, #0]
   18872:	881b      	ldrh	r3, [r3, #0]
   18874:	429a      	cmp	r2, r3
   18876:	d3e4      	bcc.n	18842 <platform_write_lis+0x32>
    }
	
    AccData.address = 0x19;
   18878:	4b0c      	ldr	r3, [pc, #48]	; (188ac <platform_write_lis+0x9c>)
   1887a:	2219      	movs	r2, #25
   1887c:	701a      	strb	r2, [r3, #0]
    AccData.msgOut = &msgOutAcc;
   1887e:	4b0b      	ldr	r3, [pc, #44]	; (188ac <platform_write_lis+0x9c>)
   18880:	4a09      	ldr	r2, [pc, #36]	; (188a8 <platform_write_lis+0x98>)
   18882:	605a      	str	r2, [r3, #4]
    AccData.lenOut = len + 1;
   18884:	2308      	movs	r3, #8
   18886:	18fb      	adds	r3, r7, r3
   18888:	881b      	ldrh	r3, [r3, #0]
   1888a:	3301      	adds	r3, #1
   1888c:	b29a      	uxth	r2, r3
   1888e:	4b07      	ldr	r3, [pc, #28]	; (188ac <platform_write_lis+0x9c>)
   18890:	81da      	strh	r2, [r3, #14]

	return I2cWriteDataWait(&AccData, 100);
   18892:	4b06      	ldr	r3, [pc, #24]	; (188ac <platform_write_lis+0x9c>)
   18894:	2164      	movs	r1, #100	; 0x64
   18896:	0018      	movs	r0, r3
   18898:	4b05      	ldr	r3, [pc, #20]	; (188b0 <platform_write_lis+0xa0>)
   1889a:	4798      	blx	r3
   1889c:	0003      	movs	r3, r0
	
}
   1889e:	0018      	movs	r0, r3
   188a0:	46bd      	mov	sp, r7
   188a2:	b006      	add	sp, #24
   188a4:	bd80      	pop	{r7, pc}
   188a6:	46c0      	nop			; (mov r8, r8)
   188a8:	20004884 	.word	0x20004884
   188ac:	20004874 	.word	0x20004874
   188b0:	00017fa5 	.word	0x00017fa5

000188b4 <platform_read_lis>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read_lis(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   188b4:	b580      	push	{r7, lr}
   188b6:	b084      	sub	sp, #16
   188b8:	af00      	add	r7, sp, #0
   188ba:	60f8      	str	r0, [r7, #12]
   188bc:	0008      	movs	r0, r1
   188be:	607a      	str	r2, [r7, #4]
   188c0:	0019      	movs	r1, r3
   188c2:	230b      	movs	r3, #11
   188c4:	18fb      	adds	r3, r7, r3
   188c6:	1c02      	adds	r2, r0, #0
   188c8:	701a      	strb	r2, [r3, #0]
   188ca:	2308      	movs	r3, #8
   188cc:	18fb      	adds	r3, r7, r3
   188ce:	1c0a      	adds	r2, r1, #0
   188d0:	801a      	strh	r2, [r3, #0]
	
	AccData.address = 0x19;
   188d2:	4b0e      	ldr	r3, [pc, #56]	; (1890c <platform_read_lis+0x58>)
   188d4:	2219      	movs	r2, #25
   188d6:	701a      	strb	r2, [r3, #0]
	AccData.msgOut = &reg;
   188d8:	4b0c      	ldr	r3, [pc, #48]	; (1890c <platform_read_lis+0x58>)
   188da:	220b      	movs	r2, #11
   188dc:	18ba      	adds	r2, r7, r2
   188de:	605a      	str	r2, [r3, #4]
	AccData.lenOut = 1;
   188e0:	4b0a      	ldr	r3, [pc, #40]	; (1890c <platform_read_lis+0x58>)
   188e2:	2201      	movs	r2, #1
   188e4:	81da      	strh	r2, [r3, #14]
	
	AccData.msgIn = bufp;
   188e6:	4b09      	ldr	r3, [pc, #36]	; (1890c <platform_read_lis+0x58>)
   188e8:	687a      	ldr	r2, [r7, #4]
   188ea:	609a      	str	r2, [r3, #8]
	AccData.lenIn = len;
   188ec:	4b07      	ldr	r3, [pc, #28]	; (1890c <platform_read_lis+0x58>)
   188ee:	2208      	movs	r2, #8
   188f0:	18ba      	adds	r2, r7, r2
   188f2:	8812      	ldrh	r2, [r2, #0]
   188f4:	819a      	strh	r2, [r3, #12]

	return I2cReadDataWait(&AccData,0, 100);
   188f6:	4b05      	ldr	r3, [pc, #20]	; (1890c <platform_read_lis+0x58>)
   188f8:	2264      	movs	r2, #100	; 0x64
   188fa:	2100      	movs	r1, #0
   188fc:	0018      	movs	r0, r3
   188fe:	4b04      	ldr	r3, [pc, #16]	; (18910 <platform_read_lis+0x5c>)
   18900:	4798      	blx	r3
   18902:	0003      	movs	r3, r0
}
   18904:	0018      	movs	r0, r3
   18906:	46bd      	mov	sp, r7
   18908:	b004      	add	sp, #16
   1890a:	bd80      	pop	{r7, pc}
   1890c:	20004874 	.word	0x20004874
   18910:	0001807d 	.word	0x0001807d

00018914 <GetAccStruct>:


stmdev_ctx_t * GetAccStruct(void)
{
   18914:	b580      	push	{r7, lr}
   18916:	af00      	add	r7, sp, #0
	return &dev_ctx_lis; 
   18918:	4b01      	ldr	r3, [pc, #4]	; (18920 <GetAccStruct+0xc>)
}
   1891a:	0018      	movs	r0, r3
   1891c:	46bd      	mov	sp, r7
   1891e:	bd80      	pop	{r7, pc}
   18920:	2000009c 	.word	0x2000009c

00018924 <init_LIS2DH12>:

int32_t init_LIS2DH12(void)
{	
   18924:	b580      	push	{r7, lr}
   18926:	b082      	sub	sp, #8
   18928:	af00      	add	r7, sp, #0
  int32_t error = 0;
   1892a:	2300      	movs	r3, #0
   1892c:	607b      	str	r3, [r7, #4]
  
   /* Enable Block Data Update. */
  error = lis2dh12_block_data_update_set(&dev_ctx_lis, PROPERTY_ENABLE);
   1892e:	4b14      	ldr	r3, [pc, #80]	; (18980 <init_LIS2DH12+0x5c>)
   18930:	2101      	movs	r1, #1
   18932:	0018      	movs	r0, r3
   18934:	4b13      	ldr	r3, [pc, #76]	; (18984 <init_LIS2DH12+0x60>)
   18936:	4798      	blx	r3
   18938:	0003      	movs	r3, r0
   1893a:	607b      	str	r3, [r7, #4]
   /* Set Output Data Rate to 1Hz. */
  error = lis2dh12_data_rate_set(&dev_ctx_lis, LIS2DH12_ODR_50Hz);
   1893c:	4b10      	ldr	r3, [pc, #64]	; (18980 <init_LIS2DH12+0x5c>)
   1893e:	2104      	movs	r1, #4
   18940:	0018      	movs	r0, r3
   18942:	4b11      	ldr	r3, [pc, #68]	; (18988 <init_LIS2DH12+0x64>)
   18944:	4798      	blx	r3
   18946:	0003      	movs	r3, r0
   18948:	607b      	str	r3, [r7, #4]
  /* Set full scale to 2g. */
  error = lis2dh12_full_scale_set(&dev_ctx_lis, LIS2DH12_2g);
   1894a:	4b0d      	ldr	r3, [pc, #52]	; (18980 <init_LIS2DH12+0x5c>)
   1894c:	2100      	movs	r1, #0
   1894e:	0018      	movs	r0, r3
   18950:	4b0e      	ldr	r3, [pc, #56]	; (1898c <init_LIS2DH12+0x68>)
   18952:	4798      	blx	r3
   18954:	0003      	movs	r3, r0
   18956:	607b      	str	r3, [r7, #4]
  ///* Enable temperature sensor. */
  error = lis2dh12_temperature_meas_set(&dev_ctx_lis, LIS2DH12_TEMP_ENABLE);
   18958:	4b09      	ldr	r3, [pc, #36]	; (18980 <init_LIS2DH12+0x5c>)
   1895a:	2103      	movs	r1, #3
   1895c:	0018      	movs	r0, r3
   1895e:	4b0c      	ldr	r3, [pc, #48]	; (18990 <init_LIS2DH12+0x6c>)
   18960:	4798      	blx	r3
   18962:	0003      	movs	r3, r0
   18964:	607b      	str	r3, [r7, #4]
  /* Set device in continuous mode with 12 bit resol. */
  error = lis2dh12_operating_mode_set(&dev_ctx_lis, LIS2DH12_HR_12bit); //LIS2DH12_NM_10bit
   18966:	4b06      	ldr	r3, [pc, #24]	; (18980 <init_LIS2DH12+0x5c>)
   18968:	2100      	movs	r1, #0
   1896a:	0018      	movs	r0, r3
   1896c:	4b09      	ldr	r3, [pc, #36]	; (18994 <init_LIS2DH12+0x70>)
   1896e:	4798      	blx	r3
   18970:	0003      	movs	r3, r0
   18972:	607b      	str	r3, [r7, #4]
  
  //delay_cycles_ms(100);
  
  return error;
   18974:	687b      	ldr	r3, [r7, #4]
  }
   18976:	0018      	movs	r0, r3
   18978:	46bd      	mov	sp, r7
   1897a:	b002      	add	sp, #8
   1897c:	bd80      	pop	{r7, pc}
   1897e:	46c0      	nop			; (mov r8, r8)
   18980:	2000009c 	.word	0x2000009c
   18984:	00018635 	.word	0x00018635
   18988:	00018561 	.word	0x00018561
   1898c:	000185c9 	.word	0x000185c9
   18990:	0001841d 	.word	0x0001841d
   18994:	00018485 	.word	0x00018485

00018998 <vAccTask>:
  
  void vAccTask(void *pvParameters)
  {
   18998:	b590      	push	{r4, r7, lr}
   1899a:	b08b      	sub	sp, #44	; 0x2c
   1899c:	af02      	add	r7, sp, #8
   1899e:	6078      	str	r0, [r7, #4]
	  for (;;) {
	  	static int16_t data_raw_acceleration[3];
	  	static float acceleration_mg[3]={0};
		  vTaskDelay(100);
   189a0:	2064      	movs	r0, #100	; 0x64
   189a2:	4b8b      	ldr	r3, [pc, #556]	; (18bd0 <vAccTask+0x238>)
   189a4:	4798      	blx	r3
	  	uint8_t flag = 0;
   189a6:	2317      	movs	r3, #23
   189a8:	18fb      	adds	r3, r7, r3
   189aa:	2200      	movs	r2, #0
   189ac:	701a      	strb	r2, [r3, #0]
	  	int32_t error = 0;
   189ae:	2300      	movs	r3, #0
   189b0:	61bb      	str	r3, [r7, #24]
	  	
	  	//stmdev_ctx_t *dev_ctx_lis = GetAccStruct();

	  	lis2dh12_xl_data_ready_get(&dev_ctx_lis, &flag);
   189b2:	2317      	movs	r3, #23
   189b4:	18fa      	adds	r2, r7, r3
   189b6:	4b87      	ldr	r3, [pc, #540]	; (18bd4 <vAccTask+0x23c>)
   189b8:	0011      	movs	r1, r2
   189ba:	0018      	movs	r0, r3
   189bc:	4b86      	ldr	r3, [pc, #536]	; (18bd8 <vAccTask+0x240>)
   189be:	4798      	blx	r3

	  	if (flag) {
   189c0:	2317      	movs	r3, #23
   189c2:	18fb      	adds	r3, r7, r3
   189c4:	781b      	ldrb	r3, [r3, #0]
   189c6:	2b00      	cmp	r3, #0
   189c8:	d02b      	beq.n	18a22 <vAccTask+0x8a>
		  	/* Read accelerometer data */
		  	// initial raw data to 0
		  	memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   189ca:	4b84      	ldr	r3, [pc, #528]	; (18bdc <vAccTask+0x244>)
   189cc:	2206      	movs	r2, #6
   189ce:	2100      	movs	r1, #0
   189d0:	0018      	movs	r0, r3
   189d2:	4b83      	ldr	r3, [pc, #524]	; (18be0 <vAccTask+0x248>)
   189d4:	4798      	blx	r3
		  	error = lis2dh12_acceleration_raw_get(&dev_ctx_lis, data_raw_acceleration);
   189d6:	4a81      	ldr	r2, [pc, #516]	; (18bdc <vAccTask+0x244>)
   189d8:	4b7e      	ldr	r3, [pc, #504]	; (18bd4 <vAccTask+0x23c>)
   189da:	0011      	movs	r1, r2
   189dc:	0018      	movs	r0, r3
   189de:	4b81      	ldr	r3, [pc, #516]	; (18be4 <vAccTask+0x24c>)
   189e0:	4798      	blx	r3
   189e2:	0003      	movs	r3, r0
   189e4:	61bb      	str	r3, [r7, #24]
		  	if (!error){
   189e6:	69bb      	ldr	r3, [r7, #24]
   189e8:	2b00      	cmp	r3, #0
   189ea:	d11a      	bne.n	18a22 <vAccTask+0x8a>
			  	acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
   189ec:	4b7b      	ldr	r3, [pc, #492]	; (18bdc <vAccTask+0x244>)
   189ee:	2200      	movs	r2, #0
   189f0:	5e9b      	ldrsh	r3, [r3, r2]
   189f2:	0018      	movs	r0, r3
   189f4:	4b7c      	ldr	r3, [pc, #496]	; (18be8 <vAccTask+0x250>)
   189f6:	4798      	blx	r3
   189f8:	1c02      	adds	r2, r0, #0
   189fa:	4b7c      	ldr	r3, [pc, #496]	; (18bec <vAccTask+0x254>)
   189fc:	601a      	str	r2, [r3, #0]
			  	acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
   189fe:	4b77      	ldr	r3, [pc, #476]	; (18bdc <vAccTask+0x244>)
   18a00:	2202      	movs	r2, #2
   18a02:	5e9b      	ldrsh	r3, [r3, r2]
   18a04:	0018      	movs	r0, r3
   18a06:	4b78      	ldr	r3, [pc, #480]	; (18be8 <vAccTask+0x250>)
   18a08:	4798      	blx	r3
   18a0a:	1c02      	adds	r2, r0, #0
   18a0c:	4b77      	ldr	r3, [pc, #476]	; (18bec <vAccTask+0x254>)
   18a0e:	605a      	str	r2, [r3, #4]
			  	acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
   18a10:	4b72      	ldr	r3, [pc, #456]	; (18bdc <vAccTask+0x244>)
   18a12:	2204      	movs	r2, #4
   18a14:	5e9b      	ldrsh	r3, [r3, r2]
   18a16:	0018      	movs	r0, r3
   18a18:	4b73      	ldr	r3, [pc, #460]	; (18be8 <vAccTask+0x250>)
   18a1a:	4798      	blx	r3
   18a1c:	1c02      	adds	r2, r0, #0
   18a1e:	4b73      	ldr	r3, [pc, #460]	; (18bec <vAccTask+0x254>)
   18a20:	609a      	str	r2, [r3, #8]
		  	else {
			  	//snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration data update failed!");
		  	}

	  	}
		  vTaskDelay(100);
   18a22:	2064      	movs	r0, #100	; 0x64
   18a24:	4b6a      	ldr	r3, [pc, #424]	; (18bd0 <vAccTask+0x238>)
   18a26:	4798      	blx	r3
		  lis2dh12_xl_data_ready_get(&dev_ctx_lis, &flag);
   18a28:	2317      	movs	r3, #23
   18a2a:	18fa      	adds	r2, r7, r3
   18a2c:	4b69      	ldr	r3, [pc, #420]	; (18bd4 <vAccTask+0x23c>)
   18a2e:	0011      	movs	r1, r2
   18a30:	0018      	movs	r0, r3
   18a32:	4b69      	ldr	r3, [pc, #420]	; (18bd8 <vAccTask+0x240>)
   18a34:	4798      	blx	r3
		  	if (flag) {
   18a36:	2317      	movs	r3, #23
   18a38:	18fb      	adds	r3, r7, r3
   18a3a:	781b      	ldrb	r3, [r3, #0]
   18a3c:	2b00      	cmp	r3, #0
   18a3e:	d0af      	beq.n	189a0 <vAccTask+0x8>
			  	/* Read accelerometer data */
			  	// initial raw data to 0
			  	memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   18a40:	4b66      	ldr	r3, [pc, #408]	; (18bdc <vAccTask+0x244>)
   18a42:	2206      	movs	r2, #6
   18a44:	2100      	movs	r1, #0
   18a46:	0018      	movs	r0, r3
   18a48:	4b65      	ldr	r3, [pc, #404]	; (18be0 <vAccTask+0x248>)
   18a4a:	4798      	blx	r3
			  	error = lis2dh12_acceleration_raw_get(&dev_ctx_lis, data_raw_acceleration);
   18a4c:	4a63      	ldr	r2, [pc, #396]	; (18bdc <vAccTask+0x244>)
   18a4e:	4b61      	ldr	r3, [pc, #388]	; (18bd4 <vAccTask+0x23c>)
   18a50:	0011      	movs	r1, r2
   18a52:	0018      	movs	r0, r3
   18a54:	4b63      	ldr	r3, [pc, #396]	; (18be4 <vAccTask+0x24c>)
   18a56:	4798      	blx	r3
   18a58:	0003      	movs	r3, r0
   18a5a:	61bb      	str	r3, [r7, #24]
			  	if (!error){
   18a5c:	69bb      	ldr	r3, [r7, #24]
   18a5e:	2b00      	cmp	r3, #0
   18a60:	d12c      	bne.n	18abc <vAccTask+0x124>
				  	acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]) -acceleration_mg[0];
   18a62:	4b5e      	ldr	r3, [pc, #376]	; (18bdc <vAccTask+0x244>)
   18a64:	2200      	movs	r2, #0
   18a66:	5e9b      	ldrsh	r3, [r3, r2]
   18a68:	0018      	movs	r0, r3
   18a6a:	4b5f      	ldr	r3, [pc, #380]	; (18be8 <vAccTask+0x250>)
   18a6c:	4798      	blx	r3
   18a6e:	4b5f      	ldr	r3, [pc, #380]	; (18bec <vAccTask+0x254>)
   18a70:	681a      	ldr	r2, [r3, #0]
   18a72:	4b5f      	ldr	r3, [pc, #380]	; (18bf0 <vAccTask+0x258>)
   18a74:	1c11      	adds	r1, r2, #0
   18a76:	4798      	blx	r3
   18a78:	1c03      	adds	r3, r0, #0
   18a7a:	1c1a      	adds	r2, r3, #0
   18a7c:	4b5b      	ldr	r3, [pc, #364]	; (18bec <vAccTask+0x254>)
   18a7e:	601a      	str	r2, [r3, #0]
				  	acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1])-acceleration_mg[1];
   18a80:	4b56      	ldr	r3, [pc, #344]	; (18bdc <vAccTask+0x244>)
   18a82:	2202      	movs	r2, #2
   18a84:	5e9b      	ldrsh	r3, [r3, r2]
   18a86:	0018      	movs	r0, r3
   18a88:	4b57      	ldr	r3, [pc, #348]	; (18be8 <vAccTask+0x250>)
   18a8a:	4798      	blx	r3
   18a8c:	4b57      	ldr	r3, [pc, #348]	; (18bec <vAccTask+0x254>)
   18a8e:	685a      	ldr	r2, [r3, #4]
   18a90:	4b57      	ldr	r3, [pc, #348]	; (18bf0 <vAccTask+0x258>)
   18a92:	1c11      	adds	r1, r2, #0
   18a94:	4798      	blx	r3
   18a96:	1c03      	adds	r3, r0, #0
   18a98:	1c1a      	adds	r2, r3, #0
   18a9a:	4b54      	ldr	r3, [pc, #336]	; (18bec <vAccTask+0x254>)
   18a9c:	605a      	str	r2, [r3, #4]
				  	acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2])-acceleration_mg[2];
   18a9e:	4b4f      	ldr	r3, [pc, #316]	; (18bdc <vAccTask+0x244>)
   18aa0:	2204      	movs	r2, #4
   18aa2:	5e9b      	ldrsh	r3, [r3, r2]
   18aa4:	0018      	movs	r0, r3
   18aa6:	4b50      	ldr	r3, [pc, #320]	; (18be8 <vAccTask+0x250>)
   18aa8:	4798      	blx	r3
   18aaa:	4b50      	ldr	r3, [pc, #320]	; (18bec <vAccTask+0x254>)
   18aac:	689a      	ldr	r2, [r3, #8]
   18aae:	4b50      	ldr	r3, [pc, #320]	; (18bf0 <vAccTask+0x258>)
   18ab0:	1c11      	adds	r1, r2, #0
   18ab2:	4798      	blx	r3
   18ab4:	1c03      	adds	r3, r0, #0
   18ab6:	1c1a      	adds	r2, r3, #0
   18ab8:	4b4c      	ldr	r3, [pc, #304]	; (18bec <vAccTask+0x254>)
   18aba:	609a      	str	r2, [r3, #8]
				  	//snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
			  	}
			  	else {
				  	
			  	}
				 uint8_t count = 0;
   18abc:	231f      	movs	r3, #31
   18abe:	18fb      	adds	r3, r7, r3
   18ac0:	2200      	movs	r2, #0
   18ac2:	701a      	strb	r2, [r3, #0]
				 for (uint8_t j = 0; j<3; j++){
   18ac4:	231e      	movs	r3, #30
   18ac6:	18fb      	adds	r3, r7, r3
   18ac8:	2200      	movs	r2, #0
   18aca:	701a      	strb	r2, [r3, #0]
   18acc:	e01e      	b.n	18b0c <vAccTask+0x174>
					 if(abs(acceleration_mg[j])>600){
   18ace:	231e      	movs	r3, #30
   18ad0:	18fb      	adds	r3, r7, r3
   18ad2:	781a      	ldrb	r2, [r3, #0]
   18ad4:	4b45      	ldr	r3, [pc, #276]	; (18bec <vAccTask+0x254>)
   18ad6:	0092      	lsls	r2, r2, #2
   18ad8:	58d2      	ldr	r2, [r2, r3]
   18ada:	4b46      	ldr	r3, [pc, #280]	; (18bf4 <vAccTask+0x25c>)
   18adc:	1c10      	adds	r0, r2, #0
   18ade:	4798      	blx	r3
   18ae0:	0003      	movs	r3, r0
   18ae2:	17d9      	asrs	r1, r3, #31
   18ae4:	185a      	adds	r2, r3, r1
   18ae6:	404a      	eors	r2, r1
   18ae8:	2396      	movs	r3, #150	; 0x96
   18aea:	009b      	lsls	r3, r3, #2
   18aec:	429a      	cmp	r2, r3
   18aee:	dd06      	ble.n	18afe <vAccTask+0x166>
						count+=1;
   18af0:	231f      	movs	r3, #31
   18af2:	18fb      	adds	r3, r7, r3
   18af4:	221f      	movs	r2, #31
   18af6:	18ba      	adds	r2, r7, r2
   18af8:	7812      	ldrb	r2, [r2, #0]
   18afa:	3201      	adds	r2, #1
   18afc:	701a      	strb	r2, [r3, #0]
				 for (uint8_t j = 0; j<3; j++){
   18afe:	231e      	movs	r3, #30
   18b00:	18fb      	adds	r3, r7, r3
   18b02:	781a      	ldrb	r2, [r3, #0]
   18b04:	231e      	movs	r3, #30
   18b06:	18fb      	adds	r3, r7, r3
   18b08:	3201      	adds	r2, #1
   18b0a:	701a      	strb	r2, [r3, #0]
   18b0c:	231e      	movs	r3, #30
   18b0e:	18fb      	adds	r3, r7, r3
   18b10:	781b      	ldrb	r3, [r3, #0]
   18b12:	2b02      	cmp	r3, #2
   18b14:	d9db      	bls.n	18ace <vAccTask+0x136>
					 }
				 }
				 if (count>=2)
   18b16:	231f      	movs	r3, #31
   18b18:	18fb      	adds	r3, r7, r3
   18b1a:	781b      	ldrb	r3, [r3, #0]
   18b1c:	2b01      	cmp	r3, #1
   18b1e:	d800      	bhi.n	18b22 <vAccTask+0x18a>
   18b20:	e73e      	b.n	189a0 <vAccTask+0x8>
				 {
					 struct ImuDataPacket imuPacket;
					 imuPacket.xmg = (int)acceleration_mg[0];
   18b22:	4b32      	ldr	r3, [pc, #200]	; (18bec <vAccTask+0x254>)
   18b24:	681a      	ldr	r2, [r3, #0]
   18b26:	4b33      	ldr	r3, [pc, #204]	; (18bf4 <vAccTask+0x25c>)
   18b28:	1c10      	adds	r0, r2, #0
   18b2a:	4798      	blx	r3
   18b2c:	0003      	movs	r3, r0
   18b2e:	b21a      	sxth	r2, r3
   18b30:	230c      	movs	r3, #12
   18b32:	18fb      	adds	r3, r7, r3
   18b34:	801a      	strh	r2, [r3, #0]
					 imuPacket.ymg = (int)acceleration_mg[1];
   18b36:	4b2d      	ldr	r3, [pc, #180]	; (18bec <vAccTask+0x254>)
   18b38:	685a      	ldr	r2, [r3, #4]
   18b3a:	4b2e      	ldr	r3, [pc, #184]	; (18bf4 <vAccTask+0x25c>)
   18b3c:	1c10      	adds	r0, r2, #0
   18b3e:	4798      	blx	r3
   18b40:	0003      	movs	r3, r0
   18b42:	b21a      	sxth	r2, r3
   18b44:	230c      	movs	r3, #12
   18b46:	18fb      	adds	r3, r7, r3
   18b48:	805a      	strh	r2, [r3, #2]
					 imuPacket.zmg = (int)acceleration_mg[2];
   18b4a:	4b28      	ldr	r3, [pc, #160]	; (18bec <vAccTask+0x254>)
   18b4c:	689a      	ldr	r2, [r3, #8]
   18b4e:	4b29      	ldr	r3, [pc, #164]	; (18bf4 <vAccTask+0x25c>)
   18b50:	1c10      	adds	r0, r2, #0
   18b52:	4798      	blx	r3
   18b54:	0003      	movs	r3, r0
   18b56:	b21a      	sxth	r2, r3
   18b58:	230c      	movs	r3, #12
   18b5a:	18fb      	adds	r3, r7, r3
   18b5c:	809a      	strh	r2, [r3, #4]
					 imuPacket.alarm= true;
   18b5e:	230c      	movs	r3, #12
   18b60:	18fb      	adds	r3, r7, r3
   18b62:	2201      	movs	r2, #1
   18b64:	719a      	strb	r2, [r3, #6]
					 imuPacket.temp = -100;
   18b66:	230c      	movs	r3, #12
   18b68:	18fb      	adds	r3, r7, r3
   18b6a:	229c      	movs	r2, #156	; 0x9c
   18b6c:	71da      	strb	r2, [r3, #7]
					 WifiAddImuDataToQueue(&imuPacket);
   18b6e:	230c      	movs	r3, #12
   18b70:	18fb      	adds	r3, r7, r3
   18b72:	0018      	movs	r0, r3
   18b74:	4b20      	ldr	r3, [pc, #128]	; (18bf8 <vAccTask+0x260>)
   18b76:	4798      	blx	r3
					 SerialConsoleWriteString("Shaked!\r\n");
   18b78:	4b20      	ldr	r3, [pc, #128]	; (18bfc <vAccTask+0x264>)
   18b7a:	0018      	movs	r0, r3
   18b7c:	4b20      	ldr	r3, [pc, #128]	; (18c00 <vAccTask+0x268>)
   18b7e:	4798      	blx	r3
					 LCD_drawBlock(135,6,150,40, RED);
   18b80:	23f8      	movs	r3, #248	; 0xf8
   18b82:	021b      	lsls	r3, r3, #8
   18b84:	9300      	str	r3, [sp, #0]
   18b86:	2328      	movs	r3, #40	; 0x28
   18b88:	2296      	movs	r2, #150	; 0x96
   18b8a:	2106      	movs	r1, #6
   18b8c:	2087      	movs	r0, #135	; 0x87
   18b8e:	4c1d      	ldr	r4, [pc, #116]	; (18c04 <vAccTask+0x26c>)
   18b90:	47a0      	blx	r4
					 LCD_drawBlock(140,8,145,25,YELLOW);
   18b92:	4b1d      	ldr	r3, [pc, #116]	; (18c08 <vAccTask+0x270>)
   18b94:	9300      	str	r3, [sp, #0]
   18b96:	2319      	movs	r3, #25
   18b98:	2291      	movs	r2, #145	; 0x91
   18b9a:	2108      	movs	r1, #8
   18b9c:	208c      	movs	r0, #140	; 0x8c
   18b9e:	4c19      	ldr	r4, [pc, #100]	; (18c04 <vAccTask+0x26c>)
   18ba0:	47a0      	blx	r4
					 LCD_drawBlock(140,31,145,36,YELLOW);
   18ba2:	4b19      	ldr	r3, [pc, #100]	; (18c08 <vAccTask+0x270>)
   18ba4:	9300      	str	r3, [sp, #0]
   18ba6:	2324      	movs	r3, #36	; 0x24
   18ba8:	2291      	movs	r2, #145	; 0x91
   18baa:	211f      	movs	r1, #31
   18bac:	208c      	movs	r0, #140	; 0x8c
   18bae:	4c15      	ldr	r4, [pc, #84]	; (18c04 <vAccTask+0x26c>)
   18bb0:	47a0      	blx	r4
					 delay_cycles_ms(2000);
   18bb2:	23fa      	movs	r3, #250	; 0xfa
   18bb4:	00db      	lsls	r3, r3, #3
   18bb6:	0018      	movs	r0, r3
   18bb8:	4b14      	ldr	r3, [pc, #80]	; (18c0c <vAccTask+0x274>)
   18bba:	4798      	blx	r3
					 LCD_drawBlock(135,6,150,40, BLACK);
   18bbc:	2300      	movs	r3, #0
   18bbe:	9300      	str	r3, [sp, #0]
   18bc0:	2328      	movs	r3, #40	; 0x28
   18bc2:	2296      	movs	r2, #150	; 0x96
   18bc4:	2106      	movs	r1, #6
   18bc6:	2087      	movs	r0, #135	; 0x87
   18bc8:	4c0e      	ldr	r4, [pc, #56]	; (18c04 <vAccTask+0x26c>)
   18bca:	47a0      	blx	r4
	  for (;;) {
   18bcc:	e6e8      	b.n	189a0 <vAccTask+0x8>
   18bce:	46c0      	nop			; (mov r8, r8)
   18bd0:	0001ef71 	.word	0x0001ef71
   18bd4:	2000009c 	.word	0x2000009c
   18bd8:	0001869d 	.word	0x0001869d
   18bdc:	20000530 	.word	0x20000530
   18be0:	00038507 	.word	0x00038507
   18be4:	000186d9 	.word	0x000186d9
   18be8:	000182e9 	.word	0x000182e9
   18bec:	20000538 	.word	0x20000538
   18bf0:	000366e9 	.word	0x000366e9
   18bf4:	00036a21 	.word	0x00036a21
   18bf8:	0001a2e5 	.word	0x0001a2e5
   18bfc:	0003a9a8 	.word	0x0003a9a8
   18c00:	00020bc5 	.word	0x00020bc5
   18c04:	00012999 	.word	0x00012999
   18c08:	0000ffe0 	.word	0x0000ffe0
   18c0c:	000230b1 	.word	0x000230b1

00018c10 <system_pinmux_get_group_from_gpio_pin>:
{
   18c10:	b580      	push	{r7, lr}
   18c12:	b084      	sub	sp, #16
   18c14:	af00      	add	r7, sp, #0
   18c16:	0002      	movs	r2, r0
   18c18:	1dfb      	adds	r3, r7, #7
   18c1a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   18c1c:	230f      	movs	r3, #15
   18c1e:	18fb      	adds	r3, r7, r3
   18c20:	1dfa      	adds	r2, r7, #7
   18c22:	7812      	ldrb	r2, [r2, #0]
   18c24:	09d2      	lsrs	r2, r2, #7
   18c26:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   18c28:	230e      	movs	r3, #14
   18c2a:	18fb      	adds	r3, r7, r3
   18c2c:	1dfa      	adds	r2, r7, #7
   18c2e:	7812      	ldrb	r2, [r2, #0]
   18c30:	0952      	lsrs	r2, r2, #5
   18c32:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   18c34:	4b0d      	ldr	r3, [pc, #52]	; (18c6c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   18c36:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   18c38:	230f      	movs	r3, #15
   18c3a:	18fb      	adds	r3, r7, r3
   18c3c:	781b      	ldrb	r3, [r3, #0]
   18c3e:	2b00      	cmp	r3, #0
   18c40:	d10f      	bne.n	18c62 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   18c42:	230f      	movs	r3, #15
   18c44:	18fb      	adds	r3, r7, r3
   18c46:	781b      	ldrb	r3, [r3, #0]
   18c48:	009b      	lsls	r3, r3, #2
   18c4a:	2210      	movs	r2, #16
   18c4c:	4694      	mov	ip, r2
   18c4e:	44bc      	add	ip, r7
   18c50:	4463      	add	r3, ip
   18c52:	3b08      	subs	r3, #8
   18c54:	681a      	ldr	r2, [r3, #0]
   18c56:	230e      	movs	r3, #14
   18c58:	18fb      	adds	r3, r7, r3
   18c5a:	781b      	ldrb	r3, [r3, #0]
   18c5c:	01db      	lsls	r3, r3, #7
   18c5e:	18d3      	adds	r3, r2, r3
   18c60:	e000      	b.n	18c64 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   18c62:	2300      	movs	r3, #0
}
   18c64:	0018      	movs	r0, r3
   18c66:	46bd      	mov	sp, r7
   18c68:	b004      	add	sp, #16
   18c6a:	bd80      	pop	{r7, pc}
   18c6c:	41004400 	.word	0x41004400

00018c70 <port_get_group_from_gpio_pin>:
{
   18c70:	b580      	push	{r7, lr}
   18c72:	b082      	sub	sp, #8
   18c74:	af00      	add	r7, sp, #0
   18c76:	0002      	movs	r2, r0
   18c78:	1dfb      	adds	r3, r7, #7
   18c7a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   18c7c:	1dfb      	adds	r3, r7, #7
   18c7e:	781b      	ldrb	r3, [r3, #0]
   18c80:	0018      	movs	r0, r3
   18c82:	4b03      	ldr	r3, [pc, #12]	; (18c90 <port_get_group_from_gpio_pin+0x20>)
   18c84:	4798      	blx	r3
   18c86:	0003      	movs	r3, r0
}
   18c88:	0018      	movs	r0, r3
   18c8a:	46bd      	mov	sp, r7
   18c8c:	b002      	add	sp, #8
   18c8e:	bd80      	pop	{r7, pc}
   18c90:	00018c11 	.word	0x00018c11

00018c94 <port_pin_set_output_level>:
{
   18c94:	b580      	push	{r7, lr}
   18c96:	b084      	sub	sp, #16
   18c98:	af00      	add	r7, sp, #0
   18c9a:	0002      	movs	r2, r0
   18c9c:	1dfb      	adds	r3, r7, #7
   18c9e:	701a      	strb	r2, [r3, #0]
   18ca0:	1dbb      	adds	r3, r7, #6
   18ca2:	1c0a      	adds	r2, r1, #0
   18ca4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   18ca6:	1dfb      	adds	r3, r7, #7
   18ca8:	781b      	ldrb	r3, [r3, #0]
   18caa:	0018      	movs	r0, r3
   18cac:	4b0d      	ldr	r3, [pc, #52]	; (18ce4 <port_pin_set_output_level+0x50>)
   18cae:	4798      	blx	r3
   18cb0:	0003      	movs	r3, r0
   18cb2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   18cb4:	1dfb      	adds	r3, r7, #7
   18cb6:	781b      	ldrb	r3, [r3, #0]
   18cb8:	221f      	movs	r2, #31
   18cba:	4013      	ands	r3, r2
   18cbc:	2201      	movs	r2, #1
   18cbe:	409a      	lsls	r2, r3
   18cc0:	0013      	movs	r3, r2
   18cc2:	60bb      	str	r3, [r7, #8]
	if (level) {
   18cc4:	1dbb      	adds	r3, r7, #6
   18cc6:	781b      	ldrb	r3, [r3, #0]
   18cc8:	2b00      	cmp	r3, #0
   18cca:	d003      	beq.n	18cd4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   18ccc:	68fb      	ldr	r3, [r7, #12]
   18cce:	68ba      	ldr	r2, [r7, #8]
   18cd0:	619a      	str	r2, [r3, #24]
}
   18cd2:	e002      	b.n	18cda <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   18cd4:	68fb      	ldr	r3, [r7, #12]
   18cd6:	68ba      	ldr	r2, [r7, #8]
   18cd8:	615a      	str	r2, [r3, #20]
}
   18cda:	46c0      	nop			; (mov r8, r8)
   18cdc:	46bd      	mov	sp, r7
   18cde:	b004      	add	sp, #16
   18ce0:	bd80      	pop	{r7, pc}
   18ce2:	46c0      	nop			; (mov r8, r8)
   18ce4:	00018c71 	.word	0x00018c71

00018ce8 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   18ce8:	b580      	push	{r7, lr}
   18cea:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   18cec:	4b02      	ldr	r3, [pc, #8]	; (18cf8 <init_state+0x10>)
   18cee:	2200      	movs	r2, #0
   18cf0:	701a      	strb	r2, [r3, #0]
}
   18cf2:	46c0      	nop			; (mov r8, r8)
   18cf4:	46bd      	mov	sp, r7
   18cf6:	bd80      	pop	{r7, pc}
   18cf8:	20000559 	.word	0x20000559

00018cfc <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   18cfc:	b580      	push	{r7, lr}
   18cfe:	b082      	sub	sp, #8
   18d00:	af00      	add	r7, sp, #0
   18d02:	0002      	movs	r2, r0
   18d04:	1dfb      	adds	r3, r7, #7
   18d06:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   18d08:	1dfb      	adds	r3, r7, #7
   18d0a:	781b      	ldrb	r3, [r3, #0]
   18d0c:	b25b      	sxtb	r3, r3
   18d0e:	43db      	mvns	r3, r3
   18d10:	b25b      	sxtb	r3, r3
   18d12:	4a06      	ldr	r2, [pc, #24]	; (18d2c <clear_state+0x30>)
   18d14:	7812      	ldrb	r2, [r2, #0]
   18d16:	b252      	sxtb	r2, r2
   18d18:	4013      	ands	r3, r2
   18d1a:	b25b      	sxtb	r3, r3
   18d1c:	b2da      	uxtb	r2, r3
   18d1e:	4b03      	ldr	r3, [pc, #12]	; (18d2c <clear_state+0x30>)
   18d20:	701a      	strb	r2, [r3, #0]
}
   18d22:	46c0      	nop			; (mov r8, r8)
   18d24:	46bd      	mov	sp, r7
   18d26:	b002      	add	sp, #8
   18d28:	bd80      	pop	{r7, pc}
   18d2a:	46c0      	nop			; (mov r8, r8)
   18d2c:	20000559 	.word	0x20000559

00018d30 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   18d30:	b580      	push	{r7, lr}
   18d32:	b082      	sub	sp, #8
   18d34:	af00      	add	r7, sp, #0
   18d36:	0002      	movs	r2, r0
   18d38:	1dfb      	adds	r3, r7, #7
   18d3a:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   18d3c:	4b05      	ldr	r3, [pc, #20]	; (18d54 <add_state+0x24>)
   18d3e:	781a      	ldrb	r2, [r3, #0]
   18d40:	1dfb      	adds	r3, r7, #7
   18d42:	781b      	ldrb	r3, [r3, #0]
   18d44:	4313      	orrs	r3, r2
   18d46:	b2da      	uxtb	r2, r3
   18d48:	4b02      	ldr	r3, [pc, #8]	; (18d54 <add_state+0x24>)
   18d4a:	701a      	strb	r2, [r3, #0]
}
   18d4c:	46c0      	nop			; (mov r8, r8)
   18d4e:	46bd      	mov	sp, r7
   18d50:	b002      	add	sp, #8
   18d52:	bd80      	pop	{r7, pc}
   18d54:	20000559 	.word	0x20000559

00018d58 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   18d58:	b580      	push	{r7, lr}
   18d5a:	b082      	sub	sp, #8
   18d5c:	af00      	add	r7, sp, #0
   18d5e:	0002      	movs	r2, r0
   18d60:	1dfb      	adds	r3, r7, #7
   18d62:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   18d64:	4b06      	ldr	r3, [pc, #24]	; (18d80 <is_state_set+0x28>)
   18d66:	781b      	ldrb	r3, [r3, #0]
   18d68:	1dfa      	adds	r2, r7, #7
   18d6a:	7812      	ldrb	r2, [r2, #0]
   18d6c:	4013      	ands	r3, r2
   18d6e:	b2db      	uxtb	r3, r3
   18d70:	1e5a      	subs	r2, r3, #1
   18d72:	4193      	sbcs	r3, r2
   18d74:	b2db      	uxtb	r3, r3
}
   18d76:	0018      	movs	r0, r3
   18d78:	46bd      	mov	sp, r7
   18d7a:	b002      	add	sp, #8
   18d7c:	bd80      	pop	{r7, pc}
   18d7e:	46c0      	nop			; (mov r8, r8)
   18d80:	20000559 	.word	0x20000559

00018d84 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   18d84:	b590      	push	{r4, r7, lr}
   18d86:	b085      	sub	sp, #20
   18d88:	af00      	add	r7, sp, #0
   18d8a:	6078      	str	r0, [r7, #4]
   18d8c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   18d8e:	687b      	ldr	r3, [r7, #4]
   18d90:	2b00      	cmp	r3, #0
   18d92:	d002      	beq.n	18d9a <is_exist_file+0x16>
   18d94:	683b      	ldr	r3, [r7, #0]
   18d96:	2b00      	cmp	r3, #0
   18d98:	d101      	bne.n	18d9e <is_exist_file+0x1a>
        return false;
   18d9a:	2300      	movs	r3, #0
   18d9c:	e013      	b.n	18dc6 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   18d9e:	230f      	movs	r3, #15
   18da0:	18fc      	adds	r4, r7, r3
   18da2:	6839      	ldr	r1, [r7, #0]
   18da4:	4b0a      	ldr	r3, [pc, #40]	; (18dd0 <is_exist_file+0x4c>)
   18da6:	2200      	movs	r2, #0
   18da8:	0018      	movs	r0, r3
   18daa:	4b0a      	ldr	r3, [pc, #40]	; (18dd4 <is_exist_file+0x50>)
   18dac:	4798      	blx	r3
   18dae:	0003      	movs	r3, r0
   18db0:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   18db2:	4b07      	ldr	r3, [pc, #28]	; (18dd0 <is_exist_file+0x4c>)
   18db4:	0018      	movs	r0, r3
   18db6:	4b08      	ldr	r3, [pc, #32]	; (18dd8 <is_exist_file+0x54>)
   18db8:	4798      	blx	r3
    return (ret == FR_OK);
   18dba:	230f      	movs	r3, #15
   18dbc:	18fb      	adds	r3, r7, r3
   18dbe:	781b      	ldrb	r3, [r3, #0]
   18dc0:	425a      	negs	r2, r3
   18dc2:	4153      	adcs	r3, r2
   18dc4:	b2db      	uxtb	r3, r3
}
   18dc6:	0018      	movs	r0, r3
   18dc8:	46bd      	mov	sp, r7
   18dca:	b005      	add	sp, #20
   18dcc:	bd90      	pop	{r4, r7, pc}
   18dce:	46c0      	nop			; (mov r8, r8)
   18dd0:	2000078c 	.word	0x2000078c
   18dd4:	000308f5 	.word	0x000308f5
   18dd8:	000312f5 	.word	0x000312f5

00018ddc <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   18ddc:	b580      	push	{r7, lr}
   18dde:	b09e      	sub	sp, #120	; 0x78
   18de0:	af00      	add	r7, sp, #0
   18de2:	60f8      	str	r0, [r7, #12]
   18de4:	60b9      	str	r1, [r7, #8]
   18de6:	1dfb      	adds	r3, r7, #7
   18de8:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   18dea:	2376      	movs	r3, #118	; 0x76
   18dec:	18fb      	adds	r3, r7, r3
   18dee:	2201      	movs	r2, #1
   18df0:	801a      	strh	r2, [r3, #0]
   18df2:	2374      	movs	r3, #116	; 0x74
   18df4:	18fb      	adds	r3, r7, r3
   18df6:	2200      	movs	r2, #0
   18df8:	801a      	strh	r2, [r3, #0]
   18dfa:	236e      	movs	r3, #110	; 0x6e
   18dfc:	18fb      	adds	r3, r7, r3
   18dfe:	2200      	movs	r2, #0
   18e00:	801a      	strh	r2, [r3, #0]
   18e02:	2372      	movs	r3, #114	; 0x72
   18e04:	18fb      	adds	r3, r7, r3
   18e06:	2200      	movs	r2, #0
   18e08:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   18e0a:	2324      	movs	r3, #36	; 0x24
   18e0c:	18fb      	adds	r3, r7, r3
   18e0e:	0018      	movs	r0, r3
   18e10:	2341      	movs	r3, #65	; 0x41
   18e12:	001a      	movs	r2, r3
   18e14:	2100      	movs	r1, #0
   18e16:	4b92      	ldr	r3, [pc, #584]	; (19060 <rename_to_unique+0x284>)
   18e18:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   18e1a:	2318      	movs	r3, #24
   18e1c:	18fb      	adds	r3, r7, r3
   18e1e:	0018      	movs	r0, r3
   18e20:	2309      	movs	r3, #9
   18e22:	001a      	movs	r2, r3
   18e24:	2100      	movs	r1, #0
   18e26:	4b8e      	ldr	r3, [pc, #568]	; (19060 <rename_to_unique+0x284>)
   18e28:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   18e2a:	2314      	movs	r3, #20
   18e2c:	18fb      	adds	r3, r7, r3
   18e2e:	2200      	movs	r2, #0
   18e30:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   18e32:	2300      	movs	r3, #0
   18e34:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   18e36:	2371      	movs	r3, #113	; 0x71
   18e38:	18fb      	adds	r3, r7, r3
   18e3a:	2200      	movs	r2, #0
   18e3c:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   18e3e:	68bb      	ldr	r3, [r7, #8]
   18e40:	2b00      	cmp	r3, #0
   18e42:	d101      	bne.n	18e48 <rename_to_unique+0x6c>
        return false;
   18e44:	2300      	movs	r3, #0
   18e46:	e106      	b.n	19056 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   18e48:	68ba      	ldr	r2, [r7, #8]
   18e4a:	68fb      	ldr	r3, [r7, #12]
   18e4c:	0011      	movs	r1, r2
   18e4e:	0018      	movs	r0, r3
   18e50:	4b84      	ldr	r3, [pc, #528]	; (19064 <rename_to_unique+0x288>)
   18e52:	4798      	blx	r3
   18e54:	0003      	movs	r3, r0
   18e56:	001a      	movs	r2, r3
   18e58:	2301      	movs	r3, #1
   18e5a:	4053      	eors	r3, r2
   18e5c:	b2db      	uxtb	r3, r3
   18e5e:	2b00      	cmp	r3, #0
   18e60:	d001      	beq.n	18e66 <rename_to_unique+0x8a>
        return true;
   18e62:	2301      	movs	r3, #1
   18e64:	e0f7      	b.n	19056 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   18e66:	68bb      	ldr	r3, [r7, #8]
   18e68:	0018      	movs	r0, r3
   18e6a:	4b7f      	ldr	r3, [pc, #508]	; (19068 <rename_to_unique+0x28c>)
   18e6c:	4798      	blx	r3
   18e6e:	0003      	movs	r3, r0
   18e70:	2b40      	cmp	r3, #64	; 0x40
   18e72:	d901      	bls.n	18e78 <rename_to_unique+0x9c>
        return false;
   18e74:	2300      	movs	r3, #0
   18e76:	e0ee      	b.n	19056 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   18e78:	68bb      	ldr	r3, [r7, #8]
   18e7a:	212e      	movs	r1, #46	; 0x2e
   18e7c:	0018      	movs	r0, r3
   18e7e:	4b7b      	ldr	r3, [pc, #492]	; (1906c <rename_to_unique+0x290>)
   18e80:	4798      	blx	r3
   18e82:	0003      	movs	r3, r0
   18e84:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   18e86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   18e88:	2b00      	cmp	r3, #0
   18e8a:	d052      	beq.n	18f32 <rename_to_unique+0x156>
        ext_len = strlen(p);
   18e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   18e8e:	0018      	movs	r0, r3
   18e90:	4b75      	ldr	r3, [pc, #468]	; (19068 <rename_to_unique+0x28c>)
   18e92:	4798      	blx	r3
   18e94:	0002      	movs	r2, r0
   18e96:	236e      	movs	r3, #110	; 0x6e
   18e98:	18fb      	adds	r3, r7, r3
   18e9a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   18e9c:	236e      	movs	r3, #110	; 0x6e
   18e9e:	18fb      	adds	r3, r7, r3
   18ea0:	881b      	ldrh	r3, [r3, #0]
   18ea2:	2b07      	cmp	r3, #7
   18ea4:	d837      	bhi.n	18f16 <rename_to_unique+0x13a>
            valid_ext = true;
   18ea6:	2371      	movs	r3, #113	; 0x71
   18ea8:	18fb      	adds	r3, r7, r3
   18eaa:	2201      	movs	r2, #1
   18eac:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   18eae:	6eba      	ldr	r2, [r7, #104]	; 0x68
   18eb0:	2318      	movs	r3, #24
   18eb2:	18fb      	adds	r3, r7, r3
   18eb4:	0011      	movs	r1, r2
   18eb6:	0018      	movs	r0, r3
   18eb8:	4b6d      	ldr	r3, [pc, #436]	; (19070 <rename_to_unique+0x294>)
   18eba:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   18ebc:	68bb      	ldr	r3, [r7, #8]
   18ebe:	0018      	movs	r0, r3
   18ec0:	4b69      	ldr	r3, [pc, #420]	; (19068 <rename_to_unique+0x28c>)
   18ec2:	4798      	blx	r3
   18ec4:	0002      	movs	r2, r0
   18ec6:	236e      	movs	r3, #110	; 0x6e
   18ec8:	18fb      	adds	r3, r7, r3
   18eca:	881b      	ldrh	r3, [r3, #0]
   18ecc:	1ad3      	subs	r3, r2, r3
   18ece:	2b3c      	cmp	r3, #60	; 0x3c
   18ed0:	d911      	bls.n	18ef6 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   18ed2:	2374      	movs	r3, #116	; 0x74
   18ed4:	18fb      	adds	r3, r7, r3
   18ed6:	226e      	movs	r2, #110	; 0x6e
   18ed8:	18ba      	adds	r2, r7, r2
   18eda:	8812      	ldrh	r2, [r2, #0]
   18edc:	213c      	movs	r1, #60	; 0x3c
   18ede:	1a8a      	subs	r2, r1, r2
   18ee0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   18ee2:	2374      	movs	r3, #116	; 0x74
   18ee4:	18fb      	adds	r3, r7, r3
   18ee6:	881a      	ldrh	r2, [r3, #0]
   18ee8:	68b9      	ldr	r1, [r7, #8]
   18eea:	2324      	movs	r3, #36	; 0x24
   18eec:	18fb      	adds	r3, r7, r3
   18eee:	0018      	movs	r0, r3
   18ef0:	4b60      	ldr	r3, [pc, #384]	; (19074 <rename_to_unique+0x298>)
   18ef2:	4798      	blx	r3
   18ef4:	e02a      	b.n	18f4c <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   18ef6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   18ef8:	68bb      	ldr	r3, [r7, #8]
   18efa:	1ad2      	subs	r2, r2, r3
   18efc:	2374      	movs	r3, #116	; 0x74
   18efe:	18fb      	adds	r3, r7, r3
   18f00:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   18f02:	2374      	movs	r3, #116	; 0x74
   18f04:	18fb      	adds	r3, r7, r3
   18f06:	881a      	ldrh	r2, [r3, #0]
   18f08:	68b9      	ldr	r1, [r7, #8]
   18f0a:	2324      	movs	r3, #36	; 0x24
   18f0c:	18fb      	adds	r3, r7, r3
   18f0e:	0018      	movs	r0, r3
   18f10:	4b58      	ldr	r3, [pc, #352]	; (19074 <rename_to_unique+0x298>)
   18f12:	4798      	blx	r3
   18f14:	e01a      	b.n	18f4c <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   18f16:	2374      	movs	r3, #116	; 0x74
   18f18:	18fb      	adds	r3, r7, r3
   18f1a:	223c      	movs	r2, #60	; 0x3c
   18f1c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   18f1e:	2374      	movs	r3, #116	; 0x74
   18f20:	18fb      	adds	r3, r7, r3
   18f22:	881a      	ldrh	r2, [r3, #0]
   18f24:	68b9      	ldr	r1, [r7, #8]
   18f26:	2324      	movs	r3, #36	; 0x24
   18f28:	18fb      	adds	r3, r7, r3
   18f2a:	0018      	movs	r0, r3
   18f2c:	4b51      	ldr	r3, [pc, #324]	; (19074 <rename_to_unique+0x298>)
   18f2e:	4798      	blx	r3
   18f30:	e00c      	b.n	18f4c <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   18f32:	2374      	movs	r3, #116	; 0x74
   18f34:	18fb      	adds	r3, r7, r3
   18f36:	223c      	movs	r2, #60	; 0x3c
   18f38:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   18f3a:	2374      	movs	r3, #116	; 0x74
   18f3c:	18fb      	adds	r3, r7, r3
   18f3e:	881a      	ldrh	r2, [r3, #0]
   18f40:	68b9      	ldr	r1, [r7, #8]
   18f42:	2324      	movs	r3, #36	; 0x24
   18f44:	18fb      	adds	r3, r7, r3
   18f46:	0018      	movs	r0, r3
   18f48:	4b4a      	ldr	r3, [pc, #296]	; (19074 <rename_to_unique+0x298>)
   18f4a:	4798      	blx	r3
    }

    name[name_len++] = '-';
   18f4c:	2374      	movs	r3, #116	; 0x74
   18f4e:	18fb      	adds	r3, r7, r3
   18f50:	881b      	ldrh	r3, [r3, #0]
   18f52:	2274      	movs	r2, #116	; 0x74
   18f54:	18ba      	adds	r2, r7, r2
   18f56:	1c59      	adds	r1, r3, #1
   18f58:	8011      	strh	r1, [r2, #0]
   18f5a:	001a      	movs	r2, r3
   18f5c:	2324      	movs	r3, #36	; 0x24
   18f5e:	18fb      	adds	r3, r7, r3
   18f60:	212d      	movs	r1, #45	; 0x2d
   18f62:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   18f64:	2376      	movs	r3, #118	; 0x76
   18f66:	18fb      	adds	r3, r7, r3
   18f68:	2200      	movs	r2, #0
   18f6a:	801a      	strh	r2, [r3, #0]
   18f6c:	2372      	movs	r3, #114	; 0x72
   18f6e:	18fb      	adds	r3, r7, r3
   18f70:	2201      	movs	r2, #1
   18f72:	801a      	strh	r2, [r3, #0]
   18f74:	e010      	b.n	18f98 <rename_to_unique+0x1bc>
        count *= 10;
   18f76:	2372      	movs	r3, #114	; 0x72
   18f78:	18fa      	adds	r2, r7, r3
   18f7a:	2372      	movs	r3, #114	; 0x72
   18f7c:	18fb      	adds	r3, r7, r3
   18f7e:	881b      	ldrh	r3, [r3, #0]
   18f80:	1c19      	adds	r1, r3, #0
   18f82:	0089      	lsls	r1, r1, #2
   18f84:	18cb      	adds	r3, r1, r3
   18f86:	18db      	adds	r3, r3, r3
   18f88:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   18f8a:	2376      	movs	r3, #118	; 0x76
   18f8c:	18fb      	adds	r3, r7, r3
   18f8e:	881a      	ldrh	r2, [r3, #0]
   18f90:	2376      	movs	r3, #118	; 0x76
   18f92:	18fb      	adds	r3, r7, r3
   18f94:	3201      	adds	r2, #1
   18f96:	801a      	strh	r2, [r3, #0]
   18f98:	2376      	movs	r3, #118	; 0x76
   18f9a:	18fb      	adds	r3, r7, r3
   18f9c:	881b      	ldrh	r3, [r3, #0]
   18f9e:	2b02      	cmp	r3, #2
   18fa0:	d9e9      	bls.n	18f76 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   18fa2:	2376      	movs	r3, #118	; 0x76
   18fa4:	18fb      	adds	r3, r7, r3
   18fa6:	2201      	movs	r2, #1
   18fa8:	801a      	strh	r2, [r3, #0]
   18faa:	e04b      	b.n	19044 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   18fac:	2376      	movs	r3, #118	; 0x76
   18fae:	18fb      	adds	r3, r7, r3
   18fb0:	881a      	ldrh	r2, [r3, #0]
   18fb2:	4931      	ldr	r1, [pc, #196]	; (19078 <rename_to_unique+0x29c>)
   18fb4:	2314      	movs	r3, #20
   18fb6:	18fb      	adds	r3, r7, r3
   18fb8:	0018      	movs	r0, r3
   18fba:	4b30      	ldr	r3, [pc, #192]	; (1907c <rename_to_unique+0x2a0>)
   18fbc:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   18fbe:	2374      	movs	r3, #116	; 0x74
   18fc0:	18fb      	adds	r3, r7, r3
   18fc2:	881b      	ldrh	r3, [r3, #0]
   18fc4:	2224      	movs	r2, #36	; 0x24
   18fc6:	18ba      	adds	r2, r7, r2
   18fc8:	18d3      	adds	r3, r2, r3
   18fca:	2214      	movs	r2, #20
   18fcc:	18b9      	adds	r1, r7, r2
   18fce:	2203      	movs	r2, #3
   18fd0:	0018      	movs	r0, r3
   18fd2:	4b28      	ldr	r3, [pc, #160]	; (19074 <rename_to_unique+0x298>)
   18fd4:	4798      	blx	r3
        if (valid_ext) {
   18fd6:	2371      	movs	r3, #113	; 0x71
   18fd8:	18fb      	adds	r3, r7, r3
   18fda:	781b      	ldrb	r3, [r3, #0]
   18fdc:	2b00      	cmp	r3, #0
   18fde:	d00c      	beq.n	18ffa <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   18fe0:	2374      	movs	r3, #116	; 0x74
   18fe2:	18fb      	adds	r3, r7, r3
   18fe4:	881b      	ldrh	r3, [r3, #0]
   18fe6:	3303      	adds	r3, #3
   18fe8:	2224      	movs	r2, #36	; 0x24
   18fea:	18ba      	adds	r2, r7, r2
   18fec:	18d3      	adds	r3, r2, r3
   18fee:	2218      	movs	r2, #24
   18ff0:	18ba      	adds	r2, r7, r2
   18ff2:	0011      	movs	r1, r2
   18ff4:	0018      	movs	r0, r3
   18ff6:	4b1e      	ldr	r3, [pc, #120]	; (19070 <rename_to_unique+0x294>)
   18ff8:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   18ffa:	2324      	movs	r3, #36	; 0x24
   18ffc:	18fa      	adds	r2, r7, r3
   18ffe:	68fb      	ldr	r3, [r7, #12]
   19000:	0011      	movs	r1, r2
   19002:	0018      	movs	r0, r3
   19004:	4b17      	ldr	r3, [pc, #92]	; (19064 <rename_to_unique+0x288>)
   19006:	4798      	blx	r3
   19008:	0003      	movs	r3, r0
   1900a:	001a      	movs	r2, r3
   1900c:	2301      	movs	r3, #1
   1900e:	4053      	eors	r3, r2
   19010:	b2db      	uxtb	r3, r3
   19012:	2b00      	cmp	r3, #0
   19014:	d00f      	beq.n	19036 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   19016:	1dfb      	adds	r3, r7, #7
   19018:	781a      	ldrb	r2, [r3, #0]
   1901a:	68bb      	ldr	r3, [r7, #8]
   1901c:	2100      	movs	r1, #0
   1901e:	0018      	movs	r0, r3
   19020:	4b0f      	ldr	r3, [pc, #60]	; (19060 <rename_to_unique+0x284>)
   19022:	4798      	blx	r3
            strcpy(file_path_name, name);
   19024:	2324      	movs	r3, #36	; 0x24
   19026:	18fa      	adds	r2, r7, r3
   19028:	68bb      	ldr	r3, [r7, #8]
   1902a:	0011      	movs	r1, r2
   1902c:	0018      	movs	r0, r3
   1902e:	4b10      	ldr	r3, [pc, #64]	; (19070 <rename_to_unique+0x294>)
   19030:	4798      	blx	r3
            return true;
   19032:	2301      	movs	r3, #1
   19034:	e00f      	b.n	19056 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   19036:	2376      	movs	r3, #118	; 0x76
   19038:	18fb      	adds	r3, r7, r3
   1903a:	881a      	ldrh	r2, [r3, #0]
   1903c:	2376      	movs	r3, #118	; 0x76
   1903e:	18fb      	adds	r3, r7, r3
   19040:	3201      	adds	r2, #1
   19042:	801a      	strh	r2, [r3, #0]
   19044:	2376      	movs	r3, #118	; 0x76
   19046:	18fa      	adds	r2, r7, r3
   19048:	2372      	movs	r3, #114	; 0x72
   1904a:	18fb      	adds	r3, r7, r3
   1904c:	8812      	ldrh	r2, [r2, #0]
   1904e:	881b      	ldrh	r3, [r3, #0]
   19050:	429a      	cmp	r2, r3
   19052:	d3ab      	bcc.n	18fac <rename_to_unique+0x1d0>
        }
    }
    return false;
   19054:	2300      	movs	r3, #0
}
   19056:	0018      	movs	r0, r3
   19058:	46bd      	mov	sp, r7
   1905a:	b01e      	add	sp, #120	; 0x78
   1905c:	bd80      	pop	{r7, pc}
   1905e:	46c0      	nop			; (mov r8, r8)
   19060:	00038507 	.word	0x00038507
   19064:	00018d85 	.word	0x00018d85
   19068:	000388bf 	.word	0x000388bf
   1906c:	00038919 	.word	0x00038919
   19070:	00038875 	.word	0x00038875
   19074:	000388ef 	.word	0x000388ef
   19078:	0003a9c8 	.word	0x0003a9c8
   1907c:	000387c5 	.word	0x000387c5

00019080 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   19080:	b590      	push	{r4, r7, lr}
   19082:	b083      	sub	sp, #12
   19084:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   19086:	2001      	movs	r0, #1
   19088:	4b22      	ldr	r3, [pc, #136]	; (19114 <start_download+0x94>)
   1908a:	4798      	blx	r3
   1908c:	0003      	movs	r3, r0
   1908e:	001a      	movs	r2, r3
   19090:	2301      	movs	r3, #1
   19092:	4053      	eors	r3, r2
   19094:	b2db      	uxtb	r3, r3
   19096:	2b00      	cmp	r3, #0
   19098:	d005      	beq.n	190a6 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   1909a:	4b1f      	ldr	r3, [pc, #124]	; (19118 <start_download+0x98>)
   1909c:	0019      	movs	r1, r3
   1909e:	2001      	movs	r0, #1
   190a0:	4b1e      	ldr	r3, [pc, #120]	; (1911c <start_download+0x9c>)
   190a2:	4798      	blx	r3
        return;
   190a4:	e032      	b.n	1910c <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   190a6:	2002      	movs	r0, #2
   190a8:	4b1a      	ldr	r3, [pc, #104]	; (19114 <start_download+0x94>)
   190aa:	4798      	blx	r3
   190ac:	0003      	movs	r3, r0
   190ae:	001a      	movs	r2, r3
   190b0:	2301      	movs	r3, #1
   190b2:	4053      	eors	r3, r2
   190b4:	b2db      	uxtb	r3, r3
   190b6:	2b00      	cmp	r3, #0
   190b8:	d005      	beq.n	190c6 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   190ba:	4b19      	ldr	r3, [pc, #100]	; (19120 <start_download+0xa0>)
   190bc:	0019      	movs	r1, r3
   190be:	2001      	movs	r0, #1
   190c0:	4b16      	ldr	r3, [pc, #88]	; (1911c <start_download+0x9c>)
   190c2:	4798      	blx	r3
        return;
   190c4:	e022      	b.n	1910c <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   190c6:	2004      	movs	r0, #4
   190c8:	4b12      	ldr	r3, [pc, #72]	; (19114 <start_download+0x94>)
   190ca:	4798      	blx	r3
   190cc:	1e03      	subs	r3, r0, #0
   190ce:	d005      	beq.n	190dc <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   190d0:	4b14      	ldr	r3, [pc, #80]	; (19124 <start_download+0xa4>)
   190d2:	0019      	movs	r1, r3
   190d4:	2001      	movs	r0, #1
   190d6:	4b11      	ldr	r3, [pc, #68]	; (1911c <start_download+0x9c>)
   190d8:	4798      	blx	r3
        return;
   190da:	e017      	b.n	1910c <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   190dc:	2008      	movs	r0, #8
   190de:	4b0d      	ldr	r3, [pc, #52]	; (19114 <start_download+0x94>)
   190e0:	4798      	blx	r3
   190e2:	1e03      	subs	r3, r0, #0
   190e4:	d005      	beq.n	190f2 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   190e6:	4b10      	ldr	r3, [pc, #64]	; (19128 <start_download+0xa8>)
   190e8:	0019      	movs	r1, r3
   190ea:	2001      	movs	r0, #1
   190ec:	4b0b      	ldr	r3, [pc, #44]	; (1911c <start_download+0x9c>)
   190ee:	4798      	blx	r3
        return;
   190f0:	e00c      	b.n	1910c <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   190f2:	4b0e      	ldr	r3, [pc, #56]	; (1912c <start_download+0xac>)
   190f4:	0019      	movs	r1, r3
   190f6:	2001      	movs	r0, #1
   190f8:	4b08      	ldr	r3, [pc, #32]	; (1911c <start_download+0x9c>)
   190fa:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   190fc:	490c      	ldr	r1, [pc, #48]	; (19130 <start_download+0xb0>)
   190fe:	480d      	ldr	r0, [pc, #52]	; (19134 <start_download+0xb4>)
   19100:	2300      	movs	r3, #0
   19102:	9300      	str	r3, [sp, #0]
   19104:	2300      	movs	r3, #0
   19106:	2201      	movs	r2, #1
   19108:	4c0b      	ldr	r4, [pc, #44]	; (19138 <start_download+0xb8>)
   1910a:	47a0      	blx	r4
}
   1910c:	46bd      	mov	sp, r7
   1910e:	b001      	add	sp, #4
   19110:	bd90      	pop	{r4, r7, pc}
   19112:	46c0      	nop			; (mov r8, r8)
   19114:	00018d59 	.word	0x00018d59
   19118:	0003a9d0 	.word	0x0003a9d0
   1911c:	00020cb1 	.word	0x00020cb1
   19120:	0003a9fc 	.word	0x0003a9fc
   19124:	0003aa28 	.word	0x0003aa28
   19128:	0003aa54 	.word	0x0003aa54
   1912c:	0003aa80 	.word	0x0003aa80
   19130:	0003aaac 	.word	0x0003aaac
   19134:	2000491c 	.word	0x2000491c
   19138:	00033f49 	.word	0x00033f49

0001913c <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   1913c:	b5b0      	push	{r4, r5, r7, lr}
   1913e:	b086      	sub	sp, #24
   19140:	af00      	add	r7, sp, #0
   19142:	6078      	str	r0, [r7, #4]
   19144:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   19146:	687b      	ldr	r3, [r7, #4]
   19148:	2b00      	cmp	r3, #0
   1914a:	d002      	beq.n	19152 <store_file_packet+0x16>
   1914c:	683b      	ldr	r3, [r7, #0]
   1914e:	2b00      	cmp	r3, #0
   19150:	d105      	bne.n	1915e <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   19152:	4b58      	ldr	r3, [pc, #352]	; (192b4 <store_file_packet+0x178>)
   19154:	0019      	movs	r1, r3
   19156:	2001      	movs	r0, #1
   19158:	4b57      	ldr	r3, [pc, #348]	; (192b8 <store_file_packet+0x17c>)
   1915a:	4798      	blx	r3
        return;
   1915c:	e0a6      	b.n	192ac <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   1915e:	2008      	movs	r0, #8
   19160:	4b56      	ldr	r3, [pc, #344]	; (192bc <store_file_packet+0x180>)
   19162:	4798      	blx	r3
   19164:	0003      	movs	r3, r0
   19166:	001a      	movs	r2, r3
   19168:	2301      	movs	r3, #1
   1916a:	4053      	eors	r3, r2
   1916c:	b2db      	uxtb	r3, r3
   1916e:	2b00      	cmp	r3, #0
   19170:	d055      	beq.n	1921e <store_file_packet+0xe2>
        char *cp = NULL;
   19172:	2300      	movs	r3, #0
   19174:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   19176:	4b52      	ldr	r3, [pc, #328]	; (192c0 <store_file_packet+0x184>)
   19178:	2230      	movs	r2, #48	; 0x30
   1917a:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   1917c:	4b50      	ldr	r3, [pc, #320]	; (192c0 <store_file_packet+0x184>)
   1917e:	223a      	movs	r2, #58	; 0x3a
   19180:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   19182:	4b50      	ldr	r3, [pc, #320]	; (192c4 <store_file_packet+0x188>)
   19184:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   19186:	e002      	b.n	1918e <store_file_packet+0x52>
            cp--;
   19188:	697b      	ldr	r3, [r7, #20]
   1918a:	3b01      	subs	r3, #1
   1918c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   1918e:	697b      	ldr	r3, [r7, #20]
   19190:	781b      	ldrb	r3, [r3, #0]
   19192:	2b2f      	cmp	r3, #47	; 0x2f
   19194:	d1f8      	bne.n	19188 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   19196:	697b      	ldr	r3, [r7, #20]
   19198:	0018      	movs	r0, r3
   1919a:	4b4b      	ldr	r3, [pc, #300]	; (192c8 <store_file_packet+0x18c>)
   1919c:	4798      	blx	r3
   1919e:	0003      	movs	r3, r0
   191a0:	2b01      	cmp	r3, #1
   191a2:	d924      	bls.n	191ee <store_file_packet+0xb2>
            cp++;
   191a4:	697b      	ldr	r3, [r7, #20]
   191a6:	3301      	adds	r3, #1
   191a8:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   191aa:	697a      	ldr	r2, [r7, #20]
   191ac:	4b47      	ldr	r3, [pc, #284]	; (192cc <store_file_packet+0x190>)
   191ae:	0011      	movs	r1, r2
   191b0:	0018      	movs	r0, r3
   191b2:	4b47      	ldr	r3, [pc, #284]	; (192d0 <store_file_packet+0x194>)
   191b4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   191b6:	4942      	ldr	r1, [pc, #264]	; (192c0 <store_file_packet+0x184>)
   191b8:	4b46      	ldr	r3, [pc, #280]	; (192d4 <store_file_packet+0x198>)
   191ba:	2240      	movs	r2, #64	; 0x40
   191bc:	0018      	movs	r0, r3
   191be:	4b46      	ldr	r3, [pc, #280]	; (192d8 <store_file_packet+0x19c>)
   191c0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   191c2:	4a3f      	ldr	r2, [pc, #252]	; (192c0 <store_file_packet+0x184>)
   191c4:	4b45      	ldr	r3, [pc, #276]	; (192dc <store_file_packet+0x1a0>)
   191c6:	0019      	movs	r1, r3
   191c8:	2001      	movs	r0, #1
   191ca:	4b3b      	ldr	r3, [pc, #236]	; (192b8 <store_file_packet+0x17c>)
   191cc:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   191ce:	2313      	movs	r3, #19
   191d0:	18fc      	adds	r4, r7, r3
   191d2:	493b      	ldr	r1, [pc, #236]	; (192c0 <store_file_packet+0x184>)
   191d4:	4b3f      	ldr	r3, [pc, #252]	; (192d4 <store_file_packet+0x198>)
   191d6:	220a      	movs	r2, #10
   191d8:	0018      	movs	r0, r3
   191da:	4b41      	ldr	r3, [pc, #260]	; (192e0 <store_file_packet+0x1a4>)
   191dc:	4798      	blx	r3
   191de:	0003      	movs	r3, r0
   191e0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   191e2:	2313      	movs	r3, #19
   191e4:	18fb      	adds	r3, r7, r3
   191e6:	781b      	ldrb	r3, [r3, #0]
   191e8:	2b00      	cmp	r3, #0
   191ea:	d012      	beq.n	19212 <store_file_packet+0xd6>
   191ec:	e008      	b.n	19200 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   191ee:	4b3d      	ldr	r3, [pc, #244]	; (192e4 <store_file_packet+0x1a8>)
   191f0:	0019      	movs	r1, r3
   191f2:	2001      	movs	r0, #1
   191f4:	4b30      	ldr	r3, [pc, #192]	; (192b8 <store_file_packet+0x17c>)
   191f6:	4798      	blx	r3
            add_state(CANCELED);
   191f8:	2020      	movs	r0, #32
   191fa:	4b3b      	ldr	r3, [pc, #236]	; (192e8 <store_file_packet+0x1ac>)
   191fc:	4798      	blx	r3
            return;
   191fe:	e055      	b.n	192ac <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   19200:	2313      	movs	r3, #19
   19202:	18fb      	adds	r3, r7, r3
   19204:	781a      	ldrb	r2, [r3, #0]
   19206:	4b39      	ldr	r3, [pc, #228]	; (192ec <store_file_packet+0x1b0>)
   19208:	0019      	movs	r1, r3
   1920a:	2001      	movs	r0, #1
   1920c:	4b2a      	ldr	r3, [pc, #168]	; (192b8 <store_file_packet+0x17c>)
   1920e:	4798      	blx	r3
            return;
   19210:	e04c      	b.n	192ac <store_file_packet+0x170>
        }

        received_file_size = 0;
   19212:	4b37      	ldr	r3, [pc, #220]	; (192f0 <store_file_packet+0x1b4>)
   19214:	2200      	movs	r2, #0
   19216:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   19218:	2008      	movs	r0, #8
   1921a:	4b33      	ldr	r3, [pc, #204]	; (192e8 <store_file_packet+0x1ac>)
   1921c:	4798      	blx	r3
    }

    if (data != NULL) {
   1921e:	687b      	ldr	r3, [r7, #4]
   19220:	2b00      	cmp	r3, #0
   19222:	d043      	beq.n	192ac <store_file_packet+0x170>
        UINT wsize = 0;
   19224:	2300      	movs	r3, #0
   19226:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   19228:	2313      	movs	r3, #19
   1922a:	18fc      	adds	r4, r7, r3
   1922c:	230c      	movs	r3, #12
   1922e:	18fb      	adds	r3, r7, r3
   19230:	683a      	ldr	r2, [r7, #0]
   19232:	6879      	ldr	r1, [r7, #4]
   19234:	4827      	ldr	r0, [pc, #156]	; (192d4 <store_file_packet+0x198>)
   19236:	4d2f      	ldr	r5, [pc, #188]	; (192f4 <store_file_packet+0x1b8>)
   19238:	47a8      	blx	r5
   1923a:	0003      	movs	r3, r0
   1923c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   1923e:	2313      	movs	r3, #19
   19240:	18fb      	adds	r3, r7, r3
   19242:	781b      	ldrb	r3, [r3, #0]
   19244:	2b00      	cmp	r3, #0
   19246:	d00c      	beq.n	19262 <store_file_packet+0x126>
            f_close(&file_object);
   19248:	4b22      	ldr	r3, [pc, #136]	; (192d4 <store_file_packet+0x198>)
   1924a:	0018      	movs	r0, r3
   1924c:	4b2a      	ldr	r3, [pc, #168]	; (192f8 <store_file_packet+0x1bc>)
   1924e:	4798      	blx	r3
            add_state(CANCELED);
   19250:	2020      	movs	r0, #32
   19252:	4b25      	ldr	r3, [pc, #148]	; (192e8 <store_file_packet+0x1ac>)
   19254:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   19256:	4b29      	ldr	r3, [pc, #164]	; (192fc <store_file_packet+0x1c0>)
   19258:	0019      	movs	r1, r3
   1925a:	2001      	movs	r0, #1
   1925c:	4b16      	ldr	r3, [pc, #88]	; (192b8 <store_file_packet+0x17c>)
   1925e:	4798      	blx	r3
            return;
   19260:	e024      	b.n	192ac <store_file_packet+0x170>
        }

        received_file_size += wsize;
   19262:	4b23      	ldr	r3, [pc, #140]	; (192f0 <store_file_packet+0x1b4>)
   19264:	681a      	ldr	r2, [r3, #0]
   19266:	68fb      	ldr	r3, [r7, #12]
   19268:	18d2      	adds	r2, r2, r3
   1926a:	4b21      	ldr	r3, [pc, #132]	; (192f0 <store_file_packet+0x1b4>)
   1926c:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1926e:	4b20      	ldr	r3, [pc, #128]	; (192f0 <store_file_packet+0x1b4>)
   19270:	681a      	ldr	r2, [r3, #0]
   19272:	4b23      	ldr	r3, [pc, #140]	; (19300 <store_file_packet+0x1c4>)
   19274:	681b      	ldr	r3, [r3, #0]
   19276:	4923      	ldr	r1, [pc, #140]	; (19304 <store_file_packet+0x1c8>)
   19278:	2001      	movs	r0, #1
   1927a:	4c0f      	ldr	r4, [pc, #60]	; (192b8 <store_file_packet+0x17c>)
   1927c:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   1927e:	4b1c      	ldr	r3, [pc, #112]	; (192f0 <store_file_packet+0x1b4>)
   19280:	681a      	ldr	r2, [r3, #0]
   19282:	4b1f      	ldr	r3, [pc, #124]	; (19300 <store_file_packet+0x1c4>)
   19284:	681b      	ldr	r3, [r3, #0]
   19286:	429a      	cmp	r2, r3
   19288:	d310      	bcc.n	192ac <store_file_packet+0x170>
            f_close(&file_object);
   1928a:	4b12      	ldr	r3, [pc, #72]	; (192d4 <store_file_packet+0x198>)
   1928c:	0018      	movs	r0, r3
   1928e:	4b1a      	ldr	r3, [pc, #104]	; (192f8 <store_file_packet+0x1bc>)
   19290:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   19292:	4b1d      	ldr	r3, [pc, #116]	; (19308 <store_file_packet+0x1cc>)
   19294:	0019      	movs	r1, r3
   19296:	2001      	movs	r0, #1
   19298:	4b07      	ldr	r3, [pc, #28]	; (192b8 <store_file_packet+0x17c>)
   1929a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   1929c:	2100      	movs	r1, #0
   1929e:	2017      	movs	r0, #23
   192a0:	4b1a      	ldr	r3, [pc, #104]	; (1930c <store_file_packet+0x1d0>)
   192a2:	4798      	blx	r3
            add_state(COMPLETED);
   192a4:	2010      	movs	r0, #16
   192a6:	4b10      	ldr	r3, [pc, #64]	; (192e8 <store_file_packet+0x1ac>)
   192a8:	4798      	blx	r3
            return;
   192aa:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   192ac:	46bd      	mov	sp, r7
   192ae:	b006      	add	sp, #24
   192b0:	bdb0      	pop	{r4, r5, r7, pc}
   192b2:	46c0      	nop			; (mov r8, r8)
   192b4:	0003aacc 	.word	0x0003aacc
   192b8:	00020cb1 	.word	0x00020cb1
   192bc:	00018d59 	.word	0x00018d59
   192c0:	20000130 	.word	0x20000130
   192c4:	0003aac9 	.word	0x0003aac9
   192c8:	000388bf 	.word	0x000388bf
   192cc:	20000132 	.word	0x20000132
   192d0:	00038875 	.word	0x00038875
   192d4:	2000078c 	.word	0x2000078c
   192d8:	00018ddd 	.word	0x00018ddd
   192dc:	0003ab30 	.word	0x0003ab30
   192e0:	000308f5 	.word	0x000308f5
   192e4:	0003aaf0 	.word	0x0003aaf0
   192e8:	00018d31 	.word	0x00018d31
   192ec:	0003ab58 	.word	0x0003ab58
   192f0:	200007b4 	.word	0x200007b4
   192f4:	00030e25 	.word	0x00030e25
   192f8:	000312f5 	.word	0x000312f5
   192fc:	0003ab8c 	.word	0x0003ab8c
   19300:	200007b0 	.word	0x200007b0
   19304:	0003abc8 	.word	0x0003abc8
   19308:	0003abfc 	.word	0x0003abfc
   1930c:	00018c95 	.word	0x00018c95

00019310 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   19310:	b590      	push	{r4, r7, lr}
   19312:	b085      	sub	sp, #20
   19314:	af00      	add	r7, sp, #0
   19316:	60f8      	str	r0, [r7, #12]
   19318:	60b9      	str	r1, [r7, #8]
   1931a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1931c:	68bb      	ldr	r3, [r7, #8]
   1931e:	2b04      	cmp	r3, #4
   19320:	d900      	bls.n	19324 <http_client_callback+0x14>
   19322:	e077      	b.n	19414 <http_client_callback+0x104>
   19324:	68bb      	ldr	r3, [r7, #8]
   19326:	009a      	lsls	r2, r3, #2
   19328:	4b3c      	ldr	r3, [pc, #240]	; (1941c <http_client_callback+0x10c>)
   1932a:	18d3      	adds	r3, r2, r3
   1932c:	681b      	ldr	r3, [r3, #0]
   1932e:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   19330:	4b3b      	ldr	r3, [pc, #236]	; (19420 <http_client_callback+0x110>)
   19332:	0019      	movs	r1, r3
   19334:	2001      	movs	r0, #1
   19336:	4b3b      	ldr	r3, [pc, #236]	; (19424 <http_client_callback+0x114>)
   19338:	4798      	blx	r3
            break;
   1933a:	e06b      	b.n	19414 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   1933c:	4b3a      	ldr	r3, [pc, #232]	; (19428 <http_client_callback+0x118>)
   1933e:	0019      	movs	r1, r3
   19340:	2001      	movs	r0, #1
   19342:	4b38      	ldr	r3, [pc, #224]	; (19424 <http_client_callback+0x114>)
   19344:	4798      	blx	r3
            add_state(GET_REQUESTED);
   19346:	2004      	movs	r0, #4
   19348:	4b38      	ldr	r3, [pc, #224]	; (1942c <http_client_callback+0x11c>)
   1934a:	4798      	blx	r3
            break;
   1934c:	e062      	b.n	19414 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1934e:	687b      	ldr	r3, [r7, #4]
   19350:	881b      	ldrh	r3, [r3, #0]
   19352:	001a      	movs	r2, r3
   19354:	687b      	ldr	r3, [r7, #4]
   19356:	685b      	ldr	r3, [r3, #4]
   19358:	4935      	ldr	r1, [pc, #212]	; (19430 <http_client_callback+0x120>)
   1935a:	2001      	movs	r0, #1
   1935c:	4c31      	ldr	r4, [pc, #196]	; (19424 <http_client_callback+0x114>)
   1935e:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   19360:	687b      	ldr	r3, [r7, #4]
   19362:	881b      	ldrh	r3, [r3, #0]
   19364:	2bc8      	cmp	r3, #200	; 0xc8
   19366:	d10d      	bne.n	19384 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   19368:	687b      	ldr	r3, [r7, #4]
   1936a:	685a      	ldr	r2, [r3, #4]
   1936c:	4b31      	ldr	r3, [pc, #196]	; (19434 <http_client_callback+0x124>)
   1936e:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   19370:	4b31      	ldr	r3, [pc, #196]	; (19438 <http_client_callback+0x128>)
   19372:	2200      	movs	r2, #0
   19374:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   19376:	687b      	ldr	r3, [r7, #4]
   19378:	685a      	ldr	r2, [r3, #4]
   1937a:	2380      	movs	r3, #128	; 0x80
   1937c:	009b      	lsls	r3, r3, #2
   1937e:	429a      	cmp	r2, r3
   19380:	d843      	bhi.n	1940a <http_client_callback+0xfa>
   19382:	e003      	b.n	1938c <http_client_callback+0x7c>
                add_state(CANCELED);
   19384:	2020      	movs	r0, #32
   19386:	4b29      	ldr	r3, [pc, #164]	; (1942c <http_client_callback+0x11c>)
   19388:	4798      	blx	r3
                return;
   1938a:	e043      	b.n	19414 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   1938c:	687b      	ldr	r3, [r7, #4]
   1938e:	689a      	ldr	r2, [r3, #8]
   19390:	687b      	ldr	r3, [r7, #4]
   19392:	685b      	ldr	r3, [r3, #4]
   19394:	0019      	movs	r1, r3
   19396:	0010      	movs	r0, r2
   19398:	4b28      	ldr	r3, [pc, #160]	; (1943c <http_client_callback+0x12c>)
   1939a:	4798      	blx	r3
                add_state(COMPLETED);
   1939c:	2010      	movs	r0, #16
   1939e:	4b23      	ldr	r3, [pc, #140]	; (1942c <http_client_callback+0x11c>)
   193a0:	4798      	blx	r3
            }
            break;
   193a2:	e032      	b.n	1940a <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   193a4:	687b      	ldr	r3, [r7, #4]
   193a6:	685a      	ldr	r2, [r3, #4]
   193a8:	687b      	ldr	r3, [r7, #4]
   193aa:	681b      	ldr	r3, [r3, #0]
   193ac:	0019      	movs	r1, r3
   193ae:	0010      	movs	r0, r2
   193b0:	4b22      	ldr	r3, [pc, #136]	; (1943c <http_client_callback+0x12c>)
   193b2:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   193b4:	687b      	ldr	r3, [r7, #4]
   193b6:	7a1b      	ldrb	r3, [r3, #8]
   193b8:	2b00      	cmp	r3, #0
   193ba:	d028      	beq.n	1940e <http_client_callback+0xfe>
                add_state(COMPLETED);
   193bc:	2010      	movs	r0, #16
   193be:	4b1b      	ldr	r3, [pc, #108]	; (1942c <http_client_callback+0x11c>)
   193c0:	4798      	blx	r3
            }

            break;
   193c2:	e024      	b.n	1940e <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   193c4:	687b      	ldr	r3, [r7, #4]
   193c6:	681a      	ldr	r2, [r3, #0]
   193c8:	4b1d      	ldr	r3, [pc, #116]	; (19440 <http_client_callback+0x130>)
   193ca:	0019      	movs	r1, r3
   193cc:	2001      	movs	r0, #1
   193ce:	4b15      	ldr	r3, [pc, #84]	; (19424 <http_client_callback+0x114>)
   193d0:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   193d2:	687b      	ldr	r3, [r7, #4]
   193d4:	681b      	ldr	r3, [r3, #0]
   193d6:	330b      	adds	r3, #11
   193d8:	d11b      	bne.n	19412 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   193da:	2008      	movs	r0, #8
   193dc:	4b19      	ldr	r3, [pc, #100]	; (19444 <http_client_callback+0x134>)
   193de:	4798      	blx	r3
   193e0:	1e03      	subs	r3, r0, #0
   193e2:	d006      	beq.n	193f2 <http_client_callback+0xe2>
                    f_close(&file_object);
   193e4:	4b18      	ldr	r3, [pc, #96]	; (19448 <http_client_callback+0x138>)
   193e6:	0018      	movs	r0, r3
   193e8:	4b18      	ldr	r3, [pc, #96]	; (1944c <http_client_callback+0x13c>)
   193ea:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   193ec:	2008      	movs	r0, #8
   193ee:	4b18      	ldr	r3, [pc, #96]	; (19450 <http_client_callback+0x140>)
   193f0:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   193f2:	2004      	movs	r0, #4
   193f4:	4b13      	ldr	r3, [pc, #76]	; (19444 <http_client_callback+0x134>)
   193f6:	4798      	blx	r3
   193f8:	1e03      	subs	r3, r0, #0
   193fa:	d002      	beq.n	19402 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   193fc:	2004      	movs	r0, #4
   193fe:	4b14      	ldr	r3, [pc, #80]	; (19450 <http_client_callback+0x140>)
   19400:	4798      	blx	r3
                }

                start_download();
   19402:	4b14      	ldr	r3, [pc, #80]	; (19454 <http_client_callback+0x144>)
   19404:	4798      	blx	r3
            }

            break;
   19406:	46c0      	nop			; (mov r8, r8)
   19408:	e003      	b.n	19412 <http_client_callback+0x102>
            break;
   1940a:	46c0      	nop			; (mov r8, r8)
   1940c:	e002      	b.n	19414 <http_client_callback+0x104>
            break;
   1940e:	46c0      	nop			; (mov r8, r8)
   19410:	e000      	b.n	19414 <http_client_callback+0x104>
            break;
   19412:	46c0      	nop			; (mov r8, r8)
    }
}
   19414:	46bd      	mov	sp, r7
   19416:	b005      	add	sp, #20
   19418:	bd90      	pop	{r4, r7, pc}
   1941a:	46c0      	nop			; (mov r8, r8)
   1941c:	0003b308 	.word	0x0003b308
   19420:	0003ac30 	.word	0x0003ac30
   19424:	00020cb1 	.word	0x00020cb1
   19428:	0003ac68 	.word	0x0003ac68
   1942c:	00018d31 	.word	0x00018d31
   19430:	0003ac94 	.word	0x0003ac94
   19434:	200007b0 	.word	0x200007b0
   19438:	200007b4 	.word	0x200007b4
   1943c:	0001913d 	.word	0x0001913d
   19440:	0003acd0 	.word	0x0003acd0
   19444:	00018d59 	.word	0x00018d59
   19448:	2000078c 	.word	0x2000078c
   1944c:	000312f5 	.word	0x000312f5
   19450:	00018cfd 	.word	0x00018cfd
   19454:	00019081 	.word	0x00019081

00019458 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   19458:	b580      	push	{r7, lr}
   1945a:	b082      	sub	sp, #8
   1945c:	af00      	add	r7, sp, #0
   1945e:	603a      	str	r2, [r7, #0]
   19460:	1dfb      	adds	r3, r7, #7
   19462:	1c02      	adds	r2, r0, #0
   19464:	701a      	strb	r2, [r3, #0]
   19466:	1dbb      	adds	r3, r7, #6
   19468:	1c0a      	adds	r2, r1, #0
   1946a:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1946c:	683a      	ldr	r2, [r7, #0]
   1946e:	1dbb      	adds	r3, r7, #6
   19470:	7819      	ldrb	r1, [r3, #0]
   19472:	1dfb      	adds	r3, r7, #7
   19474:	781b      	ldrb	r3, [r3, #0]
   19476:	b25b      	sxtb	r3, r3
   19478:	0018      	movs	r0, r3
   1947a:	4b03      	ldr	r3, [pc, #12]	; (19488 <socket_cb+0x30>)
   1947c:	4798      	blx	r3
}
   1947e:	46c0      	nop			; (mov r8, r8)
   19480:	46bd      	mov	sp, r7
   19482:	b002      	add	sp, #8
   19484:	bd80      	pop	{r7, pc}
   19486:	46c0      	nop			; (mov r8, r8)
   19488:	00033c59 	.word	0x00033c59

0001948c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   1948c:	b5b0      	push	{r4, r5, r7, lr}
   1948e:	b086      	sub	sp, #24
   19490:	af04      	add	r7, sp, #16
   19492:	6078      	str	r0, [r7, #4]
   19494:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   19496:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   19498:	22ff      	movs	r2, #255	; 0xff
   1949a:	4013      	ands	r3, r2
   1949c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1949e:	683b      	ldr	r3, [r7, #0]
   194a0:	0a1b      	lsrs	r3, r3, #8
   194a2:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   194a4:	23ff      	movs	r3, #255	; 0xff
   194a6:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   194a8:	683a      	ldr	r2, [r7, #0]
   194aa:	0c12      	lsrs	r2, r2, #16
   194ac:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   194ae:	22ff      	movs	r2, #255	; 0xff
   194b0:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   194b2:	6839      	ldr	r1, [r7, #0]
   194b4:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   194b6:	000d      	movs	r5, r1
   194b8:	6878      	ldr	r0, [r7, #4]
   194ba:	4909      	ldr	r1, [pc, #36]	; (194e0 <resolve_cb+0x54>)
   194bc:	9502      	str	r5, [sp, #8]
   194be:	9201      	str	r2, [sp, #4]
   194c0:	9300      	str	r3, [sp, #0]
   194c2:	0023      	movs	r3, r4
   194c4:	0002      	movs	r2, r0
   194c6:	2001      	movs	r0, #1
   194c8:	4c06      	ldr	r4, [pc, #24]	; (194e4 <resolve_cb+0x58>)
   194ca:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   194cc:	683a      	ldr	r2, [r7, #0]
   194ce:	687b      	ldr	r3, [r7, #4]
   194d0:	0011      	movs	r1, r2
   194d2:	0018      	movs	r0, r3
   194d4:	4b04      	ldr	r3, [pc, #16]	; (194e8 <resolve_cb+0x5c>)
   194d6:	4798      	blx	r3
}
   194d8:	46c0      	nop			; (mov r8, r8)
   194da:	46bd      	mov	sp, r7
   194dc:	b002      	add	sp, #8
   194de:	bdb0      	pop	{r4, r5, r7, pc}
   194e0:	0003ad00 	.word	0x0003ad00
   194e4:	00020cb1 	.word	0x00020cb1
   194e8:	00033dbd 	.word	0x00033dbd

000194ec <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   194ec:	b590      	push	{r4, r7, lr}
   194ee:	b087      	sub	sp, #28
   194f0:	af02      	add	r7, sp, #8
   194f2:	0002      	movs	r2, r0
   194f4:	6039      	str	r1, [r7, #0]
   194f6:	1dfb      	adds	r3, r7, #7
   194f8:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   194fa:	1dfb      	adds	r3, r7, #7
   194fc:	781b      	ldrb	r3, [r3, #0]
   194fe:	2b2c      	cmp	r3, #44	; 0x2c
   19500:	d002      	beq.n	19508 <wifi_cb+0x1c>
   19502:	2b32      	cmp	r3, #50	; 0x32
   19504:	d03d      	beq.n	19582 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   19506:	e06f      	b.n	195e8 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   19508:	683b      	ldr	r3, [r7, #0]
   1950a:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   1950c:	68fb      	ldr	r3, [r7, #12]
   1950e:	781b      	ldrb	r3, [r3, #0]
   19510:	2b01      	cmp	r3, #1
   19512:	d107      	bne.n	19524 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   19514:	4b36      	ldr	r3, [pc, #216]	; (195f0 <wifi_cb+0x104>)
   19516:	0019      	movs	r1, r3
   19518:	2001      	movs	r0, #1
   1951a:	4b36      	ldr	r3, [pc, #216]	; (195f4 <wifi_cb+0x108>)
   1951c:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1951e:	4b36      	ldr	r3, [pc, #216]	; (195f8 <wifi_cb+0x10c>)
   19520:	4798      	blx	r3
            break;
   19522:	e05e      	b.n	195e2 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   19524:	68fb      	ldr	r3, [r7, #12]
   19526:	781b      	ldrb	r3, [r3, #0]
   19528:	2b00      	cmp	r3, #0
   1952a:	d15a      	bne.n	195e2 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1952c:	4b33      	ldr	r3, [pc, #204]	; (195fc <wifi_cb+0x110>)
   1952e:	0019      	movs	r1, r3
   19530:	2001      	movs	r0, #1
   19532:	4b30      	ldr	r3, [pc, #192]	; (195f4 <wifi_cb+0x108>)
   19534:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   19536:	2002      	movs	r0, #2
   19538:	4b31      	ldr	r3, [pc, #196]	; (19600 <wifi_cb+0x114>)
   1953a:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   1953c:	2008      	movs	r0, #8
   1953e:	4b31      	ldr	r3, [pc, #196]	; (19604 <wifi_cb+0x118>)
   19540:	4798      	blx	r3
   19542:	1e03      	subs	r3, r0, #0
   19544:	d006      	beq.n	19554 <wifi_cb+0x68>
                    f_close(&file_object);
   19546:	4b30      	ldr	r3, [pc, #192]	; (19608 <wifi_cb+0x11c>)
   19548:	0018      	movs	r0, r3
   1954a:	4b30      	ldr	r3, [pc, #192]	; (1960c <wifi_cb+0x120>)
   1954c:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1954e:	2008      	movs	r0, #8
   19550:	4b2b      	ldr	r3, [pc, #172]	; (19600 <wifi_cb+0x114>)
   19552:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   19554:	2004      	movs	r0, #4
   19556:	4b2b      	ldr	r3, [pc, #172]	; (19604 <wifi_cb+0x118>)
   19558:	4798      	blx	r3
   1955a:	1e03      	subs	r3, r0, #0
   1955c:	d002      	beq.n	19564 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   1955e:	2004      	movs	r0, #4
   19560:	4b27      	ldr	r3, [pc, #156]	; (19600 <wifi_cb+0x114>)
   19562:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   19564:	4b2a      	ldr	r3, [pc, #168]	; (19610 <wifi_cb+0x124>)
   19566:	2101      	movs	r1, #1
   19568:	0018      	movs	r0, r3
   1956a:	4b2a      	ldr	r3, [pc, #168]	; (19614 <wifi_cb+0x128>)
   1956c:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1956e:	4a2a      	ldr	r2, [pc, #168]	; (19618 <wifi_cb+0x12c>)
   19570:	482a      	ldr	r0, [pc, #168]	; (1961c <wifi_cb+0x130>)
   19572:	23ff      	movs	r3, #255	; 0xff
   19574:	9300      	str	r3, [sp, #0]
   19576:	0013      	movs	r3, r2
   19578:	2202      	movs	r2, #2
   1957a:	2105      	movs	r1, #5
   1957c:	4c28      	ldr	r4, [pc, #160]	; (19620 <wifi_cb+0x134>)
   1957e:	47a0      	blx	r4
            break;
   19580:	e02f      	b.n	195e2 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   19582:	683b      	ldr	r3, [r7, #0]
   19584:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   19586:	68bb      	ldr	r3, [r7, #8]
   19588:	781b      	ldrb	r3, [r3, #0]
   1958a:	0018      	movs	r0, r3
   1958c:	68bb      	ldr	r3, [r7, #8]
   1958e:	3301      	adds	r3, #1
   19590:	781b      	ldrb	r3, [r3, #0]
   19592:	001c      	movs	r4, r3
   19594:	68bb      	ldr	r3, [r7, #8]
   19596:	3302      	adds	r3, #2
   19598:	781b      	ldrb	r3, [r3, #0]
   1959a:	001a      	movs	r2, r3
   1959c:	68bb      	ldr	r3, [r7, #8]
   1959e:	3303      	adds	r3, #3
   195a0:	781b      	ldrb	r3, [r3, #0]
   195a2:	4920      	ldr	r1, [pc, #128]	; (19624 <wifi_cb+0x138>)
   195a4:	9301      	str	r3, [sp, #4]
   195a6:	9200      	str	r2, [sp, #0]
   195a8:	0023      	movs	r3, r4
   195aa:	0002      	movs	r2, r0
   195ac:	2001      	movs	r0, #1
   195ae:	4c11      	ldr	r4, [pc, #68]	; (195f4 <wifi_cb+0x108>)
   195b0:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   195b2:	2002      	movs	r0, #2
   195b4:	4b1c      	ldr	r3, [pc, #112]	; (19628 <wifi_cb+0x13c>)
   195b6:	4798      	blx	r3
            if (do_download_flag == 1) {
   195b8:	4b1c      	ldr	r3, [pc, #112]	; (1962c <wifi_cb+0x140>)
   195ba:	781b      	ldrb	r3, [r3, #0]
   195bc:	2b01      	cmp	r3, #1
   195be:	d102      	bne.n	195c6 <wifi_cb+0xda>
                start_download();
   195c0:	4b1b      	ldr	r3, [pc, #108]	; (19630 <wifi_cb+0x144>)
   195c2:	4798      	blx	r3
        } break;
   195c4:	e00f      	b.n	195e6 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   195c6:	4a1b      	ldr	r2, [pc, #108]	; (19634 <wifi_cb+0x148>)
   195c8:	4b11      	ldr	r3, [pc, #68]	; (19610 <wifi_cb+0x124>)
   195ca:	0011      	movs	r1, r2
   195cc:	0018      	movs	r0, r3
   195ce:	4b1a      	ldr	r3, [pc, #104]	; (19638 <wifi_cb+0x14c>)
   195d0:	4798      	blx	r3
   195d2:	1e03      	subs	r3, r0, #0
   195d4:	d007      	beq.n	195e6 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   195d6:	4b19      	ldr	r3, [pc, #100]	; (1963c <wifi_cb+0x150>)
   195d8:	0019      	movs	r1, r3
   195da:	2001      	movs	r0, #1
   195dc:	4b05      	ldr	r3, [pc, #20]	; (195f4 <wifi_cb+0x108>)
   195de:	4798      	blx	r3
        } break;
   195e0:	e001      	b.n	195e6 <wifi_cb+0xfa>
            break;
   195e2:	46c0      	nop			; (mov r8, r8)
   195e4:	e000      	b.n	195e8 <wifi_cb+0xfc>
        } break;
   195e6:	46c0      	nop			; (mov r8, r8)
    }
}
   195e8:	46c0      	nop			; (mov r8, r8)
   195ea:	46bd      	mov	sp, r7
   195ec:	b005      	add	sp, #20
   195ee:	bd90      	pop	{r4, r7, pc}
   195f0:	0003ad30 	.word	0x0003ad30
   195f4:	00020cb1 	.word	0x00020cb1
   195f8:	00025429 	.word	0x00025429
   195fc:	0003ad50 	.word	0x0003ad50
   19600:	00018cfd 	.word	0x00018cfd
   19604:	00018d59 	.word	0x00018d59
   19608:	2000078c 	.word	0x2000078c
   1960c:	000312f5 	.word	0x000312f5
   19610:	200007b8 	.word	0x200007b8
   19614:	00032905 	.word	0x00032905
   19618:	0003ad74 	.word	0x0003ad74
   1961c:	0003ad80 	.word	0x0003ad80
   19620:	00024f55 	.word	0x00024f55
   19624:	0003ad88 	.word	0x0003ad88
   19628:	00018d31 	.word	0x00018d31
   1962c:	20000558 	.word	0x20000558
   19630:	00019081 	.word	0x00019081
   19634:	0003a9b4 	.word	0x0003a9b4
   19638:	000327d1 	.word	0x000327d1
   1963c:	0003adb0 	.word	0x0003adb0

00019640 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   19640:	b590      	push	{r4, r7, lr}
   19642:	b083      	sub	sp, #12
   19644:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   19646:	4b29      	ldr	r3, [pc, #164]	; (196ec <init_storage+0xac>)
   19648:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   1964a:	4b29      	ldr	r3, [pc, #164]	; (196f0 <init_storage+0xb0>)
   1964c:	0019      	movs	r1, r3
   1964e:	2001      	movs	r0, #1
   19650:	4b28      	ldr	r3, [pc, #160]	; (196f4 <init_storage+0xb4>)
   19652:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   19654:	1dfc      	adds	r4, r7, #7
   19656:	2000      	movs	r0, #0
   19658:	4b27      	ldr	r3, [pc, #156]	; (196f8 <init_storage+0xb8>)
   1965a:	4798      	blx	r3
   1965c:	0003      	movs	r3, r0
   1965e:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   19660:	1dfb      	adds	r3, r7, #7
   19662:	781b      	ldrb	r3, [r3, #0]
   19664:	2b01      	cmp	r3, #1
   19666:	d110      	bne.n	1968a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   19668:	4b24      	ldr	r3, [pc, #144]	; (196fc <init_storage+0xbc>)
   1966a:	0019      	movs	r1, r3
   1966c:	2001      	movs	r0, #1
   1966e:	4b21      	ldr	r3, [pc, #132]	; (196f4 <init_storage+0xb4>)
   19670:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   19672:	4b23      	ldr	r3, [pc, #140]	; (19700 <init_storage+0xc0>)
   19674:	0019      	movs	r1, r3
   19676:	2001      	movs	r0, #1
   19678:	4b1e      	ldr	r3, [pc, #120]	; (196f4 <init_storage+0xb4>)
   1967a:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1967c:	46c0      	nop			; (mov r8, r8)
   1967e:	2000      	movs	r0, #0
   19680:	4b20      	ldr	r3, [pc, #128]	; (19704 <init_storage+0xc4>)
   19682:	4798      	blx	r3
   19684:	0003      	movs	r3, r0
   19686:	2b02      	cmp	r3, #2
   19688:	d1f9      	bne.n	1967e <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1968a:	1dfb      	adds	r3, r7, #7
   1968c:	781b      	ldrb	r3, [r3, #0]
   1968e:	2b00      	cmp	r3, #0
   19690:	d1e0      	bne.n	19654 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   19692:	4b1d      	ldr	r3, [pc, #116]	; (19708 <init_storage+0xc8>)
   19694:	0019      	movs	r1, r3
   19696:	2001      	movs	r0, #1
   19698:	4b16      	ldr	r3, [pc, #88]	; (196f4 <init_storage+0xb4>)
   1969a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   1969c:	238c      	movs	r3, #140	; 0x8c
   1969e:	009a      	lsls	r2, r3, #2
   196a0:	4b1a      	ldr	r3, [pc, #104]	; (1970c <init_storage+0xcc>)
   196a2:	2100      	movs	r1, #0
   196a4:	0018      	movs	r0, r3
   196a6:	4b1a      	ldr	r3, [pc, #104]	; (19710 <init_storage+0xd0>)
   196a8:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   196aa:	1dbc      	adds	r4, r7, #6
   196ac:	4b17      	ldr	r3, [pc, #92]	; (1970c <init_storage+0xcc>)
   196ae:	0019      	movs	r1, r3
   196b0:	2000      	movs	r0, #0
   196b2:	4b18      	ldr	r3, [pc, #96]	; (19714 <init_storage+0xd4>)
   196b4:	4798      	blx	r3
   196b6:	0003      	movs	r3, r0
   196b8:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   196ba:	1dbb      	adds	r3, r7, #6
   196bc:	781b      	ldrb	r3, [r3, #0]
   196be:	2b0b      	cmp	r3, #11
   196c0:	d107      	bne.n	196d2 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   196c2:	1dbb      	adds	r3, r7, #6
   196c4:	781a      	ldrb	r2, [r3, #0]
   196c6:	4b14      	ldr	r3, [pc, #80]	; (19718 <init_storage+0xd8>)
   196c8:	0019      	movs	r1, r3
   196ca:	2001      	movs	r0, #1
   196cc:	4b09      	ldr	r3, [pc, #36]	; (196f4 <init_storage+0xb4>)
   196ce:	4798      	blx	r3
            return;
   196d0:	e008      	b.n	196e4 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   196d2:	4b12      	ldr	r3, [pc, #72]	; (1971c <init_storage+0xdc>)
   196d4:	0019      	movs	r1, r3
   196d6:	2001      	movs	r0, #1
   196d8:	4b06      	ldr	r3, [pc, #24]	; (196f4 <init_storage+0xb4>)
   196da:	4798      	blx	r3
        add_state(STORAGE_READY);
   196dc:	2001      	movs	r0, #1
   196de:	4b10      	ldr	r3, [pc, #64]	; (19720 <init_storage+0xe0>)
   196e0:	4798      	blx	r3
        return;
   196e2:	46c0      	nop			; (mov r8, r8)
    }
}
   196e4:	46bd      	mov	sp, r7
   196e6:	b003      	add	sp, #12
   196e8:	bd90      	pop	{r4, r7, pc}
   196ea:	46c0      	nop			; (mov r8, r8)
   196ec:	00021bfd 	.word	0x00021bfd
   196f0:	0003add4 	.word	0x0003add4
   196f4:	00020cb1 	.word	0x00020cb1
   196f8:	000220d9 	.word	0x000220d9
   196fc:	0003ae0c 	.word	0x0003ae0c
   19700:	0003ae34 	.word	0x0003ae34
   19704:	00021c4d 	.word	0x00021c4d
   19708:	0003ae68 	.word	0x0003ae68
   1970c:	2000055c 	.word	0x2000055c
   19710:	00038507 	.word	0x00038507
   19714:	0003089d 	.word	0x0003089d
   19718:	0003ae8c 	.word	0x0003ae8c
   1971c:	0003aebc 	.word	0x0003aebc
   19720:	00018d31 	.word	0x00018d31

00019724 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   19724:	b580      	push	{r7, lr}
   19726:	b082      	sub	sp, #8
   19728:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   1972a:	1d3b      	adds	r3, r7, #4
   1972c:	0018      	movs	r0, r3
   1972e:	4b08      	ldr	r3, [pc, #32]	; (19750 <configure_timer+0x2c>)
   19730:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   19732:	1d3a      	adds	r2, r7, #4
   19734:	4b07      	ldr	r3, [pc, #28]	; (19754 <configure_timer+0x30>)
   19736:	0011      	movs	r1, r2
   19738:	0018      	movs	r0, r3
   1973a:	4b07      	ldr	r3, [pc, #28]	; (19758 <configure_timer+0x34>)
   1973c:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   1973e:	4b05      	ldr	r3, [pc, #20]	; (19754 <configure_timer+0x30>)
   19740:	0018      	movs	r0, r3
   19742:	4b06      	ldr	r3, [pc, #24]	; (1975c <configure_timer+0x38>)
   19744:	4798      	blx	r3
}
   19746:	46c0      	nop			; (mov r8, r8)
   19748:	46bd      	mov	sp, r7
   1974a:	b002      	add	sp, #8
   1974c:	bd80      	pop	{r7, pc}
   1974e:	46c0      	nop			; (mov r8, r8)
   19750:	000353ed 	.word	0x000353ed
   19754:	200048c4 	.word	0x200048c4
   19758:	00035411 	.word	0x00035411
   1975c:	000354fd 	.word	0x000354fd

00019760 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   19760:	b580      	push	{r7, lr}
   19762:	b088      	sub	sp, #32
   19764:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   19766:	003b      	movs	r3, r7
   19768:	0018      	movs	r0, r3
   1976a:	4b12      	ldr	r3, [pc, #72]	; (197b4 <configure_http_client+0x54>)
   1976c:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1976e:	003b      	movs	r3, r7
   19770:	2280      	movs	r2, #128	; 0x80
   19772:	0092      	lsls	r2, r2, #2
   19774:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   19776:	003b      	movs	r3, r7
   19778:	4a0f      	ldr	r2, [pc, #60]	; (197b8 <configure_http_client+0x58>)
   1977a:	605a      	str	r2, [r3, #4]
    //httpc_conf.port = 443;
    //httpc_conf.tls = 1;

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1977c:	003a      	movs	r2, r7
   1977e:	4b0f      	ldr	r3, [pc, #60]	; (197bc <configure_http_client+0x5c>)
   19780:	0011      	movs	r1, r2
   19782:	0018      	movs	r0, r3
   19784:	4b0e      	ldr	r3, [pc, #56]	; (197c0 <configure_http_client+0x60>)
   19786:	4798      	blx	r3
   19788:	0003      	movs	r3, r0
   1978a:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1978c:	69fb      	ldr	r3, [r7, #28]
   1978e:	2b00      	cmp	r3, #0
   19790:	da06      	bge.n	197a0 <configure_http_client+0x40>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   19792:	69fa      	ldr	r2, [r7, #28]
   19794:	4b0b      	ldr	r3, [pc, #44]	; (197c4 <configure_http_client+0x64>)
   19796:	0019      	movs	r1, r3
   19798:	2001      	movs	r0, #1
   1979a:	4b0b      	ldr	r3, [pc, #44]	; (197c8 <configure_http_client+0x68>)
   1979c:	4798      	blx	r3
        while (1) {
   1979e:	e7fe      	b.n	1979e <configure_http_client+0x3e>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   197a0:	4a0a      	ldr	r2, [pc, #40]	; (197cc <configure_http_client+0x6c>)
   197a2:	4b06      	ldr	r3, [pc, #24]	; (197bc <configure_http_client+0x5c>)
   197a4:	0011      	movs	r1, r2
   197a6:	0018      	movs	r0, r3
   197a8:	4b09      	ldr	r3, [pc, #36]	; (197d0 <configure_http_client+0x70>)
   197aa:	4798      	blx	r3
}
   197ac:	46c0      	nop			; (mov r8, r8)
   197ae:	46bd      	mov	sp, r7
   197b0:	b008      	add	sp, #32
   197b2:	bd80      	pop	{r7, pc}
   197b4:	00033a81 	.word	0x00033a81
   197b8:	200048c4 	.word	0x200048c4
   197bc:	2000491c 	.word	0x2000491c
   197c0:	00033acd 	.word	0x00033acd
   197c4:	0003aee0 	.word	0x0003aee0
   197c8:	00020cb1 	.word	0x00020cb1
   197cc:	00019311 	.word	0x00019311
   197d0:	00033bb9 	.word	0x00033bb9

000197d4 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   197d4:	b580      	push	{r7, lr}
   197d6:	b082      	sub	sp, #8
   197d8:	af00      	add	r7, sp, #0
   197da:	603a      	str	r2, [r7, #0]
   197dc:	1dfb      	adds	r3, r7, #7
   197de:	1c02      	adds	r2, r0, #0
   197e0:	701a      	strb	r2, [r3, #0]
   197e2:	1dbb      	adds	r3, r7, #6
   197e4:	1c0a      	adds	r2, r1, #0
   197e6:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   197e8:	683a      	ldr	r2, [r7, #0]
   197ea:	1dbb      	adds	r3, r7, #6
   197ec:	7819      	ldrb	r1, [r3, #0]
   197ee:	1dfb      	adds	r3, r7, #7
   197f0:	781b      	ldrb	r3, [r3, #0]
   197f2:	b25b      	sxtb	r3, r3
   197f4:	0018      	movs	r0, r3
   197f6:	4b03      	ldr	r3, [pc, #12]	; (19804 <socket_event_handler+0x30>)
   197f8:	4798      	blx	r3
}
   197fa:	46c0      	nop			; (mov r8, r8)
   197fc:	46bd      	mov	sp, r7
   197fe:	b002      	add	sp, #8
   19800:	bd80      	pop	{r7, pc}
   19802:	46c0      	nop			; (mov r8, r8)
   19804:	00032779 	.word	0x00032779

00019808 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   19808:	b580      	push	{r7, lr}
   1980a:	b082      	sub	sp, #8
   1980c:	af00      	add	r7, sp, #0
   1980e:	6078      	str	r0, [r7, #4]
   19810:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   19812:	683a      	ldr	r2, [r7, #0]
   19814:	687b      	ldr	r3, [r7, #4]
   19816:	0011      	movs	r1, r2
   19818:	0018      	movs	r0, r3
   1981a:	4b03      	ldr	r3, [pc, #12]	; (19828 <socket_resolve_handler+0x20>)
   1981c:	4798      	blx	r3
}
   1981e:	46c0      	nop			; (mov r8, r8)
   19820:	46bd      	mov	sp, r7
   19822:	b002      	add	sp, #8
   19824:	bd80      	pop	{r7, pc}
   19826:	46c0      	nop			; (mov r8, r8)
   19828:	000327ad 	.word	0x000327ad

0001982c <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   1982c:	b590      	push	{r4, r7, lr}
   1982e:	b089      	sub	sp, #36	; 0x24
   19830:	af02      	add	r7, sp, #8
   19832:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   19834:	2310      	movs	r3, #16
   19836:	18fb      	adds	r3, r7, r3
   19838:	2200      	movs	r2, #0
   1983a:	701a      	strb	r2, [r3, #0]
   1983c:	2310      	movs	r3, #16
   1983e:	18fb      	adds	r3, r7, r3
   19840:	2200      	movs	r2, #0
   19842:	705a      	strb	r2, [r3, #1]
   19844:	2310      	movs	r3, #16
   19846:	18fb      	adds	r3, r7, r3
   19848:	2200      	movs	r2, #0
   1984a:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1984c:	687b      	ldr	r3, [r7, #4]
   1984e:	685b      	ldr	r3, [r3, #4]
   19850:	685a      	ldr	r2, [r3, #4]
   19852:	687b      	ldr	r3, [r7, #4]
   19854:	685b      	ldr	r3, [r3, #4]
   19856:	689b      	ldr	r3, [r3, #8]
   19858:	4924      	ldr	r1, [pc, #144]	; (198ec <SubscribeHandlerLedTopic+0xc0>)
   1985a:	2001      	movs	r0, #1
   1985c:	4c24      	ldr	r4, [pc, #144]	; (198f0 <SubscribeHandlerLedTopic+0xc4>)
   1985e:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   19860:	687b      	ldr	r3, [r7, #4]
   19862:	681b      	ldr	r3, [r3, #0]
   19864:	689b      	ldr	r3, [r3, #8]
   19866:	4923      	ldr	r1, [pc, #140]	; (198f4 <SubscribeHandlerLedTopic+0xc8>)
   19868:	2204      	movs	r2, #4
   1986a:	0018      	movs	r0, r3
   1986c:	4b22      	ldr	r3, [pc, #136]	; (198f8 <SubscribeHandlerLedTopic+0xcc>)
   1986e:	4798      	blx	r3
   19870:	1e03      	subs	r3, r0, #0
   19872:	d137      	bne.n	198e4 <SubscribeHandlerLedTopic+0xb8>
        char *p = (char *)&msgData->message->payload[4];
   19874:	687b      	ldr	r3, [r7, #4]
   19876:	681b      	ldr	r3, [r3, #0]
   19878:	689b      	ldr	r3, [r3, #8]
   1987a:	3304      	adds	r3, #4
   1987c:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   1987e:	2300      	movs	r3, #0
   19880:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   19882:	e015      	b.n	198b0 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   19884:	697c      	ldr	r4, [r7, #20]
   19886:	1c63      	adds	r3, r4, #1
   19888:	617b      	str	r3, [r7, #20]
   1988a:	68fb      	ldr	r3, [r7, #12]
   1988c:	220c      	movs	r2, #12
   1988e:	18b9      	adds	r1, r7, r2
   19890:	220a      	movs	r2, #10
   19892:	0018      	movs	r0, r3
   19894:	4b19      	ldr	r3, [pc, #100]	; (198fc <SubscribeHandlerLedTopic+0xd0>)
   19896:	4798      	blx	r3
   19898:	0003      	movs	r3, r0
   1989a:	b2da      	uxtb	r2, r3
   1989c:	2310      	movs	r3, #16
   1989e:	18fb      	adds	r3, r7, r3
   198a0:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   198a2:	68fb      	ldr	r3, [r7, #12]
   198a4:	781b      	ldrb	r3, [r3, #0]
   198a6:	2b2c      	cmp	r3, #44	; 0x2c
   198a8:	d10a      	bne.n	198c0 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   198aa:	68fb      	ldr	r3, [r7, #12]
   198ac:	3301      	adds	r3, #1
   198ae:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   198b0:	697b      	ldr	r3, [r7, #20]
   198b2:	2b02      	cmp	r3, #2
   198b4:	dc05      	bgt.n	198c2 <SubscribeHandlerLedTopic+0x96>
   198b6:	68fb      	ldr	r3, [r7, #12]
   198b8:	781b      	ldrb	r3, [r3, #0]
   198ba:	2b00      	cmp	r3, #0
   198bc:	d1e2      	bne.n	19884 <SubscribeHandlerLedTopic+0x58>
   198be:	e000      	b.n	198c2 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   198c0:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   198c2:	2310      	movs	r3, #16
   198c4:	18fb      	adds	r3, r7, r3
   198c6:	781b      	ldrb	r3, [r3, #0]
   198c8:	001a      	movs	r2, r3
   198ca:	2310      	movs	r3, #16
   198cc:	18fb      	adds	r3, r7, r3
   198ce:	785b      	ldrb	r3, [r3, #1]
   198d0:	0018      	movs	r0, r3
   198d2:	2310      	movs	r3, #16
   198d4:	18fb      	adds	r3, r7, r3
   198d6:	789b      	ldrb	r3, [r3, #2]
   198d8:	4909      	ldr	r1, [pc, #36]	; (19900 <SubscribeHandlerLedTopic+0xd4>)
   198da:	9300      	str	r3, [sp, #0]
   198dc:	0003      	movs	r3, r0
   198de:	2001      	movs	r0, #1
   198e0:	4c03      	ldr	r4, [pc, #12]	; (198f0 <SubscribeHandlerLedTopic+0xc4>)
   198e2:	47a0      	blx	r4
        //UIChangeColors(rgb[0], rgb[1], rgb[2]);
    }
}
   198e4:	46c0      	nop			; (mov r8, r8)
   198e6:	46bd      	mov	sp, r7
   198e8:	b007      	add	sp, #28
   198ea:	bd90      	pop	{r4, r7, pc}
   198ec:	0003af28 	.word	0x0003af28
   198f0:	00020cb1 	.word	0x00020cb1
   198f4:	0003af30 	.word	0x0003af30
   198f8:	000388cd 	.word	0x000388cd
   198fc:	00038a79 	.word	0x00038a79
   19900:	0003af38 	.word	0x0003af38

00019904 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   19904:	b580      	push	{r7, lr}
   19906:	b082      	sub	sp, #8
   19908:	af00      	add	r7, sp, #0
   1990a:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\n Heartrate, spo2 data received!\r\n");
   1990c:	4b04      	ldr	r3, [pc, #16]	; (19920 <SubscribeHandlerGameTopic+0x1c>)
   1990e:	0019      	movs	r1, r3
   19910:	2001      	movs	r0, #1
   19912:	4b04      	ldr	r3, [pc, #16]	; (19924 <SubscribeHandlerGameTopic+0x20>)
   19914:	4798      	blx	r3
	//LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}
   19916:	46c0      	nop			; (mov r8, r8)
   19918:	46bd      	mov	sp, r7
   1991a:	b002      	add	sp, #8
   1991c:	bd80      	pop	{r7, pc}
   1991e:	46c0      	nop			; (mov r8, r8)
   19920:	0003af4c 	.word	0x0003af4c
   19924:	00020cb1 	.word	0x00020cb1

00019928 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   19928:	b590      	push	{r4, r7, lr}
   1992a:	b083      	sub	sp, #12
   1992c:	af00      	add	r7, sp, #0
   1992e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\n Accelerometer data received!\r\n");
   19930:	4b09      	ldr	r3, [pc, #36]	; (19958 <SubscribeHandlerImuTopic+0x30>)
   19932:	0019      	movs	r1, r3
   19934:	2001      	movs	r0, #1
   19936:	4b09      	ldr	r3, [pc, #36]	; (1995c <SubscribeHandlerImuTopic+0x34>)
   19938:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1993a:	687b      	ldr	r3, [r7, #4]
   1993c:	685b      	ldr	r3, [r3, #4]
   1993e:	685a      	ldr	r2, [r3, #4]
   19940:	687b      	ldr	r3, [r7, #4]
   19942:	685b      	ldr	r3, [r3, #4]
   19944:	689b      	ldr	r3, [r3, #8]
   19946:	4906      	ldr	r1, [pc, #24]	; (19960 <SubscribeHandlerImuTopic+0x38>)
   19948:	2001      	movs	r0, #1
   1994a:	4c04      	ldr	r4, [pc, #16]	; (1995c <SubscribeHandlerImuTopic+0x34>)
   1994c:	47a0      	blx	r4
}
   1994e:	46c0      	nop			; (mov r8, r8)
   19950:	46bd      	mov	sp, r7
   19952:	b003      	add	sp, #12
   19954:	bd90      	pop	{r4, r7, pc}
   19956:	46c0      	nop			; (mov r8, r8)
   19958:	0003af70 	.word	0x0003af70
   1995c:	00020cb1 	.word	0x00020cb1
   19960:	0003af28 	.word	0x0003af28

00019964 <SubscribeHandlerWatchTopic>:
	LogMessage(LOG_DEBUG_LVL, "\r\nDistance topic received!\r\n");
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
}

void SubscribeHandlerWatchTopic(MessageData *msgData)
{
   19964:	b580      	push	{r7, lr}
   19966:	b082      	sub	sp, #8
   19968:	af00      	add	r7, sp, #0
   1996a:	6078      	str	r0, [r7, #4]
	//SerialConsoleWriteString("received");
	LogMessage(LOG_DEBUG_LVL, "\r\n MSG received!\r\n");
   1996c:	4b0e      	ldr	r3, [pc, #56]	; (199a8 <SubscribeHandlerWatchTopic+0x44>)
   1996e:	0019      	movs	r1, r3
   19970:	2001      	movs	r0, #1
   19972:	4b0e      	ldr	r3, [pc, #56]	; (199ac <SubscribeHandlerWatchTopic+0x48>)
   19974:	4798      	blx	r3
	
	LogMessagedisplay( " %.*s\r\n", msgData->message->payloadlen, msgData->message->payload);
   19976:	687b      	ldr	r3, [r7, #4]
   19978:	681b      	ldr	r3, [r3, #0]
   1997a:	68d9      	ldr	r1, [r3, #12]
   1997c:	687b      	ldr	r3, [r7, #4]
   1997e:	681b      	ldr	r3, [r3, #0]
   19980:	689a      	ldr	r2, [r3, #8]
   19982:	4b0b      	ldr	r3, [pc, #44]	; (199b0 <SubscribeHandlerWatchTopic+0x4c>)
   19984:	0018      	movs	r0, r3
   19986:	4b0b      	ldr	r3, [pc, #44]	; (199b4 <SubscribeHandlerWatchTopic+0x50>)
   19988:	4798      	blx	r3
	LogMessagedisplaytime( " %.*s\r\n", msgData->message->payloadlen, msgData->message->payload);
   1998a:	687b      	ldr	r3, [r7, #4]
   1998c:	681b      	ldr	r3, [r3, #0]
   1998e:	68d9      	ldr	r1, [r3, #12]
   19990:	687b      	ldr	r3, [r7, #4]
   19992:	681b      	ldr	r3, [r3, #0]
   19994:	689a      	ldr	r2, [r3, #8]
   19996:	4b06      	ldr	r3, [pc, #24]	; (199b0 <SubscribeHandlerWatchTopic+0x4c>)
   19998:	0018      	movs	r0, r3
   1999a:	4b07      	ldr	r3, [pc, #28]	; (199b8 <SubscribeHandlerWatchTopic+0x54>)
   1999c:	4798      	blx	r3
}
   1999e:	46c0      	nop			; (mov r8, r8)
   199a0:	46bd      	mov	sp, r7
   199a2:	b002      	add	sp, #8
   199a4:	bd80      	pop	{r7, pc}
   199a6:	46c0      	nop			; (mov r8, r8)
   199a8:	0003afb4 	.word	0x0003afb4
   199ac:	00020cb1 	.word	0x00020cb1
   199b0:	0003afc8 	.word	0x0003afc8
   199b4:	00020d09 	.word	0x00020d09
   199b8:	00020db1 	.word	0x00020db1

000199bc <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   199bc:	b590      	push	{r4, r7, lr}
   199be:	b08b      	sub	sp, #44	; 0x2c
   199c0:	af06      	add	r7, sp, #24
   199c2:	60f8      	str	r0, [r7, #12]
   199c4:	60b9      	str	r1, [r7, #8]
   199c6:	607a      	str	r2, [r7, #4]
    switch (type) {
   199c8:	68bb      	ldr	r3, [r7, #8]
   199ca:	2b01      	cmp	r3, #1
   199cc:	d03b      	beq.n	19a46 <mqtt_callback+0x8a>
   199ce:	2b05      	cmp	r3, #5
   199d0:	d064      	beq.n	19a9c <mqtt_callback+0xe0>
   199d2:	2b00      	cmp	r3, #0
   199d4:	d000      	beq.n	199d8 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   199d6:	e067      	b.n	19aa8 <mqtt_callback+0xec>
            if (data->sock_connected.result >= 0) {
   199d8:	687b      	ldr	r3, [r7, #4]
   199da:	681b      	ldr	r3, [r3, #0]
   199dc:	2b00      	cmp	r3, #0
   199de:	db25      	blt.n	19a2c <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   199e0:	4b33      	ldr	r3, [pc, #204]	; (19ab0 <mqtt_callback+0xf4>)
   199e2:	0019      	movs	r1, r3
   199e4:	2001      	movs	r0, #1
   199e6:	4b33      	ldr	r3, [pc, #204]	; (19ab4 <mqtt_callback+0xf8>)
   199e8:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   199ea:	4933      	ldr	r1, [pc, #204]	; (19ab8 <mqtt_callback+0xfc>)
   199ec:	4a33      	ldr	r2, [pc, #204]	; (19abc <mqtt_callback+0x100>)
   199ee:	68f8      	ldr	r0, [r7, #12]
   199f0:	2300      	movs	r3, #0
   199f2:	9305      	str	r3, [sp, #20]
   199f4:	2300      	movs	r3, #0
   199f6:	9304      	str	r3, [sp, #16]
   199f8:	2300      	movs	r3, #0
   199fa:	9303      	str	r3, [sp, #12]
   199fc:	2300      	movs	r3, #0
   199fe:	9302      	str	r3, [sp, #8]
   19a00:	2300      	movs	r3, #0
   19a02:	9301      	str	r3, [sp, #4]
   19a04:	4b2d      	ldr	r3, [pc, #180]	; (19abc <mqtt_callback+0x100>)
   19a06:	9300      	str	r3, [sp, #0]
   19a08:	000b      	movs	r3, r1
   19a0a:	2101      	movs	r1, #1
   19a0c:	4c2c      	ldr	r4, [pc, #176]	; (19ac0 <mqtt_callback+0x104>)
   19a0e:	47a0      	blx	r4
   19a10:	1e03      	subs	r3, r0, #0
   19a12:	d005      	beq.n	19a20 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   19a14:	4b2b      	ldr	r3, [pc, #172]	; (19ac4 <mqtt_callback+0x108>)
   19a16:	0019      	movs	r1, r3
   19a18:	2001      	movs	r0, #1
   19a1a:	4b26      	ldr	r3, [pc, #152]	; (19ab4 <mqtt_callback+0xf8>)
   19a1c:	4798      	blx	r3
        } break;
   19a1e:	e043      	b.n	19aa8 <mqtt_callback+0xec>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   19a20:	4b29      	ldr	r3, [pc, #164]	; (19ac8 <mqtt_callback+0x10c>)
   19a22:	0019      	movs	r1, r3
   19a24:	2001      	movs	r0, #1
   19a26:	4b23      	ldr	r3, [pc, #140]	; (19ab4 <mqtt_callback+0xf8>)
   19a28:	4798      	blx	r3
        } break;
   19a2a:	e03d      	b.n	19aa8 <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   19a2c:	4a27      	ldr	r2, [pc, #156]	; (19acc <mqtt_callback+0x110>)
   19a2e:	4b28      	ldr	r3, [pc, #160]	; (19ad0 <mqtt_callback+0x114>)
   19a30:	0019      	movs	r1, r3
   19a32:	2001      	movs	r0, #1
   19a34:	4b1f      	ldr	r3, [pc, #124]	; (19ab4 <mqtt_callback+0xf8>)
   19a36:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   19a38:	4a24      	ldr	r2, [pc, #144]	; (19acc <mqtt_callback+0x110>)
   19a3a:	68fb      	ldr	r3, [r7, #12]
   19a3c:	0011      	movs	r1, r2
   19a3e:	0018      	movs	r0, r3
   19a40:	4b24      	ldr	r3, [pc, #144]	; (19ad4 <mqtt_callback+0x118>)
   19a42:	4798      	blx	r3
        } break;
   19a44:	e030      	b.n	19aa8 <mqtt_callback+0xec>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   19a46:	687b      	ldr	r3, [r7, #4]
   19a48:	781b      	ldrb	r3, [r3, #0]
   19a4a:	2b00      	cmp	r3, #0
   19a4c:	d11d      	bne.n	19a8a <mqtt_callback+0xce>
                mqtt_subscribe(module_inst, Hr_TOPIC, 2, SubscribeHandlerGameTopic);
   19a4e:	4b22      	ldr	r3, [pc, #136]	; (19ad8 <mqtt_callback+0x11c>)
   19a50:	4922      	ldr	r1, [pc, #136]	; (19adc <mqtt_callback+0x120>)
   19a52:	68f8      	ldr	r0, [r7, #12]
   19a54:	2202      	movs	r2, #2
   19a56:	4c22      	ldr	r4, [pc, #136]	; (19ae0 <mqtt_callback+0x124>)
   19a58:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   19a5a:	4b22      	ldr	r3, [pc, #136]	; (19ae4 <mqtt_callback+0x128>)
   19a5c:	4922      	ldr	r1, [pc, #136]	; (19ae8 <mqtt_callback+0x12c>)
   19a5e:	68f8      	ldr	r0, [r7, #12]
   19a60:	2202      	movs	r2, #2
   19a62:	4c1f      	ldr	r4, [pc, #124]	; (19ae0 <mqtt_callback+0x124>)
   19a64:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   19a66:	4b21      	ldr	r3, [pc, #132]	; (19aec <mqtt_callback+0x130>)
   19a68:	4921      	ldr	r1, [pc, #132]	; (19af0 <mqtt_callback+0x134>)
   19a6a:	68f8      	ldr	r0, [r7, #12]
   19a6c:	2202      	movs	r2, #2
   19a6e:	4c1c      	ldr	r4, [pc, #112]	; (19ae0 <mqtt_callback+0x124>)
   19a70:	47a0      	blx	r4
				mqtt_subscribe(module_inst, Watch_TOPIC, 0, SubscribeHandlerWatchTopic);
   19a72:	4b20      	ldr	r3, [pc, #128]	; (19af4 <mqtt_callback+0x138>)
   19a74:	4920      	ldr	r1, [pc, #128]	; (19af8 <mqtt_callback+0x13c>)
   19a76:	68f8      	ldr	r0, [r7, #12]
   19a78:	2200      	movs	r2, #0
   19a7a:	4c19      	ldr	r4, [pc, #100]	; (19ae0 <mqtt_callback+0x124>)
   19a7c:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   19a7e:	4b1f      	ldr	r3, [pc, #124]	; (19afc <mqtt_callback+0x140>)
   19a80:	0019      	movs	r1, r3
   19a82:	2001      	movs	r0, #1
   19a84:	4b0b      	ldr	r3, [pc, #44]	; (19ab4 <mqtt_callback+0xf8>)
   19a86:	4798      	blx	r3
            break;
   19a88:	e00e      	b.n	19aa8 <mqtt_callback+0xec>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   19a8a:	687b      	ldr	r3, [r7, #4]
   19a8c:	781b      	ldrb	r3, [r3, #0]
   19a8e:	001a      	movs	r2, r3
   19a90:	4b1b      	ldr	r3, [pc, #108]	; (19b00 <mqtt_callback+0x144>)
   19a92:	0019      	movs	r1, r3
   19a94:	2001      	movs	r0, #1
   19a96:	4b07      	ldr	r3, [pc, #28]	; (19ab4 <mqtt_callback+0xf8>)
   19a98:	4798      	blx	r3
            break;
   19a9a:	e005      	b.n	19aa8 <mqtt_callback+0xec>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   19a9c:	4b19      	ldr	r3, [pc, #100]	; (19b04 <mqtt_callback+0x148>)
   19a9e:	0019      	movs	r1, r3
   19aa0:	2001      	movs	r0, #1
   19aa2:	4b04      	ldr	r3, [pc, #16]	; (19ab4 <mqtt_callback+0xf8>)
   19aa4:	4798      	blx	r3
            break;
   19aa6:	46c0      	nop			; (mov r8, r8)
}
   19aa8:	46c0      	nop			; (mov r8, r8)
   19aaa:	46bd      	mov	sp, r7
   19aac:	b005      	add	sp, #20
   19aae:	bd90      	pop	{r4, r7, pc}
   19ab0:	0003b004 	.word	0x0003b004
   19ab4:	00020cb1 	.word	0x00020cb1
   19ab8:	0003b020 	.word	0x0003b020
   19abc:	0003b030 	.word	0x0003b030
   19ac0:	00032819 	.word	0x00032819
   19ac4:	0003b038 	.word	0x0003b038
   19ac8:	0003b060 	.word	0x0003b060
   19acc:	0003a9b4 	.word	0x0003a9b4
   19ad0:	0003b07c 	.word	0x0003b07c
   19ad4:	000327d1 	.word	0x000327d1
   19ad8:	00019905 	.word	0x00019905
   19adc:	0003b0b4 	.word	0x0003b0b4
   19ae0:	000329b9 	.word	0x000329b9
   19ae4:	0001982d 	.word	0x0001982d
   19ae8:	0003afe0 	.word	0x0003afe0
   19aec:	00019929 	.word	0x00019929
   19af0:	0003b0c0 	.word	0x0003b0c0
   19af4:	00019965 	.word	0x00019965
   19af8:	0003b0d0 	.word	0x0003b0d0
   19afc:	0003b0d8 	.word	0x0003b0d8
   19b00:	0003b0ec 	.word	0x0003b0ec
   19b04:	0003b120 	.word	0x0003b120

00019b08 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   19b08:	b580      	push	{r7, lr}
   19b0a:	b088      	sub	sp, #32
   19b0c:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   19b0e:	1d3b      	adds	r3, r7, #4
   19b10:	0018      	movs	r0, r3
   19b12:	4b1f      	ldr	r3, [pc, #124]	; (19b90 <configure_mqtt+0x88>)
   19b14:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   19b16:	1d3b      	adds	r3, r7, #4
   19b18:	4a1e      	ldr	r2, [pc, #120]	; (19b94 <configure_mqtt+0x8c>)
   19b1a:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   19b1c:	1d3b      	adds	r3, r7, #4
   19b1e:	2280      	movs	r2, #128	; 0x80
   19b20:	0092      	lsls	r2, r2, #2
   19b22:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   19b24:	1d3b      	adds	r3, r7, #4
   19b26:	4a1c      	ldr	r2, [pc, #112]	; (19b98 <configure_mqtt+0x90>)
   19b28:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   19b2a:	1d3b      	adds	r3, r7, #4
   19b2c:	2280      	movs	r2, #128	; 0x80
   19b2e:	0092      	lsls	r2, r2, #2
   19b30:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   19b32:	1d3b      	adds	r3, r7, #4
   19b34:	4a19      	ldr	r2, [pc, #100]	; (19b9c <configure_mqtt+0x94>)
   19b36:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   19b38:	1d3b      	adds	r3, r7, #4
   19b3a:	4a19      	ldr	r2, [pc, #100]	; (19ba0 <configure_mqtt+0x98>)
   19b3c:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   19b3e:	1d3a      	adds	r2, r7, #4
   19b40:	4b18      	ldr	r3, [pc, #96]	; (19ba4 <configure_mqtt+0x9c>)
   19b42:	0011      	movs	r1, r2
   19b44:	0018      	movs	r0, r3
   19b46:	4b18      	ldr	r3, [pc, #96]	; (19ba8 <configure_mqtt+0xa0>)
   19b48:	4798      	blx	r3
   19b4a:	0003      	movs	r3, r0
   19b4c:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   19b4e:	69fb      	ldr	r3, [r7, #28]
   19b50:	2b00      	cmp	r3, #0
   19b52:	da06      	bge.n	19b62 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   19b54:	69fa      	ldr	r2, [r7, #28]
   19b56:	4b15      	ldr	r3, [pc, #84]	; (19bac <configure_mqtt+0xa4>)
   19b58:	0019      	movs	r1, r3
   19b5a:	2001      	movs	r0, #1
   19b5c:	4b14      	ldr	r3, [pc, #80]	; (19bb0 <configure_mqtt+0xa8>)
   19b5e:	4798      	blx	r3
        while (1) {
   19b60:	e7fe      	b.n	19b60 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   19b62:	4a14      	ldr	r2, [pc, #80]	; (19bb4 <configure_mqtt+0xac>)
   19b64:	4b0f      	ldr	r3, [pc, #60]	; (19ba4 <configure_mqtt+0x9c>)
   19b66:	0011      	movs	r1, r2
   19b68:	0018      	movs	r0, r3
   19b6a:	4b13      	ldr	r3, [pc, #76]	; (19bb8 <configure_mqtt+0xb0>)
   19b6c:	4798      	blx	r3
   19b6e:	0003      	movs	r3, r0
   19b70:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   19b72:	69fb      	ldr	r3, [r7, #28]
   19b74:	2b00      	cmp	r3, #0
   19b76:	da06      	bge.n	19b86 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   19b78:	69fa      	ldr	r2, [r7, #28]
   19b7a:	4b10      	ldr	r3, [pc, #64]	; (19bbc <configure_mqtt+0xb4>)
   19b7c:	0019      	movs	r1, r3
   19b7e:	2001      	movs	r0, #1
   19b80:	4b0b      	ldr	r3, [pc, #44]	; (19bb0 <configure_mqtt+0xa8>)
   19b82:	4798      	blx	r3
        while (1) {
   19b84:	e7fe      	b.n	19b84 <configure_mqtt+0x7c>
        }
    }
}
   19b86:	46c0      	nop			; (mov r8, r8)
   19b88:	46bd      	mov	sp, r7
   19b8a:	b008      	add	sp, #32
   19b8c:	bd80      	pop	{r7, pc}
   19b8e:	46c0      	nop			; (mov r8, r8)
   19b90:	00032711 	.word	0x00032711
   19b94:	200007f0 	.word	0x200007f0
   19b98:	200009f0 	.word	0x200009f0
   19b9c:	0000075b 	.word	0x0000075b
   19ba0:	00001770 	.word	0x00001770
   19ba4:	200007b8 	.word	0x200007b8
   19ba8:	00032661 	.word	0x00032661
   19bac:	0003b134 	.word	0x0003b134
   19bb0:	00020cb1 	.word	0x00020cb1
   19bb4:	000199bd 	.word	0x000199bd
   19bb8:	00032751 	.word	0x00032751
   19bbc:	0003b168 	.word	0x0003b168

00019bc0 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   19bc0:	b580      	push	{r7, lr}
   19bc2:	b084      	sub	sp, #16
   19bc4:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   19bc6:	1d3b      	adds	r3, r7, #4
   19bc8:	0018      	movs	r0, r3
   19bca:	4b0b      	ldr	r3, [pc, #44]	; (19bf8 <configure_extint_channel+0x38>)
   19bcc:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   19bce:	1d3b      	adds	r3, r7, #4
   19bd0:	2237      	movs	r2, #55	; 0x37
   19bd2:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   19bd4:	1d3b      	adds	r3, r7, #4
   19bd6:	2200      	movs	r2, #0
   19bd8:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   19bda:	1d3b      	adds	r3, r7, #4
   19bdc:	2201      	movs	r2, #1
   19bde:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   19be0:	1d3b      	adds	r3, r7, #4
   19be2:	2202      	movs	r2, #2
   19be4:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   19be6:	1d3b      	adds	r3, r7, #4
   19be8:	0019      	movs	r1, r3
   19bea:	2007      	movs	r0, #7
   19bec:	4b03      	ldr	r3, [pc, #12]	; (19bfc <configure_extint_channel+0x3c>)
   19bee:	4798      	blx	r3
}
   19bf0:	46c0      	nop			; (mov r8, r8)
   19bf2:	46bd      	mov	sp, r7
   19bf4:	b004      	add	sp, #16
   19bf6:	bd80      	pop	{r7, pc}
   19bf8:	00029849 	.word	0x00029849
   19bfc:	0002987d 	.word	0x0002987d

00019c00 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   19c00:	b580      	push	{r7, lr}
   19c02:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   19c04:	4b06      	ldr	r3, [pc, #24]	; (19c20 <configure_extint_callbacks+0x20>)
   19c06:	2200      	movs	r2, #0
   19c08:	2107      	movs	r1, #7
   19c0a:	0018      	movs	r0, r3
   19c0c:	4b05      	ldr	r3, [pc, #20]	; (19c24 <configure_extint_callbacks+0x24>)
   19c0e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   19c10:	2100      	movs	r1, #0
   19c12:	2007      	movs	r0, #7
   19c14:	4b04      	ldr	r3, [pc, #16]	; (19c28 <configure_extint_callbacks+0x28>)
   19c16:	4798      	blx	r3
}
   19c18:	46c0      	nop			; (mov r8, r8)
   19c1a:	46bd      	mov	sp, r7
   19c1c:	bd80      	pop	{r7, pc}
   19c1e:	46c0      	nop			; (mov r8, r8)
   19c20:	00019c2d 	.word	0x00019c2d
   19c24:	00029449 	.word	0x00029449
   19c28:	000294ad 	.word	0x000294ad

00019c2c <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   19c2c:	b5b0      	push	{r4, r5, r7, lr}
   19c2e:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   19c30:	4b0c      	ldr	r3, [pc, #48]	; (19c64 <extint_detection_callback+0x38>)
   19c32:	681b      	ldr	r3, [r3, #0]
   19c34:	1c5a      	adds	r2, r3, #1
   19c36:	4b0b      	ldr	r3, [pc, #44]	; (19c64 <extint_detection_callback+0x38>)
   19c38:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   19c3a:	4b0a      	ldr	r3, [pc, #40]	; (19c64 <extint_detection_callback+0x38>)
   19c3c:	681b      	ldr	r3, [r3, #0]
   19c3e:	2b28      	cmp	r3, #40	; 0x28
   19c40:	d902      	bls.n	19c48 <extint_detection_callback+0x1c>
   19c42:	4b08      	ldr	r3, [pc, #32]	; (19c64 <extint_detection_callback+0x38>)
   19c44:	2201      	movs	r2, #1
   19c46:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   19c48:	4b06      	ldr	r3, [pc, #24]	; (19c64 <extint_detection_callback+0x38>)
   19c4a:	681b      	ldr	r3, [r3, #0]
   19c4c:	4a06      	ldr	r2, [pc, #24]	; (19c68 <extint_detection_callback+0x3c>)
   19c4e:	4807      	ldr	r0, [pc, #28]	; (19c6c <extint_detection_callback+0x40>)
   19c50:	213f      	movs	r1, #63	; 0x3f
   19c52:	4c07      	ldr	r4, [pc, #28]	; (19c70 <extint_detection_callback+0x44>)
   19c54:	47a0      	blx	r4
    isPressed = true;
   19c56:	4b07      	ldr	r3, [pc, #28]	; (19c74 <extint_detection_callback+0x48>)
   19c58:	2201      	movs	r2, #1
   19c5a:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   19c5c:	46c0      	nop			; (mov r8, r8)
   19c5e:	46bd      	mov	sp, r7
   19c60:	bdb0      	pop	{r4, r5, r7, pc}
   19c62:	46c0      	nop			; (mov r8, r8)
   19c64:	2000012c 	.word	0x2000012c
   19c68:	0003b19c 	.word	0x0003b19c
   19c6c:	200000ec 	.word	0x200000ec
   19c70:	00038761 	.word	0x00038761
   19c74:	20000bf0 	.word	0x20000bf0

00019c78 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   19c78:	b580      	push	{r7, lr}
   19c7a:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   19c7c:	4a15      	ldr	r2, [pc, #84]	; (19cd4 <HTTP_DownloadFileInit+0x5c>)
   19c7e:	4b16      	ldr	r3, [pc, #88]	; (19cd8 <HTTP_DownloadFileInit+0x60>)
   19c80:	0011      	movs	r1, r2
   19c82:	0018      	movs	r0, r3
   19c84:	4b15      	ldr	r3, [pc, #84]	; (19cdc <HTTP_DownloadFileInit+0x64>)
   19c86:	4798      	blx	r3
   19c88:	1e03      	subs	r3, r0, #0
   19c8a:	d008      	beq.n	19c9e <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   19c8c:	4b14      	ldr	r3, [pc, #80]	; (19ce0 <HTTP_DownloadFileInit+0x68>)
   19c8e:	0019      	movs	r1, r3
   19c90:	2001      	movs	r0, #1
   19c92:	4b14      	ldr	r3, [pc, #80]	; (19ce4 <HTTP_DownloadFileInit+0x6c>)
   19c94:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   19c96:	e002      	b.n	19c9e <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   19c98:	2000      	movs	r0, #0
   19c9a:	4b13      	ldr	r3, [pc, #76]	; (19ce8 <HTTP_DownloadFileInit+0x70>)
   19c9c:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   19c9e:	4b0e      	ldr	r3, [pc, #56]	; (19cd8 <HTTP_DownloadFileInit+0x60>)
   19ca0:	2234      	movs	r2, #52	; 0x34
   19ca2:	5c9b      	ldrb	r3, [r3, r2]
   19ca4:	2b00      	cmp	r3, #0
   19ca6:	d1f7      	bne.n	19c98 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   19ca8:	4b10      	ldr	r3, [pc, #64]	; (19cec <HTTP_DownloadFileInit+0x74>)
   19caa:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   19cac:	4b10      	ldr	r3, [pc, #64]	; (19cf0 <HTTP_DownloadFileInit+0x78>)
   19cae:	2201      	movs	r2, #1
   19cb0:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   19cb2:	4a10      	ldr	r2, [pc, #64]	; (19cf4 <HTTP_DownloadFileInit+0x7c>)
   19cb4:	4b10      	ldr	r3, [pc, #64]	; (19cf8 <HTTP_DownloadFileInit+0x80>)
   19cb6:	0011      	movs	r1, r2
   19cb8:	0018      	movs	r0, r3
   19cba:	4b10      	ldr	r3, [pc, #64]	; (19cfc <HTTP_DownloadFileInit+0x84>)
   19cbc:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   19cbe:	4b10      	ldr	r3, [pc, #64]	; (19d00 <HTTP_DownloadFileInit+0x88>)
   19cc0:	4798      	blx	r3

    start_download();
   19cc2:	4b10      	ldr	r3, [pc, #64]	; (19d04 <HTTP_DownloadFileInit+0x8c>)
   19cc4:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   19cc6:	4b10      	ldr	r3, [pc, #64]	; (19d08 <HTTP_DownloadFileInit+0x90>)
   19cc8:	2203      	movs	r2, #3
   19cca:	701a      	strb	r2, [r3, #0]
}
   19ccc:	46c0      	nop			; (mov r8, r8)
   19cce:	46bd      	mov	sp, r7
   19cd0:	bd80      	pop	{r7, pc}
   19cd2:	46c0      	nop			; (mov r8, r8)
   19cd4:	0003a9b4 	.word	0x0003a9b4
   19cd8:	200007b8 	.word	0x200007b8
   19cdc:	00032905 	.word	0x00032905
   19ce0:	0003adb0 	.word	0x0003adb0
   19ce4:	00020cb1 	.word	0x00020cb1
   19ce8:	00024f39 	.word	0x00024f39
   19cec:	000284f5 	.word	0x000284f5
   19cf0:	20000558 	.word	0x20000558
   19cf4:	0001948d 	.word	0x0001948d
   19cf8:	00019459 	.word	0x00019459
   19cfc:	0002853d 	.word	0x0002853d
   19d00:	000284a5 	.word	0x000284a5
   19d04:	00019081 	.word	0x00019081
   19d08:	20000544 	.word	0x20000544

00019d0c <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   19d0c:	b590      	push	{r4, r7, lr}
   19d0e:	b085      	sub	sp, #20
   19d10:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   19d12:	e009      	b.n	19d28 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   19d14:	2000      	movs	r0, #0
   19d16:	4b2a      	ldr	r3, [pc, #168]	; (19dc0 <HTTP_DownloadFileTransaction+0xb4>)
   19d18:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   19d1a:	4b2a      	ldr	r3, [pc, #168]	; (19dc4 <HTTP_DownloadFileTransaction+0xb8>)
   19d1c:	0018      	movs	r0, r3
   19d1e:	4b2a      	ldr	r3, [pc, #168]	; (19dc8 <HTTP_DownloadFileTransaction+0xbc>)
   19d20:	4798      	blx	r3
        vTaskDelay(5);
   19d22:	2005      	movs	r0, #5
   19d24:	4b29      	ldr	r3, [pc, #164]	; (19dcc <HTTP_DownloadFileTransaction+0xc0>)
   19d26:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   19d28:	2010      	movs	r0, #16
   19d2a:	4b29      	ldr	r3, [pc, #164]	; (19dd0 <HTTP_DownloadFileTransaction+0xc4>)
   19d2c:	4798      	blx	r3
   19d2e:	0003      	movs	r3, r0
   19d30:	001a      	movs	r2, r3
   19d32:	2301      	movs	r3, #1
   19d34:	4053      	eors	r3, r2
   19d36:	b2db      	uxtb	r3, r3
   19d38:	2b00      	cmp	r3, #0
   19d3a:	d009      	beq.n	19d50 <HTTP_DownloadFileTransaction+0x44>
   19d3c:	2020      	movs	r0, #32
   19d3e:	4b24      	ldr	r3, [pc, #144]	; (19dd0 <HTTP_DownloadFileTransaction+0xc4>)
   19d40:	4798      	blx	r3
   19d42:	0003      	movs	r3, r0
   19d44:	001a      	movs	r2, r3
   19d46:	2301      	movs	r3, #1
   19d48:	4053      	eors	r3, r2
   19d4a:	b2db      	uxtb	r3, r3
   19d4c:	2b00      	cmp	r3, #0
   19d4e:	d1e1      	bne.n	19d14 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   19d50:	4b20      	ldr	r3, [pc, #128]	; (19dd4 <HTTP_DownloadFileTransaction+0xc8>)
   19d52:	4798      	blx	r3
    vTaskDelay(1000);
   19d54:	23fa      	movs	r3, #250	; 0xfa
   19d56:	009b      	lsls	r3, r3, #2
   19d58:	0018      	movs	r0, r3
   19d5a:	4b1c      	ldr	r3, [pc, #112]	; (19dcc <HTTP_DownloadFileTransaction+0xc0>)
   19d5c:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   19d5e:	4b1e      	ldr	r3, [pc, #120]	; (19dd8 <HTTP_DownloadFileTransaction+0xcc>)
   19d60:	2200      	movs	r2, #0
   19d62:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   19d64:	003b      	movs	r3, r7
   19d66:	4a1d      	ldr	r2, [pc, #116]	; (19ddc <HTTP_DownloadFileTransaction+0xd0>)
   19d68:	ca13      	ldmia	r2!, {r0, r1, r4}
   19d6a:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   19d6c:	003b      	movs	r3, r7
   19d6e:	2230      	movs	r2, #48	; 0x30
   19d70:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   19d72:	230f      	movs	r3, #15
   19d74:	18fc      	adds	r4, r7, r3
   19d76:	0039      	movs	r1, r7
   19d78:	4b19      	ldr	r3, [pc, #100]	; (19de0 <HTTP_DownloadFileTransaction+0xd4>)
   19d7a:	220a      	movs	r2, #10
   19d7c:	0018      	movs	r0, r3
   19d7e:	4b19      	ldr	r3, [pc, #100]	; (19de4 <HTTP_DownloadFileTransaction+0xd8>)
   19d80:	4798      	blx	r3
   19d82:	0003      	movs	r3, r0
   19d84:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   19d86:	230f      	movs	r3, #15
   19d88:	18fb      	adds	r3, r7, r3
   19d8a:	781b      	ldrb	r3, [r3, #0]
   19d8c:	2b00      	cmp	r3, #0
   19d8e:	d008      	beq.n	19da2 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   19d90:	230f      	movs	r3, #15
   19d92:	18fb      	adds	r3, r7, r3
   19d94:	781a      	ldrb	r2, [r3, #0]
   19d96:	4b14      	ldr	r3, [pc, #80]	; (19de8 <HTTP_DownloadFileTransaction+0xdc>)
   19d98:	0019      	movs	r1, r3
   19d9a:	2000      	movs	r0, #0
   19d9c:	4b13      	ldr	r3, [pc, #76]	; (19dec <HTTP_DownloadFileTransaction+0xe0>)
   19d9e:	4798      	blx	r3
   19da0:	e003      	b.n	19daa <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   19da2:	4b13      	ldr	r3, [pc, #76]	; (19df0 <HTTP_DownloadFileTransaction+0xe4>)
   19da4:	0018      	movs	r0, r3
   19da6:	4b13      	ldr	r3, [pc, #76]	; (19df4 <HTTP_DownloadFileTransaction+0xe8>)
   19da8:	4798      	blx	r3
    }
	
	f_close(&file_object);
   19daa:	4b0d      	ldr	r3, [pc, #52]	; (19de0 <HTTP_DownloadFileTransaction+0xd4>)
   19dac:	0018      	movs	r0, r3
   19dae:	4b12      	ldr	r3, [pc, #72]	; (19df8 <HTTP_DownloadFileTransaction+0xec>)
   19db0:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   19db2:	4b12      	ldr	r3, [pc, #72]	; (19dfc <HTTP_DownloadFileTransaction+0xf0>)
   19db4:	2200      	movs	r2, #0
   19db6:	701a      	strb	r2, [r3, #0]
}
   19db8:	46c0      	nop			; (mov r8, r8)
   19dba:	46bd      	mov	sp, r7
   19dbc:	b005      	add	sp, #20
   19dbe:	bd90      	pop	{r4, r7, pc}
   19dc0:	00024f39 	.word	0x00024f39
   19dc4:	200048c4 	.word	0x200048c4
   19dc8:	0003562d 	.word	0x0003562d
   19dcc:	0001ef71 	.word	0x0001ef71
   19dd0:	00018d59 	.word	0x00018d59
   19dd4:	000284f5 	.word	0x000284f5
   19dd8:	20000558 	.word	0x20000558
   19ddc:	0003b1d4 	.word	0x0003b1d4
   19de0:	2000078c 	.word	0x2000078c
   19de4:	000308f5 	.word	0x000308f5
   19de8:	0003b1b0 	.word	0x0003b1b0
   19dec:	00020cb1 	.word	0x00020cb1
   19df0:	0003b1c0 	.word	0x0003b1c0
   19df4:	00020bc5 	.word	0x00020bc5
   19df8:	000312f5 	.word	0x000312f5
   19dfc:	20000544 	.word	0x20000544

00019e00 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   19e00:	b580      	push	{r7, lr}
   19e02:	af00      	add	r7, sp, #0
    socketDeinit();
   19e04:	4b18      	ldr	r3, [pc, #96]	; (19e68 <MQTT_InitRoutine+0x68>)
   19e06:	4798      	blx	r3
    configure_mqtt();
   19e08:	4b18      	ldr	r3, [pc, #96]	; (19e6c <MQTT_InitRoutine+0x6c>)
   19e0a:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   19e0c:	4a18      	ldr	r2, [pc, #96]	; (19e70 <MQTT_InitRoutine+0x70>)
   19e0e:	4b19      	ldr	r3, [pc, #100]	; (19e74 <MQTT_InitRoutine+0x74>)
   19e10:	0011      	movs	r1, r2
   19e12:	0018      	movs	r0, r3
   19e14:	4b18      	ldr	r3, [pc, #96]	; (19e78 <MQTT_InitRoutine+0x78>)
   19e16:	4798      	blx	r3
    socketInit();
   19e18:	4b18      	ldr	r3, [pc, #96]	; (19e7c <MQTT_InitRoutine+0x7c>)
   19e1a:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   19e1c:	4b18      	ldr	r3, [pc, #96]	; (19e80 <MQTT_InitRoutine+0x80>)
   19e1e:	2234      	movs	r2, #52	; 0x34
   19e20:	5c9b      	ldrb	r3, [r3, r2]
   19e22:	2201      	movs	r2, #1
   19e24:	4053      	eors	r3, r2
   19e26:	b2db      	uxtb	r3, r3
   19e28:	2b00      	cmp	r3, #0
   19e2a:	d00c      	beq.n	19e46 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   19e2c:	4a15      	ldr	r2, [pc, #84]	; (19e84 <MQTT_InitRoutine+0x84>)
   19e2e:	4b14      	ldr	r3, [pc, #80]	; (19e80 <MQTT_InitRoutine+0x80>)
   19e30:	0011      	movs	r1, r2
   19e32:	0018      	movs	r0, r3
   19e34:	4b14      	ldr	r3, [pc, #80]	; (19e88 <MQTT_InitRoutine+0x88>)
   19e36:	4798      	blx	r3
   19e38:	1e03      	subs	r3, r0, #0
   19e3a:	d004      	beq.n	19e46 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   19e3c:	4b13      	ldr	r3, [pc, #76]	; (19e8c <MQTT_InitRoutine+0x8c>)
   19e3e:	0019      	movs	r1, r3
   19e40:	2001      	movs	r0, #1
   19e42:	4b13      	ldr	r3, [pc, #76]	; (19e90 <MQTT_InitRoutine+0x90>)
   19e44:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   19e46:	4b0e      	ldr	r3, [pc, #56]	; (19e80 <MQTT_InitRoutine+0x80>)
   19e48:	2234      	movs	r2, #52	; 0x34
   19e4a:	5c9b      	ldrb	r3, [r3, r2]
   19e4c:	2b00      	cmp	r3, #0
   19e4e:	d004      	beq.n	19e5a <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   19e50:	4b10      	ldr	r3, [pc, #64]	; (19e94 <MQTT_InitRoutine+0x94>)
   19e52:	0019      	movs	r1, r3
   19e54:	2001      	movs	r0, #1
   19e56:	4b0e      	ldr	r3, [pc, #56]	; (19e90 <MQTT_InitRoutine+0x90>)
   19e58:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   19e5a:	4b0f      	ldr	r3, [pc, #60]	; (19e98 <MQTT_InitRoutine+0x98>)
   19e5c:	2201      	movs	r2, #1
   19e5e:	701a      	strb	r2, [r3, #0]
}
   19e60:	46c0      	nop			; (mov r8, r8)
   19e62:	46bd      	mov	sp, r7
   19e64:	bd80      	pop	{r7, pc}
   19e66:	46c0      	nop			; (mov r8, r8)
   19e68:	000284f5 	.word	0x000284f5
   19e6c:	00019b09 	.word	0x00019b09
   19e70:	00019809 	.word	0x00019809
   19e74:	000197d5 	.word	0x000197d5
   19e78:	0002853d 	.word	0x0002853d
   19e7c:	000284a5 	.word	0x000284a5
   19e80:	200007b8 	.word	0x200007b8
   19e84:	0003a9b4 	.word	0x0003a9b4
   19e88:	000327d1 	.word	0x000327d1
   19e8c:	0003adb0 	.word	0x0003adb0
   19e90:	00020cb1 	.word	0x00020cb1
   19e94:	0003b1e0 	.word	0x0003b1e0
   19e98:	20000544 	.word	0x20000544

00019e9c <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   19e9c:	b580      	push	{r7, lr}
   19e9e:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   19ea0:	2000      	movs	r0, #0
   19ea2:	4b0b      	ldr	r3, [pc, #44]	; (19ed0 <MQTT_HandleTransactions+0x34>)
   19ea4:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   19ea6:	4b0b      	ldr	r3, [pc, #44]	; (19ed4 <MQTT_HandleTransactions+0x38>)
   19ea8:	0018      	movs	r0, r3
   19eaa:	4b0b      	ldr	r3, [pc, #44]	; (19ed8 <MQTT_HandleTransactions+0x3c>)
   19eac:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   19eae:	4b0b      	ldr	r3, [pc, #44]	; (19edc <MQTT_HandleTransactions+0x40>)
   19eb0:	4798      	blx	r3
    MQTT_HandleImuMessages();
   19eb2:	4b0b      	ldr	r3, [pc, #44]	; (19ee0 <MQTT_HandleTransactions+0x44>)
   19eb4:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   19eb6:	4b0b      	ldr	r3, [pc, #44]	; (19ee4 <MQTT_HandleTransactions+0x48>)
   19eb8:	2234      	movs	r2, #52	; 0x34
   19eba:	5c9b      	ldrb	r3, [r3, r2]
   19ebc:	2b00      	cmp	r3, #0
   19ebe:	d004      	beq.n	19eca <MQTT_HandleTransactions+0x2e>
   19ec0:	4b08      	ldr	r3, [pc, #32]	; (19ee4 <MQTT_HandleTransactions+0x48>)
   19ec2:	2164      	movs	r1, #100	; 0x64
   19ec4:	0018      	movs	r0, r3
   19ec6:	4b08      	ldr	r3, [pc, #32]	; (19ee8 <MQTT_HandleTransactions+0x4c>)
   19ec8:	4798      	blx	r3
}
   19eca:	46c0      	nop			; (mov r8, r8)
   19ecc:	46bd      	mov	sp, r7
   19ece:	bd80      	pop	{r7, pc}
   19ed0:	00024f39 	.word	0x00024f39
   19ed4:	200048c4 	.word	0x200048c4
   19ed8:	0003562d 	.word	0x0003562d
   19edc:	00019f89 	.word	0x00019f89
   19ee0:	00019eed 	.word	0x00019eed
   19ee4:	200007b8 	.word	0x200007b8
   19ee8:	00032a01 	.word	0x00032a01

00019eec <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   19eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   19eee:	b087      	sub	sp, #28
   19ef0:	af04      	add	r7, sp, #16
	struct ImuDataPacket imuDataVar;
	if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   19ef2:	4b1c      	ldr	r3, [pc, #112]	; (19f64 <MQTT_HandleImuMessages+0x78>)
   19ef4:	681b      	ldr	r3, [r3, #0]
   19ef6:	0039      	movs	r1, r7
   19ef8:	2200      	movs	r2, #0
   19efa:	0018      	movs	r0, r3
   19efc:	4b1a      	ldr	r3, [pc, #104]	; (19f68 <MQTT_HandleImuMessages+0x7c>)
   19efe:	4798      	blx	r3
   19f00:	0003      	movs	r3, r0
   19f02:	2b01      	cmp	r3, #1
   19f04:	d12a      	bne.n	19f5c <MQTT_HandleImuMessages+0x70>
		snprintf(mqtt_msg, 63, "{\"x\":%d, \"y\": %d, \"z\": %d, \"alarm\": %d,\"temp\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg, imuDataVar.alarm, imuDataVar.temp);
   19f06:	003b      	movs	r3, r7
   19f08:	2200      	movs	r2, #0
   19f0a:	5e9b      	ldrsh	r3, [r3, r2]
   19f0c:	001e      	movs	r6, r3
   19f0e:	003b      	movs	r3, r7
   19f10:	2202      	movs	r2, #2
   19f12:	5e9b      	ldrsh	r3, [r3, r2]
   19f14:	0019      	movs	r1, r3
   19f16:	003b      	movs	r3, r7
   19f18:	2204      	movs	r2, #4
   19f1a:	5e9b      	ldrsh	r3, [r3, r2]
   19f1c:	001c      	movs	r4, r3
   19f1e:	003b      	movs	r3, r7
   19f20:	799b      	ldrb	r3, [r3, #6]
   19f22:	001d      	movs	r5, r3
   19f24:	003b      	movs	r3, r7
   19f26:	79db      	ldrb	r3, [r3, #7]
   19f28:	b25b      	sxtb	r3, r3
   19f2a:	4a10      	ldr	r2, [pc, #64]	; (19f6c <MQTT_HandleImuMessages+0x80>)
   19f2c:	4810      	ldr	r0, [pc, #64]	; (19f70 <MQTT_HandleImuMessages+0x84>)
   19f2e:	9303      	str	r3, [sp, #12]
   19f30:	9502      	str	r5, [sp, #8]
   19f32:	9401      	str	r4, [sp, #4]
   19f34:	9100      	str	r1, [sp, #0]
   19f36:	0033      	movs	r3, r6
   19f38:	213f      	movs	r1, #63	; 0x3f
   19f3a:	4c0e      	ldr	r4, [pc, #56]	; (19f74 <MQTT_HandleImuMessages+0x88>)
   19f3c:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   19f3e:	4b0c      	ldr	r3, [pc, #48]	; (19f70 <MQTT_HandleImuMessages+0x84>)
   19f40:	0018      	movs	r0, r3
   19f42:	4b0d      	ldr	r3, [pc, #52]	; (19f78 <MQTT_HandleImuMessages+0x8c>)
   19f44:	4798      	blx	r3
   19f46:	0004      	movs	r4, r0
   19f48:	4a09      	ldr	r2, [pc, #36]	; (19f70 <MQTT_HandleImuMessages+0x84>)
   19f4a:	490c      	ldr	r1, [pc, #48]	; (19f7c <MQTT_HandleImuMessages+0x90>)
   19f4c:	480c      	ldr	r0, [pc, #48]	; (19f80 <MQTT_HandleImuMessages+0x94>)
   19f4e:	2300      	movs	r3, #0
   19f50:	9301      	str	r3, [sp, #4]
   19f52:	2301      	movs	r3, #1
   19f54:	9300      	str	r3, [sp, #0]
   19f56:	0023      	movs	r3, r4
   19f58:	4c0a      	ldr	r4, [pc, #40]	; (19f84 <MQTT_HandleImuMessages+0x98>)
   19f5a:	47a0      	blx	r4
	}
}
   19f5c:	46c0      	nop			; (mov r8, r8)
   19f5e:	46bd      	mov	sp, r7
   19f60:	b003      	add	sp, #12
   19f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19f64:	20000550 	.word	0x20000550
   19f68:	0001ddc5 	.word	0x0001ddc5
   19f6c:	0003b1fc 	.word	0x0003b1fc
   19f70:	200000ac 	.word	0x200000ac
   19f74:	00038761 	.word	0x00038761
   19f78:	000388bf 	.word	0x000388bf
   19f7c:	0003b0c0 	.word	0x0003b0c0
   19f80:	200007b8 	.word	0x200007b8
   19f84:	0003294d 	.word	0x0003294d

00019f88 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   19f88:	b590      	push	{r4, r7, lr}
   19f8a:	b085      	sub	sp, #20
   19f8c:	af02      	add	r7, sp, #8
    struct HrPacket HrinfoPacket;
    if (pdPASS == xQueueReceive(xQueueHrBuffer, &HrinfoPacket, 0)) {
   19f8e:	4b14      	ldr	r3, [pc, #80]	; (19fe0 <MQTT_HandleGameMessages+0x58>)
   19f90:	681b      	ldr	r3, [r3, #0]
   19f92:	1d39      	adds	r1, r7, #4
   19f94:	2200      	movs	r2, #0
   19f96:	0018      	movs	r0, r3
   19f98:	4b12      	ldr	r3, [pc, #72]	; (19fe4 <MQTT_HandleGameMessages+0x5c>)
   19f9a:	4798      	blx	r3
   19f9c:	0003      	movs	r3, r0
   19f9e:	2b01      	cmp	r3, #1
   19fa0:	d11a      	bne.n	19fd8 <MQTT_HandleGameMessages+0x50>
     snprintf(mqtt_msg, 63, "{\"hr\":%d, \"spo2\": %d}", HrinfoPacket.hr, HrinfoPacket.spo2);
   19fa2:	1d3b      	adds	r3, r7, #4
   19fa4:	781b      	ldrb	r3, [r3, #0]
   19fa6:	0019      	movs	r1, r3
   19fa8:	1d3b      	adds	r3, r7, #4
   19faa:	785b      	ldrb	r3, [r3, #1]
   19fac:	4a0e      	ldr	r2, [pc, #56]	; (19fe8 <MQTT_HandleGameMessages+0x60>)
   19fae:	480f      	ldr	r0, [pc, #60]	; (19fec <MQTT_HandleGameMessages+0x64>)
   19fb0:	9300      	str	r3, [sp, #0]
   19fb2:	000b      	movs	r3, r1
   19fb4:	213f      	movs	r1, #63	; 0x3f
   19fb6:	4c0e      	ldr	r4, [pc, #56]	; (19ff0 <MQTT_HandleGameMessages+0x68>)
   19fb8:	47a0      	blx	r4
     mqtt_publish(&mqtt_inst, Hr_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   19fba:	4b0c      	ldr	r3, [pc, #48]	; (19fec <MQTT_HandleGameMessages+0x64>)
   19fbc:	0018      	movs	r0, r3
   19fbe:	4b0d      	ldr	r3, [pc, #52]	; (19ff4 <MQTT_HandleGameMessages+0x6c>)
   19fc0:	4798      	blx	r3
   19fc2:	0004      	movs	r4, r0
   19fc4:	4a09      	ldr	r2, [pc, #36]	; (19fec <MQTT_HandleGameMessages+0x64>)
   19fc6:	490c      	ldr	r1, [pc, #48]	; (19ff8 <MQTT_HandleGameMessages+0x70>)
   19fc8:	480c      	ldr	r0, [pc, #48]	; (19ffc <MQTT_HandleGameMessages+0x74>)
   19fca:	2300      	movs	r3, #0
   19fcc:	9301      	str	r3, [sp, #4]
   19fce:	2301      	movs	r3, #1
   19fd0:	9300      	str	r3, [sp, #0]
   19fd2:	0023      	movs	r3, r4
   19fd4:	4c0a      	ldr	r4, [pc, #40]	; (1a000 <MQTT_HandleGameMessages+0x78>)
   19fd6:	47a0      	blx	r4
    }
}
   19fd8:	46c0      	nop			; (mov r8, r8)
   19fda:	46bd      	mov	sp, r7
   19fdc:	b003      	add	sp, #12
   19fde:	bd90      	pop	{r4, r7, pc}
   19fe0:	2000054c 	.word	0x2000054c
   19fe4:	0001ddc5 	.word	0x0001ddc5
   19fe8:	0003b230 	.word	0x0003b230
   19fec:	200000ac 	.word	0x200000ac
   19ff0:	00038761 	.word	0x00038761
   19ff4:	000388bf 	.word	0x000388bf
   19ff8:	0003b0b4 	.word	0x0003b0b4
   19ffc:	200007b8 	.word	0x200007b8
   1a000:	0003294d 	.word	0x0003294d

0001a004 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   1a004:	b590      	push	{r4, r7, lr}
   1a006:	b08d      	sub	sp, #52	; 0x34
   1a008:	af02      	add	r7, sp, #8
   1a00a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   1a00c:	2064      	movs	r0, #100	; 0x64
   1a00e:	4b79      	ldr	r3, [pc, #484]	; (1a1f4 <vWifiTask+0x1f0>)
   1a010:	4798      	blx	r3
    init_state();
   1a012:	4b79      	ldr	r3, [pc, #484]	; (1a1f8 <vWifiTask+0x1f4>)
   1a014:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   1a016:	2200      	movs	r2, #0
   1a018:	2104      	movs	r1, #4
   1a01a:	2005      	movs	r0, #5
   1a01c:	4b77      	ldr	r3, [pc, #476]	; (1a1fc <vWifiTask+0x1f8>)
   1a01e:	4798      	blx	r3
   1a020:	0002      	movs	r2, r0
   1a022:	4b77      	ldr	r3, [pc, #476]	; (1a200 <vWifiTask+0x1fc>)
   1a024:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   1a026:	2200      	movs	r2, #0
   1a028:	2108      	movs	r1, #8
   1a02a:	2005      	movs	r0, #5
   1a02c:	4b73      	ldr	r3, [pc, #460]	; (1a1fc <vWifiTask+0x1f8>)
   1a02e:	4798      	blx	r3
   1a030:	0002      	movs	r2, r0
   1a032:	4b74      	ldr	r3, [pc, #464]	; (1a204 <vWifiTask+0x200>)
   1a034:	601a      	str	r2, [r3, #0]
    xQueueHrBuffer = xQueueCreate(2, sizeof(struct HrPacket));
   1a036:	2200      	movs	r2, #0
   1a038:	2102      	movs	r1, #2
   1a03a:	2002      	movs	r0, #2
   1a03c:	4b6f      	ldr	r3, [pc, #444]	; (1a1fc <vWifiTask+0x1f8>)
   1a03e:	4798      	blx	r3
   1a040:	0002      	movs	r2, r0
   1a042:	4b71      	ldr	r3, [pc, #452]	; (1a208 <vWifiTask+0x204>)
   1a044:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   1a046:	2200      	movs	r2, #0
   1a048:	2102      	movs	r1, #2
   1a04a:	2005      	movs	r0, #5
   1a04c:	4b6b      	ldr	r3, [pc, #428]	; (1a1fc <vWifiTask+0x1f8>)
   1a04e:	4798      	blx	r3
   1a050:	0002      	movs	r2, r0
   1a052:	4b6e      	ldr	r3, [pc, #440]	; (1a20c <vWifiTask+0x208>)
   1a054:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueHrBuffer == NULL || xQueueDistanceBuffer == NULL) {
   1a056:	4b6a      	ldr	r3, [pc, #424]	; (1a200 <vWifiTask+0x1fc>)
   1a058:	681b      	ldr	r3, [r3, #0]
   1a05a:	2b00      	cmp	r3, #0
   1a05c:	d00b      	beq.n	1a076 <vWifiTask+0x72>
   1a05e:	4b69      	ldr	r3, [pc, #420]	; (1a204 <vWifiTask+0x200>)
   1a060:	681b      	ldr	r3, [r3, #0]
   1a062:	2b00      	cmp	r3, #0
   1a064:	d007      	beq.n	1a076 <vWifiTask+0x72>
   1a066:	4b68      	ldr	r3, [pc, #416]	; (1a208 <vWifiTask+0x204>)
   1a068:	681b      	ldr	r3, [r3, #0]
   1a06a:	2b00      	cmp	r3, #0
   1a06c:	d003      	beq.n	1a076 <vWifiTask+0x72>
   1a06e:	4b67      	ldr	r3, [pc, #412]	; (1a20c <vWifiTask+0x208>)
   1a070:	681b      	ldr	r3, [r3, #0]
   1a072:	2b00      	cmp	r3, #0
   1a074:	d103      	bne.n	1a07e <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   1a076:	4b66      	ldr	r3, [pc, #408]	; (1a210 <vWifiTask+0x20c>)
   1a078:	0018      	movs	r0, r3
   1a07a:	4b66      	ldr	r3, [pc, #408]	; (1a214 <vWifiTask+0x210>)
   1a07c:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   1a07e:	4b66      	ldr	r3, [pc, #408]	; (1a218 <vWifiTask+0x214>)
   1a080:	0018      	movs	r0, r3
   1a082:	4b64      	ldr	r3, [pc, #400]	; (1a214 <vWifiTask+0x210>)
   1a084:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   1a086:	4b65      	ldr	r3, [pc, #404]	; (1a21c <vWifiTask+0x218>)
   1a088:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   1a08a:	4b65      	ldr	r3, [pc, #404]	; (1a220 <vWifiTask+0x21c>)
   1a08c:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   1a08e:	4b65      	ldr	r3, [pc, #404]	; (1a224 <vWifiTask+0x220>)
   1a090:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   1a092:	4b65      	ldr	r3, [pc, #404]	; (1a228 <vWifiTask+0x224>)
   1a094:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   1a096:	4b65      	ldr	r3, [pc, #404]	; (1a22c <vWifiTask+0x228>)
   1a098:	4798      	blx	r3
    configure_extint_callbacks();
   1a09a:	4b65      	ldr	r3, [pc, #404]	; (1a230 <vWifiTask+0x22c>)
   1a09c:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   1a09e:	230c      	movs	r3, #12
   1a0a0:	18fb      	adds	r3, r7, r3
   1a0a2:	2218      	movs	r2, #24
   1a0a4:	2100      	movs	r1, #0
   1a0a6:	0018      	movs	r0, r3
   1a0a8:	4b62      	ldr	r3, [pc, #392]	; (1a234 <vWifiTask+0x230>)
   1a0aa:	4798      	blx	r3

    nm_bsp_init();
   1a0ac:	4b62      	ldr	r3, [pc, #392]	; (1a238 <vWifiTask+0x234>)
   1a0ae:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   1a0b0:	230c      	movs	r3, #12
   1a0b2:	18fb      	adds	r3, r7, r3
   1a0b4:	4a61      	ldr	r2, [pc, #388]	; (1a23c <vWifiTask+0x238>)
   1a0b6:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   1a0b8:	2327      	movs	r3, #39	; 0x27
   1a0ba:	18fc      	adds	r4, r7, r3
   1a0bc:	230c      	movs	r3, #12
   1a0be:	18fb      	adds	r3, r7, r3
   1a0c0:	0018      	movs	r0, r3
   1a0c2:	4b5f      	ldr	r3, [pc, #380]	; (1a240 <vWifiTask+0x23c>)
   1a0c4:	4798      	blx	r3
   1a0c6:	0003      	movs	r3, r0
   1a0c8:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   1a0ca:	2327      	movs	r3, #39	; 0x27
   1a0cc:	18fb      	adds	r3, r7, r3
   1a0ce:	781b      	ldrb	r3, [r3, #0]
   1a0d0:	b25b      	sxtb	r3, r3
   1a0d2:	2b00      	cmp	r3, #0
   1a0d4:	d009      	beq.n	1a0ea <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1a0d6:	2327      	movs	r3, #39	; 0x27
   1a0d8:	18fb      	adds	r3, r7, r3
   1a0da:	2200      	movs	r2, #0
   1a0dc:	569a      	ldrsb	r2, [r3, r2]
   1a0de:	4b59      	ldr	r3, [pc, #356]	; (1a244 <vWifiTask+0x240>)
   1a0e0:	0019      	movs	r1, r3
   1a0e2:	2001      	movs	r0, #1
   1a0e4:	4b58      	ldr	r3, [pc, #352]	; (1a248 <vWifiTask+0x244>)
   1a0e6:	4798      	blx	r3
        while (1) {
   1a0e8:	e7fe      	b.n	1a0e8 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   1a0ea:	4a58      	ldr	r2, [pc, #352]	; (1a24c <vWifiTask+0x248>)
   1a0ec:	4b58      	ldr	r3, [pc, #352]	; (1a250 <vWifiTask+0x24c>)
   1a0ee:	0019      	movs	r1, r3
   1a0f0:	2001      	movs	r0, #1
   1a0f2:	4b55      	ldr	r3, [pc, #340]	; (1a248 <vWifiTask+0x244>)
   1a0f4:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   1a0f6:	4b57      	ldr	r3, [pc, #348]	; (1a254 <vWifiTask+0x250>)
   1a0f8:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   1a0fa:	4a57      	ldr	r2, [pc, #348]	; (1a258 <vWifiTask+0x254>)
   1a0fc:	4b57      	ldr	r3, [pc, #348]	; (1a25c <vWifiTask+0x258>)
   1a0fe:	0011      	movs	r1, r2
   1a100:	0018      	movs	r0, r3
   1a102:	4b57      	ldr	r3, [pc, #348]	; (1a260 <vWifiTask+0x25c>)
   1a104:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1a106:	4a57      	ldr	r2, [pc, #348]	; (1a264 <vWifiTask+0x260>)
   1a108:	4850      	ldr	r0, [pc, #320]	; (1a24c <vWifiTask+0x248>)
   1a10a:	23ff      	movs	r3, #255	; 0xff
   1a10c:	9300      	str	r3, [sp, #0]
   1a10e:	0013      	movs	r3, r2
   1a110:	2202      	movs	r2, #2
   1a112:	2105      	movs	r1, #5
   1a114:	4c54      	ldr	r4, [pc, #336]	; (1a268 <vWifiTask+0x264>)
   1a116:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   1a118:	e006      	b.n	1a128 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1a11a:	2000      	movs	r0, #0
   1a11c:	4b53      	ldr	r3, [pc, #332]	; (1a26c <vWifiTask+0x268>)
   1a11e:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1a120:	4b53      	ldr	r3, [pc, #332]	; (1a270 <vWifiTask+0x26c>)
   1a122:	0018      	movs	r0, r3
   1a124:	4b53      	ldr	r3, [pc, #332]	; (1a274 <vWifiTask+0x270>)
   1a126:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   1a128:	2002      	movs	r0, #2
   1a12a:	4b53      	ldr	r3, [pc, #332]	; (1a278 <vWifiTask+0x274>)
   1a12c:	4798      	blx	r3
   1a12e:	0003      	movs	r3, r0
   1a130:	001a      	movs	r2, r3
   1a132:	2301      	movs	r3, #1
   1a134:	4053      	eors	r3, r2
   1a136:	b2db      	uxtb	r3, r3
   1a138:	2b00      	cmp	r3, #0
   1a13a:	d1ee      	bne.n	1a11a <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   1a13c:	23fa      	movs	r3, #250	; 0xfa
   1a13e:	009b      	lsls	r3, r3, #2
   1a140:	0018      	movs	r0, r3
   1a142:	4b2c      	ldr	r3, [pc, #176]	; (1a1f4 <vWifiTask+0x1f0>)
   1a144:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   1a146:	4b4d      	ldr	r3, [pc, #308]	; (1a27c <vWifiTask+0x278>)
   1a148:	2201      	movs	r2, #1
   1a14a:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   1a14c:	4b4b      	ldr	r3, [pc, #300]	; (1a27c <vWifiTask+0x278>)
   1a14e:	781b      	ldrb	r3, [r3, #0]
   1a150:	b25b      	sxtb	r3, r3
   1a152:	2b01      	cmp	r3, #1
   1a154:	d00b      	beq.n	1a16e <vWifiTask+0x16a>
   1a156:	dc02      	bgt.n	1a15e <vWifiTask+0x15a>
   1a158:	2b00      	cmp	r3, #0
   1a15a:	d005      	beq.n	1a168 <vWifiTask+0x164>
   1a15c:	e010      	b.n	1a180 <vWifiTask+0x17c>
   1a15e:	2b02      	cmp	r3, #2
   1a160:	d008      	beq.n	1a174 <vWifiTask+0x170>
   1a162:	2b03      	cmp	r3, #3
   1a164:	d009      	beq.n	1a17a <vWifiTask+0x176>
   1a166:	e00b      	b.n	1a180 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   1a168:	4b45      	ldr	r3, [pc, #276]	; (1a280 <vWifiTask+0x27c>)
   1a16a:	4798      	blx	r3

                break;
   1a16c:	e00c      	b.n	1a188 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   1a16e:	4b45      	ldr	r3, [pc, #276]	; (1a284 <vWifiTask+0x280>)
   1a170:	4798      	blx	r3
                break;
   1a172:	e009      	b.n	1a188 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   1a174:	4b44      	ldr	r3, [pc, #272]	; (1a288 <vWifiTask+0x284>)
   1a176:	4798      	blx	r3
                break;
   1a178:	e006      	b.n	1a188 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   1a17a:	4b44      	ldr	r3, [pc, #272]	; (1a28c <vWifiTask+0x288>)
   1a17c:	4798      	blx	r3
                break;
   1a17e:	e003      	b.n	1a188 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   1a180:	4b3e      	ldr	r3, [pc, #248]	; (1a27c <vWifiTask+0x278>)
   1a182:	2200      	movs	r2, #0
   1a184:	701a      	strb	r2, [r3, #0]
                break;
   1a186:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   1a188:	230b      	movs	r3, #11
   1a18a:	18fb      	adds	r3, r7, r3
   1a18c:	2200      	movs	r2, #0
   1a18e:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   1a190:	4b1b      	ldr	r3, [pc, #108]	; (1a200 <vWifiTask+0x1fc>)
   1a192:	681b      	ldr	r3, [r3, #0]
   1a194:	220b      	movs	r2, #11
   1a196:	18b9      	adds	r1, r7, r2
   1a198:	2200      	movs	r2, #0
   1a19a:	0018      	movs	r0, r3
   1a19c:	4b3c      	ldr	r3, [pc, #240]	; (1a290 <vWifiTask+0x28c>)
   1a19e:	4798      	blx	r3
   1a1a0:	0003      	movs	r3, r0
   1a1a2:	2b01      	cmp	r3, #1
   1a1a4:	d105      	bne.n	1a1b2 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   1a1a6:	230b      	movs	r3, #11
   1a1a8:	18fb      	adds	r3, r7, r3
   1a1aa:	781b      	ldrb	r3, [r3, #0]
   1a1ac:	b25a      	sxtb	r2, r3
   1a1ae:	4b33      	ldr	r3, [pc, #204]	; (1a27c <vWifiTask+0x278>)
   1a1b0:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   1a1b2:	4b38      	ldr	r3, [pc, #224]	; (1a294 <vWifiTask+0x290>)
   1a1b4:	781b      	ldrb	r3, [r3, #0]
   1a1b6:	b2db      	uxtb	r3, r3
   1a1b8:	2b00      	cmp	r3, #0
   1a1ba:	d017      	beq.n	1a1ec <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1a1bc:	4b36      	ldr	r3, [pc, #216]	; (1a298 <vWifiTask+0x294>)
   1a1be:	0018      	movs	r0, r3
   1a1c0:	4b36      	ldr	r3, [pc, #216]	; (1a29c <vWifiTask+0x298>)
   1a1c2:	4798      	blx	r3
   1a1c4:	0004      	movs	r4, r0
   1a1c6:	4a34      	ldr	r2, [pc, #208]	; (1a298 <vWifiTask+0x294>)
   1a1c8:	4935      	ldr	r1, [pc, #212]	; (1a2a0 <vWifiTask+0x29c>)
   1a1ca:	4836      	ldr	r0, [pc, #216]	; (1a2a4 <vWifiTask+0x2a0>)
   1a1cc:	2300      	movs	r3, #0
   1a1ce:	9301      	str	r3, [sp, #4]
   1a1d0:	2301      	movs	r3, #1
   1a1d2:	9300      	str	r3, [sp, #0]
   1a1d4:	0023      	movs	r3, r4
   1a1d6:	4c34      	ldr	r4, [pc, #208]	; (1a2a8 <vWifiTask+0x2a4>)
   1a1d8:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1a1da:	4a2f      	ldr	r2, [pc, #188]	; (1a298 <vWifiTask+0x294>)
   1a1dc:	4b33      	ldr	r3, [pc, #204]	; (1a2ac <vWifiTask+0x2a8>)
   1a1de:	0019      	movs	r1, r3
   1a1e0:	2001      	movs	r0, #1
   1a1e2:	4b19      	ldr	r3, [pc, #100]	; (1a248 <vWifiTask+0x244>)
   1a1e4:	4798      	blx	r3
            isPressed = false;
   1a1e6:	4b2b      	ldr	r3, [pc, #172]	; (1a294 <vWifiTask+0x290>)
   1a1e8:	2200      	movs	r2, #0
   1a1ea:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1a1ec:	2064      	movs	r0, #100	; 0x64
   1a1ee:	4b01      	ldr	r3, [pc, #4]	; (1a1f4 <vWifiTask+0x1f0>)
   1a1f0:	4798      	blx	r3
    while (1) {
   1a1f2:	e7ab      	b.n	1a14c <vWifiTask+0x148>
   1a1f4:	0001ef71 	.word	0x0001ef71
   1a1f8:	00018ce9 	.word	0x00018ce9
   1a1fc:	0001d265 	.word	0x0001d265
   1a200:	20000548 	.word	0x20000548
   1a204:	20000550 	.word	0x20000550
   1a208:	2000054c 	.word	0x2000054c
   1a20c:	20000554 	.word	0x20000554
   1a210:	0003b248 	.word	0x0003b248
   1a214:	00020bc5 	.word	0x00020bc5
   1a218:	0003b270 	.word	0x0003b270
   1a21c:	00019725 	.word	0x00019725
   1a220:	00019761 	.word	0x00019761
   1a224:	00019b09 	.word	0x00019b09
   1a228:	00019641 	.word	0x00019641
   1a22c:	00019bc1 	.word	0x00019bc1
   1a230:	00019c01 	.word	0x00019c01
   1a234:	00038507 	.word	0x00038507
   1a238:	0002326d 	.word	0x0002326d
   1a23c:	000194ed 	.word	0x000194ed
   1a240:	00024d45 	.word	0x00024d45
   1a244:	0003b28c 	.word	0x0003b28c
   1a248:	00020cb1 	.word	0x00020cb1
   1a24c:	0003ad80 	.word	0x0003ad80
   1a250:	0003b2b8 	.word	0x0003b2b8
   1a254:	000284a5 	.word	0x000284a5
   1a258:	00019809 	.word	0x00019809
   1a25c:	000197d5 	.word	0x000197d5
   1a260:	0002853d 	.word	0x0002853d
   1a264:	0003ad74 	.word	0x0003ad74
   1a268:	00024f55 	.word	0x00024f55
   1a26c:	00024f39 	.word	0x00024f39
   1a270:	200048c4 	.word	0x200048c4
   1a274:	0003562d 	.word	0x0003562d
   1a278:	00018d59 	.word	0x00018d59
   1a27c:	20000544 	.word	0x20000544
   1a280:	00019e01 	.word	0x00019e01
   1a284:	00019e9d 	.word	0x00019e9d
   1a288:	00019c79 	.word	0x00019c79
   1a28c:	00019d0d 	.word	0x00019d0d
   1a290:	0001ddc5 	.word	0x0001ddc5
   1a294:	20000bf0 	.word	0x20000bf0
   1a298:	200000ec 	.word	0x200000ec
   1a29c:	000388bf 	.word	0x000388bf
   1a2a0:	0003b2dc 	.word	0x0003b2dc
   1a2a4:	200007b8 	.word	0x200007b8
   1a2a8:	0003294d 	.word	0x0003294d
   1a2ac:	0003b2f8 	.word	0x0003b2f8

0001a2b0 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   1a2b0:	b590      	push	{r4, r7, lr}
   1a2b2:	b083      	sub	sp, #12
   1a2b4:	af00      	add	r7, sp, #0
   1a2b6:	0002      	movs	r2, r0
   1a2b8:	1dfb      	adds	r3, r7, #7
   1a2ba:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   1a2bc:	1dfb      	adds	r3, r7, #7
   1a2be:	781b      	ldrb	r3, [r3, #0]
   1a2c0:	2b03      	cmp	r3, #3
   1a2c2:	d806      	bhi.n	1a2d2 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   1a2c4:	4b05      	ldr	r3, [pc, #20]	; (1a2dc <WifiHandlerSetState+0x2c>)
   1a2c6:	6818      	ldr	r0, [r3, #0]
   1a2c8:	1df9      	adds	r1, r7, #7
   1a2ca:	2300      	movs	r3, #0
   1a2cc:	220a      	movs	r2, #10
   1a2ce:	4c04      	ldr	r4, [pc, #16]	; (1a2e0 <WifiHandlerSetState+0x30>)
   1a2d0:	47a0      	blx	r4
    }
}
   1a2d2:	46c0      	nop			; (mov r8, r8)
   1a2d4:	46bd      	mov	sp, r7
   1a2d6:	b003      	add	sp, #12
   1a2d8:	bd90      	pop	{r4, r7, pc}
   1a2da:	46c0      	nop			; (mov r8, r8)
   1a2dc:	20000548 	.word	0x20000548
   1a2e0:	0001d50d 	.word	0x0001d50d

0001a2e4 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   1a2e4:	b590      	push	{r4, r7, lr}
   1a2e6:	b085      	sub	sp, #20
   1a2e8:	af00      	add	r7, sp, #0
   1a2ea:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   1a2ec:	4b06      	ldr	r3, [pc, #24]	; (1a308 <WifiAddImuDataToQueue+0x24>)
   1a2ee:	6818      	ldr	r0, [r3, #0]
   1a2f0:	6879      	ldr	r1, [r7, #4]
   1a2f2:	2300      	movs	r3, #0
   1a2f4:	220a      	movs	r2, #10
   1a2f6:	4c05      	ldr	r4, [pc, #20]	; (1a30c <WifiAddImuDataToQueue+0x28>)
   1a2f8:	47a0      	blx	r4
   1a2fa:	0003      	movs	r3, r0
   1a2fc:	60fb      	str	r3, [r7, #12]
    return error;
   1a2fe:	68fb      	ldr	r3, [r7, #12]
}
   1a300:	0018      	movs	r0, r3
   1a302:	46bd      	mov	sp, r7
   1a304:	b005      	add	sp, #20
   1a306:	bd90      	pop	{r4, r7, pc}
   1a308:	20000550 	.word	0x20000550
   1a30c:	0001d50d 	.word	0x0001d50d

0001a310 <WifiAddHrDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddHrDataToQueue(struct HrPacket *hrinfo)
{
   1a310:	b590      	push	{r4, r7, lr}
   1a312:	b085      	sub	sp, #20
   1a314:	af00      	add	r7, sp, #0
   1a316:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueHrBuffer, hrinfo, (TickType_t)10);
   1a318:	4b06      	ldr	r3, [pc, #24]	; (1a334 <WifiAddHrDataToQueue+0x24>)
   1a31a:	6818      	ldr	r0, [r3, #0]
   1a31c:	6879      	ldr	r1, [r7, #4]
   1a31e:	2300      	movs	r3, #0
   1a320:	220a      	movs	r2, #10
   1a322:	4c05      	ldr	r4, [pc, #20]	; (1a338 <WifiAddHrDataToQueue+0x28>)
   1a324:	47a0      	blx	r4
   1a326:	0003      	movs	r3, r0
   1a328:	60fb      	str	r3, [r7, #12]
    return error;
   1a32a:	68fb      	ldr	r3, [r7, #12]
}
   1a32c:	0018      	movs	r0, r3
   1a32e:	46bd      	mov	sp, r7
   1a330:	b005      	add	sp, #20
   1a332:	bd90      	pop	{r4, r7, pc}
   1a334:	2000054c 	.word	0x2000054c
   1a338:	0001d50d 	.word	0x0001d50d

0001a33c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1a33c:	b580      	push	{r7, lr}
   1a33e:	b082      	sub	sp, #8
   1a340:	af00      	add	r7, sp, #0
   1a342:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   1a344:	687b      	ldr	r3, [r7, #4]
   1a346:	2200      	movs	r2, #0
   1a348:	701a      	strb	r2, [r3, #0]
}
   1a34a:	46c0      	nop			; (mov r8, r8)
   1a34c:	46bd      	mov	sp, r7
   1a34e:	b002      	add	sp, #8
   1a350:	bd80      	pop	{r7, pc}
	...

0001a354 <system_apb_clock_set_mask>:
{
   1a354:	b580      	push	{r7, lr}
   1a356:	b082      	sub	sp, #8
   1a358:	af00      	add	r7, sp, #0
   1a35a:	0002      	movs	r2, r0
   1a35c:	6039      	str	r1, [r7, #0]
   1a35e:	1dfb      	adds	r3, r7, #7
   1a360:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1a362:	1dfb      	adds	r3, r7, #7
   1a364:	781b      	ldrb	r3, [r3, #0]
   1a366:	2b01      	cmp	r3, #1
   1a368:	d00a      	beq.n	1a380 <system_apb_clock_set_mask+0x2c>
   1a36a:	2b02      	cmp	r3, #2
   1a36c:	d00f      	beq.n	1a38e <system_apb_clock_set_mask+0x3a>
   1a36e:	2b00      	cmp	r3, #0
   1a370:	d114      	bne.n	1a39c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1a372:	4b0e      	ldr	r3, [pc, #56]	; (1a3ac <system_apb_clock_set_mask+0x58>)
   1a374:	4a0d      	ldr	r2, [pc, #52]	; (1a3ac <system_apb_clock_set_mask+0x58>)
   1a376:	6991      	ldr	r1, [r2, #24]
   1a378:	683a      	ldr	r2, [r7, #0]
   1a37a:	430a      	orrs	r2, r1
   1a37c:	619a      	str	r2, [r3, #24]
			break;
   1a37e:	e00f      	b.n	1a3a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1a380:	4b0a      	ldr	r3, [pc, #40]	; (1a3ac <system_apb_clock_set_mask+0x58>)
   1a382:	4a0a      	ldr	r2, [pc, #40]	; (1a3ac <system_apb_clock_set_mask+0x58>)
   1a384:	69d1      	ldr	r1, [r2, #28]
   1a386:	683a      	ldr	r2, [r7, #0]
   1a388:	430a      	orrs	r2, r1
   1a38a:	61da      	str	r2, [r3, #28]
			break;
   1a38c:	e008      	b.n	1a3a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1a38e:	4b07      	ldr	r3, [pc, #28]	; (1a3ac <system_apb_clock_set_mask+0x58>)
   1a390:	4a06      	ldr	r2, [pc, #24]	; (1a3ac <system_apb_clock_set_mask+0x58>)
   1a392:	6a11      	ldr	r1, [r2, #32]
   1a394:	683a      	ldr	r2, [r7, #0]
   1a396:	430a      	orrs	r2, r1
   1a398:	621a      	str	r2, [r3, #32]
			break;
   1a39a:	e001      	b.n	1a3a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   1a39c:	2317      	movs	r3, #23
   1a39e:	e000      	b.n	1a3a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1a3a0:	2300      	movs	r3, #0
}
   1a3a2:	0018      	movs	r0, r3
   1a3a4:	46bd      	mov	sp, r7
   1a3a6:	b002      	add	sp, #8
   1a3a8:	bd80      	pop	{r7, pc}
   1a3aa:	46c0      	nop			; (mov r8, r8)
   1a3ac:	40000400 	.word	0x40000400

0001a3b0 <system_pinmux_get_config_defaults>:
{
   1a3b0:	b580      	push	{r7, lr}
   1a3b2:	b082      	sub	sp, #8
   1a3b4:	af00      	add	r7, sp, #0
   1a3b6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   1a3b8:	687b      	ldr	r3, [r7, #4]
   1a3ba:	2280      	movs	r2, #128	; 0x80
   1a3bc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1a3be:	687b      	ldr	r3, [r7, #4]
   1a3c0:	2200      	movs	r2, #0
   1a3c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   1a3c4:	687b      	ldr	r3, [r7, #4]
   1a3c6:	2201      	movs	r2, #1
   1a3c8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   1a3ca:	687b      	ldr	r3, [r7, #4]
   1a3cc:	2200      	movs	r2, #0
   1a3ce:	70da      	strb	r2, [r3, #3]
}
   1a3d0:	46c0      	nop			; (mov r8, r8)
   1a3d2:	46bd      	mov	sp, r7
   1a3d4:	b002      	add	sp, #8
   1a3d6:	bd80      	pop	{r7, pc}

0001a3d8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   1a3d8:	b580      	push	{r7, lr}
   1a3da:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   1a3dc:	4b05      	ldr	r3, [pc, #20]	; (1a3f4 <system_is_debugger_present+0x1c>)
   1a3de:	789b      	ldrb	r3, [r3, #2]
   1a3e0:	b2db      	uxtb	r3, r3
   1a3e2:	001a      	movs	r2, r3
   1a3e4:	2302      	movs	r3, #2
   1a3e6:	4013      	ands	r3, r2
   1a3e8:	1e5a      	subs	r2, r3, #1
   1a3ea:	4193      	sbcs	r3, r2
   1a3ec:	b2db      	uxtb	r3, r3
}
   1a3ee:	0018      	movs	r0, r3
   1a3f0:	46bd      	mov	sp, r7
   1a3f2:	bd80      	pop	{r7, pc}
   1a3f4:	41002000 	.word	0x41002000

0001a3f8 <system_interrupt_enter_critical_section>:
{
   1a3f8:	b580      	push	{r7, lr}
   1a3fa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1a3fc:	4b02      	ldr	r3, [pc, #8]	; (1a408 <system_interrupt_enter_critical_section+0x10>)
   1a3fe:	4798      	blx	r3
}
   1a400:	46c0      	nop			; (mov r8, r8)
   1a402:	46bd      	mov	sp, r7
   1a404:	bd80      	pop	{r7, pc}
   1a406:	46c0      	nop			; (mov r8, r8)
   1a408:	0002919d 	.word	0x0002919d

0001a40c <system_interrupt_leave_critical_section>:
{
   1a40c:	b580      	push	{r7, lr}
   1a40e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   1a410:	4b02      	ldr	r3, [pc, #8]	; (1a41c <system_interrupt_leave_critical_section+0x10>)
   1a412:	4798      	blx	r3
}
   1a414:	46c0      	nop			; (mov r8, r8)
   1a416:	46bd      	mov	sp, r7
   1a418:	bd80      	pop	{r7, pc}
   1a41a:	46c0      	nop			; (mov r8, r8)
   1a41c:	000291f1 	.word	0x000291f1

0001a420 <system_interrupt_disable>:
{
   1a420:	b580      	push	{r7, lr}
   1a422:	b082      	sub	sp, #8
   1a424:	af00      	add	r7, sp, #0
   1a426:	0002      	movs	r2, r0
   1a428:	1dfb      	adds	r3, r7, #7
   1a42a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1a42c:	4a07      	ldr	r2, [pc, #28]	; (1a44c <system_interrupt_disable+0x2c>)
   1a42e:	1dfb      	adds	r3, r7, #7
   1a430:	781b      	ldrb	r3, [r3, #0]
   1a432:	0019      	movs	r1, r3
   1a434:	231f      	movs	r3, #31
   1a436:	400b      	ands	r3, r1
   1a438:	2101      	movs	r1, #1
   1a43a:	4099      	lsls	r1, r3
   1a43c:	000b      	movs	r3, r1
   1a43e:	0019      	movs	r1, r3
   1a440:	2380      	movs	r3, #128	; 0x80
   1a442:	50d1      	str	r1, [r2, r3]
}
   1a444:	46c0      	nop			; (mov r8, r8)
   1a446:	46bd      	mov	sp, r7
   1a448:	b002      	add	sp, #8
   1a44a:	bd80      	pop	{r7, pc}
   1a44c:	e000e100 	.word	0xe000e100

0001a450 <i2c_master_is_syncing>:
{
   1a450:	b580      	push	{r7, lr}
   1a452:	b084      	sub	sp, #16
   1a454:	af00      	add	r7, sp, #0
   1a456:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   1a458:	687b      	ldr	r3, [r7, #4]
   1a45a:	681b      	ldr	r3, [r3, #0]
   1a45c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1a45e:	68fb      	ldr	r3, [r7, #12]
   1a460:	69db      	ldr	r3, [r3, #28]
   1a462:	2207      	movs	r2, #7
   1a464:	4013      	ands	r3, r2
   1a466:	1e5a      	subs	r2, r3, #1
   1a468:	4193      	sbcs	r3, r2
   1a46a:	b2db      	uxtb	r3, r3
}
   1a46c:	0018      	movs	r0, r3
   1a46e:	46bd      	mov	sp, r7
   1a470:	b004      	add	sp, #16
   1a472:	bd80      	pop	{r7, pc}

0001a474 <_i2c_master_wait_for_sync>:
{
   1a474:	b580      	push	{r7, lr}
   1a476:	b082      	sub	sp, #8
   1a478:	af00      	add	r7, sp, #0
   1a47a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   1a47c:	46c0      	nop			; (mov r8, r8)
   1a47e:	687b      	ldr	r3, [r7, #4]
   1a480:	0018      	movs	r0, r3
   1a482:	4b04      	ldr	r3, [pc, #16]	; (1a494 <_i2c_master_wait_for_sync+0x20>)
   1a484:	4798      	blx	r3
   1a486:	1e03      	subs	r3, r0, #0
   1a488:	d1f9      	bne.n	1a47e <_i2c_master_wait_for_sync+0xa>
}
   1a48a:	46c0      	nop			; (mov r8, r8)
   1a48c:	46bd      	mov	sp, r7
   1a48e:	b002      	add	sp, #8
   1a490:	bd80      	pop	{r7, pc}
   1a492:	46c0      	nop			; (mov r8, r8)
   1a494:	0001a451 	.word	0x0001a451

0001a498 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   1a498:	b580      	push	{r7, lr}
   1a49a:	b084      	sub	sp, #16
   1a49c:	af00      	add	r7, sp, #0
   1a49e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a4a0:	687b      	ldr	r3, [r7, #4]
   1a4a2:	681b      	ldr	r3, [r3, #0]
   1a4a4:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1a4a6:	687b      	ldr	r3, [r7, #4]
   1a4a8:	681b      	ldr	r3, [r3, #0]
   1a4aa:	0018      	movs	r0, r3
   1a4ac:	4b0d      	ldr	r3, [pc, #52]	; (1a4e4 <i2c_master_disable+0x4c>)
   1a4ae:	4798      	blx	r3
   1a4b0:	0003      	movs	r3, r0
   1a4b2:	0018      	movs	r0, r3
   1a4b4:	4b0c      	ldr	r3, [pc, #48]	; (1a4e8 <i2c_master_disable+0x50>)
   1a4b6:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   1a4b8:	687b      	ldr	r3, [r7, #4]
   1a4ba:	0018      	movs	r0, r3
   1a4bc:	4b0b      	ldr	r3, [pc, #44]	; (1a4ec <i2c_master_disable+0x54>)
   1a4be:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1a4c0:	68fb      	ldr	r3, [r7, #12]
   1a4c2:	2283      	movs	r2, #131	; 0x83
   1a4c4:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   1a4c6:	68fb      	ldr	r3, [r7, #12]
   1a4c8:	2283      	movs	r2, #131	; 0x83
   1a4ca:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   1a4cc:	68fb      	ldr	r3, [r7, #12]
   1a4ce:	681b      	ldr	r3, [r3, #0]
   1a4d0:	2202      	movs	r2, #2
   1a4d2:	4393      	bics	r3, r2
   1a4d4:	001a      	movs	r2, r3
   1a4d6:	68fb      	ldr	r3, [r7, #12]
   1a4d8:	601a      	str	r2, [r3, #0]

}
   1a4da:	46c0      	nop			; (mov r8, r8)
   1a4dc:	46bd      	mov	sp, r7
   1a4de:	b004      	add	sp, #16
   1a4e0:	bd80      	pop	{r7, pc}
   1a4e2:	46c0      	nop			; (mov r8, r8)
   1a4e4:	0002a671 	.word	0x0002a671
   1a4e8:	0001a421 	.word	0x0001a421
   1a4ec:	0001a475 	.word	0x0001a475

0001a4f0 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   1a4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4f2:	b097      	sub	sp, #92	; 0x5c
   1a4f4:	af00      	add	r7, sp, #0
   1a4f6:	6178      	str	r0, [r7, #20]
   1a4f8:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1a4fa:	2300      	movs	r3, #0
   1a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1a4fe:	2300      	movs	r3, #0
   1a500:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   1a502:	2300      	movs	r3, #0
   1a504:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   1a506:	233b      	movs	r3, #59	; 0x3b
   1a508:	2210      	movs	r2, #16
   1a50a:	4694      	mov	ip, r2
   1a50c:	44bc      	add	ip, r7
   1a50e:	4463      	add	r3, ip
   1a510:	2200      	movs	r2, #0
   1a512:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a514:	697b      	ldr	r3, [r7, #20]
   1a516:	681b      	ldr	r3, [r3, #0]
   1a518:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1a51a:	697b      	ldr	r3, [r7, #20]
   1a51c:	681b      	ldr	r3, [r3, #0]
   1a51e:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   1a520:	2323      	movs	r3, #35	; 0x23
   1a522:	2210      	movs	r2, #16
   1a524:	18ba      	adds	r2, r7, r2
   1a526:	18d4      	adds	r4, r2, r3
   1a528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a52a:	0018      	movs	r0, r3
   1a52c:	4bc0      	ldr	r3, [pc, #768]	; (1a830 <_i2c_master_set_config+0x340>)
   1a52e:	4798      	blx	r3
   1a530:	0003      	movs	r3, r0
   1a532:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   1a534:	230c      	movs	r3, #12
   1a536:	2210      	movs	r2, #16
   1a538:	4694      	mov	ip, r2
   1a53a:	44bc      	add	ip, r7
   1a53c:	4463      	add	r3, ip
   1a53e:	0018      	movs	r0, r3
   1a540:	4bbc      	ldr	r3, [pc, #752]	; (1a834 <_i2c_master_set_config+0x344>)
   1a542:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   1a544:	693b      	ldr	r3, [r7, #16]
   1a546:	69db      	ldr	r3, [r3, #28]
   1a548:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1a54a:	693b      	ldr	r3, [r7, #16]
   1a54c:	6a1b      	ldr	r3, [r3, #32]
   1a54e:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1a550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a552:	2b00      	cmp	r3, #0
   1a554:	d106      	bne.n	1a564 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   1a556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a558:	2100      	movs	r1, #0
   1a55a:	0018      	movs	r0, r3
   1a55c:	4bb6      	ldr	r3, [pc, #728]	; (1a838 <_i2c_master_set_config+0x348>)
   1a55e:	4798      	blx	r3
   1a560:	0003      	movs	r3, r0
   1a562:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   1a564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a566:	b2da      	uxtb	r2, r3
   1a568:	230c      	movs	r3, #12
   1a56a:	2110      	movs	r1, #16
   1a56c:	468c      	mov	ip, r1
   1a56e:	44bc      	add	ip, r7
   1a570:	4463      	add	r3, ip
   1a572:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1a574:	230c      	movs	r3, #12
   1a576:	2210      	movs	r2, #16
   1a578:	4694      	mov	ip, r2
   1a57a:	44bc      	add	ip, r7
   1a57c:	4463      	add	r3, ip
   1a57e:	2202      	movs	r2, #2
   1a580:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1a582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1a584:	0c1b      	lsrs	r3, r3, #16
   1a586:	b2db      	uxtb	r3, r3
   1a588:	220c      	movs	r2, #12
   1a58a:	2110      	movs	r1, #16
   1a58c:	468c      	mov	ip, r1
   1a58e:	44bc      	add	ip, r7
   1a590:	4462      	add	r2, ip
   1a592:	0011      	movs	r1, r2
   1a594:	0018      	movs	r0, r3
   1a596:	4ba9      	ldr	r3, [pc, #676]	; (1a83c <_i2c_master_set_config+0x34c>)
   1a598:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   1a59a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a59c:	2b00      	cmp	r3, #0
   1a59e:	d106      	bne.n	1a5ae <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1a5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a5a2:	2101      	movs	r1, #1
   1a5a4:	0018      	movs	r0, r3
   1a5a6:	4ba4      	ldr	r3, [pc, #656]	; (1a838 <_i2c_master_set_config+0x348>)
   1a5a8:	4798      	blx	r3
   1a5aa:	0003      	movs	r3, r0
   1a5ac:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1a5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a5b0:	b2da      	uxtb	r2, r3
   1a5b2:	230c      	movs	r3, #12
   1a5b4:	2110      	movs	r1, #16
   1a5b6:	468c      	mov	ip, r1
   1a5b8:	44bc      	add	ip, r7
   1a5ba:	4463      	add	r3, ip
   1a5bc:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1a5be:	230c      	movs	r3, #12
   1a5c0:	2210      	movs	r2, #16
   1a5c2:	4694      	mov	ip, r2
   1a5c4:	44bc      	add	ip, r7
   1a5c6:	4463      	add	r3, ip
   1a5c8:	2202      	movs	r2, #2
   1a5ca:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   1a5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1a5ce:	0c1b      	lsrs	r3, r3, #16
   1a5d0:	b2db      	uxtb	r3, r3
   1a5d2:	220c      	movs	r2, #12
   1a5d4:	2110      	movs	r1, #16
   1a5d6:	468c      	mov	ip, r1
   1a5d8:	44bc      	add	ip, r7
   1a5da:	4462      	add	r2, ip
   1a5dc:	0011      	movs	r1, r2
   1a5de:	0018      	movs	r0, r3
   1a5e0:	4b96      	ldr	r3, [pc, #600]	; (1a83c <_i2c_master_set_config+0x34c>)
   1a5e2:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   1a5e4:	693b      	ldr	r3, [r7, #16]
   1a5e6:	8a9a      	ldrh	r2, [r3, #20]
   1a5e8:	697b      	ldr	r3, [r7, #20]
   1a5ea:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   1a5ec:	693b      	ldr	r3, [r7, #16]
   1a5ee:	8ada      	ldrh	r2, [r3, #22]
   1a5f0:	697b      	ldr	r3, [r7, #20]
   1a5f2:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   1a5f4:	693b      	ldr	r3, [r7, #16]
   1a5f6:	7e1b      	ldrb	r3, [r3, #24]
   1a5f8:	2b00      	cmp	r3, #0
   1a5fa:	d103      	bne.n	1a604 <_i2c_master_set_config+0x114>
   1a5fc:	4b90      	ldr	r3, [pc, #576]	; (1a840 <_i2c_master_set_config+0x350>)
   1a5fe:	4798      	blx	r3
   1a600:	1e03      	subs	r3, r0, #0
   1a602:	d002      	beq.n	1a60a <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   1a604:	2380      	movs	r3, #128	; 0x80
   1a606:	657b      	str	r3, [r7, #84]	; 0x54
   1a608:	e001      	b.n	1a60e <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1a60a:	2300      	movs	r3, #0
   1a60c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   1a60e:	693b      	ldr	r3, [r7, #16]
   1a610:	691b      	ldr	r3, [r3, #16]
   1a612:	2b00      	cmp	r3, #0
   1a614:	d004      	beq.n	1a620 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   1a616:	693b      	ldr	r3, [r7, #16]
   1a618:	691b      	ldr	r3, [r3, #16]
   1a61a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a61c:	4313      	orrs	r3, r2
   1a61e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   1a620:	693b      	ldr	r3, [r7, #16]
   1a622:	689b      	ldr	r3, [r3, #8]
   1a624:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a626:	4313      	orrs	r3, r2
   1a628:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1a62a:	693b      	ldr	r3, [r7, #16]
   1a62c:	2224      	movs	r2, #36	; 0x24
   1a62e:	5c9b      	ldrb	r3, [r3, r2]
   1a630:	2b00      	cmp	r3, #0
   1a632:	d004      	beq.n	1a63e <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   1a634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a636:	2280      	movs	r2, #128	; 0x80
   1a638:	05d2      	lsls	r2, r2, #23
   1a63a:	4313      	orrs	r3, r2
   1a63c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1a63e:	693b      	ldr	r3, [r7, #16]
   1a640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a642:	2b00      	cmp	r3, #0
   1a644:	d004      	beq.n	1a650 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   1a646:	693b      	ldr	r3, [r7, #16]
   1a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a64a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1a64c:	4313      	orrs	r3, r2
   1a64e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1a650:	693b      	ldr	r3, [r7, #16]
   1a652:	222c      	movs	r2, #44	; 0x2c
   1a654:	5c9b      	ldrb	r3, [r3, r2]
   1a656:	2b00      	cmp	r3, #0
   1a658:	d105      	bne.n	1a666 <_i2c_master_set_config+0x176>
   1a65a:	693b      	ldr	r3, [r7, #16]
   1a65c:	689a      	ldr	r2, [r3, #8]
   1a65e:	2380      	movs	r3, #128	; 0x80
   1a660:	049b      	lsls	r3, r3, #18
   1a662:	429a      	cmp	r2, r3
   1a664:	d104      	bne.n	1a670 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   1a666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a668:	2280      	movs	r2, #128	; 0x80
   1a66a:	0512      	lsls	r2, r2, #20
   1a66c:	4313      	orrs	r3, r2
   1a66e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1a670:	693b      	ldr	r3, [r7, #16]
   1a672:	222d      	movs	r2, #45	; 0x2d
   1a674:	5c9b      	ldrb	r3, [r3, r2]
   1a676:	2b00      	cmp	r3, #0
   1a678:	d004      	beq.n	1a684 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   1a67a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a67c:	2280      	movs	r2, #128	; 0x80
   1a67e:	0412      	lsls	r2, r2, #16
   1a680:	4313      	orrs	r3, r2
   1a682:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   1a684:	693b      	ldr	r3, [r7, #16]
   1a686:	222e      	movs	r2, #46	; 0x2e
   1a688:	5c9b      	ldrb	r3, [r3, r2]
   1a68a:	2b00      	cmp	r3, #0
   1a68c:	d004      	beq.n	1a698 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1a68e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a690:	2280      	movs	r2, #128	; 0x80
   1a692:	03d2      	lsls	r2, r2, #15
   1a694:	4313      	orrs	r3, r2
   1a696:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   1a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a69a:	681a      	ldr	r2, [r3, #0]
   1a69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1a69e:	431a      	orrs	r2, r3
   1a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a6a2:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   1a6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a6a6:	2280      	movs	r2, #128	; 0x80
   1a6a8:	0052      	lsls	r2, r2, #1
   1a6aa:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   1a6ac:	2323      	movs	r3, #35	; 0x23
   1a6ae:	2210      	movs	r2, #16
   1a6b0:	4694      	mov	ip, r2
   1a6b2:	44bc      	add	ip, r7
   1a6b4:	4463      	add	r3, ip
   1a6b6:	781b      	ldrb	r3, [r3, #0]
   1a6b8:	3314      	adds	r3, #20
   1a6ba:	b2db      	uxtb	r3, r3
   1a6bc:	0018      	movs	r0, r3
   1a6be:	4b61      	ldr	r3, [pc, #388]	; (1a844 <_i2c_master_set_config+0x354>)
   1a6c0:	4798      	blx	r3
   1a6c2:	0003      	movs	r3, r0
   1a6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   1a6c6:	693b      	ldr	r3, [r7, #16]
   1a6c8:	681b      	ldr	r3, [r3, #0]
   1a6ca:	22fa      	movs	r2, #250	; 0xfa
   1a6cc:	0092      	lsls	r2, r2, #2
   1a6ce:	4353      	muls	r3, r2
   1a6d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1a6d2:	693b      	ldr	r3, [r7, #16]
   1a6d4:	685b      	ldr	r3, [r3, #4]
   1a6d6:	22fa      	movs	r2, #250	; 0xfa
   1a6d8:	0092      	lsls	r2, r2, #2
   1a6da:	4353      	muls	r3, r2
   1a6dc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1a6de:	693b      	ldr	r3, [r7, #16]
   1a6e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1a6e2:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   1a6e4:	4b58      	ldr	r3, [pc, #352]	; (1a848 <_i2c_master_set_config+0x358>)
   1a6e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a6e8:	4798      	blx	r3
   1a6ea:	0005      	movs	r5, r0
   1a6ec:	000e      	movs	r6, r1
   1a6ee:	4b56      	ldr	r3, [pc, #344]	; (1a848 <_i2c_master_set_config+0x358>)
   1a6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1a6f2:	4798      	blx	r3
   1a6f4:	60b8      	str	r0, [r7, #8]
   1a6f6:	60f9      	str	r1, [r7, #12]
   1a6f8:	4b53      	ldr	r3, [pc, #332]	; (1a848 <_i2c_master_set_config+0x358>)
   1a6fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a6fc:	4798      	blx	r3
   1a6fe:	4c53      	ldr	r4, [pc, #332]	; (1a84c <_i2c_master_set_config+0x35c>)
   1a700:	4a53      	ldr	r2, [pc, #332]	; (1a850 <_i2c_master_set_config+0x360>)
   1a702:	4b54      	ldr	r3, [pc, #336]	; (1a854 <_i2c_master_set_config+0x364>)
   1a704:	47a0      	blx	r4
   1a706:	0003      	movs	r3, r0
   1a708:	000c      	movs	r4, r1
   1a70a:	603b      	str	r3, [r7, #0]
   1a70c:	607c      	str	r4, [r7, #4]
   1a70e:	4b4e      	ldr	r3, [pc, #312]	; (1a848 <_i2c_master_set_config+0x358>)
   1a710:	6a38      	ldr	r0, [r7, #32]
   1a712:	4798      	blx	r3
   1a714:	0002      	movs	r2, r0
   1a716:	000b      	movs	r3, r1
   1a718:	4c4c      	ldr	r4, [pc, #304]	; (1a84c <_i2c_master_set_config+0x35c>)
   1a71a:	6838      	ldr	r0, [r7, #0]
   1a71c:	6879      	ldr	r1, [r7, #4]
   1a71e:	47a0      	blx	r4
   1a720:	0003      	movs	r3, r0
   1a722:	000c      	movs	r4, r1
   1a724:	0018      	movs	r0, r3
   1a726:	0021      	movs	r1, r4
   1a728:	4c4b      	ldr	r4, [pc, #300]	; (1a858 <_i2c_master_set_config+0x368>)
   1a72a:	2200      	movs	r2, #0
   1a72c:	4b4b      	ldr	r3, [pc, #300]	; (1a85c <_i2c_master_set_config+0x36c>)
   1a72e:	47a0      	blx	r4
   1a730:	0003      	movs	r3, r0
   1a732:	000c      	movs	r4, r1
   1a734:	001a      	movs	r2, r3
   1a736:	0023      	movs	r3, r4
   1a738:	4c44      	ldr	r4, [pc, #272]	; (1a84c <_i2c_master_set_config+0x35c>)
   1a73a:	68b8      	ldr	r0, [r7, #8]
   1a73c:	68f9      	ldr	r1, [r7, #12]
   1a73e:	47a0      	blx	r4
   1a740:	0003      	movs	r3, r0
   1a742:	000c      	movs	r4, r1
   1a744:	001a      	movs	r2, r3
   1a746:	0023      	movs	r3, r4
   1a748:	4c45      	ldr	r4, [pc, #276]	; (1a860 <_i2c_master_set_config+0x370>)
   1a74a:	0028      	movs	r0, r5
   1a74c:	0031      	movs	r1, r6
   1a74e:	47a0      	blx	r4
   1a750:	0003      	movs	r3, r0
   1a752:	000c      	movs	r4, r1
   1a754:	001d      	movs	r5, r3
   1a756:	0026      	movs	r6, r4
   1a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a75a:	005a      	lsls	r2, r3, #1
   1a75c:	4b3a      	ldr	r3, [pc, #232]	; (1a848 <_i2c_master_set_config+0x358>)
   1a75e:	0010      	movs	r0, r2
   1a760:	4798      	blx	r3
   1a762:	0002      	movs	r2, r0
   1a764:	000b      	movs	r3, r1
   1a766:	4c3c      	ldr	r4, [pc, #240]	; (1a858 <_i2c_master_set_config+0x368>)
   1a768:	0028      	movs	r0, r5
   1a76a:	0031      	movs	r1, r6
   1a76c:	47a0      	blx	r4
   1a76e:	0003      	movs	r3, r0
   1a770:	000c      	movs	r4, r1
   1a772:	0018      	movs	r0, r3
   1a774:	0021      	movs	r1, r4
   1a776:	4c3a      	ldr	r4, [pc, #232]	; (1a860 <_i2c_master_set_config+0x370>)
   1a778:	2200      	movs	r2, #0
   1a77a:	4b3a      	ldr	r3, [pc, #232]	; (1a864 <_i2c_master_set_config+0x374>)
   1a77c:	47a0      	blx	r4
   1a77e:	0003      	movs	r3, r0
   1a780:	000c      	movs	r4, r1
   1a782:	001d      	movs	r5, r3
   1a784:	0026      	movs	r6, r4
   1a786:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a788:	005a      	lsls	r2, r3, #1
   1a78a:	4b2f      	ldr	r3, [pc, #188]	; (1a848 <_i2c_master_set_config+0x358>)
   1a78c:	0010      	movs	r0, r2
   1a78e:	4798      	blx	r3
   1a790:	0002      	movs	r2, r0
   1a792:	000b      	movs	r3, r1
   1a794:	4c34      	ldr	r4, [pc, #208]	; (1a868 <_i2c_master_set_config+0x378>)
   1a796:	0028      	movs	r0, r5
   1a798:	0031      	movs	r1, r6
   1a79a:	47a0      	blx	r4
   1a79c:	0003      	movs	r3, r0
   1a79e:	000c      	movs	r4, r1
   1a7a0:	0019      	movs	r1, r3
   1a7a2:	0022      	movs	r2, r4
   1a7a4:	4b31      	ldr	r3, [pc, #196]	; (1a86c <_i2c_master_set_config+0x37c>)
   1a7a6:	0008      	movs	r0, r1
   1a7a8:	0011      	movs	r1, r2
   1a7aa:	4798      	blx	r3
   1a7ac:	0003      	movs	r3, r0
   1a7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   1a7b0:	693b      	ldr	r3, [r7, #16]
   1a7b2:	689a      	ldr	r2, [r3, #8]
   1a7b4:	2380      	movs	r3, #128	; 0x80
   1a7b6:	049b      	lsls	r3, r3, #18
   1a7b8:	429a      	cmp	r2, r3
   1a7ba:	d16a      	bne.n	1a892 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   1a7bc:	4b22      	ldr	r3, [pc, #136]	; (1a848 <_i2c_master_set_config+0x358>)
   1a7be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a7c0:	4798      	blx	r3
   1a7c2:	4c25      	ldr	r4, [pc, #148]	; (1a858 <_i2c_master_set_config+0x368>)
   1a7c4:	0002      	movs	r2, r0
   1a7c6:	000b      	movs	r3, r1
   1a7c8:	47a0      	blx	r4
   1a7ca:	0003      	movs	r3, r0
   1a7cc:	000c      	movs	r4, r1
   1a7ce:	001d      	movs	r5, r3
   1a7d0:	0026      	movs	r6, r4
   1a7d2:	4b1d      	ldr	r3, [pc, #116]	; (1a848 <_i2c_master_set_config+0x358>)
   1a7d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1a7d6:	4798      	blx	r3
   1a7d8:	4c1c      	ldr	r4, [pc, #112]	; (1a84c <_i2c_master_set_config+0x35c>)
   1a7da:	2200      	movs	r2, #0
   1a7dc:	4b24      	ldr	r3, [pc, #144]	; (1a870 <_i2c_master_set_config+0x380>)
   1a7de:	47a0      	blx	r4
   1a7e0:	0003      	movs	r3, r0
   1a7e2:	000c      	movs	r4, r1
   1a7e4:	001a      	movs	r2, r3
   1a7e6:	0023      	movs	r3, r4
   1a7e8:	4c1f      	ldr	r4, [pc, #124]	; (1a868 <_i2c_master_set_config+0x378>)
   1a7ea:	0028      	movs	r0, r5
   1a7ec:	0031      	movs	r1, r6
   1a7ee:	47a0      	blx	r4
   1a7f0:	0003      	movs	r3, r0
   1a7f2:	000c      	movs	r4, r1
   1a7f4:	0018      	movs	r0, r3
   1a7f6:	0021      	movs	r1, r4
   1a7f8:	4c19      	ldr	r4, [pc, #100]	; (1a860 <_i2c_master_set_config+0x370>)
   1a7fa:	2200      	movs	r2, #0
   1a7fc:	4b19      	ldr	r3, [pc, #100]	; (1a864 <_i2c_master_set_config+0x374>)
   1a7fe:	47a0      	blx	r4
   1a800:	0003      	movs	r3, r0
   1a802:	000c      	movs	r4, r1
   1a804:	0019      	movs	r1, r3
   1a806:	0022      	movs	r2, r4
   1a808:	4b18      	ldr	r3, [pc, #96]	; (1a86c <_i2c_master_set_config+0x37c>)
   1a80a:	0008      	movs	r0, r1
   1a80c:	0011      	movs	r1, r2
   1a80e:	4798      	blx	r3
   1a810:	0003      	movs	r3, r0
   1a812:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   1a814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a816:	2b00      	cmp	r3, #0
   1a818:	d02e      	beq.n	1a878 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1a81a:	4b16      	ldr	r3, [pc, #88]	; (1a874 <_i2c_master_set_config+0x384>)
   1a81c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1a81e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1a820:	4798      	blx	r3
   1a822:	0003      	movs	r3, r0
   1a824:	1e9a      	subs	r2, r3, #2
   1a826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1a828:	1ad3      	subs	r3, r2, r3
   1a82a:	653b      	str	r3, [r7, #80]	; 0x50
   1a82c:	e031      	b.n	1a892 <_i2c_master_set_config+0x3a2>
   1a82e:	46c0      	nop			; (mov r8, r8)
   1a830:	0002a5a1 	.word	0x0002a5a1
   1a834:	0001a3b1 	.word	0x0001a3b1
   1a838:	0002a3e5 	.word	0x0002a3e5
   1a83c:	0002d191 	.word	0x0002d191
   1a840:	0001a3d9 	.word	0x0001a3d9
   1a844:	0002cf55 	.word	0x0002cf55
   1a848:	000383a9 	.word	0x000383a9
   1a84c:	00037815 	.word	0x00037815
   1a850:	e826d695 	.word	0xe826d695
   1a854:	3e112e0b 	.word	0x3e112e0b
   1a858:	00036b8d 	.word	0x00036b8d
   1a85c:	40240000 	.word	0x40240000
   1a860:	00037d15 	.word	0x00037d15
   1a864:	3ff00000 	.word	0x3ff00000
   1a868:	000371ad 	.word	0x000371ad
   1a86c:	00038341 	.word	0x00038341
   1a870:	40080000 	.word	0x40080000
   1a874:	000359f1 	.word	0x000359f1
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   1a878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a87a:	005a      	lsls	r2, r3, #1
   1a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1a87e:	18d3      	adds	r3, r2, r3
   1a880:	1e5a      	subs	r2, r3, #1
   1a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a884:	0059      	lsls	r1, r3, #1
   1a886:	4b1d      	ldr	r3, [pc, #116]	; (1a8fc <_i2c_master_set_config+0x40c>)
   1a888:	0010      	movs	r0, r2
   1a88a:	4798      	blx	r3
   1a88c:	0003      	movs	r3, r0
   1a88e:	3b01      	subs	r3, #1
   1a890:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1a892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a894:	2bff      	cmp	r3, #255	; 0xff
   1a896:	dc08      	bgt.n	1a8aa <_i2c_master_set_config+0x3ba>
   1a898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a89a:	2b00      	cmp	r3, #0
   1a89c:	db05      	blt.n	1a8aa <_i2c_master_set_config+0x3ba>
   1a89e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a8a0:	2bff      	cmp	r3, #255	; 0xff
   1a8a2:	dc02      	bgt.n	1a8aa <_i2c_master_set_config+0x3ba>
   1a8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a8a6:	2b00      	cmp	r3, #0
   1a8a8:	da06      	bge.n	1a8b8 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1a8aa:	233b      	movs	r3, #59	; 0x3b
   1a8ac:	2210      	movs	r2, #16
   1a8ae:	4694      	mov	ip, r2
   1a8b0:	44bc      	add	ip, r7
   1a8b2:	4463      	add	r3, ip
   1a8b4:	2240      	movs	r2, #64	; 0x40
   1a8b6:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   1a8b8:	233b      	movs	r3, #59	; 0x3b
   1a8ba:	2210      	movs	r2, #16
   1a8bc:	4694      	mov	ip, r2
   1a8be:	44bc      	add	ip, r7
   1a8c0:	4463      	add	r3, ip
   1a8c2:	781b      	ldrb	r3, [r3, #0]
   1a8c4:	2b40      	cmp	r3, #64	; 0x40
   1a8c6:	d00e      	beq.n	1a8e6 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1a8c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a8ca:	22ff      	movs	r2, #255	; 0xff
   1a8cc:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1a8ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1a8d0:	041b      	lsls	r3, r3, #16
   1a8d2:	0019      	movs	r1, r3
   1a8d4:	23ff      	movs	r3, #255	; 0xff
   1a8d6:	041b      	lsls	r3, r3, #16
   1a8d8:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1a8da:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1a8dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1a8de:	0612      	lsls	r2, r2, #24
   1a8e0:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a8e4:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   1a8e6:	233b      	movs	r3, #59	; 0x3b
   1a8e8:	2210      	movs	r2, #16
   1a8ea:	4694      	mov	ip, r2
   1a8ec:	44bc      	add	ip, r7
   1a8ee:	4463      	add	r3, ip
   1a8f0:	781b      	ldrb	r3, [r3, #0]
}
   1a8f2:	0018      	movs	r0, r3
   1a8f4:	46bd      	mov	sp, r7
   1a8f6:	b017      	add	sp, #92	; 0x5c
   1a8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a8fa:	46c0      	nop			; (mov r8, r8)
   1a8fc:	000359f1 	.word	0x000359f1

0001a900 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   1a900:	b590      	push	{r4, r7, lr}
   1a902:	b08b      	sub	sp, #44	; 0x2c
   1a904:	af00      	add	r7, sp, #0
   1a906:	60f8      	str	r0, [r7, #12]
   1a908:	60b9      	str	r1, [r7, #8]
   1a90a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   1a90c:	68fb      	ldr	r3, [r7, #12]
   1a90e:	68ba      	ldr	r2, [r7, #8]
   1a910:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1a912:	68fb      	ldr	r3, [r7, #12]
   1a914:	681b      	ldr	r3, [r3, #0]
   1a916:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   1a918:	68fb      	ldr	r3, [r7, #12]
   1a91a:	681b      	ldr	r3, [r3, #0]
   1a91c:	0018      	movs	r0, r3
   1a91e:	4b3b      	ldr	r3, [pc, #236]	; (1aa0c <i2c_master_init+0x10c>)
   1a920:	4798      	blx	r3
   1a922:	0003      	movs	r3, r0
   1a924:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   1a926:	6a3b      	ldr	r3, [r7, #32]
   1a928:	3302      	adds	r3, #2
   1a92a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1a92c:	6a3b      	ldr	r3, [r7, #32]
   1a92e:	3314      	adds	r3, #20
   1a930:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1a932:	2201      	movs	r2, #1
   1a934:	69fb      	ldr	r3, [r7, #28]
   1a936:	409a      	lsls	r2, r3
   1a938:	0013      	movs	r3, r2
   1a93a:	0019      	movs	r1, r3
   1a93c:	2002      	movs	r0, #2
   1a93e:	4b34      	ldr	r3, [pc, #208]	; (1aa10 <i2c_master_init+0x110>)
   1a940:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1a942:	2314      	movs	r3, #20
   1a944:	18fb      	adds	r3, r7, r3
   1a946:	0018      	movs	r0, r3
   1a948:	4b32      	ldr	r3, [pc, #200]	; (1aa14 <i2c_master_init+0x114>)
   1a94a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1a94c:	687b      	ldr	r3, [r7, #4]
   1a94e:	7b1a      	ldrb	r2, [r3, #12]
   1a950:	2314      	movs	r3, #20
   1a952:	18fb      	adds	r3, r7, r3
   1a954:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   1a956:	69bb      	ldr	r3, [r7, #24]
   1a958:	b2db      	uxtb	r3, r3
   1a95a:	2214      	movs	r2, #20
   1a95c:	18ba      	adds	r2, r7, r2
   1a95e:	0011      	movs	r1, r2
   1a960:	0018      	movs	r0, r3
   1a962:	4b2d      	ldr	r3, [pc, #180]	; (1aa18 <i2c_master_init+0x118>)
   1a964:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   1a966:	69bb      	ldr	r3, [r7, #24]
   1a968:	b2db      	uxtb	r3, r3
   1a96a:	0018      	movs	r0, r3
   1a96c:	4b2b      	ldr	r3, [pc, #172]	; (1aa1c <i2c_master_init+0x11c>)
   1a96e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1a970:	687b      	ldr	r3, [r7, #4]
   1a972:	7b1b      	ldrb	r3, [r3, #12]
   1a974:	2100      	movs	r1, #0
   1a976:	0018      	movs	r0, r3
   1a978:	4b29      	ldr	r3, [pc, #164]	; (1aa20 <i2c_master_init+0x120>)
   1a97a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   1a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a97e:	681b      	ldr	r3, [r3, #0]
   1a980:	2202      	movs	r2, #2
   1a982:	4013      	ands	r3, r2
   1a984:	d001      	beq.n	1a98a <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   1a986:	231c      	movs	r3, #28
   1a988:	e03b      	b.n	1aa02 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   1a98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a98c:	681b      	ldr	r3, [r3, #0]
   1a98e:	2201      	movs	r2, #1
   1a990:	4013      	ands	r3, r2
   1a992:	d001      	beq.n	1a998 <i2c_master_init+0x98>
		return STATUS_BUSY;
   1a994:	2305      	movs	r3, #5
   1a996:	e034      	b.n	1aa02 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   1a998:	68fb      	ldr	r3, [r7, #12]
   1a99a:	681b      	ldr	r3, [r3, #0]
   1a99c:	2217      	movs	r2, #23
   1a99e:	18bc      	adds	r4, r7, r2
   1a9a0:	0018      	movs	r0, r3
   1a9a2:	4b1a      	ldr	r3, [pc, #104]	; (1aa0c <i2c_master_init+0x10c>)
   1a9a4:	4798      	blx	r3
   1a9a6:	0003      	movs	r3, r0
   1a9a8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   1a9aa:	4a1e      	ldr	r2, [pc, #120]	; (1aa24 <i2c_master_init+0x124>)
   1a9ac:	2317      	movs	r3, #23
   1a9ae:	18fb      	adds	r3, r7, r3
   1a9b0:	781b      	ldrb	r3, [r3, #0]
   1a9b2:	0011      	movs	r1, r2
   1a9b4:	0018      	movs	r0, r3
   1a9b6:	4b1c      	ldr	r3, [pc, #112]	; (1aa28 <i2c_master_init+0x128>)
   1a9b8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1a9ba:	2317      	movs	r3, #23
   1a9bc:	18fb      	adds	r3, r7, r3
   1a9be:	781a      	ldrb	r2, [r3, #0]
   1a9c0:	4b1a      	ldr	r3, [pc, #104]	; (1aa2c <i2c_master_init+0x12c>)
   1a9c2:	0092      	lsls	r2, r2, #2
   1a9c4:	68f9      	ldr	r1, [r7, #12]
   1a9c6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   1a9c8:	68fb      	ldr	r3, [r7, #12]
   1a9ca:	2200      	movs	r2, #0
   1a9cc:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1a9ce:	68fb      	ldr	r3, [r7, #12]
   1a9d0:	2200      	movs	r2, #0
   1a9d2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   1a9d4:	68fb      	ldr	r3, [r7, #12]
   1a9d6:	2200      	movs	r2, #0
   1a9d8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1a9da:	68fb      	ldr	r3, [r7, #12]
   1a9dc:	2200      	movs	r2, #0
   1a9de:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   1a9e0:	68fb      	ldr	r3, [r7, #12]
   1a9e2:	2225      	movs	r2, #37	; 0x25
   1a9e4:	2100      	movs	r1, #0
   1a9e6:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   1a9e8:	68fb      	ldr	r3, [r7, #12]
   1a9ea:	2200      	movs	r2, #0
   1a9ec:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a9f0:	2214      	movs	r2, #20
   1a9f2:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   1a9f4:	687a      	ldr	r2, [r7, #4]
   1a9f6:	68fb      	ldr	r3, [r7, #12]
   1a9f8:	0011      	movs	r1, r2
   1a9fa:	0018      	movs	r0, r3
   1a9fc:	4b0c      	ldr	r3, [pc, #48]	; (1aa30 <i2c_master_init+0x130>)
   1a9fe:	4798      	blx	r3
   1aa00:	0003      	movs	r3, r0
}
   1aa02:	0018      	movs	r0, r3
   1aa04:	46bd      	mov	sp, r7
   1aa06:	b00b      	add	sp, #44	; 0x2c
   1aa08:	bd90      	pop	{r4, r7, pc}
   1aa0a:	46c0      	nop			; (mov r8, r8)
   1aa0c:	0002a5a1 	.word	0x0002a5a1
   1aa10:	0001a355 	.word	0x0001a355
   1aa14:	0001a33d 	.word	0x0001a33d
   1aa18:	0002ce31 	.word	0x0002ce31
   1aa1c:	0002ce75 	.word	0x0002ce75
   1aa20:	0002a359 	.word	0x0002a359
   1aa24:	000149e9 	.word	0x000149e9
   1aa28:	0002a605 	.word	0x0002a605
   1aa2c:	20005c1c 	.word	0x20005c1c
   1aa30:	0001a4f1 	.word	0x0001a4f1

0001aa34 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   1aa34:	b580      	push	{r7, lr}
   1aa36:	b084      	sub	sp, #16
   1aa38:	af00      	add	r7, sp, #0
   1aa3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1aa3c:	687b      	ldr	r3, [r7, #4]
   1aa3e:	681b      	ldr	r3, [r3, #0]
   1aa40:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1aa42:	687b      	ldr	r3, [r7, #4]
   1aa44:	0018      	movs	r0, r3
   1aa46:	4b0f      	ldr	r3, [pc, #60]	; (1aa84 <i2c_master_reset+0x50>)
   1aa48:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   1aa4a:	687b      	ldr	r3, [r7, #4]
   1aa4c:	0018      	movs	r0, r3
   1aa4e:	4b0e      	ldr	r3, [pc, #56]	; (1aa88 <i2c_master_reset+0x54>)
   1aa50:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1aa52:	4b0e      	ldr	r3, [pc, #56]	; (1aa8c <i2c_master_reset+0x58>)
   1aa54:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   1aa56:	687b      	ldr	r3, [r7, #4]
   1aa58:	681b      	ldr	r3, [r3, #0]
   1aa5a:	0018      	movs	r0, r3
   1aa5c:	4b0c      	ldr	r3, [pc, #48]	; (1aa90 <i2c_master_reset+0x5c>)
   1aa5e:	4798      	blx	r3
   1aa60:	0003      	movs	r3, r0
   1aa62:	0018      	movs	r0, r3
   1aa64:	4b0b      	ldr	r3, [pc, #44]	; (1aa94 <i2c_master_reset+0x60>)
   1aa66:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   1aa68:	4b0b      	ldr	r3, [pc, #44]	; (1aa98 <i2c_master_reset+0x64>)
   1aa6a:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1aa6c:	687b      	ldr	r3, [r7, #4]
   1aa6e:	0018      	movs	r0, r3
   1aa70:	4b04      	ldr	r3, [pc, #16]	; (1aa84 <i2c_master_reset+0x50>)
   1aa72:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   1aa74:	68fb      	ldr	r3, [r7, #12]
   1aa76:	2201      	movs	r2, #1
   1aa78:	601a      	str	r2, [r3, #0]
}
   1aa7a:	46c0      	nop			; (mov r8, r8)
   1aa7c:	46bd      	mov	sp, r7
   1aa7e:	b004      	add	sp, #16
   1aa80:	bd80      	pop	{r7, pc}
   1aa82:	46c0      	nop			; (mov r8, r8)
   1aa84:	0001a475 	.word	0x0001a475
   1aa88:	0001a499 	.word	0x0001a499
   1aa8c:	0001a3f9 	.word	0x0001a3f9
   1aa90:	0002a671 	.word	0x0002a671
   1aa94:	0002cfad 	.word	0x0002cfad
   1aa98:	0001a40d 	.word	0x0001a40d

0001aa9c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   1aa9c:	b580      	push	{r7, lr}
   1aa9e:	b084      	sub	sp, #16
   1aaa0:	af00      	add	r7, sp, #0
   1aaa2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1aaa4:	687b      	ldr	r3, [r7, #4]
   1aaa6:	681b      	ldr	r3, [r3, #0]
   1aaa8:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1aaaa:	68fb      	ldr	r3, [r7, #12]
   1aaac:	7e1b      	ldrb	r3, [r3, #24]
   1aaae:	b2db      	uxtb	r3, r3
   1aab0:	001a      	movs	r2, r3
   1aab2:	2302      	movs	r3, #2
   1aab4:	4013      	ands	r3, r2
   1aab6:	d00b      	beq.n	1aad0 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   1aab8:	68fb      	ldr	r3, [r7, #12]
   1aaba:	2202      	movs	r2, #2
   1aabc:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1aabe:	68fb      	ldr	r3, [r7, #12]
   1aac0:	8b5b      	ldrh	r3, [r3, #26]
   1aac2:	b29b      	uxth	r3, r3
   1aac4:	001a      	movs	r2, r3
   1aac6:	2302      	movs	r3, #2
   1aac8:	4013      	ands	r3, r2
   1aaca:	d011      	beq.n	1aaf0 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1aacc:	2341      	movs	r3, #65	; 0x41
   1aace:	e010      	b.n	1aaf2 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1aad0:	68fb      	ldr	r3, [r7, #12]
   1aad2:	8b5b      	ldrh	r3, [r3, #26]
   1aad4:	b29b      	uxth	r3, r3
   1aad6:	001a      	movs	r2, r3
   1aad8:	2304      	movs	r3, #4
   1aada:	4013      	ands	r3, r2
   1aadc:	d008      	beq.n	1aaf0 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1aade:	68fb      	ldr	r3, [r7, #12]
   1aae0:	685b      	ldr	r3, [r3, #4]
   1aae2:	22c0      	movs	r2, #192	; 0xc0
   1aae4:	0292      	lsls	r2, r2, #10
   1aae6:	431a      	orrs	r2, r3
   1aae8:	68fb      	ldr	r3, [r7, #12]
   1aaea:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1aaec:	2318      	movs	r3, #24
   1aaee:	e000      	b.n	1aaf2 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   1aaf0:	2300      	movs	r3, #0
}
   1aaf2:	0018      	movs	r0, r3
   1aaf4:	46bd      	mov	sp, r7
   1aaf6:	b004      	add	sp, #16
   1aaf8:	bd80      	pop	{r7, pc}

0001aafa <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1aafa:	b580      	push	{r7, lr}
   1aafc:	b084      	sub	sp, #16
   1aafe:	af00      	add	r7, sp, #0
   1ab00:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1ab02:	687b      	ldr	r3, [r7, #4]
   1ab04:	681b      	ldr	r3, [r3, #0]
   1ab06:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   1ab08:	230e      	movs	r3, #14
   1ab0a:	18fb      	adds	r3, r7, r3
   1ab0c:	2200      	movs	r2, #0
   1ab0e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1ab10:	e00f      	b.n	1ab32 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   1ab12:	230e      	movs	r3, #14
   1ab14:	18fb      	adds	r3, r7, r3
   1ab16:	220e      	movs	r2, #14
   1ab18:	18ba      	adds	r2, r7, r2
   1ab1a:	8812      	ldrh	r2, [r2, #0]
   1ab1c:	3201      	adds	r2, #1
   1ab1e:	801a      	strh	r2, [r3, #0]
   1ab20:	687b      	ldr	r3, [r7, #4]
   1ab22:	891b      	ldrh	r3, [r3, #8]
   1ab24:	220e      	movs	r2, #14
   1ab26:	18ba      	adds	r2, r7, r2
   1ab28:	8812      	ldrh	r2, [r2, #0]
   1ab2a:	429a      	cmp	r2, r3
   1ab2c:	d301      	bcc.n	1ab32 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1ab2e:	2312      	movs	r3, #18
   1ab30:	e00e      	b.n	1ab50 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1ab32:	68bb      	ldr	r3, [r7, #8]
   1ab34:	7e1b      	ldrb	r3, [r3, #24]
   1ab36:	b2db      	uxtb	r3, r3
   1ab38:	001a      	movs	r2, r3
   1ab3a:	2301      	movs	r3, #1
   1ab3c:	4013      	ands	r3, r2
   1ab3e:	d106      	bne.n	1ab4e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1ab40:	68bb      	ldr	r3, [r7, #8]
   1ab42:	7e1b      	ldrb	r3, [r3, #24]
   1ab44:	b2db      	uxtb	r3, r3
   1ab46:	001a      	movs	r2, r3
   1ab48:	2302      	movs	r3, #2
   1ab4a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   1ab4c:	d0e1      	beq.n	1ab12 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1ab4e:	2300      	movs	r3, #0
}
   1ab50:	0018      	movs	r0, r3
   1ab52:	46bd      	mov	sp, r7
   1ab54:	b004      	add	sp, #16
   1ab56:	bd80      	pop	{r7, pc}

0001ab58 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   1ab58:	b590      	push	{r4, r7, lr}
   1ab5a:	b085      	sub	sp, #20
   1ab5c:	af00      	add	r7, sp, #0
   1ab5e:	6078      	str	r0, [r7, #4]
   1ab60:	000a      	movs	r2, r1
   1ab62:	1cfb      	adds	r3, r7, #3
   1ab64:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1ab66:	687b      	ldr	r3, [r7, #4]
   1ab68:	681b      	ldr	r3, [r3, #0]
   1ab6a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1ab6c:	68fb      	ldr	r3, [r7, #12]
   1ab6e:	685b      	ldr	r3, [r3, #4]
   1ab70:	2280      	movs	r2, #128	; 0x80
   1ab72:	02d2      	lsls	r2, r2, #11
   1ab74:	431a      	orrs	r2, r3
   1ab76:	68fb      	ldr	r3, [r7, #12]
   1ab78:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   1ab7a:	1cfb      	adds	r3, r7, #3
   1ab7c:	781a      	ldrb	r2, [r3, #0]
   1ab7e:	68fb      	ldr	r3, [r7, #12]
   1ab80:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1ab82:	230b      	movs	r3, #11
   1ab84:	18fc      	adds	r4, r7, r3
   1ab86:	687b      	ldr	r3, [r7, #4]
   1ab88:	0018      	movs	r0, r3
   1ab8a:	4b07      	ldr	r3, [pc, #28]	; (1aba8 <_i2c_master_send_hs_master_code+0x50>)
   1ab8c:	4798      	blx	r3
   1ab8e:	0003      	movs	r3, r0
   1ab90:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1ab92:	68fb      	ldr	r3, [r7, #12]
   1ab94:	2201      	movs	r2, #1
   1ab96:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   1ab98:	230b      	movs	r3, #11
   1ab9a:	18fb      	adds	r3, r7, r3
   1ab9c:	781b      	ldrb	r3, [r3, #0]
}
   1ab9e:	0018      	movs	r0, r3
   1aba0:	46bd      	mov	sp, r7
   1aba2:	b005      	add	sp, #20
   1aba4:	bd90      	pop	{r4, r7, pc}
   1aba6:	46c0      	nop			; (mov r8, r8)
   1aba8:	0001aafb 	.word	0x0001aafb

0001abac <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1abac:	b580      	push	{r7, lr}
   1abae:	af00      	add	r7, sp, #0
   1abb0:	2000      	movs	r0, #0
   1abb2:	4b02      	ldr	r3, [pc, #8]	; (1abbc <TC3_Handler+0x10>)
   1abb4:	4798      	blx	r3
   1abb6:	46c0      	nop			; (mov r8, r8)
   1abb8:	46bd      	mov	sp, r7
   1abba:	bd80      	pop	{r7, pc}
   1abbc:	0001abe9 	.word	0x0001abe9

0001abc0 <TC4_Handler>:
   1abc0:	b580      	push	{r7, lr}
   1abc2:	af00      	add	r7, sp, #0
   1abc4:	2001      	movs	r0, #1
   1abc6:	4b02      	ldr	r3, [pc, #8]	; (1abd0 <TC4_Handler+0x10>)
   1abc8:	4798      	blx	r3
   1abca:	46c0      	nop			; (mov r8, r8)
   1abcc:	46bd      	mov	sp, r7
   1abce:	bd80      	pop	{r7, pc}
   1abd0:	0001abe9 	.word	0x0001abe9

0001abd4 <TC5_Handler>:
   1abd4:	b580      	push	{r7, lr}
   1abd6:	af00      	add	r7, sp, #0
   1abd8:	2002      	movs	r0, #2
   1abda:	4b02      	ldr	r3, [pc, #8]	; (1abe4 <TC5_Handler+0x10>)
   1abdc:	4798      	blx	r3
   1abde:	46c0      	nop			; (mov r8, r8)
   1abe0:	46bd      	mov	sp, r7
   1abe2:	bd80      	pop	{r7, pc}
   1abe4:	0001abe9 	.word	0x0001abe9

0001abe8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   1abe8:	b580      	push	{r7, lr}
   1abea:	b084      	sub	sp, #16
   1abec:	af00      	add	r7, sp, #0
   1abee:	0002      	movs	r2, r0
   1abf0:	1dfb      	adds	r3, r7, #7
   1abf2:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   1abf4:	1dfb      	adds	r3, r7, #7
   1abf6:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   1abf8:	4b28      	ldr	r3, [pc, #160]	; (1ac9c <_tc_interrupt_handler+0xb4>)
   1abfa:	0092      	lsls	r2, r2, #2
   1abfc:	58d3      	ldr	r3, [r2, r3]
   1abfe:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1ac00:	68fb      	ldr	r3, [r7, #12]
   1ac02:	681b      	ldr	r3, [r3, #0]
   1ac04:	7b9b      	ldrb	r3, [r3, #14]
   1ac06:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   1ac08:	68fa      	ldr	r2, [r7, #12]
   1ac0a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1ac0c:	4013      	ands	r3, r2
   1ac0e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   1ac10:	68fb      	ldr	r3, [r7, #12]
   1ac12:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1ac14:	230b      	movs	r3, #11
   1ac16:	18fb      	adds	r3, r7, r3
   1ac18:	400a      	ands	r2, r1
   1ac1a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1ac1c:	230b      	movs	r3, #11
   1ac1e:	18fb      	adds	r3, r7, r3
   1ac20:	781b      	ldrb	r3, [r3, #0]
   1ac22:	2201      	movs	r2, #1
   1ac24:	4013      	ands	r3, r2
   1ac26:	d008      	beq.n	1ac3a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   1ac28:	68fb      	ldr	r3, [r7, #12]
   1ac2a:	689b      	ldr	r3, [r3, #8]
   1ac2c:	68fa      	ldr	r2, [r7, #12]
   1ac2e:	0010      	movs	r0, r2
   1ac30:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   1ac32:	68fb      	ldr	r3, [r7, #12]
   1ac34:	681b      	ldr	r3, [r3, #0]
   1ac36:	2201      	movs	r2, #1
   1ac38:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   1ac3a:	230b      	movs	r3, #11
   1ac3c:	18fb      	adds	r3, r7, r3
   1ac3e:	781b      	ldrb	r3, [r3, #0]
   1ac40:	2202      	movs	r2, #2
   1ac42:	4013      	ands	r3, r2
   1ac44:	d008      	beq.n	1ac58 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   1ac46:	68fb      	ldr	r3, [r7, #12]
   1ac48:	68db      	ldr	r3, [r3, #12]
   1ac4a:	68fa      	ldr	r2, [r7, #12]
   1ac4c:	0010      	movs	r0, r2
   1ac4e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1ac50:	68fb      	ldr	r3, [r7, #12]
   1ac52:	681b      	ldr	r3, [r3, #0]
   1ac54:	2202      	movs	r2, #2
   1ac56:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   1ac58:	230b      	movs	r3, #11
   1ac5a:	18fb      	adds	r3, r7, r3
   1ac5c:	781b      	ldrb	r3, [r3, #0]
   1ac5e:	2210      	movs	r2, #16
   1ac60:	4013      	ands	r3, r2
   1ac62:	d008      	beq.n	1ac76 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   1ac64:	68fb      	ldr	r3, [r7, #12]
   1ac66:	691b      	ldr	r3, [r3, #16]
   1ac68:	68fa      	ldr	r2, [r7, #12]
   1ac6a:	0010      	movs	r0, r2
   1ac6c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1ac6e:	68fb      	ldr	r3, [r7, #12]
   1ac70:	681b      	ldr	r3, [r3, #0]
   1ac72:	2210      	movs	r2, #16
   1ac74:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   1ac76:	230b      	movs	r3, #11
   1ac78:	18fb      	adds	r3, r7, r3
   1ac7a:	781b      	ldrb	r3, [r3, #0]
   1ac7c:	2220      	movs	r2, #32
   1ac7e:	4013      	ands	r3, r2
   1ac80:	d008      	beq.n	1ac94 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1ac82:	68fb      	ldr	r3, [r7, #12]
   1ac84:	695b      	ldr	r3, [r3, #20]
   1ac86:	68fa      	ldr	r2, [r7, #12]
   1ac88:	0010      	movs	r0, r2
   1ac8a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   1ac8c:	68fb      	ldr	r3, [r7, #12]
   1ac8e:	681b      	ldr	r3, [r3, #0]
   1ac90:	2220      	movs	r2, #32
   1ac92:	739a      	strb	r2, [r3, #14]
	}
}
   1ac94:	46c0      	nop			; (mov r8, r8)
   1ac96:	46bd      	mov	sp, r7
   1ac98:	b004      	add	sp, #16
   1ac9a:	bd80      	pop	{r7, pc}
   1ac9c:	20004a04 	.word	0x20004a04

0001aca0 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1aca0:	b580      	push	{r7, lr}
   1aca2:	b084      	sub	sp, #16
   1aca4:	af00      	add	r7, sp, #0
   1aca6:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   1aca8:	2300      	movs	r3, #0
   1acaa:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1acac:	687b      	ldr	r3, [r7, #4]
   1acae:	2b00      	cmp	r3, #0
   1acb0:	d101      	bne.n	1acb6 <FreeRTOS_CLIRegisterCommand+0x16>
   1acb2:	b672      	cpsid	i
   1acb4:	e7fe      	b.n	1acb4 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   1acb6:	2008      	movs	r0, #8
   1acb8:	4b11      	ldr	r3, [pc, #68]	; (1ad00 <FreeRTOS_CLIRegisterCommand+0x60>)
   1acba:	4798      	blx	r3
   1acbc:	0003      	movs	r3, r0
   1acbe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1acc0:	68bb      	ldr	r3, [r7, #8]
   1acc2:	2b00      	cmp	r3, #0
   1acc4:	d101      	bne.n	1acca <FreeRTOS_CLIRegisterCommand+0x2a>
   1acc6:	b672      	cpsid	i
   1acc8:	e7fe      	b.n	1acc8 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1acca:	68bb      	ldr	r3, [r7, #8]
   1accc:	2b00      	cmp	r3, #0
   1acce:	d012      	beq.n	1acf6 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1acd0:	4b0c      	ldr	r3, [pc, #48]	; (1ad04 <FreeRTOS_CLIRegisterCommand+0x64>)
   1acd2:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   1acd4:	68bb      	ldr	r3, [r7, #8]
   1acd6:	687a      	ldr	r2, [r7, #4]
   1acd8:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1acda:	68bb      	ldr	r3, [r7, #8]
   1acdc:	2200      	movs	r2, #0
   1acde:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   1ace0:	4b09      	ldr	r3, [pc, #36]	; (1ad08 <FreeRTOS_CLIRegisterCommand+0x68>)
   1ace2:	681b      	ldr	r3, [r3, #0]
   1ace4:	68ba      	ldr	r2, [r7, #8]
   1ace6:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   1ace8:	4b07      	ldr	r3, [pc, #28]	; (1ad08 <FreeRTOS_CLIRegisterCommand+0x68>)
   1acea:	68ba      	ldr	r2, [r7, #8]
   1acec:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1acee:	4b07      	ldr	r3, [pc, #28]	; (1ad0c <FreeRTOS_CLIRegisterCommand+0x6c>)
   1acf0:	4798      	blx	r3

		xReturn = pdPASS;
   1acf2:	2301      	movs	r3, #1
   1acf4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   1acf6:	68fb      	ldr	r3, [r7, #12]
}
   1acf8:	0018      	movs	r0, r3
   1acfa:	46bd      	mov	sp, r7
   1acfc:	b004      	add	sp, #16
   1acfe:	bd80      	pop	{r7, pc}
   1ad00:	0001d0b1 	.word	0x0001d0b1
   1ad04:	0001cf79 	.word	0x0001cf79
   1ad08:	2000017c 	.word	0x2000017c
   1ad0c:	0001cf9d 	.word	0x0001cf9d

0001ad10 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   1ad10:	b580      	push	{r7, lr}
   1ad12:	b088      	sub	sp, #32
   1ad14:	af00      	add	r7, sp, #0
   1ad16:	60f8      	str	r0, [r7, #12]
   1ad18:	60b9      	str	r1, [r7, #8]
   1ad1a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   1ad1c:	2301      	movs	r3, #1
   1ad1e:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   1ad20:	4b3d      	ldr	r3, [pc, #244]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1ad22:	681b      	ldr	r3, [r3, #0]
   1ad24:	2b00      	cmp	r3, #0
   1ad26:	d144      	bne.n	1adb2 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1ad28:	4b3b      	ldr	r3, [pc, #236]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1ad2a:	4a3c      	ldr	r2, [pc, #240]	; (1ae1c <FreeRTOS_CLIProcessCommand+0x10c>)
   1ad2c:	601a      	str	r2, [r3, #0]
   1ad2e:	e03a      	b.n	1ada6 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   1ad30:	4b39      	ldr	r3, [pc, #228]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1ad32:	681b      	ldr	r3, [r3, #0]
   1ad34:	681b      	ldr	r3, [r3, #0]
   1ad36:	681b      	ldr	r3, [r3, #0]
   1ad38:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   1ad3a:	69bb      	ldr	r3, [r7, #24]
   1ad3c:	0018      	movs	r0, r3
   1ad3e:	4b38      	ldr	r3, [pc, #224]	; (1ae20 <FreeRTOS_CLIProcessCommand+0x110>)
   1ad40:	4798      	blx	r3
   1ad42:	0003      	movs	r3, r0
   1ad44:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   1ad46:	68fa      	ldr	r2, [r7, #12]
   1ad48:	697b      	ldr	r3, [r7, #20]
   1ad4a:	18d3      	adds	r3, r2, r3
   1ad4c:	781b      	ldrb	r3, [r3, #0]
   1ad4e:	2b20      	cmp	r3, #32
   1ad50:	d005      	beq.n	1ad5e <FreeRTOS_CLIProcessCommand+0x4e>
   1ad52:	68fa      	ldr	r2, [r7, #12]
   1ad54:	697b      	ldr	r3, [r7, #20]
   1ad56:	18d3      	adds	r3, r2, r3
   1ad58:	781b      	ldrb	r3, [r3, #0]
   1ad5a:	2b00      	cmp	r3, #0
   1ad5c:	d11e      	bne.n	1ad9c <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1ad5e:	697a      	ldr	r2, [r7, #20]
   1ad60:	69b9      	ldr	r1, [r7, #24]
   1ad62:	68fb      	ldr	r3, [r7, #12]
   1ad64:	0018      	movs	r0, r3
   1ad66:	4b2f      	ldr	r3, [pc, #188]	; (1ae24 <FreeRTOS_CLIProcessCommand+0x114>)
   1ad68:	4798      	blx	r3
   1ad6a:	1e03      	subs	r3, r0, #0
   1ad6c:	d116      	bne.n	1ad9c <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1ad6e:	4b2a      	ldr	r3, [pc, #168]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1ad70:	681b      	ldr	r3, [r3, #0]
   1ad72:	681b      	ldr	r3, [r3, #0]
   1ad74:	7b1b      	ldrb	r3, [r3, #12]
   1ad76:	b25b      	sxtb	r3, r3
   1ad78:	2b00      	cmp	r3, #0
   1ad7a:	db19      	blt.n	1adb0 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   1ad7c:	68fb      	ldr	r3, [r7, #12]
   1ad7e:	0018      	movs	r0, r3
   1ad80:	4b29      	ldr	r3, [pc, #164]	; (1ae28 <FreeRTOS_CLIProcessCommand+0x118>)
   1ad82:	4798      	blx	r3
   1ad84:	0003      	movs	r3, r0
   1ad86:	001a      	movs	r2, r3
   1ad88:	4b23      	ldr	r3, [pc, #140]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1ad8a:	681b      	ldr	r3, [r3, #0]
   1ad8c:	681b      	ldr	r3, [r3, #0]
   1ad8e:	7b1b      	ldrb	r3, [r3, #12]
   1ad90:	b25b      	sxtb	r3, r3
   1ad92:	429a      	cmp	r2, r3
   1ad94:	d00c      	beq.n	1adb0 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   1ad96:	2300      	movs	r3, #0
   1ad98:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1ad9a:	e009      	b.n	1adb0 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1ad9c:	4b1e      	ldr	r3, [pc, #120]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1ad9e:	681b      	ldr	r3, [r3, #0]
   1ada0:	685a      	ldr	r2, [r3, #4]
   1ada2:	4b1d      	ldr	r3, [pc, #116]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1ada4:	601a      	str	r2, [r3, #0]
   1ada6:	4b1c      	ldr	r3, [pc, #112]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1ada8:	681b      	ldr	r3, [r3, #0]
   1adaa:	2b00      	cmp	r3, #0
   1adac:	d1c0      	bne.n	1ad30 <FreeRTOS_CLIProcessCommand+0x20>
   1adae:	e000      	b.n	1adb2 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1adb0:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1adb2:	4b19      	ldr	r3, [pc, #100]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1adb4:	681b      	ldr	r3, [r3, #0]
   1adb6:	2b00      	cmp	r3, #0
   1adb8:	d00c      	beq.n	1add4 <FreeRTOS_CLIProcessCommand+0xc4>
   1adba:	69fb      	ldr	r3, [r7, #28]
   1adbc:	2b00      	cmp	r3, #0
   1adbe:	d109      	bne.n	1add4 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1adc0:	687a      	ldr	r2, [r7, #4]
   1adc2:	491a      	ldr	r1, [pc, #104]	; (1ae2c <FreeRTOS_CLIProcessCommand+0x11c>)
   1adc4:	68bb      	ldr	r3, [r7, #8]
   1adc6:	0018      	movs	r0, r3
   1adc8:	4b19      	ldr	r3, [pc, #100]	; (1ae30 <FreeRTOS_CLIProcessCommand+0x120>)
   1adca:	4798      	blx	r3
		pxCommand = NULL;
   1adcc:	4b12      	ldr	r3, [pc, #72]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1adce:	2200      	movs	r2, #0
   1add0:	601a      	str	r2, [r3, #0]
   1add2:	e01c      	b.n	1ae0e <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   1add4:	4b10      	ldr	r3, [pc, #64]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1add6:	681b      	ldr	r3, [r3, #0]
   1add8:	2b00      	cmp	r3, #0
   1adda:	d010      	beq.n	1adfe <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1addc:	4b0e      	ldr	r3, [pc, #56]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1adde:	681b      	ldr	r3, [r3, #0]
   1ade0:	681b      	ldr	r3, [r3, #0]
   1ade2:	689b      	ldr	r3, [r3, #8]
   1ade4:	68fa      	ldr	r2, [r7, #12]
   1ade6:	6879      	ldr	r1, [r7, #4]
   1ade8:	68b8      	ldr	r0, [r7, #8]
   1adea:	4798      	blx	r3
   1adec:	0003      	movs	r3, r0
   1adee:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   1adf0:	69fb      	ldr	r3, [r7, #28]
   1adf2:	2b00      	cmp	r3, #0
   1adf4:	d10b      	bne.n	1ae0e <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   1adf6:	4b08      	ldr	r3, [pc, #32]	; (1ae18 <FreeRTOS_CLIProcessCommand+0x108>)
   1adf8:	2200      	movs	r2, #0
   1adfa:	601a      	str	r2, [r3, #0]
   1adfc:	e007      	b.n	1ae0e <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1adfe:	687a      	ldr	r2, [r7, #4]
   1ae00:	490c      	ldr	r1, [pc, #48]	; (1ae34 <FreeRTOS_CLIProcessCommand+0x124>)
   1ae02:	68bb      	ldr	r3, [r7, #8]
   1ae04:	0018      	movs	r0, r3
   1ae06:	4b0a      	ldr	r3, [pc, #40]	; (1ae30 <FreeRTOS_CLIProcessCommand+0x120>)
   1ae08:	4798      	blx	r3
		xReturn = pdFALSE;
   1ae0a:	2300      	movs	r3, #0
   1ae0c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1ae0e:	69fb      	ldr	r3, [r7, #28]
}
   1ae10:	0018      	movs	r0, r3
   1ae12:	46bd      	mov	sp, r7
   1ae14:	b008      	add	sp, #32
   1ae16:	bd80      	pop	{r7, pc}
   1ae18:	20000bf4 	.word	0x20000bf4
   1ae1c:	20000174 	.word	0x20000174
   1ae20:	000388bf 	.word	0x000388bf
   1ae24:	000388cd 	.word	0x000388cd
   1ae28:	0001ae99 	.word	0x0001ae99
   1ae2c:	0003b354 	.word	0x0003b354
   1ae30:	000388ef 	.word	0x000388ef
   1ae34:	0003b3ac 	.word	0x0003b3ac

0001ae38 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   1ae38:	b580      	push	{r7, lr}
   1ae3a:	b086      	sub	sp, #24
   1ae3c:	af00      	add	r7, sp, #0
   1ae3e:	60f8      	str	r0, [r7, #12]
   1ae40:	60b9      	str	r1, [r7, #8]
   1ae42:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   1ae44:	4b11      	ldr	r3, [pc, #68]	; (1ae8c <prvHelpCommand+0x54>)
   1ae46:	681b      	ldr	r3, [r3, #0]
   1ae48:	2b00      	cmp	r3, #0
   1ae4a:	d102      	bne.n	1ae52 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   1ae4c:	4b0f      	ldr	r3, [pc, #60]	; (1ae8c <prvHelpCommand+0x54>)
   1ae4e:	4a10      	ldr	r2, [pc, #64]	; (1ae90 <prvHelpCommand+0x58>)
   1ae50:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1ae52:	4b0e      	ldr	r3, [pc, #56]	; (1ae8c <prvHelpCommand+0x54>)
   1ae54:	681b      	ldr	r3, [r3, #0]
   1ae56:	681b      	ldr	r3, [r3, #0]
   1ae58:	6859      	ldr	r1, [r3, #4]
   1ae5a:	68ba      	ldr	r2, [r7, #8]
   1ae5c:	68fb      	ldr	r3, [r7, #12]
   1ae5e:	0018      	movs	r0, r3
   1ae60:	4b0c      	ldr	r3, [pc, #48]	; (1ae94 <prvHelpCommand+0x5c>)
   1ae62:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   1ae64:	4b09      	ldr	r3, [pc, #36]	; (1ae8c <prvHelpCommand+0x54>)
   1ae66:	681b      	ldr	r3, [r3, #0]
   1ae68:	685a      	ldr	r2, [r3, #4]
   1ae6a:	4b08      	ldr	r3, [pc, #32]	; (1ae8c <prvHelpCommand+0x54>)
   1ae6c:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1ae6e:	4b07      	ldr	r3, [pc, #28]	; (1ae8c <prvHelpCommand+0x54>)
   1ae70:	681b      	ldr	r3, [r3, #0]
   1ae72:	2b00      	cmp	r3, #0
   1ae74:	d102      	bne.n	1ae7c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   1ae76:	2300      	movs	r3, #0
   1ae78:	617b      	str	r3, [r7, #20]
   1ae7a:	e001      	b.n	1ae80 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1ae7c:	2301      	movs	r3, #1
   1ae7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1ae80:	697b      	ldr	r3, [r7, #20]
}
   1ae82:	0018      	movs	r0, r3
   1ae84:	46bd      	mov	sp, r7
   1ae86:	b006      	add	sp, #24
   1ae88:	bd80      	pop	{r7, pc}
   1ae8a:	46c0      	nop			; (mov r8, r8)
   1ae8c:	20000bf8 	.word	0x20000bf8
   1ae90:	20000174 	.word	0x20000174
   1ae94:	000388ef 	.word	0x000388ef

0001ae98 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   1ae98:	b580      	push	{r7, lr}
   1ae9a:	b084      	sub	sp, #16
   1ae9c:	af00      	add	r7, sp, #0
   1ae9e:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1aea0:	230f      	movs	r3, #15
   1aea2:	18fb      	adds	r3, r7, r3
   1aea4:	2200      	movs	r2, #0
   1aea6:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   1aea8:	2300      	movs	r3, #0
   1aeaa:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   1aeac:	e018      	b.n	1aee0 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1aeae:	687b      	ldr	r3, [r7, #4]
   1aeb0:	781b      	ldrb	r3, [r3, #0]
   1aeb2:	2b20      	cmp	r3, #32
   1aeb4:	d10f      	bne.n	1aed6 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   1aeb6:	68bb      	ldr	r3, [r7, #8]
   1aeb8:	2b01      	cmp	r3, #1
   1aeba:	d00e      	beq.n	1aeda <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   1aebc:	230f      	movs	r3, #15
   1aebe:	18fb      	adds	r3, r7, r3
   1aec0:	781b      	ldrb	r3, [r3, #0]
   1aec2:	b25b      	sxtb	r3, r3
   1aec4:	b2db      	uxtb	r3, r3
   1aec6:	3301      	adds	r3, #1
   1aec8:	b2da      	uxtb	r2, r3
   1aeca:	230f      	movs	r3, #15
   1aecc:	18fb      	adds	r3, r7, r3
   1aece:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1aed0:	2301      	movs	r3, #1
   1aed2:	60bb      	str	r3, [r7, #8]
   1aed4:	e001      	b.n	1aeda <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   1aed6:	2300      	movs	r3, #0
   1aed8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   1aeda:	687b      	ldr	r3, [r7, #4]
   1aedc:	3301      	adds	r3, #1
   1aede:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   1aee0:	687b      	ldr	r3, [r7, #4]
   1aee2:	781b      	ldrb	r3, [r3, #0]
   1aee4:	2b00      	cmp	r3, #0
   1aee6:	d1e2      	bne.n	1aeae <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   1aee8:	68bb      	ldr	r3, [r7, #8]
   1aeea:	2b01      	cmp	r3, #1
   1aeec:	d109      	bne.n	1af02 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1aeee:	230f      	movs	r3, #15
   1aef0:	18fb      	adds	r3, r7, r3
   1aef2:	781b      	ldrb	r3, [r3, #0]
   1aef4:	b25b      	sxtb	r3, r3
   1aef6:	b2db      	uxtb	r3, r3
   1aef8:	3b01      	subs	r3, #1
   1aefa:	b2da      	uxtb	r2, r3
   1aefc:	230f      	movs	r3, #15
   1aefe:	18fb      	adds	r3, r7, r3
   1af00:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   1af02:	230f      	movs	r3, #15
   1af04:	18fb      	adds	r3, r7, r3
   1af06:	781b      	ldrb	r3, [r3, #0]
   1af08:	b25b      	sxtb	r3, r3
}
   1af0a:	0018      	movs	r0, r3
   1af0c:	46bd      	mov	sp, r7
   1af0e:	b004      	add	sp, #16
   1af10:	bd80      	pop	{r7, pc}
	...

0001af14 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   1af14:	b580      	push	{r7, lr}
   1af16:	b082      	sub	sp, #8
   1af18:	af00      	add	r7, sp, #0
   1af1a:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1af1c:	687b      	ldr	r3, [r7, #4]
   1af1e:	0018      	movs	r0, r3
   1af20:	4b03      	ldr	r3, [pc, #12]	; (1af30 <prvTraceGetQueueNumber+0x1c>)
   1af22:	4798      	blx	r3
   1af24:	0003      	movs	r3, r0
}
   1af26:	0018      	movs	r0, r3
   1af28:	46bd      	mov	sp, r7
   1af2a:	b002      	add	sp, #8
   1af2c:	bd80      	pop	{r7, pc}
   1af2e:	46c0      	nop			; (mov r8, r8)
   1af30:	0001e6d5 	.word	0x0001e6d5

0001af34 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   1af34:	b580      	push	{r7, lr}
   1af36:	b082      	sub	sp, #8
   1af38:	af00      	add	r7, sp, #0
   1af3a:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   1af3c:	687b      	ldr	r3, [r7, #4]
   1af3e:	0018      	movs	r0, r3
   1af40:	4b03      	ldr	r3, [pc, #12]	; (1af50 <prvTraceGetQueueType+0x1c>)
   1af42:	4798      	blx	r3
   1af44:	0003      	movs	r3, r0
}
   1af46:	0018      	movs	r0, r3
   1af48:	46bd      	mov	sp, r7
   1af4a:	b002      	add	sp, #8
   1af4c:	bd80      	pop	{r7, pc}
   1af4e:	46c0      	nop			; (mov r8, r8)
   1af50:	0001e701 	.word	0x0001e701

0001af54 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   1af54:	b580      	push	{r7, lr}
   1af56:	b082      	sub	sp, #8
   1af58:	af00      	add	r7, sp, #0
   1af5a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   1af5c:	687b      	ldr	r3, [r7, #4]
   1af5e:	0018      	movs	r0, r3
   1af60:	4b03      	ldr	r3, [pc, #12]	; (1af70 <prvTraceGetTaskNumberLow16+0x1c>)
   1af62:	4798      	blx	r3
   1af64:	0003      	movs	r3, r0
   1af66:	b29b      	uxth	r3, r3
}
   1af68:	0018      	movs	r0, r3
   1af6a:	46bd      	mov	sp, r7
   1af6c:	b002      	add	sp, #8
   1af6e:	bd80      	pop	{r7, pc}
   1af70:	0001fa31 	.word	0x0001fa31

0001af74 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   1af74:	b580      	push	{r7, lr}
   1af76:	b082      	sub	sp, #8
   1af78:	af00      	add	r7, sp, #0
   1af7a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   1af7c:	687b      	ldr	r3, [r7, #4]
   1af7e:	0018      	movs	r0, r3
   1af80:	4b04      	ldr	r3, [pc, #16]	; (1af94 <prvTraceGetTaskNumberHigh16+0x20>)
   1af82:	4798      	blx	r3
   1af84:	0003      	movs	r3, r0
   1af86:	0c1b      	lsrs	r3, r3, #16
   1af88:	b29b      	uxth	r3, r3
}
   1af8a:	0018      	movs	r0, r3
   1af8c:	46bd      	mov	sp, r7
   1af8e:	b002      	add	sp, #8
   1af90:	bd80      	pop	{r7, pc}
   1af92:	46c0      	nop			; (mov r8, r8)
   1af94:	0001fa31 	.word	0x0001fa31

0001af98 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   1af98:	b580      	push	{r7, lr}
   1af9a:	b082      	sub	sp, #8
   1af9c:	af00      	add	r7, sp, #0
   1af9e:	6078      	str	r0, [r7, #4]
   1afa0:	000a      	movs	r2, r1
   1afa2:	1cbb      	adds	r3, r7, #2
   1afa4:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   1afa6:	687b      	ldr	r3, [r7, #4]
   1afa8:	0018      	movs	r0, r3
   1afaa:	4b08      	ldr	r3, [pc, #32]	; (1afcc <prvTraceSetTaskNumberLow16+0x34>)
   1afac:	4798      	blx	r3
   1afae:	0003      	movs	r3, r0
   1afb0:	0c1b      	lsrs	r3, r3, #16
   1afb2:	041a      	lsls	r2, r3, #16
   1afb4:	1cbb      	adds	r3, r7, #2
   1afb6:	881b      	ldrh	r3, [r3, #0]
   1afb8:	431a      	orrs	r2, r3
   1afba:	687b      	ldr	r3, [r7, #4]
   1afbc:	0011      	movs	r1, r2
   1afbe:	0018      	movs	r0, r3
   1afc0:	4b03      	ldr	r3, [pc, #12]	; (1afd0 <prvTraceSetTaskNumberLow16+0x38>)
   1afc2:	4798      	blx	r3
}
   1afc4:	46c0      	nop			; (mov r8, r8)
   1afc6:	46bd      	mov	sp, r7
   1afc8:	b002      	add	sp, #8
   1afca:	bd80      	pop	{r7, pc}
   1afcc:	0001fa31 	.word	0x0001fa31
   1afd0:	0001fa59 	.word	0x0001fa59

0001afd4 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   1afd4:	b580      	push	{r7, lr}
   1afd6:	b082      	sub	sp, #8
   1afd8:	af00      	add	r7, sp, #0
   1afda:	6078      	str	r0, [r7, #4]
   1afdc:	000a      	movs	r2, r1
   1afde:	1cbb      	adds	r3, r7, #2
   1afe0:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   1afe2:	687b      	ldr	r3, [r7, #4]
   1afe4:	0018      	movs	r0, r3
   1afe6:	4b09      	ldr	r3, [pc, #36]	; (1b00c <prvTraceSetTaskNumberHigh16+0x38>)
   1afe8:	4798      	blx	r3
   1afea:	0003      	movs	r3, r0
   1afec:	041b      	lsls	r3, r3, #16
   1afee:	0c1a      	lsrs	r2, r3, #16
   1aff0:	1cbb      	adds	r3, r7, #2
   1aff2:	881b      	ldrh	r3, [r3, #0]
   1aff4:	041b      	lsls	r3, r3, #16
   1aff6:	431a      	orrs	r2, r3
   1aff8:	687b      	ldr	r3, [r7, #4]
   1affa:	0011      	movs	r1, r2
   1affc:	0018      	movs	r0, r3
   1affe:	4b04      	ldr	r3, [pc, #16]	; (1b010 <prvTraceSetTaskNumberHigh16+0x3c>)
   1b000:	4798      	blx	r3
}
   1b002:	46c0      	nop			; (mov r8, r8)
   1b004:	46bd      	mov	sp, r7
   1b006:	b002      	add	sp, #8
   1b008:	bd80      	pop	{r7, pc}
   1b00a:	46c0      	nop			; (mov r8, r8)
   1b00c:	0001fa31 	.word	0x0001fa31
   1b010:	0001fa59 	.word	0x0001fa59

0001b014 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   1b014:	b580      	push	{r7, lr}
   1b016:	b082      	sub	sp, #8
   1b018:	af00      	add	r7, sp, #0
   1b01a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1b01c:	687b      	ldr	r3, [r7, #4]
   1b01e:	0018      	movs	r0, r3
   1b020:	4b03      	ldr	r3, [pc, #12]	; (1b030 <prvTraceGetQueueNumberLow16+0x1c>)
   1b022:	4798      	blx	r3
   1b024:	0003      	movs	r3, r0
   1b026:	b29b      	uxth	r3, r3
}
   1b028:	0018      	movs	r0, r3
   1b02a:	46bd      	mov	sp, r7
   1b02c:	b002      	add	sp, #8
   1b02e:	bd80      	pop	{r7, pc}
   1b030:	0001af15 	.word	0x0001af15

0001b034 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   1b034:	b580      	push	{r7, lr}
   1b036:	b082      	sub	sp, #8
   1b038:	af00      	add	r7, sp, #0
   1b03a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1b03c:	687b      	ldr	r3, [r7, #4]
   1b03e:	0018      	movs	r0, r3
   1b040:	4b04      	ldr	r3, [pc, #16]	; (1b054 <prvTraceGetQueueNumberHigh16+0x20>)
   1b042:	4798      	blx	r3
   1b044:	0003      	movs	r3, r0
   1b046:	0c1b      	lsrs	r3, r3, #16
   1b048:	b29b      	uxth	r3, r3
}
   1b04a:	0018      	movs	r0, r3
   1b04c:	46bd      	mov	sp, r7
   1b04e:	b002      	add	sp, #8
   1b050:	bd80      	pop	{r7, pc}
   1b052:	46c0      	nop			; (mov r8, r8)
   1b054:	0001af15 	.word	0x0001af15

0001b058 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   1b058:	b580      	push	{r7, lr}
   1b05a:	b082      	sub	sp, #8
   1b05c:	af00      	add	r7, sp, #0
   1b05e:	6078      	str	r0, [r7, #4]
   1b060:	000a      	movs	r2, r1
   1b062:	1cbb      	adds	r3, r7, #2
   1b064:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   1b066:	687b      	ldr	r3, [r7, #4]
   1b068:	0018      	movs	r0, r3
   1b06a:	4b08      	ldr	r3, [pc, #32]	; (1b08c <prvTraceSetQueueNumberLow16+0x34>)
   1b06c:	4798      	blx	r3
   1b06e:	0003      	movs	r3, r0
   1b070:	0c1b      	lsrs	r3, r3, #16
   1b072:	041a      	lsls	r2, r3, #16
   1b074:	1cbb      	adds	r3, r7, #2
   1b076:	881b      	ldrh	r3, [r3, #0]
   1b078:	431a      	orrs	r2, r3
   1b07a:	687b      	ldr	r3, [r7, #4]
   1b07c:	0011      	movs	r1, r2
   1b07e:	0018      	movs	r0, r3
   1b080:	4b03      	ldr	r3, [pc, #12]	; (1b090 <prvTraceSetQueueNumberLow16+0x38>)
   1b082:	4798      	blx	r3
}
   1b084:	46c0      	nop			; (mov r8, r8)
   1b086:	46bd      	mov	sp, r7
   1b088:	b002      	add	sp, #8
   1b08a:	bd80      	pop	{r7, pc}
   1b08c:	0001af15 	.word	0x0001af15
   1b090:	0001e6e9 	.word	0x0001e6e9

0001b094 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   1b094:	b580      	push	{r7, lr}
   1b096:	b082      	sub	sp, #8
   1b098:	af00      	add	r7, sp, #0
   1b09a:	6078      	str	r0, [r7, #4]
   1b09c:	000a      	movs	r2, r1
   1b09e:	1cbb      	adds	r3, r7, #2
   1b0a0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1b0a2:	687b      	ldr	r3, [r7, #4]
   1b0a4:	0018      	movs	r0, r3
   1b0a6:	4b09      	ldr	r3, [pc, #36]	; (1b0cc <prvTraceSetQueueNumberHigh16+0x38>)
   1b0a8:	4798      	blx	r3
   1b0aa:	0003      	movs	r3, r0
   1b0ac:	041b      	lsls	r3, r3, #16
   1b0ae:	0c1a      	lsrs	r2, r3, #16
   1b0b0:	1cbb      	adds	r3, r7, #2
   1b0b2:	881b      	ldrh	r3, [r3, #0]
   1b0b4:	041b      	lsls	r3, r3, #16
   1b0b6:	431a      	orrs	r2, r3
   1b0b8:	687b      	ldr	r3, [r7, #4]
   1b0ba:	0011      	movs	r1, r2
   1b0bc:	0018      	movs	r0, r3
   1b0be:	4b04      	ldr	r3, [pc, #16]	; (1b0d0 <prvTraceSetQueueNumberHigh16+0x3c>)
   1b0c0:	4798      	blx	r3
}
   1b0c2:	46c0      	nop			; (mov r8, r8)
   1b0c4:	46bd      	mov	sp, r7
   1b0c6:	b002      	add	sp, #8
   1b0c8:	bd80      	pop	{r7, pc}
   1b0ca:	46c0      	nop			; (mov r8, r8)
   1b0cc:	0001af15 	.word	0x0001af15
   1b0d0:	0001e6e9 	.word	0x0001e6e9

0001b0d4 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   1b0d4:	b580      	push	{r7, lr}
   1b0d6:	b084      	sub	sp, #16
   1b0d8:	af00      	add	r7, sp, #0
   1b0da:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   1b0dc:	2300      	movs	r3, #0
   1b0de:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1b0e0:	2300      	movs	r3, #0
   1b0e2:	60bb      	str	r3, [r7, #8]
   1b0e4:	e018      	b.n	1b118 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   1b0e6:	4b14      	ldr	r3, [pc, #80]	; (1b138 <prvAddTaskToStackMonitor+0x64>)
   1b0e8:	68ba      	ldr	r2, [r7, #8]
   1b0ea:	00d2      	lsls	r2, r2, #3
   1b0ec:	58d3      	ldr	r3, [r2, r3]
   1b0ee:	2b00      	cmp	r3, #0
   1b0f0:	d10f      	bne.n	1b112 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1b0f2:	4b11      	ldr	r3, [pc, #68]	; (1b138 <prvAddTaskToStackMonitor+0x64>)
   1b0f4:	68ba      	ldr	r2, [r7, #8]
   1b0f6:	00d2      	lsls	r2, r2, #3
   1b0f8:	6879      	ldr	r1, [r7, #4]
   1b0fa:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1b0fc:	4a0e      	ldr	r2, [pc, #56]	; (1b138 <prvAddTaskToStackMonitor+0x64>)
   1b0fe:	68bb      	ldr	r3, [r7, #8]
   1b100:	00db      	lsls	r3, r3, #3
   1b102:	18d3      	adds	r3, r2, r3
   1b104:	3304      	adds	r3, #4
   1b106:	2201      	movs	r2, #1
   1b108:	4252      	negs	r2, r2
   1b10a:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1b10c:	2301      	movs	r3, #1
   1b10e:	60fb      	str	r3, [r7, #12]
			break;
   1b110:	e005      	b.n	1b11e <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1b112:	68bb      	ldr	r3, [r7, #8]
   1b114:	3301      	adds	r3, #1
   1b116:	60bb      	str	r3, [r7, #8]
   1b118:	68bb      	ldr	r3, [r7, #8]
   1b11a:	2b09      	cmp	r3, #9
   1b11c:	dde3      	ble.n	1b0e6 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1b11e:	68fb      	ldr	r3, [r7, #12]
   1b120:	2b00      	cmp	r3, #0
   1b122:	d104      	bne.n	1b12e <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   1b124:	4b05      	ldr	r3, [pc, #20]	; (1b13c <prvAddTaskToStackMonitor+0x68>)
   1b126:	681b      	ldr	r3, [r3, #0]
   1b128:	1c5a      	adds	r2, r3, #1
   1b12a:	4b04      	ldr	r3, [pc, #16]	; (1b13c <prvAddTaskToStackMonitor+0x68>)
   1b12c:	601a      	str	r2, [r3, #0]
	}
}
   1b12e:	46c0      	nop			; (mov r8, r8)
   1b130:	46bd      	mov	sp, r7
   1b132:	b004      	add	sp, #16
   1b134:	bd80      	pop	{r7, pc}
   1b136:	46c0      	nop			; (mov r8, r8)
   1b138:	20000c00 	.word	0x20000c00
   1b13c:	20000c50 	.word	0x20000c50

0001b140 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   1b140:	b590      	push	{r4, r7, lr}
   1b142:	b085      	sub	sp, #20
   1b144:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   1b146:	2300      	movs	r3, #0
   1b148:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1b14a:	4b2b      	ldr	r3, [pc, #172]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b14c:	681b      	ldr	r3, [r3, #0]
   1b14e:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1b150:	4b29      	ldr	r3, [pc, #164]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b152:	681a      	ldr	r2, [r3, #0]
   1b154:	4b29      	ldr	r3, [pc, #164]	; (1b1fc <prvReportStackUsage+0xbc>)
   1b156:	00d2      	lsls	r2, r2, #3
   1b158:	58d3      	ldr	r3, [r2, r3]
   1b15a:	2b00      	cmp	r3, #0
   1b15c:	d035      	beq.n	1b1ca <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1b15e:	4b26      	ldr	r3, [pc, #152]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b160:	681a      	ldr	r2, [r3, #0]
   1b162:	4b26      	ldr	r3, [pc, #152]	; (1b1fc <prvReportStackUsage+0xbc>)
   1b164:	00d2      	lsls	r2, r2, #3
   1b166:	58d3      	ldr	r3, [r2, r3]
   1b168:	0018      	movs	r0, r3
   1b16a:	4b25      	ldr	r3, [pc, #148]	; (1b200 <prvReportStackUsage+0xc0>)
   1b16c:	4798      	blx	r3
   1b16e:	0003      	movs	r3, r0
   1b170:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1b172:	4b21      	ldr	r3, [pc, #132]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b174:	681b      	ldr	r3, [r3, #0]
   1b176:	4a21      	ldr	r2, [pc, #132]	; (1b1fc <prvReportStackUsage+0xbc>)
   1b178:	00db      	lsls	r3, r3, #3
   1b17a:	18d3      	adds	r3, r2, r3
   1b17c:	3304      	adds	r3, #4
   1b17e:	681a      	ldr	r2, [r3, #0]
   1b180:	687b      	ldr	r3, [r7, #4]
   1b182:	429a      	cmp	r2, r3
   1b184:	d907      	bls.n	1b196 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   1b186:	4b1c      	ldr	r3, [pc, #112]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b188:	681b      	ldr	r3, [r3, #0]
   1b18a:	4a1c      	ldr	r2, [pc, #112]	; (1b1fc <prvReportStackUsage+0xbc>)
   1b18c:	00db      	lsls	r3, r3, #3
   1b18e:	18d3      	adds	r3, r2, r3
   1b190:	3304      	adds	r3, #4
   1b192:	687a      	ldr	r2, [r7, #4]
   1b194:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   1b196:	4b18      	ldr	r3, [pc, #96]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b198:	681a      	ldr	r2, [r3, #0]
   1b19a:	4b18      	ldr	r3, [pc, #96]	; (1b1fc <prvReportStackUsage+0xbc>)
   1b19c:	00d2      	lsls	r2, r2, #3
   1b19e:	58d3      	ldr	r3, [r2, r3]
   1b1a0:	0018      	movs	r0, r3
   1b1a2:	4b18      	ldr	r3, [pc, #96]	; (1b204 <prvReportStackUsage+0xc4>)
   1b1a4:	4798      	blx	r3
   1b1a6:	0003      	movs	r3, r0
   1b1a8:	b2db      	uxtb	r3, r3
   1b1aa:	0019      	movs	r1, r3
   1b1ac:	4b12      	ldr	r3, [pc, #72]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b1ae:	681b      	ldr	r3, [r3, #0]
   1b1b0:	4a12      	ldr	r2, [pc, #72]	; (1b1fc <prvReportStackUsage+0xbc>)
   1b1b2:	00db      	lsls	r3, r3, #3
   1b1b4:	18d3      	adds	r3, r2, r3
   1b1b6:	3304      	adds	r3, #4
   1b1b8:	681b      	ldr	r3, [r3, #0]
   1b1ba:	000a      	movs	r2, r1
   1b1bc:	2103      	movs	r1, #3
   1b1be:	20ea      	movs	r0, #234	; 0xea
   1b1c0:	4c11      	ldr	r4, [pc, #68]	; (1b208 <prvReportStackUsage+0xc8>)
   1b1c2:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   1b1c4:	68fb      	ldr	r3, [r7, #12]
   1b1c6:	3301      	adds	r3, #1
   1b1c8:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   1b1ca:	4b0b      	ldr	r3, [pc, #44]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b1cc:	681b      	ldr	r3, [r3, #0]
   1b1ce:	1c5a      	adds	r2, r3, #1
   1b1d0:	4b0e      	ldr	r3, [pc, #56]	; (1b20c <prvReportStackUsage+0xcc>)
   1b1d2:	210a      	movs	r1, #10
   1b1d4:	0010      	movs	r0, r2
   1b1d6:	4798      	blx	r3
   1b1d8:	000b      	movs	r3, r1
   1b1da:	001a      	movs	r2, r3
   1b1dc:	4b06      	ldr	r3, [pc, #24]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b1de:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1b1e0:	68fb      	ldr	r3, [r7, #12]
   1b1e2:	2b00      	cmp	r3, #0
   1b1e4:	dc04      	bgt.n	1b1f0 <prvReportStackUsage+0xb0>
   1b1e6:	4b04      	ldr	r3, [pc, #16]	; (1b1f8 <prvReportStackUsage+0xb8>)
   1b1e8:	681a      	ldr	r2, [r3, #0]
   1b1ea:	68bb      	ldr	r3, [r7, #8]
   1b1ec:	429a      	cmp	r2, r3
   1b1ee:	d1af      	bne.n	1b150 <prvReportStackUsage+0x10>
}
   1b1f0:	46c0      	nop			; (mov r8, r8)
   1b1f2:	46bd      	mov	sp, r7
   1b1f4:	b005      	add	sp, #20
   1b1f6:	bd90      	pop	{r4, r7, pc}
   1b1f8:	20000c54 	.word	0x20000c54
   1b1fc:	20000c00 	.word	0x20000c00
   1b200:	0001fbd1 	.word	0x0001fbd1
   1b204:	0001af55 	.word	0x0001af55
   1b208:	0001ba9d 	.word	0x0001ba9d
   1b20c:	00035cd1 	.word	0x00035cd1

0001b210 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1b210:	b580      	push	{r7, lr}
   1b212:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   1b214:	4b02      	ldr	r3, [pc, #8]	; (1b220 <prvTraceGetCurrentTaskHandle+0x10>)
   1b216:	4798      	blx	r3
   1b218:	0003      	movs	r3, r0
}
   1b21a:	0018      	movs	r0, r3
   1b21c:	46bd      	mov	sp, r7
   1b21e:	bd80      	pop	{r7, pc}
   1b220:	0001fc7d 	.word	0x0001fc7d

0001b224 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   1b224:	b590      	push	{r4, r7, lr}
   1b226:	b085      	sub	sp, #20
   1b228:	af02      	add	r7, sp, #8
   1b22a:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   1b22c:	4b14      	ldr	r3, [pc, #80]	; (1b280 <vTraceEnable+0x5c>)
   1b22e:	4798      	blx	r3

	if (startOption == TRC_START)
   1b230:	687b      	ldr	r3, [r7, #4]
   1b232:	2b01      	cmp	r3, #1
   1b234:	d102      	bne.n	1b23c <vTraceEnable+0x18>
	{
		vTraceStart();
   1b236:	4b13      	ldr	r3, [pc, #76]	; (1b284 <vTraceEnable+0x60>)
   1b238:	4798      	blx	r3
   1b23a:	e00e      	b.n	1b25a <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   1b23c:	687b      	ldr	r3, [r7, #4]
   1b23e:	2b02      	cmp	r3, #2
   1b240:	d104      	bne.n	1b24c <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   1b242:	4b11      	ldr	r3, [pc, #68]	; (1b288 <vTraceEnable+0x64>)
   1b244:	0018      	movs	r0, r3
   1b246:	4b11      	ldr	r3, [pc, #68]	; (1b28c <vTraceEnable+0x68>)
   1b248:	4798      	blx	r3
   1b24a:	e006      	b.n	1b25a <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   1b24c:	687b      	ldr	r3, [r7, #4]
   1b24e:	2b00      	cmp	r3, #0
   1b250:	d003      	beq.n	1b25a <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1b252:	4b0f      	ldr	r3, [pc, #60]	; (1b290 <vTraceEnable+0x6c>)
   1b254:	0018      	movs	r0, r3
   1b256:	4b0d      	ldr	r3, [pc, #52]	; (1b28c <vTraceEnable+0x68>)
   1b258:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1b25a:	4b0e      	ldr	r3, [pc, #56]	; (1b294 <vTraceEnable+0x70>)
   1b25c:	681b      	ldr	r3, [r3, #0]
   1b25e:	2b00      	cmp	r3, #0
   1b260:	d10a      	bne.n	1b278 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1b262:	2396      	movs	r3, #150	; 0x96
   1b264:	005a      	lsls	r2, r3, #1
   1b266:	490c      	ldr	r1, [pc, #48]	; (1b298 <vTraceEnable+0x74>)
   1b268:	480c      	ldr	r0, [pc, #48]	; (1b29c <vTraceEnable+0x78>)
   1b26a:	4b0a      	ldr	r3, [pc, #40]	; (1b294 <vTraceEnable+0x70>)
   1b26c:	9301      	str	r3, [sp, #4]
   1b26e:	2304      	movs	r3, #4
   1b270:	9300      	str	r3, [sp, #0]
   1b272:	2300      	movs	r3, #0
   1b274:	4c0a      	ldr	r4, [pc, #40]	; (1b2a0 <vTraceEnable+0x7c>)
   1b276:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   1b278:	46c0      	nop			; (mov r8, r8)
   1b27a:	46bd      	mov	sp, r7
   1b27c:	b003      	add	sp, #12
   1b27e:	bd90      	pop	{r4, r7, pc}
   1b280:	0001c169 	.word	0x0001c169
   1b284:	0001b6c1 	.word	0x0001b6c1
   1b288:	0003b40c 	.word	0x0003b40c
   1b28c:	0001c811 	.word	0x0001c811
   1b290:	0003b44c 	.word	0x0003b44c
   1b294:	20000bfc 	.word	0x20000bfc
   1b298:	0003b480 	.word	0x0003b480
   1b29c:	0001b2a5 	.word	0x0001b2a5
   1b2a0:	0001ebd5 	.word	0x0001ebd5

0001b2a4 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   1b2a4:	b580      	push	{r7, lr}
   1b2a6:	b082      	sub	sp, #8
   1b2a8:	af00      	add	r7, sp, #0
   1b2aa:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   1b2ac:	4b04      	ldr	r3, [pc, #16]	; (1b2c0 <TzCtrl+0x1c>)
   1b2ae:	4798      	blx	r3
   1b2b0:	1e03      	subs	r3, r0, #0
   1b2b2:	d001      	beq.n	1b2b8 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   1b2b4:	4b03      	ldr	r3, [pc, #12]	; (1b2c4 <TzCtrl+0x20>)
   1b2b6:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   1b2b8:	2004      	movs	r0, #4
   1b2ba:	4b03      	ldr	r3, [pc, #12]	; (1b2c8 <TzCtrl+0x24>)
   1b2bc:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1b2be:	e7f5      	b.n	1b2ac <TzCtrl+0x8>
   1b2c0:	0001b705 	.word	0x0001b705
   1b2c4:	0001b141 	.word	0x0001b141
   1b2c8:	0001ef71 	.word	0x0001ef71

0001b2cc <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   1b2cc:	b580      	push	{r7, lr}
   1b2ce:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1b2d0:	4b60      	ldr	r3, [pc, #384]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b2d2:	681b      	ldr	r3, [r3, #0]
   1b2d4:	2209      	movs	r2, #9
   1b2d6:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   1b2d8:	4b5e      	ldr	r3, [pc, #376]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b2da:	681b      	ldr	r3, [r3, #0]
   1b2dc:	2264      	movs	r2, #100	; 0x64
   1b2de:	210a      	movs	r1, #10
   1b2e0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1b2e2:	4b5c      	ldr	r3, [pc, #368]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b2e4:	681b      	ldr	r3, [r3, #0]
   1b2e6:	2265      	movs	r2, #101	; 0x65
   1b2e8:	210a      	movs	r1, #10
   1b2ea:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1b2ec:	4b59      	ldr	r3, [pc, #356]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b2ee:	681b      	ldr	r3, [r3, #0]
   1b2f0:	2266      	movs	r2, #102	; 0x66
   1b2f2:	210a      	movs	r1, #10
   1b2f4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   1b2f6:	4b57      	ldr	r3, [pc, #348]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b2f8:	681b      	ldr	r3, [r3, #0]
   1b2fa:	2267      	movs	r2, #103	; 0x67
   1b2fc:	210f      	movs	r1, #15
   1b2fe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1b300:	4b54      	ldr	r3, [pc, #336]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b302:	681b      	ldr	r3, [r3, #0]
   1b304:	2268      	movs	r2, #104	; 0x68
   1b306:	2105      	movs	r1, #5
   1b308:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1b30a:	4b52      	ldr	r3, [pc, #328]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b30c:	681b      	ldr	r3, [r3, #0]
   1b30e:	2269      	movs	r2, #105	; 0x69
   1b310:	2105      	movs	r1, #5
   1b312:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   1b314:	4b4f      	ldr	r3, [pc, #316]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b316:	681b      	ldr	r3, [r3, #0]
   1b318:	226a      	movs	r2, #106	; 0x6a
   1b31a:	2105      	movs	r1, #5
   1b31c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1b31e:	4b4d      	ldr	r3, [pc, #308]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b320:	681b      	ldr	r3, [r3, #0]
   1b322:	226b      	movs	r2, #107	; 0x6b
   1b324:	2105      	movs	r1, #5
   1b326:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   1b328:	4b4a      	ldr	r3, [pc, #296]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b32a:	681b      	ldr	r3, [r3, #0]
   1b32c:	226c      	movs	r2, #108	; 0x6c
   1b32e:	2105      	movs	r1, #5
   1b330:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   1b332:	4b48      	ldr	r3, [pc, #288]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b334:	681b      	ldr	r3, [r3, #0]
   1b336:	2270      	movs	r2, #112	; 0x70
   1b338:	210f      	movs	r1, #15
   1b33a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   1b33c:	4b45      	ldr	r3, [pc, #276]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b33e:	681b      	ldr	r3, [r3, #0]
   1b340:	2271      	movs	r2, #113	; 0x71
   1b342:	210f      	movs	r1, #15
   1b344:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   1b346:	4b43      	ldr	r3, [pc, #268]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b348:	681b      	ldr	r3, [r3, #0]
   1b34a:	2272      	movs	r2, #114	; 0x72
   1b34c:	210f      	movs	r1, #15
   1b34e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1b350:	4b40      	ldr	r3, [pc, #256]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b352:	681b      	ldr	r3, [r3, #0]
   1b354:	2273      	movs	r2, #115	; 0x73
   1b356:	210f      	movs	r1, #15
   1b358:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1b35a:	4b3e      	ldr	r3, [pc, #248]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b35c:	681b      	ldr	r3, [r3, #0]
   1b35e:	2274      	movs	r2, #116	; 0x74
   1b360:	210f      	movs	r1, #15
   1b362:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   1b364:	4b3b      	ldr	r3, [pc, #236]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b366:	681b      	ldr	r3, [r3, #0]
   1b368:	2275      	movs	r2, #117	; 0x75
   1b36a:	210f      	movs	r1, #15
   1b36c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1b36e:	4b39      	ldr	r3, [pc, #228]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b370:	681b      	ldr	r3, [r3, #0]
   1b372:	2276      	movs	r2, #118	; 0x76
   1b374:	210f      	movs	r1, #15
   1b376:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   1b378:	4b36      	ldr	r3, [pc, #216]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b37a:	681b      	ldr	r3, [r3, #0]
   1b37c:	2277      	movs	r2, #119	; 0x77
   1b37e:	210f      	movs	r1, #15
   1b380:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1b382:	4b34      	ldr	r3, [pc, #208]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b384:	681b      	ldr	r3, [r3, #0]
   1b386:	2278      	movs	r2, #120	; 0x78
   1b388:	210f      	movs	r1, #15
   1b38a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   1b38c:	4b31      	ldr	r3, [pc, #196]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b38e:	681b      	ldr	r3, [r3, #0]
   1b390:	227c      	movs	r2, #124	; 0x7c
   1b392:	2110      	movs	r1, #16
   1b394:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   1b396:	4b2f      	ldr	r3, [pc, #188]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b398:	681b      	ldr	r3, [r3, #0]
   1b39a:	227d      	movs	r2, #125	; 0x7d
   1b39c:	2110      	movs	r1, #16
   1b39e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1b3a0:	4b2c      	ldr	r3, [pc, #176]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3a2:	681b      	ldr	r3, [r3, #0]
   1b3a4:	227e      	movs	r2, #126	; 0x7e
   1b3a6:	2110      	movs	r1, #16
   1b3a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   1b3aa:	4b2a      	ldr	r3, [pc, #168]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3ac:	681b      	ldr	r3, [r3, #0]
   1b3ae:	227f      	movs	r2, #127	; 0x7f
   1b3b0:	2113      	movs	r1, #19
   1b3b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   1b3b4:	4b27      	ldr	r3, [pc, #156]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3b6:	681b      	ldr	r3, [r3, #0]
   1b3b8:	2280      	movs	r2, #128	; 0x80
   1b3ba:	2111      	movs	r1, #17
   1b3bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1b3be:	4b25      	ldr	r3, [pc, #148]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3c0:	681b      	ldr	r3, [r3, #0]
   1b3c2:	2281      	movs	r2, #129	; 0x81
   1b3c4:	2110      	movs	r1, #16
   1b3c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   1b3c8:	4b22      	ldr	r3, [pc, #136]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3ca:	681b      	ldr	r3, [r3, #0]
   1b3cc:	2282      	movs	r2, #130	; 0x82
   1b3ce:	2113      	movs	r1, #19
   1b3d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1b3d2:	4b20      	ldr	r3, [pc, #128]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3d4:	681b      	ldr	r3, [r3, #0]
   1b3d6:	2283      	movs	r2, #131	; 0x83
   1b3d8:	2113      	movs	r1, #19
   1b3da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   1b3dc:	4b1d      	ldr	r3, [pc, #116]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3de:	681b      	ldr	r3, [r3, #0]
   1b3e0:	2284      	movs	r2, #132	; 0x84
   1b3e2:	2113      	movs	r1, #19
   1b3e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   1b3e6:	4b1b      	ldr	r3, [pc, #108]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3e8:	681b      	ldr	r3, [r3, #0]
   1b3ea:	2288      	movs	r2, #136	; 0x88
   1b3ec:	2100      	movs	r1, #0
   1b3ee:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1b3f0:	4b18      	ldr	r3, [pc, #96]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3f2:	681b      	ldr	r3, [r3, #0]
   1b3f4:	228a      	movs	r2, #138	; 0x8a
   1b3f6:	21a0      	movs	r1, #160	; 0xa0
   1b3f8:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1b3fa:	4b16      	ldr	r3, [pc, #88]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b3fc:	681b      	ldr	r3, [r3, #0]
   1b3fe:	228c      	movs	r2, #140	; 0x8c
   1b400:	21a0      	movs	r1, #160	; 0xa0
   1b402:	0049      	lsls	r1, r1, #1
   1b404:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   1b406:	4b13      	ldr	r3, [pc, #76]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b408:	681b      	ldr	r3, [r3, #0]
   1b40a:	228e      	movs	r2, #142	; 0x8e
   1b40c:	21f0      	movs	r1, #240	; 0xf0
   1b40e:	0049      	lsls	r1, r1, #1
   1b410:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1b412:	4b10      	ldr	r3, [pc, #64]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b414:	681b      	ldr	r3, [r3, #0]
   1b416:	2290      	movs	r2, #144	; 0x90
   1b418:	490f      	ldr	r1, [pc, #60]	; (1b458 <vTraceInitObjectPropertyTable+0x18c>)
   1b41a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   1b41c:	4b0d      	ldr	r3, [pc, #52]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b41e:	681b      	ldr	r3, [r3, #0]
   1b420:	2292      	movs	r2, #146	; 0x92
   1b422:	490e      	ldr	r1, [pc, #56]	; (1b45c <vTraceInitObjectPropertyTable+0x190>)
   1b424:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   1b426:	4b0b      	ldr	r3, [pc, #44]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b428:	681b      	ldr	r3, [r3, #0]
   1b42a:	2294      	movs	r2, #148	; 0x94
   1b42c:	490c      	ldr	r1, [pc, #48]	; (1b460 <vTraceInitObjectPropertyTable+0x194>)
   1b42e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   1b430:	4b08      	ldr	r3, [pc, #32]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b432:	681b      	ldr	r3, [r3, #0]
   1b434:	2296      	movs	r2, #150	; 0x96
   1b436:	490b      	ldr	r1, [pc, #44]	; (1b464 <vTraceInitObjectPropertyTable+0x198>)
   1b438:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1b43a:	4b06      	ldr	r3, [pc, #24]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b43c:	681b      	ldr	r3, [r3, #0]
   1b43e:	2298      	movs	r2, #152	; 0x98
   1b440:	218c      	movs	r1, #140	; 0x8c
   1b442:	00c9      	lsls	r1, r1, #3
   1b444:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   1b446:	4b03      	ldr	r3, [pc, #12]	; (1b454 <vTraceInitObjectPropertyTable+0x188>)
   1b448:	681b      	ldr	r3, [r3, #0]
   1b44a:	4a07      	ldr	r2, [pc, #28]	; (1b468 <vTraceInitObjectPropertyTable+0x19c>)
   1b44c:	661a      	str	r2, [r3, #96]	; 0x60
}
   1b44e:	46c0      	nop			; (mov r8, r8)
   1b450:	46bd      	mov	sp, r7
   1b452:	bd80      	pop	{r7, pc}
   1b454:	20000d14 	.word	0x20000d14
   1b458:	000002fd 	.word	0x000002fd
   1b45c:	00000352 	.word	0x00000352
   1b460:	000003a2 	.word	0x000003a2
   1b464:	00000401 	.word	0x00000401
   1b468:	000004bf 	.word	0x000004bf

0001b46c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   1b46c:	b580      	push	{r7, lr}
   1b46e:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1b470:	4b2e      	ldr	r3, [pc, #184]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b472:	2200      	movs	r2, #0
   1b474:	825a      	strh	r2, [r3, #18]
   1b476:	4b2d      	ldr	r3, [pc, #180]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b478:	8a5a      	ldrh	r2, [r3, #18]
   1b47a:	4b2c      	ldr	r3, [pc, #176]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b47c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1b47e:	4b2b      	ldr	r3, [pc, #172]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b480:	220a      	movs	r2, #10
   1b482:	829a      	strh	r2, [r3, #20]
   1b484:	4b29      	ldr	r3, [pc, #164]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b486:	8a9a      	ldrh	r2, [r3, #20]
   1b488:	4b28      	ldr	r3, [pc, #160]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b48a:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   1b48c:	4b27      	ldr	r3, [pc, #156]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b48e:	2214      	movs	r2, #20
   1b490:	82da      	strh	r2, [r3, #22]
   1b492:	4b26      	ldr	r3, [pc, #152]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b494:	8ada      	ldrh	r2, [r3, #22]
   1b496:	4b25      	ldr	r3, [pc, #148]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b498:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   1b49a:	4b24      	ldr	r3, [pc, #144]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b49c:	221e      	movs	r2, #30
   1b49e:	831a      	strh	r2, [r3, #24]
   1b4a0:	4b22      	ldr	r3, [pc, #136]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4a2:	8b1a      	ldrh	r2, [r3, #24]
   1b4a4:	4b21      	ldr	r3, [pc, #132]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4a6:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   1b4a8:	4b20      	ldr	r3, [pc, #128]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4aa:	222d      	movs	r2, #45	; 0x2d
   1b4ac:	835a      	strh	r2, [r3, #26]
   1b4ae:	4b1f      	ldr	r3, [pc, #124]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4b0:	8b5a      	ldrh	r2, [r3, #26]
   1b4b2:	4b1e      	ldr	r3, [pc, #120]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4b4:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   1b4b6:	4b1d      	ldr	r3, [pc, #116]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4b8:	2232      	movs	r2, #50	; 0x32
   1b4ba:	839a      	strh	r2, [r3, #28]
   1b4bc:	4b1b      	ldr	r3, [pc, #108]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4be:	8b9a      	ldrh	r2, [r3, #28]
   1b4c0:	4b1a      	ldr	r3, [pc, #104]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4c2:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   1b4c4:	4b19      	ldr	r3, [pc, #100]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4c6:	2237      	movs	r2, #55	; 0x37
   1b4c8:	83da      	strh	r2, [r3, #30]
   1b4ca:	4b18      	ldr	r3, [pc, #96]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4cc:	8bda      	ldrh	r2, [r3, #30]
   1b4ce:	4b17      	ldr	r3, [pc, #92]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4d0:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1b4d2:	4b16      	ldr	r3, [pc, #88]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4d4:	223c      	movs	r2, #60	; 0x3c
   1b4d6:	841a      	strh	r2, [r3, #32]
   1b4d8:	4b14      	ldr	r3, [pc, #80]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4da:	8c1a      	ldrh	r2, [r3, #32]
   1b4dc:	4b13      	ldr	r3, [pc, #76]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4de:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1b4e0:	4b12      	ldr	r3, [pc, #72]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4e2:	2241      	movs	r2, #65	; 0x41
   1b4e4:	845a      	strh	r2, [r3, #34]	; 0x22
   1b4e6:	4b11      	ldr	r3, [pc, #68]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4e8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1b4ea:	4b10      	ldr	r3, [pc, #64]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4ec:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1b4ee:	4b0f      	ldr	r3, [pc, #60]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4f0:	2209      	movs	r2, #9
   1b4f2:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   1b4f4:	4b0d      	ldr	r3, [pc, #52]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4f6:	2213      	movs	r2, #19
   1b4f8:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1b4fa:	4b0c      	ldr	r3, [pc, #48]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b4fc:	221d      	movs	r2, #29
   1b4fe:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1b500:	4b0a      	ldr	r3, [pc, #40]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b502:	222c      	movs	r2, #44	; 0x2c
   1b504:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   1b506:	4b09      	ldr	r3, [pc, #36]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b508:	2231      	movs	r2, #49	; 0x31
   1b50a:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   1b50c:	4b07      	ldr	r3, [pc, #28]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b50e:	2236      	movs	r2, #54	; 0x36
   1b510:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1b512:	4b06      	ldr	r3, [pc, #24]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b514:	223b      	movs	r2, #59	; 0x3b
   1b516:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   1b518:	4b04      	ldr	r3, [pc, #16]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b51a:	2240      	movs	r2, #64	; 0x40
   1b51c:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1b51e:	4b03      	ldr	r3, [pc, #12]	; (1b52c <vTraceInitObjectHandleStack+0xc0>)
   1b520:	2245      	movs	r2, #69	; 0x45
   1b522:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1b524:	46c0      	nop			; (mov r8, r8)
   1b526:	46bd      	mov	sp, r7
   1b528:	bd80      	pop	{r7, pc}
   1b52a:	46c0      	nop			; (mov r8, r8)
   1b52c:	20000c84 	.word	0x20000c84

0001b530 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   1b530:	b580      	push	{r7, lr}
   1b532:	b082      	sub	sp, #8
   1b534:	af00      	add	r7, sp, #0
   1b536:	0002      	movs	r2, r0
   1b538:	1dfb      	adds	r3, r7, #7
   1b53a:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   1b53c:	1dfb      	adds	r3, r7, #7
   1b53e:	781b      	ldrb	r3, [r3, #0]
   1b540:	2b08      	cmp	r3, #8
   1b542:	d816      	bhi.n	1b572 <pszTraceGetErrorNotEnoughHandles+0x42>
   1b544:	009a      	lsls	r2, r3, #2
   1b546:	4b0d      	ldr	r3, [pc, #52]	; (1b57c <pszTraceGetErrorNotEnoughHandles+0x4c>)
   1b548:	18d3      	adds	r3, r2, r3
   1b54a:	681b      	ldr	r3, [r3, #0]
   1b54c:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1b54e:	4b0c      	ldr	r3, [pc, #48]	; (1b580 <pszTraceGetErrorNotEnoughHandles+0x50>)
   1b550:	e010      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1b552:	4b0c      	ldr	r3, [pc, #48]	; (1b584 <pszTraceGetErrorNotEnoughHandles+0x54>)
   1b554:	e00e      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   1b556:	4b0c      	ldr	r3, [pc, #48]	; (1b588 <pszTraceGetErrorNotEnoughHandles+0x58>)
   1b558:	e00c      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1b55a:	4b0c      	ldr	r3, [pc, #48]	; (1b58c <pszTraceGetErrorNotEnoughHandles+0x5c>)
   1b55c:	e00a      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1b55e:	4b0c      	ldr	r3, [pc, #48]	; (1b590 <pszTraceGetErrorNotEnoughHandles+0x60>)
   1b560:	e008      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1b562:	4b0c      	ldr	r3, [pc, #48]	; (1b594 <pszTraceGetErrorNotEnoughHandles+0x64>)
   1b564:	e006      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   1b566:	4b0c      	ldr	r3, [pc, #48]	; (1b598 <pszTraceGetErrorNotEnoughHandles+0x68>)
   1b568:	e004      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1b56a:	4b0c      	ldr	r3, [pc, #48]	; (1b59c <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1b56c:	e002      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1b56e:	4b0c      	ldr	r3, [pc, #48]	; (1b5a0 <pszTraceGetErrorNotEnoughHandles+0x70>)
   1b570:	e000      	b.n	1b574 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1b572:	4b0c      	ldr	r3, [pc, #48]	; (1b5a4 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   1b574:	0018      	movs	r0, r3
   1b576:	46bd      	mov	sp, r7
   1b578:	b002      	add	sp, #8
   1b57a:	bd80      	pop	{r7, pc}
   1b57c:	0003b788 	.word	0x0003b788
   1b580:	0003b488 	.word	0x0003b488
   1b584:	0003b4d0 	.word	0x0003b4d0
   1b588:	0003b518 	.word	0x0003b518
   1b58c:	0003b56c 	.word	0x0003b56c
   1b590:	0003b5b8 	.word	0x0003b5b8
   1b594:	0003b604 	.word	0x0003b604
   1b598:	0003b650 	.word	0x0003b650
   1b59c:	0003b6a4 	.word	0x0003b6a4
   1b5a0:	0003b6fc 	.word	0x0003b6fc
   1b5a4:	0003b758 	.word	0x0003b758

0001b5a8 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   1b5a8:	b590      	push	{r4, r7, lr}
   1b5aa:	b087      	sub	sp, #28
   1b5ac:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1b5ae:	2317      	movs	r3, #23
   1b5b0:	18fb      	adds	r3, r7, r3
   1b5b2:	2200      	movs	r2, #0
   1b5b4:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   1b5b6:	4b36      	ldr	r3, [pc, #216]	; (1b690 <uiTraceStart+0xe8>)
   1b5b8:	681b      	ldr	r3, [r3, #0]
   1b5ba:	2b00      	cmp	r3, #0
   1b5bc:	d10b      	bne.n	1b5d6 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1b5be:	4b34      	ldr	r3, [pc, #208]	; (1b690 <uiTraceStart+0xe8>)
   1b5c0:	681b      	ldr	r3, [r3, #0]
   1b5c2:	2b00      	cmp	r3, #0
   1b5c4:	d105      	bne.n	1b5d2 <uiTraceStart+0x2a>
   1b5c6:	4b33      	ldr	r3, [pc, #204]	; (1b694 <uiTraceStart+0xec>)
   1b5c8:	0018      	movs	r0, r3
   1b5ca:	4b33      	ldr	r3, [pc, #204]	; (1b698 <uiTraceStart+0xf0>)
   1b5cc:	4798      	blx	r3
   1b5ce:	2300      	movs	r3, #0
   1b5d0:	e059      	b.n	1b686 <uiTraceStart+0xde>
		return 0;
   1b5d2:	2300      	movs	r3, #0
   1b5d4:	e057      	b.n	1b686 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   1b5d6:	4b2e      	ldr	r3, [pc, #184]	; (1b690 <uiTraceStart+0xe8>)
   1b5d8:	681b      	ldr	r3, [r3, #0]
   1b5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b5dc:	2b01      	cmp	r3, #1
   1b5de:	d101      	bne.n	1b5e4 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1b5e0:	2301      	movs	r3, #1
   1b5e2:	e050      	b.n	1b686 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   1b5e4:	4b2d      	ldr	r3, [pc, #180]	; (1b69c <uiTraceStart+0xf4>)
   1b5e6:	681b      	ldr	r3, [r3, #0]
   1b5e8:	2b00      	cmp	r3, #0
   1b5ea:	d149      	bne.n	1b680 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b5ec:	f3ef 8310 	mrs	r3, PRIMASK
   1b5f0:	60bb      	str	r3, [r7, #8]
  return(result);
   1b5f2:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   1b5f4:	613b      	str	r3, [r7, #16]
   1b5f6:	2301      	movs	r3, #1
   1b5f8:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b5fa:	68fb      	ldr	r3, [r7, #12]
   1b5fc:	f383 8810 	msr	PRIMASK, r3
   1b600:	4b27      	ldr	r3, [pc, #156]	; (1b6a0 <uiTraceStart+0xf8>)
   1b602:	681b      	ldr	r3, [r3, #0]
   1b604:	1c5a      	adds	r2, r3, #1
   1b606:	4b26      	ldr	r3, [pc, #152]	; (1b6a0 <uiTraceStart+0xf8>)
   1b608:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1b60a:	4b21      	ldr	r3, [pc, #132]	; (1b690 <uiTraceStart+0xe8>)
   1b60c:	681b      	ldr	r3, [r3, #0]
   1b60e:	2201      	movs	r2, #1
   1b610:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1b612:	4b24      	ldr	r3, [pc, #144]	; (1b6a4 <uiTraceStart+0xfc>)
   1b614:	4798      	blx	r3
   1b616:	0003      	movs	r3, r0
   1b618:	0018      	movs	r0, r3
   1b61a:	4b23      	ldr	r3, [pc, #140]	; (1b6a8 <uiTraceStart+0x100>)
   1b61c:	4798      	blx	r3
   1b61e:	0003      	movs	r3, r0
   1b620:	001a      	movs	r2, r3
   1b622:	2317      	movs	r3, #23
   1b624:	18fb      	adds	r3, r7, r3
   1b626:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   1b628:	2317      	movs	r3, #23
   1b62a:	18fb      	adds	r3, r7, r3
   1b62c:	781b      	ldrb	r3, [r3, #0]
   1b62e:	2b00      	cmp	r3, #0
   1b630:	d116      	bne.n	1b660 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   1b632:	2317      	movs	r3, #23
   1b634:	18fc      	adds	r4, r7, r3
   1b636:	2003      	movs	r0, #3
   1b638:	4b1c      	ldr	r3, [pc, #112]	; (1b6ac <uiTraceStart+0x104>)
   1b63a:	4798      	blx	r3
   1b63c:	0003      	movs	r3, r0
   1b63e:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1b640:	4a1b      	ldr	r2, [pc, #108]	; (1b6b0 <uiTraceStart+0x108>)
   1b642:	2317      	movs	r3, #23
   1b644:	18fb      	adds	r3, r7, r3
   1b646:	781b      	ldrb	r3, [r3, #0]
   1b648:	0019      	movs	r1, r3
   1b64a:	2003      	movs	r0, #3
   1b64c:	4b19      	ldr	r3, [pc, #100]	; (1b6b4 <uiTraceStart+0x10c>)
   1b64e:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1b650:	2317      	movs	r3, #23
   1b652:	18fb      	adds	r3, r7, r3
   1b654:	781b      	ldrb	r3, [r3, #0]
   1b656:	2200      	movs	r2, #0
   1b658:	0019      	movs	r1, r3
   1b65a:	2003      	movs	r0, #3
   1b65c:	4b16      	ldr	r3, [pc, #88]	; (1b6b8 <uiTraceStart+0x110>)
   1b65e:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1b660:	2317      	movs	r3, #23
   1b662:	18fb      	adds	r3, r7, r3
   1b664:	781b      	ldrb	r3, [r3, #0]
   1b666:	0018      	movs	r0, r3
   1b668:	4b14      	ldr	r3, [pc, #80]	; (1b6bc <uiTraceStart+0x114>)
   1b66a:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1b66c:	4b0c      	ldr	r3, [pc, #48]	; (1b6a0 <uiTraceStart+0xf8>)
   1b66e:	681b      	ldr	r3, [r3, #0]
   1b670:	1e5a      	subs	r2, r3, #1
   1b672:	4b0b      	ldr	r3, [pc, #44]	; (1b6a0 <uiTraceStart+0xf8>)
   1b674:	601a      	str	r2, [r3, #0]
   1b676:	693b      	ldr	r3, [r7, #16]
   1b678:	607b      	str	r3, [r7, #4]
   1b67a:	687b      	ldr	r3, [r7, #4]
   1b67c:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1b680:	4b03      	ldr	r3, [pc, #12]	; (1b690 <uiTraceStart+0xe8>)
   1b682:	681b      	ldr	r3, [r3, #0]
   1b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   1b686:	0018      	movs	r0, r3
   1b688:	46bd      	mov	sp, r7
   1b68a:	b007      	add	sp, #28
   1b68c:	bd90      	pop	{r4, r7, pc}
   1b68e:	46c0      	nop			; (mov r8, r8)
   1b690:	20000d14 	.word	0x20000d14
   1b694:	0003b7ac 	.word	0x0003b7ac
   1b698:	0001c811 	.word	0x0001c811
   1b69c:	20000c74 	.word	0x20000c74
   1b6a0:	20000c6c 	.word	0x20000c6c
   1b6a4:	0001b211 	.word	0x0001b211
   1b6a8:	0001af55 	.word	0x0001af55
   1b6ac:	0001c4f5 	.word	0x0001c4f5
   1b6b0:	0003b7f0 	.word	0x0003b7f0
   1b6b4:	0001c725 	.word	0x0001c725
   1b6b8:	0001be89 	.word	0x0001be89
   1b6bc:	0001bd71 	.word	0x0001bd71

0001b6c0 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1b6c0:	b580      	push	{r7, lr}
   1b6c2:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   1b6c4:	4b02      	ldr	r3, [pc, #8]	; (1b6d0 <vTraceStart+0x10>)
   1b6c6:	4798      	blx	r3
}
   1b6c8:	46c0      	nop			; (mov r8, r8)
   1b6ca:	46bd      	mov	sp, r7
   1b6cc:	bd80      	pop	{r7, pc}
   1b6ce:	46c0      	nop			; (mov r8, r8)
   1b6d0:	0001b5a9 	.word	0x0001b5a9

0001b6d4 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   1b6d4:	b580      	push	{r7, lr}
   1b6d6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1b6d8:	4b08      	ldr	r3, [pc, #32]	; (1b6fc <vTraceStop+0x28>)
   1b6da:	681b      	ldr	r3, [r3, #0]
   1b6dc:	2b00      	cmp	r3, #0
   1b6de:	d003      	beq.n	1b6e8 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1b6e0:	4b06      	ldr	r3, [pc, #24]	; (1b6fc <vTraceStop+0x28>)
   1b6e2:	681b      	ldr	r3, [r3, #0]
   1b6e4:	2200      	movs	r2, #0
   1b6e6:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   1b6e8:	4b05      	ldr	r3, [pc, #20]	; (1b700 <vTraceStop+0x2c>)
   1b6ea:	681b      	ldr	r3, [r3, #0]
   1b6ec:	2b00      	cmp	r3, #0
   1b6ee:	d002      	beq.n	1b6f6 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1b6f0:	4b03      	ldr	r3, [pc, #12]	; (1b700 <vTraceStop+0x2c>)
   1b6f2:	681b      	ldr	r3, [r3, #0]
   1b6f4:	4798      	blx	r3
	}
}
   1b6f6:	46c0      	nop			; (mov r8, r8)
   1b6f8:	46bd      	mov	sp, r7
   1b6fa:	bd80      	pop	{r7, pc}
   1b6fc:	20000d14 	.word	0x20000d14
   1b700:	20000c7c 	.word	0x20000c7c

0001b704 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   1b704:	b580      	push	{r7, lr}
   1b706:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   1b708:	4b05      	ldr	r3, [pc, #20]	; (1b720 <xTraceIsRecordingEnabled+0x1c>)
   1b70a:	681b      	ldr	r3, [r3, #0]
   1b70c:	2b00      	cmp	r3, #0
   1b70e:	d003      	beq.n	1b718 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1b710:	4b03      	ldr	r3, [pc, #12]	; (1b720 <xTraceIsRecordingEnabled+0x1c>)
   1b712:	681b      	ldr	r3, [r3, #0]
   1b714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b716:	e000      	b.n	1b71a <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   1b718:	2300      	movs	r3, #0
	}
}
   1b71a:	0018      	movs	r0, r3
   1b71c:	46bd      	mov	sp, r7
   1b71e:	bd80      	pop	{r7, pc}
   1b720:	20000d14 	.word	0x20000d14

0001b724 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   1b724:	b590      	push	{r4, r7, lr}
   1b726:	b089      	sub	sp, #36	; 0x24
   1b728:	af00      	add	r7, sp, #0
   1b72a:	0002      	movs	r2, r0
   1b72c:	1dfb      	adds	r3, r7, #7
   1b72e:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   1b730:	1dfb      	adds	r3, r7, #7
   1b732:	781b      	ldrb	r3, [r3, #0]
   1b734:	2b00      	cmp	r3, #0
   1b736:	d057      	beq.n	1b7e8 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   1b738:	4b2e      	ldr	r3, [pc, #184]	; (1b7f4 <prvTraceStoreTaskReady+0xd0>)
   1b73a:	681b      	ldr	r3, [r3, #0]
   1b73c:	2b00      	cmp	r3, #0
   1b73e:	d055      	beq.n	1b7ec <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1b740:	1dfb      	adds	r3, r7, #7
   1b742:	781b      	ldrb	r3, [r3, #0]
   1b744:	2b0f      	cmp	r3, #15
   1b746:	d904      	bls.n	1b752 <prvTraceStoreTaskReady+0x2e>
   1b748:	4b2b      	ldr	r3, [pc, #172]	; (1b7f8 <prvTraceStoreTaskReady+0xd4>)
   1b74a:	0018      	movs	r0, r3
   1b74c:	4b2b      	ldr	r3, [pc, #172]	; (1b7fc <prvTraceStoreTaskReady+0xd8>)
   1b74e:	4798      	blx	r3
   1b750:	e04d      	b.n	1b7ee <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1b752:	4b2b      	ldr	r3, [pc, #172]	; (1b800 <prvTraceStoreTaskReady+0xdc>)
   1b754:	681b      	ldr	r3, [r3, #0]
   1b756:	2b00      	cmp	r3, #0
   1b758:	d004      	beq.n	1b764 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1b75a:	4b2a      	ldr	r3, [pc, #168]	; (1b804 <prvTraceStoreTaskReady+0xe0>)
   1b75c:	0018      	movs	r0, r3
   1b75e:	4b27      	ldr	r3, [pc, #156]	; (1b7fc <prvTraceStoreTaskReady+0xd8>)
   1b760:	4798      	blx	r3
		return;
   1b762:	e044      	b.n	1b7ee <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b764:	f3ef 8310 	mrs	r3, PRIMASK
   1b768:	60fb      	str	r3, [r7, #12]
  return(result);
   1b76a:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1b76c:	61fb      	str	r3, [r7, #28]
   1b76e:	2301      	movs	r3, #1
   1b770:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b772:	693b      	ldr	r3, [r7, #16]
   1b774:	f383 8810 	msr	PRIMASK, r3
   1b778:	4b21      	ldr	r3, [pc, #132]	; (1b800 <prvTraceStoreTaskReady+0xdc>)
   1b77a:	681b      	ldr	r3, [r3, #0]
   1b77c:	1c5a      	adds	r2, r3, #1
   1b77e:	4b20      	ldr	r3, [pc, #128]	; (1b800 <prvTraceStoreTaskReady+0xdc>)
   1b780:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1b782:	4b21      	ldr	r3, [pc, #132]	; (1b808 <prvTraceStoreTaskReady+0xe4>)
   1b784:	681b      	ldr	r3, [r3, #0]
   1b786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b788:	2b00      	cmp	r3, #0
   1b78a:	d022      	beq.n	1b7d2 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1b78c:	231a      	movs	r3, #26
   1b78e:	18fc      	adds	r4, r7, r3
   1b790:	4b1e      	ldr	r3, [pc, #120]	; (1b80c <prvTraceStoreTaskReady+0xe8>)
   1b792:	0018      	movs	r0, r3
   1b794:	4b1e      	ldr	r3, [pc, #120]	; (1b810 <prvTraceStoreTaskReady+0xec>)
   1b796:	4798      	blx	r3
   1b798:	0003      	movs	r3, r0
   1b79a:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   1b79c:	2319      	movs	r3, #25
   1b79e:	18fb      	adds	r3, r7, r3
   1b7a0:	1dfa      	adds	r2, r7, #7
   1b7a2:	7812      	ldrb	r2, [r2, #0]
   1b7a4:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   1b7a6:	4b1b      	ldr	r3, [pc, #108]	; (1b814 <prvTraceStoreTaskReady+0xf0>)
   1b7a8:	4798      	blx	r3
   1b7aa:	0003      	movs	r3, r0
   1b7ac:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1b7ae:	697b      	ldr	r3, [r7, #20]
   1b7b0:	2b00      	cmp	r3, #0
   1b7b2:	d00e      	beq.n	1b7d2 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   1b7b4:	697b      	ldr	r3, [r7, #20]
   1b7b6:	2202      	movs	r2, #2
   1b7b8:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   1b7ba:	697b      	ldr	r3, [r7, #20]
   1b7bc:	221a      	movs	r2, #26
   1b7be:	18ba      	adds	r2, r7, r2
   1b7c0:	8812      	ldrh	r2, [r2, #0]
   1b7c2:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   1b7c4:	697b      	ldr	r3, [r7, #20]
   1b7c6:	2219      	movs	r2, #25
   1b7c8:	18ba      	adds	r2, r7, r2
   1b7ca:	7812      	ldrb	r2, [r2, #0]
   1b7cc:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1b7ce:	4b12      	ldr	r3, [pc, #72]	; (1b818 <prvTraceStoreTaskReady+0xf4>)
   1b7d0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1b7d2:	4b0b      	ldr	r3, [pc, #44]	; (1b800 <prvTraceStoreTaskReady+0xdc>)
   1b7d4:	681b      	ldr	r3, [r3, #0]
   1b7d6:	1e5a      	subs	r2, r3, #1
   1b7d8:	4b09      	ldr	r3, [pc, #36]	; (1b800 <prvTraceStoreTaskReady+0xdc>)
   1b7da:	601a      	str	r2, [r3, #0]
   1b7dc:	69fb      	ldr	r3, [r7, #28]
   1b7de:	60bb      	str	r3, [r7, #8]
   1b7e0:	68bb      	ldr	r3, [r7, #8]
   1b7e2:	f383 8810 	msr	PRIMASK, r3
   1b7e6:	e002      	b.n	1b7ee <prvTraceStoreTaskReady+0xca>
		return;
   1b7e8:	46c0      	nop			; (mov r8, r8)
   1b7ea:	e000      	b.n	1b7ee <prvTraceStoreTaskReady+0xca>
		return;
   1b7ec:	46c0      	nop			; (mov r8, r8)
}
   1b7ee:	46bd      	mov	sp, r7
   1b7f0:	b009      	add	sp, #36	; 0x24
   1b7f2:	bd90      	pop	{r4, r7, pc}
   1b7f4:	20000188 	.word	0x20000188
   1b7f8:	0003bb58 	.word	0x0003bb58
   1b7fc:	0001c811 	.word	0x0001c811
   1b800:	20000c6c 	.word	0x20000c6c
   1b804:	0003bb98 	.word	0x0003bb98
   1b808:	20000d14 	.word	0x20000d14
   1b80c:	0000ffff 	.word	0x0000ffff
   1b810:	0001ca25 	.word	0x0001ca25
   1b814:	0001c3c9 	.word	0x0001c3c9
   1b818:	0001c9cd 	.word	0x0001c9cd

0001b81c <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   1b81c:	b580      	push	{r7, lr}
   1b81e:	b08e      	sub	sp, #56	; 0x38
   1b820:	af00      	add	r7, sp, #0
   1b822:	60f8      	str	r0, [r7, #12]
   1b824:	60b9      	str	r1, [r7, #8]
   1b826:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   1b828:	4b48      	ldr	r3, [pc, #288]	; (1b94c <vTraceStoreMemMangEvent+0x130>)
   1b82a:	681b      	ldr	r3, [r3, #0]
   1b82c:	2b00      	cmp	r3, #0
   1b82e:	d100      	bne.n	1b832 <vTraceStoreMemMangEvent+0x16>
   1b830:	e088      	b.n	1b944 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   1b832:	687b      	ldr	r3, [r7, #4]
   1b834:	2b00      	cmp	r3, #0
   1b836:	da03      	bge.n	1b840 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   1b838:	687b      	ldr	r3, [r7, #4]
   1b83a:	425b      	negs	r3, r3
   1b83c:	637b      	str	r3, [r7, #52]	; 0x34
   1b83e:	e001      	b.n	1b844 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1b840:	687b      	ldr	r3, [r7, #4]
   1b842:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b844:	f3ef 8310 	mrs	r3, PRIMASK
   1b848:	61bb      	str	r3, [r7, #24]
  return(result);
   1b84a:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   1b84c:	633b      	str	r3, [r7, #48]	; 0x30
   1b84e:	2301      	movs	r3, #1
   1b850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b852:	69fb      	ldr	r3, [r7, #28]
   1b854:	f383 8810 	msr	PRIMASK, r3
   1b858:	4b3d      	ldr	r3, [pc, #244]	; (1b950 <vTraceStoreMemMangEvent+0x134>)
   1b85a:	681b      	ldr	r3, [r3, #0]
   1b85c:	1c5a      	adds	r2, r3, #1
   1b85e:	4b3c      	ldr	r3, [pc, #240]	; (1b950 <vTraceStoreMemMangEvent+0x134>)
   1b860:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1b862:	68bb      	ldr	r3, [r7, #8]
   1b864:	2b00      	cmp	r3, #0
   1b866:	d005      	beq.n	1b874 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   1b868:	4b3a      	ldr	r3, [pc, #232]	; (1b954 <vTraceStoreMemMangEvent+0x138>)
   1b86a:	681a      	ldr	r2, [r3, #0]
   1b86c:	687b      	ldr	r3, [r7, #4]
   1b86e:	18d2      	adds	r2, r2, r3
   1b870:	4b38      	ldr	r3, [pc, #224]	; (1b954 <vTraceStoreMemMangEvent+0x138>)
   1b872:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   1b874:	4b35      	ldr	r3, [pc, #212]	; (1b94c <vTraceStoreMemMangEvent+0x130>)
   1b876:	681b      	ldr	r3, [r3, #0]
   1b878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b87a:	2b00      	cmp	r3, #0
   1b87c:	d057      	beq.n	1b92e <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1b87e:	20ff      	movs	r0, #255	; 0xff
   1b880:	4b35      	ldr	r3, [pc, #212]	; (1b958 <vTraceStoreMemMangEvent+0x13c>)
   1b882:	4798      	blx	r3
   1b884:	0003      	movs	r3, r0
   1b886:	001a      	movs	r2, r3
   1b888:	232f      	movs	r3, #47	; 0x2f
   1b88a:	18fb      	adds	r3, r7, r3
   1b88c:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1b88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1b890:	4a32      	ldr	r2, [pc, #200]	; (1b95c <vTraceStoreMemMangEvent+0x140>)
   1b892:	0019      	movs	r1, r3
   1b894:	0010      	movs	r0, r2
   1b896:	4b32      	ldr	r3, [pc, #200]	; (1b960 <vTraceStoreMemMangEvent+0x144>)
   1b898:	4798      	blx	r3
   1b89a:	0002      	movs	r2, r0
   1b89c:	232c      	movs	r3, #44	; 0x2c
   1b89e:	18fb      	adds	r3, r7, r3
   1b8a0:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1b8a2:	4b30      	ldr	r3, [pc, #192]	; (1b964 <vTraceStoreMemMangEvent+0x148>)
   1b8a4:	4798      	blx	r3
   1b8a6:	0003      	movs	r3, r0
   1b8a8:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   1b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8ac:	2b00      	cmp	r3, #0
   1b8ae:	d03e      	beq.n	1b92e <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8b2:	222f      	movs	r2, #47	; 0x2f
   1b8b4:	18ba      	adds	r2, r7, r2
   1b8b6:	7812      	ldrb	r2, [r2, #0]
   1b8b8:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   1b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8bc:	2200      	movs	r2, #0
   1b8be:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b8c2:	222c      	movs	r2, #44	; 0x2c
   1b8c4:	18ba      	adds	r2, r7, r2
   1b8c6:	8812      	ldrh	r2, [r2, #0]
   1b8c8:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1b8ca:	4b27      	ldr	r3, [pc, #156]	; (1b968 <vTraceStoreMemMangEvent+0x14c>)
   1b8cc:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1b8ce:	68bb      	ldr	r3, [r7, #8]
   1b8d0:	4a22      	ldr	r2, [pc, #136]	; (1b95c <vTraceStoreMemMangEvent+0x140>)
   1b8d2:	0019      	movs	r1, r3
   1b8d4:	0010      	movs	r0, r2
   1b8d6:	4b22      	ldr	r3, [pc, #136]	; (1b960 <vTraceStoreMemMangEvent+0x144>)
   1b8d8:	4798      	blx	r3
   1b8da:	0002      	movs	r2, r0
   1b8dc:	2326      	movs	r3, #38	; 0x26
   1b8de:	18fb      	adds	r3, r7, r3
   1b8e0:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1b8e2:	2325      	movs	r3, #37	; 0x25
   1b8e4:	18fb      	adds	r3, r7, r3
   1b8e6:	2200      	movs	r2, #0
   1b8e8:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1b8ea:	4b1e      	ldr	r3, [pc, #120]	; (1b964 <vTraceStoreMemMangEvent+0x148>)
   1b8ec:	4798      	blx	r3
   1b8ee:	0003      	movs	r3, r0
   1b8f0:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1b8f2:	6a3b      	ldr	r3, [r7, #32]
   1b8f4:	2b00      	cmp	r3, #0
   1b8f6:	d01a      	beq.n	1b92e <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   1b8f8:	6a3b      	ldr	r3, [r7, #32]
   1b8fa:	2226      	movs	r2, #38	; 0x26
   1b8fc:	18ba      	adds	r2, r7, r2
   1b8fe:	8812      	ldrh	r2, [r2, #0]
   1b900:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1b902:	6a3b      	ldr	r3, [r7, #32]
   1b904:	2225      	movs	r2, #37	; 0x25
   1b906:	18ba      	adds	r2, r7, r2
   1b908:	7812      	ldrb	r2, [r2, #0]
   1b90a:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1b90c:	68fb      	ldr	r3, [r7, #12]
   1b90e:	b2db      	uxtb	r3, r3
   1b910:	3301      	adds	r3, #1
   1b912:	b2da      	uxtb	r2, r3
   1b914:	6a3b      	ldr	r3, [r7, #32]
   1b916:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   1b918:	68fb      	ldr	r3, [r7, #12]
   1b91a:	b2da      	uxtb	r2, r3
   1b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1b91e:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   1b920:	4b11      	ldr	r3, [pc, #68]	; (1b968 <vTraceStoreMemMangEvent+0x14c>)
   1b922:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   1b924:	4b09      	ldr	r3, [pc, #36]	; (1b94c <vTraceStoreMemMangEvent+0x130>)
   1b926:	681b      	ldr	r3, [r3, #0]
   1b928:	4a0a      	ldr	r2, [pc, #40]	; (1b954 <vTraceStoreMemMangEvent+0x138>)
   1b92a:	6812      	ldr	r2, [r2, #0]
   1b92c:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1b92e:	4b08      	ldr	r3, [pc, #32]	; (1b950 <vTraceStoreMemMangEvent+0x134>)
   1b930:	681b      	ldr	r3, [r3, #0]
   1b932:	1e5a      	subs	r2, r3, #1
   1b934:	4b06      	ldr	r3, [pc, #24]	; (1b950 <vTraceStoreMemMangEvent+0x134>)
   1b936:	601a      	str	r2, [r3, #0]
   1b938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1b93a:	617b      	str	r3, [r7, #20]
   1b93c:	697b      	ldr	r3, [r7, #20]
   1b93e:	f383 8810 	msr	PRIMASK, r3
   1b942:	e000      	b.n	1b946 <vTraceStoreMemMangEvent+0x12a>
		return;
   1b944:	46c0      	nop			; (mov r8, r8)
}
   1b946:	46bd      	mov	sp, r7
   1b948:	b00e      	add	sp, #56	; 0x38
   1b94a:	bd80      	pop	{r7, pc}
   1b94c:	20000d14 	.word	0x20000d14
   1b950:	20000c6c 	.word	0x20000c6c
   1b954:	20000c80 	.word	0x20000c80
   1b958:	0001ca25 	.word	0x0001ca25
   1b95c:	0000ffff 	.word	0x0000ffff
   1b960:	0001bbe9 	.word	0x0001bbe9
   1b964:	0001c3c9 	.word	0x0001c3c9
   1b968:	0001c9cd 	.word	0x0001c9cd

0001b96c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1b96c:	b590      	push	{r4, r7, lr}
   1b96e:	b08b      	sub	sp, #44	; 0x2c
   1b970:	af00      	add	r7, sp, #0
   1b972:	60f8      	str	r0, [r7, #12]
   1b974:	607a      	str	r2, [r7, #4]
   1b976:	230b      	movs	r3, #11
   1b978:	18fb      	adds	r3, r7, r3
   1b97a:	1c0a      	adds	r2, r1, #0
   1b97c:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1b97e:	68fb      	ldr	r3, [r7, #12]
   1b980:	2bfe      	cmp	r3, #254	; 0xfe
   1b982:	d904      	bls.n	1b98e <prvTraceStoreKernelCall+0x22>
   1b984:	4b39      	ldr	r3, [pc, #228]	; (1ba6c <prvTraceStoreKernelCall+0x100>)
   1b986:	0018      	movs	r0, r3
   1b988:	4b39      	ldr	r3, [pc, #228]	; (1ba70 <prvTraceStoreKernelCall+0x104>)
   1b98a:	4798      	blx	r3
   1b98c:	e06b      	b.n	1ba66 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1b98e:	230b      	movs	r3, #11
   1b990:	18fb      	adds	r3, r7, r3
   1b992:	781b      	ldrb	r3, [r3, #0]
   1b994:	2b08      	cmp	r3, #8
   1b996:	d904      	bls.n	1b9a2 <prvTraceStoreKernelCall+0x36>
   1b998:	4b36      	ldr	r3, [pc, #216]	; (1ba74 <prvTraceStoreKernelCall+0x108>)
   1b99a:	0018      	movs	r0, r3
   1b99c:	4b34      	ldr	r3, [pc, #208]	; (1ba70 <prvTraceStoreKernelCall+0x104>)
   1b99e:	4798      	blx	r3
   1b9a0:	e061      	b.n	1ba66 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1b9a2:	4b35      	ldr	r3, [pc, #212]	; (1ba78 <prvTraceStoreKernelCall+0x10c>)
   1b9a4:	681a      	ldr	r2, [r3, #0]
   1b9a6:	230b      	movs	r3, #11
   1b9a8:	18fb      	adds	r3, r7, r3
   1b9aa:	781b      	ldrb	r3, [r3, #0]
   1b9ac:	2164      	movs	r1, #100	; 0x64
   1b9ae:	18d3      	adds	r3, r2, r3
   1b9b0:	185b      	adds	r3, r3, r1
   1b9b2:	781b      	ldrb	r3, [r3, #0]
   1b9b4:	001a      	movs	r2, r3
   1b9b6:	687b      	ldr	r3, [r7, #4]
   1b9b8:	429a      	cmp	r2, r3
   1b9ba:	d204      	bcs.n	1b9c6 <prvTraceStoreKernelCall+0x5a>
   1b9bc:	4b2f      	ldr	r3, [pc, #188]	; (1ba7c <prvTraceStoreKernelCall+0x110>)
   1b9be:	0018      	movs	r0, r3
   1b9c0:	4b2b      	ldr	r3, [pc, #172]	; (1ba70 <prvTraceStoreKernelCall+0x104>)
   1b9c2:	4798      	blx	r3
   1b9c4:	e04f      	b.n	1ba66 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   1b9c6:	4b2e      	ldr	r3, [pc, #184]	; (1ba80 <prvTraceStoreKernelCall+0x114>)
   1b9c8:	681b      	ldr	r3, [r3, #0]
   1b9ca:	2b00      	cmp	r3, #0
   1b9cc:	d004      	beq.n	1b9d8 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1b9ce:	4b2d      	ldr	r3, [pc, #180]	; (1ba84 <prvTraceStoreKernelCall+0x118>)
   1b9d0:	0018      	movs	r0, r3
   1b9d2:	4b27      	ldr	r3, [pc, #156]	; (1ba70 <prvTraceStoreKernelCall+0x104>)
   1b9d4:	4798      	blx	r3
		return;
   1b9d6:	e046      	b.n	1ba66 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   1b9d8:	4b2b      	ldr	r3, [pc, #172]	; (1ba88 <prvTraceStoreKernelCall+0x11c>)
   1b9da:	781b      	ldrb	r3, [r3, #0]
   1b9dc:	2b00      	cmp	r3, #0
   1b9de:	d041      	beq.n	1ba64 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b9e0:	f3ef 8310 	mrs	r3, PRIMASK
   1b9e4:	617b      	str	r3, [r7, #20]
  return(result);
   1b9e6:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   1b9e8:	627b      	str	r3, [r7, #36]	; 0x24
   1b9ea:	2301      	movs	r3, #1
   1b9ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b9ee:	69bb      	ldr	r3, [r7, #24]
   1b9f0:	f383 8810 	msr	PRIMASK, r3
   1b9f4:	4b22      	ldr	r3, [pc, #136]	; (1ba80 <prvTraceStoreKernelCall+0x114>)
   1b9f6:	681b      	ldr	r3, [r3, #0]
   1b9f8:	1c5a      	adds	r2, r3, #1
   1b9fa:	4b21      	ldr	r3, [pc, #132]	; (1ba80 <prvTraceStoreKernelCall+0x114>)
   1b9fc:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1b9fe:	4b1e      	ldr	r3, [pc, #120]	; (1ba78 <prvTraceStoreKernelCall+0x10c>)
   1ba00:	681b      	ldr	r3, [r3, #0]
   1ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ba04:	2b00      	cmp	r3, #0
   1ba06:	d022      	beq.n	1ba4e <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1ba08:	2322      	movs	r3, #34	; 0x22
   1ba0a:	18fc      	adds	r4, r7, r3
   1ba0c:	4b1f      	ldr	r3, [pc, #124]	; (1ba8c <prvTraceStoreKernelCall+0x120>)
   1ba0e:	0018      	movs	r0, r3
   1ba10:	4b1f      	ldr	r3, [pc, #124]	; (1ba90 <prvTraceStoreKernelCall+0x124>)
   1ba12:	4798      	blx	r3
   1ba14:	0003      	movs	r3, r0
   1ba16:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1ba18:	2321      	movs	r3, #33	; 0x21
   1ba1a:	18fb      	adds	r3, r7, r3
   1ba1c:	687a      	ldr	r2, [r7, #4]
   1ba1e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   1ba20:	4b1c      	ldr	r3, [pc, #112]	; (1ba94 <prvTraceStoreKernelCall+0x128>)
   1ba22:	4798      	blx	r3
   1ba24:	0003      	movs	r3, r0
   1ba26:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1ba28:	69fb      	ldr	r3, [r7, #28]
   1ba2a:	2b00      	cmp	r3, #0
   1ba2c:	d00f      	beq.n	1ba4e <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1ba2e:	69fb      	ldr	r3, [r7, #28]
   1ba30:	2222      	movs	r2, #34	; 0x22
   1ba32:	18ba      	adds	r2, r7, r2
   1ba34:	8812      	ldrh	r2, [r2, #0]
   1ba36:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   1ba38:	68fb      	ldr	r3, [r7, #12]
   1ba3a:	b2da      	uxtb	r2, r3
   1ba3c:	69fb      	ldr	r3, [r7, #28]
   1ba3e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1ba40:	69fb      	ldr	r3, [r7, #28]
   1ba42:	2221      	movs	r2, #33	; 0x21
   1ba44:	18ba      	adds	r2, r7, r2
   1ba46:	7812      	ldrb	r2, [r2, #0]
   1ba48:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1ba4a:	4b13      	ldr	r3, [pc, #76]	; (1ba98 <prvTraceStoreKernelCall+0x12c>)
   1ba4c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1ba4e:	4b0c      	ldr	r3, [pc, #48]	; (1ba80 <prvTraceStoreKernelCall+0x114>)
   1ba50:	681b      	ldr	r3, [r3, #0]
   1ba52:	1e5a      	subs	r2, r3, #1
   1ba54:	4b0a      	ldr	r3, [pc, #40]	; (1ba80 <prvTraceStoreKernelCall+0x114>)
   1ba56:	601a      	str	r2, [r3, #0]
   1ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ba5a:	613b      	str	r3, [r7, #16]
   1ba5c:	693b      	ldr	r3, [r7, #16]
   1ba5e:	f383 8810 	msr	PRIMASK, r3
   1ba62:	e000      	b.n	1ba66 <prvTraceStoreKernelCall+0xfa>
		return;
   1ba64:	46c0      	nop			; (mov r8, r8)
}
   1ba66:	46bd      	mov	sp, r7
   1ba68:	b00b      	add	sp, #44	; 0x2c
   1ba6a:	bd90      	pop	{r4, r7, pc}
   1ba6c:	0003bc08 	.word	0x0003bc08
   1ba70:	0001c811 	.word	0x0001c811
   1ba74:	0003bc40 	.word	0x0003bc40
   1ba78:	20000d14 	.word	0x20000d14
   1ba7c:	0003bc88 	.word	0x0003bc88
   1ba80:	20000c6c 	.word	0x20000c6c
   1ba84:	0003bcd0 	.word	0x0003bcd0
   1ba88:	20000c78 	.word	0x20000c78
   1ba8c:	0000ffff 	.word	0x0000ffff
   1ba90:	0001ca25 	.word	0x0001ca25
   1ba94:	0001c3c9 	.word	0x0001c3c9
   1ba98:	0001c9cd 	.word	0x0001c9cd

0001ba9c <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   1ba9c:	b580      	push	{r7, lr}
   1ba9e:	b08a      	sub	sp, #40	; 0x28
   1baa0:	af00      	add	r7, sp, #0
   1baa2:	60f8      	str	r0, [r7, #12]
   1baa4:	607a      	str	r2, [r7, #4]
   1baa6:	603b      	str	r3, [r7, #0]
   1baa8:	230b      	movs	r3, #11
   1baaa:	18fb      	adds	r3, r7, r3
   1baac:	1c0a      	adds	r2, r1, #0
   1baae:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1bab0:	68fb      	ldr	r3, [r7, #12]
   1bab2:	2bfe      	cmp	r3, #254	; 0xfe
   1bab4:	d904      	bls.n	1bac0 <prvTraceStoreKernelCallWithParam+0x24>
   1bab6:	4b40      	ldr	r3, [pc, #256]	; (1bbb8 <prvTraceStoreKernelCallWithParam+0x11c>)
   1bab8:	0018      	movs	r0, r3
   1baba:	4b40      	ldr	r3, [pc, #256]	; (1bbbc <prvTraceStoreKernelCallWithParam+0x120>)
   1babc:	4798      	blx	r3
   1babe:	e077      	b.n	1bbb0 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1bac0:	230b      	movs	r3, #11
   1bac2:	18fb      	adds	r3, r7, r3
   1bac4:	781b      	ldrb	r3, [r3, #0]
   1bac6:	2b08      	cmp	r3, #8
   1bac8:	d904      	bls.n	1bad4 <prvTraceStoreKernelCallWithParam+0x38>
   1baca:	4b3d      	ldr	r3, [pc, #244]	; (1bbc0 <prvTraceStoreKernelCallWithParam+0x124>)
   1bacc:	0018      	movs	r0, r3
   1bace:	4b3b      	ldr	r3, [pc, #236]	; (1bbbc <prvTraceStoreKernelCallWithParam+0x120>)
   1bad0:	4798      	blx	r3
   1bad2:	e06d      	b.n	1bbb0 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   1bad4:	4b3b      	ldr	r3, [pc, #236]	; (1bbc4 <prvTraceStoreKernelCallWithParam+0x128>)
   1bad6:	681a      	ldr	r2, [r3, #0]
   1bad8:	230b      	movs	r3, #11
   1bada:	18fb      	adds	r3, r7, r3
   1badc:	781b      	ldrb	r3, [r3, #0]
   1bade:	2164      	movs	r1, #100	; 0x64
   1bae0:	18d3      	adds	r3, r2, r3
   1bae2:	185b      	adds	r3, r3, r1
   1bae4:	781b      	ldrb	r3, [r3, #0]
   1bae6:	001a      	movs	r2, r3
   1bae8:	687b      	ldr	r3, [r7, #4]
   1baea:	429a      	cmp	r2, r3
   1baec:	d204      	bcs.n	1baf8 <prvTraceStoreKernelCallWithParam+0x5c>
   1baee:	4b36      	ldr	r3, [pc, #216]	; (1bbc8 <prvTraceStoreKernelCallWithParam+0x12c>)
   1baf0:	0018      	movs	r0, r3
   1baf2:	4b32      	ldr	r3, [pc, #200]	; (1bbbc <prvTraceStoreKernelCallWithParam+0x120>)
   1baf4:	4798      	blx	r3
   1baf6:	e05b      	b.n	1bbb0 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   1baf8:	4b34      	ldr	r3, [pc, #208]	; (1bbcc <prvTraceStoreKernelCallWithParam+0x130>)
   1bafa:	681b      	ldr	r3, [r3, #0]
   1bafc:	2b00      	cmp	r3, #0
   1bafe:	d004      	beq.n	1bb0a <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   1bb00:	4b33      	ldr	r3, [pc, #204]	; (1bbd0 <prvTraceStoreKernelCallWithParam+0x134>)
   1bb02:	0018      	movs	r0, r3
   1bb04:	4b2d      	ldr	r3, [pc, #180]	; (1bbbc <prvTraceStoreKernelCallWithParam+0x120>)
   1bb06:	4798      	blx	r3
		return;
   1bb08:	e052      	b.n	1bbb0 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1bb0a:	f3ef 8310 	mrs	r3, PRIMASK
   1bb0e:	617b      	str	r3, [r7, #20]
  return(result);
   1bb10:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   1bb12:	627b      	str	r3, [r7, #36]	; 0x24
   1bb14:	2301      	movs	r3, #1
   1bb16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1bb18:	69bb      	ldr	r3, [r7, #24]
   1bb1a:	f383 8810 	msr	PRIMASK, r3
   1bb1e:	4b2b      	ldr	r3, [pc, #172]	; (1bbcc <prvTraceStoreKernelCallWithParam+0x130>)
   1bb20:	681b      	ldr	r3, [r3, #0]
   1bb22:	1c5a      	adds	r2, r3, #1
   1bb24:	4b29      	ldr	r3, [pc, #164]	; (1bbcc <prvTraceStoreKernelCallWithParam+0x130>)
   1bb26:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1bb28:	4b26      	ldr	r3, [pc, #152]	; (1bbc4 <prvTraceStoreKernelCallWithParam+0x128>)
   1bb2a:	681b      	ldr	r3, [r3, #0]
   1bb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bb2e:	2b00      	cmp	r3, #0
   1bb30:	d034      	beq.n	1bb9c <prvTraceStoreKernelCallWithParam+0x100>
   1bb32:	4b28      	ldr	r3, [pc, #160]	; (1bbd4 <prvTraceStoreKernelCallWithParam+0x138>)
   1bb34:	781b      	ldrb	r3, [r3, #0]
   1bb36:	2b00      	cmp	r3, #0
   1bb38:	d030      	beq.n	1bb9c <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1bb3a:	20ff      	movs	r0, #255	; 0xff
   1bb3c:	4b26      	ldr	r3, [pc, #152]	; (1bbd8 <prvTraceStoreKernelCallWithParam+0x13c>)
   1bb3e:	4798      	blx	r3
   1bb40:	0003      	movs	r3, r0
   1bb42:	001a      	movs	r2, r3
   1bb44:	2323      	movs	r3, #35	; 0x23
   1bb46:	18fb      	adds	r3, r7, r3
   1bb48:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1bb4a:	683b      	ldr	r3, [r7, #0]
   1bb4c:	0019      	movs	r1, r3
   1bb4e:	20ff      	movs	r0, #255	; 0xff
   1bb50:	4b22      	ldr	r3, [pc, #136]	; (1bbdc <prvTraceStoreKernelCallWithParam+0x140>)
   1bb52:	4798      	blx	r3
   1bb54:	0002      	movs	r2, r0
   1bb56:	2322      	movs	r3, #34	; 0x22
   1bb58:	18fb      	adds	r3, r7, r3
   1bb5a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1bb5c:	2321      	movs	r3, #33	; 0x21
   1bb5e:	18fb      	adds	r3, r7, r3
   1bb60:	687a      	ldr	r2, [r7, #4]
   1bb62:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   1bb64:	4b1e      	ldr	r3, [pc, #120]	; (1bbe0 <prvTraceStoreKernelCallWithParam+0x144>)
   1bb66:	4798      	blx	r3
   1bb68:	0003      	movs	r3, r0
   1bb6a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1bb6c:	69fb      	ldr	r3, [r7, #28]
   1bb6e:	2b00      	cmp	r3, #0
   1bb70:	d014      	beq.n	1bb9c <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1bb72:	69fb      	ldr	r3, [r7, #28]
   1bb74:	2223      	movs	r2, #35	; 0x23
   1bb76:	18ba      	adds	r2, r7, r2
   1bb78:	7812      	ldrb	r2, [r2, #0]
   1bb7a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1bb7c:	68fb      	ldr	r3, [r7, #12]
   1bb7e:	b2da      	uxtb	r2, r3
   1bb80:	69fb      	ldr	r3, [r7, #28]
   1bb82:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1bb84:	69fb      	ldr	r3, [r7, #28]
   1bb86:	2221      	movs	r2, #33	; 0x21
   1bb88:	18ba      	adds	r2, r7, r2
   1bb8a:	7812      	ldrb	r2, [r2, #0]
   1bb8c:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1bb8e:	69fb      	ldr	r3, [r7, #28]
   1bb90:	2222      	movs	r2, #34	; 0x22
   1bb92:	18ba      	adds	r2, r7, r2
   1bb94:	7812      	ldrb	r2, [r2, #0]
   1bb96:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   1bb98:	4b12      	ldr	r3, [pc, #72]	; (1bbe4 <prvTraceStoreKernelCallWithParam+0x148>)
   1bb9a:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1bb9c:	4b0b      	ldr	r3, [pc, #44]	; (1bbcc <prvTraceStoreKernelCallWithParam+0x130>)
   1bb9e:	681b      	ldr	r3, [r3, #0]
   1bba0:	1e5a      	subs	r2, r3, #1
   1bba2:	4b0a      	ldr	r3, [pc, #40]	; (1bbcc <prvTraceStoreKernelCallWithParam+0x130>)
   1bba4:	601a      	str	r2, [r3, #0]
   1bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bba8:	613b      	str	r3, [r7, #16]
   1bbaa:	693b      	ldr	r3, [r7, #16]
   1bbac:	f383 8810 	msr	PRIMASK, r3
}
   1bbb0:	46bd      	mov	sp, r7
   1bbb2:	b00a      	add	sp, #40	; 0x28
   1bbb4:	bd80      	pop	{r7, pc}
   1bbb6:	46c0      	nop			; (mov r8, r8)
   1bbb8:	0003bd08 	.word	0x0003bd08
   1bbbc:	0001c811 	.word	0x0001c811
   1bbc0:	0003bd48 	.word	0x0003bd48
   1bbc4:	20000d14 	.word	0x20000d14
   1bbc8:	0003bd98 	.word	0x0003bd98
   1bbcc:	20000c6c 	.word	0x20000c6c
   1bbd0:	0003bde8 	.word	0x0003bde8
   1bbd4:	20000c78 	.word	0x20000c78
   1bbd8:	0001ca25 	.word	0x0001ca25
   1bbdc:	0001bbe9 	.word	0x0001bbe9
   1bbe0:	0001c3c9 	.word	0x0001c3c9
   1bbe4:	0001c9cd 	.word	0x0001c9cd

0001bbe8 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   1bbe8:	b580      	push	{r7, lr}
   1bbea:	b084      	sub	sp, #16
   1bbec:	af00      	add	r7, sp, #0
   1bbee:	6078      	str	r0, [r7, #4]
   1bbf0:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   1bbf2:	687b      	ldr	r3, [r7, #4]
   1bbf4:	2bff      	cmp	r3, #255	; 0xff
   1bbf6:	d009      	beq.n	1bc0c <prvTraceGetParam+0x24>
   1bbf8:	687b      	ldr	r3, [r7, #4]
   1bbfa:	4a19      	ldr	r2, [pc, #100]	; (1bc60 <prvTraceGetParam+0x78>)
   1bbfc:	4293      	cmp	r3, r2
   1bbfe:	d005      	beq.n	1bc0c <prvTraceGetParam+0x24>
   1bc00:	4b18      	ldr	r3, [pc, #96]	; (1bc64 <prvTraceGetParam+0x7c>)
   1bc02:	0018      	movs	r0, r3
   1bc04:	4b18      	ldr	r3, [pc, #96]	; (1bc68 <prvTraceGetParam+0x80>)
   1bc06:	4798      	blx	r3
   1bc08:	683b      	ldr	r3, [r7, #0]
   1bc0a:	e024      	b.n	1bc56 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   1bc0c:	683a      	ldr	r2, [r7, #0]
   1bc0e:	687b      	ldr	r3, [r7, #4]
   1bc10:	429a      	cmp	r2, r3
   1bc12:	d801      	bhi.n	1bc18 <prvTraceGetParam+0x30>
	{
		return param;
   1bc14:	683b      	ldr	r3, [r7, #0]
   1bc16:	e01e      	b.n	1bc56 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   1bc18:	4b14      	ldr	r3, [pc, #80]	; (1bc6c <prvTraceGetParam+0x84>)
   1bc1a:	4798      	blx	r3
   1bc1c:	0003      	movs	r3, r0
   1bc1e:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   1bc20:	68fb      	ldr	r3, [r7, #12]
   1bc22:	2b00      	cmp	r3, #0
   1bc24:	d014      	beq.n	1bc50 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   1bc26:	68fb      	ldr	r3, [r7, #12]
   1bc28:	2201      	movs	r2, #1
   1bc2a:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   1bc2c:	687b      	ldr	r3, [r7, #4]
   1bc2e:	43db      	mvns	r3, r3
   1bc30:	683a      	ldr	r2, [r7, #0]
   1bc32:	4013      	ands	r3, r2
   1bc34:	0a1b      	lsrs	r3, r3, #8
   1bc36:	b2da      	uxtb	r2, r3
   1bc38:	68fb      	ldr	r3, [r7, #12]
   1bc3a:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   1bc3c:	687b      	ldr	r3, [r7, #4]
   1bc3e:	43db      	mvns	r3, r3
   1bc40:	683a      	ldr	r2, [r7, #0]
   1bc42:	4013      	ands	r3, r2
   1bc44:	0c1b      	lsrs	r3, r3, #16
   1bc46:	b29a      	uxth	r2, r3
   1bc48:	68fb      	ldr	r3, [r7, #12]
   1bc4a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1bc4c:	4b08      	ldr	r3, [pc, #32]	; (1bc70 <prvTraceGetParam+0x88>)
   1bc4e:	4798      	blx	r3
		}

		return param & param_max;
   1bc50:	683b      	ldr	r3, [r7, #0]
   1bc52:	687a      	ldr	r2, [r7, #4]
   1bc54:	4013      	ands	r3, r2
	}
}
   1bc56:	0018      	movs	r0, r3
   1bc58:	46bd      	mov	sp, r7
   1bc5a:	b004      	add	sp, #16
   1bc5c:	bd80      	pop	{r7, pc}
   1bc5e:	46c0      	nop			; (mov r8, r8)
   1bc60:	0000ffff 	.word	0x0000ffff
   1bc64:	0003be20 	.word	0x0003be20
   1bc68:	0001c811 	.word	0x0001c811
   1bc6c:	0001c3c9 	.word	0x0001c3c9
   1bc70:	0001c9cd 	.word	0x0001c9cd

0001bc74 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   1bc74:	b580      	push	{r7, lr}
   1bc76:	b08a      	sub	sp, #40	; 0x28
   1bc78:	af00      	add	r7, sp, #0
   1bc7a:	6078      	str	r0, [r7, #4]
   1bc7c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1bc7e:	2326      	movs	r3, #38	; 0x26
   1bc80:	18fb      	adds	r3, r7, r3
   1bc82:	2200      	movs	r2, #0
   1bc84:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   1bc86:	687b      	ldr	r3, [r7, #4]
   1bc88:	2bfe      	cmp	r3, #254	; 0xfe
   1bc8a:	d904      	bls.n	1bc96 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   1bc8c:	4b2d      	ldr	r3, [pc, #180]	; (1bd44 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1bc8e:	0018      	movs	r0, r3
   1bc90:	4b2d      	ldr	r3, [pc, #180]	; (1bd48 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1bc92:	4798      	blx	r3
   1bc94:	e053      	b.n	1bd3e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   1bc96:	4b2d      	ldr	r3, [pc, #180]	; (1bd4c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1bc98:	681b      	ldr	r3, [r3, #0]
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d004      	beq.n	1bca8 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1bc9e:	4b2c      	ldr	r3, [pc, #176]	; (1bd50 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1bca0:	0018      	movs	r0, r3
   1bca2:	4b29      	ldr	r3, [pc, #164]	; (1bd48 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1bca4:	4798      	blx	r3
		return;
   1bca6:	e04a      	b.n	1bd3e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1bca8:	f3ef 8310 	mrs	r3, PRIMASK
   1bcac:	613b      	str	r3, [r7, #16]
  return(result);
   1bcae:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1bcb0:	623b      	str	r3, [r7, #32]
   1bcb2:	2301      	movs	r3, #1
   1bcb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1bcb6:	697b      	ldr	r3, [r7, #20]
   1bcb8:	f383 8810 	msr	PRIMASK, r3
   1bcbc:	4b23      	ldr	r3, [pc, #140]	; (1bd4c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1bcbe:	681b      	ldr	r3, [r3, #0]
   1bcc0:	1c5a      	adds	r2, r3, #1
   1bcc2:	4b22      	ldr	r3, [pc, #136]	; (1bd4c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1bcc4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   1bcc6:	4b23      	ldr	r3, [pc, #140]	; (1bd54 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   1bcc8:	681b      	ldr	r3, [r3, #0]
   1bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bccc:	2b00      	cmp	r3, #0
   1bcce:	d02c      	beq.n	1bd2a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1bcd0:	4b21      	ldr	r3, [pc, #132]	; (1bd58 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1bcd2:	781b      	ldrb	r3, [r3, #0]
   1bcd4:	2b00      	cmp	r3, #0
   1bcd6:	d028      	beq.n	1bd2a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   1bcd8:	20ff      	movs	r0, #255	; 0xff
   1bcda:	4b20      	ldr	r3, [pc, #128]	; (1bd5c <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   1bcdc:	4798      	blx	r3
   1bcde:	0003      	movs	r3, r0
   1bce0:	001a      	movs	r2, r3
   1bce2:	231f      	movs	r3, #31
   1bce4:	18fb      	adds	r3, r7, r3
   1bce6:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   1bce8:	683b      	ldr	r3, [r7, #0]
   1bcea:	4a1d      	ldr	r2, [pc, #116]	; (1bd60 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1bcec:	0019      	movs	r1, r3
   1bcee:	0010      	movs	r0, r2
   1bcf0:	4b1c      	ldr	r3, [pc, #112]	; (1bd64 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   1bcf2:	4798      	blx	r3
   1bcf4:	0002      	movs	r2, r0
   1bcf6:	2326      	movs	r3, #38	; 0x26
   1bcf8:	18fb      	adds	r3, r7, r3
   1bcfa:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1bcfc:	4b1a      	ldr	r3, [pc, #104]	; (1bd68 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1bcfe:	4798      	blx	r3
   1bd00:	0003      	movs	r3, r0
   1bd02:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   1bd04:	69bb      	ldr	r3, [r7, #24]
   1bd06:	2b00      	cmp	r3, #0
   1bd08:	d00f      	beq.n	1bd2a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1bd0a:	69bb      	ldr	r3, [r7, #24]
   1bd0c:	221f      	movs	r2, #31
   1bd0e:	18ba      	adds	r2, r7, r2
   1bd10:	7812      	ldrb	r2, [r2, #0]
   1bd12:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   1bd14:	687b      	ldr	r3, [r7, #4]
   1bd16:	b2da      	uxtb	r2, r3
   1bd18:	69bb      	ldr	r3, [r7, #24]
   1bd1a:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   1bd1c:	69bb      	ldr	r3, [r7, #24]
   1bd1e:	2226      	movs	r2, #38	; 0x26
   1bd20:	18ba      	adds	r2, r7, r2
   1bd22:	8812      	ldrh	r2, [r2, #0]
   1bd24:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1bd26:	4b11      	ldr	r3, [pc, #68]	; (1bd6c <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   1bd28:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1bd2a:	4b08      	ldr	r3, [pc, #32]	; (1bd4c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1bd2c:	681b      	ldr	r3, [r3, #0]
   1bd2e:	1e5a      	subs	r2, r3, #1
   1bd30:	4b06      	ldr	r3, [pc, #24]	; (1bd4c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1bd32:	601a      	str	r2, [r3, #0]
   1bd34:	6a3b      	ldr	r3, [r7, #32]
   1bd36:	60fb      	str	r3, [r7, #12]
   1bd38:	68fb      	ldr	r3, [r7, #12]
   1bd3a:	f383 8810 	msr	PRIMASK, r3
}
   1bd3e:	46bd      	mov	sp, r7
   1bd40:	b00a      	add	sp, #40	; 0x28
   1bd42:	bd80      	pop	{r7, pc}
   1bd44:	0003be5c 	.word	0x0003be5c
   1bd48:	0001c811 	.word	0x0001c811
   1bd4c:	20000c6c 	.word	0x20000c6c
   1bd50:	0003beb4 	.word	0x0003beb4
   1bd54:	20000d14 	.word	0x20000d14
   1bd58:	20000c78 	.word	0x20000c78
   1bd5c:	0001ca25 	.word	0x0001ca25
   1bd60:	0000ffff 	.word	0x0000ffff
   1bd64:	0001bbe9 	.word	0x0001bbe9
   1bd68:	0001c3c9 	.word	0x0001c3c9
   1bd6c:	0001c9cd 	.word	0x0001c9cd

0001bd70 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   1bd70:	b590      	push	{r4, r7, lr}
   1bd72:	b089      	sub	sp, #36	; 0x24
   1bd74:	af00      	add	r7, sp, #0
   1bd76:	0002      	movs	r2, r0
   1bd78:	1dfb      	adds	r3, r7, #7
   1bd7a:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1bd7c:	1dfb      	adds	r3, r7, #7
   1bd7e:	781b      	ldrb	r3, [r3, #0]
   1bd80:	2b0f      	cmp	r3, #15
   1bd82:	d904      	bls.n	1bd8e <prvTraceStoreTaskswitch+0x1e>
   1bd84:	4b34      	ldr	r3, [pc, #208]	; (1be58 <prvTraceStoreTaskswitch+0xe8>)
   1bd86:	0018      	movs	r0, r3
   1bd88:	4b34      	ldr	r3, [pc, #208]	; (1be5c <prvTraceStoreTaskswitch+0xec>)
   1bd8a:	4798      	blx	r3
   1bd8c:	e061      	b.n	1be52 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1bd8e:	f3ef 8310 	mrs	r3, PRIMASK
   1bd92:	60fb      	str	r3, [r7, #12]
  return(result);
   1bd94:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   1bd96:	61fb      	str	r3, [r7, #28]
   1bd98:	2301      	movs	r3, #1
   1bd9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1bd9c:	693b      	ldr	r3, [r7, #16]
   1bd9e:	f383 8810 	msr	PRIMASK, r3
   1bda2:	4b2f      	ldr	r3, [pc, #188]	; (1be60 <prvTraceStoreTaskswitch+0xf0>)
   1bda4:	681b      	ldr	r3, [r3, #0]
   1bda6:	1c5a      	adds	r2, r3, #1
   1bda8:	4b2d      	ldr	r3, [pc, #180]	; (1be60 <prvTraceStoreTaskswitch+0xf0>)
   1bdaa:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   1bdac:	4b2d      	ldr	r3, [pc, #180]	; (1be64 <prvTraceStoreTaskswitch+0xf4>)
   1bdae:	781b      	ldrb	r3, [r3, #0]
   1bdb0:	1dfa      	adds	r2, r7, #7
   1bdb2:	7812      	ldrb	r2, [r2, #0]
   1bdb4:	429a      	cmp	r2, r3
   1bdb6:	d042      	beq.n	1be3e <prvTraceStoreTaskswitch+0xce>
   1bdb8:	4b2b      	ldr	r3, [pc, #172]	; (1be68 <prvTraceStoreTaskswitch+0xf8>)
   1bdba:	681b      	ldr	r3, [r3, #0]
   1bdbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bdbe:	2b00      	cmp	r3, #0
   1bdc0:	d03d      	beq.n	1be3e <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1bdc2:	4b2a      	ldr	r3, [pc, #168]	; (1be6c <prvTraceStoreTaskswitch+0xfc>)
   1bdc4:	2200      	movs	r2, #0
   1bdc6:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   1bdc8:	231a      	movs	r3, #26
   1bdca:	18fc      	adds	r4, r7, r3
   1bdcc:	4b28      	ldr	r3, [pc, #160]	; (1be70 <prvTraceStoreTaskswitch+0x100>)
   1bdce:	0018      	movs	r0, r3
   1bdd0:	4b28      	ldr	r3, [pc, #160]	; (1be74 <prvTraceStoreTaskswitch+0x104>)
   1bdd2:	4798      	blx	r3
   1bdd4:	0003      	movs	r3, r0
   1bdd6:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   1bdd8:	4b22      	ldr	r3, [pc, #136]	; (1be64 <prvTraceStoreTaskswitch+0xf4>)
   1bdda:	1dfa      	adds	r2, r7, #7
   1bddc:	7812      	ldrb	r2, [r2, #0]
   1bdde:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   1bde0:	2319      	movs	r3, #25
   1bde2:	18fb      	adds	r3, r7, r3
   1bde4:	4a1f      	ldr	r2, [pc, #124]	; (1be64 <prvTraceStoreTaskswitch+0xf4>)
   1bde6:	7812      	ldrb	r2, [r2, #0]
   1bde8:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1bdea:	4b23      	ldr	r3, [pc, #140]	; (1be78 <prvTraceStoreTaskswitch+0x108>)
   1bdec:	4798      	blx	r3
   1bdee:	0003      	movs	r3, r0
   1bdf0:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   1bdf2:	697b      	ldr	r3, [r7, #20]
   1bdf4:	2b00      	cmp	r3, #0
   1bdf6:	d022      	beq.n	1be3e <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   1bdf8:	4b1a      	ldr	r3, [pc, #104]	; (1be64 <prvTraceStoreTaskswitch+0xf4>)
   1bdfa:	781b      	ldrb	r3, [r3, #0]
   1bdfc:	0019      	movs	r1, r3
   1bdfe:	2003      	movs	r0, #3
   1be00:	4b1e      	ldr	r3, [pc, #120]	; (1be7c <prvTraceStoreTaskswitch+0x10c>)
   1be02:	4798      	blx	r3
   1be04:	0003      	movs	r3, r0
   1be06:	2b01      	cmp	r3, #1
   1be08:	d103      	bne.n	1be12 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1be0a:	697b      	ldr	r3, [r7, #20]
   1be0c:	2207      	movs	r2, #7
   1be0e:	701a      	strb	r2, [r3, #0]
   1be10:	e002      	b.n	1be18 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   1be12:	697b      	ldr	r3, [r7, #20]
   1be14:	2206      	movs	r2, #6
   1be16:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   1be18:	697b      	ldr	r3, [r7, #20]
   1be1a:	221a      	movs	r2, #26
   1be1c:	18ba      	adds	r2, r7, r2
   1be1e:	8812      	ldrh	r2, [r2, #0]
   1be20:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   1be22:	697b      	ldr	r3, [r7, #20]
   1be24:	2219      	movs	r2, #25
   1be26:	18ba      	adds	r2, r7, r2
   1be28:	7812      	ldrb	r2, [r2, #0]
   1be2a:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   1be2c:	4b0d      	ldr	r3, [pc, #52]	; (1be64 <prvTraceStoreTaskswitch+0xf4>)
   1be2e:	781b      	ldrb	r3, [r3, #0]
   1be30:	2201      	movs	r2, #1
   1be32:	0019      	movs	r1, r3
   1be34:	2003      	movs	r0, #3
   1be36:	4b12      	ldr	r3, [pc, #72]	; (1be80 <prvTraceStoreTaskswitch+0x110>)
   1be38:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1be3a:	4b12      	ldr	r3, [pc, #72]	; (1be84 <prvTraceStoreTaskswitch+0x114>)
   1be3c:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1be3e:	4b08      	ldr	r3, [pc, #32]	; (1be60 <prvTraceStoreTaskswitch+0xf0>)
   1be40:	681b      	ldr	r3, [r3, #0]
   1be42:	1e5a      	subs	r2, r3, #1
   1be44:	4b06      	ldr	r3, [pc, #24]	; (1be60 <prvTraceStoreTaskswitch+0xf0>)
   1be46:	601a      	str	r2, [r3, #0]
   1be48:	69fb      	ldr	r3, [r7, #28]
   1be4a:	60bb      	str	r3, [r7, #8]
   1be4c:	68bb      	ldr	r3, [r7, #8]
   1be4e:	f383 8810 	msr	PRIMASK, r3
}
   1be52:	46bd      	mov	sp, r7
   1be54:	b009      	add	sp, #36	; 0x24
   1be56:	bd90      	pop	{r4, r7, pc}
   1be58:	0003beec 	.word	0x0003beec
   1be5c:	0001c811 	.word	0x0001c811
   1be60:	20000c6c 	.word	0x20000c6c
   1be64:	20000c78 	.word	0x20000c78
   1be68:	20000d14 	.word	0x20000d14
   1be6c:	20000c58 	.word	0x20000c58
   1be70:	0000ffff 	.word	0x0000ffff
   1be74:	0001ca25 	.word	0x0001ca25
   1be78:	0001c3c9 	.word	0x0001c3c9
   1be7c:	0001c06d 	.word	0x0001c06d
   1be80:	0001bfc9 	.word	0x0001bfc9
   1be84:	0001c9cd 	.word	0x0001c9cd

0001be88 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1be88:	b590      	push	{r4, r7, lr}
   1be8a:	b083      	sub	sp, #12
   1be8c:	af00      	add	r7, sp, #0
   1be8e:	0004      	movs	r4, r0
   1be90:	0008      	movs	r0, r1
   1be92:	0011      	movs	r1, r2
   1be94:	1dfb      	adds	r3, r7, #7
   1be96:	1c22      	adds	r2, r4, #0
   1be98:	701a      	strb	r2, [r3, #0]
   1be9a:	1dbb      	adds	r3, r7, #6
   1be9c:	1c02      	adds	r2, r0, #0
   1be9e:	701a      	strb	r2, [r3, #0]
   1bea0:	1d7b      	adds	r3, r7, #5
   1bea2:	1c0a      	adds	r2, r1, #0
   1bea4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1bea6:	1dfb      	adds	r3, r7, #7
   1bea8:	781b      	ldrb	r3, [r3, #0]
   1beaa:	2b08      	cmp	r3, #8
   1beac:	d904      	bls.n	1beb8 <prvTraceSetPriorityProperty+0x30>
   1beae:	4b1a      	ldr	r3, [pc, #104]	; (1bf18 <prvTraceSetPriorityProperty+0x90>)
   1beb0:	0018      	movs	r0, r3
   1beb2:	4b1a      	ldr	r3, [pc, #104]	; (1bf1c <prvTraceSetPriorityProperty+0x94>)
   1beb4:	4798      	blx	r3
   1beb6:	e02c      	b.n	1bf12 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1beb8:	4b19      	ldr	r3, [pc, #100]	; (1bf20 <prvTraceSetPriorityProperty+0x98>)
   1beba:	681a      	ldr	r2, [r3, #0]
   1bebc:	1dfb      	adds	r3, r7, #7
   1bebe:	781b      	ldrb	r3, [r3, #0]
   1bec0:	2164      	movs	r1, #100	; 0x64
   1bec2:	18d3      	adds	r3, r2, r3
   1bec4:	185b      	adds	r3, r3, r1
   1bec6:	781b      	ldrb	r3, [r3, #0]
   1bec8:	1dba      	adds	r2, r7, #6
   1beca:	7812      	ldrb	r2, [r2, #0]
   1becc:	429a      	cmp	r2, r3
   1bece:	d904      	bls.n	1beda <prvTraceSetPriorityProperty+0x52>
   1bed0:	4b14      	ldr	r3, [pc, #80]	; (1bf24 <prvTraceSetPriorityProperty+0x9c>)
   1bed2:	0018      	movs	r0, r3
   1bed4:	4b11      	ldr	r3, [pc, #68]	; (1bf1c <prvTraceSetPriorityProperty+0x94>)
   1bed6:	4798      	blx	r3
   1bed8:	e01b      	b.n	1bf12 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   1beda:	4b11      	ldr	r3, [pc, #68]	; (1bf20 <prvTraceSetPriorityProperty+0x98>)
   1bedc:	681c      	ldr	r4, [r3, #0]
   1bede:	1dfb      	adds	r3, r7, #7
   1bee0:	781a      	ldrb	r2, [r3, #0]
   1bee2:	1dbb      	adds	r3, r7, #6
   1bee4:	781b      	ldrb	r3, [r3, #0]
   1bee6:	0011      	movs	r1, r2
   1bee8:	0018      	movs	r0, r3
   1beea:	4b0f      	ldr	r3, [pc, #60]	; (1bf28 <prvTraceSetPriorityProperty+0xa0>)
   1beec:	4798      	blx	r3
   1beee:	0003      	movs	r3, r0
   1bef0:	0018      	movs	r0, r3
   1bef2:	4b0b      	ldr	r3, [pc, #44]	; (1bf20 <prvTraceSetPriorityProperty+0x98>)
   1bef4:	681a      	ldr	r2, [r3, #0]
   1bef6:	1dfb      	adds	r3, r7, #7
   1bef8:	781b      	ldrb	r3, [r3, #0]
   1befa:	2170      	movs	r1, #112	; 0x70
   1befc:	18d3      	adds	r3, r2, r3
   1befe:	185b      	adds	r3, r3, r1
   1bf00:	781b      	ldrb	r3, [r3, #0]
   1bf02:	18c3      	adds	r3, r0, r3
   1bf04:	3301      	adds	r3, #1
   1bf06:	229c      	movs	r2, #156	; 0x9c
   1bf08:	18e3      	adds	r3, r4, r3
   1bf0a:	189b      	adds	r3, r3, r2
   1bf0c:	1d7a      	adds	r2, r7, #5
   1bf0e:	7812      	ldrb	r2, [r2, #0]
   1bf10:	701a      	strb	r2, [r3, #0]
}
   1bf12:	46bd      	mov	sp, r7
   1bf14:	b003      	add	sp, #12
   1bf16:	bd90      	pop	{r4, r7, pc}
   1bf18:	0003c080 	.word	0x0003c080
   1bf1c:	0001c811 	.word	0x0001c811
   1bf20:	20000d14 	.word	0x20000d14
   1bf24:	0003c0cc 	.word	0x0003c0cc
   1bf28:	0001c41d 	.word	0x0001c41d

0001bf2c <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   1bf2c:	b590      	push	{r4, r7, lr}
   1bf2e:	b083      	sub	sp, #12
   1bf30:	af00      	add	r7, sp, #0
   1bf32:	0002      	movs	r2, r0
   1bf34:	1dfb      	adds	r3, r7, #7
   1bf36:	701a      	strb	r2, [r3, #0]
   1bf38:	1dbb      	adds	r3, r7, #6
   1bf3a:	1c0a      	adds	r2, r1, #0
   1bf3c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1bf3e:	1dfb      	adds	r3, r7, #7
   1bf40:	781b      	ldrb	r3, [r3, #0]
   1bf42:	2b08      	cmp	r3, #8
   1bf44:	d905      	bls.n	1bf52 <prvTraceGetPriorityProperty+0x26>
   1bf46:	4b1b      	ldr	r3, [pc, #108]	; (1bfb4 <prvTraceGetPriorityProperty+0x88>)
   1bf48:	0018      	movs	r0, r3
   1bf4a:	4b1b      	ldr	r3, [pc, #108]	; (1bfb8 <prvTraceGetPriorityProperty+0x8c>)
   1bf4c:	4798      	blx	r3
   1bf4e:	2300      	movs	r3, #0
   1bf50:	e02b      	b.n	1bfaa <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1bf52:	4b1a      	ldr	r3, [pc, #104]	; (1bfbc <prvTraceGetPriorityProperty+0x90>)
   1bf54:	681a      	ldr	r2, [r3, #0]
   1bf56:	1dfb      	adds	r3, r7, #7
   1bf58:	781b      	ldrb	r3, [r3, #0]
   1bf5a:	2164      	movs	r1, #100	; 0x64
   1bf5c:	18d3      	adds	r3, r2, r3
   1bf5e:	185b      	adds	r3, r3, r1
   1bf60:	781b      	ldrb	r3, [r3, #0]
   1bf62:	1dba      	adds	r2, r7, #6
   1bf64:	7812      	ldrb	r2, [r2, #0]
   1bf66:	429a      	cmp	r2, r3
   1bf68:	d905      	bls.n	1bf76 <prvTraceGetPriorityProperty+0x4a>
   1bf6a:	4b15      	ldr	r3, [pc, #84]	; (1bfc0 <prvTraceGetPriorityProperty+0x94>)
   1bf6c:	0018      	movs	r0, r3
   1bf6e:	4b12      	ldr	r3, [pc, #72]	; (1bfb8 <prvTraceGetPriorityProperty+0x8c>)
   1bf70:	4798      	blx	r3
   1bf72:	2300      	movs	r3, #0
   1bf74:	e019      	b.n	1bfaa <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   1bf76:	4b11      	ldr	r3, [pc, #68]	; (1bfbc <prvTraceGetPriorityProperty+0x90>)
   1bf78:	681c      	ldr	r4, [r3, #0]
   1bf7a:	1dfb      	adds	r3, r7, #7
   1bf7c:	781a      	ldrb	r2, [r3, #0]
   1bf7e:	1dbb      	adds	r3, r7, #6
   1bf80:	781b      	ldrb	r3, [r3, #0]
   1bf82:	0011      	movs	r1, r2
   1bf84:	0018      	movs	r0, r3
   1bf86:	4b0f      	ldr	r3, [pc, #60]	; (1bfc4 <prvTraceGetPriorityProperty+0x98>)
   1bf88:	4798      	blx	r3
   1bf8a:	0003      	movs	r3, r0
   1bf8c:	0018      	movs	r0, r3
   1bf8e:	4b0b      	ldr	r3, [pc, #44]	; (1bfbc <prvTraceGetPriorityProperty+0x90>)
   1bf90:	681a      	ldr	r2, [r3, #0]
   1bf92:	1dfb      	adds	r3, r7, #7
   1bf94:	781b      	ldrb	r3, [r3, #0]
   1bf96:	2170      	movs	r1, #112	; 0x70
   1bf98:	18d3      	adds	r3, r2, r3
   1bf9a:	185b      	adds	r3, r3, r1
   1bf9c:	781b      	ldrb	r3, [r3, #0]
   1bf9e:	18c3      	adds	r3, r0, r3
   1bfa0:	3301      	adds	r3, #1
   1bfa2:	229c      	movs	r2, #156	; 0x9c
   1bfa4:	18e3      	adds	r3, r4, r3
   1bfa6:	189b      	adds	r3, r3, r2
   1bfa8:	781b      	ldrb	r3, [r3, #0]
}
   1bfaa:	0018      	movs	r0, r3
   1bfac:	46bd      	mov	sp, r7
   1bfae:	b003      	add	sp, #12
   1bfb0:	bd90      	pop	{r4, r7, pc}
   1bfb2:	46c0      	nop			; (mov r8, r8)
   1bfb4:	0003c10c 	.word	0x0003c10c
   1bfb8:	0001c811 	.word	0x0001c811
   1bfbc:	20000d14 	.word	0x20000d14
   1bfc0:	0003c158 	.word	0x0003c158
   1bfc4:	0001c41d 	.word	0x0001c41d

0001bfc8 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   1bfc8:	b590      	push	{r4, r7, lr}
   1bfca:	b083      	sub	sp, #12
   1bfcc:	af00      	add	r7, sp, #0
   1bfce:	0004      	movs	r4, r0
   1bfd0:	0008      	movs	r0, r1
   1bfd2:	0011      	movs	r1, r2
   1bfd4:	1dfb      	adds	r3, r7, #7
   1bfd6:	1c22      	adds	r2, r4, #0
   1bfd8:	701a      	strb	r2, [r3, #0]
   1bfda:	1dbb      	adds	r3, r7, #6
   1bfdc:	1c02      	adds	r2, r0, #0
   1bfde:	701a      	strb	r2, [r3, #0]
   1bfe0:	1d7b      	adds	r3, r7, #5
   1bfe2:	1c0a      	adds	r2, r1, #0
   1bfe4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1bfe6:	1dfb      	adds	r3, r7, #7
   1bfe8:	781b      	ldrb	r3, [r3, #0]
   1bfea:	2b08      	cmp	r3, #8
   1bfec:	d904      	bls.n	1bff8 <prvTraceSetObjectState+0x30>
   1bfee:	4b1a      	ldr	r3, [pc, #104]	; (1c058 <prvTraceSetObjectState+0x90>)
   1bff0:	0018      	movs	r0, r3
   1bff2:	4b1a      	ldr	r3, [pc, #104]	; (1c05c <prvTraceSetObjectState+0x94>)
   1bff4:	4798      	blx	r3
   1bff6:	e02b      	b.n	1c050 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1bff8:	4b19      	ldr	r3, [pc, #100]	; (1c060 <prvTraceSetObjectState+0x98>)
   1bffa:	681a      	ldr	r2, [r3, #0]
   1bffc:	1dfb      	adds	r3, r7, #7
   1bffe:	781b      	ldrb	r3, [r3, #0]
   1c000:	2164      	movs	r1, #100	; 0x64
   1c002:	18d3      	adds	r3, r2, r3
   1c004:	185b      	adds	r3, r3, r1
   1c006:	781b      	ldrb	r3, [r3, #0]
   1c008:	1dba      	adds	r2, r7, #6
   1c00a:	7812      	ldrb	r2, [r2, #0]
   1c00c:	429a      	cmp	r2, r3
   1c00e:	d904      	bls.n	1c01a <prvTraceSetObjectState+0x52>
   1c010:	4b14      	ldr	r3, [pc, #80]	; (1c064 <prvTraceSetObjectState+0x9c>)
   1c012:	0018      	movs	r0, r3
   1c014:	4b11      	ldr	r3, [pc, #68]	; (1c05c <prvTraceSetObjectState+0x94>)
   1c016:	4798      	blx	r3
   1c018:	e01a      	b.n	1c050 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1c01a:	4b11      	ldr	r3, [pc, #68]	; (1c060 <prvTraceSetObjectState+0x98>)
   1c01c:	681c      	ldr	r4, [r3, #0]
   1c01e:	1dfb      	adds	r3, r7, #7
   1c020:	781a      	ldrb	r2, [r3, #0]
   1c022:	1dbb      	adds	r3, r7, #6
   1c024:	781b      	ldrb	r3, [r3, #0]
   1c026:	0011      	movs	r1, r2
   1c028:	0018      	movs	r0, r3
   1c02a:	4b0f      	ldr	r3, [pc, #60]	; (1c068 <prvTraceSetObjectState+0xa0>)
   1c02c:	4798      	blx	r3
   1c02e:	0003      	movs	r3, r0
   1c030:	0018      	movs	r0, r3
   1c032:	4b0b      	ldr	r3, [pc, #44]	; (1c060 <prvTraceSetObjectState+0x98>)
   1c034:	681a      	ldr	r2, [r3, #0]
   1c036:	1dfb      	adds	r3, r7, #7
   1c038:	781b      	ldrb	r3, [r3, #0]
   1c03a:	2170      	movs	r1, #112	; 0x70
   1c03c:	18d3      	adds	r3, r2, r3
   1c03e:	185b      	adds	r3, r3, r1
   1c040:	781b      	ldrb	r3, [r3, #0]
   1c042:	18c3      	adds	r3, r0, r3
   1c044:	229c      	movs	r2, #156	; 0x9c
   1c046:	18e3      	adds	r3, r4, r3
   1c048:	189b      	adds	r3, r3, r2
   1c04a:	1d7a      	adds	r2, r7, #5
   1c04c:	7812      	ldrb	r2, [r2, #0]
   1c04e:	701a      	strb	r2, [r3, #0]
}
   1c050:	46bd      	mov	sp, r7
   1c052:	b003      	add	sp, #12
   1c054:	bd90      	pop	{r4, r7, pc}
   1c056:	46c0      	nop			; (mov r8, r8)
   1c058:	0003c198 	.word	0x0003c198
   1c05c:	0001c811 	.word	0x0001c811
   1c060:	20000d14 	.word	0x20000d14
   1c064:	0003c1dc 	.word	0x0003c1dc
   1c068:	0001c41d 	.word	0x0001c41d

0001c06c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1c06c:	b590      	push	{r4, r7, lr}
   1c06e:	b083      	sub	sp, #12
   1c070:	af00      	add	r7, sp, #0
   1c072:	0002      	movs	r2, r0
   1c074:	1dfb      	adds	r3, r7, #7
   1c076:	701a      	strb	r2, [r3, #0]
   1c078:	1dbb      	adds	r3, r7, #6
   1c07a:	1c0a      	adds	r2, r1, #0
   1c07c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1c07e:	1dfb      	adds	r3, r7, #7
   1c080:	781b      	ldrb	r3, [r3, #0]
   1c082:	2b08      	cmp	r3, #8
   1c084:	d905      	bls.n	1c092 <prvTraceGetObjectState+0x26>
   1c086:	4b1a      	ldr	r3, [pc, #104]	; (1c0f0 <prvTraceGetObjectState+0x84>)
   1c088:	0018      	movs	r0, r3
   1c08a:	4b1a      	ldr	r3, [pc, #104]	; (1c0f4 <prvTraceGetObjectState+0x88>)
   1c08c:	4798      	blx	r3
   1c08e:	2300      	movs	r3, #0
   1c090:	e02a      	b.n	1c0e8 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1c092:	4b19      	ldr	r3, [pc, #100]	; (1c0f8 <prvTraceGetObjectState+0x8c>)
   1c094:	681a      	ldr	r2, [r3, #0]
   1c096:	1dfb      	adds	r3, r7, #7
   1c098:	781b      	ldrb	r3, [r3, #0]
   1c09a:	2164      	movs	r1, #100	; 0x64
   1c09c:	18d3      	adds	r3, r2, r3
   1c09e:	185b      	adds	r3, r3, r1
   1c0a0:	781b      	ldrb	r3, [r3, #0]
   1c0a2:	1dba      	adds	r2, r7, #6
   1c0a4:	7812      	ldrb	r2, [r2, #0]
   1c0a6:	429a      	cmp	r2, r3
   1c0a8:	d905      	bls.n	1c0b6 <prvTraceGetObjectState+0x4a>
   1c0aa:	4b14      	ldr	r3, [pc, #80]	; (1c0fc <prvTraceGetObjectState+0x90>)
   1c0ac:	0018      	movs	r0, r3
   1c0ae:	4b11      	ldr	r3, [pc, #68]	; (1c0f4 <prvTraceGetObjectState+0x88>)
   1c0b0:	4798      	blx	r3
   1c0b2:	2300      	movs	r3, #0
   1c0b4:	e018      	b.n	1c0e8 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1c0b6:	4b10      	ldr	r3, [pc, #64]	; (1c0f8 <prvTraceGetObjectState+0x8c>)
   1c0b8:	681c      	ldr	r4, [r3, #0]
   1c0ba:	1dfb      	adds	r3, r7, #7
   1c0bc:	781a      	ldrb	r2, [r3, #0]
   1c0be:	1dbb      	adds	r3, r7, #6
   1c0c0:	781b      	ldrb	r3, [r3, #0]
   1c0c2:	0011      	movs	r1, r2
   1c0c4:	0018      	movs	r0, r3
   1c0c6:	4b0e      	ldr	r3, [pc, #56]	; (1c100 <prvTraceGetObjectState+0x94>)
   1c0c8:	4798      	blx	r3
   1c0ca:	0003      	movs	r3, r0
   1c0cc:	0018      	movs	r0, r3
   1c0ce:	4b0a      	ldr	r3, [pc, #40]	; (1c0f8 <prvTraceGetObjectState+0x8c>)
   1c0d0:	681a      	ldr	r2, [r3, #0]
   1c0d2:	1dfb      	adds	r3, r7, #7
   1c0d4:	781b      	ldrb	r3, [r3, #0]
   1c0d6:	2170      	movs	r1, #112	; 0x70
   1c0d8:	18d3      	adds	r3, r2, r3
   1c0da:	185b      	adds	r3, r3, r1
   1c0dc:	781b      	ldrb	r3, [r3, #0]
   1c0de:	18c3      	adds	r3, r0, r3
   1c0e0:	229c      	movs	r2, #156	; 0x9c
   1c0e2:	18e3      	adds	r3, r4, r3
   1c0e4:	189b      	adds	r3, r3, r2
   1c0e6:	781b      	ldrb	r3, [r3, #0]
}
   1c0e8:	0018      	movs	r0, r3
   1c0ea:	46bd      	mov	sp, r7
   1c0ec:	b003      	add	sp, #12
   1c0ee:	bd90      	pop	{r4, r7, pc}
   1c0f0:	0003c218 	.word	0x0003c218
   1c0f4:	0001c811 	.word	0x0001c811
   1c0f8:	20000d14 	.word	0x20000d14
   1c0fc:	0003c25c 	.word	0x0003c25c
   1c100:	0001c41d 	.word	0x0001c41d

0001c104 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1c104:	b590      	push	{r4, r7, lr}
   1c106:	b083      	sub	sp, #12
   1c108:	af00      	add	r7, sp, #0
   1c10a:	0002      	movs	r2, r0
   1c10c:	1dfb      	adds	r3, r7, #7
   1c10e:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1c110:	4b11      	ldr	r3, [pc, #68]	; (1c158 <prvTraceSetTaskInstanceFinished+0x54>)
   1c112:	681b      	ldr	r3, [r3, #0]
   1c114:	2267      	movs	r2, #103	; 0x67
   1c116:	5c9b      	ldrb	r3, [r3, r2]
   1c118:	1dfa      	adds	r2, r7, #7
   1c11a:	7812      	ldrb	r2, [r2, #0]
   1c11c:	429a      	cmp	r2, r3
   1c11e:	d904      	bls.n	1c12a <prvTraceSetTaskInstanceFinished+0x26>
   1c120:	4b0e      	ldr	r3, [pc, #56]	; (1c15c <prvTraceSetTaskInstanceFinished+0x58>)
   1c122:	0018      	movs	r0, r3
   1c124:	4b0e      	ldr	r3, [pc, #56]	; (1c160 <prvTraceSetTaskInstanceFinished+0x5c>)
   1c126:	4798      	blx	r3
   1c128:	e013      	b.n	1c152 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1c12a:	4b0b      	ldr	r3, [pc, #44]	; (1c158 <prvTraceSetTaskInstanceFinished+0x54>)
   1c12c:	681c      	ldr	r4, [r3, #0]
   1c12e:	1dfb      	adds	r3, r7, #7
   1c130:	781b      	ldrb	r3, [r3, #0]
   1c132:	2103      	movs	r1, #3
   1c134:	0018      	movs	r0, r3
   1c136:	4b0b      	ldr	r3, [pc, #44]	; (1c164 <prvTraceSetTaskInstanceFinished+0x60>)
   1c138:	4798      	blx	r3
   1c13a:	0003      	movs	r3, r0
   1c13c:	0019      	movs	r1, r3
   1c13e:	4b06      	ldr	r3, [pc, #24]	; (1c158 <prvTraceSetTaskInstanceFinished+0x54>)
   1c140:	681b      	ldr	r3, [r3, #0]
   1c142:	2273      	movs	r2, #115	; 0x73
   1c144:	5c9b      	ldrb	r3, [r3, r2]
   1c146:	18cb      	adds	r3, r1, r3
   1c148:	229c      	movs	r2, #156	; 0x9c
   1c14a:	18e3      	adds	r3, r4, r3
   1c14c:	189b      	adds	r3, r3, r2
   1c14e:	2200      	movs	r2, #0
   1c150:	701a      	strb	r2, [r3, #0]
#endif
}
   1c152:	46bd      	mov	sp, r7
   1c154:	b003      	add	sp, #12
   1c156:	bd90      	pop	{r4, r7, pc}
   1c158:	20000d14 	.word	0x20000d14
   1c15c:	0003c298 	.word	0x0003c298
   1c160:	0001c811 	.word	0x0001c811
   1c164:	0001c41d 	.word	0x0001c41d

0001c168 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1c168:	b580      	push	{r7, lr}
   1c16a:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1c16c:	4b75      	ldr	r3, [pc, #468]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c16e:	681b      	ldr	r3, [r3, #0]
   1c170:	2b00      	cmp	r3, #0
   1c172:	d103      	bne.n	1c17c <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1c174:	4b73      	ldr	r3, [pc, #460]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c176:	4a74      	ldr	r2, [pc, #464]	; (1c348 <prvTraceInitTraceData+0x1e0>)
   1c178:	601a      	str	r2, [r3, #0]
   1c17a:	e006      	b.n	1c18a <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1c17c:	4b71      	ldr	r3, [pc, #452]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c17e:	681b      	ldr	r3, [r3, #0]
   1c180:	781b      	ldrb	r3, [r3, #0]
   1c182:	b2db      	uxtb	r3, r3
   1c184:	2b01      	cmp	r3, #1
   1c186:	d100      	bne.n	1c18a <prvTraceInitTraceData+0x22>
   1c188:	e0d8      	b.n	1c33c <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1c18a:	4b70      	ldr	r3, [pc, #448]	; (1c34c <prvTraceInitTraceData+0x1e4>)
   1c18c:	681a      	ldr	r2, [r3, #0]
   1c18e:	4b70      	ldr	r3, [pc, #448]	; (1c350 <prvTraceInitTraceData+0x1e8>)
   1c190:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1c192:	4b6c      	ldr	r3, [pc, #432]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c194:	6818      	ldr	r0, [r3, #0]
   1c196:	23bd      	movs	r3, #189	; 0xbd
   1c198:	011b      	lsls	r3, r3, #4
   1c19a:	001a      	movs	r2, r3
   1c19c:	2100      	movs	r1, #0
   1c19e:	4b6d      	ldr	r3, [pc, #436]	; (1c354 <prvTraceInitTraceData+0x1ec>)
   1c1a0:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1c1a2:	4b68      	ldr	r3, [pc, #416]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1a4:	681b      	ldr	r3, [r3, #0]
   1c1a6:	4a6c      	ldr	r2, [pc, #432]	; (1c358 <prvTraceInitTraceData+0x1f0>)
   1c1a8:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1c1aa:	4b66      	ldr	r3, [pc, #408]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1ac:	681b      	ldr	r3, [r3, #0]
   1c1ae:	2205      	movs	r2, #5
   1c1b0:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1c1b2:	4b64      	ldr	r3, [pc, #400]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1b4:	681b      	ldr	r3, [r3, #0]
   1c1b6:	2200      	movs	r2, #0
   1c1b8:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1c1ba:	4b62      	ldr	r3, [pc, #392]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1bc:	681b      	ldr	r3, [r3, #0]
   1c1be:	22bd      	movs	r2, #189	; 0xbd
   1c1c0:	0112      	lsls	r2, r2, #4
   1c1c2:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1c1c4:	4b5f      	ldr	r3, [pc, #380]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1c6:	681b      	ldr	r3, [r3, #0]
   1c1c8:	2296      	movs	r2, #150	; 0x96
   1c1ca:	0052      	lsls	r2, r2, #1
   1c1cc:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1c1ce:	4b5d      	ldr	r3, [pc, #372]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1d0:	681b      	ldr	r3, [r3, #0]
   1c1d2:	4a62      	ldr	r2, [pc, #392]	; (1c35c <prvTraceInitTraceData+0x1f4>)
   1c1d4:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1c1d6:	4b5b      	ldr	r3, [pc, #364]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1d8:	681b      	ldr	r3, [r3, #0]
   1c1da:	2200      	movs	r2, #0
   1c1dc:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1c1de:	4b59      	ldr	r3, [pc, #356]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1e0:	681b      	ldr	r3, [r3, #0]
   1c1e2:	2200      	movs	r2, #0
   1c1e4:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1c1e6:	4b5e      	ldr	r3, [pc, #376]	; (1c360 <prvTraceInitTraceData+0x1f8>)
   1c1e8:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1c1ea:	4b56      	ldr	r3, [pc, #344]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1ec:	681b      	ldr	r3, [r3, #0]
   1c1ee:	4a5d      	ldr	r2, [pc, #372]	; (1c364 <prvTraceInitTraceData+0x1fc>)
   1c1f0:	495d      	ldr	r1, [pc, #372]	; (1c368 <prvTraceInitTraceData+0x200>)
   1c1f2:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1c1f4:	4b53      	ldr	r3, [pc, #332]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c1f6:	681a      	ldr	r2, [r3, #0]
   1c1f8:	23ac      	movs	r3, #172	; 0xac
   1c1fa:	00db      	lsls	r3, r3, #3
   1c1fc:	21c8      	movs	r1, #200	; 0xc8
   1c1fe:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1c200:	4b50      	ldr	r3, [pc, #320]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c202:	681b      	ldr	r3, [r3, #0]
   1c204:	4a59      	ldr	r2, [pc, #356]	; (1c36c <prvTraceInitTraceData+0x204>)
   1c206:	2101      	movs	r1, #1
   1c208:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1c20a:	4b4e      	ldr	r3, [pc, #312]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c20c:	681a      	ldr	r2, [r3, #0]
   1c20e:	23d7      	movs	r3, #215	; 0xd7
   1c210:	00db      	lsls	r3, r3, #3
   1c212:	4957      	ldr	r1, [pc, #348]	; (1c370 <prvTraceInitTraceData+0x208>)
   1c214:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1c216:	4b4b      	ldr	r3, [pc, #300]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c218:	681b      	ldr	r3, [r3, #0]
   1c21a:	4a56      	ldr	r2, [pc, #344]	; (1c374 <prvTraceInitTraceData+0x20c>)
   1c21c:	4694      	mov	ip, r2
   1c21e:	4463      	add	r3, ip
   1c220:	4955      	ldr	r1, [pc, #340]	; (1c378 <prvTraceInitTraceData+0x210>)
   1c222:	2250      	movs	r2, #80	; 0x50
   1c224:	0018      	movs	r0, r3
   1c226:	4b55      	ldr	r3, [pc, #340]	; (1c37c <prvTraceInitTraceData+0x214>)
   1c228:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1c22a:	4b46      	ldr	r3, [pc, #280]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c22c:	681b      	ldr	r3, [r3, #0]
   1c22e:	4a54      	ldr	r2, [pc, #336]	; (1c380 <prvTraceInitTraceData+0x218>)
   1c230:	4954      	ldr	r1, [pc, #336]	; (1c384 <prvTraceInitTraceData+0x21c>)
   1c232:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1c234:	4b43      	ldr	r3, [pc, #268]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c236:	681b      	ldr	r3, [r3, #0]
   1c238:	4a53      	ldr	r2, [pc, #332]	; (1c388 <prvTraceInitTraceData+0x220>)
   1c23a:	210a      	movs	r1, #10
   1c23c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1c23e:	4b41      	ldr	r3, [pc, #260]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c240:	681b      	ldr	r3, [r3, #0]
   1c242:	4a52      	ldr	r2, [pc, #328]	; (1c38c <prvTraceInitTraceData+0x224>)
   1c244:	210b      	movs	r1, #11
   1c246:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1c248:	4b3e      	ldr	r3, [pc, #248]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c24a:	681b      	ldr	r3, [r3, #0]
   1c24c:	4a50      	ldr	r2, [pc, #320]	; (1c390 <prvTraceInitTraceData+0x228>)
   1c24e:	210c      	movs	r1, #12
   1c250:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1c252:	4b3c      	ldr	r3, [pc, #240]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c254:	681b      	ldr	r3, [r3, #0]
   1c256:	4a4f      	ldr	r2, [pc, #316]	; (1c394 <prvTraceInitTraceData+0x22c>)
   1c258:	210d      	movs	r1, #13
   1c25a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1c25c:	4b39      	ldr	r3, [pc, #228]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c25e:	681b      	ldr	r3, [r3, #0]
   1c260:	4a4d      	ldr	r2, [pc, #308]	; (1c398 <prvTraceInitTraceData+0x230>)
   1c262:	2171      	movs	r1, #113	; 0x71
   1c264:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1c266:	4b37      	ldr	r3, [pc, #220]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c268:	681b      	ldr	r3, [r3, #0]
   1c26a:	4a4c      	ldr	r2, [pc, #304]	; (1c39c <prvTraceInitTraceData+0x234>)
   1c26c:	2172      	movs	r1, #114	; 0x72
   1c26e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1c270:	4b34      	ldr	r3, [pc, #208]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c272:	681b      	ldr	r3, [r3, #0]
   1c274:	4a4a      	ldr	r2, [pc, #296]	; (1c3a0 <prvTraceInitTraceData+0x238>)
   1c276:	2173      	movs	r1, #115	; 0x73
   1c278:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1c27a:	4b32      	ldr	r3, [pc, #200]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c27c:	681b      	ldr	r3, [r3, #0]
   1c27e:	4a49      	ldr	r2, [pc, #292]	; (1c3a4 <prvTraceInitTraceData+0x23c>)
   1c280:	2174      	movs	r1, #116	; 0x74
   1c282:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1c284:	4b2f      	ldr	r3, [pc, #188]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c286:	681b      	ldr	r3, [r3, #0]
   1c288:	4a47      	ldr	r2, [pc, #284]	; (1c3a8 <prvTraceInitTraceData+0x240>)
   1c28a:	21f1      	movs	r1, #241	; 0xf1
   1c28c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1c28e:	4b2d      	ldr	r3, [pc, #180]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c290:	681b      	ldr	r3, [r3, #0]
   1c292:	4a46      	ldr	r2, [pc, #280]	; (1c3ac <prvTraceInitTraceData+0x244>)
   1c294:	21f2      	movs	r1, #242	; 0xf2
   1c296:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1c298:	4b2a      	ldr	r3, [pc, #168]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c29a:	681b      	ldr	r3, [r3, #0]
   1c29c:	4a44      	ldr	r2, [pc, #272]	; (1c3b0 <prvTraceInitTraceData+0x248>)
   1c29e:	21f3      	movs	r1, #243	; 0xf3
   1c2a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1c2a2:	4b28      	ldr	r3, [pc, #160]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2a4:	681b      	ldr	r3, [r3, #0]
   1c2a6:	4a43      	ldr	r2, [pc, #268]	; (1c3b4 <prvTraceInitTraceData+0x24c>)
   1c2a8:	21f4      	movs	r1, #244	; 0xf4
   1c2aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1c2ac:	4b42      	ldr	r3, [pc, #264]	; (1c3b8 <prvTraceInitTraceData+0x250>)
   1c2ae:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1c2b0:	4b24      	ldr	r3, [pc, #144]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2b2:	681b      	ldr	r3, [r3, #0]
   1c2b4:	22f4      	movs	r2, #244	; 0xf4
   1c2b6:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1c2b8:	4b22      	ldr	r3, [pc, #136]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2ba:	681b      	ldr	r3, [r3, #0]
   1c2bc:	22f3      	movs	r2, #243	; 0xf3
   1c2be:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1c2c0:	4b20      	ldr	r3, [pc, #128]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2c2:	681b      	ldr	r3, [r3, #0]
   1c2c4:	22f2      	movs	r2, #242	; 0xf2
   1c2c6:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1c2c8:	4b1e      	ldr	r3, [pc, #120]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2ca:	681b      	ldr	r3, [r3, #0]
   1c2cc:	22f1      	movs	r2, #241	; 0xf1
   1c2ce:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1c2d0:	4b1c      	ldr	r3, [pc, #112]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2d2:	681b      	ldr	r3, [r3, #0]
   1c2d4:	2274      	movs	r2, #116	; 0x74
   1c2d6:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1c2d8:	4b1a      	ldr	r3, [pc, #104]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2da:	681b      	ldr	r3, [r3, #0]
   1c2dc:	2273      	movs	r2, #115	; 0x73
   1c2de:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1c2e0:	4b18      	ldr	r3, [pc, #96]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2e2:	681b      	ldr	r3, [r3, #0]
   1c2e4:	2272      	movs	r2, #114	; 0x72
   1c2e6:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1c2e8:	4b16      	ldr	r3, [pc, #88]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2ea:	681b      	ldr	r3, [r3, #0]
   1c2ec:	2271      	movs	r2, #113	; 0x71
   1c2ee:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1c2f0:	4b14      	ldr	r3, [pc, #80]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2f2:	681b      	ldr	r3, [r3, #0]
   1c2f4:	2204      	movs	r2, #4
   1c2f6:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1c2f8:	4b12      	ldr	r3, [pc, #72]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c2fa:	681b      	ldr	r3, [r3, #0]
   1c2fc:	2203      	movs	r2, #3
   1c2fe:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1c300:	4b10      	ldr	r3, [pc, #64]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c302:	681b      	ldr	r3, [r3, #0]
   1c304:	2202      	movs	r2, #2
   1c306:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1c308:	4b0e      	ldr	r3, [pc, #56]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c30a:	681b      	ldr	r3, [r3, #0]
   1c30c:	2201      	movs	r2, #1
   1c30e:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1c310:	4b2a      	ldr	r3, [pc, #168]	; (1c3bc <prvTraceInitTraceData+0x254>)
   1c312:	681b      	ldr	r3, [r3, #0]
   1c314:	2b00      	cmp	r3, #0
   1c316:	d012      	beq.n	1c33e <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1c318:	4b0a      	ldr	r3, [pc, #40]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c31a:	681b      	ldr	r3, [r3, #0]
   1c31c:	4a15      	ldr	r2, [pc, #84]	; (1c374 <prvTraceInitTraceData+0x20c>)
   1c31e:	1898      	adds	r0, r3, r2
   1c320:	4b26      	ldr	r3, [pc, #152]	; (1c3bc <prvTraceInitTraceData+0x254>)
   1c322:	681b      	ldr	r3, [r3, #0]
   1c324:	2250      	movs	r2, #80	; 0x50
   1c326:	0019      	movs	r1, r3
   1c328:	4b14      	ldr	r3, [pc, #80]	; (1c37c <prvTraceInitTraceData+0x214>)
   1c32a:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1c32c:	4b05      	ldr	r3, [pc, #20]	; (1c344 <prvTraceInitTraceData+0x1dc>)
   1c32e:	681b      	ldr	r3, [r3, #0]
   1c330:	4a23      	ldr	r2, [pc, #140]	; (1c3c0 <prvTraceInitTraceData+0x258>)
   1c332:	2101      	movs	r1, #1
   1c334:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1c336:	4b23      	ldr	r3, [pc, #140]	; (1c3c4 <prvTraceInitTraceData+0x25c>)
   1c338:	4798      	blx	r3
   1c33a:	e000      	b.n	1c33e <prvTraceInitTraceData+0x1d6>
			return;
   1c33c:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1c33e:	46bd      	mov	sp, r7
   1c340:	bd80      	pop	{r7, pc}
   1c342:	46c0      	nop			; (mov r8, r8)
   1c344:	20000d14 	.word	0x20000d14
   1c348:	20004a10 	.word	0x20004a10
   1c34c:	e000e018 	.word	0xe000e018
   1c350:	200055e0 	.word	0x200055e0
   1c354:	00038507 	.word	0x00038507
   1c358:	00001aa1 	.word	0x00001aa1
   1c35c:	f0f0f0f0 	.word	0xf0f0f0f0
   1c360:	0001b2cd 	.word	0x0001b2cd
   1c364:	0000055c 	.word	0x0000055c
   1c368:	f1f1f1f1 	.word	0xf1f1f1f1
   1c36c:	00000564 	.word	0x00000564
   1c370:	f2f2f2f2 	.word	0xf2f2f2f2
   1c374:	000006bc 	.word	0x000006bc
   1c378:	0003c2e0 	.word	0x0003c2e0
   1c37c:	0001c6dd 	.word	0x0001c6dd
   1c380:	0000070c 	.word	0x0000070c
   1c384:	f3f3f3f3 	.word	0xf3f3f3f3
   1c388:	00000bc4 	.word	0x00000bc4
   1c38c:	00000bc5 	.word	0x00000bc5
   1c390:	00000bc6 	.word	0x00000bc6
   1c394:	00000bc7 	.word	0x00000bc7
   1c398:	00000bc8 	.word	0x00000bc8
   1c39c:	00000bc9 	.word	0x00000bc9
   1c3a0:	00000bca 	.word	0x00000bca
   1c3a4:	00000bcb 	.word	0x00000bcb
   1c3a8:	00000bcc 	.word	0x00000bcc
   1c3ac:	00000bcd 	.word	0x00000bcd
   1c3b0:	00000bce 	.word	0x00000bce
   1c3b4:	00000bcf 	.word	0x00000bcf
   1c3b8:	0001b46d 	.word	0x0001b46d
   1c3bc:	20000c74 	.word	0x20000c74
   1c3c0:	000006b4 	.word	0x000006b4
   1c3c4:	0001b6d5 	.word	0x0001b6d5

0001c3c8 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1c3c8:	b580      	push	{r7, lr}
   1c3ca:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1c3cc:	4b10      	ldr	r3, [pc, #64]	; (1c410 <prvTraceNextFreeEventBufferSlot+0x48>)
   1c3ce:	681b      	ldr	r3, [r3, #0]
   1c3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c3d2:	2b00      	cmp	r3, #0
   1c3d4:	d101      	bne.n	1c3da <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1c3d6:	2300      	movs	r3, #0
   1c3d8:	e017      	b.n	1c40a <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1c3da:	4b0d      	ldr	r3, [pc, #52]	; (1c410 <prvTraceNextFreeEventBufferSlot+0x48>)
   1c3dc:	681b      	ldr	r3, [r3, #0]
   1c3de:	69da      	ldr	r2, [r3, #28]
   1c3e0:	232c      	movs	r3, #44	; 0x2c
   1c3e2:	33ff      	adds	r3, #255	; 0xff
   1c3e4:	429a      	cmp	r2, r3
   1c3e6:	d905      	bls.n	1c3f4 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1c3e8:	4b0a      	ldr	r3, [pc, #40]	; (1c414 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1c3ea:	0018      	movs	r0, r3
   1c3ec:	4b0a      	ldr	r3, [pc, #40]	; (1c418 <prvTraceNextFreeEventBufferSlot+0x50>)
   1c3ee:	4798      	blx	r3
		return NULL;
   1c3f0:	2300      	movs	r3, #0
   1c3f2:	e00a      	b.n	1c40a <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1c3f4:	4b06      	ldr	r3, [pc, #24]	; (1c410 <prvTraceNextFreeEventBufferSlot+0x48>)
   1c3f6:	681a      	ldr	r2, [r3, #0]
   1c3f8:	4b05      	ldr	r3, [pc, #20]	; (1c410 <prvTraceNextFreeEventBufferSlot+0x48>)
   1c3fa:	681b      	ldr	r3, [r3, #0]
   1c3fc:	69db      	ldr	r3, [r3, #28]
   1c3fe:	009b      	lsls	r3, r3, #2
   1c400:	21e2      	movs	r1, #226	; 0xe2
   1c402:	00c9      	lsls	r1, r1, #3
   1c404:	468c      	mov	ip, r1
   1c406:	4463      	add	r3, ip
   1c408:	18d3      	adds	r3, r2, r3
}
   1c40a:	0018      	movs	r0, r3
   1c40c:	46bd      	mov	sp, r7
   1c40e:	bd80      	pop	{r7, pc}
   1c410:	20000d14 	.word	0x20000d14
   1c414:	0003c2f4 	.word	0x0003c2f4
   1c418:	0001c811 	.word	0x0001c811

0001c41c <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1c41c:	b580      	push	{r7, lr}
   1c41e:	b082      	sub	sp, #8
   1c420:	af00      	add	r7, sp, #0
   1c422:	0002      	movs	r2, r0
   1c424:	1dfb      	adds	r3, r7, #7
   1c426:	701a      	strb	r2, [r3, #0]
   1c428:	1dbb      	adds	r3, r7, #6
   1c42a:	1c0a      	adds	r2, r1, #0
   1c42c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1c42e:	1dbb      	adds	r3, r7, #6
   1c430:	781b      	ldrb	r3, [r3, #0]
   1c432:	2b08      	cmp	r3, #8
   1c434:	d905      	bls.n	1c442 <uiIndexOfObject+0x26>
   1c436:	4b2a      	ldr	r3, [pc, #168]	; (1c4e0 <uiIndexOfObject+0xc4>)
   1c438:	0018      	movs	r0, r3
   1c43a:	4b2a      	ldr	r3, [pc, #168]	; (1c4e4 <uiIndexOfObject+0xc8>)
   1c43c:	4798      	blx	r3
   1c43e:	2300      	movs	r3, #0
   1c440:	e049      	b.n	1c4d6 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1c442:	1dfb      	adds	r3, r7, #7
   1c444:	781b      	ldrb	r3, [r3, #0]
   1c446:	2b00      	cmp	r3, #0
   1c448:	d00b      	beq.n	1c462 <uiIndexOfObject+0x46>
   1c44a:	4b27      	ldr	r3, [pc, #156]	; (1c4e8 <uiIndexOfObject+0xcc>)
   1c44c:	681a      	ldr	r2, [r3, #0]
   1c44e:	1dbb      	adds	r3, r7, #6
   1c450:	781b      	ldrb	r3, [r3, #0]
   1c452:	2164      	movs	r1, #100	; 0x64
   1c454:	18d3      	adds	r3, r2, r3
   1c456:	185b      	adds	r3, r3, r1
   1c458:	781b      	ldrb	r3, [r3, #0]
   1c45a:	1dfa      	adds	r2, r7, #7
   1c45c:	7812      	ldrb	r2, [r2, #0]
   1c45e:	429a      	cmp	r2, r3
   1c460:	d905      	bls.n	1c46e <uiIndexOfObject+0x52>
   1c462:	4b22      	ldr	r3, [pc, #136]	; (1c4ec <uiIndexOfObject+0xd0>)
   1c464:	0018      	movs	r0, r3
   1c466:	4b1f      	ldr	r3, [pc, #124]	; (1c4e4 <uiIndexOfObject+0xc8>)
   1c468:	4798      	blx	r3
   1c46a:	2300      	movs	r3, #0
   1c46c:	e033      	b.n	1c4d6 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1c46e:	1dbb      	adds	r3, r7, #6
   1c470:	781b      	ldrb	r3, [r3, #0]
   1c472:	2b08      	cmp	r3, #8
   1c474:	d82a      	bhi.n	1c4cc <uiIndexOfObject+0xb0>
   1c476:	1dfb      	adds	r3, r7, #7
   1c478:	781b      	ldrb	r3, [r3, #0]
   1c47a:	2b00      	cmp	r3, #0
   1c47c:	d026      	beq.n	1c4cc <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1c47e:	4b1a      	ldr	r3, [pc, #104]	; (1c4e8 <uiIndexOfObject+0xcc>)
   1c480:	681a      	ldr	r2, [r3, #0]
   1c482:	1dbb      	adds	r3, r7, #6
   1c484:	781b      	ldrb	r3, [r3, #0]
   1c486:	2164      	movs	r1, #100	; 0x64
   1c488:	18d3      	adds	r3, r2, r3
   1c48a:	185b      	adds	r3, r3, r1
   1c48c:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1c48e:	1dfa      	adds	r2, r7, #7
   1c490:	7812      	ldrb	r2, [r2, #0]
   1c492:	429a      	cmp	r2, r3
   1c494:	d81a      	bhi.n	1c4cc <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1c496:	4b14      	ldr	r3, [pc, #80]	; (1c4e8 <uiIndexOfObject+0xcc>)
   1c498:	681a      	ldr	r2, [r3, #0]
   1c49a:	1dbb      	adds	r3, r7, #6
   1c49c:	781b      	ldrb	r3, [r3, #0]
   1c49e:	3340      	adds	r3, #64	; 0x40
   1c4a0:	005b      	lsls	r3, r3, #1
   1c4a2:	18d3      	adds	r3, r2, r3
   1c4a4:	3308      	adds	r3, #8
   1c4a6:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1c4a8:	4b0f      	ldr	r3, [pc, #60]	; (1c4e8 <uiIndexOfObject+0xcc>)
   1c4aa:	6819      	ldr	r1, [r3, #0]
   1c4ac:	1dbb      	adds	r3, r7, #6
   1c4ae:	781b      	ldrb	r3, [r3, #0]
   1c4b0:	207c      	movs	r0, #124	; 0x7c
   1c4b2:	18cb      	adds	r3, r1, r3
   1c4b4:	181b      	adds	r3, r3, r0
   1c4b6:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1c4b8:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1c4ba:	1df9      	adds	r1, r7, #7
   1c4bc:	7809      	ldrb	r1, [r1, #0]
   1c4be:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1c4c0:	b289      	uxth	r1, r1
   1c4c2:	434b      	muls	r3, r1
   1c4c4:	b29b      	uxth	r3, r3
   1c4c6:	18d3      	adds	r3, r2, r3
   1c4c8:	b29b      	uxth	r3, r3
   1c4ca:	e004      	b.n	1c4d6 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1c4cc:	4b08      	ldr	r3, [pc, #32]	; (1c4f0 <uiIndexOfObject+0xd4>)
   1c4ce:	0018      	movs	r0, r3
   1c4d0:	4b04      	ldr	r3, [pc, #16]	; (1c4e4 <uiIndexOfObject+0xc8>)
   1c4d2:	4798      	blx	r3
	return 0;
   1c4d4:	2300      	movs	r3, #0
}
   1c4d6:	0018      	movs	r0, r3
   1c4d8:	46bd      	mov	sp, r7
   1c4da:	b002      	add	sp, #8
   1c4dc:	bd80      	pop	{r7, pc}
   1c4de:	46c0      	nop			; (mov r8, r8)
   1c4e0:	0003c31c 	.word	0x0003c31c
   1c4e4:	0001c811 	.word	0x0001c811
   1c4e8:	20000d14 	.word	0x20000d14
   1c4ec:	0003c35c 	.word	0x0003c35c
   1c4f0:	0003c39c 	.word	0x0003c39c

0001c4f4 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1c4f4:	b580      	push	{r7, lr}
   1c4f6:	b088      	sub	sp, #32
   1c4f8:	af00      	add	r7, sp, #0
   1c4fa:	0002      	movs	r2, r0
   1c4fc:	1dfb      	adds	r3, r7, #7
   1c4fe:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1c500:	4b5a      	ldr	r3, [pc, #360]	; (1c66c <prvTraceGetObjectHandle+0x178>)
   1c502:	681b      	ldr	r3, [r3, #0]
   1c504:	2b00      	cmp	r3, #0
   1c506:	d105      	bne.n	1c514 <prvTraceGetObjectHandle+0x20>
   1c508:	4b59      	ldr	r3, [pc, #356]	; (1c670 <prvTraceGetObjectHandle+0x17c>)
   1c50a:	0018      	movs	r0, r3
   1c50c:	4b59      	ldr	r3, [pc, #356]	; (1c674 <prvTraceGetObjectHandle+0x180>)
   1c50e:	4798      	blx	r3
   1c510:	2300      	movs	r3, #0
   1c512:	e0a7      	b.n	1c664 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1c514:	1dfb      	adds	r3, r7, #7
   1c516:	781b      	ldrb	r3, [r3, #0]
   1c518:	2b08      	cmp	r3, #8
   1c51a:	d905      	bls.n	1c528 <prvTraceGetObjectHandle+0x34>
   1c51c:	4b56      	ldr	r3, [pc, #344]	; (1c678 <prvTraceGetObjectHandle+0x184>)
   1c51e:	0018      	movs	r0, r3
   1c520:	4b54      	ldr	r3, [pc, #336]	; (1c674 <prvTraceGetObjectHandle+0x180>)
   1c522:	4798      	blx	r3
   1c524:	2300      	movs	r3, #0
   1c526:	e09d      	b.n	1c664 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1c528:	f3ef 8310 	mrs	r3, PRIMASK
   1c52c:	60fb      	str	r3, [r7, #12]
  return(result);
   1c52e:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1c530:	61bb      	str	r3, [r7, #24]
   1c532:	2301      	movs	r3, #1
   1c534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1c536:	693b      	ldr	r3, [r7, #16]
   1c538:	f383 8810 	msr	PRIMASK, r3
   1c53c:	4b4f      	ldr	r3, [pc, #316]	; (1c67c <prvTraceGetObjectHandle+0x188>)
   1c53e:	681b      	ldr	r3, [r3, #0]
   1c540:	1c5a      	adds	r2, r3, #1
   1c542:	4b4e      	ldr	r3, [pc, #312]	; (1c67c <prvTraceGetObjectHandle+0x188>)
   1c544:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1c546:	1dfb      	adds	r3, r7, #7
   1c548:	781a      	ldrb	r2, [r3, #0]
   1c54a:	4b4d      	ldr	r3, [pc, #308]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c54c:	0052      	lsls	r2, r2, #1
   1c54e:	5ad3      	ldrh	r3, [r2, r3]
   1c550:	001a      	movs	r2, r3
   1c552:	4b4c      	ldr	r3, [pc, #304]	; (1c684 <prvTraceGetObjectHandle+0x190>)
   1c554:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1c556:	4b4b      	ldr	r3, [pc, #300]	; (1c684 <prvTraceGetObjectHandle+0x190>)
   1c558:	681b      	ldr	r3, [r3, #0]
   1c55a:	4a49      	ldr	r2, [pc, #292]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c55c:	2148      	movs	r1, #72	; 0x48
   1c55e:	18d3      	adds	r3, r2, r3
   1c560:	185b      	adds	r3, r3, r1
   1c562:	781b      	ldrb	r3, [r3, #0]
   1c564:	2b00      	cmp	r3, #0
   1c566:	d117      	bne.n	1c598 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1c568:	4b46      	ldr	r3, [pc, #280]	; (1c684 <prvTraceGetObjectHandle+0x190>)
   1c56a:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1c56c:	4b45      	ldr	r3, [pc, #276]	; (1c684 <prvTraceGetObjectHandle+0x190>)
   1c56e:	681b      	ldr	r3, [r3, #0]
   1c570:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1c572:	1dfb      	adds	r3, r7, #7
   1c574:	781b      	ldrb	r3, [r3, #0]
   1c576:	4842      	ldr	r0, [pc, #264]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c578:	3308      	adds	r3, #8
   1c57a:	005b      	lsls	r3, r3, #1
   1c57c:	18c3      	adds	r3, r0, r3
   1c57e:	3302      	adds	r3, #2
   1c580:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1c582:	b2db      	uxtb	r3, r3
   1c584:	1acb      	subs	r3, r1, r3
   1c586:	b2db      	uxtb	r3, r3
   1c588:	3301      	adds	r3, #1
   1c58a:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1c58c:	4b3c      	ldr	r3, [pc, #240]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c58e:	2148      	movs	r1, #72	; 0x48
   1c590:	189b      	adds	r3, r3, r2
   1c592:	185b      	adds	r3, r3, r1
   1c594:	1c02      	adds	r2, r0, #0
   1c596:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1c598:	4b3a      	ldr	r3, [pc, #232]	; (1c684 <prvTraceGetObjectHandle+0x190>)
   1c59a:	681a      	ldr	r2, [r3, #0]
   1c59c:	231f      	movs	r3, #31
   1c59e:	18fb      	adds	r3, r7, r3
   1c5a0:	4937      	ldr	r1, [pc, #220]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c5a2:	2048      	movs	r0, #72	; 0x48
   1c5a4:	188a      	adds	r2, r1, r2
   1c5a6:	1812      	adds	r2, r2, r0
   1c5a8:	7812      	ldrb	r2, [r2, #0]
   1c5aa:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1c5ac:	1dfb      	adds	r3, r7, #7
   1c5ae:	781a      	ldrb	r2, [r3, #0]
   1c5b0:	4b33      	ldr	r3, [pc, #204]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c5b2:	0052      	lsls	r2, r2, #1
   1c5b4:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1c5b6:	1dfb      	adds	r3, r7, #7
   1c5b8:	781b      	ldrb	r3, [r3, #0]
   1c5ba:	4931      	ldr	r1, [pc, #196]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c5bc:	3310      	adds	r3, #16
   1c5be:	005b      	lsls	r3, r3, #1
   1c5c0:	18cb      	adds	r3, r1, r3
   1c5c2:	3304      	adds	r3, #4
   1c5c4:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1c5c6:	429a      	cmp	r2, r3
   1c5c8:	d90d      	bls.n	1c5e6 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1c5ca:	1dfb      	adds	r3, r7, #7
   1c5cc:	781b      	ldrb	r3, [r3, #0]
   1c5ce:	0018      	movs	r0, r3
   1c5d0:	4b2d      	ldr	r3, [pc, #180]	; (1c688 <prvTraceGetObjectHandle+0x194>)
   1c5d2:	4798      	blx	r3
   1c5d4:	0003      	movs	r3, r0
   1c5d6:	0018      	movs	r0, r3
   1c5d8:	4b26      	ldr	r3, [pc, #152]	; (1c674 <prvTraceGetObjectHandle+0x180>)
   1c5da:	4798      	blx	r3
		handle = 0;
   1c5dc:	231f      	movs	r3, #31
   1c5de:	18fb      	adds	r3, r7, r3
   1c5e0:	2200      	movs	r2, #0
   1c5e2:	701a      	strb	r2, [r3, #0]
   1c5e4:	e031      	b.n	1c64a <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1c5e6:	1dfb      	adds	r3, r7, #7
   1c5e8:	781b      	ldrb	r3, [r3, #0]
   1c5ea:	4a25      	ldr	r2, [pc, #148]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c5ec:	0059      	lsls	r1, r3, #1
   1c5ee:	5a8a      	ldrh	r2, [r1, r2]
   1c5f0:	3201      	adds	r2, #1
   1c5f2:	b291      	uxth	r1, r2
   1c5f4:	4a22      	ldr	r2, [pc, #136]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c5f6:	005b      	lsls	r3, r3, #1
   1c5f8:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1c5fa:	1dfb      	adds	r3, r7, #7
   1c5fc:	781a      	ldrb	r2, [r3, #0]
   1c5fe:	4b20      	ldr	r3, [pc, #128]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c600:	0052      	lsls	r2, r2, #1
   1c602:	5ad3      	ldrh	r3, [r2, r3]
   1c604:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1c606:	1dfb      	adds	r3, r7, #7
   1c608:	781b      	ldrb	r3, [r3, #0]
   1c60a:	4a1d      	ldr	r2, [pc, #116]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c60c:	3308      	adds	r3, #8
   1c60e:	005b      	lsls	r3, r3, #1
   1c610:	18d3      	adds	r3, r2, r3
   1c612:	3302      	adds	r3, #2
   1c614:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1c616:	1acb      	subs	r3, r1, r3
   1c618:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1c61a:	1dfb      	adds	r3, r7, #7
   1c61c:	781b      	ldrb	r3, [r3, #0]
   1c61e:	4a18      	ldr	r2, [pc, #96]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c620:	3318      	adds	r3, #24
   1c622:	005b      	lsls	r3, r3, #1
   1c624:	18d3      	adds	r3, r2, r3
   1c626:	3306      	adds	r3, #6
   1c628:	881b      	ldrh	r3, [r3, #0]
   1c62a:	001a      	movs	r2, r3
		if (hndCount >
   1c62c:	697b      	ldr	r3, [r7, #20]
   1c62e:	429a      	cmp	r2, r3
   1c630:	da0b      	bge.n	1c64a <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1c632:	1dfb      	adds	r3, r7, #7
   1c634:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1c636:	697a      	ldr	r2, [r7, #20]
   1c638:	b2d2      	uxtb	r2, r2
   1c63a:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1c63c:	4a10      	ldr	r2, [pc, #64]	; (1c680 <prvTraceGetObjectHandle+0x18c>)
   1c63e:	3318      	adds	r3, #24
   1c640:	005b      	lsls	r3, r3, #1
   1c642:	18d3      	adds	r3, r2, r3
   1c644:	3306      	adds	r3, #6
   1c646:	1c0a      	adds	r2, r1, #0
   1c648:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1c64a:	4b0c      	ldr	r3, [pc, #48]	; (1c67c <prvTraceGetObjectHandle+0x188>)
   1c64c:	681b      	ldr	r3, [r3, #0]
   1c64e:	1e5a      	subs	r2, r3, #1
   1c650:	4b0a      	ldr	r3, [pc, #40]	; (1c67c <prvTraceGetObjectHandle+0x188>)
   1c652:	601a      	str	r2, [r3, #0]
   1c654:	69bb      	ldr	r3, [r7, #24]
   1c656:	60bb      	str	r3, [r7, #8]
   1c658:	68bb      	ldr	r3, [r7, #8]
   1c65a:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1c65e:	231f      	movs	r3, #31
   1c660:	18fb      	adds	r3, r7, r3
   1c662:	781b      	ldrb	r3, [r3, #0]
}
   1c664:	0018      	movs	r0, r3
   1c666:	46bd      	mov	sp, r7
   1c668:	b008      	add	sp, #32
   1c66a:	bd80      	pop	{r7, pc}
   1c66c:	20000d14 	.word	0x20000d14
   1c670:	0003b7fc 	.word	0x0003b7fc
   1c674:	0001c811 	.word	0x0001c811
   1c678:	0003c3dc 	.word	0x0003c3dc
   1c67c:	20000c6c 	.word	0x20000c6c
   1c680:	20000c84 	.word	0x20000c84
   1c684:	20000d18 	.word	0x20000d18
   1c688:	0001b531 	.word	0x0001b531

0001c68c <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1c68c:	b590      	push	{r4, r7, lr}
   1c68e:	b085      	sub	sp, #20
   1c690:	af00      	add	r7, sp, #0
   1c692:	0002      	movs	r2, r0
   1c694:	1dfb      	adds	r3, r7, #7
   1c696:	701a      	strb	r2, [r3, #0]
   1c698:	1dbb      	adds	r3, r7, #6
   1c69a:	1c0a      	adds	r2, r1, #0
   1c69c:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1c69e:	230e      	movs	r3, #14
   1c6a0:	18fc      	adds	r4, r7, r3
   1c6a2:	1dfb      	adds	r3, r7, #7
   1c6a4:	781a      	ldrb	r2, [r3, #0]
   1c6a6:	1dbb      	adds	r3, r7, #6
   1c6a8:	781b      	ldrb	r3, [r3, #0]
   1c6aa:	0011      	movs	r1, r2
   1c6ac:	0018      	movs	r0, r3
   1c6ae:	4b09      	ldr	r3, [pc, #36]	; (1c6d4 <prvMarkObjectAsUsed+0x48>)
   1c6b0:	4798      	blx	r3
   1c6b2:	0003      	movs	r3, r0
   1c6b4:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1c6b6:	4b08      	ldr	r3, [pc, #32]	; (1c6d8 <prvMarkObjectAsUsed+0x4c>)
   1c6b8:	681a      	ldr	r2, [r3, #0]
   1c6ba:	230e      	movs	r3, #14
   1c6bc:	18fb      	adds	r3, r7, r3
   1c6be:	881b      	ldrh	r3, [r3, #0]
   1c6c0:	219c      	movs	r1, #156	; 0x9c
   1c6c2:	18d3      	adds	r3, r2, r3
   1c6c4:	185b      	adds	r3, r3, r1
   1c6c6:	2201      	movs	r2, #1
   1c6c8:	701a      	strb	r2, [r3, #0]
}
   1c6ca:	46c0      	nop			; (mov r8, r8)
   1c6cc:	46bd      	mov	sp, r7
   1c6ce:	b005      	add	sp, #20
   1c6d0:	bd90      	pop	{r4, r7, pc}
   1c6d2:	46c0      	nop			; (mov r8, r8)
   1c6d4:	0001c41d 	.word	0x0001c41d
   1c6d8:	20000d14 	.word	0x20000d14

0001c6dc <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1c6dc:	b580      	push	{r7, lr}
   1c6de:	b086      	sub	sp, #24
   1c6e0:	af00      	add	r7, sp, #0
   1c6e2:	60f8      	str	r0, [r7, #12]
   1c6e4:	60b9      	str	r1, [r7, #8]
   1c6e6:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1c6e8:	2300      	movs	r3, #0
   1c6ea:	617b      	str	r3, [r7, #20]
   1c6ec:	e010      	b.n	1c710 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1c6ee:	68fa      	ldr	r2, [r7, #12]
   1c6f0:	697b      	ldr	r3, [r7, #20]
   1c6f2:	18d3      	adds	r3, r2, r3
   1c6f4:	68b9      	ldr	r1, [r7, #8]
   1c6f6:	697a      	ldr	r2, [r7, #20]
   1c6f8:	188a      	adds	r2, r1, r2
   1c6fa:	7812      	ldrb	r2, [r2, #0]
   1c6fc:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1c6fe:	68ba      	ldr	r2, [r7, #8]
   1c700:	697b      	ldr	r3, [r7, #20]
   1c702:	18d3      	adds	r3, r2, r3
   1c704:	781b      	ldrb	r3, [r3, #0]
   1c706:	2b00      	cmp	r3, #0
   1c708:	d007      	beq.n	1c71a <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1c70a:	697b      	ldr	r3, [r7, #20]
   1c70c:	3301      	adds	r3, #1
   1c70e:	617b      	str	r3, [r7, #20]
   1c710:	697a      	ldr	r2, [r7, #20]
   1c712:	687b      	ldr	r3, [r7, #4]
   1c714:	429a      	cmp	r2, r3
   1c716:	d3ea      	bcc.n	1c6ee <prvStrncpy+0x12>
			break;
	}
}
   1c718:	e000      	b.n	1c71c <prvStrncpy+0x40>
			break;
   1c71a:	46c0      	nop			; (mov r8, r8)
}
   1c71c:	46c0      	nop			; (mov r8, r8)
   1c71e:	46bd      	mov	sp, r7
   1c720:	b006      	add	sp, #24
   1c722:	bd80      	pop	{r7, pc}

0001c724 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1c724:	b580      	push	{r7, lr}
   1c726:	b082      	sub	sp, #8
   1c728:	af00      	add	r7, sp, #0
   1c72a:	603a      	str	r2, [r7, #0]
   1c72c:	1dfb      	adds	r3, r7, #7
   1c72e:	1c02      	adds	r2, r0, #0
   1c730:	701a      	strb	r2, [r3, #0]
   1c732:	1dbb      	adds	r3, r7, #6
   1c734:	1c0a      	adds	r2, r1, #0
   1c736:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1c738:	683b      	ldr	r3, [r7, #0]
   1c73a:	2b00      	cmp	r3, #0
   1c73c:	d104      	bne.n	1c748 <prvTraceSetObjectName+0x24>
   1c73e:	4b2a      	ldr	r3, [pc, #168]	; (1c7e8 <prvTraceSetObjectName+0xc4>)
   1c740:	0018      	movs	r0, r3
   1c742:	4b2a      	ldr	r3, [pc, #168]	; (1c7ec <prvTraceSetObjectName+0xc8>)
   1c744:	4798      	blx	r3
   1c746:	e04b      	b.n	1c7e0 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1c748:	1dfb      	adds	r3, r7, #7
   1c74a:	781b      	ldrb	r3, [r3, #0]
   1c74c:	2b08      	cmp	r3, #8
   1c74e:	d904      	bls.n	1c75a <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1c750:	4b27      	ldr	r3, [pc, #156]	; (1c7f0 <prvTraceSetObjectName+0xcc>)
   1c752:	0018      	movs	r0, r3
   1c754:	4b25      	ldr	r3, [pc, #148]	; (1c7ec <prvTraceSetObjectName+0xc8>)
   1c756:	4798      	blx	r3
		return;
   1c758:	e042      	b.n	1c7e0 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1c75a:	1dbb      	adds	r3, r7, #6
   1c75c:	781b      	ldrb	r3, [r3, #0]
   1c75e:	2b00      	cmp	r3, #0
   1c760:	d104      	bne.n	1c76c <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1c762:	4b24      	ldr	r3, [pc, #144]	; (1c7f4 <prvTraceSetObjectName+0xd0>)
   1c764:	0018      	movs	r0, r3
   1c766:	4b21      	ldr	r3, [pc, #132]	; (1c7ec <prvTraceSetObjectName+0xc8>)
   1c768:	4798      	blx	r3
		return;
   1c76a:	e039      	b.n	1c7e0 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1c76c:	4b22      	ldr	r3, [pc, #136]	; (1c7f8 <prvTraceSetObjectName+0xd4>)
   1c76e:	681a      	ldr	r2, [r3, #0]
   1c770:	1dfb      	adds	r3, r7, #7
   1c772:	781b      	ldrb	r3, [r3, #0]
   1c774:	2164      	movs	r1, #100	; 0x64
   1c776:	18d3      	adds	r3, r2, r3
   1c778:	185b      	adds	r3, r3, r1
   1c77a:	781b      	ldrb	r3, [r3, #0]
   1c77c:	1dba      	adds	r2, r7, #6
   1c77e:	7812      	ldrb	r2, [r2, #0]
   1c780:	429a      	cmp	r2, r3
   1c782:	d909      	bls.n	1c798 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1c784:	1dfb      	adds	r3, r7, #7
   1c786:	781b      	ldrb	r3, [r3, #0]
   1c788:	0018      	movs	r0, r3
   1c78a:	4b1c      	ldr	r3, [pc, #112]	; (1c7fc <prvTraceSetObjectName+0xd8>)
   1c78c:	4798      	blx	r3
   1c78e:	0003      	movs	r3, r0
   1c790:	0018      	movs	r0, r3
   1c792:	4b16      	ldr	r3, [pc, #88]	; (1c7ec <prvTraceSetObjectName+0xc8>)
   1c794:	4798      	blx	r3
   1c796:	e023      	b.n	1c7e0 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1c798:	1dfb      	adds	r3, r7, #7
   1c79a:	781a      	ldrb	r2, [r3, #0]
   1c79c:	1dbb      	adds	r3, r7, #6
   1c79e:	781b      	ldrb	r3, [r3, #0]
   1c7a0:	0011      	movs	r1, r2
   1c7a2:	0018      	movs	r0, r3
   1c7a4:	4b16      	ldr	r3, [pc, #88]	; (1c800 <prvTraceSetObjectName+0xdc>)
   1c7a6:	4798      	blx	r3
   1c7a8:	0003      	movs	r3, r0
   1c7aa:	001a      	movs	r2, r3
   1c7ac:	4b15      	ldr	r3, [pc, #84]	; (1c804 <prvTraceSetObjectName+0xe0>)
   1c7ae:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1c7b0:	4b15      	ldr	r3, [pc, #84]	; (1c808 <prvTraceSetObjectName+0xe4>)
   1c7b2:	681b      	ldr	r3, [r3, #0]
   1c7b4:	2b00      	cmp	r3, #0
   1c7b6:	d113      	bne.n	1c7e0 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1c7b8:	4b0f      	ldr	r3, [pc, #60]	; (1c7f8 <prvTraceSetObjectName+0xd4>)
   1c7ba:	681a      	ldr	r2, [r3, #0]
   1c7bc:	4b11      	ldr	r3, [pc, #68]	; (1c804 <prvTraceSetObjectName+0xe0>)
   1c7be:	881b      	ldrh	r3, [r3, #0]
   1c7c0:	3398      	adds	r3, #152	; 0x98
   1c7c2:	18d3      	adds	r3, r2, r3
   1c7c4:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1c7c6:	4b0c      	ldr	r3, [pc, #48]	; (1c7f8 <prvTraceSetObjectName+0xd4>)
   1c7c8:	681a      	ldr	r2, [r3, #0]
   1c7ca:	1dfb      	adds	r3, r7, #7
   1c7cc:	781b      	ldrb	r3, [r3, #0]
   1c7ce:	2170      	movs	r1, #112	; 0x70
   1c7d0:	18d3      	adds	r3, r2, r3
   1c7d2:	185b      	adds	r3, r3, r1
   1c7d4:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1c7d6:	001a      	movs	r2, r3
   1c7d8:	683b      	ldr	r3, [r7, #0]
   1c7da:	0019      	movs	r1, r3
   1c7dc:	4b0b      	ldr	r3, [pc, #44]	; (1c80c <prvTraceSetObjectName+0xe8>)
   1c7de:	4798      	blx	r3
		}
	}
}
   1c7e0:	46bd      	mov	sp, r7
   1c7e2:	b002      	add	sp, #8
   1c7e4:	bd80      	pop	{r7, pc}
   1c7e6:	46c0      	nop			; (mov r8, r8)
   1c7e8:	0003c4e0 	.word	0x0003c4e0
   1c7ec:	0001c811 	.word	0x0001c811
   1c7f0:	0003c514 	.word	0x0003c514
   1c7f4:	0003c544 	.word	0x0003c544
   1c7f8:	20000d14 	.word	0x20000d14
   1c7fc:	0001b531 	.word	0x0001b531
   1c800:	0001c41d 	.word	0x0001c41d
   1c804:	20000d1c 	.word	0x20000d1c
   1c808:	20000c74 	.word	0x20000c74
   1c80c:	0001c6dd 	.word	0x0001c6dd

0001c810 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1c810:	b580      	push	{r7, lr}
   1c812:	b082      	sub	sp, #8
   1c814:	af00      	add	r7, sp, #0
   1c816:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1c818:	4b11      	ldr	r3, [pc, #68]	; (1c860 <prvTraceError+0x50>)
   1c81a:	681b      	ldr	r3, [r3, #0]
   1c81c:	2b00      	cmp	r3, #0
   1c81e:	d001      	beq.n	1c824 <prvTraceError+0x14>
	{
		vTraceStop();
   1c820:	4b10      	ldr	r3, [pc, #64]	; (1c864 <prvTraceError+0x54>)
   1c822:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1c824:	4b10      	ldr	r3, [pc, #64]	; (1c868 <prvTraceError+0x58>)
   1c826:	681b      	ldr	r3, [r3, #0]
   1c828:	2b00      	cmp	r3, #0
   1c82a:	d115      	bne.n	1c858 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1c82c:	4b0e      	ldr	r3, [pc, #56]	; (1c868 <prvTraceError+0x58>)
   1c82e:	687a      	ldr	r2, [r7, #4]
   1c830:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1c832:	4b0b      	ldr	r3, [pc, #44]	; (1c860 <prvTraceError+0x50>)
   1c834:	681b      	ldr	r3, [r3, #0]
   1c836:	2b00      	cmp	r3, #0
   1c838:	d00e      	beq.n	1c858 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1c83a:	4b09      	ldr	r3, [pc, #36]	; (1c860 <prvTraceError+0x50>)
   1c83c:	681b      	ldr	r3, [r3, #0]
   1c83e:	4a0b      	ldr	r2, [pc, #44]	; (1c86c <prvTraceError+0x5c>)
   1c840:	1898      	adds	r0, r3, r2
   1c842:	4b09      	ldr	r3, [pc, #36]	; (1c868 <prvTraceError+0x58>)
   1c844:	681b      	ldr	r3, [r3, #0]
   1c846:	2250      	movs	r2, #80	; 0x50
   1c848:	0019      	movs	r1, r3
   1c84a:	4b09      	ldr	r3, [pc, #36]	; (1c870 <prvTraceError+0x60>)
   1c84c:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1c84e:	4b04      	ldr	r3, [pc, #16]	; (1c860 <prvTraceError+0x50>)
   1c850:	681b      	ldr	r3, [r3, #0]
   1c852:	4a08      	ldr	r2, [pc, #32]	; (1c874 <prvTraceError+0x64>)
   1c854:	2101      	movs	r1, #1
   1c856:	5099      	str	r1, [r3, r2]
		}
	}
}
   1c858:	46c0      	nop			; (mov r8, r8)
   1c85a:	46bd      	mov	sp, r7
   1c85c:	b002      	add	sp, #8
   1c85e:	bd80      	pop	{r7, pc}
   1c860:	20000d14 	.word	0x20000d14
   1c864:	0001b6d5 	.word	0x0001b6d5
   1c868:	20000c74 	.word	0x20000c74
   1c86c:	000006bc 	.word	0x000006bc
   1c870:	0001c6dd 	.word	0x0001c6dd
   1c874:	000006b4 	.word	0x000006b4

0001c878 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1c878:	b580      	push	{r7, lr}
   1c87a:	b086      	sub	sp, #24
   1c87c:	af00      	add	r7, sp, #0
   1c87e:	0002      	movs	r2, r0
   1c880:	1dfb      	adds	r3, r7, #7
   1c882:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1c884:	2300      	movs	r3, #0
   1c886:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1c888:	2300      	movs	r3, #0
   1c88a:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1c88c:	1dfb      	adds	r3, r7, #7
   1c88e:	781b      	ldrb	r3, [r3, #0]
   1c890:	2b00      	cmp	r3, #0
   1c892:	d000      	beq.n	1c896 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1c894:	e089      	b.n	1c9aa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1c896:	4b49      	ldr	r3, [pc, #292]	; (1c9bc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1c898:	0018      	movs	r0, r3
   1c89a:	4b49      	ldr	r3, [pc, #292]	; (1c9c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1c89c:	4798      	blx	r3
   1c89e:	e08a      	b.n	1c9b6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1c8a0:	4b48      	ldr	r3, [pc, #288]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c8a2:	681b      	ldr	r3, [r3, #0]
   1c8a4:	69da      	ldr	r2, [r3, #28]
   1c8a6:	697b      	ldr	r3, [r7, #20]
   1c8a8:	18d3      	adds	r3, r2, r3
   1c8aa:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1c8ac:	4b45      	ldr	r3, [pc, #276]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c8ae:	6819      	ldr	r1, [r3, #0]
   1c8b0:	693b      	ldr	r3, [r7, #16]
   1c8b2:	009a      	lsls	r2, r3, #2
   1c8b4:	23e2      	movs	r3, #226	; 0xe2
   1c8b6:	00db      	lsls	r3, r3, #3
   1c8b8:	188a      	adds	r2, r1, r2
   1c8ba:	18d3      	adds	r3, r2, r3
   1c8bc:	781b      	ldrb	r3, [r3, #0]
   1c8be:	2b98      	cmp	r3, #152	; 0x98
   1c8c0:	d934      	bls.n	1c92c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1c8c2:	4b40      	ldr	r3, [pc, #256]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c8c4:	6819      	ldr	r1, [r3, #0]
   1c8c6:	693b      	ldr	r3, [r7, #16]
   1c8c8:	009a      	lsls	r2, r3, #2
   1c8ca:	23e2      	movs	r3, #226	; 0xe2
   1c8cc:	00db      	lsls	r3, r3, #3
   1c8ce:	188a      	adds	r2, r1, r2
   1c8d0:	18d3      	adds	r3, r2, r3
   1c8d2:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1c8d4:	2ba7      	cmp	r3, #167	; 0xa7
   1c8d6:	d829      	bhi.n	1c92c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1c8d8:	4b3a      	ldr	r3, [pc, #232]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c8da:	6819      	ldr	r1, [r3, #0]
   1c8dc:	693b      	ldr	r3, [r7, #16]
   1c8de:	009a      	lsls	r2, r3, #2
   1c8e0:	23e2      	movs	r3, #226	; 0xe2
   1c8e2:	00db      	lsls	r3, r3, #3
   1c8e4:	188a      	adds	r2, r1, r2
   1c8e6:	18d3      	adds	r3, r2, r3
   1c8e8:	781a      	ldrb	r2, [r3, #0]
   1c8ea:	230f      	movs	r3, #15
   1c8ec:	18fb      	adds	r3, r7, r3
   1c8ee:	3268      	adds	r2, #104	; 0x68
   1c8f0:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1c8f2:	230f      	movs	r3, #15
   1c8f4:	18fb      	adds	r3, r7, r3
   1c8f6:	781a      	ldrb	r2, [r3, #0]
   1c8f8:	693b      	ldr	r3, [r7, #16]
   1c8fa:	18d2      	adds	r2, r2, r3
   1c8fc:	4b31      	ldr	r3, [pc, #196]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c8fe:	681b      	ldr	r3, [r3, #0]
   1c900:	699b      	ldr	r3, [r3, #24]
   1c902:	429a      	cmp	r2, r3
   1c904:	d24d      	bcs.n	1c9a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1c906:	4b2f      	ldr	r3, [pc, #188]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c908:	681a      	ldr	r2, [r3, #0]
   1c90a:	693b      	ldr	r3, [r7, #16]
   1c90c:	009b      	lsls	r3, r3, #2
   1c90e:	21e2      	movs	r1, #226	; 0xe2
   1c910:	00c9      	lsls	r1, r1, #3
   1c912:	468c      	mov	ip, r1
   1c914:	4463      	add	r3, ip
   1c916:	18d0      	adds	r0, r2, r3
   1c918:	230f      	movs	r3, #15
   1c91a:	18fb      	adds	r3, r7, r3
   1c91c:	781b      	ldrb	r3, [r3, #0]
   1c91e:	3301      	adds	r3, #1
   1c920:	009b      	lsls	r3, r3, #2
   1c922:	001a      	movs	r2, r3
   1c924:	2100      	movs	r1, #0
   1c926:	4b28      	ldr	r3, [pc, #160]	; (1c9c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1c928:	4798      	blx	r3
		{
   1c92a:	e03a      	b.n	1c9a2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1c92c:	4b25      	ldr	r3, [pc, #148]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c92e:	6819      	ldr	r1, [r3, #0]
   1c930:	693b      	ldr	r3, [r7, #16]
   1c932:	009a      	lsls	r2, r3, #2
   1c934:	23e2      	movs	r3, #226	; 0xe2
   1c936:	00db      	lsls	r3, r3, #3
   1c938:	188a      	adds	r2, r1, r2
   1c93a:	18d3      	adds	r3, r2, r3
   1c93c:	781b      	ldrb	r3, [r3, #0]
   1c93e:	2b01      	cmp	r3, #1
   1c940:	d130      	bne.n	1c9a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1c942:	693b      	ldr	r3, [r7, #16]
   1c944:	1c5a      	adds	r2, r3, #1
   1c946:	4b1f      	ldr	r3, [pc, #124]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c948:	681b      	ldr	r3, [r3, #0]
   1c94a:	699b      	ldr	r3, [r3, #24]
   1c94c:	429a      	cmp	r2, r3
   1c94e:	d20e      	bcs.n	1c96e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1c950:	4b1c      	ldr	r3, [pc, #112]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c952:	681a      	ldr	r2, [r3, #0]
   1c954:	693b      	ldr	r3, [r7, #16]
   1c956:	009b      	lsls	r3, r3, #2
   1c958:	21e2      	movs	r1, #226	; 0xe2
   1c95a:	00c9      	lsls	r1, r1, #3
   1c95c:	468c      	mov	ip, r1
   1c95e:	4463      	add	r3, ip
   1c960:	18d3      	adds	r3, r2, r3
   1c962:	2208      	movs	r2, #8
   1c964:	2100      	movs	r1, #0
   1c966:	0018      	movs	r0, r3
   1c968:	4b17      	ldr	r3, [pc, #92]	; (1c9c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1c96a:	4798      	blx	r3
   1c96c:	e01a      	b.n	1c9a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1c96e:	4b15      	ldr	r3, [pc, #84]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c970:	681b      	ldr	r3, [r3, #0]
   1c972:	22e2      	movs	r2, #226	; 0xe2
   1c974:	00d2      	lsls	r2, r2, #3
   1c976:	4694      	mov	ip, r2
   1c978:	4463      	add	r3, ip
   1c97a:	2204      	movs	r2, #4
   1c97c:	2100      	movs	r1, #0
   1c97e:	0018      	movs	r0, r3
   1c980:	4b11      	ldr	r3, [pc, #68]	; (1c9c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1c982:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1c984:	4b0f      	ldr	r3, [pc, #60]	; (1c9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1c986:	681a      	ldr	r2, [r3, #0]
   1c988:	693b      	ldr	r3, [r7, #16]
   1c98a:	009b      	lsls	r3, r3, #2
   1c98c:	21e2      	movs	r1, #226	; 0xe2
   1c98e:	00c9      	lsls	r1, r1, #3
   1c990:	468c      	mov	ip, r1
   1c992:	4463      	add	r3, ip
   1c994:	18d3      	adds	r3, r2, r3
   1c996:	2204      	movs	r2, #4
   1c998:	2100      	movs	r1, #0
   1c99a:	0018      	movs	r0, r3
   1c99c:	4b0a      	ldr	r3, [pc, #40]	; (1c9c8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1c99e:	4798      	blx	r3
   1c9a0:	e000      	b.n	1c9a4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1c9a2:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1c9a4:	697b      	ldr	r3, [r7, #20]
   1c9a6:	3301      	adds	r3, #1
   1c9a8:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1c9aa:	1dfb      	adds	r3, r7, #7
   1c9ac:	781a      	ldrb	r2, [r3, #0]
   1c9ae:	697b      	ldr	r3, [r7, #20]
   1c9b0:	429a      	cmp	r2, r3
   1c9b2:	d900      	bls.n	1c9b6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1c9b4:	e774      	b.n	1c8a0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1c9b6:	46bd      	mov	sp, r7
   1c9b8:	b006      	add	sp, #24
   1c9ba:	bd80      	pop	{r7, pc}
   1c9bc:	0003c5a4 	.word	0x0003c5a4
   1c9c0:	0001c811 	.word	0x0001c811
   1c9c4:	20000d14 	.word	0x20000d14
   1c9c8:	00038507 	.word	0x00038507

0001c9cc <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1c9cc:	b580      	push	{r7, lr}
   1c9ce:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1c9d0:	4b12      	ldr	r3, [pc, #72]	; (1ca1c <prvTraceUpdateCounters+0x50>)
   1c9d2:	681b      	ldr	r3, [r3, #0]
   1c9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c9d6:	2b00      	cmp	r3, #0
   1c9d8:	d01c      	beq.n	1ca14 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1c9da:	4b10      	ldr	r3, [pc, #64]	; (1ca1c <prvTraceUpdateCounters+0x50>)
   1c9dc:	681b      	ldr	r3, [r3, #0]
   1c9de:	695a      	ldr	r2, [r3, #20]
   1c9e0:	3201      	adds	r2, #1
   1c9e2:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1c9e4:	4b0d      	ldr	r3, [pc, #52]	; (1ca1c <prvTraceUpdateCounters+0x50>)
   1c9e6:	681b      	ldr	r3, [r3, #0]
   1c9e8:	69da      	ldr	r2, [r3, #28]
   1c9ea:	3201      	adds	r2, #1
   1c9ec:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1c9ee:	4b0b      	ldr	r3, [pc, #44]	; (1ca1c <prvTraceUpdateCounters+0x50>)
   1c9f0:	681b      	ldr	r3, [r3, #0]
   1c9f2:	69da      	ldr	r2, [r3, #28]
   1c9f4:	232c      	movs	r3, #44	; 0x2c
   1c9f6:	33ff      	adds	r3, #255	; 0xff
   1c9f8:	429a      	cmp	r2, r3
   1c9fa:	d907      	bls.n	1ca0c <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1c9fc:	4b07      	ldr	r3, [pc, #28]	; (1ca1c <prvTraceUpdateCounters+0x50>)
   1c9fe:	681b      	ldr	r3, [r3, #0]
   1ca00:	2201      	movs	r2, #1
   1ca02:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1ca04:	4b05      	ldr	r3, [pc, #20]	; (1ca1c <prvTraceUpdateCounters+0x50>)
   1ca06:	681b      	ldr	r3, [r3, #0]
   1ca08:	2200      	movs	r2, #0
   1ca0a:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1ca0c:	2001      	movs	r0, #1
   1ca0e:	4b04      	ldr	r3, [pc, #16]	; (1ca20 <prvTraceUpdateCounters+0x54>)
   1ca10:	4798      	blx	r3
   1ca12:	e000      	b.n	1ca16 <prvTraceUpdateCounters+0x4a>
		return;
   1ca14:	46c0      	nop			; (mov r8, r8)
#endif
}
   1ca16:	46bd      	mov	sp, r7
   1ca18:	bd80      	pop	{r7, pc}
   1ca1a:	46c0      	nop			; (mov r8, r8)
   1ca1c:	20000d14 	.word	0x20000d14
   1ca20:	0001c879 	.word	0x0001c879

0001ca24 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1ca24:	b5b0      	push	{r4, r5, r7, lr}
   1ca26:	b086      	sub	sp, #24
   1ca28:	af00      	add	r7, sp, #0
   1ca2a:	0002      	movs	r2, r0
   1ca2c:	1dbb      	adds	r3, r7, #6
   1ca2e:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1ca30:	2300      	movs	r3, #0
   1ca32:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1ca34:	2300      	movs	r3, #0
   1ca36:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1ca38:	2300      	movs	r3, #0
   1ca3a:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1ca3c:	1dbb      	adds	r3, r7, #6
   1ca3e:	881b      	ldrh	r3, [r3, #0]
   1ca40:	2bff      	cmp	r3, #255	; 0xff
   1ca42:	d00a      	beq.n	1ca5a <prvTraceGetDTS+0x36>
   1ca44:	1dbb      	adds	r3, r7, #6
   1ca46:	881b      	ldrh	r3, [r3, #0]
   1ca48:	4a60      	ldr	r2, [pc, #384]	; (1cbcc <prvTraceGetDTS+0x1a8>)
   1ca4a:	4293      	cmp	r3, r2
   1ca4c:	d005      	beq.n	1ca5a <prvTraceGetDTS+0x36>
   1ca4e:	4b60      	ldr	r3, [pc, #384]	; (1cbd0 <prvTraceGetDTS+0x1ac>)
   1ca50:	0018      	movs	r0, r3
   1ca52:	4b60      	ldr	r3, [pc, #384]	; (1cbd4 <prvTraceGetDTS+0x1b0>)
   1ca54:	4798      	blx	r3
   1ca56:	2300      	movs	r3, #0
   1ca58:	e0b3      	b.n	1cbc2 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1ca5a:	4b5f      	ldr	r3, [pc, #380]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1ca5c:	681b      	ldr	r3, [r3, #0]
   1ca5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ca60:	2b00      	cmp	r3, #0
   1ca62:	d118      	bne.n	1ca96 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1ca64:	4b5d      	ldr	r3, [pc, #372]	; (1cbdc <prvTraceGetDTS+0x1b8>)
   1ca66:	681b      	ldr	r3, [r3, #0]
   1ca68:	2b00      	cmp	r3, #0
   1ca6a:	d006      	beq.n	1ca7a <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1ca6c:	4b5a      	ldr	r3, [pc, #360]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1ca6e:	681b      	ldr	r3, [r3, #0]
   1ca70:	4a5a      	ldr	r2, [pc, #360]	; (1cbdc <prvTraceGetDTS+0x1b8>)
   1ca72:	6812      	ldr	r2, [r2, #0]
   1ca74:	0892      	lsrs	r2, r2, #2
   1ca76:	625a      	str	r2, [r3, #36]	; 0x24
   1ca78:	e00d      	b.n	1ca96 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1ca7a:	4b59      	ldr	r3, [pc, #356]	; (1cbe0 <prvTraceGetDTS+0x1bc>)
   1ca7c:	681a      	ldr	r2, [r3, #0]
   1ca7e:	4b59      	ldr	r3, [pc, #356]	; (1cbe4 <prvTraceGetDTS+0x1c0>)
   1ca80:	681b      	ldr	r3, [r3, #0]
   1ca82:	429a      	cmp	r2, r3
   1ca84:	d007      	beq.n	1ca96 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1ca86:	4b54      	ldr	r3, [pc, #336]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1ca88:	681c      	ldr	r4, [r3, #0]
   1ca8a:	2000      	movs	r0, #0
   1ca8c:	4b56      	ldr	r3, [pc, #344]	; (1cbe8 <prvTraceGetDTS+0x1c4>)
   1ca8e:	4798      	blx	r3
   1ca90:	0003      	movs	r3, r0
   1ca92:	089b      	lsrs	r3, r3, #2
   1ca94:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1ca96:	230c      	movs	r3, #12
   1ca98:	18fb      	adds	r3, r7, r3
   1ca9a:	0018      	movs	r0, r3
   1ca9c:	4b53      	ldr	r3, [pc, #332]	; (1cbec <prvTraceGetDTS+0x1c8>)
   1ca9e:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1caa0:	68fa      	ldr	r2, [r7, #12]
   1caa2:	4b53      	ldr	r3, [pc, #332]	; (1cbf0 <prvTraceGetDTS+0x1cc>)
   1caa4:	681b      	ldr	r3, [r3, #0]
   1caa6:	1ad3      	subs	r3, r2, r3
   1caa8:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1caaa:	68fa      	ldr	r2, [r7, #12]
   1caac:	4b50      	ldr	r3, [pc, #320]	; (1cbf0 <prvTraceGetDTS+0x1cc>)
   1caae:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1cab0:	4b49      	ldr	r3, [pc, #292]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cab2:	681b      	ldr	r3, [r3, #0]
   1cab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cab6:	2b00      	cmp	r3, #0
   1cab8:	d044      	beq.n	1cb44 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1caba:	4b47      	ldr	r3, [pc, #284]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cabc:	681b      	ldr	r3, [r3, #0]
   1cabe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1cac0:	693b      	ldr	r3, [r7, #16]
   1cac2:	429a      	cmp	r2, r3
   1cac4:	d21e      	bcs.n	1cb04 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1cac6:	4b44      	ldr	r3, [pc, #272]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cac8:	681c      	ldr	r4, [r3, #0]
   1caca:	4b43      	ldr	r3, [pc, #268]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cacc:	681b      	ldr	r3, [r3, #0]
   1cace:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1cad0:	4b41      	ldr	r3, [pc, #260]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cad2:	681b      	ldr	r3, [r3, #0]
   1cad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1cad6:	4b47      	ldr	r3, [pc, #284]	; (1cbf4 <prvTraceGetDTS+0x1d0>)
   1cad8:	0011      	movs	r1, r2
   1cada:	6938      	ldr	r0, [r7, #16]
   1cadc:	4798      	blx	r3
   1cade:	0003      	movs	r3, r0
   1cae0:	18eb      	adds	r3, r5, r3
   1cae2:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1cae4:	4b3c      	ldr	r3, [pc, #240]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cae6:	681c      	ldr	r4, [r3, #0]
   1cae8:	4b3b      	ldr	r3, [pc, #236]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1caea:	681b      	ldr	r3, [r3, #0]
   1caec:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1caee:	4b3a      	ldr	r3, [pc, #232]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1caf0:	681b      	ldr	r3, [r3, #0]
   1caf2:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1caf4:	693a      	ldr	r2, [r7, #16]
   1caf6:	4b40      	ldr	r3, [pc, #256]	; (1cbf8 <prvTraceGetDTS+0x1d4>)
   1caf8:	0010      	movs	r0, r2
   1cafa:	4798      	blx	r3
   1cafc:	000b      	movs	r3, r1
   1cafe:	18eb      	adds	r3, r5, r3
   1cb00:	62a3      	str	r3, [r4, #40]	; 0x28
   1cb02:	e007      	b.n	1cb14 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1cb04:	4b34      	ldr	r3, [pc, #208]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb06:	681b      	ldr	r3, [r3, #0]
   1cb08:	4a33      	ldr	r2, [pc, #204]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb0a:	6812      	ldr	r2, [r2, #0]
   1cb0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1cb0e:	693a      	ldr	r2, [r7, #16]
   1cb10:	188a      	adds	r2, r1, r2
   1cb12:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1cb14:	4b30      	ldr	r3, [pc, #192]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb16:	681b      	ldr	r3, [r3, #0]
   1cb18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1cb1a:	4b2f      	ldr	r3, [pc, #188]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb1c:	681b      	ldr	r3, [r3, #0]
   1cb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cb20:	429a      	cmp	r2, r3
   1cb22:	d313      	bcc.n	1cb4c <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1cb24:	4b2c      	ldr	r3, [pc, #176]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb26:	681b      	ldr	r3, [r3, #0]
   1cb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb2a:	3201      	adds	r2, #1
   1cb2c:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1cb2e:	4b2a      	ldr	r3, [pc, #168]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb30:	681b      	ldr	r3, [r3, #0]
   1cb32:	4a29      	ldr	r2, [pc, #164]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb34:	6812      	ldr	r2, [r2, #0]
   1cb36:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1cb38:	4a27      	ldr	r2, [pc, #156]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb3a:	6812      	ldr	r2, [r2, #0]
   1cb3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1cb3e:	1a8a      	subs	r2, r1, r2
   1cb40:	629a      	str	r2, [r3, #40]	; 0x28
   1cb42:	e003      	b.n	1cb4c <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1cb44:	4b24      	ldr	r3, [pc, #144]	; (1cbd8 <prvTraceGetDTS+0x1b4>)
   1cb46:	681b      	ldr	r3, [r3, #0]
   1cb48:	68fa      	ldr	r2, [r7, #12]
   1cb4a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1cb4c:	1dbb      	adds	r3, r7, #6
   1cb4e:	881a      	ldrh	r2, [r3, #0]
   1cb50:	693b      	ldr	r3, [r7, #16]
   1cb52:	429a      	cmp	r2, r3
   1cb54:	d22f      	bcs.n	1cbb6 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1cb56:	4b29      	ldr	r3, [pc, #164]	; (1cbfc <prvTraceGetDTS+0x1d8>)
   1cb58:	4798      	blx	r3
   1cb5a:	0003      	movs	r3, r0
   1cb5c:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1cb5e:	697b      	ldr	r3, [r7, #20]
   1cb60:	2b00      	cmp	r3, #0
   1cb62:	d028      	beq.n	1cbb6 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1cb64:	1dbb      	adds	r3, r7, #6
   1cb66:	881b      	ldrh	r3, [r3, #0]
   1cb68:	4a18      	ldr	r2, [pc, #96]	; (1cbcc <prvTraceGetDTS+0x1a8>)
   1cb6a:	4293      	cmp	r3, r2
   1cb6c:	d10b      	bne.n	1cb86 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1cb6e:	697b      	ldr	r3, [r7, #20]
   1cb70:	22a9      	movs	r2, #169	; 0xa9
   1cb72:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1cb74:	693b      	ldr	r3, [r7, #16]
   1cb76:	0c1b      	lsrs	r3, r3, #16
   1cb78:	b29a      	uxth	r2, r3
   1cb7a:	697b      	ldr	r3, [r7, #20]
   1cb7c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1cb7e:	697b      	ldr	r3, [r7, #20]
   1cb80:	2200      	movs	r2, #0
   1cb82:	705a      	strb	r2, [r3, #1]
   1cb84:	e015      	b.n	1cbb2 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1cb86:	1dbb      	adds	r3, r7, #6
   1cb88:	881b      	ldrh	r3, [r3, #0]
   1cb8a:	2bff      	cmp	r3, #255	; 0xff
   1cb8c:	d10d      	bne.n	1cbaa <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1cb8e:	697b      	ldr	r3, [r7, #20]
   1cb90:	22a8      	movs	r2, #168	; 0xa8
   1cb92:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1cb94:	693b      	ldr	r3, [r7, #16]
   1cb96:	0a1b      	lsrs	r3, r3, #8
   1cb98:	b29a      	uxth	r2, r3
   1cb9a:	697b      	ldr	r3, [r7, #20]
   1cb9c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1cb9e:	693b      	ldr	r3, [r7, #16]
   1cba0:	0e1b      	lsrs	r3, r3, #24
   1cba2:	b2da      	uxtb	r2, r3
   1cba4:	697b      	ldr	r3, [r7, #20]
   1cba6:	705a      	strb	r2, [r3, #1]
   1cba8:	e003      	b.n	1cbb2 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1cbaa:	4b15      	ldr	r3, [pc, #84]	; (1cc00 <prvTraceGetDTS+0x1dc>)
   1cbac:	0018      	movs	r0, r3
   1cbae:	4b09      	ldr	r3, [pc, #36]	; (1cbd4 <prvTraceGetDTS+0x1b0>)
   1cbb0:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1cbb2:	4b14      	ldr	r3, [pc, #80]	; (1cc04 <prvTraceGetDTS+0x1e0>)
   1cbb4:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1cbb6:	693b      	ldr	r3, [r7, #16]
   1cbb8:	b29b      	uxth	r3, r3
   1cbba:	1dba      	adds	r2, r7, #6
   1cbbc:	8812      	ldrh	r2, [r2, #0]
   1cbbe:	4013      	ands	r3, r2
   1cbc0:	b29b      	uxth	r3, r3
}
   1cbc2:	0018      	movs	r0, r3
   1cbc4:	46bd      	mov	sp, r7
   1cbc6:	b006      	add	sp, #24
   1cbc8:	bdb0      	pop	{r4, r5, r7, pc}
   1cbca:	46c0      	nop			; (mov r8, r8)
   1cbcc:	0000ffff 	.word	0x0000ffff
   1cbd0:	0003c5fc 	.word	0x0003c5fc
   1cbd4:	0001c811 	.word	0x0001c811
   1cbd8:	20000d14 	.word	0x20000d14
   1cbdc:	20000c70 	.word	0x20000c70
   1cbe0:	e000e018 	.word	0xe000e018
   1cbe4:	200055e0 	.word	0x200055e0
   1cbe8:	0002cd59 	.word	0x0002cd59
   1cbec:	0001cc09 	.word	0x0001cc09
   1cbf0:	20000d20 	.word	0x20000d20
   1cbf4:	000359f1 	.word	0x000359f1
   1cbf8:	00035afd 	.word	0x00035afd
   1cbfc:	0001c3c9 	.word	0x0001c3c9
   1cc00:	0003c63c 	.word	0x0003c63c
   1cc04:	0001c9cd 	.word	0x0001c9cd

0001cc08 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1cc08:	b580      	push	{r7, lr}
   1cc0a:	b084      	sub	sp, #16
   1cc0c:	af00      	add	r7, sp, #0
   1cc0e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1cc10:	2300      	movs	r3, #0
   1cc12:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1cc14:	2300      	movs	r3, #0
   1cc16:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1cc18:	4b2d      	ldr	r3, [pc, #180]	; (1ccd0 <prvTracePortGetTimeStamp+0xc8>)
   1cc1a:	681b      	ldr	r3, [r3, #0]
   1cc1c:	2b01      	cmp	r3, #1
   1cc1e:	d107      	bne.n	1cc30 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1cc20:	687b      	ldr	r3, [r7, #4]
   1cc22:	2b00      	cmp	r3, #0
   1cc24:	d04f      	beq.n	1ccc6 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1cc26:	4b2b      	ldr	r3, [pc, #172]	; (1ccd4 <prvTracePortGetTimeStamp+0xcc>)
   1cc28:	681a      	ldr	r2, [r3, #0]
   1cc2a:	687b      	ldr	r3, [r7, #4]
   1cc2c:	601a      	str	r2, [r3, #0]
		return;
   1cc2e:	e04a      	b.n	1ccc6 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1cc30:	4b29      	ldr	r3, [pc, #164]	; (1ccd8 <prvTracePortGetTimeStamp+0xd0>)
   1cc32:	681a      	ldr	r2, [r3, #0]
   1cc34:	4b29      	ldr	r3, [pc, #164]	; (1ccdc <prvTracePortGetTimeStamp+0xd4>)
   1cc36:	681b      	ldr	r3, [r3, #0]
   1cc38:	1ad3      	subs	r3, r2, r3
   1cc3a:	3301      	adds	r3, #1
   1cc3c:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1cc3e:	4b28      	ldr	r3, [pc, #160]	; (1cce0 <prvTracePortGetTimeStamp+0xd8>)
   1cc40:	681a      	ldr	r2, [r3, #0]
   1cc42:	4b28      	ldr	r3, [pc, #160]	; (1cce4 <prvTracePortGetTimeStamp+0xdc>)
   1cc44:	681b      	ldr	r3, [r3, #0]
   1cc46:	1ad3      	subs	r3, r2, r3
   1cc48:	3b01      	subs	r3, #1
   1cc4a:	2b00      	cmp	r3, #0
   1cc4c:	db03      	blt.n	1cc56 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1cc4e:	4b24      	ldr	r3, [pc, #144]	; (1cce0 <prvTracePortGetTimeStamp+0xd8>)
   1cc50:	681b      	ldr	r3, [r3, #0]
   1cc52:	60fb      	str	r3, [r7, #12]
   1cc54:	e002      	b.n	1cc5c <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1cc56:	4b23      	ldr	r3, [pc, #140]	; (1cce4 <prvTracePortGetTimeStamp+0xdc>)
   1cc58:	681b      	ldr	r3, [r3, #0]
   1cc5a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1cc5c:	4b20      	ldr	r3, [pc, #128]	; (1cce0 <prvTracePortGetTimeStamp+0xd8>)
   1cc5e:	681b      	ldr	r3, [r3, #0]
   1cc60:	68fa      	ldr	r2, [r7, #12]
   1cc62:	429a      	cmp	r2, r3
   1cc64:	d107      	bne.n	1cc76 <prvTracePortGetTimeStamp+0x6e>
   1cc66:	4b20      	ldr	r3, [pc, #128]	; (1cce8 <prvTracePortGetTimeStamp+0xe0>)
   1cc68:	681b      	ldr	r3, [r3, #0]
   1cc6a:	68ba      	ldr	r2, [r7, #8]
   1cc6c:	429a      	cmp	r2, r3
   1cc6e:	d202      	bcs.n	1cc76 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1cc70:	68fb      	ldr	r3, [r7, #12]
   1cc72:	3301      	adds	r3, #1
   1cc74:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1cc76:	687b      	ldr	r3, [r7, #4]
   1cc78:	2b00      	cmp	r3, #0
   1cc7a:	d016      	beq.n	1ccaa <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1cc7c:	4b16      	ldr	r3, [pc, #88]	; (1ccd8 <prvTracePortGetTimeStamp+0xd0>)
   1cc7e:	681b      	ldr	r3, [r3, #0]
   1cc80:	3301      	adds	r3, #1
   1cc82:	089b      	lsrs	r3, r3, #2
   1cc84:	68fa      	ldr	r2, [r7, #12]
   1cc86:	435a      	muls	r2, r3
   1cc88:	4b12      	ldr	r3, [pc, #72]	; (1ccd4 <prvTracePortGetTimeStamp+0xcc>)
   1cc8a:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1cc8c:	4b12      	ldr	r3, [pc, #72]	; (1ccd8 <prvTracePortGetTimeStamp+0xd0>)
   1cc8e:	681b      	ldr	r3, [r3, #0]
   1cc90:	3301      	adds	r3, #1
   1cc92:	2203      	movs	r2, #3
   1cc94:	4013      	ands	r3, r2
   1cc96:	68fa      	ldr	r2, [r7, #12]
   1cc98:	435a      	muls	r2, r3
   1cc9a:	68bb      	ldr	r3, [r7, #8]
   1cc9c:	18d3      	adds	r3, r2, r3
   1cc9e:	089a      	lsrs	r2, r3, #2
   1cca0:	4b0c      	ldr	r3, [pc, #48]	; (1ccd4 <prvTracePortGetTimeStamp+0xcc>)
   1cca2:	681b      	ldr	r3, [r3, #0]
   1cca4:	18d2      	adds	r2, r2, r3
   1cca6:	4b0b      	ldr	r3, [pc, #44]	; (1ccd4 <prvTracePortGetTimeStamp+0xcc>)
   1cca8:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1ccaa:	4b0d      	ldr	r3, [pc, #52]	; (1cce0 <prvTracePortGetTimeStamp+0xd8>)
   1ccac:	68fa      	ldr	r2, [r7, #12]
   1ccae:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1ccb0:	687b      	ldr	r3, [r7, #4]
   1ccb2:	2b00      	cmp	r3, #0
   1ccb4:	d003      	beq.n	1ccbe <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1ccb6:	4b07      	ldr	r3, [pc, #28]	; (1ccd4 <prvTracePortGetTimeStamp+0xcc>)
   1ccb8:	681a      	ldr	r2, [r3, #0]
   1ccba:	687b      	ldr	r3, [r7, #4]
   1ccbc:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1ccbe:	4b0a      	ldr	r3, [pc, #40]	; (1cce8 <prvTracePortGetTimeStamp+0xe0>)
   1ccc0:	68ba      	ldr	r2, [r7, #8]
   1ccc2:	601a      	str	r2, [r3, #0]
   1ccc4:	e000      	b.n	1ccc8 <prvTracePortGetTimeStamp+0xc0>
		return;
   1ccc6:	46c0      	nop			; (mov r8, r8)
}
   1ccc8:	46bd      	mov	sp, r7
   1ccca:	b004      	add	sp, #16
   1cccc:	bd80      	pop	{r7, pc}
   1ccce:	46c0      	nop			; (mov r8, r8)
   1ccd0:	20000c60 	.word	0x20000c60
   1ccd4:	20000c64 	.word	0x20000c64
   1ccd8:	e000e014 	.word	0xe000e014
   1ccdc:	e000e018 	.word	0xe000e018
   1cce0:	20000d24 	.word	0x20000d24
   1cce4:	20000c5c 	.word	0x20000c5c
   1cce8:	20000d28 	.word	0x20000d28

0001ccec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1ccec:	b580      	push	{r7, lr}
   1ccee:	b082      	sub	sp, #8
   1ccf0:	af00      	add	r7, sp, #0
   1ccf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ccf4:	687b      	ldr	r3, [r7, #4]
   1ccf6:	3308      	adds	r3, #8
   1ccf8:	001a      	movs	r2, r3
   1ccfa:	687b      	ldr	r3, [r7, #4]
   1ccfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ccfe:	687b      	ldr	r3, [r7, #4]
   1cd00:	2201      	movs	r2, #1
   1cd02:	4252      	negs	r2, r2
   1cd04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1cd06:	687b      	ldr	r3, [r7, #4]
   1cd08:	3308      	adds	r3, #8
   1cd0a:	001a      	movs	r2, r3
   1cd0c:	687b      	ldr	r3, [r7, #4]
   1cd0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1cd10:	687b      	ldr	r3, [r7, #4]
   1cd12:	3308      	adds	r3, #8
   1cd14:	001a      	movs	r2, r3
   1cd16:	687b      	ldr	r3, [r7, #4]
   1cd18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1cd1a:	687b      	ldr	r3, [r7, #4]
   1cd1c:	2200      	movs	r2, #0
   1cd1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1cd20:	46c0      	nop			; (mov r8, r8)
   1cd22:	46bd      	mov	sp, r7
   1cd24:	b002      	add	sp, #8
   1cd26:	bd80      	pop	{r7, pc}

0001cd28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1cd28:	b580      	push	{r7, lr}
   1cd2a:	b082      	sub	sp, #8
   1cd2c:	af00      	add	r7, sp, #0
   1cd2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1cd30:	687b      	ldr	r3, [r7, #4]
   1cd32:	2200      	movs	r2, #0
   1cd34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1cd36:	46c0      	nop			; (mov r8, r8)
   1cd38:	46bd      	mov	sp, r7
   1cd3a:	b002      	add	sp, #8
   1cd3c:	bd80      	pop	{r7, pc}

0001cd3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1cd3e:	b580      	push	{r7, lr}
   1cd40:	b084      	sub	sp, #16
   1cd42:	af00      	add	r7, sp, #0
   1cd44:	6078      	str	r0, [r7, #4]
   1cd46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1cd48:	687b      	ldr	r3, [r7, #4]
   1cd4a:	685b      	ldr	r3, [r3, #4]
   1cd4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1cd4e:	683b      	ldr	r3, [r7, #0]
   1cd50:	68fa      	ldr	r2, [r7, #12]
   1cd52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1cd54:	68fb      	ldr	r3, [r7, #12]
   1cd56:	689a      	ldr	r2, [r3, #8]
   1cd58:	683b      	ldr	r3, [r7, #0]
   1cd5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1cd5c:	68fb      	ldr	r3, [r7, #12]
   1cd5e:	689b      	ldr	r3, [r3, #8]
   1cd60:	683a      	ldr	r2, [r7, #0]
   1cd62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1cd64:	68fb      	ldr	r3, [r7, #12]
   1cd66:	683a      	ldr	r2, [r7, #0]
   1cd68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1cd6a:	683b      	ldr	r3, [r7, #0]
   1cd6c:	687a      	ldr	r2, [r7, #4]
   1cd6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1cd70:	687b      	ldr	r3, [r7, #4]
   1cd72:	681b      	ldr	r3, [r3, #0]
   1cd74:	1c5a      	adds	r2, r3, #1
   1cd76:	687b      	ldr	r3, [r7, #4]
   1cd78:	601a      	str	r2, [r3, #0]
}
   1cd7a:	46c0      	nop			; (mov r8, r8)
   1cd7c:	46bd      	mov	sp, r7
   1cd7e:	b004      	add	sp, #16
   1cd80:	bd80      	pop	{r7, pc}

0001cd82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1cd82:	b580      	push	{r7, lr}
   1cd84:	b084      	sub	sp, #16
   1cd86:	af00      	add	r7, sp, #0
   1cd88:	6078      	str	r0, [r7, #4]
   1cd8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1cd8c:	683b      	ldr	r3, [r7, #0]
   1cd8e:	681b      	ldr	r3, [r3, #0]
   1cd90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1cd92:	68bb      	ldr	r3, [r7, #8]
   1cd94:	3301      	adds	r3, #1
   1cd96:	d103      	bne.n	1cda0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1cd98:	687b      	ldr	r3, [r7, #4]
   1cd9a:	691b      	ldr	r3, [r3, #16]
   1cd9c:	60fb      	str	r3, [r7, #12]
   1cd9e:	e00c      	b.n	1cdba <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1cda0:	687b      	ldr	r3, [r7, #4]
   1cda2:	3308      	adds	r3, #8
   1cda4:	60fb      	str	r3, [r7, #12]
   1cda6:	e002      	b.n	1cdae <vListInsert+0x2c>
   1cda8:	68fb      	ldr	r3, [r7, #12]
   1cdaa:	685b      	ldr	r3, [r3, #4]
   1cdac:	60fb      	str	r3, [r7, #12]
   1cdae:	68fb      	ldr	r3, [r7, #12]
   1cdb0:	685b      	ldr	r3, [r3, #4]
   1cdb2:	681a      	ldr	r2, [r3, #0]
   1cdb4:	68bb      	ldr	r3, [r7, #8]
   1cdb6:	429a      	cmp	r2, r3
   1cdb8:	d9f6      	bls.n	1cda8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1cdba:	68fb      	ldr	r3, [r7, #12]
   1cdbc:	685a      	ldr	r2, [r3, #4]
   1cdbe:	683b      	ldr	r3, [r7, #0]
   1cdc0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1cdc2:	683b      	ldr	r3, [r7, #0]
   1cdc4:	685b      	ldr	r3, [r3, #4]
   1cdc6:	683a      	ldr	r2, [r7, #0]
   1cdc8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1cdca:	683b      	ldr	r3, [r7, #0]
   1cdcc:	68fa      	ldr	r2, [r7, #12]
   1cdce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1cdd0:	68fb      	ldr	r3, [r7, #12]
   1cdd2:	683a      	ldr	r2, [r7, #0]
   1cdd4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1cdd6:	683b      	ldr	r3, [r7, #0]
   1cdd8:	687a      	ldr	r2, [r7, #4]
   1cdda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1cddc:	687b      	ldr	r3, [r7, #4]
   1cdde:	681b      	ldr	r3, [r3, #0]
   1cde0:	1c5a      	adds	r2, r3, #1
   1cde2:	687b      	ldr	r3, [r7, #4]
   1cde4:	601a      	str	r2, [r3, #0]
}
   1cde6:	46c0      	nop			; (mov r8, r8)
   1cde8:	46bd      	mov	sp, r7
   1cdea:	b004      	add	sp, #16
   1cdec:	bd80      	pop	{r7, pc}

0001cdee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1cdee:	b580      	push	{r7, lr}
   1cdf0:	b084      	sub	sp, #16
   1cdf2:	af00      	add	r7, sp, #0
   1cdf4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1cdf6:	687b      	ldr	r3, [r7, #4]
   1cdf8:	691b      	ldr	r3, [r3, #16]
   1cdfa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1cdfc:	687b      	ldr	r3, [r7, #4]
   1cdfe:	685b      	ldr	r3, [r3, #4]
   1ce00:	687a      	ldr	r2, [r7, #4]
   1ce02:	6892      	ldr	r2, [r2, #8]
   1ce04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ce06:	687b      	ldr	r3, [r7, #4]
   1ce08:	689b      	ldr	r3, [r3, #8]
   1ce0a:	687a      	ldr	r2, [r7, #4]
   1ce0c:	6852      	ldr	r2, [r2, #4]
   1ce0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ce10:	68fb      	ldr	r3, [r7, #12]
   1ce12:	685a      	ldr	r2, [r3, #4]
   1ce14:	687b      	ldr	r3, [r7, #4]
   1ce16:	429a      	cmp	r2, r3
   1ce18:	d103      	bne.n	1ce22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1ce1a:	687b      	ldr	r3, [r7, #4]
   1ce1c:	689a      	ldr	r2, [r3, #8]
   1ce1e:	68fb      	ldr	r3, [r7, #12]
   1ce20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1ce22:	687b      	ldr	r3, [r7, #4]
   1ce24:	2200      	movs	r2, #0
   1ce26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ce28:	68fb      	ldr	r3, [r7, #12]
   1ce2a:	681b      	ldr	r3, [r3, #0]
   1ce2c:	1e5a      	subs	r2, r3, #1
   1ce2e:	68fb      	ldr	r3, [r7, #12]
   1ce30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ce32:	68fb      	ldr	r3, [r7, #12]
   1ce34:	681b      	ldr	r3, [r3, #0]
}
   1ce36:	0018      	movs	r0, r3
   1ce38:	46bd      	mov	sp, r7
   1ce3a:	b004      	add	sp, #16
   1ce3c:	bd80      	pop	{r7, pc}
	...

0001ce40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ce40:	b580      	push	{r7, lr}
   1ce42:	b084      	sub	sp, #16
   1ce44:	af00      	add	r7, sp, #0
   1ce46:	60f8      	str	r0, [r7, #12]
   1ce48:	60b9      	str	r1, [r7, #8]
   1ce4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ce4c:	68fb      	ldr	r3, [r7, #12]
   1ce4e:	3b04      	subs	r3, #4
   1ce50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ce52:	68fb      	ldr	r3, [r7, #12]
   1ce54:	2280      	movs	r2, #128	; 0x80
   1ce56:	0452      	lsls	r2, r2, #17
   1ce58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ce5a:	68fb      	ldr	r3, [r7, #12]
   1ce5c:	3b04      	subs	r3, #4
   1ce5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1ce60:	68ba      	ldr	r2, [r7, #8]
   1ce62:	68fb      	ldr	r3, [r7, #12]
   1ce64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ce66:	68fb      	ldr	r3, [r7, #12]
   1ce68:	3b04      	subs	r3, #4
   1ce6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ce6c:	4a08      	ldr	r2, [pc, #32]	; (1ce90 <pxPortInitialiseStack+0x50>)
   1ce6e:	68fb      	ldr	r3, [r7, #12]
   1ce70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ce72:	68fb      	ldr	r3, [r7, #12]
   1ce74:	3b14      	subs	r3, #20
   1ce76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ce78:	687a      	ldr	r2, [r7, #4]
   1ce7a:	68fb      	ldr	r3, [r7, #12]
   1ce7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ce7e:	68fb      	ldr	r3, [r7, #12]
   1ce80:	3b20      	subs	r3, #32
   1ce82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1ce84:	68fb      	ldr	r3, [r7, #12]
}
   1ce86:	0018      	movs	r0, r3
   1ce88:	46bd      	mov	sp, r7
   1ce8a:	b004      	add	sp, #16
   1ce8c:	bd80      	pop	{r7, pc}
   1ce8e:	46c0      	nop			; (mov r8, r8)
   1ce90:	0001ce95 	.word	0x0001ce95

0001ce94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1ce94:	b580      	push	{r7, lr}
   1ce96:	b082      	sub	sp, #8
   1ce98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ce9a:	2300      	movs	r3, #0
   1ce9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ce9e:	4b07      	ldr	r3, [pc, #28]	; (1cebc <prvTaskExitError+0x28>)
   1cea0:	681b      	ldr	r3, [r3, #0]
   1cea2:	3301      	adds	r3, #1
   1cea4:	d001      	beq.n	1ceaa <prvTaskExitError+0x16>
   1cea6:	b672      	cpsid	i
   1cea8:	e7fe      	b.n	1cea8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ceaa:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ceac:	46c0      	nop			; (mov r8, r8)
   1ceae:	687b      	ldr	r3, [r7, #4]
   1ceb0:	2b00      	cmp	r3, #0
   1ceb2:	d0fc      	beq.n	1ceae <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ceb4:	46c0      	nop			; (mov r8, r8)
   1ceb6:	46bd      	mov	sp, r7
   1ceb8:	b002      	add	sp, #8
   1ceba:	bd80      	pop	{r7, pc}
   1cebc:	20000190 	.word	0x20000190

0001cec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1cec0:	b580      	push	{r7, lr}
   1cec2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1cec4:	46c0      	nop			; (mov r8, r8)
   1cec6:	46bd      	mov	sp, r7
   1cec8:	bd80      	pop	{r7, pc}
   1ceca:	0000      	movs	r0, r0
   1cecc:	0000      	movs	r0, r0
	...

0001ced0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1ced0:	4a0b      	ldr	r2, [pc, #44]	; (1cf00 <pxCurrentTCBConst2>)
   1ced2:	6813      	ldr	r3, [r2, #0]
   1ced4:	6818      	ldr	r0, [r3, #0]
   1ced6:	3020      	adds	r0, #32
   1ced8:	f380 8809 	msr	PSP, r0
   1cedc:	2002      	movs	r0, #2
   1cede:	f380 8814 	msr	CONTROL, r0
   1cee2:	f3bf 8f6f 	isb	sy
   1cee6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1cee8:	46ae      	mov	lr, r5
   1ceea:	bc08      	pop	{r3}
   1ceec:	bc04      	pop	{r2}
   1ceee:	b662      	cpsie	i
   1cef0:	4718      	bx	r3
   1cef2:	46c0      	nop			; (mov r8, r8)
   1cef4:	46c0      	nop			; (mov r8, r8)
   1cef6:	46c0      	nop			; (mov r8, r8)
   1cef8:	46c0      	nop			; (mov r8, r8)
   1cefa:	46c0      	nop			; (mov r8, r8)
   1cefc:	46c0      	nop			; (mov r8, r8)
   1cefe:	46c0      	nop			; (mov r8, r8)

0001cf00 <pxCurrentTCBConst2>:
   1cf00:	20003ffc 	.word	0x20003ffc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1cf04:	46c0      	nop			; (mov r8, r8)
   1cf06:	46c0      	nop			; (mov r8, r8)

0001cf08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1cf08:	b580      	push	{r7, lr}
   1cf0a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1cf0c:	4b0e      	ldr	r3, [pc, #56]	; (1cf48 <xPortStartScheduler+0x40>)
   1cf0e:	4a0e      	ldr	r2, [pc, #56]	; (1cf48 <xPortStartScheduler+0x40>)
   1cf10:	6812      	ldr	r2, [r2, #0]
   1cf12:	21ff      	movs	r1, #255	; 0xff
   1cf14:	0409      	lsls	r1, r1, #16
   1cf16:	430a      	orrs	r2, r1
   1cf18:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1cf1a:	4b0b      	ldr	r3, [pc, #44]	; (1cf48 <xPortStartScheduler+0x40>)
   1cf1c:	4a0a      	ldr	r2, [pc, #40]	; (1cf48 <xPortStartScheduler+0x40>)
   1cf1e:	6812      	ldr	r2, [r2, #0]
   1cf20:	21ff      	movs	r1, #255	; 0xff
   1cf22:	0609      	lsls	r1, r1, #24
   1cf24:	430a      	orrs	r2, r1
   1cf26:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1cf28:	4b08      	ldr	r3, [pc, #32]	; (1cf4c <xPortStartScheduler+0x44>)
   1cf2a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1cf2c:	4b08      	ldr	r3, [pc, #32]	; (1cf50 <xPortStartScheduler+0x48>)
   1cf2e:	2200      	movs	r2, #0
   1cf30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1cf32:	4b08      	ldr	r3, [pc, #32]	; (1cf54 <xPortStartScheduler+0x4c>)
   1cf34:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1cf36:	4b08      	ldr	r3, [pc, #32]	; (1cf58 <xPortStartScheduler+0x50>)
   1cf38:	4798      	blx	r3
	prvTaskExitError();
   1cf3a:	4b08      	ldr	r3, [pc, #32]	; (1cf5c <xPortStartScheduler+0x54>)
   1cf3c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1cf3e:	2300      	movs	r3, #0
}
   1cf40:	0018      	movs	r0, r3
   1cf42:	46bd      	mov	sp, r7
   1cf44:	bd80      	pop	{r7, pc}
   1cf46:	46c0      	nop			; (mov r8, r8)
   1cf48:	e000ed20 	.word	0xe000ed20
   1cf4c:	0001d069 	.word	0x0001d069
   1cf50:	20000190 	.word	0x20000190
   1cf54:	0001ced1 	.word	0x0001ced1
   1cf58:	0001f5c5 	.word	0x0001f5c5
   1cf5c:	0001ce95 	.word	0x0001ce95

0001cf60 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1cf60:	b580      	push	{r7, lr}
   1cf62:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1cf64:	4b03      	ldr	r3, [pc, #12]	; (1cf74 <vPortYield+0x14>)
   1cf66:	2280      	movs	r2, #128	; 0x80
   1cf68:	0552      	lsls	r2, r2, #21
   1cf6a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1cf6c:	46c0      	nop			; (mov r8, r8)
   1cf6e:	46bd      	mov	sp, r7
   1cf70:	bd80      	pop	{r7, pc}
   1cf72:	46c0      	nop			; (mov r8, r8)
   1cf74:	e000ed04 	.word	0xe000ed04

0001cf78 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1cf78:	b580      	push	{r7, lr}
   1cf7a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1cf7c:	b672      	cpsid	i
    uxCriticalNesting++;
   1cf7e:	4b06      	ldr	r3, [pc, #24]	; (1cf98 <vPortEnterCritical+0x20>)
   1cf80:	681b      	ldr	r3, [r3, #0]
   1cf82:	1c5a      	adds	r2, r3, #1
   1cf84:	4b04      	ldr	r3, [pc, #16]	; (1cf98 <vPortEnterCritical+0x20>)
   1cf86:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1cf88:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1cf8c:	f3bf 8f6f 	isb	sy
}
   1cf90:	46c0      	nop			; (mov r8, r8)
   1cf92:	46bd      	mov	sp, r7
   1cf94:	bd80      	pop	{r7, pc}
   1cf96:	46c0      	nop			; (mov r8, r8)
   1cf98:	20000190 	.word	0x20000190

0001cf9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1cf9c:	b580      	push	{r7, lr}
   1cf9e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1cfa0:	4b09      	ldr	r3, [pc, #36]	; (1cfc8 <vPortExitCritical+0x2c>)
   1cfa2:	681b      	ldr	r3, [r3, #0]
   1cfa4:	2b00      	cmp	r3, #0
   1cfa6:	d101      	bne.n	1cfac <vPortExitCritical+0x10>
   1cfa8:	b672      	cpsid	i
   1cfaa:	e7fe      	b.n	1cfaa <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1cfac:	4b06      	ldr	r3, [pc, #24]	; (1cfc8 <vPortExitCritical+0x2c>)
   1cfae:	681b      	ldr	r3, [r3, #0]
   1cfb0:	1e5a      	subs	r2, r3, #1
   1cfb2:	4b05      	ldr	r3, [pc, #20]	; (1cfc8 <vPortExitCritical+0x2c>)
   1cfb4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1cfb6:	4b04      	ldr	r3, [pc, #16]	; (1cfc8 <vPortExitCritical+0x2c>)
   1cfb8:	681b      	ldr	r3, [r3, #0]
   1cfba:	2b00      	cmp	r3, #0
   1cfbc:	d100      	bne.n	1cfc0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1cfbe:	b662      	cpsie	i
    }
}
   1cfc0:	46c0      	nop			; (mov r8, r8)
   1cfc2:	46bd      	mov	sp, r7
   1cfc4:	bd80      	pop	{r7, pc}
   1cfc6:	46c0      	nop			; (mov r8, r8)
   1cfc8:	20000190 	.word	0x20000190

0001cfcc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1cfcc:	f3ef 8010 	mrs	r0, PRIMASK
   1cfd0:	b672      	cpsid	i
   1cfd2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1cfd4:	46c0      	nop			; (mov r8, r8)
   1cfd6:	0018      	movs	r0, r3

0001cfd8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1cfd8:	f380 8810 	msr	PRIMASK, r0
   1cfdc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1cfde:	46c0      	nop			; (mov r8, r8)

0001cfe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1cfe0:	f3ef 8009 	mrs	r0, PSP
   1cfe4:	4b0e      	ldr	r3, [pc, #56]	; (1d020 <pxCurrentTCBConst>)
   1cfe6:	681a      	ldr	r2, [r3, #0]
   1cfe8:	3820      	subs	r0, #32
   1cfea:	6010      	str	r0, [r2, #0]
   1cfec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1cfee:	4644      	mov	r4, r8
   1cff0:	464d      	mov	r5, r9
   1cff2:	4656      	mov	r6, sl
   1cff4:	465f      	mov	r7, fp
   1cff6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1cff8:	b508      	push	{r3, lr}
   1cffa:	b672      	cpsid	i
   1cffc:	f002 fae2 	bl	1f5c4 <vTaskSwitchContext>
   1d000:	b662      	cpsie	i
   1d002:	bc0c      	pop	{r2, r3}
   1d004:	6811      	ldr	r1, [r2, #0]
   1d006:	6808      	ldr	r0, [r1, #0]
   1d008:	3010      	adds	r0, #16
   1d00a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1d00c:	46a0      	mov	r8, r4
   1d00e:	46a9      	mov	r9, r5
   1d010:	46b2      	mov	sl, r6
   1d012:	46bb      	mov	fp, r7
   1d014:	f380 8809 	msr	PSP, r0
   1d018:	3820      	subs	r0, #32
   1d01a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1d01c:	4718      	bx	r3
   1d01e:	46c0      	nop			; (mov r8, r8)

0001d020 <pxCurrentTCBConst>:
   1d020:	20003ffc 	.word	0x20003ffc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1d024:	46c0      	nop			; (mov r8, r8)
   1d026:	46c0      	nop			; (mov r8, r8)

0001d028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1d028:	b580      	push	{r7, lr}
   1d02a:	b082      	sub	sp, #8
   1d02c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1d02e:	4b0a      	ldr	r3, [pc, #40]	; (1d058 <SysTick_Handler+0x30>)
   1d030:	4798      	blx	r3
   1d032:	0003      	movs	r3, r0
   1d034:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1d036:	4b09      	ldr	r3, [pc, #36]	; (1d05c <SysTick_Handler+0x34>)
   1d038:	4798      	blx	r3
   1d03a:	1e03      	subs	r3, r0, #0
   1d03c:	d003      	beq.n	1d046 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1d03e:	4b08      	ldr	r3, [pc, #32]	; (1d060 <SysTick_Handler+0x38>)
   1d040:	2280      	movs	r2, #128	; 0x80
   1d042:	0552      	lsls	r2, r2, #21
   1d044:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1d046:	687b      	ldr	r3, [r7, #4]
   1d048:	0018      	movs	r0, r3
   1d04a:	4b06      	ldr	r3, [pc, #24]	; (1d064 <SysTick_Handler+0x3c>)
   1d04c:	4798      	blx	r3
}
   1d04e:	46c0      	nop			; (mov r8, r8)
   1d050:	46bd      	mov	sp, r7
   1d052:	b002      	add	sp, #8
   1d054:	bd80      	pop	{r7, pc}
   1d056:	46c0      	nop			; (mov r8, r8)
   1d058:	0001cfcd 	.word	0x0001cfcd
   1d05c:	0001f3d5 	.word	0x0001f3d5
   1d060:	e000ed04 	.word	0xe000ed04
   1d064:	0001cfd9 	.word	0x0001cfd9

0001d068 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1d068:	b5b0      	push	{r4, r5, r7, lr}
   1d06a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1d06c:	4b0b      	ldr	r3, [pc, #44]	; (1d09c <prvSetupTimerInterrupt+0x34>)
   1d06e:	2200      	movs	r2, #0
   1d070:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1d072:	4b0b      	ldr	r3, [pc, #44]	; (1d0a0 <prvSetupTimerInterrupt+0x38>)
   1d074:	2200      	movs	r2, #0
   1d076:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1d078:	4c0a      	ldr	r4, [pc, #40]	; (1d0a4 <prvSetupTimerInterrupt+0x3c>)
   1d07a:	2000      	movs	r0, #0
   1d07c:	4b0a      	ldr	r3, [pc, #40]	; (1d0a8 <prvSetupTimerInterrupt+0x40>)
   1d07e:	4798      	blx	r3
   1d080:	4b0a      	ldr	r3, [pc, #40]	; (1d0ac <prvSetupTimerInterrupt+0x44>)
   1d082:	22fa      	movs	r2, #250	; 0xfa
   1d084:	0091      	lsls	r1, r2, #2
   1d086:	4798      	blx	r3
   1d088:	0003      	movs	r3, r0
   1d08a:	3b01      	subs	r3, #1
   1d08c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1d08e:	4b03      	ldr	r3, [pc, #12]	; (1d09c <prvSetupTimerInterrupt+0x34>)
   1d090:	2207      	movs	r2, #7
   1d092:	601a      	str	r2, [r3, #0]
}
   1d094:	46c0      	nop			; (mov r8, r8)
   1d096:	46bd      	mov	sp, r7
   1d098:	bdb0      	pop	{r4, r5, r7, pc}
   1d09a:	46c0      	nop			; (mov r8, r8)
   1d09c:	e000e010 	.word	0xe000e010
   1d0a0:	e000e018 	.word	0xe000e018
   1d0a4:	e000e014 	.word	0xe000e014
   1d0a8:	0002cd59 	.word	0x0002cd59
   1d0ac:	000359f1 	.word	0x000359f1

0001d0b0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1d0b0:	b580      	push	{r7, lr}
   1d0b2:	b084      	sub	sp, #16
   1d0b4:	af00      	add	r7, sp, #0
   1d0b6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1d0b8:	2300      	movs	r3, #0
   1d0ba:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1d0bc:	687b      	ldr	r3, [r7, #4]
   1d0be:	2207      	movs	r2, #7
   1d0c0:	4013      	ands	r3, r2
   1d0c2:	d004      	beq.n	1d0ce <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1d0c4:	687b      	ldr	r3, [r7, #4]
   1d0c6:	2207      	movs	r2, #7
   1d0c8:	4393      	bics	r3, r2
   1d0ca:	3308      	adds	r3, #8
   1d0cc:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1d0ce:	4b21      	ldr	r3, [pc, #132]	; (1d154 <pvPortMalloc+0xa4>)
   1d0d0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1d0d2:	4b21      	ldr	r3, [pc, #132]	; (1d158 <pvPortMalloc+0xa8>)
   1d0d4:	681b      	ldr	r3, [r3, #0]
   1d0d6:	2b00      	cmp	r3, #0
   1d0d8:	d105      	bne.n	1d0e6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1d0da:	4b20      	ldr	r3, [pc, #128]	; (1d15c <pvPortMalloc+0xac>)
   1d0dc:	2207      	movs	r2, #7
   1d0de:	4393      	bics	r3, r2
   1d0e0:	001a      	movs	r2, r3
   1d0e2:	4b1d      	ldr	r3, [pc, #116]	; (1d158 <pvPortMalloc+0xa8>)
   1d0e4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1d0e6:	4b1e      	ldr	r3, [pc, #120]	; (1d160 <pvPortMalloc+0xb0>)
   1d0e8:	681a      	ldr	r2, [r3, #0]
   1d0ea:	687b      	ldr	r3, [r7, #4]
   1d0ec:	18d3      	adds	r3, r2, r3
   1d0ee:	4a1d      	ldr	r2, [pc, #116]	; (1d164 <pvPortMalloc+0xb4>)
   1d0f0:	4293      	cmp	r3, r2
   1d0f2:	d813      	bhi.n	1d11c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1d0f4:	4b1a      	ldr	r3, [pc, #104]	; (1d160 <pvPortMalloc+0xb0>)
   1d0f6:	681a      	ldr	r2, [r3, #0]
   1d0f8:	687b      	ldr	r3, [r7, #4]
   1d0fa:	18d2      	adds	r2, r2, r3
   1d0fc:	4b18      	ldr	r3, [pc, #96]	; (1d160 <pvPortMalloc+0xb0>)
   1d0fe:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1d100:	429a      	cmp	r2, r3
   1d102:	d90b      	bls.n	1d11c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1d104:	4b14      	ldr	r3, [pc, #80]	; (1d158 <pvPortMalloc+0xa8>)
   1d106:	681a      	ldr	r2, [r3, #0]
   1d108:	4b15      	ldr	r3, [pc, #84]	; (1d160 <pvPortMalloc+0xb0>)
   1d10a:	681b      	ldr	r3, [r3, #0]
   1d10c:	18d3      	adds	r3, r2, r3
   1d10e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1d110:	4b13      	ldr	r3, [pc, #76]	; (1d160 <pvPortMalloc+0xb0>)
   1d112:	681a      	ldr	r2, [r3, #0]
   1d114:	687b      	ldr	r3, [r7, #4]
   1d116:	18d2      	adds	r2, r2, r3
   1d118:	4b11      	ldr	r3, [pc, #68]	; (1d160 <pvPortMalloc+0xb0>)
   1d11a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1d11c:	68fb      	ldr	r3, [r7, #12]
   1d11e:	2b00      	cmp	r3, #0
   1d120:	d006      	beq.n	1d130 <pvPortMalloc+0x80>
   1d122:	68fb      	ldr	r3, [r7, #12]
   1d124:	687a      	ldr	r2, [r7, #4]
   1d126:	0019      	movs	r1, r3
   1d128:	2094      	movs	r0, #148	; 0x94
   1d12a:	4b0f      	ldr	r3, [pc, #60]	; (1d168 <pvPortMalloc+0xb8>)
   1d12c:	4798      	blx	r3
   1d12e:	e005      	b.n	1d13c <pvPortMalloc+0x8c>
   1d130:	68fb      	ldr	r3, [r7, #12]
   1d132:	687a      	ldr	r2, [r7, #4]
   1d134:	0019      	movs	r1, r3
   1d136:	20e8      	movs	r0, #232	; 0xe8
   1d138:	4b0b      	ldr	r3, [pc, #44]	; (1d168 <pvPortMalloc+0xb8>)
   1d13a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1d13c:	4b0b      	ldr	r3, [pc, #44]	; (1d16c <pvPortMalloc+0xbc>)
   1d13e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1d140:	68fb      	ldr	r3, [r7, #12]
   1d142:	2b00      	cmp	r3, #0
   1d144:	d101      	bne.n	1d14a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1d146:	4b0a      	ldr	r3, [pc, #40]	; (1d170 <pvPortMalloc+0xc0>)
   1d148:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1d14a:	68fb      	ldr	r3, [r7, #12]
}
   1d14c:	0018      	movs	r0, r3
   1d14e:	46bd      	mov	sp, r7
   1d150:	b004      	add	sp, #16
   1d152:	bd80      	pop	{r7, pc}
   1d154:	0001f231 	.word	0x0001f231
   1d158:	20003ff8 	.word	0x20003ff8
   1d15c:	20000d34 	.word	0x20000d34
   1d160:	20003ff4 	.word	0x20003ff4
   1d164:	000032bf 	.word	0x000032bf
   1d168:	0001b81d 	.word	0x0001b81d
   1d16c:	0001f249 	.word	0x0001f249
   1d170:	000359c1 	.word	0x000359c1

0001d174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1d174:	b580      	push	{r7, lr}
   1d176:	b082      	sub	sp, #8
   1d178:	af00      	add	r7, sp, #0
   1d17a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1d17c:	687b      	ldr	r3, [r7, #4]
   1d17e:	2b00      	cmp	r3, #0
   1d180:	d001      	beq.n	1d186 <vPortFree+0x12>
   1d182:	b672      	cpsid	i
   1d184:	e7fe      	b.n	1d184 <vPortFree+0x10>
}
   1d186:	46c0      	nop			; (mov r8, r8)
   1d188:	46bd      	mov	sp, r7
   1d18a:	b002      	add	sp, #8
   1d18c:	bd80      	pop	{r7, pc}
	...

0001d190 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1d190:	b580      	push	{r7, lr}
   1d192:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1d194:	4b03      	ldr	r3, [pc, #12]	; (1d1a4 <xPortGetFreeHeapSize+0x14>)
   1d196:	681b      	ldr	r3, [r3, #0]
   1d198:	22cb      	movs	r2, #203	; 0xcb
   1d19a:	0192      	lsls	r2, r2, #6
   1d19c:	1ad3      	subs	r3, r2, r3
}
   1d19e:	0018      	movs	r0, r3
   1d1a0:	46bd      	mov	sp, r7
   1d1a2:	bd80      	pop	{r7, pc}
   1d1a4:	20003ff4 	.word	0x20003ff4

0001d1a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1d1a8:	b580      	push	{r7, lr}
   1d1aa:	b084      	sub	sp, #16
   1d1ac:	af00      	add	r7, sp, #0
   1d1ae:	6078      	str	r0, [r7, #4]
   1d1b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d1b2:	687b      	ldr	r3, [r7, #4]
   1d1b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1d1b6:	68fb      	ldr	r3, [r7, #12]
   1d1b8:	2b00      	cmp	r3, #0
   1d1ba:	d101      	bne.n	1d1c0 <xQueueGenericReset+0x18>
   1d1bc:	b672      	cpsid	i
   1d1be:	e7fe      	b.n	1d1be <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1d1c0:	4b23      	ldr	r3, [pc, #140]	; (1d250 <xQueueGenericReset+0xa8>)
   1d1c2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1d1c4:	68fb      	ldr	r3, [r7, #12]
   1d1c6:	681a      	ldr	r2, [r3, #0]
   1d1c8:	68fb      	ldr	r3, [r7, #12]
   1d1ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1d1cc:	68fb      	ldr	r3, [r7, #12]
   1d1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d1d0:	434b      	muls	r3, r1
   1d1d2:	18d2      	adds	r2, r2, r3
   1d1d4:	68fb      	ldr	r3, [r7, #12]
   1d1d6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1d1d8:	68fb      	ldr	r3, [r7, #12]
   1d1da:	2200      	movs	r2, #0
   1d1dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1d1de:	68fb      	ldr	r3, [r7, #12]
   1d1e0:	681a      	ldr	r2, [r3, #0]
   1d1e2:	68fb      	ldr	r3, [r7, #12]
   1d1e4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1d1e6:	68fb      	ldr	r3, [r7, #12]
   1d1e8:	681a      	ldr	r2, [r3, #0]
   1d1ea:	68fb      	ldr	r3, [r7, #12]
   1d1ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d1ee:	1e59      	subs	r1, r3, #1
   1d1f0:	68fb      	ldr	r3, [r7, #12]
   1d1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d1f4:	434b      	muls	r3, r1
   1d1f6:	18d2      	adds	r2, r2, r3
   1d1f8:	68fb      	ldr	r3, [r7, #12]
   1d1fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1d1fc:	68fb      	ldr	r3, [r7, #12]
   1d1fe:	2244      	movs	r2, #68	; 0x44
   1d200:	21ff      	movs	r1, #255	; 0xff
   1d202:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1d204:	68fb      	ldr	r3, [r7, #12]
   1d206:	2245      	movs	r2, #69	; 0x45
   1d208:	21ff      	movs	r1, #255	; 0xff
   1d20a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1d20c:	683b      	ldr	r3, [r7, #0]
   1d20e:	2b00      	cmp	r3, #0
   1d210:	d10d      	bne.n	1d22e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1d212:	68fb      	ldr	r3, [r7, #12]
   1d214:	691b      	ldr	r3, [r3, #16]
   1d216:	2b00      	cmp	r3, #0
   1d218:	d013      	beq.n	1d242 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1d21a:	68fb      	ldr	r3, [r7, #12]
   1d21c:	3310      	adds	r3, #16
   1d21e:	0018      	movs	r0, r3
   1d220:	4b0c      	ldr	r3, [pc, #48]	; (1d254 <xQueueGenericReset+0xac>)
   1d222:	4798      	blx	r3
   1d224:	1e03      	subs	r3, r0, #0
   1d226:	d00c      	beq.n	1d242 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1d228:	4b0b      	ldr	r3, [pc, #44]	; (1d258 <xQueueGenericReset+0xb0>)
   1d22a:	4798      	blx	r3
   1d22c:	e009      	b.n	1d242 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1d22e:	68fb      	ldr	r3, [r7, #12]
   1d230:	3310      	adds	r3, #16
   1d232:	0018      	movs	r0, r3
   1d234:	4b09      	ldr	r3, [pc, #36]	; (1d25c <xQueueGenericReset+0xb4>)
   1d236:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1d238:	68fb      	ldr	r3, [r7, #12]
   1d23a:	3324      	adds	r3, #36	; 0x24
   1d23c:	0018      	movs	r0, r3
   1d23e:	4b07      	ldr	r3, [pc, #28]	; (1d25c <xQueueGenericReset+0xb4>)
   1d240:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1d242:	4b07      	ldr	r3, [pc, #28]	; (1d260 <xQueueGenericReset+0xb8>)
   1d244:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1d246:	2301      	movs	r3, #1
}
   1d248:	0018      	movs	r0, r3
   1d24a:	46bd      	mov	sp, r7
   1d24c:	b004      	add	sp, #16
   1d24e:	bd80      	pop	{r7, pc}
   1d250:	0001cf79 	.word	0x0001cf79
   1d254:	0001f809 	.word	0x0001f809
   1d258:	0001cf61 	.word	0x0001cf61
   1d25c:	0001cced 	.word	0x0001cced
   1d260:	0001cf9d 	.word	0x0001cf9d

0001d264 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1d264:	b590      	push	{r4, r7, lr}
   1d266:	b08b      	sub	sp, #44	; 0x2c
   1d268:	af02      	add	r7, sp, #8
   1d26a:	60f8      	str	r0, [r7, #12]
   1d26c:	60b9      	str	r1, [r7, #8]
   1d26e:	1dfb      	adds	r3, r7, #7
   1d270:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1d272:	68fb      	ldr	r3, [r7, #12]
   1d274:	2b00      	cmp	r3, #0
   1d276:	d101      	bne.n	1d27c <xQueueGenericCreate+0x18>
   1d278:	b672      	cpsid	i
   1d27a:	e7fe      	b.n	1d27a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1d27c:	68bb      	ldr	r3, [r7, #8]
   1d27e:	2b00      	cmp	r3, #0
   1d280:	d102      	bne.n	1d288 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1d282:	2300      	movs	r3, #0
   1d284:	61fb      	str	r3, [r7, #28]
   1d286:	e003      	b.n	1d290 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d288:	68fb      	ldr	r3, [r7, #12]
   1d28a:	68ba      	ldr	r2, [r7, #8]
   1d28c:	4353      	muls	r3, r2
   1d28e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1d290:	69fb      	ldr	r3, [r7, #28]
   1d292:	3354      	adds	r3, #84	; 0x54
   1d294:	0018      	movs	r0, r3
   1d296:	4b19      	ldr	r3, [pc, #100]	; (1d2fc <xQueueGenericCreate+0x98>)
   1d298:	4798      	blx	r3
   1d29a:	0003      	movs	r3, r0
   1d29c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1d29e:	69bb      	ldr	r3, [r7, #24]
   1d2a0:	2b00      	cmp	r3, #0
   1d2a2:	d00d      	beq.n	1d2c0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1d2a4:	69bb      	ldr	r3, [r7, #24]
   1d2a6:	3354      	adds	r3, #84	; 0x54
   1d2a8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1d2aa:	1dfb      	adds	r3, r7, #7
   1d2ac:	781c      	ldrb	r4, [r3, #0]
   1d2ae:	697a      	ldr	r2, [r7, #20]
   1d2b0:	68b9      	ldr	r1, [r7, #8]
   1d2b2:	68f8      	ldr	r0, [r7, #12]
   1d2b4:	69bb      	ldr	r3, [r7, #24]
   1d2b6:	9300      	str	r3, [sp, #0]
   1d2b8:	0023      	movs	r3, r4
   1d2ba:	4c11      	ldr	r4, [pc, #68]	; (1d300 <xQueueGenericCreate+0x9c>)
   1d2bc:	47a0      	blx	r4
   1d2be:	e017      	b.n	1d2f0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1d2c0:	4b10      	ldr	r3, [pc, #64]	; (1d304 <xQueueGenericCreate+0xa0>)
   1d2c2:	4798      	blx	r3
   1d2c4:	0003      	movs	r3, r0
   1d2c6:	0018      	movs	r0, r3
   1d2c8:	4b0f      	ldr	r3, [pc, #60]	; (1d308 <xQueueGenericCreate+0xa4>)
   1d2ca:	4798      	blx	r3
   1d2cc:	0003      	movs	r3, r0
   1d2ce:	001a      	movs	r2, r3
   1d2d0:	4b0e      	ldr	r3, [pc, #56]	; (1d30c <xQueueGenericCreate+0xa8>)
   1d2d2:	881b      	ldrh	r3, [r3, #0]
   1d2d4:	4013      	ands	r3, r2
   1d2d6:	b29b      	uxth	r3, r3
   1d2d8:	2b00      	cmp	r3, #0
   1d2da:	d009      	beq.n	1d2f0 <xQueueGenericCreate+0x8c>
   1d2dc:	1dfb      	adds	r3, r7, #7
   1d2de:	781b      	ldrb	r3, [r3, #0]
   1d2e0:	4a0b      	ldr	r2, [pc, #44]	; (1d310 <xQueueGenericCreate+0xac>)
   1d2e2:	5cd3      	ldrb	r3, [r2, r3]
   1d2e4:	3340      	adds	r3, #64	; 0x40
   1d2e6:	b2db      	uxtb	r3, r3
   1d2e8:	2100      	movs	r1, #0
   1d2ea:	0018      	movs	r0, r3
   1d2ec:	4b09      	ldr	r3, [pc, #36]	; (1d314 <xQueueGenericCreate+0xb0>)
   1d2ee:	4798      	blx	r3
		}

		return pxNewQueue;
   1d2f0:	69bb      	ldr	r3, [r7, #24]
	}
   1d2f2:	0018      	movs	r0, r3
   1d2f4:	46bd      	mov	sp, r7
   1d2f6:	b009      	add	sp, #36	; 0x24
   1d2f8:	bd90      	pop	{r4, r7, pc}
   1d2fa:	46c0      	nop			; (mov r8, r8)
   1d2fc:	0001d0b1 	.word	0x0001d0b1
   1d300:	0001d319 	.word	0x0001d319
   1d304:	0001b211 	.word	0x0001b211
   1d308:	0001af75 	.word	0x0001af75
   1d30c:	2000018c 	.word	0x2000018c
   1d310:	20000180 	.word	0x20000180
   1d314:	0001bc75 	.word	0x0001bc75

0001d318 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1d318:	b5b0      	push	{r4, r5, r7, lr}
   1d31a:	b084      	sub	sp, #16
   1d31c:	af00      	add	r7, sp, #0
   1d31e:	60f8      	str	r0, [r7, #12]
   1d320:	60b9      	str	r1, [r7, #8]
   1d322:	607a      	str	r2, [r7, #4]
   1d324:	001a      	movs	r2, r3
   1d326:	1cfb      	adds	r3, r7, #3
   1d328:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1d32a:	68bb      	ldr	r3, [r7, #8]
   1d32c:	2b00      	cmp	r3, #0
   1d32e:	d103      	bne.n	1d338 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1d330:	6a3b      	ldr	r3, [r7, #32]
   1d332:	6a3a      	ldr	r2, [r7, #32]
   1d334:	601a      	str	r2, [r3, #0]
   1d336:	e002      	b.n	1d33e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1d338:	6a3b      	ldr	r3, [r7, #32]
   1d33a:	687a      	ldr	r2, [r7, #4]
   1d33c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1d33e:	6a3b      	ldr	r3, [r7, #32]
   1d340:	68fa      	ldr	r2, [r7, #12]
   1d342:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1d344:	6a3b      	ldr	r3, [r7, #32]
   1d346:	68ba      	ldr	r2, [r7, #8]
   1d348:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1d34a:	6a3b      	ldr	r3, [r7, #32]
   1d34c:	2101      	movs	r1, #1
   1d34e:	0018      	movs	r0, r3
   1d350:	4b41      	ldr	r3, [pc, #260]	; (1d458 <prvInitialiseNewQueue+0x140>)
   1d352:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1d354:	6a3b      	ldr	r3, [r7, #32]
   1d356:	1cfa      	adds	r2, r7, #3
   1d358:	2150      	movs	r1, #80	; 0x50
   1d35a:	7812      	ldrb	r2, [r2, #0]
   1d35c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1d35e:	6a3b      	ldr	r3, [r7, #32]
   1d360:	2200      	movs	r2, #0
   1d362:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1d364:	6a3b      	ldr	r3, [r7, #32]
   1d366:	0018      	movs	r0, r3
   1d368:	4b3c      	ldr	r3, [pc, #240]	; (1d45c <prvInitialiseNewQueue+0x144>)
   1d36a:	4798      	blx	r3
   1d36c:	0003      	movs	r3, r0
   1d36e:	001a      	movs	r2, r3
   1d370:	4b3b      	ldr	r3, [pc, #236]	; (1d460 <prvInitialiseNewQueue+0x148>)
   1d372:	5c9b      	ldrb	r3, [r3, r2]
   1d374:	0018      	movs	r0, r3
   1d376:	4b3b      	ldr	r3, [pc, #236]	; (1d464 <prvInitialiseNewQueue+0x14c>)
   1d378:	4798      	blx	r3
   1d37a:	0003      	movs	r3, r0
   1d37c:	b29a      	uxth	r2, r3
   1d37e:	6a3b      	ldr	r3, [r7, #32]
   1d380:	0011      	movs	r1, r2
   1d382:	0018      	movs	r0, r3
   1d384:	4b38      	ldr	r3, [pc, #224]	; (1d468 <prvInitialiseNewQueue+0x150>)
   1d386:	4798      	blx	r3
   1d388:	4b38      	ldr	r3, [pc, #224]	; (1d46c <prvInitialiseNewQueue+0x154>)
   1d38a:	881a      	ldrh	r2, [r3, #0]
   1d38c:	6a3b      	ldr	r3, [r7, #32]
   1d38e:	0011      	movs	r1, r2
   1d390:	0018      	movs	r0, r3
   1d392:	4b37      	ldr	r3, [pc, #220]	; (1d470 <prvInitialiseNewQueue+0x158>)
   1d394:	4798      	blx	r3
   1d396:	6a3b      	ldr	r3, [r7, #32]
   1d398:	0018      	movs	r0, r3
   1d39a:	4b30      	ldr	r3, [pc, #192]	; (1d45c <prvInitialiseNewQueue+0x144>)
   1d39c:	4798      	blx	r3
   1d39e:	0003      	movs	r3, r0
   1d3a0:	001a      	movs	r2, r3
   1d3a2:	4b2f      	ldr	r3, [pc, #188]	; (1d460 <prvInitialiseNewQueue+0x148>)
   1d3a4:	5c9c      	ldrb	r4, [r3, r2]
   1d3a6:	6a3b      	ldr	r3, [r7, #32]
   1d3a8:	0018      	movs	r0, r3
   1d3aa:	4b32      	ldr	r3, [pc, #200]	; (1d474 <prvInitialiseNewQueue+0x15c>)
   1d3ac:	4798      	blx	r3
   1d3ae:	0003      	movs	r3, r0
   1d3b0:	b2db      	uxtb	r3, r3
   1d3b2:	0019      	movs	r1, r3
   1d3b4:	0020      	movs	r0, r4
   1d3b6:	4b30      	ldr	r3, [pc, #192]	; (1d478 <prvInitialiseNewQueue+0x160>)
   1d3b8:	4798      	blx	r3
   1d3ba:	4b30      	ldr	r3, [pc, #192]	; (1d47c <prvInitialiseNewQueue+0x164>)
   1d3bc:	4798      	blx	r3
   1d3be:	0003      	movs	r3, r0
   1d3c0:	0018      	movs	r0, r3
   1d3c2:	4b2f      	ldr	r3, [pc, #188]	; (1d480 <prvInitialiseNewQueue+0x168>)
   1d3c4:	4798      	blx	r3
   1d3c6:	0003      	movs	r3, r0
   1d3c8:	001a      	movs	r2, r3
   1d3ca:	4b2e      	ldr	r3, [pc, #184]	; (1d484 <prvInitialiseNewQueue+0x16c>)
   1d3cc:	881b      	ldrh	r3, [r3, #0]
   1d3ce:	4013      	ands	r3, r2
   1d3d0:	b29b      	uxth	r3, r3
   1d3d2:	2b00      	cmp	r3, #0
   1d3d4:	d029      	beq.n	1d42a <prvInitialiseNewQueue+0x112>
   1d3d6:	6a3b      	ldr	r3, [r7, #32]
   1d3d8:	0018      	movs	r0, r3
   1d3da:	4b2b      	ldr	r3, [pc, #172]	; (1d488 <prvInitialiseNewQueue+0x170>)
   1d3dc:	4798      	blx	r3
   1d3de:	0003      	movs	r3, r0
   1d3e0:	001a      	movs	r2, r3
   1d3e2:	4b28      	ldr	r3, [pc, #160]	; (1d484 <prvInitialiseNewQueue+0x16c>)
   1d3e4:	881b      	ldrh	r3, [r3, #0]
   1d3e6:	4013      	ands	r3, r2
   1d3e8:	b29b      	uxth	r3, r3
   1d3ea:	2b00      	cmp	r3, #0
   1d3ec:	d01d      	beq.n	1d42a <prvInitialiseNewQueue+0x112>
   1d3ee:	6a3b      	ldr	r3, [r7, #32]
   1d3f0:	0018      	movs	r0, r3
   1d3f2:	4b1a      	ldr	r3, [pc, #104]	; (1d45c <prvInitialiseNewQueue+0x144>)
   1d3f4:	4798      	blx	r3
   1d3f6:	0003      	movs	r3, r0
   1d3f8:	001a      	movs	r2, r3
   1d3fa:	4b19      	ldr	r3, [pc, #100]	; (1d460 <prvInitialiseNewQueue+0x148>)
   1d3fc:	5c9b      	ldrb	r3, [r3, r2]
   1d3fe:	3318      	adds	r3, #24
   1d400:	b2db      	uxtb	r3, r3
   1d402:	001d      	movs	r5, r3
   1d404:	6a3b      	ldr	r3, [r7, #32]
   1d406:	0018      	movs	r0, r3
   1d408:	4b14      	ldr	r3, [pc, #80]	; (1d45c <prvInitialiseNewQueue+0x144>)
   1d40a:	4798      	blx	r3
   1d40c:	0003      	movs	r3, r0
   1d40e:	001a      	movs	r2, r3
   1d410:	4b13      	ldr	r3, [pc, #76]	; (1d460 <prvInitialiseNewQueue+0x148>)
   1d412:	5c9c      	ldrb	r4, [r3, r2]
   1d414:	6a3b      	ldr	r3, [r7, #32]
   1d416:	0018      	movs	r0, r3
   1d418:	4b16      	ldr	r3, [pc, #88]	; (1d474 <prvInitialiseNewQueue+0x15c>)
   1d41a:	4798      	blx	r3
   1d41c:	0003      	movs	r3, r0
   1d41e:	b2db      	uxtb	r3, r3
   1d420:	001a      	movs	r2, r3
   1d422:	0021      	movs	r1, r4
   1d424:	0028      	movs	r0, r5
   1d426:	4b19      	ldr	r3, [pc, #100]	; (1d48c <prvInitialiseNewQueue+0x174>)
   1d428:	4798      	blx	r3
   1d42a:	6a3b      	ldr	r3, [r7, #32]
   1d42c:	0018      	movs	r0, r3
   1d42e:	4b0b      	ldr	r3, [pc, #44]	; (1d45c <prvInitialiseNewQueue+0x144>)
   1d430:	4798      	blx	r3
   1d432:	0003      	movs	r3, r0
   1d434:	001a      	movs	r2, r3
   1d436:	4b0a      	ldr	r3, [pc, #40]	; (1d460 <prvInitialiseNewQueue+0x148>)
   1d438:	5c9c      	ldrb	r4, [r3, r2]
   1d43a:	6a3b      	ldr	r3, [r7, #32]
   1d43c:	0018      	movs	r0, r3
   1d43e:	4b0d      	ldr	r3, [pc, #52]	; (1d474 <prvInitialiseNewQueue+0x15c>)
   1d440:	4798      	blx	r3
   1d442:	0003      	movs	r3, r0
   1d444:	b2db      	uxtb	r3, r3
   1d446:	2200      	movs	r2, #0
   1d448:	0019      	movs	r1, r3
   1d44a:	0020      	movs	r0, r4
   1d44c:	4b10      	ldr	r3, [pc, #64]	; (1d490 <prvInitialiseNewQueue+0x178>)
   1d44e:	4798      	blx	r3
}
   1d450:	46c0      	nop			; (mov r8, r8)
   1d452:	46bd      	mov	sp, r7
   1d454:	b004      	add	sp, #16
   1d456:	bdb0      	pop	{r4, r5, r7, pc}
   1d458:	0001d1a9 	.word	0x0001d1a9
   1d45c:	0001af35 	.word	0x0001af35
   1d460:	20000180 	.word	0x20000180
   1d464:	0001c4f5 	.word	0x0001c4f5
   1d468:	0001b059 	.word	0x0001b059
   1d46c:	2000018e 	.word	0x2000018e
   1d470:	0001b095 	.word	0x0001b095
   1d474:	0001b015 	.word	0x0001b015
   1d478:	0001c68d 	.word	0x0001c68d
   1d47c:	0001b211 	.word	0x0001b211
   1d480:	0001af75 	.word	0x0001af75
   1d484:	2000018c 	.word	0x2000018c
   1d488:	0001b035 	.word	0x0001b035
   1d48c:	0001b96d 	.word	0x0001b96d
   1d490:	0001bfc9 	.word	0x0001bfc9

0001d494 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1d494:	b590      	push	{r4, r7, lr}
   1d496:	b083      	sub	sp, #12
   1d498:	af00      	add	r7, sp, #0
   1d49a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1d49c:	687b      	ldr	r3, [r7, #4]
   1d49e:	2b00      	cmp	r3, #0
   1d4a0:	d00e      	beq.n	1d4c0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1d4a2:	687b      	ldr	r3, [r7, #4]
   1d4a4:	2200      	movs	r2, #0
   1d4a6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1d4a8:	687b      	ldr	r3, [r7, #4]
   1d4aa:	2200      	movs	r2, #0
   1d4ac:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1d4ae:	687b      	ldr	r3, [r7, #4]
   1d4b0:	2200      	movs	r2, #0
   1d4b2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1d4b4:	6878      	ldr	r0, [r7, #4]
   1d4b6:	2300      	movs	r3, #0
   1d4b8:	2200      	movs	r2, #0
   1d4ba:	2100      	movs	r1, #0
   1d4bc:	4c02      	ldr	r4, [pc, #8]	; (1d4c8 <prvInitialiseMutex+0x34>)
   1d4be:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1d4c0:	46c0      	nop			; (mov r8, r8)
   1d4c2:	46bd      	mov	sp, r7
   1d4c4:	b003      	add	sp, #12
   1d4c6:	bd90      	pop	{r4, r7, pc}
   1d4c8:	0001d50d 	.word	0x0001d50d

0001d4cc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1d4cc:	b580      	push	{r7, lr}
   1d4ce:	b086      	sub	sp, #24
   1d4d0:	af00      	add	r7, sp, #0
   1d4d2:	0002      	movs	r2, r0
   1d4d4:	1dfb      	adds	r3, r7, #7
   1d4d6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1d4d8:	2301      	movs	r3, #1
   1d4da:	617b      	str	r3, [r7, #20]
   1d4dc:	2300      	movs	r3, #0
   1d4de:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1d4e0:	1dfb      	adds	r3, r7, #7
   1d4e2:	781a      	ldrb	r2, [r3, #0]
   1d4e4:	6939      	ldr	r1, [r7, #16]
   1d4e6:	697b      	ldr	r3, [r7, #20]
   1d4e8:	0018      	movs	r0, r3
   1d4ea:	4b06      	ldr	r3, [pc, #24]	; (1d504 <xQueueCreateMutex+0x38>)
   1d4ec:	4798      	blx	r3
   1d4ee:	0003      	movs	r3, r0
   1d4f0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1d4f2:	68fb      	ldr	r3, [r7, #12]
   1d4f4:	0018      	movs	r0, r3
   1d4f6:	4b04      	ldr	r3, [pc, #16]	; (1d508 <xQueueCreateMutex+0x3c>)
   1d4f8:	4798      	blx	r3

		return pxNewQueue;
   1d4fa:	68fb      	ldr	r3, [r7, #12]
	}
   1d4fc:	0018      	movs	r0, r3
   1d4fe:	46bd      	mov	sp, r7
   1d500:	b006      	add	sp, #24
   1d502:	bd80      	pop	{r7, pc}
   1d504:	0001d265 	.word	0x0001d265
   1d508:	0001d495 	.word	0x0001d495

0001d50c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1d50c:	b5b0      	push	{r4, r5, r7, lr}
   1d50e:	b08a      	sub	sp, #40	; 0x28
   1d510:	af00      	add	r7, sp, #0
   1d512:	60f8      	str	r0, [r7, #12]
   1d514:	60b9      	str	r1, [r7, #8]
   1d516:	607a      	str	r2, [r7, #4]
   1d518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1d51a:	2300      	movs	r3, #0
   1d51c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d51e:	68fb      	ldr	r3, [r7, #12]
   1d520:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1d522:	6a3b      	ldr	r3, [r7, #32]
   1d524:	2b00      	cmp	r3, #0
   1d526:	d101      	bne.n	1d52c <xQueueGenericSend+0x20>
   1d528:	b672      	cpsid	i
   1d52a:	e7fe      	b.n	1d52a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d52c:	68bb      	ldr	r3, [r7, #8]
   1d52e:	2b00      	cmp	r3, #0
   1d530:	d103      	bne.n	1d53a <xQueueGenericSend+0x2e>
   1d532:	6a3b      	ldr	r3, [r7, #32]
   1d534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d536:	2b00      	cmp	r3, #0
   1d538:	d101      	bne.n	1d53e <xQueueGenericSend+0x32>
   1d53a:	2301      	movs	r3, #1
   1d53c:	e000      	b.n	1d540 <xQueueGenericSend+0x34>
   1d53e:	2300      	movs	r3, #0
   1d540:	2b00      	cmp	r3, #0
   1d542:	d101      	bne.n	1d548 <xQueueGenericSend+0x3c>
   1d544:	b672      	cpsid	i
   1d546:	e7fe      	b.n	1d546 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1d548:	683b      	ldr	r3, [r7, #0]
   1d54a:	2b02      	cmp	r3, #2
   1d54c:	d103      	bne.n	1d556 <xQueueGenericSend+0x4a>
   1d54e:	6a3b      	ldr	r3, [r7, #32]
   1d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d552:	2b01      	cmp	r3, #1
   1d554:	d101      	bne.n	1d55a <xQueueGenericSend+0x4e>
   1d556:	2301      	movs	r3, #1
   1d558:	e000      	b.n	1d55c <xQueueGenericSend+0x50>
   1d55a:	2300      	movs	r3, #0
   1d55c:	2b00      	cmp	r3, #0
   1d55e:	d101      	bne.n	1d564 <xQueueGenericSend+0x58>
   1d560:	b672      	cpsid	i
   1d562:	e7fe      	b.n	1d562 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1d564:	4bbc      	ldr	r3, [pc, #752]	; (1d858 <xQueueGenericSend+0x34c>)
   1d566:	4798      	blx	r3
   1d568:	1e03      	subs	r3, r0, #0
   1d56a:	d102      	bne.n	1d572 <xQueueGenericSend+0x66>
   1d56c:	687b      	ldr	r3, [r7, #4]
   1d56e:	2b00      	cmp	r3, #0
   1d570:	d101      	bne.n	1d576 <xQueueGenericSend+0x6a>
   1d572:	2301      	movs	r3, #1
   1d574:	e000      	b.n	1d578 <xQueueGenericSend+0x6c>
   1d576:	2300      	movs	r3, #0
   1d578:	2b00      	cmp	r3, #0
   1d57a:	d101      	bne.n	1d580 <xQueueGenericSend+0x74>
   1d57c:	b672      	cpsid	i
   1d57e:	e7fe      	b.n	1d57e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1d580:	4bb6      	ldr	r3, [pc, #728]	; (1d85c <xQueueGenericSend+0x350>)
   1d582:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1d584:	6a3b      	ldr	r3, [r7, #32]
   1d586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1d588:	6a3b      	ldr	r3, [r7, #32]
   1d58a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d58c:	429a      	cmp	r2, r3
   1d58e:	d303      	bcc.n	1d598 <xQueueGenericSend+0x8c>
   1d590:	683b      	ldr	r3, [r7, #0]
   1d592:	2b02      	cmp	r3, #2
   1d594:	d000      	beq.n	1d598 <xQueueGenericSend+0x8c>
   1d596:	e08e      	b.n	1d6b6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1d598:	4bb1      	ldr	r3, [pc, #708]	; (1d860 <xQueueGenericSend+0x354>)
   1d59a:	4798      	blx	r3
   1d59c:	0003      	movs	r3, r0
   1d59e:	0018      	movs	r0, r3
   1d5a0:	4bb0      	ldr	r3, [pc, #704]	; (1d864 <xQueueGenericSend+0x358>)
   1d5a2:	4798      	blx	r3
   1d5a4:	0003      	movs	r3, r0
   1d5a6:	001a      	movs	r2, r3
   1d5a8:	4baf      	ldr	r3, [pc, #700]	; (1d868 <xQueueGenericSend+0x35c>)
   1d5aa:	881b      	ldrh	r3, [r3, #0]
   1d5ac:	4013      	ands	r3, r2
   1d5ae:	b29b      	uxth	r3, r3
   1d5b0:	2b00      	cmp	r3, #0
   1d5b2:	d02e      	beq.n	1d612 <xQueueGenericSend+0x106>
   1d5b4:	6a3b      	ldr	r3, [r7, #32]
   1d5b6:	0018      	movs	r0, r3
   1d5b8:	4bac      	ldr	r3, [pc, #688]	; (1d86c <xQueueGenericSend+0x360>)
   1d5ba:	4798      	blx	r3
   1d5bc:	0003      	movs	r3, r0
   1d5be:	001a      	movs	r2, r3
   1d5c0:	4ba9      	ldr	r3, [pc, #676]	; (1d868 <xQueueGenericSend+0x35c>)
   1d5c2:	881b      	ldrh	r3, [r3, #0]
   1d5c4:	4013      	ands	r3, r2
   1d5c6:	b29b      	uxth	r3, r3
   1d5c8:	2b00      	cmp	r3, #0
   1d5ca:	d022      	beq.n	1d612 <xQueueGenericSend+0x106>
   1d5cc:	683b      	ldr	r3, [r7, #0]
   1d5ce:	2b00      	cmp	r3, #0
   1d5d0:	d10b      	bne.n	1d5ea <xQueueGenericSend+0xde>
   1d5d2:	6a3b      	ldr	r3, [r7, #32]
   1d5d4:	0018      	movs	r0, r3
   1d5d6:	4ba6      	ldr	r3, [pc, #664]	; (1d870 <xQueueGenericSend+0x364>)
   1d5d8:	4798      	blx	r3
   1d5da:	0003      	movs	r3, r0
   1d5dc:	001a      	movs	r2, r3
   1d5de:	4ba5      	ldr	r3, [pc, #660]	; (1d874 <xQueueGenericSend+0x368>)
   1d5e0:	5c9b      	ldrb	r3, [r3, r2]
   1d5e2:	3320      	adds	r3, #32
   1d5e4:	b2db      	uxtb	r3, r3
   1d5e6:	001d      	movs	r5, r3
   1d5e8:	e000      	b.n	1d5ec <xQueueGenericSend+0xe0>
   1d5ea:	2525      	movs	r5, #37	; 0x25
   1d5ec:	6a3b      	ldr	r3, [r7, #32]
   1d5ee:	0018      	movs	r0, r3
   1d5f0:	4b9f      	ldr	r3, [pc, #636]	; (1d870 <xQueueGenericSend+0x364>)
   1d5f2:	4798      	blx	r3
   1d5f4:	0003      	movs	r3, r0
   1d5f6:	001a      	movs	r2, r3
   1d5f8:	4b9e      	ldr	r3, [pc, #632]	; (1d874 <xQueueGenericSend+0x368>)
   1d5fa:	5c9c      	ldrb	r4, [r3, r2]
   1d5fc:	6a3b      	ldr	r3, [r7, #32]
   1d5fe:	0018      	movs	r0, r3
   1d600:	4b9d      	ldr	r3, [pc, #628]	; (1d878 <xQueueGenericSend+0x36c>)
   1d602:	4798      	blx	r3
   1d604:	0003      	movs	r3, r0
   1d606:	b2db      	uxtb	r3, r3
   1d608:	001a      	movs	r2, r3
   1d60a:	0021      	movs	r1, r4
   1d60c:	0028      	movs	r0, r5
   1d60e:	4b9b      	ldr	r3, [pc, #620]	; (1d87c <xQueueGenericSend+0x370>)
   1d610:	4798      	blx	r3
   1d612:	6a3b      	ldr	r3, [r7, #32]
   1d614:	0018      	movs	r0, r3
   1d616:	4b96      	ldr	r3, [pc, #600]	; (1d870 <xQueueGenericSend+0x364>)
   1d618:	4798      	blx	r3
   1d61a:	0003      	movs	r3, r0
   1d61c:	001a      	movs	r2, r3
   1d61e:	4b95      	ldr	r3, [pc, #596]	; (1d874 <xQueueGenericSend+0x368>)
   1d620:	5c9c      	ldrb	r4, [r3, r2]
   1d622:	6a3b      	ldr	r3, [r7, #32]
   1d624:	0018      	movs	r0, r3
   1d626:	4b94      	ldr	r3, [pc, #592]	; (1d878 <xQueueGenericSend+0x36c>)
   1d628:	4798      	blx	r3
   1d62a:	0003      	movs	r3, r0
   1d62c:	b2dd      	uxtb	r5, r3
   1d62e:	6a3b      	ldr	r3, [r7, #32]
   1d630:	0018      	movs	r0, r3
   1d632:	4b8f      	ldr	r3, [pc, #572]	; (1d870 <xQueueGenericSend+0x364>)
   1d634:	4798      	blx	r3
   1d636:	0003      	movs	r3, r0
   1d638:	001a      	movs	r2, r3
   1d63a:	4b8e      	ldr	r3, [pc, #568]	; (1d874 <xQueueGenericSend+0x368>)
   1d63c:	5c9b      	ldrb	r3, [r3, r2]
   1d63e:	2b02      	cmp	r3, #2
   1d640:	d005      	beq.n	1d64e <xQueueGenericSend+0x142>
   1d642:	6a3b      	ldr	r3, [r7, #32]
   1d644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1d646:	b2db      	uxtb	r3, r3
   1d648:	3301      	adds	r3, #1
   1d64a:	b2db      	uxtb	r3, r3
   1d64c:	e000      	b.n	1d650 <xQueueGenericSend+0x144>
   1d64e:	2300      	movs	r3, #0
   1d650:	001a      	movs	r2, r3
   1d652:	0029      	movs	r1, r5
   1d654:	0020      	movs	r0, r4
   1d656:	4b8a      	ldr	r3, [pc, #552]	; (1d880 <xQueueGenericSend+0x374>)
   1d658:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1d65a:	683a      	ldr	r2, [r7, #0]
   1d65c:	68b9      	ldr	r1, [r7, #8]
   1d65e:	6a3b      	ldr	r3, [r7, #32]
   1d660:	0018      	movs	r0, r3
   1d662:	4b88      	ldr	r3, [pc, #544]	; (1d884 <xQueueGenericSend+0x378>)
   1d664:	4798      	blx	r3
   1d666:	0003      	movs	r3, r0
   1d668:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1d66a:	6a3b      	ldr	r3, [r7, #32]
   1d66c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d66e:	2b00      	cmp	r3, #0
   1d670:	d00a      	beq.n	1d688 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1d672:	683a      	ldr	r2, [r7, #0]
   1d674:	6a3b      	ldr	r3, [r7, #32]
   1d676:	0011      	movs	r1, r2
   1d678:	0018      	movs	r0, r3
   1d67a:	4b83      	ldr	r3, [pc, #524]	; (1d888 <xQueueGenericSend+0x37c>)
   1d67c:	4798      	blx	r3
   1d67e:	1e03      	subs	r3, r0, #0
   1d680:	d015      	beq.n	1d6ae <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1d682:	4b82      	ldr	r3, [pc, #520]	; (1d88c <xQueueGenericSend+0x380>)
   1d684:	4798      	blx	r3
   1d686:	e012      	b.n	1d6ae <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1d688:	6a3b      	ldr	r3, [r7, #32]
   1d68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d68c:	2b00      	cmp	r3, #0
   1d68e:	d009      	beq.n	1d6a4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1d690:	6a3b      	ldr	r3, [r7, #32]
   1d692:	3324      	adds	r3, #36	; 0x24
   1d694:	0018      	movs	r0, r3
   1d696:	4b7e      	ldr	r3, [pc, #504]	; (1d890 <xQueueGenericSend+0x384>)
   1d698:	4798      	blx	r3
   1d69a:	1e03      	subs	r3, r0, #0
   1d69c:	d007      	beq.n	1d6ae <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1d69e:	4b7b      	ldr	r3, [pc, #492]	; (1d88c <xQueueGenericSend+0x380>)
   1d6a0:	4798      	blx	r3
   1d6a2:	e004      	b.n	1d6ae <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1d6a4:	69fb      	ldr	r3, [r7, #28]
   1d6a6:	2b00      	cmp	r3, #0
   1d6a8:	d001      	beq.n	1d6ae <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1d6aa:	4b78      	ldr	r3, [pc, #480]	; (1d88c <xQueueGenericSend+0x380>)
   1d6ac:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1d6ae:	4b79      	ldr	r3, [pc, #484]	; (1d894 <xQueueGenericSend+0x388>)
   1d6b0:	4798      	blx	r3
				return pdPASS;
   1d6b2:	2301      	movs	r3, #1
   1d6b4:	e142      	b.n	1d93c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1d6b6:	687b      	ldr	r3, [r7, #4]
   1d6b8:	2b00      	cmp	r3, #0
   1d6ba:	d140      	bne.n	1d73e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1d6bc:	4b75      	ldr	r3, [pc, #468]	; (1d894 <xQueueGenericSend+0x388>)
   1d6be:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1d6c0:	4b67      	ldr	r3, [pc, #412]	; (1d860 <xQueueGenericSend+0x354>)
   1d6c2:	4798      	blx	r3
   1d6c4:	0003      	movs	r3, r0
   1d6c6:	0018      	movs	r0, r3
   1d6c8:	4b66      	ldr	r3, [pc, #408]	; (1d864 <xQueueGenericSend+0x358>)
   1d6ca:	4798      	blx	r3
   1d6cc:	0003      	movs	r3, r0
   1d6ce:	001a      	movs	r2, r3
   1d6d0:	4b65      	ldr	r3, [pc, #404]	; (1d868 <xQueueGenericSend+0x35c>)
   1d6d2:	881b      	ldrh	r3, [r3, #0]
   1d6d4:	4013      	ands	r3, r2
   1d6d6:	b29b      	uxth	r3, r3
   1d6d8:	2b00      	cmp	r3, #0
   1d6da:	d02e      	beq.n	1d73a <xQueueGenericSend+0x22e>
   1d6dc:	6a3b      	ldr	r3, [r7, #32]
   1d6de:	0018      	movs	r0, r3
   1d6e0:	4b62      	ldr	r3, [pc, #392]	; (1d86c <xQueueGenericSend+0x360>)
   1d6e2:	4798      	blx	r3
   1d6e4:	0003      	movs	r3, r0
   1d6e6:	001a      	movs	r2, r3
   1d6e8:	4b5f      	ldr	r3, [pc, #380]	; (1d868 <xQueueGenericSend+0x35c>)
   1d6ea:	881b      	ldrh	r3, [r3, #0]
   1d6ec:	4013      	ands	r3, r2
   1d6ee:	b29b      	uxth	r3, r3
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	d022      	beq.n	1d73a <xQueueGenericSend+0x22e>
   1d6f4:	683b      	ldr	r3, [r7, #0]
   1d6f6:	2b00      	cmp	r3, #0
   1d6f8:	d10b      	bne.n	1d712 <xQueueGenericSend+0x206>
   1d6fa:	6a3b      	ldr	r3, [r7, #32]
   1d6fc:	0018      	movs	r0, r3
   1d6fe:	4b5c      	ldr	r3, [pc, #368]	; (1d870 <xQueueGenericSend+0x364>)
   1d700:	4798      	blx	r3
   1d702:	0003      	movs	r3, r0
   1d704:	001a      	movs	r2, r3
   1d706:	4b5b      	ldr	r3, [pc, #364]	; (1d874 <xQueueGenericSend+0x368>)
   1d708:	5c9b      	ldrb	r3, [r3, r2]
   1d70a:	3348      	adds	r3, #72	; 0x48
   1d70c:	b2db      	uxtb	r3, r3
   1d70e:	001d      	movs	r5, r3
   1d710:	e000      	b.n	1d714 <xQueueGenericSend+0x208>
   1d712:	254d      	movs	r5, #77	; 0x4d
   1d714:	6a3b      	ldr	r3, [r7, #32]
   1d716:	0018      	movs	r0, r3
   1d718:	4b55      	ldr	r3, [pc, #340]	; (1d870 <xQueueGenericSend+0x364>)
   1d71a:	4798      	blx	r3
   1d71c:	0003      	movs	r3, r0
   1d71e:	001a      	movs	r2, r3
   1d720:	4b54      	ldr	r3, [pc, #336]	; (1d874 <xQueueGenericSend+0x368>)
   1d722:	5c9c      	ldrb	r4, [r3, r2]
   1d724:	6a3b      	ldr	r3, [r7, #32]
   1d726:	0018      	movs	r0, r3
   1d728:	4b53      	ldr	r3, [pc, #332]	; (1d878 <xQueueGenericSend+0x36c>)
   1d72a:	4798      	blx	r3
   1d72c:	0003      	movs	r3, r0
   1d72e:	b2db      	uxtb	r3, r3
   1d730:	001a      	movs	r2, r3
   1d732:	0021      	movs	r1, r4
   1d734:	0028      	movs	r0, r5
   1d736:	4b51      	ldr	r3, [pc, #324]	; (1d87c <xQueueGenericSend+0x370>)
   1d738:	4798      	blx	r3
					return errQUEUE_FULL;
   1d73a:	2300      	movs	r3, #0
   1d73c:	e0fe      	b.n	1d93c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1d740:	2b00      	cmp	r3, #0
   1d742:	d106      	bne.n	1d752 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1d744:	2314      	movs	r3, #20
   1d746:	18fb      	adds	r3, r7, r3
   1d748:	0018      	movs	r0, r3
   1d74a:	4b53      	ldr	r3, [pc, #332]	; (1d898 <xQueueGenericSend+0x38c>)
   1d74c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1d74e:	2301      	movs	r3, #1
   1d750:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1d752:	4b50      	ldr	r3, [pc, #320]	; (1d894 <xQueueGenericSend+0x388>)
   1d754:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1d756:	4b51      	ldr	r3, [pc, #324]	; (1d89c <xQueueGenericSend+0x390>)
   1d758:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1d75a:	4b40      	ldr	r3, [pc, #256]	; (1d85c <xQueueGenericSend+0x350>)
   1d75c:	4798      	blx	r3
   1d75e:	6a3b      	ldr	r3, [r7, #32]
   1d760:	2244      	movs	r2, #68	; 0x44
   1d762:	5c9b      	ldrb	r3, [r3, r2]
   1d764:	b25b      	sxtb	r3, r3
   1d766:	3301      	adds	r3, #1
   1d768:	d103      	bne.n	1d772 <xQueueGenericSend+0x266>
   1d76a:	6a3b      	ldr	r3, [r7, #32]
   1d76c:	2244      	movs	r2, #68	; 0x44
   1d76e:	2100      	movs	r1, #0
   1d770:	5499      	strb	r1, [r3, r2]
   1d772:	6a3b      	ldr	r3, [r7, #32]
   1d774:	2245      	movs	r2, #69	; 0x45
   1d776:	5c9b      	ldrb	r3, [r3, r2]
   1d778:	b25b      	sxtb	r3, r3
   1d77a:	3301      	adds	r3, #1
   1d77c:	d103      	bne.n	1d786 <xQueueGenericSend+0x27a>
   1d77e:	6a3b      	ldr	r3, [r7, #32]
   1d780:	2245      	movs	r2, #69	; 0x45
   1d782:	2100      	movs	r1, #0
   1d784:	5499      	strb	r1, [r3, r2]
   1d786:	4b43      	ldr	r3, [pc, #268]	; (1d894 <xQueueGenericSend+0x388>)
   1d788:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1d78a:	1d3a      	adds	r2, r7, #4
   1d78c:	2314      	movs	r3, #20
   1d78e:	18fb      	adds	r3, r7, r3
   1d790:	0011      	movs	r1, r2
   1d792:	0018      	movs	r0, r3
   1d794:	4b42      	ldr	r3, [pc, #264]	; (1d8a0 <xQueueGenericSend+0x394>)
   1d796:	4798      	blx	r3
   1d798:	1e03      	subs	r3, r0, #0
   1d79a:	d000      	beq.n	1d79e <xQueueGenericSend+0x292>
   1d79c:	e08a      	b.n	1d8b4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1d79e:	6a3b      	ldr	r3, [r7, #32]
   1d7a0:	0018      	movs	r0, r3
   1d7a2:	4b40      	ldr	r3, [pc, #256]	; (1d8a4 <xQueueGenericSend+0x398>)
   1d7a4:	4798      	blx	r3
   1d7a6:	1e03      	subs	r3, r0, #0
   1d7a8:	d04f      	beq.n	1d84a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1d7aa:	4b2d      	ldr	r3, [pc, #180]	; (1d860 <xQueueGenericSend+0x354>)
   1d7ac:	4798      	blx	r3
   1d7ae:	0003      	movs	r3, r0
   1d7b0:	0018      	movs	r0, r3
   1d7b2:	4b2c      	ldr	r3, [pc, #176]	; (1d864 <xQueueGenericSend+0x358>)
   1d7b4:	4798      	blx	r3
   1d7b6:	0003      	movs	r3, r0
   1d7b8:	001a      	movs	r2, r3
   1d7ba:	4b2b      	ldr	r3, [pc, #172]	; (1d868 <xQueueGenericSend+0x35c>)
   1d7bc:	881b      	ldrh	r3, [r3, #0]
   1d7be:	4013      	ands	r3, r2
   1d7c0:	b29b      	uxth	r3, r3
   1d7c2:	2b00      	cmp	r3, #0
   1d7c4:	d02e      	beq.n	1d824 <xQueueGenericSend+0x318>
   1d7c6:	6a3b      	ldr	r3, [r7, #32]
   1d7c8:	0018      	movs	r0, r3
   1d7ca:	4b28      	ldr	r3, [pc, #160]	; (1d86c <xQueueGenericSend+0x360>)
   1d7cc:	4798      	blx	r3
   1d7ce:	0003      	movs	r3, r0
   1d7d0:	001a      	movs	r2, r3
   1d7d2:	4b25      	ldr	r3, [pc, #148]	; (1d868 <xQueueGenericSend+0x35c>)
   1d7d4:	881b      	ldrh	r3, [r3, #0]
   1d7d6:	4013      	ands	r3, r2
   1d7d8:	b29b      	uxth	r3, r3
   1d7da:	2b00      	cmp	r3, #0
   1d7dc:	d022      	beq.n	1d824 <xQueueGenericSend+0x318>
   1d7de:	683b      	ldr	r3, [r7, #0]
   1d7e0:	2b00      	cmp	r3, #0
   1d7e2:	d10b      	bne.n	1d7fc <xQueueGenericSend+0x2f0>
   1d7e4:	6a3b      	ldr	r3, [r7, #32]
   1d7e6:	0018      	movs	r0, r3
   1d7e8:	4b21      	ldr	r3, [pc, #132]	; (1d870 <xQueueGenericSend+0x364>)
   1d7ea:	4798      	blx	r3
   1d7ec:	0003      	movs	r3, r0
   1d7ee:	001a      	movs	r2, r3
   1d7f0:	4b20      	ldr	r3, [pc, #128]	; (1d874 <xQueueGenericSend+0x368>)
   1d7f2:	5c9b      	ldrb	r3, [r3, r2]
   1d7f4:	3370      	adds	r3, #112	; 0x70
   1d7f6:	b2db      	uxtb	r3, r3
   1d7f8:	001d      	movs	r5, r3
   1d7fa:	e000      	b.n	1d7fe <xQueueGenericSend+0x2f2>
   1d7fc:	2575      	movs	r5, #117	; 0x75
   1d7fe:	6a3b      	ldr	r3, [r7, #32]
   1d800:	0018      	movs	r0, r3
   1d802:	4b1b      	ldr	r3, [pc, #108]	; (1d870 <xQueueGenericSend+0x364>)
   1d804:	4798      	blx	r3
   1d806:	0003      	movs	r3, r0
   1d808:	001a      	movs	r2, r3
   1d80a:	4b1a      	ldr	r3, [pc, #104]	; (1d874 <xQueueGenericSend+0x368>)
   1d80c:	5c9c      	ldrb	r4, [r3, r2]
   1d80e:	6a3b      	ldr	r3, [r7, #32]
   1d810:	0018      	movs	r0, r3
   1d812:	4b19      	ldr	r3, [pc, #100]	; (1d878 <xQueueGenericSend+0x36c>)
   1d814:	4798      	blx	r3
   1d816:	0003      	movs	r3, r0
   1d818:	b2db      	uxtb	r3, r3
   1d81a:	001a      	movs	r2, r3
   1d81c:	0021      	movs	r1, r4
   1d81e:	0028      	movs	r0, r5
   1d820:	4b16      	ldr	r3, [pc, #88]	; (1d87c <xQueueGenericSend+0x370>)
   1d822:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1d824:	6a3b      	ldr	r3, [r7, #32]
   1d826:	3310      	adds	r3, #16
   1d828:	687a      	ldr	r2, [r7, #4]
   1d82a:	0011      	movs	r1, r2
   1d82c:	0018      	movs	r0, r3
   1d82e:	4b1e      	ldr	r3, [pc, #120]	; (1d8a8 <xQueueGenericSend+0x39c>)
   1d830:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1d832:	6a3b      	ldr	r3, [r7, #32]
   1d834:	0018      	movs	r0, r3
   1d836:	4b1d      	ldr	r3, [pc, #116]	; (1d8ac <xQueueGenericSend+0x3a0>)
   1d838:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1d83a:	4b1d      	ldr	r3, [pc, #116]	; (1d8b0 <xQueueGenericSend+0x3a4>)
   1d83c:	4798      	blx	r3
   1d83e:	1e03      	subs	r3, r0, #0
   1d840:	d000      	beq.n	1d844 <xQueueGenericSend+0x338>
   1d842:	e69d      	b.n	1d580 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1d844:	4b11      	ldr	r3, [pc, #68]	; (1d88c <xQueueGenericSend+0x380>)
   1d846:	4798      	blx	r3
   1d848:	e69a      	b.n	1d580 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1d84a:	6a3b      	ldr	r3, [r7, #32]
   1d84c:	0018      	movs	r0, r3
   1d84e:	4b17      	ldr	r3, [pc, #92]	; (1d8ac <xQueueGenericSend+0x3a0>)
   1d850:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1d852:	4b17      	ldr	r3, [pc, #92]	; (1d8b0 <xQueueGenericSend+0x3a4>)
   1d854:	4798      	blx	r3
   1d856:	e693      	b.n	1d580 <xQueueGenericSend+0x74>
   1d858:	0001fc99 	.word	0x0001fc99
   1d85c:	0001cf79 	.word	0x0001cf79
   1d860:	0001b211 	.word	0x0001b211
   1d864:	0001af75 	.word	0x0001af75
   1d868:	2000018c 	.word	0x2000018c
   1d86c:	0001b035 	.word	0x0001b035
   1d870:	0001af35 	.word	0x0001af35
   1d874:	20000180 	.word	0x20000180
   1d878:	0001b015 	.word	0x0001b015
   1d87c:	0001b96d 	.word	0x0001b96d
   1d880:	0001bfc9 	.word	0x0001bfc9
   1d884:	0001e745 	.word	0x0001e745
   1d888:	0001ea49 	.word	0x0001ea49
   1d88c:	0001cf61 	.word	0x0001cf61
   1d890:	0001f809 	.word	0x0001f809
   1d894:	0001cf9d 	.word	0x0001cf9d
   1d898:	0001f949 	.word	0x0001f949
   1d89c:	0001f231 	.word	0x0001f231
   1d8a0:	0001f971 	.word	0x0001f971
   1d8a4:	0001e999 	.word	0x0001e999
   1d8a8:	0001f6e5 	.word	0x0001f6e5
   1d8ac:	0001e875 	.word	0x0001e875
   1d8b0:	0001f249 	.word	0x0001f249
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1d8b4:	6a3b      	ldr	r3, [r7, #32]
   1d8b6:	0018      	movs	r0, r3
   1d8b8:	4b22      	ldr	r3, [pc, #136]	; (1d944 <xQueueGenericSend+0x438>)
   1d8ba:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1d8bc:	4b22      	ldr	r3, [pc, #136]	; (1d948 <xQueueGenericSend+0x43c>)
   1d8be:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1d8c0:	4b22      	ldr	r3, [pc, #136]	; (1d94c <xQueueGenericSend+0x440>)
   1d8c2:	4798      	blx	r3
   1d8c4:	0003      	movs	r3, r0
   1d8c6:	0018      	movs	r0, r3
   1d8c8:	4b21      	ldr	r3, [pc, #132]	; (1d950 <xQueueGenericSend+0x444>)
   1d8ca:	4798      	blx	r3
   1d8cc:	0003      	movs	r3, r0
   1d8ce:	001a      	movs	r2, r3
   1d8d0:	4b20      	ldr	r3, [pc, #128]	; (1d954 <xQueueGenericSend+0x448>)
   1d8d2:	881b      	ldrh	r3, [r3, #0]
   1d8d4:	4013      	ands	r3, r2
   1d8d6:	b29b      	uxth	r3, r3
   1d8d8:	2b00      	cmp	r3, #0
   1d8da:	d02e      	beq.n	1d93a <xQueueGenericSend+0x42e>
   1d8dc:	6a3b      	ldr	r3, [r7, #32]
   1d8de:	0018      	movs	r0, r3
   1d8e0:	4b1d      	ldr	r3, [pc, #116]	; (1d958 <xQueueGenericSend+0x44c>)
   1d8e2:	4798      	blx	r3
   1d8e4:	0003      	movs	r3, r0
   1d8e6:	001a      	movs	r2, r3
   1d8e8:	4b1a      	ldr	r3, [pc, #104]	; (1d954 <xQueueGenericSend+0x448>)
   1d8ea:	881b      	ldrh	r3, [r3, #0]
   1d8ec:	4013      	ands	r3, r2
   1d8ee:	b29b      	uxth	r3, r3
   1d8f0:	2b00      	cmp	r3, #0
   1d8f2:	d022      	beq.n	1d93a <xQueueGenericSend+0x42e>
   1d8f4:	683b      	ldr	r3, [r7, #0]
   1d8f6:	2b00      	cmp	r3, #0
   1d8f8:	d10b      	bne.n	1d912 <xQueueGenericSend+0x406>
   1d8fa:	6a3b      	ldr	r3, [r7, #32]
   1d8fc:	0018      	movs	r0, r3
   1d8fe:	4b17      	ldr	r3, [pc, #92]	; (1d95c <xQueueGenericSend+0x450>)
   1d900:	4798      	blx	r3
   1d902:	0003      	movs	r3, r0
   1d904:	001a      	movs	r2, r3
   1d906:	4b16      	ldr	r3, [pc, #88]	; (1d960 <xQueueGenericSend+0x454>)
   1d908:	5c9b      	ldrb	r3, [r3, r2]
   1d90a:	3348      	adds	r3, #72	; 0x48
   1d90c:	b2db      	uxtb	r3, r3
   1d90e:	001d      	movs	r5, r3
   1d910:	e000      	b.n	1d914 <xQueueGenericSend+0x408>
   1d912:	254d      	movs	r5, #77	; 0x4d
   1d914:	6a3b      	ldr	r3, [r7, #32]
   1d916:	0018      	movs	r0, r3
   1d918:	4b10      	ldr	r3, [pc, #64]	; (1d95c <xQueueGenericSend+0x450>)
   1d91a:	4798      	blx	r3
   1d91c:	0003      	movs	r3, r0
   1d91e:	001a      	movs	r2, r3
   1d920:	4b0f      	ldr	r3, [pc, #60]	; (1d960 <xQueueGenericSend+0x454>)
   1d922:	5c9c      	ldrb	r4, [r3, r2]
   1d924:	6a3b      	ldr	r3, [r7, #32]
   1d926:	0018      	movs	r0, r3
   1d928:	4b0e      	ldr	r3, [pc, #56]	; (1d964 <xQueueGenericSend+0x458>)
   1d92a:	4798      	blx	r3
   1d92c:	0003      	movs	r3, r0
   1d92e:	b2db      	uxtb	r3, r3
   1d930:	001a      	movs	r2, r3
   1d932:	0021      	movs	r1, r4
   1d934:	0028      	movs	r0, r5
   1d936:	4b0c      	ldr	r3, [pc, #48]	; (1d968 <xQueueGenericSend+0x45c>)
   1d938:	4798      	blx	r3
			return errQUEUE_FULL;
   1d93a:	2300      	movs	r3, #0
		}
	}
}
   1d93c:	0018      	movs	r0, r3
   1d93e:	46bd      	mov	sp, r7
   1d940:	b00a      	add	sp, #40	; 0x28
   1d942:	bdb0      	pop	{r4, r5, r7, pc}
   1d944:	0001e875 	.word	0x0001e875
   1d948:	0001f249 	.word	0x0001f249
   1d94c:	0001b211 	.word	0x0001b211
   1d950:	0001af75 	.word	0x0001af75
   1d954:	2000018c 	.word	0x2000018c
   1d958:	0001b035 	.word	0x0001b035
   1d95c:	0001af35 	.word	0x0001af35
   1d960:	20000180 	.word	0x20000180
   1d964:	0001b015 	.word	0x0001b015
   1d968:	0001b96d 	.word	0x0001b96d

0001d96c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1d96c:	b5b0      	push	{r4, r5, r7, lr}
   1d96e:	b088      	sub	sp, #32
   1d970:	af00      	add	r7, sp, #0
   1d972:	60f8      	str	r0, [r7, #12]
   1d974:	60b9      	str	r1, [r7, #8]
   1d976:	607a      	str	r2, [r7, #4]
   1d978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1d97a:	68fb      	ldr	r3, [r7, #12]
   1d97c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1d97e:	69bb      	ldr	r3, [r7, #24]
   1d980:	2b00      	cmp	r3, #0
   1d982:	d101      	bne.n	1d988 <xQueueGenericSendFromISR+0x1c>
   1d984:	b672      	cpsid	i
   1d986:	e7fe      	b.n	1d986 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1d988:	68bb      	ldr	r3, [r7, #8]
   1d98a:	2b00      	cmp	r3, #0
   1d98c:	d103      	bne.n	1d996 <xQueueGenericSendFromISR+0x2a>
   1d98e:	69bb      	ldr	r3, [r7, #24]
   1d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d992:	2b00      	cmp	r3, #0
   1d994:	d101      	bne.n	1d99a <xQueueGenericSendFromISR+0x2e>
   1d996:	2301      	movs	r3, #1
   1d998:	e000      	b.n	1d99c <xQueueGenericSendFromISR+0x30>
   1d99a:	2300      	movs	r3, #0
   1d99c:	2b00      	cmp	r3, #0
   1d99e:	d101      	bne.n	1d9a4 <xQueueGenericSendFromISR+0x38>
   1d9a0:	b672      	cpsid	i
   1d9a2:	e7fe      	b.n	1d9a2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1d9a4:	683b      	ldr	r3, [r7, #0]
   1d9a6:	2b02      	cmp	r3, #2
   1d9a8:	d103      	bne.n	1d9b2 <xQueueGenericSendFromISR+0x46>
   1d9aa:	69bb      	ldr	r3, [r7, #24]
   1d9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d9ae:	2b01      	cmp	r3, #1
   1d9b0:	d101      	bne.n	1d9b6 <xQueueGenericSendFromISR+0x4a>
   1d9b2:	2301      	movs	r3, #1
   1d9b4:	e000      	b.n	1d9b8 <xQueueGenericSendFromISR+0x4c>
   1d9b6:	2300      	movs	r3, #0
   1d9b8:	2b00      	cmp	r3, #0
   1d9ba:	d101      	bne.n	1d9c0 <xQueueGenericSendFromISR+0x54>
   1d9bc:	b672      	cpsid	i
   1d9be:	e7fe      	b.n	1d9be <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1d9c0:	4b68      	ldr	r3, [pc, #416]	; (1db64 <xQueueGenericSendFromISR+0x1f8>)
   1d9c2:	4798      	blx	r3
   1d9c4:	0003      	movs	r3, r0
   1d9c6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1d9c8:	69bb      	ldr	r3, [r7, #24]
   1d9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1d9cc:	69bb      	ldr	r3, [r7, #24]
   1d9ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1d9d0:	429a      	cmp	r2, r3
   1d9d2:	d303      	bcc.n	1d9dc <xQueueGenericSendFromISR+0x70>
   1d9d4:	683b      	ldr	r3, [r7, #0]
   1d9d6:	2b02      	cmp	r3, #2
   1d9d8:	d000      	beq.n	1d9dc <xQueueGenericSendFromISR+0x70>
   1d9da:	e088      	b.n	1daee <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1d9dc:	2313      	movs	r3, #19
   1d9de:	18fb      	adds	r3, r7, r3
   1d9e0:	69ba      	ldr	r2, [r7, #24]
   1d9e2:	2145      	movs	r1, #69	; 0x45
   1d9e4:	5c52      	ldrb	r2, [r2, r1]
   1d9e6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1d9e8:	69bb      	ldr	r3, [r7, #24]
   1d9ea:	0018      	movs	r0, r3
   1d9ec:	4b5e      	ldr	r3, [pc, #376]	; (1db68 <xQueueGenericSendFromISR+0x1fc>)
   1d9ee:	4798      	blx	r3
   1d9f0:	0003      	movs	r3, r0
   1d9f2:	001a      	movs	r2, r3
   1d9f4:	4b5d      	ldr	r3, [pc, #372]	; (1db6c <xQueueGenericSendFromISR+0x200>)
   1d9f6:	881b      	ldrh	r3, [r3, #0]
   1d9f8:	4013      	ands	r3, r2
   1d9fa:	b29b      	uxth	r3, r3
   1d9fc:	2b00      	cmp	r3, #0
   1d9fe:	d022      	beq.n	1da46 <xQueueGenericSendFromISR+0xda>
   1da00:	683b      	ldr	r3, [r7, #0]
   1da02:	2b00      	cmp	r3, #0
   1da04:	d10b      	bne.n	1da1e <xQueueGenericSendFromISR+0xb2>
   1da06:	69bb      	ldr	r3, [r7, #24]
   1da08:	0018      	movs	r0, r3
   1da0a:	4b59      	ldr	r3, [pc, #356]	; (1db70 <xQueueGenericSendFromISR+0x204>)
   1da0c:	4798      	blx	r3
   1da0e:	0003      	movs	r3, r0
   1da10:	001a      	movs	r2, r3
   1da12:	4b58      	ldr	r3, [pc, #352]	; (1db74 <xQueueGenericSendFromISR+0x208>)
   1da14:	5c9b      	ldrb	r3, [r3, r2]
   1da16:	3330      	adds	r3, #48	; 0x30
   1da18:	b2db      	uxtb	r3, r3
   1da1a:	001d      	movs	r5, r3
   1da1c:	e000      	b.n	1da20 <xQueueGenericSendFromISR+0xb4>
   1da1e:	2535      	movs	r5, #53	; 0x35
   1da20:	69bb      	ldr	r3, [r7, #24]
   1da22:	0018      	movs	r0, r3
   1da24:	4b52      	ldr	r3, [pc, #328]	; (1db70 <xQueueGenericSendFromISR+0x204>)
   1da26:	4798      	blx	r3
   1da28:	0003      	movs	r3, r0
   1da2a:	001a      	movs	r2, r3
   1da2c:	4b51      	ldr	r3, [pc, #324]	; (1db74 <xQueueGenericSendFromISR+0x208>)
   1da2e:	5c9c      	ldrb	r4, [r3, r2]
   1da30:	69bb      	ldr	r3, [r7, #24]
   1da32:	0018      	movs	r0, r3
   1da34:	4b50      	ldr	r3, [pc, #320]	; (1db78 <xQueueGenericSendFromISR+0x20c>)
   1da36:	4798      	blx	r3
   1da38:	0003      	movs	r3, r0
   1da3a:	b2db      	uxtb	r3, r3
   1da3c:	001a      	movs	r2, r3
   1da3e:	0021      	movs	r1, r4
   1da40:	0028      	movs	r0, r5
   1da42:	4b4e      	ldr	r3, [pc, #312]	; (1db7c <xQueueGenericSendFromISR+0x210>)
   1da44:	4798      	blx	r3
   1da46:	69bb      	ldr	r3, [r7, #24]
   1da48:	0018      	movs	r0, r3
   1da4a:	4b49      	ldr	r3, [pc, #292]	; (1db70 <xQueueGenericSendFromISR+0x204>)
   1da4c:	4798      	blx	r3
   1da4e:	0003      	movs	r3, r0
   1da50:	001a      	movs	r2, r3
   1da52:	4b48      	ldr	r3, [pc, #288]	; (1db74 <xQueueGenericSendFromISR+0x208>)
   1da54:	5c9c      	ldrb	r4, [r3, r2]
   1da56:	69bb      	ldr	r3, [r7, #24]
   1da58:	0018      	movs	r0, r3
   1da5a:	4b47      	ldr	r3, [pc, #284]	; (1db78 <xQueueGenericSendFromISR+0x20c>)
   1da5c:	4798      	blx	r3
   1da5e:	0003      	movs	r3, r0
   1da60:	b2d9      	uxtb	r1, r3
   1da62:	69bb      	ldr	r3, [r7, #24]
   1da64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1da66:	b2db      	uxtb	r3, r3
   1da68:	3301      	adds	r3, #1
   1da6a:	b2db      	uxtb	r3, r3
   1da6c:	001a      	movs	r2, r3
   1da6e:	0020      	movs	r0, r4
   1da70:	4b43      	ldr	r3, [pc, #268]	; (1db80 <xQueueGenericSendFromISR+0x214>)
   1da72:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1da74:	683a      	ldr	r2, [r7, #0]
   1da76:	68b9      	ldr	r1, [r7, #8]
   1da78:	69bb      	ldr	r3, [r7, #24]
   1da7a:	0018      	movs	r0, r3
   1da7c:	4b41      	ldr	r3, [pc, #260]	; (1db84 <xQueueGenericSendFromISR+0x218>)
   1da7e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1da80:	2313      	movs	r3, #19
   1da82:	18fb      	adds	r3, r7, r3
   1da84:	781b      	ldrb	r3, [r3, #0]
   1da86:	b25b      	sxtb	r3, r3
   1da88:	3301      	adds	r3, #1
   1da8a:	d124      	bne.n	1dad6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1da8c:	69bb      	ldr	r3, [r7, #24]
   1da8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1da90:	2b00      	cmp	r3, #0
   1da92:	d00e      	beq.n	1dab2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1da94:	683a      	ldr	r2, [r7, #0]
   1da96:	69bb      	ldr	r3, [r7, #24]
   1da98:	0011      	movs	r1, r2
   1da9a:	0018      	movs	r0, r3
   1da9c:	4b3a      	ldr	r3, [pc, #232]	; (1db88 <xQueueGenericSendFromISR+0x21c>)
   1da9e:	4798      	blx	r3
   1daa0:	1e03      	subs	r3, r0, #0
   1daa2:	d021      	beq.n	1dae8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1daa4:	687b      	ldr	r3, [r7, #4]
   1daa6:	2b00      	cmp	r3, #0
   1daa8:	d01e      	beq.n	1dae8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1daaa:	687b      	ldr	r3, [r7, #4]
   1daac:	2201      	movs	r2, #1
   1daae:	601a      	str	r2, [r3, #0]
   1dab0:	e01a      	b.n	1dae8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dab2:	69bb      	ldr	r3, [r7, #24]
   1dab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dab6:	2b00      	cmp	r3, #0
   1dab8:	d016      	beq.n	1dae8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1daba:	69bb      	ldr	r3, [r7, #24]
   1dabc:	3324      	adds	r3, #36	; 0x24
   1dabe:	0018      	movs	r0, r3
   1dac0:	4b32      	ldr	r3, [pc, #200]	; (1db8c <xQueueGenericSendFromISR+0x220>)
   1dac2:	4798      	blx	r3
   1dac4:	1e03      	subs	r3, r0, #0
   1dac6:	d00f      	beq.n	1dae8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1dac8:	687b      	ldr	r3, [r7, #4]
   1daca:	2b00      	cmp	r3, #0
   1dacc:	d00c      	beq.n	1dae8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1dace:	687b      	ldr	r3, [r7, #4]
   1dad0:	2201      	movs	r2, #1
   1dad2:	601a      	str	r2, [r3, #0]
   1dad4:	e008      	b.n	1dae8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1dad6:	2313      	movs	r3, #19
   1dad8:	18fb      	adds	r3, r7, r3
   1dada:	781b      	ldrb	r3, [r3, #0]
   1dadc:	3301      	adds	r3, #1
   1dade:	b2db      	uxtb	r3, r3
   1dae0:	b259      	sxtb	r1, r3
   1dae2:	69bb      	ldr	r3, [r7, #24]
   1dae4:	2245      	movs	r2, #69	; 0x45
   1dae6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1dae8:	2301      	movs	r3, #1
   1daea:	61fb      	str	r3, [r7, #28]
		{
   1daec:	e030      	b.n	1db50 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1daee:	69bb      	ldr	r3, [r7, #24]
   1daf0:	0018      	movs	r0, r3
   1daf2:	4b1d      	ldr	r3, [pc, #116]	; (1db68 <xQueueGenericSendFromISR+0x1fc>)
   1daf4:	4798      	blx	r3
   1daf6:	0003      	movs	r3, r0
   1daf8:	001a      	movs	r2, r3
   1dafa:	4b1c      	ldr	r3, [pc, #112]	; (1db6c <xQueueGenericSendFromISR+0x200>)
   1dafc:	881b      	ldrh	r3, [r3, #0]
   1dafe:	4013      	ands	r3, r2
   1db00:	b29b      	uxth	r3, r3
   1db02:	2b00      	cmp	r3, #0
   1db04:	d022      	beq.n	1db4c <xQueueGenericSendFromISR+0x1e0>
   1db06:	683b      	ldr	r3, [r7, #0]
   1db08:	2b00      	cmp	r3, #0
   1db0a:	d10b      	bne.n	1db24 <xQueueGenericSendFromISR+0x1b8>
   1db0c:	69bb      	ldr	r3, [r7, #24]
   1db0e:	0018      	movs	r0, r3
   1db10:	4b17      	ldr	r3, [pc, #92]	; (1db70 <xQueueGenericSendFromISR+0x204>)
   1db12:	4798      	blx	r3
   1db14:	0003      	movs	r3, r0
   1db16:	001a      	movs	r2, r3
   1db18:	4b16      	ldr	r3, [pc, #88]	; (1db74 <xQueueGenericSendFromISR+0x208>)
   1db1a:	5c9b      	ldrb	r3, [r3, r2]
   1db1c:	3358      	adds	r3, #88	; 0x58
   1db1e:	b2db      	uxtb	r3, r3
   1db20:	001d      	movs	r5, r3
   1db22:	e000      	b.n	1db26 <xQueueGenericSendFromISR+0x1ba>
   1db24:	255d      	movs	r5, #93	; 0x5d
   1db26:	69bb      	ldr	r3, [r7, #24]
   1db28:	0018      	movs	r0, r3
   1db2a:	4b11      	ldr	r3, [pc, #68]	; (1db70 <xQueueGenericSendFromISR+0x204>)
   1db2c:	4798      	blx	r3
   1db2e:	0003      	movs	r3, r0
   1db30:	001a      	movs	r2, r3
   1db32:	4b10      	ldr	r3, [pc, #64]	; (1db74 <xQueueGenericSendFromISR+0x208>)
   1db34:	5c9c      	ldrb	r4, [r3, r2]
   1db36:	69bb      	ldr	r3, [r7, #24]
   1db38:	0018      	movs	r0, r3
   1db3a:	4b0f      	ldr	r3, [pc, #60]	; (1db78 <xQueueGenericSendFromISR+0x20c>)
   1db3c:	4798      	blx	r3
   1db3e:	0003      	movs	r3, r0
   1db40:	b2db      	uxtb	r3, r3
   1db42:	001a      	movs	r2, r3
   1db44:	0021      	movs	r1, r4
   1db46:	0028      	movs	r0, r5
   1db48:	4b0c      	ldr	r3, [pc, #48]	; (1db7c <xQueueGenericSendFromISR+0x210>)
   1db4a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1db4c:	2300      	movs	r3, #0
   1db4e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1db50:	697b      	ldr	r3, [r7, #20]
   1db52:	0018      	movs	r0, r3
   1db54:	4b0e      	ldr	r3, [pc, #56]	; (1db90 <xQueueGenericSendFromISR+0x224>)
   1db56:	4798      	blx	r3

	return xReturn;
   1db58:	69fb      	ldr	r3, [r7, #28]
}
   1db5a:	0018      	movs	r0, r3
   1db5c:	46bd      	mov	sp, r7
   1db5e:	b008      	add	sp, #32
   1db60:	bdb0      	pop	{r4, r5, r7, pc}
   1db62:	46c0      	nop			; (mov r8, r8)
   1db64:	0001cfcd 	.word	0x0001cfcd
   1db68:	0001b035 	.word	0x0001b035
   1db6c:	2000018c 	.word	0x2000018c
   1db70:	0001af35 	.word	0x0001af35
   1db74:	20000180 	.word	0x20000180
   1db78:	0001b015 	.word	0x0001b015
   1db7c:	0001b96d 	.word	0x0001b96d
   1db80:	0001bfc9 	.word	0x0001bfc9
   1db84:	0001e745 	.word	0x0001e745
   1db88:	0001ea49 	.word	0x0001ea49
   1db8c:	0001f809 	.word	0x0001f809
   1db90:	0001cfd9 	.word	0x0001cfd9

0001db94 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1db94:	b580      	push	{r7, lr}
   1db96:	b082      	sub	sp, #8
   1db98:	af00      	add	r7, sp, #0
   1db9a:	6078      	str	r0, [r7, #4]
   1db9c:	6039      	str	r1, [r7, #0]
   1db9e:	6839      	ldr	r1, [r7, #0]
   1dba0:	687b      	ldr	r3, [r7, #4]
   1dba2:	2200      	movs	r2, #0
   1dba4:	0018      	movs	r0, r3
   1dba6:	4b03      	ldr	r3, [pc, #12]	; (1dbb4 <xQueueGiveFromISR+0x20>)
   1dba8:	4798      	blx	r3
   1dbaa:	0003      	movs	r3, r0
   1dbac:	0018      	movs	r0, r3
   1dbae:	46bd      	mov	sp, r7
   1dbb0:	b002      	add	sp, #8
   1dbb2:	bd80      	pop	{r7, pc}
   1dbb4:	0001dbb9 	.word	0x0001dbb9

0001dbb8 <MyWrapper>:
{
   1dbb8:	b5b0      	push	{r4, r5, r7, lr}
   1dbba:	b08a      	sub	sp, #40	; 0x28
   1dbbc:	af00      	add	r7, sp, #0
   1dbbe:	60f8      	str	r0, [r7, #12]
   1dbc0:	60b9      	str	r1, [r7, #8]
   1dbc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1dbc4:	68fb      	ldr	r3, [r7, #12]
   1dbc6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1dbc8:	6a3b      	ldr	r3, [r7, #32]
   1dbca:	2b00      	cmp	r3, #0
   1dbcc:	d101      	bne.n	1dbd2 <MyWrapper+0x1a>
   1dbce:	b672      	cpsid	i
   1dbd0:	e7fe      	b.n	1dbd0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1dbd2:	6a3b      	ldr	r3, [r7, #32]
   1dbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1dbd6:	2b00      	cmp	r3, #0
   1dbd8:	d001      	beq.n	1dbde <MyWrapper+0x26>
   1dbda:	b672      	cpsid	i
   1dbdc:	e7fe      	b.n	1dbdc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1dbde:	6a3b      	ldr	r3, [r7, #32]
   1dbe0:	681b      	ldr	r3, [r3, #0]
   1dbe2:	2b00      	cmp	r3, #0
   1dbe4:	d103      	bne.n	1dbee <MyWrapper+0x36>
   1dbe6:	6a3b      	ldr	r3, [r7, #32]
   1dbe8:	685b      	ldr	r3, [r3, #4]
   1dbea:	2b00      	cmp	r3, #0
   1dbec:	d101      	bne.n	1dbf2 <MyWrapper+0x3a>
   1dbee:	2301      	movs	r3, #1
   1dbf0:	e000      	b.n	1dbf4 <MyWrapper+0x3c>
   1dbf2:	2300      	movs	r3, #0
   1dbf4:	2b00      	cmp	r3, #0
   1dbf6:	d101      	bne.n	1dbfc <MyWrapper+0x44>
   1dbf8:	b672      	cpsid	i
   1dbfa:	e7fe      	b.n	1dbfa <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1dbfc:	4b66      	ldr	r3, [pc, #408]	; (1dd98 <MyWrapper+0x1e0>)
   1dbfe:	4798      	blx	r3
   1dc00:	0003      	movs	r3, r0
   1dc02:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1dc04:	6a3b      	ldr	r3, [r7, #32]
   1dc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1dc08:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1dc0a:	6a3b      	ldr	r3, [r7, #32]
   1dc0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1dc0e:	69bb      	ldr	r3, [r7, #24]
   1dc10:	429a      	cmp	r2, r3
   1dc12:	d800      	bhi.n	1dc16 <MyWrapper+0x5e>
   1dc14:	e085      	b.n	1dd22 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1dc16:	2317      	movs	r3, #23
   1dc18:	18fb      	adds	r3, r7, r3
   1dc1a:	6a3a      	ldr	r2, [r7, #32]
   1dc1c:	2145      	movs	r1, #69	; 0x45
   1dc1e:	5c52      	ldrb	r2, [r2, r1]
   1dc20:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1dc22:	6a3b      	ldr	r3, [r7, #32]
   1dc24:	0018      	movs	r0, r3
   1dc26:	4b5d      	ldr	r3, [pc, #372]	; (1dd9c <MyWrapper+0x1e4>)
   1dc28:	4798      	blx	r3
   1dc2a:	0003      	movs	r3, r0
   1dc2c:	001a      	movs	r2, r3
   1dc2e:	4b5c      	ldr	r3, [pc, #368]	; (1dda0 <MyWrapper+0x1e8>)
   1dc30:	881b      	ldrh	r3, [r3, #0]
   1dc32:	4013      	ands	r3, r2
   1dc34:	b29b      	uxth	r3, r3
   1dc36:	2b00      	cmp	r3, #0
   1dc38:	d022      	beq.n	1dc80 <MyWrapper+0xc8>
   1dc3a:	687b      	ldr	r3, [r7, #4]
   1dc3c:	2b00      	cmp	r3, #0
   1dc3e:	d10b      	bne.n	1dc58 <MyWrapper+0xa0>
   1dc40:	6a3b      	ldr	r3, [r7, #32]
   1dc42:	0018      	movs	r0, r3
   1dc44:	4b57      	ldr	r3, [pc, #348]	; (1dda4 <MyWrapper+0x1ec>)
   1dc46:	4798      	blx	r3
   1dc48:	0003      	movs	r3, r0
   1dc4a:	001a      	movs	r2, r3
   1dc4c:	4b56      	ldr	r3, [pc, #344]	; (1dda8 <MyWrapper+0x1f0>)
   1dc4e:	5c9b      	ldrb	r3, [r3, r2]
   1dc50:	3330      	adds	r3, #48	; 0x30
   1dc52:	b2db      	uxtb	r3, r3
   1dc54:	001d      	movs	r5, r3
   1dc56:	e000      	b.n	1dc5a <MyWrapper+0xa2>
   1dc58:	2535      	movs	r5, #53	; 0x35
   1dc5a:	6a3b      	ldr	r3, [r7, #32]
   1dc5c:	0018      	movs	r0, r3
   1dc5e:	4b51      	ldr	r3, [pc, #324]	; (1dda4 <MyWrapper+0x1ec>)
   1dc60:	4798      	blx	r3
   1dc62:	0003      	movs	r3, r0
   1dc64:	001a      	movs	r2, r3
   1dc66:	4b50      	ldr	r3, [pc, #320]	; (1dda8 <MyWrapper+0x1f0>)
   1dc68:	5c9c      	ldrb	r4, [r3, r2]
   1dc6a:	6a3b      	ldr	r3, [r7, #32]
   1dc6c:	0018      	movs	r0, r3
   1dc6e:	4b4f      	ldr	r3, [pc, #316]	; (1ddac <MyWrapper+0x1f4>)
   1dc70:	4798      	blx	r3
   1dc72:	0003      	movs	r3, r0
   1dc74:	b2db      	uxtb	r3, r3
   1dc76:	001a      	movs	r2, r3
   1dc78:	0021      	movs	r1, r4
   1dc7a:	0028      	movs	r0, r5
   1dc7c:	4b4c      	ldr	r3, [pc, #304]	; (1ddb0 <MyWrapper+0x1f8>)
   1dc7e:	4798      	blx	r3
   1dc80:	6a3b      	ldr	r3, [r7, #32]
   1dc82:	0018      	movs	r0, r3
   1dc84:	4b47      	ldr	r3, [pc, #284]	; (1dda4 <MyWrapper+0x1ec>)
   1dc86:	4798      	blx	r3
   1dc88:	0003      	movs	r3, r0
   1dc8a:	001a      	movs	r2, r3
   1dc8c:	4b46      	ldr	r3, [pc, #280]	; (1dda8 <MyWrapper+0x1f0>)
   1dc8e:	5c9c      	ldrb	r4, [r3, r2]
   1dc90:	6a3b      	ldr	r3, [r7, #32]
   1dc92:	0018      	movs	r0, r3
   1dc94:	4b45      	ldr	r3, [pc, #276]	; (1ddac <MyWrapper+0x1f4>)
   1dc96:	4798      	blx	r3
   1dc98:	0003      	movs	r3, r0
   1dc9a:	b2d9      	uxtb	r1, r3
   1dc9c:	6a3b      	ldr	r3, [r7, #32]
   1dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1dca0:	b2db      	uxtb	r3, r3
   1dca2:	3301      	adds	r3, #1
   1dca4:	b2db      	uxtb	r3, r3
   1dca6:	001a      	movs	r2, r3
   1dca8:	0020      	movs	r0, r4
   1dcaa:	4b42      	ldr	r3, [pc, #264]	; (1ddb4 <MyWrapper+0x1fc>)
   1dcac:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1dcae:	69bb      	ldr	r3, [r7, #24]
   1dcb0:	1c5a      	adds	r2, r3, #1
   1dcb2:	6a3b      	ldr	r3, [r7, #32]
   1dcb4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1dcb6:	2317      	movs	r3, #23
   1dcb8:	18fb      	adds	r3, r7, r3
   1dcba:	781b      	ldrb	r3, [r3, #0]
   1dcbc:	b25b      	sxtb	r3, r3
   1dcbe:	3301      	adds	r3, #1
   1dcc0:	d123      	bne.n	1dd0a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1dcc2:	6a3b      	ldr	r3, [r7, #32]
   1dcc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dcc6:	2b00      	cmp	r3, #0
   1dcc8:	d00d      	beq.n	1dce6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1dcca:	6a3b      	ldr	r3, [r7, #32]
   1dccc:	2100      	movs	r1, #0
   1dcce:	0018      	movs	r0, r3
   1dcd0:	4b39      	ldr	r3, [pc, #228]	; (1ddb8 <MyWrapper+0x200>)
   1dcd2:	4798      	blx	r3
   1dcd4:	1e03      	subs	r3, r0, #0
   1dcd6:	d021      	beq.n	1dd1c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1dcd8:	68bb      	ldr	r3, [r7, #8]
   1dcda:	2b00      	cmp	r3, #0
   1dcdc:	d01e      	beq.n	1dd1c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1dcde:	68bb      	ldr	r3, [r7, #8]
   1dce0:	2201      	movs	r2, #1
   1dce2:	601a      	str	r2, [r3, #0]
   1dce4:	e01a      	b.n	1dd1c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1dce6:	6a3b      	ldr	r3, [r7, #32]
   1dce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dcea:	2b00      	cmp	r3, #0
   1dcec:	d016      	beq.n	1dd1c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1dcee:	6a3b      	ldr	r3, [r7, #32]
   1dcf0:	3324      	adds	r3, #36	; 0x24
   1dcf2:	0018      	movs	r0, r3
   1dcf4:	4b31      	ldr	r3, [pc, #196]	; (1ddbc <MyWrapper+0x204>)
   1dcf6:	4798      	blx	r3
   1dcf8:	1e03      	subs	r3, r0, #0
   1dcfa:	d00f      	beq.n	1dd1c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1dcfc:	68bb      	ldr	r3, [r7, #8]
   1dcfe:	2b00      	cmp	r3, #0
   1dd00:	d00c      	beq.n	1dd1c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1dd02:	68bb      	ldr	r3, [r7, #8]
   1dd04:	2201      	movs	r2, #1
   1dd06:	601a      	str	r2, [r3, #0]
   1dd08:	e008      	b.n	1dd1c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1dd0a:	2317      	movs	r3, #23
   1dd0c:	18fb      	adds	r3, r7, r3
   1dd0e:	781b      	ldrb	r3, [r3, #0]
   1dd10:	3301      	adds	r3, #1
   1dd12:	b2db      	uxtb	r3, r3
   1dd14:	b259      	sxtb	r1, r3
   1dd16:	6a3b      	ldr	r3, [r7, #32]
   1dd18:	2245      	movs	r2, #69	; 0x45
   1dd1a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1dd1c:	2301      	movs	r3, #1
   1dd1e:	627b      	str	r3, [r7, #36]	; 0x24
   1dd20:	e030      	b.n	1dd84 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1dd22:	6a3b      	ldr	r3, [r7, #32]
   1dd24:	0018      	movs	r0, r3
   1dd26:	4b1d      	ldr	r3, [pc, #116]	; (1dd9c <MyWrapper+0x1e4>)
   1dd28:	4798      	blx	r3
   1dd2a:	0003      	movs	r3, r0
   1dd2c:	001a      	movs	r2, r3
   1dd2e:	4b1c      	ldr	r3, [pc, #112]	; (1dda0 <MyWrapper+0x1e8>)
   1dd30:	881b      	ldrh	r3, [r3, #0]
   1dd32:	4013      	ands	r3, r2
   1dd34:	b29b      	uxth	r3, r3
   1dd36:	2b00      	cmp	r3, #0
   1dd38:	d022      	beq.n	1dd80 <MyWrapper+0x1c8>
   1dd3a:	687b      	ldr	r3, [r7, #4]
   1dd3c:	2b00      	cmp	r3, #0
   1dd3e:	d10b      	bne.n	1dd58 <MyWrapper+0x1a0>
   1dd40:	6a3b      	ldr	r3, [r7, #32]
   1dd42:	0018      	movs	r0, r3
   1dd44:	4b17      	ldr	r3, [pc, #92]	; (1dda4 <MyWrapper+0x1ec>)
   1dd46:	4798      	blx	r3
   1dd48:	0003      	movs	r3, r0
   1dd4a:	001a      	movs	r2, r3
   1dd4c:	4b16      	ldr	r3, [pc, #88]	; (1dda8 <MyWrapper+0x1f0>)
   1dd4e:	5c9b      	ldrb	r3, [r3, r2]
   1dd50:	3358      	adds	r3, #88	; 0x58
   1dd52:	b2db      	uxtb	r3, r3
   1dd54:	001d      	movs	r5, r3
   1dd56:	e000      	b.n	1dd5a <MyWrapper+0x1a2>
   1dd58:	255d      	movs	r5, #93	; 0x5d
   1dd5a:	6a3b      	ldr	r3, [r7, #32]
   1dd5c:	0018      	movs	r0, r3
   1dd5e:	4b11      	ldr	r3, [pc, #68]	; (1dda4 <MyWrapper+0x1ec>)
   1dd60:	4798      	blx	r3
   1dd62:	0003      	movs	r3, r0
   1dd64:	001a      	movs	r2, r3
   1dd66:	4b10      	ldr	r3, [pc, #64]	; (1dda8 <MyWrapper+0x1f0>)
   1dd68:	5c9c      	ldrb	r4, [r3, r2]
   1dd6a:	6a3b      	ldr	r3, [r7, #32]
   1dd6c:	0018      	movs	r0, r3
   1dd6e:	4b0f      	ldr	r3, [pc, #60]	; (1ddac <MyWrapper+0x1f4>)
   1dd70:	4798      	blx	r3
   1dd72:	0003      	movs	r3, r0
   1dd74:	b2db      	uxtb	r3, r3
   1dd76:	001a      	movs	r2, r3
   1dd78:	0021      	movs	r1, r4
   1dd7a:	0028      	movs	r0, r5
   1dd7c:	4b0c      	ldr	r3, [pc, #48]	; (1ddb0 <MyWrapper+0x1f8>)
   1dd7e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1dd80:	2300      	movs	r3, #0
   1dd82:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1dd84:	69fb      	ldr	r3, [r7, #28]
   1dd86:	0018      	movs	r0, r3
   1dd88:	4b0d      	ldr	r3, [pc, #52]	; (1ddc0 <MyWrapper+0x208>)
   1dd8a:	4798      	blx	r3

	return xReturn;
   1dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1dd8e:	0018      	movs	r0, r3
   1dd90:	46bd      	mov	sp, r7
   1dd92:	b00a      	add	sp, #40	; 0x28
   1dd94:	bdb0      	pop	{r4, r5, r7, pc}
   1dd96:	46c0      	nop			; (mov r8, r8)
   1dd98:	0001cfcd 	.word	0x0001cfcd
   1dd9c:	0001b035 	.word	0x0001b035
   1dda0:	2000018c 	.word	0x2000018c
   1dda4:	0001af35 	.word	0x0001af35
   1dda8:	20000180 	.word	0x20000180
   1ddac:	0001b015 	.word	0x0001b015
   1ddb0:	0001b96d 	.word	0x0001b96d
   1ddb4:	0001bfc9 	.word	0x0001bfc9
   1ddb8:	0001ea49 	.word	0x0001ea49
   1ddbc:	0001f809 	.word	0x0001f809
   1ddc0:	0001cfd9 	.word	0x0001cfd9

0001ddc4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1ddc4:	b5b0      	push	{r4, r5, r7, lr}
   1ddc6:	b08a      	sub	sp, #40	; 0x28
   1ddc8:	af00      	add	r7, sp, #0
   1ddca:	60f8      	str	r0, [r7, #12]
   1ddcc:	60b9      	str	r1, [r7, #8]
   1ddce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1ddd0:	2300      	movs	r3, #0
   1ddd2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ddd4:	68fb      	ldr	r3, [r7, #12]
   1ddd6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1ddd8:	6a3b      	ldr	r3, [r7, #32]
   1ddda:	2b00      	cmp	r3, #0
   1dddc:	d101      	bne.n	1dde2 <xQueueReceive+0x1e>
   1ddde:	b672      	cpsid	i
   1dde0:	e7fe      	b.n	1dde0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1dde2:	68bb      	ldr	r3, [r7, #8]
   1dde4:	2b00      	cmp	r3, #0
   1dde6:	d103      	bne.n	1ddf0 <xQueueReceive+0x2c>
   1dde8:	6a3b      	ldr	r3, [r7, #32]
   1ddea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ddec:	2b00      	cmp	r3, #0
   1ddee:	d101      	bne.n	1ddf4 <xQueueReceive+0x30>
   1ddf0:	2301      	movs	r3, #1
   1ddf2:	e000      	b.n	1ddf6 <xQueueReceive+0x32>
   1ddf4:	2300      	movs	r3, #0
   1ddf6:	2b00      	cmp	r3, #0
   1ddf8:	d101      	bne.n	1ddfe <xQueueReceive+0x3a>
   1ddfa:	b672      	cpsid	i
   1ddfc:	e7fe      	b.n	1ddfc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ddfe:	4bbf      	ldr	r3, [pc, #764]	; (1e0fc <xQueueReceive+0x338>)
   1de00:	4798      	blx	r3
   1de02:	1e03      	subs	r3, r0, #0
   1de04:	d102      	bne.n	1de0c <xQueueReceive+0x48>
   1de06:	687b      	ldr	r3, [r7, #4]
   1de08:	2b00      	cmp	r3, #0
   1de0a:	d101      	bne.n	1de10 <xQueueReceive+0x4c>
   1de0c:	2301      	movs	r3, #1
   1de0e:	e000      	b.n	1de12 <xQueueReceive+0x4e>
   1de10:	2300      	movs	r3, #0
   1de12:	2b00      	cmp	r3, #0
   1de14:	d101      	bne.n	1de1a <xQueueReceive+0x56>
   1de16:	b672      	cpsid	i
   1de18:	e7fe      	b.n	1de18 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1de1a:	4bb9      	ldr	r3, [pc, #740]	; (1e100 <xQueueReceive+0x33c>)
   1de1c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1de1e:	6a3b      	ldr	r3, [r7, #32]
   1de20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1de22:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1de24:	69fb      	ldr	r3, [r7, #28]
   1de26:	2b00      	cmp	r3, #0
   1de28:	d100      	bne.n	1de2c <xQueueReceive+0x68>
   1de2a:	e07d      	b.n	1df28 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1de2c:	68ba      	ldr	r2, [r7, #8]
   1de2e:	6a3b      	ldr	r3, [r7, #32]
   1de30:	0011      	movs	r1, r2
   1de32:	0018      	movs	r0, r3
   1de34:	4bb3      	ldr	r3, [pc, #716]	; (1e104 <xQueueReceive+0x340>)
   1de36:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1de38:	4bb3      	ldr	r3, [pc, #716]	; (1e108 <xQueueReceive+0x344>)
   1de3a:	4798      	blx	r3
   1de3c:	0003      	movs	r3, r0
   1de3e:	0018      	movs	r0, r3
   1de40:	4bb2      	ldr	r3, [pc, #712]	; (1e10c <xQueueReceive+0x348>)
   1de42:	4798      	blx	r3
   1de44:	0003      	movs	r3, r0
   1de46:	001a      	movs	r2, r3
   1de48:	4bb1      	ldr	r3, [pc, #708]	; (1e110 <xQueueReceive+0x34c>)
   1de4a:	881b      	ldrh	r3, [r3, #0]
   1de4c:	4013      	ands	r3, r2
   1de4e:	b29b      	uxth	r3, r3
   1de50:	2b00      	cmp	r3, #0
   1de52:	d029      	beq.n	1dea8 <xQueueReceive+0xe4>
   1de54:	6a3b      	ldr	r3, [r7, #32]
   1de56:	0018      	movs	r0, r3
   1de58:	4bae      	ldr	r3, [pc, #696]	; (1e114 <xQueueReceive+0x350>)
   1de5a:	4798      	blx	r3
   1de5c:	0003      	movs	r3, r0
   1de5e:	001a      	movs	r2, r3
   1de60:	4bab      	ldr	r3, [pc, #684]	; (1e110 <xQueueReceive+0x34c>)
   1de62:	881b      	ldrh	r3, [r3, #0]
   1de64:	4013      	ands	r3, r2
   1de66:	b29b      	uxth	r3, r3
   1de68:	2b00      	cmp	r3, #0
   1de6a:	d01d      	beq.n	1dea8 <xQueueReceive+0xe4>
   1de6c:	6a3b      	ldr	r3, [r7, #32]
   1de6e:	0018      	movs	r0, r3
   1de70:	4ba9      	ldr	r3, [pc, #676]	; (1e118 <xQueueReceive+0x354>)
   1de72:	4798      	blx	r3
   1de74:	0003      	movs	r3, r0
   1de76:	001a      	movs	r2, r3
   1de78:	4ba8      	ldr	r3, [pc, #672]	; (1e11c <xQueueReceive+0x358>)
   1de7a:	5c9b      	ldrb	r3, [r3, r2]
   1de7c:	3328      	adds	r3, #40	; 0x28
   1de7e:	b2db      	uxtb	r3, r3
   1de80:	001d      	movs	r5, r3
   1de82:	6a3b      	ldr	r3, [r7, #32]
   1de84:	0018      	movs	r0, r3
   1de86:	4ba4      	ldr	r3, [pc, #656]	; (1e118 <xQueueReceive+0x354>)
   1de88:	4798      	blx	r3
   1de8a:	0003      	movs	r3, r0
   1de8c:	001a      	movs	r2, r3
   1de8e:	4ba3      	ldr	r3, [pc, #652]	; (1e11c <xQueueReceive+0x358>)
   1de90:	5c9c      	ldrb	r4, [r3, r2]
   1de92:	6a3b      	ldr	r3, [r7, #32]
   1de94:	0018      	movs	r0, r3
   1de96:	4ba2      	ldr	r3, [pc, #648]	; (1e120 <xQueueReceive+0x35c>)
   1de98:	4798      	blx	r3
   1de9a:	0003      	movs	r3, r0
   1de9c:	b2db      	uxtb	r3, r3
   1de9e:	001a      	movs	r2, r3
   1dea0:	0021      	movs	r1, r4
   1dea2:	0028      	movs	r0, r5
   1dea4:	4b9f      	ldr	r3, [pc, #636]	; (1e124 <xQueueReceive+0x360>)
   1dea6:	4798      	blx	r3
   1dea8:	6a3b      	ldr	r3, [r7, #32]
   1deaa:	0018      	movs	r0, r3
   1deac:	4b9a      	ldr	r3, [pc, #616]	; (1e118 <xQueueReceive+0x354>)
   1deae:	4798      	blx	r3
   1deb0:	0003      	movs	r3, r0
   1deb2:	001a      	movs	r2, r3
   1deb4:	4b99      	ldr	r3, [pc, #612]	; (1e11c <xQueueReceive+0x358>)
   1deb6:	5c9c      	ldrb	r4, [r3, r2]
   1deb8:	6a3b      	ldr	r3, [r7, #32]
   1deba:	0018      	movs	r0, r3
   1debc:	4b98      	ldr	r3, [pc, #608]	; (1e120 <xQueueReceive+0x35c>)
   1debe:	4798      	blx	r3
   1dec0:	0003      	movs	r3, r0
   1dec2:	b2dd      	uxtb	r5, r3
   1dec4:	6a3b      	ldr	r3, [r7, #32]
   1dec6:	0018      	movs	r0, r3
   1dec8:	4b93      	ldr	r3, [pc, #588]	; (1e118 <xQueueReceive+0x354>)
   1deca:	4798      	blx	r3
   1decc:	0003      	movs	r3, r0
   1dece:	001a      	movs	r2, r3
   1ded0:	4b92      	ldr	r3, [pc, #584]	; (1e11c <xQueueReceive+0x358>)
   1ded2:	5c9b      	ldrb	r3, [r3, r2]
   1ded4:	2b02      	cmp	r3, #2
   1ded6:	d108      	bne.n	1deea <xQueueReceive+0x126>
   1ded8:	4b8b      	ldr	r3, [pc, #556]	; (1e108 <xQueueReceive+0x344>)
   1deda:	4798      	blx	r3
   1dedc:	0003      	movs	r3, r0
   1dede:	0018      	movs	r0, r3
   1dee0:	4b91      	ldr	r3, [pc, #580]	; (1e128 <xQueueReceive+0x364>)
   1dee2:	4798      	blx	r3
   1dee4:	0003      	movs	r3, r0
   1dee6:	b2db      	uxtb	r3, r3
   1dee8:	e004      	b.n	1def4 <xQueueReceive+0x130>
   1deea:	6a3b      	ldr	r3, [r7, #32]
   1deec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1deee:	b2db      	uxtb	r3, r3
   1def0:	3b01      	subs	r3, #1
   1def2:	b2db      	uxtb	r3, r3
   1def4:	001a      	movs	r2, r3
   1def6:	0029      	movs	r1, r5
   1def8:	0020      	movs	r0, r4
   1defa:	4b8c      	ldr	r3, [pc, #560]	; (1e12c <xQueueReceive+0x368>)
   1defc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1defe:	69fb      	ldr	r3, [r7, #28]
   1df00:	1e5a      	subs	r2, r3, #1
   1df02:	6a3b      	ldr	r3, [r7, #32]
   1df04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1df06:	6a3b      	ldr	r3, [r7, #32]
   1df08:	691b      	ldr	r3, [r3, #16]
   1df0a:	2b00      	cmp	r3, #0
   1df0c:	d008      	beq.n	1df20 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1df0e:	6a3b      	ldr	r3, [r7, #32]
   1df10:	3310      	adds	r3, #16
   1df12:	0018      	movs	r0, r3
   1df14:	4b86      	ldr	r3, [pc, #536]	; (1e130 <xQueueReceive+0x36c>)
   1df16:	4798      	blx	r3
   1df18:	1e03      	subs	r3, r0, #0
   1df1a:	d001      	beq.n	1df20 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1df1c:	4b85      	ldr	r3, [pc, #532]	; (1e134 <xQueueReceive+0x370>)
   1df1e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1df20:	4b85      	ldr	r3, [pc, #532]	; (1e138 <xQueueReceive+0x374>)
   1df22:	4798      	blx	r3
				return pdPASS;
   1df24:	2301      	movs	r3, #1
   1df26:	e15f      	b.n	1e1e8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1df28:	687b      	ldr	r3, [r7, #4]
   1df2a:	2b00      	cmp	r3, #0
   1df2c:	d13b      	bne.n	1dfa6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1df2e:	4b82      	ldr	r3, [pc, #520]	; (1e138 <xQueueReceive+0x374>)
   1df30:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1df32:	4b75      	ldr	r3, [pc, #468]	; (1e108 <xQueueReceive+0x344>)
   1df34:	4798      	blx	r3
   1df36:	0003      	movs	r3, r0
   1df38:	0018      	movs	r0, r3
   1df3a:	4b74      	ldr	r3, [pc, #464]	; (1e10c <xQueueReceive+0x348>)
   1df3c:	4798      	blx	r3
   1df3e:	0003      	movs	r3, r0
   1df40:	001a      	movs	r2, r3
   1df42:	4b73      	ldr	r3, [pc, #460]	; (1e110 <xQueueReceive+0x34c>)
   1df44:	881b      	ldrh	r3, [r3, #0]
   1df46:	4013      	ands	r3, r2
   1df48:	b29b      	uxth	r3, r3
   1df4a:	2b00      	cmp	r3, #0
   1df4c:	d029      	beq.n	1dfa2 <xQueueReceive+0x1de>
   1df4e:	6a3b      	ldr	r3, [r7, #32]
   1df50:	0018      	movs	r0, r3
   1df52:	4b70      	ldr	r3, [pc, #448]	; (1e114 <xQueueReceive+0x350>)
   1df54:	4798      	blx	r3
   1df56:	0003      	movs	r3, r0
   1df58:	001a      	movs	r2, r3
   1df5a:	4b6d      	ldr	r3, [pc, #436]	; (1e110 <xQueueReceive+0x34c>)
   1df5c:	881b      	ldrh	r3, [r3, #0]
   1df5e:	4013      	ands	r3, r2
   1df60:	b29b      	uxth	r3, r3
   1df62:	2b00      	cmp	r3, #0
   1df64:	d01d      	beq.n	1dfa2 <xQueueReceive+0x1de>
   1df66:	6a3b      	ldr	r3, [r7, #32]
   1df68:	0018      	movs	r0, r3
   1df6a:	4b6b      	ldr	r3, [pc, #428]	; (1e118 <xQueueReceive+0x354>)
   1df6c:	4798      	blx	r3
   1df6e:	0003      	movs	r3, r0
   1df70:	001a      	movs	r2, r3
   1df72:	4b6a      	ldr	r3, [pc, #424]	; (1e11c <xQueueReceive+0x358>)
   1df74:	5c9b      	ldrb	r3, [r3, r2]
   1df76:	3350      	adds	r3, #80	; 0x50
   1df78:	b2db      	uxtb	r3, r3
   1df7a:	001d      	movs	r5, r3
   1df7c:	6a3b      	ldr	r3, [r7, #32]
   1df7e:	0018      	movs	r0, r3
   1df80:	4b65      	ldr	r3, [pc, #404]	; (1e118 <xQueueReceive+0x354>)
   1df82:	4798      	blx	r3
   1df84:	0003      	movs	r3, r0
   1df86:	001a      	movs	r2, r3
   1df88:	4b64      	ldr	r3, [pc, #400]	; (1e11c <xQueueReceive+0x358>)
   1df8a:	5c9c      	ldrb	r4, [r3, r2]
   1df8c:	6a3b      	ldr	r3, [r7, #32]
   1df8e:	0018      	movs	r0, r3
   1df90:	4b63      	ldr	r3, [pc, #396]	; (1e120 <xQueueReceive+0x35c>)
   1df92:	4798      	blx	r3
   1df94:	0003      	movs	r3, r0
   1df96:	b2db      	uxtb	r3, r3
   1df98:	001a      	movs	r2, r3
   1df9a:	0021      	movs	r1, r4
   1df9c:	0028      	movs	r0, r5
   1df9e:	4b61      	ldr	r3, [pc, #388]	; (1e124 <xQueueReceive+0x360>)
   1dfa0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1dfa2:	2300      	movs	r3, #0
   1dfa4:	e120      	b.n	1e1e8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dfa8:	2b00      	cmp	r3, #0
   1dfaa:	d106      	bne.n	1dfba <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1dfac:	2314      	movs	r3, #20
   1dfae:	18fb      	adds	r3, r7, r3
   1dfb0:	0018      	movs	r0, r3
   1dfb2:	4b62      	ldr	r3, [pc, #392]	; (1e13c <xQueueReceive+0x378>)
   1dfb4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1dfb6:	2301      	movs	r3, #1
   1dfb8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1dfba:	4b5f      	ldr	r3, [pc, #380]	; (1e138 <xQueueReceive+0x374>)
   1dfbc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1dfbe:	4b60      	ldr	r3, [pc, #384]	; (1e140 <xQueueReceive+0x37c>)
   1dfc0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1dfc2:	4b4f      	ldr	r3, [pc, #316]	; (1e100 <xQueueReceive+0x33c>)
   1dfc4:	4798      	blx	r3
   1dfc6:	6a3b      	ldr	r3, [r7, #32]
   1dfc8:	2244      	movs	r2, #68	; 0x44
   1dfca:	5c9b      	ldrb	r3, [r3, r2]
   1dfcc:	b25b      	sxtb	r3, r3
   1dfce:	3301      	adds	r3, #1
   1dfd0:	d103      	bne.n	1dfda <xQueueReceive+0x216>
   1dfd2:	6a3b      	ldr	r3, [r7, #32]
   1dfd4:	2244      	movs	r2, #68	; 0x44
   1dfd6:	2100      	movs	r1, #0
   1dfd8:	5499      	strb	r1, [r3, r2]
   1dfda:	6a3b      	ldr	r3, [r7, #32]
   1dfdc:	2245      	movs	r2, #69	; 0x45
   1dfde:	5c9b      	ldrb	r3, [r3, r2]
   1dfe0:	b25b      	sxtb	r3, r3
   1dfe2:	3301      	adds	r3, #1
   1dfe4:	d103      	bne.n	1dfee <xQueueReceive+0x22a>
   1dfe6:	6a3b      	ldr	r3, [r7, #32]
   1dfe8:	2245      	movs	r2, #69	; 0x45
   1dfea:	2100      	movs	r1, #0
   1dfec:	5499      	strb	r1, [r3, r2]
   1dfee:	4b52      	ldr	r3, [pc, #328]	; (1e138 <xQueueReceive+0x374>)
   1dff0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1dff2:	1d3a      	adds	r2, r7, #4
   1dff4:	2314      	movs	r3, #20
   1dff6:	18fb      	adds	r3, r7, r3
   1dff8:	0011      	movs	r1, r2
   1dffa:	0018      	movs	r0, r3
   1dffc:	4b51      	ldr	r3, [pc, #324]	; (1e144 <xQueueReceive+0x380>)
   1dffe:	4798      	blx	r3
   1e000:	1e03      	subs	r3, r0, #0
   1e002:	d000      	beq.n	1e006 <xQueueReceive+0x242>
   1e004:	e0aa      	b.n	1e15c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1e006:	6a3b      	ldr	r3, [r7, #32]
   1e008:	0018      	movs	r0, r3
   1e00a:	4b4f      	ldr	r3, [pc, #316]	; (1e148 <xQueueReceive+0x384>)
   1e00c:	4798      	blx	r3
   1e00e:	1e03      	subs	r3, r0, #0
   1e010:	d06d      	beq.n	1e0ee <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1e012:	4b3d      	ldr	r3, [pc, #244]	; (1e108 <xQueueReceive+0x344>)
   1e014:	4798      	blx	r3
   1e016:	0003      	movs	r3, r0
   1e018:	0018      	movs	r0, r3
   1e01a:	4b3c      	ldr	r3, [pc, #240]	; (1e10c <xQueueReceive+0x348>)
   1e01c:	4798      	blx	r3
   1e01e:	0003      	movs	r3, r0
   1e020:	001a      	movs	r2, r3
   1e022:	4b3b      	ldr	r3, [pc, #236]	; (1e110 <xQueueReceive+0x34c>)
   1e024:	881b      	ldrh	r3, [r3, #0]
   1e026:	4013      	ands	r3, r2
   1e028:	b29b      	uxth	r3, r3
   1e02a:	2b00      	cmp	r3, #0
   1e02c:	d029      	beq.n	1e082 <xQueueReceive+0x2be>
   1e02e:	6a3b      	ldr	r3, [r7, #32]
   1e030:	0018      	movs	r0, r3
   1e032:	4b38      	ldr	r3, [pc, #224]	; (1e114 <xQueueReceive+0x350>)
   1e034:	4798      	blx	r3
   1e036:	0003      	movs	r3, r0
   1e038:	001a      	movs	r2, r3
   1e03a:	4b35      	ldr	r3, [pc, #212]	; (1e110 <xQueueReceive+0x34c>)
   1e03c:	881b      	ldrh	r3, [r3, #0]
   1e03e:	4013      	ands	r3, r2
   1e040:	b29b      	uxth	r3, r3
   1e042:	2b00      	cmp	r3, #0
   1e044:	d01d      	beq.n	1e082 <xQueueReceive+0x2be>
   1e046:	6a3b      	ldr	r3, [r7, #32]
   1e048:	0018      	movs	r0, r3
   1e04a:	4b33      	ldr	r3, [pc, #204]	; (1e118 <xQueueReceive+0x354>)
   1e04c:	4798      	blx	r3
   1e04e:	0003      	movs	r3, r0
   1e050:	001a      	movs	r2, r3
   1e052:	4b32      	ldr	r3, [pc, #200]	; (1e11c <xQueueReceive+0x358>)
   1e054:	5c9b      	ldrb	r3, [r3, r2]
   1e056:	3368      	adds	r3, #104	; 0x68
   1e058:	b2db      	uxtb	r3, r3
   1e05a:	001d      	movs	r5, r3
   1e05c:	6a3b      	ldr	r3, [r7, #32]
   1e05e:	0018      	movs	r0, r3
   1e060:	4b2d      	ldr	r3, [pc, #180]	; (1e118 <xQueueReceive+0x354>)
   1e062:	4798      	blx	r3
   1e064:	0003      	movs	r3, r0
   1e066:	001a      	movs	r2, r3
   1e068:	4b2c      	ldr	r3, [pc, #176]	; (1e11c <xQueueReceive+0x358>)
   1e06a:	5c9c      	ldrb	r4, [r3, r2]
   1e06c:	6a3b      	ldr	r3, [r7, #32]
   1e06e:	0018      	movs	r0, r3
   1e070:	4b2b      	ldr	r3, [pc, #172]	; (1e120 <xQueueReceive+0x35c>)
   1e072:	4798      	blx	r3
   1e074:	0003      	movs	r3, r0
   1e076:	b2db      	uxtb	r3, r3
   1e078:	001a      	movs	r2, r3
   1e07a:	0021      	movs	r1, r4
   1e07c:	0028      	movs	r0, r5
   1e07e:	4b29      	ldr	r3, [pc, #164]	; (1e124 <xQueueReceive+0x360>)
   1e080:	4798      	blx	r3
   1e082:	6a3b      	ldr	r3, [r7, #32]
   1e084:	0018      	movs	r0, r3
   1e086:	4b24      	ldr	r3, [pc, #144]	; (1e118 <xQueueReceive+0x354>)
   1e088:	4798      	blx	r3
   1e08a:	0003      	movs	r3, r0
   1e08c:	001a      	movs	r2, r3
   1e08e:	4b23      	ldr	r3, [pc, #140]	; (1e11c <xQueueReceive+0x358>)
   1e090:	5c9b      	ldrb	r3, [r3, r2]
   1e092:	2b02      	cmp	r3, #2
   1e094:	d018      	beq.n	1e0c8 <xQueueReceive+0x304>
   1e096:	4b1c      	ldr	r3, [pc, #112]	; (1e108 <xQueueReceive+0x344>)
   1e098:	4798      	blx	r3
   1e09a:	0003      	movs	r3, r0
   1e09c:	0018      	movs	r0, r3
   1e09e:	4b1b      	ldr	r3, [pc, #108]	; (1e10c <xQueueReceive+0x348>)
   1e0a0:	4798      	blx	r3
   1e0a2:	0003      	movs	r3, r0
   1e0a4:	001a      	movs	r2, r3
   1e0a6:	4b1a      	ldr	r3, [pc, #104]	; (1e110 <xQueueReceive+0x34c>)
   1e0a8:	881b      	ldrh	r3, [r3, #0]
   1e0aa:	4013      	ands	r3, r2
   1e0ac:	b29b      	uxth	r3, r3
   1e0ae:	2b00      	cmp	r3, #0
   1e0b0:	d00a      	beq.n	1e0c8 <xQueueReceive+0x304>
   1e0b2:	4b15      	ldr	r3, [pc, #84]	; (1e108 <xQueueReceive+0x344>)
   1e0b4:	4798      	blx	r3
   1e0b6:	0003      	movs	r3, r0
   1e0b8:	0018      	movs	r0, r3
   1e0ba:	4b1b      	ldr	r3, [pc, #108]	; (1e128 <xQueueReceive+0x364>)
   1e0bc:	4798      	blx	r3
   1e0be:	0003      	movs	r3, r0
   1e0c0:	b2db      	uxtb	r3, r3
   1e0c2:	0018      	movs	r0, r3
   1e0c4:	4b21      	ldr	r3, [pc, #132]	; (1e14c <xQueueReceive+0x388>)
   1e0c6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1e0c8:	6a3b      	ldr	r3, [r7, #32]
   1e0ca:	3324      	adds	r3, #36	; 0x24
   1e0cc:	687a      	ldr	r2, [r7, #4]
   1e0ce:	0011      	movs	r1, r2
   1e0d0:	0018      	movs	r0, r3
   1e0d2:	4b1f      	ldr	r3, [pc, #124]	; (1e150 <xQueueReceive+0x38c>)
   1e0d4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1e0d6:	6a3b      	ldr	r3, [r7, #32]
   1e0d8:	0018      	movs	r0, r3
   1e0da:	4b1e      	ldr	r3, [pc, #120]	; (1e154 <xQueueReceive+0x390>)
   1e0dc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e0de:	4b1e      	ldr	r3, [pc, #120]	; (1e158 <xQueueReceive+0x394>)
   1e0e0:	4798      	blx	r3
   1e0e2:	1e03      	subs	r3, r0, #0
   1e0e4:	d000      	beq.n	1e0e8 <xQueueReceive+0x324>
   1e0e6:	e698      	b.n	1de1a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1e0e8:	4b12      	ldr	r3, [pc, #72]	; (1e134 <xQueueReceive+0x370>)
   1e0ea:	4798      	blx	r3
   1e0ec:	e695      	b.n	1de1a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1e0ee:	6a3b      	ldr	r3, [r7, #32]
   1e0f0:	0018      	movs	r0, r3
   1e0f2:	4b18      	ldr	r3, [pc, #96]	; (1e154 <xQueueReceive+0x390>)
   1e0f4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1e0f6:	4b18      	ldr	r3, [pc, #96]	; (1e158 <xQueueReceive+0x394>)
   1e0f8:	4798      	blx	r3
   1e0fa:	e68e      	b.n	1de1a <xQueueReceive+0x56>
   1e0fc:	0001fc99 	.word	0x0001fc99
   1e100:	0001cf79 	.word	0x0001cf79
   1e104:	0001e825 	.word	0x0001e825
   1e108:	0001b211 	.word	0x0001b211
   1e10c:	0001af75 	.word	0x0001af75
   1e110:	2000018c 	.word	0x2000018c
   1e114:	0001b035 	.word	0x0001b035
   1e118:	0001af35 	.word	0x0001af35
   1e11c:	20000180 	.word	0x20000180
   1e120:	0001b015 	.word	0x0001b015
   1e124:	0001b96d 	.word	0x0001b96d
   1e128:	0001af55 	.word	0x0001af55
   1e12c:	0001bfc9 	.word	0x0001bfc9
   1e130:	0001f809 	.word	0x0001f809
   1e134:	0001cf61 	.word	0x0001cf61
   1e138:	0001cf9d 	.word	0x0001cf9d
   1e13c:	0001f949 	.word	0x0001f949
   1e140:	0001f231 	.word	0x0001f231
   1e144:	0001f971 	.word	0x0001f971
   1e148:	0001e965 	.word	0x0001e965
   1e14c:	0001c105 	.word	0x0001c105
   1e150:	0001f6e5 	.word	0x0001f6e5
   1e154:	0001e875 	.word	0x0001e875
   1e158:	0001f249 	.word	0x0001f249
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1e15c:	6a3b      	ldr	r3, [r7, #32]
   1e15e:	0018      	movs	r0, r3
   1e160:	4b23      	ldr	r3, [pc, #140]	; (1e1f0 <xQueueReceive+0x42c>)
   1e162:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1e164:	4b23      	ldr	r3, [pc, #140]	; (1e1f4 <xQueueReceive+0x430>)
   1e166:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1e168:	6a3b      	ldr	r3, [r7, #32]
   1e16a:	0018      	movs	r0, r3
   1e16c:	4b22      	ldr	r3, [pc, #136]	; (1e1f8 <xQueueReceive+0x434>)
   1e16e:	4798      	blx	r3
   1e170:	1e03      	subs	r3, r0, #0
   1e172:	d100      	bne.n	1e176 <xQueueReceive+0x3b2>
   1e174:	e651      	b.n	1de1a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1e176:	4b21      	ldr	r3, [pc, #132]	; (1e1fc <xQueueReceive+0x438>)
   1e178:	4798      	blx	r3
   1e17a:	0003      	movs	r3, r0
   1e17c:	0018      	movs	r0, r3
   1e17e:	4b20      	ldr	r3, [pc, #128]	; (1e200 <xQueueReceive+0x43c>)
   1e180:	4798      	blx	r3
   1e182:	0003      	movs	r3, r0
   1e184:	001a      	movs	r2, r3
   1e186:	4b1f      	ldr	r3, [pc, #124]	; (1e204 <xQueueReceive+0x440>)
   1e188:	881b      	ldrh	r3, [r3, #0]
   1e18a:	4013      	ands	r3, r2
   1e18c:	b29b      	uxth	r3, r3
   1e18e:	2b00      	cmp	r3, #0
   1e190:	d029      	beq.n	1e1e6 <xQueueReceive+0x422>
   1e192:	6a3b      	ldr	r3, [r7, #32]
   1e194:	0018      	movs	r0, r3
   1e196:	4b1c      	ldr	r3, [pc, #112]	; (1e208 <xQueueReceive+0x444>)
   1e198:	4798      	blx	r3
   1e19a:	0003      	movs	r3, r0
   1e19c:	001a      	movs	r2, r3
   1e19e:	4b19      	ldr	r3, [pc, #100]	; (1e204 <xQueueReceive+0x440>)
   1e1a0:	881b      	ldrh	r3, [r3, #0]
   1e1a2:	4013      	ands	r3, r2
   1e1a4:	b29b      	uxth	r3, r3
   1e1a6:	2b00      	cmp	r3, #0
   1e1a8:	d01d      	beq.n	1e1e6 <xQueueReceive+0x422>
   1e1aa:	6a3b      	ldr	r3, [r7, #32]
   1e1ac:	0018      	movs	r0, r3
   1e1ae:	4b17      	ldr	r3, [pc, #92]	; (1e20c <xQueueReceive+0x448>)
   1e1b0:	4798      	blx	r3
   1e1b2:	0003      	movs	r3, r0
   1e1b4:	001a      	movs	r2, r3
   1e1b6:	4b16      	ldr	r3, [pc, #88]	; (1e210 <xQueueReceive+0x44c>)
   1e1b8:	5c9b      	ldrb	r3, [r3, r2]
   1e1ba:	3350      	adds	r3, #80	; 0x50
   1e1bc:	b2db      	uxtb	r3, r3
   1e1be:	001d      	movs	r5, r3
   1e1c0:	6a3b      	ldr	r3, [r7, #32]
   1e1c2:	0018      	movs	r0, r3
   1e1c4:	4b11      	ldr	r3, [pc, #68]	; (1e20c <xQueueReceive+0x448>)
   1e1c6:	4798      	blx	r3
   1e1c8:	0003      	movs	r3, r0
   1e1ca:	001a      	movs	r2, r3
   1e1cc:	4b10      	ldr	r3, [pc, #64]	; (1e210 <xQueueReceive+0x44c>)
   1e1ce:	5c9c      	ldrb	r4, [r3, r2]
   1e1d0:	6a3b      	ldr	r3, [r7, #32]
   1e1d2:	0018      	movs	r0, r3
   1e1d4:	4b0f      	ldr	r3, [pc, #60]	; (1e214 <xQueueReceive+0x450>)
   1e1d6:	4798      	blx	r3
   1e1d8:	0003      	movs	r3, r0
   1e1da:	b2db      	uxtb	r3, r3
   1e1dc:	001a      	movs	r2, r3
   1e1de:	0021      	movs	r1, r4
   1e1e0:	0028      	movs	r0, r5
   1e1e2:	4b0d      	ldr	r3, [pc, #52]	; (1e218 <xQueueReceive+0x454>)
   1e1e4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1e1e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1e1e8:	0018      	movs	r0, r3
   1e1ea:	46bd      	mov	sp, r7
   1e1ec:	b00a      	add	sp, #40	; 0x28
   1e1ee:	bdb0      	pop	{r4, r5, r7, pc}
   1e1f0:	0001e875 	.word	0x0001e875
   1e1f4:	0001f249 	.word	0x0001f249
   1e1f8:	0001e965 	.word	0x0001e965
   1e1fc:	0001b211 	.word	0x0001b211
   1e200:	0001af75 	.word	0x0001af75
   1e204:	2000018c 	.word	0x2000018c
   1e208:	0001b035 	.word	0x0001b035
   1e20c:	0001af35 	.word	0x0001af35
   1e210:	20000180 	.word	0x20000180
   1e214:	0001b015 	.word	0x0001b015
   1e218:	0001b96d 	.word	0x0001b96d

0001e21c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1e21c:	b5b0      	push	{r4, r5, r7, lr}
   1e21e:	b08a      	sub	sp, #40	; 0x28
   1e220:	af00      	add	r7, sp, #0
   1e222:	6078      	str	r0, [r7, #4]
   1e224:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1e226:	2300      	movs	r3, #0
   1e228:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1e22a:	687b      	ldr	r3, [r7, #4]
   1e22c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1e22e:	2300      	movs	r3, #0
   1e230:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1e232:	69fb      	ldr	r3, [r7, #28]
   1e234:	2b00      	cmp	r3, #0
   1e236:	d101      	bne.n	1e23c <xQueueSemaphoreTake+0x20>
   1e238:	b672      	cpsid	i
   1e23a:	e7fe      	b.n	1e23a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1e23c:	69fb      	ldr	r3, [r7, #28]
   1e23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e240:	2b00      	cmp	r3, #0
   1e242:	d001      	beq.n	1e248 <xQueueSemaphoreTake+0x2c>
   1e244:	b672      	cpsid	i
   1e246:	e7fe      	b.n	1e246 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1e248:	4bcb      	ldr	r3, [pc, #812]	; (1e578 <xQueueSemaphoreTake+0x35c>)
   1e24a:	4798      	blx	r3
   1e24c:	1e03      	subs	r3, r0, #0
   1e24e:	d102      	bne.n	1e256 <xQueueSemaphoreTake+0x3a>
   1e250:	683b      	ldr	r3, [r7, #0]
   1e252:	2b00      	cmp	r3, #0
   1e254:	d101      	bne.n	1e25a <xQueueSemaphoreTake+0x3e>
   1e256:	2301      	movs	r3, #1
   1e258:	e000      	b.n	1e25c <xQueueSemaphoreTake+0x40>
   1e25a:	2300      	movs	r3, #0
   1e25c:	2b00      	cmp	r3, #0
   1e25e:	d101      	bne.n	1e264 <xQueueSemaphoreTake+0x48>
   1e260:	b672      	cpsid	i
   1e262:	e7fe      	b.n	1e262 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1e264:	4bc5      	ldr	r3, [pc, #788]	; (1e57c <xQueueSemaphoreTake+0x360>)
   1e266:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1e268:	69fb      	ldr	r3, [r7, #28]
   1e26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e26c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1e26e:	69bb      	ldr	r3, [r7, #24]
   1e270:	2b00      	cmp	r3, #0
   1e272:	d100      	bne.n	1e276 <xQueueSemaphoreTake+0x5a>
   1e274:	e080      	b.n	1e378 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1e276:	4bc2      	ldr	r3, [pc, #776]	; (1e580 <xQueueSemaphoreTake+0x364>)
   1e278:	4798      	blx	r3
   1e27a:	0003      	movs	r3, r0
   1e27c:	0018      	movs	r0, r3
   1e27e:	4bc1      	ldr	r3, [pc, #772]	; (1e584 <xQueueSemaphoreTake+0x368>)
   1e280:	4798      	blx	r3
   1e282:	0003      	movs	r3, r0
   1e284:	001a      	movs	r2, r3
   1e286:	4bc0      	ldr	r3, [pc, #768]	; (1e588 <xQueueSemaphoreTake+0x36c>)
   1e288:	881b      	ldrh	r3, [r3, #0]
   1e28a:	4013      	ands	r3, r2
   1e28c:	b29b      	uxth	r3, r3
   1e28e:	2b00      	cmp	r3, #0
   1e290:	d029      	beq.n	1e2e6 <xQueueSemaphoreTake+0xca>
   1e292:	69fb      	ldr	r3, [r7, #28]
   1e294:	0018      	movs	r0, r3
   1e296:	4bbd      	ldr	r3, [pc, #756]	; (1e58c <xQueueSemaphoreTake+0x370>)
   1e298:	4798      	blx	r3
   1e29a:	0003      	movs	r3, r0
   1e29c:	001a      	movs	r2, r3
   1e29e:	4bba      	ldr	r3, [pc, #744]	; (1e588 <xQueueSemaphoreTake+0x36c>)
   1e2a0:	881b      	ldrh	r3, [r3, #0]
   1e2a2:	4013      	ands	r3, r2
   1e2a4:	b29b      	uxth	r3, r3
   1e2a6:	2b00      	cmp	r3, #0
   1e2a8:	d01d      	beq.n	1e2e6 <xQueueSemaphoreTake+0xca>
   1e2aa:	69fb      	ldr	r3, [r7, #28]
   1e2ac:	0018      	movs	r0, r3
   1e2ae:	4bb8      	ldr	r3, [pc, #736]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e2b0:	4798      	blx	r3
   1e2b2:	0003      	movs	r3, r0
   1e2b4:	001a      	movs	r2, r3
   1e2b6:	4bb7      	ldr	r3, [pc, #732]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e2b8:	5c9b      	ldrb	r3, [r3, r2]
   1e2ba:	3328      	adds	r3, #40	; 0x28
   1e2bc:	b2db      	uxtb	r3, r3
   1e2be:	001d      	movs	r5, r3
   1e2c0:	69fb      	ldr	r3, [r7, #28]
   1e2c2:	0018      	movs	r0, r3
   1e2c4:	4bb2      	ldr	r3, [pc, #712]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e2c6:	4798      	blx	r3
   1e2c8:	0003      	movs	r3, r0
   1e2ca:	001a      	movs	r2, r3
   1e2cc:	4bb1      	ldr	r3, [pc, #708]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e2ce:	5c9c      	ldrb	r4, [r3, r2]
   1e2d0:	69fb      	ldr	r3, [r7, #28]
   1e2d2:	0018      	movs	r0, r3
   1e2d4:	4bb0      	ldr	r3, [pc, #704]	; (1e598 <xQueueSemaphoreTake+0x37c>)
   1e2d6:	4798      	blx	r3
   1e2d8:	0003      	movs	r3, r0
   1e2da:	b2db      	uxtb	r3, r3
   1e2dc:	001a      	movs	r2, r3
   1e2de:	0021      	movs	r1, r4
   1e2e0:	0028      	movs	r0, r5
   1e2e2:	4bae      	ldr	r3, [pc, #696]	; (1e59c <xQueueSemaphoreTake+0x380>)
   1e2e4:	4798      	blx	r3
   1e2e6:	69fb      	ldr	r3, [r7, #28]
   1e2e8:	0018      	movs	r0, r3
   1e2ea:	4ba9      	ldr	r3, [pc, #676]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e2ec:	4798      	blx	r3
   1e2ee:	0003      	movs	r3, r0
   1e2f0:	001a      	movs	r2, r3
   1e2f2:	4ba8      	ldr	r3, [pc, #672]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e2f4:	5c9c      	ldrb	r4, [r3, r2]
   1e2f6:	69fb      	ldr	r3, [r7, #28]
   1e2f8:	0018      	movs	r0, r3
   1e2fa:	4ba7      	ldr	r3, [pc, #668]	; (1e598 <xQueueSemaphoreTake+0x37c>)
   1e2fc:	4798      	blx	r3
   1e2fe:	0003      	movs	r3, r0
   1e300:	b2dd      	uxtb	r5, r3
   1e302:	69fb      	ldr	r3, [r7, #28]
   1e304:	0018      	movs	r0, r3
   1e306:	4ba2      	ldr	r3, [pc, #648]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e308:	4798      	blx	r3
   1e30a:	0003      	movs	r3, r0
   1e30c:	001a      	movs	r2, r3
   1e30e:	4ba1      	ldr	r3, [pc, #644]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e310:	5c9b      	ldrb	r3, [r3, r2]
   1e312:	2b02      	cmp	r3, #2
   1e314:	d108      	bne.n	1e328 <xQueueSemaphoreTake+0x10c>
   1e316:	4b9a      	ldr	r3, [pc, #616]	; (1e580 <xQueueSemaphoreTake+0x364>)
   1e318:	4798      	blx	r3
   1e31a:	0003      	movs	r3, r0
   1e31c:	0018      	movs	r0, r3
   1e31e:	4ba0      	ldr	r3, [pc, #640]	; (1e5a0 <xQueueSemaphoreTake+0x384>)
   1e320:	4798      	blx	r3
   1e322:	0003      	movs	r3, r0
   1e324:	b2db      	uxtb	r3, r3
   1e326:	e004      	b.n	1e332 <xQueueSemaphoreTake+0x116>
   1e328:	69fb      	ldr	r3, [r7, #28]
   1e32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e32c:	b2db      	uxtb	r3, r3
   1e32e:	3b01      	subs	r3, #1
   1e330:	b2db      	uxtb	r3, r3
   1e332:	001a      	movs	r2, r3
   1e334:	0029      	movs	r1, r5
   1e336:	0020      	movs	r0, r4
   1e338:	4b9a      	ldr	r3, [pc, #616]	; (1e5a4 <xQueueSemaphoreTake+0x388>)
   1e33a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1e33c:	69bb      	ldr	r3, [r7, #24]
   1e33e:	1e5a      	subs	r2, r3, #1
   1e340:	69fb      	ldr	r3, [r7, #28]
   1e342:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1e344:	69fb      	ldr	r3, [r7, #28]
   1e346:	681b      	ldr	r3, [r3, #0]
   1e348:	2b00      	cmp	r3, #0
   1e34a:	d104      	bne.n	1e356 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1e34c:	4b96      	ldr	r3, [pc, #600]	; (1e5a8 <xQueueSemaphoreTake+0x38c>)
   1e34e:	4798      	blx	r3
   1e350:	0002      	movs	r2, r0
   1e352:	69fb      	ldr	r3, [r7, #28]
   1e354:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e356:	69fb      	ldr	r3, [r7, #28]
   1e358:	691b      	ldr	r3, [r3, #16]
   1e35a:	2b00      	cmp	r3, #0
   1e35c:	d008      	beq.n	1e370 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e35e:	69fb      	ldr	r3, [r7, #28]
   1e360:	3310      	adds	r3, #16
   1e362:	0018      	movs	r0, r3
   1e364:	4b91      	ldr	r3, [pc, #580]	; (1e5ac <xQueueSemaphoreTake+0x390>)
   1e366:	4798      	blx	r3
   1e368:	1e03      	subs	r3, r0, #0
   1e36a:	d001      	beq.n	1e370 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1e36c:	4b90      	ldr	r3, [pc, #576]	; (1e5b0 <xQueueSemaphoreTake+0x394>)
   1e36e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1e370:	4b90      	ldr	r3, [pc, #576]	; (1e5b4 <xQueueSemaphoreTake+0x398>)
   1e372:	4798      	blx	r3
				return pdPASS;
   1e374:	2301      	movs	r3, #1
   1e376:	e18b      	b.n	1e690 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1e378:	683b      	ldr	r3, [r7, #0]
   1e37a:	2b00      	cmp	r3, #0
   1e37c:	d140      	bne.n	1e400 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1e37e:	6a3b      	ldr	r3, [r7, #32]
   1e380:	2b00      	cmp	r3, #0
   1e382:	d001      	beq.n	1e388 <xQueueSemaphoreTake+0x16c>
   1e384:	b672      	cpsid	i
   1e386:	e7fe      	b.n	1e386 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1e388:	4b8a      	ldr	r3, [pc, #552]	; (1e5b4 <xQueueSemaphoreTake+0x398>)
   1e38a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1e38c:	4b7c      	ldr	r3, [pc, #496]	; (1e580 <xQueueSemaphoreTake+0x364>)
   1e38e:	4798      	blx	r3
   1e390:	0003      	movs	r3, r0
   1e392:	0018      	movs	r0, r3
   1e394:	4b7b      	ldr	r3, [pc, #492]	; (1e584 <xQueueSemaphoreTake+0x368>)
   1e396:	4798      	blx	r3
   1e398:	0003      	movs	r3, r0
   1e39a:	001a      	movs	r2, r3
   1e39c:	4b7a      	ldr	r3, [pc, #488]	; (1e588 <xQueueSemaphoreTake+0x36c>)
   1e39e:	881b      	ldrh	r3, [r3, #0]
   1e3a0:	4013      	ands	r3, r2
   1e3a2:	b29b      	uxth	r3, r3
   1e3a4:	2b00      	cmp	r3, #0
   1e3a6:	d029      	beq.n	1e3fc <xQueueSemaphoreTake+0x1e0>
   1e3a8:	69fb      	ldr	r3, [r7, #28]
   1e3aa:	0018      	movs	r0, r3
   1e3ac:	4b77      	ldr	r3, [pc, #476]	; (1e58c <xQueueSemaphoreTake+0x370>)
   1e3ae:	4798      	blx	r3
   1e3b0:	0003      	movs	r3, r0
   1e3b2:	001a      	movs	r2, r3
   1e3b4:	4b74      	ldr	r3, [pc, #464]	; (1e588 <xQueueSemaphoreTake+0x36c>)
   1e3b6:	881b      	ldrh	r3, [r3, #0]
   1e3b8:	4013      	ands	r3, r2
   1e3ba:	b29b      	uxth	r3, r3
   1e3bc:	2b00      	cmp	r3, #0
   1e3be:	d01d      	beq.n	1e3fc <xQueueSemaphoreTake+0x1e0>
   1e3c0:	69fb      	ldr	r3, [r7, #28]
   1e3c2:	0018      	movs	r0, r3
   1e3c4:	4b72      	ldr	r3, [pc, #456]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e3c6:	4798      	blx	r3
   1e3c8:	0003      	movs	r3, r0
   1e3ca:	001a      	movs	r2, r3
   1e3cc:	4b71      	ldr	r3, [pc, #452]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e3ce:	5c9b      	ldrb	r3, [r3, r2]
   1e3d0:	3350      	adds	r3, #80	; 0x50
   1e3d2:	b2db      	uxtb	r3, r3
   1e3d4:	001d      	movs	r5, r3
   1e3d6:	69fb      	ldr	r3, [r7, #28]
   1e3d8:	0018      	movs	r0, r3
   1e3da:	4b6d      	ldr	r3, [pc, #436]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e3dc:	4798      	blx	r3
   1e3de:	0003      	movs	r3, r0
   1e3e0:	001a      	movs	r2, r3
   1e3e2:	4b6c      	ldr	r3, [pc, #432]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e3e4:	5c9c      	ldrb	r4, [r3, r2]
   1e3e6:	69fb      	ldr	r3, [r7, #28]
   1e3e8:	0018      	movs	r0, r3
   1e3ea:	4b6b      	ldr	r3, [pc, #428]	; (1e598 <xQueueSemaphoreTake+0x37c>)
   1e3ec:	4798      	blx	r3
   1e3ee:	0003      	movs	r3, r0
   1e3f0:	b2db      	uxtb	r3, r3
   1e3f2:	001a      	movs	r2, r3
   1e3f4:	0021      	movs	r1, r4
   1e3f6:	0028      	movs	r0, r5
   1e3f8:	4b68      	ldr	r3, [pc, #416]	; (1e59c <xQueueSemaphoreTake+0x380>)
   1e3fa:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1e3fc:	2300      	movs	r3, #0
   1e3fe:	e147      	b.n	1e690 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e402:	2b00      	cmp	r3, #0
   1e404:	d106      	bne.n	1e414 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1e406:	230c      	movs	r3, #12
   1e408:	18fb      	adds	r3, r7, r3
   1e40a:	0018      	movs	r0, r3
   1e40c:	4b6a      	ldr	r3, [pc, #424]	; (1e5b8 <xQueueSemaphoreTake+0x39c>)
   1e40e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1e410:	2301      	movs	r3, #1
   1e412:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1e414:	4b67      	ldr	r3, [pc, #412]	; (1e5b4 <xQueueSemaphoreTake+0x398>)
   1e416:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1e418:	4b68      	ldr	r3, [pc, #416]	; (1e5bc <xQueueSemaphoreTake+0x3a0>)
   1e41a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1e41c:	4b57      	ldr	r3, [pc, #348]	; (1e57c <xQueueSemaphoreTake+0x360>)
   1e41e:	4798      	blx	r3
   1e420:	69fb      	ldr	r3, [r7, #28]
   1e422:	2244      	movs	r2, #68	; 0x44
   1e424:	5c9b      	ldrb	r3, [r3, r2]
   1e426:	b25b      	sxtb	r3, r3
   1e428:	3301      	adds	r3, #1
   1e42a:	d103      	bne.n	1e434 <xQueueSemaphoreTake+0x218>
   1e42c:	69fb      	ldr	r3, [r7, #28]
   1e42e:	2244      	movs	r2, #68	; 0x44
   1e430:	2100      	movs	r1, #0
   1e432:	5499      	strb	r1, [r3, r2]
   1e434:	69fb      	ldr	r3, [r7, #28]
   1e436:	2245      	movs	r2, #69	; 0x45
   1e438:	5c9b      	ldrb	r3, [r3, r2]
   1e43a:	b25b      	sxtb	r3, r3
   1e43c:	3301      	adds	r3, #1
   1e43e:	d103      	bne.n	1e448 <xQueueSemaphoreTake+0x22c>
   1e440:	69fb      	ldr	r3, [r7, #28]
   1e442:	2245      	movs	r2, #69	; 0x45
   1e444:	2100      	movs	r1, #0
   1e446:	5499      	strb	r1, [r3, r2]
   1e448:	4b5a      	ldr	r3, [pc, #360]	; (1e5b4 <xQueueSemaphoreTake+0x398>)
   1e44a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1e44c:	003a      	movs	r2, r7
   1e44e:	230c      	movs	r3, #12
   1e450:	18fb      	adds	r3, r7, r3
   1e452:	0011      	movs	r1, r2
   1e454:	0018      	movs	r0, r3
   1e456:	4b5a      	ldr	r3, [pc, #360]	; (1e5c0 <xQueueSemaphoreTake+0x3a4>)
   1e458:	4798      	blx	r3
   1e45a:	1e03      	subs	r3, r0, #0
   1e45c:	d000      	beq.n	1e460 <xQueueSemaphoreTake+0x244>
   1e45e:	e0bd      	b.n	1e5dc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1e460:	69fb      	ldr	r3, [r7, #28]
   1e462:	0018      	movs	r0, r3
   1e464:	4b57      	ldr	r3, [pc, #348]	; (1e5c4 <xQueueSemaphoreTake+0x3a8>)
   1e466:	4798      	blx	r3
   1e468:	1e03      	subs	r3, r0, #0
   1e46a:	d100      	bne.n	1e46e <xQueueSemaphoreTake+0x252>
   1e46c:	e07c      	b.n	1e568 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1e46e:	4b44      	ldr	r3, [pc, #272]	; (1e580 <xQueueSemaphoreTake+0x364>)
   1e470:	4798      	blx	r3
   1e472:	0003      	movs	r3, r0
   1e474:	0018      	movs	r0, r3
   1e476:	4b43      	ldr	r3, [pc, #268]	; (1e584 <xQueueSemaphoreTake+0x368>)
   1e478:	4798      	blx	r3
   1e47a:	0003      	movs	r3, r0
   1e47c:	001a      	movs	r2, r3
   1e47e:	4b42      	ldr	r3, [pc, #264]	; (1e588 <xQueueSemaphoreTake+0x36c>)
   1e480:	881b      	ldrh	r3, [r3, #0]
   1e482:	4013      	ands	r3, r2
   1e484:	b29b      	uxth	r3, r3
   1e486:	2b00      	cmp	r3, #0
   1e488:	d029      	beq.n	1e4de <xQueueSemaphoreTake+0x2c2>
   1e48a:	69fb      	ldr	r3, [r7, #28]
   1e48c:	0018      	movs	r0, r3
   1e48e:	4b3f      	ldr	r3, [pc, #252]	; (1e58c <xQueueSemaphoreTake+0x370>)
   1e490:	4798      	blx	r3
   1e492:	0003      	movs	r3, r0
   1e494:	001a      	movs	r2, r3
   1e496:	4b3c      	ldr	r3, [pc, #240]	; (1e588 <xQueueSemaphoreTake+0x36c>)
   1e498:	881b      	ldrh	r3, [r3, #0]
   1e49a:	4013      	ands	r3, r2
   1e49c:	b29b      	uxth	r3, r3
   1e49e:	2b00      	cmp	r3, #0
   1e4a0:	d01d      	beq.n	1e4de <xQueueSemaphoreTake+0x2c2>
   1e4a2:	69fb      	ldr	r3, [r7, #28]
   1e4a4:	0018      	movs	r0, r3
   1e4a6:	4b3a      	ldr	r3, [pc, #232]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e4a8:	4798      	blx	r3
   1e4aa:	0003      	movs	r3, r0
   1e4ac:	001a      	movs	r2, r3
   1e4ae:	4b39      	ldr	r3, [pc, #228]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e4b0:	5c9b      	ldrb	r3, [r3, r2]
   1e4b2:	3368      	adds	r3, #104	; 0x68
   1e4b4:	b2db      	uxtb	r3, r3
   1e4b6:	001d      	movs	r5, r3
   1e4b8:	69fb      	ldr	r3, [r7, #28]
   1e4ba:	0018      	movs	r0, r3
   1e4bc:	4b34      	ldr	r3, [pc, #208]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e4be:	4798      	blx	r3
   1e4c0:	0003      	movs	r3, r0
   1e4c2:	001a      	movs	r2, r3
   1e4c4:	4b33      	ldr	r3, [pc, #204]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e4c6:	5c9c      	ldrb	r4, [r3, r2]
   1e4c8:	69fb      	ldr	r3, [r7, #28]
   1e4ca:	0018      	movs	r0, r3
   1e4cc:	4b32      	ldr	r3, [pc, #200]	; (1e598 <xQueueSemaphoreTake+0x37c>)
   1e4ce:	4798      	blx	r3
   1e4d0:	0003      	movs	r3, r0
   1e4d2:	b2db      	uxtb	r3, r3
   1e4d4:	001a      	movs	r2, r3
   1e4d6:	0021      	movs	r1, r4
   1e4d8:	0028      	movs	r0, r5
   1e4da:	4b30      	ldr	r3, [pc, #192]	; (1e59c <xQueueSemaphoreTake+0x380>)
   1e4dc:	4798      	blx	r3
   1e4de:	69fb      	ldr	r3, [r7, #28]
   1e4e0:	0018      	movs	r0, r3
   1e4e2:	4b2b      	ldr	r3, [pc, #172]	; (1e590 <xQueueSemaphoreTake+0x374>)
   1e4e4:	4798      	blx	r3
   1e4e6:	0003      	movs	r3, r0
   1e4e8:	001a      	movs	r2, r3
   1e4ea:	4b2a      	ldr	r3, [pc, #168]	; (1e594 <xQueueSemaphoreTake+0x378>)
   1e4ec:	5c9b      	ldrb	r3, [r3, r2]
   1e4ee:	2b02      	cmp	r3, #2
   1e4f0:	d018      	beq.n	1e524 <xQueueSemaphoreTake+0x308>
   1e4f2:	4b23      	ldr	r3, [pc, #140]	; (1e580 <xQueueSemaphoreTake+0x364>)
   1e4f4:	4798      	blx	r3
   1e4f6:	0003      	movs	r3, r0
   1e4f8:	0018      	movs	r0, r3
   1e4fa:	4b22      	ldr	r3, [pc, #136]	; (1e584 <xQueueSemaphoreTake+0x368>)
   1e4fc:	4798      	blx	r3
   1e4fe:	0003      	movs	r3, r0
   1e500:	001a      	movs	r2, r3
   1e502:	4b21      	ldr	r3, [pc, #132]	; (1e588 <xQueueSemaphoreTake+0x36c>)
   1e504:	881b      	ldrh	r3, [r3, #0]
   1e506:	4013      	ands	r3, r2
   1e508:	b29b      	uxth	r3, r3
   1e50a:	2b00      	cmp	r3, #0
   1e50c:	d00a      	beq.n	1e524 <xQueueSemaphoreTake+0x308>
   1e50e:	4b1c      	ldr	r3, [pc, #112]	; (1e580 <xQueueSemaphoreTake+0x364>)
   1e510:	4798      	blx	r3
   1e512:	0003      	movs	r3, r0
   1e514:	0018      	movs	r0, r3
   1e516:	4b22      	ldr	r3, [pc, #136]	; (1e5a0 <xQueueSemaphoreTake+0x384>)
   1e518:	4798      	blx	r3
   1e51a:	0003      	movs	r3, r0
   1e51c:	b2db      	uxtb	r3, r3
   1e51e:	0018      	movs	r0, r3
   1e520:	4b29      	ldr	r3, [pc, #164]	; (1e5c8 <xQueueSemaphoreTake+0x3ac>)
   1e522:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1e524:	69fb      	ldr	r3, [r7, #28]
   1e526:	681b      	ldr	r3, [r3, #0]
   1e528:	2b00      	cmp	r3, #0
   1e52a:	d10a      	bne.n	1e542 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1e52c:	4b13      	ldr	r3, [pc, #76]	; (1e57c <xQueueSemaphoreTake+0x360>)
   1e52e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1e530:	69fb      	ldr	r3, [r7, #28]
   1e532:	685b      	ldr	r3, [r3, #4]
   1e534:	0018      	movs	r0, r3
   1e536:	4b25      	ldr	r3, [pc, #148]	; (1e5cc <xQueueSemaphoreTake+0x3b0>)
   1e538:	4798      	blx	r3
   1e53a:	0003      	movs	r3, r0
   1e53c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1e53e:	4b1d      	ldr	r3, [pc, #116]	; (1e5b4 <xQueueSemaphoreTake+0x398>)
   1e540:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1e542:	69fb      	ldr	r3, [r7, #28]
   1e544:	3324      	adds	r3, #36	; 0x24
   1e546:	683a      	ldr	r2, [r7, #0]
   1e548:	0011      	movs	r1, r2
   1e54a:	0018      	movs	r0, r3
   1e54c:	4b20      	ldr	r3, [pc, #128]	; (1e5d0 <xQueueSemaphoreTake+0x3b4>)
   1e54e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1e550:	69fb      	ldr	r3, [r7, #28]
   1e552:	0018      	movs	r0, r3
   1e554:	4b1f      	ldr	r3, [pc, #124]	; (1e5d4 <xQueueSemaphoreTake+0x3b8>)
   1e556:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e558:	4b1f      	ldr	r3, [pc, #124]	; (1e5d8 <xQueueSemaphoreTake+0x3bc>)
   1e55a:	4798      	blx	r3
   1e55c:	1e03      	subs	r3, r0, #0
   1e55e:	d000      	beq.n	1e562 <xQueueSemaphoreTake+0x346>
   1e560:	e680      	b.n	1e264 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1e562:	4b13      	ldr	r3, [pc, #76]	; (1e5b0 <xQueueSemaphoreTake+0x394>)
   1e564:	4798      	blx	r3
   1e566:	e67d      	b.n	1e264 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1e568:	69fb      	ldr	r3, [r7, #28]
   1e56a:	0018      	movs	r0, r3
   1e56c:	4b19      	ldr	r3, [pc, #100]	; (1e5d4 <xQueueSemaphoreTake+0x3b8>)
   1e56e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1e570:	4b19      	ldr	r3, [pc, #100]	; (1e5d8 <xQueueSemaphoreTake+0x3bc>)
   1e572:	4798      	blx	r3
   1e574:	e676      	b.n	1e264 <xQueueSemaphoreTake+0x48>
   1e576:	46c0      	nop			; (mov r8, r8)
   1e578:	0001fc99 	.word	0x0001fc99
   1e57c:	0001cf79 	.word	0x0001cf79
   1e580:	0001b211 	.word	0x0001b211
   1e584:	0001af75 	.word	0x0001af75
   1e588:	2000018c 	.word	0x2000018c
   1e58c:	0001b035 	.word	0x0001b035
   1e590:	0001af35 	.word	0x0001af35
   1e594:	20000180 	.word	0x20000180
   1e598:	0001b015 	.word	0x0001b015
   1e59c:	0001b96d 	.word	0x0001b96d
   1e5a0:	0001af55 	.word	0x0001af55
   1e5a4:	0001bfc9 	.word	0x0001bfc9
   1e5a8:	00020165 	.word	0x00020165
   1e5ac:	0001f809 	.word	0x0001f809
   1e5b0:	0001cf61 	.word	0x0001cf61
   1e5b4:	0001cf9d 	.word	0x0001cf9d
   1e5b8:	0001f949 	.word	0x0001f949
   1e5bc:	0001f231 	.word	0x0001f231
   1e5c0:	0001f971 	.word	0x0001f971
   1e5c4:	0001e965 	.word	0x0001e965
   1e5c8:	0001c105 	.word	0x0001c105
   1e5cc:	0001fcd1 	.word	0x0001fcd1
   1e5d0:	0001f6e5 	.word	0x0001f6e5
   1e5d4:	0001e875 	.word	0x0001e875
   1e5d8:	0001f249 	.word	0x0001f249
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1e5dc:	69fb      	ldr	r3, [r7, #28]
   1e5de:	0018      	movs	r0, r3
   1e5e0:	4b2d      	ldr	r3, [pc, #180]	; (1e698 <xQueueSemaphoreTake+0x47c>)
   1e5e2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1e5e4:	4b2d      	ldr	r3, [pc, #180]	; (1e69c <xQueueSemaphoreTake+0x480>)
   1e5e6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1e5e8:	69fb      	ldr	r3, [r7, #28]
   1e5ea:	0018      	movs	r0, r3
   1e5ec:	4b2c      	ldr	r3, [pc, #176]	; (1e6a0 <xQueueSemaphoreTake+0x484>)
   1e5ee:	4798      	blx	r3
   1e5f0:	1e03      	subs	r3, r0, #0
   1e5f2:	d100      	bne.n	1e5f6 <xQueueSemaphoreTake+0x3da>
   1e5f4:	e636      	b.n	1e264 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1e5f6:	6a3b      	ldr	r3, [r7, #32]
   1e5f8:	2b00      	cmp	r3, #0
   1e5fa:	d010      	beq.n	1e61e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1e5fc:	4b29      	ldr	r3, [pc, #164]	; (1e6a4 <xQueueSemaphoreTake+0x488>)
   1e5fe:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1e600:	69fb      	ldr	r3, [r7, #28]
   1e602:	0018      	movs	r0, r3
   1e604:	4b28      	ldr	r3, [pc, #160]	; (1e6a8 <xQueueSemaphoreTake+0x48c>)
   1e606:	4798      	blx	r3
   1e608:	0003      	movs	r3, r0
   1e60a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1e60c:	69fb      	ldr	r3, [r7, #28]
   1e60e:	685b      	ldr	r3, [r3, #4]
   1e610:	697a      	ldr	r2, [r7, #20]
   1e612:	0011      	movs	r1, r2
   1e614:	0018      	movs	r0, r3
   1e616:	4b25      	ldr	r3, [pc, #148]	; (1e6ac <xQueueSemaphoreTake+0x490>)
   1e618:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1e61a:	4b25      	ldr	r3, [pc, #148]	; (1e6b0 <xQueueSemaphoreTake+0x494>)
   1e61c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1e61e:	4b25      	ldr	r3, [pc, #148]	; (1e6b4 <xQueueSemaphoreTake+0x498>)
   1e620:	4798      	blx	r3
   1e622:	0003      	movs	r3, r0
   1e624:	0018      	movs	r0, r3
   1e626:	4b24      	ldr	r3, [pc, #144]	; (1e6b8 <xQueueSemaphoreTake+0x49c>)
   1e628:	4798      	blx	r3
   1e62a:	0003      	movs	r3, r0
   1e62c:	001a      	movs	r2, r3
   1e62e:	4b23      	ldr	r3, [pc, #140]	; (1e6bc <xQueueSemaphoreTake+0x4a0>)
   1e630:	881b      	ldrh	r3, [r3, #0]
   1e632:	4013      	ands	r3, r2
   1e634:	b29b      	uxth	r3, r3
   1e636:	2b00      	cmp	r3, #0
   1e638:	d029      	beq.n	1e68e <xQueueSemaphoreTake+0x472>
   1e63a:	69fb      	ldr	r3, [r7, #28]
   1e63c:	0018      	movs	r0, r3
   1e63e:	4b20      	ldr	r3, [pc, #128]	; (1e6c0 <xQueueSemaphoreTake+0x4a4>)
   1e640:	4798      	blx	r3
   1e642:	0003      	movs	r3, r0
   1e644:	001a      	movs	r2, r3
   1e646:	4b1d      	ldr	r3, [pc, #116]	; (1e6bc <xQueueSemaphoreTake+0x4a0>)
   1e648:	881b      	ldrh	r3, [r3, #0]
   1e64a:	4013      	ands	r3, r2
   1e64c:	b29b      	uxth	r3, r3
   1e64e:	2b00      	cmp	r3, #0
   1e650:	d01d      	beq.n	1e68e <xQueueSemaphoreTake+0x472>
   1e652:	69fb      	ldr	r3, [r7, #28]
   1e654:	0018      	movs	r0, r3
   1e656:	4b1b      	ldr	r3, [pc, #108]	; (1e6c4 <xQueueSemaphoreTake+0x4a8>)
   1e658:	4798      	blx	r3
   1e65a:	0003      	movs	r3, r0
   1e65c:	001a      	movs	r2, r3
   1e65e:	4b1a      	ldr	r3, [pc, #104]	; (1e6c8 <xQueueSemaphoreTake+0x4ac>)
   1e660:	5c9b      	ldrb	r3, [r3, r2]
   1e662:	3350      	adds	r3, #80	; 0x50
   1e664:	b2db      	uxtb	r3, r3
   1e666:	001d      	movs	r5, r3
   1e668:	69fb      	ldr	r3, [r7, #28]
   1e66a:	0018      	movs	r0, r3
   1e66c:	4b15      	ldr	r3, [pc, #84]	; (1e6c4 <xQueueSemaphoreTake+0x4a8>)
   1e66e:	4798      	blx	r3
   1e670:	0003      	movs	r3, r0
   1e672:	001a      	movs	r2, r3
   1e674:	4b14      	ldr	r3, [pc, #80]	; (1e6c8 <xQueueSemaphoreTake+0x4ac>)
   1e676:	5c9c      	ldrb	r4, [r3, r2]
   1e678:	69fb      	ldr	r3, [r7, #28]
   1e67a:	0018      	movs	r0, r3
   1e67c:	4b13      	ldr	r3, [pc, #76]	; (1e6cc <xQueueSemaphoreTake+0x4b0>)
   1e67e:	4798      	blx	r3
   1e680:	0003      	movs	r3, r0
   1e682:	b2db      	uxtb	r3, r3
   1e684:	001a      	movs	r2, r3
   1e686:	0021      	movs	r1, r4
   1e688:	0028      	movs	r0, r5
   1e68a:	4b11      	ldr	r3, [pc, #68]	; (1e6d0 <xQueueSemaphoreTake+0x4b4>)
   1e68c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1e68e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1e690:	0018      	movs	r0, r3
   1e692:	46bd      	mov	sp, r7
   1e694:	b00a      	add	sp, #40	; 0x28
   1e696:	bdb0      	pop	{r4, r5, r7, pc}
   1e698:	0001e875 	.word	0x0001e875
   1e69c:	0001f249 	.word	0x0001f249
   1e6a0:	0001e965 	.word	0x0001e965
   1e6a4:	0001cf79 	.word	0x0001cf79
   1e6a8:	0001e717 	.word	0x0001e717
   1e6ac:	0001ffc9 	.word	0x0001ffc9
   1e6b0:	0001cf9d 	.word	0x0001cf9d
   1e6b4:	0001b211 	.word	0x0001b211
   1e6b8:	0001af75 	.word	0x0001af75
   1e6bc:	2000018c 	.word	0x2000018c
   1e6c0:	0001b035 	.word	0x0001b035
   1e6c4:	0001af35 	.word	0x0001af35
   1e6c8:	20000180 	.word	0x20000180
   1e6cc:	0001b015 	.word	0x0001b015
   1e6d0:	0001b96d 	.word	0x0001b96d

0001e6d4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1e6d4:	b580      	push	{r7, lr}
   1e6d6:	b082      	sub	sp, #8
   1e6d8:	af00      	add	r7, sp, #0
   1e6da:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1e6dc:	687b      	ldr	r3, [r7, #4]
   1e6de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1e6e0:	0018      	movs	r0, r3
   1e6e2:	46bd      	mov	sp, r7
   1e6e4:	b002      	add	sp, #8
   1e6e6:	bd80      	pop	{r7, pc}

0001e6e8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1e6e8:	b580      	push	{r7, lr}
   1e6ea:	b082      	sub	sp, #8
   1e6ec:	af00      	add	r7, sp, #0
   1e6ee:	6078      	str	r0, [r7, #4]
   1e6f0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1e6f2:	687b      	ldr	r3, [r7, #4]
   1e6f4:	683a      	ldr	r2, [r7, #0]
   1e6f6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1e6f8:	46c0      	nop			; (mov r8, r8)
   1e6fa:	46bd      	mov	sp, r7
   1e6fc:	b002      	add	sp, #8
   1e6fe:	bd80      	pop	{r7, pc}

0001e700 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1e700:	b580      	push	{r7, lr}
   1e702:	b082      	sub	sp, #8
   1e704:	af00      	add	r7, sp, #0
   1e706:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1e708:	687b      	ldr	r3, [r7, #4]
   1e70a:	2250      	movs	r2, #80	; 0x50
   1e70c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1e70e:	0018      	movs	r0, r3
   1e710:	46bd      	mov	sp, r7
   1e712:	b002      	add	sp, #8
   1e714:	bd80      	pop	{r7, pc}

0001e716 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1e716:	b580      	push	{r7, lr}
   1e718:	b084      	sub	sp, #16
   1e71a:	af00      	add	r7, sp, #0
   1e71c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1e71e:	687b      	ldr	r3, [r7, #4]
   1e720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e722:	2b00      	cmp	r3, #0
   1e724:	d006      	beq.n	1e734 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1e726:	687b      	ldr	r3, [r7, #4]
   1e728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1e72a:	681b      	ldr	r3, [r3, #0]
   1e72c:	2205      	movs	r2, #5
   1e72e:	1ad3      	subs	r3, r2, r3
   1e730:	60fb      	str	r3, [r7, #12]
   1e732:	e001      	b.n	1e738 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1e734:	2300      	movs	r3, #0
   1e736:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1e738:	68fb      	ldr	r3, [r7, #12]
	}
   1e73a:	0018      	movs	r0, r3
   1e73c:	46bd      	mov	sp, r7
   1e73e:	b004      	add	sp, #16
   1e740:	bd80      	pop	{r7, pc}
	...

0001e744 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1e744:	b580      	push	{r7, lr}
   1e746:	b086      	sub	sp, #24
   1e748:	af00      	add	r7, sp, #0
   1e74a:	60f8      	str	r0, [r7, #12]
   1e74c:	60b9      	str	r1, [r7, #8]
   1e74e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1e750:	2300      	movs	r3, #0
   1e752:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1e754:	68fb      	ldr	r3, [r7, #12]
   1e756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e758:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1e75a:	68fb      	ldr	r3, [r7, #12]
   1e75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e75e:	2b00      	cmp	r3, #0
   1e760:	d10e      	bne.n	1e780 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1e762:	68fb      	ldr	r3, [r7, #12]
   1e764:	681b      	ldr	r3, [r3, #0]
   1e766:	2b00      	cmp	r3, #0
   1e768:	d14e      	bne.n	1e808 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1e76a:	68fb      	ldr	r3, [r7, #12]
   1e76c:	685b      	ldr	r3, [r3, #4]
   1e76e:	0018      	movs	r0, r3
   1e770:	4b2a      	ldr	r3, [pc, #168]	; (1e81c <prvCopyDataToQueue+0xd8>)
   1e772:	4798      	blx	r3
   1e774:	0003      	movs	r3, r0
   1e776:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1e778:	68fb      	ldr	r3, [r7, #12]
   1e77a:	2200      	movs	r2, #0
   1e77c:	605a      	str	r2, [r3, #4]
   1e77e:	e043      	b.n	1e808 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1e780:	687b      	ldr	r3, [r7, #4]
   1e782:	2b00      	cmp	r3, #0
   1e784:	d119      	bne.n	1e7ba <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1e786:	68fb      	ldr	r3, [r7, #12]
   1e788:	6898      	ldr	r0, [r3, #8]
   1e78a:	68fb      	ldr	r3, [r7, #12]
   1e78c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1e78e:	68bb      	ldr	r3, [r7, #8]
   1e790:	0019      	movs	r1, r3
   1e792:	4b23      	ldr	r3, [pc, #140]	; (1e820 <prvCopyDataToQueue+0xdc>)
   1e794:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1e796:	68fb      	ldr	r3, [r7, #12]
   1e798:	689a      	ldr	r2, [r3, #8]
   1e79a:	68fb      	ldr	r3, [r7, #12]
   1e79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e79e:	18d2      	adds	r2, r2, r3
   1e7a0:	68fb      	ldr	r3, [r7, #12]
   1e7a2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1e7a4:	68fb      	ldr	r3, [r7, #12]
   1e7a6:	689a      	ldr	r2, [r3, #8]
   1e7a8:	68fb      	ldr	r3, [r7, #12]
   1e7aa:	685b      	ldr	r3, [r3, #4]
   1e7ac:	429a      	cmp	r2, r3
   1e7ae:	d32b      	bcc.n	1e808 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1e7b0:	68fb      	ldr	r3, [r7, #12]
   1e7b2:	681a      	ldr	r2, [r3, #0]
   1e7b4:	68fb      	ldr	r3, [r7, #12]
   1e7b6:	609a      	str	r2, [r3, #8]
   1e7b8:	e026      	b.n	1e808 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e7ba:	68fb      	ldr	r3, [r7, #12]
   1e7bc:	68d8      	ldr	r0, [r3, #12]
   1e7be:	68fb      	ldr	r3, [r7, #12]
   1e7c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1e7c2:	68bb      	ldr	r3, [r7, #8]
   1e7c4:	0019      	movs	r1, r3
   1e7c6:	4b16      	ldr	r3, [pc, #88]	; (1e820 <prvCopyDataToQueue+0xdc>)
   1e7c8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1e7ca:	68fb      	ldr	r3, [r7, #12]
   1e7cc:	68da      	ldr	r2, [r3, #12]
   1e7ce:	68fb      	ldr	r3, [r7, #12]
   1e7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e7d2:	425b      	negs	r3, r3
   1e7d4:	18d2      	adds	r2, r2, r3
   1e7d6:	68fb      	ldr	r3, [r7, #12]
   1e7d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1e7da:	68fb      	ldr	r3, [r7, #12]
   1e7dc:	68da      	ldr	r2, [r3, #12]
   1e7de:	68fb      	ldr	r3, [r7, #12]
   1e7e0:	681b      	ldr	r3, [r3, #0]
   1e7e2:	429a      	cmp	r2, r3
   1e7e4:	d207      	bcs.n	1e7f6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1e7e6:	68fb      	ldr	r3, [r7, #12]
   1e7e8:	685a      	ldr	r2, [r3, #4]
   1e7ea:	68fb      	ldr	r3, [r7, #12]
   1e7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e7ee:	425b      	negs	r3, r3
   1e7f0:	18d2      	adds	r2, r2, r3
   1e7f2:	68fb      	ldr	r3, [r7, #12]
   1e7f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1e7f6:	687b      	ldr	r3, [r7, #4]
   1e7f8:	2b02      	cmp	r3, #2
   1e7fa:	d105      	bne.n	1e808 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1e7fc:	693b      	ldr	r3, [r7, #16]
   1e7fe:	2b00      	cmp	r3, #0
   1e800:	d002      	beq.n	1e808 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1e802:	693b      	ldr	r3, [r7, #16]
   1e804:	3b01      	subs	r3, #1
   1e806:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1e808:	693b      	ldr	r3, [r7, #16]
   1e80a:	1c5a      	adds	r2, r3, #1
   1e80c:	68fb      	ldr	r3, [r7, #12]
   1e80e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1e810:	697b      	ldr	r3, [r7, #20]
}
   1e812:	0018      	movs	r0, r3
   1e814:	46bd      	mov	sp, r7
   1e816:	b006      	add	sp, #24
   1e818:	bd80      	pop	{r7, pc}
   1e81a:	46c0      	nop			; (mov r8, r8)
   1e81c:	0001fe61 	.word	0x0001fe61
   1e820:	000384d1 	.word	0x000384d1

0001e824 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1e824:	b580      	push	{r7, lr}
   1e826:	b082      	sub	sp, #8
   1e828:	af00      	add	r7, sp, #0
   1e82a:	6078      	str	r0, [r7, #4]
   1e82c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1e82e:	687b      	ldr	r3, [r7, #4]
   1e830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e832:	2b00      	cmp	r3, #0
   1e834:	d018      	beq.n	1e868 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1e836:	687b      	ldr	r3, [r7, #4]
   1e838:	68da      	ldr	r2, [r3, #12]
   1e83a:	687b      	ldr	r3, [r7, #4]
   1e83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1e83e:	18d2      	adds	r2, r2, r3
   1e840:	687b      	ldr	r3, [r7, #4]
   1e842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1e844:	687b      	ldr	r3, [r7, #4]
   1e846:	68da      	ldr	r2, [r3, #12]
   1e848:	687b      	ldr	r3, [r7, #4]
   1e84a:	685b      	ldr	r3, [r3, #4]
   1e84c:	429a      	cmp	r2, r3
   1e84e:	d303      	bcc.n	1e858 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1e850:	687b      	ldr	r3, [r7, #4]
   1e852:	681a      	ldr	r2, [r3, #0]
   1e854:	687b      	ldr	r3, [r7, #4]
   1e856:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1e858:	687b      	ldr	r3, [r7, #4]
   1e85a:	68d9      	ldr	r1, [r3, #12]
   1e85c:	687b      	ldr	r3, [r7, #4]
   1e85e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1e860:	683b      	ldr	r3, [r7, #0]
   1e862:	0018      	movs	r0, r3
   1e864:	4b02      	ldr	r3, [pc, #8]	; (1e870 <prvCopyDataFromQueue+0x4c>)
   1e866:	4798      	blx	r3
	}
}
   1e868:	46c0      	nop			; (mov r8, r8)
   1e86a:	46bd      	mov	sp, r7
   1e86c:	b002      	add	sp, #8
   1e86e:	bd80      	pop	{r7, pc}
   1e870:	000384d1 	.word	0x000384d1

0001e874 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1e874:	b580      	push	{r7, lr}
   1e876:	b084      	sub	sp, #16
   1e878:	af00      	add	r7, sp, #0
   1e87a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1e87c:	4b34      	ldr	r3, [pc, #208]	; (1e950 <prvUnlockQueue+0xdc>)
   1e87e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1e880:	230f      	movs	r3, #15
   1e882:	18fb      	adds	r3, r7, r3
   1e884:	687a      	ldr	r2, [r7, #4]
   1e886:	2145      	movs	r1, #69	; 0x45
   1e888:	5c52      	ldrb	r2, [r2, r1]
   1e88a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e88c:	e022      	b.n	1e8d4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1e88e:	687b      	ldr	r3, [r7, #4]
   1e890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e892:	2b00      	cmp	r3, #0
   1e894:	d009      	beq.n	1e8aa <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1e896:	687b      	ldr	r3, [r7, #4]
   1e898:	2100      	movs	r1, #0
   1e89a:	0018      	movs	r0, r3
   1e89c:	4b2d      	ldr	r3, [pc, #180]	; (1e954 <prvUnlockQueue+0xe0>)
   1e89e:	4798      	blx	r3
   1e8a0:	1e03      	subs	r3, r0, #0
   1e8a2:	d00f      	beq.n	1e8c4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1e8a4:	4b2c      	ldr	r3, [pc, #176]	; (1e958 <prvUnlockQueue+0xe4>)
   1e8a6:	4798      	blx	r3
   1e8a8:	e00c      	b.n	1e8c4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1e8aa:	687b      	ldr	r3, [r7, #4]
   1e8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e8ae:	2b00      	cmp	r3, #0
   1e8b0:	d017      	beq.n	1e8e2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1e8b2:	687b      	ldr	r3, [r7, #4]
   1e8b4:	3324      	adds	r3, #36	; 0x24
   1e8b6:	0018      	movs	r0, r3
   1e8b8:	4b28      	ldr	r3, [pc, #160]	; (1e95c <prvUnlockQueue+0xe8>)
   1e8ba:	4798      	blx	r3
   1e8bc:	1e03      	subs	r3, r0, #0
   1e8be:	d001      	beq.n	1e8c4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1e8c0:	4b25      	ldr	r3, [pc, #148]	; (1e958 <prvUnlockQueue+0xe4>)
   1e8c2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1e8c4:	230f      	movs	r3, #15
   1e8c6:	18fb      	adds	r3, r7, r3
   1e8c8:	781b      	ldrb	r3, [r3, #0]
   1e8ca:	3b01      	subs	r3, #1
   1e8cc:	b2da      	uxtb	r2, r3
   1e8ce:	230f      	movs	r3, #15
   1e8d0:	18fb      	adds	r3, r7, r3
   1e8d2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1e8d4:	230f      	movs	r3, #15
   1e8d6:	18fb      	adds	r3, r7, r3
   1e8d8:	781b      	ldrb	r3, [r3, #0]
   1e8da:	b25b      	sxtb	r3, r3
   1e8dc:	2b00      	cmp	r3, #0
   1e8de:	dcd6      	bgt.n	1e88e <prvUnlockQueue+0x1a>
   1e8e0:	e000      	b.n	1e8e4 <prvUnlockQueue+0x70>
						break;
   1e8e2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1e8e4:	687b      	ldr	r3, [r7, #4]
   1e8e6:	2245      	movs	r2, #69	; 0x45
   1e8e8:	21ff      	movs	r1, #255	; 0xff
   1e8ea:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1e8ec:	4b1c      	ldr	r3, [pc, #112]	; (1e960 <prvUnlockQueue+0xec>)
   1e8ee:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1e8f0:	4b17      	ldr	r3, [pc, #92]	; (1e950 <prvUnlockQueue+0xdc>)
   1e8f2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1e8f4:	230e      	movs	r3, #14
   1e8f6:	18fb      	adds	r3, r7, r3
   1e8f8:	687a      	ldr	r2, [r7, #4]
   1e8fa:	2144      	movs	r1, #68	; 0x44
   1e8fc:	5c52      	ldrb	r2, [r2, r1]
   1e8fe:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e900:	e014      	b.n	1e92c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1e902:	687b      	ldr	r3, [r7, #4]
   1e904:	691b      	ldr	r3, [r3, #16]
   1e906:	2b00      	cmp	r3, #0
   1e908:	d017      	beq.n	1e93a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1e90a:	687b      	ldr	r3, [r7, #4]
   1e90c:	3310      	adds	r3, #16
   1e90e:	0018      	movs	r0, r3
   1e910:	4b12      	ldr	r3, [pc, #72]	; (1e95c <prvUnlockQueue+0xe8>)
   1e912:	4798      	blx	r3
   1e914:	1e03      	subs	r3, r0, #0
   1e916:	d001      	beq.n	1e91c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1e918:	4b0f      	ldr	r3, [pc, #60]	; (1e958 <prvUnlockQueue+0xe4>)
   1e91a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1e91c:	230e      	movs	r3, #14
   1e91e:	18fb      	adds	r3, r7, r3
   1e920:	781b      	ldrb	r3, [r3, #0]
   1e922:	3b01      	subs	r3, #1
   1e924:	b2da      	uxtb	r2, r3
   1e926:	230e      	movs	r3, #14
   1e928:	18fb      	adds	r3, r7, r3
   1e92a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1e92c:	230e      	movs	r3, #14
   1e92e:	18fb      	adds	r3, r7, r3
   1e930:	781b      	ldrb	r3, [r3, #0]
   1e932:	b25b      	sxtb	r3, r3
   1e934:	2b00      	cmp	r3, #0
   1e936:	dce4      	bgt.n	1e902 <prvUnlockQueue+0x8e>
   1e938:	e000      	b.n	1e93c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1e93a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1e93c:	687b      	ldr	r3, [r7, #4]
   1e93e:	2244      	movs	r2, #68	; 0x44
   1e940:	21ff      	movs	r1, #255	; 0xff
   1e942:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1e944:	4b06      	ldr	r3, [pc, #24]	; (1e960 <prvUnlockQueue+0xec>)
   1e946:	4798      	blx	r3
}
   1e948:	46c0      	nop			; (mov r8, r8)
   1e94a:	46bd      	mov	sp, r7
   1e94c:	b004      	add	sp, #16
   1e94e:	bd80      	pop	{r7, pc}
   1e950:	0001cf79 	.word	0x0001cf79
   1e954:	0001ea49 	.word	0x0001ea49
   1e958:	0001fa1d 	.word	0x0001fa1d
   1e95c:	0001f809 	.word	0x0001f809
   1e960:	0001cf9d 	.word	0x0001cf9d

0001e964 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1e964:	b580      	push	{r7, lr}
   1e966:	b084      	sub	sp, #16
   1e968:	af00      	add	r7, sp, #0
   1e96a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1e96c:	4b08      	ldr	r3, [pc, #32]	; (1e990 <prvIsQueueEmpty+0x2c>)
   1e96e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1e970:	687b      	ldr	r3, [r7, #4]
   1e972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1e974:	2b00      	cmp	r3, #0
   1e976:	d102      	bne.n	1e97e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1e978:	2301      	movs	r3, #1
   1e97a:	60fb      	str	r3, [r7, #12]
   1e97c:	e001      	b.n	1e982 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1e97e:	2300      	movs	r3, #0
   1e980:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1e982:	4b04      	ldr	r3, [pc, #16]	; (1e994 <prvIsQueueEmpty+0x30>)
   1e984:	4798      	blx	r3

	return xReturn;
   1e986:	68fb      	ldr	r3, [r7, #12]
}
   1e988:	0018      	movs	r0, r3
   1e98a:	46bd      	mov	sp, r7
   1e98c:	b004      	add	sp, #16
   1e98e:	bd80      	pop	{r7, pc}
   1e990:	0001cf79 	.word	0x0001cf79
   1e994:	0001cf9d 	.word	0x0001cf9d

0001e998 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1e998:	b580      	push	{r7, lr}
   1e99a:	b084      	sub	sp, #16
   1e99c:	af00      	add	r7, sp, #0
   1e99e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1e9a0:	4b09      	ldr	r3, [pc, #36]	; (1e9c8 <prvIsQueueFull+0x30>)
   1e9a2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1e9a4:	687b      	ldr	r3, [r7, #4]
   1e9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1e9a8:	687b      	ldr	r3, [r7, #4]
   1e9aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e9ac:	429a      	cmp	r2, r3
   1e9ae:	d102      	bne.n	1e9b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1e9b0:	2301      	movs	r3, #1
   1e9b2:	60fb      	str	r3, [r7, #12]
   1e9b4:	e001      	b.n	1e9ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1e9b6:	2300      	movs	r3, #0
   1e9b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1e9ba:	4b04      	ldr	r3, [pc, #16]	; (1e9cc <prvIsQueueFull+0x34>)
   1e9bc:	4798      	blx	r3

	return xReturn;
   1e9be:	68fb      	ldr	r3, [r7, #12]
}
   1e9c0:	0018      	movs	r0, r3
   1e9c2:	46bd      	mov	sp, r7
   1e9c4:	b004      	add	sp, #16
   1e9c6:	bd80      	pop	{r7, pc}
   1e9c8:	0001cf79 	.word	0x0001cf79
   1e9cc:	0001cf9d 	.word	0x0001cf9d

0001e9d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1e9d0:	b580      	push	{r7, lr}
   1e9d2:	b086      	sub	sp, #24
   1e9d4:	af00      	add	r7, sp, #0
   1e9d6:	60f8      	str	r0, [r7, #12]
   1e9d8:	60b9      	str	r1, [r7, #8]
   1e9da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1e9dc:	68fb      	ldr	r3, [r7, #12]
   1e9de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1e9e0:	4b15      	ldr	r3, [pc, #84]	; (1ea38 <vQueueWaitForMessageRestricted+0x68>)
   1e9e2:	4798      	blx	r3
   1e9e4:	697b      	ldr	r3, [r7, #20]
   1e9e6:	2244      	movs	r2, #68	; 0x44
   1e9e8:	5c9b      	ldrb	r3, [r3, r2]
   1e9ea:	b25b      	sxtb	r3, r3
   1e9ec:	3301      	adds	r3, #1
   1e9ee:	d103      	bne.n	1e9f8 <vQueueWaitForMessageRestricted+0x28>
   1e9f0:	697b      	ldr	r3, [r7, #20]
   1e9f2:	2244      	movs	r2, #68	; 0x44
   1e9f4:	2100      	movs	r1, #0
   1e9f6:	5499      	strb	r1, [r3, r2]
   1e9f8:	697b      	ldr	r3, [r7, #20]
   1e9fa:	2245      	movs	r2, #69	; 0x45
   1e9fc:	5c9b      	ldrb	r3, [r3, r2]
   1e9fe:	b25b      	sxtb	r3, r3
   1ea00:	3301      	adds	r3, #1
   1ea02:	d103      	bne.n	1ea0c <vQueueWaitForMessageRestricted+0x3c>
   1ea04:	697b      	ldr	r3, [r7, #20]
   1ea06:	2245      	movs	r2, #69	; 0x45
   1ea08:	2100      	movs	r1, #0
   1ea0a:	5499      	strb	r1, [r3, r2]
   1ea0c:	4b0b      	ldr	r3, [pc, #44]	; (1ea3c <vQueueWaitForMessageRestricted+0x6c>)
   1ea0e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1ea10:	697b      	ldr	r3, [r7, #20]
   1ea12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ea14:	2b00      	cmp	r3, #0
   1ea16:	d106      	bne.n	1ea26 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1ea18:	697b      	ldr	r3, [r7, #20]
   1ea1a:	3324      	adds	r3, #36	; 0x24
   1ea1c:	687a      	ldr	r2, [r7, #4]
   1ea1e:	68b9      	ldr	r1, [r7, #8]
   1ea20:	0018      	movs	r0, r3
   1ea22:	4b07      	ldr	r3, [pc, #28]	; (1ea40 <vQueueWaitForMessageRestricted+0x70>)
   1ea24:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1ea26:	697b      	ldr	r3, [r7, #20]
   1ea28:	0018      	movs	r0, r3
   1ea2a:	4b06      	ldr	r3, [pc, #24]	; (1ea44 <vQueueWaitForMessageRestricted+0x74>)
   1ea2c:	4798      	blx	r3
	}
   1ea2e:	46c0      	nop			; (mov r8, r8)
   1ea30:	46bd      	mov	sp, r7
   1ea32:	b006      	add	sp, #24
   1ea34:	bd80      	pop	{r7, pc}
   1ea36:	46c0      	nop			; (mov r8, r8)
   1ea38:	0001cf79 	.word	0x0001cf79
   1ea3c:	0001cf9d 	.word	0x0001cf9d
   1ea40:	0001f729 	.word	0x0001f729
   1ea44:	0001e875 	.word	0x0001e875

0001ea48 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1ea48:	b5b0      	push	{r4, r5, r7, lr}
   1ea4a:	b086      	sub	sp, #24
   1ea4c:	af00      	add	r7, sp, #0
   1ea4e:	6078      	str	r0, [r7, #4]
   1ea50:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1ea52:	687b      	ldr	r3, [r7, #4]
   1ea54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ea56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1ea58:	2300      	movs	r3, #0
   1ea5a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1ea5c:	693b      	ldr	r3, [r7, #16]
   1ea5e:	2b00      	cmp	r3, #0
   1ea60:	d101      	bne.n	1ea66 <prvNotifyQueueSetContainer+0x1e>
   1ea62:	b672      	cpsid	i
   1ea64:	e7fe      	b.n	1ea64 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1ea66:	693b      	ldr	r3, [r7, #16]
   1ea68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ea6a:	693b      	ldr	r3, [r7, #16]
   1ea6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ea6e:	429a      	cmp	r2, r3
   1ea70:	d301      	bcc.n	1ea76 <prvNotifyQueueSetContainer+0x2e>
   1ea72:	b672      	cpsid	i
   1ea74:	e7fe      	b.n	1ea74 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1ea76:	693b      	ldr	r3, [r7, #16]
   1ea78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ea7a:	693b      	ldr	r3, [r7, #16]
   1ea7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ea7e:	429a      	cmp	r2, r3
   1ea80:	d300      	bcc.n	1ea84 <prvNotifyQueueSetContainer+0x3c>
   1ea82:	e08b      	b.n	1eb9c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1ea84:	230f      	movs	r3, #15
   1ea86:	18fb      	adds	r3, r7, r3
   1ea88:	693a      	ldr	r2, [r7, #16]
   1ea8a:	2145      	movs	r1, #69	; 0x45
   1ea8c:	5c52      	ldrb	r2, [r2, r1]
   1ea8e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1ea90:	4b45      	ldr	r3, [pc, #276]	; (1eba8 <prvNotifyQueueSetContainer+0x160>)
   1ea92:	4798      	blx	r3
   1ea94:	0003      	movs	r3, r0
   1ea96:	0018      	movs	r0, r3
   1ea98:	4b44      	ldr	r3, [pc, #272]	; (1ebac <prvNotifyQueueSetContainer+0x164>)
   1ea9a:	4798      	blx	r3
   1ea9c:	0003      	movs	r3, r0
   1ea9e:	001a      	movs	r2, r3
   1eaa0:	4b43      	ldr	r3, [pc, #268]	; (1ebb0 <prvNotifyQueueSetContainer+0x168>)
   1eaa2:	881b      	ldrh	r3, [r3, #0]
   1eaa4:	4013      	ands	r3, r2
   1eaa6:	b29b      	uxth	r3, r3
   1eaa8:	2b00      	cmp	r3, #0
   1eaaa:	d02e      	beq.n	1eb0a <prvNotifyQueueSetContainer+0xc2>
   1eaac:	693b      	ldr	r3, [r7, #16]
   1eaae:	0018      	movs	r0, r3
   1eab0:	4b40      	ldr	r3, [pc, #256]	; (1ebb4 <prvNotifyQueueSetContainer+0x16c>)
   1eab2:	4798      	blx	r3
   1eab4:	0003      	movs	r3, r0
   1eab6:	001a      	movs	r2, r3
   1eab8:	4b3d      	ldr	r3, [pc, #244]	; (1ebb0 <prvNotifyQueueSetContainer+0x168>)
   1eaba:	881b      	ldrh	r3, [r3, #0]
   1eabc:	4013      	ands	r3, r2
   1eabe:	b29b      	uxth	r3, r3
   1eac0:	2b00      	cmp	r3, #0
   1eac2:	d022      	beq.n	1eb0a <prvNotifyQueueSetContainer+0xc2>
   1eac4:	683b      	ldr	r3, [r7, #0]
   1eac6:	2b00      	cmp	r3, #0
   1eac8:	d10b      	bne.n	1eae2 <prvNotifyQueueSetContainer+0x9a>
   1eaca:	693b      	ldr	r3, [r7, #16]
   1eacc:	0018      	movs	r0, r3
   1eace:	4b3a      	ldr	r3, [pc, #232]	; (1ebb8 <prvNotifyQueueSetContainer+0x170>)
   1ead0:	4798      	blx	r3
   1ead2:	0003      	movs	r3, r0
   1ead4:	001a      	movs	r2, r3
   1ead6:	4b39      	ldr	r3, [pc, #228]	; (1ebbc <prvNotifyQueueSetContainer+0x174>)
   1ead8:	5c9b      	ldrb	r3, [r3, r2]
   1eada:	3320      	adds	r3, #32
   1eadc:	b2db      	uxtb	r3, r3
   1eade:	001d      	movs	r5, r3
   1eae0:	e000      	b.n	1eae4 <prvNotifyQueueSetContainer+0x9c>
   1eae2:	2525      	movs	r5, #37	; 0x25
   1eae4:	693b      	ldr	r3, [r7, #16]
   1eae6:	0018      	movs	r0, r3
   1eae8:	4b33      	ldr	r3, [pc, #204]	; (1ebb8 <prvNotifyQueueSetContainer+0x170>)
   1eaea:	4798      	blx	r3
   1eaec:	0003      	movs	r3, r0
   1eaee:	001a      	movs	r2, r3
   1eaf0:	4b32      	ldr	r3, [pc, #200]	; (1ebbc <prvNotifyQueueSetContainer+0x174>)
   1eaf2:	5c9c      	ldrb	r4, [r3, r2]
   1eaf4:	693b      	ldr	r3, [r7, #16]
   1eaf6:	0018      	movs	r0, r3
   1eaf8:	4b31      	ldr	r3, [pc, #196]	; (1ebc0 <prvNotifyQueueSetContainer+0x178>)
   1eafa:	4798      	blx	r3
   1eafc:	0003      	movs	r3, r0
   1eafe:	b2db      	uxtb	r3, r3
   1eb00:	001a      	movs	r2, r3
   1eb02:	0021      	movs	r1, r4
   1eb04:	0028      	movs	r0, r5
   1eb06:	4b2f      	ldr	r3, [pc, #188]	; (1ebc4 <prvNotifyQueueSetContainer+0x17c>)
   1eb08:	4798      	blx	r3
   1eb0a:	693b      	ldr	r3, [r7, #16]
   1eb0c:	0018      	movs	r0, r3
   1eb0e:	4b2a      	ldr	r3, [pc, #168]	; (1ebb8 <prvNotifyQueueSetContainer+0x170>)
   1eb10:	4798      	blx	r3
   1eb12:	0003      	movs	r3, r0
   1eb14:	001a      	movs	r2, r3
   1eb16:	4b29      	ldr	r3, [pc, #164]	; (1ebbc <prvNotifyQueueSetContainer+0x174>)
   1eb18:	5c9c      	ldrb	r4, [r3, r2]
   1eb1a:	693b      	ldr	r3, [r7, #16]
   1eb1c:	0018      	movs	r0, r3
   1eb1e:	4b28      	ldr	r3, [pc, #160]	; (1ebc0 <prvNotifyQueueSetContainer+0x178>)
   1eb20:	4798      	blx	r3
   1eb22:	0003      	movs	r3, r0
   1eb24:	b2dd      	uxtb	r5, r3
   1eb26:	693b      	ldr	r3, [r7, #16]
   1eb28:	0018      	movs	r0, r3
   1eb2a:	4b23      	ldr	r3, [pc, #140]	; (1ebb8 <prvNotifyQueueSetContainer+0x170>)
   1eb2c:	4798      	blx	r3
   1eb2e:	0003      	movs	r3, r0
   1eb30:	001a      	movs	r2, r3
   1eb32:	4b22      	ldr	r3, [pc, #136]	; (1ebbc <prvNotifyQueueSetContainer+0x174>)
   1eb34:	5c9b      	ldrb	r3, [r3, r2]
   1eb36:	2b02      	cmp	r3, #2
   1eb38:	d005      	beq.n	1eb46 <prvNotifyQueueSetContainer+0xfe>
   1eb3a:	693b      	ldr	r3, [r7, #16]
   1eb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1eb3e:	b2db      	uxtb	r3, r3
   1eb40:	3301      	adds	r3, #1
   1eb42:	b2db      	uxtb	r3, r3
   1eb44:	e000      	b.n	1eb48 <prvNotifyQueueSetContainer+0x100>
   1eb46:	2300      	movs	r3, #0
   1eb48:	001a      	movs	r2, r3
   1eb4a:	0029      	movs	r1, r5
   1eb4c:	0020      	movs	r0, r4
   1eb4e:	4b1e      	ldr	r3, [pc, #120]	; (1ebc8 <prvNotifyQueueSetContainer+0x180>)
   1eb50:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1eb52:	683a      	ldr	r2, [r7, #0]
   1eb54:	1d39      	adds	r1, r7, #4
   1eb56:	693b      	ldr	r3, [r7, #16]
   1eb58:	0018      	movs	r0, r3
   1eb5a:	4b1c      	ldr	r3, [pc, #112]	; (1ebcc <prvNotifyQueueSetContainer+0x184>)
   1eb5c:	4798      	blx	r3
   1eb5e:	0003      	movs	r3, r0
   1eb60:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1eb62:	230f      	movs	r3, #15
   1eb64:	18fb      	adds	r3, r7, r3
   1eb66:	781b      	ldrb	r3, [r3, #0]
   1eb68:	b25b      	sxtb	r3, r3
   1eb6a:	3301      	adds	r3, #1
   1eb6c:	d10d      	bne.n	1eb8a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1eb6e:	693b      	ldr	r3, [r7, #16]
   1eb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1eb72:	2b00      	cmp	r3, #0
   1eb74:	d012      	beq.n	1eb9c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1eb76:	693b      	ldr	r3, [r7, #16]
   1eb78:	3324      	adds	r3, #36	; 0x24
   1eb7a:	0018      	movs	r0, r3
   1eb7c:	4b14      	ldr	r3, [pc, #80]	; (1ebd0 <prvNotifyQueueSetContainer+0x188>)
   1eb7e:	4798      	blx	r3
   1eb80:	1e03      	subs	r3, r0, #0
   1eb82:	d00b      	beq.n	1eb9c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1eb84:	2301      	movs	r3, #1
   1eb86:	617b      	str	r3, [r7, #20]
   1eb88:	e008      	b.n	1eb9c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1eb8a:	230f      	movs	r3, #15
   1eb8c:	18fb      	adds	r3, r7, r3
   1eb8e:	781b      	ldrb	r3, [r3, #0]
   1eb90:	3301      	adds	r3, #1
   1eb92:	b2db      	uxtb	r3, r3
   1eb94:	b259      	sxtb	r1, r3
   1eb96:	693b      	ldr	r3, [r7, #16]
   1eb98:	2245      	movs	r2, #69	; 0x45
   1eb9a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1eb9c:	697b      	ldr	r3, [r7, #20]
	}
   1eb9e:	0018      	movs	r0, r3
   1eba0:	46bd      	mov	sp, r7
   1eba2:	b006      	add	sp, #24
   1eba4:	bdb0      	pop	{r4, r5, r7, pc}
   1eba6:	46c0      	nop			; (mov r8, r8)
   1eba8:	0001b211 	.word	0x0001b211
   1ebac:	0001af75 	.word	0x0001af75
   1ebb0:	2000018c 	.word	0x2000018c
   1ebb4:	0001b035 	.word	0x0001b035
   1ebb8:	0001af35 	.word	0x0001af35
   1ebbc:	20000180 	.word	0x20000180
   1ebc0:	0001b015 	.word	0x0001b015
   1ebc4:	0001b96d 	.word	0x0001b96d
   1ebc8:	0001bfc9 	.word	0x0001bfc9
   1ebcc:	0001e745 	.word	0x0001e745
   1ebd0:	0001f809 	.word	0x0001f809

0001ebd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1ebd4:	b590      	push	{r4, r7, lr}
   1ebd6:	b08d      	sub	sp, #52	; 0x34
   1ebd8:	af04      	add	r7, sp, #16
   1ebda:	60f8      	str	r0, [r7, #12]
   1ebdc:	60b9      	str	r1, [r7, #8]
   1ebde:	603b      	str	r3, [r7, #0]
   1ebe0:	1dbb      	adds	r3, r7, #6
   1ebe2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ebe4:	1dbb      	adds	r3, r7, #6
   1ebe6:	881b      	ldrh	r3, [r3, #0]
   1ebe8:	009b      	lsls	r3, r3, #2
   1ebea:	0018      	movs	r0, r3
   1ebec:	4b1d      	ldr	r3, [pc, #116]	; (1ec64 <xTaskCreate+0x90>)
   1ebee:	4798      	blx	r3
   1ebf0:	0003      	movs	r3, r0
   1ebf2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1ebf4:	697b      	ldr	r3, [r7, #20]
   1ebf6:	2b00      	cmp	r3, #0
   1ebf8:	d010      	beq.n	1ec1c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1ebfa:	2054      	movs	r0, #84	; 0x54
   1ebfc:	4b19      	ldr	r3, [pc, #100]	; (1ec64 <xTaskCreate+0x90>)
   1ebfe:	4798      	blx	r3
   1ec00:	0003      	movs	r3, r0
   1ec02:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1ec04:	69fb      	ldr	r3, [r7, #28]
   1ec06:	2b00      	cmp	r3, #0
   1ec08:	d003      	beq.n	1ec12 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1ec0a:	69fb      	ldr	r3, [r7, #28]
   1ec0c:	697a      	ldr	r2, [r7, #20]
   1ec0e:	631a      	str	r2, [r3, #48]	; 0x30
   1ec10:	e006      	b.n	1ec20 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1ec12:	697b      	ldr	r3, [r7, #20]
   1ec14:	0018      	movs	r0, r3
   1ec16:	4b14      	ldr	r3, [pc, #80]	; (1ec68 <xTaskCreate+0x94>)
   1ec18:	4798      	blx	r3
   1ec1a:	e001      	b.n	1ec20 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1ec1c:	2300      	movs	r3, #0
   1ec1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1ec20:	69fb      	ldr	r3, [r7, #28]
   1ec22:	2b00      	cmp	r3, #0
   1ec24:	d016      	beq.n	1ec54 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1ec26:	1dbb      	adds	r3, r7, #6
   1ec28:	881a      	ldrh	r2, [r3, #0]
   1ec2a:	683c      	ldr	r4, [r7, #0]
   1ec2c:	68b9      	ldr	r1, [r7, #8]
   1ec2e:	68f8      	ldr	r0, [r7, #12]
   1ec30:	2300      	movs	r3, #0
   1ec32:	9303      	str	r3, [sp, #12]
   1ec34:	69fb      	ldr	r3, [r7, #28]
   1ec36:	9302      	str	r3, [sp, #8]
   1ec38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ec3a:	9301      	str	r3, [sp, #4]
   1ec3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ec3e:	9300      	str	r3, [sp, #0]
   1ec40:	0023      	movs	r3, r4
   1ec42:	4c0a      	ldr	r4, [pc, #40]	; (1ec6c <xTaskCreate+0x98>)
   1ec44:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1ec46:	69fb      	ldr	r3, [r7, #28]
   1ec48:	0018      	movs	r0, r3
   1ec4a:	4b09      	ldr	r3, [pc, #36]	; (1ec70 <xTaskCreate+0x9c>)
   1ec4c:	4798      	blx	r3
			xReturn = pdPASS;
   1ec4e:	2301      	movs	r3, #1
   1ec50:	61bb      	str	r3, [r7, #24]
   1ec52:	e002      	b.n	1ec5a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1ec54:	2301      	movs	r3, #1
   1ec56:	425b      	negs	r3, r3
   1ec58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1ec5a:	69bb      	ldr	r3, [r7, #24]
	}
   1ec5c:	0018      	movs	r0, r3
   1ec5e:	46bd      	mov	sp, r7
   1ec60:	b009      	add	sp, #36	; 0x24
   1ec62:	bd90      	pop	{r4, r7, pc}
   1ec64:	0001d0b1 	.word	0x0001d0b1
   1ec68:	0001d175 	.word	0x0001d175
   1ec6c:	0001ec75 	.word	0x0001ec75
   1ec70:	0001ed85 	.word	0x0001ed85

0001ec74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1ec74:	b580      	push	{r7, lr}
   1ec76:	b086      	sub	sp, #24
   1ec78:	af00      	add	r7, sp, #0
   1ec7a:	60f8      	str	r0, [r7, #12]
   1ec7c:	60b9      	str	r1, [r7, #8]
   1ec7e:	607a      	str	r2, [r7, #4]
   1ec80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1ec82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec84:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1ec86:	687b      	ldr	r3, [r7, #4]
   1ec88:	009b      	lsls	r3, r3, #2
   1ec8a:	001a      	movs	r2, r3
   1ec8c:	21a5      	movs	r1, #165	; 0xa5
   1ec8e:	4b39      	ldr	r3, [pc, #228]	; (1ed74 <prvInitialiseNewTask+0x100>)
   1ec90:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1ec92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1ec96:	687b      	ldr	r3, [r7, #4]
   1ec98:	4937      	ldr	r1, [pc, #220]	; (1ed78 <prvInitialiseNewTask+0x104>)
   1ec9a:	468c      	mov	ip, r1
   1ec9c:	4463      	add	r3, ip
   1ec9e:	009b      	lsls	r3, r3, #2
   1eca0:	18d3      	adds	r3, r2, r3
   1eca2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1eca4:	693b      	ldr	r3, [r7, #16]
   1eca6:	2207      	movs	r2, #7
   1eca8:	4393      	bics	r3, r2
   1ecaa:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1ecac:	693b      	ldr	r3, [r7, #16]
   1ecae:	2207      	movs	r2, #7
   1ecb0:	4013      	ands	r3, r2
   1ecb2:	d001      	beq.n	1ecb8 <prvInitialiseNewTask+0x44>
   1ecb4:	b672      	cpsid	i
   1ecb6:	e7fe      	b.n	1ecb6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1ecb8:	2300      	movs	r3, #0
   1ecba:	617b      	str	r3, [r7, #20]
   1ecbc:	e013      	b.n	1ece6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ecbe:	68ba      	ldr	r2, [r7, #8]
   1ecc0:	697b      	ldr	r3, [r7, #20]
   1ecc2:	18d3      	adds	r3, r2, r3
   1ecc4:	7818      	ldrb	r0, [r3, #0]
   1ecc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ecc8:	2134      	movs	r1, #52	; 0x34
   1ecca:	697b      	ldr	r3, [r7, #20]
   1eccc:	18d3      	adds	r3, r2, r3
   1ecce:	185b      	adds	r3, r3, r1
   1ecd0:	1c02      	adds	r2, r0, #0
   1ecd2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1ecd4:	68ba      	ldr	r2, [r7, #8]
   1ecd6:	697b      	ldr	r3, [r7, #20]
   1ecd8:	18d3      	adds	r3, r2, r3
   1ecda:	781b      	ldrb	r3, [r3, #0]
   1ecdc:	2b00      	cmp	r3, #0
   1ecde:	d006      	beq.n	1ecee <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1ece0:	697b      	ldr	r3, [r7, #20]
   1ece2:	3301      	adds	r3, #1
   1ece4:	617b      	str	r3, [r7, #20]
   1ece6:	697b      	ldr	r3, [r7, #20]
   1ece8:	2b07      	cmp	r3, #7
   1ecea:	d9e8      	bls.n	1ecbe <prvInitialiseNewTask+0x4a>
   1ecec:	e000      	b.n	1ecf0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1ecee:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1ecf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ecf2:	223b      	movs	r2, #59	; 0x3b
   1ecf4:	2100      	movs	r1, #0
   1ecf6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1ecf8:	6a3b      	ldr	r3, [r7, #32]
   1ecfa:	2b04      	cmp	r3, #4
   1ecfc:	d901      	bls.n	1ed02 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1ecfe:	2304      	movs	r3, #4
   1ed00:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed04:	6a3a      	ldr	r2, [r7, #32]
   1ed06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1ed08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed0a:	6a3a      	ldr	r2, [r7, #32]
   1ed0c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1ed0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed10:	2200      	movs	r2, #0
   1ed12:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1ed14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed16:	3304      	adds	r3, #4
   1ed18:	0018      	movs	r0, r3
   1ed1a:	4b18      	ldr	r3, [pc, #96]	; (1ed7c <prvInitialiseNewTask+0x108>)
   1ed1c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1ed1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed20:	3318      	adds	r3, #24
   1ed22:	0018      	movs	r0, r3
   1ed24:	4b15      	ldr	r3, [pc, #84]	; (1ed7c <prvInitialiseNewTask+0x108>)
   1ed26:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1ed28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ed2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ed2e:	6a3b      	ldr	r3, [r7, #32]
   1ed30:	2205      	movs	r2, #5
   1ed32:	1ad2      	subs	r2, r2, r3
   1ed34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1ed38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ed3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed40:	2200      	movs	r2, #0
   1ed42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed46:	2250      	movs	r2, #80	; 0x50
   1ed48:	2100      	movs	r1, #0
   1ed4a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1ed4c:	683a      	ldr	r2, [r7, #0]
   1ed4e:	68f9      	ldr	r1, [r7, #12]
   1ed50:	693b      	ldr	r3, [r7, #16]
   1ed52:	0018      	movs	r0, r3
   1ed54:	4b0a      	ldr	r3, [pc, #40]	; (1ed80 <prvInitialiseNewTask+0x10c>)
   1ed56:	4798      	blx	r3
   1ed58:	0002      	movs	r2, r0
   1ed5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ed5c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1ed5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed60:	2b00      	cmp	r3, #0
   1ed62:	d002      	beq.n	1ed6a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ed66:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1ed68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1ed6a:	46c0      	nop			; (mov r8, r8)
   1ed6c:	46bd      	mov	sp, r7
   1ed6e:	b006      	add	sp, #24
   1ed70:	bd80      	pop	{r7, pc}
   1ed72:	46c0      	nop			; (mov r8, r8)
   1ed74:	00038507 	.word	0x00038507
   1ed78:	3fffffff 	.word	0x3fffffff
   1ed7c:	0001cd29 	.word	0x0001cd29
   1ed80:	0001ce41 	.word	0x0001ce41

0001ed84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1ed84:	b580      	push	{r7, lr}
   1ed86:	b082      	sub	sp, #8
   1ed88:	af00      	add	r7, sp, #0
   1ed8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1ed8c:	4b60      	ldr	r3, [pc, #384]	; (1ef10 <prvAddNewTaskToReadyList+0x18c>)
   1ed8e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1ed90:	4b60      	ldr	r3, [pc, #384]	; (1ef14 <prvAddNewTaskToReadyList+0x190>)
   1ed92:	681b      	ldr	r3, [r3, #0]
   1ed94:	1c5a      	adds	r2, r3, #1
   1ed96:	4b5f      	ldr	r3, [pc, #380]	; (1ef14 <prvAddNewTaskToReadyList+0x190>)
   1ed98:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1ed9a:	4b5f      	ldr	r3, [pc, #380]	; (1ef18 <prvAddNewTaskToReadyList+0x194>)
   1ed9c:	681b      	ldr	r3, [r3, #0]
   1ed9e:	2b00      	cmp	r3, #0
   1eda0:	d109      	bne.n	1edb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1eda2:	4b5d      	ldr	r3, [pc, #372]	; (1ef18 <prvAddNewTaskToReadyList+0x194>)
   1eda4:	687a      	ldr	r2, [r7, #4]
   1eda6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1eda8:	4b5a      	ldr	r3, [pc, #360]	; (1ef14 <prvAddNewTaskToReadyList+0x190>)
   1edaa:	681b      	ldr	r3, [r3, #0]
   1edac:	2b01      	cmp	r3, #1
   1edae:	d110      	bne.n	1edd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1edb0:	4b5a      	ldr	r3, [pc, #360]	; (1ef1c <prvAddNewTaskToReadyList+0x198>)
   1edb2:	4798      	blx	r3
   1edb4:	e00d      	b.n	1edd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1edb6:	4b5a      	ldr	r3, [pc, #360]	; (1ef20 <prvAddNewTaskToReadyList+0x19c>)
   1edb8:	681b      	ldr	r3, [r3, #0]
   1edba:	2b00      	cmp	r3, #0
   1edbc:	d109      	bne.n	1edd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1edbe:	4b56      	ldr	r3, [pc, #344]	; (1ef18 <prvAddNewTaskToReadyList+0x194>)
   1edc0:	681b      	ldr	r3, [r3, #0]
   1edc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1edc4:	687b      	ldr	r3, [r7, #4]
   1edc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1edc8:	429a      	cmp	r2, r3
   1edca:	d802      	bhi.n	1edd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1edcc:	4b52      	ldr	r3, [pc, #328]	; (1ef18 <prvAddNewTaskToReadyList+0x194>)
   1edce:	687a      	ldr	r2, [r7, #4]
   1edd0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1edd2:	4b54      	ldr	r3, [pc, #336]	; (1ef24 <prvAddNewTaskToReadyList+0x1a0>)
   1edd4:	681b      	ldr	r3, [r3, #0]
   1edd6:	1c5a      	adds	r2, r3, #1
   1edd8:	4b52      	ldr	r3, [pc, #328]	; (1ef24 <prvAddNewTaskToReadyList+0x1a0>)
   1edda:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1eddc:	4b51      	ldr	r3, [pc, #324]	; (1ef24 <prvAddNewTaskToReadyList+0x1a0>)
   1edde:	681a      	ldr	r2, [r3, #0]
   1ede0:	687b      	ldr	r3, [r7, #4]
   1ede2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1ede4:	687b      	ldr	r3, [r7, #4]
   1ede6:	2b00      	cmp	r3, #0
   1ede8:	d052      	beq.n	1ee90 <prvAddNewTaskToReadyList+0x10c>
   1edea:	2003      	movs	r0, #3
   1edec:	4b4e      	ldr	r3, [pc, #312]	; (1ef28 <prvAddNewTaskToReadyList+0x1a4>)
   1edee:	4798      	blx	r3
   1edf0:	0003      	movs	r3, r0
   1edf2:	b29a      	uxth	r2, r3
   1edf4:	687b      	ldr	r3, [r7, #4]
   1edf6:	0011      	movs	r1, r2
   1edf8:	0018      	movs	r0, r3
   1edfa:	4b4c      	ldr	r3, [pc, #304]	; (1ef2c <prvAddNewTaskToReadyList+0x1a8>)
   1edfc:	4798      	blx	r3
   1edfe:	4b4c      	ldr	r3, [pc, #304]	; (1ef30 <prvAddNewTaskToReadyList+0x1ac>)
   1ee00:	881a      	ldrh	r2, [r3, #0]
   1ee02:	687b      	ldr	r3, [r7, #4]
   1ee04:	0011      	movs	r1, r2
   1ee06:	0018      	movs	r0, r3
   1ee08:	4b4a      	ldr	r3, [pc, #296]	; (1ef34 <prvAddNewTaskToReadyList+0x1b0>)
   1ee0a:	4798      	blx	r3
   1ee0c:	687b      	ldr	r3, [r7, #4]
   1ee0e:	0018      	movs	r0, r3
   1ee10:	4b49      	ldr	r3, [pc, #292]	; (1ef38 <prvAddNewTaskToReadyList+0x1b4>)
   1ee12:	4798      	blx	r3
   1ee14:	0003      	movs	r3, r0
   1ee16:	b2d9      	uxtb	r1, r3
   1ee18:	687b      	ldr	r3, [r7, #4]
   1ee1a:	3334      	adds	r3, #52	; 0x34
   1ee1c:	001a      	movs	r2, r3
   1ee1e:	2003      	movs	r0, #3
   1ee20:	4b46      	ldr	r3, [pc, #280]	; (1ef3c <prvAddNewTaskToReadyList+0x1b8>)
   1ee22:	4798      	blx	r3
   1ee24:	687b      	ldr	r3, [r7, #4]
   1ee26:	0018      	movs	r0, r3
   1ee28:	4b43      	ldr	r3, [pc, #268]	; (1ef38 <prvAddNewTaskToReadyList+0x1b4>)
   1ee2a:	4798      	blx	r3
   1ee2c:	0003      	movs	r3, r0
   1ee2e:	b2d9      	uxtb	r1, r3
   1ee30:	687b      	ldr	r3, [r7, #4]
   1ee32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ee34:	b2db      	uxtb	r3, r3
   1ee36:	001a      	movs	r2, r3
   1ee38:	2003      	movs	r0, #3
   1ee3a:	4b41      	ldr	r3, [pc, #260]	; (1ef40 <prvAddNewTaskToReadyList+0x1bc>)
   1ee3c:	4798      	blx	r3
   1ee3e:	4b41      	ldr	r3, [pc, #260]	; (1ef44 <prvAddNewTaskToReadyList+0x1c0>)
   1ee40:	4798      	blx	r3
   1ee42:	0003      	movs	r3, r0
   1ee44:	0018      	movs	r0, r3
   1ee46:	4b40      	ldr	r3, [pc, #256]	; (1ef48 <prvAddNewTaskToReadyList+0x1c4>)
   1ee48:	4798      	blx	r3
   1ee4a:	0003      	movs	r3, r0
   1ee4c:	001a      	movs	r2, r3
   1ee4e:	4b3f      	ldr	r3, [pc, #252]	; (1ef4c <prvAddNewTaskToReadyList+0x1c8>)
   1ee50:	881b      	ldrh	r3, [r3, #0]
   1ee52:	4013      	ands	r3, r2
   1ee54:	b29b      	uxth	r3, r3
   1ee56:	2b00      	cmp	r3, #0
   1ee58:	d016      	beq.n	1ee88 <prvAddNewTaskToReadyList+0x104>
   1ee5a:	687b      	ldr	r3, [r7, #4]
   1ee5c:	0018      	movs	r0, r3
   1ee5e:	4b3a      	ldr	r3, [pc, #232]	; (1ef48 <prvAddNewTaskToReadyList+0x1c4>)
   1ee60:	4798      	blx	r3
   1ee62:	0003      	movs	r3, r0
   1ee64:	001a      	movs	r2, r3
   1ee66:	4b39      	ldr	r3, [pc, #228]	; (1ef4c <prvAddNewTaskToReadyList+0x1c8>)
   1ee68:	881b      	ldrh	r3, [r3, #0]
   1ee6a:	4013      	ands	r3, r2
   1ee6c:	b29b      	uxth	r3, r3
   1ee6e:	2b00      	cmp	r3, #0
   1ee70:	d00a      	beq.n	1ee88 <prvAddNewTaskToReadyList+0x104>
   1ee72:	687b      	ldr	r3, [r7, #4]
   1ee74:	0018      	movs	r0, r3
   1ee76:	4b30      	ldr	r3, [pc, #192]	; (1ef38 <prvAddNewTaskToReadyList+0x1b4>)
   1ee78:	4798      	blx	r3
   1ee7a:	0003      	movs	r3, r0
   1ee7c:	b2db      	uxtb	r3, r3
   1ee7e:	001a      	movs	r2, r3
   1ee80:	2103      	movs	r1, #3
   1ee82:	201b      	movs	r0, #27
   1ee84:	4b32      	ldr	r3, [pc, #200]	; (1ef50 <prvAddNewTaskToReadyList+0x1cc>)
   1ee86:	4798      	blx	r3
   1ee88:	687b      	ldr	r3, [r7, #4]
   1ee8a:	0018      	movs	r0, r3
   1ee8c:	4b31      	ldr	r3, [pc, #196]	; (1ef54 <prvAddNewTaskToReadyList+0x1d0>)
   1ee8e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1ee90:	687b      	ldr	r3, [r7, #4]
   1ee92:	0018      	movs	r0, r3
   1ee94:	4b2c      	ldr	r3, [pc, #176]	; (1ef48 <prvAddNewTaskToReadyList+0x1c4>)
   1ee96:	4798      	blx	r3
   1ee98:	0003      	movs	r3, r0
   1ee9a:	001a      	movs	r2, r3
   1ee9c:	4b2b      	ldr	r3, [pc, #172]	; (1ef4c <prvAddNewTaskToReadyList+0x1c8>)
   1ee9e:	881b      	ldrh	r3, [r3, #0]
   1eea0:	4013      	ands	r3, r2
   1eea2:	b29b      	uxth	r3, r3
   1eea4:	2b00      	cmp	r3, #0
   1eea6:	d008      	beq.n	1eeba <prvAddNewTaskToReadyList+0x136>
   1eea8:	687b      	ldr	r3, [r7, #4]
   1eeaa:	0018      	movs	r0, r3
   1eeac:	4b22      	ldr	r3, [pc, #136]	; (1ef38 <prvAddNewTaskToReadyList+0x1b4>)
   1eeae:	4798      	blx	r3
   1eeb0:	0003      	movs	r3, r0
   1eeb2:	b2db      	uxtb	r3, r3
   1eeb4:	0018      	movs	r0, r3
   1eeb6:	4b28      	ldr	r3, [pc, #160]	; (1ef58 <prvAddNewTaskToReadyList+0x1d4>)
   1eeb8:	4798      	blx	r3
   1eeba:	687b      	ldr	r3, [r7, #4]
   1eebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eebe:	4b27      	ldr	r3, [pc, #156]	; (1ef5c <prvAddNewTaskToReadyList+0x1d8>)
   1eec0:	681b      	ldr	r3, [r3, #0]
   1eec2:	429a      	cmp	r2, r3
   1eec4:	d903      	bls.n	1eece <prvAddNewTaskToReadyList+0x14a>
   1eec6:	687b      	ldr	r3, [r7, #4]
   1eec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eeca:	4b24      	ldr	r3, [pc, #144]	; (1ef5c <prvAddNewTaskToReadyList+0x1d8>)
   1eecc:	601a      	str	r2, [r3, #0]
   1eece:	687b      	ldr	r3, [r7, #4]
   1eed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eed2:	0013      	movs	r3, r2
   1eed4:	009b      	lsls	r3, r3, #2
   1eed6:	189b      	adds	r3, r3, r2
   1eed8:	009b      	lsls	r3, r3, #2
   1eeda:	4a21      	ldr	r2, [pc, #132]	; (1ef60 <prvAddNewTaskToReadyList+0x1dc>)
   1eedc:	189a      	adds	r2, r3, r2
   1eede:	687b      	ldr	r3, [r7, #4]
   1eee0:	3304      	adds	r3, #4
   1eee2:	0019      	movs	r1, r3
   1eee4:	0010      	movs	r0, r2
   1eee6:	4b1f      	ldr	r3, [pc, #124]	; (1ef64 <prvAddNewTaskToReadyList+0x1e0>)
   1eee8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1eeea:	4b1f      	ldr	r3, [pc, #124]	; (1ef68 <prvAddNewTaskToReadyList+0x1e4>)
   1eeec:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1eeee:	4b0c      	ldr	r3, [pc, #48]	; (1ef20 <prvAddNewTaskToReadyList+0x19c>)
   1eef0:	681b      	ldr	r3, [r3, #0]
   1eef2:	2b00      	cmp	r3, #0
   1eef4:	d008      	beq.n	1ef08 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1eef6:	4b08      	ldr	r3, [pc, #32]	; (1ef18 <prvAddNewTaskToReadyList+0x194>)
   1eef8:	681b      	ldr	r3, [r3, #0]
   1eefa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1eefc:	687b      	ldr	r3, [r7, #4]
   1eefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ef00:	429a      	cmp	r2, r3
   1ef02:	d201      	bcs.n	1ef08 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1ef04:	4b19      	ldr	r3, [pc, #100]	; (1ef6c <prvAddNewTaskToReadyList+0x1e8>)
   1ef06:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1ef08:	46c0      	nop			; (mov r8, r8)
   1ef0a:	46bd      	mov	sp, r7
   1ef0c:	b002      	add	sp, #8
   1ef0e:	bd80      	pop	{r7, pc}
   1ef10:	0001cf79 	.word	0x0001cf79
   1ef14:	200040d4 	.word	0x200040d4
   1ef18:	20003ffc 	.word	0x20003ffc
   1ef1c:	0001faa5 	.word	0x0001faa5
   1ef20:	200040e0 	.word	0x200040e0
   1ef24:	200040f0 	.word	0x200040f0
   1ef28:	0001c4f5 	.word	0x0001c4f5
   1ef2c:	0001af99 	.word	0x0001af99
   1ef30:	2000018e 	.word	0x2000018e
   1ef34:	0001afd5 	.word	0x0001afd5
   1ef38:	0001af55 	.word	0x0001af55
   1ef3c:	0001c725 	.word	0x0001c725
   1ef40:	0001be89 	.word	0x0001be89
   1ef44:	0001b211 	.word	0x0001b211
   1ef48:	0001af75 	.word	0x0001af75
   1ef4c:	2000018c 	.word	0x2000018c
   1ef50:	0001b96d 	.word	0x0001b96d
   1ef54:	0001b0d5 	.word	0x0001b0d5
   1ef58:	0001b725 	.word	0x0001b725
   1ef5c:	200040dc 	.word	0x200040dc
   1ef60:	20004000 	.word	0x20004000
   1ef64:	0001cd3f 	.word	0x0001cd3f
   1ef68:	0001cf9d 	.word	0x0001cf9d
   1ef6c:	0001cf61 	.word	0x0001cf61

0001ef70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1ef70:	b580      	push	{r7, lr}
   1ef72:	b084      	sub	sp, #16
   1ef74:	af00      	add	r7, sp, #0
   1ef76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1ef78:	2300      	movs	r3, #0
   1ef7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1ef7c:	687b      	ldr	r3, [r7, #4]
   1ef7e:	2b00      	cmp	r3, #0
   1ef80:	d045      	beq.n	1f00e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1ef82:	4b27      	ldr	r3, [pc, #156]	; (1f020 <vTaskDelay+0xb0>)
   1ef84:	681b      	ldr	r3, [r3, #0]
   1ef86:	2b00      	cmp	r3, #0
   1ef88:	d001      	beq.n	1ef8e <vTaskDelay+0x1e>
   1ef8a:	b672      	cpsid	i
   1ef8c:	e7fe      	b.n	1ef8c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1ef8e:	4b25      	ldr	r3, [pc, #148]	; (1f024 <vTaskDelay+0xb4>)
   1ef90:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1ef92:	4b25      	ldr	r3, [pc, #148]	; (1f028 <vTaskDelay+0xb8>)
   1ef94:	681b      	ldr	r3, [r3, #0]
   1ef96:	0018      	movs	r0, r3
   1ef98:	4b24      	ldr	r3, [pc, #144]	; (1f02c <vTaskDelay+0xbc>)
   1ef9a:	4798      	blx	r3
   1ef9c:	0003      	movs	r3, r0
   1ef9e:	001a      	movs	r2, r3
   1efa0:	4b23      	ldr	r3, [pc, #140]	; (1f030 <vTaskDelay+0xc0>)
   1efa2:	881b      	ldrh	r3, [r3, #0]
   1efa4:	4013      	ands	r3, r2
   1efa6:	b29b      	uxth	r3, r3
   1efa8:	2b00      	cmp	r3, #0
   1efaa:	d00e      	beq.n	1efca <vTaskDelay+0x5a>
   1efac:	687b      	ldr	r3, [r7, #4]
   1efae:	0019      	movs	r1, r3
   1efb0:	2089      	movs	r0, #137	; 0x89
   1efb2:	4b20      	ldr	r3, [pc, #128]	; (1f034 <vTaskDelay+0xc4>)
   1efb4:	4798      	blx	r3
   1efb6:	4b1c      	ldr	r3, [pc, #112]	; (1f028 <vTaskDelay+0xb8>)
   1efb8:	681b      	ldr	r3, [r3, #0]
   1efba:	0018      	movs	r0, r3
   1efbc:	4b1e      	ldr	r3, [pc, #120]	; (1f038 <vTaskDelay+0xc8>)
   1efbe:	4798      	blx	r3
   1efc0:	0003      	movs	r3, r0
   1efc2:	b2db      	uxtb	r3, r3
   1efc4:	0018      	movs	r0, r3
   1efc6:	4b1d      	ldr	r3, [pc, #116]	; (1f03c <vTaskDelay+0xcc>)
   1efc8:	4798      	blx	r3
   1efca:	4b1d      	ldr	r3, [pc, #116]	; (1f040 <vTaskDelay+0xd0>)
   1efcc:	4798      	blx	r3
   1efce:	0003      	movs	r3, r0
   1efd0:	0018      	movs	r0, r3
   1efd2:	4b16      	ldr	r3, [pc, #88]	; (1f02c <vTaskDelay+0xbc>)
   1efd4:	4798      	blx	r3
   1efd6:	0003      	movs	r3, r0
   1efd8:	001a      	movs	r2, r3
   1efda:	4b15      	ldr	r3, [pc, #84]	; (1f030 <vTaskDelay+0xc0>)
   1efdc:	881b      	ldrh	r3, [r3, #0]
   1efde:	4013      	ands	r3, r2
   1efe0:	b29b      	uxth	r3, r3
   1efe2:	2b00      	cmp	r3, #0
   1efe4:	d00a      	beq.n	1effc <vTaskDelay+0x8c>
   1efe6:	4b16      	ldr	r3, [pc, #88]	; (1f040 <vTaskDelay+0xd0>)
   1efe8:	4798      	blx	r3
   1efea:	0003      	movs	r3, r0
   1efec:	0018      	movs	r0, r3
   1efee:	4b12      	ldr	r3, [pc, #72]	; (1f038 <vTaskDelay+0xc8>)
   1eff0:	4798      	blx	r3
   1eff2:	0003      	movs	r3, r0
   1eff4:	b2db      	uxtb	r3, r3
   1eff6:	0018      	movs	r0, r3
   1eff8:	4b10      	ldr	r3, [pc, #64]	; (1f03c <vTaskDelay+0xcc>)
   1effa:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1effc:	687b      	ldr	r3, [r7, #4]
   1effe:	2100      	movs	r1, #0
   1f000:	0018      	movs	r0, r3
   1f002:	4b10      	ldr	r3, [pc, #64]	; (1f044 <vTaskDelay+0xd4>)
   1f004:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1f006:	4b10      	ldr	r3, [pc, #64]	; (1f048 <vTaskDelay+0xd8>)
   1f008:	4798      	blx	r3
   1f00a:	0003      	movs	r3, r0
   1f00c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1f00e:	68fb      	ldr	r3, [r7, #12]
   1f010:	2b00      	cmp	r3, #0
   1f012:	d101      	bne.n	1f018 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1f014:	4b0d      	ldr	r3, [pc, #52]	; (1f04c <vTaskDelay+0xdc>)
   1f016:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1f018:	46c0      	nop			; (mov r8, r8)
   1f01a:	46bd      	mov	sp, r7
   1f01c:	b004      	add	sp, #16
   1f01e:	bd80      	pop	{r7, pc}
   1f020:	200040fc 	.word	0x200040fc
   1f024:	0001f231 	.word	0x0001f231
   1f028:	20003ffc 	.word	0x20003ffc
   1f02c:	0001af75 	.word	0x0001af75
   1f030:	2000018c 	.word	0x2000018c
   1f034:	0001bc75 	.word	0x0001bc75
   1f038:	0001af55 	.word	0x0001af55
   1f03c:	0001c105 	.word	0x0001c105
   1f040:	0001b211 	.word	0x0001b211
   1f044:	00020189 	.word	0x00020189
   1f048:	0001f249 	.word	0x0001f249
   1f04c:	0001cf61 	.word	0x0001cf61

0001f050 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1f050:	b580      	push	{r7, lr}
   1f052:	b084      	sub	sp, #16
   1f054:	af00      	add	r7, sp, #0
   1f056:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1f058:	4b42      	ldr	r3, [pc, #264]	; (1f164 <vTaskSuspend+0x114>)
   1f05a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1f05c:	687b      	ldr	r3, [r7, #4]
   1f05e:	2b00      	cmp	r3, #0
   1f060:	d102      	bne.n	1f068 <vTaskSuspend+0x18>
   1f062:	4b41      	ldr	r3, [pc, #260]	; (1f168 <vTaskSuspend+0x118>)
   1f064:	681b      	ldr	r3, [r3, #0]
   1f066:	e000      	b.n	1f06a <vTaskSuspend+0x1a>
   1f068:	687b      	ldr	r3, [r7, #4]
   1f06a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1f06c:	4b3f      	ldr	r3, [pc, #252]	; (1f16c <vTaskSuspend+0x11c>)
   1f06e:	4798      	blx	r3
   1f070:	0003      	movs	r3, r0
   1f072:	0018      	movs	r0, r3
   1f074:	4b3e      	ldr	r3, [pc, #248]	; (1f170 <vTaskSuspend+0x120>)
   1f076:	4798      	blx	r3
   1f078:	0003      	movs	r3, r0
   1f07a:	001a      	movs	r2, r3
   1f07c:	4b3d      	ldr	r3, [pc, #244]	; (1f174 <vTaskSuspend+0x124>)
   1f07e:	881b      	ldrh	r3, [r3, #0]
   1f080:	4013      	ands	r3, r2
   1f082:	b29b      	uxth	r3, r3
   1f084:	2b00      	cmp	r3, #0
   1f086:	d016      	beq.n	1f0b6 <vTaskSuspend+0x66>
   1f088:	68fb      	ldr	r3, [r7, #12]
   1f08a:	0018      	movs	r0, r3
   1f08c:	4b38      	ldr	r3, [pc, #224]	; (1f170 <vTaskSuspend+0x120>)
   1f08e:	4798      	blx	r3
   1f090:	0003      	movs	r3, r0
   1f092:	001a      	movs	r2, r3
   1f094:	4b37      	ldr	r3, [pc, #220]	; (1f174 <vTaskSuspend+0x124>)
   1f096:	881b      	ldrh	r3, [r3, #0]
   1f098:	4013      	ands	r3, r2
   1f09a:	b29b      	uxth	r3, r3
   1f09c:	2b00      	cmp	r3, #0
   1f09e:	d00a      	beq.n	1f0b6 <vTaskSuspend+0x66>
   1f0a0:	68fb      	ldr	r3, [r7, #12]
   1f0a2:	0018      	movs	r0, r3
   1f0a4:	4b34      	ldr	r3, [pc, #208]	; (1f178 <vTaskSuspend+0x128>)
   1f0a6:	4798      	blx	r3
   1f0a8:	0003      	movs	r3, r0
   1f0aa:	b2db      	uxtb	r3, r3
   1f0ac:	001a      	movs	r2, r3
   1f0ae:	2103      	movs	r1, #3
   1f0b0:	208a      	movs	r0, #138	; 0x8a
   1f0b2:	4b32      	ldr	r3, [pc, #200]	; (1f17c <vTaskSuspend+0x12c>)
   1f0b4:	4798      	blx	r3
   1f0b6:	68fb      	ldr	r3, [r7, #12]
   1f0b8:	0018      	movs	r0, r3
   1f0ba:	4b2f      	ldr	r3, [pc, #188]	; (1f178 <vTaskSuspend+0x128>)
   1f0bc:	4798      	blx	r3
   1f0be:	0003      	movs	r3, r0
   1f0c0:	b2db      	uxtb	r3, r3
   1f0c2:	0018      	movs	r0, r3
   1f0c4:	4b2e      	ldr	r3, [pc, #184]	; (1f180 <vTaskSuspend+0x130>)
   1f0c6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1f0c8:	68fb      	ldr	r3, [r7, #12]
   1f0ca:	3304      	adds	r3, #4
   1f0cc:	0018      	movs	r0, r3
   1f0ce:	4b2d      	ldr	r3, [pc, #180]	; (1f184 <vTaskSuspend+0x134>)
   1f0d0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1f0d2:	68fb      	ldr	r3, [r7, #12]
   1f0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f0d6:	2b00      	cmp	r3, #0
   1f0d8:	d004      	beq.n	1f0e4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f0da:	68fb      	ldr	r3, [r7, #12]
   1f0dc:	3318      	adds	r3, #24
   1f0de:	0018      	movs	r0, r3
   1f0e0:	4b28      	ldr	r3, [pc, #160]	; (1f184 <vTaskSuspend+0x134>)
   1f0e2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1f0e4:	68fb      	ldr	r3, [r7, #12]
   1f0e6:	1d1a      	adds	r2, r3, #4
   1f0e8:	4b27      	ldr	r3, [pc, #156]	; (1f188 <vTaskSuspend+0x138>)
   1f0ea:	0011      	movs	r1, r2
   1f0ec:	0018      	movs	r0, r3
   1f0ee:	4b27      	ldr	r3, [pc, #156]	; (1f18c <vTaskSuspend+0x13c>)
   1f0f0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1f0f2:	68fb      	ldr	r3, [r7, #12]
   1f0f4:	2250      	movs	r2, #80	; 0x50
   1f0f6:	5c9b      	ldrb	r3, [r3, r2]
   1f0f8:	b2db      	uxtb	r3, r3
   1f0fa:	2b01      	cmp	r3, #1
   1f0fc:	d103      	bne.n	1f106 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1f0fe:	68fb      	ldr	r3, [r7, #12]
   1f100:	2250      	movs	r2, #80	; 0x50
   1f102:	2100      	movs	r1, #0
   1f104:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1f106:	4b22      	ldr	r3, [pc, #136]	; (1f190 <vTaskSuspend+0x140>)
   1f108:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1f10a:	4b22      	ldr	r3, [pc, #136]	; (1f194 <vTaskSuspend+0x144>)
   1f10c:	681b      	ldr	r3, [r3, #0]
   1f10e:	2b00      	cmp	r3, #0
   1f110:	d005      	beq.n	1f11e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1f112:	4b14      	ldr	r3, [pc, #80]	; (1f164 <vTaskSuspend+0x114>)
   1f114:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1f116:	4b20      	ldr	r3, [pc, #128]	; (1f198 <vTaskSuspend+0x148>)
   1f118:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1f11a:	4b1d      	ldr	r3, [pc, #116]	; (1f190 <vTaskSuspend+0x140>)
   1f11c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1f11e:	4b12      	ldr	r3, [pc, #72]	; (1f168 <vTaskSuspend+0x118>)
   1f120:	681b      	ldr	r3, [r3, #0]
   1f122:	68fa      	ldr	r2, [r7, #12]
   1f124:	429a      	cmp	r2, r3
   1f126:	d118      	bne.n	1f15a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1f128:	4b1a      	ldr	r3, [pc, #104]	; (1f194 <vTaskSuspend+0x144>)
   1f12a:	681b      	ldr	r3, [r3, #0]
   1f12c:	2b00      	cmp	r3, #0
   1f12e:	d008      	beq.n	1f142 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1f130:	4b1a      	ldr	r3, [pc, #104]	; (1f19c <vTaskSuspend+0x14c>)
   1f132:	681b      	ldr	r3, [r3, #0]
   1f134:	2b00      	cmp	r3, #0
   1f136:	d001      	beq.n	1f13c <vTaskSuspend+0xec>
   1f138:	b672      	cpsid	i
   1f13a:	e7fe      	b.n	1f13a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1f13c:	4b18      	ldr	r3, [pc, #96]	; (1f1a0 <vTaskSuspend+0x150>)
   1f13e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1f140:	e00b      	b.n	1f15a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1f142:	4b11      	ldr	r3, [pc, #68]	; (1f188 <vTaskSuspend+0x138>)
   1f144:	681a      	ldr	r2, [r3, #0]
   1f146:	4b17      	ldr	r3, [pc, #92]	; (1f1a4 <vTaskSuspend+0x154>)
   1f148:	681b      	ldr	r3, [r3, #0]
   1f14a:	429a      	cmp	r2, r3
   1f14c:	d103      	bne.n	1f156 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1f14e:	4b06      	ldr	r3, [pc, #24]	; (1f168 <vTaskSuspend+0x118>)
   1f150:	2200      	movs	r2, #0
   1f152:	601a      	str	r2, [r3, #0]
	}
   1f154:	e001      	b.n	1f15a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1f156:	4b14      	ldr	r3, [pc, #80]	; (1f1a8 <vTaskSuspend+0x158>)
   1f158:	4798      	blx	r3
	}
   1f15a:	46c0      	nop			; (mov r8, r8)
   1f15c:	46bd      	mov	sp, r7
   1f15e:	b004      	add	sp, #16
   1f160:	bd80      	pop	{r7, pc}
   1f162:	46c0      	nop			; (mov r8, r8)
   1f164:	0001cf79 	.word	0x0001cf79
   1f168:	20003ffc 	.word	0x20003ffc
   1f16c:	0001b211 	.word	0x0001b211
   1f170:	0001af75 	.word	0x0001af75
   1f174:	2000018c 	.word	0x2000018c
   1f178:	0001af55 	.word	0x0001af55
   1f17c:	0001b96d 	.word	0x0001b96d
   1f180:	0001c105 	.word	0x0001c105
   1f184:	0001cdef 	.word	0x0001cdef
   1f188:	200040c0 	.word	0x200040c0
   1f18c:	0001cd3f 	.word	0x0001cd3f
   1f190:	0001cf9d 	.word	0x0001cf9d
   1f194:	200040e0 	.word	0x200040e0
   1f198:	0001fc35 	.word	0x0001fc35
   1f19c:	200040fc 	.word	0x200040fc
   1f1a0:	0001cf61 	.word	0x0001cf61
   1f1a4:	200040d4 	.word	0x200040d4
   1f1a8:	0001f5c5 	.word	0x0001f5c5

0001f1ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1f1ac:	b590      	push	{r4, r7, lr}
   1f1ae:	b085      	sub	sp, #20
   1f1b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1f1b2:	4916      	ldr	r1, [pc, #88]	; (1f20c <vTaskStartScheduler+0x60>)
   1f1b4:	4816      	ldr	r0, [pc, #88]	; (1f210 <vTaskStartScheduler+0x64>)
   1f1b6:	4b17      	ldr	r3, [pc, #92]	; (1f214 <vTaskStartScheduler+0x68>)
   1f1b8:	9301      	str	r3, [sp, #4]
   1f1ba:	2300      	movs	r3, #0
   1f1bc:	9300      	str	r3, [sp, #0]
   1f1be:	2300      	movs	r3, #0
   1f1c0:	2296      	movs	r2, #150	; 0x96
   1f1c2:	4c15      	ldr	r4, [pc, #84]	; (1f218 <vTaskStartScheduler+0x6c>)
   1f1c4:	47a0      	blx	r4
   1f1c6:	0003      	movs	r3, r0
   1f1c8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1f1ca:	687b      	ldr	r3, [r7, #4]
   1f1cc:	2b01      	cmp	r3, #1
   1f1ce:	d103      	bne.n	1f1d8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1f1d0:	4b12      	ldr	r3, [pc, #72]	; (1f21c <vTaskStartScheduler+0x70>)
   1f1d2:	4798      	blx	r3
   1f1d4:	0003      	movs	r3, r0
   1f1d6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1f1d8:	687b      	ldr	r3, [r7, #4]
   1f1da:	2b01      	cmp	r3, #1
   1f1dc:	d10d      	bne.n	1f1fa <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1f1de:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1f1e0:	4b0f      	ldr	r3, [pc, #60]	; (1f220 <vTaskStartScheduler+0x74>)
   1f1e2:	2201      	movs	r2, #1
   1f1e4:	4252      	negs	r2, r2
   1f1e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1f1e8:	4b0e      	ldr	r3, [pc, #56]	; (1f224 <vTaskStartScheduler+0x78>)
   1f1ea:	2201      	movs	r2, #1
   1f1ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1f1ee:	4b0e      	ldr	r3, [pc, #56]	; (1f228 <vTaskStartScheduler+0x7c>)
   1f1f0:	2200      	movs	r2, #0
   1f1f2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1f1f4:	4b0d      	ldr	r3, [pc, #52]	; (1f22c <vTaskStartScheduler+0x80>)
   1f1f6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1f1f8:	e004      	b.n	1f204 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1f1fa:	687b      	ldr	r3, [r7, #4]
   1f1fc:	3301      	adds	r3, #1
   1f1fe:	d101      	bne.n	1f204 <vTaskStartScheduler+0x58>
   1f200:	b672      	cpsid	i
   1f202:	e7fe      	b.n	1f202 <vTaskStartScheduler+0x56>
}
   1f204:	46c0      	nop			; (mov r8, r8)
   1f206:	46bd      	mov	sp, r7
   1f208:	b003      	add	sp, #12
   1f20a:	bd90      	pop	{r4, r7, pc}
   1f20c:	0003c828 	.word	0x0003c828
   1f210:	0001fa7d 	.word	0x0001fa7d
   1f214:	200040f8 	.word	0x200040f8
   1f218:	0001ebd5 	.word	0x0001ebd5
   1f21c:	0002023d 	.word	0x0002023d
   1f220:	200040f4 	.word	0x200040f4
   1f224:	200040e0 	.word	0x200040e0
   1f228:	200040d8 	.word	0x200040d8
   1f22c:	0001cf09 	.word	0x0001cf09

0001f230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1f230:	b580      	push	{r7, lr}
   1f232:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1f234:	4b03      	ldr	r3, [pc, #12]	; (1f244 <vTaskSuspendAll+0x14>)
   1f236:	681b      	ldr	r3, [r3, #0]
   1f238:	1c5a      	adds	r2, r3, #1
   1f23a:	4b02      	ldr	r3, [pc, #8]	; (1f244 <vTaskSuspendAll+0x14>)
   1f23c:	601a      	str	r2, [r3, #0]
}
   1f23e:	46c0      	nop			; (mov r8, r8)
   1f240:	46bd      	mov	sp, r7
   1f242:	bd80      	pop	{r7, pc}
   1f244:	200040fc 	.word	0x200040fc

0001f248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1f248:	b580      	push	{r7, lr}
   1f24a:	b084      	sub	sp, #16
   1f24c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1f24e:	2300      	movs	r3, #0
   1f250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1f252:	2300      	movs	r3, #0
   1f254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1f256:	4b45      	ldr	r3, [pc, #276]	; (1f36c <xTaskResumeAll+0x124>)
   1f258:	681b      	ldr	r3, [r3, #0]
   1f25a:	2b00      	cmp	r3, #0
   1f25c:	d101      	bne.n	1f262 <xTaskResumeAll+0x1a>
   1f25e:	b672      	cpsid	i
   1f260:	e7fe      	b.n	1f260 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1f262:	4b43      	ldr	r3, [pc, #268]	; (1f370 <xTaskResumeAll+0x128>)
   1f264:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1f266:	4b41      	ldr	r3, [pc, #260]	; (1f36c <xTaskResumeAll+0x124>)
   1f268:	681b      	ldr	r3, [r3, #0]
   1f26a:	1e5a      	subs	r2, r3, #1
   1f26c:	4b3f      	ldr	r3, [pc, #252]	; (1f36c <xTaskResumeAll+0x124>)
   1f26e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f270:	4b3e      	ldr	r3, [pc, #248]	; (1f36c <xTaskResumeAll+0x124>)
   1f272:	681b      	ldr	r3, [r3, #0]
   1f274:	2b00      	cmp	r3, #0
   1f276:	d000      	beq.n	1f27a <xTaskResumeAll+0x32>
   1f278:	e071      	b.n	1f35e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1f27a:	4b3e      	ldr	r3, [pc, #248]	; (1f374 <xTaskResumeAll+0x12c>)
   1f27c:	681b      	ldr	r3, [r3, #0]
   1f27e:	2b00      	cmp	r3, #0
   1f280:	d100      	bne.n	1f284 <xTaskResumeAll+0x3c>
   1f282:	e06c      	b.n	1f35e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1f284:	e044      	b.n	1f310 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1f286:	4b3c      	ldr	r3, [pc, #240]	; (1f378 <xTaskResumeAll+0x130>)
   1f288:	68db      	ldr	r3, [r3, #12]
   1f28a:	68db      	ldr	r3, [r3, #12]
   1f28c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f28e:	68fb      	ldr	r3, [r7, #12]
   1f290:	3318      	adds	r3, #24
   1f292:	0018      	movs	r0, r3
   1f294:	4b39      	ldr	r3, [pc, #228]	; (1f37c <xTaskResumeAll+0x134>)
   1f296:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f298:	68fb      	ldr	r3, [r7, #12]
   1f29a:	3304      	adds	r3, #4
   1f29c:	0018      	movs	r0, r3
   1f29e:	4b37      	ldr	r3, [pc, #220]	; (1f37c <xTaskResumeAll+0x134>)
   1f2a0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1f2a2:	68fb      	ldr	r3, [r7, #12]
   1f2a4:	0018      	movs	r0, r3
   1f2a6:	4b36      	ldr	r3, [pc, #216]	; (1f380 <xTaskResumeAll+0x138>)
   1f2a8:	4798      	blx	r3
   1f2aa:	0003      	movs	r3, r0
   1f2ac:	001a      	movs	r2, r3
   1f2ae:	4b35      	ldr	r3, [pc, #212]	; (1f384 <xTaskResumeAll+0x13c>)
   1f2b0:	881b      	ldrh	r3, [r3, #0]
   1f2b2:	4013      	ands	r3, r2
   1f2b4:	b29b      	uxth	r3, r3
   1f2b6:	2b00      	cmp	r3, #0
   1f2b8:	d008      	beq.n	1f2cc <xTaskResumeAll+0x84>
   1f2ba:	68fb      	ldr	r3, [r7, #12]
   1f2bc:	0018      	movs	r0, r3
   1f2be:	4b32      	ldr	r3, [pc, #200]	; (1f388 <xTaskResumeAll+0x140>)
   1f2c0:	4798      	blx	r3
   1f2c2:	0003      	movs	r3, r0
   1f2c4:	b2db      	uxtb	r3, r3
   1f2c6:	0018      	movs	r0, r3
   1f2c8:	4b30      	ldr	r3, [pc, #192]	; (1f38c <xTaskResumeAll+0x144>)
   1f2ca:	4798      	blx	r3
   1f2cc:	68fb      	ldr	r3, [r7, #12]
   1f2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f2d0:	4b2f      	ldr	r3, [pc, #188]	; (1f390 <xTaskResumeAll+0x148>)
   1f2d2:	681b      	ldr	r3, [r3, #0]
   1f2d4:	429a      	cmp	r2, r3
   1f2d6:	d903      	bls.n	1f2e0 <xTaskResumeAll+0x98>
   1f2d8:	68fb      	ldr	r3, [r7, #12]
   1f2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f2dc:	4b2c      	ldr	r3, [pc, #176]	; (1f390 <xTaskResumeAll+0x148>)
   1f2de:	601a      	str	r2, [r3, #0]
   1f2e0:	68fb      	ldr	r3, [r7, #12]
   1f2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f2e4:	0013      	movs	r3, r2
   1f2e6:	009b      	lsls	r3, r3, #2
   1f2e8:	189b      	adds	r3, r3, r2
   1f2ea:	009b      	lsls	r3, r3, #2
   1f2ec:	4a29      	ldr	r2, [pc, #164]	; (1f394 <xTaskResumeAll+0x14c>)
   1f2ee:	189a      	adds	r2, r3, r2
   1f2f0:	68fb      	ldr	r3, [r7, #12]
   1f2f2:	3304      	adds	r3, #4
   1f2f4:	0019      	movs	r1, r3
   1f2f6:	0010      	movs	r0, r2
   1f2f8:	4b27      	ldr	r3, [pc, #156]	; (1f398 <xTaskResumeAll+0x150>)
   1f2fa:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1f2fc:	68fb      	ldr	r3, [r7, #12]
   1f2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f300:	4b26      	ldr	r3, [pc, #152]	; (1f39c <xTaskResumeAll+0x154>)
   1f302:	681b      	ldr	r3, [r3, #0]
   1f304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f306:	429a      	cmp	r2, r3
   1f308:	d302      	bcc.n	1f310 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1f30a:	4b25      	ldr	r3, [pc, #148]	; (1f3a0 <xTaskResumeAll+0x158>)
   1f30c:	2201      	movs	r2, #1
   1f30e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1f310:	4b19      	ldr	r3, [pc, #100]	; (1f378 <xTaskResumeAll+0x130>)
   1f312:	681b      	ldr	r3, [r3, #0]
   1f314:	2b00      	cmp	r3, #0
   1f316:	d1b6      	bne.n	1f286 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1f318:	68fb      	ldr	r3, [r7, #12]
   1f31a:	2b00      	cmp	r3, #0
   1f31c:	d001      	beq.n	1f322 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1f31e:	4b21      	ldr	r3, [pc, #132]	; (1f3a4 <xTaskResumeAll+0x15c>)
   1f320:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1f322:	4b21      	ldr	r3, [pc, #132]	; (1f3a8 <xTaskResumeAll+0x160>)
   1f324:	681b      	ldr	r3, [r3, #0]
   1f326:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1f328:	687b      	ldr	r3, [r7, #4]
   1f32a:	2b00      	cmp	r3, #0
   1f32c:	d00f      	beq.n	1f34e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1f32e:	4b1f      	ldr	r3, [pc, #124]	; (1f3ac <xTaskResumeAll+0x164>)
   1f330:	4798      	blx	r3
   1f332:	1e03      	subs	r3, r0, #0
   1f334:	d002      	beq.n	1f33c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1f336:	4b1a      	ldr	r3, [pc, #104]	; (1f3a0 <xTaskResumeAll+0x158>)
   1f338:	2201      	movs	r2, #1
   1f33a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1f33c:	687b      	ldr	r3, [r7, #4]
   1f33e:	3b01      	subs	r3, #1
   1f340:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1f342:	687b      	ldr	r3, [r7, #4]
   1f344:	2b00      	cmp	r3, #0
   1f346:	d1f2      	bne.n	1f32e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1f348:	4b17      	ldr	r3, [pc, #92]	; (1f3a8 <xTaskResumeAll+0x160>)
   1f34a:	2200      	movs	r2, #0
   1f34c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1f34e:	4b14      	ldr	r3, [pc, #80]	; (1f3a0 <xTaskResumeAll+0x158>)
   1f350:	681b      	ldr	r3, [r3, #0]
   1f352:	2b00      	cmp	r3, #0
   1f354:	d003      	beq.n	1f35e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1f356:	2301      	movs	r3, #1
   1f358:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1f35a:	4b15      	ldr	r3, [pc, #84]	; (1f3b0 <xTaskResumeAll+0x168>)
   1f35c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1f35e:	4b15      	ldr	r3, [pc, #84]	; (1f3b4 <xTaskResumeAll+0x16c>)
   1f360:	4798      	blx	r3

	return xAlreadyYielded;
   1f362:	68bb      	ldr	r3, [r7, #8]
}
   1f364:	0018      	movs	r0, r3
   1f366:	46bd      	mov	sp, r7
   1f368:	b004      	add	sp, #16
   1f36a:	bd80      	pop	{r7, pc}
   1f36c:	200040fc 	.word	0x200040fc
   1f370:	0001cf79 	.word	0x0001cf79
   1f374:	200040d4 	.word	0x200040d4
   1f378:	20004094 	.word	0x20004094
   1f37c:	0001cdef 	.word	0x0001cdef
   1f380:	0001af75 	.word	0x0001af75
   1f384:	2000018c 	.word	0x2000018c
   1f388:	0001af55 	.word	0x0001af55
   1f38c:	0001b725 	.word	0x0001b725
   1f390:	200040dc 	.word	0x200040dc
   1f394:	20004000 	.word	0x20004000
   1f398:	0001cd3f 	.word	0x0001cd3f
   1f39c:	20003ffc 	.word	0x20003ffc
   1f3a0:	200040e8 	.word	0x200040e8
   1f3a4:	0001fc35 	.word	0x0001fc35
   1f3a8:	200040e4 	.word	0x200040e4
   1f3ac:	0001f3d5 	.word	0x0001f3d5
   1f3b0:	0001cf61 	.word	0x0001cf61
   1f3b4:	0001cf9d 	.word	0x0001cf9d

0001f3b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1f3b8:	b580      	push	{r7, lr}
   1f3ba:	b082      	sub	sp, #8
   1f3bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1f3be:	4b04      	ldr	r3, [pc, #16]	; (1f3d0 <xTaskGetTickCount+0x18>)
   1f3c0:	681b      	ldr	r3, [r3, #0]
   1f3c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1f3c4:	687b      	ldr	r3, [r7, #4]
}
   1f3c6:	0018      	movs	r0, r3
   1f3c8:	46bd      	mov	sp, r7
   1f3ca:	b002      	add	sp, #8
   1f3cc:	bd80      	pop	{r7, pc}
   1f3ce:	46c0      	nop			; (mov r8, r8)
   1f3d0:	200040d8 	.word	0x200040d8

0001f3d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1f3d4:	b580      	push	{r7, lr}
   1f3d6:	b086      	sub	sp, #24
   1f3d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1f3da:	2300      	movs	r3, #0
   1f3dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1f3de:	4b64      	ldr	r3, [pc, #400]	; (1f570 <xTaskIncrementTick+0x19c>)
   1f3e0:	681b      	ldr	r3, [r3, #0]
   1f3e2:	2b01      	cmp	r3, #1
   1f3e4:	d003      	beq.n	1f3ee <xTaskIncrementTick+0x1a>
   1f3e6:	4b63      	ldr	r3, [pc, #396]	; (1f574 <xTaskIncrementTick+0x1a0>)
   1f3e8:	681b      	ldr	r3, [r3, #0]
   1f3ea:	2b00      	cmp	r3, #0
   1f3ec:	d107      	bne.n	1f3fe <xTaskIncrementTick+0x2a>
   1f3ee:	4b62      	ldr	r3, [pc, #392]	; (1f578 <xTaskIncrementTick+0x1a4>)
   1f3f0:	681b      	ldr	r3, [r3, #0]
   1f3f2:	1c5a      	adds	r2, r3, #1
   1f3f4:	4b60      	ldr	r3, [pc, #384]	; (1f578 <xTaskIncrementTick+0x1a4>)
   1f3f6:	601a      	str	r2, [r3, #0]
   1f3f8:	2000      	movs	r0, #0
   1f3fa:	4b60      	ldr	r3, [pc, #384]	; (1f57c <xTaskIncrementTick+0x1a8>)
   1f3fc:	4798      	blx	r3
   1f3fe:	4b5c      	ldr	r3, [pc, #368]	; (1f570 <xTaskIncrementTick+0x19c>)
   1f400:	681b      	ldr	r3, [r3, #0]
   1f402:	2b00      	cmp	r3, #0
   1f404:	d106      	bne.n	1f414 <xTaskIncrementTick+0x40>
   1f406:	4b5e      	ldr	r3, [pc, #376]	; (1f580 <xTaskIncrementTick+0x1ac>)
   1f408:	681b      	ldr	r3, [r3, #0]
   1f40a:	3301      	adds	r3, #1
   1f40c:	0019      	movs	r1, r3
   1f40e:	2003      	movs	r0, #3
   1f410:	4b5c      	ldr	r3, [pc, #368]	; (1f584 <xTaskIncrementTick+0x1b0>)
   1f412:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f414:	4b56      	ldr	r3, [pc, #344]	; (1f570 <xTaskIncrementTick+0x19c>)
   1f416:	681b      	ldr	r3, [r3, #0]
   1f418:	2b00      	cmp	r3, #0
   1f41a:	d000      	beq.n	1f41e <xTaskIncrementTick+0x4a>
   1f41c:	e098      	b.n	1f550 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1f41e:	4b58      	ldr	r3, [pc, #352]	; (1f580 <xTaskIncrementTick+0x1ac>)
   1f420:	681b      	ldr	r3, [r3, #0]
   1f422:	3301      	adds	r3, #1
   1f424:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1f426:	4b56      	ldr	r3, [pc, #344]	; (1f580 <xTaskIncrementTick+0x1ac>)
   1f428:	693a      	ldr	r2, [r7, #16]
   1f42a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1f42c:	693b      	ldr	r3, [r7, #16]
   1f42e:	2b00      	cmp	r3, #0
   1f430:	d117      	bne.n	1f462 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1f432:	4b55      	ldr	r3, [pc, #340]	; (1f588 <xTaskIncrementTick+0x1b4>)
   1f434:	681b      	ldr	r3, [r3, #0]
   1f436:	681b      	ldr	r3, [r3, #0]
   1f438:	2b00      	cmp	r3, #0
   1f43a:	d001      	beq.n	1f440 <xTaskIncrementTick+0x6c>
   1f43c:	b672      	cpsid	i
   1f43e:	e7fe      	b.n	1f43e <xTaskIncrementTick+0x6a>
   1f440:	4b51      	ldr	r3, [pc, #324]	; (1f588 <xTaskIncrementTick+0x1b4>)
   1f442:	681b      	ldr	r3, [r3, #0]
   1f444:	60fb      	str	r3, [r7, #12]
   1f446:	4b51      	ldr	r3, [pc, #324]	; (1f58c <xTaskIncrementTick+0x1b8>)
   1f448:	681a      	ldr	r2, [r3, #0]
   1f44a:	4b4f      	ldr	r3, [pc, #316]	; (1f588 <xTaskIncrementTick+0x1b4>)
   1f44c:	601a      	str	r2, [r3, #0]
   1f44e:	4b4f      	ldr	r3, [pc, #316]	; (1f58c <xTaskIncrementTick+0x1b8>)
   1f450:	68fa      	ldr	r2, [r7, #12]
   1f452:	601a      	str	r2, [r3, #0]
   1f454:	4b4e      	ldr	r3, [pc, #312]	; (1f590 <xTaskIncrementTick+0x1bc>)
   1f456:	681b      	ldr	r3, [r3, #0]
   1f458:	1c5a      	adds	r2, r3, #1
   1f45a:	4b4d      	ldr	r3, [pc, #308]	; (1f590 <xTaskIncrementTick+0x1bc>)
   1f45c:	601a      	str	r2, [r3, #0]
   1f45e:	4b4d      	ldr	r3, [pc, #308]	; (1f594 <xTaskIncrementTick+0x1c0>)
   1f460:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1f462:	4b4d      	ldr	r3, [pc, #308]	; (1f598 <xTaskIncrementTick+0x1c4>)
   1f464:	681b      	ldr	r3, [r3, #0]
   1f466:	693a      	ldr	r2, [r7, #16]
   1f468:	429a      	cmp	r2, r3
   1f46a:	d363      	bcc.n	1f534 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f46c:	4b46      	ldr	r3, [pc, #280]	; (1f588 <xTaskIncrementTick+0x1b4>)
   1f46e:	681b      	ldr	r3, [r3, #0]
   1f470:	681b      	ldr	r3, [r3, #0]
   1f472:	2b00      	cmp	r3, #0
   1f474:	d101      	bne.n	1f47a <xTaskIncrementTick+0xa6>
   1f476:	2301      	movs	r3, #1
   1f478:	e000      	b.n	1f47c <xTaskIncrementTick+0xa8>
   1f47a:	2300      	movs	r3, #0
   1f47c:	2b00      	cmp	r3, #0
   1f47e:	d004      	beq.n	1f48a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1f480:	4b45      	ldr	r3, [pc, #276]	; (1f598 <xTaskIncrementTick+0x1c4>)
   1f482:	2201      	movs	r2, #1
   1f484:	4252      	negs	r2, r2
   1f486:	601a      	str	r2, [r3, #0]
					break;
   1f488:	e054      	b.n	1f534 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1f48a:	4b3f      	ldr	r3, [pc, #252]	; (1f588 <xTaskIncrementTick+0x1b4>)
   1f48c:	681b      	ldr	r3, [r3, #0]
   1f48e:	68db      	ldr	r3, [r3, #12]
   1f490:	68db      	ldr	r3, [r3, #12]
   1f492:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1f494:	68bb      	ldr	r3, [r7, #8]
   1f496:	685b      	ldr	r3, [r3, #4]
   1f498:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1f49a:	693a      	ldr	r2, [r7, #16]
   1f49c:	687b      	ldr	r3, [r7, #4]
   1f49e:	429a      	cmp	r2, r3
   1f4a0:	d203      	bcs.n	1f4aa <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1f4a2:	4b3d      	ldr	r3, [pc, #244]	; (1f598 <xTaskIncrementTick+0x1c4>)
   1f4a4:	687a      	ldr	r2, [r7, #4]
   1f4a6:	601a      	str	r2, [r3, #0]
						break;
   1f4a8:	e044      	b.n	1f534 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1f4aa:	68bb      	ldr	r3, [r7, #8]
   1f4ac:	3304      	adds	r3, #4
   1f4ae:	0018      	movs	r0, r3
   1f4b0:	4b3a      	ldr	r3, [pc, #232]	; (1f59c <xTaskIncrementTick+0x1c8>)
   1f4b2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1f4b4:	68bb      	ldr	r3, [r7, #8]
   1f4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f4b8:	2b00      	cmp	r3, #0
   1f4ba:	d004      	beq.n	1f4c6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1f4bc:	68bb      	ldr	r3, [r7, #8]
   1f4be:	3318      	adds	r3, #24
   1f4c0:	0018      	movs	r0, r3
   1f4c2:	4b36      	ldr	r3, [pc, #216]	; (1f59c <xTaskIncrementTick+0x1c8>)
   1f4c4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1f4c6:	68bb      	ldr	r3, [r7, #8]
   1f4c8:	0018      	movs	r0, r3
   1f4ca:	4b35      	ldr	r3, [pc, #212]	; (1f5a0 <xTaskIncrementTick+0x1cc>)
   1f4cc:	4798      	blx	r3
   1f4ce:	0003      	movs	r3, r0
   1f4d0:	001a      	movs	r2, r3
   1f4d2:	4b34      	ldr	r3, [pc, #208]	; (1f5a4 <xTaskIncrementTick+0x1d0>)
   1f4d4:	881b      	ldrh	r3, [r3, #0]
   1f4d6:	4013      	ands	r3, r2
   1f4d8:	b29b      	uxth	r3, r3
   1f4da:	2b00      	cmp	r3, #0
   1f4dc:	d008      	beq.n	1f4f0 <xTaskIncrementTick+0x11c>
   1f4de:	68bb      	ldr	r3, [r7, #8]
   1f4e0:	0018      	movs	r0, r3
   1f4e2:	4b31      	ldr	r3, [pc, #196]	; (1f5a8 <xTaskIncrementTick+0x1d4>)
   1f4e4:	4798      	blx	r3
   1f4e6:	0003      	movs	r3, r0
   1f4e8:	b2db      	uxtb	r3, r3
   1f4ea:	0018      	movs	r0, r3
   1f4ec:	4b2f      	ldr	r3, [pc, #188]	; (1f5ac <xTaskIncrementTick+0x1d8>)
   1f4ee:	4798      	blx	r3
   1f4f0:	68bb      	ldr	r3, [r7, #8]
   1f4f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f4f4:	4b2e      	ldr	r3, [pc, #184]	; (1f5b0 <xTaskIncrementTick+0x1dc>)
   1f4f6:	681b      	ldr	r3, [r3, #0]
   1f4f8:	429a      	cmp	r2, r3
   1f4fa:	d903      	bls.n	1f504 <xTaskIncrementTick+0x130>
   1f4fc:	68bb      	ldr	r3, [r7, #8]
   1f4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f500:	4b2b      	ldr	r3, [pc, #172]	; (1f5b0 <xTaskIncrementTick+0x1dc>)
   1f502:	601a      	str	r2, [r3, #0]
   1f504:	68bb      	ldr	r3, [r7, #8]
   1f506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f508:	0013      	movs	r3, r2
   1f50a:	009b      	lsls	r3, r3, #2
   1f50c:	189b      	adds	r3, r3, r2
   1f50e:	009b      	lsls	r3, r3, #2
   1f510:	4a28      	ldr	r2, [pc, #160]	; (1f5b4 <xTaskIncrementTick+0x1e0>)
   1f512:	189a      	adds	r2, r3, r2
   1f514:	68bb      	ldr	r3, [r7, #8]
   1f516:	3304      	adds	r3, #4
   1f518:	0019      	movs	r1, r3
   1f51a:	0010      	movs	r0, r2
   1f51c:	4b26      	ldr	r3, [pc, #152]	; (1f5b8 <xTaskIncrementTick+0x1e4>)
   1f51e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1f520:	68bb      	ldr	r3, [r7, #8]
   1f522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f524:	4b25      	ldr	r3, [pc, #148]	; (1f5bc <xTaskIncrementTick+0x1e8>)
   1f526:	681b      	ldr	r3, [r3, #0]
   1f528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f52a:	429a      	cmp	r2, r3
   1f52c:	d39e      	bcc.n	1f46c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1f52e:	2301      	movs	r3, #1
   1f530:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1f532:	e79b      	b.n	1f46c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1f534:	4b21      	ldr	r3, [pc, #132]	; (1f5bc <xTaskIncrementTick+0x1e8>)
   1f536:	681b      	ldr	r3, [r3, #0]
   1f538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f53a:	491e      	ldr	r1, [pc, #120]	; (1f5b4 <xTaskIncrementTick+0x1e0>)
   1f53c:	0013      	movs	r3, r2
   1f53e:	009b      	lsls	r3, r3, #2
   1f540:	189b      	adds	r3, r3, r2
   1f542:	009b      	lsls	r3, r3, #2
   1f544:	585b      	ldr	r3, [r3, r1]
   1f546:	2b01      	cmp	r3, #1
   1f548:	d907      	bls.n	1f55a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1f54a:	2301      	movs	r3, #1
   1f54c:	617b      	str	r3, [r7, #20]
   1f54e:	e004      	b.n	1f55a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1f550:	4b08      	ldr	r3, [pc, #32]	; (1f574 <xTaskIncrementTick+0x1a0>)
   1f552:	681b      	ldr	r3, [r3, #0]
   1f554:	1c5a      	adds	r2, r3, #1
   1f556:	4b07      	ldr	r3, [pc, #28]	; (1f574 <xTaskIncrementTick+0x1a0>)
   1f558:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1f55a:	4b19      	ldr	r3, [pc, #100]	; (1f5c0 <xTaskIncrementTick+0x1ec>)
   1f55c:	681b      	ldr	r3, [r3, #0]
   1f55e:	2b00      	cmp	r3, #0
   1f560:	d001      	beq.n	1f566 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1f562:	2301      	movs	r3, #1
   1f564:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1f566:	697b      	ldr	r3, [r7, #20]
}
   1f568:	0018      	movs	r0, r3
   1f56a:	46bd      	mov	sp, r7
   1f56c:	b006      	add	sp, #24
   1f56e:	bd80      	pop	{r7, pc}
   1f570:	200040fc 	.word	0x200040fc
   1f574:	200040e4 	.word	0x200040e4
   1f578:	20000c5c 	.word	0x20000c5c
   1f57c:	0001cc09 	.word	0x0001cc09
   1f580:	200040d8 	.word	0x200040d8
   1f584:	0001bc75 	.word	0x0001bc75
   1f588:	2000408c 	.word	0x2000408c
   1f58c:	20004090 	.word	0x20004090
   1f590:	200040ec 	.word	0x200040ec
   1f594:	0001fc35 	.word	0x0001fc35
   1f598:	200040f4 	.word	0x200040f4
   1f59c:	0001cdef 	.word	0x0001cdef
   1f5a0:	0001af75 	.word	0x0001af75
   1f5a4:	2000018c 	.word	0x2000018c
   1f5a8:	0001af55 	.word	0x0001af55
   1f5ac:	0001b725 	.word	0x0001b725
   1f5b0:	200040dc 	.word	0x200040dc
   1f5b4:	20004000 	.word	0x20004000
   1f5b8:	0001cd3f 	.word	0x0001cd3f
   1f5bc:	20003ffc 	.word	0x20003ffc
   1f5c0:	200040e8 	.word	0x200040e8

0001f5c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1f5c4:	b580      	push	{r7, lr}
   1f5c6:	b082      	sub	sp, #8
   1f5c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1f5ca:	4b3a      	ldr	r3, [pc, #232]	; (1f6b4 <vTaskSwitchContext+0xf0>)
   1f5cc:	681b      	ldr	r3, [r3, #0]
   1f5ce:	2b00      	cmp	r3, #0
   1f5d0:	d003      	beq.n	1f5da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1f5d2:	4b39      	ldr	r3, [pc, #228]	; (1f6b8 <vTaskSwitchContext+0xf4>)
   1f5d4:	2201      	movs	r2, #1
   1f5d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1f5d8:	e067      	b.n	1f6aa <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1f5da:	4b37      	ldr	r3, [pc, #220]	; (1f6b8 <vTaskSwitchContext+0xf4>)
   1f5dc:	2200      	movs	r2, #0
   1f5de:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1f5e0:	4b36      	ldr	r3, [pc, #216]	; (1f6bc <vTaskSwitchContext+0xf8>)
   1f5e2:	681b      	ldr	r3, [r3, #0]
   1f5e4:	681a      	ldr	r2, [r3, #0]
   1f5e6:	4b35      	ldr	r3, [pc, #212]	; (1f6bc <vTaskSwitchContext+0xf8>)
   1f5e8:	681b      	ldr	r3, [r3, #0]
   1f5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1f5ec:	429a      	cmp	r2, r3
   1f5ee:	d808      	bhi.n	1f602 <vTaskSwitchContext+0x3e>
   1f5f0:	4b32      	ldr	r3, [pc, #200]	; (1f6bc <vTaskSwitchContext+0xf8>)
   1f5f2:	681a      	ldr	r2, [r3, #0]
   1f5f4:	4b31      	ldr	r3, [pc, #196]	; (1f6bc <vTaskSwitchContext+0xf8>)
   1f5f6:	681b      	ldr	r3, [r3, #0]
   1f5f8:	3334      	adds	r3, #52	; 0x34
   1f5fa:	0019      	movs	r1, r3
   1f5fc:	0010      	movs	r0, r2
   1f5fe:	4b30      	ldr	r3, [pc, #192]	; (1f6c0 <vTaskSwitchContext+0xfc>)
   1f600:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1f602:	4b30      	ldr	r3, [pc, #192]	; (1f6c4 <vTaskSwitchContext+0x100>)
   1f604:	681b      	ldr	r3, [r3, #0]
   1f606:	607b      	str	r3, [r7, #4]
   1f608:	e007      	b.n	1f61a <vTaskSwitchContext+0x56>
   1f60a:	687b      	ldr	r3, [r7, #4]
   1f60c:	2b00      	cmp	r3, #0
   1f60e:	d101      	bne.n	1f614 <vTaskSwitchContext+0x50>
   1f610:	b672      	cpsid	i
   1f612:	e7fe      	b.n	1f612 <vTaskSwitchContext+0x4e>
   1f614:	687b      	ldr	r3, [r7, #4]
   1f616:	3b01      	subs	r3, #1
   1f618:	607b      	str	r3, [r7, #4]
   1f61a:	492b      	ldr	r1, [pc, #172]	; (1f6c8 <vTaskSwitchContext+0x104>)
   1f61c:	687a      	ldr	r2, [r7, #4]
   1f61e:	0013      	movs	r3, r2
   1f620:	009b      	lsls	r3, r3, #2
   1f622:	189b      	adds	r3, r3, r2
   1f624:	009b      	lsls	r3, r3, #2
   1f626:	585b      	ldr	r3, [r3, r1]
   1f628:	2b00      	cmp	r3, #0
   1f62a:	d0ee      	beq.n	1f60a <vTaskSwitchContext+0x46>
   1f62c:	687a      	ldr	r2, [r7, #4]
   1f62e:	0013      	movs	r3, r2
   1f630:	009b      	lsls	r3, r3, #2
   1f632:	189b      	adds	r3, r3, r2
   1f634:	009b      	lsls	r3, r3, #2
   1f636:	4a24      	ldr	r2, [pc, #144]	; (1f6c8 <vTaskSwitchContext+0x104>)
   1f638:	189b      	adds	r3, r3, r2
   1f63a:	603b      	str	r3, [r7, #0]
   1f63c:	683b      	ldr	r3, [r7, #0]
   1f63e:	685b      	ldr	r3, [r3, #4]
   1f640:	685a      	ldr	r2, [r3, #4]
   1f642:	683b      	ldr	r3, [r7, #0]
   1f644:	605a      	str	r2, [r3, #4]
   1f646:	683b      	ldr	r3, [r7, #0]
   1f648:	685a      	ldr	r2, [r3, #4]
   1f64a:	683b      	ldr	r3, [r7, #0]
   1f64c:	3308      	adds	r3, #8
   1f64e:	429a      	cmp	r2, r3
   1f650:	d104      	bne.n	1f65c <vTaskSwitchContext+0x98>
   1f652:	683b      	ldr	r3, [r7, #0]
   1f654:	685b      	ldr	r3, [r3, #4]
   1f656:	685a      	ldr	r2, [r3, #4]
   1f658:	683b      	ldr	r3, [r7, #0]
   1f65a:	605a      	str	r2, [r3, #4]
   1f65c:	683b      	ldr	r3, [r7, #0]
   1f65e:	685b      	ldr	r3, [r3, #4]
   1f660:	68da      	ldr	r2, [r3, #12]
   1f662:	4b16      	ldr	r3, [pc, #88]	; (1f6bc <vTaskSwitchContext+0xf8>)
   1f664:	601a      	str	r2, [r3, #0]
   1f666:	4b17      	ldr	r3, [pc, #92]	; (1f6c4 <vTaskSwitchContext+0x100>)
   1f668:	687a      	ldr	r2, [r7, #4]
   1f66a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1f66c:	4b17      	ldr	r3, [pc, #92]	; (1f6cc <vTaskSwitchContext+0x108>)
   1f66e:	2201      	movs	r2, #1
   1f670:	601a      	str	r2, [r3, #0]
   1f672:	4b17      	ldr	r3, [pc, #92]	; (1f6d0 <vTaskSwitchContext+0x10c>)
   1f674:	4798      	blx	r3
   1f676:	0003      	movs	r3, r0
   1f678:	0018      	movs	r0, r3
   1f67a:	4b16      	ldr	r3, [pc, #88]	; (1f6d4 <vTaskSwitchContext+0x110>)
   1f67c:	4798      	blx	r3
   1f67e:	0003      	movs	r3, r0
   1f680:	001a      	movs	r2, r3
   1f682:	4b15      	ldr	r3, [pc, #84]	; (1f6d8 <vTaskSwitchContext+0x114>)
   1f684:	881b      	ldrh	r3, [r3, #0]
   1f686:	4013      	ands	r3, r2
   1f688:	b29b      	uxth	r3, r3
   1f68a:	2b00      	cmp	r3, #0
   1f68c:	d00a      	beq.n	1f6a4 <vTaskSwitchContext+0xe0>
   1f68e:	4b10      	ldr	r3, [pc, #64]	; (1f6d0 <vTaskSwitchContext+0x10c>)
   1f690:	4798      	blx	r3
   1f692:	0003      	movs	r3, r0
   1f694:	0018      	movs	r0, r3
   1f696:	4b11      	ldr	r3, [pc, #68]	; (1f6dc <vTaskSwitchContext+0x118>)
   1f698:	4798      	blx	r3
   1f69a:	0003      	movs	r3, r0
   1f69c:	b2db      	uxtb	r3, r3
   1f69e:	0018      	movs	r0, r3
   1f6a0:	4b0f      	ldr	r3, [pc, #60]	; (1f6e0 <vTaskSwitchContext+0x11c>)
   1f6a2:	4798      	blx	r3
   1f6a4:	4b09      	ldr	r3, [pc, #36]	; (1f6cc <vTaskSwitchContext+0x108>)
   1f6a6:	2202      	movs	r2, #2
   1f6a8:	601a      	str	r2, [r3, #0]
}
   1f6aa:	46c0      	nop			; (mov r8, r8)
   1f6ac:	46bd      	mov	sp, r7
   1f6ae:	b002      	add	sp, #8
   1f6b0:	bd80      	pop	{r7, pc}
   1f6b2:	46c0      	nop			; (mov r8, r8)
   1f6b4:	200040fc 	.word	0x200040fc
   1f6b8:	200040e8 	.word	0x200040e8
   1f6bc:	20003ffc 	.word	0x20003ffc
   1f6c0:	000359d9 	.word	0x000359d9
   1f6c4:	200040dc 	.word	0x200040dc
   1f6c8:	20004000 	.word	0x20004000
   1f6cc:	20000c68 	.word	0x20000c68
   1f6d0:	0001b211 	.word	0x0001b211
   1f6d4:	0001af75 	.word	0x0001af75
   1f6d8:	2000018c 	.word	0x2000018c
   1f6dc:	0001af55 	.word	0x0001af55
   1f6e0:	0001bd71 	.word	0x0001bd71

0001f6e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1f6e4:	b580      	push	{r7, lr}
   1f6e6:	b082      	sub	sp, #8
   1f6e8:	af00      	add	r7, sp, #0
   1f6ea:	6078      	str	r0, [r7, #4]
   1f6ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1f6ee:	687b      	ldr	r3, [r7, #4]
   1f6f0:	2b00      	cmp	r3, #0
   1f6f2:	d101      	bne.n	1f6f8 <vTaskPlaceOnEventList+0x14>
   1f6f4:	b672      	cpsid	i
   1f6f6:	e7fe      	b.n	1f6f6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f6f8:	4b08      	ldr	r3, [pc, #32]	; (1f71c <vTaskPlaceOnEventList+0x38>)
   1f6fa:	681b      	ldr	r3, [r3, #0]
   1f6fc:	3318      	adds	r3, #24
   1f6fe:	001a      	movs	r2, r3
   1f700:	687b      	ldr	r3, [r7, #4]
   1f702:	0011      	movs	r1, r2
   1f704:	0018      	movs	r0, r3
   1f706:	4b06      	ldr	r3, [pc, #24]	; (1f720 <vTaskPlaceOnEventList+0x3c>)
   1f708:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1f70a:	683b      	ldr	r3, [r7, #0]
   1f70c:	2101      	movs	r1, #1
   1f70e:	0018      	movs	r0, r3
   1f710:	4b04      	ldr	r3, [pc, #16]	; (1f724 <vTaskPlaceOnEventList+0x40>)
   1f712:	4798      	blx	r3
}
   1f714:	46c0      	nop			; (mov r8, r8)
   1f716:	46bd      	mov	sp, r7
   1f718:	b002      	add	sp, #8
   1f71a:	bd80      	pop	{r7, pc}
   1f71c:	20003ffc 	.word	0x20003ffc
   1f720:	0001cd83 	.word	0x0001cd83
   1f724:	00020189 	.word	0x00020189

0001f728 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1f728:	b580      	push	{r7, lr}
   1f72a:	b084      	sub	sp, #16
   1f72c:	af00      	add	r7, sp, #0
   1f72e:	60f8      	str	r0, [r7, #12]
   1f730:	60b9      	str	r1, [r7, #8]
   1f732:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1f734:	68fb      	ldr	r3, [r7, #12]
   1f736:	2b00      	cmp	r3, #0
   1f738:	d101      	bne.n	1f73e <vTaskPlaceOnEventListRestricted+0x16>
   1f73a:	b672      	cpsid	i
   1f73c:	e7fe      	b.n	1f73c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1f73e:	4b28      	ldr	r3, [pc, #160]	; (1f7e0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1f740:	681b      	ldr	r3, [r3, #0]
   1f742:	3318      	adds	r3, #24
   1f744:	001a      	movs	r2, r3
   1f746:	68fb      	ldr	r3, [r7, #12]
   1f748:	0011      	movs	r1, r2
   1f74a:	0018      	movs	r0, r3
   1f74c:	4b25      	ldr	r3, [pc, #148]	; (1f7e4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1f74e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1f750:	687b      	ldr	r3, [r7, #4]
   1f752:	2b00      	cmp	r3, #0
   1f754:	d002      	beq.n	1f75c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1f756:	2301      	movs	r3, #1
   1f758:	425b      	negs	r3, r3
   1f75a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1f75c:	4b20      	ldr	r3, [pc, #128]	; (1f7e0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1f75e:	681b      	ldr	r3, [r3, #0]
   1f760:	0018      	movs	r0, r3
   1f762:	4b21      	ldr	r3, [pc, #132]	; (1f7e8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1f764:	4798      	blx	r3
   1f766:	0003      	movs	r3, r0
   1f768:	001a      	movs	r2, r3
   1f76a:	4b20      	ldr	r3, [pc, #128]	; (1f7ec <vTaskPlaceOnEventListRestricted+0xc4>)
   1f76c:	881b      	ldrh	r3, [r3, #0]
   1f76e:	4013      	ands	r3, r2
   1f770:	b29b      	uxth	r3, r3
   1f772:	2b00      	cmp	r3, #0
   1f774:	d011      	beq.n	1f79a <vTaskPlaceOnEventListRestricted+0x72>
   1f776:	4b1e      	ldr	r3, [pc, #120]	; (1f7f0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1f778:	681a      	ldr	r2, [r3, #0]
   1f77a:	68bb      	ldr	r3, [r7, #8]
   1f77c:	18d3      	adds	r3, r2, r3
   1f77e:	0019      	movs	r1, r3
   1f780:	2088      	movs	r0, #136	; 0x88
   1f782:	4b1c      	ldr	r3, [pc, #112]	; (1f7f4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1f784:	4798      	blx	r3
   1f786:	4b16      	ldr	r3, [pc, #88]	; (1f7e0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1f788:	681b      	ldr	r3, [r3, #0]
   1f78a:	0018      	movs	r0, r3
   1f78c:	4b1a      	ldr	r3, [pc, #104]	; (1f7f8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1f78e:	4798      	blx	r3
   1f790:	0003      	movs	r3, r0
   1f792:	b2db      	uxtb	r3, r3
   1f794:	0018      	movs	r0, r3
   1f796:	4b19      	ldr	r3, [pc, #100]	; (1f7fc <vTaskPlaceOnEventListRestricted+0xd4>)
   1f798:	4798      	blx	r3
   1f79a:	4b19      	ldr	r3, [pc, #100]	; (1f800 <vTaskPlaceOnEventListRestricted+0xd8>)
   1f79c:	4798      	blx	r3
   1f79e:	0003      	movs	r3, r0
   1f7a0:	0018      	movs	r0, r3
   1f7a2:	4b11      	ldr	r3, [pc, #68]	; (1f7e8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1f7a4:	4798      	blx	r3
   1f7a6:	0003      	movs	r3, r0
   1f7a8:	001a      	movs	r2, r3
   1f7aa:	4b10      	ldr	r3, [pc, #64]	; (1f7ec <vTaskPlaceOnEventListRestricted+0xc4>)
   1f7ac:	881b      	ldrh	r3, [r3, #0]
   1f7ae:	4013      	ands	r3, r2
   1f7b0:	b29b      	uxth	r3, r3
   1f7b2:	2b00      	cmp	r3, #0
   1f7b4:	d00a      	beq.n	1f7cc <vTaskPlaceOnEventListRestricted+0xa4>
   1f7b6:	4b12      	ldr	r3, [pc, #72]	; (1f800 <vTaskPlaceOnEventListRestricted+0xd8>)
   1f7b8:	4798      	blx	r3
   1f7ba:	0003      	movs	r3, r0
   1f7bc:	0018      	movs	r0, r3
   1f7be:	4b0e      	ldr	r3, [pc, #56]	; (1f7f8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1f7c0:	4798      	blx	r3
   1f7c2:	0003      	movs	r3, r0
   1f7c4:	b2db      	uxtb	r3, r3
   1f7c6:	0018      	movs	r0, r3
   1f7c8:	4b0c      	ldr	r3, [pc, #48]	; (1f7fc <vTaskPlaceOnEventListRestricted+0xd4>)
   1f7ca:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1f7cc:	687a      	ldr	r2, [r7, #4]
   1f7ce:	68bb      	ldr	r3, [r7, #8]
   1f7d0:	0011      	movs	r1, r2
   1f7d2:	0018      	movs	r0, r3
   1f7d4:	4b0b      	ldr	r3, [pc, #44]	; (1f804 <vTaskPlaceOnEventListRestricted+0xdc>)
   1f7d6:	4798      	blx	r3
	}
   1f7d8:	46c0      	nop			; (mov r8, r8)
   1f7da:	46bd      	mov	sp, r7
   1f7dc:	b004      	add	sp, #16
   1f7de:	bd80      	pop	{r7, pc}
   1f7e0:	20003ffc 	.word	0x20003ffc
   1f7e4:	0001cd3f 	.word	0x0001cd3f
   1f7e8:	0001af75 	.word	0x0001af75
   1f7ec:	2000018c 	.word	0x2000018c
   1f7f0:	200040d8 	.word	0x200040d8
   1f7f4:	0001bc75 	.word	0x0001bc75
   1f7f8:	0001af55 	.word	0x0001af55
   1f7fc:	0001c105 	.word	0x0001c105
   1f800:	0001b211 	.word	0x0001b211
   1f804:	00020189 	.word	0x00020189

0001f808 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1f808:	b580      	push	{r7, lr}
   1f80a:	b084      	sub	sp, #16
   1f80c:	af00      	add	r7, sp, #0
   1f80e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1f810:	687b      	ldr	r3, [r7, #4]
   1f812:	68db      	ldr	r3, [r3, #12]
   1f814:	68db      	ldr	r3, [r3, #12]
   1f816:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1f818:	68bb      	ldr	r3, [r7, #8]
   1f81a:	2b00      	cmp	r3, #0
   1f81c:	d101      	bne.n	1f822 <xTaskRemoveFromEventList+0x1a>
   1f81e:	b672      	cpsid	i
   1f820:	e7fe      	b.n	1f820 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1f822:	68bb      	ldr	r3, [r7, #8]
   1f824:	3318      	adds	r3, #24
   1f826:	0018      	movs	r0, r3
   1f828:	4b2a      	ldr	r3, [pc, #168]	; (1f8d4 <xTaskRemoveFromEventList+0xcc>)
   1f82a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1f82c:	4b2a      	ldr	r3, [pc, #168]	; (1f8d8 <xTaskRemoveFromEventList+0xd0>)
   1f82e:	681b      	ldr	r3, [r3, #0]
   1f830:	2b00      	cmp	r3, #0
   1f832:	d132      	bne.n	1f89a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1f834:	68bb      	ldr	r3, [r7, #8]
   1f836:	3304      	adds	r3, #4
   1f838:	0018      	movs	r0, r3
   1f83a:	4b26      	ldr	r3, [pc, #152]	; (1f8d4 <xTaskRemoveFromEventList+0xcc>)
   1f83c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1f83e:	68bb      	ldr	r3, [r7, #8]
   1f840:	0018      	movs	r0, r3
   1f842:	4b26      	ldr	r3, [pc, #152]	; (1f8dc <xTaskRemoveFromEventList+0xd4>)
   1f844:	4798      	blx	r3
   1f846:	0003      	movs	r3, r0
   1f848:	001a      	movs	r2, r3
   1f84a:	4b25      	ldr	r3, [pc, #148]	; (1f8e0 <xTaskRemoveFromEventList+0xd8>)
   1f84c:	881b      	ldrh	r3, [r3, #0]
   1f84e:	4013      	ands	r3, r2
   1f850:	b29b      	uxth	r3, r3
   1f852:	2b00      	cmp	r3, #0
   1f854:	d008      	beq.n	1f868 <xTaskRemoveFromEventList+0x60>
   1f856:	68bb      	ldr	r3, [r7, #8]
   1f858:	0018      	movs	r0, r3
   1f85a:	4b22      	ldr	r3, [pc, #136]	; (1f8e4 <xTaskRemoveFromEventList+0xdc>)
   1f85c:	4798      	blx	r3
   1f85e:	0003      	movs	r3, r0
   1f860:	b2db      	uxtb	r3, r3
   1f862:	0018      	movs	r0, r3
   1f864:	4b20      	ldr	r3, [pc, #128]	; (1f8e8 <xTaskRemoveFromEventList+0xe0>)
   1f866:	4798      	blx	r3
   1f868:	68bb      	ldr	r3, [r7, #8]
   1f86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f86c:	4b1f      	ldr	r3, [pc, #124]	; (1f8ec <xTaskRemoveFromEventList+0xe4>)
   1f86e:	681b      	ldr	r3, [r3, #0]
   1f870:	429a      	cmp	r2, r3
   1f872:	d903      	bls.n	1f87c <xTaskRemoveFromEventList+0x74>
   1f874:	68bb      	ldr	r3, [r7, #8]
   1f876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f878:	4b1c      	ldr	r3, [pc, #112]	; (1f8ec <xTaskRemoveFromEventList+0xe4>)
   1f87a:	601a      	str	r2, [r3, #0]
   1f87c:	68bb      	ldr	r3, [r7, #8]
   1f87e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f880:	0013      	movs	r3, r2
   1f882:	009b      	lsls	r3, r3, #2
   1f884:	189b      	adds	r3, r3, r2
   1f886:	009b      	lsls	r3, r3, #2
   1f888:	4a19      	ldr	r2, [pc, #100]	; (1f8f0 <xTaskRemoveFromEventList+0xe8>)
   1f88a:	189a      	adds	r2, r3, r2
   1f88c:	68bb      	ldr	r3, [r7, #8]
   1f88e:	3304      	adds	r3, #4
   1f890:	0019      	movs	r1, r3
   1f892:	0010      	movs	r0, r2
   1f894:	4b17      	ldr	r3, [pc, #92]	; (1f8f4 <xTaskRemoveFromEventList+0xec>)
   1f896:	4798      	blx	r3
   1f898:	e007      	b.n	1f8aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1f89a:	68bb      	ldr	r3, [r7, #8]
   1f89c:	3318      	adds	r3, #24
   1f89e:	001a      	movs	r2, r3
   1f8a0:	4b15      	ldr	r3, [pc, #84]	; (1f8f8 <xTaskRemoveFromEventList+0xf0>)
   1f8a2:	0011      	movs	r1, r2
   1f8a4:	0018      	movs	r0, r3
   1f8a6:	4b13      	ldr	r3, [pc, #76]	; (1f8f4 <xTaskRemoveFromEventList+0xec>)
   1f8a8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1f8aa:	68bb      	ldr	r3, [r7, #8]
   1f8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1f8ae:	4b13      	ldr	r3, [pc, #76]	; (1f8fc <xTaskRemoveFromEventList+0xf4>)
   1f8b0:	681b      	ldr	r3, [r3, #0]
   1f8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f8b4:	429a      	cmp	r2, r3
   1f8b6:	d905      	bls.n	1f8c4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1f8b8:	2301      	movs	r3, #1
   1f8ba:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1f8bc:	4b10      	ldr	r3, [pc, #64]	; (1f900 <xTaskRemoveFromEventList+0xf8>)
   1f8be:	2201      	movs	r2, #1
   1f8c0:	601a      	str	r2, [r3, #0]
   1f8c2:	e001      	b.n	1f8c8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1f8c4:	2300      	movs	r3, #0
   1f8c6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1f8c8:	68fb      	ldr	r3, [r7, #12]
}
   1f8ca:	0018      	movs	r0, r3
   1f8cc:	46bd      	mov	sp, r7
   1f8ce:	b004      	add	sp, #16
   1f8d0:	bd80      	pop	{r7, pc}
   1f8d2:	46c0      	nop			; (mov r8, r8)
   1f8d4:	0001cdef 	.word	0x0001cdef
   1f8d8:	200040fc 	.word	0x200040fc
   1f8dc:	0001af75 	.word	0x0001af75
   1f8e0:	2000018c 	.word	0x2000018c
   1f8e4:	0001af55 	.word	0x0001af55
   1f8e8:	0001b725 	.word	0x0001b725
   1f8ec:	200040dc 	.word	0x200040dc
   1f8f0:	20004000 	.word	0x20004000
   1f8f4:	0001cd3f 	.word	0x0001cd3f
   1f8f8:	20004094 	.word	0x20004094
   1f8fc:	20003ffc 	.word	0x20003ffc
   1f900:	200040e8 	.word	0x200040e8

0001f904 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1f904:	b580      	push	{r7, lr}
   1f906:	b082      	sub	sp, #8
   1f908:	af00      	add	r7, sp, #0
   1f90a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1f90c:	687b      	ldr	r3, [r7, #4]
   1f90e:	2b00      	cmp	r3, #0
   1f910:	d101      	bne.n	1f916 <vTaskSetTimeOutState+0x12>
   1f912:	b672      	cpsid	i
   1f914:	e7fe      	b.n	1f914 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1f916:	4b08      	ldr	r3, [pc, #32]	; (1f938 <vTaskSetTimeOutState+0x34>)
   1f918:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1f91a:	4b08      	ldr	r3, [pc, #32]	; (1f93c <vTaskSetTimeOutState+0x38>)
   1f91c:	681a      	ldr	r2, [r3, #0]
   1f91e:	687b      	ldr	r3, [r7, #4]
   1f920:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1f922:	4b07      	ldr	r3, [pc, #28]	; (1f940 <vTaskSetTimeOutState+0x3c>)
   1f924:	681a      	ldr	r2, [r3, #0]
   1f926:	687b      	ldr	r3, [r7, #4]
   1f928:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1f92a:	4b06      	ldr	r3, [pc, #24]	; (1f944 <vTaskSetTimeOutState+0x40>)
   1f92c:	4798      	blx	r3
}
   1f92e:	46c0      	nop			; (mov r8, r8)
   1f930:	46bd      	mov	sp, r7
   1f932:	b002      	add	sp, #8
   1f934:	bd80      	pop	{r7, pc}
   1f936:	46c0      	nop			; (mov r8, r8)
   1f938:	0001cf79 	.word	0x0001cf79
   1f93c:	200040ec 	.word	0x200040ec
   1f940:	200040d8 	.word	0x200040d8
   1f944:	0001cf9d 	.word	0x0001cf9d

0001f948 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1f948:	b580      	push	{r7, lr}
   1f94a:	b082      	sub	sp, #8
   1f94c:	af00      	add	r7, sp, #0
   1f94e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1f950:	4b05      	ldr	r3, [pc, #20]	; (1f968 <vTaskInternalSetTimeOutState+0x20>)
   1f952:	681a      	ldr	r2, [r3, #0]
   1f954:	687b      	ldr	r3, [r7, #4]
   1f956:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1f958:	4b04      	ldr	r3, [pc, #16]	; (1f96c <vTaskInternalSetTimeOutState+0x24>)
   1f95a:	681a      	ldr	r2, [r3, #0]
   1f95c:	687b      	ldr	r3, [r7, #4]
   1f95e:	605a      	str	r2, [r3, #4]
}
   1f960:	46c0      	nop			; (mov r8, r8)
   1f962:	46bd      	mov	sp, r7
   1f964:	b002      	add	sp, #8
   1f966:	bd80      	pop	{r7, pc}
   1f968:	200040ec 	.word	0x200040ec
   1f96c:	200040d8 	.word	0x200040d8

0001f970 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1f970:	b580      	push	{r7, lr}
   1f972:	b086      	sub	sp, #24
   1f974:	af00      	add	r7, sp, #0
   1f976:	6078      	str	r0, [r7, #4]
   1f978:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1f97a:	687b      	ldr	r3, [r7, #4]
   1f97c:	2b00      	cmp	r3, #0
   1f97e:	d101      	bne.n	1f984 <xTaskCheckForTimeOut+0x14>
   1f980:	b672      	cpsid	i
   1f982:	e7fe      	b.n	1f982 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1f984:	683b      	ldr	r3, [r7, #0]
   1f986:	2b00      	cmp	r3, #0
   1f988:	d101      	bne.n	1f98e <xTaskCheckForTimeOut+0x1e>
   1f98a:	b672      	cpsid	i
   1f98c:	e7fe      	b.n	1f98c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1f98e:	4b1e      	ldr	r3, [pc, #120]	; (1fa08 <xTaskCheckForTimeOut+0x98>)
   1f990:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1f992:	4b1e      	ldr	r3, [pc, #120]	; (1fa0c <xTaskCheckForTimeOut+0x9c>)
   1f994:	681b      	ldr	r3, [r3, #0]
   1f996:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1f998:	687b      	ldr	r3, [r7, #4]
   1f99a:	685b      	ldr	r3, [r3, #4]
   1f99c:	693a      	ldr	r2, [r7, #16]
   1f99e:	1ad3      	subs	r3, r2, r3
   1f9a0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1f9a2:	683b      	ldr	r3, [r7, #0]
   1f9a4:	681b      	ldr	r3, [r3, #0]
   1f9a6:	3301      	adds	r3, #1
   1f9a8:	d102      	bne.n	1f9b0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1f9aa:	2300      	movs	r3, #0
   1f9ac:	617b      	str	r3, [r7, #20]
   1f9ae:	e024      	b.n	1f9fa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1f9b0:	687b      	ldr	r3, [r7, #4]
   1f9b2:	681a      	ldr	r2, [r3, #0]
   1f9b4:	4b16      	ldr	r3, [pc, #88]	; (1fa10 <xTaskCheckForTimeOut+0xa0>)
   1f9b6:	681b      	ldr	r3, [r3, #0]
   1f9b8:	429a      	cmp	r2, r3
   1f9ba:	d007      	beq.n	1f9cc <xTaskCheckForTimeOut+0x5c>
   1f9bc:	687b      	ldr	r3, [r7, #4]
   1f9be:	685a      	ldr	r2, [r3, #4]
   1f9c0:	693b      	ldr	r3, [r7, #16]
   1f9c2:	429a      	cmp	r2, r3
   1f9c4:	d802      	bhi.n	1f9cc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1f9c6:	2301      	movs	r3, #1
   1f9c8:	617b      	str	r3, [r7, #20]
   1f9ca:	e016      	b.n	1f9fa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1f9cc:	683b      	ldr	r3, [r7, #0]
   1f9ce:	681a      	ldr	r2, [r3, #0]
   1f9d0:	68fb      	ldr	r3, [r7, #12]
   1f9d2:	429a      	cmp	r2, r3
   1f9d4:	d90c      	bls.n	1f9f0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1f9d6:	683b      	ldr	r3, [r7, #0]
   1f9d8:	681a      	ldr	r2, [r3, #0]
   1f9da:	68fb      	ldr	r3, [r7, #12]
   1f9dc:	1ad2      	subs	r2, r2, r3
   1f9de:	683b      	ldr	r3, [r7, #0]
   1f9e0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1f9e2:	687b      	ldr	r3, [r7, #4]
   1f9e4:	0018      	movs	r0, r3
   1f9e6:	4b0b      	ldr	r3, [pc, #44]	; (1fa14 <xTaskCheckForTimeOut+0xa4>)
   1f9e8:	4798      	blx	r3
			xReturn = pdFALSE;
   1f9ea:	2300      	movs	r3, #0
   1f9ec:	617b      	str	r3, [r7, #20]
   1f9ee:	e004      	b.n	1f9fa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1f9f0:	683b      	ldr	r3, [r7, #0]
   1f9f2:	2200      	movs	r2, #0
   1f9f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1f9f6:	2301      	movs	r3, #1
   1f9f8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1f9fa:	4b07      	ldr	r3, [pc, #28]	; (1fa18 <xTaskCheckForTimeOut+0xa8>)
   1f9fc:	4798      	blx	r3

	return xReturn;
   1f9fe:	697b      	ldr	r3, [r7, #20]
}
   1fa00:	0018      	movs	r0, r3
   1fa02:	46bd      	mov	sp, r7
   1fa04:	b006      	add	sp, #24
   1fa06:	bd80      	pop	{r7, pc}
   1fa08:	0001cf79 	.word	0x0001cf79
   1fa0c:	200040d8 	.word	0x200040d8
   1fa10:	200040ec 	.word	0x200040ec
   1fa14:	0001f949 	.word	0x0001f949
   1fa18:	0001cf9d 	.word	0x0001cf9d

0001fa1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1fa1c:	b580      	push	{r7, lr}
   1fa1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1fa20:	4b02      	ldr	r3, [pc, #8]	; (1fa2c <vTaskMissedYield+0x10>)
   1fa22:	2201      	movs	r2, #1
   1fa24:	601a      	str	r2, [r3, #0]
}
   1fa26:	46c0      	nop			; (mov r8, r8)
   1fa28:	46bd      	mov	sp, r7
   1fa2a:	bd80      	pop	{r7, pc}
   1fa2c:	200040e8 	.word	0x200040e8

0001fa30 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1fa30:	b580      	push	{r7, lr}
   1fa32:	b084      	sub	sp, #16
   1fa34:	af00      	add	r7, sp, #0
   1fa36:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1fa38:	687b      	ldr	r3, [r7, #4]
   1fa3a:	2b00      	cmp	r3, #0
   1fa3c:	d005      	beq.n	1fa4a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1fa3e:	687b      	ldr	r3, [r7, #4]
   1fa40:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1fa42:	68bb      	ldr	r3, [r7, #8]
   1fa44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1fa46:	60fb      	str	r3, [r7, #12]
   1fa48:	e001      	b.n	1fa4e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1fa4a:	2300      	movs	r3, #0
   1fa4c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1fa4e:	68fb      	ldr	r3, [r7, #12]
	}
   1fa50:	0018      	movs	r0, r3
   1fa52:	46bd      	mov	sp, r7
   1fa54:	b004      	add	sp, #16
   1fa56:	bd80      	pop	{r7, pc}

0001fa58 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1fa58:	b580      	push	{r7, lr}
   1fa5a:	b084      	sub	sp, #16
   1fa5c:	af00      	add	r7, sp, #0
   1fa5e:	6078      	str	r0, [r7, #4]
   1fa60:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1fa62:	687b      	ldr	r3, [r7, #4]
   1fa64:	2b00      	cmp	r3, #0
   1fa66:	d004      	beq.n	1fa72 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1fa68:	687b      	ldr	r3, [r7, #4]
   1fa6a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1fa6c:	68fb      	ldr	r3, [r7, #12]
   1fa6e:	683a      	ldr	r2, [r7, #0]
   1fa70:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1fa72:	46c0      	nop			; (mov r8, r8)
   1fa74:	46bd      	mov	sp, r7
   1fa76:	b004      	add	sp, #16
   1fa78:	bd80      	pop	{r7, pc}
	...

0001fa7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1fa7c:	b580      	push	{r7, lr}
   1fa7e:	b082      	sub	sp, #8
   1fa80:	af00      	add	r7, sp, #0
   1fa82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1fa84:	4b04      	ldr	r3, [pc, #16]	; (1fa98 <prvIdleTask+0x1c>)
   1fa86:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1fa88:	4b04      	ldr	r3, [pc, #16]	; (1fa9c <prvIdleTask+0x20>)
   1fa8a:	681b      	ldr	r3, [r3, #0]
   1fa8c:	2b01      	cmp	r3, #1
   1fa8e:	d9f9      	bls.n	1fa84 <prvIdleTask+0x8>
			{
				taskYIELD();
   1fa90:	4b03      	ldr	r3, [pc, #12]	; (1faa0 <prvIdleTask+0x24>)
   1fa92:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1fa94:	e7f6      	b.n	1fa84 <prvIdleTask+0x8>
   1fa96:	46c0      	nop			; (mov r8, r8)
   1fa98:	0001fb31 	.word	0x0001fb31
   1fa9c:	20004000 	.word	0x20004000
   1faa0:	0001cf61 	.word	0x0001cf61

0001faa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1faa4:	b580      	push	{r7, lr}
   1faa6:	b082      	sub	sp, #8
   1faa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1faaa:	2300      	movs	r3, #0
   1faac:	607b      	str	r3, [r7, #4]
   1faae:	e00c      	b.n	1faca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1fab0:	687a      	ldr	r2, [r7, #4]
   1fab2:	0013      	movs	r3, r2
   1fab4:	009b      	lsls	r3, r3, #2
   1fab6:	189b      	adds	r3, r3, r2
   1fab8:	009b      	lsls	r3, r3, #2
   1faba:	4a14      	ldr	r2, [pc, #80]	; (1fb0c <prvInitialiseTaskLists+0x68>)
   1fabc:	189b      	adds	r3, r3, r2
   1fabe:	0018      	movs	r0, r3
   1fac0:	4b13      	ldr	r3, [pc, #76]	; (1fb10 <prvInitialiseTaskLists+0x6c>)
   1fac2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1fac4:	687b      	ldr	r3, [r7, #4]
   1fac6:	3301      	adds	r3, #1
   1fac8:	607b      	str	r3, [r7, #4]
   1faca:	687b      	ldr	r3, [r7, #4]
   1facc:	2b04      	cmp	r3, #4
   1face:	d9ef      	bls.n	1fab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1fad0:	4b10      	ldr	r3, [pc, #64]	; (1fb14 <prvInitialiseTaskLists+0x70>)
   1fad2:	0018      	movs	r0, r3
   1fad4:	4b0e      	ldr	r3, [pc, #56]	; (1fb10 <prvInitialiseTaskLists+0x6c>)
   1fad6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1fad8:	4b0f      	ldr	r3, [pc, #60]	; (1fb18 <prvInitialiseTaskLists+0x74>)
   1fada:	0018      	movs	r0, r3
   1fadc:	4b0c      	ldr	r3, [pc, #48]	; (1fb10 <prvInitialiseTaskLists+0x6c>)
   1fade:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1fae0:	4b0e      	ldr	r3, [pc, #56]	; (1fb1c <prvInitialiseTaskLists+0x78>)
   1fae2:	0018      	movs	r0, r3
   1fae4:	4b0a      	ldr	r3, [pc, #40]	; (1fb10 <prvInitialiseTaskLists+0x6c>)
   1fae6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1fae8:	4b0d      	ldr	r3, [pc, #52]	; (1fb20 <prvInitialiseTaskLists+0x7c>)
   1faea:	0018      	movs	r0, r3
   1faec:	4b08      	ldr	r3, [pc, #32]	; (1fb10 <prvInitialiseTaskLists+0x6c>)
   1faee:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1faf0:	4b0c      	ldr	r3, [pc, #48]	; (1fb24 <prvInitialiseTaskLists+0x80>)
   1faf2:	0018      	movs	r0, r3
   1faf4:	4b06      	ldr	r3, [pc, #24]	; (1fb10 <prvInitialiseTaskLists+0x6c>)
   1faf6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1faf8:	4b0b      	ldr	r3, [pc, #44]	; (1fb28 <prvInitialiseTaskLists+0x84>)
   1fafa:	4a06      	ldr	r2, [pc, #24]	; (1fb14 <prvInitialiseTaskLists+0x70>)
   1fafc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1fafe:	4b0b      	ldr	r3, [pc, #44]	; (1fb2c <prvInitialiseTaskLists+0x88>)
   1fb00:	4a05      	ldr	r2, [pc, #20]	; (1fb18 <prvInitialiseTaskLists+0x74>)
   1fb02:	601a      	str	r2, [r3, #0]
}
   1fb04:	46c0      	nop			; (mov r8, r8)
   1fb06:	46bd      	mov	sp, r7
   1fb08:	b002      	add	sp, #8
   1fb0a:	bd80      	pop	{r7, pc}
   1fb0c:	20004000 	.word	0x20004000
   1fb10:	0001cced 	.word	0x0001cced
   1fb14:	20004064 	.word	0x20004064
   1fb18:	20004078 	.word	0x20004078
   1fb1c:	20004094 	.word	0x20004094
   1fb20:	200040a8 	.word	0x200040a8
   1fb24:	200040c0 	.word	0x200040c0
   1fb28:	2000408c 	.word	0x2000408c
   1fb2c:	20004090 	.word	0x20004090

0001fb30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1fb30:	b580      	push	{r7, lr}
   1fb32:	b082      	sub	sp, #8
   1fb34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1fb36:	e01a      	b.n	1fb6e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1fb38:	4b11      	ldr	r3, [pc, #68]	; (1fb80 <prvCheckTasksWaitingTermination+0x50>)
   1fb3a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1fb3c:	4b11      	ldr	r3, [pc, #68]	; (1fb84 <prvCheckTasksWaitingTermination+0x54>)
   1fb3e:	68db      	ldr	r3, [r3, #12]
   1fb40:	68db      	ldr	r3, [r3, #12]
   1fb42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1fb44:	687b      	ldr	r3, [r7, #4]
   1fb46:	3304      	adds	r3, #4
   1fb48:	0018      	movs	r0, r3
   1fb4a:	4b0f      	ldr	r3, [pc, #60]	; (1fb88 <prvCheckTasksWaitingTermination+0x58>)
   1fb4c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1fb4e:	4b0f      	ldr	r3, [pc, #60]	; (1fb8c <prvCheckTasksWaitingTermination+0x5c>)
   1fb50:	681b      	ldr	r3, [r3, #0]
   1fb52:	1e5a      	subs	r2, r3, #1
   1fb54:	4b0d      	ldr	r3, [pc, #52]	; (1fb8c <prvCheckTasksWaitingTermination+0x5c>)
   1fb56:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1fb58:	4b0d      	ldr	r3, [pc, #52]	; (1fb90 <prvCheckTasksWaitingTermination+0x60>)
   1fb5a:	681b      	ldr	r3, [r3, #0]
   1fb5c:	1e5a      	subs	r2, r3, #1
   1fb5e:	4b0c      	ldr	r3, [pc, #48]	; (1fb90 <prvCheckTasksWaitingTermination+0x60>)
   1fb60:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1fb62:	4b0c      	ldr	r3, [pc, #48]	; (1fb94 <prvCheckTasksWaitingTermination+0x64>)
   1fb64:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1fb66:	687b      	ldr	r3, [r7, #4]
   1fb68:	0018      	movs	r0, r3
   1fb6a:	4b0b      	ldr	r3, [pc, #44]	; (1fb98 <prvCheckTasksWaitingTermination+0x68>)
   1fb6c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1fb6e:	4b08      	ldr	r3, [pc, #32]	; (1fb90 <prvCheckTasksWaitingTermination+0x60>)
   1fb70:	681b      	ldr	r3, [r3, #0]
   1fb72:	2b00      	cmp	r3, #0
   1fb74:	d1e0      	bne.n	1fb38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1fb76:	46c0      	nop			; (mov r8, r8)
   1fb78:	46bd      	mov	sp, r7
   1fb7a:	b002      	add	sp, #8
   1fb7c:	bd80      	pop	{r7, pc}
   1fb7e:	46c0      	nop			; (mov r8, r8)
   1fb80:	0001cf79 	.word	0x0001cf79
   1fb84:	200040a8 	.word	0x200040a8
   1fb88:	0001cdef 	.word	0x0001cdef
   1fb8c:	200040d4 	.word	0x200040d4
   1fb90:	200040bc 	.word	0x200040bc
   1fb94:	0001cf9d 	.word	0x0001cf9d
   1fb98:	0001fc0d 	.word	0x0001fc0d

0001fb9c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1fb9c:	b580      	push	{r7, lr}
   1fb9e:	b084      	sub	sp, #16
   1fba0:	af00      	add	r7, sp, #0
   1fba2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1fba4:	2300      	movs	r3, #0
   1fba6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1fba8:	e005      	b.n	1fbb6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1fbaa:	687b      	ldr	r3, [r7, #4]
   1fbac:	3301      	adds	r3, #1
   1fbae:	607b      	str	r3, [r7, #4]
			ulCount++;
   1fbb0:	68fb      	ldr	r3, [r7, #12]
   1fbb2:	3301      	adds	r3, #1
   1fbb4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1fbb6:	687b      	ldr	r3, [r7, #4]
   1fbb8:	781b      	ldrb	r3, [r3, #0]
   1fbba:	2ba5      	cmp	r3, #165	; 0xa5
   1fbbc:	d0f5      	beq.n	1fbaa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1fbbe:	68fb      	ldr	r3, [r7, #12]
   1fbc0:	089b      	lsrs	r3, r3, #2
   1fbc2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1fbc4:	68fb      	ldr	r3, [r7, #12]
   1fbc6:	b29b      	uxth	r3, r3
	}
   1fbc8:	0018      	movs	r0, r3
   1fbca:	46bd      	mov	sp, r7
   1fbcc:	b004      	add	sp, #16
   1fbce:	bd80      	pop	{r7, pc}

0001fbd0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1fbd0:	b580      	push	{r7, lr}
   1fbd2:	b086      	sub	sp, #24
   1fbd4:	af00      	add	r7, sp, #0
   1fbd6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1fbd8:	687b      	ldr	r3, [r7, #4]
   1fbda:	2b00      	cmp	r3, #0
   1fbdc:	d102      	bne.n	1fbe4 <uxTaskGetStackHighWaterMark+0x14>
   1fbde:	4b09      	ldr	r3, [pc, #36]	; (1fc04 <uxTaskGetStackHighWaterMark+0x34>)
   1fbe0:	681b      	ldr	r3, [r3, #0]
   1fbe2:	e000      	b.n	1fbe6 <uxTaskGetStackHighWaterMark+0x16>
   1fbe4:	687b      	ldr	r3, [r7, #4]
   1fbe6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1fbe8:	697b      	ldr	r3, [r7, #20]
   1fbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1fbec:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1fbee:	693b      	ldr	r3, [r7, #16]
   1fbf0:	0018      	movs	r0, r3
   1fbf2:	4b05      	ldr	r3, [pc, #20]	; (1fc08 <uxTaskGetStackHighWaterMark+0x38>)
   1fbf4:	4798      	blx	r3
   1fbf6:	0003      	movs	r3, r0
   1fbf8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1fbfa:	68fb      	ldr	r3, [r7, #12]
	}
   1fbfc:	0018      	movs	r0, r3
   1fbfe:	46bd      	mov	sp, r7
   1fc00:	b006      	add	sp, #24
   1fc02:	bd80      	pop	{r7, pc}
   1fc04:	20003ffc 	.word	0x20003ffc
   1fc08:	0001fb9d 	.word	0x0001fb9d

0001fc0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1fc0c:	b580      	push	{r7, lr}
   1fc0e:	b082      	sub	sp, #8
   1fc10:	af00      	add	r7, sp, #0
   1fc12:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1fc14:	687b      	ldr	r3, [r7, #4]
   1fc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1fc18:	0018      	movs	r0, r3
   1fc1a:	4b05      	ldr	r3, [pc, #20]	; (1fc30 <prvDeleteTCB+0x24>)
   1fc1c:	4798      	blx	r3
			vPortFree( pxTCB );
   1fc1e:	687b      	ldr	r3, [r7, #4]
   1fc20:	0018      	movs	r0, r3
   1fc22:	4b03      	ldr	r3, [pc, #12]	; (1fc30 <prvDeleteTCB+0x24>)
   1fc24:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1fc26:	46c0      	nop			; (mov r8, r8)
   1fc28:	46bd      	mov	sp, r7
   1fc2a:	b002      	add	sp, #8
   1fc2c:	bd80      	pop	{r7, pc}
   1fc2e:	46c0      	nop			; (mov r8, r8)
   1fc30:	0001d175 	.word	0x0001d175

0001fc34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1fc34:	b580      	push	{r7, lr}
   1fc36:	b082      	sub	sp, #8
   1fc38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1fc3a:	4b0e      	ldr	r3, [pc, #56]	; (1fc74 <prvResetNextTaskUnblockTime+0x40>)
   1fc3c:	681b      	ldr	r3, [r3, #0]
   1fc3e:	681b      	ldr	r3, [r3, #0]
   1fc40:	2b00      	cmp	r3, #0
   1fc42:	d101      	bne.n	1fc48 <prvResetNextTaskUnblockTime+0x14>
   1fc44:	2301      	movs	r3, #1
   1fc46:	e000      	b.n	1fc4a <prvResetNextTaskUnblockTime+0x16>
   1fc48:	2300      	movs	r3, #0
   1fc4a:	2b00      	cmp	r3, #0
   1fc4c:	d004      	beq.n	1fc58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1fc4e:	4b0a      	ldr	r3, [pc, #40]	; (1fc78 <prvResetNextTaskUnblockTime+0x44>)
   1fc50:	2201      	movs	r2, #1
   1fc52:	4252      	negs	r2, r2
   1fc54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1fc56:	e008      	b.n	1fc6a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1fc58:	4b06      	ldr	r3, [pc, #24]	; (1fc74 <prvResetNextTaskUnblockTime+0x40>)
   1fc5a:	681b      	ldr	r3, [r3, #0]
   1fc5c:	68db      	ldr	r3, [r3, #12]
   1fc5e:	68db      	ldr	r3, [r3, #12]
   1fc60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1fc62:	687b      	ldr	r3, [r7, #4]
   1fc64:	685a      	ldr	r2, [r3, #4]
   1fc66:	4b04      	ldr	r3, [pc, #16]	; (1fc78 <prvResetNextTaskUnblockTime+0x44>)
   1fc68:	601a      	str	r2, [r3, #0]
}
   1fc6a:	46c0      	nop			; (mov r8, r8)
   1fc6c:	46bd      	mov	sp, r7
   1fc6e:	b002      	add	sp, #8
   1fc70:	bd80      	pop	{r7, pc}
   1fc72:	46c0      	nop			; (mov r8, r8)
   1fc74:	2000408c 	.word	0x2000408c
   1fc78:	200040f4 	.word	0x200040f4

0001fc7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1fc7c:	b580      	push	{r7, lr}
   1fc7e:	b082      	sub	sp, #8
   1fc80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1fc82:	4b04      	ldr	r3, [pc, #16]	; (1fc94 <xTaskGetCurrentTaskHandle+0x18>)
   1fc84:	681b      	ldr	r3, [r3, #0]
   1fc86:	607b      	str	r3, [r7, #4]

		return xReturn;
   1fc88:	687b      	ldr	r3, [r7, #4]
	}
   1fc8a:	0018      	movs	r0, r3
   1fc8c:	46bd      	mov	sp, r7
   1fc8e:	b002      	add	sp, #8
   1fc90:	bd80      	pop	{r7, pc}
   1fc92:	46c0      	nop			; (mov r8, r8)
   1fc94:	20003ffc 	.word	0x20003ffc

0001fc98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1fc98:	b580      	push	{r7, lr}
   1fc9a:	b082      	sub	sp, #8
   1fc9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1fc9e:	4b0a      	ldr	r3, [pc, #40]	; (1fcc8 <xTaskGetSchedulerState+0x30>)
   1fca0:	681b      	ldr	r3, [r3, #0]
   1fca2:	2b00      	cmp	r3, #0
   1fca4:	d102      	bne.n	1fcac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1fca6:	2301      	movs	r3, #1
   1fca8:	607b      	str	r3, [r7, #4]
   1fcaa:	e008      	b.n	1fcbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1fcac:	4b07      	ldr	r3, [pc, #28]	; (1fccc <xTaskGetSchedulerState+0x34>)
   1fcae:	681b      	ldr	r3, [r3, #0]
   1fcb0:	2b00      	cmp	r3, #0
   1fcb2:	d102      	bne.n	1fcba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1fcb4:	2302      	movs	r3, #2
   1fcb6:	607b      	str	r3, [r7, #4]
   1fcb8:	e001      	b.n	1fcbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1fcba:	2300      	movs	r3, #0
   1fcbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1fcbe:	687b      	ldr	r3, [r7, #4]
	}
   1fcc0:	0018      	movs	r0, r3
   1fcc2:	46bd      	mov	sp, r7
   1fcc4:	b002      	add	sp, #8
   1fcc6:	bd80      	pop	{r7, pc}
   1fcc8:	200040e0 	.word	0x200040e0
   1fccc:	200040fc 	.word	0x200040fc

0001fcd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1fcd0:	b590      	push	{r4, r7, lr}
   1fcd2:	b085      	sub	sp, #20
   1fcd4:	af00      	add	r7, sp, #0
   1fcd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1fcd8:	687b      	ldr	r3, [r7, #4]
   1fcda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1fcdc:	2300      	movs	r3, #0
   1fcde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1fce0:	687b      	ldr	r3, [r7, #4]
   1fce2:	2b00      	cmp	r3, #0
   1fce4:	d100      	bne.n	1fce8 <xTaskPriorityInherit+0x18>
   1fce6:	e09d      	b.n	1fe24 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1fce8:	68bb      	ldr	r3, [r7, #8]
   1fcea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fcec:	4b50      	ldr	r3, [pc, #320]	; (1fe30 <xTaskPriorityInherit+0x160>)
   1fcee:	681b      	ldr	r3, [r3, #0]
   1fcf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fcf2:	429a      	cmp	r2, r3
   1fcf4:	d300      	bcc.n	1fcf8 <xTaskPriorityInherit+0x28>
   1fcf6:	e08c      	b.n	1fe12 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1fcf8:	68bb      	ldr	r3, [r7, #8]
   1fcfa:	699b      	ldr	r3, [r3, #24]
   1fcfc:	2b00      	cmp	r3, #0
   1fcfe:	db06      	blt.n	1fd0e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1fd00:	4b4b      	ldr	r3, [pc, #300]	; (1fe30 <xTaskPriorityInherit+0x160>)
   1fd02:	681b      	ldr	r3, [r3, #0]
   1fd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fd06:	2205      	movs	r2, #5
   1fd08:	1ad2      	subs	r2, r2, r3
   1fd0a:	68bb      	ldr	r3, [r7, #8]
   1fd0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1fd0e:	68bb      	ldr	r3, [r7, #8]
   1fd10:	6959      	ldr	r1, [r3, #20]
   1fd12:	68bb      	ldr	r3, [r7, #8]
   1fd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd16:	0013      	movs	r3, r2
   1fd18:	009b      	lsls	r3, r3, #2
   1fd1a:	189b      	adds	r3, r3, r2
   1fd1c:	009b      	lsls	r3, r3, #2
   1fd1e:	4a45      	ldr	r2, [pc, #276]	; (1fe34 <xTaskPriorityInherit+0x164>)
   1fd20:	189b      	adds	r3, r3, r2
   1fd22:	4299      	cmp	r1, r3
   1fd24:	d101      	bne.n	1fd2a <xTaskPriorityInherit+0x5a>
   1fd26:	2301      	movs	r3, #1
   1fd28:	e000      	b.n	1fd2c <xTaskPriorityInherit+0x5c>
   1fd2a:	2300      	movs	r3, #0
   1fd2c:	2b00      	cmp	r3, #0
   1fd2e:	d037      	beq.n	1fda0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1fd30:	68bb      	ldr	r3, [r7, #8]
   1fd32:	3304      	adds	r3, #4
   1fd34:	0018      	movs	r0, r3
   1fd36:	4b40      	ldr	r3, [pc, #256]	; (1fe38 <xTaskPriorityInherit+0x168>)
   1fd38:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1fd3a:	4b3d      	ldr	r3, [pc, #244]	; (1fe30 <xTaskPriorityInherit+0x160>)
   1fd3c:	681b      	ldr	r3, [r3, #0]
   1fd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd40:	68bb      	ldr	r3, [r7, #8]
   1fd42:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1fd44:	68bb      	ldr	r3, [r7, #8]
   1fd46:	0018      	movs	r0, r3
   1fd48:	4b3c      	ldr	r3, [pc, #240]	; (1fe3c <xTaskPriorityInherit+0x16c>)
   1fd4a:	4798      	blx	r3
   1fd4c:	0003      	movs	r3, r0
   1fd4e:	001a      	movs	r2, r3
   1fd50:	4b3b      	ldr	r3, [pc, #236]	; (1fe40 <xTaskPriorityInherit+0x170>)
   1fd52:	881b      	ldrh	r3, [r3, #0]
   1fd54:	4013      	ands	r3, r2
   1fd56:	b29b      	uxth	r3, r3
   1fd58:	2b00      	cmp	r3, #0
   1fd5a:	d008      	beq.n	1fd6e <xTaskPriorityInherit+0x9e>
   1fd5c:	68bb      	ldr	r3, [r7, #8]
   1fd5e:	0018      	movs	r0, r3
   1fd60:	4b38      	ldr	r3, [pc, #224]	; (1fe44 <xTaskPriorityInherit+0x174>)
   1fd62:	4798      	blx	r3
   1fd64:	0003      	movs	r3, r0
   1fd66:	b2db      	uxtb	r3, r3
   1fd68:	0018      	movs	r0, r3
   1fd6a:	4b37      	ldr	r3, [pc, #220]	; (1fe48 <xTaskPriorityInherit+0x178>)
   1fd6c:	4798      	blx	r3
   1fd6e:	68bb      	ldr	r3, [r7, #8]
   1fd70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd72:	4b36      	ldr	r3, [pc, #216]	; (1fe4c <xTaskPriorityInherit+0x17c>)
   1fd74:	681b      	ldr	r3, [r3, #0]
   1fd76:	429a      	cmp	r2, r3
   1fd78:	d903      	bls.n	1fd82 <xTaskPriorityInherit+0xb2>
   1fd7a:	68bb      	ldr	r3, [r7, #8]
   1fd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd7e:	4b33      	ldr	r3, [pc, #204]	; (1fe4c <xTaskPriorityInherit+0x17c>)
   1fd80:	601a      	str	r2, [r3, #0]
   1fd82:	68bb      	ldr	r3, [r7, #8]
   1fd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fd86:	0013      	movs	r3, r2
   1fd88:	009b      	lsls	r3, r3, #2
   1fd8a:	189b      	adds	r3, r3, r2
   1fd8c:	009b      	lsls	r3, r3, #2
   1fd8e:	4a29      	ldr	r2, [pc, #164]	; (1fe34 <xTaskPriorityInherit+0x164>)
   1fd90:	189a      	adds	r2, r3, r2
   1fd92:	68bb      	ldr	r3, [r7, #8]
   1fd94:	3304      	adds	r3, #4
   1fd96:	0019      	movs	r1, r3
   1fd98:	0010      	movs	r0, r2
   1fd9a:	4b2d      	ldr	r3, [pc, #180]	; (1fe50 <xTaskPriorityInherit+0x180>)
   1fd9c:	4798      	blx	r3
   1fd9e:	e004      	b.n	1fdaa <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1fda0:	4b23      	ldr	r3, [pc, #140]	; (1fe30 <xTaskPriorityInherit+0x160>)
   1fda2:	681b      	ldr	r3, [r3, #0]
   1fda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fda6:	68bb      	ldr	r3, [r7, #8]
   1fda8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1fdaa:	68bb      	ldr	r3, [r7, #8]
   1fdac:	0018      	movs	r0, r3
   1fdae:	4b23      	ldr	r3, [pc, #140]	; (1fe3c <xTaskPriorityInherit+0x16c>)
   1fdb0:	4798      	blx	r3
   1fdb2:	0003      	movs	r3, r0
   1fdb4:	001a      	movs	r2, r3
   1fdb6:	4b22      	ldr	r3, [pc, #136]	; (1fe40 <xTaskPriorityInherit+0x170>)
   1fdb8:	881b      	ldrh	r3, [r3, #0]
   1fdba:	4013      	ands	r3, r2
   1fdbc:	b29b      	uxth	r3, r3
   1fdbe:	2b00      	cmp	r3, #0
   1fdc0:	d024      	beq.n	1fe0c <xTaskPriorityInherit+0x13c>
   1fdc2:	68bb      	ldr	r3, [r7, #8]
   1fdc4:	0018      	movs	r0, r3
   1fdc6:	4b1f      	ldr	r3, [pc, #124]	; (1fe44 <xTaskPriorityInherit+0x174>)
   1fdc8:	4798      	blx	r3
   1fdca:	0003      	movs	r3, r0
   1fdcc:	b2db      	uxtb	r3, r3
   1fdce:	001c      	movs	r4, r3
   1fdd0:	68bb      	ldr	r3, [r7, #8]
   1fdd2:	0018      	movs	r0, r3
   1fdd4:	4b1b      	ldr	r3, [pc, #108]	; (1fe44 <xTaskPriorityInherit+0x174>)
   1fdd6:	4798      	blx	r3
   1fdd8:	0003      	movs	r3, r0
   1fdda:	b2db      	uxtb	r3, r3
   1fddc:	0019      	movs	r1, r3
   1fdde:	2003      	movs	r0, #3
   1fde0:	4b1c      	ldr	r3, [pc, #112]	; (1fe54 <xTaskPriorityInherit+0x184>)
   1fde2:	4798      	blx	r3
   1fde4:	0003      	movs	r3, r0
   1fde6:	0022      	movs	r2, r4
   1fde8:	2103      	movs	r1, #3
   1fdea:	208e      	movs	r0, #142	; 0x8e
   1fdec:	4c1a      	ldr	r4, [pc, #104]	; (1fe58 <xTaskPriorityInherit+0x188>)
   1fdee:	47a0      	blx	r4
   1fdf0:	68bb      	ldr	r3, [r7, #8]
   1fdf2:	0018      	movs	r0, r3
   1fdf4:	4b13      	ldr	r3, [pc, #76]	; (1fe44 <xTaskPriorityInherit+0x174>)
   1fdf6:	4798      	blx	r3
   1fdf8:	0003      	movs	r3, r0
   1fdfa:	b2d9      	uxtb	r1, r3
   1fdfc:	4b0c      	ldr	r3, [pc, #48]	; (1fe30 <xTaskPriorityInherit+0x160>)
   1fdfe:	681b      	ldr	r3, [r3, #0]
   1fe00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fe02:	b2db      	uxtb	r3, r3
   1fe04:	001a      	movs	r2, r3
   1fe06:	2003      	movs	r0, #3
   1fe08:	4b14      	ldr	r3, [pc, #80]	; (1fe5c <xTaskPriorityInherit+0x18c>)
   1fe0a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1fe0c:	2301      	movs	r3, #1
   1fe0e:	60fb      	str	r3, [r7, #12]
   1fe10:	e008      	b.n	1fe24 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1fe12:	68bb      	ldr	r3, [r7, #8]
   1fe14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1fe16:	4b06      	ldr	r3, [pc, #24]	; (1fe30 <xTaskPriorityInherit+0x160>)
   1fe18:	681b      	ldr	r3, [r3, #0]
   1fe1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fe1c:	429a      	cmp	r2, r3
   1fe1e:	d201      	bcs.n	1fe24 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1fe20:	2301      	movs	r3, #1
   1fe22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1fe24:	68fb      	ldr	r3, [r7, #12]
	}
   1fe26:	0018      	movs	r0, r3
   1fe28:	46bd      	mov	sp, r7
   1fe2a:	b005      	add	sp, #20
   1fe2c:	bd90      	pop	{r4, r7, pc}
   1fe2e:	46c0      	nop			; (mov r8, r8)
   1fe30:	20003ffc 	.word	0x20003ffc
   1fe34:	20004000 	.word	0x20004000
   1fe38:	0001cdef 	.word	0x0001cdef
   1fe3c:	0001af75 	.word	0x0001af75
   1fe40:	2000018c 	.word	0x2000018c
   1fe44:	0001af55 	.word	0x0001af55
   1fe48:	0001b725 	.word	0x0001b725
   1fe4c:	200040dc 	.word	0x200040dc
   1fe50:	0001cd3f 	.word	0x0001cd3f
   1fe54:	0001bf2d 	.word	0x0001bf2d
   1fe58:	0001ba9d 	.word	0x0001ba9d
   1fe5c:	0001be89 	.word	0x0001be89

0001fe60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1fe60:	b590      	push	{r4, r7, lr}
   1fe62:	b085      	sub	sp, #20
   1fe64:	af00      	add	r7, sp, #0
   1fe66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1fe68:	687b      	ldr	r3, [r7, #4]
   1fe6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1fe6c:	2300      	movs	r3, #0
   1fe6e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1fe70:	687b      	ldr	r3, [r7, #4]
   1fe72:	2b00      	cmp	r3, #0
   1fe74:	d100      	bne.n	1fe78 <xTaskPriorityDisinherit+0x18>
   1fe76:	e089      	b.n	1ff8c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1fe78:	4b47      	ldr	r3, [pc, #284]	; (1ff98 <xTaskPriorityDisinherit+0x138>)
   1fe7a:	681b      	ldr	r3, [r3, #0]
   1fe7c:	68ba      	ldr	r2, [r7, #8]
   1fe7e:	429a      	cmp	r2, r3
   1fe80:	d001      	beq.n	1fe86 <xTaskPriorityDisinherit+0x26>
   1fe82:	b672      	cpsid	i
   1fe84:	e7fe      	b.n	1fe84 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1fe86:	68bb      	ldr	r3, [r7, #8]
   1fe88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fe8a:	2b00      	cmp	r3, #0
   1fe8c:	d101      	bne.n	1fe92 <xTaskPriorityDisinherit+0x32>
   1fe8e:	b672      	cpsid	i
   1fe90:	e7fe      	b.n	1fe90 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1fe92:	68bb      	ldr	r3, [r7, #8]
   1fe94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1fe96:	1e5a      	subs	r2, r3, #1
   1fe98:	68bb      	ldr	r3, [r7, #8]
   1fe9a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1fe9c:	68bb      	ldr	r3, [r7, #8]
   1fe9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1fea0:	68bb      	ldr	r3, [r7, #8]
   1fea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1fea4:	429a      	cmp	r2, r3
   1fea6:	d071      	beq.n	1ff8c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1fea8:	68bb      	ldr	r3, [r7, #8]
   1feaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1feac:	2b00      	cmp	r3, #0
   1feae:	d16d      	bne.n	1ff8c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1feb0:	68bb      	ldr	r3, [r7, #8]
   1feb2:	3304      	adds	r3, #4
   1feb4:	0018      	movs	r0, r3
   1feb6:	4b39      	ldr	r3, [pc, #228]	; (1ff9c <xTaskPriorityDisinherit+0x13c>)
   1feb8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1feba:	68bb      	ldr	r3, [r7, #8]
   1febc:	0018      	movs	r0, r3
   1febe:	4b38      	ldr	r3, [pc, #224]	; (1ffa0 <xTaskPriorityDisinherit+0x140>)
   1fec0:	4798      	blx	r3
   1fec2:	0003      	movs	r3, r0
   1fec4:	001a      	movs	r2, r3
   1fec6:	4b37      	ldr	r3, [pc, #220]	; (1ffa4 <xTaskPriorityDisinherit+0x144>)
   1fec8:	881b      	ldrh	r3, [r3, #0]
   1feca:	4013      	ands	r3, r2
   1fecc:	b29b      	uxth	r3, r3
   1fece:	2b00      	cmp	r3, #0
   1fed0:	d023      	beq.n	1ff1a <xTaskPriorityDisinherit+0xba>
   1fed2:	68bb      	ldr	r3, [r7, #8]
   1fed4:	0018      	movs	r0, r3
   1fed6:	4b34      	ldr	r3, [pc, #208]	; (1ffa8 <xTaskPriorityDisinherit+0x148>)
   1fed8:	4798      	blx	r3
   1feda:	0003      	movs	r3, r0
   1fedc:	b2db      	uxtb	r3, r3
   1fede:	001c      	movs	r4, r3
   1fee0:	68bb      	ldr	r3, [r7, #8]
   1fee2:	0018      	movs	r0, r3
   1fee4:	4b30      	ldr	r3, [pc, #192]	; (1ffa8 <xTaskPriorityDisinherit+0x148>)
   1fee6:	4798      	blx	r3
   1fee8:	0003      	movs	r3, r0
   1feea:	b2db      	uxtb	r3, r3
   1feec:	0019      	movs	r1, r3
   1feee:	2003      	movs	r0, #3
   1fef0:	4b2e      	ldr	r3, [pc, #184]	; (1ffac <xTaskPriorityDisinherit+0x14c>)
   1fef2:	4798      	blx	r3
   1fef4:	0003      	movs	r3, r0
   1fef6:	0022      	movs	r2, r4
   1fef8:	2103      	movs	r1, #3
   1fefa:	208f      	movs	r0, #143	; 0x8f
   1fefc:	4c2c      	ldr	r4, [pc, #176]	; (1ffb0 <xTaskPriorityDisinherit+0x150>)
   1fefe:	47a0      	blx	r4
   1ff00:	68bb      	ldr	r3, [r7, #8]
   1ff02:	0018      	movs	r0, r3
   1ff04:	4b28      	ldr	r3, [pc, #160]	; (1ffa8 <xTaskPriorityDisinherit+0x148>)
   1ff06:	4798      	blx	r3
   1ff08:	0003      	movs	r3, r0
   1ff0a:	b2d9      	uxtb	r1, r3
   1ff0c:	68bb      	ldr	r3, [r7, #8]
   1ff0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ff10:	b2db      	uxtb	r3, r3
   1ff12:	001a      	movs	r2, r3
   1ff14:	2003      	movs	r0, #3
   1ff16:	4b27      	ldr	r3, [pc, #156]	; (1ffb4 <xTaskPriorityDisinherit+0x154>)
   1ff18:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1ff1a:	68bb      	ldr	r3, [r7, #8]
   1ff1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ff1e:	68bb      	ldr	r3, [r7, #8]
   1ff20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ff22:	68bb      	ldr	r3, [r7, #8]
   1ff24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ff26:	2205      	movs	r2, #5
   1ff28:	1ad2      	subs	r2, r2, r3
   1ff2a:	68bb      	ldr	r3, [r7, #8]
   1ff2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1ff2e:	68bb      	ldr	r3, [r7, #8]
   1ff30:	0018      	movs	r0, r3
   1ff32:	4b1b      	ldr	r3, [pc, #108]	; (1ffa0 <xTaskPriorityDisinherit+0x140>)
   1ff34:	4798      	blx	r3
   1ff36:	0003      	movs	r3, r0
   1ff38:	001a      	movs	r2, r3
   1ff3a:	4b1a      	ldr	r3, [pc, #104]	; (1ffa4 <xTaskPriorityDisinherit+0x144>)
   1ff3c:	881b      	ldrh	r3, [r3, #0]
   1ff3e:	4013      	ands	r3, r2
   1ff40:	b29b      	uxth	r3, r3
   1ff42:	2b00      	cmp	r3, #0
   1ff44:	d008      	beq.n	1ff58 <xTaskPriorityDisinherit+0xf8>
   1ff46:	68bb      	ldr	r3, [r7, #8]
   1ff48:	0018      	movs	r0, r3
   1ff4a:	4b17      	ldr	r3, [pc, #92]	; (1ffa8 <xTaskPriorityDisinherit+0x148>)
   1ff4c:	4798      	blx	r3
   1ff4e:	0003      	movs	r3, r0
   1ff50:	b2db      	uxtb	r3, r3
   1ff52:	0018      	movs	r0, r3
   1ff54:	4b18      	ldr	r3, [pc, #96]	; (1ffb8 <xTaskPriorityDisinherit+0x158>)
   1ff56:	4798      	blx	r3
   1ff58:	68bb      	ldr	r3, [r7, #8]
   1ff5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff5c:	4b17      	ldr	r3, [pc, #92]	; (1ffbc <xTaskPriorityDisinherit+0x15c>)
   1ff5e:	681b      	ldr	r3, [r3, #0]
   1ff60:	429a      	cmp	r2, r3
   1ff62:	d903      	bls.n	1ff6c <xTaskPriorityDisinherit+0x10c>
   1ff64:	68bb      	ldr	r3, [r7, #8]
   1ff66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff68:	4b14      	ldr	r3, [pc, #80]	; (1ffbc <xTaskPriorityDisinherit+0x15c>)
   1ff6a:	601a      	str	r2, [r3, #0]
   1ff6c:	68bb      	ldr	r3, [r7, #8]
   1ff6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ff70:	0013      	movs	r3, r2
   1ff72:	009b      	lsls	r3, r3, #2
   1ff74:	189b      	adds	r3, r3, r2
   1ff76:	009b      	lsls	r3, r3, #2
   1ff78:	4a11      	ldr	r2, [pc, #68]	; (1ffc0 <xTaskPriorityDisinherit+0x160>)
   1ff7a:	189a      	adds	r2, r3, r2
   1ff7c:	68bb      	ldr	r3, [r7, #8]
   1ff7e:	3304      	adds	r3, #4
   1ff80:	0019      	movs	r1, r3
   1ff82:	0010      	movs	r0, r2
   1ff84:	4b0f      	ldr	r3, [pc, #60]	; (1ffc4 <xTaskPriorityDisinherit+0x164>)
   1ff86:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1ff88:	2301      	movs	r3, #1
   1ff8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ff8c:	68fb      	ldr	r3, [r7, #12]
	}
   1ff8e:	0018      	movs	r0, r3
   1ff90:	46bd      	mov	sp, r7
   1ff92:	b005      	add	sp, #20
   1ff94:	bd90      	pop	{r4, r7, pc}
   1ff96:	46c0      	nop			; (mov r8, r8)
   1ff98:	20003ffc 	.word	0x20003ffc
   1ff9c:	0001cdef 	.word	0x0001cdef
   1ffa0:	0001af75 	.word	0x0001af75
   1ffa4:	2000018c 	.word	0x2000018c
   1ffa8:	0001af55 	.word	0x0001af55
   1ffac:	0001bf2d 	.word	0x0001bf2d
   1ffb0:	0001ba9d 	.word	0x0001ba9d
   1ffb4:	0001be89 	.word	0x0001be89
   1ffb8:	0001b725 	.word	0x0001b725
   1ffbc:	200040dc 	.word	0x200040dc
   1ffc0:	20004000 	.word	0x20004000
   1ffc4:	0001cd3f 	.word	0x0001cd3f

0001ffc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1ffc8:	b590      	push	{r4, r7, lr}
   1ffca:	b087      	sub	sp, #28
   1ffcc:	af00      	add	r7, sp, #0
   1ffce:	6078      	str	r0, [r7, #4]
   1ffd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1ffd2:	687b      	ldr	r3, [r7, #4]
   1ffd4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1ffd6:	2301      	movs	r3, #1
   1ffd8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1ffda:	687b      	ldr	r3, [r7, #4]
   1ffdc:	2b00      	cmp	r3, #0
   1ffde:	d100      	bne.n	1ffe2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1ffe0:	e0a4      	b.n	2012c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1ffe2:	693b      	ldr	r3, [r7, #16]
   1ffe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ffe6:	2b00      	cmp	r3, #0
   1ffe8:	d101      	bne.n	1ffee <vTaskPriorityDisinheritAfterTimeout+0x26>
   1ffea:	b672      	cpsid	i
   1ffec:	e7fe      	b.n	1ffec <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1ffee:	693b      	ldr	r3, [r7, #16]
   1fff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1fff2:	683b      	ldr	r3, [r7, #0]
   1fff4:	429a      	cmp	r2, r3
   1fff6:	d202      	bcs.n	1fffe <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1fff8:	683b      	ldr	r3, [r7, #0]
   1fffa:	617b      	str	r3, [r7, #20]
   1fffc:	e002      	b.n	20004 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1fffe:	693b      	ldr	r3, [r7, #16]
   20000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20002:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   20004:	693b      	ldr	r3, [r7, #16]
   20006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20008:	697b      	ldr	r3, [r7, #20]
   2000a:	429a      	cmp	r2, r3
   2000c:	d100      	bne.n	20010 <vTaskPriorityDisinheritAfterTimeout+0x48>
   2000e:	e08d      	b.n	2012c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   20010:	693b      	ldr	r3, [r7, #16]
   20012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   20014:	68fb      	ldr	r3, [r7, #12]
   20016:	429a      	cmp	r2, r3
   20018:	d000      	beq.n	2001c <vTaskPriorityDisinheritAfterTimeout+0x54>
   2001a:	e087      	b.n	2012c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   2001c:	4b45      	ldr	r3, [pc, #276]	; (20134 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   2001e:	681b      	ldr	r3, [r3, #0]
   20020:	693a      	ldr	r2, [r7, #16]
   20022:	429a      	cmp	r2, r3
   20024:	d101      	bne.n	2002a <vTaskPriorityDisinheritAfterTimeout+0x62>
   20026:	b672      	cpsid	i
   20028:	e7fe      	b.n	20028 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   2002a:	693b      	ldr	r3, [r7, #16]
   2002c:	0018      	movs	r0, r3
   2002e:	4b42      	ldr	r3, [pc, #264]	; (20138 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   20030:	4798      	blx	r3
   20032:	0003      	movs	r3, r0
   20034:	001a      	movs	r2, r3
   20036:	4b41      	ldr	r3, [pc, #260]	; (2013c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   20038:	881b      	ldrh	r3, [r3, #0]
   2003a:	4013      	ands	r3, r2
   2003c:	b29b      	uxth	r3, r3
   2003e:	2b00      	cmp	r3, #0
   20040:	d023      	beq.n	2008a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   20042:	693b      	ldr	r3, [r7, #16]
   20044:	0018      	movs	r0, r3
   20046:	4b3e      	ldr	r3, [pc, #248]	; (20140 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   20048:	4798      	blx	r3
   2004a:	0003      	movs	r3, r0
   2004c:	b2db      	uxtb	r3, r3
   2004e:	001c      	movs	r4, r3
   20050:	693b      	ldr	r3, [r7, #16]
   20052:	0018      	movs	r0, r3
   20054:	4b3a      	ldr	r3, [pc, #232]	; (20140 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   20056:	4798      	blx	r3
   20058:	0003      	movs	r3, r0
   2005a:	b2db      	uxtb	r3, r3
   2005c:	0019      	movs	r1, r3
   2005e:	2003      	movs	r0, #3
   20060:	4b38      	ldr	r3, [pc, #224]	; (20144 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   20062:	4798      	blx	r3
   20064:	0003      	movs	r3, r0
   20066:	0022      	movs	r2, r4
   20068:	2103      	movs	r1, #3
   2006a:	208f      	movs	r0, #143	; 0x8f
   2006c:	4c36      	ldr	r4, [pc, #216]	; (20148 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   2006e:	47a0      	blx	r4
   20070:	693b      	ldr	r3, [r7, #16]
   20072:	0018      	movs	r0, r3
   20074:	4b32      	ldr	r3, [pc, #200]	; (20140 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   20076:	4798      	blx	r3
   20078:	0003      	movs	r3, r0
   2007a:	b2d9      	uxtb	r1, r3
   2007c:	693b      	ldr	r3, [r7, #16]
   2007e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   20080:	b2db      	uxtb	r3, r3
   20082:	001a      	movs	r2, r3
   20084:	2003      	movs	r0, #3
   20086:	4b31      	ldr	r3, [pc, #196]	; (2014c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   20088:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   2008a:	693b      	ldr	r3, [r7, #16]
   2008c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2008e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   20090:	693b      	ldr	r3, [r7, #16]
   20092:	697a      	ldr	r2, [r7, #20]
   20094:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   20096:	693b      	ldr	r3, [r7, #16]
   20098:	699b      	ldr	r3, [r3, #24]
   2009a:	2b00      	cmp	r3, #0
   2009c:	db04      	blt.n	200a8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2009e:	697b      	ldr	r3, [r7, #20]
   200a0:	2205      	movs	r2, #5
   200a2:	1ad2      	subs	r2, r2, r3
   200a4:	693b      	ldr	r3, [r7, #16]
   200a6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   200a8:	693b      	ldr	r3, [r7, #16]
   200aa:	6959      	ldr	r1, [r3, #20]
   200ac:	68ba      	ldr	r2, [r7, #8]
   200ae:	0013      	movs	r3, r2
   200b0:	009b      	lsls	r3, r3, #2
   200b2:	189b      	adds	r3, r3, r2
   200b4:	009b      	lsls	r3, r3, #2
   200b6:	4a26      	ldr	r2, [pc, #152]	; (20150 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   200b8:	189b      	adds	r3, r3, r2
   200ba:	4299      	cmp	r1, r3
   200bc:	d101      	bne.n	200c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   200be:	2301      	movs	r3, #1
   200c0:	e000      	b.n	200c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   200c2:	2300      	movs	r3, #0
   200c4:	2b00      	cmp	r3, #0
   200c6:	d031      	beq.n	2012c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   200c8:	693b      	ldr	r3, [r7, #16]
   200ca:	3304      	adds	r3, #4
   200cc:	0018      	movs	r0, r3
   200ce:	4b21      	ldr	r3, [pc, #132]	; (20154 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   200d0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   200d2:	693b      	ldr	r3, [r7, #16]
   200d4:	0018      	movs	r0, r3
   200d6:	4b18      	ldr	r3, [pc, #96]	; (20138 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   200d8:	4798      	blx	r3
   200da:	0003      	movs	r3, r0
   200dc:	001a      	movs	r2, r3
   200de:	4b17      	ldr	r3, [pc, #92]	; (2013c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   200e0:	881b      	ldrh	r3, [r3, #0]
   200e2:	4013      	ands	r3, r2
   200e4:	b29b      	uxth	r3, r3
   200e6:	2b00      	cmp	r3, #0
   200e8:	d008      	beq.n	200fc <vTaskPriorityDisinheritAfterTimeout+0x134>
   200ea:	693b      	ldr	r3, [r7, #16]
   200ec:	0018      	movs	r0, r3
   200ee:	4b14      	ldr	r3, [pc, #80]	; (20140 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   200f0:	4798      	blx	r3
   200f2:	0003      	movs	r3, r0
   200f4:	b2db      	uxtb	r3, r3
   200f6:	0018      	movs	r0, r3
   200f8:	4b17      	ldr	r3, [pc, #92]	; (20158 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   200fa:	4798      	blx	r3
   200fc:	693b      	ldr	r3, [r7, #16]
   200fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20100:	4b16      	ldr	r3, [pc, #88]	; (2015c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   20102:	681b      	ldr	r3, [r3, #0]
   20104:	429a      	cmp	r2, r3
   20106:	d903      	bls.n	20110 <vTaskPriorityDisinheritAfterTimeout+0x148>
   20108:	693b      	ldr	r3, [r7, #16]
   2010a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2010c:	4b13      	ldr	r3, [pc, #76]	; (2015c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   2010e:	601a      	str	r2, [r3, #0]
   20110:	693b      	ldr	r3, [r7, #16]
   20112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   20114:	0013      	movs	r3, r2
   20116:	009b      	lsls	r3, r3, #2
   20118:	189b      	adds	r3, r3, r2
   2011a:	009b      	lsls	r3, r3, #2
   2011c:	4a0c      	ldr	r2, [pc, #48]	; (20150 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   2011e:	189a      	adds	r2, r3, r2
   20120:	693b      	ldr	r3, [r7, #16]
   20122:	3304      	adds	r3, #4
   20124:	0019      	movs	r1, r3
   20126:	0010      	movs	r0, r2
   20128:	4b0d      	ldr	r3, [pc, #52]	; (20160 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   2012a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   2012c:	46c0      	nop			; (mov r8, r8)
   2012e:	46bd      	mov	sp, r7
   20130:	b007      	add	sp, #28
   20132:	bd90      	pop	{r4, r7, pc}
   20134:	20003ffc 	.word	0x20003ffc
   20138:	0001af75 	.word	0x0001af75
   2013c:	2000018c 	.word	0x2000018c
   20140:	0001af55 	.word	0x0001af55
   20144:	0001bf2d 	.word	0x0001bf2d
   20148:	0001ba9d 	.word	0x0001ba9d
   2014c:	0001be89 	.word	0x0001be89
   20150:	20004000 	.word	0x20004000
   20154:	0001cdef 	.word	0x0001cdef
   20158:	0001b725 	.word	0x0001b725
   2015c:	200040dc 	.word	0x200040dc
   20160:	0001cd3f 	.word	0x0001cd3f

00020164 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   20164:	b580      	push	{r7, lr}
   20166:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   20168:	4b06      	ldr	r3, [pc, #24]	; (20184 <pvTaskIncrementMutexHeldCount+0x20>)
   2016a:	681b      	ldr	r3, [r3, #0]
   2016c:	2b00      	cmp	r3, #0
   2016e:	d004      	beq.n	2017a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   20170:	4b04      	ldr	r3, [pc, #16]	; (20184 <pvTaskIncrementMutexHeldCount+0x20>)
   20172:	681b      	ldr	r3, [r3, #0]
   20174:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   20176:	3201      	adds	r2, #1
   20178:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   2017a:	4b02      	ldr	r3, [pc, #8]	; (20184 <pvTaskIncrementMutexHeldCount+0x20>)
   2017c:	681b      	ldr	r3, [r3, #0]
	}
   2017e:	0018      	movs	r0, r3
   20180:	46bd      	mov	sp, r7
   20182:	bd80      	pop	{r7, pc}
   20184:	20003ffc 	.word	0x20003ffc

00020188 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   20188:	b580      	push	{r7, lr}
   2018a:	b084      	sub	sp, #16
   2018c:	af00      	add	r7, sp, #0
   2018e:	6078      	str	r0, [r7, #4]
   20190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   20192:	4b21      	ldr	r3, [pc, #132]	; (20218 <prvAddCurrentTaskToDelayedList+0x90>)
   20194:	681b      	ldr	r3, [r3, #0]
   20196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   20198:	4b20      	ldr	r3, [pc, #128]	; (2021c <prvAddCurrentTaskToDelayedList+0x94>)
   2019a:	681b      	ldr	r3, [r3, #0]
   2019c:	3304      	adds	r3, #4
   2019e:	0018      	movs	r0, r3
   201a0:	4b1f      	ldr	r3, [pc, #124]	; (20220 <prvAddCurrentTaskToDelayedList+0x98>)
   201a2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   201a4:	687b      	ldr	r3, [r7, #4]
   201a6:	3301      	adds	r3, #1
   201a8:	d10b      	bne.n	201c2 <prvAddCurrentTaskToDelayedList+0x3a>
   201aa:	683b      	ldr	r3, [r7, #0]
   201ac:	2b00      	cmp	r3, #0
   201ae:	d008      	beq.n	201c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   201b0:	4b1a      	ldr	r3, [pc, #104]	; (2021c <prvAddCurrentTaskToDelayedList+0x94>)
   201b2:	681b      	ldr	r3, [r3, #0]
   201b4:	1d1a      	adds	r2, r3, #4
   201b6:	4b1b      	ldr	r3, [pc, #108]	; (20224 <prvAddCurrentTaskToDelayedList+0x9c>)
   201b8:	0011      	movs	r1, r2
   201ba:	0018      	movs	r0, r3
   201bc:	4b1a      	ldr	r3, [pc, #104]	; (20228 <prvAddCurrentTaskToDelayedList+0xa0>)
   201be:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   201c0:	e026      	b.n	20210 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   201c2:	68fa      	ldr	r2, [r7, #12]
   201c4:	687b      	ldr	r3, [r7, #4]
   201c6:	18d3      	adds	r3, r2, r3
   201c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   201ca:	4b14      	ldr	r3, [pc, #80]	; (2021c <prvAddCurrentTaskToDelayedList+0x94>)
   201cc:	681b      	ldr	r3, [r3, #0]
   201ce:	68ba      	ldr	r2, [r7, #8]
   201d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   201d2:	68ba      	ldr	r2, [r7, #8]
   201d4:	68fb      	ldr	r3, [r7, #12]
   201d6:	429a      	cmp	r2, r3
   201d8:	d209      	bcs.n	201ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   201da:	4b14      	ldr	r3, [pc, #80]	; (2022c <prvAddCurrentTaskToDelayedList+0xa4>)
   201dc:	681a      	ldr	r2, [r3, #0]
   201de:	4b0f      	ldr	r3, [pc, #60]	; (2021c <prvAddCurrentTaskToDelayedList+0x94>)
   201e0:	681b      	ldr	r3, [r3, #0]
   201e2:	3304      	adds	r3, #4
   201e4:	0019      	movs	r1, r3
   201e6:	0010      	movs	r0, r2
   201e8:	4b11      	ldr	r3, [pc, #68]	; (20230 <prvAddCurrentTaskToDelayedList+0xa8>)
   201ea:	4798      	blx	r3
}
   201ec:	e010      	b.n	20210 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   201ee:	4b11      	ldr	r3, [pc, #68]	; (20234 <prvAddCurrentTaskToDelayedList+0xac>)
   201f0:	681a      	ldr	r2, [r3, #0]
   201f2:	4b0a      	ldr	r3, [pc, #40]	; (2021c <prvAddCurrentTaskToDelayedList+0x94>)
   201f4:	681b      	ldr	r3, [r3, #0]
   201f6:	3304      	adds	r3, #4
   201f8:	0019      	movs	r1, r3
   201fa:	0010      	movs	r0, r2
   201fc:	4b0c      	ldr	r3, [pc, #48]	; (20230 <prvAddCurrentTaskToDelayedList+0xa8>)
   201fe:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   20200:	4b0d      	ldr	r3, [pc, #52]	; (20238 <prvAddCurrentTaskToDelayedList+0xb0>)
   20202:	681b      	ldr	r3, [r3, #0]
   20204:	68ba      	ldr	r2, [r7, #8]
   20206:	429a      	cmp	r2, r3
   20208:	d202      	bcs.n	20210 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   2020a:	4b0b      	ldr	r3, [pc, #44]	; (20238 <prvAddCurrentTaskToDelayedList+0xb0>)
   2020c:	68ba      	ldr	r2, [r7, #8]
   2020e:	601a      	str	r2, [r3, #0]
}
   20210:	46c0      	nop			; (mov r8, r8)
   20212:	46bd      	mov	sp, r7
   20214:	b004      	add	sp, #16
   20216:	bd80      	pop	{r7, pc}
   20218:	200040d8 	.word	0x200040d8
   2021c:	20003ffc 	.word	0x20003ffc
   20220:	0001cdef 	.word	0x0001cdef
   20224:	200040c0 	.word	0x200040c0
   20228:	0001cd3f 	.word	0x0001cd3f
   2022c:	20004090 	.word	0x20004090
   20230:	0001cd83 	.word	0x0001cd83
   20234:	2000408c 	.word	0x2000408c
   20238:	200040f4 	.word	0x200040f4

0002023c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   2023c:	b590      	push	{r4, r7, lr}
   2023e:	b085      	sub	sp, #20
   20240:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   20242:	2300      	movs	r3, #0
   20244:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   20246:	4b0e      	ldr	r3, [pc, #56]	; (20280 <xTimerCreateTimerTask+0x44>)
   20248:	4798      	blx	r3

	if( xTimerQueue != NULL )
   2024a:	4b0e      	ldr	r3, [pc, #56]	; (20284 <xTimerCreateTimerTask+0x48>)
   2024c:	681b      	ldr	r3, [r3, #0]
   2024e:	2b00      	cmp	r3, #0
   20250:	d00b      	beq.n	2026a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   20252:	490d      	ldr	r1, [pc, #52]	; (20288 <xTimerCreateTimerTask+0x4c>)
   20254:	480d      	ldr	r0, [pc, #52]	; (2028c <xTimerCreateTimerTask+0x50>)
   20256:	4b0e      	ldr	r3, [pc, #56]	; (20290 <xTimerCreateTimerTask+0x54>)
   20258:	9301      	str	r3, [sp, #4]
   2025a:	2302      	movs	r3, #2
   2025c:	9300      	str	r3, [sp, #0]
   2025e:	2300      	movs	r3, #0
   20260:	2280      	movs	r2, #128	; 0x80
   20262:	4c0c      	ldr	r4, [pc, #48]	; (20294 <xTimerCreateTimerTask+0x58>)
   20264:	47a0      	blx	r4
   20266:	0003      	movs	r3, r0
   20268:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   2026a:	687b      	ldr	r3, [r7, #4]
   2026c:	2b00      	cmp	r3, #0
   2026e:	d101      	bne.n	20274 <xTimerCreateTimerTask+0x38>
   20270:	b672      	cpsid	i
   20272:	e7fe      	b.n	20272 <xTimerCreateTimerTask+0x36>
	return xReturn;
   20274:	687b      	ldr	r3, [r7, #4]
}
   20276:	0018      	movs	r0, r3
   20278:	46bd      	mov	sp, r7
   2027a:	b003      	add	sp, #12
   2027c:	bd90      	pop	{r4, r7, pc}
   2027e:	46c0      	nop			; (mov r8, r8)
   20280:	00020785 	.word	0x00020785
   20284:	20004130 	.word	0x20004130
   20288:	0003c830 	.word	0x0003c830
   2028c:	000203bd 	.word	0x000203bd
   20290:	20004134 	.word	0x20004134
   20294:	0001ebd5 	.word	0x0001ebd5

00020298 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   20298:	b590      	push	{r4, r7, lr}
   2029a:	b089      	sub	sp, #36	; 0x24
   2029c:	af00      	add	r7, sp, #0
   2029e:	60f8      	str	r0, [r7, #12]
   202a0:	60b9      	str	r1, [r7, #8]
   202a2:	607a      	str	r2, [r7, #4]
   202a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   202a6:	2300      	movs	r3, #0
   202a8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   202aa:	68fb      	ldr	r3, [r7, #12]
   202ac:	2b00      	cmp	r3, #0
   202ae:	d101      	bne.n	202b4 <xTimerGenericCommand+0x1c>
   202b0:	b672      	cpsid	i
   202b2:	e7fe      	b.n	202b2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   202b4:	4b1e      	ldr	r3, [pc, #120]	; (20330 <xTimerGenericCommand+0x98>)
   202b6:	681b      	ldr	r3, [r3, #0]
   202b8:	2b00      	cmp	r3, #0
   202ba:	d033      	beq.n	20324 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   202bc:	2310      	movs	r3, #16
   202be:	18fb      	adds	r3, r7, r3
   202c0:	68ba      	ldr	r2, [r7, #8]
   202c2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   202c4:	2310      	movs	r3, #16
   202c6:	18fb      	adds	r3, r7, r3
   202c8:	687a      	ldr	r2, [r7, #4]
   202ca:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   202cc:	2310      	movs	r3, #16
   202ce:	18fb      	adds	r3, r7, r3
   202d0:	68fa      	ldr	r2, [r7, #12]
   202d2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   202d4:	68bb      	ldr	r3, [r7, #8]
   202d6:	2b05      	cmp	r3, #5
   202d8:	dc1a      	bgt.n	20310 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   202da:	4b16      	ldr	r3, [pc, #88]	; (20334 <xTimerGenericCommand+0x9c>)
   202dc:	4798      	blx	r3
   202de:	0003      	movs	r3, r0
   202e0:	2b02      	cmp	r3, #2
   202e2:	d10a      	bne.n	202fa <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   202e4:	4b12      	ldr	r3, [pc, #72]	; (20330 <xTimerGenericCommand+0x98>)
   202e6:	6818      	ldr	r0, [r3, #0]
   202e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   202ea:	2310      	movs	r3, #16
   202ec:	18f9      	adds	r1, r7, r3
   202ee:	2300      	movs	r3, #0
   202f0:	4c11      	ldr	r4, [pc, #68]	; (20338 <xTimerGenericCommand+0xa0>)
   202f2:	47a0      	blx	r4
   202f4:	0003      	movs	r3, r0
   202f6:	61fb      	str	r3, [r7, #28]
   202f8:	e014      	b.n	20324 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   202fa:	4b0d      	ldr	r3, [pc, #52]	; (20330 <xTimerGenericCommand+0x98>)
   202fc:	6818      	ldr	r0, [r3, #0]
   202fe:	2310      	movs	r3, #16
   20300:	18f9      	adds	r1, r7, r3
   20302:	2300      	movs	r3, #0
   20304:	2200      	movs	r2, #0
   20306:	4c0c      	ldr	r4, [pc, #48]	; (20338 <xTimerGenericCommand+0xa0>)
   20308:	47a0      	blx	r4
   2030a:	0003      	movs	r3, r0
   2030c:	61fb      	str	r3, [r7, #28]
   2030e:	e009      	b.n	20324 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   20310:	4b07      	ldr	r3, [pc, #28]	; (20330 <xTimerGenericCommand+0x98>)
   20312:	6818      	ldr	r0, [r3, #0]
   20314:	683a      	ldr	r2, [r7, #0]
   20316:	2310      	movs	r3, #16
   20318:	18f9      	adds	r1, r7, r3
   2031a:	2300      	movs	r3, #0
   2031c:	4c07      	ldr	r4, [pc, #28]	; (2033c <xTimerGenericCommand+0xa4>)
   2031e:	47a0      	blx	r4
   20320:	0003      	movs	r3, r0
   20322:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   20324:	69fb      	ldr	r3, [r7, #28]
}
   20326:	0018      	movs	r0, r3
   20328:	46bd      	mov	sp, r7
   2032a:	b009      	add	sp, #36	; 0x24
   2032c:	bd90      	pop	{r4, r7, pc}
   2032e:	46c0      	nop			; (mov r8, r8)
   20330:	20004130 	.word	0x20004130
   20334:	0001fc99 	.word	0x0001fc99
   20338:	0001d50d 	.word	0x0001d50d
   2033c:	0001d96d 	.word	0x0001d96d

00020340 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   20340:	b590      	push	{r4, r7, lr}
   20342:	b087      	sub	sp, #28
   20344:	af02      	add	r7, sp, #8
   20346:	6078      	str	r0, [r7, #4]
   20348:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   2034a:	4b18      	ldr	r3, [pc, #96]	; (203ac <prvProcessExpiredTimer+0x6c>)
   2034c:	681b      	ldr	r3, [r3, #0]
   2034e:	68db      	ldr	r3, [r3, #12]
   20350:	68db      	ldr	r3, [r3, #12]
   20352:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   20354:	68fb      	ldr	r3, [r7, #12]
   20356:	3304      	adds	r3, #4
   20358:	0018      	movs	r0, r3
   2035a:	4b15      	ldr	r3, [pc, #84]	; (203b0 <prvProcessExpiredTimer+0x70>)
   2035c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   2035e:	68fb      	ldr	r3, [r7, #12]
   20360:	69db      	ldr	r3, [r3, #28]
   20362:	2b01      	cmp	r3, #1
   20364:	d119      	bne.n	2039a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   20366:	68fb      	ldr	r3, [r7, #12]
   20368:	699a      	ldr	r2, [r3, #24]
   2036a:	687b      	ldr	r3, [r7, #4]
   2036c:	18d1      	adds	r1, r2, r3
   2036e:	687b      	ldr	r3, [r7, #4]
   20370:	683a      	ldr	r2, [r7, #0]
   20372:	68f8      	ldr	r0, [r7, #12]
   20374:	4c0f      	ldr	r4, [pc, #60]	; (203b4 <prvProcessExpiredTimer+0x74>)
   20376:	47a0      	blx	r4
   20378:	1e03      	subs	r3, r0, #0
   2037a:	d00e      	beq.n	2039a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   2037c:	687a      	ldr	r2, [r7, #4]
   2037e:	68f8      	ldr	r0, [r7, #12]
   20380:	2300      	movs	r3, #0
   20382:	9300      	str	r3, [sp, #0]
   20384:	2300      	movs	r3, #0
   20386:	2100      	movs	r1, #0
   20388:	4c0b      	ldr	r4, [pc, #44]	; (203b8 <prvProcessExpiredTimer+0x78>)
   2038a:	47a0      	blx	r4
   2038c:	0003      	movs	r3, r0
   2038e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   20390:	68bb      	ldr	r3, [r7, #8]
   20392:	2b00      	cmp	r3, #0
   20394:	d101      	bne.n	2039a <prvProcessExpiredTimer+0x5a>
   20396:	b672      	cpsid	i
   20398:	e7fe      	b.n	20398 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   2039a:	68fb      	ldr	r3, [r7, #12]
   2039c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2039e:	68fa      	ldr	r2, [r7, #12]
   203a0:	0010      	movs	r0, r2
   203a2:	4798      	blx	r3
}
   203a4:	46c0      	nop			; (mov r8, r8)
   203a6:	46bd      	mov	sp, r7
   203a8:	b005      	add	sp, #20
   203aa:	bd90      	pop	{r4, r7, pc}
   203ac:	20004128 	.word	0x20004128
   203b0:	0001cdef 	.word	0x0001cdef
   203b4:	00020525 	.word	0x00020525
   203b8:	00020299 	.word	0x00020299

000203bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   203bc:	b580      	push	{r7, lr}
   203be:	b084      	sub	sp, #16
   203c0:	af00      	add	r7, sp, #0
   203c2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   203c4:	4b08      	ldr	r3, [pc, #32]	; (203e8 <prvTimerTask+0x2c>)
   203c6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   203c8:	2308      	movs	r3, #8
   203ca:	18fb      	adds	r3, r7, r3
   203cc:	0018      	movs	r0, r3
   203ce:	4b07      	ldr	r3, [pc, #28]	; (203ec <prvTimerTask+0x30>)
   203d0:	4798      	blx	r3
   203d2:	0003      	movs	r3, r0
   203d4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   203d6:	68ba      	ldr	r2, [r7, #8]
   203d8:	68fb      	ldr	r3, [r7, #12]
   203da:	0011      	movs	r1, r2
   203dc:	0018      	movs	r0, r3
   203de:	4b04      	ldr	r3, [pc, #16]	; (203f0 <prvTimerTask+0x34>)
   203e0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   203e2:	4b04      	ldr	r3, [pc, #16]	; (203f4 <prvTimerTask+0x38>)
   203e4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   203e6:	e7ef      	b.n	203c8 <prvTimerTask+0xc>
   203e8:	00035725 	.word	0x00035725
   203ec:	0002049d 	.word	0x0002049d
   203f0:	000203f9 	.word	0x000203f9
   203f4:	000205ad 	.word	0x000205ad

000203f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   203f8:	b580      	push	{r7, lr}
   203fa:	b084      	sub	sp, #16
   203fc:	af00      	add	r7, sp, #0
   203fe:	6078      	str	r0, [r7, #4]
   20400:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   20402:	4b1e      	ldr	r3, [pc, #120]	; (2047c <prvProcessTimerOrBlockTask+0x84>)
   20404:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   20406:	2308      	movs	r3, #8
   20408:	18fb      	adds	r3, r7, r3
   2040a:	0018      	movs	r0, r3
   2040c:	4b1c      	ldr	r3, [pc, #112]	; (20480 <prvProcessTimerOrBlockTask+0x88>)
   2040e:	4798      	blx	r3
   20410:	0003      	movs	r3, r0
   20412:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   20414:	68bb      	ldr	r3, [r7, #8]
   20416:	2b00      	cmp	r3, #0
   20418:	d129      	bne.n	2046e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   2041a:	683b      	ldr	r3, [r7, #0]
   2041c:	2b00      	cmp	r3, #0
   2041e:	d10c      	bne.n	2043a <prvProcessTimerOrBlockTask+0x42>
   20420:	687a      	ldr	r2, [r7, #4]
   20422:	68fb      	ldr	r3, [r7, #12]
   20424:	429a      	cmp	r2, r3
   20426:	d808      	bhi.n	2043a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   20428:	4b16      	ldr	r3, [pc, #88]	; (20484 <prvProcessTimerOrBlockTask+0x8c>)
   2042a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   2042c:	68fa      	ldr	r2, [r7, #12]
   2042e:	687b      	ldr	r3, [r7, #4]
   20430:	0011      	movs	r1, r2
   20432:	0018      	movs	r0, r3
   20434:	4b14      	ldr	r3, [pc, #80]	; (20488 <prvProcessTimerOrBlockTask+0x90>)
   20436:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   20438:	e01b      	b.n	20472 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   2043a:	683b      	ldr	r3, [r7, #0]
   2043c:	2b00      	cmp	r3, #0
   2043e:	d006      	beq.n	2044e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   20440:	4b12      	ldr	r3, [pc, #72]	; (2048c <prvProcessTimerOrBlockTask+0x94>)
   20442:	681b      	ldr	r3, [r3, #0]
   20444:	681b      	ldr	r3, [r3, #0]
   20446:	425a      	negs	r2, r3
   20448:	4153      	adcs	r3, r2
   2044a:	b2db      	uxtb	r3, r3
   2044c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   2044e:	4b10      	ldr	r3, [pc, #64]	; (20490 <prvProcessTimerOrBlockTask+0x98>)
   20450:	6818      	ldr	r0, [r3, #0]
   20452:	687a      	ldr	r2, [r7, #4]
   20454:	68fb      	ldr	r3, [r7, #12]
   20456:	1ad3      	subs	r3, r2, r3
   20458:	683a      	ldr	r2, [r7, #0]
   2045a:	0019      	movs	r1, r3
   2045c:	4b0d      	ldr	r3, [pc, #52]	; (20494 <prvProcessTimerOrBlockTask+0x9c>)
   2045e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   20460:	4b08      	ldr	r3, [pc, #32]	; (20484 <prvProcessTimerOrBlockTask+0x8c>)
   20462:	4798      	blx	r3
   20464:	1e03      	subs	r3, r0, #0
   20466:	d104      	bne.n	20472 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   20468:	4b0b      	ldr	r3, [pc, #44]	; (20498 <prvProcessTimerOrBlockTask+0xa0>)
   2046a:	4798      	blx	r3
}
   2046c:	e001      	b.n	20472 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   2046e:	4b05      	ldr	r3, [pc, #20]	; (20484 <prvProcessTimerOrBlockTask+0x8c>)
   20470:	4798      	blx	r3
}
   20472:	46c0      	nop			; (mov r8, r8)
   20474:	46bd      	mov	sp, r7
   20476:	b004      	add	sp, #16
   20478:	bd80      	pop	{r7, pc}
   2047a:	46c0      	nop			; (mov r8, r8)
   2047c:	0001f231 	.word	0x0001f231
   20480:	000204dd 	.word	0x000204dd
   20484:	0001f249 	.word	0x0001f249
   20488:	00020341 	.word	0x00020341
   2048c:	2000412c 	.word	0x2000412c
   20490:	20004130 	.word	0x20004130
   20494:	0001e9d1 	.word	0x0001e9d1
   20498:	0001cf61 	.word	0x0001cf61

0002049c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   2049c:	b580      	push	{r7, lr}
   2049e:	b084      	sub	sp, #16
   204a0:	af00      	add	r7, sp, #0
   204a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   204a4:	4b0c      	ldr	r3, [pc, #48]	; (204d8 <prvGetNextExpireTime+0x3c>)
   204a6:	681b      	ldr	r3, [r3, #0]
   204a8:	681b      	ldr	r3, [r3, #0]
   204aa:	425a      	negs	r2, r3
   204ac:	4153      	adcs	r3, r2
   204ae:	b2db      	uxtb	r3, r3
   204b0:	001a      	movs	r2, r3
   204b2:	687b      	ldr	r3, [r7, #4]
   204b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   204b6:	687b      	ldr	r3, [r7, #4]
   204b8:	681b      	ldr	r3, [r3, #0]
   204ba:	2b00      	cmp	r3, #0
   204bc:	d105      	bne.n	204ca <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   204be:	4b06      	ldr	r3, [pc, #24]	; (204d8 <prvGetNextExpireTime+0x3c>)
   204c0:	681b      	ldr	r3, [r3, #0]
   204c2:	68db      	ldr	r3, [r3, #12]
   204c4:	681b      	ldr	r3, [r3, #0]
   204c6:	60fb      	str	r3, [r7, #12]
   204c8:	e001      	b.n	204ce <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   204ca:	2300      	movs	r3, #0
   204cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   204ce:	68fb      	ldr	r3, [r7, #12]
}
   204d0:	0018      	movs	r0, r3
   204d2:	46bd      	mov	sp, r7
   204d4:	b004      	add	sp, #16
   204d6:	bd80      	pop	{r7, pc}
   204d8:	20004128 	.word	0x20004128

000204dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   204dc:	b580      	push	{r7, lr}
   204de:	b084      	sub	sp, #16
   204e0:	af00      	add	r7, sp, #0
   204e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   204e4:	4b0c      	ldr	r3, [pc, #48]	; (20518 <prvSampleTimeNow+0x3c>)
   204e6:	4798      	blx	r3
   204e8:	0003      	movs	r3, r0
   204ea:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   204ec:	4b0b      	ldr	r3, [pc, #44]	; (2051c <prvSampleTimeNow+0x40>)
   204ee:	681b      	ldr	r3, [r3, #0]
   204f0:	68fa      	ldr	r2, [r7, #12]
   204f2:	429a      	cmp	r2, r3
   204f4:	d205      	bcs.n	20502 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   204f6:	4b0a      	ldr	r3, [pc, #40]	; (20520 <prvSampleTimeNow+0x44>)
   204f8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   204fa:	687b      	ldr	r3, [r7, #4]
   204fc:	2201      	movs	r2, #1
   204fe:	601a      	str	r2, [r3, #0]
   20500:	e002      	b.n	20508 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   20502:	687b      	ldr	r3, [r7, #4]
   20504:	2200      	movs	r2, #0
   20506:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   20508:	4b04      	ldr	r3, [pc, #16]	; (2051c <prvSampleTimeNow+0x40>)
   2050a:	68fa      	ldr	r2, [r7, #12]
   2050c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   2050e:	68fb      	ldr	r3, [r7, #12]
}
   20510:	0018      	movs	r0, r3
   20512:	46bd      	mov	sp, r7
   20514:	b004      	add	sp, #16
   20516:	bd80      	pop	{r7, pc}
   20518:	0001f3b9 	.word	0x0001f3b9
   2051c:	20004138 	.word	0x20004138
   20520:	000206c5 	.word	0x000206c5

00020524 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   20524:	b580      	push	{r7, lr}
   20526:	b086      	sub	sp, #24
   20528:	af00      	add	r7, sp, #0
   2052a:	60f8      	str	r0, [r7, #12]
   2052c:	60b9      	str	r1, [r7, #8]
   2052e:	607a      	str	r2, [r7, #4]
   20530:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   20532:	2300      	movs	r3, #0
   20534:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   20536:	68fb      	ldr	r3, [r7, #12]
   20538:	68ba      	ldr	r2, [r7, #8]
   2053a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   2053c:	68fb      	ldr	r3, [r7, #12]
   2053e:	68fa      	ldr	r2, [r7, #12]
   20540:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   20542:	68ba      	ldr	r2, [r7, #8]
   20544:	687b      	ldr	r3, [r7, #4]
   20546:	429a      	cmp	r2, r3
   20548:	d812      	bhi.n	20570 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   2054a:	687a      	ldr	r2, [r7, #4]
   2054c:	683b      	ldr	r3, [r7, #0]
   2054e:	1ad2      	subs	r2, r2, r3
   20550:	68fb      	ldr	r3, [r7, #12]
   20552:	699b      	ldr	r3, [r3, #24]
   20554:	429a      	cmp	r2, r3
   20556:	d302      	bcc.n	2055e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   20558:	2301      	movs	r3, #1
   2055a:	617b      	str	r3, [r7, #20]
   2055c:	e01b      	b.n	20596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   2055e:	4b10      	ldr	r3, [pc, #64]	; (205a0 <prvInsertTimerInActiveList+0x7c>)
   20560:	681a      	ldr	r2, [r3, #0]
   20562:	68fb      	ldr	r3, [r7, #12]
   20564:	3304      	adds	r3, #4
   20566:	0019      	movs	r1, r3
   20568:	0010      	movs	r0, r2
   2056a:	4b0e      	ldr	r3, [pc, #56]	; (205a4 <prvInsertTimerInActiveList+0x80>)
   2056c:	4798      	blx	r3
   2056e:	e012      	b.n	20596 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   20570:	687a      	ldr	r2, [r7, #4]
   20572:	683b      	ldr	r3, [r7, #0]
   20574:	429a      	cmp	r2, r3
   20576:	d206      	bcs.n	20586 <prvInsertTimerInActiveList+0x62>
   20578:	68ba      	ldr	r2, [r7, #8]
   2057a:	683b      	ldr	r3, [r7, #0]
   2057c:	429a      	cmp	r2, r3
   2057e:	d302      	bcc.n	20586 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   20580:	2301      	movs	r3, #1
   20582:	617b      	str	r3, [r7, #20]
   20584:	e007      	b.n	20596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   20586:	4b08      	ldr	r3, [pc, #32]	; (205a8 <prvInsertTimerInActiveList+0x84>)
   20588:	681a      	ldr	r2, [r3, #0]
   2058a:	68fb      	ldr	r3, [r7, #12]
   2058c:	3304      	adds	r3, #4
   2058e:	0019      	movs	r1, r3
   20590:	0010      	movs	r0, r2
   20592:	4b04      	ldr	r3, [pc, #16]	; (205a4 <prvInsertTimerInActiveList+0x80>)
   20594:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   20596:	697b      	ldr	r3, [r7, #20]
}
   20598:	0018      	movs	r0, r3
   2059a:	46bd      	mov	sp, r7
   2059c:	b006      	add	sp, #24
   2059e:	bd80      	pop	{r7, pc}
   205a0:	2000412c 	.word	0x2000412c
   205a4:	0001cd83 	.word	0x0001cd83
   205a8:	20004128 	.word	0x20004128

000205ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   205ac:	b590      	push	{r4, r7, lr}
   205ae:	b08b      	sub	sp, #44	; 0x2c
   205b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   205b2:	e068      	b.n	20686 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   205b4:	2308      	movs	r3, #8
   205b6:	18fb      	adds	r3, r7, r3
   205b8:	681b      	ldr	r3, [r3, #0]
   205ba:	2b00      	cmp	r3, #0
   205bc:	db63      	blt.n	20686 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   205be:	2308      	movs	r3, #8
   205c0:	18fb      	adds	r3, r7, r3
   205c2:	689b      	ldr	r3, [r3, #8]
   205c4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   205c6:	69fb      	ldr	r3, [r7, #28]
   205c8:	695b      	ldr	r3, [r3, #20]
   205ca:	2b00      	cmp	r3, #0
   205cc:	d004      	beq.n	205d8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   205ce:	69fb      	ldr	r3, [r7, #28]
   205d0:	3304      	adds	r3, #4
   205d2:	0018      	movs	r0, r3
   205d4:	4b33      	ldr	r3, [pc, #204]	; (206a4 <prvProcessReceivedCommands+0xf8>)
   205d6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   205d8:	1d3b      	adds	r3, r7, #4
   205da:	0018      	movs	r0, r3
   205dc:	4b32      	ldr	r3, [pc, #200]	; (206a8 <prvProcessReceivedCommands+0xfc>)
   205de:	4798      	blx	r3
   205e0:	0003      	movs	r3, r0
   205e2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   205e4:	2308      	movs	r3, #8
   205e6:	18fb      	adds	r3, r7, r3
   205e8:	681b      	ldr	r3, [r3, #0]
   205ea:	2b09      	cmp	r3, #9
   205ec:	d84a      	bhi.n	20684 <prvProcessReceivedCommands+0xd8>
   205ee:	009a      	lsls	r2, r3, #2
   205f0:	4b2e      	ldr	r3, [pc, #184]	; (206ac <prvProcessReceivedCommands+0x100>)
   205f2:	18d3      	adds	r3, r2, r3
   205f4:	681b      	ldr	r3, [r3, #0]
   205f6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   205f8:	2308      	movs	r3, #8
   205fa:	18fb      	adds	r3, r7, r3
   205fc:	685a      	ldr	r2, [r3, #4]
   205fe:	69fb      	ldr	r3, [r7, #28]
   20600:	699b      	ldr	r3, [r3, #24]
   20602:	18d1      	adds	r1, r2, r3
   20604:	2308      	movs	r3, #8
   20606:	18fb      	adds	r3, r7, r3
   20608:	685b      	ldr	r3, [r3, #4]
   2060a:	69ba      	ldr	r2, [r7, #24]
   2060c:	69f8      	ldr	r0, [r7, #28]
   2060e:	4c28      	ldr	r4, [pc, #160]	; (206b0 <prvProcessReceivedCommands+0x104>)
   20610:	47a0      	blx	r4
   20612:	1e03      	subs	r3, r0, #0
   20614:	d037      	beq.n	20686 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   20616:	69fb      	ldr	r3, [r7, #28]
   20618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2061a:	69fa      	ldr	r2, [r7, #28]
   2061c:	0010      	movs	r0, r2
   2061e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   20620:	69fb      	ldr	r3, [r7, #28]
   20622:	69db      	ldr	r3, [r3, #28]
   20624:	2b01      	cmp	r3, #1
   20626:	d12e      	bne.n	20686 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   20628:	2308      	movs	r3, #8
   2062a:	18fb      	adds	r3, r7, r3
   2062c:	685a      	ldr	r2, [r3, #4]
   2062e:	69fb      	ldr	r3, [r7, #28]
   20630:	699b      	ldr	r3, [r3, #24]
   20632:	18d2      	adds	r2, r2, r3
   20634:	69f8      	ldr	r0, [r7, #28]
   20636:	2300      	movs	r3, #0
   20638:	9300      	str	r3, [sp, #0]
   2063a:	2300      	movs	r3, #0
   2063c:	2100      	movs	r1, #0
   2063e:	4c1d      	ldr	r4, [pc, #116]	; (206b4 <prvProcessReceivedCommands+0x108>)
   20640:	47a0      	blx	r4
   20642:	0003      	movs	r3, r0
   20644:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   20646:	697b      	ldr	r3, [r7, #20]
   20648:	2b00      	cmp	r3, #0
   2064a:	d11c      	bne.n	20686 <prvProcessReceivedCommands+0xda>
   2064c:	b672      	cpsid	i
   2064e:	e7fe      	b.n	2064e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   20650:	2308      	movs	r3, #8
   20652:	18fb      	adds	r3, r7, r3
   20654:	685a      	ldr	r2, [r3, #4]
   20656:	69fb      	ldr	r3, [r7, #28]
   20658:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   2065a:	69fb      	ldr	r3, [r7, #28]
   2065c:	699b      	ldr	r3, [r3, #24]
   2065e:	2b00      	cmp	r3, #0
   20660:	d101      	bne.n	20666 <prvProcessReceivedCommands+0xba>
   20662:	b672      	cpsid	i
   20664:	e7fe      	b.n	20664 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   20666:	69fb      	ldr	r3, [r7, #28]
   20668:	699a      	ldr	r2, [r3, #24]
   2066a:	69bb      	ldr	r3, [r7, #24]
   2066c:	18d1      	adds	r1, r2, r3
   2066e:	69bb      	ldr	r3, [r7, #24]
   20670:	69ba      	ldr	r2, [r7, #24]
   20672:	69f8      	ldr	r0, [r7, #28]
   20674:	4c0e      	ldr	r4, [pc, #56]	; (206b0 <prvProcessReceivedCommands+0x104>)
   20676:	47a0      	blx	r4
					break;
   20678:	e005      	b.n	20686 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   2067a:	69fb      	ldr	r3, [r7, #28]
   2067c:	0018      	movs	r0, r3
   2067e:	4b0e      	ldr	r3, [pc, #56]	; (206b8 <prvProcessReceivedCommands+0x10c>)
   20680:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   20682:	e000      	b.n	20686 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   20684:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   20686:	4b0d      	ldr	r3, [pc, #52]	; (206bc <prvProcessReceivedCommands+0x110>)
   20688:	681b      	ldr	r3, [r3, #0]
   2068a:	2208      	movs	r2, #8
   2068c:	18b9      	adds	r1, r7, r2
   2068e:	2200      	movs	r2, #0
   20690:	0018      	movs	r0, r3
   20692:	4b0b      	ldr	r3, [pc, #44]	; (206c0 <prvProcessReceivedCommands+0x114>)
   20694:	4798      	blx	r3
   20696:	1e03      	subs	r3, r0, #0
   20698:	d18c      	bne.n	205b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   2069a:	46c0      	nop			; (mov r8, r8)
   2069c:	46bd      	mov	sp, r7
   2069e:	b009      	add	sp, #36	; 0x24
   206a0:	bd90      	pop	{r4, r7, pc}
   206a2:	46c0      	nop			; (mov r8, r8)
   206a4:	0001cdef 	.word	0x0001cdef
   206a8:	000204dd 	.word	0x000204dd
   206ac:	0003c838 	.word	0x0003c838
   206b0:	00020525 	.word	0x00020525
   206b4:	00020299 	.word	0x00020299
   206b8:	0001d175 	.word	0x0001d175
   206bc:	20004130 	.word	0x20004130
   206c0:	0001ddc5 	.word	0x0001ddc5

000206c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   206c4:	b590      	push	{r4, r7, lr}
   206c6:	b089      	sub	sp, #36	; 0x24
   206c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   206ca:	e03e      	b.n	2074a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   206cc:	4b28      	ldr	r3, [pc, #160]	; (20770 <prvSwitchTimerLists+0xac>)
   206ce:	681b      	ldr	r3, [r3, #0]
   206d0:	68db      	ldr	r3, [r3, #12]
   206d2:	681b      	ldr	r3, [r3, #0]
   206d4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   206d6:	4b26      	ldr	r3, [pc, #152]	; (20770 <prvSwitchTimerLists+0xac>)
   206d8:	681b      	ldr	r3, [r3, #0]
   206da:	68db      	ldr	r3, [r3, #12]
   206dc:	68db      	ldr	r3, [r3, #12]
   206de:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   206e0:	693b      	ldr	r3, [r7, #16]
   206e2:	3304      	adds	r3, #4
   206e4:	0018      	movs	r0, r3
   206e6:	4b23      	ldr	r3, [pc, #140]	; (20774 <prvSwitchTimerLists+0xb0>)
   206e8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   206ea:	693b      	ldr	r3, [r7, #16]
   206ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   206ee:	693a      	ldr	r2, [r7, #16]
   206f0:	0010      	movs	r0, r2
   206f2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   206f4:	693b      	ldr	r3, [r7, #16]
   206f6:	69db      	ldr	r3, [r3, #28]
   206f8:	2b01      	cmp	r3, #1
   206fa:	d126      	bne.n	2074a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   206fc:	693b      	ldr	r3, [r7, #16]
   206fe:	699a      	ldr	r2, [r3, #24]
   20700:	697b      	ldr	r3, [r7, #20]
   20702:	18d3      	adds	r3, r2, r3
   20704:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   20706:	68fa      	ldr	r2, [r7, #12]
   20708:	697b      	ldr	r3, [r7, #20]
   2070a:	429a      	cmp	r2, r3
   2070c:	d90e      	bls.n	2072c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   2070e:	693b      	ldr	r3, [r7, #16]
   20710:	68fa      	ldr	r2, [r7, #12]
   20712:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   20714:	693b      	ldr	r3, [r7, #16]
   20716:	693a      	ldr	r2, [r7, #16]
   20718:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   2071a:	4b15      	ldr	r3, [pc, #84]	; (20770 <prvSwitchTimerLists+0xac>)
   2071c:	681a      	ldr	r2, [r3, #0]
   2071e:	693b      	ldr	r3, [r7, #16]
   20720:	3304      	adds	r3, #4
   20722:	0019      	movs	r1, r3
   20724:	0010      	movs	r0, r2
   20726:	4b14      	ldr	r3, [pc, #80]	; (20778 <prvSwitchTimerLists+0xb4>)
   20728:	4798      	blx	r3
   2072a:	e00e      	b.n	2074a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   2072c:	697a      	ldr	r2, [r7, #20]
   2072e:	6938      	ldr	r0, [r7, #16]
   20730:	2300      	movs	r3, #0
   20732:	9300      	str	r3, [sp, #0]
   20734:	2300      	movs	r3, #0
   20736:	2100      	movs	r1, #0
   20738:	4c10      	ldr	r4, [pc, #64]	; (2077c <prvSwitchTimerLists+0xb8>)
   2073a:	47a0      	blx	r4
   2073c:	0003      	movs	r3, r0
   2073e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   20740:	68bb      	ldr	r3, [r7, #8]
   20742:	2b00      	cmp	r3, #0
   20744:	d101      	bne.n	2074a <prvSwitchTimerLists+0x86>
   20746:	b672      	cpsid	i
   20748:	e7fe      	b.n	20748 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   2074a:	4b09      	ldr	r3, [pc, #36]	; (20770 <prvSwitchTimerLists+0xac>)
   2074c:	681b      	ldr	r3, [r3, #0]
   2074e:	681b      	ldr	r3, [r3, #0]
   20750:	2b00      	cmp	r3, #0
   20752:	d1bb      	bne.n	206cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   20754:	4b06      	ldr	r3, [pc, #24]	; (20770 <prvSwitchTimerLists+0xac>)
   20756:	681b      	ldr	r3, [r3, #0]
   20758:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   2075a:	4b09      	ldr	r3, [pc, #36]	; (20780 <prvSwitchTimerLists+0xbc>)
   2075c:	681a      	ldr	r2, [r3, #0]
   2075e:	4b04      	ldr	r3, [pc, #16]	; (20770 <prvSwitchTimerLists+0xac>)
   20760:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   20762:	4b07      	ldr	r3, [pc, #28]	; (20780 <prvSwitchTimerLists+0xbc>)
   20764:	687a      	ldr	r2, [r7, #4]
   20766:	601a      	str	r2, [r3, #0]
}
   20768:	46c0      	nop			; (mov r8, r8)
   2076a:	46bd      	mov	sp, r7
   2076c:	b007      	add	sp, #28
   2076e:	bd90      	pop	{r4, r7, pc}
   20770:	20004128 	.word	0x20004128
   20774:	0001cdef 	.word	0x0001cdef
   20778:	0001cd83 	.word	0x0001cd83
   2077c:	00020299 	.word	0x00020299
   20780:	2000412c 	.word	0x2000412c

00020784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   20784:	b580      	push	{r7, lr}
   20786:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   20788:	4b10      	ldr	r3, [pc, #64]	; (207cc <prvCheckForValidListAndQueue+0x48>)
   2078a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   2078c:	4b10      	ldr	r3, [pc, #64]	; (207d0 <prvCheckForValidListAndQueue+0x4c>)
   2078e:	681b      	ldr	r3, [r3, #0]
   20790:	2b00      	cmp	r3, #0
   20792:	d115      	bne.n	207c0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   20794:	4b0f      	ldr	r3, [pc, #60]	; (207d4 <prvCheckForValidListAndQueue+0x50>)
   20796:	0018      	movs	r0, r3
   20798:	4b0f      	ldr	r3, [pc, #60]	; (207d8 <prvCheckForValidListAndQueue+0x54>)
   2079a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   2079c:	4b0f      	ldr	r3, [pc, #60]	; (207dc <prvCheckForValidListAndQueue+0x58>)
   2079e:	0018      	movs	r0, r3
   207a0:	4b0d      	ldr	r3, [pc, #52]	; (207d8 <prvCheckForValidListAndQueue+0x54>)
   207a2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   207a4:	4b0e      	ldr	r3, [pc, #56]	; (207e0 <prvCheckForValidListAndQueue+0x5c>)
   207a6:	4a0b      	ldr	r2, [pc, #44]	; (207d4 <prvCheckForValidListAndQueue+0x50>)
   207a8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   207aa:	4b0e      	ldr	r3, [pc, #56]	; (207e4 <prvCheckForValidListAndQueue+0x60>)
   207ac:	4a0b      	ldr	r2, [pc, #44]	; (207dc <prvCheckForValidListAndQueue+0x58>)
   207ae:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   207b0:	2200      	movs	r2, #0
   207b2:	210c      	movs	r1, #12
   207b4:	2005      	movs	r0, #5
   207b6:	4b0c      	ldr	r3, [pc, #48]	; (207e8 <prvCheckForValidListAndQueue+0x64>)
   207b8:	4798      	blx	r3
   207ba:	0002      	movs	r2, r0
   207bc:	4b04      	ldr	r3, [pc, #16]	; (207d0 <prvCheckForValidListAndQueue+0x4c>)
   207be:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   207c0:	4b0a      	ldr	r3, [pc, #40]	; (207ec <prvCheckForValidListAndQueue+0x68>)
   207c2:	4798      	blx	r3
}
   207c4:	46c0      	nop			; (mov r8, r8)
   207c6:	46bd      	mov	sp, r7
   207c8:	bd80      	pop	{r7, pc}
   207ca:	46c0      	nop			; (mov r8, r8)
   207cc:	0001cf79 	.word	0x0001cf79
   207d0:	20004130 	.word	0x20004130
   207d4:	20004100 	.word	0x20004100
   207d8:	0001cced 	.word	0x0001cced
   207dc:	20004114 	.word	0x20004114
   207e0:	20004128 	.word	0x20004128
   207e4:	2000412c 	.word	0x2000412c
   207e8:	0001d265 	.word	0x0001d265
   207ec:	0001cf9d 	.word	0x0001cf9d

000207f0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   207f0:	b580      	push	{r7, lr}
   207f2:	b082      	sub	sp, #8
   207f4:	af00      	add	r7, sp, #0
   207f6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   207f8:	687b      	ldr	r3, [r7, #4]
   207fa:	7c1b      	ldrb	r3, [r3, #16]
   207fc:	2b00      	cmp	r3, #0
   207fe:	d00b      	beq.n	20818 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   20800:	687b      	ldr	r3, [r7, #4]
   20802:	689b      	ldr	r3, [r3, #8]
   20804:	1c5a      	adds	r2, r3, #1
   20806:	687b      	ldr	r3, [r7, #4]
   20808:	68d9      	ldr	r1, [r3, #12]
   2080a:	4b10      	ldr	r3, [pc, #64]	; (2084c <advance_pointer+0x5c>)
   2080c:	0010      	movs	r0, r2
   2080e:	4798      	blx	r3
   20810:	000b      	movs	r3, r1
   20812:	001a      	movs	r2, r3
   20814:	687b      	ldr	r3, [r7, #4]
   20816:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   20818:	687b      	ldr	r3, [r7, #4]
   2081a:	685b      	ldr	r3, [r3, #4]
   2081c:	1c5a      	adds	r2, r3, #1
   2081e:	687b      	ldr	r3, [r7, #4]
   20820:	68d9      	ldr	r1, [r3, #12]
   20822:	4b0a      	ldr	r3, [pc, #40]	; (2084c <advance_pointer+0x5c>)
   20824:	0010      	movs	r0, r2
   20826:	4798      	blx	r3
   20828:	000b      	movs	r3, r1
   2082a:	001a      	movs	r2, r3
   2082c:	687b      	ldr	r3, [r7, #4]
   2082e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   20830:	687b      	ldr	r3, [r7, #4]
   20832:	685a      	ldr	r2, [r3, #4]
   20834:	687b      	ldr	r3, [r7, #4]
   20836:	689b      	ldr	r3, [r3, #8]
   20838:	1ad3      	subs	r3, r2, r3
   2083a:	425a      	negs	r2, r3
   2083c:	4153      	adcs	r3, r2
   2083e:	b2da      	uxtb	r2, r3
   20840:	687b      	ldr	r3, [r7, #4]
   20842:	741a      	strb	r2, [r3, #16]
 }
   20844:	46c0      	nop			; (mov r8, r8)
   20846:	46bd      	mov	sp, r7
   20848:	b002      	add	sp, #8
   2084a:	bd80      	pop	{r7, pc}
   2084c:	00035afd 	.word	0x00035afd

00020850 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   20850:	b580      	push	{r7, lr}
   20852:	b082      	sub	sp, #8
   20854:	af00      	add	r7, sp, #0
   20856:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   20858:	687b      	ldr	r3, [r7, #4]
   2085a:	2200      	movs	r2, #0
   2085c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   2085e:	687b      	ldr	r3, [r7, #4]
   20860:	689b      	ldr	r3, [r3, #8]
   20862:	1c5a      	adds	r2, r3, #1
   20864:	687b      	ldr	r3, [r7, #4]
   20866:	68d9      	ldr	r1, [r3, #12]
   20868:	4b05      	ldr	r3, [pc, #20]	; (20880 <retreat_pointer+0x30>)
   2086a:	0010      	movs	r0, r2
   2086c:	4798      	blx	r3
   2086e:	000b      	movs	r3, r1
   20870:	001a      	movs	r2, r3
   20872:	687b      	ldr	r3, [r7, #4]
   20874:	609a      	str	r2, [r3, #8]
 }
   20876:	46c0      	nop			; (mov r8, r8)
   20878:	46bd      	mov	sp, r7
   2087a:	b002      	add	sp, #8
   2087c:	bd80      	pop	{r7, pc}
   2087e:	46c0      	nop			; (mov r8, r8)
   20880:	00035afd 	.word	0x00035afd

00020884 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   20884:	b580      	push	{r7, lr}
   20886:	b084      	sub	sp, #16
   20888:	af00      	add	r7, sp, #0
   2088a:	6078      	str	r0, [r7, #4]
   2088c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   2088e:	2014      	movs	r0, #20
   20890:	4b09      	ldr	r3, [pc, #36]	; (208b8 <circular_buf_init+0x34>)
   20892:	4798      	blx	r3
   20894:	0003      	movs	r3, r0
   20896:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   20898:	68fb      	ldr	r3, [r7, #12]
   2089a:	687a      	ldr	r2, [r7, #4]
   2089c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   2089e:	68fb      	ldr	r3, [r7, #12]
   208a0:	683a      	ldr	r2, [r7, #0]
   208a2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   208a4:	68fb      	ldr	r3, [r7, #12]
   208a6:	0018      	movs	r0, r3
   208a8:	4b04      	ldr	r3, [pc, #16]	; (208bc <circular_buf_init+0x38>)
   208aa:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   208ac:	68fb      	ldr	r3, [r7, #12]
 }
   208ae:	0018      	movs	r0, r3
   208b0:	46bd      	mov	sp, r7
   208b2:	b004      	add	sp, #16
   208b4:	bd80      	pop	{r7, pc}
   208b6:	46c0      	nop			; (mov r8, r8)
   208b8:	000384a9 	.word	0x000384a9
   208bc:	000208c1 	.word	0x000208c1

000208c0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   208c0:	b580      	push	{r7, lr}
   208c2:	b082      	sub	sp, #8
   208c4:	af00      	add	r7, sp, #0
   208c6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   208c8:	687b      	ldr	r3, [r7, #4]
   208ca:	2200      	movs	r2, #0
   208cc:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   208ce:	687b      	ldr	r3, [r7, #4]
   208d0:	2200      	movs	r2, #0
   208d2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   208d4:	687b      	ldr	r3, [r7, #4]
   208d6:	2200      	movs	r2, #0
   208d8:	741a      	strb	r2, [r3, #16]
 }
   208da:	46c0      	nop			; (mov r8, r8)
   208dc:	46bd      	mov	sp, r7
   208de:	b002      	add	sp, #8
   208e0:	bd80      	pop	{r7, pc}
	...

000208e4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   208e4:	b580      	push	{r7, lr}
   208e6:	b082      	sub	sp, #8
   208e8:	af00      	add	r7, sp, #0
   208ea:	6078      	str	r0, [r7, #4]
   208ec:	000a      	movs	r2, r1
   208ee:	1cfb      	adds	r3, r7, #3
   208f0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   208f2:	687b      	ldr	r3, [r7, #4]
   208f4:	681a      	ldr	r2, [r3, #0]
   208f6:	687b      	ldr	r3, [r7, #4]
   208f8:	685b      	ldr	r3, [r3, #4]
   208fa:	18d3      	adds	r3, r2, r3
   208fc:	1cfa      	adds	r2, r7, #3
   208fe:	7812      	ldrb	r2, [r2, #0]
   20900:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   20902:	687b      	ldr	r3, [r7, #4]
   20904:	0018      	movs	r0, r3
   20906:	4b03      	ldr	r3, [pc, #12]	; (20914 <circular_buf_put+0x30>)
   20908:	4798      	blx	r3
 }
   2090a:	46c0      	nop			; (mov r8, r8)
   2090c:	46bd      	mov	sp, r7
   2090e:	b002      	add	sp, #8
   20910:	bd80      	pop	{r7, pc}
   20912:	46c0      	nop			; (mov r8, r8)
   20914:	000207f1 	.word	0x000207f1

00020918 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   20918:	b580      	push	{r7, lr}
   2091a:	b084      	sub	sp, #16
   2091c:	af00      	add	r7, sp, #0
   2091e:	6078      	str	r0, [r7, #4]
   20920:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   20922:	2301      	movs	r3, #1
   20924:	425b      	negs	r3, r3
   20926:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   20928:	687b      	ldr	r3, [r7, #4]
   2092a:	0018      	movs	r0, r3
   2092c:	4b0d      	ldr	r3, [pc, #52]	; (20964 <circular_buf_get+0x4c>)
   2092e:	4798      	blx	r3
   20930:	0003      	movs	r3, r0
   20932:	001a      	movs	r2, r3
   20934:	2301      	movs	r3, #1
   20936:	4053      	eors	r3, r2
   20938:	b2db      	uxtb	r3, r3
   2093a:	2b00      	cmp	r3, #0
   2093c:	d00d      	beq.n	2095a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   2093e:	687b      	ldr	r3, [r7, #4]
   20940:	681a      	ldr	r2, [r3, #0]
   20942:	687b      	ldr	r3, [r7, #4]
   20944:	689b      	ldr	r3, [r3, #8]
   20946:	18d3      	adds	r3, r2, r3
   20948:	781a      	ldrb	r2, [r3, #0]
   2094a:	683b      	ldr	r3, [r7, #0]
   2094c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   2094e:	687b      	ldr	r3, [r7, #4]
   20950:	0018      	movs	r0, r3
   20952:	4b05      	ldr	r3, [pc, #20]	; (20968 <circular_buf_get+0x50>)
   20954:	4798      	blx	r3

		 r = 0;
   20956:	2300      	movs	r3, #0
   20958:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   2095a:	68fb      	ldr	r3, [r7, #12]
 }
   2095c:	0018      	movs	r0, r3
   2095e:	46bd      	mov	sp, r7
   20960:	b004      	add	sp, #16
   20962:	bd80      	pop	{r7, pc}
   20964:	0002096d 	.word	0x0002096d
   20968:	00020851 	.word	0x00020851

0002096c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   2096c:	b580      	push	{r7, lr}
   2096e:	b082      	sub	sp, #8
   20970:	af00      	add	r7, sp, #0
   20972:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   20974:	687b      	ldr	r3, [r7, #4]
   20976:	7c1b      	ldrb	r3, [r3, #16]
   20978:	2201      	movs	r2, #1
   2097a:	4053      	eors	r3, r2
   2097c:	b2db      	uxtb	r3, r3
   2097e:	2b00      	cmp	r3, #0
   20980:	d007      	beq.n	20992 <circular_buf_empty+0x26>
   20982:	687b      	ldr	r3, [r7, #4]
   20984:	685a      	ldr	r2, [r3, #4]
   20986:	687b      	ldr	r3, [r7, #4]
   20988:	689b      	ldr	r3, [r3, #8]
   2098a:	429a      	cmp	r2, r3
   2098c:	d101      	bne.n	20992 <circular_buf_empty+0x26>
   2098e:	2301      	movs	r3, #1
   20990:	e000      	b.n	20994 <circular_buf_empty+0x28>
   20992:	2300      	movs	r3, #0
   20994:	1c1a      	adds	r2, r3, #0
   20996:	2301      	movs	r3, #1
   20998:	4013      	ands	r3, r2
   2099a:	b2db      	uxtb	r3, r3
 }
   2099c:	0018      	movs	r0, r3
   2099e:	46bd      	mov	sp, r7
   209a0:	b002      	add	sp, #8
   209a2:	bd80      	pop	{r7, pc}

000209a4 <system_interrupt_enable>:
{
   209a4:	b580      	push	{r7, lr}
   209a6:	b082      	sub	sp, #8
   209a8:	af00      	add	r7, sp, #0
   209aa:	0002      	movs	r2, r0
   209ac:	1dfb      	adds	r3, r7, #7
   209ae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   209b0:	4b06      	ldr	r3, [pc, #24]	; (209cc <system_interrupt_enable+0x28>)
   209b2:	1dfa      	adds	r2, r7, #7
   209b4:	7812      	ldrb	r2, [r2, #0]
   209b6:	0011      	movs	r1, r2
   209b8:	221f      	movs	r2, #31
   209ba:	400a      	ands	r2, r1
   209bc:	2101      	movs	r1, #1
   209be:	4091      	lsls	r1, r2
   209c0:	000a      	movs	r2, r1
   209c2:	601a      	str	r2, [r3, #0]
}
   209c4:	46c0      	nop			; (mov r8, r8)
   209c6:	46bd      	mov	sp, r7
   209c8:	b002      	add	sp, #8
   209ca:	bd80      	pop	{r7, pc}
   209cc:	e000e100 	.word	0xe000e100

000209d0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   209d0:	b580      	push	{r7, lr}
   209d2:	b084      	sub	sp, #16
   209d4:	af00      	add	r7, sp, #0
   209d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   209d8:	687b      	ldr	r3, [r7, #4]
   209da:	681b      	ldr	r3, [r3, #0]
   209dc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   209de:	68fb      	ldr	r3, [r7, #12]
   209e0:	69db      	ldr	r3, [r3, #28]
   209e2:	1e5a      	subs	r2, r3, #1
   209e4:	4193      	sbcs	r3, r2
   209e6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   209e8:	0018      	movs	r0, r3
   209ea:	46bd      	mov	sp, r7
   209ec:	b004      	add	sp, #16
   209ee:	bd80      	pop	{r7, pc}

000209f0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   209f0:	b580      	push	{r7, lr}
   209f2:	b082      	sub	sp, #8
   209f4:	af00      	add	r7, sp, #0
   209f6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   209f8:	46c0      	nop			; (mov r8, r8)
   209fa:	687b      	ldr	r3, [r7, #4]
   209fc:	0018      	movs	r0, r3
   209fe:	4b04      	ldr	r3, [pc, #16]	; (20a10 <_usart_wait_for_sync+0x20>)
   20a00:	4798      	blx	r3
   20a02:	1e03      	subs	r3, r0, #0
   20a04:	d1f9      	bne.n	209fa <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   20a06:	46c0      	nop			; (mov r8, r8)
   20a08:	46bd      	mov	sp, r7
   20a0a:	b002      	add	sp, #8
   20a0c:	bd80      	pop	{r7, pc}
   20a0e:	46c0      	nop			; (mov r8, r8)
   20a10:	000209d1 	.word	0x000209d1

00020a14 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   20a14:	b580      	push	{r7, lr}
   20a16:	b082      	sub	sp, #8
   20a18:	af00      	add	r7, sp, #0
   20a1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   20a1c:	687b      	ldr	r3, [r7, #4]
   20a1e:	2280      	movs	r2, #128	; 0x80
   20a20:	05d2      	lsls	r2, r2, #23
   20a22:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   20a24:	687b      	ldr	r3, [r7, #4]
   20a26:	2200      	movs	r2, #0
   20a28:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   20a2a:	687b      	ldr	r3, [r7, #4]
   20a2c:	22ff      	movs	r2, #255	; 0xff
   20a2e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   20a30:	687b      	ldr	r3, [r7, #4]
   20a32:	2200      	movs	r2, #0
   20a34:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   20a36:	687b      	ldr	r3, [r7, #4]
   20a38:	2200      	movs	r2, #0
   20a3a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   20a3c:	687b      	ldr	r3, [r7, #4]
   20a3e:	2296      	movs	r2, #150	; 0x96
   20a40:	0192      	lsls	r2, r2, #6
   20a42:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   20a44:	687b      	ldr	r3, [r7, #4]
   20a46:	2224      	movs	r2, #36	; 0x24
   20a48:	2101      	movs	r1, #1
   20a4a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   20a4c:	687b      	ldr	r3, [r7, #4]
   20a4e:	2225      	movs	r2, #37	; 0x25
   20a50:	2101      	movs	r1, #1
   20a52:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   20a54:	687b      	ldr	r3, [r7, #4]
   20a56:	2226      	movs	r2, #38	; 0x26
   20a58:	2100      	movs	r1, #0
   20a5a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   20a5c:	687b      	ldr	r3, [r7, #4]
   20a5e:	2227      	movs	r2, #39	; 0x27
   20a60:	2100      	movs	r1, #0
   20a62:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   20a64:	687b      	ldr	r3, [r7, #4]
   20a66:	2200      	movs	r2, #0
   20a68:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   20a6a:	687b      	ldr	r3, [r7, #4]
   20a6c:	2288      	movs	r2, #136	; 0x88
   20a6e:	0352      	lsls	r2, r2, #13
   20a70:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   20a72:	687b      	ldr	r3, [r7, #4]
   20a74:	222c      	movs	r2, #44	; 0x2c
   20a76:	2100      	movs	r1, #0
   20a78:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   20a7a:	687b      	ldr	r3, [r7, #4]
   20a7c:	222d      	movs	r2, #45	; 0x2d
   20a7e:	2100      	movs	r1, #0
   20a80:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   20a82:	687b      	ldr	r3, [r7, #4]
   20a84:	2200      	movs	r2, #0
   20a86:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   20a88:	687b      	ldr	r3, [r7, #4]
   20a8a:	2200      	movs	r2, #0
   20a8c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   20a8e:	687b      	ldr	r3, [r7, #4]
   20a90:	2200      	movs	r2, #0
   20a92:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   20a94:	687b      	ldr	r3, [r7, #4]
   20a96:	2200      	movs	r2, #0
   20a98:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   20a9a:	687b      	ldr	r3, [r7, #4]
   20a9c:	2200      	movs	r2, #0
   20a9e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   20aa0:	687b      	ldr	r3, [r7, #4]
   20aa2:	2200      	movs	r2, #0
   20aa4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   20aa6:	687b      	ldr	r3, [r7, #4]
   20aa8:	2200      	movs	r2, #0
   20aaa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   20aac:	687b      	ldr	r3, [r7, #4]
   20aae:	2200      	movs	r2, #0
   20ab0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   20ab2:	687b      	ldr	r3, [r7, #4]
   20ab4:	2200      	movs	r2, #0
   20ab6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   20ab8:	687b      	ldr	r3, [r7, #4]
   20aba:	2200      	movs	r2, #0
   20abc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   20abe:	687b      	ldr	r3, [r7, #4]
   20ac0:	2213      	movs	r2, #19
   20ac2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   20ac4:	687b      	ldr	r3, [r7, #4]
   20ac6:	2200      	movs	r2, #0
   20ac8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   20aca:	46c0      	nop			; (mov r8, r8)
   20acc:	46bd      	mov	sp, r7
   20ace:	b002      	add	sp, #8
   20ad0:	bd80      	pop	{r7, pc}
	...

00020ad4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   20ad4:	b580      	push	{r7, lr}
   20ad6:	b084      	sub	sp, #16
   20ad8:	af00      	add	r7, sp, #0
   20ada:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   20adc:	687b      	ldr	r3, [r7, #4]
   20ade:	681b      	ldr	r3, [r3, #0]
   20ae0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20ae2:	687b      	ldr	r3, [r7, #4]
   20ae4:	681b      	ldr	r3, [r3, #0]
   20ae6:	0018      	movs	r0, r3
   20ae8:	4b09      	ldr	r3, [pc, #36]	; (20b10 <usart_enable+0x3c>)
   20aea:	4798      	blx	r3
   20aec:	0003      	movs	r3, r0
   20aee:	0018      	movs	r0, r3
   20af0:	4b08      	ldr	r3, [pc, #32]	; (20b14 <usart_enable+0x40>)
   20af2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   20af4:	687b      	ldr	r3, [r7, #4]
   20af6:	0018      	movs	r0, r3
   20af8:	4b07      	ldr	r3, [pc, #28]	; (20b18 <usart_enable+0x44>)
   20afa:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   20afc:	68fb      	ldr	r3, [r7, #12]
   20afe:	681b      	ldr	r3, [r3, #0]
   20b00:	2202      	movs	r2, #2
   20b02:	431a      	orrs	r2, r3
   20b04:	68fb      	ldr	r3, [r7, #12]
   20b06:	601a      	str	r2, [r3, #0]
}
   20b08:	46c0      	nop			; (mov r8, r8)
   20b0a:	46bd      	mov	sp, r7
   20b0c:	b004      	add	sp, #16
   20b0e:	bd80      	pop	{r7, pc}
   20b10:	0002a671 	.word	0x0002a671
   20b14:	000209a5 	.word	0x000209a5
   20b18:	000209f1 	.word	0x000209f1

00020b1c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   20b1c:	b580      	push	{r7, lr}
   20b1e:	b082      	sub	sp, #8
   20b20:	af00      	add	r7, sp, #0
   20b22:	6078      	str	r0, [r7, #4]
   20b24:	000a      	movs	r2, r1
   20b26:	1cfb      	adds	r3, r7, #3
   20b28:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   20b2a:	687b      	ldr	r3, [r7, #4]
   20b2c:	2231      	movs	r2, #49	; 0x31
   20b2e:	5c9b      	ldrb	r3, [r3, r2]
   20b30:	b25a      	sxtb	r2, r3
   20b32:	1cfb      	adds	r3, r7, #3
   20b34:	781b      	ldrb	r3, [r3, #0]
   20b36:	2101      	movs	r1, #1
   20b38:	4099      	lsls	r1, r3
   20b3a:	000b      	movs	r3, r1
   20b3c:	b25b      	sxtb	r3, r3
   20b3e:	4313      	orrs	r3, r2
   20b40:	b25b      	sxtb	r3, r3
   20b42:	b2d9      	uxtb	r1, r3
   20b44:	687b      	ldr	r3, [r7, #4]
   20b46:	2231      	movs	r2, #49	; 0x31
   20b48:	5499      	strb	r1, [r3, r2]

}
   20b4a:	46c0      	nop			; (mov r8, r8)
   20b4c:	46bd      	mov	sp, r7
   20b4e:	b002      	add	sp, #8
   20b50:	bd80      	pop	{r7, pc}
	...

00020b54 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   20b54:	b580      	push	{r7, lr}
   20b56:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   20b58:	2380      	movs	r3, #128	; 0x80
   20b5a:	009a      	lsls	r2, r3, #2
   20b5c:	4b0f      	ldr	r3, [pc, #60]	; (20b9c <InitializeSerialConsole+0x48>)
   20b5e:	0011      	movs	r1, r2
   20b60:	0018      	movs	r0, r3
   20b62:	4b0f      	ldr	r3, [pc, #60]	; (20ba0 <InitializeSerialConsole+0x4c>)
   20b64:	4798      	blx	r3
   20b66:	0002      	movs	r2, r0
   20b68:	4b0e      	ldr	r3, [pc, #56]	; (20ba4 <InitializeSerialConsole+0x50>)
   20b6a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   20b6c:	2380      	movs	r3, #128	; 0x80
   20b6e:	009a      	lsls	r2, r3, #2
   20b70:	4b0d      	ldr	r3, [pc, #52]	; (20ba8 <InitializeSerialConsole+0x54>)
   20b72:	0011      	movs	r1, r2
   20b74:	0018      	movs	r0, r3
   20b76:	4b0a      	ldr	r3, [pc, #40]	; (20ba0 <InitializeSerialConsole+0x4c>)
   20b78:	4798      	blx	r3
   20b7a:	0002      	movs	r2, r0
   20b7c:	4b0b      	ldr	r3, [pc, #44]	; (20bac <InitializeSerialConsole+0x58>)
   20b7e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   20b80:	4b0b      	ldr	r3, [pc, #44]	; (20bb0 <InitializeSerialConsole+0x5c>)
   20b82:	4798      	blx	r3
    configure_usart_callbacks();
   20b84:	4b0b      	ldr	r3, [pc, #44]	; (20bb4 <InitializeSerialConsole+0x60>)
   20b86:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   20b88:	490b      	ldr	r1, [pc, #44]	; (20bb8 <InitializeSerialConsole+0x64>)
   20b8a:	4b0c      	ldr	r3, [pc, #48]	; (20bbc <InitializeSerialConsole+0x68>)
   20b8c:	2201      	movs	r2, #1
   20b8e:	0018      	movs	r0, r3
   20b90:	4b0b      	ldr	r3, [pc, #44]	; (20bc0 <InitializeSerialConsole+0x6c>)
   20b92:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   20b94:	46c0      	nop			; (mov r8, r8)
   20b96:	46bd      	mov	sp, r7
   20b98:	bd80      	pop	{r7, pc}
   20b9a:	46c0      	nop			; (mov r8, r8)
   20b9c:	200058a0 	.word	0x200058a0
   20ba0:	00020885 	.word	0x00020885
   20ba4:	20005698 	.word	0x20005698
   20ba8:	200056a0 	.word	0x200056a0
   20bac:	20005aa4 	.word	0x20005aa4
   20bb0:	00020e5d 	.word	0x00020e5d
   20bb4:	00020ed5 	.word	0x00020ed5
   20bb8:	2000569c 	.word	0x2000569c
   20bbc:	20005664 	.word	0x20005664
   20bc0:	0002bf19 	.word	0x0002bf19

00020bc4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   20bc4:	b580      	push	{r7, lr}
   20bc6:	b084      	sub	sp, #16
   20bc8:	af00      	add	r7, sp, #0
   20bca:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   20bcc:	4b1a      	ldr	r3, [pc, #104]	; (20c38 <SerialConsoleWriteString+0x74>)
   20bce:	4798      	blx	r3
    if (string != NULL) {
   20bd0:	687b      	ldr	r3, [r7, #4]
   20bd2:	2b00      	cmp	r3, #0
   20bd4:	d02a      	beq.n	20c2c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   20bd6:	2300      	movs	r3, #0
   20bd8:	60fb      	str	r3, [r7, #12]
   20bda:	e00b      	b.n	20bf4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   20bdc:	4b17      	ldr	r3, [pc, #92]	; (20c3c <SerialConsoleWriteString+0x78>)
   20bde:	6818      	ldr	r0, [r3, #0]
   20be0:	687a      	ldr	r2, [r7, #4]
   20be2:	68fb      	ldr	r3, [r7, #12]
   20be4:	18d3      	adds	r3, r2, r3
   20be6:	781b      	ldrb	r3, [r3, #0]
   20be8:	0019      	movs	r1, r3
   20bea:	4b15      	ldr	r3, [pc, #84]	; (20c40 <SerialConsoleWriteString+0x7c>)
   20bec:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   20bee:	68fb      	ldr	r3, [r7, #12]
   20bf0:	3301      	adds	r3, #1
   20bf2:	60fb      	str	r3, [r7, #12]
   20bf4:	687b      	ldr	r3, [r7, #4]
   20bf6:	0018      	movs	r0, r3
   20bf8:	4b12      	ldr	r3, [pc, #72]	; (20c44 <SerialConsoleWriteString+0x80>)
   20bfa:	4798      	blx	r3
   20bfc:	0002      	movs	r2, r0
   20bfe:	68fb      	ldr	r3, [r7, #12]
   20c00:	429a      	cmp	r2, r3
   20c02:	d8eb      	bhi.n	20bdc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   20c04:	4b10      	ldr	r3, [pc, #64]	; (20c48 <SerialConsoleWriteString+0x84>)
   20c06:	2101      	movs	r1, #1
   20c08:	0018      	movs	r0, r3
   20c0a:	4b10      	ldr	r3, [pc, #64]	; (20c4c <SerialConsoleWriteString+0x88>)
   20c0c:	4798      	blx	r3
   20c0e:	1e03      	subs	r3, r0, #0
   20c10:	d10c      	bne.n	20c2c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   20c12:	4b0a      	ldr	r3, [pc, #40]	; (20c3c <SerialConsoleWriteString+0x78>)
   20c14:	681b      	ldr	r3, [r3, #0]
   20c16:	4a0e      	ldr	r2, [pc, #56]	; (20c50 <SerialConsoleWriteString+0x8c>)
   20c18:	0011      	movs	r1, r2
   20c1a:	0018      	movs	r0, r3
   20c1c:	4b0d      	ldr	r3, [pc, #52]	; (20c54 <SerialConsoleWriteString+0x90>)
   20c1e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20c20:	490b      	ldr	r1, [pc, #44]	; (20c50 <SerialConsoleWriteString+0x8c>)
   20c22:	4b09      	ldr	r3, [pc, #36]	; (20c48 <SerialConsoleWriteString+0x84>)
   20c24:	2201      	movs	r2, #1
   20c26:	0018      	movs	r0, r3
   20c28:	4b0b      	ldr	r3, [pc, #44]	; (20c58 <SerialConsoleWriteString+0x94>)
   20c2a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   20c2c:	4b0b      	ldr	r3, [pc, #44]	; (20c5c <SerialConsoleWriteString+0x98>)
   20c2e:	4798      	blx	r3
}
   20c30:	46c0      	nop			; (mov r8, r8)
   20c32:	46bd      	mov	sp, r7
   20c34:	b004      	add	sp, #16
   20c36:	bd80      	pop	{r7, pc}
   20c38:	0001f231 	.word	0x0001f231
   20c3c:	20005aa4 	.word	0x20005aa4
   20c40:	000208e5 	.word	0x000208e5
   20c44:	000388bf 	.word	0x000388bf
   20c48:	20005664 	.word	0x20005664
   20c4c:	0002bf61 	.word	0x0002bf61
   20c50:	20005aa0 	.word	0x20005aa0
   20c54:	00020919 	.word	0x00020919
   20c58:	0002bed1 	.word	0x0002bed1
   20c5c:	0001f249 	.word	0x0001f249

00020c60 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   20c60:	b580      	push	{r7, lr}
   20c62:	b084      	sub	sp, #16
   20c64:	af00      	add	r7, sp, #0
   20c66:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   20c68:	4b08      	ldr	r3, [pc, #32]	; (20c8c <SerialConsoleReadCharacter+0x2c>)
   20c6a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   20c6c:	4b08      	ldr	r3, [pc, #32]	; (20c90 <SerialConsoleReadCharacter+0x30>)
   20c6e:	681b      	ldr	r3, [r3, #0]
   20c70:	687a      	ldr	r2, [r7, #4]
   20c72:	0011      	movs	r1, r2
   20c74:	0018      	movs	r0, r3
   20c76:	4b07      	ldr	r3, [pc, #28]	; (20c94 <SerialConsoleReadCharacter+0x34>)
   20c78:	4798      	blx	r3
   20c7a:	0003      	movs	r3, r0
   20c7c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   20c7e:	4b06      	ldr	r3, [pc, #24]	; (20c98 <SerialConsoleReadCharacter+0x38>)
   20c80:	4798      	blx	r3
    return a;
   20c82:	68fb      	ldr	r3, [r7, #12]
}
   20c84:	0018      	movs	r0, r3
   20c86:	46bd      	mov	sp, r7
   20c88:	b004      	add	sp, #16
   20c8a:	bd80      	pop	{r7, pc}
   20c8c:	0001f231 	.word	0x0001f231
   20c90:	20005698 	.word	0x20005698
   20c94:	00020919 	.word	0x00020919
   20c98:	0001f249 	.word	0x0001f249

00020c9c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   20c9c:	b580      	push	{r7, lr}
   20c9e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   20ca0:	4b02      	ldr	r3, [pc, #8]	; (20cac <getLogLevel+0x10>)
   20ca2:	781b      	ldrb	r3, [r3, #0]
}
   20ca4:	0018      	movs	r0, r3
   20ca6:	46bd      	mov	sp, r7
   20ca8:	bd80      	pop	{r7, pc}
   20caa:	46c0      	nop			; (mov r8, r8)
   20cac:	2000413c 	.word	0x2000413c

00020cb0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   20cb0:	b40e      	push	{r1, r2, r3}
   20cb2:	b590      	push	{r4, r7, lr}
   20cb4:	b084      	sub	sp, #16
   20cb6:	af00      	add	r7, sp, #0
   20cb8:	0002      	movs	r2, r0
   20cba:	1dfb      	adds	r3, r7, #7
   20cbc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   20cbe:	4b0e      	ldr	r3, [pc, #56]	; (20cf8 <LogMessage+0x48>)
   20cc0:	4798      	blx	r3
   20cc2:	0003      	movs	r3, r0
   20cc4:	001a      	movs	r2, r3
   20cc6:	1dfb      	adds	r3, r7, #7
   20cc8:	781b      	ldrb	r3, [r3, #0]
   20cca:	4293      	cmp	r3, r2
   20ccc:	d30c      	bcc.n	20ce8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   20cce:	2320      	movs	r3, #32
   20cd0:	18fb      	adds	r3, r7, r3
   20cd2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   20cd4:	68fb      	ldr	r3, [r7, #12]
   20cd6:	69fa      	ldr	r2, [r7, #28]
   20cd8:	4808      	ldr	r0, [pc, #32]	; (20cfc <LogMessage+0x4c>)
   20cda:	217f      	movs	r1, #127	; 0x7f
   20cdc:	4c08      	ldr	r4, [pc, #32]	; (20d00 <LogMessage+0x50>)
   20cde:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   20ce0:	4b06      	ldr	r3, [pc, #24]	; (20cfc <LogMessage+0x4c>)
   20ce2:	0018      	movs	r0, r3
   20ce4:	4b07      	ldr	r3, [pc, #28]	; (20d04 <LogMessage+0x54>)
   20ce6:	4798      	blx	r3
        va_end(ap);
    }
};
   20ce8:	46c0      	nop			; (mov r8, r8)
   20cea:	46bd      	mov	sp, r7
   20cec:	b004      	add	sp, #16
   20cee:	bc90      	pop	{r4, r7}
   20cf0:	bc08      	pop	{r3}
   20cf2:	b003      	add	sp, #12
   20cf4:	4718      	bx	r3
   20cf6:	46c0      	nop			; (mov r8, r8)
   20cf8:	00020c9d 	.word	0x00020c9d
   20cfc:	200055e4 	.word	0x200055e4
   20d00:	00038af9 	.word	0x00038af9
   20d04:	00020bc5 	.word	0x00020bc5

00020d08 <LogMessagedisplay>:

void LogMessagedisplay( const char *format, ...)
{
   20d08:	b40f      	push	{r0, r1, r2, r3}
   20d0a:	b590      	push	{r4, r7, lr}
   20d0c:	b087      	sub	sp, #28
   20d0e:	af02      	add	r7, sp, #8
    //if (getLogLevel() <= level) {
        va_list ap;
        va_start(ap, format);
   20d10:	2324      	movs	r3, #36	; 0x24
   20d12:	18fb      	adds	r3, r7, r3
   20d14:	607b      	str	r3, [r7, #4]
        vsnprintf(debugBuffer, 127, format, ap);
   20d16:	687b      	ldr	r3, [r7, #4]
   20d18:	6a3a      	ldr	r2, [r7, #32]
   20d1a:	481c      	ldr	r0, [pc, #112]	; (20d8c <LogMessagedisplay+0x84>)
   20d1c:	217f      	movs	r1, #127	; 0x7f
   20d1e:	4c1c      	ldr	r4, [pc, #112]	; (20d90 <LogMessagedisplay+0x88>)
   20d20:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   20d22:	4b1a      	ldr	r3, [pc, #104]	; (20d8c <LogMessagedisplay+0x84>)
   20d24:	0018      	movs	r0, r3
   20d26:	4b1b      	ldr	r3, [pc, #108]	; (20d94 <LogMessagedisplay+0x8c>)
   20d28:	4798      	blx	r3
        va_end(ap);
char *ptr1 = strstr(debugBuffer, "\"message\":\""); // Find the start of the message value
   20d2a:	4a1b      	ldr	r2, [pc, #108]	; (20d98 <LogMessagedisplay+0x90>)
   20d2c:	4b17      	ldr	r3, [pc, #92]	; (20d8c <LogMessagedisplay+0x84>)
   20d2e:	0011      	movs	r1, r2
   20d30:	0018      	movs	r0, r3
   20d32:	4b1a      	ldr	r3, [pc, #104]	; (20d9c <LogMessagedisplay+0x94>)
   20d34:	4798      	blx	r3
   20d36:	0003      	movs	r3, r0
   20d38:	60fb      	str	r3, [r7, #12]
    ptr1 += strlen("\"message\":\""); // Move the pointer past the start string
   20d3a:	68fb      	ldr	r3, [r7, #12]
   20d3c:	330b      	adds	r3, #11
   20d3e:	60fb      	str	r3, [r7, #12]
    char *ptr2 = strchr(ptr1, '\"'); // Find the end of the message value
   20d40:	68fb      	ldr	r3, [r7, #12]
   20d42:	2122      	movs	r1, #34	; 0x22
   20d44:	0018      	movs	r0, r3
   20d46:	4b16      	ldr	r3, [pc, #88]	; (20da0 <LogMessagedisplay+0x98>)
   20d48:	4798      	blx	r3
   20d4a:	0003      	movs	r3, r0
   20d4c:	60bb      	str	r3, [r7, #8]
    *ptr2 = '\0'; // Set the end of the message value to a null character
   20d4e:	68bb      	ldr	r3, [r7, #8]
   20d50:	2200      	movs	r2, #0
   20d52:	701a      	strb	r2, [r3, #0]
    
SerialConsoleWriteString(ptr1);
   20d54:	68fb      	ldr	r3, [r7, #12]
   20d56:	0018      	movs	r0, r3
   20d58:	4b0e      	ldr	r3, [pc, #56]	; (20d94 <LogMessagedisplay+0x8c>)
   20d5a:	4798      	blx	r3
LCD_drawBlock(35, 55, 150, 70, BLACK);
   20d5c:	2300      	movs	r3, #0
   20d5e:	9300      	str	r3, [sp, #0]
   20d60:	2346      	movs	r3, #70	; 0x46
   20d62:	2296      	movs	r2, #150	; 0x96
   20d64:	2137      	movs	r1, #55	; 0x37
   20d66:	2023      	movs	r0, #35	; 0x23
   20d68:	4c0e      	ldr	r4, [pc, #56]	; (20da4 <LogMessagedisplay+0x9c>)
   20d6a:	47a0      	blx	r4
LCD_drawString(40,61,ptr1, WHITE, BLACK);
   20d6c:	490e      	ldr	r1, [pc, #56]	; (20da8 <LogMessagedisplay+0xa0>)
   20d6e:	68fa      	ldr	r2, [r7, #12]
   20d70:	2300      	movs	r3, #0
   20d72:	9300      	str	r3, [sp, #0]
   20d74:	000b      	movs	r3, r1
   20d76:	213d      	movs	r1, #61	; 0x3d
   20d78:	2028      	movs	r0, #40	; 0x28
   20d7a:	4c0c      	ldr	r4, [pc, #48]	; (20dac <LogMessagedisplay+0xa4>)
   20d7c:	47a0      	blx	r4
 
	//SerialConsoleWriteString(ptr3);
    //}
};
   20d7e:	46c0      	nop			; (mov r8, r8)
   20d80:	46bd      	mov	sp, r7
   20d82:	b005      	add	sp, #20
   20d84:	bc90      	pop	{r4, r7}
   20d86:	bc08      	pop	{r3}
   20d88:	b004      	add	sp, #16
   20d8a:	4718      	bx	r3
   20d8c:	200055e4 	.word	0x200055e4
   20d90:	00038af9 	.word	0x00038af9
   20d94:	00020bc5 	.word	0x00020bc5
   20d98:	0003c860 	.word	0x0003c860
   20d9c:	0003893d 	.word	0x0003893d
   20da0:	00038845 	.word	0x00038845
   20da4:	00012999 	.word	0x00012999
   20da8:	0000ffff 	.word	0x0000ffff
   20dac:	00012f8d 	.word	0x00012f8d

00020db0 <LogMessagedisplaytime>:
void LogMessagedisplaytime( const char *format, ...)
{
   20db0:	b40f      	push	{r0, r1, r2, r3}
   20db2:	b590      	push	{r4, r7, lr}
   20db4:	b087      	sub	sp, #28
   20db6:	af02      	add	r7, sp, #8
    //if (getLogLevel() <= level) {
        va_list ap;
        va_start(ap, format);
   20db8:	2324      	movs	r3, #36	; 0x24
   20dba:	18fb      	adds	r3, r7, r3
   20dbc:	607b      	str	r3, [r7, #4]
        vsnprintf(debugBuffer, 127, format, ap);
   20dbe:	687b      	ldr	r3, [r7, #4]
   20dc0:	6a3a      	ldr	r2, [r7, #32]
   20dc2:	4816      	ldr	r0, [pc, #88]	; (20e1c <LogMessagedisplaytime+0x6c>)
   20dc4:	217f      	movs	r1, #127	; 0x7f
   20dc6:	4c16      	ldr	r4, [pc, #88]	; (20e20 <LogMessagedisplaytime+0x70>)
   20dc8:	47a0      	blx	r4
        //SerialConsoleWriteString(debugBuffer);
        va_end(ap);
 char *ptr1 = strstr(debugBuffer, "\"timestamp\":\""); // Find the start of the timestamp value
   20dca:	4a16      	ldr	r2, [pc, #88]	; (20e24 <LogMessagedisplaytime+0x74>)
   20dcc:	4b13      	ldr	r3, [pc, #76]	; (20e1c <LogMessagedisplaytime+0x6c>)
   20dce:	0011      	movs	r1, r2
   20dd0:	0018      	movs	r0, r3
   20dd2:	4b15      	ldr	r3, [pc, #84]	; (20e28 <LogMessagedisplaytime+0x78>)
   20dd4:	4798      	blx	r3
   20dd6:	0003      	movs	r3, r0
   20dd8:	60fb      	str	r3, [r7, #12]
    ptr1 += strlen("\"timestamp\":\""); // Move the pointer past the start string
   20dda:	68fb      	ldr	r3, [r7, #12]
   20ddc:	330d      	adds	r3, #13
   20dde:	60fb      	str	r3, [r7, #12]
    char *ptr2 = strchr(ptr1, '\"'); // Find the end of the timestamp value
   20de0:	68fb      	ldr	r3, [r7, #12]
   20de2:	2122      	movs	r1, #34	; 0x22
   20de4:	0018      	movs	r0, r3
   20de6:	4b11      	ldr	r3, [pc, #68]	; (20e2c <LogMessagedisplaytime+0x7c>)
   20de8:	4798      	blx	r3
   20dea:	0003      	movs	r3, r0
   20dec:	60bb      	str	r3, [r7, #8]
    *ptr2 = '\0'; // Set the end of the timestamp value to a null character
   20dee:	68bb      	ldr	r3, [r7, #8]
   20df0:	2200      	movs	r2, #0
   20df2:	701a      	strb	r2, [r3, #0]
    
SerialConsoleWriteString(ptr1);
   20df4:	68fb      	ldr	r3, [r7, #12]
   20df6:	0018      	movs	r0, r3
   20df8:	4b0d      	ldr	r3, [pc, #52]	; (20e30 <LogMessagedisplaytime+0x80>)
   20dfa:	4798      	blx	r3
 //SerialConsoleWriteString(ptr1);
 LCD_drawString(45,102,ptr1, WHITE, BLACK);
   20dfc:	490d      	ldr	r1, [pc, #52]	; (20e34 <LogMessagedisplaytime+0x84>)
   20dfe:	68fa      	ldr	r2, [r7, #12]
   20e00:	2300      	movs	r3, #0
   20e02:	9300      	str	r3, [sp, #0]
   20e04:	000b      	movs	r3, r1
   20e06:	2166      	movs	r1, #102	; 0x66
   20e08:	202d      	movs	r0, #45	; 0x2d
   20e0a:	4c0b      	ldr	r4, [pc, #44]	; (20e38 <LogMessagedisplaytime+0x88>)
   20e0c:	47a0      	blx	r4
	//SerialConsoleWriteString(ptr3);
    //}
};
   20e0e:	46c0      	nop			; (mov r8, r8)
   20e10:	46bd      	mov	sp, r7
   20e12:	b005      	add	sp, #20
   20e14:	bc90      	pop	{r4, r7}
   20e16:	bc08      	pop	{r3}
   20e18:	b004      	add	sp, #16
   20e1a:	4718      	bx	r3
   20e1c:	200055e4 	.word	0x200055e4
   20e20:	00038af9 	.word	0x00038af9
   20e24:	0003c86c 	.word	0x0003c86c
   20e28:	0003893d 	.word	0x0003893d
   20e2c:	00038845 	.word	0x00038845
   20e30:	00020bc5 	.word	0x00020bc5
   20e34:	0000ffff 	.word	0x0000ffff
   20e38:	00012f8d 	.word	0x00012f8d

00020e3c <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   20e3c:	b40f      	push	{r0, r1, r2, r3}
   20e3e:	b580      	push	{r7, lr}
   20e40:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   20e42:	68bb      	ldr	r3, [r7, #8]
   20e44:	0019      	movs	r1, r3
   20e46:	2001      	movs	r0, #1
   20e48:	4b03      	ldr	r3, [pc, #12]	; (20e58 <LogMessageDebug+0x1c>)
   20e4a:	4798      	blx	r3
};
   20e4c:	46c0      	nop			; (mov r8, r8)
   20e4e:	46bd      	mov	sp, r7
   20e50:	bc80      	pop	{r7}
   20e52:	bc08      	pop	{r3}
   20e54:	b004      	add	sp, #16
   20e56:	4718      	bx	r3
   20e58:	00020cb1 	.word	0x00020cb1

00020e5c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   20e5c:	b580      	push	{r7, lr}
   20e5e:	b090      	sub	sp, #64	; 0x40
   20e60:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   20e62:	003b      	movs	r3, r7
   20e64:	0018      	movs	r0, r3
   20e66:	4b14      	ldr	r3, [pc, #80]	; (20eb8 <configure_usart+0x5c>)
   20e68:	4798      	blx	r3

    config_usart.baudrate = 115200;
   20e6a:	003b      	movs	r3, r7
   20e6c:	22e1      	movs	r2, #225	; 0xe1
   20e6e:	0252      	lsls	r2, r2, #9
   20e70:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   20e72:	003b      	movs	r3, r7
   20e74:	22c4      	movs	r2, #196	; 0xc4
   20e76:	0392      	lsls	r2, r2, #14
   20e78:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   20e7a:	003b      	movs	r3, r7
   20e7c:	2201      	movs	r2, #1
   20e7e:	4252      	negs	r2, r2
   20e80:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   20e82:	003b      	movs	r3, r7
   20e84:	2201      	movs	r2, #1
   20e86:	4252      	negs	r2, r2
   20e88:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   20e8a:	003b      	movs	r3, r7
   20e8c:	4a0b      	ldr	r2, [pc, #44]	; (20ebc <configure_usart+0x60>)
   20e8e:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   20e90:	003b      	movs	r3, r7
   20e92:	4a0b      	ldr	r2, [pc, #44]	; (20ec0 <configure_usart+0x64>)
   20e94:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   20e96:	46c0      	nop			; (mov r8, r8)
   20e98:	003a      	movs	r2, r7
   20e9a:	490a      	ldr	r1, [pc, #40]	; (20ec4 <configure_usart+0x68>)
   20e9c:	4b0a      	ldr	r3, [pc, #40]	; (20ec8 <configure_usart+0x6c>)
   20e9e:	0018      	movs	r0, r3
   20ea0:	4b0a      	ldr	r3, [pc, #40]	; (20ecc <configure_usart+0x70>)
   20ea2:	4798      	blx	r3
   20ea4:	1e03      	subs	r3, r0, #0
   20ea6:	d1f7      	bne.n	20e98 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   20ea8:	4b07      	ldr	r3, [pc, #28]	; (20ec8 <configure_usart+0x6c>)
   20eaa:	0018      	movs	r0, r3
   20eac:	4b08      	ldr	r3, [pc, #32]	; (20ed0 <configure_usart+0x74>)
   20eae:	4798      	blx	r3
}
   20eb0:	46c0      	nop			; (mov r8, r8)
   20eb2:	46bd      	mov	sp, r7
   20eb4:	b010      	add	sp, #64	; 0x40
   20eb6:	bd80      	pop	{r7, pc}
   20eb8:	00020a15 	.word	0x00020a15
   20ebc:	002a0003 	.word	0x002a0003
   20ec0:	002b0003 	.word	0x002b0003
   20ec4:	42001800 	.word	0x42001800
   20ec8:	20005664 	.word	0x20005664
   20ecc:	0002bad5 	.word	0x0002bad5
   20ed0:	00020ad5 	.word	0x00020ad5

00020ed4 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   20ed4:	b580      	push	{r7, lr}
   20ed6:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   20ed8:	490c      	ldr	r1, [pc, #48]	; (20f0c <configure_usart_callbacks+0x38>)
   20eda:	4b0d      	ldr	r3, [pc, #52]	; (20f10 <configure_usart_callbacks+0x3c>)
   20edc:	2200      	movs	r2, #0
   20ede:	0018      	movs	r0, r3
   20ee0:	4b0c      	ldr	r3, [pc, #48]	; (20f14 <configure_usart_callbacks+0x40>)
   20ee2:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   20ee4:	490c      	ldr	r1, [pc, #48]	; (20f18 <configure_usart_callbacks+0x44>)
   20ee6:	4b0a      	ldr	r3, [pc, #40]	; (20f10 <configure_usart_callbacks+0x3c>)
   20ee8:	2201      	movs	r2, #1
   20eea:	0018      	movs	r0, r3
   20eec:	4b09      	ldr	r3, [pc, #36]	; (20f14 <configure_usart_callbacks+0x40>)
   20eee:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   20ef0:	4b07      	ldr	r3, [pc, #28]	; (20f10 <configure_usart_callbacks+0x3c>)
   20ef2:	2100      	movs	r1, #0
   20ef4:	0018      	movs	r0, r3
   20ef6:	4b09      	ldr	r3, [pc, #36]	; (20f1c <configure_usart_callbacks+0x48>)
   20ef8:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   20efa:	4b05      	ldr	r3, [pc, #20]	; (20f10 <configure_usart_callbacks+0x3c>)
   20efc:	2101      	movs	r1, #1
   20efe:	0018      	movs	r0, r3
   20f00:	4b06      	ldr	r3, [pc, #24]	; (20f1c <configure_usart_callbacks+0x48>)
   20f02:	4798      	blx	r3
}
   20f04:	46c0      	nop			; (mov r8, r8)
   20f06:	46bd      	mov	sp, r7
   20f08:	bd80      	pop	{r7, pc}
   20f0a:	46c0      	nop			; (mov r8, r8)
   20f0c:	00020f69 	.word	0x00020f69
   20f10:	20005664 	.word	0x20005664
   20f14:	0002be89 	.word	0x0002be89
   20f18:	00020f21 	.word	0x00020f21
   20f1c:	00020b1d 	.word	0x00020b1d

00020f20 <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   20f20:	b580      	push	{r7, lr}
   20f22:	b082      	sub	sp, #8
   20f24:	af00      	add	r7, sp, #0
   20f26:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   20f28:	4b09      	ldr	r3, [pc, #36]	; (20f50 <usart_read_callback+0x30>)
   20f2a:	681a      	ldr	r2, [r3, #0]
   20f2c:	4b09      	ldr	r3, [pc, #36]	; (20f54 <usart_read_callback+0x34>)
   20f2e:	781b      	ldrb	r3, [r3, #0]
   20f30:	0019      	movs	r1, r3
   20f32:	0010      	movs	r0, r2
   20f34:	4b08      	ldr	r3, [pc, #32]	; (20f58 <usart_read_callback+0x38>)
   20f36:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   20f38:	4906      	ldr	r1, [pc, #24]	; (20f54 <usart_read_callback+0x34>)
   20f3a:	4b08      	ldr	r3, [pc, #32]	; (20f5c <usart_read_callback+0x3c>)
   20f3c:	2201      	movs	r2, #1
   20f3e:	0018      	movs	r0, r3
   20f40:	4b07      	ldr	r3, [pc, #28]	; (20f60 <usart_read_callback+0x40>)
   20f42:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   20f44:	4b07      	ldr	r3, [pc, #28]	; (20f64 <usart_read_callback+0x44>)
   20f46:	4798      	blx	r3
}
   20f48:	46c0      	nop			; (mov r8, r8)
   20f4a:	46bd      	mov	sp, r7
   20f4c:	b002      	add	sp, #8
   20f4e:	bd80      	pop	{r7, pc}
   20f50:	20005698 	.word	0x20005698
   20f54:	2000569c 	.word	0x2000569c
   20f58:	000208e5 	.word	0x000208e5
   20f5c:	20005664 	.word	0x20005664
   20f60:	0002bf19 	.word	0x0002bf19
   20f64:	00014fcd 	.word	0x00014fcd

00020f68 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   20f68:	b580      	push	{r7, lr}
   20f6a:	b082      	sub	sp, #8
   20f6c:	af00      	add	r7, sp, #0
   20f6e:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   20f70:	4b09      	ldr	r3, [pc, #36]	; (20f98 <usart_write_callback+0x30>)
   20f72:	681b      	ldr	r3, [r3, #0]
   20f74:	4a09      	ldr	r2, [pc, #36]	; (20f9c <usart_write_callback+0x34>)
   20f76:	0011      	movs	r1, r2
   20f78:	0018      	movs	r0, r3
   20f7a:	4b09      	ldr	r3, [pc, #36]	; (20fa0 <usart_write_callback+0x38>)
   20f7c:	4798      	blx	r3
   20f7e:	0003      	movs	r3, r0
   20f80:	3301      	adds	r3, #1
   20f82:	d005      	beq.n	20f90 <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   20f84:	4905      	ldr	r1, [pc, #20]	; (20f9c <usart_write_callback+0x34>)
   20f86:	4b07      	ldr	r3, [pc, #28]	; (20fa4 <usart_write_callback+0x3c>)
   20f88:	2201      	movs	r2, #1
   20f8a:	0018      	movs	r0, r3
   20f8c:	4b06      	ldr	r3, [pc, #24]	; (20fa8 <usart_write_callback+0x40>)
   20f8e:	4798      	blx	r3
    }
}
   20f90:	46c0      	nop			; (mov r8, r8)
   20f92:	46bd      	mov	sp, r7
   20f94:	b002      	add	sp, #8
   20f96:	bd80      	pop	{r7, pc}
   20f98:	20005aa4 	.word	0x20005aa4
   20f9c:	20005aa0 	.word	0x20005aa0
   20fa0:	00020919 	.word	0x00020919
   20fa4:	20005664 	.word	0x20005664
   20fa8:	0002bed1 	.word	0x0002bed1

00020fac <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   20fac:	b590      	push	{r4, r7, lr}
   20fae:	b087      	sub	sp, #28
   20fb0:	af00      	add	r7, sp, #0
   20fb2:	60f8      	str	r0, [r7, #12]
   20fb4:	000c      	movs	r4, r1
   20fb6:	0010      	movs	r0, r2
   20fb8:	0019      	movs	r1, r3
   20fba:	230a      	movs	r3, #10
   20fbc:	18fb      	adds	r3, r7, r3
   20fbe:	1c22      	adds	r2, r4, #0
   20fc0:	801a      	strh	r2, [r3, #0]
   20fc2:	2308      	movs	r3, #8
   20fc4:	18fb      	adds	r3, r7, r3
   20fc6:	1c02      	adds	r2, r0, #0
   20fc8:	801a      	strh	r2, [r3, #0]
   20fca:	1dfb      	adds	r3, r7, #7
   20fcc:	1c0a      	adds	r2, r1, #0
   20fce:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   20fd0:	230a      	movs	r3, #10
   20fd2:	18fb      	adds	r3, r7, r3
   20fd4:	881a      	ldrh	r2, [r3, #0]
   20fd6:	2308      	movs	r3, #8
   20fd8:	18fb      	adds	r3, r7, r3
   20fda:	881b      	ldrh	r3, [r3, #0]
   20fdc:	1ad3      	subs	r3, r2, r3
   20fde:	3307      	adds	r3, #7
   20fe0:	2b00      	cmp	r3, #0
   20fe2:	da00      	bge.n	20fe6 <SDMMC_UNSTUFF_BITS+0x3a>
   20fe4:	3307      	adds	r3, #7
   20fe6:	10db      	asrs	r3, r3, #3
   20fe8:	3b01      	subs	r3, #1
   20fea:	68fa      	ldr	r2, [r7, #12]
   20fec:	18d3      	adds	r3, r2, r3
   20fee:	781b      	ldrb	r3, [r3, #0]
   20ff0:	0019      	movs	r1, r3
   20ff2:	2308      	movs	r3, #8
   20ff4:	18fb      	adds	r3, r7, r3
   20ff6:	881b      	ldrh	r3, [r3, #0]
   20ff8:	2207      	movs	r2, #7
   20ffa:	4013      	ands	r3, r2
   20ffc:	4119      	asrs	r1, r3
   20ffe:	000b      	movs	r3, r1
   21000:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   21002:	2308      	movs	r3, #8
   21004:	18fb      	adds	r3, r7, r3
   21006:	881b      	ldrh	r3, [r3, #0]
   21008:	2207      	movs	r2, #7
   2100a:	401a      	ands	r2, r3
   2100c:	1dfb      	adds	r3, r7, #7
   2100e:	781b      	ldrb	r3, [r3, #0]
   21010:	18d3      	adds	r3, r2, r3
   21012:	2b08      	cmp	r3, #8
   21014:	dd1c      	ble.n	21050 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   21016:	230a      	movs	r3, #10
   21018:	18fb      	adds	r3, r7, r3
   2101a:	881a      	ldrh	r2, [r3, #0]
   2101c:	2308      	movs	r3, #8
   2101e:	18fb      	adds	r3, r7, r3
   21020:	881b      	ldrh	r3, [r3, #0]
   21022:	1ad3      	subs	r3, r2, r3
   21024:	3307      	adds	r3, #7
   21026:	2b00      	cmp	r3, #0
   21028:	da00      	bge.n	2102c <SDMMC_UNSTUFF_BITS+0x80>
   2102a:	3307      	adds	r3, #7
   2102c:	10db      	asrs	r3, r3, #3
   2102e:	3b02      	subs	r3, #2
   21030:	68fa      	ldr	r2, [r7, #12]
   21032:	18d3      	adds	r3, r2, r3
   21034:	781b      	ldrb	r3, [r3, #0]
   21036:	0019      	movs	r1, r3
   21038:	2308      	movs	r3, #8
   2103a:	18fb      	adds	r3, r7, r3
   2103c:	881b      	ldrh	r3, [r3, #0]
   2103e:	2207      	movs	r2, #7
   21040:	4013      	ands	r3, r2
   21042:	2208      	movs	r2, #8
   21044:	1ad3      	subs	r3, r2, r3
   21046:	4099      	lsls	r1, r3
   21048:	000b      	movs	r3, r1
   2104a:	697a      	ldr	r2, [r7, #20]
   2104c:	4313      	orrs	r3, r2
   2104e:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   21050:	2308      	movs	r3, #8
   21052:	18fb      	adds	r3, r7, r3
   21054:	881b      	ldrh	r3, [r3, #0]
   21056:	2207      	movs	r2, #7
   21058:	401a      	ands	r2, r3
   2105a:	1dfb      	adds	r3, r7, #7
   2105c:	781b      	ldrb	r3, [r3, #0]
   2105e:	18d3      	adds	r3, r2, r3
   21060:	2b10      	cmp	r3, #16
   21062:	dd1c      	ble.n	2109e <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   21064:	230a      	movs	r3, #10
   21066:	18fb      	adds	r3, r7, r3
   21068:	881a      	ldrh	r2, [r3, #0]
   2106a:	2308      	movs	r3, #8
   2106c:	18fb      	adds	r3, r7, r3
   2106e:	881b      	ldrh	r3, [r3, #0]
   21070:	1ad3      	subs	r3, r2, r3
   21072:	3307      	adds	r3, #7
   21074:	2b00      	cmp	r3, #0
   21076:	da00      	bge.n	2107a <SDMMC_UNSTUFF_BITS+0xce>
   21078:	3307      	adds	r3, #7
   2107a:	10db      	asrs	r3, r3, #3
   2107c:	3b03      	subs	r3, #3
   2107e:	68fa      	ldr	r2, [r7, #12]
   21080:	18d3      	adds	r3, r2, r3
   21082:	781b      	ldrb	r3, [r3, #0]
   21084:	0019      	movs	r1, r3
   21086:	2308      	movs	r3, #8
   21088:	18fb      	adds	r3, r7, r3
   2108a:	881b      	ldrh	r3, [r3, #0]
   2108c:	2207      	movs	r2, #7
   2108e:	4013      	ands	r3, r2
   21090:	2210      	movs	r2, #16
   21092:	1ad3      	subs	r3, r2, r3
   21094:	4099      	lsls	r1, r3
   21096:	000b      	movs	r3, r1
   21098:	697a      	ldr	r2, [r7, #20]
   2109a:	4313      	orrs	r3, r2
   2109c:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   2109e:	2308      	movs	r3, #8
   210a0:	18fb      	adds	r3, r7, r3
   210a2:	881b      	ldrh	r3, [r3, #0]
   210a4:	2207      	movs	r2, #7
   210a6:	401a      	ands	r2, r3
   210a8:	1dfb      	adds	r3, r7, #7
   210aa:	781b      	ldrb	r3, [r3, #0]
   210ac:	18d3      	adds	r3, r2, r3
   210ae:	2b10      	cmp	r3, #16
   210b0:	dd1c      	ble.n	210ec <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   210b2:	230a      	movs	r3, #10
   210b4:	18fb      	adds	r3, r7, r3
   210b6:	881a      	ldrh	r2, [r3, #0]
   210b8:	2308      	movs	r3, #8
   210ba:	18fb      	adds	r3, r7, r3
   210bc:	881b      	ldrh	r3, [r3, #0]
   210be:	1ad3      	subs	r3, r2, r3
   210c0:	3307      	adds	r3, #7
   210c2:	2b00      	cmp	r3, #0
   210c4:	da00      	bge.n	210c8 <SDMMC_UNSTUFF_BITS+0x11c>
   210c6:	3307      	adds	r3, #7
   210c8:	10db      	asrs	r3, r3, #3
   210ca:	3b03      	subs	r3, #3
   210cc:	68fa      	ldr	r2, [r7, #12]
   210ce:	18d3      	adds	r3, r2, r3
   210d0:	781b      	ldrb	r3, [r3, #0]
   210d2:	0019      	movs	r1, r3
   210d4:	2308      	movs	r3, #8
   210d6:	18fb      	adds	r3, r7, r3
   210d8:	881b      	ldrh	r3, [r3, #0]
   210da:	2207      	movs	r2, #7
   210dc:	4013      	ands	r3, r2
   210de:	2210      	movs	r2, #16
   210e0:	1ad3      	subs	r3, r2, r3
   210e2:	4099      	lsls	r1, r3
   210e4:	000b      	movs	r3, r1
   210e6:	697a      	ldr	r2, [r7, #20]
   210e8:	4313      	orrs	r3, r2
   210ea:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   210ec:	1dfb      	adds	r3, r7, #7
   210ee:	781b      	ldrb	r3, [r3, #0]
   210f0:	2201      	movs	r2, #1
   210f2:	409a      	lsls	r2, r3
   210f4:	0013      	movs	r3, r2
   210f6:	1e5a      	subs	r2, r3, #1
   210f8:	697b      	ldr	r3, [r7, #20]
   210fa:	4013      	ands	r3, r2
   210fc:	617b      	str	r3, [r7, #20]
	return value;
   210fe:	697b      	ldr	r3, [r7, #20]
}
   21100:	0018      	movs	r0, r3
   21102:	46bd      	mov	sp, r7
   21104:	b007      	add	sp, #28
   21106:	bd90      	pop	{r4, r7, pc}

00021108 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   21108:	b580      	push	{r7, lr}
   2110a:	b082      	sub	sp, #8
   2110c:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   2110e:	4b23      	ldr	r3, [pc, #140]	; (2119c <mmc_spi_op_cond+0x94>)
   21110:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   21112:	4b23      	ldr	r3, [pc, #140]	; (211a0 <mmc_spi_op_cond+0x98>)
   21114:	2100      	movs	r1, #0
   21116:	0018      	movs	r0, r3
   21118:	4b22      	ldr	r3, [pc, #136]	; (211a4 <mmc_spi_op_cond+0x9c>)
   2111a:	4798      	blx	r3
   2111c:	0003      	movs	r3, r0
   2111e:	001a      	movs	r2, r3
   21120:	2301      	movs	r3, #1
   21122:	4053      	eors	r3, r2
   21124:	b2db      	uxtb	r3, r3
   21126:	2b00      	cmp	r3, #0
   21128:	d001      	beq.n	2112e <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   2112a:	2300      	movs	r3, #0
   2112c:	e031      	b.n	21192 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   2112e:	4b1e      	ldr	r3, [pc, #120]	; (211a8 <mmc_spi_op_cond+0xa0>)
   21130:	4798      	blx	r3
   21132:	0003      	movs	r3, r0
   21134:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   21136:	683b      	ldr	r3, [r7, #0]
   21138:	2201      	movs	r2, #1
   2113a:	4013      	ands	r3, r2
   2113c:	d006      	beq.n	2114c <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   2113e:	687b      	ldr	r3, [r7, #4]
   21140:	1e5a      	subs	r2, r3, #1
   21142:	607a      	str	r2, [r7, #4]
   21144:	2b00      	cmp	r3, #0
   21146:	d1e4      	bne.n	21112 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   21148:	2300      	movs	r3, #0
   2114a:	e022      	b.n	21192 <mmc_spi_op_cond+0x8a>
			break;
   2114c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   2114e:	4b17      	ldr	r3, [pc, #92]	; (211ac <mmc_spi_op_cond+0xa4>)
   21150:	2100      	movs	r1, #0
   21152:	0018      	movs	r0, r3
   21154:	4b13      	ldr	r3, [pc, #76]	; (211a4 <mmc_spi_op_cond+0x9c>)
   21156:	4798      	blx	r3
   21158:	0003      	movs	r3, r0
   2115a:	001a      	movs	r2, r3
   2115c:	2301      	movs	r3, #1
   2115e:	4053      	eors	r3, r2
   21160:	b2db      	uxtb	r3, r3
   21162:	2b00      	cmp	r3, #0
   21164:	d001      	beq.n	2116a <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   21166:	2300      	movs	r3, #0
   21168:	e013      	b.n	21192 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   2116a:	4b0f      	ldr	r3, [pc, #60]	; (211a8 <mmc_spi_op_cond+0xa0>)
   2116c:	4798      	blx	r3
   2116e:	0002      	movs	r2, r0
   21170:	23c0      	movs	r3, #192	; 0xc0
   21172:	05db      	lsls	r3, r3, #23
   21174:	401a      	ands	r2, r3
   21176:	2380      	movs	r3, #128	; 0x80
   21178:	05db      	lsls	r3, r3, #23
   2117a:	429a      	cmp	r2, r3
   2117c:	d108      	bne.n	21190 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   2117e:	4b0c      	ldr	r3, [pc, #48]	; (211b0 <mmc_spi_op_cond+0xa8>)
   21180:	681a      	ldr	r2, [r3, #0]
   21182:	4b0b      	ldr	r3, [pc, #44]	; (211b0 <mmc_spi_op_cond+0xa8>)
   21184:	681b      	ldr	r3, [r3, #0]
   21186:	7adb      	ldrb	r3, [r3, #11]
   21188:	2108      	movs	r1, #8
   2118a:	430b      	orrs	r3, r1
   2118c:	b2db      	uxtb	r3, r3
   2118e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   21190:	2301      	movs	r3, #1
}
   21192:	0018      	movs	r0, r3
   21194:	46bd      	mov	sp, r7
   21196:	b002      	add	sp, #8
   21198:	bd80      	pop	{r7, pc}
   2119a:	46c0      	nop			; (mov r8, r8)
   2119c:	00001bee 	.word	0x00001bee
   211a0:	00001101 	.word	0x00001101
   211a4:	00022b85 	.word	0x00022b85
   211a8:	00022dc5 	.word	0x00022dc5
   211ac:	0000053a 	.word	0x0000053a
   211b0:	20004164 	.word	0x20004164

000211b4 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   211b4:	b580      	push	{r7, lr}
   211b6:	b086      	sub	sp, #24
   211b8:	af00      	add	r7, sp, #0
   211ba:	0002      	movs	r2, r0
   211bc:	1dfb      	adds	r3, r7, #7
   211be:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   211c0:	4b2e      	ldr	r3, [pc, #184]	; (2127c <sd_spi_op_cond+0xc8>)
   211c2:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   211c4:	4b2e      	ldr	r3, [pc, #184]	; (21280 <sd_spi_op_cond+0xcc>)
   211c6:	2100      	movs	r1, #0
   211c8:	0018      	movs	r0, r3
   211ca:	4b2e      	ldr	r3, [pc, #184]	; (21284 <sd_spi_op_cond+0xd0>)
   211cc:	4798      	blx	r3
   211ce:	0003      	movs	r3, r0
   211d0:	001a      	movs	r2, r3
   211d2:	2301      	movs	r3, #1
   211d4:	4053      	eors	r3, r2
   211d6:	b2db      	uxtb	r3, r3
   211d8:	2b00      	cmp	r3, #0
   211da:	d001      	beq.n	211e0 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   211dc:	2300      	movs	r3, #0
   211de:	e048      	b.n	21272 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   211e0:	2300      	movs	r3, #0
   211e2:	617b      	str	r3, [r7, #20]
		if (v2) {
   211e4:	1dfb      	adds	r3, r7, #7
   211e6:	781b      	ldrb	r3, [r3, #0]
   211e8:	2b00      	cmp	r3, #0
   211ea:	d004      	beq.n	211f6 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   211ec:	697b      	ldr	r3, [r7, #20]
   211ee:	2280      	movs	r2, #128	; 0x80
   211f0:	05d2      	lsls	r2, r2, #23
   211f2:	4313      	orrs	r3, r2
   211f4:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   211f6:	697b      	ldr	r3, [r7, #20]
   211f8:	4a23      	ldr	r2, [pc, #140]	; (21288 <sd_spi_op_cond+0xd4>)
   211fa:	0019      	movs	r1, r3
   211fc:	0010      	movs	r0, r2
   211fe:	4b21      	ldr	r3, [pc, #132]	; (21284 <sd_spi_op_cond+0xd0>)
   21200:	4798      	blx	r3
   21202:	0003      	movs	r3, r0
   21204:	001a      	movs	r2, r3
   21206:	2301      	movs	r3, #1
   21208:	4053      	eors	r3, r2
   2120a:	b2db      	uxtb	r3, r3
   2120c:	2b00      	cmp	r3, #0
   2120e:	d001      	beq.n	21214 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   21210:	2300      	movs	r3, #0
   21212:	e02e      	b.n	21272 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   21214:	4b1d      	ldr	r3, [pc, #116]	; (2128c <sd_spi_op_cond+0xd8>)
   21216:	4798      	blx	r3
   21218:	0003      	movs	r3, r0
   2121a:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   2121c:	68fb      	ldr	r3, [r7, #12]
   2121e:	2201      	movs	r2, #1
   21220:	4013      	ands	r3, r2
   21222:	d006      	beq.n	21232 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   21224:	693b      	ldr	r3, [r7, #16]
   21226:	1e5a      	subs	r2, r3, #1
   21228:	613a      	str	r2, [r7, #16]
   2122a:	2b00      	cmp	r3, #0
   2122c:	d1ca      	bne.n	211c4 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   2122e:	2300      	movs	r3, #0
   21230:	e01f      	b.n	21272 <sd_spi_op_cond+0xbe>
			break;
   21232:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   21234:	4b16      	ldr	r3, [pc, #88]	; (21290 <sd_spi_op_cond+0xdc>)
   21236:	2100      	movs	r1, #0
   21238:	0018      	movs	r0, r3
   2123a:	4b12      	ldr	r3, [pc, #72]	; (21284 <sd_spi_op_cond+0xd0>)
   2123c:	4798      	blx	r3
   2123e:	0003      	movs	r3, r0
   21240:	001a      	movs	r2, r3
   21242:	2301      	movs	r3, #1
   21244:	4053      	eors	r3, r2
   21246:	b2db      	uxtb	r3, r3
   21248:	2b00      	cmp	r3, #0
   2124a:	d001      	beq.n	21250 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   2124c:	2300      	movs	r3, #0
   2124e:	e010      	b.n	21272 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   21250:	4b0e      	ldr	r3, [pc, #56]	; (2128c <sd_spi_op_cond+0xd8>)
   21252:	4798      	blx	r3
   21254:	0002      	movs	r2, r0
   21256:	2380      	movs	r3, #128	; 0x80
   21258:	05db      	lsls	r3, r3, #23
   2125a:	4013      	ands	r3, r2
   2125c:	d008      	beq.n	21270 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   2125e:	4b0d      	ldr	r3, [pc, #52]	; (21294 <sd_spi_op_cond+0xe0>)
   21260:	681a      	ldr	r2, [r3, #0]
   21262:	4b0c      	ldr	r3, [pc, #48]	; (21294 <sd_spi_op_cond+0xe0>)
   21264:	681b      	ldr	r3, [r3, #0]
   21266:	7adb      	ldrb	r3, [r3, #11]
   21268:	2108      	movs	r1, #8
   2126a:	430b      	orrs	r3, r1
   2126c:	b2db      	uxtb	r3, r3
   2126e:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   21270:	2301      	movs	r3, #1
}
   21272:	0018      	movs	r0, r3
   21274:	46bd      	mov	sp, r7
   21276:	b006      	add	sp, #24
   21278:	bd80      	pop	{r7, pc}
   2127a:	46c0      	nop			; (mov r8, r8)
   2127c:	00001bee 	.word	0x00001bee
   21280:	00001137 	.word	0x00001137
   21284:	00022b85 	.word	0x00022b85
   21288:	00001129 	.word	0x00001129
   2128c:	00022dc5 	.word	0x00022dc5
   21290:	0000053a 	.word	0x0000053a
   21294:	20004164 	.word	0x20004164

00021298 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   21298:	b580      	push	{r7, lr}
   2129a:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   2129c:	2301      	movs	r3, #1
}
   2129e:	0018      	movs	r0, r3
   212a0:	46bd      	mov	sp, r7
   212a2:	bd80      	pop	{r7, pc}

000212a4 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   212a4:	b580      	push	{r7, lr}
   212a6:	b084      	sub	sp, #16
   212a8:	af00      	add	r7, sp, #0
   212aa:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   212ac:	687b      	ldr	r3, [r7, #4]
   212ae:	2200      	movs	r2, #0
   212b0:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   212b2:	23d5      	movs	r3, #213	; 0xd5
   212b4:	005b      	lsls	r3, r3, #1
   212b6:	4a14      	ldr	r2, [pc, #80]	; (21308 <sd_cmd8+0x64>)
   212b8:	0019      	movs	r1, r3
   212ba:	0010      	movs	r0, r2
   212bc:	4b13      	ldr	r3, [pc, #76]	; (2130c <sd_cmd8+0x68>)
   212be:	4798      	blx	r3
   212c0:	0003      	movs	r3, r0
   212c2:	001a      	movs	r2, r3
   212c4:	2301      	movs	r3, #1
   212c6:	4053      	eors	r3, r2
   212c8:	b2db      	uxtb	r3, r3
   212ca:	2b00      	cmp	r3, #0
   212cc:	d001      	beq.n	212d2 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   212ce:	2301      	movs	r3, #1
   212d0:	e015      	b.n	212fe <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   212d2:	4b0f      	ldr	r3, [pc, #60]	; (21310 <sd_cmd8+0x6c>)
   212d4:	4798      	blx	r3
   212d6:	0003      	movs	r3, r0
   212d8:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   212da:	68fb      	ldr	r3, [r7, #12]
   212dc:	3301      	adds	r3, #1
   212de:	d101      	bne.n	212e4 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   212e0:	2301      	movs	r3, #1
   212e2:	e00c      	b.n	212fe <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   212e4:	68fb      	ldr	r3, [r7, #12]
   212e6:	051b      	lsls	r3, r3, #20
   212e8:	0d1a      	lsrs	r2, r3, #20
   212ea:	23d5      	movs	r3, #213	; 0xd5
   212ec:	005b      	lsls	r3, r3, #1
   212ee:	429a      	cmp	r2, r3
   212f0:	d001      	beq.n	212f6 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   212f2:	2300      	movs	r3, #0
   212f4:	e003      	b.n	212fe <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   212f6:	687b      	ldr	r3, [r7, #4]
   212f8:	2201      	movs	r2, #1
   212fa:	701a      	strb	r2, [r3, #0]
	return true;
   212fc:	2301      	movs	r3, #1
}
   212fe:	0018      	movs	r0, r3
   21300:	46bd      	mov	sp, r7
   21302:	b004      	add	sp, #16
   21304:	bd80      	pop	{r7, pc}
   21306:	46c0      	nop			; (mov r8, r8)
   21308:	00005508 	.word	0x00005508
   2130c:	00022b85 	.word	0x00022b85
   21310:	00022dc5 	.word	0x00022dc5

00021314 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   21314:	b590      	push	{r4, r7, lr}
   21316:	b089      	sub	sp, #36	; 0x24
   21318:	af02      	add	r7, sp, #8
   2131a:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   2131c:	2380      	movs	r3, #128	; 0x80
   2131e:	009a      	lsls	r2, r3, #2
   21320:	4841      	ldr	r0, [pc, #260]	; (21428 <mmc_cmd8+0x114>)
   21322:	2300      	movs	r3, #0
   21324:	9300      	str	r3, [sp, #0]
   21326:	2301      	movs	r3, #1
   21328:	2100      	movs	r1, #0
   2132a:	4c40      	ldr	r4, [pc, #256]	; (2142c <mmc_cmd8+0x118>)
   2132c:	47a0      	blx	r4
   2132e:	0003      	movs	r3, r0
   21330:	001a      	movs	r2, r3
   21332:	2301      	movs	r3, #1
   21334:	4053      	eors	r3, r2
   21336:	b2db      	uxtb	r3, r3
   21338:	2b00      	cmp	r3, #0
   2133a:	d001      	beq.n	21340 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   2133c:	2300      	movs	r3, #0
   2133e:	e06e      	b.n	2141e <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   21340:	2316      	movs	r3, #22
   21342:	18fb      	adds	r3, r7, r3
   21344:	2200      	movs	r2, #0
   21346:	801a      	strh	r2, [r3, #0]
   21348:	e014      	b.n	21374 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   2134a:	2310      	movs	r3, #16
   2134c:	18fb      	adds	r3, r7, r3
   2134e:	0018      	movs	r0, r3
   21350:	4b37      	ldr	r3, [pc, #220]	; (21430 <mmc_cmd8+0x11c>)
   21352:	4798      	blx	r3
   21354:	0003      	movs	r3, r0
   21356:	001a      	movs	r2, r3
   21358:	2301      	movs	r3, #1
   2135a:	4053      	eors	r3, r2
   2135c:	b2db      	uxtb	r3, r3
   2135e:	2b00      	cmp	r3, #0
   21360:	d001      	beq.n	21366 <mmc_cmd8+0x52>
			return false;
   21362:	2300      	movs	r3, #0
   21364:	e05b      	b.n	2141e <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   21366:	2316      	movs	r3, #22
   21368:	18fb      	adds	r3, r7, r3
   2136a:	881a      	ldrh	r2, [r3, #0]
   2136c:	2316      	movs	r3, #22
   2136e:	18fb      	adds	r3, r7, r3
   21370:	3201      	adds	r2, #1
   21372:	801a      	strh	r2, [r3, #0]
   21374:	2316      	movs	r3, #22
   21376:	18fb      	adds	r3, r7, r3
   21378:	881b      	ldrh	r3, [r3, #0]
   2137a:	2b31      	cmp	r3, #49	; 0x31
   2137c:	d9e5      	bls.n	2134a <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   2137e:	693b      	ldr	r3, [r7, #16]
   21380:	b2db      	uxtb	r3, r3
   21382:	2202      	movs	r2, #2
   21384:	4013      	ands	r3, r2
   21386:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   21388:	687b      	ldr	r3, [r7, #4]
   2138a:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   2138c:	4b29      	ldr	r3, [pc, #164]	; (21434 <mmc_cmd8+0x120>)
   2138e:	681b      	ldr	r3, [r3, #0]
   21390:	330e      	adds	r3, #14
   21392:	0018      	movs	r0, r3
   21394:	230c      	movs	r3, #12
   21396:	223e      	movs	r2, #62	; 0x3e
   21398:	2180      	movs	r1, #128	; 0x80
   2139a:	4c27      	ldr	r4, [pc, #156]	; (21438 <mmc_cmd8+0x124>)
   2139c:	47a0      	blx	r4
   2139e:	0002      	movs	r2, r0
   213a0:	4b26      	ldr	r3, [pc, #152]	; (2143c <mmc_cmd8+0x128>)
   213a2:	429a      	cmp	r2, r3
   213a4:	d135      	bne.n	21412 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   213a6:	e014      	b.n	213d2 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   213a8:	230c      	movs	r3, #12
   213aa:	18fb      	adds	r3, r7, r3
   213ac:	0018      	movs	r0, r3
   213ae:	4b20      	ldr	r3, [pc, #128]	; (21430 <mmc_cmd8+0x11c>)
   213b0:	4798      	blx	r3
   213b2:	0003      	movs	r3, r0
   213b4:	001a      	movs	r2, r3
   213b6:	2301      	movs	r3, #1
   213b8:	4053      	eors	r3, r2
   213ba:	b2db      	uxtb	r3, r3
   213bc:	2b00      	cmp	r3, #0
   213be:	d001      	beq.n	213c4 <mmc_cmd8+0xb0>
				return false;
   213c0:	2300      	movs	r3, #0
   213c2:	e02c      	b.n	2141e <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   213c4:	2316      	movs	r3, #22
   213c6:	18fb      	adds	r3, r7, r3
   213c8:	881a      	ldrh	r2, [r3, #0]
   213ca:	2316      	movs	r3, #22
   213cc:	18fb      	adds	r3, r7, r3
   213ce:	3201      	adds	r2, #1
   213d0:	801a      	strh	r2, [r3, #0]
   213d2:	2316      	movs	r3, #22
   213d4:	18fb      	adds	r3, r7, r3
   213d6:	881b      	ldrh	r3, [r3, #0]
   213d8:	2b35      	cmp	r3, #53	; 0x35
   213da:	d9e5      	bls.n	213a8 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   213dc:	4b15      	ldr	r3, [pc, #84]	; (21434 <mmc_cmd8+0x120>)
   213de:	681b      	ldr	r3, [r3, #0]
   213e0:	68fa      	ldr	r2, [r7, #12]
   213e2:	0852      	lsrs	r2, r2, #1
   213e4:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   213e6:	e014      	b.n	21412 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   213e8:	230c      	movs	r3, #12
   213ea:	18fb      	adds	r3, r7, r3
   213ec:	0018      	movs	r0, r3
   213ee:	4b10      	ldr	r3, [pc, #64]	; (21430 <mmc_cmd8+0x11c>)
   213f0:	4798      	blx	r3
   213f2:	0003      	movs	r3, r0
   213f4:	001a      	movs	r2, r3
   213f6:	2301      	movs	r3, #1
   213f8:	4053      	eors	r3, r2
   213fa:	b2db      	uxtb	r3, r3
   213fc:	2b00      	cmp	r3, #0
   213fe:	d001      	beq.n	21404 <mmc_cmd8+0xf0>
			return false;
   21400:	2300      	movs	r3, #0
   21402:	e00c      	b.n	2141e <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   21404:	2316      	movs	r3, #22
   21406:	18fb      	adds	r3, r7, r3
   21408:	881a      	ldrh	r2, [r3, #0]
   2140a:	2316      	movs	r3, #22
   2140c:	18fb      	adds	r3, r7, r3
   2140e:	3201      	adds	r2, #1
   21410:	801a      	strh	r2, [r3, #0]
   21412:	2316      	movs	r3, #22
   21414:	18fb      	adds	r3, r7, r3
   21416:	881b      	ldrh	r3, [r3, #0]
   21418:	2b7f      	cmp	r3, #127	; 0x7f
   2141a:	d9e5      	bls.n	213e8 <mmc_cmd8+0xd4>
		}
	}
	return true;
   2141c:	2301      	movs	r3, #1
}
   2141e:	0018      	movs	r0, r3
   21420:	46bd      	mov	sp, r7
   21422:	b007      	add	sp, #28
   21424:	bd90      	pop	{r4, r7, pc}
   21426:	46c0      	nop			; (mov r8, r8)
   21428:	00081108 	.word	0x00081108
   2142c:	00022bad 	.word	0x00022bad
   21430:	00022dd9 	.word	0x00022dd9
   21434:	20004164 	.word	0x20004164
   21438:	00020fad 	.word	0x00020fad
   2143c:	00000fff 	.word	0x00000fff

00021440 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   21440:	b590      	push	{r4, r7, lr}
   21442:	b083      	sub	sp, #12
   21444:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   21446:	4b15      	ldr	r3, [pc, #84]	; (2149c <sd_mmc_cmd9_spi+0x5c>)
   21448:	681b      	ldr	r3, [r3, #0]
   2144a:	891b      	ldrh	r3, [r3, #8]
   2144c:	0419      	lsls	r1, r3, #16
   2144e:	4814      	ldr	r0, [pc, #80]	; (214a0 <sd_mmc_cmd9_spi+0x60>)
   21450:	2301      	movs	r3, #1
   21452:	9300      	str	r3, [sp, #0]
   21454:	2301      	movs	r3, #1
   21456:	2210      	movs	r2, #16
   21458:	4c12      	ldr	r4, [pc, #72]	; (214a4 <sd_mmc_cmd9_spi+0x64>)
   2145a:	47a0      	blx	r4
   2145c:	0003      	movs	r3, r0
   2145e:	001a      	movs	r2, r3
   21460:	2301      	movs	r3, #1
   21462:	4053      	eors	r3, r2
   21464:	b2db      	uxtb	r3, r3
   21466:	2b00      	cmp	r3, #0
   21468:	d001      	beq.n	2146e <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   2146a:	2300      	movs	r3, #0
   2146c:	e012      	b.n	21494 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   2146e:	4b0b      	ldr	r3, [pc, #44]	; (2149c <sd_mmc_cmd9_spi+0x5c>)
   21470:	681b      	ldr	r3, [r3, #0]
   21472:	330e      	adds	r3, #14
   21474:	2101      	movs	r1, #1
   21476:	0018      	movs	r0, r3
   21478:	4b0b      	ldr	r3, [pc, #44]	; (214a8 <sd_mmc_cmd9_spi+0x68>)
   2147a:	4798      	blx	r3
   2147c:	0003      	movs	r3, r0
   2147e:	001a      	movs	r2, r3
   21480:	2301      	movs	r3, #1
   21482:	4053      	eors	r3, r2
   21484:	b2db      	uxtb	r3, r3
   21486:	2b00      	cmp	r3, #0
   21488:	d001      	beq.n	2148e <sd_mmc_cmd9_spi+0x4e>
		return false;
   2148a:	2300      	movs	r3, #0
   2148c:	e002      	b.n	21494 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   2148e:	4b07      	ldr	r3, [pc, #28]	; (214ac <sd_mmc_cmd9_spi+0x6c>)
   21490:	4798      	blx	r3
   21492:	0003      	movs	r3, r0
}
   21494:	0018      	movs	r0, r3
   21496:	46bd      	mov	sp, r7
   21498:	b001      	add	sp, #4
   2149a:	bd90      	pop	{r4, r7, pc}
   2149c:	20004164 	.word	0x20004164
   214a0:	00081109 	.word	0x00081109
   214a4:	00022bad 	.word	0x00022bad
   214a8:	00022e7d 	.word	0x00022e7d
   214ac:	00022f21 	.word	0x00022f21

000214b0 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   214b0:	b5b0      	push	{r4, r5, r7, lr}
   214b2:	b084      	sub	sp, #16
   214b4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   214b6:	4b45      	ldr	r3, [pc, #276]	; (215cc <mmc_decode_csd+0x11c>)
   214b8:	681b      	ldr	r3, [r3, #0]
   214ba:	330e      	adds	r3, #14
   214bc:	0018      	movs	r0, r3
   214be:	2304      	movs	r3, #4
   214c0:	227a      	movs	r2, #122	; 0x7a
   214c2:	2180      	movs	r1, #128	; 0x80
   214c4:	4c42      	ldr	r4, [pc, #264]	; (215d0 <mmc_decode_csd+0x120>)
   214c6:	47a0      	blx	r4
   214c8:	0003      	movs	r3, r0
   214ca:	2b02      	cmp	r3, #2
   214cc:	d011      	beq.n	214f2 <mmc_decode_csd+0x42>
   214ce:	d802      	bhi.n	214d6 <mmc_decode_csd+0x26>
   214d0:	2b01      	cmp	r3, #1
   214d2:	d009      	beq.n	214e8 <mmc_decode_csd+0x38>
   214d4:	e003      	b.n	214de <mmc_decode_csd+0x2e>
   214d6:	2b03      	cmp	r3, #3
   214d8:	d010      	beq.n	214fc <mmc_decode_csd+0x4c>
   214da:	2b04      	cmp	r3, #4
   214dc:	d013      	beq.n	21506 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   214de:	4b3b      	ldr	r3, [pc, #236]	; (215cc <mmc_decode_csd+0x11c>)
   214e0:	681b      	ldr	r3, [r3, #0]
   214e2:	2212      	movs	r2, #18
   214e4:	731a      	strb	r2, [r3, #12]
		break;
   214e6:	e013      	b.n	21510 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   214e8:	4b38      	ldr	r3, [pc, #224]	; (215cc <mmc_decode_csd+0x11c>)
   214ea:	681b      	ldr	r3, [r3, #0]
   214ec:	2214      	movs	r2, #20
   214ee:	731a      	strb	r2, [r3, #12]
		break;
   214f0:	e00e      	b.n	21510 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   214f2:	4b36      	ldr	r3, [pc, #216]	; (215cc <mmc_decode_csd+0x11c>)
   214f4:	681b      	ldr	r3, [r3, #0]
   214f6:	2222      	movs	r2, #34	; 0x22
   214f8:	731a      	strb	r2, [r3, #12]
		break;
   214fa:	e009      	b.n	21510 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   214fc:	4b33      	ldr	r3, [pc, #204]	; (215cc <mmc_decode_csd+0x11c>)
   214fe:	681b      	ldr	r3, [r3, #0]
   21500:	2230      	movs	r2, #48	; 0x30
   21502:	731a      	strb	r2, [r3, #12]
		break;
   21504:	e004      	b.n	21510 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   21506:	4b31      	ldr	r3, [pc, #196]	; (215cc <mmc_decode_csd+0x11c>)
   21508:	681b      	ldr	r3, [r3, #0]
   2150a:	2240      	movs	r2, #64	; 0x40
   2150c:	731a      	strb	r2, [r3, #12]
		break;
   2150e:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   21510:	4b2e      	ldr	r3, [pc, #184]	; (215cc <mmc_decode_csd+0x11c>)
   21512:	681b      	ldr	r3, [r3, #0]
   21514:	330e      	adds	r3, #14
   21516:	0018      	movs	r0, r3
   21518:	2308      	movs	r3, #8
   2151a:	2260      	movs	r2, #96	; 0x60
   2151c:	2180      	movs	r1, #128	; 0x80
   2151e:	4c2c      	ldr	r4, [pc, #176]	; (215d0 <mmc_decode_csd+0x120>)
   21520:	47a0      	blx	r4
   21522:	0003      	movs	r3, r0
   21524:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   21526:	68fb      	ldr	r3, [r7, #12]
   21528:	2207      	movs	r2, #7
   2152a:	401a      	ands	r2, r3
   2152c:	4b29      	ldr	r3, [pc, #164]	; (215d4 <mmc_decode_csd+0x124>)
   2152e:	0092      	lsls	r2, r2, #2
   21530:	58d3      	ldr	r3, [r2, r3]
   21532:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   21534:	68fb      	ldr	r3, [r7, #12]
   21536:	08db      	lsrs	r3, r3, #3
   21538:	220f      	movs	r2, #15
   2153a:	401a      	ands	r2, r3
   2153c:	4b26      	ldr	r3, [pc, #152]	; (215d8 <mmc_decode_csd+0x128>)
   2153e:	0092      	lsls	r2, r2, #2
   21540:	58d3      	ldr	r3, [r2, r3]
   21542:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   21544:	4b21      	ldr	r3, [pc, #132]	; (215cc <mmc_decode_csd+0x11c>)
   21546:	681b      	ldr	r3, [r3, #0]
   21548:	68ba      	ldr	r2, [r7, #8]
   2154a:	6879      	ldr	r1, [r7, #4]
   2154c:	434a      	muls	r2, r1
   2154e:	21fa      	movs	r1, #250	; 0xfa
   21550:	0089      	lsls	r1, r1, #2
   21552:	434a      	muls	r2, r1
   21554:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   21556:	4b1d      	ldr	r3, [pc, #116]	; (215cc <mmc_decode_csd+0x11c>)
   21558:	681b      	ldr	r3, [r3, #0]
   2155a:	330e      	adds	r3, #14
   2155c:	0018      	movs	r0, r3
   2155e:	230c      	movs	r3, #12
   21560:	223e      	movs	r2, #62	; 0x3e
   21562:	2180      	movs	r1, #128	; 0x80
   21564:	4c1a      	ldr	r4, [pc, #104]	; (215d0 <mmc_decode_csd+0x120>)
   21566:	47a0      	blx	r4
   21568:	0002      	movs	r2, r0
   2156a:	4b1c      	ldr	r3, [pc, #112]	; (215dc <mmc_decode_csd+0x12c>)
   2156c:	429a      	cmp	r2, r3
   2156e:	d028      	beq.n	215c2 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   21570:	4b16      	ldr	r3, [pc, #88]	; (215cc <mmc_decode_csd+0x11c>)
   21572:	681b      	ldr	r3, [r3, #0]
   21574:	330e      	adds	r3, #14
   21576:	0018      	movs	r0, r3
   21578:	230c      	movs	r3, #12
   2157a:	223e      	movs	r2, #62	; 0x3e
   2157c:	2180      	movs	r1, #128	; 0x80
   2157e:	4c14      	ldr	r4, [pc, #80]	; (215d0 <mmc_decode_csd+0x120>)
   21580:	47a0      	blx	r4
   21582:	0003      	movs	r3, r0
   21584:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   21586:	4b11      	ldr	r3, [pc, #68]	; (215cc <mmc_decode_csd+0x11c>)
   21588:	681b      	ldr	r3, [r3, #0]
   2158a:	330e      	adds	r3, #14
   2158c:	0018      	movs	r0, r3
   2158e:	2303      	movs	r3, #3
   21590:	222f      	movs	r2, #47	; 0x2f
   21592:	2180      	movs	r1, #128	; 0x80
   21594:	4d0e      	ldr	r5, [pc, #56]	; (215d0 <mmc_decode_csd+0x120>)
   21596:	47a8      	blx	r5
   21598:	0003      	movs	r3, r0
   2159a:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   2159c:	409c      	lsls	r4, r3
   2159e:	0023      	movs	r3, r4
   215a0:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   215a2:	4b0a      	ldr	r3, [pc, #40]	; (215cc <mmc_decode_csd+0x11c>)
   215a4:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   215a6:	4b09      	ldr	r3, [pc, #36]	; (215cc <mmc_decode_csd+0x11c>)
   215a8:	681b      	ldr	r3, [r3, #0]
   215aa:	330e      	adds	r3, #14
   215ac:	0018      	movs	r0, r3
   215ae:	2304      	movs	r3, #4
   215b0:	2250      	movs	r2, #80	; 0x50
   215b2:	2180      	movs	r1, #128	; 0x80
   215b4:	4d06      	ldr	r5, [pc, #24]	; (215d0 <mmc_decode_csd+0x120>)
   215b6:	47a8      	blx	r5
   215b8:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   215ba:	683b      	ldr	r3, [r7, #0]
   215bc:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   215be:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   215c0:	6063      	str	r3, [r4, #4]
	}
}
   215c2:	46c0      	nop			; (mov r8, r8)
   215c4:	46bd      	mov	sp, r7
   215c6:	b004      	add	sp, #16
   215c8:	bdb0      	pop	{r4, r5, r7, pc}
   215ca:	46c0      	nop			; (mov r8, r8)
   215cc:	20004164 	.word	0x20004164
   215d0:	00020fad 	.word	0x00020fad
   215d4:	0003c87c 	.word	0x0003c87c
   215d8:	0003c8d8 	.word	0x0003c8d8
   215dc:	00000fff 	.word	0x00000fff

000215e0 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   215e0:	b5b0      	push	{r4, r5, r7, lr}
   215e2:	b084      	sub	sp, #16
   215e4:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   215e6:	4b35      	ldr	r3, [pc, #212]	; (216bc <sd_decode_csd+0xdc>)
   215e8:	681b      	ldr	r3, [r3, #0]
   215ea:	330e      	adds	r3, #14
   215ec:	0018      	movs	r0, r3
   215ee:	2308      	movs	r3, #8
   215f0:	2260      	movs	r2, #96	; 0x60
   215f2:	2180      	movs	r1, #128	; 0x80
   215f4:	4c32      	ldr	r4, [pc, #200]	; (216c0 <sd_decode_csd+0xe0>)
   215f6:	47a0      	blx	r4
   215f8:	0003      	movs	r3, r0
   215fa:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   215fc:	68fb      	ldr	r3, [r7, #12]
   215fe:	2207      	movs	r2, #7
   21600:	401a      	ands	r2, r3
   21602:	4b30      	ldr	r3, [pc, #192]	; (216c4 <sd_decode_csd+0xe4>)
   21604:	0092      	lsls	r2, r2, #2
   21606:	58d3      	ldr	r3, [r2, r3]
   21608:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   2160a:	68fb      	ldr	r3, [r7, #12]
   2160c:	08db      	lsrs	r3, r3, #3
   2160e:	220f      	movs	r2, #15
   21610:	401a      	ands	r2, r3
   21612:	4b2d      	ldr	r3, [pc, #180]	; (216c8 <sd_decode_csd+0xe8>)
   21614:	0092      	lsls	r2, r2, #2
   21616:	58d3      	ldr	r3, [r2, r3]
   21618:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   2161a:	4b28      	ldr	r3, [pc, #160]	; (216bc <sd_decode_csd+0xdc>)
   2161c:	681b      	ldr	r3, [r3, #0]
   2161e:	68ba      	ldr	r2, [r7, #8]
   21620:	6879      	ldr	r1, [r7, #4]
   21622:	434a      	muls	r2, r1
   21624:	21fa      	movs	r1, #250	; 0xfa
   21626:	0089      	lsls	r1, r1, #2
   21628:	434a      	muls	r2, r1
   2162a:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   2162c:	4b23      	ldr	r3, [pc, #140]	; (216bc <sd_decode_csd+0xdc>)
   2162e:	681b      	ldr	r3, [r3, #0]
   21630:	330e      	adds	r3, #14
   21632:	0018      	movs	r0, r3
   21634:	2302      	movs	r3, #2
   21636:	227e      	movs	r2, #126	; 0x7e
   21638:	2180      	movs	r1, #128	; 0x80
   2163a:	4c21      	ldr	r4, [pc, #132]	; (216c0 <sd_decode_csd+0xe0>)
   2163c:	47a0      	blx	r4
   2163e:	1e03      	subs	r3, r0, #0
   21640:	d00f      	beq.n	21662 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   21642:	4b1e      	ldr	r3, [pc, #120]	; (216bc <sd_decode_csd+0xdc>)
   21644:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   21646:	4b1d      	ldr	r3, [pc, #116]	; (216bc <sd_decode_csd+0xdc>)
   21648:	681b      	ldr	r3, [r3, #0]
   2164a:	330e      	adds	r3, #14
   2164c:	0018      	movs	r0, r3
   2164e:	2316      	movs	r3, #22
   21650:	2230      	movs	r2, #48	; 0x30
   21652:	2180      	movs	r1, #128	; 0x80
   21654:	4d1a      	ldr	r5, [pc, #104]	; (216c0 <sd_decode_csd+0xe0>)
   21656:	47a8      	blx	r5
   21658:	0003      	movs	r3, r0
				* 512;
   2165a:	3301      	adds	r3, #1
   2165c:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   2165e:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   21660:	e028      	b.n	216b4 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   21662:	4b16      	ldr	r3, [pc, #88]	; (216bc <sd_decode_csd+0xdc>)
   21664:	681b      	ldr	r3, [r3, #0]
   21666:	330e      	adds	r3, #14
   21668:	0018      	movs	r0, r3
   2166a:	230c      	movs	r3, #12
   2166c:	223e      	movs	r2, #62	; 0x3e
   2166e:	2180      	movs	r1, #128	; 0x80
   21670:	4c13      	ldr	r4, [pc, #76]	; (216c0 <sd_decode_csd+0xe0>)
   21672:	47a0      	blx	r4
   21674:	0003      	movs	r3, r0
   21676:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   21678:	4b10      	ldr	r3, [pc, #64]	; (216bc <sd_decode_csd+0xdc>)
   2167a:	681b      	ldr	r3, [r3, #0]
   2167c:	330e      	adds	r3, #14
   2167e:	0018      	movs	r0, r3
   21680:	2303      	movs	r3, #3
   21682:	222f      	movs	r2, #47	; 0x2f
   21684:	2180      	movs	r1, #128	; 0x80
   21686:	4d0e      	ldr	r5, [pc, #56]	; (216c0 <sd_decode_csd+0xe0>)
   21688:	47a8      	blx	r5
   2168a:	0003      	movs	r3, r0
   2168c:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   2168e:	409c      	lsls	r4, r3
   21690:	0023      	movs	r3, r4
   21692:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   21694:	4b09      	ldr	r3, [pc, #36]	; (216bc <sd_decode_csd+0xdc>)
   21696:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   21698:	4b08      	ldr	r3, [pc, #32]	; (216bc <sd_decode_csd+0xdc>)
   2169a:	681b      	ldr	r3, [r3, #0]
   2169c:	330e      	adds	r3, #14
   2169e:	0018      	movs	r0, r3
   216a0:	2304      	movs	r3, #4
   216a2:	2250      	movs	r2, #80	; 0x50
   216a4:	2180      	movs	r1, #128	; 0x80
   216a6:	4d06      	ldr	r5, [pc, #24]	; (216c0 <sd_decode_csd+0xe0>)
   216a8:	47a8      	blx	r5
   216aa:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   216ac:	683b      	ldr	r3, [r7, #0]
   216ae:	4093      	lsls	r3, r2
				/ 1024;
   216b0:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   216b2:	6063      	str	r3, [r4, #4]
}
   216b4:	46c0      	nop			; (mov r8, r8)
   216b6:	46bd      	mov	sp, r7
   216b8:	b004      	add	sp, #16
   216ba:	bdb0      	pop	{r4, r5, r7, pc}
   216bc:	20004164 	.word	0x20004164
   216c0:	00020fad 	.word	0x00020fad
   216c4:	0003c87c 	.word	0x0003c87c
   216c8:	0003c898 	.word	0x0003c898

000216cc <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   216cc:	b580      	push	{r7, lr}
   216ce:	b082      	sub	sp, #8
   216d0:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   216d2:	4b11      	ldr	r3, [pc, #68]	; (21718 <sd_mmc_cmd13+0x4c>)
   216d4:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   216d6:	4b11      	ldr	r3, [pc, #68]	; (2171c <sd_mmc_cmd13+0x50>)
   216d8:	2100      	movs	r1, #0
   216da:	0018      	movs	r0, r3
   216dc:	4b10      	ldr	r3, [pc, #64]	; (21720 <sd_mmc_cmd13+0x54>)
   216de:	4798      	blx	r3
   216e0:	0003      	movs	r3, r0
   216e2:	001a      	movs	r2, r3
   216e4:	2301      	movs	r3, #1
   216e6:	4053      	eors	r3, r2
   216e8:	b2db      	uxtb	r3, r3
   216ea:	2b00      	cmp	r3, #0
   216ec:	d001      	beq.n	216f2 <sd_mmc_cmd13+0x26>
				return false;
   216ee:	2300      	movs	r3, #0
   216f0:	e00e      	b.n	21710 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   216f2:	4b0c      	ldr	r3, [pc, #48]	; (21724 <sd_mmc_cmd13+0x58>)
   216f4:	4798      	blx	r3
   216f6:	0002      	movs	r2, r0
   216f8:	23ff      	movs	r3, #255	; 0xff
   216fa:	4013      	ands	r3, r2
   216fc:	d006      	beq.n	2170c <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   216fe:	687b      	ldr	r3, [r7, #4]
   21700:	1e5a      	subs	r2, r3, #1
   21702:	607a      	str	r2, [r7, #4]
   21704:	2b00      	cmp	r3, #0
   21706:	d1e6      	bne.n	216d6 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   21708:	2300      	movs	r3, #0
   2170a:	e001      	b.n	21710 <sd_mmc_cmd13+0x44>
				break;
   2170c:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   2170e:	2301      	movs	r3, #1
}
   21710:	0018      	movs	r0, r3
   21712:	46bd      	mov	sp, r7
   21714:	b002      	add	sp, #8
   21716:	bd80      	pop	{r7, pc}
   21718:	00030d40 	.word	0x00030d40
   2171c:	00001b0d 	.word	0x00001b0d
   21720:	00022b85 	.word	0x00022b85
   21724:	00022dc5 	.word	0x00022dc5

00021728 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   21728:	b590      	push	{r4, r7, lr}
   2172a:	b085      	sub	sp, #20
   2172c:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   2172e:	4b38      	ldr	r3, [pc, #224]	; (21810 <sd_acmd51+0xe8>)
   21730:	681b      	ldr	r3, [r3, #0]
   21732:	891b      	ldrh	r3, [r3, #8]
   21734:	041b      	lsls	r3, r3, #16
   21736:	4a37      	ldr	r2, [pc, #220]	; (21814 <sd_acmd51+0xec>)
   21738:	0019      	movs	r1, r3
   2173a:	0010      	movs	r0, r2
   2173c:	4b36      	ldr	r3, [pc, #216]	; (21818 <sd_acmd51+0xf0>)
   2173e:	4798      	blx	r3
   21740:	0003      	movs	r3, r0
   21742:	001a      	movs	r2, r3
   21744:	2301      	movs	r3, #1
   21746:	4053      	eors	r3, r2
   21748:	b2db      	uxtb	r3, r3
   2174a:	2b00      	cmp	r3, #0
   2174c:	d001      	beq.n	21752 <sd_acmd51+0x2a>
		return false;
   2174e:	2300      	movs	r3, #0
   21750:	e059      	b.n	21806 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   21752:	4832      	ldr	r0, [pc, #200]	; (2181c <sd_acmd51+0xf4>)
   21754:	2301      	movs	r3, #1
   21756:	9300      	str	r3, [sp, #0]
   21758:	2301      	movs	r3, #1
   2175a:	2208      	movs	r2, #8
   2175c:	2100      	movs	r1, #0
   2175e:	4c30      	ldr	r4, [pc, #192]	; (21820 <sd_acmd51+0xf8>)
   21760:	47a0      	blx	r4
   21762:	0003      	movs	r3, r0
   21764:	001a      	movs	r2, r3
   21766:	2301      	movs	r3, #1
   21768:	4053      	eors	r3, r2
   2176a:	b2db      	uxtb	r3, r3
   2176c:	2b00      	cmp	r3, #0
   2176e:	d001      	beq.n	21774 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   21770:	2300      	movs	r3, #0
   21772:	e048      	b.n	21806 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   21774:	003b      	movs	r3, r7
   21776:	2101      	movs	r1, #1
   21778:	0018      	movs	r0, r3
   2177a:	4b2a      	ldr	r3, [pc, #168]	; (21824 <sd_acmd51+0xfc>)
   2177c:	4798      	blx	r3
   2177e:	0003      	movs	r3, r0
   21780:	001a      	movs	r2, r3
   21782:	2301      	movs	r3, #1
   21784:	4053      	eors	r3, r2
   21786:	b2db      	uxtb	r3, r3
   21788:	2b00      	cmp	r3, #0
   2178a:	d001      	beq.n	21790 <sd_acmd51+0x68>
		return false;
   2178c:	2300      	movs	r3, #0
   2178e:	e03a      	b.n	21806 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   21790:	4b25      	ldr	r3, [pc, #148]	; (21828 <sd_acmd51+0x100>)
   21792:	4798      	blx	r3
   21794:	0003      	movs	r3, r0
   21796:	001a      	movs	r2, r3
   21798:	2301      	movs	r3, #1
   2179a:	4053      	eors	r3, r2
   2179c:	b2db      	uxtb	r3, r3
   2179e:	2b00      	cmp	r3, #0
   217a0:	d001      	beq.n	217a6 <sd_acmd51+0x7e>
		return false;
   217a2:	2300      	movs	r3, #0
   217a4:	e02f      	b.n	21806 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   217a6:	0038      	movs	r0, r7
   217a8:	2304      	movs	r3, #4
   217aa:	2238      	movs	r2, #56	; 0x38
   217ac:	2140      	movs	r1, #64	; 0x40
   217ae:	4c1f      	ldr	r4, [pc, #124]	; (2182c <sd_acmd51+0x104>)
   217b0:	47a0      	blx	r4
   217b2:	0003      	movs	r3, r0
   217b4:	2b01      	cmp	r3, #1
   217b6:	d008      	beq.n	217ca <sd_acmd51+0xa2>
   217b8:	d302      	bcc.n	217c0 <sd_acmd51+0x98>
   217ba:	2b02      	cmp	r3, #2
   217bc:	d00a      	beq.n	217d4 <sd_acmd51+0xac>
   217be:	e01c      	b.n	217fa <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   217c0:	4b13      	ldr	r3, [pc, #76]	; (21810 <sd_acmd51+0xe8>)
   217c2:	681b      	ldr	r3, [r3, #0]
   217c4:	2210      	movs	r2, #16
   217c6:	731a      	strb	r2, [r3, #12]
		break;
   217c8:	e01c      	b.n	21804 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   217ca:	4b11      	ldr	r3, [pc, #68]	; (21810 <sd_acmd51+0xe8>)
   217cc:	681b      	ldr	r3, [r3, #0]
   217ce:	221a      	movs	r2, #26
   217d0:	731a      	strb	r2, [r3, #12]
		break;
   217d2:	e017      	b.n	21804 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   217d4:	0038      	movs	r0, r7
   217d6:	2301      	movs	r3, #1
   217d8:	222f      	movs	r2, #47	; 0x2f
   217da:	2140      	movs	r1, #64	; 0x40
   217dc:	4c13      	ldr	r4, [pc, #76]	; (2182c <sd_acmd51+0x104>)
   217de:	47a0      	blx	r4
   217e0:	0003      	movs	r3, r0
   217e2:	2b01      	cmp	r3, #1
   217e4:	d104      	bne.n	217f0 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   217e6:	4b0a      	ldr	r3, [pc, #40]	; (21810 <sd_acmd51+0xe8>)
   217e8:	681b      	ldr	r3, [r3, #0]
   217ea:	2230      	movs	r2, #48	; 0x30
   217ec:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   217ee:	e009      	b.n	21804 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   217f0:	4b07      	ldr	r3, [pc, #28]	; (21810 <sd_acmd51+0xe8>)
   217f2:	681b      	ldr	r3, [r3, #0]
   217f4:	2220      	movs	r2, #32
   217f6:	731a      	strb	r2, [r3, #12]
		break;
   217f8:	e004      	b.n	21804 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   217fa:	4b05      	ldr	r3, [pc, #20]	; (21810 <sd_acmd51+0xe8>)
   217fc:	681b      	ldr	r3, [r3, #0]
   217fe:	2210      	movs	r2, #16
   21800:	731a      	strb	r2, [r3, #12]
		break;
   21802:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   21804:	2301      	movs	r3, #1
}
   21806:	0018      	movs	r0, r3
   21808:	46bd      	mov	sp, r7
   2180a:	b003      	add	sp, #12
   2180c:	bd90      	pop	{r4, r7, pc}
   2180e:	46c0      	nop			; (mov r8, r8)
   21810:	20004164 	.word	0x20004164
   21814:	00001137 	.word	0x00001137
   21818:	00022b85 	.word	0x00022b85
   2181c:	00081133 	.word	0x00081133
   21820:	00022bad 	.word	0x00022bad
   21824:	00022e7d 	.word	0x00022e7d
   21828:	00022f21 	.word	0x00022f21
   2182c:	00020fad 	.word	0x00020fad

00021830 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   21830:	b580      	push	{r7, lr}
   21832:	b082      	sub	sp, #8
   21834:	af00      	add	r7, sp, #0
   21836:	0002      	movs	r2, r0
   21838:	1dfb      	adds	r3, r7, #7
   2183a:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   2183c:	1dfb      	adds	r3, r7, #7
   2183e:	781b      	ldrb	r3, [r3, #0]
   21840:	2b00      	cmp	r3, #0
   21842:	d001      	beq.n	21848 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   21844:	2304      	movs	r3, #4
   21846:	e047      	b.n	218d8 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   21848:	1dfb      	adds	r3, r7, #7
   2184a:	781b      	ldrb	r3, [r3, #0]
   2184c:	4a24      	ldr	r2, [pc, #144]	; (218e0 <sd_mmc_select_slot+0xb0>)
   2184e:	015b      	lsls	r3, r3, #5
   21850:	18d3      	adds	r3, r2, r3
   21852:	330a      	adds	r3, #10
   21854:	781b      	ldrb	r3, [r3, #0]
   21856:	2b04      	cmp	r3, #4
   21858:	d008      	beq.n	2186c <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   2185a:	1dfb      	adds	r3, r7, #7
   2185c:	781b      	ldrb	r3, [r3, #0]
   2185e:	4a20      	ldr	r2, [pc, #128]	; (218e0 <sd_mmc_select_slot+0xb0>)
   21860:	015b      	lsls	r3, r3, #5
   21862:	18d3      	adds	r3, r2, r3
   21864:	330a      	adds	r3, #10
   21866:	781b      	ldrb	r3, [r3, #0]
   21868:	2b03      	cmp	r3, #3
   2186a:	d11d      	bne.n	218a8 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   2186c:	1dfb      	adds	r3, r7, #7
   2186e:	781b      	ldrb	r3, [r3, #0]
   21870:	4a1b      	ldr	r2, [pc, #108]	; (218e0 <sd_mmc_select_slot+0xb0>)
   21872:	015b      	lsls	r3, r3, #5
   21874:	18d3      	adds	r3, r2, r3
   21876:	330a      	adds	r3, #10
   21878:	2202      	movs	r2, #2
   2187a:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   2187c:	1dfb      	adds	r3, r7, #7
   2187e:	781a      	ldrb	r2, [r3, #0]
   21880:	4b17      	ldr	r3, [pc, #92]	; (218e0 <sd_mmc_select_slot+0xb0>)
   21882:	0152      	lsls	r2, r2, #5
   21884:	4917      	ldr	r1, [pc, #92]	; (218e4 <sd_mmc_select_slot+0xb4>)
   21886:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   21888:	1dfb      	adds	r3, r7, #7
   2188a:	781b      	ldrb	r3, [r3, #0]
   2188c:	4a14      	ldr	r2, [pc, #80]	; (218e0 <sd_mmc_select_slot+0xb0>)
   2188e:	015b      	lsls	r3, r3, #5
   21890:	18d3      	adds	r3, r2, r3
   21892:	330d      	adds	r3, #13
   21894:	2201      	movs	r2, #1
   21896:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   21898:	1dfb      	adds	r3, r7, #7
   2189a:	781b      	ldrb	r3, [r3, #0]
   2189c:	4a10      	ldr	r2, [pc, #64]	; (218e0 <sd_mmc_select_slot+0xb0>)
   2189e:	015b      	lsls	r3, r3, #5
   218a0:	18d3      	adds	r3, r2, r3
   218a2:	331e      	adds	r3, #30
   218a4:	2200      	movs	r2, #0
   218a6:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   218a8:	4b0f      	ldr	r3, [pc, #60]	; (218e8 <sd_mmc_select_slot+0xb8>)
   218aa:	1dfa      	adds	r2, r7, #7
   218ac:	7812      	ldrb	r2, [r2, #0]
   218ae:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   218b0:	1dfb      	adds	r3, r7, #7
   218b2:	781b      	ldrb	r3, [r3, #0]
   218b4:	015a      	lsls	r2, r3, #5
   218b6:	4b0a      	ldr	r3, [pc, #40]	; (218e0 <sd_mmc_select_slot+0xb0>)
   218b8:	18d2      	adds	r2, r2, r3
   218ba:	4b0c      	ldr	r3, [pc, #48]	; (218ec <sd_mmc_select_slot+0xbc>)
   218bc:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   218be:	4b0c      	ldr	r3, [pc, #48]	; (218f0 <sd_mmc_select_slot+0xc0>)
   218c0:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   218c2:	1dfb      	adds	r3, r7, #7
   218c4:	781b      	ldrb	r3, [r3, #0]
   218c6:	4a06      	ldr	r2, [pc, #24]	; (218e0 <sd_mmc_select_slot+0xb0>)
   218c8:	015b      	lsls	r3, r3, #5
   218ca:	18d3      	adds	r3, r2, r3
   218cc:	330a      	adds	r3, #10
   218ce:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   218d0:	3b02      	subs	r3, #2
   218d2:	425a      	negs	r2, r3
   218d4:	4153      	adcs	r3, r2
   218d6:	b2db      	uxtb	r3, r3
}
   218d8:	0018      	movs	r0, r3
   218da:	46bd      	mov	sp, r7
   218dc:	b002      	add	sp, #8
   218de:	bd80      	pop	{r7, pc}
   218e0:	20004140 	.word	0x20004140
   218e4:	00061a80 	.word	0x00061a80
   218e8:	20004160 	.word	0x20004160
   218ec:	20004164 	.word	0x20004164
   218f0:	000218f5 	.word	0x000218f5

000218f4 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   218f4:	b5b0      	push	{r4, r5, r7, lr}
   218f6:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   218f8:	4b09      	ldr	r3, [pc, #36]	; (21920 <sd_mmc_configure_slot+0x2c>)
   218fa:	7818      	ldrb	r0, [r3, #0]
   218fc:	4b09      	ldr	r3, [pc, #36]	; (21924 <sd_mmc_configure_slot+0x30>)
   218fe:	681b      	ldr	r3, [r3, #0]
   21900:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   21902:	4b08      	ldr	r3, [pc, #32]	; (21924 <sd_mmc_configure_slot+0x30>)
   21904:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   21906:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   21908:	4b06      	ldr	r3, [pc, #24]	; (21924 <sd_mmc_configure_slot+0x30>)
   2190a:	681b      	ldr	r3, [r3, #0]
   2190c:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   2190e:	1e5c      	subs	r4, r3, #1
   21910:	41a3      	sbcs	r3, r4
   21912:	b2db      	uxtb	r3, r3
   21914:	4c04      	ldr	r4, [pc, #16]	; (21928 <sd_mmc_configure_slot+0x34>)
   21916:	47a0      	blx	r4
}
   21918:	46c0      	nop			; (mov r8, r8)
   2191a:	46bd      	mov	sp, r7
   2191c:	bdb0      	pop	{r4, r5, r7, pc}
   2191e:	46c0      	nop			; (mov r8, r8)
   21920:	20004160 	.word	0x20004160
   21924:	20004164 	.word	0x20004164
   21928:	00022a6d 	.word	0x00022a6d

0002192c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   2192c:	b580      	push	{r7, lr}
   2192e:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   21930:	4b05      	ldr	r3, [pc, #20]	; (21948 <sd_mmc_deselect_slot+0x1c>)
   21932:	781b      	ldrb	r3, [r3, #0]
   21934:	2b00      	cmp	r3, #0
   21936:	d104      	bne.n	21942 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   21938:	4b03      	ldr	r3, [pc, #12]	; (21948 <sd_mmc_deselect_slot+0x1c>)
   2193a:	781b      	ldrb	r3, [r3, #0]
   2193c:	0018      	movs	r0, r3
   2193e:	4b03      	ldr	r3, [pc, #12]	; (2194c <sd_mmc_deselect_slot+0x20>)
   21940:	4798      	blx	r3
	}
}
   21942:	46c0      	nop			; (mov r8, r8)
   21944:	46bd      	mov	sp, r7
   21946:	bd80      	pop	{r7, pc}
   21948:	20004160 	.word	0x20004160
   2194c:	00022af5 	.word	0x00022af5

00021950 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   21950:	b580      	push	{r7, lr}
   21952:	b082      	sub	sp, #8
   21954:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   21956:	1dfb      	adds	r3, r7, #7
   21958:	2200      	movs	r2, #0
   2195a:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   2195c:	4b59      	ldr	r3, [pc, #356]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   2195e:	681b      	ldr	r3, [r3, #0]
   21960:	2201      	movs	r2, #1
   21962:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   21964:	4b57      	ldr	r3, [pc, #348]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   21966:	681b      	ldr	r3, [r3, #0]
   21968:	2200      	movs	r2, #0
   2196a:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   2196c:	4b55      	ldr	r3, [pc, #340]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   2196e:	681b      	ldr	r3, [r3, #0]
   21970:	2200      	movs	r2, #0
   21972:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   21974:	4b54      	ldr	r3, [pc, #336]	; (21ac8 <sd_mmc_spi_card_init+0x178>)
   21976:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   21978:	2388      	movs	r3, #136	; 0x88
   2197a:	015b      	lsls	r3, r3, #5
   2197c:	2100      	movs	r1, #0
   2197e:	0018      	movs	r0, r3
   21980:	4b52      	ldr	r3, [pc, #328]	; (21acc <sd_mmc_spi_card_init+0x17c>)
   21982:	4798      	blx	r3
   21984:	0003      	movs	r3, r0
   21986:	001a      	movs	r2, r3
   21988:	2301      	movs	r3, #1
   2198a:	4053      	eors	r3, r2
   2198c:	b2db      	uxtb	r3, r3
   2198e:	2b00      	cmp	r3, #0
   21990:	d001      	beq.n	21996 <sd_mmc_spi_card_init+0x46>
		return false;
   21992:	2300      	movs	r3, #0
   21994:	e092      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   21996:	1dfb      	adds	r3, r7, #7
   21998:	0018      	movs	r0, r3
   2199a:	4b4d      	ldr	r3, [pc, #308]	; (21ad0 <sd_mmc_spi_card_init+0x180>)
   2199c:	4798      	blx	r3
   2199e:	0003      	movs	r3, r0
   219a0:	001a      	movs	r2, r3
   219a2:	2301      	movs	r3, #1
   219a4:	4053      	eors	r3, r2
   219a6:	b2db      	uxtb	r3, r3
   219a8:	2b00      	cmp	r3, #0
   219aa:	d001      	beq.n	219b0 <sd_mmc_spi_card_init+0x60>
		return false;
   219ac:	2300      	movs	r3, #0
   219ae:	e085      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   219b0:	4b48      	ldr	r3, [pc, #288]	; (21ad4 <sd_mmc_spi_card_init+0x184>)
   219b2:	4798      	blx	r3
   219b4:	0003      	movs	r3, r0
   219b6:	001a      	movs	r2, r3
   219b8:	2301      	movs	r3, #1
   219ba:	4053      	eors	r3, r2
   219bc:	b2db      	uxtb	r3, r3
   219be:	2b00      	cmp	r3, #0
   219c0:	d001      	beq.n	219c6 <sd_mmc_spi_card_init+0x76>
		return false;
   219c2:	2300      	movs	r3, #0
   219c4:	e07a      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   219c6:	4b3f      	ldr	r3, [pc, #252]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   219c8:	681b      	ldr	r3, [r3, #0]
   219ca:	7adb      	ldrb	r3, [r3, #11]
   219cc:	001a      	movs	r2, r3
   219ce:	2301      	movs	r3, #1
   219d0:	4013      	ands	r3, r2
   219d2:	d021      	beq.n	21a18 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   219d4:	1dfb      	adds	r3, r7, #7
   219d6:	781b      	ldrb	r3, [r3, #0]
   219d8:	0018      	movs	r0, r3
   219da:	4b3f      	ldr	r3, [pc, #252]	; (21ad8 <sd_mmc_spi_card_init+0x188>)
   219dc:	4798      	blx	r3
   219de:	0003      	movs	r3, r0
   219e0:	001a      	movs	r2, r3
   219e2:	2301      	movs	r3, #1
   219e4:	4053      	eors	r3, r2
   219e6:	b2db      	uxtb	r3, r3
   219e8:	2b00      	cmp	r3, #0
   219ea:	d007      	beq.n	219fc <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   219ec:	4b35      	ldr	r3, [pc, #212]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   219ee:	681b      	ldr	r3, [r3, #0]
   219f0:	2202      	movs	r2, #2
   219f2:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   219f4:	4b39      	ldr	r3, [pc, #228]	; (21adc <sd_mmc_spi_card_init+0x18c>)
   219f6:	4798      	blx	r3
   219f8:	0003      	movs	r3, r0
   219fa:	e05f      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   219fc:	4b38      	ldr	r3, [pc, #224]	; (21ae0 <sd_mmc_spi_card_init+0x190>)
   219fe:	2100      	movs	r1, #0
   21a00:	0018      	movs	r0, r3
   21a02:	4b32      	ldr	r3, [pc, #200]	; (21acc <sd_mmc_spi_card_init+0x17c>)
   21a04:	4798      	blx	r3
   21a06:	0003      	movs	r3, r0
   21a08:	001a      	movs	r2, r3
   21a0a:	2301      	movs	r3, #1
   21a0c:	4053      	eors	r3, r2
   21a0e:	b2db      	uxtb	r3, r3
   21a10:	2b00      	cmp	r3, #0
   21a12:	d001      	beq.n	21a18 <sd_mmc_spi_card_init+0xc8>
			return false;
   21a14:	2300      	movs	r3, #0
   21a16:	e051      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   21a18:	4b2a      	ldr	r3, [pc, #168]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   21a1a:	681b      	ldr	r3, [r3, #0]
   21a1c:	7adb      	ldrb	r3, [r3, #11]
   21a1e:	001a      	movs	r2, r3
   21a20:	2301      	movs	r3, #1
   21a22:	4013      	ands	r3, r2
   21a24:	d017      	beq.n	21a56 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   21a26:	4b2f      	ldr	r3, [pc, #188]	; (21ae4 <sd_mmc_spi_card_init+0x194>)
   21a28:	4798      	blx	r3
   21a2a:	0003      	movs	r3, r0
   21a2c:	001a      	movs	r2, r3
   21a2e:	2301      	movs	r3, #1
   21a30:	4053      	eors	r3, r2
   21a32:	b2db      	uxtb	r3, r3
   21a34:	2b00      	cmp	r3, #0
   21a36:	d001      	beq.n	21a3c <sd_mmc_spi_card_init+0xec>
			return false;
   21a38:	2300      	movs	r3, #0
   21a3a:	e03f      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   21a3c:	4b2a      	ldr	r3, [pc, #168]	; (21ae8 <sd_mmc_spi_card_init+0x198>)
   21a3e:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   21a40:	4b2a      	ldr	r3, [pc, #168]	; (21aec <sd_mmc_spi_card_init+0x19c>)
   21a42:	4798      	blx	r3
   21a44:	0003      	movs	r3, r0
   21a46:	001a      	movs	r2, r3
   21a48:	2301      	movs	r3, #1
   21a4a:	4053      	eors	r3, r2
   21a4c:	b2db      	uxtb	r3, r3
   21a4e:	2b00      	cmp	r3, #0
   21a50:	d001      	beq.n	21a56 <sd_mmc_spi_card_init+0x106>
			return false;
   21a52:	2300      	movs	r3, #0
   21a54:	e032      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   21a56:	4b1b      	ldr	r3, [pc, #108]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   21a58:	681b      	ldr	r3, [r3, #0]
   21a5a:	7adb      	ldrb	r3, [r3, #11]
   21a5c:	001a      	movs	r2, r3
   21a5e:	2301      	movs	r3, #1
   21a60:	4013      	ands	r3, r2
   21a62:	d016      	beq.n	21a92 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   21a64:	4b17      	ldr	r3, [pc, #92]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   21a66:	681b      	ldr	r3, [r3, #0]
   21a68:	7adb      	ldrb	r3, [r3, #11]
   21a6a:	001a      	movs	r2, r3
   21a6c:	2308      	movs	r3, #8
   21a6e:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   21a70:	d10f      	bne.n	21a92 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   21a72:	2380      	movs	r3, #128	; 0x80
   21a74:	009b      	lsls	r3, r3, #2
   21a76:	4a1e      	ldr	r2, [pc, #120]	; (21af0 <sd_mmc_spi_card_init+0x1a0>)
   21a78:	0019      	movs	r1, r3
   21a7a:	0010      	movs	r0, r2
   21a7c:	4b13      	ldr	r3, [pc, #76]	; (21acc <sd_mmc_spi_card_init+0x17c>)
   21a7e:	4798      	blx	r3
   21a80:	0003      	movs	r3, r0
   21a82:	001a      	movs	r2, r3
   21a84:	2301      	movs	r3, #1
   21a86:	4053      	eors	r3, r2
   21a88:	b2db      	uxtb	r3, r3
   21a8a:	2b00      	cmp	r3, #0
   21a8c:	d001      	beq.n	21a92 <sd_mmc_spi_card_init+0x142>
			return false;
   21a8e:	2300      	movs	r3, #0
   21a90:	e014      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   21a92:	4b0c      	ldr	r3, [pc, #48]	; (21ac4 <sd_mmc_spi_card_init+0x174>)
   21a94:	681b      	ldr	r3, [r3, #0]
   21a96:	7adb      	ldrb	r3, [r3, #11]
   21a98:	001a      	movs	r2, r3
   21a9a:	2301      	movs	r3, #1
   21a9c:	4013      	ands	r3, r2
   21a9e:	d00a      	beq.n	21ab6 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   21aa0:	4b14      	ldr	r3, [pc, #80]	; (21af4 <sd_mmc_spi_card_init+0x1a4>)
   21aa2:	4798      	blx	r3
   21aa4:	0003      	movs	r3, r0
   21aa6:	001a      	movs	r2, r3
   21aa8:	2301      	movs	r3, #1
   21aaa:	4053      	eors	r3, r2
   21aac:	b2db      	uxtb	r3, r3
   21aae:	2b00      	cmp	r3, #0
   21ab0:	d001      	beq.n	21ab6 <sd_mmc_spi_card_init+0x166>
			return false;
   21ab2:	2300      	movs	r3, #0
   21ab4:	e002      	b.n	21abc <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   21ab6:	4b10      	ldr	r3, [pc, #64]	; (21af8 <sd_mmc_spi_card_init+0x1a8>)
   21ab8:	4798      	blx	r3
	return true;
   21aba:	2301      	movs	r3, #1
}
   21abc:	0018      	movs	r0, r3
   21abe:	46bd      	mov	sp, r7
   21ac0:	b002      	add	sp, #8
   21ac2:	bd80      	pop	{r7, pc}
   21ac4:	20004164 	.word	0x20004164
   21ac8:	00022b39 	.word	0x00022b39
   21acc:	00022b85 	.word	0x00022b85
   21ad0:	000212a5 	.word	0x000212a5
   21ad4:	00021299 	.word	0x00021299
   21ad8:	000211b5 	.word	0x000211b5
   21adc:	00021afd 	.word	0x00021afd
   21ae0:	0000113b 	.word	0x0000113b
   21ae4:	00021441 	.word	0x00021441
   21ae8:	000215e1 	.word	0x000215e1
   21aec:	00021729 	.word	0x00021729
   21af0:	00001110 	.word	0x00001110
   21af4:	000216cd 	.word	0x000216cd
   21af8:	000218f5 	.word	0x000218f5

00021afc <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   21afc:	b580      	push	{r7, lr}
   21afe:	b082      	sub	sp, #8
   21b00:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   21b02:	2388      	movs	r3, #136	; 0x88
   21b04:	015b      	lsls	r3, r3, #5
   21b06:	2100      	movs	r1, #0
   21b08:	0018      	movs	r0, r3
   21b0a:	4b32      	ldr	r3, [pc, #200]	; (21bd4 <sd_mmc_spi_install_mmc+0xd8>)
   21b0c:	4798      	blx	r3
   21b0e:	0003      	movs	r3, r0
   21b10:	001a      	movs	r2, r3
   21b12:	2301      	movs	r3, #1
   21b14:	4053      	eors	r3, r2
   21b16:	b2db      	uxtb	r3, r3
   21b18:	2b00      	cmp	r3, #0
   21b1a:	d001      	beq.n	21b20 <sd_mmc_spi_install_mmc+0x24>
		return false;
   21b1c:	2300      	movs	r3, #0
   21b1e:	e055      	b.n	21bcc <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   21b20:	4b2d      	ldr	r3, [pc, #180]	; (21bd8 <sd_mmc_spi_install_mmc+0xdc>)
   21b22:	4798      	blx	r3
   21b24:	0003      	movs	r3, r0
   21b26:	001a      	movs	r2, r3
   21b28:	2301      	movs	r3, #1
   21b2a:	4053      	eors	r3, r2
   21b2c:	b2db      	uxtb	r3, r3
   21b2e:	2b00      	cmp	r3, #0
   21b30:	d001      	beq.n	21b36 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   21b32:	2300      	movs	r3, #0
   21b34:	e04a      	b.n	21bcc <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   21b36:	4b29      	ldr	r3, [pc, #164]	; (21bdc <sd_mmc_spi_install_mmc+0xe0>)
   21b38:	2100      	movs	r1, #0
   21b3a:	0018      	movs	r0, r3
   21b3c:	4b25      	ldr	r3, [pc, #148]	; (21bd4 <sd_mmc_spi_install_mmc+0xd8>)
   21b3e:	4798      	blx	r3
   21b40:	0003      	movs	r3, r0
   21b42:	001a      	movs	r2, r3
   21b44:	2301      	movs	r3, #1
   21b46:	4053      	eors	r3, r2
   21b48:	b2db      	uxtb	r3, r3
   21b4a:	2b00      	cmp	r3, #0
   21b4c:	d001      	beq.n	21b52 <sd_mmc_spi_install_mmc+0x56>
		return false;
   21b4e:	2300      	movs	r3, #0
   21b50:	e03c      	b.n	21bcc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   21b52:	4b23      	ldr	r3, [pc, #140]	; (21be0 <sd_mmc_spi_install_mmc+0xe4>)
   21b54:	4798      	blx	r3
   21b56:	0003      	movs	r3, r0
   21b58:	001a      	movs	r2, r3
   21b5a:	2301      	movs	r3, #1
   21b5c:	4053      	eors	r3, r2
   21b5e:	b2db      	uxtb	r3, r3
   21b60:	2b00      	cmp	r3, #0
   21b62:	d001      	beq.n	21b68 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   21b64:	2300      	movs	r3, #0
   21b66:	e031      	b.n	21bcc <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   21b68:	4b1e      	ldr	r3, [pc, #120]	; (21be4 <sd_mmc_spi_install_mmc+0xe8>)
   21b6a:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   21b6c:	4b1e      	ldr	r3, [pc, #120]	; (21be8 <sd_mmc_spi_install_mmc+0xec>)
   21b6e:	681b      	ldr	r3, [r3, #0]
   21b70:	7b1b      	ldrb	r3, [r3, #12]
   21b72:	2b3f      	cmp	r3, #63	; 0x3f
   21b74:	d90c      	bls.n	21b90 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   21b76:	1dfb      	adds	r3, r7, #7
   21b78:	0018      	movs	r0, r3
   21b7a:	4b1c      	ldr	r3, [pc, #112]	; (21bec <sd_mmc_spi_install_mmc+0xf0>)
   21b7c:	4798      	blx	r3
   21b7e:	0003      	movs	r3, r0
   21b80:	001a      	movs	r2, r3
   21b82:	2301      	movs	r3, #1
   21b84:	4053      	eors	r3, r2
   21b86:	b2db      	uxtb	r3, r3
   21b88:	2b00      	cmp	r3, #0
   21b8a:	d001      	beq.n	21b90 <sd_mmc_spi_install_mmc+0x94>
			return false;
   21b8c:	2300      	movs	r3, #0
   21b8e:	e01d      	b.n	21bcc <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   21b90:	2380      	movs	r3, #128	; 0x80
   21b92:	009b      	lsls	r3, r3, #2
   21b94:	4a16      	ldr	r2, [pc, #88]	; (21bf0 <sd_mmc_spi_install_mmc+0xf4>)
   21b96:	0019      	movs	r1, r3
   21b98:	0010      	movs	r0, r2
   21b9a:	4b0e      	ldr	r3, [pc, #56]	; (21bd4 <sd_mmc_spi_install_mmc+0xd8>)
   21b9c:	4798      	blx	r3
   21b9e:	0003      	movs	r3, r0
   21ba0:	001a      	movs	r2, r3
   21ba2:	2301      	movs	r3, #1
   21ba4:	4053      	eors	r3, r2
   21ba6:	b2db      	uxtb	r3, r3
   21ba8:	2b00      	cmp	r3, #0
   21baa:	d001      	beq.n	21bb0 <sd_mmc_spi_install_mmc+0xb4>
		return false;
   21bac:	2300      	movs	r3, #0
   21bae:	e00d      	b.n	21bcc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   21bb0:	4b10      	ldr	r3, [pc, #64]	; (21bf4 <sd_mmc_spi_install_mmc+0xf8>)
   21bb2:	4798      	blx	r3
   21bb4:	0003      	movs	r3, r0
   21bb6:	001a      	movs	r2, r3
   21bb8:	2301      	movs	r3, #1
   21bba:	4053      	eors	r3, r2
   21bbc:	b2db      	uxtb	r3, r3
   21bbe:	2b00      	cmp	r3, #0
   21bc0:	d001      	beq.n	21bc6 <sd_mmc_spi_install_mmc+0xca>
		return false;
   21bc2:	2300      	movs	r3, #0
   21bc4:	e002      	b.n	21bcc <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   21bc6:	4b0c      	ldr	r3, [pc, #48]	; (21bf8 <sd_mmc_spi_install_mmc+0xfc>)
   21bc8:	4798      	blx	r3
	return true;
   21bca:	2301      	movs	r3, #1
}
   21bcc:	0018      	movs	r0, r3
   21bce:	46bd      	mov	sp, r7
   21bd0:	b002      	add	sp, #8
   21bd2:	bd80      	pop	{r7, pc}
   21bd4:	00022b85 	.word	0x00022b85
   21bd8:	00021109 	.word	0x00021109
   21bdc:	0000113b 	.word	0x0000113b
   21be0:	00021441 	.word	0x00021441
   21be4:	000214b1 	.word	0x000214b1
   21be8:	20004164 	.word	0x20004164
   21bec:	00021315 	.word	0x00021315
   21bf0:	00001110 	.word	0x00001110
   21bf4:	000216cd 	.word	0x000216cd
   21bf8:	000218f5 	.word	0x000218f5

00021bfc <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   21bfc:	b580      	push	{r7, lr}
   21bfe:	b082      	sub	sp, #8
   21c00:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   21c02:	1dfb      	adds	r3, r7, #7
   21c04:	2200      	movs	r2, #0
   21c06:	701a      	strb	r2, [r3, #0]
   21c08:	e00c      	b.n	21c24 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   21c0a:	1dfb      	adds	r3, r7, #7
   21c0c:	781b      	ldrb	r3, [r3, #0]
   21c0e:	4a0c      	ldr	r2, [pc, #48]	; (21c40 <sd_mmc_init+0x44>)
   21c10:	015b      	lsls	r3, r3, #5
   21c12:	18d3      	adds	r3, r2, r3
   21c14:	330a      	adds	r3, #10
   21c16:	2204      	movs	r2, #4
   21c18:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   21c1a:	1dfb      	adds	r3, r7, #7
   21c1c:	781a      	ldrb	r2, [r3, #0]
   21c1e:	1dfb      	adds	r3, r7, #7
   21c20:	3201      	adds	r2, #1
   21c22:	701a      	strb	r2, [r3, #0]
   21c24:	1dfb      	adds	r3, r7, #7
   21c26:	781b      	ldrb	r3, [r3, #0]
   21c28:	2b00      	cmp	r3, #0
   21c2a:	d0ee      	beq.n	21c0a <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   21c2c:	4b05      	ldr	r3, [pc, #20]	; (21c44 <sd_mmc_init+0x48>)
   21c2e:	22ff      	movs	r2, #255	; 0xff
   21c30:	701a      	strb	r2, [r3, #0]
	driver_init();
   21c32:	4b05      	ldr	r3, [pc, #20]	; (21c48 <sd_mmc_init+0x4c>)
   21c34:	4798      	blx	r3
}
   21c36:	46c0      	nop			; (mov r8, r8)
   21c38:	46bd      	mov	sp, r7
   21c3a:	b002      	add	sp, #8
   21c3c:	bd80      	pop	{r7, pc}
   21c3e:	46c0      	nop			; (mov r8, r8)
   21c40:	20004140 	.word	0x20004140
   21c44:	20004160 	.word	0x20004160
   21c48:	000229a5 	.word	0x000229a5

00021c4c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   21c4c:	b590      	push	{r4, r7, lr}
   21c4e:	b085      	sub	sp, #20
   21c50:	af00      	add	r7, sp, #0
   21c52:	0002      	movs	r2, r0
   21c54:	1dfb      	adds	r3, r7, #7
   21c56:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   21c58:	230f      	movs	r3, #15
   21c5a:	18fc      	adds	r4, r7, r3
   21c5c:	1dfb      	adds	r3, r7, #7
   21c5e:	781b      	ldrb	r3, [r3, #0]
   21c60:	0018      	movs	r0, r3
   21c62:	4b13      	ldr	r3, [pc, #76]	; (21cb0 <sd_mmc_check+0x64>)
   21c64:	4798      	blx	r3
   21c66:	0003      	movs	r3, r0
   21c68:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   21c6a:	230f      	movs	r3, #15
   21c6c:	18fb      	adds	r3, r7, r3
   21c6e:	781b      	ldrb	r3, [r3, #0]
   21c70:	2b01      	cmp	r3, #1
   21c72:	d005      	beq.n	21c80 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   21c74:	4b0f      	ldr	r3, [pc, #60]	; (21cb4 <sd_mmc_check+0x68>)
   21c76:	4798      	blx	r3
		return sd_mmc_err;
   21c78:	230f      	movs	r3, #15
   21c7a:	18fb      	adds	r3, r7, r3
   21c7c:	781b      	ldrb	r3, [r3, #0]
   21c7e:	e012      	b.n	21ca6 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   21c80:	4b0d      	ldr	r3, [pc, #52]	; (21cb8 <sd_mmc_check+0x6c>)
   21c82:	4798      	blx	r3
   21c84:	1e03      	subs	r3, r0, #0
   21c86:	d007      	beq.n	21c98 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   21c88:	4b0c      	ldr	r3, [pc, #48]	; (21cbc <sd_mmc_check+0x70>)
   21c8a:	681b      	ldr	r3, [r3, #0]
   21c8c:	2200      	movs	r2, #0
   21c8e:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   21c90:	4b08      	ldr	r3, [pc, #32]	; (21cb4 <sd_mmc_check+0x68>)
   21c92:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   21c94:	2301      	movs	r3, #1
   21c96:	e006      	b.n	21ca6 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   21c98:	4b08      	ldr	r3, [pc, #32]	; (21cbc <sd_mmc_check+0x70>)
   21c9a:	681b      	ldr	r3, [r3, #0]
   21c9c:	2203      	movs	r2, #3
   21c9e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   21ca0:	4b04      	ldr	r3, [pc, #16]	; (21cb4 <sd_mmc_check+0x68>)
   21ca2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   21ca4:	2303      	movs	r3, #3
}
   21ca6:	0018      	movs	r0, r3
   21ca8:	46bd      	mov	sp, r7
   21caa:	b005      	add	sp, #20
   21cac:	bd90      	pop	{r4, r7, pc}
   21cae:	46c0      	nop			; (mov r8, r8)
   21cb0:	00021831 	.word	0x00021831
   21cb4:	0002192d 	.word	0x0002192d
   21cb8:	00021951 	.word	0x00021951
   21cbc:	20004164 	.word	0x20004164

00021cc0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   21cc0:	b580      	push	{r7, lr}
   21cc2:	b082      	sub	sp, #8
   21cc4:	af00      	add	r7, sp, #0
   21cc6:	0002      	movs	r2, r0
   21cc8:	1dfb      	adds	r3, r7, #7
   21cca:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   21ccc:	1dfb      	adds	r3, r7, #7
   21cce:	781b      	ldrb	r3, [r3, #0]
   21cd0:	0018      	movs	r0, r3
   21cd2:	4b07      	ldr	r3, [pc, #28]	; (21cf0 <sd_mmc_get_type+0x30>)
   21cd4:	4798      	blx	r3
   21cd6:	1e03      	subs	r3, r0, #0
   21cd8:	d001      	beq.n	21cde <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   21cda:	2300      	movs	r3, #0
   21cdc:	e004      	b.n	21ce8 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   21cde:	4b05      	ldr	r3, [pc, #20]	; (21cf4 <sd_mmc_get_type+0x34>)
   21ce0:	4798      	blx	r3
	return sd_mmc_card->type;
   21ce2:	4b05      	ldr	r3, [pc, #20]	; (21cf8 <sd_mmc_get_type+0x38>)
   21ce4:	681b      	ldr	r3, [r3, #0]
   21ce6:	7adb      	ldrb	r3, [r3, #11]
}
   21ce8:	0018      	movs	r0, r3
   21cea:	46bd      	mov	sp, r7
   21cec:	b002      	add	sp, #8
   21cee:	bd80      	pop	{r7, pc}
   21cf0:	00021831 	.word	0x00021831
   21cf4:	0002192d 	.word	0x0002192d
   21cf8:	20004164 	.word	0x20004164

00021cfc <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   21cfc:	b580      	push	{r7, lr}
   21cfe:	b082      	sub	sp, #8
   21d00:	af00      	add	r7, sp, #0
   21d02:	0002      	movs	r2, r0
   21d04:	1dfb      	adds	r3, r7, #7
   21d06:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   21d08:	1dfb      	adds	r3, r7, #7
   21d0a:	781b      	ldrb	r3, [r3, #0]
   21d0c:	0018      	movs	r0, r3
   21d0e:	4b07      	ldr	r3, [pc, #28]	; (21d2c <sd_mmc_get_capacity+0x30>)
   21d10:	4798      	blx	r3
   21d12:	1e03      	subs	r3, r0, #0
   21d14:	d001      	beq.n	21d1a <sd_mmc_get_capacity+0x1e>
		return 0;
   21d16:	2300      	movs	r3, #0
   21d18:	e004      	b.n	21d24 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   21d1a:	4b05      	ldr	r3, [pc, #20]	; (21d30 <sd_mmc_get_capacity+0x34>)
   21d1c:	4798      	blx	r3
	return sd_mmc_card->capacity;
   21d1e:	4b05      	ldr	r3, [pc, #20]	; (21d34 <sd_mmc_get_capacity+0x38>)
   21d20:	681b      	ldr	r3, [r3, #0]
   21d22:	685b      	ldr	r3, [r3, #4]
}
   21d24:	0018      	movs	r0, r3
   21d26:	46bd      	mov	sp, r7
   21d28:	b002      	add	sp, #8
   21d2a:	bd80      	pop	{r7, pc}
   21d2c:	00021831 	.word	0x00021831
   21d30:	0002192d 	.word	0x0002192d
   21d34:	20004164 	.word	0x20004164

00021d38 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   21d38:	b580      	push	{r7, lr}
   21d3a:	b082      	sub	sp, #8
   21d3c:	af00      	add	r7, sp, #0
   21d3e:	0002      	movs	r2, r0
   21d40:	1dfb      	adds	r3, r7, #7
   21d42:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   21d44:	2300      	movs	r3, #0
}
   21d46:	0018      	movs	r0, r3
   21d48:	46bd      	mov	sp, r7
   21d4a:	b002      	add	sp, #8
   21d4c:	bd80      	pop	{r7, pc}
	...

00021d50 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   21d50:	b590      	push	{r4, r7, lr}
   21d52:	b089      	sub	sp, #36	; 0x24
   21d54:	af02      	add	r7, sp, #8
   21d56:	6039      	str	r1, [r7, #0]
   21d58:	0011      	movs	r1, r2
   21d5a:	1dfb      	adds	r3, r7, #7
   21d5c:	1c02      	adds	r2, r0, #0
   21d5e:	701a      	strb	r2, [r3, #0]
   21d60:	1d3b      	adds	r3, r7, #4
   21d62:	1c0a      	adds	r2, r1, #0
   21d64:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   21d66:	230f      	movs	r3, #15
   21d68:	18fc      	adds	r4, r7, r3
   21d6a:	1dfb      	adds	r3, r7, #7
   21d6c:	781b      	ldrb	r3, [r3, #0]
   21d6e:	0018      	movs	r0, r3
   21d70:	4b29      	ldr	r3, [pc, #164]	; (21e18 <sd_mmc_init_read_blocks+0xc8>)
   21d72:	4798      	blx	r3
   21d74:	0003      	movs	r3, r0
   21d76:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21d78:	230f      	movs	r3, #15
   21d7a:	18fb      	adds	r3, r7, r3
   21d7c:	781b      	ldrb	r3, [r3, #0]
   21d7e:	2b00      	cmp	r3, #0
   21d80:	d003      	beq.n	21d8a <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   21d82:	230f      	movs	r3, #15
   21d84:	18fb      	adds	r3, r7, r3
   21d86:	781b      	ldrb	r3, [r3, #0]
   21d88:	e041      	b.n	21e0e <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   21d8a:	4b24      	ldr	r3, [pc, #144]	; (21e1c <sd_mmc_init_read_blocks+0xcc>)
   21d8c:	4798      	blx	r3
   21d8e:	0003      	movs	r3, r0
   21d90:	001a      	movs	r2, r3
   21d92:	2301      	movs	r3, #1
   21d94:	4053      	eors	r3, r2
   21d96:	b2db      	uxtb	r3, r3
   21d98:	2b00      	cmp	r3, #0
   21d9a:	d003      	beq.n	21da4 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   21d9c:	4b20      	ldr	r3, [pc, #128]	; (21e20 <sd_mmc_init_read_blocks+0xd0>)
   21d9e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   21da0:	2305      	movs	r3, #5
   21da2:	e034      	b.n	21e0e <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   21da4:	1d3b      	adds	r3, r7, #4
   21da6:	881b      	ldrh	r3, [r3, #0]
   21da8:	2b01      	cmp	r3, #1
   21daa:	d902      	bls.n	21db2 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   21dac:	4b1d      	ldr	r3, [pc, #116]	; (21e24 <sd_mmc_init_read_blocks+0xd4>)
   21dae:	617b      	str	r3, [r7, #20]
   21db0:	e001      	b.n	21db6 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   21db2:	4b1d      	ldr	r3, [pc, #116]	; (21e28 <sd_mmc_init_read_blocks+0xd8>)
   21db4:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   21db6:	4b1d      	ldr	r3, [pc, #116]	; (21e2c <sd_mmc_init_read_blocks+0xdc>)
   21db8:	681b      	ldr	r3, [r3, #0]
   21dba:	7adb      	ldrb	r3, [r3, #11]
   21dbc:	001a      	movs	r2, r3
   21dbe:	2308      	movs	r3, #8
   21dc0:	4013      	ands	r3, r2
   21dc2:	d002      	beq.n	21dca <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   21dc4:	683b      	ldr	r3, [r7, #0]
   21dc6:	613b      	str	r3, [r7, #16]
   21dc8:	e002      	b.n	21dd0 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   21dca:	683b      	ldr	r3, [r7, #0]
   21dcc:	025b      	lsls	r3, r3, #9
   21dce:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   21dd0:	1d3b      	adds	r3, r7, #4
   21dd2:	881c      	ldrh	r4, [r3, #0]
   21dd4:	2380      	movs	r3, #128	; 0x80
   21dd6:	009a      	lsls	r2, r3, #2
   21dd8:	6939      	ldr	r1, [r7, #16]
   21dda:	6978      	ldr	r0, [r7, #20]
   21ddc:	2301      	movs	r3, #1
   21dde:	9300      	str	r3, [sp, #0]
   21de0:	0023      	movs	r3, r4
   21de2:	4c13      	ldr	r4, [pc, #76]	; (21e30 <sd_mmc_init_read_blocks+0xe0>)
   21de4:	47a0      	blx	r4
   21de6:	0003      	movs	r3, r0
   21de8:	001a      	movs	r2, r3
   21dea:	2301      	movs	r3, #1
   21dec:	4053      	eors	r3, r2
   21dee:	b2db      	uxtb	r3, r3
   21df0:	2b00      	cmp	r3, #0
   21df2:	d003      	beq.n	21dfc <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   21df4:	4b0a      	ldr	r3, [pc, #40]	; (21e20 <sd_mmc_init_read_blocks+0xd0>)
   21df6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   21df8:	2305      	movs	r3, #5
   21dfa:	e008      	b.n	21e0e <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   21dfc:	4b0d      	ldr	r3, [pc, #52]	; (21e34 <sd_mmc_init_read_blocks+0xe4>)
   21dfe:	1d3a      	adds	r2, r7, #4
   21e00:	8812      	ldrh	r2, [r2, #0]
   21e02:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   21e04:	4b0c      	ldr	r3, [pc, #48]	; (21e38 <sd_mmc_init_read_blocks+0xe8>)
   21e06:	1d3a      	adds	r2, r7, #4
   21e08:	8812      	ldrh	r2, [r2, #0]
   21e0a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21e0c:	2300      	movs	r3, #0
}
   21e0e:	0018      	movs	r0, r3
   21e10:	46bd      	mov	sp, r7
   21e12:	b007      	add	sp, #28
   21e14:	bd90      	pop	{r4, r7, pc}
   21e16:	46c0      	nop			; (mov r8, r8)
   21e18:	00021831 	.word	0x00021831
   21e1c:	000216cd 	.word	0x000216cd
   21e20:	0002192d 	.word	0x0002192d
   21e24:	00101112 	.word	0x00101112
   21e28:	00081111 	.word	0x00081111
   21e2c:	20004164 	.word	0x20004164
   21e30:	00022bad 	.word	0x00022bad
   21e34:	2000416a 	.word	0x2000416a
   21e38:	20004168 	.word	0x20004168

00021e3c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   21e3c:	b580      	push	{r7, lr}
   21e3e:	b082      	sub	sp, #8
   21e40:	af00      	add	r7, sp, #0
   21e42:	6078      	str	r0, [r7, #4]
   21e44:	000a      	movs	r2, r1
   21e46:	1cbb      	adds	r3, r7, #2
   21e48:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   21e4a:	1cbb      	adds	r3, r7, #2
   21e4c:	881a      	ldrh	r2, [r3, #0]
   21e4e:	687b      	ldr	r3, [r7, #4]
   21e50:	0011      	movs	r1, r2
   21e52:	0018      	movs	r0, r3
   21e54:	4b0d      	ldr	r3, [pc, #52]	; (21e8c <sd_mmc_start_read_blocks+0x50>)
   21e56:	4798      	blx	r3
   21e58:	0003      	movs	r3, r0
   21e5a:	001a      	movs	r2, r3
   21e5c:	2301      	movs	r3, #1
   21e5e:	4053      	eors	r3, r2
   21e60:	b2db      	uxtb	r3, r3
   21e62:	2b00      	cmp	r3, #0
   21e64:	d004      	beq.n	21e70 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   21e66:	4b0a      	ldr	r3, [pc, #40]	; (21e90 <sd_mmc_start_read_blocks+0x54>)
   21e68:	2200      	movs	r2, #0
   21e6a:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   21e6c:	2305      	movs	r3, #5
   21e6e:	e008      	b.n	21e82 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   21e70:	4b07      	ldr	r3, [pc, #28]	; (21e90 <sd_mmc_start_read_blocks+0x54>)
   21e72:	881a      	ldrh	r2, [r3, #0]
   21e74:	1cbb      	adds	r3, r7, #2
   21e76:	881b      	ldrh	r3, [r3, #0]
   21e78:	1ad3      	subs	r3, r2, r3
   21e7a:	b29a      	uxth	r2, r3
   21e7c:	4b04      	ldr	r3, [pc, #16]	; (21e90 <sd_mmc_start_read_blocks+0x54>)
   21e7e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21e80:	2300      	movs	r3, #0
}
   21e82:	0018      	movs	r0, r3
   21e84:	46bd      	mov	sp, r7
   21e86:	b002      	add	sp, #8
   21e88:	bd80      	pop	{r7, pc}
   21e8a:	46c0      	nop			; (mov r8, r8)
   21e8c:	00022e7d 	.word	0x00022e7d
   21e90:	2000416a 	.word	0x2000416a

00021e94 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   21e94:	b580      	push	{r7, lr}
   21e96:	b082      	sub	sp, #8
   21e98:	af00      	add	r7, sp, #0
   21e9a:	0002      	movs	r2, r0
   21e9c:	1dfb      	adds	r3, r7, #7
   21e9e:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   21ea0:	4b1c      	ldr	r3, [pc, #112]	; (21f14 <sd_mmc_wait_end_of_read_blocks+0x80>)
   21ea2:	4798      	blx	r3
   21ea4:	0003      	movs	r3, r0
   21ea6:	001a      	movs	r2, r3
   21ea8:	2301      	movs	r3, #1
   21eaa:	4053      	eors	r3, r2
   21eac:	b2db      	uxtb	r3, r3
   21eae:	2b00      	cmp	r3, #0
   21eb0:	d001      	beq.n	21eb6 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   21eb2:	2305      	movs	r3, #5
   21eb4:	e029      	b.n	21f0a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   21eb6:	1dfb      	adds	r3, r7, #7
   21eb8:	781b      	ldrb	r3, [r3, #0]
   21eba:	2b00      	cmp	r3, #0
   21ebc:	d003      	beq.n	21ec6 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   21ebe:	4b16      	ldr	r3, [pc, #88]	; (21f18 <sd_mmc_wait_end_of_read_blocks+0x84>)
   21ec0:	2200      	movs	r2, #0
   21ec2:	801a      	strh	r2, [r3, #0]
   21ec4:	e005      	b.n	21ed2 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   21ec6:	4b14      	ldr	r3, [pc, #80]	; (21f18 <sd_mmc_wait_end_of_read_blocks+0x84>)
   21ec8:	881b      	ldrh	r3, [r3, #0]
   21eca:	2b00      	cmp	r3, #0
   21ecc:	d001      	beq.n	21ed2 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   21ece:	2300      	movs	r3, #0
   21ed0:	e01b      	b.n	21f0a <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   21ed2:	4b12      	ldr	r3, [pc, #72]	; (21f1c <sd_mmc_wait_end_of_read_blocks+0x88>)
   21ed4:	881b      	ldrh	r3, [r3, #0]
   21ed6:	2b01      	cmp	r3, #1
   21ed8:	d103      	bne.n	21ee2 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   21eda:	4b11      	ldr	r3, [pc, #68]	; (21f20 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   21edc:	4798      	blx	r3
		return SD_MMC_OK;
   21ede:	2300      	movs	r3, #0
   21ee0:	e013      	b.n	21f0a <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   21ee2:	4b10      	ldr	r3, [pc, #64]	; (21f24 <sd_mmc_wait_end_of_read_blocks+0x90>)
   21ee4:	2100      	movs	r1, #0
   21ee6:	0018      	movs	r0, r3
   21ee8:	4b0f      	ldr	r3, [pc, #60]	; (21f28 <sd_mmc_wait_end_of_read_blocks+0x94>)
   21eea:	4798      	blx	r3
   21eec:	0003      	movs	r3, r0
   21eee:	001a      	movs	r2, r3
   21ef0:	2301      	movs	r3, #1
   21ef2:	4053      	eors	r3, r2
   21ef4:	b2db      	uxtb	r3, r3
   21ef6:	2b00      	cmp	r3, #0
   21ef8:	d004      	beq.n	21f04 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   21efa:	4b0a      	ldr	r3, [pc, #40]	; (21f24 <sd_mmc_wait_end_of_read_blocks+0x90>)
   21efc:	2100      	movs	r1, #0
   21efe:	0018      	movs	r0, r3
   21f00:	4b09      	ldr	r3, [pc, #36]	; (21f28 <sd_mmc_wait_end_of_read_blocks+0x94>)
   21f02:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   21f04:	4b06      	ldr	r3, [pc, #24]	; (21f20 <sd_mmc_wait_end_of_read_blocks+0x8c>)
   21f06:	4798      	blx	r3
	return SD_MMC_OK;
   21f08:	2300      	movs	r3, #0
}
   21f0a:	0018      	movs	r0, r3
   21f0c:	46bd      	mov	sp, r7
   21f0e:	b002      	add	sp, #8
   21f10:	bd80      	pop	{r7, pc}
   21f12:	46c0      	nop			; (mov r8, r8)
   21f14:	00022f21 	.word	0x00022f21
   21f18:	2000416a 	.word	0x2000416a
   21f1c:	20004168 	.word	0x20004168
   21f20:	0002192d 	.word	0x0002192d
   21f24:	0000310c 	.word	0x0000310c
   21f28:	00022b85 	.word	0x00022b85

00021f2c <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   21f2c:	b590      	push	{r4, r7, lr}
   21f2e:	b089      	sub	sp, #36	; 0x24
   21f30:	af02      	add	r7, sp, #8
   21f32:	6039      	str	r1, [r7, #0]
   21f34:	0011      	movs	r1, r2
   21f36:	1dfb      	adds	r3, r7, #7
   21f38:	1c02      	adds	r2, r0, #0
   21f3a:	701a      	strb	r2, [r3, #0]
   21f3c:	1d3b      	adds	r3, r7, #4
   21f3e:	1c0a      	adds	r2, r1, #0
   21f40:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   21f42:	230f      	movs	r3, #15
   21f44:	18fc      	adds	r4, r7, r3
   21f46:	1dfb      	adds	r3, r7, #7
   21f48:	781b      	ldrb	r3, [r3, #0]
   21f4a:	0018      	movs	r0, r3
   21f4c:	4b28      	ldr	r3, [pc, #160]	; (21ff0 <sd_mmc_init_write_blocks+0xc4>)
   21f4e:	4798      	blx	r3
   21f50:	0003      	movs	r3, r0
   21f52:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   21f54:	230f      	movs	r3, #15
   21f56:	18fb      	adds	r3, r7, r3
   21f58:	781b      	ldrb	r3, [r3, #0]
   21f5a:	2b00      	cmp	r3, #0
   21f5c:	d003      	beq.n	21f66 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   21f5e:	230f      	movs	r3, #15
   21f60:	18fb      	adds	r3, r7, r3
   21f62:	781b      	ldrb	r3, [r3, #0]
   21f64:	e03f      	b.n	21fe6 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   21f66:	1dfb      	adds	r3, r7, #7
   21f68:	781b      	ldrb	r3, [r3, #0]
   21f6a:	0018      	movs	r0, r3
   21f6c:	4b21      	ldr	r3, [pc, #132]	; (21ff4 <sd_mmc_init_write_blocks+0xc8>)
   21f6e:	4798      	blx	r3
   21f70:	1e03      	subs	r3, r0, #0
   21f72:	d003      	beq.n	21f7c <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   21f74:	4b20      	ldr	r3, [pc, #128]	; (21ff8 <sd_mmc_init_write_blocks+0xcc>)
   21f76:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   21f78:	2307      	movs	r3, #7
   21f7a:	e034      	b.n	21fe6 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   21f7c:	1d3b      	adds	r3, r7, #4
   21f7e:	881b      	ldrh	r3, [r3, #0]
   21f80:	2b01      	cmp	r3, #1
   21f82:	d902      	bls.n	21f8a <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   21f84:	4b1d      	ldr	r3, [pc, #116]	; (21ffc <sd_mmc_init_write_blocks+0xd0>)
   21f86:	617b      	str	r3, [r7, #20]
   21f88:	e001      	b.n	21f8e <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   21f8a:	4b1d      	ldr	r3, [pc, #116]	; (22000 <sd_mmc_init_write_blocks+0xd4>)
   21f8c:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   21f8e:	4b1d      	ldr	r3, [pc, #116]	; (22004 <sd_mmc_init_write_blocks+0xd8>)
   21f90:	681b      	ldr	r3, [r3, #0]
   21f92:	7adb      	ldrb	r3, [r3, #11]
   21f94:	001a      	movs	r2, r3
   21f96:	2308      	movs	r3, #8
   21f98:	4013      	ands	r3, r2
   21f9a:	d002      	beq.n	21fa2 <sd_mmc_init_write_blocks+0x76>
		arg = start;
   21f9c:	683b      	ldr	r3, [r7, #0]
   21f9e:	613b      	str	r3, [r7, #16]
   21fa0:	e002      	b.n	21fa8 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   21fa2:	683b      	ldr	r3, [r7, #0]
   21fa4:	025b      	lsls	r3, r3, #9
   21fa6:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   21fa8:	1d3b      	adds	r3, r7, #4
   21faa:	881c      	ldrh	r4, [r3, #0]
   21fac:	2380      	movs	r3, #128	; 0x80
   21fae:	009a      	lsls	r2, r3, #2
   21fb0:	6939      	ldr	r1, [r7, #16]
   21fb2:	6978      	ldr	r0, [r7, #20]
   21fb4:	2301      	movs	r3, #1
   21fb6:	9300      	str	r3, [sp, #0]
   21fb8:	0023      	movs	r3, r4
   21fba:	4c13      	ldr	r4, [pc, #76]	; (22008 <sd_mmc_init_write_blocks+0xdc>)
   21fbc:	47a0      	blx	r4
   21fbe:	0003      	movs	r3, r0
   21fc0:	001a      	movs	r2, r3
   21fc2:	2301      	movs	r3, #1
   21fc4:	4053      	eors	r3, r2
   21fc6:	b2db      	uxtb	r3, r3
   21fc8:	2b00      	cmp	r3, #0
   21fca:	d003      	beq.n	21fd4 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   21fcc:	4b0a      	ldr	r3, [pc, #40]	; (21ff8 <sd_mmc_init_write_blocks+0xcc>)
   21fce:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   21fd0:	2305      	movs	r3, #5
   21fd2:	e008      	b.n	21fe6 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   21fd4:	4b0d      	ldr	r3, [pc, #52]	; (2200c <sd_mmc_init_write_blocks+0xe0>)
   21fd6:	1d3a      	adds	r2, r7, #4
   21fd8:	8812      	ldrh	r2, [r2, #0]
   21fda:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   21fdc:	4b0c      	ldr	r3, [pc, #48]	; (22010 <sd_mmc_init_write_blocks+0xe4>)
   21fde:	1d3a      	adds	r2, r7, #4
   21fe0:	8812      	ldrh	r2, [r2, #0]
   21fe2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   21fe4:	2300      	movs	r3, #0
}
   21fe6:	0018      	movs	r0, r3
   21fe8:	46bd      	mov	sp, r7
   21fea:	b007      	add	sp, #28
   21fec:	bd90      	pop	{r4, r7, pc}
   21fee:	46c0      	nop			; (mov r8, r8)
   21ff0:	00021831 	.word	0x00021831
   21ff4:	00021d39 	.word	0x00021d39
   21ff8:	0002192d 	.word	0x0002192d
   21ffc:	00109119 	.word	0x00109119
   22000:	00089118 	.word	0x00089118
   22004:	20004164 	.word	0x20004164
   22008:	00022bad 	.word	0x00022bad
   2200c:	2000416a 	.word	0x2000416a
   22010:	20004168 	.word	0x20004168

00022014 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   22014:	b580      	push	{r7, lr}
   22016:	b082      	sub	sp, #8
   22018:	af00      	add	r7, sp, #0
   2201a:	6078      	str	r0, [r7, #4]
   2201c:	000a      	movs	r2, r1
   2201e:	1cbb      	adds	r3, r7, #2
   22020:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   22022:	1cbb      	adds	r3, r7, #2
   22024:	881a      	ldrh	r2, [r3, #0]
   22026:	687b      	ldr	r3, [r7, #4]
   22028:	0011      	movs	r1, r2
   2202a:	0018      	movs	r0, r3
   2202c:	4b0d      	ldr	r3, [pc, #52]	; (22064 <sd_mmc_start_write_blocks+0x50>)
   2202e:	4798      	blx	r3
   22030:	0003      	movs	r3, r0
   22032:	001a      	movs	r2, r3
   22034:	2301      	movs	r3, #1
   22036:	4053      	eors	r3, r2
   22038:	b2db      	uxtb	r3, r3
   2203a:	2b00      	cmp	r3, #0
   2203c:	d004      	beq.n	22048 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   2203e:	4b0a      	ldr	r3, [pc, #40]	; (22068 <sd_mmc_start_write_blocks+0x54>)
   22040:	2200      	movs	r2, #0
   22042:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   22044:	2305      	movs	r3, #5
   22046:	e008      	b.n	2205a <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   22048:	4b07      	ldr	r3, [pc, #28]	; (22068 <sd_mmc_start_write_blocks+0x54>)
   2204a:	881a      	ldrh	r2, [r3, #0]
   2204c:	1cbb      	adds	r3, r7, #2
   2204e:	881b      	ldrh	r3, [r3, #0]
   22050:	1ad3      	subs	r3, r2, r3
   22052:	b29a      	uxth	r2, r3
   22054:	4b04      	ldr	r3, [pc, #16]	; (22068 <sd_mmc_start_write_blocks+0x54>)
   22056:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   22058:	2300      	movs	r3, #0
}
   2205a:	0018      	movs	r0, r3
   2205c:	46bd      	mov	sp, r7
   2205e:	b002      	add	sp, #8
   22060:	bd80      	pop	{r7, pc}
   22062:	46c0      	nop			; (mov r8, r8)
   22064:	00022f2d 	.word	0x00022f2d
   22068:	2000416a 	.word	0x2000416a

0002206c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   2206c:	b580      	push	{r7, lr}
   2206e:	b082      	sub	sp, #8
   22070:	af00      	add	r7, sp, #0
   22072:	0002      	movs	r2, r0
   22074:	1dfb      	adds	r3, r7, #7
   22076:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   22078:	4b13      	ldr	r3, [pc, #76]	; (220c8 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   2207a:	4798      	blx	r3
   2207c:	0003      	movs	r3, r0
   2207e:	001a      	movs	r2, r3
   22080:	2301      	movs	r3, #1
   22082:	4053      	eors	r3, r2
   22084:	b2db      	uxtb	r3, r3
   22086:	2b00      	cmp	r3, #0
   22088:	d001      	beq.n	2208e <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   2208a:	2305      	movs	r3, #5
   2208c:	e018      	b.n	220c0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   2208e:	1dfb      	adds	r3, r7, #7
   22090:	781b      	ldrb	r3, [r3, #0]
   22092:	2b00      	cmp	r3, #0
   22094:	d003      	beq.n	2209e <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   22096:	4b0d      	ldr	r3, [pc, #52]	; (220cc <sd_mmc_wait_end_of_write_blocks+0x60>)
   22098:	2200      	movs	r2, #0
   2209a:	801a      	strh	r2, [r3, #0]
   2209c:	e005      	b.n	220aa <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   2209e:	4b0b      	ldr	r3, [pc, #44]	; (220cc <sd_mmc_wait_end_of_write_blocks+0x60>)
   220a0:	881b      	ldrh	r3, [r3, #0]
   220a2:	2b00      	cmp	r3, #0
   220a4:	d001      	beq.n	220aa <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   220a6:	2300      	movs	r3, #0
   220a8:	e00a      	b.n	220c0 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   220aa:	4b09      	ldr	r3, [pc, #36]	; (220d0 <sd_mmc_wait_end_of_write_blocks+0x64>)
   220ac:	881b      	ldrh	r3, [r3, #0]
   220ae:	2b01      	cmp	r3, #1
   220b0:	d103      	bne.n	220ba <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   220b2:	4b08      	ldr	r3, [pc, #32]	; (220d4 <sd_mmc_wait_end_of_write_blocks+0x68>)
   220b4:	4798      	blx	r3
		return SD_MMC_OK;
   220b6:	2300      	movs	r3, #0
   220b8:	e002      	b.n	220c0 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   220ba:	4b06      	ldr	r3, [pc, #24]	; (220d4 <sd_mmc_wait_end_of_write_blocks+0x68>)
   220bc:	4798      	blx	r3
	return SD_MMC_OK;
   220be:	2300      	movs	r3, #0
}
   220c0:	0018      	movs	r0, r3
   220c2:	46bd      	mov	sp, r7
   220c4:	b002      	add	sp, #8
   220c6:	bd80      	pop	{r7, pc}
   220c8:	00022fed 	.word	0x00022fed
   220cc:	2000416a 	.word	0x2000416a
   220d0:	20004168 	.word	0x20004168
   220d4:	0002192d 	.word	0x0002192d

000220d8 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   220d8:	b580      	push	{r7, lr}
   220da:	b082      	sub	sp, #8
   220dc:	af00      	add	r7, sp, #0
   220de:	0002      	movs	r2, r0
   220e0:	1dfb      	adds	r3, r7, #7
   220e2:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   220e4:	1dfb      	adds	r3, r7, #7
   220e6:	781b      	ldrb	r3, [r3, #0]
   220e8:	0018      	movs	r0, r3
   220ea:	4b16      	ldr	r3, [pc, #88]	; (22144 <sd_mmc_test_unit_ready+0x6c>)
   220ec:	4798      	blx	r3
   220ee:	0003      	movs	r3, r0
   220f0:	2b01      	cmp	r3, #1
   220f2:	d019      	beq.n	22128 <sd_mmc_test_unit_ready+0x50>
   220f4:	2b02      	cmp	r3, #2
   220f6:	d019      	beq.n	2212c <sd_mmc_test_unit_ready+0x54>
   220f8:	2b00      	cmp	r3, #0
   220fa:	d11e      	bne.n	2213a <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   220fc:	1dfb      	adds	r3, r7, #7
   220fe:	781b      	ldrb	r3, [r3, #0]
   22100:	4a11      	ldr	r2, [pc, #68]	; (22148 <sd_mmc_test_unit_ready+0x70>)
   22102:	5cd3      	ldrb	r3, [r2, r3]
   22104:	2b00      	cmp	r3, #0
   22106:	d001      	beq.n	2210c <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   22108:	2302      	movs	r3, #2
   2210a:	e017      	b.n	2213c <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   2210c:	1dfb      	adds	r3, r7, #7
   2210e:	781b      	ldrb	r3, [r3, #0]
   22110:	0018      	movs	r0, r3
   22112:	4b0e      	ldr	r3, [pc, #56]	; (2214c <sd_mmc_test_unit_ready+0x74>)
   22114:	4798      	blx	r3
   22116:	0003      	movs	r3, r0
   22118:	001a      	movs	r2, r3
   2211a:	2303      	movs	r3, #3
   2211c:	4013      	ands	r3, r2
   2211e:	d001      	beq.n	22124 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   22120:	2300      	movs	r3, #0
   22122:	e00b      	b.n	2213c <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   22124:	2302      	movs	r3, #2
   22126:	e009      	b.n	2213c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   22128:	2303      	movs	r3, #3
   2212a:	e007      	b.n	2213c <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   2212c:	1dfb      	adds	r3, r7, #7
   2212e:	781b      	ldrb	r3, [r3, #0]
   22130:	4a05      	ldr	r2, [pc, #20]	; (22148 <sd_mmc_test_unit_ready+0x70>)
   22132:	2100      	movs	r1, #0
   22134:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   22136:	2302      	movs	r3, #2
   22138:	e000      	b.n	2213c <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   2213a:	2301      	movs	r3, #1
	}
}
   2213c:	0018      	movs	r0, r3
   2213e:	46bd      	mov	sp, r7
   22140:	b002      	add	sp, #8
   22142:	bd80      	pop	{r7, pc}
   22144:	00021c4d 	.word	0x00021c4d
   22148:	2000416c 	.word	0x2000416c
   2214c:	00021cc1 	.word	0x00021cc1

00022150 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   22150:	b580      	push	{r7, lr}
   22152:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   22154:	2000      	movs	r0, #0
   22156:	4b03      	ldr	r3, [pc, #12]	; (22164 <sd_mmc_test_unit_ready_0+0x14>)
   22158:	4798      	blx	r3
   2215a:	0003      	movs	r3, r0
}
   2215c:	0018      	movs	r0, r3
   2215e:	46bd      	mov	sp, r7
   22160:	bd80      	pop	{r7, pc}
   22162:	46c0      	nop			; (mov r8, r8)
   22164:	000220d9 	.word	0x000220d9

00022168 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   22168:	b580      	push	{r7, lr}
   2216a:	b082      	sub	sp, #8
   2216c:	af00      	add	r7, sp, #0
   2216e:	0002      	movs	r2, r0
   22170:	6039      	str	r1, [r7, #0]
   22172:	1dfb      	adds	r3, r7, #7
   22174:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   22176:	1dfb      	adds	r3, r7, #7
   22178:	781b      	ldrb	r3, [r3, #0]
   2217a:	0018      	movs	r0, r3
   2217c:	4b08      	ldr	r3, [pc, #32]	; (221a0 <sd_mmc_read_capacity+0x38>)
   2217e:	4798      	blx	r3
   22180:	0003      	movs	r3, r0
   22182:	005b      	lsls	r3, r3, #1
   22184:	1e5a      	subs	r2, r3, #1
   22186:	683b      	ldr	r3, [r7, #0]
   22188:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   2218a:	1dfb      	adds	r3, r7, #7
   2218c:	781b      	ldrb	r3, [r3, #0]
   2218e:	0018      	movs	r0, r3
   22190:	4b04      	ldr	r3, [pc, #16]	; (221a4 <sd_mmc_read_capacity+0x3c>)
   22192:	4798      	blx	r3
   22194:	0003      	movs	r3, r0
}
   22196:	0018      	movs	r0, r3
   22198:	46bd      	mov	sp, r7
   2219a:	b002      	add	sp, #8
   2219c:	bd80      	pop	{r7, pc}
   2219e:	46c0      	nop			; (mov r8, r8)
   221a0:	00021cfd 	.word	0x00021cfd
   221a4:	000220d9 	.word	0x000220d9

000221a8 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   221a8:	b580      	push	{r7, lr}
   221aa:	b082      	sub	sp, #8
   221ac:	af00      	add	r7, sp, #0
   221ae:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   221b0:	687b      	ldr	r3, [r7, #4]
   221b2:	0019      	movs	r1, r3
   221b4:	2000      	movs	r0, #0
   221b6:	4b03      	ldr	r3, [pc, #12]	; (221c4 <sd_mmc_read_capacity_0+0x1c>)
   221b8:	4798      	blx	r3
   221ba:	0003      	movs	r3, r0
}
   221bc:	0018      	movs	r0, r3
   221be:	46bd      	mov	sp, r7
   221c0:	b002      	add	sp, #8
   221c2:	bd80      	pop	{r7, pc}
   221c4:	00022169 	.word	0x00022169

000221c8 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   221c8:	b580      	push	{r7, lr}
   221ca:	b082      	sub	sp, #8
   221cc:	af00      	add	r7, sp, #0
   221ce:	0002      	movs	r2, r0
   221d0:	1dfb      	adds	r3, r7, #7
   221d2:	701a      	strb	r2, [r3, #0]
   221d4:	1dbb      	adds	r3, r7, #6
   221d6:	1c0a      	adds	r2, r1, #0
   221d8:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   221da:	1dfb      	adds	r3, r7, #7
   221dc:	781b      	ldrb	r3, [r3, #0]
   221de:	4a04      	ldr	r2, [pc, #16]	; (221f0 <sd_mmc_unload+0x28>)
   221e0:	1db9      	adds	r1, r7, #6
   221e2:	7809      	ldrb	r1, [r1, #0]
   221e4:	54d1      	strb	r1, [r2, r3]
	return true;
   221e6:	2301      	movs	r3, #1
}
   221e8:	0018      	movs	r0, r3
   221ea:	46bd      	mov	sp, r7
   221ec:	b002      	add	sp, #8
   221ee:	bd80      	pop	{r7, pc}
   221f0:	2000416c 	.word	0x2000416c

000221f4 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   221f4:	b580      	push	{r7, lr}
   221f6:	b082      	sub	sp, #8
   221f8:	af00      	add	r7, sp, #0
   221fa:	0002      	movs	r2, r0
   221fc:	1dfb      	adds	r3, r7, #7
   221fe:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   22200:	1dfb      	adds	r3, r7, #7
   22202:	781b      	ldrb	r3, [r3, #0]
   22204:	0019      	movs	r1, r3
   22206:	2000      	movs	r0, #0
   22208:	4b03      	ldr	r3, [pc, #12]	; (22218 <sd_mmc_unload_0+0x24>)
   2220a:	4798      	blx	r3
   2220c:	0003      	movs	r3, r0
}
   2220e:	0018      	movs	r0, r3
   22210:	46bd      	mov	sp, r7
   22212:	b002      	add	sp, #8
   22214:	bd80      	pop	{r7, pc}
   22216:	46c0      	nop			; (mov r8, r8)
   22218:	000221c9 	.word	0x000221c9

0002221c <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   2221c:	b580      	push	{r7, lr}
   2221e:	b082      	sub	sp, #8
   22220:	af00      	add	r7, sp, #0
   22222:	0002      	movs	r2, r0
   22224:	1dfb      	adds	r3, r7, #7
   22226:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   22228:	1dfb      	adds	r3, r7, #7
   2222a:	781b      	ldrb	r3, [r3, #0]
   2222c:	0018      	movs	r0, r3
   2222e:	4b03      	ldr	r3, [pc, #12]	; (2223c <sd_mmc_wr_protect+0x20>)
   22230:	4798      	blx	r3
   22232:	0003      	movs	r3, r0
}
   22234:	0018      	movs	r0, r3
   22236:	46bd      	mov	sp, r7
   22238:	b002      	add	sp, #8
   2223a:	bd80      	pop	{r7, pc}
   2223c:	00021d39 	.word	0x00021d39

00022240 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   22240:	b580      	push	{r7, lr}
   22242:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   22244:	2000      	movs	r0, #0
   22246:	4b03      	ldr	r3, [pc, #12]	; (22254 <sd_mmc_wr_protect_0+0x14>)
   22248:	4798      	blx	r3
   2224a:	0003      	movs	r3, r0
}
   2224c:	0018      	movs	r0, r3
   2224e:	46bd      	mov	sp, r7
   22250:	bd80      	pop	{r7, pc}
   22252:	46c0      	nop			; (mov r8, r8)
   22254:	0002221d 	.word	0x0002221d

00022258 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   22258:	b580      	push	{r7, lr}
   2225a:	b082      	sub	sp, #8
   2225c:	af00      	add	r7, sp, #0
   2225e:	0002      	movs	r2, r0
   22260:	1dfb      	adds	r3, r7, #7
   22262:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   22264:	2301      	movs	r3, #1
}
   22266:	0018      	movs	r0, r3
   22268:	46bd      	mov	sp, r7
   2226a:	b002      	add	sp, #8
   2226c:	bd80      	pop	{r7, pc}
	...

00022270 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   22270:	b580      	push	{r7, lr}
   22272:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   22274:	2000      	movs	r0, #0
   22276:	4b03      	ldr	r3, [pc, #12]	; (22284 <sd_mmc_removal_0+0x14>)
   22278:	4798      	blx	r3
   2227a:	0003      	movs	r3, r0
}
   2227c:	0018      	movs	r0, r3
   2227e:	46bd      	mov	sp, r7
   22280:	bd80      	pop	{r7, pc}
   22282:	46c0      	nop			; (mov r8, r8)
   22284:	00022259 	.word	0x00022259

00022288 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   22288:	b580      	push	{r7, lr}
   2228a:	b084      	sub	sp, #16
   2228c:	af00      	add	r7, sp, #0
   2228e:	60b9      	str	r1, [r7, #8]
   22290:	607a      	str	r2, [r7, #4]
   22292:	230f      	movs	r3, #15
   22294:	18fb      	adds	r3, r7, r3
   22296:	1c02      	adds	r2, r0, #0
   22298:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   2229a:	68b9      	ldr	r1, [r7, #8]
   2229c:	230f      	movs	r3, #15
   2229e:	18fb      	adds	r3, r7, r3
   222a0:	781b      	ldrb	r3, [r3, #0]
   222a2:	2201      	movs	r2, #1
   222a4:	0018      	movs	r0, r3
   222a6:	4b10      	ldr	r3, [pc, #64]	; (222e8 <sd_mmc_mem_2_ram+0x60>)
   222a8:	4798      	blx	r3
   222aa:	1e03      	subs	r3, r0, #0
   222ac:	d005      	beq.n	222ba <sd_mmc_mem_2_ram+0x32>
   222ae:	2b02      	cmp	r3, #2
   222b0:	d101      	bne.n	222b6 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   222b2:	2302      	movs	r3, #2
   222b4:	e013      	b.n	222de <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   222b6:	2301      	movs	r3, #1
   222b8:	e011      	b.n	222de <sd_mmc_mem_2_ram+0x56>
		break;
   222ba:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   222bc:	687b      	ldr	r3, [r7, #4]
   222be:	2101      	movs	r1, #1
   222c0:	0018      	movs	r0, r3
   222c2:	4b0a      	ldr	r3, [pc, #40]	; (222ec <sd_mmc_mem_2_ram+0x64>)
   222c4:	4798      	blx	r3
   222c6:	1e03      	subs	r3, r0, #0
   222c8:	d001      	beq.n	222ce <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   222ca:	2301      	movs	r3, #1
   222cc:	e007      	b.n	222de <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   222ce:	2000      	movs	r0, #0
   222d0:	4b07      	ldr	r3, [pc, #28]	; (222f0 <sd_mmc_mem_2_ram+0x68>)
   222d2:	4798      	blx	r3
   222d4:	1e03      	subs	r3, r0, #0
   222d6:	d001      	beq.n	222dc <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   222d8:	2301      	movs	r3, #1
   222da:	e000      	b.n	222de <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   222dc:	2300      	movs	r3, #0
}
   222de:	0018      	movs	r0, r3
   222e0:	46bd      	mov	sp, r7
   222e2:	b004      	add	sp, #16
   222e4:	bd80      	pop	{r7, pc}
   222e6:	46c0      	nop			; (mov r8, r8)
   222e8:	00021d51 	.word	0x00021d51
   222ec:	00021e3d 	.word	0x00021e3d
   222f0:	00021e95 	.word	0x00021e95

000222f4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   222f4:	b580      	push	{r7, lr}
   222f6:	b082      	sub	sp, #8
   222f8:	af00      	add	r7, sp, #0
   222fa:	6078      	str	r0, [r7, #4]
   222fc:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   222fe:	683a      	ldr	r2, [r7, #0]
   22300:	687b      	ldr	r3, [r7, #4]
   22302:	0019      	movs	r1, r3
   22304:	2000      	movs	r0, #0
   22306:	4b03      	ldr	r3, [pc, #12]	; (22314 <sd_mmc_mem_2_ram_0+0x20>)
   22308:	4798      	blx	r3
   2230a:	0003      	movs	r3, r0
}
   2230c:	0018      	movs	r0, r3
   2230e:	46bd      	mov	sp, r7
   22310:	b002      	add	sp, #8
   22312:	bd80      	pop	{r7, pc}
   22314:	00022289 	.word	0x00022289

00022318 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   22318:	b580      	push	{r7, lr}
   2231a:	b084      	sub	sp, #16
   2231c:	af00      	add	r7, sp, #0
   2231e:	60b9      	str	r1, [r7, #8]
   22320:	607a      	str	r2, [r7, #4]
   22322:	230f      	movs	r3, #15
   22324:	18fb      	adds	r3, r7, r3
   22326:	1c02      	adds	r2, r0, #0
   22328:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   2232a:	68b9      	ldr	r1, [r7, #8]
   2232c:	230f      	movs	r3, #15
   2232e:	18fb      	adds	r3, r7, r3
   22330:	781b      	ldrb	r3, [r3, #0]
   22332:	2201      	movs	r2, #1
   22334:	0018      	movs	r0, r3
   22336:	4b10      	ldr	r3, [pc, #64]	; (22378 <sd_mmc_ram_2_mem+0x60>)
   22338:	4798      	blx	r3
   2233a:	1e03      	subs	r3, r0, #0
   2233c:	d005      	beq.n	2234a <sd_mmc_ram_2_mem+0x32>
   2233e:	2b02      	cmp	r3, #2
   22340:	d101      	bne.n	22346 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   22342:	2302      	movs	r3, #2
   22344:	e013      	b.n	2236e <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   22346:	2301      	movs	r3, #1
   22348:	e011      	b.n	2236e <sd_mmc_ram_2_mem+0x56>
		break;
   2234a:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   2234c:	687b      	ldr	r3, [r7, #4]
   2234e:	2101      	movs	r1, #1
   22350:	0018      	movs	r0, r3
   22352:	4b0a      	ldr	r3, [pc, #40]	; (2237c <sd_mmc_ram_2_mem+0x64>)
   22354:	4798      	blx	r3
   22356:	1e03      	subs	r3, r0, #0
   22358:	d001      	beq.n	2235e <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   2235a:	2301      	movs	r3, #1
   2235c:	e007      	b.n	2236e <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   2235e:	2000      	movs	r0, #0
   22360:	4b07      	ldr	r3, [pc, #28]	; (22380 <sd_mmc_ram_2_mem+0x68>)
   22362:	4798      	blx	r3
   22364:	1e03      	subs	r3, r0, #0
   22366:	d001      	beq.n	2236c <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   22368:	2301      	movs	r3, #1
   2236a:	e000      	b.n	2236e <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   2236c:	2300      	movs	r3, #0
}
   2236e:	0018      	movs	r0, r3
   22370:	46bd      	mov	sp, r7
   22372:	b004      	add	sp, #16
   22374:	bd80      	pop	{r7, pc}
   22376:	46c0      	nop			; (mov r8, r8)
   22378:	00021f2d 	.word	0x00021f2d
   2237c:	00022015 	.word	0x00022015
   22380:	0002206d 	.word	0x0002206d

00022384 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   22384:	b580      	push	{r7, lr}
   22386:	b082      	sub	sp, #8
   22388:	af00      	add	r7, sp, #0
   2238a:	6078      	str	r0, [r7, #4]
   2238c:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   2238e:	683a      	ldr	r2, [r7, #0]
   22390:	687b      	ldr	r3, [r7, #4]
   22392:	0019      	movs	r1, r3
   22394:	2000      	movs	r0, #0
   22396:	4b03      	ldr	r3, [pc, #12]	; (223a4 <sd_mmc_ram_2_mem_0+0x20>)
   22398:	4798      	blx	r3
   2239a:	0003      	movs	r3, r0
}
   2239c:	0018      	movs	r0, r3
   2239e:	46bd      	mov	sp, r7
   223a0:	b002      	add	sp, #8
   223a2:	bd80      	pop	{r7, pc}
   223a4:	00022319 	.word	0x00022319

000223a8 <system_pinmux_get_group_from_gpio_pin>:
{
   223a8:	b580      	push	{r7, lr}
   223aa:	b084      	sub	sp, #16
   223ac:	af00      	add	r7, sp, #0
   223ae:	0002      	movs	r2, r0
   223b0:	1dfb      	adds	r3, r7, #7
   223b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   223b4:	230f      	movs	r3, #15
   223b6:	18fb      	adds	r3, r7, r3
   223b8:	1dfa      	adds	r2, r7, #7
   223ba:	7812      	ldrb	r2, [r2, #0]
   223bc:	09d2      	lsrs	r2, r2, #7
   223be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   223c0:	230e      	movs	r3, #14
   223c2:	18fb      	adds	r3, r7, r3
   223c4:	1dfa      	adds	r2, r7, #7
   223c6:	7812      	ldrb	r2, [r2, #0]
   223c8:	0952      	lsrs	r2, r2, #5
   223ca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   223cc:	4b0d      	ldr	r3, [pc, #52]	; (22404 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   223ce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   223d0:	230f      	movs	r3, #15
   223d2:	18fb      	adds	r3, r7, r3
   223d4:	781b      	ldrb	r3, [r3, #0]
   223d6:	2b00      	cmp	r3, #0
   223d8:	d10f      	bne.n	223fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   223da:	230f      	movs	r3, #15
   223dc:	18fb      	adds	r3, r7, r3
   223de:	781b      	ldrb	r3, [r3, #0]
   223e0:	009b      	lsls	r3, r3, #2
   223e2:	2210      	movs	r2, #16
   223e4:	4694      	mov	ip, r2
   223e6:	44bc      	add	ip, r7
   223e8:	4463      	add	r3, ip
   223ea:	3b08      	subs	r3, #8
   223ec:	681a      	ldr	r2, [r3, #0]
   223ee:	230e      	movs	r3, #14
   223f0:	18fb      	adds	r3, r7, r3
   223f2:	781b      	ldrb	r3, [r3, #0]
   223f4:	01db      	lsls	r3, r3, #7
   223f6:	18d3      	adds	r3, r2, r3
   223f8:	e000      	b.n	223fc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   223fa:	2300      	movs	r3, #0
}
   223fc:	0018      	movs	r0, r3
   223fe:	46bd      	mov	sp, r7
   22400:	b004      	add	sp, #16
   22402:	bd80      	pop	{r7, pc}
   22404:	41004400 	.word	0x41004400

00022408 <system_interrupt_enable>:
{
   22408:	b580      	push	{r7, lr}
   2240a:	b082      	sub	sp, #8
   2240c:	af00      	add	r7, sp, #0
   2240e:	0002      	movs	r2, r0
   22410:	1dfb      	adds	r3, r7, #7
   22412:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   22414:	4b06      	ldr	r3, [pc, #24]	; (22430 <system_interrupt_enable+0x28>)
   22416:	1dfa      	adds	r2, r7, #7
   22418:	7812      	ldrb	r2, [r2, #0]
   2241a:	0011      	movs	r1, r2
   2241c:	221f      	movs	r2, #31
   2241e:	400a      	ands	r2, r1
   22420:	2101      	movs	r1, #1
   22422:	4091      	lsls	r1, r2
   22424:	000a      	movs	r2, r1
   22426:	601a      	str	r2, [r3, #0]
}
   22428:	46c0      	nop			; (mov r8, r8)
   2242a:	46bd      	mov	sp, r7
   2242c:	b002      	add	sp, #8
   2242e:	bd80      	pop	{r7, pc}
   22430:	e000e100 	.word	0xe000e100

00022434 <port_get_group_from_gpio_pin>:
{
   22434:	b580      	push	{r7, lr}
   22436:	b082      	sub	sp, #8
   22438:	af00      	add	r7, sp, #0
   2243a:	0002      	movs	r2, r0
   2243c:	1dfb      	adds	r3, r7, #7
   2243e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   22440:	1dfb      	adds	r3, r7, #7
   22442:	781b      	ldrb	r3, [r3, #0]
   22444:	0018      	movs	r0, r3
   22446:	4b03      	ldr	r3, [pc, #12]	; (22454 <port_get_group_from_gpio_pin+0x20>)
   22448:	4798      	blx	r3
   2244a:	0003      	movs	r3, r0
}
   2244c:	0018      	movs	r0, r3
   2244e:	46bd      	mov	sp, r7
   22450:	b002      	add	sp, #8
   22452:	bd80      	pop	{r7, pc}
   22454:	000223a9 	.word	0x000223a9

00022458 <port_get_config_defaults>:
{
   22458:	b580      	push	{r7, lr}
   2245a:	b082      	sub	sp, #8
   2245c:	af00      	add	r7, sp, #0
   2245e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   22460:	687b      	ldr	r3, [r7, #4]
   22462:	2200      	movs	r2, #0
   22464:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   22466:	687b      	ldr	r3, [r7, #4]
   22468:	2201      	movs	r2, #1
   2246a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2246c:	687b      	ldr	r3, [r7, #4]
   2246e:	2200      	movs	r2, #0
   22470:	709a      	strb	r2, [r3, #2]
}
   22472:	46c0      	nop			; (mov r8, r8)
   22474:	46bd      	mov	sp, r7
   22476:	b002      	add	sp, #8
   22478:	bd80      	pop	{r7, pc}
	...

0002247c <port_pin_set_output_level>:
{
   2247c:	b580      	push	{r7, lr}
   2247e:	b084      	sub	sp, #16
   22480:	af00      	add	r7, sp, #0
   22482:	0002      	movs	r2, r0
   22484:	1dfb      	adds	r3, r7, #7
   22486:	701a      	strb	r2, [r3, #0]
   22488:	1dbb      	adds	r3, r7, #6
   2248a:	1c0a      	adds	r2, r1, #0
   2248c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2248e:	1dfb      	adds	r3, r7, #7
   22490:	781b      	ldrb	r3, [r3, #0]
   22492:	0018      	movs	r0, r3
   22494:	4b0d      	ldr	r3, [pc, #52]	; (224cc <port_pin_set_output_level+0x50>)
   22496:	4798      	blx	r3
   22498:	0003      	movs	r3, r0
   2249a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2249c:	1dfb      	adds	r3, r7, #7
   2249e:	781b      	ldrb	r3, [r3, #0]
   224a0:	221f      	movs	r2, #31
   224a2:	4013      	ands	r3, r2
   224a4:	2201      	movs	r2, #1
   224a6:	409a      	lsls	r2, r3
   224a8:	0013      	movs	r3, r2
   224aa:	60bb      	str	r3, [r7, #8]
	if (level) {
   224ac:	1dbb      	adds	r3, r7, #6
   224ae:	781b      	ldrb	r3, [r3, #0]
   224b0:	2b00      	cmp	r3, #0
   224b2:	d003      	beq.n	224bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   224b4:	68fb      	ldr	r3, [r7, #12]
   224b6:	68ba      	ldr	r2, [r7, #8]
   224b8:	619a      	str	r2, [r3, #24]
}
   224ba:	e002      	b.n	224c2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   224bc:	68fb      	ldr	r3, [r7, #12]
   224be:	68ba      	ldr	r2, [r7, #8]
   224c0:	615a      	str	r2, [r3, #20]
}
   224c2:	46c0      	nop			; (mov r8, r8)
   224c4:	46bd      	mov	sp, r7
   224c6:	b004      	add	sp, #16
   224c8:	bd80      	pop	{r7, pc}
   224ca:	46c0      	nop			; (mov r8, r8)
   224cc:	00022435 	.word	0x00022435

000224d0 <spi_is_syncing>:
{
   224d0:	b580      	push	{r7, lr}
   224d2:	b084      	sub	sp, #16
   224d4:	af00      	add	r7, sp, #0
   224d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   224d8:	687b      	ldr	r3, [r7, #4]
   224da:	681b      	ldr	r3, [r3, #0]
   224dc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   224de:	68fb      	ldr	r3, [r7, #12]
   224e0:	69db      	ldr	r3, [r3, #28]
   224e2:	1e5a      	subs	r2, r3, #1
   224e4:	4193      	sbcs	r3, r2
   224e6:	b2db      	uxtb	r3, r3
}
   224e8:	0018      	movs	r0, r3
   224ea:	46bd      	mov	sp, r7
   224ec:	b004      	add	sp, #16
   224ee:	bd80      	pop	{r7, pc}

000224f0 <spi_get_config_defaults>:
{
   224f0:	b580      	push	{r7, lr}
   224f2:	b082      	sub	sp, #8
   224f4:	af00      	add	r7, sp, #0
   224f6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   224f8:	687b      	ldr	r3, [r7, #4]
   224fa:	2201      	movs	r2, #1
   224fc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   224fe:	687b      	ldr	r3, [r7, #4]
   22500:	2200      	movs	r2, #0
   22502:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   22504:	687b      	ldr	r3, [r7, #4]
   22506:	2200      	movs	r2, #0
   22508:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2250a:	687b      	ldr	r3, [r7, #4]
   2250c:	22c0      	movs	r2, #192	; 0xc0
   2250e:	0392      	lsls	r2, r2, #14
   22510:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   22512:	687b      	ldr	r3, [r7, #4]
   22514:	2200      	movs	r2, #0
   22516:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   22518:	687b      	ldr	r3, [r7, #4]
   2251a:	2200      	movs	r2, #0
   2251c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2251e:	687b      	ldr	r3, [r7, #4]
   22520:	2201      	movs	r2, #1
   22522:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   22524:	687b      	ldr	r3, [r7, #4]
   22526:	2201      	movs	r2, #1
   22528:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   2252a:	687b      	ldr	r3, [r7, #4]
   2252c:	2200      	movs	r2, #0
   2252e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   22530:	687b      	ldr	r3, [r7, #4]
   22532:	2224      	movs	r2, #36	; 0x24
   22534:	2100      	movs	r1, #0
   22536:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   22538:	687b      	ldr	r3, [r7, #4]
   2253a:	3318      	adds	r3, #24
   2253c:	220c      	movs	r2, #12
   2253e:	2100      	movs	r1, #0
   22540:	0018      	movs	r0, r3
   22542:	4b0a      	ldr	r3, [pc, #40]	; (2256c <spi_get_config_defaults+0x7c>)
   22544:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   22546:	687b      	ldr	r3, [r7, #4]
   22548:	4a09      	ldr	r2, [pc, #36]	; (22570 <spi_get_config_defaults+0x80>)
   2254a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   2254c:	687b      	ldr	r3, [r7, #4]
   2254e:	2200      	movs	r2, #0
   22550:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   22552:	687b      	ldr	r3, [r7, #4]
   22554:	2200      	movs	r2, #0
   22556:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   22558:	687b      	ldr	r3, [r7, #4]
   2255a:	2200      	movs	r2, #0
   2255c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2255e:	687b      	ldr	r3, [r7, #4]
   22560:	2200      	movs	r2, #0
   22562:	635a      	str	r2, [r3, #52]	; 0x34
};
   22564:	46c0      	nop			; (mov r8, r8)
   22566:	46bd      	mov	sp, r7
   22568:	b002      	add	sp, #8
   2256a:	bd80      	pop	{r7, pc}
   2256c:	00038507 	.word	0x00038507
   22570:	000186a0 	.word	0x000186a0

00022574 <spi_slave_inst_get_config_defaults>:
{
   22574:	b580      	push	{r7, lr}
   22576:	b082      	sub	sp, #8
   22578:	af00      	add	r7, sp, #0
   2257a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   2257c:	687b      	ldr	r3, [r7, #4]
   2257e:	220a      	movs	r2, #10
   22580:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   22582:	687b      	ldr	r3, [r7, #4]
   22584:	2200      	movs	r2, #0
   22586:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   22588:	687b      	ldr	r3, [r7, #4]
   2258a:	2200      	movs	r2, #0
   2258c:	709a      	strb	r2, [r3, #2]
}
   2258e:	46c0      	nop			; (mov r8, r8)
   22590:	46bd      	mov	sp, r7
   22592:	b002      	add	sp, #8
   22594:	bd80      	pop	{r7, pc}
	...

00022598 <spi_attach_slave>:
{
   22598:	b580      	push	{r7, lr}
   2259a:	b084      	sub	sp, #16
   2259c:	af00      	add	r7, sp, #0
   2259e:	6078      	str	r0, [r7, #4]
   225a0:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   225a2:	683b      	ldr	r3, [r7, #0]
   225a4:	781a      	ldrb	r2, [r3, #0]
   225a6:	687b      	ldr	r3, [r7, #4]
   225a8:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   225aa:	683b      	ldr	r3, [r7, #0]
   225ac:	785a      	ldrb	r2, [r3, #1]
   225ae:	687b      	ldr	r3, [r7, #4]
   225b0:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   225b2:	683b      	ldr	r3, [r7, #0]
   225b4:	789a      	ldrb	r2, [r3, #2]
   225b6:	687b      	ldr	r3, [r7, #4]
   225b8:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   225ba:	230c      	movs	r3, #12
   225bc:	18fb      	adds	r3, r7, r3
   225be:	0018      	movs	r0, r3
   225c0:	4b0b      	ldr	r3, [pc, #44]	; (225f0 <spi_attach_slave+0x58>)
   225c2:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   225c4:	230c      	movs	r3, #12
   225c6:	18fb      	adds	r3, r7, r3
   225c8:	2201      	movs	r2, #1
   225ca:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   225cc:	687b      	ldr	r3, [r7, #4]
   225ce:	781b      	ldrb	r3, [r3, #0]
   225d0:	220c      	movs	r2, #12
   225d2:	18ba      	adds	r2, r7, r2
   225d4:	0011      	movs	r1, r2
   225d6:	0018      	movs	r0, r3
   225d8:	4b06      	ldr	r3, [pc, #24]	; (225f4 <spi_attach_slave+0x5c>)
   225da:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   225dc:	687b      	ldr	r3, [r7, #4]
   225de:	781b      	ldrb	r3, [r3, #0]
   225e0:	2101      	movs	r1, #1
   225e2:	0018      	movs	r0, r3
   225e4:	4b04      	ldr	r3, [pc, #16]	; (225f8 <spi_attach_slave+0x60>)
   225e6:	4798      	blx	r3
}
   225e8:	46c0      	nop			; (mov r8, r8)
   225ea:	46bd      	mov	sp, r7
   225ec:	b004      	add	sp, #16
   225ee:	bd80      	pop	{r7, pc}
   225f0:	00022459 	.word	0x00022459
   225f4:	000299a1 	.word	0x000299a1
   225f8:	0002247d 	.word	0x0002247d

000225fc <spi_enable>:
{
   225fc:	b580      	push	{r7, lr}
   225fe:	b084      	sub	sp, #16
   22600:	af00      	add	r7, sp, #0
   22602:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   22604:	687b      	ldr	r3, [r7, #4]
   22606:	681b      	ldr	r3, [r3, #0]
   22608:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2260a:	687b      	ldr	r3, [r7, #4]
   2260c:	681b      	ldr	r3, [r3, #0]
   2260e:	0018      	movs	r0, r3
   22610:	4b0b      	ldr	r3, [pc, #44]	; (22640 <spi_enable+0x44>)
   22612:	4798      	blx	r3
   22614:	0003      	movs	r3, r0
   22616:	0018      	movs	r0, r3
   22618:	4b0a      	ldr	r3, [pc, #40]	; (22644 <spi_enable+0x48>)
   2261a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2261c:	46c0      	nop			; (mov r8, r8)
   2261e:	687b      	ldr	r3, [r7, #4]
   22620:	0018      	movs	r0, r3
   22622:	4b09      	ldr	r3, [pc, #36]	; (22648 <spi_enable+0x4c>)
   22624:	4798      	blx	r3
   22626:	1e03      	subs	r3, r0, #0
   22628:	d1f9      	bne.n	2261e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2262a:	68fb      	ldr	r3, [r7, #12]
   2262c:	681b      	ldr	r3, [r3, #0]
   2262e:	2202      	movs	r2, #2
   22630:	431a      	orrs	r2, r3
   22632:	68fb      	ldr	r3, [r7, #12]
   22634:	601a      	str	r2, [r3, #0]
}
   22636:	46c0      	nop			; (mov r8, r8)
   22638:	46bd      	mov	sp, r7
   2263a:	b004      	add	sp, #16
   2263c:	bd80      	pop	{r7, pc}
   2263e:	46c0      	nop			; (mov r8, r8)
   22640:	0002a671 	.word	0x0002a671
   22644:	00022409 	.word	0x00022409
   22648:	000224d1 	.word	0x000224d1

0002264c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   2264c:	b580      	push	{r7, lr}
   2264e:	b084      	sub	sp, #16
   22650:	af00      	add	r7, sp, #0
   22652:	6078      	str	r0, [r7, #4]
   22654:	000a      	movs	r2, r1
   22656:	1cfb      	adds	r3, r7, #3
   22658:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   2265a:	230f      	movs	r3, #15
   2265c:	18fb      	adds	r3, r7, r3
   2265e:	2200      	movs	r2, #0
   22660:	701a      	strb	r2, [r3, #0]
	while (size--) {
   22662:	e038      	b.n	226d6 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   22664:	687b      	ldr	r3, [r7, #4]
   22666:	1c5a      	adds	r2, r3, #1
   22668:	607a      	str	r2, [r7, #4]
   2266a:	220e      	movs	r2, #14
   2266c:	18ba      	adds	r2, r7, r2
   2266e:	781b      	ldrb	r3, [r3, #0]
   22670:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   22672:	230d      	movs	r3, #13
   22674:	18fb      	adds	r3, r7, r3
   22676:	2200      	movs	r2, #0
   22678:	701a      	strb	r2, [r3, #0]
   2267a:	e027      	b.n	226cc <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   2267c:	230f      	movs	r3, #15
   2267e:	18fa      	adds	r2, r7, r3
   22680:	230f      	movs	r3, #15
   22682:	18fb      	adds	r3, r7, r3
   22684:	781b      	ldrb	r3, [r3, #0]
   22686:	18db      	adds	r3, r3, r3
   22688:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   2268a:	230e      	movs	r3, #14
   2268c:	18fa      	adds	r2, r7, r3
   2268e:	230f      	movs	r3, #15
   22690:	18fb      	adds	r3, r7, r3
   22692:	7812      	ldrb	r2, [r2, #0]
   22694:	781b      	ldrb	r3, [r3, #0]
   22696:	4053      	eors	r3, r2
   22698:	b2db      	uxtb	r3, r3
   2269a:	b25b      	sxtb	r3, r3
   2269c:	2b00      	cmp	r3, #0
   2269e:	da07      	bge.n	226b0 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   226a0:	230f      	movs	r3, #15
   226a2:	18fb      	adds	r3, r7, r3
   226a4:	220f      	movs	r2, #15
   226a6:	18ba      	adds	r2, r7, r2
   226a8:	7812      	ldrb	r2, [r2, #0]
   226aa:	2109      	movs	r1, #9
   226ac:	404a      	eors	r2, r1
   226ae:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   226b0:	230e      	movs	r3, #14
   226b2:	18fa      	adds	r2, r7, r3
   226b4:	230e      	movs	r3, #14
   226b6:	18fb      	adds	r3, r7, r3
   226b8:	781b      	ldrb	r3, [r3, #0]
   226ba:	18db      	adds	r3, r3, r3
   226bc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   226be:	230d      	movs	r3, #13
   226c0:	18fb      	adds	r3, r7, r3
   226c2:	781a      	ldrb	r2, [r3, #0]
   226c4:	230d      	movs	r3, #13
   226c6:	18fb      	adds	r3, r7, r3
   226c8:	3201      	adds	r2, #1
   226ca:	701a      	strb	r2, [r3, #0]
   226cc:	230d      	movs	r3, #13
   226ce:	18fb      	adds	r3, r7, r3
   226d0:	781b      	ldrb	r3, [r3, #0]
   226d2:	2b07      	cmp	r3, #7
   226d4:	d9d2      	bls.n	2267c <sd_mmc_spi_crc7+0x30>
	while (size--) {
   226d6:	1cfb      	adds	r3, r7, #3
   226d8:	781b      	ldrb	r3, [r3, #0]
   226da:	1cfa      	adds	r2, r7, #3
   226dc:	1e59      	subs	r1, r3, #1
   226de:	7011      	strb	r1, [r2, #0]
   226e0:	2b00      	cmp	r3, #0
   226e2:	d1bf      	bne.n	22664 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   226e4:	230f      	movs	r3, #15
   226e6:	18fb      	adds	r3, r7, r3
   226e8:	781b      	ldrb	r3, [r3, #0]
   226ea:	005b      	lsls	r3, r3, #1
   226ec:	b25b      	sxtb	r3, r3
   226ee:	2201      	movs	r2, #1
   226f0:	4313      	orrs	r3, r2
   226f2:	b25a      	sxtb	r2, r3
   226f4:	230f      	movs	r3, #15
   226f6:	18fb      	adds	r3, r7, r3
   226f8:	701a      	strb	r2, [r3, #0]
	return crc;
   226fa:	230f      	movs	r3, #15
   226fc:	18fb      	adds	r3, r7, r3
   226fe:	781b      	ldrb	r3, [r3, #0]
}
   22700:	0018      	movs	r0, r3
   22702:	46bd      	mov	sp, r7
   22704:	b004      	add	sp, #16
   22706:	bd80      	pop	{r7, pc}

00022708 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   22708:	b590      	push	{r4, r7, lr}
   2270a:	b083      	sub	sp, #12
   2270c:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   2270e:	1c7b      	adds	r3, r7, #1
   22710:	22ff      	movs	r2, #255	; 0xff
   22712:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   22714:	1cbb      	adds	r3, r7, #2
   22716:	22ff      	movs	r2, #255	; 0xff
   22718:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2271a:	1cbb      	adds	r3, r7, #2
   2271c:	881b      	ldrh	r3, [r3, #0]
   2271e:	1c79      	adds	r1, r7, #1
   22720:	4811      	ldr	r0, [pc, #68]	; (22768 <sd_mmc_spi_wait_busy+0x60>)
   22722:	2201      	movs	r2, #1
   22724:	4c11      	ldr	r4, [pc, #68]	; (2276c <sd_mmc_spi_wait_busy+0x64>)
   22726:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   22728:	4b11      	ldr	r3, [pc, #68]	; (22770 <sd_mmc_spi_wait_busy+0x68>)
   2272a:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2272c:	1cbb      	adds	r3, r7, #2
   2272e:	881b      	ldrh	r3, [r3, #0]
   22730:	1c79      	adds	r1, r7, #1
   22732:	480d      	ldr	r0, [pc, #52]	; (22768 <sd_mmc_spi_wait_busy+0x60>)
   22734:	2201      	movs	r2, #1
   22736:	4c0d      	ldr	r4, [pc, #52]	; (2276c <sd_mmc_spi_wait_busy+0x64>)
   22738:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   2273a:	1cbb      	adds	r3, r7, #2
   2273c:	881b      	ldrh	r3, [r3, #0]
   2273e:	1c79      	adds	r1, r7, #1
   22740:	4809      	ldr	r0, [pc, #36]	; (22768 <sd_mmc_spi_wait_busy+0x60>)
   22742:	2201      	movs	r2, #1
   22744:	4c09      	ldr	r4, [pc, #36]	; (2276c <sd_mmc_spi_wait_busy+0x64>)
   22746:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   22748:	687b      	ldr	r3, [r7, #4]
   2274a:	1e5a      	subs	r2, r3, #1
   2274c:	607a      	str	r2, [r7, #4]
   2274e:	2b00      	cmp	r3, #0
   22750:	d101      	bne.n	22756 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   22752:	2300      	movs	r3, #0
   22754:	e004      	b.n	22760 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   22756:	1c7b      	adds	r3, r7, #1
   22758:	781b      	ldrb	r3, [r3, #0]
   2275a:	2bff      	cmp	r3, #255	; 0xff
   2275c:	d1ed      	bne.n	2273a <sd_mmc_spi_wait_busy+0x32>
	return true;
   2275e:	2301      	movs	r3, #1
}
   22760:	0018      	movs	r0, r3
   22762:	46bd      	mov	sp, r7
   22764:	b003      	add	sp, #12
   22766:	bd90      	pop	{r4, r7, pc}
   22768:	20004170 	.word	0x20004170
   2276c:	0002afb1 	.word	0x0002afb1
   22770:	00030d40 	.word	0x00030d40

00022774 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   22774:	b590      	push	{r4, r7, lr}
   22776:	b083      	sub	sp, #12
   22778:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   2277a:	1cbb      	adds	r3, r7, #2
   2277c:	22ff      	movs	r2, #255	; 0xff
   2277e:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   22780:	1c7b      	adds	r3, r7, #1
   22782:	2200      	movs	r2, #0
   22784:	701a      	strb	r2, [r3, #0]
	i = 500000;
   22786:	4b18      	ldr	r3, [pc, #96]	; (227e8 <sd_mmc_spi_start_read_block+0x74>)
   22788:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   2278a:	687b      	ldr	r3, [r7, #4]
   2278c:	1e5a      	subs	r2, r3, #1
   2278e:	607a      	str	r2, [r7, #4]
   22790:	2b00      	cmp	r3, #0
   22792:	d104      	bne.n	2279e <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   22794:	4b15      	ldr	r3, [pc, #84]	; (227ec <sd_mmc_spi_start_read_block+0x78>)
   22796:	2204      	movs	r2, #4
   22798:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   2279a:	2300      	movs	r3, #0
   2279c:	e020      	b.n	227e0 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   2279e:	1cbb      	adds	r3, r7, #2
   227a0:	881b      	ldrh	r3, [r3, #0]
   227a2:	1c79      	adds	r1, r7, #1
   227a4:	4812      	ldr	r0, [pc, #72]	; (227f0 <sd_mmc_spi_start_read_block+0x7c>)
   227a6:	2201      	movs	r2, #1
   227a8:	4c12      	ldr	r4, [pc, #72]	; (227f4 <sd_mmc_spi_start_read_block+0x80>)
   227aa:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   227ac:	1c7b      	adds	r3, r7, #1
   227ae:	781b      	ldrb	r3, [r3, #0]
   227b0:	001a      	movs	r2, r3
   227b2:	23f0      	movs	r3, #240	; 0xf0
   227b4:	4013      	ands	r3, r2
   227b6:	d10e      	bne.n	227d6 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   227b8:	1c7b      	adds	r3, r7, #1
   227ba:	781b      	ldrb	r3, [r3, #0]
   227bc:	001a      	movs	r2, r3
   227be:	2307      	movs	r3, #7
   227c0:	4013      	ands	r3, r2
   227c2:	d003      	beq.n	227cc <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   227c4:	4b09      	ldr	r3, [pc, #36]	; (227ec <sd_mmc_spi_start_read_block+0x78>)
   227c6:	2207      	movs	r2, #7
   227c8:	701a      	strb	r2, [r3, #0]
   227ca:	e002      	b.n	227d2 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   227cc:	4b07      	ldr	r3, [pc, #28]	; (227ec <sd_mmc_spi_start_read_block+0x78>)
   227ce:	220b      	movs	r2, #11
   227d0:	701a      	strb	r2, [r3, #0]
			}
			return false;
   227d2:	2300      	movs	r3, #0
   227d4:	e004      	b.n	227e0 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   227d6:	1c7b      	adds	r3, r7, #1
   227d8:	781b      	ldrb	r3, [r3, #0]
   227da:	2bfe      	cmp	r3, #254	; 0xfe
   227dc:	d1d5      	bne.n	2278a <sd_mmc_spi_start_read_block+0x16>

	return true;
   227de:	2301      	movs	r3, #1
}
   227e0:	0018      	movs	r0, r3
   227e2:	46bd      	mov	sp, r7
   227e4:	b003      	add	sp, #12
   227e6:	bd90      	pop	{r4, r7, pc}
   227e8:	0007a120 	.word	0x0007a120
   227ec:	200041b3 	.word	0x200041b3
   227f0:	20004170 	.word	0x20004170
   227f4:	0002afb1 	.word	0x0002afb1

000227f8 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   227f8:	b590      	push	{r4, r7, lr}
   227fa:	b083      	sub	sp, #12
   227fc:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   227fe:	1dbb      	adds	r3, r7, #6
   22800:	22ff      	movs	r2, #255	; 0xff
   22802:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   22804:	1dbb      	adds	r3, r7, #6
   22806:	881b      	ldrh	r3, [r3, #0]
   22808:	1d39      	adds	r1, r7, #4
   2280a:	4804      	ldr	r0, [pc, #16]	; (2281c <sd_mmc_spi_stop_read_block+0x24>)
   2280c:	2202      	movs	r2, #2
   2280e:	4c04      	ldr	r4, [pc, #16]	; (22820 <sd_mmc_spi_stop_read_block+0x28>)
   22810:	47a0      	blx	r4
			dummy);
}
   22812:	46c0      	nop			; (mov r8, r8)
   22814:	46bd      	mov	sp, r7
   22816:	b003      	add	sp, #12
   22818:	bd90      	pop	{r4, r7, pc}
   2281a:	46c0      	nop			; (mov r8, r8)
   2281c:	20004170 	.word	0x20004170
   22820:	0002afb1 	.word	0x0002afb1

00022824 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   22824:	b580      	push	{r7, lr}
   22826:	b082      	sub	sp, #8
   22828:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   2282a:	1dfb      	adds	r3, r7, #7
   2282c:	22ff      	movs	r2, #255	; 0xff
   2282e:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   22830:	1df9      	adds	r1, r7, #7
   22832:	4b0d      	ldr	r3, [pc, #52]	; (22868 <sd_mmc_spi_start_write_block+0x44>)
   22834:	2201      	movs	r2, #1
   22836:	0018      	movs	r0, r3
   22838:	4b0c      	ldr	r3, [pc, #48]	; (2286c <sd_mmc_spi_start_write_block+0x48>)
   2283a:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   2283c:	4b0c      	ldr	r3, [pc, #48]	; (22870 <sd_mmc_spi_start_write_block+0x4c>)
   2283e:	881b      	ldrh	r3, [r3, #0]
   22840:	2b01      	cmp	r3, #1
   22842:	d103      	bne.n	2284c <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   22844:	1dbb      	adds	r3, r7, #6
   22846:	22fe      	movs	r2, #254	; 0xfe
   22848:	701a      	strb	r2, [r3, #0]
   2284a:	e002      	b.n	22852 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   2284c:	1dbb      	adds	r3, r7, #6
   2284e:	22fc      	movs	r2, #252	; 0xfc
   22850:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   22852:	1db9      	adds	r1, r7, #6
   22854:	4b04      	ldr	r3, [pc, #16]	; (22868 <sd_mmc_spi_start_write_block+0x44>)
   22856:	2201      	movs	r2, #1
   22858:	0018      	movs	r0, r3
   2285a:	4b04      	ldr	r3, [pc, #16]	; (2286c <sd_mmc_spi_start_write_block+0x48>)
   2285c:	4798      	blx	r3
}
   2285e:	46c0      	nop			; (mov r8, r8)
   22860:	46bd      	mov	sp, r7
   22862:	b002      	add	sp, #8
   22864:	bd80      	pop	{r7, pc}
   22866:	46c0      	nop			; (mov r8, r8)
   22868:	20004170 	.word	0x20004170
   2286c:	0002b1d5 	.word	0x0002b1d5
   22870:	200041be 	.word	0x200041be

00022874 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   22874:	b590      	push	{r4, r7, lr}
   22876:	b083      	sub	sp, #12
   22878:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   2287a:	1dbb      	adds	r3, r7, #6
   2287c:	22ff      	movs	r2, #255	; 0xff
   2287e:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   22880:	1cbb      	adds	r3, r7, #2
   22882:	2201      	movs	r2, #1
   22884:	4252      	negs	r2, r2
   22886:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   22888:	1cb9      	adds	r1, r7, #2
   2288a:	4b1b      	ldr	r3, [pc, #108]	; (228f8 <sd_mmc_spi_stop_write_block+0x84>)
   2288c:	2202      	movs	r2, #2
   2288e:	0018      	movs	r0, r3
   22890:	4b1a      	ldr	r3, [pc, #104]	; (228fc <sd_mmc_spi_stop_write_block+0x88>)
   22892:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   22894:	1dbb      	adds	r3, r7, #6
   22896:	881b      	ldrh	r3, [r3, #0]
   22898:	1d79      	adds	r1, r7, #5
   2289a:	4817      	ldr	r0, [pc, #92]	; (228f8 <sd_mmc_spi_stop_write_block+0x84>)
   2289c:	2201      	movs	r2, #1
   2289e:	4c18      	ldr	r4, [pc, #96]	; (22900 <sd_mmc_spi_stop_write_block+0x8c>)
   228a0:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   228a2:	1d7b      	adds	r3, r7, #5
   228a4:	781b      	ldrb	r3, [r3, #0]
   228a6:	001a      	movs	r2, r3
   228a8:	2310      	movs	r3, #16
   228aa:	4013      	ands	r3, r2
   228ac:	d105      	bne.n	228ba <sd_mmc_spi_stop_write_block+0x46>
   228ae:	1d7b      	adds	r3, r7, #5
   228b0:	781b      	ldrb	r3, [r3, #0]
   228b2:	001a      	movs	r2, r3
   228b4:	2301      	movs	r3, #1
   228b6:	4013      	ands	r3, r2
   228b8:	d104      	bne.n	228c4 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   228ba:	4b12      	ldr	r3, [pc, #72]	; (22904 <sd_mmc_spi_stop_write_block+0x90>)
   228bc:	2201      	movs	r2, #1
   228be:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   228c0:	2300      	movs	r3, #0
   228c2:	e014      	b.n	228ee <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   228c4:	1d7b      	adds	r3, r7, #5
   228c6:	781b      	ldrb	r3, [r3, #0]
   228c8:	001a      	movs	r2, r3
   228ca:	231e      	movs	r3, #30
   228cc:	4013      	ands	r3, r2
   228ce:	2b04      	cmp	r3, #4
   228d0:	d00b      	beq.n	228ea <sd_mmc_spi_stop_write_block+0x76>
   228d2:	2b0a      	cmp	r3, #10
   228d4:	d104      	bne.n	228e0 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   228d6:	4b0b      	ldr	r3, [pc, #44]	; (22904 <sd_mmc_spi_stop_write_block+0x90>)
   228d8:	2208      	movs	r2, #8
   228da:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   228dc:	2300      	movs	r3, #0
   228de:	e006      	b.n	228ee <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   228e0:	4b08      	ldr	r3, [pc, #32]	; (22904 <sd_mmc_spi_stop_write_block+0x90>)
   228e2:	220a      	movs	r2, #10
   228e4:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   228e6:	2300      	movs	r3, #0
   228e8:	e001      	b.n	228ee <sd_mmc_spi_stop_write_block+0x7a>
		break;
   228ea:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   228ec:	2301      	movs	r3, #1
}
   228ee:	0018      	movs	r0, r3
   228f0:	46bd      	mov	sp, r7
   228f2:	b003      	add	sp, #12
   228f4:	bd90      	pop	{r4, r7, pc}
   228f6:	46c0      	nop			; (mov r8, r8)
   228f8:	20004170 	.word	0x20004170
   228fc:	0002b1d5 	.word	0x0002b1d5
   22900:	0002afb1 	.word	0x0002afb1
   22904:	200041b3 	.word	0x200041b3

00022908 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   22908:	b590      	push	{r4, r7, lr}
   2290a:	b083      	sub	sp, #12
   2290c:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   2290e:	4b1d      	ldr	r3, [pc, #116]	; (22984 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   22910:	881b      	ldrh	r3, [r3, #0]
   22912:	2b01      	cmp	r3, #1
   22914:	d101      	bne.n	2291a <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   22916:	2301      	movs	r3, #1
   22918:	e030      	b.n	2297c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   2291a:	4b1a      	ldr	r3, [pc, #104]	; (22984 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   2291c:	881b      	ldrh	r3, [r3, #0]
   2291e:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   22920:	4b19      	ldr	r3, [pc, #100]	; (22988 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   22922:	681a      	ldr	r2, [r3, #0]
   22924:	4b19      	ldr	r3, [pc, #100]	; (2298c <sd_mmc_spi_stop_multiwrite_block+0x84>)
   22926:	881b      	ldrh	r3, [r3, #0]
   22928:	0019      	movs	r1, r3
   2292a:	4b19      	ldr	r3, [pc, #100]	; (22990 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   2292c:	0010      	movs	r0, r2
   2292e:	4798      	blx	r3
   22930:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   22932:	429c      	cmp	r4, r3
   22934:	d901      	bls.n	2293a <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   22936:	2301      	movs	r3, #1
   22938:	e020      	b.n	2297c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   2293a:	1dfb      	adds	r3, r7, #7
   2293c:	22ff      	movs	r2, #255	; 0xff
   2293e:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   22940:	1df9      	adds	r1, r7, #7
   22942:	4b14      	ldr	r3, [pc, #80]	; (22994 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   22944:	2201      	movs	r2, #1
   22946:	0018      	movs	r0, r3
   22948:	4b13      	ldr	r3, [pc, #76]	; (22998 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   2294a:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   2294c:	1dfb      	adds	r3, r7, #7
   2294e:	22fd      	movs	r2, #253	; 0xfd
   22950:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   22952:	1df9      	adds	r1, r7, #7
   22954:	4b0f      	ldr	r3, [pc, #60]	; (22994 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   22956:	2201      	movs	r2, #1
   22958:	0018      	movs	r0, r3
   2295a:	4b0f      	ldr	r3, [pc, #60]	; (22998 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   2295c:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2295e:	4b0f      	ldr	r3, [pc, #60]	; (2299c <sd_mmc_spi_stop_multiwrite_block+0x94>)
   22960:	4798      	blx	r3
   22962:	0003      	movs	r3, r0
   22964:	001a      	movs	r2, r3
   22966:	2301      	movs	r3, #1
   22968:	4053      	eors	r3, r2
   2296a:	b2db      	uxtb	r3, r3
   2296c:	2b00      	cmp	r3, #0
   2296e:	d004      	beq.n	2297a <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   22970:	4b0b      	ldr	r3, [pc, #44]	; (229a0 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   22972:	2205      	movs	r2, #5
   22974:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   22976:	2300      	movs	r3, #0
   22978:	e000      	b.n	2297c <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   2297a:	2301      	movs	r3, #1
}
   2297c:	0018      	movs	r0, r3
   2297e:	46bd      	mov	sp, r7
   22980:	b003      	add	sp, #12
   22982:	bd90      	pop	{r4, r7, pc}
   22984:	200041be 	.word	0x200041be
   22988:	200041b8 	.word	0x200041b8
   2298c:	200041bc 	.word	0x200041bc
   22990:	000359f1 	.word	0x000359f1
   22994:	20004170 	.word	0x20004170
   22998:	0002b1d5 	.word	0x0002b1d5
   2299c:	00022709 	.word	0x00022709
   229a0:	200041b3 	.word	0x200041b3

000229a4 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   229a4:	b580      	push	{r7, lr}
   229a6:	b090      	sub	sp, #64	; 0x40
   229a8:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   229aa:	4b1f      	ldr	r3, [pc, #124]	; (22a28 <sd_mmc_spi_init+0x84>)
   229ac:	2200      	movs	r2, #0
   229ae:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   229b0:	233c      	movs	r3, #60	; 0x3c
   229b2:	18fb      	adds	r3, r7, r3
   229b4:	0018      	movs	r0, r3
   229b6:	4b1d      	ldr	r3, [pc, #116]	; (22a2c <sd_mmc_spi_init+0x88>)
   229b8:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   229ba:	1d3b      	adds	r3, r7, #4
   229bc:	0018      	movs	r0, r3
   229be:	4b1c      	ldr	r3, [pc, #112]	; (22a30 <sd_mmc_spi_init+0x8c>)
   229c0:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   229c2:	1d3b      	adds	r3, r7, #4
   229c4:	2280      	movs	r2, #128	; 0x80
   229c6:	0252      	lsls	r2, r2, #9
   229c8:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   229ca:	1d3b      	adds	r3, r7, #4
   229cc:	4a19      	ldr	r2, [pc, #100]	; (22a34 <sd_mmc_spi_init+0x90>)
   229ce:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   229d0:	1d3b      	adds	r3, r7, #4
   229d2:	4a19      	ldr	r2, [pc, #100]	; (22a38 <sd_mmc_spi_init+0x94>)
   229d4:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   229d6:	1d3b      	adds	r3, r7, #4
   229d8:	4a18      	ldr	r2, [pc, #96]	; (22a3c <sd_mmc_spi_init+0x98>)
   229da:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   229dc:	1d3b      	adds	r3, r7, #4
   229de:	4a18      	ldr	r2, [pc, #96]	; (22a40 <sd_mmc_spi_init+0x9c>)
   229e0:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   229e2:	1d3b      	adds	r3, r7, #4
   229e4:	2224      	movs	r2, #36	; 0x24
   229e6:	2100      	movs	r1, #0
   229e8:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   229ea:	1d3b      	adds	r3, r7, #4
   229ec:	4a15      	ldr	r2, [pc, #84]	; (22a44 <sd_mmc_spi_init+0xa0>)
   229ee:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   229f0:	1d3a      	adds	r2, r7, #4
   229f2:	4915      	ldr	r1, [pc, #84]	; (22a48 <sd_mmc_spi_init+0xa4>)
   229f4:	4b15      	ldr	r3, [pc, #84]	; (22a4c <sd_mmc_spi_init+0xa8>)
   229f6:	0018      	movs	r0, r3
   229f8:	4b15      	ldr	r3, [pc, #84]	; (22a50 <sd_mmc_spi_init+0xac>)
   229fa:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   229fc:	4b13      	ldr	r3, [pc, #76]	; (22a4c <sd_mmc_spi_init+0xa8>)
   229fe:	0018      	movs	r0, r3
   22a00:	4b14      	ldr	r3, [pc, #80]	; (22a54 <sd_mmc_spi_init+0xb0>)
   22a02:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   22a04:	4b14      	ldr	r3, [pc, #80]	; (22a58 <sd_mmc_spi_init+0xb4>)
   22a06:	0018      	movs	r0, r3
   22a08:	4b14      	ldr	r3, [pc, #80]	; (22a5c <sd_mmc_spi_init+0xb8>)
   22a0a:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   22a0c:	4b14      	ldr	r3, [pc, #80]	; (22a60 <sd_mmc_spi_init+0xbc>)
   22a0e:	781a      	ldrb	r2, [r3, #0]
   22a10:	4b11      	ldr	r3, [pc, #68]	; (22a58 <sd_mmc_spi_init+0xb4>)
   22a12:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   22a14:	4a10      	ldr	r2, [pc, #64]	; (22a58 <sd_mmc_spi_init+0xb4>)
   22a16:	4b13      	ldr	r3, [pc, #76]	; (22a64 <sd_mmc_spi_init+0xc0>)
   22a18:	0011      	movs	r1, r2
   22a1a:	0018      	movs	r0, r3
   22a1c:	4b12      	ldr	r3, [pc, #72]	; (22a68 <sd_mmc_spi_init+0xc4>)
   22a1e:	4798      	blx	r3
}
   22a20:	46c0      	nop			; (mov r8, r8)
   22a22:	46bd      	mov	sp, r7
   22a24:	b010      	add	sp, #64	; 0x40
   22a26:	bd80      	pop	{r7, pc}
   22a28:	200041b3 	.word	0x200041b3
   22a2c:	00022459 	.word	0x00022459
   22a30:	000224f1 	.word	0x000224f1
   22a34:	00100002 	.word	0x00100002
   22a38:	00110002 	.word	0x00110002
   22a3c:	00120002 	.word	0x00120002
   22a40:	00130002 	.word	0x00130002
   22a44:	00061a80 	.word	0x00061a80
   22a48:	42000c00 	.word	0x42000c00
   22a4c:	20004170 	.word	0x20004170
   22a50:	0002ae21 	.word	0x0002ae21
   22a54:	000225fd 	.word	0x000225fd
   22a58:	200041b0 	.word	0x200041b0
   22a5c:	00022575 	.word	0x00022575
   22a60:	20000194 	.word	0x20000194
   22a64:	200041ac 	.word	0x200041ac
   22a68:	00022599 	.word	0x00022599

00022a6c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   22a6c:	b590      	push	{r4, r7, lr}
   22a6e:	b083      	sub	sp, #12
   22a70:	af00      	add	r7, sp, #0
   22a72:	0004      	movs	r4, r0
   22a74:	6039      	str	r1, [r7, #0]
   22a76:	0010      	movs	r0, r2
   22a78:	0019      	movs	r1, r3
   22a7a:	1dfb      	adds	r3, r7, #7
   22a7c:	1c22      	adds	r2, r4, #0
   22a7e:	701a      	strb	r2, [r3, #0]
   22a80:	1dbb      	adds	r3, r7, #6
   22a82:	1c02      	adds	r2, r0, #0
   22a84:	701a      	strb	r2, [r3, #0]
   22a86:	1d7b      	adds	r3, r7, #5
   22a88:	1c0a      	adds	r2, r1, #0
   22a8a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22a8c:	4b13      	ldr	r3, [pc, #76]	; (22adc <sd_mmc_spi_select_device+0x70>)
   22a8e:	2200      	movs	r2, #0
   22a90:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   22a92:	683b      	ldr	r3, [r7, #0]
   22a94:	4a12      	ldr	r2, [pc, #72]	; (22ae0 <sd_mmc_spi_select_device+0x74>)
   22a96:	4293      	cmp	r3, r2
   22a98:	d907      	bls.n	22aaa <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   22a9a:	4b11      	ldr	r3, [pc, #68]	; (22ae0 <sd_mmc_spi_select_device+0x74>)
   22a9c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   22a9e:	e004      	b.n	22aaa <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   22aa0:	683b      	ldr	r3, [r7, #0]
   22aa2:	08db      	lsrs	r3, r3, #3
   22aa4:	683a      	ldr	r2, [r7, #0]
   22aa6:	1ad3      	subs	r3, r2, r3
   22aa8:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   22aaa:	683a      	ldr	r2, [r7, #0]
   22aac:	4b0d      	ldr	r3, [pc, #52]	; (22ae4 <sd_mmc_spi_select_device+0x78>)
   22aae:	0011      	movs	r1, r2
   22ab0:	0018      	movs	r0, r3
   22ab2:	4b0d      	ldr	r3, [pc, #52]	; (22ae8 <sd_mmc_spi_select_device+0x7c>)
   22ab4:	4798      	blx	r3
   22ab6:	0003      	movs	r3, r0
   22ab8:	2b17      	cmp	r3, #23
   22aba:	d0f1      	beq.n	22aa0 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   22abc:	1dfb      	adds	r3, r7, #7
   22abe:	781a      	ldrb	r2, [r3, #0]
   22ac0:	0013      	movs	r3, r2
   22ac2:	005b      	lsls	r3, r3, #1
   22ac4:	189b      	adds	r3, r3, r2
   22ac6:	4a09      	ldr	r2, [pc, #36]	; (22aec <sd_mmc_spi_select_device+0x80>)
   22ac8:	1899      	adds	r1, r3, r2
   22aca:	4b06      	ldr	r3, [pc, #24]	; (22ae4 <sd_mmc_spi_select_device+0x78>)
   22acc:	2201      	movs	r2, #1
   22ace:	0018      	movs	r0, r3
   22ad0:	4b07      	ldr	r3, [pc, #28]	; (22af0 <sd_mmc_spi_select_device+0x84>)
   22ad2:	4798      	blx	r3
}
   22ad4:	46c0      	nop			; (mov r8, r8)
   22ad6:	46bd      	mov	sp, r7
   22ad8:	b003      	add	sp, #12
   22ada:	bd90      	pop	{r4, r7, pc}
   22adc:	200041b3 	.word	0x200041b3
   22ae0:	00989680 	.word	0x00989680
   22ae4:	20004170 	.word	0x20004170
   22ae8:	0002ab49 	.word	0x0002ab49
   22aec:	200041ac 	.word	0x200041ac
   22af0:	0002b0e5 	.word	0x0002b0e5

00022af4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   22af4:	b580      	push	{r7, lr}
   22af6:	b082      	sub	sp, #8
   22af8:	af00      	add	r7, sp, #0
   22afa:	0002      	movs	r2, r0
   22afc:	1dfb      	adds	r3, r7, #7
   22afe:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22b00:	4b09      	ldr	r3, [pc, #36]	; (22b28 <sd_mmc_spi_deselect_device+0x34>)
   22b02:	2200      	movs	r2, #0
   22b04:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   22b06:	1dfb      	adds	r3, r7, #7
   22b08:	781a      	ldrb	r2, [r3, #0]
   22b0a:	0013      	movs	r3, r2
   22b0c:	005b      	lsls	r3, r3, #1
   22b0e:	189b      	adds	r3, r3, r2
   22b10:	4a06      	ldr	r2, [pc, #24]	; (22b2c <sd_mmc_spi_deselect_device+0x38>)
   22b12:	1899      	adds	r1, r3, r2
   22b14:	4b06      	ldr	r3, [pc, #24]	; (22b30 <sd_mmc_spi_deselect_device+0x3c>)
   22b16:	2200      	movs	r2, #0
   22b18:	0018      	movs	r0, r3
   22b1a:	4b06      	ldr	r3, [pc, #24]	; (22b34 <sd_mmc_spi_deselect_device+0x40>)
   22b1c:	4798      	blx	r3
}
   22b1e:	46c0      	nop			; (mov r8, r8)
   22b20:	46bd      	mov	sp, r7
   22b22:	b002      	add	sp, #8
   22b24:	bd80      	pop	{r7, pc}
   22b26:	46c0      	nop			; (mov r8, r8)
   22b28:	200041b3 	.word	0x200041b3
   22b2c:	200041ac 	.word	0x200041ac
   22b30:	20004170 	.word	0x20004170
   22b34:	0002b0e5 	.word	0x0002b0e5

00022b38 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   22b38:	b580      	push	{r7, lr}
   22b3a:	b082      	sub	sp, #8
   22b3c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   22b3e:	1dbb      	adds	r3, r7, #6
   22b40:	22ff      	movs	r2, #255	; 0xff
   22b42:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22b44:	4b0c      	ldr	r3, [pc, #48]	; (22b78 <sd_mmc_spi_send_clock+0x40>)
   22b46:	2200      	movs	r2, #0
   22b48:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   22b4a:	1dfb      	adds	r3, r7, #7
   22b4c:	2200      	movs	r2, #0
   22b4e:	701a      	strb	r2, [r3, #0]
   22b50:	e00a      	b.n	22b68 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   22b52:	1db9      	adds	r1, r7, #6
   22b54:	4b09      	ldr	r3, [pc, #36]	; (22b7c <sd_mmc_spi_send_clock+0x44>)
   22b56:	2201      	movs	r2, #1
   22b58:	0018      	movs	r0, r3
   22b5a:	4b09      	ldr	r3, [pc, #36]	; (22b80 <sd_mmc_spi_send_clock+0x48>)
   22b5c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   22b5e:	1dfb      	adds	r3, r7, #7
   22b60:	781a      	ldrb	r2, [r3, #0]
   22b62:	1dfb      	adds	r3, r7, #7
   22b64:	3201      	adds	r2, #1
   22b66:	701a      	strb	r2, [r3, #0]
   22b68:	1dfb      	adds	r3, r7, #7
   22b6a:	781b      	ldrb	r3, [r3, #0]
   22b6c:	2b09      	cmp	r3, #9
   22b6e:	d9f0      	bls.n	22b52 <sd_mmc_spi_send_clock+0x1a>
	}
}
   22b70:	46c0      	nop			; (mov r8, r8)
   22b72:	46bd      	mov	sp, r7
   22b74:	b002      	add	sp, #8
   22b76:	bd80      	pop	{r7, pc}
   22b78:	200041b3 	.word	0x200041b3
   22b7c:	20004170 	.word	0x20004170
   22b80:	0002b1d5 	.word	0x0002b1d5

00022b84 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   22b84:	b590      	push	{r4, r7, lr}
   22b86:	b085      	sub	sp, #20
   22b88:	af02      	add	r7, sp, #8
   22b8a:	6078      	str	r0, [r7, #4]
   22b8c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   22b8e:	6839      	ldr	r1, [r7, #0]
   22b90:	6878      	ldr	r0, [r7, #4]
   22b92:	2300      	movs	r3, #0
   22b94:	9300      	str	r3, [sp, #0]
   22b96:	2300      	movs	r3, #0
   22b98:	2200      	movs	r2, #0
   22b9a:	4c03      	ldr	r4, [pc, #12]	; (22ba8 <sd_mmc_spi_send_cmd+0x24>)
   22b9c:	47a0      	blx	r4
   22b9e:	0003      	movs	r3, r0
}
   22ba0:	0018      	movs	r0, r3
   22ba2:	46bd      	mov	sp, r7
   22ba4:	b003      	add	sp, #12
   22ba6:	bd90      	pop	{r4, r7, pc}
   22ba8:	00022bad 	.word	0x00022bad

00022bac <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   22bac:	b590      	push	{r4, r7, lr}
   22bae:	b089      	sub	sp, #36	; 0x24
   22bb0:	af00      	add	r7, sp, #0
   22bb2:	60f8      	str	r0, [r7, #12]
   22bb4:	60b9      	str	r1, [r7, #8]
   22bb6:	0019      	movs	r1, r3
   22bb8:	1dbb      	adds	r3, r7, #6
   22bba:	801a      	strh	r2, [r3, #0]
   22bbc:	1d3b      	adds	r3, r7, #4
   22bbe:	1c0a      	adds	r2, r1, #0
   22bc0:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   22bc2:	231b      	movs	r3, #27
   22bc4:	18fb      	adds	r3, r7, r3
   22bc6:	22ff      	movs	r2, #255	; 0xff
   22bc8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   22bca:	231c      	movs	r3, #28
   22bcc:	18fb      	adds	r3, r7, r3
   22bce:	22ff      	movs	r2, #255	; 0xff
   22bd0:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22bd2:	4b72      	ldr	r3, [pc, #456]	; (22d9c <sd_mmc_spi_adtc_start+0x1f0>)
   22bd4:	2200      	movs	r2, #0
   22bd6:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   22bd8:	68fb      	ldr	r3, [r7, #12]
   22bda:	b2db      	uxtb	r3, r3
   22bdc:	223f      	movs	r2, #63	; 0x3f
   22bde:	4013      	ands	r3, r2
   22be0:	b2db      	uxtb	r3, r3
   22be2:	2240      	movs	r2, #64	; 0x40
   22be4:	4313      	orrs	r3, r2
   22be6:	b2da      	uxtb	r2, r3
   22be8:	2314      	movs	r3, #20
   22bea:	18fb      	adds	r3, r7, r3
   22bec:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   22bee:	68bb      	ldr	r3, [r7, #8]
   22bf0:	0e1b      	lsrs	r3, r3, #24
   22bf2:	b2da      	uxtb	r2, r3
   22bf4:	2314      	movs	r3, #20
   22bf6:	18fb      	adds	r3, r7, r3
   22bf8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   22bfa:	68bb      	ldr	r3, [r7, #8]
   22bfc:	0c1b      	lsrs	r3, r3, #16
   22bfe:	b2da      	uxtb	r2, r3
   22c00:	2314      	movs	r3, #20
   22c02:	18fb      	adds	r3, r7, r3
   22c04:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   22c06:	68bb      	ldr	r3, [r7, #8]
   22c08:	0a1b      	lsrs	r3, r3, #8
   22c0a:	b2da      	uxtb	r2, r3
   22c0c:	2314      	movs	r3, #20
   22c0e:	18fb      	adds	r3, r7, r3
   22c10:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   22c12:	68bb      	ldr	r3, [r7, #8]
   22c14:	b2da      	uxtb	r2, r3
   22c16:	2314      	movs	r3, #20
   22c18:	18fb      	adds	r3, r7, r3
   22c1a:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   22c1c:	2314      	movs	r3, #20
   22c1e:	18fb      	adds	r3, r7, r3
   22c20:	2105      	movs	r1, #5
   22c22:	0018      	movs	r0, r3
   22c24:	4b5e      	ldr	r3, [pc, #376]	; (22da0 <sd_mmc_spi_adtc_start+0x1f4>)
   22c26:	4798      	blx	r3
   22c28:	0003      	movs	r3, r0
   22c2a:	001a      	movs	r2, r3
   22c2c:	2314      	movs	r3, #20
   22c2e:	18fb      	adds	r3, r7, r3
   22c30:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   22c32:	231b      	movs	r3, #27
   22c34:	18f9      	adds	r1, r7, r3
   22c36:	4b5b      	ldr	r3, [pc, #364]	; (22da4 <sd_mmc_spi_adtc_start+0x1f8>)
   22c38:	2201      	movs	r2, #1
   22c3a:	0018      	movs	r0, r3
   22c3c:	4b5a      	ldr	r3, [pc, #360]	; (22da8 <sd_mmc_spi_adtc_start+0x1fc>)
   22c3e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   22c40:	2314      	movs	r3, #20
   22c42:	18f9      	adds	r1, r7, r3
   22c44:	4b57      	ldr	r3, [pc, #348]	; (22da4 <sd_mmc_spi_adtc_start+0x1f8>)
   22c46:	2206      	movs	r2, #6
   22c48:	0018      	movs	r0, r3
   22c4a:	4b57      	ldr	r3, [pc, #348]	; (22da8 <sd_mmc_spi_adtc_start+0x1fc>)
   22c4c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   22c4e:	2313      	movs	r3, #19
   22c50:	18fb      	adds	r3, r7, r3
   22c52:	22ff      	movs	r2, #255	; 0xff
   22c54:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   22c56:	231c      	movs	r3, #28
   22c58:	18fb      	adds	r3, r7, r3
   22c5a:	881b      	ldrh	r3, [r3, #0]
   22c5c:	2213      	movs	r2, #19
   22c5e:	18b9      	adds	r1, r7, r2
   22c60:	4850      	ldr	r0, [pc, #320]	; (22da4 <sd_mmc_spi_adtc_start+0x1f8>)
   22c62:	2201      	movs	r2, #1
   22c64:	4c51      	ldr	r4, [pc, #324]	; (22dac <sd_mmc_spi_adtc_start+0x200>)
   22c66:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   22c68:	231f      	movs	r3, #31
   22c6a:	18fb      	adds	r3, r7, r3
   22c6c:	2207      	movs	r2, #7
   22c6e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   22c70:	231c      	movs	r3, #28
   22c72:	18fb      	adds	r3, r7, r3
   22c74:	881b      	ldrh	r3, [r3, #0]
   22c76:	2213      	movs	r2, #19
   22c78:	18b9      	adds	r1, r7, r2
   22c7a:	484a      	ldr	r0, [pc, #296]	; (22da4 <sd_mmc_spi_adtc_start+0x1f8>)
   22c7c:	2201      	movs	r2, #1
   22c7e:	4c4b      	ldr	r4, [pc, #300]	; (22dac <sd_mmc_spi_adtc_start+0x200>)
   22c80:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   22c82:	2313      	movs	r3, #19
   22c84:	18fb      	adds	r3, r7, r3
   22c86:	781b      	ldrb	r3, [r3, #0]
   22c88:	b25b      	sxtb	r3, r3
   22c8a:	2b00      	cmp	r3, #0
   22c8c:	da10      	bge.n	22cb0 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   22c8e:	231f      	movs	r3, #31
   22c90:	18fb      	adds	r3, r7, r3
   22c92:	221f      	movs	r2, #31
   22c94:	18ba      	adds	r2, r7, r2
   22c96:	7812      	ldrb	r2, [r2, #0]
   22c98:	3a01      	subs	r2, #1
   22c9a:	701a      	strb	r2, [r3, #0]
   22c9c:	231f      	movs	r3, #31
   22c9e:	18fb      	adds	r3, r7, r3
   22ca0:	781b      	ldrb	r3, [r3, #0]
   22ca2:	2b00      	cmp	r3, #0
   22ca4:	d1e4      	bne.n	22c70 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   22ca6:	4b3d      	ldr	r3, [pc, #244]	; (22d9c <sd_mmc_spi_adtc_start+0x1f0>)
   22ca8:	2202      	movs	r2, #2
   22caa:	701a      	strb	r2, [r3, #0]
			return false;
   22cac:	2300      	movs	r3, #0
   22cae:	e070      	b.n	22d92 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   22cb0:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   22cb2:	2313      	movs	r3, #19
   22cb4:	18fb      	adds	r3, r7, r3
   22cb6:	781b      	ldrb	r3, [r3, #0]
   22cb8:	001a      	movs	r2, r3
   22cba:	4b3d      	ldr	r3, [pc, #244]	; (22db0 <sd_mmc_spi_adtc_start+0x204>)
   22cbc:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   22cbe:	2313      	movs	r3, #19
   22cc0:	18fb      	adds	r3, r7, r3
   22cc2:	781b      	ldrb	r3, [r3, #0]
   22cc4:	001a      	movs	r2, r3
   22cc6:	2308      	movs	r3, #8
   22cc8:	4013      	ands	r3, r2
   22cca:	d004      	beq.n	22cd6 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   22ccc:	4b33      	ldr	r3, [pc, #204]	; (22d9c <sd_mmc_spi_adtc_start+0x1f0>)
   22cce:	2206      	movs	r2, #6
   22cd0:	701a      	strb	r2, [r3, #0]
		return false;
   22cd2:	2300      	movs	r3, #0
   22cd4:	e05d      	b.n	22d92 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   22cd6:	2313      	movs	r3, #19
   22cd8:	18fb      	adds	r3, r7, r3
   22cda:	781b      	ldrb	r3, [r3, #0]
   22cdc:	001a      	movs	r2, r3
   22cde:	2304      	movs	r3, #4
   22ce0:	4013      	ands	r3, r2
   22ce2:	d004      	beq.n	22cee <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   22ce4:	4b2d      	ldr	r3, [pc, #180]	; (22d9c <sd_mmc_spi_adtc_start+0x1f0>)
   22ce6:	2209      	movs	r2, #9
   22ce8:	701a      	strb	r2, [r3, #0]
		return false;
   22cea:	2300      	movs	r3, #0
   22cec:	e051      	b.n	22d92 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   22cee:	2313      	movs	r3, #19
   22cf0:	18fb      	adds	r3, r7, r3
   22cf2:	781b      	ldrb	r3, [r3, #0]
   22cf4:	001a      	movs	r2, r3
   22cf6:	2301      	movs	r3, #1
   22cf8:	439a      	bics	r2, r3
   22cfa:	1e13      	subs	r3, r2, #0
   22cfc:	d004      	beq.n	22d08 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   22cfe:	4b27      	ldr	r3, [pc, #156]	; (22d9c <sd_mmc_spi_adtc_start+0x1f0>)
   22d00:	2201      	movs	r2, #1
   22d02:	701a      	strb	r2, [r3, #0]
		return false;
   22d04:	2300      	movs	r3, #0
   22d06:	e044      	b.n	22d92 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   22d08:	68fa      	ldr	r2, [r7, #12]
   22d0a:	2380      	movs	r3, #128	; 0x80
   22d0c:	019b      	lsls	r3, r3, #6
   22d0e:	4013      	ands	r3, r2
   22d10:	d00d      	beq.n	22d2e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   22d12:	4b28      	ldr	r3, [pc, #160]	; (22db4 <sd_mmc_spi_adtc_start+0x208>)
   22d14:	4798      	blx	r3
   22d16:	0003      	movs	r3, r0
   22d18:	001a      	movs	r2, r3
   22d1a:	2301      	movs	r3, #1
   22d1c:	4053      	eors	r3, r2
   22d1e:	b2db      	uxtb	r3, r3
   22d20:	2b00      	cmp	r3, #0
   22d22:	d004      	beq.n	22d2e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   22d24:	4b1d      	ldr	r3, [pc, #116]	; (22d9c <sd_mmc_spi_adtc_start+0x1f0>)
   22d26:	2203      	movs	r2, #3
   22d28:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   22d2a:	2300      	movs	r3, #0
   22d2c:	e031      	b.n	22d92 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   22d2e:	68fa      	ldr	r2, [r7, #12]
   22d30:	2380      	movs	r3, #128	; 0x80
   22d32:	009b      	lsls	r3, r3, #2
   22d34:	4013      	ands	r3, r2
   22d36:	d00e      	beq.n	22d56 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   22d38:	4b1d      	ldr	r3, [pc, #116]	; (22db0 <sd_mmc_spi_adtc_start+0x204>)
   22d3a:	2200      	movs	r2, #0
   22d3c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   22d3e:	231c      	movs	r3, #28
   22d40:	18fb      	adds	r3, r7, r3
   22d42:	881b      	ldrh	r3, [r3, #0]
   22d44:	491a      	ldr	r1, [pc, #104]	; (22db0 <sd_mmc_spi_adtc_start+0x204>)
   22d46:	4817      	ldr	r0, [pc, #92]	; (22da4 <sd_mmc_spi_adtc_start+0x1f8>)
   22d48:	2201      	movs	r2, #1
   22d4a:	4c18      	ldr	r4, [pc, #96]	; (22dac <sd_mmc_spi_adtc_start+0x200>)
   22d4c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   22d4e:	4b18      	ldr	r3, [pc, #96]	; (22db0 <sd_mmc_spi_adtc_start+0x204>)
   22d50:	681a      	ldr	r2, [r3, #0]
   22d52:	4b17      	ldr	r3, [pc, #92]	; (22db0 <sd_mmc_spi_adtc_start+0x204>)
   22d54:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   22d56:	68fa      	ldr	r2, [r7, #12]
   22d58:	2380      	movs	r3, #128	; 0x80
   22d5a:	00db      	lsls	r3, r3, #3
   22d5c:	4013      	ands	r3, r2
   22d5e:	d00c      	beq.n	22d7a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   22d60:	231c      	movs	r3, #28
   22d62:	18fb      	adds	r3, r7, r3
   22d64:	881b      	ldrh	r3, [r3, #0]
   22d66:	4912      	ldr	r1, [pc, #72]	; (22db0 <sd_mmc_spi_adtc_start+0x204>)
   22d68:	480e      	ldr	r0, [pc, #56]	; (22da4 <sd_mmc_spi_adtc_start+0x1f8>)
   22d6a:	2204      	movs	r2, #4
   22d6c:	4c0f      	ldr	r4, [pc, #60]	; (22dac <sd_mmc_spi_adtc_start+0x200>)
   22d6e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   22d70:	4b0f      	ldr	r3, [pc, #60]	; (22db0 <sd_mmc_spi_adtc_start+0x204>)
   22d72:	681b      	ldr	r3, [r3, #0]
   22d74:	ba1a      	rev	r2, r3
   22d76:	4b0e      	ldr	r3, [pc, #56]	; (22db0 <sd_mmc_spi_adtc_start+0x204>)
   22d78:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   22d7a:	4b0f      	ldr	r3, [pc, #60]	; (22db8 <sd_mmc_spi_adtc_start+0x20c>)
   22d7c:	1dba      	adds	r2, r7, #6
   22d7e:	8812      	ldrh	r2, [r2, #0]
   22d80:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   22d82:	4b0e      	ldr	r3, [pc, #56]	; (22dbc <sd_mmc_spi_adtc_start+0x210>)
   22d84:	1d3a      	adds	r2, r7, #4
   22d86:	8812      	ldrh	r2, [r2, #0]
   22d88:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   22d8a:	4b0d      	ldr	r3, [pc, #52]	; (22dc0 <sd_mmc_spi_adtc_start+0x214>)
   22d8c:	2200      	movs	r2, #0
   22d8e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   22d90:	2301      	movs	r3, #1
}
   22d92:	0018      	movs	r0, r3
   22d94:	46bd      	mov	sp, r7
   22d96:	b009      	add	sp, #36	; 0x24
   22d98:	bd90      	pop	{r4, r7, pc}
   22d9a:	46c0      	nop			; (mov r8, r8)
   22d9c:	200041b3 	.word	0x200041b3
   22da0:	0002264d 	.word	0x0002264d
   22da4:	20004170 	.word	0x20004170
   22da8:	0002b1d5 	.word	0x0002b1d5
   22dac:	0002afb1 	.word	0x0002afb1
   22db0:	200041b4 	.word	0x200041b4
   22db4:	00022709 	.word	0x00022709
   22db8:	200041bc 	.word	0x200041bc
   22dbc:	200041be 	.word	0x200041be
   22dc0:	200041b8 	.word	0x200041b8

00022dc4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   22dc4:	b580      	push	{r7, lr}
   22dc6:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   22dc8:	4b02      	ldr	r3, [pc, #8]	; (22dd4 <sd_mmc_spi_get_response+0x10>)
   22dca:	681b      	ldr	r3, [r3, #0]
}
   22dcc:	0018      	movs	r0, r3
   22dce:	46bd      	mov	sp, r7
   22dd0:	bd80      	pop	{r7, pc}
   22dd2:	46c0      	nop			; (mov r8, r8)
   22dd4:	200041b4 	.word	0x200041b4

00022dd8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   22dd8:	b590      	push	{r4, r7, lr}
   22dda:	b085      	sub	sp, #20
   22ddc:	af00      	add	r7, sp, #0
   22dde:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   22de0:	230e      	movs	r3, #14
   22de2:	18fb      	adds	r3, r7, r3
   22de4:	22ff      	movs	r2, #255	; 0xff
   22de6:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22de8:	4b1c      	ldr	r3, [pc, #112]	; (22e5c <sd_mmc_spi_read_word+0x84>)
   22dea:	2200      	movs	r2, #0
   22dec:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   22dee:	4b1c      	ldr	r3, [pc, #112]	; (22e60 <sd_mmc_spi_read_word+0x88>)
   22df0:	681a      	ldr	r2, [r3, #0]
   22df2:	4b1c      	ldr	r3, [pc, #112]	; (22e64 <sd_mmc_spi_read_word+0x8c>)
   22df4:	881b      	ldrh	r3, [r3, #0]
   22df6:	0019      	movs	r1, r3
   22df8:	4b1b      	ldr	r3, [pc, #108]	; (22e68 <sd_mmc_spi_read_word+0x90>)
   22dfa:	0010      	movs	r0, r2
   22dfc:	4798      	blx	r3
   22dfe:	1e0b      	subs	r3, r1, #0
   22e00:	d10a      	bne.n	22e18 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   22e02:	4b1a      	ldr	r3, [pc, #104]	; (22e6c <sd_mmc_spi_read_word+0x94>)
   22e04:	4798      	blx	r3
   22e06:	0003      	movs	r3, r0
   22e08:	001a      	movs	r2, r3
   22e0a:	2301      	movs	r3, #1
   22e0c:	4053      	eors	r3, r2
   22e0e:	b2db      	uxtb	r3, r3
   22e10:	2b00      	cmp	r3, #0
   22e12:	d001      	beq.n	22e18 <sd_mmc_spi_read_word+0x40>
			return false;
   22e14:	2300      	movs	r3, #0
   22e16:	e01d      	b.n	22e54 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   22e18:	230e      	movs	r3, #14
   22e1a:	18fb      	adds	r3, r7, r3
   22e1c:	881b      	ldrh	r3, [r3, #0]
   22e1e:	1d39      	adds	r1, r7, #4
   22e20:	4813      	ldr	r0, [pc, #76]	; (22e70 <sd_mmc_spi_read_word+0x98>)
   22e22:	2204      	movs	r2, #4
   22e24:	4c13      	ldr	r4, [pc, #76]	; (22e74 <sd_mmc_spi_read_word+0x9c>)
   22e26:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   22e28:	687b      	ldr	r3, [r7, #4]
   22e2a:	687a      	ldr	r2, [r7, #4]
   22e2c:	6812      	ldr	r2, [r2, #0]
   22e2e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   22e30:	4b0b      	ldr	r3, [pc, #44]	; (22e60 <sd_mmc_spi_read_word+0x88>)
   22e32:	681b      	ldr	r3, [r3, #0]
   22e34:	1d1a      	adds	r2, r3, #4
   22e36:	4b0a      	ldr	r3, [pc, #40]	; (22e60 <sd_mmc_spi_read_word+0x88>)
   22e38:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   22e3a:	4b09      	ldr	r3, [pc, #36]	; (22e60 <sd_mmc_spi_read_word+0x88>)
   22e3c:	681a      	ldr	r2, [r3, #0]
   22e3e:	4b09      	ldr	r3, [pc, #36]	; (22e64 <sd_mmc_spi_read_word+0x8c>)
   22e40:	881b      	ldrh	r3, [r3, #0]
   22e42:	0019      	movs	r1, r3
   22e44:	4b08      	ldr	r3, [pc, #32]	; (22e68 <sd_mmc_spi_read_word+0x90>)
   22e46:	0010      	movs	r0, r2
   22e48:	4798      	blx	r3
   22e4a:	1e0b      	subs	r3, r1, #0
   22e4c:	d101      	bne.n	22e52 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   22e4e:	4b0a      	ldr	r3, [pc, #40]	; (22e78 <sd_mmc_spi_read_word+0xa0>)
   22e50:	4798      	blx	r3
	}
	return true;
   22e52:	2301      	movs	r3, #1
}
   22e54:	0018      	movs	r0, r3
   22e56:	46bd      	mov	sp, r7
   22e58:	b005      	add	sp, #20
   22e5a:	bd90      	pop	{r4, r7, pc}
   22e5c:	200041b3 	.word	0x200041b3
   22e60:	200041b8 	.word	0x200041b8
   22e64:	200041bc 	.word	0x200041bc
   22e68:	00035afd 	.word	0x00035afd
   22e6c:	00022775 	.word	0x00022775
   22e70:	20004170 	.word	0x20004170
   22e74:	0002afb1 	.word	0x0002afb1
   22e78:	000227f9 	.word	0x000227f9

00022e7c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   22e7c:	b590      	push	{r4, r7, lr}
   22e7e:	b085      	sub	sp, #20
   22e80:	af00      	add	r7, sp, #0
   22e82:	6078      	str	r0, [r7, #4]
   22e84:	000a      	movs	r2, r1
   22e86:	1cbb      	adds	r3, r7, #2
   22e88:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   22e8a:	230a      	movs	r3, #10
   22e8c:	18fb      	adds	r3, r7, r3
   22e8e:	22ff      	movs	r2, #255	; 0xff
   22e90:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22e92:	4b1c      	ldr	r3, [pc, #112]	; (22f04 <sd_mmc_spi_start_read_blocks+0x88>)
   22e94:	2200      	movs	r2, #0
   22e96:	701a      	strb	r2, [r3, #0]
	pos = 0;
   22e98:	2300      	movs	r3, #0
   22e9a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   22e9c:	e025      	b.n	22eea <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   22e9e:	4b1a      	ldr	r3, [pc, #104]	; (22f08 <sd_mmc_spi_start_read_blocks+0x8c>)
   22ea0:	4798      	blx	r3
   22ea2:	0003      	movs	r3, r0
   22ea4:	001a      	movs	r2, r3
   22ea6:	2301      	movs	r3, #1
   22ea8:	4053      	eors	r3, r2
   22eaa:	b2db      	uxtb	r3, r3
   22eac:	2b00      	cmp	r3, #0
   22eae:	d001      	beq.n	22eb4 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   22eb0:	2300      	movs	r3, #0
   22eb2:	e022      	b.n	22efa <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   22eb4:	687a      	ldr	r2, [r7, #4]
   22eb6:	68fb      	ldr	r3, [r7, #12]
   22eb8:	18d1      	adds	r1, r2, r3
   22eba:	4b14      	ldr	r3, [pc, #80]	; (22f0c <sd_mmc_spi_start_read_blocks+0x90>)
   22ebc:	881a      	ldrh	r2, [r3, #0]
   22ebe:	230a      	movs	r3, #10
   22ec0:	18fb      	adds	r3, r7, r3
   22ec2:	881b      	ldrh	r3, [r3, #0]
   22ec4:	4812      	ldr	r0, [pc, #72]	; (22f10 <sd_mmc_spi_start_read_blocks+0x94>)
   22ec6:	4c13      	ldr	r4, [pc, #76]	; (22f14 <sd_mmc_spi_start_read_blocks+0x98>)
   22ec8:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   22eca:	4b10      	ldr	r3, [pc, #64]	; (22f0c <sd_mmc_spi_start_read_blocks+0x90>)
   22ecc:	881b      	ldrh	r3, [r3, #0]
   22ece:	001a      	movs	r2, r3
   22ed0:	68fb      	ldr	r3, [r7, #12]
   22ed2:	189b      	adds	r3, r3, r2
   22ed4:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   22ed6:	4b0d      	ldr	r3, [pc, #52]	; (22f0c <sd_mmc_spi_start_read_blocks+0x90>)
   22ed8:	881b      	ldrh	r3, [r3, #0]
   22eda:	001a      	movs	r2, r3
   22edc:	4b0e      	ldr	r3, [pc, #56]	; (22f18 <sd_mmc_spi_start_read_blocks+0x9c>)
   22ede:	681b      	ldr	r3, [r3, #0]
   22ee0:	18d2      	adds	r2, r2, r3
   22ee2:	4b0d      	ldr	r3, [pc, #52]	; (22f18 <sd_mmc_spi_start_read_blocks+0x9c>)
   22ee4:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   22ee6:	4b0d      	ldr	r3, [pc, #52]	; (22f1c <sd_mmc_spi_start_read_blocks+0xa0>)
   22ee8:	4798      	blx	r3
	while (nb_block--) {
   22eea:	1cbb      	adds	r3, r7, #2
   22eec:	881b      	ldrh	r3, [r3, #0]
   22eee:	1cba      	adds	r2, r7, #2
   22ef0:	1e59      	subs	r1, r3, #1
   22ef2:	8011      	strh	r1, [r2, #0]
   22ef4:	2b00      	cmp	r3, #0
   22ef6:	d1d2      	bne.n	22e9e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   22ef8:	2301      	movs	r3, #1
}
   22efa:	0018      	movs	r0, r3
   22efc:	46bd      	mov	sp, r7
   22efe:	b005      	add	sp, #20
   22f00:	bd90      	pop	{r4, r7, pc}
   22f02:	46c0      	nop			; (mov r8, r8)
   22f04:	200041b3 	.word	0x200041b3
   22f08:	00022775 	.word	0x00022775
   22f0c:	200041bc 	.word	0x200041bc
   22f10:	20004170 	.word	0x20004170
   22f14:	0002afb1 	.word	0x0002afb1
   22f18:	200041b8 	.word	0x200041b8
   22f1c:	000227f9 	.word	0x000227f9

00022f20 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   22f20:	b580      	push	{r7, lr}
   22f22:	af00      	add	r7, sp, #0
	return true;
   22f24:	2301      	movs	r3, #1
}
   22f26:	0018      	movs	r0, r3
   22f28:	46bd      	mov	sp, r7
   22f2a:	bd80      	pop	{r7, pc}

00022f2c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   22f2c:	b580      	push	{r7, lr}
   22f2e:	b084      	sub	sp, #16
   22f30:	af00      	add	r7, sp, #0
   22f32:	6078      	str	r0, [r7, #4]
   22f34:	000a      	movs	r2, r1
   22f36:	1cbb      	adds	r3, r7, #2
   22f38:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   22f3a:	4b24      	ldr	r3, [pc, #144]	; (22fcc <sd_mmc_spi_start_write_blocks+0xa0>)
   22f3c:	2200      	movs	r2, #0
   22f3e:	701a      	strb	r2, [r3, #0]
	pos = 0;
   22f40:	2300      	movs	r3, #0
   22f42:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   22f44:	e035      	b.n	22fb2 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   22f46:	4b22      	ldr	r3, [pc, #136]	; (22fd0 <sd_mmc_spi_start_write_blocks+0xa4>)
   22f48:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   22f4a:	687a      	ldr	r2, [r7, #4]
   22f4c:	68fb      	ldr	r3, [r7, #12]
   22f4e:	18d1      	adds	r1, r2, r3
   22f50:	4b20      	ldr	r3, [pc, #128]	; (22fd4 <sd_mmc_spi_start_write_blocks+0xa8>)
   22f52:	881a      	ldrh	r2, [r3, #0]
   22f54:	4b20      	ldr	r3, [pc, #128]	; (22fd8 <sd_mmc_spi_start_write_blocks+0xac>)
   22f56:	0018      	movs	r0, r3
   22f58:	4b20      	ldr	r3, [pc, #128]	; (22fdc <sd_mmc_spi_start_write_blocks+0xb0>)
   22f5a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   22f5c:	4b1d      	ldr	r3, [pc, #116]	; (22fd4 <sd_mmc_spi_start_write_blocks+0xa8>)
   22f5e:	881b      	ldrh	r3, [r3, #0]
   22f60:	001a      	movs	r2, r3
   22f62:	68fb      	ldr	r3, [r7, #12]
   22f64:	189b      	adds	r3, r3, r2
   22f66:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   22f68:	4b1a      	ldr	r3, [pc, #104]	; (22fd4 <sd_mmc_spi_start_write_blocks+0xa8>)
   22f6a:	881b      	ldrh	r3, [r3, #0]
   22f6c:	001a      	movs	r2, r3
   22f6e:	4b1c      	ldr	r3, [pc, #112]	; (22fe0 <sd_mmc_spi_start_write_blocks+0xb4>)
   22f70:	681b      	ldr	r3, [r3, #0]
   22f72:	18d2      	adds	r2, r2, r3
   22f74:	4b1a      	ldr	r3, [pc, #104]	; (22fe0 <sd_mmc_spi_start_write_blocks+0xb4>)
   22f76:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   22f78:	4b1a      	ldr	r3, [pc, #104]	; (22fe4 <sd_mmc_spi_start_write_blocks+0xb8>)
   22f7a:	4798      	blx	r3
   22f7c:	0003      	movs	r3, r0
   22f7e:	001a      	movs	r2, r3
   22f80:	2301      	movs	r3, #1
   22f82:	4053      	eors	r3, r2
   22f84:	b2db      	uxtb	r3, r3
   22f86:	2b00      	cmp	r3, #0
   22f88:	d001      	beq.n	22f8e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   22f8a:	2300      	movs	r3, #0
   22f8c:	e019      	b.n	22fc2 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   22f8e:	1cbb      	adds	r3, r7, #2
   22f90:	881b      	ldrh	r3, [r3, #0]
   22f92:	2b00      	cmp	r3, #0
   22f94:	d00d      	beq.n	22fb2 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   22f96:	4b14      	ldr	r3, [pc, #80]	; (22fe8 <sd_mmc_spi_start_write_blocks+0xbc>)
   22f98:	4798      	blx	r3
   22f9a:	0003      	movs	r3, r0
   22f9c:	001a      	movs	r2, r3
   22f9e:	2301      	movs	r3, #1
   22fa0:	4053      	eors	r3, r2
   22fa2:	b2db      	uxtb	r3, r3
   22fa4:	2b00      	cmp	r3, #0
   22fa6:	d004      	beq.n	22fb2 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   22fa8:	4b08      	ldr	r3, [pc, #32]	; (22fcc <sd_mmc_spi_start_write_blocks+0xa0>)
   22faa:	2205      	movs	r2, #5
   22fac:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   22fae:	2300      	movs	r3, #0
   22fb0:	e007      	b.n	22fc2 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   22fb2:	1cbb      	adds	r3, r7, #2
   22fb4:	881b      	ldrh	r3, [r3, #0]
   22fb6:	1cba      	adds	r2, r7, #2
   22fb8:	1e59      	subs	r1, r3, #1
   22fba:	8011      	strh	r1, [r2, #0]
   22fbc:	2b00      	cmp	r3, #0
   22fbe:	d1c2      	bne.n	22f46 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   22fc0:	2301      	movs	r3, #1
}
   22fc2:	0018      	movs	r0, r3
   22fc4:	46bd      	mov	sp, r7
   22fc6:	b004      	add	sp, #16
   22fc8:	bd80      	pop	{r7, pc}
   22fca:	46c0      	nop			; (mov r8, r8)
   22fcc:	200041b3 	.word	0x200041b3
   22fd0:	00022825 	.word	0x00022825
   22fd4:	200041bc 	.word	0x200041bc
   22fd8:	20004170 	.word	0x20004170
   22fdc:	0002b1d5 	.word	0x0002b1d5
   22fe0:	200041b8 	.word	0x200041b8
   22fe4:	00022875 	.word	0x00022875
   22fe8:	00022709 	.word	0x00022709

00022fec <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   22fec:	b580      	push	{r7, lr}
   22fee:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   22ff0:	4b09      	ldr	r3, [pc, #36]	; (23018 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   22ff2:	4798      	blx	r3
   22ff4:	0003      	movs	r3, r0
   22ff6:	001a      	movs	r2, r3
   22ff8:	2301      	movs	r3, #1
   22ffa:	4053      	eors	r3, r2
   22ffc:	b2db      	uxtb	r3, r3
   22ffe:	2b00      	cmp	r3, #0
   23000:	d004      	beq.n	2300c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   23002:	4b06      	ldr	r3, [pc, #24]	; (2301c <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   23004:	2205      	movs	r2, #5
   23006:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   23008:	2300      	movs	r3, #0
   2300a:	e002      	b.n	23012 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   2300c:	4b04      	ldr	r3, [pc, #16]	; (23020 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   2300e:	4798      	blx	r3
   23010:	0003      	movs	r3, r0
}
   23012:	0018      	movs	r0, r3
   23014:	46bd      	mov	sp, r7
   23016:	bd80      	pop	{r7, pc}
   23018:	00022709 	.word	0x00022709
   2301c:	200041b3 	.word	0x200041b3
   23020:	00022909 	.word	0x00022909

00023024 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   23024:	b580      	push	{r7, lr}
   23026:	b082      	sub	sp, #8
   23028:	af00      	add	r7, sp, #0
   2302a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   2302c:	687b      	ldr	r3, [r7, #4]
   2302e:	2b00      	cmp	r3, #0
   23030:	d00c      	beq.n	2304c <delay_cycles+0x28>
		SysTick->LOAD = n;
   23032:	4b08      	ldr	r3, [pc, #32]	; (23054 <delay_cycles+0x30>)
   23034:	687a      	ldr	r2, [r7, #4]
   23036:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   23038:	4b06      	ldr	r3, [pc, #24]	; (23054 <delay_cycles+0x30>)
   2303a:	2200      	movs	r2, #0
   2303c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   2303e:	46c0      	nop			; (mov r8, r8)
   23040:	4b04      	ldr	r3, [pc, #16]	; (23054 <delay_cycles+0x30>)
   23042:	681a      	ldr	r2, [r3, #0]
   23044:	2380      	movs	r3, #128	; 0x80
   23046:	025b      	lsls	r3, r3, #9
   23048:	4013      	ands	r3, r2
   2304a:	d0f9      	beq.n	23040 <delay_cycles+0x1c>
		};
	}
}
   2304c:	46c0      	nop			; (mov r8, r8)
   2304e:	46bd      	mov	sp, r7
   23050:	b002      	add	sp, #8
   23052:	bd80      	pop	{r7, pc}
   23054:	e000e010 	.word	0xe000e010

00023058 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   23058:	b580      	push	{r7, lr}
   2305a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   2305c:	2000      	movs	r0, #0
   2305e:	4b0f      	ldr	r3, [pc, #60]	; (2309c <delay_init+0x44>)
   23060:	4798      	blx	r3
   23062:	0002      	movs	r2, r0
   23064:	4b0e      	ldr	r3, [pc, #56]	; (230a0 <delay_init+0x48>)
   23066:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   23068:	4b0d      	ldr	r3, [pc, #52]	; (230a0 <delay_init+0x48>)
   2306a:	6818      	ldr	r0, [r3, #0]
   2306c:	4b0d      	ldr	r3, [pc, #52]	; (230a4 <delay_init+0x4c>)
   2306e:	22fa      	movs	r2, #250	; 0xfa
   23070:	0091      	lsls	r1, r2, #2
   23072:	4798      	blx	r3
   23074:	0003      	movs	r3, r0
   23076:	001a      	movs	r2, r3
   23078:	4b09      	ldr	r3, [pc, #36]	; (230a0 <delay_init+0x48>)
   2307a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   2307c:	4b08      	ldr	r3, [pc, #32]	; (230a0 <delay_init+0x48>)
   2307e:	6818      	ldr	r0, [r3, #0]
   23080:	4b08      	ldr	r3, [pc, #32]	; (230a4 <delay_init+0x4c>)
   23082:	22fa      	movs	r2, #250	; 0xfa
   23084:	0091      	lsls	r1, r2, #2
   23086:	4798      	blx	r3
   23088:	0003      	movs	r3, r0
   2308a:	001a      	movs	r2, r3
   2308c:	4b06      	ldr	r3, [pc, #24]	; (230a8 <delay_init+0x50>)
   2308e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   23090:	4b06      	ldr	r3, [pc, #24]	; (230ac <delay_init+0x54>)
   23092:	2205      	movs	r2, #5
   23094:	601a      	str	r2, [r3, #0]
}
   23096:	46c0      	nop			; (mov r8, r8)
   23098:	46bd      	mov	sp, r7
   2309a:	bd80      	pop	{r7, pc}
   2309c:	0002cd59 	.word	0x0002cd59
   230a0:	20000198 	.word	0x20000198
   230a4:	000359f1 	.word	0x000359f1
   230a8:	2000019c 	.word	0x2000019c
   230ac:	e000e010 	.word	0xe000e010

000230b0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   230b0:	b580      	push	{r7, lr}
   230b2:	b082      	sub	sp, #8
   230b4:	af00      	add	r7, sp, #0
   230b6:	6078      	str	r0, [r7, #4]
	while (n--) {
   230b8:	e004      	b.n	230c4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   230ba:	4b07      	ldr	r3, [pc, #28]	; (230d8 <delay_cycles_ms+0x28>)
   230bc:	681b      	ldr	r3, [r3, #0]
   230be:	0018      	movs	r0, r3
   230c0:	4b06      	ldr	r3, [pc, #24]	; (230dc <delay_cycles_ms+0x2c>)
   230c2:	4798      	blx	r3
	while (n--) {
   230c4:	687b      	ldr	r3, [r7, #4]
   230c6:	1e5a      	subs	r2, r3, #1
   230c8:	607a      	str	r2, [r7, #4]
   230ca:	2b00      	cmp	r3, #0
   230cc:	d1f5      	bne.n	230ba <delay_cycles_ms+0xa>
	}
}
   230ce:	46c0      	nop			; (mov r8, r8)
   230d0:	46bd      	mov	sp, r7
   230d2:	b002      	add	sp, #8
   230d4:	bd80      	pop	{r7, pc}
   230d6:	46c0      	nop			; (mov r8, r8)
   230d8:	20000198 	.word	0x20000198
   230dc:	00023025 	.word	0x00023025

000230e0 <system_pinmux_get_group_from_gpio_pin>:
{
   230e0:	b580      	push	{r7, lr}
   230e2:	b084      	sub	sp, #16
   230e4:	af00      	add	r7, sp, #0
   230e6:	0002      	movs	r2, r0
   230e8:	1dfb      	adds	r3, r7, #7
   230ea:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   230ec:	230f      	movs	r3, #15
   230ee:	18fb      	adds	r3, r7, r3
   230f0:	1dfa      	adds	r2, r7, #7
   230f2:	7812      	ldrb	r2, [r2, #0]
   230f4:	09d2      	lsrs	r2, r2, #7
   230f6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   230f8:	230e      	movs	r3, #14
   230fa:	18fb      	adds	r3, r7, r3
   230fc:	1dfa      	adds	r2, r7, #7
   230fe:	7812      	ldrb	r2, [r2, #0]
   23100:	0952      	lsrs	r2, r2, #5
   23102:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   23104:	4b0d      	ldr	r3, [pc, #52]	; (2313c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   23106:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   23108:	230f      	movs	r3, #15
   2310a:	18fb      	adds	r3, r7, r3
   2310c:	781b      	ldrb	r3, [r3, #0]
   2310e:	2b00      	cmp	r3, #0
   23110:	d10f      	bne.n	23132 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   23112:	230f      	movs	r3, #15
   23114:	18fb      	adds	r3, r7, r3
   23116:	781b      	ldrb	r3, [r3, #0]
   23118:	009b      	lsls	r3, r3, #2
   2311a:	2210      	movs	r2, #16
   2311c:	4694      	mov	ip, r2
   2311e:	44bc      	add	ip, r7
   23120:	4463      	add	r3, ip
   23122:	3b08      	subs	r3, #8
   23124:	681a      	ldr	r2, [r3, #0]
   23126:	230e      	movs	r3, #14
   23128:	18fb      	adds	r3, r7, r3
   2312a:	781b      	ldrb	r3, [r3, #0]
   2312c:	01db      	lsls	r3, r3, #7
   2312e:	18d3      	adds	r3, r2, r3
   23130:	e000      	b.n	23134 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   23132:	2300      	movs	r3, #0
}
   23134:	0018      	movs	r0, r3
   23136:	46bd      	mov	sp, r7
   23138:	b004      	add	sp, #16
   2313a:	bd80      	pop	{r7, pc}
   2313c:	41004400 	.word	0x41004400

00023140 <system_interrupt_enable_global>:
{
   23140:	b580      	push	{r7, lr}
   23142:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   23144:	4b04      	ldr	r3, [pc, #16]	; (23158 <system_interrupt_enable_global+0x18>)
   23146:	2201      	movs	r2, #1
   23148:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   2314a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2314e:	b662      	cpsie	i
}
   23150:	46c0      	nop			; (mov r8, r8)
   23152:	46bd      	mov	sp, r7
   23154:	bd80      	pop	{r7, pc}
   23156:	46c0      	nop			; (mov r8, r8)
   23158:	200001a2 	.word	0x200001a2

0002315c <port_get_group_from_gpio_pin>:
{
   2315c:	b580      	push	{r7, lr}
   2315e:	b082      	sub	sp, #8
   23160:	af00      	add	r7, sp, #0
   23162:	0002      	movs	r2, r0
   23164:	1dfb      	adds	r3, r7, #7
   23166:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   23168:	1dfb      	adds	r3, r7, #7
   2316a:	781b      	ldrb	r3, [r3, #0]
   2316c:	0018      	movs	r0, r3
   2316e:	4b03      	ldr	r3, [pc, #12]	; (2317c <port_get_group_from_gpio_pin+0x20>)
   23170:	4798      	blx	r3
   23172:	0003      	movs	r3, r0
}
   23174:	0018      	movs	r0, r3
   23176:	46bd      	mov	sp, r7
   23178:	b002      	add	sp, #8
   2317a:	bd80      	pop	{r7, pc}
   2317c:	000230e1 	.word	0x000230e1

00023180 <port_get_config_defaults>:
{
   23180:	b580      	push	{r7, lr}
   23182:	b082      	sub	sp, #8
   23184:	af00      	add	r7, sp, #0
   23186:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   23188:	687b      	ldr	r3, [r7, #4]
   2318a:	2200      	movs	r2, #0
   2318c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2318e:	687b      	ldr	r3, [r7, #4]
   23190:	2201      	movs	r2, #1
   23192:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   23194:	687b      	ldr	r3, [r7, #4]
   23196:	2200      	movs	r2, #0
   23198:	709a      	strb	r2, [r3, #2]
}
   2319a:	46c0      	nop			; (mov r8, r8)
   2319c:	46bd      	mov	sp, r7
   2319e:	b002      	add	sp, #8
   231a0:	bd80      	pop	{r7, pc}
	...

000231a4 <port_pin_set_output_level>:
{
   231a4:	b580      	push	{r7, lr}
   231a6:	b084      	sub	sp, #16
   231a8:	af00      	add	r7, sp, #0
   231aa:	0002      	movs	r2, r0
   231ac:	1dfb      	adds	r3, r7, #7
   231ae:	701a      	strb	r2, [r3, #0]
   231b0:	1dbb      	adds	r3, r7, #6
   231b2:	1c0a      	adds	r2, r1, #0
   231b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   231b6:	1dfb      	adds	r3, r7, #7
   231b8:	781b      	ldrb	r3, [r3, #0]
   231ba:	0018      	movs	r0, r3
   231bc:	4b0d      	ldr	r3, [pc, #52]	; (231f4 <port_pin_set_output_level+0x50>)
   231be:	4798      	blx	r3
   231c0:	0003      	movs	r3, r0
   231c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   231c4:	1dfb      	adds	r3, r7, #7
   231c6:	781b      	ldrb	r3, [r3, #0]
   231c8:	221f      	movs	r2, #31
   231ca:	4013      	ands	r3, r2
   231cc:	2201      	movs	r2, #1
   231ce:	409a      	lsls	r2, r3
   231d0:	0013      	movs	r3, r2
   231d2:	60bb      	str	r3, [r7, #8]
	if (level) {
   231d4:	1dbb      	adds	r3, r7, #6
   231d6:	781b      	ldrb	r3, [r3, #0]
   231d8:	2b00      	cmp	r3, #0
   231da:	d003      	beq.n	231e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   231dc:	68fb      	ldr	r3, [r7, #12]
   231de:	68ba      	ldr	r2, [r7, #8]
   231e0:	619a      	str	r2, [r3, #24]
}
   231e2:	e002      	b.n	231ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   231e4:	68fb      	ldr	r3, [r7, #12]
   231e6:	68ba      	ldr	r2, [r7, #8]
   231e8:	615a      	str	r2, [r3, #20]
}
   231ea:	46c0      	nop			; (mov r8, r8)
   231ec:	46bd      	mov	sp, r7
   231ee:	b004      	add	sp, #16
   231f0:	bd80      	pop	{r7, pc}
   231f2:	46c0      	nop			; (mov r8, r8)
   231f4:	0002315d 	.word	0x0002315d

000231f8 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   231f8:	b580      	push	{r7, lr}
   231fa:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   231fc:	4b04      	ldr	r3, [pc, #16]	; (23210 <chip_isr+0x18>)
   231fe:	681b      	ldr	r3, [r3, #0]
   23200:	2b00      	cmp	r3, #0
   23202:	d002      	beq.n	2320a <chip_isr+0x12>
		gpfIsr();
   23204:	4b02      	ldr	r3, [pc, #8]	; (23210 <chip_isr+0x18>)
   23206:	681b      	ldr	r3, [r3, #0]
   23208:	4798      	blx	r3
	}
}
   2320a:	46c0      	nop			; (mov r8, r8)
   2320c:	46bd      	mov	sp, r7
   2320e:	bd80      	pop	{r7, pc}
   23210:	200041c0 	.word	0x200041c0

00023214 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   23214:	b580      	push	{r7, lr}
   23216:	b082      	sub	sp, #8
   23218:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   2321a:	1d3b      	adds	r3, r7, #4
   2321c:	0018      	movs	r0, r3
   2321e:	4b10      	ldr	r3, [pc, #64]	; (23260 <init_chip_pins+0x4c>)
   23220:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   23222:	1d3b      	adds	r3, r7, #4
   23224:	2201      	movs	r2, #1
   23226:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   23228:	1d3b      	adds	r3, r7, #4
   2322a:	0019      	movs	r1, r3
   2322c:	201b      	movs	r0, #27
   2322e:	4b0d      	ldr	r3, [pc, #52]	; (23264 <init_chip_pins+0x50>)
   23230:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   23232:	1d3b      	adds	r3, r7, #4
   23234:	0019      	movs	r1, r3
   23236:	201c      	movs	r0, #28
   23238:	4b0a      	ldr	r3, [pc, #40]	; (23264 <init_chip_pins+0x50>)
   2323a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   2323c:	1d3b      	adds	r3, r7, #4
   2323e:	0019      	movs	r1, r3
   23240:	2028      	movs	r0, #40	; 0x28
   23242:	4b08      	ldr	r3, [pc, #32]	; (23264 <init_chip_pins+0x50>)
   23244:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   23246:	2100      	movs	r1, #0
   23248:	201c      	movs	r0, #28
   2324a:	4b07      	ldr	r3, [pc, #28]	; (23268 <init_chip_pins+0x54>)
   2324c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2324e:	2100      	movs	r1, #0
   23250:	201b      	movs	r0, #27
   23252:	4b05      	ldr	r3, [pc, #20]	; (23268 <init_chip_pins+0x54>)
   23254:	4798      	blx	r3
}
   23256:	46c0      	nop			; (mov r8, r8)
   23258:	46bd      	mov	sp, r7
   2325a:	b002      	add	sp, #8
   2325c:	bd80      	pop	{r7, pc}
   2325e:	46c0      	nop			; (mov r8, r8)
   23260:	00023181 	.word	0x00023181
   23264:	000299a1 	.word	0x000299a1
   23268:	000231a5 	.word	0x000231a5

0002326c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   2326c:	b580      	push	{r7, lr}
   2326e:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   23270:	4b0b      	ldr	r3, [pc, #44]	; (232a0 <nm_bsp_init+0x34>)
   23272:	2200      	movs	r2, #0
   23274:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   23276:	4b0b      	ldr	r3, [pc, #44]	; (232a4 <nm_bsp_init+0x38>)
   23278:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   2327a:	4b0b      	ldr	r3, [pc, #44]	; (232a8 <nm_bsp_init+0x3c>)
   2327c:	681b      	ldr	r3, [r3, #0]
   2327e:	2201      	movs	r2, #1
   23280:	4013      	ands	r3, r2
   23282:	d004      	beq.n	2328e <nm_bsp_init+0x22>
   23284:	4b08      	ldr	r3, [pc, #32]	; (232a8 <nm_bsp_init+0x3c>)
   23286:	681b      	ldr	r3, [r3, #0]
   23288:	2202      	movs	r2, #2
   2328a:	4013      	ands	r3, r2
   2328c:	d101      	bne.n	23292 <nm_bsp_init+0x26>
	    delay_init();
   2328e:	4b07      	ldr	r3, [pc, #28]	; (232ac <nm_bsp_init+0x40>)
   23290:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   23292:	4b07      	ldr	r3, [pc, #28]	; (232b0 <nm_bsp_init+0x44>)
   23294:	4798      	blx	r3

	return M2M_SUCCESS;
   23296:	2300      	movs	r3, #0
}
   23298:	0018      	movs	r0, r3
   2329a:	46bd      	mov	sp, r7
   2329c:	bd80      	pop	{r7, pc}
   2329e:	46c0      	nop			; (mov r8, r8)
   232a0:	200041c0 	.word	0x200041c0
   232a4:	00023215 	.word	0x00023215
   232a8:	e000e010 	.word	0xe000e010
   232ac:	00023059 	.word	0x00023059
   232b0:	00023141 	.word	0x00023141

000232b4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   232b4:	b580      	push	{r7, lr}
   232b6:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   232b8:	2100      	movs	r1, #0
   232ba:	201c      	movs	r0, #28
   232bc:	4b0b      	ldr	r3, [pc, #44]	; (232ec <nm_bsp_reset+0x38>)
   232be:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   232c0:	2100      	movs	r1, #0
   232c2:	201b      	movs	r0, #27
   232c4:	4b09      	ldr	r3, [pc, #36]	; (232ec <nm_bsp_reset+0x38>)
   232c6:	4798      	blx	r3
	nm_bsp_sleep(1);
   232c8:	2001      	movs	r0, #1
   232ca:	4b09      	ldr	r3, [pc, #36]	; (232f0 <nm_bsp_reset+0x3c>)
   232cc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   232ce:	2101      	movs	r1, #1
   232d0:	201c      	movs	r0, #28
   232d2:	4b06      	ldr	r3, [pc, #24]	; (232ec <nm_bsp_reset+0x38>)
   232d4:	4798      	blx	r3
	nm_bsp_sleep(10);
   232d6:	200a      	movs	r0, #10
   232d8:	4b05      	ldr	r3, [pc, #20]	; (232f0 <nm_bsp_reset+0x3c>)
   232da:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   232dc:	2101      	movs	r1, #1
   232de:	201b      	movs	r0, #27
   232e0:	4b02      	ldr	r3, [pc, #8]	; (232ec <nm_bsp_reset+0x38>)
   232e2:	4798      	blx	r3
}
   232e4:	46c0      	nop			; (mov r8, r8)
   232e6:	46bd      	mov	sp, r7
   232e8:	bd80      	pop	{r7, pc}
   232ea:	46c0      	nop			; (mov r8, r8)
   232ec:	000231a5 	.word	0x000231a5
   232f0:	000232f5 	.word	0x000232f5

000232f4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   232f4:	b580      	push	{r7, lr}
   232f6:	b082      	sub	sp, #8
   232f8:	af00      	add	r7, sp, #0
   232fa:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   232fc:	687b      	ldr	r3, [r7, #4]
   232fe:	0018      	movs	r0, r3
   23300:	4b02      	ldr	r3, [pc, #8]	; (2330c <nm_bsp_sleep+0x18>)
   23302:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   23304:	46c0      	nop			; (mov r8, r8)
   23306:	46bd      	mov	sp, r7
   23308:	b002      	add	sp, #8
   2330a:	bd80      	pop	{r7, pc}
   2330c:	0001ef71 	.word	0x0001ef71

00023310 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   23310:	b580      	push	{r7, lr}
   23312:	b086      	sub	sp, #24
   23314:	af00      	add	r7, sp, #0
   23316:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   23318:	4b15      	ldr	r3, [pc, #84]	; (23370 <nm_bsp_register_isr+0x60>)
   2331a:	687a      	ldr	r2, [r7, #4]
   2331c:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   2331e:	230c      	movs	r3, #12
   23320:	18fb      	adds	r3, r7, r3
   23322:	0018      	movs	r0, r3
   23324:	4b13      	ldr	r3, [pc, #76]	; (23374 <nm_bsp_register_isr+0x64>)
   23326:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   23328:	230c      	movs	r3, #12
   2332a:	18fb      	adds	r3, r7, r3
   2332c:	2229      	movs	r2, #41	; 0x29
   2332e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   23330:	230c      	movs	r3, #12
   23332:	18fb      	adds	r3, r7, r3
   23334:	2200      	movs	r2, #0
   23336:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   23338:	230c      	movs	r3, #12
   2333a:	18fb      	adds	r3, r7, r3
   2333c:	2201      	movs	r2, #1
   2333e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   23340:	230c      	movs	r3, #12
   23342:	18fb      	adds	r3, r7, r3
   23344:	2202      	movs	r2, #2
   23346:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   23348:	230c      	movs	r3, #12
   2334a:	18fb      	adds	r3, r7, r3
   2334c:	0019      	movs	r1, r3
   2334e:	2009      	movs	r0, #9
   23350:	4b09      	ldr	r3, [pc, #36]	; (23378 <nm_bsp_register_isr+0x68>)
   23352:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   23354:	4b09      	ldr	r3, [pc, #36]	; (2337c <nm_bsp_register_isr+0x6c>)
   23356:	2200      	movs	r2, #0
   23358:	2109      	movs	r1, #9
   2335a:	0018      	movs	r0, r3
   2335c:	4b08      	ldr	r3, [pc, #32]	; (23380 <nm_bsp_register_isr+0x70>)
   2335e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   23360:	2100      	movs	r1, #0
   23362:	2009      	movs	r0, #9
   23364:	4b07      	ldr	r3, [pc, #28]	; (23384 <nm_bsp_register_isr+0x74>)
   23366:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   23368:	46c0      	nop			; (mov r8, r8)
   2336a:	46bd      	mov	sp, r7
   2336c:	b006      	add	sp, #24
   2336e:	bd80      	pop	{r7, pc}
   23370:	200041c0 	.word	0x200041c0
   23374:	00029849 	.word	0x00029849
   23378:	0002987d 	.word	0x0002987d
   2337c:	000231f9 	.word	0x000231f9
   23380:	00029449 	.word	0x00029449
   23384:	000294ad 	.word	0x000294ad

00023388 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   23388:	b580      	push	{r7, lr}
   2338a:	b082      	sub	sp, #8
   2338c:	af00      	add	r7, sp, #0
   2338e:	0002      	movs	r2, r0
   23390:	1dfb      	adds	r3, r7, #7
   23392:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   23394:	1dfb      	adds	r3, r7, #7
   23396:	781b      	ldrb	r3, [r3, #0]
   23398:	2b00      	cmp	r3, #0
   2339a:	d004      	beq.n	233a6 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   2339c:	2100      	movs	r1, #0
   2339e:	2009      	movs	r0, #9
   233a0:	4b05      	ldr	r3, [pc, #20]	; (233b8 <nm_bsp_interrupt_ctrl+0x30>)
   233a2:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   233a4:	e003      	b.n	233ae <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   233a6:	2100      	movs	r1, #0
   233a8:	2009      	movs	r0, #9
   233aa:	4b04      	ldr	r3, [pc, #16]	; (233bc <nm_bsp_interrupt_ctrl+0x34>)
   233ac:	4798      	blx	r3
}
   233ae:	46c0      	nop			; (mov r8, r8)
   233b0:	46bd      	mov	sp, r7
   233b2:	b002      	add	sp, #8
   233b4:	bd80      	pop	{r7, pc}
   233b6:	46c0      	nop			; (mov r8, r8)
   233b8:	000294ad 	.word	0x000294ad
   233bc:	000294f5 	.word	0x000294f5

000233c0 <system_pinmux_get_group_from_gpio_pin>:
{
   233c0:	b580      	push	{r7, lr}
   233c2:	b084      	sub	sp, #16
   233c4:	af00      	add	r7, sp, #0
   233c6:	0002      	movs	r2, r0
   233c8:	1dfb      	adds	r3, r7, #7
   233ca:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   233cc:	230f      	movs	r3, #15
   233ce:	18fb      	adds	r3, r7, r3
   233d0:	1dfa      	adds	r2, r7, #7
   233d2:	7812      	ldrb	r2, [r2, #0]
   233d4:	09d2      	lsrs	r2, r2, #7
   233d6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   233d8:	230e      	movs	r3, #14
   233da:	18fb      	adds	r3, r7, r3
   233dc:	1dfa      	adds	r2, r7, #7
   233de:	7812      	ldrb	r2, [r2, #0]
   233e0:	0952      	lsrs	r2, r2, #5
   233e2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   233e4:	4b0d      	ldr	r3, [pc, #52]	; (2341c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   233e6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   233e8:	230f      	movs	r3, #15
   233ea:	18fb      	adds	r3, r7, r3
   233ec:	781b      	ldrb	r3, [r3, #0]
   233ee:	2b00      	cmp	r3, #0
   233f0:	d10f      	bne.n	23412 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   233f2:	230f      	movs	r3, #15
   233f4:	18fb      	adds	r3, r7, r3
   233f6:	781b      	ldrb	r3, [r3, #0]
   233f8:	009b      	lsls	r3, r3, #2
   233fa:	2210      	movs	r2, #16
   233fc:	4694      	mov	ip, r2
   233fe:	44bc      	add	ip, r7
   23400:	4463      	add	r3, ip
   23402:	3b08      	subs	r3, #8
   23404:	681a      	ldr	r2, [r3, #0]
   23406:	230e      	movs	r3, #14
   23408:	18fb      	adds	r3, r7, r3
   2340a:	781b      	ldrb	r3, [r3, #0]
   2340c:	01db      	lsls	r3, r3, #7
   2340e:	18d3      	adds	r3, r2, r3
   23410:	e000      	b.n	23414 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   23412:	2300      	movs	r3, #0
}
   23414:	0018      	movs	r0, r3
   23416:	46bd      	mov	sp, r7
   23418:	b004      	add	sp, #16
   2341a:	bd80      	pop	{r7, pc}
   2341c:	41004400 	.word	0x41004400

00023420 <system_interrupt_enable>:
{
   23420:	b580      	push	{r7, lr}
   23422:	b082      	sub	sp, #8
   23424:	af00      	add	r7, sp, #0
   23426:	0002      	movs	r2, r0
   23428:	1dfb      	adds	r3, r7, #7
   2342a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2342c:	4b06      	ldr	r3, [pc, #24]	; (23448 <system_interrupt_enable+0x28>)
   2342e:	1dfa      	adds	r2, r7, #7
   23430:	7812      	ldrb	r2, [r2, #0]
   23432:	0011      	movs	r1, r2
   23434:	221f      	movs	r2, #31
   23436:	400a      	ands	r2, r1
   23438:	2101      	movs	r1, #1
   2343a:	4091      	lsls	r1, r2
   2343c:	000a      	movs	r2, r1
   2343e:	601a      	str	r2, [r3, #0]
}
   23440:	46c0      	nop			; (mov r8, r8)
   23442:	46bd      	mov	sp, r7
   23444:	b002      	add	sp, #8
   23446:	bd80      	pop	{r7, pc}
   23448:	e000e100 	.word	0xe000e100

0002344c <system_interrupt_disable>:
{
   2344c:	b580      	push	{r7, lr}
   2344e:	b082      	sub	sp, #8
   23450:	af00      	add	r7, sp, #0
   23452:	0002      	movs	r2, r0
   23454:	1dfb      	adds	r3, r7, #7
   23456:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   23458:	4a07      	ldr	r2, [pc, #28]	; (23478 <system_interrupt_disable+0x2c>)
   2345a:	1dfb      	adds	r3, r7, #7
   2345c:	781b      	ldrb	r3, [r3, #0]
   2345e:	0019      	movs	r1, r3
   23460:	231f      	movs	r3, #31
   23462:	400b      	ands	r3, r1
   23464:	2101      	movs	r1, #1
   23466:	4099      	lsls	r1, r3
   23468:	000b      	movs	r3, r1
   2346a:	0019      	movs	r1, r3
   2346c:	2380      	movs	r3, #128	; 0x80
   2346e:	50d1      	str	r1, [r2, r3]
}
   23470:	46c0      	nop			; (mov r8, r8)
   23472:	46bd      	mov	sp, r7
   23474:	b002      	add	sp, #8
   23476:	bd80      	pop	{r7, pc}
   23478:	e000e100 	.word	0xe000e100

0002347c <port_get_group_from_gpio_pin>:
{
   2347c:	b580      	push	{r7, lr}
   2347e:	b082      	sub	sp, #8
   23480:	af00      	add	r7, sp, #0
   23482:	0002      	movs	r2, r0
   23484:	1dfb      	adds	r3, r7, #7
   23486:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   23488:	1dfb      	adds	r3, r7, #7
   2348a:	781b      	ldrb	r3, [r3, #0]
   2348c:	0018      	movs	r0, r3
   2348e:	4b03      	ldr	r3, [pc, #12]	; (2349c <port_get_group_from_gpio_pin+0x20>)
   23490:	4798      	blx	r3
   23492:	0003      	movs	r3, r0
}
   23494:	0018      	movs	r0, r3
   23496:	46bd      	mov	sp, r7
   23498:	b002      	add	sp, #8
   2349a:	bd80      	pop	{r7, pc}
   2349c:	000233c1 	.word	0x000233c1

000234a0 <port_get_config_defaults>:
{
   234a0:	b580      	push	{r7, lr}
   234a2:	b082      	sub	sp, #8
   234a4:	af00      	add	r7, sp, #0
   234a6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   234a8:	687b      	ldr	r3, [r7, #4]
   234aa:	2200      	movs	r2, #0
   234ac:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   234ae:	687b      	ldr	r3, [r7, #4]
   234b0:	2201      	movs	r2, #1
   234b2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   234b4:	687b      	ldr	r3, [r7, #4]
   234b6:	2200      	movs	r2, #0
   234b8:	709a      	strb	r2, [r3, #2]
}
   234ba:	46c0      	nop			; (mov r8, r8)
   234bc:	46bd      	mov	sp, r7
   234be:	b002      	add	sp, #8
   234c0:	bd80      	pop	{r7, pc}
	...

000234c4 <port_pin_set_output_level>:
{
   234c4:	b580      	push	{r7, lr}
   234c6:	b084      	sub	sp, #16
   234c8:	af00      	add	r7, sp, #0
   234ca:	0002      	movs	r2, r0
   234cc:	1dfb      	adds	r3, r7, #7
   234ce:	701a      	strb	r2, [r3, #0]
   234d0:	1dbb      	adds	r3, r7, #6
   234d2:	1c0a      	adds	r2, r1, #0
   234d4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   234d6:	1dfb      	adds	r3, r7, #7
   234d8:	781b      	ldrb	r3, [r3, #0]
   234da:	0018      	movs	r0, r3
   234dc:	4b0d      	ldr	r3, [pc, #52]	; (23514 <port_pin_set_output_level+0x50>)
   234de:	4798      	blx	r3
   234e0:	0003      	movs	r3, r0
   234e2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   234e4:	1dfb      	adds	r3, r7, #7
   234e6:	781b      	ldrb	r3, [r3, #0]
   234e8:	221f      	movs	r2, #31
   234ea:	4013      	ands	r3, r2
   234ec:	2201      	movs	r2, #1
   234ee:	409a      	lsls	r2, r3
   234f0:	0013      	movs	r3, r2
   234f2:	60bb      	str	r3, [r7, #8]
	if (level) {
   234f4:	1dbb      	adds	r3, r7, #6
   234f6:	781b      	ldrb	r3, [r3, #0]
   234f8:	2b00      	cmp	r3, #0
   234fa:	d003      	beq.n	23504 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   234fc:	68fb      	ldr	r3, [r7, #12]
   234fe:	68ba      	ldr	r2, [r7, #8]
   23500:	619a      	str	r2, [r3, #24]
}
   23502:	e002      	b.n	2350a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   23504:	68fb      	ldr	r3, [r7, #12]
   23506:	68ba      	ldr	r2, [r7, #8]
   23508:	615a      	str	r2, [r3, #20]
}
   2350a:	46c0      	nop			; (mov r8, r8)
   2350c:	46bd      	mov	sp, r7
   2350e:	b004      	add	sp, #16
   23510:	bd80      	pop	{r7, pc}
   23512:	46c0      	nop			; (mov r8, r8)
   23514:	0002347d 	.word	0x0002347d

00023518 <spi_is_syncing>:
{
   23518:	b580      	push	{r7, lr}
   2351a:	b084      	sub	sp, #16
   2351c:	af00      	add	r7, sp, #0
   2351e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   23520:	687b      	ldr	r3, [r7, #4]
   23522:	681b      	ldr	r3, [r3, #0]
   23524:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   23526:	68fb      	ldr	r3, [r7, #12]
   23528:	69db      	ldr	r3, [r3, #28]
   2352a:	1e5a      	subs	r2, r3, #1
   2352c:	4193      	sbcs	r3, r2
   2352e:	b2db      	uxtb	r3, r3
}
   23530:	0018      	movs	r0, r3
   23532:	46bd      	mov	sp, r7
   23534:	b004      	add	sp, #16
   23536:	bd80      	pop	{r7, pc}

00023538 <spi_get_config_defaults>:
{
   23538:	b580      	push	{r7, lr}
   2353a:	b082      	sub	sp, #8
   2353c:	af00      	add	r7, sp, #0
   2353e:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   23540:	687b      	ldr	r3, [r7, #4]
   23542:	2201      	movs	r2, #1
   23544:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   23546:	687b      	ldr	r3, [r7, #4]
   23548:	2200      	movs	r2, #0
   2354a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   2354c:	687b      	ldr	r3, [r7, #4]
   2354e:	2200      	movs	r2, #0
   23550:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   23552:	687b      	ldr	r3, [r7, #4]
   23554:	22c0      	movs	r2, #192	; 0xc0
   23556:	0392      	lsls	r2, r2, #14
   23558:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   2355a:	687b      	ldr	r3, [r7, #4]
   2355c:	2200      	movs	r2, #0
   2355e:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   23560:	687b      	ldr	r3, [r7, #4]
   23562:	2200      	movs	r2, #0
   23564:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   23566:	687b      	ldr	r3, [r7, #4]
   23568:	2201      	movs	r2, #1
   2356a:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   2356c:	687b      	ldr	r3, [r7, #4]
   2356e:	2201      	movs	r2, #1
   23570:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   23572:	687b      	ldr	r3, [r7, #4]
   23574:	2200      	movs	r2, #0
   23576:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   23578:	687b      	ldr	r3, [r7, #4]
   2357a:	2224      	movs	r2, #36	; 0x24
   2357c:	2100      	movs	r1, #0
   2357e:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   23580:	687b      	ldr	r3, [r7, #4]
   23582:	3318      	adds	r3, #24
   23584:	220c      	movs	r2, #12
   23586:	2100      	movs	r1, #0
   23588:	0018      	movs	r0, r3
   2358a:	4b0a      	ldr	r3, [pc, #40]	; (235b4 <spi_get_config_defaults+0x7c>)
   2358c:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   2358e:	687b      	ldr	r3, [r7, #4]
   23590:	4a09      	ldr	r2, [pc, #36]	; (235b8 <spi_get_config_defaults+0x80>)
   23592:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   23594:	687b      	ldr	r3, [r7, #4]
   23596:	2200      	movs	r2, #0
   23598:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   2359a:	687b      	ldr	r3, [r7, #4]
   2359c:	2200      	movs	r2, #0
   2359e:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   235a0:	687b      	ldr	r3, [r7, #4]
   235a2:	2200      	movs	r2, #0
   235a4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   235a6:	687b      	ldr	r3, [r7, #4]
   235a8:	2200      	movs	r2, #0
   235aa:	635a      	str	r2, [r3, #52]	; 0x34
};
   235ac:	46c0      	nop			; (mov r8, r8)
   235ae:	46bd      	mov	sp, r7
   235b0:	b002      	add	sp, #8
   235b2:	bd80      	pop	{r7, pc}
   235b4:	00038507 	.word	0x00038507
   235b8:	000186a0 	.word	0x000186a0

000235bc <spi_slave_inst_get_config_defaults>:
{
   235bc:	b580      	push	{r7, lr}
   235be:	b082      	sub	sp, #8
   235c0:	af00      	add	r7, sp, #0
   235c2:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   235c4:	687b      	ldr	r3, [r7, #4]
   235c6:	220a      	movs	r2, #10
   235c8:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   235ca:	687b      	ldr	r3, [r7, #4]
   235cc:	2200      	movs	r2, #0
   235ce:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   235d0:	687b      	ldr	r3, [r7, #4]
   235d2:	2200      	movs	r2, #0
   235d4:	709a      	strb	r2, [r3, #2]
}
   235d6:	46c0      	nop			; (mov r8, r8)
   235d8:	46bd      	mov	sp, r7
   235da:	b002      	add	sp, #8
   235dc:	bd80      	pop	{r7, pc}
	...

000235e0 <spi_attach_slave>:
{
   235e0:	b580      	push	{r7, lr}
   235e2:	b084      	sub	sp, #16
   235e4:	af00      	add	r7, sp, #0
   235e6:	6078      	str	r0, [r7, #4]
   235e8:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   235ea:	683b      	ldr	r3, [r7, #0]
   235ec:	781a      	ldrb	r2, [r3, #0]
   235ee:	687b      	ldr	r3, [r7, #4]
   235f0:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   235f2:	683b      	ldr	r3, [r7, #0]
   235f4:	785a      	ldrb	r2, [r3, #1]
   235f6:	687b      	ldr	r3, [r7, #4]
   235f8:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   235fa:	683b      	ldr	r3, [r7, #0]
   235fc:	789a      	ldrb	r2, [r3, #2]
   235fe:	687b      	ldr	r3, [r7, #4]
   23600:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   23602:	230c      	movs	r3, #12
   23604:	18fb      	adds	r3, r7, r3
   23606:	0018      	movs	r0, r3
   23608:	4b0b      	ldr	r3, [pc, #44]	; (23638 <spi_attach_slave+0x58>)
   2360a:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   2360c:	230c      	movs	r3, #12
   2360e:	18fb      	adds	r3, r7, r3
   23610:	2201      	movs	r2, #1
   23612:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   23614:	687b      	ldr	r3, [r7, #4]
   23616:	781b      	ldrb	r3, [r3, #0]
   23618:	220c      	movs	r2, #12
   2361a:	18ba      	adds	r2, r7, r2
   2361c:	0011      	movs	r1, r2
   2361e:	0018      	movs	r0, r3
   23620:	4b06      	ldr	r3, [pc, #24]	; (2363c <spi_attach_slave+0x5c>)
   23622:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   23624:	687b      	ldr	r3, [r7, #4]
   23626:	781b      	ldrb	r3, [r3, #0]
   23628:	2101      	movs	r1, #1
   2362a:	0018      	movs	r0, r3
   2362c:	4b04      	ldr	r3, [pc, #16]	; (23640 <spi_attach_slave+0x60>)
   2362e:	4798      	blx	r3
}
   23630:	46c0      	nop			; (mov r8, r8)
   23632:	46bd      	mov	sp, r7
   23634:	b004      	add	sp, #16
   23636:	bd80      	pop	{r7, pc}
   23638:	000234a1 	.word	0x000234a1
   2363c:	000299a1 	.word	0x000299a1
   23640:	000234c5 	.word	0x000234c5

00023644 <spi_enable>:
{
   23644:	b580      	push	{r7, lr}
   23646:	b084      	sub	sp, #16
   23648:	af00      	add	r7, sp, #0
   2364a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2364c:	687b      	ldr	r3, [r7, #4]
   2364e:	681b      	ldr	r3, [r3, #0]
   23650:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   23652:	687b      	ldr	r3, [r7, #4]
   23654:	681b      	ldr	r3, [r3, #0]
   23656:	0018      	movs	r0, r3
   23658:	4b0b      	ldr	r3, [pc, #44]	; (23688 <spi_enable+0x44>)
   2365a:	4798      	blx	r3
   2365c:	0003      	movs	r3, r0
   2365e:	0018      	movs	r0, r3
   23660:	4b0a      	ldr	r3, [pc, #40]	; (2368c <spi_enable+0x48>)
   23662:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   23664:	46c0      	nop			; (mov r8, r8)
   23666:	687b      	ldr	r3, [r7, #4]
   23668:	0018      	movs	r0, r3
   2366a:	4b09      	ldr	r3, [pc, #36]	; (23690 <spi_enable+0x4c>)
   2366c:	4798      	blx	r3
   2366e:	1e03      	subs	r3, r0, #0
   23670:	d1f9      	bne.n	23666 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   23672:	68fb      	ldr	r3, [r7, #12]
   23674:	681b      	ldr	r3, [r3, #0]
   23676:	2202      	movs	r2, #2
   23678:	431a      	orrs	r2, r3
   2367a:	68fb      	ldr	r3, [r7, #12]
   2367c:	601a      	str	r2, [r3, #0]
}
   2367e:	46c0      	nop			; (mov r8, r8)
   23680:	46bd      	mov	sp, r7
   23682:	b004      	add	sp, #16
   23684:	bd80      	pop	{r7, pc}
   23686:	46c0      	nop			; (mov r8, r8)
   23688:	0002a671 	.word	0x0002a671
   2368c:	00023421 	.word	0x00023421
   23690:	00023519 	.word	0x00023519

00023694 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   23694:	b580      	push	{r7, lr}
   23696:	b084      	sub	sp, #16
   23698:	af00      	add	r7, sp, #0
   2369a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2369c:	687b      	ldr	r3, [r7, #4]
   2369e:	681b      	ldr	r3, [r3, #0]
   236a0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   236a2:	687b      	ldr	r3, [r7, #4]
   236a4:	681b      	ldr	r3, [r3, #0]
   236a6:	0018      	movs	r0, r3
   236a8:	4b0e      	ldr	r3, [pc, #56]	; (236e4 <spi_disable+0x50>)
   236aa:	4798      	blx	r3
   236ac:	0003      	movs	r3, r0
   236ae:	0018      	movs	r0, r3
   236b0:	4b0d      	ldr	r3, [pc, #52]	; (236e8 <spi_disable+0x54>)
   236b2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   236b4:	46c0      	nop			; (mov r8, r8)
   236b6:	687b      	ldr	r3, [r7, #4]
   236b8:	0018      	movs	r0, r3
   236ba:	4b0c      	ldr	r3, [pc, #48]	; (236ec <spi_disable+0x58>)
   236bc:	4798      	blx	r3
   236be:	1e03      	subs	r3, r0, #0
   236c0:	d1f9      	bne.n	236b6 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   236c2:	68fb      	ldr	r3, [r7, #12]
   236c4:	228f      	movs	r2, #143	; 0x8f
   236c6:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   236c8:	68fb      	ldr	r3, [r7, #12]
   236ca:	228f      	movs	r2, #143	; 0x8f
   236cc:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   236ce:	68fb      	ldr	r3, [r7, #12]
   236d0:	681b      	ldr	r3, [r3, #0]
   236d2:	2202      	movs	r2, #2
   236d4:	4393      	bics	r3, r2
   236d6:	001a      	movs	r2, r3
   236d8:	68fb      	ldr	r3, [r7, #12]
   236da:	601a      	str	r2, [r3, #0]
}
   236dc:	46c0      	nop			; (mov r8, r8)
   236de:	46bd      	mov	sp, r7
   236e0:	b004      	add	sp, #16
   236e2:	bd80      	pop	{r7, pc}
   236e4:	0002a671 	.word	0x0002a671
   236e8:	0002344d 	.word	0x0002344d
   236ec:	00023519 	.word	0x00023519

000236f0 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   236f0:	b580      	push	{r7, lr}
   236f2:	b084      	sub	sp, #16
   236f4:	af00      	add	r7, sp, #0
   236f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   236f8:	687b      	ldr	r3, [r7, #4]
   236fa:	681b      	ldr	r3, [r3, #0]
   236fc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   236fe:	68fb      	ldr	r3, [r7, #12]
   23700:	7e1b      	ldrb	r3, [r3, #24]
   23702:	b2db      	uxtb	r3, r3
   23704:	001a      	movs	r2, r3
   23706:	2302      	movs	r3, #2
   23708:	4013      	ands	r3, r2
   2370a:	1e5a      	subs	r2, r3, #1
   2370c:	4193      	sbcs	r3, r2
   2370e:	b2db      	uxtb	r3, r3
}
   23710:	0018      	movs	r0, r3
   23712:	46bd      	mov	sp, r7
   23714:	b004      	add	sp, #16
   23716:	bd80      	pop	{r7, pc}

00023718 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   23718:	b580      	push	{r7, lr}
   2371a:	b084      	sub	sp, #16
   2371c:	af00      	add	r7, sp, #0
   2371e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   23720:	687b      	ldr	r3, [r7, #4]
   23722:	681b      	ldr	r3, [r3, #0]
   23724:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   23726:	68fb      	ldr	r3, [r7, #12]
   23728:	7e1b      	ldrb	r3, [r3, #24]
   2372a:	b2db      	uxtb	r3, r3
   2372c:	001a      	movs	r2, r3
   2372e:	2301      	movs	r3, #1
   23730:	4013      	ands	r3, r2
   23732:	1e5a      	subs	r2, r3, #1
   23734:	4193      	sbcs	r3, r2
   23736:	b2db      	uxtb	r3, r3
}
   23738:	0018      	movs	r0, r3
   2373a:	46bd      	mov	sp, r7
   2373c:	b004      	add	sp, #16
   2373e:	bd80      	pop	{r7, pc}

00023740 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   23740:	b580      	push	{r7, lr}
   23742:	b084      	sub	sp, #16
   23744:	af00      	add	r7, sp, #0
   23746:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   23748:	687b      	ldr	r3, [r7, #4]
   2374a:	681b      	ldr	r3, [r3, #0]
   2374c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2374e:	68fb      	ldr	r3, [r7, #12]
   23750:	7e1b      	ldrb	r3, [r3, #24]
   23752:	b2db      	uxtb	r3, r3
   23754:	001a      	movs	r2, r3
   23756:	2304      	movs	r3, #4
   23758:	4013      	ands	r3, r2
   2375a:	1e5a      	subs	r2, r3, #1
   2375c:	4193      	sbcs	r3, r2
   2375e:	b2db      	uxtb	r3, r3
}
   23760:	0018      	movs	r0, r3
   23762:	46bd      	mov	sp, r7
   23764:	b004      	add	sp, #16
   23766:	bd80      	pop	{r7, pc}

00023768 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   23768:	b580      	push	{r7, lr}
   2376a:	b084      	sub	sp, #16
   2376c:	af00      	add	r7, sp, #0
   2376e:	6078      	str	r0, [r7, #4]
   23770:	000a      	movs	r2, r1
   23772:	1cbb      	adds	r3, r7, #2
   23774:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   23776:	687b      	ldr	r3, [r7, #4]
   23778:	681b      	ldr	r3, [r3, #0]
   2377a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   2377c:	687b      	ldr	r3, [r7, #4]
   2377e:	0018      	movs	r0, r3
   23780:	4b0a      	ldr	r3, [pc, #40]	; (237ac <spi_write+0x44>)
   23782:	4798      	blx	r3
   23784:	0003      	movs	r3, r0
   23786:	001a      	movs	r2, r3
   23788:	2301      	movs	r3, #1
   2378a:	4053      	eors	r3, r2
   2378c:	b2db      	uxtb	r3, r3
   2378e:	2b00      	cmp	r3, #0
   23790:	d001      	beq.n	23796 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   23792:	2305      	movs	r3, #5
   23794:	e006      	b.n	237a4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   23796:	1cbb      	adds	r3, r7, #2
   23798:	881b      	ldrh	r3, [r3, #0]
   2379a:	05db      	lsls	r3, r3, #23
   2379c:	0dda      	lsrs	r2, r3, #23
   2379e:	68fb      	ldr	r3, [r7, #12]
   237a0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   237a2:	2300      	movs	r3, #0
}
   237a4:	0018      	movs	r0, r3
   237a6:	46bd      	mov	sp, r7
   237a8:	b004      	add	sp, #16
   237aa:	bd80      	pop	{r7, pc}
   237ac:	00023719 	.word	0x00023719

000237b0 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   237b0:	b580      	push	{r7, lr}
   237b2:	b084      	sub	sp, #16
   237b4:	af00      	add	r7, sp, #0
   237b6:	6078      	str	r0, [r7, #4]
   237b8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   237ba:	687b      	ldr	r3, [r7, #4]
   237bc:	681b      	ldr	r3, [r3, #0]
   237be:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   237c0:	687b      	ldr	r3, [r7, #4]
   237c2:	0018      	movs	r0, r3
   237c4:	4b1b      	ldr	r3, [pc, #108]	; (23834 <spi_read+0x84>)
   237c6:	4798      	blx	r3
   237c8:	0003      	movs	r3, r0
   237ca:	001a      	movs	r2, r3
   237cc:	2301      	movs	r3, #1
   237ce:	4053      	eors	r3, r2
   237d0:	b2db      	uxtb	r3, r3
   237d2:	2b00      	cmp	r3, #0
   237d4:	d001      	beq.n	237da <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   237d6:	2310      	movs	r3, #16
   237d8:	e027      	b.n	2382a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   237da:	230f      	movs	r3, #15
   237dc:	18fb      	adds	r3, r7, r3
   237de:	2200      	movs	r2, #0
   237e0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   237e2:	68bb      	ldr	r3, [r7, #8]
   237e4:	8b5b      	ldrh	r3, [r3, #26]
   237e6:	b29b      	uxth	r3, r3
   237e8:	001a      	movs	r2, r3
   237ea:	2304      	movs	r3, #4
   237ec:	4013      	ands	r3, r2
   237ee:	d006      	beq.n	237fe <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   237f0:	230f      	movs	r3, #15
   237f2:	18fb      	adds	r3, r7, r3
   237f4:	221e      	movs	r2, #30
   237f6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   237f8:	68bb      	ldr	r3, [r7, #8]
   237fa:	2204      	movs	r2, #4
   237fc:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   237fe:	687b      	ldr	r3, [r7, #4]
   23800:	799b      	ldrb	r3, [r3, #6]
   23802:	2b01      	cmp	r3, #1
   23804:	d108      	bne.n	23818 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   23806:	68bb      	ldr	r3, [r7, #8]
   23808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2380a:	b29b      	uxth	r3, r3
   2380c:	05db      	lsls	r3, r3, #23
   2380e:	0ddb      	lsrs	r3, r3, #23
   23810:	b29a      	uxth	r2, r3
   23812:	683b      	ldr	r3, [r7, #0]
   23814:	801a      	strh	r2, [r3, #0]
   23816:	e005      	b.n	23824 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   23818:	68bb      	ldr	r3, [r7, #8]
   2381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2381c:	b2db      	uxtb	r3, r3
   2381e:	b29a      	uxth	r2, r3
   23820:	683b      	ldr	r3, [r7, #0]
   23822:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   23824:	230f      	movs	r3, #15
   23826:	18fb      	adds	r3, r7, r3
   23828:	781b      	ldrb	r3, [r3, #0]
}
   2382a:	0018      	movs	r0, r3
   2382c:	46bd      	mov	sp, r7
   2382e:	b004      	add	sp, #16
   23830:	bd80      	pop	{r7, pc}
   23832:	46c0      	nop			; (mov r8, r8)
   23834:	00023741 	.word	0x00023741

00023838 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   23838:	b580      	push	{r7, lr}
   2383a:	b086      	sub	sp, #24
   2383c:	af00      	add	r7, sp, #0
   2383e:	60f8      	str	r0, [r7, #12]
   23840:	60b9      	str	r1, [r7, #8]
   23842:	1dbb      	adds	r3, r7, #6
   23844:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   23846:	2313      	movs	r3, #19
   23848:	18fb      	adds	r3, r7, r3
   2384a:	22ff      	movs	r2, #255	; 0xff
   2384c:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   2384e:	2317      	movs	r3, #23
   23850:	18fb      	adds	r3, r7, r3
   23852:	2200      	movs	r2, #0
   23854:	701a      	strb	r2, [r3, #0]
   23856:	2316      	movs	r3, #22
   23858:	18fb      	adds	r3, r7, r3
   2385a:	2200      	movs	r2, #0
   2385c:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2385e:	2314      	movs	r3, #20
   23860:	18fb      	adds	r3, r7, r3
   23862:	2200      	movs	r2, #0
   23864:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   23866:	2310      	movs	r3, #16
   23868:	18fb      	adds	r3, r7, r3
   2386a:	2200      	movs	r2, #0
   2386c:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   2386e:	68bb      	ldr	r3, [r7, #8]
   23870:	2b00      	cmp	r3, #0
   23872:	d102      	bne.n	2387a <spi_rw+0x42>
   23874:	68fb      	ldr	r3, [r7, #12]
   23876:	2b00      	cmp	r3, #0
   23878:	d003      	beq.n	23882 <spi_rw+0x4a>
   2387a:	1dbb      	adds	r3, r7, #6
   2387c:	881b      	ldrh	r3, [r3, #0]
   2387e:	2b00      	cmp	r3, #0
   23880:	d102      	bne.n	23888 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   23882:	230f      	movs	r3, #15
   23884:	425b      	negs	r3, r3
   23886:	e07e      	b.n	23986 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   23888:	68fb      	ldr	r3, [r7, #12]
   2388a:	2b00      	cmp	r3, #0
   2388c:	d106      	bne.n	2389c <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   2388e:	2313      	movs	r3, #19
   23890:	18fb      	adds	r3, r7, r3
   23892:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   23894:	2317      	movs	r3, #23
   23896:	18fb      	adds	r3, r7, r3
   23898:	2201      	movs	r2, #1
   2389a:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   2389c:	68bb      	ldr	r3, [r7, #8]
   2389e:	2b00      	cmp	r3, #0
   238a0:	d106      	bne.n	238b0 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   238a2:	2313      	movs	r3, #19
   238a4:	18fb      	adds	r3, r7, r3
   238a6:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   238a8:	2316      	movs	r3, #22
   238aa:	18fb      	adds	r3, r7, r3
   238ac:	2201      	movs	r2, #1
   238ae:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   238b0:	4937      	ldr	r1, [pc, #220]	; (23990 <spi_rw+0x158>)
   238b2:	4b38      	ldr	r3, [pc, #224]	; (23994 <spi_rw+0x15c>)
   238b4:	2201      	movs	r2, #1
   238b6:	0018      	movs	r0, r3
   238b8:	4b37      	ldr	r3, [pc, #220]	; (23998 <spi_rw+0x160>)
   238ba:	4798      	blx	r3

	while (u16Sz) {
   238bc:	e04c      	b.n	23958 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   238be:	68fb      	ldr	r3, [r7, #12]
   238c0:	781a      	ldrb	r2, [r3, #0]
   238c2:	2314      	movs	r3, #20
   238c4:	18fb      	adds	r3, r7, r3
   238c6:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   238c8:	46c0      	nop			; (mov r8, r8)
   238ca:	4b32      	ldr	r3, [pc, #200]	; (23994 <spi_rw+0x15c>)
   238cc:	0018      	movs	r0, r3
   238ce:	4b33      	ldr	r3, [pc, #204]	; (2399c <spi_rw+0x164>)
   238d0:	4798      	blx	r3
   238d2:	0003      	movs	r3, r0
   238d4:	001a      	movs	r2, r3
   238d6:	2301      	movs	r3, #1
   238d8:	4053      	eors	r3, r2
   238da:	b2db      	uxtb	r3, r3
   238dc:	2b00      	cmp	r3, #0
   238de:	d1f4      	bne.n	238ca <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   238e0:	46c0      	nop			; (mov r8, r8)
   238e2:	2314      	movs	r3, #20
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	881a      	ldrh	r2, [r3, #0]
   238e8:	4b2a      	ldr	r3, [pc, #168]	; (23994 <spi_rw+0x15c>)
   238ea:	0011      	movs	r1, r2
   238ec:	0018      	movs	r0, r3
   238ee:	4b2c      	ldr	r3, [pc, #176]	; (239a0 <spi_rw+0x168>)
   238f0:	4798      	blx	r3
   238f2:	1e03      	subs	r3, r0, #0
   238f4:	d1f5      	bne.n	238e2 <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   238f6:	46c0      	nop			; (mov r8, r8)
   238f8:	4b26      	ldr	r3, [pc, #152]	; (23994 <spi_rw+0x15c>)
   238fa:	0018      	movs	r0, r3
   238fc:	4b29      	ldr	r3, [pc, #164]	; (239a4 <spi_rw+0x16c>)
   238fe:	4798      	blx	r3
   23900:	0003      	movs	r3, r0
   23902:	001a      	movs	r2, r3
   23904:	2301      	movs	r3, #1
   23906:	4053      	eors	r3, r2
   23908:	b2db      	uxtb	r3, r3
   2390a:	2b00      	cmp	r3, #0
   2390c:	d1f4      	bne.n	238f8 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2390e:	46c0      	nop			; (mov r8, r8)
   23910:	2310      	movs	r3, #16
   23912:	18fa      	adds	r2, r7, r3
   23914:	4b1f      	ldr	r3, [pc, #124]	; (23994 <spi_rw+0x15c>)
   23916:	0011      	movs	r1, r2
   23918:	0018      	movs	r0, r3
   2391a:	4b23      	ldr	r3, [pc, #140]	; (239a8 <spi_rw+0x170>)
   2391c:	4798      	blx	r3
   2391e:	1e03      	subs	r3, r0, #0
   23920:	d1f6      	bne.n	23910 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   23922:	2310      	movs	r3, #16
   23924:	18fb      	adds	r3, r7, r3
   23926:	881b      	ldrh	r3, [r3, #0]
   23928:	b2da      	uxtb	r2, r3
   2392a:	68bb      	ldr	r3, [r7, #8]
   2392c:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   2392e:	1dbb      	adds	r3, r7, #6
   23930:	881a      	ldrh	r2, [r3, #0]
   23932:	1dbb      	adds	r3, r7, #6
   23934:	3a01      	subs	r2, #1
   23936:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   23938:	2316      	movs	r3, #22
   2393a:	18fb      	adds	r3, r7, r3
   2393c:	781b      	ldrb	r3, [r3, #0]
   2393e:	2b00      	cmp	r3, #0
   23940:	d102      	bne.n	23948 <spi_rw+0x110>
			pu8Miso++;
   23942:	68bb      	ldr	r3, [r7, #8]
   23944:	3301      	adds	r3, #1
   23946:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   23948:	2317      	movs	r3, #23
   2394a:	18fb      	adds	r3, r7, r3
   2394c:	781b      	ldrb	r3, [r3, #0]
   2394e:	2b00      	cmp	r3, #0
   23950:	d102      	bne.n	23958 <spi_rw+0x120>
			pu8Mosi++;
   23952:	68fb      	ldr	r3, [r7, #12]
   23954:	3301      	adds	r3, #1
   23956:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   23958:	1dbb      	adds	r3, r7, #6
   2395a:	881b      	ldrh	r3, [r3, #0]
   2395c:	2b00      	cmp	r3, #0
   2395e:	d1ae      	bne.n	238be <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   23960:	46c0      	nop			; (mov r8, r8)
   23962:	4b0c      	ldr	r3, [pc, #48]	; (23994 <spi_rw+0x15c>)
   23964:	0018      	movs	r0, r3
   23966:	4b11      	ldr	r3, [pc, #68]	; (239ac <spi_rw+0x174>)
   23968:	4798      	blx	r3
   2396a:	0003      	movs	r3, r0
   2396c:	001a      	movs	r2, r3
   2396e:	2301      	movs	r3, #1
   23970:	4053      	eors	r3, r2
   23972:	b2db      	uxtb	r3, r3
   23974:	2b00      	cmp	r3, #0
   23976:	d1f4      	bne.n	23962 <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   23978:	4905      	ldr	r1, [pc, #20]	; (23990 <spi_rw+0x158>)
   2397a:	4b06      	ldr	r3, [pc, #24]	; (23994 <spi_rw+0x15c>)
   2397c:	2200      	movs	r2, #0
   2397e:	0018      	movs	r0, r3
   23980:	4b05      	ldr	r3, [pc, #20]	; (23998 <spi_rw+0x160>)
   23982:	4798      	blx	r3

	return M2M_SUCCESS;
   23984:	2300      	movs	r3, #0
}
   23986:	0018      	movs	r0, r3
   23988:	46bd      	mov	sp, r7
   2398a:	b006      	add	sp, #24
   2398c:	bd80      	pop	{r7, pc}
   2398e:	46c0      	nop			; (mov r8, r8)
   23990:	20005aa8 	.word	0x20005aa8
   23994:	20005aac 	.word	0x20005aac
   23998:	0002b0e5 	.word	0x0002b0e5
   2399c:	00023719 	.word	0x00023719
   239a0:	00023769 	.word	0x00023769
   239a4:	00023741 	.word	0x00023741
   239a8:	000237b1 	.word	0x000237b1
   239ac:	000236f1 	.word	0x000236f1

000239b0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   239b0:	b580      	push	{r7, lr}
   239b2:	b092      	sub	sp, #72	; 0x48
   239b4:	af00      	add	r7, sp, #0
   239b6:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   239b8:	2347      	movs	r3, #71	; 0x47
   239ba:	18fb      	adds	r3, r7, r3
   239bc:	2200      	movs	r2, #0
   239be:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   239c0:	2308      	movs	r3, #8
   239c2:	18fb      	adds	r3, r7, r3
   239c4:	0018      	movs	r0, r3
   239c6:	4b26      	ldr	r3, [pc, #152]	; (23a60 <nm_bus_init+0xb0>)
   239c8:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   239ca:	2308      	movs	r3, #8
   239cc:	18fb      	adds	r3, r7, r3
   239ce:	220e      	movs	r2, #14
   239d0:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   239d2:	2308      	movs	r3, #8
   239d4:	18fa      	adds	r2, r7, r3
   239d6:	4b23      	ldr	r3, [pc, #140]	; (23a64 <nm_bus_init+0xb4>)
   239d8:	0011      	movs	r1, r2
   239da:	0018      	movs	r0, r3
   239dc:	4b22      	ldr	r3, [pc, #136]	; (23a68 <nm_bus_init+0xb8>)
   239de:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   239e0:	230c      	movs	r3, #12
   239e2:	18fb      	adds	r3, r7, r3
   239e4:	0018      	movs	r0, r3
   239e6:	4b21      	ldr	r3, [pc, #132]	; (23a6c <nm_bus_init+0xbc>)
   239e8:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   239ea:	230c      	movs	r3, #12
   239ec:	18fb      	adds	r3, r7, r3
   239ee:	22c0      	movs	r2, #192	; 0xc0
   239f0:	0392      	lsls	r2, r2, #14
   239f2:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   239f4:	230c      	movs	r3, #12
   239f6:	18fb      	adds	r3, r7, r3
   239f8:	4a1d      	ldr	r2, [pc, #116]	; (23a70 <nm_bus_init+0xc0>)
   239fa:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   239fc:	230c      	movs	r3, #12
   239fe:	18fb      	adds	r3, r7, r3
   23a00:	4a1c      	ldr	r2, [pc, #112]	; (23a74 <nm_bus_init+0xc4>)
   23a02:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   23a04:	230c      	movs	r3, #12
   23a06:	18fb      	adds	r3, r7, r3
   23a08:	2201      	movs	r2, #1
   23a0a:	4252      	negs	r2, r2
   23a0c:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   23a0e:	230c      	movs	r3, #12
   23a10:	18fb      	adds	r3, r7, r3
   23a12:	4a19      	ldr	r2, [pc, #100]	; (23a78 <nm_bus_init+0xc8>)
   23a14:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   23a16:	230c      	movs	r3, #12
   23a18:	18fb      	adds	r3, r7, r3
   23a1a:	2200      	movs	r2, #0
   23a1c:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   23a1e:	230c      	movs	r3, #12
   23a20:	18fb      	adds	r3, r7, r3
   23a22:	4a16      	ldr	r2, [pc, #88]	; (23a7c <nm_bus_init+0xcc>)
   23a24:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   23a26:	230c      	movs	r3, #12
   23a28:	18fa      	adds	r2, r7, r3
   23a2a:	4915      	ldr	r1, [pc, #84]	; (23a80 <nm_bus_init+0xd0>)
   23a2c:	4b15      	ldr	r3, [pc, #84]	; (23a84 <nm_bus_init+0xd4>)
   23a2e:	0018      	movs	r0, r3
   23a30:	4b15      	ldr	r3, [pc, #84]	; (23a88 <nm_bus_init+0xd8>)
   23a32:	4798      	blx	r3
   23a34:	1e03      	subs	r3, r0, #0
   23a36:	d002      	beq.n	23a3e <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   23a38:	2306      	movs	r3, #6
   23a3a:	425b      	negs	r3, r3
   23a3c:	e00c      	b.n	23a58 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   23a3e:	4b11      	ldr	r3, [pc, #68]	; (23a84 <nm_bus_init+0xd4>)
   23a40:	0018      	movs	r0, r3
   23a42:	4b12      	ldr	r3, [pc, #72]	; (23a8c <nm_bus_init+0xdc>)
   23a44:	4798      	blx	r3

	nm_bsp_reset();
   23a46:	4b12      	ldr	r3, [pc, #72]	; (23a90 <nm_bus_init+0xe0>)
   23a48:	4798      	blx	r3
	nm_bsp_sleep(1);
   23a4a:	2001      	movs	r0, #1
   23a4c:	4b11      	ldr	r3, [pc, #68]	; (23a94 <nm_bus_init+0xe4>)
   23a4e:	4798      	blx	r3
#endif
	return result;
   23a50:	2347      	movs	r3, #71	; 0x47
   23a52:	18fb      	adds	r3, r7, r3
   23a54:	781b      	ldrb	r3, [r3, #0]
   23a56:	b25b      	sxtb	r3, r3
}
   23a58:	0018      	movs	r0, r3
   23a5a:	46bd      	mov	sp, r7
   23a5c:	b012      	add	sp, #72	; 0x48
   23a5e:	bd80      	pop	{r7, pc}
   23a60:	000235bd 	.word	0x000235bd
   23a64:	20005aa8 	.word	0x20005aa8
   23a68:	000235e1 	.word	0x000235e1
   23a6c:	00023539 	.word	0x00023539
   23a70:	000c0002 	.word	0x000c0002
   23a74:	000d0002 	.word	0x000d0002
   23a78:	000f0002 	.word	0x000f0002
   23a7c:	00124f80 	.word	0x00124f80
   23a80:	42001000 	.word	0x42001000
   23a84:	20005aac 	.word	0x20005aac
   23a88:	0002ae21 	.word	0x0002ae21
   23a8c:	00023645 	.word	0x00023645
   23a90:	000232b5 	.word	0x000232b5
   23a94:	000232f5 	.word	0x000232f5

00023a98 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   23a98:	b590      	push	{r4, r7, lr}
   23a9a:	b085      	sub	sp, #20
   23a9c:	af00      	add	r7, sp, #0
   23a9e:	0002      	movs	r2, r0
   23aa0:	6039      	str	r1, [r7, #0]
   23aa2:	1dfb      	adds	r3, r7, #7
   23aa4:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   23aa6:	230f      	movs	r3, #15
   23aa8:	18fb      	adds	r3, r7, r3
   23aaa:	2200      	movs	r2, #0
   23aac:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   23aae:	1dfb      	adds	r3, r7, #7
   23ab0:	781b      	ldrb	r3, [r3, #0]
   23ab2:	2b03      	cmp	r3, #3
   23ab4:	d10f      	bne.n	23ad6 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   23ab6:	683b      	ldr	r3, [r7, #0]
   23ab8:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   23aba:	68bb      	ldr	r3, [r7, #8]
   23abc:	6818      	ldr	r0, [r3, #0]
   23abe:	68bb      	ldr	r3, [r7, #8]
   23ac0:	6859      	ldr	r1, [r3, #4]
   23ac2:	68bb      	ldr	r3, [r7, #8]
   23ac4:	891b      	ldrh	r3, [r3, #8]
   23ac6:	220f      	movs	r2, #15
   23ac8:	18bc      	adds	r4, r7, r2
   23aca:	001a      	movs	r2, r3
   23acc:	4b10      	ldr	r3, [pc, #64]	; (23b10 <nm_bus_ioctl+0x78>)
   23ace:	4798      	blx	r3
   23ad0:	0003      	movs	r3, r0
   23ad2:	7023      	strb	r3, [r4, #0]
		}
		break;
   23ad4:	e013      	b.n	23afe <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   23ad6:	230f      	movs	r3, #15
   23ad8:	18fb      	adds	r3, r7, r3
   23ada:	22ff      	movs	r2, #255	; 0xff
   23adc:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   23ade:	2383      	movs	r3, #131	; 0x83
   23ae0:	005a      	lsls	r2, r3, #1
   23ae2:	490c      	ldr	r1, [pc, #48]	; (23b14 <nm_bus_ioctl+0x7c>)
   23ae4:	4b0c      	ldr	r3, [pc, #48]	; (23b18 <nm_bus_ioctl+0x80>)
   23ae6:	0018      	movs	r0, r3
   23ae8:	4b0c      	ldr	r3, [pc, #48]	; (23b1c <nm_bus_ioctl+0x84>)
   23aea:	4798      	blx	r3
   23aec:	4b0c      	ldr	r3, [pc, #48]	; (23b20 <nm_bus_ioctl+0x88>)
   23aee:	0018      	movs	r0, r3
   23af0:	4b0a      	ldr	r3, [pc, #40]	; (23b1c <nm_bus_ioctl+0x84>)
   23af2:	4798      	blx	r3
   23af4:	4b0b      	ldr	r3, [pc, #44]	; (23b24 <nm_bus_ioctl+0x8c>)
   23af6:	0018      	movs	r0, r3
   23af8:	4b08      	ldr	r3, [pc, #32]	; (23b1c <nm_bus_ioctl+0x84>)
   23afa:	4798      	blx	r3
			break;
   23afc:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   23afe:	230f      	movs	r3, #15
   23b00:	18fb      	adds	r3, r7, r3
   23b02:	781b      	ldrb	r3, [r3, #0]
   23b04:	b25b      	sxtb	r3, r3
}
   23b06:	0018      	movs	r0, r3
   23b08:	46bd      	mov	sp, r7
   23b0a:	b005      	add	sp, #20
   23b0c:	bd90      	pop	{r4, r7, pc}
   23b0e:	46c0      	nop			; (mov r8, r8)
   23b10:	00023839 	.word	0x00023839
   23b14:	0003c944 	.word	0x0003c944
   23b18:	0003c918 	.word	0x0003c918
   23b1c:	00020e3d 	.word	0x00020e3d
   23b20:	0003c92c 	.word	0x0003c92c
   23b24:	0003c940 	.word	0x0003c940

00023b28 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   23b28:	b580      	push	{r7, lr}
   23b2a:	b082      	sub	sp, #8
   23b2c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   23b2e:	1dfb      	adds	r3, r7, #7
   23b30:	2200      	movs	r2, #0
   23b32:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   23b34:	1d3b      	adds	r3, r7, #4
   23b36:	0018      	movs	r0, r3
   23b38:	4b13      	ldr	r3, [pc, #76]	; (23b88 <nm_bus_deinit+0x60>)
   23b3a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   23b3c:	1d3b      	adds	r3, r7, #4
   23b3e:	2200      	movs	r2, #0
   23b40:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   23b42:	1d3b      	adds	r3, r7, #4
   23b44:	2200      	movs	r2, #0
   23b46:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   23b48:	4b10      	ldr	r3, [pc, #64]	; (23b8c <nm_bus_deinit+0x64>)
   23b4a:	0018      	movs	r0, r3
   23b4c:	4b10      	ldr	r3, [pc, #64]	; (23b90 <nm_bus_deinit+0x68>)
   23b4e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   23b50:	1d3b      	adds	r3, r7, #4
   23b52:	0019      	movs	r1, r3
   23b54:	200c      	movs	r0, #12
   23b56:	4b0f      	ldr	r3, [pc, #60]	; (23b94 <nm_bus_deinit+0x6c>)
   23b58:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   23b5a:	1d3b      	adds	r3, r7, #4
   23b5c:	0019      	movs	r1, r3
   23b5e:	200f      	movs	r0, #15
   23b60:	4b0c      	ldr	r3, [pc, #48]	; (23b94 <nm_bus_deinit+0x6c>)
   23b62:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   23b64:	1d3b      	adds	r3, r7, #4
   23b66:	0019      	movs	r1, r3
   23b68:	200d      	movs	r0, #13
   23b6a:	4b0a      	ldr	r3, [pc, #40]	; (23b94 <nm_bus_deinit+0x6c>)
   23b6c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   23b6e:	1d3b      	adds	r3, r7, #4
   23b70:	0019      	movs	r1, r3
   23b72:	200e      	movs	r0, #14
   23b74:	4b07      	ldr	r3, [pc, #28]	; (23b94 <nm_bus_deinit+0x6c>)
   23b76:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   23b78:	1dfb      	adds	r3, r7, #7
   23b7a:	781b      	ldrb	r3, [r3, #0]
   23b7c:	b25b      	sxtb	r3, r3
}
   23b7e:	0018      	movs	r0, r3
   23b80:	46bd      	mov	sp, r7
   23b82:	b002      	add	sp, #8
   23b84:	bd80      	pop	{r7, pc}
   23b86:	46c0      	nop			; (mov r8, r8)
   23b88:	000234a1 	.word	0x000234a1
   23b8c:	20005aac 	.word	0x20005aac
   23b90:	00023695 	.word	0x00023695
   23b94:	000299a1 	.word	0x000299a1

00023b98 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   23b98:	b580      	push	{r7, lr}
   23b9a:	b084      	sub	sp, #16
   23b9c:	af00      	add	r7, sp, #0
   23b9e:	60f8      	str	r0, [r7, #12]
   23ba0:	60b9      	str	r1, [r7, #8]
   23ba2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   23ba4:	687b      	ldr	r3, [r7, #4]
   23ba6:	2b00      	cmp	r3, #0
   23ba8:	d010      	beq.n	23bcc <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   23baa:	68bb      	ldr	r3, [r7, #8]
   23bac:	781a      	ldrb	r2, [r3, #0]
   23bae:	68fb      	ldr	r3, [r7, #12]
   23bb0:	701a      	strb	r2, [r3, #0]
		pDst++;
   23bb2:	68fb      	ldr	r3, [r7, #12]
   23bb4:	3301      	adds	r3, #1
   23bb6:	60fb      	str	r3, [r7, #12]
		pSrc++;
   23bb8:	68bb      	ldr	r3, [r7, #8]
   23bba:	3301      	adds	r3, #1
   23bbc:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   23bbe:	687b      	ldr	r3, [r7, #4]
   23bc0:	3b01      	subs	r3, #1
   23bc2:	607b      	str	r3, [r7, #4]
   23bc4:	687b      	ldr	r3, [r7, #4]
   23bc6:	2b00      	cmp	r3, #0
   23bc8:	d1ef      	bne.n	23baa <m2m_memcpy+0x12>
   23bca:	e000      	b.n	23bce <m2m_memcpy+0x36>
	if(sz == 0) return;
   23bcc:	46c0      	nop			; (mov r8, r8)
}
   23bce:	46bd      	mov	sp, r7
   23bd0:	b004      	add	sp, #16
   23bd2:	bd80      	pop	{r7, pc}

00023bd4 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   23bd4:	b580      	push	{r7, lr}
   23bd6:	b084      	sub	sp, #16
   23bd8:	af00      	add	r7, sp, #0
   23bda:	60f8      	str	r0, [r7, #12]
   23bdc:	607a      	str	r2, [r7, #4]
   23bde:	230b      	movs	r3, #11
   23be0:	18fb      	adds	r3, r7, r3
   23be2:	1c0a      	adds	r2, r1, #0
   23be4:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   23be6:	687b      	ldr	r3, [r7, #4]
   23be8:	2b00      	cmp	r3, #0
   23bea:	d00e      	beq.n	23c0a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   23bec:	68fb      	ldr	r3, [r7, #12]
   23bee:	220b      	movs	r2, #11
   23bf0:	18ba      	adds	r2, r7, r2
   23bf2:	7812      	ldrb	r2, [r2, #0]
   23bf4:	701a      	strb	r2, [r3, #0]
		pBuf++;
   23bf6:	68fb      	ldr	r3, [r7, #12]
   23bf8:	3301      	adds	r3, #1
   23bfa:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   23bfc:	687b      	ldr	r3, [r7, #4]
   23bfe:	3b01      	subs	r3, #1
   23c00:	607b      	str	r3, [r7, #4]
   23c02:	687b      	ldr	r3, [r7, #4]
   23c04:	2b00      	cmp	r3, #0
   23c06:	d1f1      	bne.n	23bec <m2m_memset+0x18>
   23c08:	e000      	b.n	23c0c <m2m_memset+0x38>
	if(sz == 0) return;
   23c0a:	46c0      	nop			; (mov r8, r8)
}
   23c0c:	46bd      	mov	sp, r7
   23c0e:	b004      	add	sp, #16
   23c10:	bd80      	pop	{r7, pc}

00023c12 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   23c12:	b580      	push	{r7, lr}
   23c14:	b084      	sub	sp, #16
   23c16:	af00      	add	r7, sp, #0
   23c18:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   23c1a:	230e      	movs	r3, #14
   23c1c:	18fb      	adds	r3, r7, r3
   23c1e:	2200      	movs	r2, #0
   23c20:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   23c22:	e009      	b.n	23c38 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   23c24:	230e      	movs	r3, #14
   23c26:	18fb      	adds	r3, r7, r3
   23c28:	881a      	ldrh	r2, [r3, #0]
   23c2a:	230e      	movs	r3, #14
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	3201      	adds	r2, #1
   23c30:	801a      	strh	r2, [r3, #0]
		pcStr++;
   23c32:	687b      	ldr	r3, [r7, #4]
   23c34:	3301      	adds	r3, #1
   23c36:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   23c38:	687b      	ldr	r3, [r7, #4]
   23c3a:	781b      	ldrb	r3, [r3, #0]
   23c3c:	2b00      	cmp	r3, #0
   23c3e:	d1f1      	bne.n	23c24 <m2m_strlen+0x12>
	}
	return u16StrLen;
   23c40:	230e      	movs	r3, #14
   23c42:	18fb      	adds	r3, r7, r3
   23c44:	881b      	ldrh	r3, [r3, #0]
}
   23c46:	0018      	movs	r0, r3
   23c48:	46bd      	mov	sp, r7
   23c4a:	b004      	add	sp, #16
   23c4c:	bd80      	pop	{r7, pc}
	...

00023c50 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   23c50:	b580      	push	{r7, lr}
   23c52:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   23c54:	4b04      	ldr	r3, [pc, #16]	; (23c68 <isr+0x18>)
   23c56:	78db      	ldrb	r3, [r3, #3]
   23c58:	b2db      	uxtb	r3, r3
   23c5a:	3301      	adds	r3, #1
   23c5c:	b2da      	uxtb	r2, r3
   23c5e:	4b02      	ldr	r3, [pc, #8]	; (23c68 <isr+0x18>)
   23c60:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   23c62:	46c0      	nop			; (mov r8, r8)
   23c64:	46bd      	mov	sp, r7
   23c66:	bd80      	pop	{r7, pc}
   23c68:	20005ae8 	.word	0x20005ae8

00023c6c <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   23c6c:	b590      	push	{r4, r7, lr}
   23c6e:	b083      	sub	sp, #12
   23c70:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   23c72:	1dfb      	adds	r3, r7, #7
   23c74:	2200      	movs	r2, #0
   23c76:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   23c78:	4b14      	ldr	r3, [pc, #80]	; (23ccc <hif_set_rx_done+0x60>)
   23c7a:	2200      	movs	r2, #0
   23c7c:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   23c7e:	2001      	movs	r0, #1
   23c80:	4b13      	ldr	r3, [pc, #76]	; (23cd0 <hif_set_rx_done+0x64>)
   23c82:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   23c84:	1dfc      	adds	r4, r7, #7
   23c86:	003b      	movs	r3, r7
   23c88:	4a12      	ldr	r2, [pc, #72]	; (23cd4 <hif_set_rx_done+0x68>)
   23c8a:	0019      	movs	r1, r3
   23c8c:	0010      	movs	r0, r2
   23c8e:	4b12      	ldr	r3, [pc, #72]	; (23cd8 <hif_set_rx_done+0x6c>)
   23c90:	4798      	blx	r3
   23c92:	0003      	movs	r3, r0
   23c94:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23c96:	1dfb      	adds	r3, r7, #7
   23c98:	781b      	ldrb	r3, [r3, #0]
   23c9a:	b25b      	sxtb	r3, r3
   23c9c:	2b00      	cmp	r3, #0
   23c9e:	d10d      	bne.n	23cbc <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   23ca0:	683b      	ldr	r3, [r7, #0]
   23ca2:	2202      	movs	r2, #2
   23ca4:	4313      	orrs	r3, r2
   23ca6:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   23ca8:	683b      	ldr	r3, [r7, #0]
   23caa:	1dfc      	adds	r4, r7, #7
   23cac:	4a09      	ldr	r2, [pc, #36]	; (23cd4 <hif_set_rx_done+0x68>)
   23cae:	0019      	movs	r1, r3
   23cb0:	0010      	movs	r0, r2
   23cb2:	4b0a      	ldr	r3, [pc, #40]	; (23cdc <hif_set_rx_done+0x70>)
   23cb4:	4798      	blx	r3
   23cb6:	0003      	movs	r3, r0
   23cb8:	7023      	strb	r3, [r4, #0]
   23cba:	e000      	b.n	23cbe <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   23cbc:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   23cbe:	1dfb      	adds	r3, r7, #7
   23cc0:	781b      	ldrb	r3, [r3, #0]
   23cc2:	b25b      	sxtb	r3, r3

}
   23cc4:	0018      	movs	r0, r3
   23cc6:	46bd      	mov	sp, r7
   23cc8:	b003      	add	sp, #12
   23cca:	bd90      	pop	{r4, r7, pc}
   23ccc:	20005ae8 	.word	0x20005ae8
   23cd0:	00023389 	.word	0x00023389
   23cd4:	00001070 	.word	0x00001070
   23cd8:	00025c65 	.word	0x00025c65
   23cdc:	00025c89 	.word	0x00025c89

00023ce0 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   23ce0:	b580      	push	{r7, lr}
   23ce2:	b082      	sub	sp, #8
   23ce4:	af00      	add	r7, sp, #0
   23ce6:	603a      	str	r2, [r7, #0]
   23ce8:	1dfb      	adds	r3, r7, #7
   23cea:	1c02      	adds	r2, r0, #0
   23cec:	701a      	strb	r2, [r3, #0]
   23cee:	1d3b      	adds	r3, r7, #4
   23cf0:	1c0a      	adds	r2, r1, #0
   23cf2:	801a      	strh	r2, [r3, #0]


}
   23cf4:	46c0      	nop			; (mov r8, r8)
   23cf6:	46bd      	mov	sp, r7
   23cf8:	b002      	add	sp, #8
   23cfa:	bd80      	pop	{r7, pc}

00023cfc <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   23cfc:	b590      	push	{r4, r7, lr}
   23cfe:	b083      	sub	sp, #12
   23d00:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23d02:	1dfb      	adds	r3, r7, #7
   23d04:	2200      	movs	r2, #0
   23d06:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   23d08:	4b16      	ldr	r3, [pc, #88]	; (23d64 <hif_chip_wake+0x68>)
   23d0a:	789b      	ldrb	r3, [r3, #2]
   23d0c:	b2db      	uxtb	r3, r3
   23d0e:	2b00      	cmp	r3, #0
   23d10:	d003      	beq.n	23d1a <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   23d12:	1dfb      	adds	r3, r7, #7
   23d14:	781b      	ldrb	r3, [r3, #0]
   23d16:	b25b      	sxtb	r3, r3
   23d18:	e01f      	b.n	23d5a <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   23d1a:	4b12      	ldr	r3, [pc, #72]	; (23d64 <hif_chip_wake+0x68>)
   23d1c:	785b      	ldrb	r3, [r3, #1]
   23d1e:	b2db      	uxtb	r3, r3
   23d20:	2b00      	cmp	r3, #0
   23d22:	d10e      	bne.n	23d42 <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   23d24:	4b0f      	ldr	r3, [pc, #60]	; (23d64 <hif_chip_wake+0x68>)
   23d26:	781b      	ldrb	r3, [r3, #0]
   23d28:	b2db      	uxtb	r3, r3
   23d2a:	2b00      	cmp	r3, #0
   23d2c:	d009      	beq.n	23d42 <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   23d2e:	1dfc      	adds	r4, r7, #7
   23d30:	4b0d      	ldr	r3, [pc, #52]	; (23d68 <hif_chip_wake+0x6c>)
   23d32:	4798      	blx	r3
   23d34:	0003      	movs	r3, r0
   23d36:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   23d38:	1dfb      	adds	r3, r7, #7
   23d3a:	781b      	ldrb	r3, [r3, #0]
   23d3c:	b25b      	sxtb	r3, r3
   23d3e:	2b00      	cmp	r3, #0
   23d40:	d107      	bne.n	23d52 <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   23d42:	4b08      	ldr	r3, [pc, #32]	; (23d64 <hif_chip_wake+0x68>)
   23d44:	785b      	ldrb	r3, [r3, #1]
   23d46:	b2db      	uxtb	r3, r3
   23d48:	3301      	adds	r3, #1
   23d4a:	b2da      	uxtb	r2, r3
   23d4c:	4b05      	ldr	r3, [pc, #20]	; (23d64 <hif_chip_wake+0x68>)
   23d4e:	705a      	strb	r2, [r3, #1]
   23d50:	e000      	b.n	23d54 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   23d52:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   23d54:	1dfb      	adds	r3, r7, #7
   23d56:	781b      	ldrb	r3, [r3, #0]
   23d58:	b25b      	sxtb	r3, r3
}
   23d5a:	0018      	movs	r0, r3
   23d5c:	46bd      	mov	sp, r7
   23d5e:	b003      	add	sp, #12
   23d60:	bd90      	pop	{r4, r7, pc}
   23d62:	46c0      	nop			; (mov r8, r8)
   23d64:	20005ae8 	.word	0x20005ae8
   23d68:	00025735 	.word	0x00025735

00023d6c <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   23d6c:	b580      	push	{r7, lr}
   23d6e:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   23d70:	4b07      	ldr	r3, [pc, #28]	; (23d90 <hif_chip_sleep_sc+0x24>)
   23d72:	785b      	ldrb	r3, [r3, #1]
   23d74:	b2db      	uxtb	r3, r3
   23d76:	2b00      	cmp	r3, #0
   23d78:	d006      	beq.n	23d88 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   23d7a:	4b05      	ldr	r3, [pc, #20]	; (23d90 <hif_chip_sleep_sc+0x24>)
   23d7c:	785b      	ldrb	r3, [r3, #1]
   23d7e:	b2db      	uxtb	r3, r3
   23d80:	3b01      	subs	r3, #1
   23d82:	b2da      	uxtb	r2, r3
   23d84:	4b02      	ldr	r3, [pc, #8]	; (23d90 <hif_chip_sleep_sc+0x24>)
   23d86:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   23d88:	2300      	movs	r3, #0
}
   23d8a:	0018      	movs	r0, r3
   23d8c:	46bd      	mov	sp, r7
   23d8e:	bd80      	pop	{r7, pc}
   23d90:	20005ae8 	.word	0x20005ae8

00023d94 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   23d94:	b590      	push	{r4, r7, lr}
   23d96:	b083      	sub	sp, #12
   23d98:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23d9a:	1dfb      	adds	r3, r7, #7
   23d9c:	2200      	movs	r2, #0
   23d9e:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   23da0:	4b10      	ldr	r3, [pc, #64]	; (23de4 <hif_chip_sleep+0x50>)
   23da2:	785b      	ldrb	r3, [r3, #1]
   23da4:	b2db      	uxtb	r3, r3
   23da6:	2b00      	cmp	r3, #0
   23da8:	d006      	beq.n	23db8 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   23daa:	4b0e      	ldr	r3, [pc, #56]	; (23de4 <hif_chip_sleep+0x50>)
   23dac:	785b      	ldrb	r3, [r3, #1]
   23dae:	b2db      	uxtb	r3, r3
   23db0:	3b01      	subs	r3, #1
   23db2:	b2da      	uxtb	r2, r3
   23db4:	4b0b      	ldr	r3, [pc, #44]	; (23de4 <hif_chip_sleep+0x50>)
   23db6:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   23db8:	4b0a      	ldr	r3, [pc, #40]	; (23de4 <hif_chip_sleep+0x50>)
   23dba:	785b      	ldrb	r3, [r3, #1]
   23dbc:	b2db      	uxtb	r3, r3
   23dbe:	2b00      	cmp	r3, #0
   23dc0:	d109      	bne.n	23dd6 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   23dc2:	4b08      	ldr	r3, [pc, #32]	; (23de4 <hif_chip_sleep+0x50>)
   23dc4:	781b      	ldrb	r3, [r3, #0]
   23dc6:	b2db      	uxtb	r3, r3
   23dc8:	2b00      	cmp	r3, #0
   23dca:	d004      	beq.n	23dd6 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   23dcc:	1dfc      	adds	r4, r7, #7
   23dce:	4b06      	ldr	r3, [pc, #24]	; (23de8 <hif_chip_sleep+0x54>)
   23dd0:	4798      	blx	r3
   23dd2:	0003      	movs	r3, r0
   23dd4:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   23dd6:	1dfb      	adds	r3, r7, #7
   23dd8:	781b      	ldrb	r3, [r3, #0]
   23dda:	b25b      	sxtb	r3, r3
}
   23ddc:	0018      	movs	r0, r3
   23dde:	46bd      	mov	sp, r7
   23de0:	b003      	add	sp, #12
   23de2:	bd90      	pop	{r4, r7, pc}
   23de4:	20005ae8 	.word	0x20005ae8
   23de8:	0002565d 	.word	0x0002565d

00023dec <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   23dec:	b580      	push	{r7, lr}
   23dee:	b082      	sub	sp, #8
   23df0:	af00      	add	r7, sp, #0
   23df2:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   23df4:	4b09      	ldr	r3, [pc, #36]	; (23e1c <hif_init+0x30>)
   23df6:	222c      	movs	r2, #44	; 0x2c
   23df8:	2100      	movs	r1, #0
   23dfa:	0018      	movs	r0, r3
   23dfc:	4b08      	ldr	r3, [pc, #32]	; (23e20 <hif_init+0x34>)
   23dfe:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   23e00:	4b08      	ldr	r3, [pc, #32]	; (23e24 <hif_init+0x38>)
   23e02:	0018      	movs	r0, r3
   23e04:	4b08      	ldr	r3, [pc, #32]	; (23e28 <hif_init+0x3c>)
   23e06:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   23e08:	4b08      	ldr	r3, [pc, #32]	; (23e2c <hif_init+0x40>)
   23e0a:	0019      	movs	r1, r3
   23e0c:	2003      	movs	r0, #3
   23e0e:	4b08      	ldr	r3, [pc, #32]	; (23e30 <hif_init+0x44>)
   23e10:	4798      	blx	r3
	return M2M_SUCCESS;
   23e12:	2300      	movs	r3, #0
}
   23e14:	0018      	movs	r0, r3
   23e16:	46bd      	mov	sp, r7
   23e18:	b002      	add	sp, #8
   23e1a:	bd80      	pop	{r7, pc}
   23e1c:	20005ae8 	.word	0x20005ae8
   23e20:	00023bd5 	.word	0x00023bd5
   23e24:	00023c51 	.word	0x00023c51
   23e28:	00023311 	.word	0x00023311
   23e2c:	00023ce1 	.word	0x00023ce1
   23e30:	000248d1 	.word	0x000248d1

00023e34 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   23e34:	b590      	push	{r4, r7, lr}
   23e36:	b089      	sub	sp, #36	; 0x24
   23e38:	af00      	add	r7, sp, #0
   23e3a:	0004      	movs	r4, r0
   23e3c:	0008      	movs	r0, r1
   23e3e:	603a      	str	r2, [r7, #0]
   23e40:	0019      	movs	r1, r3
   23e42:	1dfb      	adds	r3, r7, #7
   23e44:	1c22      	adds	r2, r4, #0
   23e46:	701a      	strb	r2, [r3, #0]
   23e48:	1dbb      	adds	r3, r7, #6
   23e4a:	1c02      	adds	r2, r0, #0
   23e4c:	701a      	strb	r2, [r3, #0]
   23e4e:	1d3b      	adds	r3, r7, #4
   23e50:	1c0a      	adds	r2, r1, #0
   23e52:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   23e54:	231f      	movs	r3, #31
   23e56:	18fb      	adds	r3, r7, r3
   23e58:	22ff      	movs	r2, #255	; 0xff
   23e5a:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   23e5c:	1dbb      	adds	r3, r7, #6
   23e5e:	781b      	ldrb	r3, [r3, #0]
   23e60:	227f      	movs	r2, #127	; 0x7f
   23e62:	4013      	ands	r3, r2
   23e64:	b2da      	uxtb	r2, r3
   23e66:	2318      	movs	r3, #24
   23e68:	18fb      	adds	r3, r7, r3
   23e6a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   23e6c:	2318      	movs	r3, #24
   23e6e:	18fb      	adds	r3, r7, r3
   23e70:	1dfa      	adds	r2, r7, #7
   23e72:	7812      	ldrb	r2, [r2, #0]
   23e74:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   23e76:	2318      	movs	r3, #24
   23e78:	18fb      	adds	r3, r7, r3
   23e7a:	2208      	movs	r2, #8
   23e7c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   23e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23e80:	2b00      	cmp	r3, #0
   23e82:	d011      	beq.n	23ea8 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   23e84:	2318      	movs	r3, #24
   23e86:	18fb      	adds	r3, r7, r3
   23e88:	885b      	ldrh	r3, [r3, #2]
   23e8a:	b29a      	uxth	r2, r3
   23e8c:	2338      	movs	r3, #56	; 0x38
   23e8e:	18f9      	adds	r1, r7, r3
   23e90:	2334      	movs	r3, #52	; 0x34
   23e92:	18fb      	adds	r3, r7, r3
   23e94:	8809      	ldrh	r1, [r1, #0]
   23e96:	881b      	ldrh	r3, [r3, #0]
   23e98:	18cb      	adds	r3, r1, r3
   23e9a:	b29b      	uxth	r3, r3
   23e9c:	18d3      	adds	r3, r2, r3
   23e9e:	b29a      	uxth	r2, r3
   23ea0:	2318      	movs	r3, #24
   23ea2:	18fb      	adds	r3, r7, r3
   23ea4:	805a      	strh	r2, [r3, #2]
   23ea6:	e00a      	b.n	23ebe <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   23ea8:	2318      	movs	r3, #24
   23eaa:	18fb      	adds	r3, r7, r3
   23eac:	885b      	ldrh	r3, [r3, #2]
   23eae:	b29a      	uxth	r2, r3
   23eb0:	1d3b      	adds	r3, r7, #4
   23eb2:	881b      	ldrh	r3, [r3, #0]
   23eb4:	18d3      	adds	r3, r2, r3
   23eb6:	b29a      	uxth	r2, r3
   23eb8:	2318      	movs	r3, #24
   23eba:	18fb      	adds	r3, r7, r3
   23ebc:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   23ebe:	231f      	movs	r3, #31
   23ec0:	18fc      	adds	r4, r7, r3
   23ec2:	4bb2      	ldr	r3, [pc, #712]	; (2418c <hif_send+0x358>)
   23ec4:	4798      	blx	r3
   23ec6:	0003      	movs	r3, r0
   23ec8:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   23eca:	231f      	movs	r3, #31
   23ecc:	18fb      	adds	r3, r7, r3
   23ece:	781b      	ldrb	r3, [r3, #0]
   23ed0:	b25b      	sxtb	r3, r3
   23ed2:	2b00      	cmp	r3, #0
   23ed4:	d000      	beq.n	23ed8 <hif_send+0xa4>
   23ed6:	e129      	b.n	2412c <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   23ed8:	2300      	movs	r3, #0
   23eda:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   23edc:	230e      	movs	r3, #14
   23ede:	18fb      	adds	r3, r7, r3
   23ee0:	2200      	movs	r2, #0
   23ee2:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   23ee4:	2300      	movs	r3, #0
   23ee6:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   23ee8:	1dfb      	adds	r3, r7, #7
   23eea:	781a      	ldrb	r2, [r3, #0]
   23eec:	697b      	ldr	r3, [r7, #20]
   23eee:	4313      	orrs	r3, r2
   23ef0:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   23ef2:	1dbb      	adds	r3, r7, #6
   23ef4:	781b      	ldrb	r3, [r3, #0]
   23ef6:	021a      	lsls	r2, r3, #8
   23ef8:	697b      	ldr	r3, [r7, #20]
   23efa:	4313      	orrs	r3, r2
   23efc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   23efe:	2318      	movs	r3, #24
   23f00:	18fb      	adds	r3, r7, r3
   23f02:	885b      	ldrh	r3, [r3, #2]
   23f04:	b29b      	uxth	r3, r3
   23f06:	041a      	lsls	r2, r3, #16
   23f08:	697b      	ldr	r3, [r7, #20]
   23f0a:	4313      	orrs	r3, r2
   23f0c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   23f0e:	697b      	ldr	r3, [r7, #20]
   23f10:	221f      	movs	r2, #31
   23f12:	18bc      	adds	r4, r7, r2
   23f14:	4a9e      	ldr	r2, [pc, #632]	; (24190 <hif_send+0x35c>)
   23f16:	0019      	movs	r1, r3
   23f18:	0010      	movs	r0, r2
   23f1a:	4b9e      	ldr	r3, [pc, #632]	; (24194 <hif_send+0x360>)
   23f1c:	4798      	blx	r3
   23f1e:	0003      	movs	r3, r0
   23f20:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   23f22:	231f      	movs	r3, #31
   23f24:	18fb      	adds	r3, r7, r3
   23f26:	781b      	ldrb	r3, [r3, #0]
   23f28:	b25b      	sxtb	r3, r3
   23f2a:	2b00      	cmp	r3, #0
   23f2c:	d000      	beq.n	23f30 <hif_send+0xfc>
   23f2e:	e119      	b.n	24164 <hif_send+0x330>

		reg = 0UL;
   23f30:	2300      	movs	r3, #0
   23f32:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   23f34:	697b      	ldr	r3, [r7, #20]
   23f36:	2202      	movs	r2, #2
   23f38:	4313      	orrs	r3, r2
   23f3a:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   23f3c:	697b      	ldr	r3, [r7, #20]
   23f3e:	221f      	movs	r2, #31
   23f40:	18bc      	adds	r4, r7, r2
   23f42:	4a95      	ldr	r2, [pc, #596]	; (24198 <hif_send+0x364>)
   23f44:	0019      	movs	r1, r3
   23f46:	0010      	movs	r0, r2
   23f48:	4b92      	ldr	r3, [pc, #584]	; (24194 <hif_send+0x360>)
   23f4a:	4798      	blx	r3
   23f4c:	0003      	movs	r3, r0
   23f4e:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   23f50:	231f      	movs	r3, #31
   23f52:	18fb      	adds	r3, r7, r3
   23f54:	781b      	ldrb	r3, [r3, #0]
   23f56:	b25b      	sxtb	r3, r3
   23f58:	2b00      	cmp	r3, #0
   23f5a:	d000      	beq.n	23f5e <hif_send+0x12a>
   23f5c:	e104      	b.n	24168 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   23f5e:	2300      	movs	r3, #0
   23f60:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   23f62:	230e      	movs	r3, #14
   23f64:	18fb      	adds	r3, r7, r3
   23f66:	2200      	movs	r2, #0
   23f68:	801a      	strh	r2, [r3, #0]
   23f6a:	e050      	b.n	2400e <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   23f6c:	231f      	movs	r3, #31
   23f6e:	18fc      	adds	r4, r7, r3
   23f70:	2314      	movs	r3, #20
   23f72:	18fb      	adds	r3, r7, r3
   23f74:	4a88      	ldr	r2, [pc, #544]	; (24198 <hif_send+0x364>)
   23f76:	0019      	movs	r1, r3
   23f78:	0010      	movs	r0, r2
   23f7a:	4b88      	ldr	r3, [pc, #544]	; (2419c <hif_send+0x368>)
   23f7c:	4798      	blx	r3
   23f7e:	0003      	movs	r3, r0
   23f80:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   23f82:	231f      	movs	r3, #31
   23f84:	18fb      	adds	r3, r7, r3
   23f86:	781b      	ldrb	r3, [r3, #0]
   23f88:	b25b      	sxtb	r3, r3
   23f8a:	2b00      	cmp	r3, #0
   23f8c:	d147      	bne.n	2401e <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   23f8e:	230e      	movs	r3, #14
   23f90:	18fb      	adds	r3, r7, r3
   23f92:	881b      	ldrh	r3, [r3, #0]
   23f94:	b29a      	uxth	r2, r3
   23f96:	23f4      	movs	r3, #244	; 0xf4
   23f98:	33ff      	adds	r3, #255	; 0xff
   23f9a:	429a      	cmp	r2, r3
   23f9c:	d916      	bls.n	23fcc <hif_send+0x198>
				if(cnt < 501) {
   23f9e:	230e      	movs	r3, #14
   23fa0:	18fb      	adds	r3, r7, r3
   23fa2:	881b      	ldrh	r3, [r3, #0]
   23fa4:	b29a      	uxth	r2, r3
   23fa6:	23fa      	movs	r3, #250	; 0xfa
   23fa8:	005b      	lsls	r3, r3, #1
   23faa:	429a      	cmp	r2, r3
   23fac:	d80b      	bhi.n	23fc6 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   23fae:	4b7c      	ldr	r3, [pc, #496]	; (241a0 <hif_send+0x36c>)
   23fb0:	0018      	movs	r0, r3
   23fb2:	4b7c      	ldr	r3, [pc, #496]	; (241a4 <hif_send+0x370>)
   23fb4:	4798      	blx	r3
   23fb6:	4b7c      	ldr	r3, [pc, #496]	; (241a8 <hif_send+0x374>)
   23fb8:	0018      	movs	r0, r3
   23fba:	4b7a      	ldr	r3, [pc, #488]	; (241a4 <hif_send+0x370>)
   23fbc:	4798      	blx	r3
   23fbe:	4b7b      	ldr	r3, [pc, #492]	; (241ac <hif_send+0x378>)
   23fc0:	0018      	movs	r0, r3
   23fc2:	4b78      	ldr	r3, [pc, #480]	; (241a4 <hif_send+0x370>)
   23fc4:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   23fc6:	2001      	movs	r0, #1
   23fc8:	4b79      	ldr	r3, [pc, #484]	; (241b0 <hif_send+0x37c>)
   23fca:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   23fcc:	697b      	ldr	r3, [r7, #20]
   23fce:	2202      	movs	r2, #2
   23fd0:	4013      	ands	r3, r2
   23fd2:	d113      	bne.n	23ffc <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   23fd4:	231f      	movs	r3, #31
   23fd6:	18fc      	adds	r4, r7, r3
   23fd8:	2310      	movs	r3, #16
   23fda:	18fb      	adds	r3, r7, r3
   23fdc:	4a75      	ldr	r2, [pc, #468]	; (241b4 <hif_send+0x380>)
   23fde:	0019      	movs	r1, r3
   23fe0:	0010      	movs	r0, r2
   23fe2:	4b6e      	ldr	r3, [pc, #440]	; (2419c <hif_send+0x368>)
   23fe4:	4798      	blx	r3
   23fe6:	0003      	movs	r3, r0
   23fe8:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   23fea:	231f      	movs	r3, #31
   23fec:	18fb      	adds	r3, r7, r3
   23fee:	781b      	ldrb	r3, [r3, #0]
   23ff0:	b25b      	sxtb	r3, r3
   23ff2:	2b00      	cmp	r3, #0
   23ff4:	d015      	beq.n	24022 <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   23ff6:	2300      	movs	r3, #0
   23ff8:	613b      	str	r3, [r7, #16]
					goto ERR1;
   23ffa:	e0bc      	b.n	24176 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   23ffc:	230e      	movs	r3, #14
   23ffe:	18fb      	adds	r3, r7, r3
   24000:	881b      	ldrh	r3, [r3, #0]
   24002:	b29b      	uxth	r3, r3
   24004:	3301      	adds	r3, #1
   24006:	b29a      	uxth	r2, r3
   24008:	230e      	movs	r3, #14
   2400a:	18fb      	adds	r3, r7, r3
   2400c:	801a      	strh	r2, [r3, #0]
   2400e:	230e      	movs	r3, #14
   24010:	18fb      	adds	r3, r7, r3
   24012:	881b      	ldrh	r3, [r3, #0]
   24014:	b29b      	uxth	r3, r3
   24016:	4a68      	ldr	r2, [pc, #416]	; (241b8 <hif_send+0x384>)
   24018:	4293      	cmp	r3, r2
   2401a:	d9a7      	bls.n	23f6c <hif_send+0x138>
   2401c:	e002      	b.n	24024 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   2401e:	46c0      	nop			; (mov r8, r8)
   24020:	e000      	b.n	24024 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   24022:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   24024:	693b      	ldr	r3, [r7, #16]
   24026:	2b00      	cmp	r3, #0
   24028:	d100      	bne.n	2402c <hif_send+0x1f8>
   2402a:	e074      	b.n	24116 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   2402c:	693b      	ldr	r3, [r7, #16]
   2402e:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   24030:	2318      	movs	r3, #24
   24032:	18fb      	adds	r3, r7, r3
   24034:	885b      	ldrh	r3, [r3, #2]
   24036:	b29a      	uxth	r2, r3
   24038:	2318      	movs	r3, #24
   2403a:	18fb      	adds	r3, r7, r3
   2403c:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   2403e:	68bb      	ldr	r3, [r7, #8]
   24040:	221f      	movs	r2, #31
   24042:	18bc      	adds	r4, r7, r2
   24044:	2218      	movs	r2, #24
   24046:	18b9      	adds	r1, r7, r2
   24048:	2208      	movs	r2, #8
   2404a:	0018      	movs	r0, r3
   2404c:	4b5b      	ldr	r3, [pc, #364]	; (241bc <hif_send+0x388>)
   2404e:	4798      	blx	r3
   24050:	0003      	movs	r3, r0
   24052:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   24054:	231f      	movs	r3, #31
   24056:	18fb      	adds	r3, r7, r3
   24058:	781b      	ldrb	r3, [r3, #0]
   2405a:	b25b      	sxtb	r3, r3
   2405c:	2b00      	cmp	r3, #0
   2405e:	d000      	beq.n	24062 <hif_send+0x22e>
   24060:	e084      	b.n	2416c <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   24062:	68bb      	ldr	r3, [r7, #8]
   24064:	3308      	adds	r3, #8
   24066:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   24068:	683b      	ldr	r3, [r7, #0]
   2406a:	2b00      	cmp	r3, #0
   2406c:	d016      	beq.n	2409c <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   2406e:	68b8      	ldr	r0, [r7, #8]
   24070:	1d3b      	adds	r3, r7, #4
   24072:	881a      	ldrh	r2, [r3, #0]
   24074:	231f      	movs	r3, #31
   24076:	18fc      	adds	r4, r7, r3
   24078:	683b      	ldr	r3, [r7, #0]
   2407a:	0019      	movs	r1, r3
   2407c:	4b4f      	ldr	r3, [pc, #316]	; (241bc <hif_send+0x388>)
   2407e:	4798      	blx	r3
   24080:	0003      	movs	r3, r0
   24082:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   24084:	231f      	movs	r3, #31
   24086:	18fb      	adds	r3, r7, r3
   24088:	781b      	ldrb	r3, [r3, #0]
   2408a:	b25b      	sxtb	r3, r3
   2408c:	2b00      	cmp	r3, #0
   2408e:	d000      	beq.n	24092 <hif_send+0x25e>
   24090:	e06e      	b.n	24170 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   24092:	1d3b      	adds	r3, r7, #4
   24094:	881a      	ldrh	r2, [r3, #0]
   24096:	68bb      	ldr	r3, [r7, #8]
   24098:	18d3      	adds	r3, r2, r3
   2409a:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   2409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2409e:	2b00      	cmp	r3, #0
   240a0:	d021      	beq.n	240e6 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   240a2:	2338      	movs	r3, #56	; 0x38
   240a4:	18fb      	adds	r3, r7, r3
   240a6:	881a      	ldrh	r2, [r3, #0]
   240a8:	1d3b      	adds	r3, r7, #4
   240aa:	881b      	ldrh	r3, [r3, #0]
   240ac:	1ad3      	subs	r3, r2, r3
   240ae:	001a      	movs	r2, r3
   240b0:	68bb      	ldr	r3, [r7, #8]
   240b2:	18d3      	adds	r3, r2, r3
   240b4:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   240b6:	68b8      	ldr	r0, [r7, #8]
   240b8:	2334      	movs	r3, #52	; 0x34
   240ba:	18fb      	adds	r3, r7, r3
   240bc:	881a      	ldrh	r2, [r3, #0]
   240be:	231f      	movs	r3, #31
   240c0:	18fc      	adds	r4, r7, r3
   240c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   240c4:	0019      	movs	r1, r3
   240c6:	4b3d      	ldr	r3, [pc, #244]	; (241bc <hif_send+0x388>)
   240c8:	4798      	blx	r3
   240ca:	0003      	movs	r3, r0
   240cc:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   240ce:	231f      	movs	r3, #31
   240d0:	18fb      	adds	r3, r7, r3
   240d2:	781b      	ldrb	r3, [r3, #0]
   240d4:	b25b      	sxtb	r3, r3
   240d6:	2b00      	cmp	r3, #0
   240d8:	d14c      	bne.n	24174 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   240da:	2334      	movs	r3, #52	; 0x34
   240dc:	18fb      	adds	r3, r7, r3
   240de:	881a      	ldrh	r2, [r3, #0]
   240e0:	68bb      	ldr	r3, [r7, #8]
   240e2:	18d3      	adds	r3, r2, r3
   240e4:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   240e6:	693b      	ldr	r3, [r7, #16]
   240e8:	009b      	lsls	r3, r3, #2
   240ea:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   240ec:	697b      	ldr	r3, [r7, #20]
   240ee:	2202      	movs	r2, #2
   240f0:	4313      	orrs	r3, r2
   240f2:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   240f4:	697b      	ldr	r3, [r7, #20]
   240f6:	221f      	movs	r2, #31
   240f8:	18bc      	adds	r4, r7, r2
   240fa:	4a31      	ldr	r2, [pc, #196]	; (241c0 <hif_send+0x38c>)
   240fc:	0019      	movs	r1, r3
   240fe:	0010      	movs	r0, r2
   24100:	4b24      	ldr	r3, [pc, #144]	; (24194 <hif_send+0x360>)
   24102:	4798      	blx	r3
   24104:	0003      	movs	r3, r0
   24106:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   24108:	231f      	movs	r3, #31
   2410a:	18fb      	adds	r3, r7, r3
   2410c:	781b      	ldrb	r3, [r3, #0]
   2410e:	b25b      	sxtb	r3, r3
   24110:	2b00      	cmp	r3, #0
   24112:	d01c      	beq.n	2414e <hif_send+0x31a>
   24114:	e02f      	b.n	24176 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   24116:	231f      	movs	r3, #31
   24118:	18fc      	adds	r4, r7, r3
   2411a:	4b2a      	ldr	r3, [pc, #168]	; (241c4 <hif_send+0x390>)
   2411c:	4798      	blx	r3
   2411e:	0003      	movs	r3, r0
   24120:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   24122:	231f      	movs	r3, #31
   24124:	18fb      	adds	r3, r7, r3
   24126:	22fd      	movs	r2, #253	; 0xfd
   24128:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   2412a:	e026      	b.n	2417a <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   2412c:	2398      	movs	r3, #152	; 0x98
   2412e:	33ff      	adds	r3, #255	; 0xff
   24130:	001a      	movs	r2, r3
   24132:	4925      	ldr	r1, [pc, #148]	; (241c8 <hif_send+0x394>)
   24134:	4b25      	ldr	r3, [pc, #148]	; (241cc <hif_send+0x398>)
   24136:	0018      	movs	r0, r3
   24138:	4b1a      	ldr	r3, [pc, #104]	; (241a4 <hif_send+0x370>)
   2413a:	4798      	blx	r3
   2413c:	4b24      	ldr	r3, [pc, #144]	; (241d0 <hif_send+0x39c>)
   2413e:	0018      	movs	r0, r3
   24140:	4b18      	ldr	r3, [pc, #96]	; (241a4 <hif_send+0x370>)
   24142:	4798      	blx	r3
   24144:	4b19      	ldr	r3, [pc, #100]	; (241ac <hif_send+0x378>)
   24146:	0018      	movs	r0, r3
   24148:	4b16      	ldr	r3, [pc, #88]	; (241a4 <hif_send+0x370>)
   2414a:	4798      	blx	r3
		goto ERR2;
   2414c:	e015      	b.n	2417a <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   2414e:	231f      	movs	r3, #31
   24150:	18fc      	adds	r4, r7, r3
   24152:	4b1c      	ldr	r3, [pc, #112]	; (241c4 <hif_send+0x390>)
   24154:	4798      	blx	r3
   24156:	0003      	movs	r3, r0
   24158:	7023      	strb	r3, [r4, #0]
	return ret;
   2415a:	231f      	movs	r3, #31
   2415c:	18fb      	adds	r3, r7, r3
   2415e:	781b      	ldrb	r3, [r3, #0]
   24160:	b25b      	sxtb	r3, r3
   24162:	e00e      	b.n	24182 <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   24164:	46c0      	nop			; (mov r8, r8)
   24166:	e006      	b.n	24176 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   24168:	46c0      	nop			; (mov r8, r8)
   2416a:	e004      	b.n	24176 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   2416c:	46c0      	nop			; (mov r8, r8)
   2416e:	e002      	b.n	24176 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   24170:	46c0      	nop			; (mov r8, r8)
   24172:	e000      	b.n	24176 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   24174:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   24176:	4b17      	ldr	r3, [pc, #92]	; (241d4 <hif_send+0x3a0>)
   24178:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   2417a:	231f      	movs	r3, #31
   2417c:	18fb      	adds	r3, r7, r3
   2417e:	781b      	ldrb	r3, [r3, #0]
   24180:	b25b      	sxtb	r3, r3
}
   24182:	0018      	movs	r0, r3
   24184:	46bd      	mov	sp, r7
   24186:	b009      	add	sp, #36	; 0x24
   24188:	bd90      	pop	{r4, r7, pc}
   2418a:	46c0      	nop			; (mov r8, r8)
   2418c:	00023cfd 	.word	0x00023cfd
   24190:	0000108c 	.word	0x0000108c
   24194:	00025c89 	.word	0x00025c89
   24198:	00001078 	.word	0x00001078
   2419c:	00025c65 	.word	0x00025c65
   241a0:	0003c954 	.word	0x0003c954
   241a4:	00020e3d 	.word	0x00020e3d
   241a8:	0003c960 	.word	0x0003c960
   241ac:	0003c974 	.word	0x0003c974
   241b0:	000232f5 	.word	0x000232f5
   241b4:	00150400 	.word	0x00150400
   241b8:	000003e7 	.word	0x000003e7
   241bc:	00025dd1 	.word	0x00025dd1
   241c0:	0000106c 	.word	0x0000106c
   241c4:	00023d95 	.word	0x00023d95
   241c8:	0003cc7c 	.word	0x0003cc7c
   241cc:	0003c978 	.word	0x0003c978
   241d0:	0003c98c 	.word	0x0003c98c
   241d4:	00023d6d 	.word	0x00023d6d

000241d8 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   241d8:	b590      	push	{r4, r7, lr}
   241da:	b087      	sub	sp, #28
   241dc:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   241de:	230f      	movs	r3, #15
   241e0:	18fb      	adds	r3, r7, r3
   241e2:	2200      	movs	r2, #0
   241e4:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   241e6:	230f      	movs	r3, #15
   241e8:	18fc      	adds	r4, r7, r3
   241ea:	2308      	movs	r3, #8
   241ec:	18fb      	adds	r3, r7, r3
   241ee:	4adc      	ldr	r2, [pc, #880]	; (24560 <hif_isr+0x388>)
   241f0:	0019      	movs	r1, r3
   241f2:	0010      	movs	r0, r2
   241f4:	4bdb      	ldr	r3, [pc, #876]	; (24564 <hif_isr+0x38c>)
   241f6:	4798      	blx	r3
   241f8:	0003      	movs	r3, r0
   241fa:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   241fc:	230f      	movs	r3, #15
   241fe:	18fb      	adds	r3, r7, r3
   24200:	781b      	ldrb	r3, [r3, #0]
   24202:	b25b      	sxtb	r3, r3
   24204:	2b00      	cmp	r3, #0
   24206:	d000      	beq.n	2420a <hif_isr+0x32>
   24208:	e21e      	b.n	24648 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   2420a:	68bb      	ldr	r3, [r7, #8]
   2420c:	2201      	movs	r2, #1
   2420e:	4013      	ands	r3, r2
   24210:	d100      	bne.n	24214 <hif_isr+0x3c>
   24212:	e204      	b.n	2461e <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   24214:	2000      	movs	r0, #0
   24216:	4bd4      	ldr	r3, [pc, #848]	; (24568 <hif_isr+0x390>)
   24218:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   2421a:	68bb      	ldr	r3, [r7, #8]
   2421c:	2201      	movs	r2, #1
   2421e:	4393      	bics	r3, r2
   24220:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   24222:	68bb      	ldr	r3, [r7, #8]
   24224:	220f      	movs	r2, #15
   24226:	18bc      	adds	r4, r7, r2
   24228:	4acd      	ldr	r2, [pc, #820]	; (24560 <hif_isr+0x388>)
   2422a:	0019      	movs	r1, r3
   2422c:	0010      	movs	r0, r2
   2422e:	4bcf      	ldr	r3, [pc, #828]	; (2456c <hif_isr+0x394>)
   24230:	4798      	blx	r3
   24232:	0003      	movs	r3, r0
   24234:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   24236:	230f      	movs	r3, #15
   24238:	18fb      	adds	r3, r7, r3
   2423a:	781b      	ldrb	r3, [r3, #0]
   2423c:	b25b      	sxtb	r3, r3
   2423e:	2b00      	cmp	r3, #0
   24240:	d000      	beq.n	24244 <hif_isr+0x6c>
   24242:	e210      	b.n	24666 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   24244:	4bca      	ldr	r3, [pc, #808]	; (24570 <hif_isr+0x398>)
   24246:	2201      	movs	r2, #1
   24248:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   2424a:	68bb      	ldr	r3, [r7, #8]
   2424c:	089b      	lsrs	r3, r3, #2
   2424e:	b29a      	uxth	r2, r3
   24250:	230c      	movs	r3, #12
   24252:	18fb      	adds	r3, r7, r3
   24254:	0512      	lsls	r2, r2, #20
   24256:	0d12      	lsrs	r2, r2, #20
   24258:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   2425a:	230c      	movs	r3, #12
   2425c:	18fb      	adds	r3, r7, r3
   2425e:	881b      	ldrh	r3, [r3, #0]
   24260:	2b00      	cmp	r3, #0
   24262:	d100      	bne.n	24266 <hif_isr+0x8e>
   24264:	e1c8      	b.n	245f8 <hif_isr+0x420>
				uint32 address = 0;
   24266:	2300      	movs	r3, #0
   24268:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   2426a:	230f      	movs	r3, #15
   2426c:	18fc      	adds	r4, r7, r3
   2426e:	003b      	movs	r3, r7
   24270:	4ac0      	ldr	r2, [pc, #768]	; (24574 <hif_isr+0x39c>)
   24272:	0019      	movs	r1, r3
   24274:	0010      	movs	r0, r2
   24276:	4bbb      	ldr	r3, [pc, #748]	; (24564 <hif_isr+0x38c>)
   24278:	4798      	blx	r3
   2427a:	0003      	movs	r3, r0
   2427c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   2427e:	230f      	movs	r3, #15
   24280:	18fb      	adds	r3, r7, r3
   24282:	781b      	ldrb	r3, [r3, #0]
   24284:	b25b      	sxtb	r3, r3
   24286:	2b00      	cmp	r3, #0
   24288:	d012      	beq.n	242b0 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   2428a:	23e4      	movs	r3, #228	; 0xe4
   2428c:	005a      	lsls	r2, r3, #1
   2428e:	49ba      	ldr	r1, [pc, #744]	; (24578 <hif_isr+0x3a0>)
   24290:	4bba      	ldr	r3, [pc, #744]	; (2457c <hif_isr+0x3a4>)
   24292:	0018      	movs	r0, r3
   24294:	4bba      	ldr	r3, [pc, #744]	; (24580 <hif_isr+0x3a8>)
   24296:	4798      	blx	r3
   24298:	4bba      	ldr	r3, [pc, #744]	; (24584 <hif_isr+0x3ac>)
   2429a:	0018      	movs	r0, r3
   2429c:	4bb8      	ldr	r3, [pc, #736]	; (24580 <hif_isr+0x3a8>)
   2429e:	4798      	blx	r3
   242a0:	4bb9      	ldr	r3, [pc, #740]	; (24588 <hif_isr+0x3b0>)
   242a2:	0018      	movs	r0, r3
   242a4:	4bb6      	ldr	r3, [pc, #728]	; (24580 <hif_isr+0x3a8>)
   242a6:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   242a8:	2001      	movs	r0, #1
   242aa:	4baf      	ldr	r3, [pc, #700]	; (24568 <hif_isr+0x390>)
   242ac:	4798      	blx	r3
					goto ERR1;
   242ae:	e1db      	b.n	24668 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   242b0:	683a      	ldr	r2, [r7, #0]
   242b2:	4baf      	ldr	r3, [pc, #700]	; (24570 <hif_isr+0x398>)
   242b4:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   242b6:	230c      	movs	r3, #12
   242b8:	18fb      	adds	r3, r7, r3
   242ba:	881a      	ldrh	r2, [r3, #0]
   242bc:	4bac      	ldr	r3, [pc, #688]	; (24570 <hif_isr+0x398>)
   242be:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   242c0:	683b      	ldr	r3, [r7, #0]
   242c2:	220f      	movs	r2, #15
   242c4:	18bc      	adds	r4, r7, r2
   242c6:	1d39      	adds	r1, r7, #4
   242c8:	2204      	movs	r2, #4
   242ca:	0018      	movs	r0, r3
   242cc:	4baf      	ldr	r3, [pc, #700]	; (2458c <hif_isr+0x3b4>)
   242ce:	4798      	blx	r3
   242d0:	0003      	movs	r3, r0
   242d2:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   242d4:	1d3b      	adds	r3, r7, #4
   242d6:	885b      	ldrh	r3, [r3, #2]
   242d8:	b29a      	uxth	r2, r3
   242da:	1d3b      	adds	r3, r7, #4
   242dc:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   242de:	230f      	movs	r3, #15
   242e0:	18fb      	adds	r3, r7, r3
   242e2:	781b      	ldrb	r3, [r3, #0]
   242e4:	b25b      	sxtb	r3, r3
   242e6:	2b00      	cmp	r3, #0
   242e8:	d012      	beq.n	24310 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   242ea:	23e9      	movs	r3, #233	; 0xe9
   242ec:	005a      	lsls	r2, r3, #1
   242ee:	49a2      	ldr	r1, [pc, #648]	; (24578 <hif_isr+0x3a0>)
   242f0:	4ba2      	ldr	r3, [pc, #648]	; (2457c <hif_isr+0x3a4>)
   242f2:	0018      	movs	r0, r3
   242f4:	4ba2      	ldr	r3, [pc, #648]	; (24580 <hif_isr+0x3a8>)
   242f6:	4798      	blx	r3
   242f8:	4ba5      	ldr	r3, [pc, #660]	; (24590 <hif_isr+0x3b8>)
   242fa:	0018      	movs	r0, r3
   242fc:	4ba0      	ldr	r3, [pc, #640]	; (24580 <hif_isr+0x3a8>)
   242fe:	4798      	blx	r3
   24300:	4ba1      	ldr	r3, [pc, #644]	; (24588 <hif_isr+0x3b0>)
   24302:	0018      	movs	r0, r3
   24304:	4b9e      	ldr	r3, [pc, #632]	; (24580 <hif_isr+0x3a8>)
   24306:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   24308:	2001      	movs	r0, #1
   2430a:	4b97      	ldr	r3, [pc, #604]	; (24568 <hif_isr+0x390>)
   2430c:	4798      	blx	r3
					goto ERR1;
   2430e:	e1ab      	b.n	24668 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   24310:	1d3b      	adds	r3, r7, #4
   24312:	885b      	ldrh	r3, [r3, #2]
   24314:	b29b      	uxth	r3, r3
   24316:	220c      	movs	r2, #12
   24318:	18ba      	adds	r2, r7, r2
   2431a:	8812      	ldrh	r2, [r2, #0]
   2431c:	429a      	cmp	r2, r3
   2431e:	d02f      	beq.n	24380 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   24320:	230c      	movs	r3, #12
   24322:	18fb      	adds	r3, r7, r3
   24324:	881b      	ldrh	r3, [r3, #0]
   24326:	1d3a      	adds	r2, r7, #4
   24328:	8852      	ldrh	r2, [r2, #2]
   2432a:	b292      	uxth	r2, r2
   2432c:	1a9b      	subs	r3, r3, r2
   2432e:	2b04      	cmp	r3, #4
   24330:	dd26      	ble.n	24380 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   24332:	23dc      	movs	r3, #220	; 0xdc
   24334:	33ff      	adds	r3, #255	; 0xff
   24336:	001a      	movs	r2, r3
   24338:	498f      	ldr	r1, [pc, #572]	; (24578 <hif_isr+0x3a0>)
   2433a:	4b90      	ldr	r3, [pc, #576]	; (2457c <hif_isr+0x3a4>)
   2433c:	0018      	movs	r0, r3
   2433e:	4b90      	ldr	r3, [pc, #576]	; (24580 <hif_isr+0x3a8>)
   24340:	4798      	blx	r3
   24342:	230c      	movs	r3, #12
   24344:	18fb      	adds	r3, r7, r3
   24346:	8819      	ldrh	r1, [r3, #0]
   24348:	1d3b      	adds	r3, r7, #4
   2434a:	885b      	ldrh	r3, [r3, #2]
   2434c:	b29b      	uxth	r3, r3
   2434e:	001a      	movs	r2, r3
   24350:	1d3b      	adds	r3, r7, #4
   24352:	781b      	ldrb	r3, [r3, #0]
   24354:	b2db      	uxtb	r3, r3
   24356:	001c      	movs	r4, r3
   24358:	1d3b      	adds	r3, r7, #4
   2435a:	785b      	ldrb	r3, [r3, #1]
   2435c:	b2db      	uxtb	r3, r3
   2435e:	488d      	ldr	r0, [pc, #564]	; (24594 <hif_isr+0x3bc>)
   24360:	9300      	str	r3, [sp, #0]
   24362:	0023      	movs	r3, r4
   24364:	4c86      	ldr	r4, [pc, #536]	; (24580 <hif_isr+0x3a8>)
   24366:	47a0      	blx	r4
   24368:	4b87      	ldr	r3, [pc, #540]	; (24588 <hif_isr+0x3b0>)
   2436a:	0018      	movs	r0, r3
   2436c:	4b84      	ldr	r3, [pc, #528]	; (24580 <hif_isr+0x3a8>)
   2436e:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   24370:	2001      	movs	r0, #1
   24372:	4b7d      	ldr	r3, [pc, #500]	; (24568 <hif_isr+0x390>)
   24374:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   24376:	230f      	movs	r3, #15
   24378:	18fb      	adds	r3, r7, r3
   2437a:	22fa      	movs	r2, #250	; 0xfa
   2437c:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   2437e:	e173      	b.n	24668 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   24380:	1d3b      	adds	r3, r7, #4
   24382:	781b      	ldrb	r3, [r3, #0]
   24384:	b2db      	uxtb	r3, r3
   24386:	2b01      	cmp	r3, #1
   24388:	d122      	bne.n	243d0 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   2438a:	4b79      	ldr	r3, [pc, #484]	; (24570 <hif_isr+0x398>)
   2438c:	691b      	ldr	r3, [r3, #16]
   2438e:	2b00      	cmp	r3, #0
   24390:	d00d      	beq.n	243ae <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   24392:	4b77      	ldr	r3, [pc, #476]	; (24570 <hif_isr+0x398>)
   24394:	691b      	ldr	r3, [r3, #16]
   24396:	1d3a      	adds	r2, r7, #4
   24398:	7852      	ldrb	r2, [r2, #1]
   2439a:	b2d0      	uxtb	r0, r2
   2439c:	1d3a      	adds	r2, r7, #4
   2439e:	8852      	ldrh	r2, [r2, #2]
   243a0:	b292      	uxth	r2, r2
   243a2:	3a08      	subs	r2, #8
   243a4:	b291      	uxth	r1, r2
   243a6:	683a      	ldr	r2, [r7, #0]
   243a8:	3208      	adds	r2, #8
   243aa:	4798      	blx	r3
   243ac:	e102      	b.n	245b4 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   243ae:	23e8      	movs	r3, #232	; 0xe8
   243b0:	33ff      	adds	r3, #255	; 0xff
   243b2:	001a      	movs	r2, r3
   243b4:	4970      	ldr	r1, [pc, #448]	; (24578 <hif_isr+0x3a0>)
   243b6:	4b71      	ldr	r3, [pc, #452]	; (2457c <hif_isr+0x3a4>)
   243b8:	0018      	movs	r0, r3
   243ba:	4b71      	ldr	r3, [pc, #452]	; (24580 <hif_isr+0x3a8>)
   243bc:	4798      	blx	r3
   243be:	4b76      	ldr	r3, [pc, #472]	; (24598 <hif_isr+0x3c0>)
   243c0:	0018      	movs	r0, r3
   243c2:	4b6f      	ldr	r3, [pc, #444]	; (24580 <hif_isr+0x3a8>)
   243c4:	4798      	blx	r3
   243c6:	4b70      	ldr	r3, [pc, #448]	; (24588 <hif_isr+0x3b0>)
   243c8:	0018      	movs	r0, r3
   243ca:	4b6d      	ldr	r3, [pc, #436]	; (24580 <hif_isr+0x3a8>)
   243cc:	4798      	blx	r3
   243ce:	e0f1      	b.n	245b4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   243d0:	1d3b      	adds	r3, r7, #4
   243d2:	781b      	ldrb	r3, [r3, #0]
   243d4:	b2db      	uxtb	r3, r3
   243d6:	2b02      	cmp	r3, #2
   243d8:	d122      	bne.n	24420 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   243da:	4b65      	ldr	r3, [pc, #404]	; (24570 <hif_isr+0x398>)
   243dc:	695b      	ldr	r3, [r3, #20]
   243de:	2b00      	cmp	r3, #0
   243e0:	d00d      	beq.n	243fe <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   243e2:	4b63      	ldr	r3, [pc, #396]	; (24570 <hif_isr+0x398>)
   243e4:	695b      	ldr	r3, [r3, #20]
   243e6:	1d3a      	adds	r2, r7, #4
   243e8:	7852      	ldrb	r2, [r2, #1]
   243ea:	b2d0      	uxtb	r0, r2
   243ec:	1d3a      	adds	r2, r7, #4
   243ee:	8852      	ldrh	r2, [r2, #2]
   243f0:	b292      	uxth	r2, r2
   243f2:	3a08      	subs	r2, #8
   243f4:	b291      	uxth	r1, r2
   243f6:	683a      	ldr	r2, [r7, #0]
   243f8:	3208      	adds	r2, #8
   243fa:	4798      	blx	r3
   243fc:	e0da      	b.n	245b4 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   243fe:	23f0      	movs	r3, #240	; 0xf0
   24400:	33ff      	adds	r3, #255	; 0xff
   24402:	001a      	movs	r2, r3
   24404:	495c      	ldr	r1, [pc, #368]	; (24578 <hif_isr+0x3a0>)
   24406:	4b5d      	ldr	r3, [pc, #372]	; (2457c <hif_isr+0x3a4>)
   24408:	0018      	movs	r0, r3
   2440a:	4b5d      	ldr	r3, [pc, #372]	; (24580 <hif_isr+0x3a8>)
   2440c:	4798      	blx	r3
   2440e:	4b63      	ldr	r3, [pc, #396]	; (2459c <hif_isr+0x3c4>)
   24410:	0018      	movs	r0, r3
   24412:	4b5b      	ldr	r3, [pc, #364]	; (24580 <hif_isr+0x3a8>)
   24414:	4798      	blx	r3
   24416:	4b5c      	ldr	r3, [pc, #368]	; (24588 <hif_isr+0x3b0>)
   24418:	0018      	movs	r0, r3
   2441a:	4b59      	ldr	r3, [pc, #356]	; (24580 <hif_isr+0x3a8>)
   2441c:	4798      	blx	r3
   2441e:	e0c9      	b.n	245b4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   24420:	1d3b      	adds	r3, r7, #4
   24422:	781b      	ldrb	r3, [r3, #0]
   24424:	b2db      	uxtb	r3, r3
   24426:	2b04      	cmp	r3, #4
   24428:	d122      	bne.n	24470 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   2442a:	4b51      	ldr	r3, [pc, #324]	; (24570 <hif_isr+0x398>)
   2442c:	699b      	ldr	r3, [r3, #24]
   2442e:	2b00      	cmp	r3, #0
   24430:	d00d      	beq.n	2444e <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   24432:	4b4f      	ldr	r3, [pc, #316]	; (24570 <hif_isr+0x398>)
   24434:	699b      	ldr	r3, [r3, #24]
   24436:	1d3a      	adds	r2, r7, #4
   24438:	7852      	ldrb	r2, [r2, #1]
   2443a:	b2d0      	uxtb	r0, r2
   2443c:	1d3a      	adds	r2, r7, #4
   2443e:	8852      	ldrh	r2, [r2, #2]
   24440:	b292      	uxth	r2, r2
   24442:	3a08      	subs	r2, #8
   24444:	b291      	uxth	r1, r2
   24446:	683a      	ldr	r2, [r7, #0]
   24448:	3208      	adds	r2, #8
   2444a:	4798      	blx	r3
   2444c:	e0b2      	b.n	245b4 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   2444e:	23f8      	movs	r3, #248	; 0xf8
   24450:	33ff      	adds	r3, #255	; 0xff
   24452:	001a      	movs	r2, r3
   24454:	4948      	ldr	r1, [pc, #288]	; (24578 <hif_isr+0x3a0>)
   24456:	4b49      	ldr	r3, [pc, #292]	; (2457c <hif_isr+0x3a4>)
   24458:	0018      	movs	r0, r3
   2445a:	4b49      	ldr	r3, [pc, #292]	; (24580 <hif_isr+0x3a8>)
   2445c:	4798      	blx	r3
   2445e:	4b50      	ldr	r3, [pc, #320]	; (245a0 <hif_isr+0x3c8>)
   24460:	0018      	movs	r0, r3
   24462:	4b47      	ldr	r3, [pc, #284]	; (24580 <hif_isr+0x3a8>)
   24464:	4798      	blx	r3
   24466:	4b48      	ldr	r3, [pc, #288]	; (24588 <hif_isr+0x3b0>)
   24468:	0018      	movs	r0, r3
   2446a:	4b45      	ldr	r3, [pc, #276]	; (24580 <hif_isr+0x3a8>)
   2446c:	4798      	blx	r3
   2446e:	e0a1      	b.n	245b4 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   24470:	1d3b      	adds	r3, r7, #4
   24472:	781b      	ldrb	r3, [r3, #0]
   24474:	b2db      	uxtb	r3, r3
   24476:	2b06      	cmp	r3, #6
   24478:	d121      	bne.n	244be <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   2447a:	4b3d      	ldr	r3, [pc, #244]	; (24570 <hif_isr+0x398>)
   2447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2447e:	2b00      	cmp	r3, #0
   24480:	d00d      	beq.n	2449e <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   24482:	4b3b      	ldr	r3, [pc, #236]	; (24570 <hif_isr+0x398>)
   24484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   24486:	1d3a      	adds	r2, r7, #4
   24488:	7852      	ldrb	r2, [r2, #1]
   2448a:	b2d0      	uxtb	r0, r2
   2448c:	1d3a      	adds	r2, r7, #4
   2448e:	8852      	ldrh	r2, [r2, #2]
   24490:	b292      	uxth	r2, r2
   24492:	3a08      	subs	r2, #8
   24494:	b291      	uxth	r1, r2
   24496:	683a      	ldr	r2, [r7, #0]
   24498:	3208      	adds	r2, #8
   2449a:	4798      	blx	r3
   2449c:	e08a      	b.n	245b4 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   2449e:	2380      	movs	r3, #128	; 0x80
   244a0:	009a      	lsls	r2, r3, #2
   244a2:	4935      	ldr	r1, [pc, #212]	; (24578 <hif_isr+0x3a0>)
   244a4:	4b35      	ldr	r3, [pc, #212]	; (2457c <hif_isr+0x3a4>)
   244a6:	0018      	movs	r0, r3
   244a8:	4b35      	ldr	r3, [pc, #212]	; (24580 <hif_isr+0x3a8>)
   244aa:	4798      	blx	r3
   244ac:	4b3d      	ldr	r3, [pc, #244]	; (245a4 <hif_isr+0x3cc>)
   244ae:	0018      	movs	r0, r3
   244b0:	4b33      	ldr	r3, [pc, #204]	; (24580 <hif_isr+0x3a8>)
   244b2:	4798      	blx	r3
   244b4:	4b34      	ldr	r3, [pc, #208]	; (24588 <hif_isr+0x3b0>)
   244b6:	0018      	movs	r0, r3
   244b8:	4b31      	ldr	r3, [pc, #196]	; (24580 <hif_isr+0x3a8>)
   244ba:	4798      	blx	r3
   244bc:	e07a      	b.n	245b4 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   244be:	1d3b      	adds	r3, r7, #4
   244c0:	781b      	ldrb	r3, [r3, #0]
   244c2:	b2db      	uxtb	r3, r3
   244c4:	2b07      	cmp	r3, #7
   244c6:	d120      	bne.n	2450a <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   244c8:	4b29      	ldr	r3, [pc, #164]	; (24570 <hif_isr+0x398>)
   244ca:	69db      	ldr	r3, [r3, #28]
   244cc:	2b00      	cmp	r3, #0
   244ce:	d00d      	beq.n	244ec <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   244d0:	4b27      	ldr	r3, [pc, #156]	; (24570 <hif_isr+0x398>)
   244d2:	69db      	ldr	r3, [r3, #28]
   244d4:	1d3a      	adds	r2, r7, #4
   244d6:	7852      	ldrb	r2, [r2, #1]
   244d8:	b2d0      	uxtb	r0, r2
   244da:	1d3a      	adds	r2, r7, #4
   244dc:	8852      	ldrh	r2, [r2, #2]
   244de:	b292      	uxth	r2, r2
   244e0:	3a08      	subs	r2, #8
   244e2:	b291      	uxth	r1, r2
   244e4:	683a      	ldr	r2, [r7, #0]
   244e6:	3208      	adds	r2, #8
   244e8:	4798      	blx	r3
   244ea:	e063      	b.n	245b4 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   244ec:	4a2e      	ldr	r2, [pc, #184]	; (245a8 <hif_isr+0x3d0>)
   244ee:	4922      	ldr	r1, [pc, #136]	; (24578 <hif_isr+0x3a0>)
   244f0:	4b22      	ldr	r3, [pc, #136]	; (2457c <hif_isr+0x3a4>)
   244f2:	0018      	movs	r0, r3
   244f4:	4b22      	ldr	r3, [pc, #136]	; (24580 <hif_isr+0x3a8>)
   244f6:	4798      	blx	r3
   244f8:	4b2c      	ldr	r3, [pc, #176]	; (245ac <hif_isr+0x3d4>)
   244fa:	0018      	movs	r0, r3
   244fc:	4b20      	ldr	r3, [pc, #128]	; (24580 <hif_isr+0x3a8>)
   244fe:	4798      	blx	r3
   24500:	4b21      	ldr	r3, [pc, #132]	; (24588 <hif_isr+0x3b0>)
   24502:	0018      	movs	r0, r3
   24504:	4b1e      	ldr	r3, [pc, #120]	; (24580 <hif_isr+0x3a8>)
   24506:	4798      	blx	r3
   24508:	e054      	b.n	245b4 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   2450a:	1d3b      	adds	r3, r7, #4
   2450c:	781b      	ldrb	r3, [r3, #0]
   2450e:	b2db      	uxtb	r3, r3
   24510:	2b05      	cmp	r3, #5
   24512:	d111      	bne.n	24538 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   24514:	4b16      	ldr	r3, [pc, #88]	; (24570 <hif_isr+0x398>)
   24516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24518:	2b00      	cmp	r3, #0
   2451a:	d04b      	beq.n	245b4 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2451c:	4b14      	ldr	r3, [pc, #80]	; (24570 <hif_isr+0x398>)
   2451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   24520:	1d3a      	adds	r2, r7, #4
   24522:	7852      	ldrb	r2, [r2, #1]
   24524:	b2d0      	uxtb	r0, r2
   24526:	1d3a      	adds	r2, r7, #4
   24528:	8852      	ldrh	r2, [r2, #2]
   2452a:	b292      	uxth	r2, r2
   2452c:	3a08      	subs	r2, #8
   2452e:	b291      	uxth	r1, r2
   24530:	683a      	ldr	r2, [r7, #0]
   24532:	3208      	adds	r2, #8
   24534:	4798      	blx	r3
   24536:	e03d      	b.n	245b4 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   24538:	2384      	movs	r3, #132	; 0x84
   2453a:	009a      	lsls	r2, r3, #2
   2453c:	490e      	ldr	r1, [pc, #56]	; (24578 <hif_isr+0x3a0>)
   2453e:	4b0f      	ldr	r3, [pc, #60]	; (2457c <hif_isr+0x3a4>)
   24540:	0018      	movs	r0, r3
   24542:	4b0f      	ldr	r3, [pc, #60]	; (24580 <hif_isr+0x3a8>)
   24544:	4798      	blx	r3
   24546:	4b1a      	ldr	r3, [pc, #104]	; (245b0 <hif_isr+0x3d8>)
   24548:	0018      	movs	r0, r3
   2454a:	4b0d      	ldr	r3, [pc, #52]	; (24580 <hif_isr+0x3a8>)
   2454c:	4798      	blx	r3
   2454e:	4b0e      	ldr	r3, [pc, #56]	; (24588 <hif_isr+0x3b0>)
   24550:	0018      	movs	r0, r3
   24552:	4b0b      	ldr	r3, [pc, #44]	; (24580 <hif_isr+0x3a8>)
   24554:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   24556:	230f      	movs	r3, #15
   24558:	18fb      	adds	r3, r7, r3
   2455a:	22fa      	movs	r2, #250	; 0xfa
   2455c:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2455e:	e083      	b.n	24668 <hif_isr+0x490>
   24560:	00001070 	.word	0x00001070
   24564:	00025c65 	.word	0x00025c65
   24568:	00023389 	.word	0x00023389
   2456c:	00025c89 	.word	0x00025c89
   24570:	20005ae8 	.word	0x20005ae8
   24574:	00001084 	.word	0x00001084
   24578:	0003cc88 	.word	0x0003cc88
   2457c:	0003c978 	.word	0x0003c978
   24580:	00020e3d 	.word	0x00020e3d
   24584:	0003c9ac 	.word	0x0003c9ac
   24588:	0003c974 	.word	0x0003c974
   2458c:	00025cd9 	.word	0x00025cd9
   24590:	0003c9d4 	.word	0x0003c9d4
   24594:	0003c9ec 	.word	0x0003c9ec
   24598:	0003ca2c 	.word	0x0003ca2c
   2459c:	0003ca50 	.word	0x0003ca50
   245a0:	0003ca74 	.word	0x0003ca74
   245a4:	0003ca94 	.word	0x0003ca94
   245a8:	00000207 	.word	0x00000207
   245ac:	0003cab8 	.word	0x0003cab8
   245b0:	0003cadc 	.word	0x0003cadc
				}
				if(gstrHifCxt.u8HifRXDone)
   245b4:	4b30      	ldr	r3, [pc, #192]	; (24678 <hif_isr+0x4a0>)
   245b6:	789b      	ldrb	r3, [r3, #2]
   245b8:	b2db      	uxtb	r3, r3
   245ba:	2b00      	cmp	r3, #0
   245bc:	d054      	beq.n	24668 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   245be:	4a2f      	ldr	r2, [pc, #188]	; (2467c <hif_isr+0x4a4>)
   245c0:	492f      	ldr	r1, [pc, #188]	; (24680 <hif_isr+0x4a8>)
   245c2:	4b30      	ldr	r3, [pc, #192]	; (24684 <hif_isr+0x4ac>)
   245c4:	0018      	movs	r0, r3
   245c6:	4b30      	ldr	r3, [pc, #192]	; (24688 <hif_isr+0x4b0>)
   245c8:	4798      	blx	r3
   245ca:	1d3b      	adds	r3, r7, #4
   245cc:	781b      	ldrb	r3, [r3, #0]
   245ce:	b2db      	uxtb	r3, r3
   245d0:	0019      	movs	r1, r3
   245d2:	1d3b      	adds	r3, r7, #4
   245d4:	785b      	ldrb	r3, [r3, #1]
   245d6:	b2db      	uxtb	r3, r3
   245d8:	001a      	movs	r2, r3
   245da:	4b2c      	ldr	r3, [pc, #176]	; (2468c <hif_isr+0x4b4>)
   245dc:	0018      	movs	r0, r3
   245de:	4b2a      	ldr	r3, [pc, #168]	; (24688 <hif_isr+0x4b0>)
   245e0:	4798      	blx	r3
   245e2:	4b2b      	ldr	r3, [pc, #172]	; (24690 <hif_isr+0x4b8>)
   245e4:	0018      	movs	r0, r3
   245e6:	4b28      	ldr	r3, [pc, #160]	; (24688 <hif_isr+0x4b0>)
   245e8:	4798      	blx	r3
					ret = hif_set_rx_done();
   245ea:	230f      	movs	r3, #15
   245ec:	18fc      	adds	r4, r7, r3
   245ee:	4b29      	ldr	r3, [pc, #164]	; (24694 <hif_isr+0x4bc>)
   245f0:	4798      	blx	r3
   245f2:	0003      	movs	r3, r0
   245f4:	7023      	strb	r3, [r4, #0]
   245f6:	e037      	b.n	24668 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   245f8:	4a27      	ldr	r2, [pc, #156]	; (24698 <hif_isr+0x4c0>)
   245fa:	4921      	ldr	r1, [pc, #132]	; (24680 <hif_isr+0x4a8>)
   245fc:	4b21      	ldr	r3, [pc, #132]	; (24684 <hif_isr+0x4ac>)
   245fe:	0018      	movs	r0, r3
   24600:	4b21      	ldr	r3, [pc, #132]	; (24688 <hif_isr+0x4b0>)
   24602:	4798      	blx	r3
   24604:	4b25      	ldr	r3, [pc, #148]	; (2469c <hif_isr+0x4c4>)
   24606:	0018      	movs	r0, r3
   24608:	4b1f      	ldr	r3, [pc, #124]	; (24688 <hif_isr+0x4b0>)
   2460a:	4798      	blx	r3
   2460c:	4b20      	ldr	r3, [pc, #128]	; (24690 <hif_isr+0x4b8>)
   2460e:	0018      	movs	r0, r3
   24610:	4b1d      	ldr	r3, [pc, #116]	; (24688 <hif_isr+0x4b0>)
   24612:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   24614:	230f      	movs	r3, #15
   24616:	18fb      	adds	r3, r7, r3
   24618:	22fe      	movs	r2, #254	; 0xfe
   2461a:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   2461c:	e024      	b.n	24668 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2461e:	4a20      	ldr	r2, [pc, #128]	; (246a0 <hif_isr+0x4c8>)
   24620:	4917      	ldr	r1, [pc, #92]	; (24680 <hif_isr+0x4a8>)
   24622:	4b18      	ldr	r3, [pc, #96]	; (24684 <hif_isr+0x4ac>)
   24624:	0018      	movs	r0, r3
   24626:	4b18      	ldr	r3, [pc, #96]	; (24688 <hif_isr+0x4b0>)
   24628:	4798      	blx	r3
   2462a:	68ba      	ldr	r2, [r7, #8]
   2462c:	4b1d      	ldr	r3, [pc, #116]	; (246a4 <hif_isr+0x4cc>)
   2462e:	0011      	movs	r1, r2
   24630:	0018      	movs	r0, r3
   24632:	4b15      	ldr	r3, [pc, #84]	; (24688 <hif_isr+0x4b0>)
   24634:	4798      	blx	r3
   24636:	4b16      	ldr	r3, [pc, #88]	; (24690 <hif_isr+0x4b8>)
   24638:	0018      	movs	r0, r3
   2463a:	4b13      	ldr	r3, [pc, #76]	; (24688 <hif_isr+0x4b0>)
   2463c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2463e:	230f      	movs	r3, #15
   24640:	18fb      	adds	r3, r7, r3
   24642:	22f4      	movs	r2, #244	; 0xf4
   24644:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   24646:	e00f      	b.n	24668 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   24648:	4a17      	ldr	r2, [pc, #92]	; (246a8 <hif_isr+0x4d0>)
   2464a:	490d      	ldr	r1, [pc, #52]	; (24680 <hif_isr+0x4a8>)
   2464c:	4b0d      	ldr	r3, [pc, #52]	; (24684 <hif_isr+0x4ac>)
   2464e:	0018      	movs	r0, r3
   24650:	4b0d      	ldr	r3, [pc, #52]	; (24688 <hif_isr+0x4b0>)
   24652:	4798      	blx	r3
   24654:	4b15      	ldr	r3, [pc, #84]	; (246ac <hif_isr+0x4d4>)
   24656:	0018      	movs	r0, r3
   24658:	4b0b      	ldr	r3, [pc, #44]	; (24688 <hif_isr+0x4b0>)
   2465a:	4798      	blx	r3
   2465c:	4b0c      	ldr	r3, [pc, #48]	; (24690 <hif_isr+0x4b8>)
   2465e:	0018      	movs	r0, r3
   24660:	4b09      	ldr	r3, [pc, #36]	; (24688 <hif_isr+0x4b0>)
   24662:	4798      	blx	r3
		goto ERR1;
   24664:	e000      	b.n	24668 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   24666:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   24668:	230f      	movs	r3, #15
   2466a:	18fb      	adds	r3, r7, r3
   2466c:	781b      	ldrb	r3, [r3, #0]
   2466e:	b25b      	sxtb	r3, r3
}
   24670:	0018      	movs	r0, r3
   24672:	46bd      	mov	sp, r7
   24674:	b005      	add	sp, #20
   24676:	bd90      	pop	{r4, r7, pc}
   24678:	20005ae8 	.word	0x20005ae8
   2467c:	00000216 	.word	0x00000216
   24680:	0003cc88 	.word	0x0003cc88
   24684:	0003c978 	.word	0x0003c978
   24688:	00020e3d 	.word	0x00020e3d
   2468c:	0003caf4 	.word	0x0003caf4
   24690:	0003c974 	.word	0x0003c974
   24694:	00023c6d 	.word	0x00023c6d
   24698:	0000021d 	.word	0x0000021d
   2469c:	0003cb20 	.word	0x0003cb20
   246a0:	00000225 	.word	0x00000225
   246a4:	0003cb34 	.word	0x0003cb34
   246a8:	0000022e 	.word	0x0000022e
   246ac:	0003cb50 	.word	0x0003cb50

000246b0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   246b0:	b590      	push	{r4, r7, lr}
   246b2:	b083      	sub	sp, #12
   246b4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   246b6:	1dfb      	adds	r3, r7, #7
   246b8:	2200      	movs	r2, #0
   246ba:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   246bc:	4b1c      	ldr	r3, [pc, #112]	; (24730 <hif_handle_isr+0x80>)
   246be:	2200      	movs	r2, #0
   246c0:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   246c2:	e024      	b.n	2470e <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   246c4:	4b1a      	ldr	r3, [pc, #104]	; (24730 <hif_handle_isr+0x80>)
   246c6:	78db      	ldrb	r3, [r3, #3]
   246c8:	b2db      	uxtb	r3, r3
   246ca:	3b01      	subs	r3, #1
   246cc:	b2da      	uxtb	r2, r3
   246ce:	4b18      	ldr	r3, [pc, #96]	; (24730 <hif_handle_isr+0x80>)
   246d0:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   246d2:	1dfc      	adds	r4, r7, #7
   246d4:	4b17      	ldr	r3, [pc, #92]	; (24734 <hif_handle_isr+0x84>)
   246d6:	4798      	blx	r3
   246d8:	0003      	movs	r3, r0
   246da:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   246dc:	1dfb      	adds	r3, r7, #7
   246de:	781b      	ldrb	r3, [r3, #0]
   246e0:	b25b      	sxtb	r3, r3
   246e2:	2b00      	cmp	r3, #0
   246e4:	d100      	bne.n	246e8 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   246e6:	e012      	b.n	2470e <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   246e8:	4a13      	ldr	r2, [pc, #76]	; (24738 <hif_handle_isr+0x88>)
   246ea:	4914      	ldr	r1, [pc, #80]	; (2473c <hif_handle_isr+0x8c>)
   246ec:	4b14      	ldr	r3, [pc, #80]	; (24740 <hif_handle_isr+0x90>)
   246ee:	0018      	movs	r0, r3
   246f0:	4b14      	ldr	r3, [pc, #80]	; (24744 <hif_handle_isr+0x94>)
   246f2:	4798      	blx	r3
   246f4:	1dfb      	adds	r3, r7, #7
   246f6:	2200      	movs	r2, #0
   246f8:	569a      	ldrsb	r2, [r3, r2]
   246fa:	4b13      	ldr	r3, [pc, #76]	; (24748 <hif_handle_isr+0x98>)
   246fc:	0011      	movs	r1, r2
   246fe:	0018      	movs	r0, r3
   24700:	4b10      	ldr	r3, [pc, #64]	; (24744 <hif_handle_isr+0x94>)
   24702:	4798      	blx	r3
   24704:	4b11      	ldr	r3, [pc, #68]	; (2474c <hif_handle_isr+0x9c>)
   24706:	0018      	movs	r0, r3
   24708:	4b0e      	ldr	r3, [pc, #56]	; (24744 <hif_handle_isr+0x94>)
   2470a:	4798      	blx	r3
			ret = hif_isr();
   2470c:	e7e1      	b.n	246d2 <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2470e:	4b08      	ldr	r3, [pc, #32]	; (24730 <hif_handle_isr+0x80>)
   24710:	78db      	ldrb	r3, [r3, #3]
   24712:	b2db      	uxtb	r3, r3
   24714:	2b00      	cmp	r3, #0
   24716:	d004      	beq.n	24722 <hif_handle_isr+0x72>
   24718:	4b05      	ldr	r3, [pc, #20]	; (24730 <hif_handle_isr+0x80>)
   2471a:	791b      	ldrb	r3, [r3, #4]
   2471c:	b2db      	uxtb	r3, r3
   2471e:	2b00      	cmp	r3, #0
   24720:	d0d0      	beq.n	246c4 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   24722:	1dfb      	adds	r3, r7, #7
   24724:	781b      	ldrb	r3, [r3, #0]
   24726:	b25b      	sxtb	r3, r3
}
   24728:	0018      	movs	r0, r3
   2472a:	46bd      	mov	sp, r7
   2472c:	b003      	add	sp, #12
   2472e:	bd90      	pop	{r4, r7, pc}
   24730:	20005ae8 	.word	0x20005ae8
   24734:	000241d9 	.word	0x000241d9
   24738:	00000257 	.word	0x00000257
   2473c:	0003cc90 	.word	0x0003cc90
   24740:	0003c978 	.word	0x0003c978
   24744:	00020e3d 	.word	0x00020e3d
   24748:	0003cb74 	.word	0x0003cb74
   2474c:	0003c974 	.word	0x0003c974

00024750 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   24750:	b590      	push	{r4, r7, lr}
   24752:	b087      	sub	sp, #28
   24754:	af00      	add	r7, sp, #0
   24756:	60f8      	str	r0, [r7, #12]
   24758:	60b9      	str	r1, [r7, #8]
   2475a:	0019      	movs	r1, r3
   2475c:	1dbb      	adds	r3, r7, #6
   2475e:	801a      	strh	r2, [r3, #0]
   24760:	1d7b      	adds	r3, r7, #5
   24762:	1c0a      	adds	r2, r1, #0
   24764:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   24766:	2317      	movs	r3, #23
   24768:	18fb      	adds	r3, r7, r3
   2476a:	2200      	movs	r2, #0
   2476c:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2476e:	68fb      	ldr	r3, [r7, #12]
   24770:	2b00      	cmp	r3, #0
   24772:	d006      	beq.n	24782 <hif_receive+0x32>
   24774:	68bb      	ldr	r3, [r7, #8]
   24776:	2b00      	cmp	r3, #0
   24778:	d003      	beq.n	24782 <hif_receive+0x32>
   2477a:	1dbb      	adds	r3, r7, #6
   2477c:	881b      	ldrh	r3, [r3, #0]
   2477e:	2b00      	cmp	r3, #0
   24780:	d11e      	bne.n	247c0 <hif_receive+0x70>
	{
		if(isDone)
   24782:	1d7b      	adds	r3, r7, #5
   24784:	781b      	ldrb	r3, [r3, #0]
   24786:	2b00      	cmp	r3, #0
   24788:	d006      	beq.n	24798 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   2478a:	2317      	movs	r3, #23
   2478c:	18fc      	adds	r4, r7, r3
   2478e:	4b45      	ldr	r3, [pc, #276]	; (248a4 <hif_receive+0x154>)
   24790:	4798      	blx	r3
   24792:	0003      	movs	r3, r0
   24794:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   24796:	e07c      	b.n	24892 <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   24798:	2317      	movs	r3, #23
   2479a:	18fb      	adds	r3, r7, r3
   2479c:	22f4      	movs	r2, #244	; 0xf4
   2479e:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   247a0:	239e      	movs	r3, #158	; 0x9e
   247a2:	009a      	lsls	r2, r3, #2
   247a4:	4940      	ldr	r1, [pc, #256]	; (248a8 <hif_receive+0x158>)
   247a6:	4b41      	ldr	r3, [pc, #260]	; (248ac <hif_receive+0x15c>)
   247a8:	0018      	movs	r0, r3
   247aa:	4b41      	ldr	r3, [pc, #260]	; (248b0 <hif_receive+0x160>)
   247ac:	4798      	blx	r3
   247ae:	4b41      	ldr	r3, [pc, #260]	; (248b4 <hif_receive+0x164>)
   247b0:	0018      	movs	r0, r3
   247b2:	4b3f      	ldr	r3, [pc, #252]	; (248b0 <hif_receive+0x160>)
   247b4:	4798      	blx	r3
   247b6:	4b40      	ldr	r3, [pc, #256]	; (248b8 <hif_receive+0x168>)
   247b8:	0018      	movs	r0, r3
   247ba:	4b3d      	ldr	r3, [pc, #244]	; (248b0 <hif_receive+0x160>)
   247bc:	4798      	blx	r3
		goto ERR1;
   247be:	e068      	b.n	24892 <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   247c0:	1dbb      	adds	r3, r7, #6
   247c2:	881a      	ldrh	r2, [r3, #0]
   247c4:	4b3d      	ldr	r3, [pc, #244]	; (248bc <hif_receive+0x16c>)
   247c6:	68db      	ldr	r3, [r3, #12]
   247c8:	429a      	cmp	r2, r3
   247ca:	d917      	bls.n	247fc <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   247cc:	2317      	movs	r3, #23
   247ce:	18fb      	adds	r3, r7, r3
   247d0:	22f4      	movs	r2, #244	; 0xf4
   247d2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   247d4:	23a0      	movs	r3, #160	; 0xa0
   247d6:	009a      	lsls	r2, r3, #2
   247d8:	4933      	ldr	r1, [pc, #204]	; (248a8 <hif_receive+0x158>)
   247da:	4b34      	ldr	r3, [pc, #208]	; (248ac <hif_receive+0x15c>)
   247dc:	0018      	movs	r0, r3
   247de:	4b34      	ldr	r3, [pc, #208]	; (248b0 <hif_receive+0x160>)
   247e0:	4798      	blx	r3
   247e2:	1dbb      	adds	r3, r7, #6
   247e4:	8819      	ldrh	r1, [r3, #0]
   247e6:	4b35      	ldr	r3, [pc, #212]	; (248bc <hif_receive+0x16c>)
   247e8:	68da      	ldr	r2, [r3, #12]
   247ea:	4b35      	ldr	r3, [pc, #212]	; (248c0 <hif_receive+0x170>)
   247ec:	0018      	movs	r0, r3
   247ee:	4b30      	ldr	r3, [pc, #192]	; (248b0 <hif_receive+0x160>)
   247f0:	4798      	blx	r3
   247f2:	4b31      	ldr	r3, [pc, #196]	; (248b8 <hif_receive+0x168>)
   247f4:	0018      	movs	r0, r3
   247f6:	4b2e      	ldr	r3, [pc, #184]	; (248b0 <hif_receive+0x160>)
   247f8:	4798      	blx	r3
		goto ERR1;
   247fa:	e04a      	b.n	24892 <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   247fc:	4b2f      	ldr	r3, [pc, #188]	; (248bc <hif_receive+0x16c>)
   247fe:	689a      	ldr	r2, [r3, #8]
   24800:	68fb      	ldr	r3, [r7, #12]
   24802:	429a      	cmp	r2, r3
   24804:	d80a      	bhi.n	2481c <hif_receive+0xcc>
   24806:	1dbb      	adds	r3, r7, #6
   24808:	881a      	ldrh	r2, [r3, #0]
   2480a:	68fb      	ldr	r3, [r7, #12]
   2480c:	18d2      	adds	r2, r2, r3
   2480e:	4b2b      	ldr	r3, [pc, #172]	; (248bc <hif_receive+0x16c>)
   24810:	6899      	ldr	r1, [r3, #8]
   24812:	4b2a      	ldr	r3, [pc, #168]	; (248bc <hif_receive+0x16c>)
   24814:	68db      	ldr	r3, [r3, #12]
   24816:	18cb      	adds	r3, r1, r3
   24818:	429a      	cmp	r2, r3
   2481a:	d912      	bls.n	24842 <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   2481c:	2317      	movs	r3, #23
   2481e:	18fb      	adds	r3, r7, r3
   24820:	22f4      	movs	r2, #244	; 0xf4
   24822:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   24824:	4a27      	ldr	r2, [pc, #156]	; (248c4 <hif_receive+0x174>)
   24826:	4920      	ldr	r1, [pc, #128]	; (248a8 <hif_receive+0x158>)
   24828:	4b20      	ldr	r3, [pc, #128]	; (248ac <hif_receive+0x15c>)
   2482a:	0018      	movs	r0, r3
   2482c:	4b20      	ldr	r3, [pc, #128]	; (248b0 <hif_receive+0x160>)
   2482e:	4798      	blx	r3
   24830:	4b25      	ldr	r3, [pc, #148]	; (248c8 <hif_receive+0x178>)
   24832:	0018      	movs	r0, r3
   24834:	4b1e      	ldr	r3, [pc, #120]	; (248b0 <hif_receive+0x160>)
   24836:	4798      	blx	r3
   24838:	4b1f      	ldr	r3, [pc, #124]	; (248b8 <hif_receive+0x168>)
   2483a:	0018      	movs	r0, r3
   2483c:	4b1c      	ldr	r3, [pc, #112]	; (248b0 <hif_receive+0x160>)
   2483e:	4798      	blx	r3
		goto ERR1;
   24840:	e027      	b.n	24892 <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   24842:	1dbb      	adds	r3, r7, #6
   24844:	881a      	ldrh	r2, [r3, #0]
   24846:	2317      	movs	r3, #23
   24848:	18fc      	adds	r4, r7, r3
   2484a:	68b9      	ldr	r1, [r7, #8]
   2484c:	68fb      	ldr	r3, [r7, #12]
   2484e:	0018      	movs	r0, r3
   24850:	4b1e      	ldr	r3, [pc, #120]	; (248cc <hif_receive+0x17c>)
   24852:	4798      	blx	r3
   24854:	0003      	movs	r3, r0
   24856:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   24858:	2317      	movs	r3, #23
   2485a:	18fb      	adds	r3, r7, r3
   2485c:	781b      	ldrb	r3, [r3, #0]
   2485e:	b25b      	sxtb	r3, r3
   24860:	2b00      	cmp	r3, #0
   24862:	d115      	bne.n	24890 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   24864:	4b15      	ldr	r3, [pc, #84]	; (248bc <hif_receive+0x16c>)
   24866:	689a      	ldr	r2, [r3, #8]
   24868:	4b14      	ldr	r3, [pc, #80]	; (248bc <hif_receive+0x16c>)
   2486a:	68db      	ldr	r3, [r3, #12]
   2486c:	18d2      	adds	r2, r2, r3
   2486e:	1dbb      	adds	r3, r7, #6
   24870:	8819      	ldrh	r1, [r3, #0]
   24872:	68fb      	ldr	r3, [r7, #12]
   24874:	18cb      	adds	r3, r1, r3
   24876:	429a      	cmp	r2, r3
   24878:	d003      	beq.n	24882 <hif_receive+0x132>
   2487a:	1d7b      	adds	r3, r7, #5
   2487c:	781b      	ldrb	r3, [r3, #0]
   2487e:	2b00      	cmp	r3, #0
   24880:	d007      	beq.n	24892 <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   24882:	2317      	movs	r3, #23
   24884:	18fc      	adds	r4, r7, r3
   24886:	4b07      	ldr	r3, [pc, #28]	; (248a4 <hif_receive+0x154>)
   24888:	4798      	blx	r3
   2488a:	0003      	movs	r3, r0
   2488c:	7023      	strb	r3, [r4, #0]
   2488e:	e000      	b.n	24892 <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   24890:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   24892:	2317      	movs	r3, #23
   24894:	18fb      	adds	r3, r7, r3
   24896:	781b      	ldrb	r3, [r3, #0]
   24898:	b25b      	sxtb	r3, r3
}
   2489a:	0018      	movs	r0, r3
   2489c:	46bd      	mov	sp, r7
   2489e:	b007      	add	sp, #28
   248a0:	bd90      	pop	{r4, r7, pc}
   248a2:	46c0      	nop			; (mov r8, r8)
   248a4:	00023c6d 	.word	0x00023c6d
   248a8:	0003cca0 	.word	0x0003cca0
   248ac:	0003c978 	.word	0x0003c978
   248b0:	00020e3d 	.word	0x00020e3d
   248b4:	0003cba4 	.word	0x0003cba4
   248b8:	0003c974 	.word	0x0003c974
   248bc:	20005ae8 	.word	0x20005ae8
   248c0:	0003cbc4 	.word	0x0003cbc4
   248c4:	00000286 	.word	0x00000286
   248c8:	0003cc0c 	.word	0x0003cc0c
   248cc:	00025cd9 	.word	0x00025cd9

000248d0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   248d0:	b580      	push	{r7, lr}
   248d2:	b084      	sub	sp, #16
   248d4:	af00      	add	r7, sp, #0
   248d6:	0002      	movs	r2, r0
   248d8:	6039      	str	r1, [r7, #0]
   248da:	1dfb      	adds	r3, r7, #7
   248dc:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   248de:	230f      	movs	r3, #15
   248e0:	18fb      	adds	r3, r7, r3
   248e2:	2200      	movs	r2, #0
   248e4:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   248e6:	1dfb      	adds	r3, r7, #7
   248e8:	781b      	ldrb	r3, [r3, #0]
   248ea:	2b07      	cmp	r3, #7
   248ec:	d820      	bhi.n	24930 <hif_register_cb+0x60>
   248ee:	009a      	lsls	r2, r3, #2
   248f0:	4b1e      	ldr	r3, [pc, #120]	; (2496c <hif_register_cb+0x9c>)
   248f2:	18d3      	adds	r3, r2, r3
   248f4:	681b      	ldr	r3, [r3, #0]
   248f6:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   248f8:	4b1d      	ldr	r3, [pc, #116]	; (24970 <hif_register_cb+0xa0>)
   248fa:	683a      	ldr	r2, [r7, #0]
   248fc:	615a      	str	r2, [r3, #20]
			break;
   248fe:	e02d      	b.n	2495c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   24900:	4b1b      	ldr	r3, [pc, #108]	; (24970 <hif_register_cb+0xa0>)
   24902:	683a      	ldr	r2, [r7, #0]
   24904:	611a      	str	r2, [r3, #16]
			break;
   24906:	e029      	b.n	2495c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   24908:	4b19      	ldr	r3, [pc, #100]	; (24970 <hif_register_cb+0xa0>)
   2490a:	683a      	ldr	r2, [r7, #0]
   2490c:	619a      	str	r2, [r3, #24]
			break;
   2490e:	e025      	b.n	2495c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   24910:	4b17      	ldr	r3, [pc, #92]	; (24970 <hif_register_cb+0xa0>)
   24912:	683a      	ldr	r2, [r7, #0]
   24914:	621a      	str	r2, [r3, #32]
			break;
   24916:	e021      	b.n	2495c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   24918:	4b15      	ldr	r3, [pc, #84]	; (24970 <hif_register_cb+0xa0>)
   2491a:	683a      	ldr	r2, [r7, #0]
   2491c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2491e:	e01d      	b.n	2495c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   24920:	4b13      	ldr	r3, [pc, #76]	; (24970 <hif_register_cb+0xa0>)
   24922:	683a      	ldr	r2, [r7, #0]
   24924:	61da      	str	r2, [r3, #28]
			break;
   24926:	e019      	b.n	2495c <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   24928:	4b11      	ldr	r3, [pc, #68]	; (24970 <hif_register_cb+0xa0>)
   2492a:	683a      	ldr	r2, [r7, #0]
   2492c:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2492e:	e015      	b.n	2495c <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   24930:	4a10      	ldr	r2, [pc, #64]	; (24974 <hif_register_cb+0xa4>)
   24932:	4911      	ldr	r1, [pc, #68]	; (24978 <hif_register_cb+0xa8>)
   24934:	4b11      	ldr	r3, [pc, #68]	; (2497c <hif_register_cb+0xac>)
   24936:	0018      	movs	r0, r3
   24938:	4b11      	ldr	r3, [pc, #68]	; (24980 <hif_register_cb+0xb0>)
   2493a:	4798      	blx	r3
   2493c:	1dfb      	adds	r3, r7, #7
   2493e:	781a      	ldrb	r2, [r3, #0]
   24940:	4b10      	ldr	r3, [pc, #64]	; (24984 <hif_register_cb+0xb4>)
   24942:	0011      	movs	r1, r2
   24944:	0018      	movs	r0, r3
   24946:	4b0e      	ldr	r3, [pc, #56]	; (24980 <hif_register_cb+0xb0>)
   24948:	4798      	blx	r3
   2494a:	4b0f      	ldr	r3, [pc, #60]	; (24988 <hif_register_cb+0xb8>)
   2494c:	0018      	movs	r0, r3
   2494e:	4b0c      	ldr	r3, [pc, #48]	; (24980 <hif_register_cb+0xb0>)
   24950:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24952:	230f      	movs	r3, #15
   24954:	18fb      	adds	r3, r7, r3
   24956:	22f4      	movs	r2, #244	; 0xf4
   24958:	701a      	strb	r2, [r3, #0]
			break;
   2495a:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   2495c:	230f      	movs	r3, #15
   2495e:	18fb      	adds	r3, r7, r3
   24960:	781b      	ldrb	r3, [r3, #0]
   24962:	b25b      	sxtb	r3, r3
}
   24964:	0018      	movs	r0, r3
   24966:	46bd      	mov	sp, r7
   24968:	b004      	add	sp, #16
   2496a:	bd80      	pop	{r7, pc}
   2496c:	0003cc5c 	.word	0x0003cc5c
   24970:	20005ae8 	.word	0x20005ae8
   24974:	000002be 	.word	0x000002be
   24978:	0003ccac 	.word	0x0003ccac
   2497c:	0003c978 	.word	0x0003c978
   24980:	00020e3d 	.word	0x00020e3d
   24984:	0003cc50 	.word	0x0003cc50
   24988:	0003c974 	.word	0x0003c974

0002498c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2498c:	b590      	push	{r4, r7, lr}
   2498e:	b0af      	sub	sp, #188	; 0xbc
   24990:	af02      	add	r7, sp, #8
   24992:	603a      	str	r2, [r7, #0]
   24994:	1dfb      	adds	r3, r7, #7
   24996:	1c02      	adds	r2, r0, #0
   24998:	701a      	strb	r2, [r3, #0]
   2499a:	1d3b      	adds	r3, r7, #4
   2499c:	1c0a      	adds	r2, r1, #0
   2499e:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   249a0:	1dfb      	adds	r3, r7, #7
   249a2:	781b      	ldrb	r3, [r3, #0]
   249a4:	2b2c      	cmp	r3, #44	; 0x2c
   249a6:	d116      	bne.n	249d6 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   249a8:	23a4      	movs	r3, #164	; 0xa4
   249aa:	18f9      	adds	r1, r7, r3
   249ac:	6838      	ldr	r0, [r7, #0]
   249ae:	2300      	movs	r3, #0
   249b0:	2204      	movs	r2, #4
   249b2:	4cca      	ldr	r4, [pc, #808]	; (24cdc <m2m_wifi_cb+0x350>)
   249b4:	47a0      	blx	r4
   249b6:	1e03      	subs	r3, r0, #0
   249b8:	d000      	beq.n	249bc <m2m_wifi_cb+0x30>
   249ba:	e1b4      	b.n	24d26 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   249bc:	4bc8      	ldr	r3, [pc, #800]	; (24ce0 <m2m_wifi_cb+0x354>)
   249be:	681b      	ldr	r3, [r3, #0]
   249c0:	2b00      	cmp	r3, #0
   249c2:	d100      	bne.n	249c6 <m2m_wifi_cb+0x3a>
   249c4:	e1af      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   249c6:	4bc6      	ldr	r3, [pc, #792]	; (24ce0 <m2m_wifi_cb+0x354>)
   249c8:	681b      	ldr	r3, [r3, #0]
   249ca:	22a4      	movs	r2, #164	; 0xa4
   249cc:	18ba      	adds	r2, r7, r2
   249ce:	0011      	movs	r1, r2
   249d0:	202c      	movs	r0, #44	; 0x2c
   249d2:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   249d4:	e1a7      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   249d6:	1dfb      	adds	r3, r7, #7
   249d8:	781b      	ldrb	r3, [r3, #0]
   249da:	2b1b      	cmp	r3, #27
   249dc:	d116      	bne.n	24a0c <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   249de:	239c      	movs	r3, #156	; 0x9c
   249e0:	18f9      	adds	r1, r7, r3
   249e2:	6838      	ldr	r0, [r7, #0]
   249e4:	2300      	movs	r3, #0
   249e6:	2208      	movs	r2, #8
   249e8:	4cbc      	ldr	r4, [pc, #752]	; (24cdc <m2m_wifi_cb+0x350>)
   249ea:	47a0      	blx	r4
   249ec:	1e03      	subs	r3, r0, #0
   249ee:	d000      	beq.n	249f2 <m2m_wifi_cb+0x66>
   249f0:	e199      	b.n	24d26 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   249f2:	4bbb      	ldr	r3, [pc, #748]	; (24ce0 <m2m_wifi_cb+0x354>)
   249f4:	681b      	ldr	r3, [r3, #0]
   249f6:	2b00      	cmp	r3, #0
   249f8:	d100      	bne.n	249fc <m2m_wifi_cb+0x70>
   249fa:	e194      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   249fc:	4bb8      	ldr	r3, [pc, #736]	; (24ce0 <m2m_wifi_cb+0x354>)
   249fe:	681b      	ldr	r3, [r3, #0]
   24a00:	229c      	movs	r2, #156	; 0x9c
   24a02:	18ba      	adds	r2, r7, r2
   24a04:	0011      	movs	r1, r2
   24a06:	201b      	movs	r0, #27
   24a08:	4798      	blx	r3
}
   24a0a:	e18c      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   24a0c:	1dfb      	adds	r3, r7, #7
   24a0e:	781b      	ldrb	r3, [r3, #0]
   24a10:	2b06      	cmp	r3, #6
   24a12:	d116      	bne.n	24a42 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   24a14:	230c      	movs	r3, #12
   24a16:	18f9      	adds	r1, r7, r3
   24a18:	6838      	ldr	r0, [r7, #0]
   24a1a:	2301      	movs	r3, #1
   24a1c:	2230      	movs	r2, #48	; 0x30
   24a1e:	4caf      	ldr	r4, [pc, #700]	; (24cdc <m2m_wifi_cb+0x350>)
   24a20:	47a0      	blx	r4
   24a22:	1e03      	subs	r3, r0, #0
   24a24:	d000      	beq.n	24a28 <m2m_wifi_cb+0x9c>
   24a26:	e17e      	b.n	24d26 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   24a28:	4bad      	ldr	r3, [pc, #692]	; (24ce0 <m2m_wifi_cb+0x354>)
   24a2a:	681b      	ldr	r3, [r3, #0]
   24a2c:	2b00      	cmp	r3, #0
   24a2e:	d100      	bne.n	24a32 <m2m_wifi_cb+0xa6>
   24a30:	e179      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   24a32:	4bab      	ldr	r3, [pc, #684]	; (24ce0 <m2m_wifi_cb+0x354>)
   24a34:	681b      	ldr	r3, [r3, #0]
   24a36:	220c      	movs	r2, #12
   24a38:	18ba      	adds	r2, r7, r2
   24a3a:	0011      	movs	r1, r2
   24a3c:	2006      	movs	r0, #6
   24a3e:	4798      	blx	r3
}
   24a40:	e171      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   24a42:	1dfb      	adds	r3, r7, #7
   24a44:	781b      	ldrb	r3, [r3, #0]
   24a46:	2b0e      	cmp	r3, #14
   24a48:	d100      	bne.n	24a4c <m2m_wifi_cb+0xc0>
   24a4a:	e16c      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   24a4c:	1dfb      	adds	r3, r7, #7
   24a4e:	781b      	ldrb	r3, [r3, #0]
   24a50:	2b32      	cmp	r3, #50	; 0x32
   24a52:	d116      	bne.n	24a82 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   24a54:	2384      	movs	r3, #132	; 0x84
   24a56:	18f9      	adds	r1, r7, r3
   24a58:	6838      	ldr	r0, [r7, #0]
   24a5a:	2300      	movs	r3, #0
   24a5c:	2218      	movs	r2, #24
   24a5e:	4c9f      	ldr	r4, [pc, #636]	; (24cdc <m2m_wifi_cb+0x350>)
   24a60:	47a0      	blx	r4
   24a62:	1e03      	subs	r3, r0, #0
   24a64:	d000      	beq.n	24a68 <m2m_wifi_cb+0xdc>
   24a66:	e15e      	b.n	24d26 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24a68:	4b9d      	ldr	r3, [pc, #628]	; (24ce0 <m2m_wifi_cb+0x354>)
   24a6a:	681b      	ldr	r3, [r3, #0]
   24a6c:	2b00      	cmp	r3, #0
   24a6e:	d100      	bne.n	24a72 <m2m_wifi_cb+0xe6>
   24a70:	e159      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   24a72:	4b9b      	ldr	r3, [pc, #620]	; (24ce0 <m2m_wifi_cb+0x354>)
   24a74:	681b      	ldr	r3, [r3, #0]
   24a76:	2284      	movs	r2, #132	; 0x84
   24a78:	18ba      	adds	r2, r7, r2
   24a7a:	0011      	movs	r1, r2
   24a7c:	2032      	movs	r0, #50	; 0x32
   24a7e:	4798      	blx	r3
}
   24a80:	e151      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   24a82:	1dfb      	adds	r3, r7, #7
   24a84:	781b      	ldrb	r3, [r3, #0]
   24a86:	2b2f      	cmp	r3, #47	; 0x2f
   24a88:	d11d      	bne.n	24ac6 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   24a8a:	230c      	movs	r3, #12
   24a8c:	18fb      	adds	r3, r7, r3
   24a8e:	2264      	movs	r2, #100	; 0x64
   24a90:	2100      	movs	r1, #0
   24a92:	0018      	movs	r0, r3
   24a94:	4b93      	ldr	r3, [pc, #588]	; (24ce4 <m2m_wifi_cb+0x358>)
   24a96:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   24a98:	230c      	movs	r3, #12
   24a9a:	18f9      	adds	r1, r7, r3
   24a9c:	6838      	ldr	r0, [r7, #0]
   24a9e:	2300      	movs	r3, #0
   24aa0:	2264      	movs	r2, #100	; 0x64
   24aa2:	4c8e      	ldr	r4, [pc, #568]	; (24cdc <m2m_wifi_cb+0x350>)
   24aa4:	47a0      	blx	r4
   24aa6:	1e03      	subs	r3, r0, #0
   24aa8:	d000      	beq.n	24aac <m2m_wifi_cb+0x120>
   24aaa:	e13c      	b.n	24d26 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24aac:	4b8c      	ldr	r3, [pc, #560]	; (24ce0 <m2m_wifi_cb+0x354>)
   24aae:	681b      	ldr	r3, [r3, #0]
   24ab0:	2b00      	cmp	r3, #0
   24ab2:	d100      	bne.n	24ab6 <m2m_wifi_cb+0x12a>
   24ab4:	e137      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   24ab6:	4b8a      	ldr	r3, [pc, #552]	; (24ce0 <m2m_wifi_cb+0x354>)
   24ab8:	681b      	ldr	r3, [r3, #0]
   24aba:	220c      	movs	r2, #12
   24abc:	18ba      	adds	r2, r7, r2
   24abe:	0011      	movs	r1, r2
   24ac0:	202f      	movs	r0, #47	; 0x2f
   24ac2:	4798      	blx	r3
}
   24ac4:	e12f      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   24ac6:	1dfb      	adds	r3, r7, #7
   24ac8:	781b      	ldrb	r3, [r3, #0]
   24aca:	2b34      	cmp	r3, #52	; 0x34
   24acc:	d137      	bne.n	24b3e <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   24ace:	2380      	movs	r3, #128	; 0x80
   24ad0:	18f9      	adds	r1, r7, r3
   24ad2:	6838      	ldr	r0, [r7, #0]
   24ad4:	2300      	movs	r3, #0
   24ad6:	2204      	movs	r2, #4
   24ad8:	4c80      	ldr	r4, [pc, #512]	; (24cdc <m2m_wifi_cb+0x350>)
   24ada:	47a0      	blx	r4
   24adc:	1e03      	subs	r3, r0, #0
   24ade:	d000      	beq.n	24ae2 <m2m_wifi_cb+0x156>
   24ae0:	e121      	b.n	24d26 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   24ae2:	4b81      	ldr	r3, [pc, #516]	; (24ce8 <m2m_wifi_cb+0x35c>)
   24ae4:	0018      	movs	r0, r3
   24ae6:	4b81      	ldr	r3, [pc, #516]	; (24cec <m2m_wifi_cb+0x360>)
   24ae8:	4798      	blx	r3
   24aea:	2380      	movs	r3, #128	; 0x80
   24aec:	18fb      	adds	r3, r7, r3
   24aee:	681b      	ldr	r3, [r3, #0]
   24af0:	0e1b      	lsrs	r3, r3, #24
   24af2:	b2db      	uxtb	r3, r3
   24af4:	0019      	movs	r1, r3
   24af6:	2380      	movs	r3, #128	; 0x80
   24af8:	18fb      	adds	r3, r7, r3
   24afa:	681b      	ldr	r3, [r3, #0]
   24afc:	0c1b      	lsrs	r3, r3, #16
   24afe:	b2db      	uxtb	r3, r3
   24b00:	001a      	movs	r2, r3
   24b02:	2380      	movs	r3, #128	; 0x80
   24b04:	18fb      	adds	r3, r7, r3
   24b06:	681b      	ldr	r3, [r3, #0]
   24b08:	0a1b      	lsrs	r3, r3, #8
   24b0a:	b2db      	uxtb	r3, r3
   24b0c:	001c      	movs	r4, r3
   24b0e:	2380      	movs	r3, #128	; 0x80
   24b10:	18fb      	adds	r3, r7, r3
   24b12:	681b      	ldr	r3, [r3, #0]
   24b14:	b2db      	uxtb	r3, r3
   24b16:	4876      	ldr	r0, [pc, #472]	; (24cf0 <m2m_wifi_cb+0x364>)
   24b18:	9300      	str	r3, [sp, #0]
   24b1a:	0023      	movs	r3, r4
   24b1c:	4c73      	ldr	r4, [pc, #460]	; (24cec <m2m_wifi_cb+0x360>)
   24b1e:	47a0      	blx	r4
   24b20:	4b74      	ldr	r3, [pc, #464]	; (24cf4 <m2m_wifi_cb+0x368>)
   24b22:	0018      	movs	r0, r3
   24b24:	4b71      	ldr	r3, [pc, #452]	; (24cec <m2m_wifi_cb+0x360>)
   24b26:	4798      	blx	r3
			if (gpfAppWifiCb)
   24b28:	4b6d      	ldr	r3, [pc, #436]	; (24ce0 <m2m_wifi_cb+0x354>)
   24b2a:	681b      	ldr	r3, [r3, #0]
   24b2c:	2b00      	cmp	r3, #0
   24b2e:	d100      	bne.n	24b32 <m2m_wifi_cb+0x1a6>
   24b30:	e0f9      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   24b32:	4b6b      	ldr	r3, [pc, #428]	; (24ce0 <m2m_wifi_cb+0x354>)
   24b34:	681b      	ldr	r3, [r3, #0]
   24b36:	2100      	movs	r1, #0
   24b38:	2034      	movs	r0, #52	; 0x34
   24b3a:	4798      	blx	r3
}
   24b3c:	e0f3      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   24b3e:	1dfb      	adds	r3, r7, #7
   24b40:	781b      	ldrb	r3, [r3, #0]
   24b42:	2b11      	cmp	r3, #17
   24b44:	d11e      	bne.n	24b84 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   24b46:	4b6c      	ldr	r3, [pc, #432]	; (24cf8 <m2m_wifi_cb+0x36c>)
   24b48:	2200      	movs	r2, #0
   24b4a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   24b4c:	237c      	movs	r3, #124	; 0x7c
   24b4e:	18f9      	adds	r1, r7, r3
   24b50:	6838      	ldr	r0, [r7, #0]
   24b52:	2300      	movs	r3, #0
   24b54:	2204      	movs	r2, #4
   24b56:	4c61      	ldr	r4, [pc, #388]	; (24cdc <m2m_wifi_cb+0x350>)
   24b58:	47a0      	blx	r4
   24b5a:	1e03      	subs	r3, r0, #0
   24b5c:	d000      	beq.n	24b60 <m2m_wifi_cb+0x1d4>
   24b5e:	e0e2      	b.n	24d26 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   24b60:	237c      	movs	r3, #124	; 0x7c
   24b62:	18fb      	adds	r3, r7, r3
   24b64:	781a      	ldrb	r2, [r3, #0]
   24b66:	4b65      	ldr	r3, [pc, #404]	; (24cfc <m2m_wifi_cb+0x370>)
   24b68:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   24b6a:	4b5d      	ldr	r3, [pc, #372]	; (24ce0 <m2m_wifi_cb+0x354>)
   24b6c:	681b      	ldr	r3, [r3, #0]
   24b6e:	2b00      	cmp	r3, #0
   24b70:	d100      	bne.n	24b74 <m2m_wifi_cb+0x1e8>
   24b72:	e0d8      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   24b74:	4b5a      	ldr	r3, [pc, #360]	; (24ce0 <m2m_wifi_cb+0x354>)
   24b76:	681b      	ldr	r3, [r3, #0]
   24b78:	227c      	movs	r2, #124	; 0x7c
   24b7a:	18ba      	adds	r2, r7, r2
   24b7c:	0011      	movs	r1, r2
   24b7e:	2011      	movs	r0, #17
   24b80:	4798      	blx	r3
}
   24b82:	e0d0      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   24b84:	1dfb      	adds	r3, r7, #7
   24b86:	781b      	ldrb	r3, [r3, #0]
   24b88:	2b13      	cmp	r3, #19
   24b8a:	d116      	bne.n	24bba <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   24b8c:	230c      	movs	r3, #12
   24b8e:	18f9      	adds	r1, r7, r3
   24b90:	6838      	ldr	r0, [r7, #0]
   24b92:	2300      	movs	r3, #0
   24b94:	222c      	movs	r2, #44	; 0x2c
   24b96:	4c51      	ldr	r4, [pc, #324]	; (24cdc <m2m_wifi_cb+0x350>)
   24b98:	47a0      	blx	r4
   24b9a:	1e03      	subs	r3, r0, #0
   24b9c:	d000      	beq.n	24ba0 <m2m_wifi_cb+0x214>
   24b9e:	e0c2      	b.n	24d26 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24ba0:	4b4f      	ldr	r3, [pc, #316]	; (24ce0 <m2m_wifi_cb+0x354>)
   24ba2:	681b      	ldr	r3, [r3, #0]
   24ba4:	2b00      	cmp	r3, #0
   24ba6:	d100      	bne.n	24baa <m2m_wifi_cb+0x21e>
   24ba8:	e0bd      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   24baa:	4b4d      	ldr	r3, [pc, #308]	; (24ce0 <m2m_wifi_cb+0x354>)
   24bac:	681b      	ldr	r3, [r3, #0]
   24bae:	220c      	movs	r2, #12
   24bb0:	18ba      	adds	r2, r7, r2
   24bb2:	0011      	movs	r1, r2
   24bb4:	2013      	movs	r0, #19
   24bb6:	4798      	blx	r3
}
   24bb8:	e0b5      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   24bba:	1dfb      	adds	r3, r7, #7
   24bbc:	781b      	ldrb	r3, [r3, #0]
   24bbe:	2b04      	cmp	r3, #4
   24bc0:	d116      	bne.n	24bf0 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   24bc2:	23a8      	movs	r3, #168	; 0xa8
   24bc4:	18f9      	adds	r1, r7, r3
   24bc6:	6838      	ldr	r0, [r7, #0]
   24bc8:	2300      	movs	r3, #0
   24bca:	2204      	movs	r2, #4
   24bcc:	4c43      	ldr	r4, [pc, #268]	; (24cdc <m2m_wifi_cb+0x350>)
   24bce:	47a0      	blx	r4
   24bd0:	1e03      	subs	r3, r0, #0
   24bd2:	d000      	beq.n	24bd6 <m2m_wifi_cb+0x24a>
   24bd4:	e0a7      	b.n	24d26 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24bd6:	4b42      	ldr	r3, [pc, #264]	; (24ce0 <m2m_wifi_cb+0x354>)
   24bd8:	681b      	ldr	r3, [r3, #0]
   24bda:	2b00      	cmp	r3, #0
   24bdc:	d100      	bne.n	24be0 <m2m_wifi_cb+0x254>
   24bde:	e0a2      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   24be0:	4b3f      	ldr	r3, [pc, #252]	; (24ce0 <m2m_wifi_cb+0x354>)
   24be2:	681b      	ldr	r3, [r3, #0]
   24be4:	22a8      	movs	r2, #168	; 0xa8
   24be6:	18ba      	adds	r2, r7, r2
   24be8:	0011      	movs	r1, r2
   24bea:	2004      	movs	r0, #4
   24bec:	4798      	blx	r3
}
   24bee:	e09a      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   24bf0:	1dfb      	adds	r3, r7, #7
   24bf2:	781b      	ldrb	r3, [r3, #0]
   24bf4:	2b65      	cmp	r3, #101	; 0x65
   24bf6:	d116      	bne.n	24c26 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   24bf8:	23a8      	movs	r3, #168	; 0xa8
   24bfa:	18f9      	adds	r1, r7, r3
   24bfc:	6838      	ldr	r0, [r7, #0]
   24bfe:	2300      	movs	r3, #0
   24c00:	2204      	movs	r2, #4
   24c02:	4c36      	ldr	r4, [pc, #216]	; (24cdc <m2m_wifi_cb+0x350>)
   24c04:	47a0      	blx	r4
   24c06:	1e03      	subs	r3, r0, #0
   24c08:	d000      	beq.n	24c0c <m2m_wifi_cb+0x280>
   24c0a:	e08c      	b.n	24d26 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   24c0c:	4b34      	ldr	r3, [pc, #208]	; (24ce0 <m2m_wifi_cb+0x354>)
   24c0e:	681b      	ldr	r3, [r3, #0]
   24c10:	2b00      	cmp	r3, #0
   24c12:	d100      	bne.n	24c16 <m2m_wifi_cb+0x28a>
   24c14:	e087      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   24c16:	4b32      	ldr	r3, [pc, #200]	; (24ce0 <m2m_wifi_cb+0x354>)
   24c18:	681b      	ldr	r3, [r3, #0]
   24c1a:	22a8      	movs	r2, #168	; 0xa8
   24c1c:	18ba      	adds	r2, r7, r2
   24c1e:	0011      	movs	r1, r2
   24c20:	2065      	movs	r0, #101	; 0x65
   24c22:	4798      	blx	r3
}
   24c24:	e07f      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   24c26:	1dfb      	adds	r3, r7, #7
   24c28:	781b      	ldrb	r3, [r3, #0]
   24c2a:	2b09      	cmp	r3, #9
   24c2c:	d116      	bne.n	24c5c <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   24c2e:	230c      	movs	r3, #12
   24c30:	18f9      	adds	r1, r7, r3
   24c32:	6838      	ldr	r0, [r7, #0]
   24c34:	2301      	movs	r3, #1
   24c36:	2264      	movs	r2, #100	; 0x64
   24c38:	4c28      	ldr	r4, [pc, #160]	; (24cdc <m2m_wifi_cb+0x350>)
   24c3a:	47a0      	blx	r4
   24c3c:	1e03      	subs	r3, r0, #0
   24c3e:	d000      	beq.n	24c42 <m2m_wifi_cb+0x2b6>
   24c40:	e071      	b.n	24d26 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   24c42:	4b27      	ldr	r3, [pc, #156]	; (24ce0 <m2m_wifi_cb+0x354>)
   24c44:	681b      	ldr	r3, [r3, #0]
   24c46:	2b00      	cmp	r3, #0
   24c48:	d100      	bne.n	24c4c <m2m_wifi_cb+0x2c0>
   24c4a:	e06c      	b.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   24c4c:	4b24      	ldr	r3, [pc, #144]	; (24ce0 <m2m_wifi_cb+0x354>)
   24c4e:	681b      	ldr	r3, [r3, #0]
   24c50:	220c      	movs	r2, #12
   24c52:	18ba      	adds	r2, r7, r2
   24c54:	0011      	movs	r1, r2
   24c56:	2009      	movs	r0, #9
   24c58:	4798      	blx	r3
}
   24c5a:	e064      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   24c5c:	1dfb      	adds	r3, r7, #7
   24c5e:	781b      	ldrb	r3, [r3, #0]
   24c60:	2b2a      	cmp	r3, #42	; 0x2a
   24c62:	d114      	bne.n	24c8e <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   24c64:	2378      	movs	r3, #120	; 0x78
   24c66:	18f9      	adds	r1, r7, r3
   24c68:	6838      	ldr	r0, [r7, #0]
   24c6a:	2301      	movs	r3, #1
   24c6c:	2204      	movs	r2, #4
   24c6e:	4c1b      	ldr	r4, [pc, #108]	; (24cdc <m2m_wifi_cb+0x350>)
   24c70:	47a0      	blx	r4
   24c72:	1e03      	subs	r3, r0, #0
   24c74:	d157      	bne.n	24d26 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   24c76:	4b1a      	ldr	r3, [pc, #104]	; (24ce0 <m2m_wifi_cb+0x354>)
   24c78:	681b      	ldr	r3, [r3, #0]
   24c7a:	2b00      	cmp	r3, #0
   24c7c:	d053      	beq.n	24d26 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   24c7e:	4b18      	ldr	r3, [pc, #96]	; (24ce0 <m2m_wifi_cb+0x354>)
   24c80:	681b      	ldr	r3, [r3, #0]
   24c82:	2278      	movs	r2, #120	; 0x78
   24c84:	18ba      	adds	r2, r7, r2
   24c86:	0011      	movs	r1, r2
   24c88:	202a      	movs	r0, #42	; 0x2a
   24c8a:	4798      	blx	r3
}
   24c8c:	e04b      	b.n	24d26 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   24c8e:	1dfb      	adds	r3, r7, #7
   24c90:	781b      	ldrb	r3, [r3, #0]
   24c92:	2b20      	cmp	r3, #32
   24c94:	d134      	bne.n	24d00 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   24c96:	2370      	movs	r3, #112	; 0x70
   24c98:	18f9      	adds	r1, r7, r3
   24c9a:	6838      	ldr	r0, [r7, #0]
   24c9c:	2300      	movs	r3, #0
   24c9e:	2208      	movs	r2, #8
   24ca0:	4c0e      	ldr	r4, [pc, #56]	; (24cdc <m2m_wifi_cb+0x350>)
   24ca2:	47a0      	blx	r4
   24ca4:	1e03      	subs	r3, r0, #0
   24ca6:	d13e      	bne.n	24d26 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   24ca8:	683b      	ldr	r3, [r7, #0]
   24caa:	3308      	adds	r3, #8
   24cac:	0018      	movs	r0, r3
   24cae:	2370      	movs	r3, #112	; 0x70
   24cb0:	18fb      	adds	r3, r7, r3
   24cb2:	6819      	ldr	r1, [r3, #0]
   24cb4:	2370      	movs	r3, #112	; 0x70
   24cb6:	18fb      	adds	r3, r7, r3
   24cb8:	889a      	ldrh	r2, [r3, #4]
   24cba:	2301      	movs	r3, #1
   24cbc:	4c07      	ldr	r4, [pc, #28]	; (24cdc <m2m_wifi_cb+0x350>)
   24cbe:	47a0      	blx	r4
   24cc0:	1e03      	subs	r3, r0, #0
   24cc2:	d130      	bne.n	24d26 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   24cc4:	4b06      	ldr	r3, [pc, #24]	; (24ce0 <m2m_wifi_cb+0x354>)
   24cc6:	681b      	ldr	r3, [r3, #0]
   24cc8:	2b00      	cmp	r3, #0
   24cca:	d02c      	beq.n	24d26 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   24ccc:	4b04      	ldr	r3, [pc, #16]	; (24ce0 <m2m_wifi_cb+0x354>)
   24cce:	681b      	ldr	r3, [r3, #0]
   24cd0:	2270      	movs	r2, #112	; 0x70
   24cd2:	18ba      	adds	r2, r7, r2
   24cd4:	0011      	movs	r1, r2
   24cd6:	2020      	movs	r0, #32
   24cd8:	4798      	blx	r3
}
   24cda:	e024      	b.n	24d26 <m2m_wifi_cb+0x39a>
   24cdc:	00024751 	.word	0x00024751
   24ce0:	200041c8 	.word	0x200041c8
   24ce4:	00023bd5 	.word	0x00023bd5
   24ce8:	0003ccbc 	.word	0x0003ccbc
   24cec:	00020e3d 	.word	0x00020e3d
   24cf0:	0003ccc8 	.word	0x0003ccc8
   24cf4:	0003cce8 	.word	0x0003cce8
   24cf8:	200041c5 	.word	0x200041c5
   24cfc:	200041c4 	.word	0x200041c4
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   24d00:	2324      	movs	r3, #36	; 0x24
   24d02:	33ff      	adds	r3, #255	; 0xff
   24d04:	001a      	movs	r2, r3
   24d06:	490a      	ldr	r1, [pc, #40]	; (24d30 <m2m_wifi_cb+0x3a4>)
   24d08:	4b0a      	ldr	r3, [pc, #40]	; (24d34 <m2m_wifi_cb+0x3a8>)
   24d0a:	0018      	movs	r0, r3
   24d0c:	4b0a      	ldr	r3, [pc, #40]	; (24d38 <m2m_wifi_cb+0x3ac>)
   24d0e:	4798      	blx	r3
   24d10:	1dfb      	adds	r3, r7, #7
   24d12:	781a      	ldrb	r2, [r3, #0]
   24d14:	4b09      	ldr	r3, [pc, #36]	; (24d3c <m2m_wifi_cb+0x3b0>)
   24d16:	0011      	movs	r1, r2
   24d18:	0018      	movs	r0, r3
   24d1a:	4b07      	ldr	r3, [pc, #28]	; (24d38 <m2m_wifi_cb+0x3ac>)
   24d1c:	4798      	blx	r3
   24d1e:	4b08      	ldr	r3, [pc, #32]	; (24d40 <m2m_wifi_cb+0x3b4>)
   24d20:	0018      	movs	r0, r3
   24d22:	4b05      	ldr	r3, [pc, #20]	; (24d38 <m2m_wifi_cb+0x3ac>)
   24d24:	4798      	blx	r3
}
   24d26:	46c0      	nop			; (mov r8, r8)
   24d28:	46bd      	mov	sp, r7
   24d2a:	b02d      	add	sp, #180	; 0xb4
   24d2c:	bd90      	pop	{r4, r7, pc}
   24d2e:	46c0      	nop			; (mov r8, r8)
   24d30:	0003d088 	.word	0x0003d088
   24d34:	0003ccec 	.word	0x0003ccec
   24d38:	00020e3d 	.word	0x00020e3d
   24d3c:	0003cd00 	.word	0x0003cd00
   24d40:	0003cce8 	.word	0x0003cce8

00024d44 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   24d44:	b590      	push	{r4, r7, lr}
   24d46:	b091      	sub	sp, #68	; 0x44
   24d48:	af02      	add	r7, sp, #8
   24d4a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   24d4c:	2337      	movs	r3, #55	; 0x37
   24d4e:	18fb      	adds	r3, r7, r3
   24d50:	2200      	movs	r2, #0
   24d52:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   24d54:	230b      	movs	r3, #11
   24d56:	18fb      	adds	r3, r7, r3
   24d58:	2201      	movs	r2, #1
   24d5a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   24d5c:	687b      	ldr	r3, [r7, #4]
   24d5e:	2b00      	cmp	r3, #0
   24d60:	d104      	bne.n	24d6c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   24d62:	2337      	movs	r3, #55	; 0x37
   24d64:	18fb      	adds	r3, r7, r3
   24d66:	22f4      	movs	r2, #244	; 0xf4
   24d68:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   24d6a:	e0b3      	b.n	24ed4 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   24d6c:	687b      	ldr	r3, [r7, #4]
   24d6e:	681a      	ldr	r2, [r3, #0]
   24d70:	4b5c      	ldr	r3, [pc, #368]	; (24ee4 <m2m_wifi_init+0x1a0>)
   24d72:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   24d74:	4b5c      	ldr	r3, [pc, #368]	; (24ee8 <m2m_wifi_init+0x1a4>)
   24d76:	2200      	movs	r2, #0
   24d78:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   24d7a:	2337      	movs	r3, #55	; 0x37
   24d7c:	18fc      	adds	r4, r7, r3
   24d7e:	230b      	movs	r3, #11
   24d80:	18fb      	adds	r3, r7, r3
   24d82:	0018      	movs	r0, r3
   24d84:	4b59      	ldr	r3, [pc, #356]	; (24eec <m2m_wifi_init+0x1a8>)
   24d86:	4798      	blx	r3
   24d88:	0003      	movs	r3, r0
   24d8a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   24d8c:	2337      	movs	r3, #55	; 0x37
   24d8e:	18fb      	adds	r3, r7, r3
   24d90:	781b      	ldrb	r3, [r3, #0]
   24d92:	b25b      	sxtb	r3, r3
   24d94:	2b00      	cmp	r3, #0
   24d96:	d000      	beq.n	24d9a <m2m_wifi_init+0x56>
   24d98:	e099      	b.n	24ece <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   24d9a:	2337      	movs	r3, #55	; 0x37
   24d9c:	18fc      	adds	r4, r7, r3
   24d9e:	2000      	movs	r0, #0
   24da0:	4b53      	ldr	r3, [pc, #332]	; (24ef0 <m2m_wifi_init+0x1ac>)
   24da2:	4798      	blx	r3
   24da4:	0003      	movs	r3, r0
   24da6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   24da8:	2337      	movs	r3, #55	; 0x37
   24daa:	18fb      	adds	r3, r7, r3
   24dac:	781b      	ldrb	r3, [r3, #0]
   24dae:	b25b      	sxtb	r3, r3
   24db0:	2b00      	cmp	r3, #0
   24db2:	d000      	beq.n	24db6 <m2m_wifi_init+0x72>
   24db4:	e086      	b.n	24ec4 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   24db6:	4b4f      	ldr	r3, [pc, #316]	; (24ef4 <m2m_wifi_init+0x1b0>)
   24db8:	0019      	movs	r1, r3
   24dba:	2001      	movs	r0, #1
   24dbc:	4b4e      	ldr	r3, [pc, #312]	; (24ef8 <m2m_wifi_init+0x1b4>)
   24dbe:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   24dc0:	2337      	movs	r3, #55	; 0x37
   24dc2:	18fc      	adds	r4, r7, r3
   24dc4:	230c      	movs	r3, #12
   24dc6:	18fb      	adds	r3, r7, r3
   24dc8:	0018      	movs	r0, r3
   24dca:	4b4c      	ldr	r3, [pc, #304]	; (24efc <m2m_wifi_init+0x1b8>)
   24dcc:	4798      	blx	r3
   24dce:	0003      	movs	r3, r0
   24dd0:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   24dd2:	4b4b      	ldr	r3, [pc, #300]	; (24f00 <m2m_wifi_init+0x1bc>)
   24dd4:	0018      	movs	r0, r3
   24dd6:	4b4b      	ldr	r3, [pc, #300]	; (24f04 <m2m_wifi_init+0x1c0>)
   24dd8:	4798      	blx	r3
   24dda:	230c      	movs	r3, #12
   24ddc:	18fb      	adds	r3, r7, r3
   24dde:	791b      	ldrb	r3, [r3, #4]
   24de0:	0019      	movs	r1, r3
   24de2:	230c      	movs	r3, #12
   24de4:	18fb      	adds	r3, r7, r3
   24de6:	795b      	ldrb	r3, [r3, #5]
   24de8:	001a      	movs	r2, r3
   24dea:	230c      	movs	r3, #12
   24dec:	18fb      	adds	r3, r7, r3
   24dee:	799b      	ldrb	r3, [r3, #6]
   24df0:	001c      	movs	r4, r3
   24df2:	230c      	movs	r3, #12
   24df4:	18fb      	adds	r3, r7, r3
   24df6:	8c1b      	ldrh	r3, [r3, #32]
   24df8:	4843      	ldr	r0, [pc, #268]	; (24f08 <m2m_wifi_init+0x1c4>)
   24dfa:	9300      	str	r3, [sp, #0]
   24dfc:	0023      	movs	r3, r4
   24dfe:	4c41      	ldr	r4, [pc, #260]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e00:	47a0      	blx	r4
   24e02:	4b42      	ldr	r3, [pc, #264]	; (24f0c <m2m_wifi_init+0x1c8>)
   24e04:	0018      	movs	r0, r3
   24e06:	4b3f      	ldr	r3, [pc, #252]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e08:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   24e0a:	4b3d      	ldr	r3, [pc, #244]	; (24f00 <m2m_wifi_init+0x1bc>)
   24e0c:	0018      	movs	r0, r3
   24e0e:	4b3d      	ldr	r3, [pc, #244]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e10:	4798      	blx	r3
   24e12:	230c      	movs	r3, #12
   24e14:	18fb      	adds	r3, r7, r3
   24e16:	3316      	adds	r3, #22
   24e18:	001a      	movs	r2, r3
   24e1a:	230c      	movs	r3, #12
   24e1c:	18fb      	adds	r3, r7, r3
   24e1e:	330a      	adds	r3, #10
   24e20:	0019      	movs	r1, r3
   24e22:	4b3b      	ldr	r3, [pc, #236]	; (24f10 <m2m_wifi_init+0x1cc>)
   24e24:	0018      	movs	r0, r3
   24e26:	4b37      	ldr	r3, [pc, #220]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e28:	4798      	blx	r3
   24e2a:	4b38      	ldr	r3, [pc, #224]	; (24f0c <m2m_wifi_init+0x1c8>)
   24e2c:	0018      	movs	r0, r3
   24e2e:	4b35      	ldr	r3, [pc, #212]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e30:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   24e32:	4b33      	ldr	r3, [pc, #204]	; (24f00 <m2m_wifi_init+0x1bc>)
   24e34:	0018      	movs	r0, r3
   24e36:	4b33      	ldr	r3, [pc, #204]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e38:	4798      	blx	r3
   24e3a:	230c      	movs	r3, #12
   24e3c:	18fb      	adds	r3, r7, r3
   24e3e:	79db      	ldrb	r3, [r3, #7]
   24e40:	0019      	movs	r1, r3
   24e42:	230c      	movs	r3, #12
   24e44:	18fb      	adds	r3, r7, r3
   24e46:	7a1b      	ldrb	r3, [r3, #8]
   24e48:	001a      	movs	r2, r3
   24e4a:	230c      	movs	r3, #12
   24e4c:	18fb      	adds	r3, r7, r3
   24e4e:	7a5b      	ldrb	r3, [r3, #9]
   24e50:	4830      	ldr	r0, [pc, #192]	; (24f14 <m2m_wifi_init+0x1d0>)
   24e52:	4c2c      	ldr	r4, [pc, #176]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e54:	47a0      	blx	r4
   24e56:	4b2d      	ldr	r3, [pc, #180]	; (24f0c <m2m_wifi_init+0x1c8>)
   24e58:	0018      	movs	r0, r3
   24e5a:	4b2a      	ldr	r3, [pc, #168]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e5c:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   24e5e:	4b28      	ldr	r3, [pc, #160]	; (24f00 <m2m_wifi_init+0x1bc>)
   24e60:	0018      	movs	r0, r3
   24e62:	4b28      	ldr	r3, [pc, #160]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e64:	4798      	blx	r3
   24e66:	482c      	ldr	r0, [pc, #176]	; (24f18 <m2m_wifi_init+0x1d4>)
   24e68:	2304      	movs	r3, #4
   24e6a:	2205      	movs	r2, #5
   24e6c:	2113      	movs	r1, #19
   24e6e:	4c25      	ldr	r4, [pc, #148]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e70:	47a0      	blx	r4
   24e72:	4b26      	ldr	r3, [pc, #152]	; (24f0c <m2m_wifi_init+0x1c8>)
   24e74:	0018      	movs	r0, r3
   24e76:	4b23      	ldr	r3, [pc, #140]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e78:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   24e7a:	4b21      	ldr	r3, [pc, #132]	; (24f00 <m2m_wifi_init+0x1bc>)
   24e7c:	0018      	movs	r0, r3
   24e7e:	4b21      	ldr	r3, [pc, #132]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e80:	4798      	blx	r3
   24e82:	4a26      	ldr	r2, [pc, #152]	; (24f1c <m2m_wifi_init+0x1d8>)
   24e84:	4926      	ldr	r1, [pc, #152]	; (24f20 <m2m_wifi_init+0x1dc>)
   24e86:	4b27      	ldr	r3, [pc, #156]	; (24f24 <m2m_wifi_init+0x1e0>)
   24e88:	0018      	movs	r0, r3
   24e8a:	4b1e      	ldr	r3, [pc, #120]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e8c:	4798      	blx	r3
   24e8e:	4b1f      	ldr	r3, [pc, #124]	; (24f0c <m2m_wifi_init+0x1c8>)
   24e90:	0018      	movs	r0, r3
   24e92:	4b1c      	ldr	r3, [pc, #112]	; (24f04 <m2m_wifi_init+0x1c0>)
   24e94:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   24e96:	2337      	movs	r3, #55	; 0x37
   24e98:	18fb      	adds	r3, r7, r3
   24e9a:	781b      	ldrb	r3, [r3, #0]
   24e9c:	b25b      	sxtb	r3, r3
   24e9e:	330d      	adds	r3, #13
   24ea0:	d117      	bne.n	24ed2 <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   24ea2:	23e8      	movs	r3, #232	; 0xe8
   24ea4:	33ff      	adds	r3, #255	; 0xff
   24ea6:	001a      	movs	r2, r3
   24ea8:	491f      	ldr	r1, [pc, #124]	; (24f28 <m2m_wifi_init+0x1e4>)
   24eaa:	4b20      	ldr	r3, [pc, #128]	; (24f2c <m2m_wifi_init+0x1e8>)
   24eac:	0018      	movs	r0, r3
   24eae:	4b15      	ldr	r3, [pc, #84]	; (24f04 <m2m_wifi_init+0x1c0>)
   24eb0:	4798      	blx	r3
   24eb2:	4b1f      	ldr	r3, [pc, #124]	; (24f30 <m2m_wifi_init+0x1ec>)
   24eb4:	0018      	movs	r0, r3
   24eb6:	4b13      	ldr	r3, [pc, #76]	; (24f04 <m2m_wifi_init+0x1c0>)
   24eb8:	4798      	blx	r3
   24eba:	4b14      	ldr	r3, [pc, #80]	; (24f0c <m2m_wifi_init+0x1c8>)
   24ebc:	0018      	movs	r0, r3
   24ebe:	4b11      	ldr	r3, [pc, #68]	; (24f04 <m2m_wifi_init+0x1c0>)
   24ec0:	4798      	blx	r3
	}

	goto _EXIT0;
   24ec2:	e006      	b.n	24ed2 <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   24ec4:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   24ec6:	2000      	movs	r0, #0
   24ec8:	4b1a      	ldr	r3, [pc, #104]	; (24f34 <m2m_wifi_init+0x1f0>)
   24eca:	4798      	blx	r3
   24ecc:	e002      	b.n	24ed4 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   24ece:	46c0      	nop			; (mov r8, r8)
   24ed0:	e000      	b.n	24ed4 <m2m_wifi_init+0x190>
	goto _EXIT0;
   24ed2:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   24ed4:	2337      	movs	r3, #55	; 0x37
   24ed6:	18fb      	adds	r3, r7, r3
   24ed8:	781b      	ldrb	r3, [r3, #0]
   24eda:	b25b      	sxtb	r3, r3
}
   24edc:	0018      	movs	r0, r3
   24ede:	46bd      	mov	sp, r7
   24ee0:	b00f      	add	sp, #60	; 0x3c
   24ee2:	bd90      	pop	{r4, r7, pc}
   24ee4:	200041c8 	.word	0x200041c8
   24ee8:	200041c5 	.word	0x200041c5
   24eec:	00026069 	.word	0x00026069
   24ef0:	00023ded 	.word	0x00023ded
   24ef4:	0002498d 	.word	0x0002498d
   24ef8:	000248d1 	.word	0x000248d1
   24efc:	00025e9d 	.word	0x00025e9d
   24f00:	0003ccbc 	.word	0x0003ccbc
   24f04:	00020e3d 	.word	0x00020e3d
   24f08:	0003ce60 	.word	0x0003ce60
   24f0c:	0003cce8 	.word	0x0003cce8
   24f10:	0003ce88 	.word	0x0003ce88
   24f14:	0003cea4 	.word	0x0003cea4
   24f18:	0003cec8 	.word	0x0003cec8
   24f1c:	0003cee0 	.word	0x0003cee0
   24f20:	0003ceec 	.word	0x0003ceec
   24f24:	0003cef8 	.word	0x0003cef8
   24f28:	0003d094 	.word	0x0003d094
   24f2c:	0003ccec 	.word	0x0003ccec
   24f30:	0003cf10 	.word	0x0003cf10
   24f34:	000261f9 	.word	0x000261f9

00024f38 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   24f38:	b580      	push	{r7, lr}
   24f3a:	b082      	sub	sp, #8
   24f3c:	af00      	add	r7, sp, #0
   24f3e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   24f40:	4b03      	ldr	r3, [pc, #12]	; (24f50 <m2m_wifi_handle_events+0x18>)
   24f42:	4798      	blx	r3
   24f44:	0003      	movs	r3, r0
}
   24f46:	0018      	movs	r0, r3
   24f48:	46bd      	mov	sp, r7
   24f4a:	b002      	add	sp, #8
   24f4c:	bd80      	pop	{r7, pc}
   24f4e:	46c0      	nop			; (mov r8, r8)
   24f50:	000246b1 	.word	0x000246b1

00024f54 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   24f54:	b590      	push	{r4, r7, lr}
   24f56:	b087      	sub	sp, #28
   24f58:	af02      	add	r7, sp, #8
   24f5a:	60f8      	str	r0, [r7, #12]
   24f5c:	0008      	movs	r0, r1
   24f5e:	0011      	movs	r1, r2
   24f60:	607b      	str	r3, [r7, #4]
   24f62:	230b      	movs	r3, #11
   24f64:	18fb      	adds	r3, r7, r3
   24f66:	1c02      	adds	r2, r0, #0
   24f68:	701a      	strb	r2, [r3, #0]
   24f6a:	230a      	movs	r3, #10
   24f6c:	18fb      	adds	r3, r7, r3
   24f6e:	1c0a      	adds	r2, r1, #0
   24f70:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   24f72:	687c      	ldr	r4, [r7, #4]
   24f74:	230a      	movs	r3, #10
   24f76:	18fb      	adds	r3, r7, r3
   24f78:	781a      	ldrb	r2, [r3, #0]
   24f7a:	230b      	movs	r3, #11
   24f7c:	18fb      	adds	r3, r7, r3
   24f7e:	7819      	ldrb	r1, [r3, #0]
   24f80:	68f8      	ldr	r0, [r7, #12]
   24f82:	2300      	movs	r3, #0
   24f84:	9301      	str	r3, [sp, #4]
   24f86:	2320      	movs	r3, #32
   24f88:	18fb      	adds	r3, r7, r3
   24f8a:	881b      	ldrh	r3, [r3, #0]
   24f8c:	9300      	str	r3, [sp, #0]
   24f8e:	0023      	movs	r3, r4
   24f90:	4c03      	ldr	r4, [pc, #12]	; (24fa0 <m2m_wifi_connect+0x4c>)
   24f92:	47a0      	blx	r4
   24f94:	0003      	movs	r3, r0
}
   24f96:	0018      	movs	r0, r3
   24f98:	46bd      	mov	sp, r7
   24f9a:	b005      	add	sp, #20
   24f9c:	bd90      	pop	{r4, r7, pc}
   24f9e:	46c0      	nop			; (mov r8, r8)
   24fa0:	00024fa5 	.word	0x00024fa5

00024fa4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   24fa4:	b5b0      	push	{r4, r5, r7, lr}
   24fa6:	b0aa      	sub	sp, #168	; 0xa8
   24fa8:	af04      	add	r7, sp, #16
   24faa:	60f8      	str	r0, [r7, #12]
   24fac:	0008      	movs	r0, r1
   24fae:	0011      	movs	r1, r2
   24fb0:	607b      	str	r3, [r7, #4]
   24fb2:	230b      	movs	r3, #11
   24fb4:	18fb      	adds	r3, r7, r3
   24fb6:	1c02      	adds	r2, r0, #0
   24fb8:	701a      	strb	r2, [r3, #0]
   24fba:	230a      	movs	r3, #10
   24fbc:	18fb      	adds	r3, r7, r3
   24fbe:	1c0a      	adds	r2, r1, #0
   24fc0:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   24fc2:	2397      	movs	r3, #151	; 0x97
   24fc4:	18fb      	adds	r3, r7, r3
   24fc6:	2200      	movs	r2, #0
   24fc8:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   24fca:	230a      	movs	r3, #10
   24fcc:	18fb      	adds	r3, r7, r3
   24fce:	781b      	ldrb	r3, [r3, #0]
   24fd0:	2b01      	cmp	r3, #1
   24fd2:	d100      	bne.n	24fd6 <m2m_wifi_connect_sc+0x32>
   24fd4:	e085      	b.n	250e2 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   24fd6:	687b      	ldr	r3, [r7, #4]
   24fd8:	2b00      	cmp	r3, #0
   24fda:	d112      	bne.n	25002 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   24fdc:	4ad8      	ldr	r2, [pc, #864]	; (25340 <m2m_wifi_connect_sc+0x39c>)
   24fde:	49d9      	ldr	r1, [pc, #868]	; (25344 <m2m_wifi_connect_sc+0x3a0>)
   24fe0:	4bd9      	ldr	r3, [pc, #868]	; (25348 <m2m_wifi_connect_sc+0x3a4>)
   24fe2:	0018      	movs	r0, r3
   24fe4:	4bd9      	ldr	r3, [pc, #868]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   24fe6:	4798      	blx	r3
   24fe8:	4bd9      	ldr	r3, [pc, #868]	; (25350 <m2m_wifi_connect_sc+0x3ac>)
   24fea:	0018      	movs	r0, r3
   24fec:	4bd7      	ldr	r3, [pc, #860]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   24fee:	4798      	blx	r3
   24ff0:	4bd8      	ldr	r3, [pc, #864]	; (25354 <m2m_wifi_connect_sc+0x3b0>)
   24ff2:	0018      	movs	r0, r3
   24ff4:	4bd5      	ldr	r3, [pc, #852]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   24ff6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   24ff8:	2397      	movs	r3, #151	; 0x97
   24ffa:	18fb      	adds	r3, r7, r3
   24ffc:	22f4      	movs	r2, #244	; 0xf4
   24ffe:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   25000:	e1f9      	b.n	253f6 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   25002:	230a      	movs	r3, #10
   25004:	18fb      	adds	r3, r7, r3
   25006:	781b      	ldrb	r3, [r3, #0]
   25008:	2b02      	cmp	r3, #2
   2500a:	d16a      	bne.n	250e2 <m2m_wifi_connect_sc+0x13e>
   2500c:	687b      	ldr	r3, [r7, #4]
   2500e:	0018      	movs	r0, r3
   25010:	4bd1      	ldr	r3, [pc, #836]	; (25358 <m2m_wifi_connect_sc+0x3b4>)
   25012:	4798      	blx	r3
   25014:	0003      	movs	r3, r0
   25016:	2b40      	cmp	r3, #64	; 0x40
   25018:	d163      	bne.n	250e2 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   2501a:	2396      	movs	r3, #150	; 0x96
   2501c:	18fb      	adds	r3, r7, r3
   2501e:	2200      	movs	r2, #0
   25020:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   25022:	687b      	ldr	r3, [r7, #4]
   25024:	2290      	movs	r2, #144	; 0x90
   25026:	18ba      	adds	r2, r7, r2
   25028:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   2502a:	e055      	b.n	250d8 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   2502c:	2396      	movs	r3, #150	; 0x96
   2502e:	18fb      	adds	r3, r7, r3
   25030:	781b      	ldrb	r3, [r3, #0]
   25032:	2290      	movs	r2, #144	; 0x90
   25034:	18ba      	adds	r2, r7, r2
   25036:	6812      	ldr	r2, [r2, #0]
   25038:	18d3      	adds	r3, r2, r3
   2503a:	781b      	ldrb	r3, [r3, #0]
   2503c:	2b2f      	cmp	r3, #47	; 0x2f
   2503e:	d931      	bls.n	250a4 <m2m_wifi_connect_sc+0x100>
   25040:	2396      	movs	r3, #150	; 0x96
   25042:	18fb      	adds	r3, r7, r3
   25044:	781b      	ldrb	r3, [r3, #0]
   25046:	2290      	movs	r2, #144	; 0x90
   25048:	18ba      	adds	r2, r7, r2
   2504a:	6812      	ldr	r2, [r2, #0]
   2504c:	18d3      	adds	r3, r2, r3
   2504e:	781b      	ldrb	r3, [r3, #0]
   25050:	2b39      	cmp	r3, #57	; 0x39
   25052:	d909      	bls.n	25068 <m2m_wifi_connect_sc+0xc4>
   25054:	2396      	movs	r3, #150	; 0x96
   25056:	18fb      	adds	r3, r7, r3
   25058:	781b      	ldrb	r3, [r3, #0]
   2505a:	2290      	movs	r2, #144	; 0x90
   2505c:	18ba      	adds	r2, r7, r2
   2505e:	6812      	ldr	r2, [r2, #0]
   25060:	18d3      	adds	r3, r2, r3
   25062:	781b      	ldrb	r3, [r3, #0]
   25064:	2b40      	cmp	r3, #64	; 0x40
   25066:	d91d      	bls.n	250a4 <m2m_wifi_connect_sc+0x100>
   25068:	2396      	movs	r3, #150	; 0x96
   2506a:	18fb      	adds	r3, r7, r3
   2506c:	781b      	ldrb	r3, [r3, #0]
   2506e:	2290      	movs	r2, #144	; 0x90
   25070:	18ba      	adds	r2, r7, r2
   25072:	6812      	ldr	r2, [r2, #0]
   25074:	18d3      	adds	r3, r2, r3
   25076:	781b      	ldrb	r3, [r3, #0]
   25078:	2b46      	cmp	r3, #70	; 0x46
   2507a:	d909      	bls.n	25090 <m2m_wifi_connect_sc+0xec>
   2507c:	2396      	movs	r3, #150	; 0x96
   2507e:	18fb      	adds	r3, r7, r3
   25080:	781b      	ldrb	r3, [r3, #0]
   25082:	2290      	movs	r2, #144	; 0x90
   25084:	18ba      	adds	r2, r7, r2
   25086:	6812      	ldr	r2, [r2, #0]
   25088:	18d3      	adds	r3, r2, r3
   2508a:	781b      	ldrb	r3, [r3, #0]
   2508c:	2b60      	cmp	r3, #96	; 0x60
   2508e:	d909      	bls.n	250a4 <m2m_wifi_connect_sc+0x100>
   25090:	2396      	movs	r3, #150	; 0x96
   25092:	18fb      	adds	r3, r7, r3
   25094:	781b      	ldrb	r3, [r3, #0]
   25096:	2290      	movs	r2, #144	; 0x90
   25098:	18ba      	adds	r2, r7, r2
   2509a:	6812      	ldr	r2, [r2, #0]
   2509c:	18d3      	adds	r3, r2, r3
   2509e:	781b      	ldrb	r3, [r3, #0]
   250a0:	2b66      	cmp	r3, #102	; 0x66
   250a2:	d912      	bls.n	250ca <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   250a4:	4aad      	ldr	r2, [pc, #692]	; (2535c <m2m_wifi_connect_sc+0x3b8>)
   250a6:	49a7      	ldr	r1, [pc, #668]	; (25344 <m2m_wifi_connect_sc+0x3a0>)
   250a8:	4ba7      	ldr	r3, [pc, #668]	; (25348 <m2m_wifi_connect_sc+0x3a4>)
   250aa:	0018      	movs	r0, r3
   250ac:	4ba7      	ldr	r3, [pc, #668]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   250ae:	4798      	blx	r3
   250b0:	4bab      	ldr	r3, [pc, #684]	; (25360 <m2m_wifi_connect_sc+0x3bc>)
   250b2:	0018      	movs	r0, r3
   250b4:	4ba5      	ldr	r3, [pc, #660]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   250b6:	4798      	blx	r3
   250b8:	4ba6      	ldr	r3, [pc, #664]	; (25354 <m2m_wifi_connect_sc+0x3b0>)
   250ba:	0018      	movs	r0, r3
   250bc:	4ba3      	ldr	r3, [pc, #652]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   250be:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   250c0:	2397      	movs	r3, #151	; 0x97
   250c2:	18fb      	adds	r3, r7, r3
   250c4:	22f4      	movs	r2, #244	; 0xf4
   250c6:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   250c8:	e195      	b.n	253f6 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   250ca:	2396      	movs	r3, #150	; 0x96
   250cc:	18fb      	adds	r3, r7, r3
   250ce:	781a      	ldrb	r2, [r3, #0]
   250d0:	2396      	movs	r3, #150	; 0x96
   250d2:	18fb      	adds	r3, r7, r3
   250d4:	3201      	adds	r2, #1
   250d6:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   250d8:	2396      	movs	r3, #150	; 0x96
   250da:	18fb      	adds	r3, r7, r3
   250dc:	781b      	ldrb	r3, [r3, #0]
   250de:	2b3f      	cmp	r3, #63	; 0x3f
   250e0:	d9a4      	bls.n	2502c <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   250e2:	230b      	movs	r3, #11
   250e4:	18fb      	adds	r3, r7, r3
   250e6:	781b      	ldrb	r3, [r3, #0]
   250e8:	2b00      	cmp	r3, #0
   250ea:	d004      	beq.n	250f6 <m2m_wifi_connect_sc+0x152>
   250ec:	230b      	movs	r3, #11
   250ee:	18fb      	adds	r3, r7, r3
   250f0:	781b      	ldrb	r3, [r3, #0]
   250f2:	2b20      	cmp	r3, #32
   250f4:	d913      	bls.n	2511e <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   250f6:	238c      	movs	r3, #140	; 0x8c
   250f8:	009a      	lsls	r2, r3, #2
   250fa:	4992      	ldr	r1, [pc, #584]	; (25344 <m2m_wifi_connect_sc+0x3a0>)
   250fc:	4b92      	ldr	r3, [pc, #584]	; (25348 <m2m_wifi_connect_sc+0x3a4>)
   250fe:	0018      	movs	r0, r3
   25100:	4b92      	ldr	r3, [pc, #584]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25102:	4798      	blx	r3
   25104:	4b97      	ldr	r3, [pc, #604]	; (25364 <m2m_wifi_connect_sc+0x3c0>)
   25106:	0018      	movs	r0, r3
   25108:	4b90      	ldr	r3, [pc, #576]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   2510a:	4798      	blx	r3
   2510c:	4b91      	ldr	r3, [pc, #580]	; (25354 <m2m_wifi_connect_sc+0x3b0>)
   2510e:	0018      	movs	r0, r3
   25110:	4b8e      	ldr	r3, [pc, #568]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25112:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   25114:	2397      	movs	r3, #151	; 0x97
   25116:	18fb      	adds	r3, r7, r3
   25118:	22f4      	movs	r2, #244	; 0xf4
   2511a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2511c:	e16b      	b.n	253f6 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   2511e:	23a8      	movs	r3, #168	; 0xa8
   25120:	18fb      	adds	r3, r7, r3
   25122:	881b      	ldrh	r3, [r3, #0]
   25124:	2b00      	cmp	r3, #0
   25126:	d004      	beq.n	25132 <m2m_wifi_connect_sc+0x18e>
   25128:	23a8      	movs	r3, #168	; 0xa8
   2512a:	18fb      	adds	r3, r7, r3
   2512c:	881b      	ldrh	r3, [r3, #0]
   2512e:	2b0e      	cmp	r3, #14
   25130:	d917      	bls.n	25162 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   25132:	23a8      	movs	r3, #168	; 0xa8
   25134:	18fb      	adds	r3, r7, r3
   25136:	881b      	ldrh	r3, [r3, #0]
   25138:	2bff      	cmp	r3, #255	; 0xff
   2513a:	d012      	beq.n	25162 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   2513c:	4a8a      	ldr	r2, [pc, #552]	; (25368 <m2m_wifi_connect_sc+0x3c4>)
   2513e:	4981      	ldr	r1, [pc, #516]	; (25344 <m2m_wifi_connect_sc+0x3a0>)
   25140:	4b81      	ldr	r3, [pc, #516]	; (25348 <m2m_wifi_connect_sc+0x3a4>)
   25142:	0018      	movs	r0, r3
   25144:	4b81      	ldr	r3, [pc, #516]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25146:	4798      	blx	r3
   25148:	4b88      	ldr	r3, [pc, #544]	; (2536c <m2m_wifi_connect_sc+0x3c8>)
   2514a:	0018      	movs	r0, r3
   2514c:	4b7f      	ldr	r3, [pc, #508]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   2514e:	4798      	blx	r3
   25150:	4b80      	ldr	r3, [pc, #512]	; (25354 <m2m_wifi_connect_sc+0x3b0>)
   25152:	0018      	movs	r0, r3
   25154:	4b7d      	ldr	r3, [pc, #500]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25156:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   25158:	2397      	movs	r3, #151	; 0x97
   2515a:	18fb      	adds	r3, r7, r3
   2515c:	22f4      	movs	r2, #244	; 0xf4
   2515e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   25160:	e149      	b.n	253f6 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   25162:	230b      	movs	r3, #11
   25164:	18fb      	adds	r3, r7, r3
   25166:	781a      	ldrb	r2, [r3, #0]
   25168:	68f9      	ldr	r1, [r7, #12]
   2516a:	2314      	movs	r3, #20
   2516c:	18fb      	adds	r3, r7, r3
   2516e:	3346      	adds	r3, #70	; 0x46
   25170:	0018      	movs	r0, r3
   25172:	4b7f      	ldr	r3, [pc, #508]	; (25370 <m2m_wifi_connect_sc+0x3cc>)
   25174:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   25176:	230b      	movs	r3, #11
   25178:	18fb      	adds	r3, r7, r3
   2517a:	781b      	ldrb	r3, [r3, #0]
   2517c:	2214      	movs	r2, #20
   2517e:	18ba      	adds	r2, r7, r2
   25180:	2146      	movs	r1, #70	; 0x46
   25182:	18d3      	adds	r3, r2, r3
   25184:	185b      	adds	r3, r3, r1
   25186:	2200      	movs	r2, #0
   25188:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   2518a:	2314      	movs	r3, #20
   2518c:	18fb      	adds	r3, r7, r3
   2518e:	22a8      	movs	r2, #168	; 0xa8
   25190:	18ba      	adds	r2, r7, r2
   25192:	2144      	movs	r1, #68	; 0x44
   25194:	8812      	ldrh	r2, [r2, #0]
   25196:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   25198:	23ac      	movs	r3, #172	; 0xac
   2519a:	18fb      	adds	r3, r7, r3
   2519c:	781b      	ldrb	r3, [r3, #0]
   2519e:	1e5a      	subs	r2, r3, #1
   251a0:	4193      	sbcs	r3, r2
   251a2:	b2db      	uxtb	r3, r3
   251a4:	0019      	movs	r1, r3
   251a6:	2314      	movs	r3, #20
   251a8:	18fb      	adds	r3, r7, r3
   251aa:	2267      	movs	r2, #103	; 0x67
   251ac:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   251ae:	2314      	movs	r3, #20
   251b0:	18fb      	adds	r3, r7, r3
   251b2:	228c      	movs	r2, #140	; 0x8c
   251b4:	18ba      	adds	r2, r7, r2
   251b6:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   251b8:	238c      	movs	r3, #140	; 0x8c
   251ba:	18fb      	adds	r3, r7, r3
   251bc:	681b      	ldr	r3, [r3, #0]
   251be:	220a      	movs	r2, #10
   251c0:	18ba      	adds	r2, r7, r2
   251c2:	2141      	movs	r1, #65	; 0x41
   251c4:	7812      	ldrb	r2, [r2, #0]
   251c6:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   251c8:	230a      	movs	r3, #10
   251ca:	18fb      	adds	r3, r7, r3
   251cc:	781b      	ldrb	r3, [r3, #0]
   251ce:	2b03      	cmp	r3, #3
   251d0:	d000      	beq.n	251d4 <m2m_wifi_connect_sc+0x230>
   251d2:	e07d      	b.n	252d0 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   251d4:	687b      	ldr	r3, [r7, #4]
   251d6:	2288      	movs	r2, #136	; 0x88
   251d8:	18ba      	adds	r2, r7, r2
   251da:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   251dc:	238c      	movs	r3, #140	; 0x8c
   251de:	18fb      	adds	r3, r7, r3
   251e0:	681b      	ldr	r3, [r3, #0]
   251e2:	2284      	movs	r2, #132	; 0x84
   251e4:	18ba      	adds	r2, r7, r2
   251e6:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   251e8:	2388      	movs	r3, #136	; 0x88
   251ea:	18fb      	adds	r3, r7, r3
   251ec:	681b      	ldr	r3, [r3, #0]
   251ee:	781b      	ldrb	r3, [r3, #0]
   251f0:	3b01      	subs	r3, #1
   251f2:	b2da      	uxtb	r2, r3
   251f4:	2384      	movs	r3, #132	; 0x84
   251f6:	18fb      	adds	r3, r7, r3
   251f8:	681b      	ldr	r3, [r3, #0]
   251fa:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   251fc:	2384      	movs	r3, #132	; 0x84
   251fe:	18fb      	adds	r3, r7, r3
   25200:	681b      	ldr	r3, [r3, #0]
   25202:	781b      	ldrb	r3, [r3, #0]
   25204:	2b03      	cmp	r3, #3
   25206:	d919      	bls.n	2523c <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   25208:	2394      	movs	r3, #148	; 0x94
   2520a:	009a      	lsls	r2, r3, #2
   2520c:	494d      	ldr	r1, [pc, #308]	; (25344 <m2m_wifi_connect_sc+0x3a0>)
   2520e:	4b4e      	ldr	r3, [pc, #312]	; (25348 <m2m_wifi_connect_sc+0x3a4>)
   25210:	0018      	movs	r0, r3
   25212:	4b4e      	ldr	r3, [pc, #312]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25214:	4798      	blx	r3
   25216:	2384      	movs	r3, #132	; 0x84
   25218:	18fb      	adds	r3, r7, r3
   2521a:	681b      	ldr	r3, [r3, #0]
   2521c:	781b      	ldrb	r3, [r3, #0]
   2521e:	001a      	movs	r2, r3
   25220:	4b54      	ldr	r3, [pc, #336]	; (25374 <m2m_wifi_connect_sc+0x3d0>)
   25222:	0011      	movs	r1, r2
   25224:	0018      	movs	r0, r3
   25226:	4b49      	ldr	r3, [pc, #292]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25228:	4798      	blx	r3
   2522a:	4b4a      	ldr	r3, [pc, #296]	; (25354 <m2m_wifi_connect_sc+0x3b0>)
   2522c:	0018      	movs	r0, r3
   2522e:	4b47      	ldr	r3, [pc, #284]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25230:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   25232:	2397      	movs	r3, #151	; 0x97
   25234:	18fb      	adds	r3, r7, r3
   25236:	22f4      	movs	r2, #244	; 0xf4
   25238:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2523a:	e0dc      	b.n	253f6 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   2523c:	2388      	movs	r3, #136	; 0x88
   2523e:	18fb      	adds	r3, r7, r3
   25240:	681b      	ldr	r3, [r3, #0]
   25242:	785b      	ldrb	r3, [r3, #1]
   25244:	3b01      	subs	r3, #1
   25246:	b2da      	uxtb	r2, r3
   25248:	2384      	movs	r3, #132	; 0x84
   2524a:	18fb      	adds	r3, r7, r3
   2524c:	681b      	ldr	r3, [r3, #0]
   2524e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   25250:	2384      	movs	r3, #132	; 0x84
   25252:	18fb      	adds	r3, r7, r3
   25254:	681b      	ldr	r3, [r3, #0]
   25256:	785b      	ldrb	r3, [r3, #1]
   25258:	2b0a      	cmp	r3, #10
   2525a:	d01e      	beq.n	2529a <m2m_wifi_connect_sc+0x2f6>
   2525c:	2384      	movs	r3, #132	; 0x84
   2525e:	18fb      	adds	r3, r7, r3
   25260:	681b      	ldr	r3, [r3, #0]
   25262:	785b      	ldrb	r3, [r3, #1]
   25264:	2b1a      	cmp	r3, #26
   25266:	d018      	beq.n	2529a <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   25268:	4a43      	ldr	r2, [pc, #268]	; (25378 <m2m_wifi_connect_sc+0x3d4>)
   2526a:	4936      	ldr	r1, [pc, #216]	; (25344 <m2m_wifi_connect_sc+0x3a0>)
   2526c:	4b36      	ldr	r3, [pc, #216]	; (25348 <m2m_wifi_connect_sc+0x3a4>)
   2526e:	0018      	movs	r0, r3
   25270:	4b36      	ldr	r3, [pc, #216]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25272:	4798      	blx	r3
   25274:	2384      	movs	r3, #132	; 0x84
   25276:	18fb      	adds	r3, r7, r3
   25278:	681b      	ldr	r3, [r3, #0]
   2527a:	785b      	ldrb	r3, [r3, #1]
   2527c:	001a      	movs	r2, r3
   2527e:	4b3f      	ldr	r3, [pc, #252]	; (2537c <m2m_wifi_connect_sc+0x3d8>)
   25280:	0011      	movs	r1, r2
   25282:	0018      	movs	r0, r3
   25284:	4b31      	ldr	r3, [pc, #196]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25286:	4798      	blx	r3
   25288:	4b32      	ldr	r3, [pc, #200]	; (25354 <m2m_wifi_connect_sc+0x3b0>)
   2528a:	0018      	movs	r0, r3
   2528c:	4b2f      	ldr	r3, [pc, #188]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   2528e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   25290:	2397      	movs	r3, #151	; 0x97
   25292:	18fb      	adds	r3, r7, r3
   25294:	22f4      	movs	r2, #244	; 0xf4
   25296:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   25298:	e0ad      	b.n	253f6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   2529a:	2384      	movs	r3, #132	; 0x84
   2529c:	18fb      	adds	r3, r7, r3
   2529e:	681b      	ldr	r3, [r3, #0]
   252a0:	1c98      	adds	r0, r3, #2
   252a2:	2388      	movs	r3, #136	; 0x88
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	681b      	ldr	r3, [r3, #0]
   252a8:	1c99      	adds	r1, r3, #2
   252aa:	2388      	movs	r3, #136	; 0x88
   252ac:	18fb      	adds	r3, r7, r3
   252ae:	681b      	ldr	r3, [r3, #0]
   252b0:	785b      	ldrb	r3, [r3, #1]
   252b2:	001a      	movs	r2, r3
   252b4:	4b2e      	ldr	r3, [pc, #184]	; (25370 <m2m_wifi_connect_sc+0x3cc>)
   252b6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   252b8:	2388      	movs	r3, #136	; 0x88
   252ba:	18fb      	adds	r3, r7, r3
   252bc:	681b      	ldr	r3, [r3, #0]
   252be:	785b      	ldrb	r3, [r3, #1]
   252c0:	001a      	movs	r2, r3
   252c2:	2384      	movs	r3, #132	; 0x84
   252c4:	18fb      	adds	r3, r7, r3
   252c6:	681b      	ldr	r3, [r3, #0]
   252c8:	189b      	adds	r3, r3, r2
   252ca:	2200      	movs	r2, #0
   252cc:	709a      	strb	r2, [r3, #2]
   252ce:	e081      	b.n	253d4 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   252d0:	230a      	movs	r3, #10
   252d2:	18fb      	adds	r3, r7, r3
   252d4:	781b      	ldrb	r3, [r3, #0]
   252d6:	2b02      	cmp	r3, #2
   252d8:	d156      	bne.n	25388 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   252da:	2382      	movs	r3, #130	; 0x82
   252dc:	18fc      	adds	r4, r7, r3
   252de:	687b      	ldr	r3, [r7, #4]
   252e0:	0018      	movs	r0, r3
   252e2:	4b1d      	ldr	r3, [pc, #116]	; (25358 <m2m_wifi_connect_sc+0x3b4>)
   252e4:	4798      	blx	r3
   252e6:	0003      	movs	r3, r0
   252e8:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   252ea:	2382      	movs	r3, #130	; 0x82
   252ec:	18fb      	adds	r3, r7, r3
   252ee:	881b      	ldrh	r3, [r3, #0]
   252f0:	2b00      	cmp	r3, #0
   252f2:	d004      	beq.n	252fe <m2m_wifi_connect_sc+0x35a>
   252f4:	2382      	movs	r3, #130	; 0x82
   252f6:	18fb      	adds	r3, r7, r3
   252f8:	881b      	ldrh	r3, [r3, #0]
   252fa:	2b40      	cmp	r3, #64	; 0x40
   252fc:	d912      	bls.n	25324 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   252fe:	4a20      	ldr	r2, [pc, #128]	; (25380 <m2m_wifi_connect_sc+0x3dc>)
   25300:	4910      	ldr	r1, [pc, #64]	; (25344 <m2m_wifi_connect_sc+0x3a0>)
   25302:	4b11      	ldr	r3, [pc, #68]	; (25348 <m2m_wifi_connect_sc+0x3a4>)
   25304:	0018      	movs	r0, r3
   25306:	4b11      	ldr	r3, [pc, #68]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25308:	4798      	blx	r3
   2530a:	4b1e      	ldr	r3, [pc, #120]	; (25384 <m2m_wifi_connect_sc+0x3e0>)
   2530c:	0018      	movs	r0, r3
   2530e:	4b0f      	ldr	r3, [pc, #60]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25310:	4798      	blx	r3
   25312:	4b10      	ldr	r3, [pc, #64]	; (25354 <m2m_wifi_connect_sc+0x3b0>)
   25314:	0018      	movs	r0, r3
   25316:	4b0d      	ldr	r3, [pc, #52]	; (2534c <m2m_wifi_connect_sc+0x3a8>)
   25318:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2531a:	2397      	movs	r3, #151	; 0x97
   2531c:	18fb      	adds	r3, r7, r3
   2531e:	22f4      	movs	r2, #244	; 0xf4
   25320:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   25322:	e068      	b.n	253f6 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   25324:	238c      	movs	r3, #140	; 0x8c
   25326:	18fb      	adds	r3, r7, r3
   25328:	6818      	ldr	r0, [r3, #0]
   2532a:	2382      	movs	r3, #130	; 0x82
   2532c:	18fb      	adds	r3, r7, r3
   2532e:	881b      	ldrh	r3, [r3, #0]
   25330:	3301      	adds	r3, #1
   25332:	001a      	movs	r2, r3
   25334:	687b      	ldr	r3, [r7, #4]
   25336:	0019      	movs	r1, r3
   25338:	4b0d      	ldr	r3, [pc, #52]	; (25370 <m2m_wifi_connect_sc+0x3cc>)
   2533a:	4798      	blx	r3
   2533c:	e04a      	b.n	253d4 <m2m_wifi_connect_sc+0x430>
   2533e:	46c0      	nop			; (mov r8, r8)
   25340:	0000021a 	.word	0x0000021a
   25344:	0003d0a4 	.word	0x0003d0a4
   25348:	0003ccec 	.word	0x0003ccec
   2534c:	00020e3d 	.word	0x00020e3d
   25350:	0003cf2c 	.word	0x0003cf2c
   25354:	0003cce8 	.word	0x0003cce8
   25358:	00023c13 	.word	0x00023c13
   2535c:	00000226 	.word	0x00000226
   25360:	0003cf40 	.word	0x0003cf40
   25364:	0003cf50 	.word	0x0003cf50
   25368:	00000239 	.word	0x00000239
   2536c:	0003cf64 	.word	0x0003cf64
   25370:	00023b99 	.word	0x00023b99
   25374:	0003cf70 	.word	0x0003cf70
   25378:	00000257 	.word	0x00000257
   2537c:	0003cf8c 	.word	0x0003cf8c
   25380:	00000266 	.word	0x00000266
   25384:	0003cfa8 	.word	0x0003cfa8
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   25388:	230a      	movs	r3, #10
   2538a:	18fb      	adds	r3, r7, r3
   2538c:	781b      	ldrb	r3, [r3, #0]
   2538e:	2b04      	cmp	r3, #4
   25390:	d108      	bne.n	253a4 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   25392:	238c      	movs	r3, #140	; 0x8c
   25394:	18fb      	adds	r3, r7, r3
   25396:	681b      	ldr	r3, [r3, #0]
   25398:	6879      	ldr	r1, [r7, #4]
   2539a:	223e      	movs	r2, #62	; 0x3e
   2539c:	0018      	movs	r0, r3
   2539e:	4b1a      	ldr	r3, [pc, #104]	; (25408 <m2m_wifi_connect_sc+0x464>)
   253a0:	4798      	blx	r3
   253a2:	e017      	b.n	253d4 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   253a4:	230a      	movs	r3, #10
   253a6:	18fb      	adds	r3, r7, r3
   253a8:	781b      	ldrb	r3, [r3, #0]
   253aa:	2b01      	cmp	r3, #1
   253ac:	d012      	beq.n	253d4 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   253ae:	4a17      	ldr	r2, [pc, #92]	; (2540c <m2m_wifi_connect_sc+0x468>)
   253b0:	4917      	ldr	r1, [pc, #92]	; (25410 <m2m_wifi_connect_sc+0x46c>)
   253b2:	4b18      	ldr	r3, [pc, #96]	; (25414 <m2m_wifi_connect_sc+0x470>)
   253b4:	0018      	movs	r0, r3
   253b6:	4b18      	ldr	r3, [pc, #96]	; (25418 <m2m_wifi_connect_sc+0x474>)
   253b8:	4798      	blx	r3
   253ba:	4b18      	ldr	r3, [pc, #96]	; (2541c <m2m_wifi_connect_sc+0x478>)
   253bc:	0018      	movs	r0, r3
   253be:	4b16      	ldr	r3, [pc, #88]	; (25418 <m2m_wifi_connect_sc+0x474>)
   253c0:	4798      	blx	r3
   253c2:	4b17      	ldr	r3, [pc, #92]	; (25420 <m2m_wifi_connect_sc+0x47c>)
   253c4:	0018      	movs	r0, r3
   253c6:	4b14      	ldr	r3, [pc, #80]	; (25418 <m2m_wifi_connect_sc+0x474>)
   253c8:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   253ca:	2397      	movs	r3, #151	; 0x97
   253cc:	18fb      	adds	r3, r7, r3
   253ce:	22f4      	movs	r2, #244	; 0xf4
   253d0:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   253d2:	e010      	b.n	253f6 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   253d4:	2397      	movs	r3, #151	; 0x97
   253d6:	18fc      	adds	r4, r7, r3
   253d8:	2314      	movs	r3, #20
   253da:	18fa      	adds	r2, r7, r3
   253dc:	2300      	movs	r3, #0
   253de:	9302      	str	r3, [sp, #8]
   253e0:	2300      	movs	r3, #0
   253e2:	9301      	str	r3, [sp, #4]
   253e4:	2300      	movs	r3, #0
   253e6:	9300      	str	r3, [sp, #0]
   253e8:	236c      	movs	r3, #108	; 0x6c
   253ea:	2128      	movs	r1, #40	; 0x28
   253ec:	2001      	movs	r0, #1
   253ee:	4d0d      	ldr	r5, [pc, #52]	; (25424 <m2m_wifi_connect_sc+0x480>)
   253f0:	47a8      	blx	r5
   253f2:	0003      	movs	r3, r0
   253f4:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   253f6:	2397      	movs	r3, #151	; 0x97
   253f8:	18fb      	adds	r3, r7, r3
   253fa:	781b      	ldrb	r3, [r3, #0]
   253fc:	b25b      	sxtb	r3, r3
}
   253fe:	0018      	movs	r0, r3
   25400:	46bd      	mov	sp, r7
   25402:	b026      	add	sp, #152	; 0x98
   25404:	bdb0      	pop	{r4, r5, r7, pc}
   25406:	46c0      	nop			; (mov r8, r8)
   25408:	00023b99 	.word	0x00023b99
   2540c:	00000276 	.word	0x00000276
   25410:	0003d0a4 	.word	0x0003d0a4
   25414:	0003ccec 	.word	0x0003ccec
   25418:	00020e3d 	.word	0x00020e3d
   2541c:	0003cfc4 	.word	0x0003cfc4
   25420:	0003cce8 	.word	0x0003cce8
   25424:	00023e35 	.word	0x00023e35

00025428 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   25428:	b580      	push	{r7, lr}
   2542a:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   2542c:	2300      	movs	r3, #0
}
   2542e:	0018      	movs	r0, r3
   25430:	46bd      	mov	sp, r7
   25432:	bd80      	pop	{r7, pc}

00025434 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   25434:	b590      	push	{r4, r7, lr}
   25436:	b087      	sub	sp, #28
   25438:	af00      	add	r7, sp, #0
   2543a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2543c:	2317      	movs	r3, #23
   2543e:	18fb      	adds	r3, r7, r3
   25440:	2200      	movs	r2, #0
   25442:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   25444:	687b      	ldr	r3, [r7, #4]
   25446:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   25448:	693b      	ldr	r3, [r7, #16]
   2544a:	2280      	movs	r2, #128	; 0x80
   2544c:	0052      	lsls	r2, r2, #1
   2544e:	4313      	orrs	r3, r2
   25450:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   25452:	693a      	ldr	r2, [r7, #16]
   25454:	23a5      	movs	r3, #165	; 0xa5
   25456:	015b      	lsls	r3, r3, #5
   25458:	0011      	movs	r1, r2
   2545a:	0018      	movs	r0, r3
   2545c:	4b12      	ldr	r3, [pc, #72]	; (254a8 <chip_apply_conf+0x74>)
   2545e:	4798      	blx	r3
		if(val32 != 0) {		
   25460:	693b      	ldr	r3, [r7, #16]
   25462:	2b00      	cmp	r3, #0
   25464:	d018      	beq.n	25498 <chip_apply_conf+0x64>
			uint32 reg = 0;
   25466:	2300      	movs	r3, #0
   25468:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   2546a:	2317      	movs	r3, #23
   2546c:	18fc      	adds	r4, r7, r3
   2546e:	230c      	movs	r3, #12
   25470:	18fa      	adds	r2, r7, r3
   25472:	23a5      	movs	r3, #165	; 0xa5
   25474:	015b      	lsls	r3, r3, #5
   25476:	0011      	movs	r1, r2
   25478:	0018      	movs	r0, r3
   2547a:	4b0c      	ldr	r3, [pc, #48]	; (254ac <chip_apply_conf+0x78>)
   2547c:	4798      	blx	r3
   2547e:	0003      	movs	r3, r0
   25480:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   25482:	2317      	movs	r3, #23
   25484:	18fb      	adds	r3, r7, r3
   25486:	781b      	ldrb	r3, [r3, #0]
   25488:	b25b      	sxtb	r3, r3
   2548a:	2b00      	cmp	r3, #0
   2548c:	d1e1      	bne.n	25452 <chip_apply_conf+0x1e>
				if(reg == val32)
   2548e:	68fa      	ldr	r2, [r7, #12]
   25490:	693b      	ldr	r3, [r7, #16]
   25492:	429a      	cmp	r2, r3
   25494:	d002      	beq.n	2549c <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   25496:	e7dc      	b.n	25452 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   25498:	46c0      	nop			; (mov r8, r8)
   2549a:	e000      	b.n	2549e <chip_apply_conf+0x6a>
					break;
   2549c:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2549e:	2300      	movs	r3, #0
}
   254a0:	0018      	movs	r0, r3
   254a2:	46bd      	mov	sp, r7
   254a4:	b007      	add	sp, #28
   254a6:	bd90      	pop	{r4, r7, pc}
   254a8:	00025c89 	.word	0x00025c89
   254ac:	00025c65 	.word	0x00025c65

000254b0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   254b0:	b590      	push	{r4, r7, lr}
   254b2:	b083      	sub	sp, #12
   254b4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   254b6:	2300      	movs	r3, #0
   254b8:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   254ba:	1dfb      	adds	r3, r7, #7
   254bc:	2200      	movs	r2, #0
   254be:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   254c0:	1dfc      	adds	r4, r7, #7
   254c2:	003b      	movs	r3, r7
   254c4:	4a24      	ldr	r2, [pc, #144]	; (25558 <enable_interrupts+0xa8>)
   254c6:	0019      	movs	r1, r3
   254c8:	0010      	movs	r0, r2
   254ca:	4b24      	ldr	r3, [pc, #144]	; (2555c <enable_interrupts+0xac>)
   254cc:	4798      	blx	r3
   254ce:	0003      	movs	r3, r0
   254d0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   254d2:	1dfb      	adds	r3, r7, #7
   254d4:	781b      	ldrb	r3, [r3, #0]
   254d6:	b25b      	sxtb	r3, r3
   254d8:	2b00      	cmp	r3, #0
   254da:	d131      	bne.n	25540 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   254dc:	683b      	ldr	r3, [r7, #0]
   254de:	2280      	movs	r2, #128	; 0x80
   254e0:	0052      	lsls	r2, r2, #1
   254e2:	4313      	orrs	r3, r2
   254e4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   254e6:	683b      	ldr	r3, [r7, #0]
   254e8:	1dfc      	adds	r4, r7, #7
   254ea:	4a1b      	ldr	r2, [pc, #108]	; (25558 <enable_interrupts+0xa8>)
   254ec:	0019      	movs	r1, r3
   254ee:	0010      	movs	r0, r2
   254f0:	4b1b      	ldr	r3, [pc, #108]	; (25560 <enable_interrupts+0xb0>)
   254f2:	4798      	blx	r3
   254f4:	0003      	movs	r3, r0
   254f6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   254f8:	1dfb      	adds	r3, r7, #7
   254fa:	781b      	ldrb	r3, [r3, #0]
   254fc:	b25b      	sxtb	r3, r3
   254fe:	2b00      	cmp	r3, #0
   25500:	d120      	bne.n	25544 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   25502:	1dfc      	adds	r4, r7, #7
   25504:	003a      	movs	r2, r7
   25506:	23d0      	movs	r3, #208	; 0xd0
   25508:	015b      	lsls	r3, r3, #5
   2550a:	0011      	movs	r1, r2
   2550c:	0018      	movs	r0, r3
   2550e:	4b13      	ldr	r3, [pc, #76]	; (2555c <enable_interrupts+0xac>)
   25510:	4798      	blx	r3
   25512:	0003      	movs	r3, r0
   25514:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   25516:	1dfb      	adds	r3, r7, #7
   25518:	781b      	ldrb	r3, [r3, #0]
   2551a:	b25b      	sxtb	r3, r3
   2551c:	2b00      	cmp	r3, #0
   2551e:	d113      	bne.n	25548 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   25520:	683b      	ldr	r3, [r7, #0]
   25522:	2280      	movs	r2, #128	; 0x80
   25524:	0252      	lsls	r2, r2, #9
   25526:	4313      	orrs	r3, r2
   25528:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2552a:	683a      	ldr	r2, [r7, #0]
   2552c:	1dfc      	adds	r4, r7, #7
   2552e:	23d0      	movs	r3, #208	; 0xd0
   25530:	015b      	lsls	r3, r3, #5
   25532:	0011      	movs	r1, r2
   25534:	0018      	movs	r0, r3
   25536:	4b0a      	ldr	r3, [pc, #40]	; (25560 <enable_interrupts+0xb0>)
   25538:	4798      	blx	r3
   2553a:	0003      	movs	r3, r0
   2553c:	7023      	strb	r3, [r4, #0]
   2553e:	e004      	b.n	2554a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   25540:	46c0      	nop			; (mov r8, r8)
   25542:	e002      	b.n	2554a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   25544:	46c0      	nop			; (mov r8, r8)
   25546:	e000      	b.n	2554a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   25548:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2554a:	1dfb      	adds	r3, r7, #7
   2554c:	781b      	ldrb	r3, [r3, #0]
   2554e:	b25b      	sxtb	r3, r3
}
   25550:	0018      	movs	r0, r3
   25552:	46bd      	mov	sp, r7
   25554:	b003      	add	sp, #12
   25556:	bd90      	pop	{r4, r7, pc}
   25558:	00001408 	.word	0x00001408
   2555c:	00025c65 	.word	0x00025c65
   25560:	00025c89 	.word	0x00025c89

00025564 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   25564:	b580      	push	{r7, lr}
   25566:	b082      	sub	sp, #8
   25568:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   2556a:	4b32      	ldr	r3, [pc, #200]	; (25634 <nmi_get_chipid+0xd0>)
   2556c:	681b      	ldr	r3, [r3, #0]
   2556e:	2b00      	cmp	r3, #0
   25570:	d159      	bne.n	25626 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   25572:	4a30      	ldr	r2, [pc, #192]	; (25634 <nmi_get_chipid+0xd0>)
   25574:	2380      	movs	r3, #128	; 0x80
   25576:	015b      	lsls	r3, r3, #5
   25578:	0011      	movs	r1, r2
   2557a:	0018      	movs	r0, r3
   2557c:	4b2e      	ldr	r3, [pc, #184]	; (25638 <nmi_get_chipid+0xd4>)
   2557e:	4798      	blx	r3
   25580:	1e03      	subs	r3, r0, #0
   25582:	d004      	beq.n	2558e <nmi_get_chipid+0x2a>
			chipid = 0;
   25584:	4b2b      	ldr	r3, [pc, #172]	; (25634 <nmi_get_chipid+0xd0>)
   25586:	2200      	movs	r2, #0
   25588:	601a      	str	r2, [r3, #0]
			return 0;
   2558a:	2300      	movs	r3, #0
   2558c:	e04d      	b.n	2562a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2558e:	1d3b      	adds	r3, r7, #4
   25590:	4a2a      	ldr	r2, [pc, #168]	; (2563c <nmi_get_chipid+0xd8>)
   25592:	0019      	movs	r1, r3
   25594:	0010      	movs	r0, r2
   25596:	4b28      	ldr	r3, [pc, #160]	; (25638 <nmi_get_chipid+0xd4>)
   25598:	4798      	blx	r3
   2559a:	1e03      	subs	r3, r0, #0
   2559c:	d004      	beq.n	255a8 <nmi_get_chipid+0x44>
			chipid = 0;
   2559e:	4b25      	ldr	r3, [pc, #148]	; (25634 <nmi_get_chipid+0xd0>)
   255a0:	2200      	movs	r2, #0
   255a2:	601a      	str	r2, [r3, #0]
			return 0;
   255a4:	2300      	movs	r3, #0
   255a6:	e040      	b.n	2562a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   255a8:	4b22      	ldr	r3, [pc, #136]	; (25634 <nmi_get_chipid+0xd0>)
   255aa:	681b      	ldr	r3, [r3, #0]
   255ac:	4a24      	ldr	r2, [pc, #144]	; (25640 <nmi_get_chipid+0xdc>)
   255ae:	4293      	cmp	r3, r2
   255b0:	d106      	bne.n	255c0 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   255b2:	687b      	ldr	r3, [r7, #4]
   255b4:	2b01      	cmp	r3, #1
   255b6:	d029      	beq.n	2560c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   255b8:	4b1e      	ldr	r3, [pc, #120]	; (25634 <nmi_get_chipid+0xd0>)
   255ba:	4a22      	ldr	r2, [pc, #136]	; (25644 <nmi_get_chipid+0xe0>)
   255bc:	601a      	str	r2, [r3, #0]
   255be:	e025      	b.n	2560c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   255c0:	4b1c      	ldr	r3, [pc, #112]	; (25634 <nmi_get_chipid+0xd0>)
   255c2:	681b      	ldr	r3, [r3, #0]
   255c4:	4a20      	ldr	r2, [pc, #128]	; (25648 <nmi_get_chipid+0xe4>)
   255c6:	4293      	cmp	r3, r2
   255c8:	d10d      	bne.n	255e6 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   255ca:	687b      	ldr	r3, [r7, #4]
   255cc:	2b03      	cmp	r3, #3
   255ce:	d01d      	beq.n	2560c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   255d0:	687b      	ldr	r3, [r7, #4]
   255d2:	2b04      	cmp	r3, #4
   255d4:	d103      	bne.n	255de <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   255d6:	4b17      	ldr	r3, [pc, #92]	; (25634 <nmi_get_chipid+0xd0>)
   255d8:	4a1c      	ldr	r2, [pc, #112]	; (2564c <nmi_get_chipid+0xe8>)
   255da:	601a      	str	r2, [r3, #0]
   255dc:	e016      	b.n	2560c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   255de:	4b15      	ldr	r3, [pc, #84]	; (25634 <nmi_get_chipid+0xd0>)
   255e0:	4a1b      	ldr	r2, [pc, #108]	; (25650 <nmi_get_chipid+0xec>)
   255e2:	601a      	str	r2, [r3, #0]
   255e4:	e012      	b.n	2560c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   255e6:	4b13      	ldr	r3, [pc, #76]	; (25634 <nmi_get_chipid+0xd0>)
   255e8:	681b      	ldr	r3, [r3, #0]
   255ea:	4a1a      	ldr	r2, [pc, #104]	; (25654 <nmi_get_chipid+0xf0>)
   255ec:	4293      	cmp	r3, r2
   255ee:	d10d      	bne.n	2560c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   255f0:	4a10      	ldr	r2, [pc, #64]	; (25634 <nmi_get_chipid+0xd0>)
   255f2:	23ec      	movs	r3, #236	; 0xec
   255f4:	039b      	lsls	r3, r3, #14
   255f6:	0011      	movs	r1, r2
   255f8:	0018      	movs	r0, r3
   255fa:	4b0f      	ldr	r3, [pc, #60]	; (25638 <nmi_get_chipid+0xd4>)
   255fc:	4798      	blx	r3
   255fe:	1e03      	subs	r3, r0, #0
   25600:	d004      	beq.n	2560c <nmi_get_chipid+0xa8>
			chipid = 0;
   25602:	4b0c      	ldr	r3, [pc, #48]	; (25634 <nmi_get_chipid+0xd0>)
   25604:	2200      	movs	r2, #0
   25606:	601a      	str	r2, [r3, #0]
			return 0;
   25608:	2300      	movs	r3, #0
   2560a:	e00e      	b.n	2562a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   2560c:	4b09      	ldr	r3, [pc, #36]	; (25634 <nmi_get_chipid+0xd0>)
   2560e:	681b      	ldr	r3, [r3, #0]
   25610:	4a11      	ldr	r2, [pc, #68]	; (25658 <nmi_get_chipid+0xf4>)
   25612:	401a      	ands	r2, r3
   25614:	4b07      	ldr	r3, [pc, #28]	; (25634 <nmi_get_chipid+0xd0>)
   25616:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   25618:	4b06      	ldr	r3, [pc, #24]	; (25634 <nmi_get_chipid+0xd0>)
   2561a:	681b      	ldr	r3, [r3, #0]
   2561c:	22a0      	movs	r2, #160	; 0xa0
   2561e:	02d2      	lsls	r2, r2, #11
   25620:	431a      	orrs	r2, r3
   25622:	4b04      	ldr	r3, [pc, #16]	; (25634 <nmi_get_chipid+0xd0>)
   25624:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   25626:	4b03      	ldr	r3, [pc, #12]	; (25634 <nmi_get_chipid+0xd0>)
   25628:	681b      	ldr	r3, [r3, #0]
}
   2562a:	0018      	movs	r0, r3
   2562c:	46bd      	mov	sp, r7
   2562e:	b002      	add	sp, #8
   25630:	bd80      	pop	{r7, pc}
   25632:	46c0      	nop			; (mov r8, r8)
   25634:	200041cc 	.word	0x200041cc
   25638:	00025c65 	.word	0x00025c65
   2563c:	000013f4 	.word	0x000013f4
   25640:	001002a0 	.word	0x001002a0
   25644:	001002a1 	.word	0x001002a1
   25648:	001002b0 	.word	0x001002b0
   2564c:	001002b1 	.word	0x001002b1
   25650:	001002b2 	.word	0x001002b2
   25654:	001000f0 	.word	0x001000f0
   25658:	fff0ffff 	.word	0xfff0ffff

0002565c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   2565c:	b590      	push	{r4, r7, lr}
   2565e:	b083      	sub	sp, #12
   25660:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   25662:	1dfb      	adds	r3, r7, #7
   25664:	2200      	movs	r2, #0
   25666:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   25668:	1dfc      	adds	r4, r7, #7
   2566a:	003b      	movs	r3, r7
   2566c:	0019      	movs	r1, r3
   2566e:	2010      	movs	r0, #16
   25670:	4b2e      	ldr	r3, [pc, #184]	; (2572c <chip_sleep+0xd0>)
   25672:	4798      	blx	r3
   25674:	0003      	movs	r3, r0
   25676:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   25678:	1dfb      	adds	r3, r7, #7
   2567a:	781b      	ldrb	r3, [r3, #0]
   2567c:	b25b      	sxtb	r3, r3
   2567e:	2b00      	cmp	r3, #0
   25680:	d145      	bne.n	2570e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   25682:	683b      	ldr	r3, [r7, #0]
   25684:	2201      	movs	r2, #1
   25686:	4013      	ands	r3, r2
   25688:	d000      	beq.n	2568c <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   2568a:	e7ed      	b.n	25668 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   2568c:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2568e:	1dfc      	adds	r4, r7, #7
   25690:	003b      	movs	r3, r7
   25692:	0019      	movs	r1, r3
   25694:	2001      	movs	r0, #1
   25696:	4b25      	ldr	r3, [pc, #148]	; (2572c <chip_sleep+0xd0>)
   25698:	4798      	blx	r3
   2569a:	0003      	movs	r3, r0
   2569c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2569e:	1dfb      	adds	r3, r7, #7
   256a0:	781b      	ldrb	r3, [r3, #0]
   256a2:	b25b      	sxtb	r3, r3
   256a4:	2b00      	cmp	r3, #0
   256a6:	d134      	bne.n	25712 <chip_sleep+0xb6>
	if(reg & NBIT1)
   256a8:	683b      	ldr	r3, [r7, #0]
   256aa:	2202      	movs	r2, #2
   256ac:	4013      	ands	r3, r2
   256ae:	d010      	beq.n	256d2 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   256b0:	683b      	ldr	r3, [r7, #0]
   256b2:	2202      	movs	r2, #2
   256b4:	4393      	bics	r3, r2
   256b6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   256b8:	683b      	ldr	r3, [r7, #0]
   256ba:	1dfc      	adds	r4, r7, #7
   256bc:	0019      	movs	r1, r3
   256be:	2001      	movs	r0, #1
   256c0:	4b1b      	ldr	r3, [pc, #108]	; (25730 <chip_sleep+0xd4>)
   256c2:	4798      	blx	r3
   256c4:	0003      	movs	r3, r0
   256c6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   256c8:	1dfb      	adds	r3, r7, #7
   256ca:	781b      	ldrb	r3, [r3, #0]
   256cc:	b25b      	sxtb	r3, r3
   256ce:	2b00      	cmp	r3, #0
   256d0:	d121      	bne.n	25716 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   256d2:	1dfc      	adds	r4, r7, #7
   256d4:	003b      	movs	r3, r7
   256d6:	0019      	movs	r1, r3
   256d8:	200b      	movs	r0, #11
   256da:	4b14      	ldr	r3, [pc, #80]	; (2572c <chip_sleep+0xd0>)
   256dc:	4798      	blx	r3
   256de:	0003      	movs	r3, r0
   256e0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   256e2:	1dfb      	adds	r3, r7, #7
   256e4:	781b      	ldrb	r3, [r3, #0]
   256e6:	b25b      	sxtb	r3, r3
   256e8:	2b00      	cmp	r3, #0
   256ea:	d116      	bne.n	2571a <chip_sleep+0xbe>
	if(reg & NBIT0)
   256ec:	683b      	ldr	r3, [r7, #0]
   256ee:	2201      	movs	r2, #1
   256f0:	4013      	ands	r3, r2
   256f2:	d013      	beq.n	2571c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   256f4:	683b      	ldr	r3, [r7, #0]
   256f6:	2201      	movs	r2, #1
   256f8:	4393      	bics	r3, r2
   256fa:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   256fc:	683b      	ldr	r3, [r7, #0]
   256fe:	1dfc      	adds	r4, r7, #7
   25700:	0019      	movs	r1, r3
   25702:	200b      	movs	r0, #11
   25704:	4b0a      	ldr	r3, [pc, #40]	; (25730 <chip_sleep+0xd4>)
   25706:	4798      	blx	r3
   25708:	0003      	movs	r3, r0
   2570a:	7023      	strb	r3, [r4, #0]
   2570c:	e006      	b.n	2571c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2570e:	46c0      	nop			; (mov r8, r8)
   25710:	e004      	b.n	2571c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   25712:	46c0      	nop			; (mov r8, r8)
   25714:	e002      	b.n	2571c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   25716:	46c0      	nop			; (mov r8, r8)
   25718:	e000      	b.n	2571c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2571a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   2571c:	1dfb      	adds	r3, r7, #7
   2571e:	781b      	ldrb	r3, [r3, #0]
   25720:	b25b      	sxtb	r3, r3
}
   25722:	0018      	movs	r0, r3
   25724:	46bd      	mov	sp, r7
   25726:	b003      	add	sp, #12
   25728:	bd90      	pop	{r4, r7, pc}
   2572a:	46c0      	nop			; (mov r8, r8)
   2572c:	00025c65 	.word	0x00025c65
   25730:	00025c89 	.word	0x00025c89

00025734 <chip_wake>:
sint8 chip_wake(void)
{
   25734:	b590      	push	{r4, r7, lr}
   25736:	b085      	sub	sp, #20
   25738:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2573a:	230f      	movs	r3, #15
   2573c:	18fb      	adds	r3, r7, r3
   2573e:	2200      	movs	r2, #0
   25740:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   25742:	2300      	movs	r3, #0
   25744:	607b      	str	r3, [r7, #4]
   25746:	2300      	movs	r3, #0
   25748:	603b      	str	r3, [r7, #0]
   2574a:	2300      	movs	r3, #0
   2574c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2574e:	230f      	movs	r3, #15
   25750:	18fc      	adds	r4, r7, r3
   25752:	1d3b      	adds	r3, r7, #4
   25754:	0019      	movs	r1, r3
   25756:	200b      	movs	r0, #11
   25758:	4b4e      	ldr	r3, [pc, #312]	; (25894 <chip_wake+0x160>)
   2575a:	4798      	blx	r3
   2575c:	0003      	movs	r3, r0
   2575e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   25760:	230f      	movs	r3, #15
   25762:	18fb      	adds	r3, r7, r3
   25764:	781b      	ldrb	r3, [r3, #0]
   25766:	b25b      	sxtb	r3, r3
   25768:	2b00      	cmp	r3, #0
   2576a:	d000      	beq.n	2576e <chip_wake+0x3a>
   2576c:	e082      	b.n	25874 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2576e:	687b      	ldr	r3, [r7, #4]
   25770:	2201      	movs	r2, #1
   25772:	4013      	ands	r3, r2
   25774:	d111      	bne.n	2579a <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   25776:	687b      	ldr	r3, [r7, #4]
   25778:	2201      	movs	r2, #1
   2577a:	4313      	orrs	r3, r2
   2577c:	220f      	movs	r2, #15
   2577e:	18bc      	adds	r4, r7, r2
   25780:	0019      	movs	r1, r3
   25782:	200b      	movs	r0, #11
   25784:	4b44      	ldr	r3, [pc, #272]	; (25898 <chip_wake+0x164>)
   25786:	4798      	blx	r3
   25788:	0003      	movs	r3, r0
   2578a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2578c:	230f      	movs	r3, #15
   2578e:	18fb      	adds	r3, r7, r3
   25790:	781b      	ldrb	r3, [r3, #0]
   25792:	b25b      	sxtb	r3, r3
   25794:	2b00      	cmp	r3, #0
   25796:	d000      	beq.n	2579a <chip_wake+0x66>
   25798:	e06e      	b.n	25878 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2579a:	230f      	movs	r3, #15
   2579c:	18fc      	adds	r4, r7, r3
   2579e:	1d3b      	adds	r3, r7, #4
   257a0:	0019      	movs	r1, r3
   257a2:	2001      	movs	r0, #1
   257a4:	4b3b      	ldr	r3, [pc, #236]	; (25894 <chip_wake+0x160>)
   257a6:	4798      	blx	r3
   257a8:	0003      	movs	r3, r0
   257aa:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   257ac:	230f      	movs	r3, #15
   257ae:	18fb      	adds	r3, r7, r3
   257b0:	781b      	ldrb	r3, [r3, #0]
   257b2:	b25b      	sxtb	r3, r3
   257b4:	2b00      	cmp	r3, #0
   257b6:	d161      	bne.n	2587c <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   257b8:	687b      	ldr	r3, [r7, #4]
   257ba:	2202      	movs	r2, #2
   257bc:	4013      	ands	r3, r2
   257be:	d110      	bne.n	257e2 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   257c0:	687b      	ldr	r3, [r7, #4]
   257c2:	2202      	movs	r2, #2
   257c4:	4313      	orrs	r3, r2
   257c6:	220f      	movs	r2, #15
   257c8:	18bc      	adds	r4, r7, r2
   257ca:	0019      	movs	r1, r3
   257cc:	2001      	movs	r0, #1
   257ce:	4b32      	ldr	r3, [pc, #200]	; (25898 <chip_wake+0x164>)
   257d0:	4798      	blx	r3
   257d2:	0003      	movs	r3, r0
   257d4:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   257d6:	230f      	movs	r3, #15
   257d8:	18fb      	adds	r3, r7, r3
   257da:	781b      	ldrb	r3, [r3, #0]
   257dc:	b25b      	sxtb	r3, r3
   257de:	2b00      	cmp	r3, #0
   257e0:	d14e      	bne.n	25880 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   257e2:	230f      	movs	r3, #15
   257e4:	18fc      	adds	r4, r7, r3
   257e6:	003b      	movs	r3, r7
   257e8:	0019      	movs	r1, r3
   257ea:	200f      	movs	r0, #15
   257ec:	4b29      	ldr	r3, [pc, #164]	; (25894 <chip_wake+0x160>)
   257ee:	4798      	blx	r3
   257f0:	0003      	movs	r3, r0
   257f2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   257f4:	230f      	movs	r3, #15
   257f6:	18fb      	adds	r3, r7, r3
   257f8:	781b      	ldrb	r3, [r3, #0]
   257fa:	b25b      	sxtb	r3, r3
   257fc:	2b00      	cmp	r3, #0
   257fe:	d014      	beq.n	2582a <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   25800:	23a8      	movs	r3, #168	; 0xa8
   25802:	005a      	lsls	r2, r3, #1
   25804:	4925      	ldr	r1, [pc, #148]	; (2589c <chip_wake+0x168>)
   25806:	4b26      	ldr	r3, [pc, #152]	; (258a0 <chip_wake+0x16c>)
   25808:	0018      	movs	r0, r3
   2580a:	4b26      	ldr	r3, [pc, #152]	; (258a4 <chip_wake+0x170>)
   2580c:	4798      	blx	r3
   2580e:	230f      	movs	r3, #15
   25810:	18fb      	adds	r3, r7, r3
   25812:	2100      	movs	r1, #0
   25814:	5659      	ldrsb	r1, [r3, r1]
   25816:	683a      	ldr	r2, [r7, #0]
   25818:	4b23      	ldr	r3, [pc, #140]	; (258a8 <chip_wake+0x174>)
   2581a:	0018      	movs	r0, r3
   2581c:	4b21      	ldr	r3, [pc, #132]	; (258a4 <chip_wake+0x170>)
   2581e:	4798      	blx	r3
   25820:	4b22      	ldr	r3, [pc, #136]	; (258ac <chip_wake+0x178>)
   25822:	0018      	movs	r0, r3
   25824:	4b1f      	ldr	r3, [pc, #124]	; (258a4 <chip_wake+0x170>)
   25826:	4798      	blx	r3
			goto _WAKE_EXIT;
   25828:	e02b      	b.n	25882 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   2582a:	683b      	ldr	r3, [r7, #0]
   2582c:	2204      	movs	r2, #4
   2582e:	4013      	ands	r3, r2
   25830:	d11c      	bne.n	2586c <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   25832:	2002      	movs	r0, #2
   25834:	4b1e      	ldr	r3, [pc, #120]	; (258b0 <chip_wake+0x17c>)
   25836:	4798      	blx	r3
		trials++;
   25838:	68bb      	ldr	r3, [r7, #8]
   2583a:	3301      	adds	r3, #1
   2583c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2583e:	68bb      	ldr	r3, [r7, #8]
   25840:	2b04      	cmp	r3, #4
   25842:	d9ce      	bls.n	257e2 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   25844:	23ad      	movs	r3, #173	; 0xad
   25846:	005a      	lsls	r2, r3, #1
   25848:	4914      	ldr	r1, [pc, #80]	; (2589c <chip_wake+0x168>)
   2584a:	4b15      	ldr	r3, [pc, #84]	; (258a0 <chip_wake+0x16c>)
   2584c:	0018      	movs	r0, r3
   2584e:	4b15      	ldr	r3, [pc, #84]	; (258a4 <chip_wake+0x170>)
   25850:	4798      	blx	r3
   25852:	4b18      	ldr	r3, [pc, #96]	; (258b4 <chip_wake+0x180>)
   25854:	0018      	movs	r0, r3
   25856:	4b13      	ldr	r3, [pc, #76]	; (258a4 <chip_wake+0x170>)
   25858:	4798      	blx	r3
   2585a:	4b14      	ldr	r3, [pc, #80]	; (258ac <chip_wake+0x178>)
   2585c:	0018      	movs	r0, r3
   2585e:	4b11      	ldr	r3, [pc, #68]	; (258a4 <chip_wake+0x170>)
   25860:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   25862:	230f      	movs	r3, #15
   25864:	18fb      	adds	r3, r7, r3
   25866:	22fc      	movs	r2, #252	; 0xfc
   25868:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   2586a:	e00a      	b.n	25882 <chip_wake+0x14e>
			break;
   2586c:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2586e:	4b12      	ldr	r3, [pc, #72]	; (258b8 <chip_wake+0x184>)
   25870:	4798      	blx	r3
   25872:	e006      	b.n	25882 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   25874:	46c0      	nop			; (mov r8, r8)
   25876:	e004      	b.n	25882 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   25878:	46c0      	nop			; (mov r8, r8)
   2587a:	e002      	b.n	25882 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2587c:	46c0      	nop			; (mov r8, r8)
   2587e:	e000      	b.n	25882 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   25880:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   25882:	230f      	movs	r3, #15
   25884:	18fb      	adds	r3, r7, r3
   25886:	781b      	ldrb	r3, [r3, #0]
   25888:	b25b      	sxtb	r3, r3
}
   2588a:	0018      	movs	r0, r3
   2588c:	46bd      	mov	sp, r7
   2588e:	b005      	add	sp, #20
   25890:	bd90      	pop	{r4, r7, pc}
   25892:	46c0      	nop			; (mov r8, r8)
   25894:	00025c65 	.word	0x00025c65
   25898:	00025c89 	.word	0x00025c89
   2589c:	0003d144 	.word	0x0003d144
   258a0:	0003d0b8 	.word	0x0003d0b8
   258a4:	00020e3d 	.word	0x00020e3d
   258a8:	0003d0cc 	.word	0x0003d0cc
   258ac:	0003d0e4 	.word	0x0003d0e4
   258b0:	000232f5 	.word	0x000232f5
   258b4:	0003d0e8 	.word	0x0003d0e8
   258b8:	00025c25 	.word	0x00025c25

000258bc <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   258bc:	b580      	push	{r7, lr}
   258be:	b088      	sub	sp, #32
   258c0:	af00      	add	r7, sp, #0
   258c2:	0002      	movs	r2, r0
   258c4:	1dfb      	adds	r3, r7, #7
   258c6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   258c8:	2313      	movs	r3, #19
   258ca:	18fb      	adds	r3, r7, r3
   258cc:	2200      	movs	r2, #0
   258ce:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   258d0:	2300      	movs	r3, #0
   258d2:	61fb      	str	r3, [r7, #28]
   258d4:	2300      	movs	r3, #0
   258d6:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   258d8:	2300      	movs	r3, #0
   258da:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   258dc:	4b4a      	ldr	r3, [pc, #296]	; (25a08 <wait_for_bootrom+0x14c>)
   258de:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   258e0:	2300      	movs	r3, #0
   258e2:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   258e4:	4b49      	ldr	r3, [pc, #292]	; (25a0c <wait_for_bootrom+0x150>)
   258e6:	0018      	movs	r0, r3
   258e8:	4b49      	ldr	r3, [pc, #292]	; (25a10 <wait_for_bootrom+0x154>)
   258ea:	4798      	blx	r3
   258ec:	0003      	movs	r3, r0
   258ee:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   258f0:	69fb      	ldr	r3, [r7, #28]
   258f2:	2b00      	cmp	r3, #0
   258f4:	db03      	blt.n	258fe <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   258f6:	2001      	movs	r0, #1
   258f8:	4b46      	ldr	r3, [pc, #280]	; (25a14 <wait_for_bootrom+0x158>)
   258fa:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   258fc:	e7f2      	b.n	258e4 <wait_for_bootrom+0x28>
			break;
   258fe:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   25900:	4b45      	ldr	r3, [pc, #276]	; (25a18 <wait_for_bootrom+0x15c>)
   25902:	0018      	movs	r0, r3
   25904:	4b42      	ldr	r3, [pc, #264]	; (25a10 <wait_for_bootrom+0x154>)
   25906:	4798      	blx	r3
   25908:	0003      	movs	r3, r0
   2590a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   2590c:	69fb      	ldr	r3, [r7, #28]
   2590e:	2201      	movs	r2, #1
   25910:	4013      	ands	r3, r2
   25912:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   25914:	69fb      	ldr	r3, [r7, #28]
   25916:	2b00      	cmp	r3, #0
   25918:	d112      	bne.n	25940 <wait_for_bootrom+0x84>
	{
		reg = 0;
   2591a:	2300      	movs	r3, #0
   2591c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2591e:	e00b      	b.n	25938 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   25920:	2001      	movs	r0, #1
   25922:	4b3c      	ldr	r3, [pc, #240]	; (25a14 <wait_for_bootrom+0x158>)
   25924:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   25926:	4b3d      	ldr	r3, [pc, #244]	; (25a1c <wait_for_bootrom+0x160>)
   25928:	0018      	movs	r0, r3
   2592a:	4b39      	ldr	r3, [pc, #228]	; (25a10 <wait_for_bootrom+0x154>)
   2592c:	4798      	blx	r3
   2592e:	0003      	movs	r3, r0
   25930:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   25932:	69bb      	ldr	r3, [r7, #24]
   25934:	3301      	adds	r3, #1
   25936:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   25938:	69fb      	ldr	r3, [r7, #28]
   2593a:	4a39      	ldr	r2, [pc, #228]	; (25a20 <wait_for_bootrom+0x164>)
   2593c:	4293      	cmp	r3, r2
   2593e:	d1ef      	bne.n	25920 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   25940:	1dfb      	adds	r3, r7, #7
   25942:	781b      	ldrb	r3, [r3, #0]
   25944:	2b02      	cmp	r3, #2
   25946:	d10d      	bne.n	25964 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   25948:	4a36      	ldr	r2, [pc, #216]	; (25a24 <wait_for_bootrom+0x168>)
   2594a:	4b37      	ldr	r3, [pc, #220]	; (25a28 <wait_for_bootrom+0x16c>)
   2594c:	0011      	movs	r1, r2
   2594e:	0018      	movs	r0, r3
   25950:	4b36      	ldr	r3, [pc, #216]	; (25a2c <wait_for_bootrom+0x170>)
   25952:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   25954:	2380      	movs	r3, #128	; 0x80
   25956:	035b      	lsls	r3, r3, #13
   25958:	4a35      	ldr	r2, [pc, #212]	; (25a30 <wait_for_bootrom+0x174>)
   2595a:	0019      	movs	r1, r3
   2595c:	0010      	movs	r0, r2
   2595e:	4b33      	ldr	r3, [pc, #204]	; (25a2c <wait_for_bootrom+0x170>)
   25960:	4798      	blx	r3
   25962:	e022      	b.n	259aa <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   25964:	1dfb      	adds	r3, r7, #7
   25966:	781b      	ldrb	r3, [r3, #0]
   25968:	2b03      	cmp	r3, #3
   2596a:	d10b      	bne.n	25984 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   2596c:	4a2d      	ldr	r2, [pc, #180]	; (25a24 <wait_for_bootrom+0x168>)
   2596e:	4b2e      	ldr	r3, [pc, #184]	; (25a28 <wait_for_bootrom+0x16c>)
   25970:	0011      	movs	r1, r2
   25972:	0018      	movs	r0, r3
   25974:	4b2d      	ldr	r3, [pc, #180]	; (25a2c <wait_for_bootrom+0x170>)
   25976:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   25978:	4b2d      	ldr	r3, [pc, #180]	; (25a30 <wait_for_bootrom+0x174>)
   2597a:	2100      	movs	r1, #0
   2597c:	0018      	movs	r0, r3
   2597e:	4b2b      	ldr	r3, [pc, #172]	; (25a2c <wait_for_bootrom+0x170>)
   25980:	4798      	blx	r3
   25982:	e012      	b.n	259aa <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   25984:	1dfb      	adds	r3, r7, #7
   25986:	781b      	ldrb	r3, [r3, #0]
   25988:	2b04      	cmp	r3, #4
   2598a:	d108      	bne.n	2599e <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   2598c:	2380      	movs	r3, #128	; 0x80
   2598e:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   25990:	68fb      	ldr	r3, [r7, #12]
   25992:	4a27      	ldr	r2, [pc, #156]	; (25a30 <wait_for_bootrom+0x174>)
   25994:	0019      	movs	r1, r3
   25996:	0010      	movs	r0, r2
   25998:	4b24      	ldr	r3, [pc, #144]	; (25a2c <wait_for_bootrom+0x170>)
   2599a:	4798      	blx	r3
   2599c:	e005      	b.n	259aa <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2599e:	68fb      	ldr	r3, [r7, #12]
   259a0:	4a23      	ldr	r2, [pc, #140]	; (25a30 <wait_for_bootrom+0x174>)
   259a2:	0019      	movs	r1, r3
   259a4:	0010      	movs	r0, r2
   259a6:	4b21      	ldr	r3, [pc, #132]	; (25a2c <wait_for_bootrom+0x170>)
   259a8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   259aa:	4b22      	ldr	r3, [pc, #136]	; (25a34 <wait_for_bootrom+0x178>)
   259ac:	4798      	blx	r3
   259ae:	0003      	movs	r3, r0
   259b0:	051b      	lsls	r3, r3, #20
   259b2:	0d1b      	lsrs	r3, r3, #20
   259b4:	4a20      	ldr	r2, [pc, #128]	; (25a38 <wait_for_bootrom+0x17c>)
   259b6:	4293      	cmp	r3, r2
   259b8:	d906      	bls.n	259c8 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   259ba:	697b      	ldr	r3, [r7, #20]
   259bc:	2202      	movs	r2, #2
   259be:	4313      	orrs	r3, r2
   259c0:	0018      	movs	r0, r3
   259c2:	4b1e      	ldr	r3, [pc, #120]	; (25a3c <wait_for_bootrom+0x180>)
   259c4:	4798      	blx	r3
   259c6:	e003      	b.n	259d0 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   259c8:	697b      	ldr	r3, [r7, #20]
   259ca:	0018      	movs	r0, r3
   259cc:	4b1b      	ldr	r3, [pc, #108]	; (25a3c <wait_for_bootrom+0x180>)
   259ce:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   259d0:	4b1b      	ldr	r3, [pc, #108]	; (25a40 <wait_for_bootrom+0x184>)
   259d2:	0018      	movs	r0, r3
   259d4:	4b1b      	ldr	r3, [pc, #108]	; (25a44 <wait_for_bootrom+0x188>)
   259d6:	4798      	blx	r3
   259d8:	68fa      	ldr	r2, [r7, #12]
   259da:	4b1b      	ldr	r3, [pc, #108]	; (25a48 <wait_for_bootrom+0x18c>)
   259dc:	0011      	movs	r1, r2
   259de:	0018      	movs	r0, r3
   259e0:	4b18      	ldr	r3, [pc, #96]	; (25a44 <wait_for_bootrom+0x188>)
   259e2:	4798      	blx	r3
   259e4:	4b19      	ldr	r3, [pc, #100]	; (25a4c <wait_for_bootrom+0x190>)
   259e6:	0018      	movs	r0, r3
   259e8:	4b16      	ldr	r3, [pc, #88]	; (25a44 <wait_for_bootrom+0x188>)
   259ea:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   259ec:	4a18      	ldr	r2, [pc, #96]	; (25a50 <wait_for_bootrom+0x194>)
   259ee:	4b0b      	ldr	r3, [pc, #44]	; (25a1c <wait_for_bootrom+0x160>)
   259f0:	0011      	movs	r1, r2
   259f2:	0018      	movs	r0, r3
   259f4:	4b0d      	ldr	r3, [pc, #52]	; (25a2c <wait_for_bootrom+0x170>)
   259f6:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   259f8:	2313      	movs	r3, #19
   259fa:	18fb      	adds	r3, r7, r3
   259fc:	781b      	ldrb	r3, [r3, #0]
   259fe:	b25b      	sxtb	r3, r3
}
   25a00:	0018      	movs	r0, r3
   25a02:	46bd      	mov	sp, r7
   25a04:	b008      	add	sp, #32
   25a06:	bd80      	pop	{r7, pc}
   25a08:	13301354 	.word	0x13301354
   25a0c:	00001014 	.word	0x00001014
   25a10:	00025c45 	.word	0x00025c45
   25a14:	000232f5 	.word	0x000232f5
   25a18:	000207bc 	.word	0x000207bc
   25a1c:	000c000c 	.word	0x000c000c
   25a20:	10add09e 	.word	0x10add09e
   25a24:	3c1cd57d 	.word	0x3c1cd57d
   25a28:	000207ac 	.word	0x000207ac
   25a2c:	00025c89 	.word	0x00025c89
   25a30:	0000108c 	.word	0x0000108c
   25a34:	00025565 	.word	0x00025565
   25a38:	0000039f 	.word	0x0000039f
   25a3c:	00025435 	.word	0x00025435
   25a40:	0003d104 	.word	0x0003d104
   25a44:	00020e3d 	.word	0x00020e3d
   25a48:	0003d110 	.word	0x0003d110
   25a4c:	0003d0e4 	.word	0x0003d0e4
   25a50:	ef522f61 	.word	0xef522f61

00025a54 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   25a54:	b580      	push	{r7, lr}
   25a56:	b088      	sub	sp, #32
   25a58:	af00      	add	r7, sp, #0
   25a5a:	0002      	movs	r2, r0
   25a5c:	1dfb      	adds	r3, r7, #7
   25a5e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   25a60:	231f      	movs	r3, #31
   25a62:	18fb      	adds	r3, r7, r3
   25a64:	2200      	movs	r2, #0
   25a66:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   25a68:	2300      	movs	r3, #0
   25a6a:	61bb      	str	r3, [r7, #24]
   25a6c:	2300      	movs	r3, #0
   25a6e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   25a70:	2301      	movs	r3, #1
   25a72:	425b      	negs	r3, r3
   25a74:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   25a76:	4b1d      	ldr	r3, [pc, #116]	; (25aec <wait_for_firmware_start+0x98>)
   25a78:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   25a7a:	4b1d      	ldr	r3, [pc, #116]	; (25af0 <wait_for_firmware_start+0x9c>)
   25a7c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   25a7e:	1dfb      	adds	r3, r7, #7
   25a80:	781b      	ldrb	r3, [r3, #0]
   25a82:	2b02      	cmp	r3, #2
   25a84:	d003      	beq.n	25a8e <wait_for_firmware_start+0x3a>
   25a86:	1dfb      	adds	r3, r7, #7
   25a88:	781b      	ldrb	r3, [r3, #0]
   25a8a:	2b03      	cmp	r3, #3
   25a8c:	d119      	bne.n	25ac2 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   25a8e:	4b19      	ldr	r3, [pc, #100]	; (25af4 <wait_for_firmware_start+0xa0>)
   25a90:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   25a92:	4b19      	ldr	r3, [pc, #100]	; (25af8 <wait_for_firmware_start+0xa4>)
   25a94:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   25a96:	e014      	b.n	25ac2 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   25a98:	2002      	movs	r0, #2
   25a9a:	4b18      	ldr	r3, [pc, #96]	; (25afc <wait_for_firmware_start+0xa8>)
   25a9c:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   25a9e:	68fb      	ldr	r3, [r7, #12]
   25aa0:	0018      	movs	r0, r3
   25aa2:	4b17      	ldr	r3, [pc, #92]	; (25b00 <wait_for_firmware_start+0xac>)
   25aa4:	4798      	blx	r3
   25aa6:	0003      	movs	r3, r0
   25aa8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   25aaa:	697b      	ldr	r3, [r7, #20]
   25aac:	3301      	adds	r3, #1
   25aae:	617b      	str	r3, [r7, #20]
   25ab0:	697a      	ldr	r2, [r7, #20]
   25ab2:	693b      	ldr	r3, [r7, #16]
   25ab4:	429a      	cmp	r2, r3
   25ab6:	d304      	bcc.n	25ac2 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   25ab8:	231f      	movs	r3, #31
   25aba:	18fb      	adds	r3, r7, r3
   25abc:	22fb      	movs	r2, #251	; 0xfb
   25abe:	701a      	strb	r2, [r3, #0]
			goto ERR;
   25ac0:	e00c      	b.n	25adc <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   25ac2:	68ba      	ldr	r2, [r7, #8]
   25ac4:	69bb      	ldr	r3, [r7, #24]
   25ac6:	429a      	cmp	r2, r3
   25ac8:	d1e6      	bne.n	25a98 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   25aca:	68bb      	ldr	r3, [r7, #8]
   25acc:	4a08      	ldr	r2, [pc, #32]	; (25af0 <wait_for_firmware_start+0x9c>)
   25ace:	4293      	cmp	r3, r2
   25ad0:	d104      	bne.n	25adc <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   25ad2:	4b06      	ldr	r3, [pc, #24]	; (25aec <wait_for_firmware_start+0x98>)
   25ad4:	2100      	movs	r1, #0
   25ad6:	0018      	movs	r0, r3
   25ad8:	4b0a      	ldr	r3, [pc, #40]	; (25b04 <wait_for_firmware_start+0xb0>)
   25ada:	4798      	blx	r3
	}
ERR:
	return ret;
   25adc:	231f      	movs	r3, #31
   25ade:	18fb      	adds	r3, r7, r3
   25ae0:	781b      	ldrb	r3, [r3, #0]
   25ae2:	b25b      	sxtb	r3, r3
}
   25ae4:	0018      	movs	r0, r3
   25ae6:	46bd      	mov	sp, r7
   25ae8:	b008      	add	sp, #32
   25aea:	bd80      	pop	{r7, pc}
   25aec:	0000108c 	.word	0x0000108c
   25af0:	02532636 	.word	0x02532636
   25af4:	000207ac 	.word	0x000207ac
   25af8:	d75dc1c3 	.word	0xd75dc1c3
   25afc:	000232f5 	.word	0x000232f5
   25b00:	00025c45 	.word	0x00025c45
   25b04:	00025c89 	.word	0x00025c89

00025b08 <chip_deinit>:

sint8 chip_deinit(void)
{
   25b08:	b590      	push	{r4, r7, lr}
   25b0a:	b083      	sub	sp, #12
   25b0c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   25b0e:	2300      	movs	r3, #0
   25b10:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   25b12:	1dfc      	adds	r4, r7, #7
   25b14:	003a      	movs	r2, r7
   25b16:	23a0      	movs	r3, #160	; 0xa0
   25b18:	015b      	lsls	r3, r3, #5
   25b1a:	0011      	movs	r1, r2
   25b1c:	0018      	movs	r0, r3
   25b1e:	4b20      	ldr	r3, [pc, #128]	; (25ba0 <chip_deinit+0x98>)
   25b20:	4798      	blx	r3
   25b22:	0003      	movs	r3, r0
   25b24:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   25b26:	1dfb      	adds	r3, r7, #7
   25b28:	781b      	ldrb	r3, [r3, #0]
   25b2a:	b25b      	sxtb	r3, r3
   25b2c:	2b00      	cmp	r3, #0
   25b2e:	d00e      	beq.n	25b4e <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   25b30:	4a1c      	ldr	r2, [pc, #112]	; (25ba4 <chip_deinit+0x9c>)
   25b32:	491d      	ldr	r1, [pc, #116]	; (25ba8 <chip_deinit+0xa0>)
   25b34:	4b1d      	ldr	r3, [pc, #116]	; (25bac <chip_deinit+0xa4>)
   25b36:	0018      	movs	r0, r3
   25b38:	4b1d      	ldr	r3, [pc, #116]	; (25bb0 <chip_deinit+0xa8>)
   25b3a:	4798      	blx	r3
   25b3c:	4b1d      	ldr	r3, [pc, #116]	; (25bb4 <chip_deinit+0xac>)
   25b3e:	0018      	movs	r0, r3
   25b40:	4b1b      	ldr	r3, [pc, #108]	; (25bb0 <chip_deinit+0xa8>)
   25b42:	4798      	blx	r3
   25b44:	4b1c      	ldr	r3, [pc, #112]	; (25bb8 <chip_deinit+0xb0>)
   25b46:	0018      	movs	r0, r3
   25b48:	4b19      	ldr	r3, [pc, #100]	; (25bb0 <chip_deinit+0xa8>)
   25b4a:	4798      	blx	r3
		goto ERR1;
   25b4c:	e021      	b.n	25b92 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   25b4e:	683b      	ldr	r3, [r7, #0]
   25b50:	4a1a      	ldr	r2, [pc, #104]	; (25bbc <chip_deinit+0xb4>)
   25b52:	4013      	ands	r3, r2
   25b54:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   25b56:	683a      	ldr	r2, [r7, #0]
   25b58:	1dfc      	adds	r4, r7, #7
   25b5a:	23a0      	movs	r3, #160	; 0xa0
   25b5c:	015b      	lsls	r3, r3, #5
   25b5e:	0011      	movs	r1, r2
   25b60:	0018      	movs	r0, r3
   25b62:	4b17      	ldr	r3, [pc, #92]	; (25bc0 <chip_deinit+0xb8>)
   25b64:	4798      	blx	r3
   25b66:	0003      	movs	r3, r0
   25b68:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   25b6a:	1dfb      	adds	r3, r7, #7
   25b6c:	781b      	ldrb	r3, [r3, #0]
   25b6e:	b25b      	sxtb	r3, r3
   25b70:	2b00      	cmp	r3, #0
   25b72:	d00e      	beq.n	25b92 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   25b74:	4a13      	ldr	r2, [pc, #76]	; (25bc4 <chip_deinit+0xbc>)
   25b76:	490c      	ldr	r1, [pc, #48]	; (25ba8 <chip_deinit+0xa0>)
   25b78:	4b0c      	ldr	r3, [pc, #48]	; (25bac <chip_deinit+0xa4>)
   25b7a:	0018      	movs	r0, r3
   25b7c:	4b0c      	ldr	r3, [pc, #48]	; (25bb0 <chip_deinit+0xa8>)
   25b7e:	4798      	blx	r3
   25b80:	4b0c      	ldr	r3, [pc, #48]	; (25bb4 <chip_deinit+0xac>)
   25b82:	0018      	movs	r0, r3
   25b84:	4b0a      	ldr	r3, [pc, #40]	; (25bb0 <chip_deinit+0xa8>)
   25b86:	4798      	blx	r3
   25b88:	4b0b      	ldr	r3, [pc, #44]	; (25bb8 <chip_deinit+0xb0>)
   25b8a:	0018      	movs	r0, r3
   25b8c:	4b08      	ldr	r3, [pc, #32]	; (25bb0 <chip_deinit+0xa8>)
   25b8e:	4798      	blx	r3
		goto ERR1;
   25b90:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   25b92:	1dfb      	adds	r3, r7, #7
   25b94:	781b      	ldrb	r3, [r3, #0]
   25b96:	b25b      	sxtb	r3, r3
}
   25b98:	0018      	movs	r0, r3
   25b9a:	46bd      	mov	sp, r7
   25b9c:	b003      	add	sp, #12
   25b9e:	bd90      	pop	{r4, r7, pc}
   25ba0:	00025c65 	.word	0x00025c65
   25ba4:	00000201 	.word	0x00000201
   25ba8:	0003d150 	.word	0x0003d150
   25bac:	0003d0b8 	.word	0x0003d0b8
   25bb0:	00020e3d 	.word	0x00020e3d
   25bb4:	0003d128 	.word	0x0003d128
   25bb8:	0003d0e4 	.word	0x0003d0e4
   25bbc:	fffffbff 	.word	0xfffffbff
   25bc0:	00025c89 	.word	0x00025c89
   25bc4:	00000207 	.word	0x00000207

00025bc8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   25bc8:	b590      	push	{r4, r7, lr}
   25bca:	b085      	sub	sp, #20
   25bcc:	af00      	add	r7, sp, #0
   25bce:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   25bd0:	230f      	movs	r3, #15
   25bd2:	18fb      	adds	r3, r7, r3
   25bd4:	2200      	movs	r2, #0
   25bd6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   25bd8:	230f      	movs	r3, #15
   25bda:	18fc      	adds	r4, r7, r3
   25bdc:	687b      	ldr	r3, [r7, #4]
   25bde:	0018      	movs	r0, r3
   25be0:	4b05      	ldr	r3, [pc, #20]	; (25bf8 <nm_bus_iface_init+0x30>)
   25be2:	4798      	blx	r3
   25be4:	0003      	movs	r3, r0
   25be6:	7023      	strb	r3, [r4, #0]
	return ret;
   25be8:	230f      	movs	r3, #15
   25bea:	18fb      	adds	r3, r7, r3
   25bec:	781b      	ldrb	r3, [r3, #0]
   25bee:	b25b      	sxtb	r3, r3
}
   25bf0:	0018      	movs	r0, r3
   25bf2:	46bd      	mov	sp, r7
   25bf4:	b005      	add	sp, #20
   25bf6:	bd90      	pop	{r4, r7, pc}
   25bf8:	000239b1 	.word	0x000239b1

00025bfc <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   25bfc:	b590      	push	{r4, r7, lr}
   25bfe:	b083      	sub	sp, #12
   25c00:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   25c02:	1dfb      	adds	r3, r7, #7
   25c04:	2200      	movs	r2, #0
   25c06:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   25c08:	1dfc      	adds	r4, r7, #7
   25c0a:	4b05      	ldr	r3, [pc, #20]	; (25c20 <nm_bus_iface_deinit+0x24>)
   25c0c:	4798      	blx	r3
   25c0e:	0003      	movs	r3, r0
   25c10:	7023      	strb	r3, [r4, #0]

	return ret;
   25c12:	1dfb      	adds	r3, r7, #7
   25c14:	781b      	ldrb	r3, [r3, #0]
   25c16:	b25b      	sxtb	r3, r3
}
   25c18:	0018      	movs	r0, r3
   25c1a:	46bd      	mov	sp, r7
   25c1c:	b003      	add	sp, #12
   25c1e:	bd90      	pop	{r4, r7, pc}
   25c20:	00023b29 	.word	0x00023b29

00025c24 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   25c24:	b580      	push	{r7, lr}
   25c26:	b082      	sub	sp, #8
   25c28:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   25c2a:	1dfb      	adds	r3, r7, #7
   25c2c:	2200      	movs	r2, #0
   25c2e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   25c30:	4b03      	ldr	r3, [pc, #12]	; (25c40 <nm_bus_reset+0x1c>)
   25c32:	4798      	blx	r3
   25c34:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   25c36:	0018      	movs	r0, r3
   25c38:	46bd      	mov	sp, r7
   25c3a:	b002      	add	sp, #8
   25c3c:	bd80      	pop	{r7, pc}
   25c3e:	46c0      	nop			; (mov r8, r8)
   25c40:	00027a51 	.word	0x00027a51

00025c44 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   25c44:	b580      	push	{r7, lr}
   25c46:	b082      	sub	sp, #8
   25c48:	af00      	add	r7, sp, #0
   25c4a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   25c4c:	687b      	ldr	r3, [r7, #4]
   25c4e:	0018      	movs	r0, r3
   25c50:	4b03      	ldr	r3, [pc, #12]	; (25c60 <nm_read_reg+0x1c>)
   25c52:	4798      	blx	r3
   25c54:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   25c56:	0018      	movs	r0, r3
   25c58:	46bd      	mov	sp, r7
   25c5a:	b002      	add	sp, #8
   25c5c:	bd80      	pop	{r7, pc}
   25c5e:	46c0      	nop			; (mov r8, r8)
   25c60:	00027be5 	.word	0x00027be5

00025c64 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25c64:	b580      	push	{r7, lr}
   25c66:	b082      	sub	sp, #8
   25c68:	af00      	add	r7, sp, #0
   25c6a:	6078      	str	r0, [r7, #4]
   25c6c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   25c6e:	683a      	ldr	r2, [r7, #0]
   25c70:	687b      	ldr	r3, [r7, #4]
   25c72:	0011      	movs	r1, r2
   25c74:	0018      	movs	r0, r3
   25c76:	4b03      	ldr	r3, [pc, #12]	; (25c84 <nm_read_reg_with_ret+0x20>)
   25c78:	4798      	blx	r3
   25c7a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   25c7c:	0018      	movs	r0, r3
   25c7e:	46bd      	mov	sp, r7
   25c80:	b002      	add	sp, #8
   25c82:	bd80      	pop	{r7, pc}
   25c84:	00027c09 	.word	0x00027c09

00025c88 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25c88:	b580      	push	{r7, lr}
   25c8a:	b082      	sub	sp, #8
   25c8c:	af00      	add	r7, sp, #0
   25c8e:	6078      	str	r0, [r7, #4]
   25c90:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   25c92:	683a      	ldr	r2, [r7, #0]
   25c94:	687b      	ldr	r3, [r7, #4]
   25c96:	0011      	movs	r1, r2
   25c98:	0018      	movs	r0, r3
   25c9a:	4b03      	ldr	r3, [pc, #12]	; (25ca8 <nm_write_reg+0x20>)
   25c9c:	4798      	blx	r3
   25c9e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   25ca0:	0018      	movs	r0, r3
   25ca2:	46bd      	mov	sp, r7
   25ca4:	b002      	add	sp, #8
   25ca6:	bd80      	pop	{r7, pc}
   25ca8:	00027c59 	.word	0x00027c59

00025cac <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25cac:	b580      	push	{r7, lr}
   25cae:	b084      	sub	sp, #16
   25cb0:	af00      	add	r7, sp, #0
   25cb2:	60f8      	str	r0, [r7, #12]
   25cb4:	60b9      	str	r1, [r7, #8]
   25cb6:	1dbb      	adds	r3, r7, #6
   25cb8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   25cba:	1dbb      	adds	r3, r7, #6
   25cbc:	881a      	ldrh	r2, [r3, #0]
   25cbe:	68b9      	ldr	r1, [r7, #8]
   25cc0:	68fb      	ldr	r3, [r7, #12]
   25cc2:	0018      	movs	r0, r3
   25cc4:	4b03      	ldr	r3, [pc, #12]	; (25cd4 <p_nm_read_block+0x28>)
   25cc6:	4798      	blx	r3
   25cc8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   25cca:	0018      	movs	r0, r3
   25ccc:	46bd      	mov	sp, r7
   25cce:	b004      	add	sp, #16
   25cd0:	bd80      	pop	{r7, pc}
   25cd2:	46c0      	nop			; (mov r8, r8)
   25cd4:	00027ca9 	.word	0x00027ca9

00025cd8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   25cd8:	b580      	push	{r7, lr}
   25cda:	b086      	sub	sp, #24
   25cdc:	af00      	add	r7, sp, #0
   25cde:	60f8      	str	r0, [r7, #12]
   25ce0:	60b9      	str	r1, [r7, #8]
   25ce2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   25ce4:	4b2d      	ldr	r3, [pc, #180]	; (25d9c <nm_read_block+0xc4>)
   25ce6:	881a      	ldrh	r2, [r3, #0]
   25ce8:	2310      	movs	r3, #16
   25cea:	18fb      	adds	r3, r7, r3
   25cec:	3a08      	subs	r2, #8
   25cee:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   25cf0:	2300      	movs	r3, #0
   25cf2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   25cf4:	2313      	movs	r3, #19
   25cf6:	18fb      	adds	r3, r7, r3
   25cf8:	2200      	movs	r2, #0
   25cfa:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   25cfc:	2310      	movs	r3, #16
   25cfe:	18fb      	adds	r3, r7, r3
   25d00:	881a      	ldrh	r2, [r3, #0]
   25d02:	687b      	ldr	r3, [r7, #4]
   25d04:	429a      	cmp	r2, r3
   25d06:	d313      	bcc.n	25d30 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   25d08:	68ba      	ldr	r2, [r7, #8]
   25d0a:	697b      	ldr	r3, [r7, #20]
   25d0c:	18d1      	adds	r1, r2, r3
   25d0e:	687b      	ldr	r3, [r7, #4]
   25d10:	b29a      	uxth	r2, r3
   25d12:	68fb      	ldr	r3, [r7, #12]
   25d14:	0018      	movs	r0, r3
   25d16:	4b22      	ldr	r3, [pc, #136]	; (25da0 <nm_read_block+0xc8>)
   25d18:	4798      	blx	r3
   25d1a:	0003      	movs	r3, r0
   25d1c:	b2da      	uxtb	r2, r3
   25d1e:	2313      	movs	r3, #19
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	781b      	ldrb	r3, [r3, #0]
   25d24:	18d3      	adds	r3, r2, r3
   25d26:	b2da      	uxtb	r2, r3
   25d28:	2313      	movs	r3, #19
   25d2a:	18fb      	adds	r3, r7, r3
   25d2c:	701a      	strb	r2, [r3, #0]
			break;
   25d2e:	e02d      	b.n	25d8c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   25d30:	68ba      	ldr	r2, [r7, #8]
   25d32:	697b      	ldr	r3, [r7, #20]
   25d34:	18d1      	adds	r1, r2, r3
   25d36:	2310      	movs	r3, #16
   25d38:	18fb      	adds	r3, r7, r3
   25d3a:	881a      	ldrh	r2, [r3, #0]
   25d3c:	68fb      	ldr	r3, [r7, #12]
   25d3e:	0018      	movs	r0, r3
   25d40:	4b17      	ldr	r3, [pc, #92]	; (25da0 <nm_read_block+0xc8>)
   25d42:	4798      	blx	r3
   25d44:	0003      	movs	r3, r0
   25d46:	b2da      	uxtb	r2, r3
   25d48:	2313      	movs	r3, #19
   25d4a:	18fb      	adds	r3, r7, r3
   25d4c:	781b      	ldrb	r3, [r3, #0]
   25d4e:	18d3      	adds	r3, r2, r3
   25d50:	b2da      	uxtb	r2, r3
   25d52:	2313      	movs	r3, #19
   25d54:	18fb      	adds	r3, r7, r3
   25d56:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   25d58:	2313      	movs	r3, #19
   25d5a:	18fb      	adds	r3, r7, r3
   25d5c:	781b      	ldrb	r3, [r3, #0]
   25d5e:	b25b      	sxtb	r3, r3
   25d60:	2b00      	cmp	r3, #0
   25d62:	d112      	bne.n	25d8a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   25d64:	2310      	movs	r3, #16
   25d66:	18fb      	adds	r3, r7, r3
   25d68:	881b      	ldrh	r3, [r3, #0]
   25d6a:	687a      	ldr	r2, [r7, #4]
   25d6c:	1ad3      	subs	r3, r2, r3
   25d6e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   25d70:	2310      	movs	r3, #16
   25d72:	18fb      	adds	r3, r7, r3
   25d74:	881b      	ldrh	r3, [r3, #0]
   25d76:	697a      	ldr	r2, [r7, #20]
   25d78:	18d3      	adds	r3, r2, r3
   25d7a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   25d7c:	2310      	movs	r3, #16
   25d7e:	18fb      	adds	r3, r7, r3
   25d80:	881b      	ldrh	r3, [r3, #0]
   25d82:	68fa      	ldr	r2, [r7, #12]
   25d84:	18d3      	adds	r3, r2, r3
   25d86:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   25d88:	e7b8      	b.n	25cfc <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   25d8a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   25d8c:	2313      	movs	r3, #19
   25d8e:	18fb      	adds	r3, r7, r3
   25d90:	781b      	ldrb	r3, [r3, #0]
   25d92:	b25b      	sxtb	r3, r3
}
   25d94:	0018      	movs	r0, r3
   25d96:	46bd      	mov	sp, r7
   25d98:	b006      	add	sp, #24
   25d9a:	bd80      	pop	{r7, pc}
   25d9c:	200001a0 	.word	0x200001a0
   25da0:	00025cad 	.word	0x00025cad

00025da4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25da4:	b580      	push	{r7, lr}
   25da6:	b084      	sub	sp, #16
   25da8:	af00      	add	r7, sp, #0
   25daa:	60f8      	str	r0, [r7, #12]
   25dac:	60b9      	str	r1, [r7, #8]
   25dae:	1dbb      	adds	r3, r7, #6
   25db0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   25db2:	1dbb      	adds	r3, r7, #6
   25db4:	881a      	ldrh	r2, [r3, #0]
   25db6:	68b9      	ldr	r1, [r7, #8]
   25db8:	68fb      	ldr	r3, [r7, #12]
   25dba:	0018      	movs	r0, r3
   25dbc:	4b03      	ldr	r3, [pc, #12]	; (25dcc <p_nm_write_block+0x28>)
   25dbe:	4798      	blx	r3
   25dc0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   25dc2:	0018      	movs	r0, r3
   25dc4:	46bd      	mov	sp, r7
   25dc6:	b004      	add	sp, #16
   25dc8:	bd80      	pop	{r7, pc}
   25dca:	46c0      	nop			; (mov r8, r8)
   25dcc:	00027d01 	.word	0x00027d01

00025dd0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   25dd0:	b580      	push	{r7, lr}
   25dd2:	b086      	sub	sp, #24
   25dd4:	af00      	add	r7, sp, #0
   25dd6:	60f8      	str	r0, [r7, #12]
   25dd8:	60b9      	str	r1, [r7, #8]
   25dda:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   25ddc:	4b2d      	ldr	r3, [pc, #180]	; (25e94 <nm_write_block+0xc4>)
   25dde:	881a      	ldrh	r2, [r3, #0]
   25de0:	2310      	movs	r3, #16
   25de2:	18fb      	adds	r3, r7, r3
   25de4:	3a08      	subs	r2, #8
   25de6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   25de8:	2300      	movs	r3, #0
   25dea:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   25dec:	2313      	movs	r3, #19
   25dee:	18fb      	adds	r3, r7, r3
   25df0:	2200      	movs	r2, #0
   25df2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   25df4:	2310      	movs	r3, #16
   25df6:	18fb      	adds	r3, r7, r3
   25df8:	881a      	ldrh	r2, [r3, #0]
   25dfa:	687b      	ldr	r3, [r7, #4]
   25dfc:	429a      	cmp	r2, r3
   25dfe:	d313      	bcc.n	25e28 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   25e00:	68ba      	ldr	r2, [r7, #8]
   25e02:	697b      	ldr	r3, [r7, #20]
   25e04:	18d1      	adds	r1, r2, r3
   25e06:	687b      	ldr	r3, [r7, #4]
   25e08:	b29a      	uxth	r2, r3
   25e0a:	68fb      	ldr	r3, [r7, #12]
   25e0c:	0018      	movs	r0, r3
   25e0e:	4b22      	ldr	r3, [pc, #136]	; (25e98 <nm_write_block+0xc8>)
   25e10:	4798      	blx	r3
   25e12:	0003      	movs	r3, r0
   25e14:	b2da      	uxtb	r2, r3
   25e16:	2313      	movs	r3, #19
   25e18:	18fb      	adds	r3, r7, r3
   25e1a:	781b      	ldrb	r3, [r3, #0]
   25e1c:	18d3      	adds	r3, r2, r3
   25e1e:	b2da      	uxtb	r2, r3
   25e20:	2313      	movs	r3, #19
   25e22:	18fb      	adds	r3, r7, r3
   25e24:	701a      	strb	r2, [r3, #0]
			break;
   25e26:	e02d      	b.n	25e84 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   25e28:	68ba      	ldr	r2, [r7, #8]
   25e2a:	697b      	ldr	r3, [r7, #20]
   25e2c:	18d1      	adds	r1, r2, r3
   25e2e:	2310      	movs	r3, #16
   25e30:	18fb      	adds	r3, r7, r3
   25e32:	881a      	ldrh	r2, [r3, #0]
   25e34:	68fb      	ldr	r3, [r7, #12]
   25e36:	0018      	movs	r0, r3
   25e38:	4b17      	ldr	r3, [pc, #92]	; (25e98 <nm_write_block+0xc8>)
   25e3a:	4798      	blx	r3
   25e3c:	0003      	movs	r3, r0
   25e3e:	b2da      	uxtb	r2, r3
   25e40:	2313      	movs	r3, #19
   25e42:	18fb      	adds	r3, r7, r3
   25e44:	781b      	ldrb	r3, [r3, #0]
   25e46:	18d3      	adds	r3, r2, r3
   25e48:	b2da      	uxtb	r2, r3
   25e4a:	2313      	movs	r3, #19
   25e4c:	18fb      	adds	r3, r7, r3
   25e4e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   25e50:	2313      	movs	r3, #19
   25e52:	18fb      	adds	r3, r7, r3
   25e54:	781b      	ldrb	r3, [r3, #0]
   25e56:	b25b      	sxtb	r3, r3
   25e58:	2b00      	cmp	r3, #0
   25e5a:	d112      	bne.n	25e82 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   25e5c:	2310      	movs	r3, #16
   25e5e:	18fb      	adds	r3, r7, r3
   25e60:	881b      	ldrh	r3, [r3, #0]
   25e62:	687a      	ldr	r2, [r7, #4]
   25e64:	1ad3      	subs	r3, r2, r3
   25e66:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   25e68:	2310      	movs	r3, #16
   25e6a:	18fb      	adds	r3, r7, r3
   25e6c:	881b      	ldrh	r3, [r3, #0]
   25e6e:	697a      	ldr	r2, [r7, #20]
   25e70:	18d3      	adds	r3, r2, r3
   25e72:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   25e74:	2310      	movs	r3, #16
   25e76:	18fb      	adds	r3, r7, r3
   25e78:	881b      	ldrh	r3, [r3, #0]
   25e7a:	68fa      	ldr	r2, [r7, #12]
   25e7c:	18d3      	adds	r3, r2, r3
   25e7e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   25e80:	e7b8      	b.n	25df4 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   25e82:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   25e84:	2313      	movs	r3, #19
   25e86:	18fb      	adds	r3, r7, r3
   25e88:	781b      	ldrb	r3, [r3, #0]
   25e8a:	b25b      	sxtb	r3, r3
}
   25e8c:	0018      	movs	r0, r3
   25e8e:	46bd      	mov	sp, r7
   25e90:	b006      	add	sp, #24
   25e92:	bd80      	pop	{r7, pc}
   25e94:	200001a0 	.word	0x200001a0
   25e98:	00025da5 	.word	0x00025da5

00025e9c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   25e9c:	b590      	push	{r4, r7, lr}
   25e9e:	b089      	sub	sp, #36	; 0x24
   25ea0:	af00      	add	r7, sp, #0
   25ea2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   25ea4:	2300      	movs	r3, #0
   25ea6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   25ea8:	231f      	movs	r3, #31
   25eaa:	18fb      	adds	r3, r7, r3
   25eac:	2200      	movs	r2, #0
   25eae:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   25eb0:	230c      	movs	r3, #12
   25eb2:	18fb      	adds	r3, r7, r3
   25eb4:	0018      	movs	r0, r3
   25eb6:	2308      	movs	r3, #8
   25eb8:	001a      	movs	r2, r3
   25eba:	2100      	movs	r1, #0
   25ebc:	4b64      	ldr	r3, [pc, #400]	; (26050 <nm_get_firmware_full_info+0x1b4>)
   25ebe:	4798      	blx	r3
	if (pstrRev != NULL)
   25ec0:	687b      	ldr	r3, [r7, #4]
   25ec2:	2b00      	cmp	r3, #0
   25ec4:	d100      	bne.n	25ec8 <nm_get_firmware_full_info+0x2c>
   25ec6:	e0ba      	b.n	2603e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   25ec8:	687b      	ldr	r3, [r7, #4]
   25eca:	2228      	movs	r2, #40	; 0x28
   25ecc:	2100      	movs	r1, #0
   25ece:	0018      	movs	r0, r3
   25ed0:	4b60      	ldr	r3, [pc, #384]	; (26054 <nm_get_firmware_full_info+0x1b8>)
   25ed2:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   25ed4:	231f      	movs	r3, #31
   25ed6:	18fc      	adds	r4, r7, r3
   25ed8:	2314      	movs	r3, #20
   25eda:	18fb      	adds	r3, r7, r3
   25edc:	4a5e      	ldr	r2, [pc, #376]	; (26058 <nm_get_firmware_full_info+0x1bc>)
   25ede:	0019      	movs	r1, r3
   25ee0:	0010      	movs	r0, r2
   25ee2:	4b5e      	ldr	r3, [pc, #376]	; (2605c <nm_get_firmware_full_info+0x1c0>)
   25ee4:	4798      	blx	r3
   25ee6:	0003      	movs	r3, r0
   25ee8:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   25eea:	231f      	movs	r3, #31
   25eec:	18fb      	adds	r3, r7, r3
   25eee:	781b      	ldrb	r3, [r3, #0]
   25ef0:	b25b      	sxtb	r3, r3
   25ef2:	2b00      	cmp	r3, #0
   25ef4:	d000      	beq.n	25ef8 <nm_get_firmware_full_info+0x5c>
   25ef6:	e0a2      	b.n	2603e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   25ef8:	697b      	ldr	r3, [r7, #20]
   25efa:	2b00      	cmp	r3, #0
   25efc:	d100      	bne.n	25f00 <nm_get_firmware_full_info+0x64>
   25efe:	e09a      	b.n	26036 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   25f00:	697b      	ldr	r3, [r7, #20]
   25f02:	22c0      	movs	r2, #192	; 0xc0
   25f04:	0292      	lsls	r2, r2, #10
   25f06:	4313      	orrs	r3, r2
   25f08:	221f      	movs	r2, #31
   25f0a:	18bc      	adds	r4, r7, r2
   25f0c:	220c      	movs	r2, #12
   25f0e:	18b9      	adds	r1, r7, r2
   25f10:	2208      	movs	r2, #8
   25f12:	0018      	movs	r0, r3
   25f14:	4b52      	ldr	r3, [pc, #328]	; (26060 <nm_get_firmware_full_info+0x1c4>)
   25f16:	4798      	blx	r3
   25f18:	0003      	movs	r3, r0
   25f1a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   25f1c:	231f      	movs	r3, #31
   25f1e:	18fb      	adds	r3, r7, r3
   25f20:	781b      	ldrb	r3, [r3, #0]
   25f22:	b25b      	sxtb	r3, r3
   25f24:	2b00      	cmp	r3, #0
   25f26:	d000      	beq.n	25f2a <nm_get_firmware_full_info+0x8e>
   25f28:	e089      	b.n	2603e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   25f2a:	230c      	movs	r3, #12
   25f2c:	18fb      	adds	r3, r7, r3
   25f2e:	685b      	ldr	r3, [r3, #4]
   25f30:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   25f32:	697b      	ldr	r3, [r7, #20]
   25f34:	041b      	lsls	r3, r3, #16
   25f36:	0c1b      	lsrs	r3, r3, #16
   25f38:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   25f3a:	697b      	ldr	r3, [r7, #20]
   25f3c:	2b00      	cmp	r3, #0
   25f3e:	d100      	bne.n	25f42 <nm_get_firmware_full_info+0xa6>
   25f40:	e074      	b.n	2602c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   25f42:	697b      	ldr	r3, [r7, #20]
   25f44:	22c0      	movs	r2, #192	; 0xc0
   25f46:	0292      	lsls	r2, r2, #10
   25f48:	4313      	orrs	r3, r2
   25f4a:	221f      	movs	r2, #31
   25f4c:	18bc      	adds	r4, r7, r2
   25f4e:	6879      	ldr	r1, [r7, #4]
   25f50:	2228      	movs	r2, #40	; 0x28
   25f52:	0018      	movs	r0, r3
   25f54:	4b42      	ldr	r3, [pc, #264]	; (26060 <nm_get_firmware_full_info+0x1c4>)
   25f56:	4798      	blx	r3
   25f58:	0003      	movs	r3, r0
   25f5a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   25f5c:	231f      	movs	r3, #31
   25f5e:	18fb      	adds	r3, r7, r3
   25f60:	781b      	ldrb	r3, [r3, #0]
   25f62:	b25b      	sxtb	r3, r3
   25f64:	2b00      	cmp	r3, #0
   25f66:	d16a      	bne.n	2603e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   25f68:	687b      	ldr	r3, [r7, #4]
   25f6a:	791b      	ldrb	r3, [r3, #4]
   25f6c:	021b      	lsls	r3, r3, #8
   25f6e:	b21a      	sxth	r2, r3
   25f70:	687b      	ldr	r3, [r7, #4]
   25f72:	795b      	ldrb	r3, [r3, #5]
   25f74:	011b      	lsls	r3, r3, #4
   25f76:	b21b      	sxth	r3, r3
   25f78:	21ff      	movs	r1, #255	; 0xff
   25f7a:	400b      	ands	r3, r1
   25f7c:	b21b      	sxth	r3, r3
   25f7e:	4313      	orrs	r3, r2
   25f80:	b21a      	sxth	r2, r3
   25f82:	687b      	ldr	r3, [r7, #4]
   25f84:	799b      	ldrb	r3, [r3, #6]
   25f86:	b21b      	sxth	r3, r3
   25f88:	210f      	movs	r1, #15
   25f8a:	400b      	ands	r3, r1
   25f8c:	b21b      	sxth	r3, r3
   25f8e:	4313      	orrs	r3, r2
   25f90:	b21a      	sxth	r2, r3
   25f92:	231c      	movs	r3, #28
   25f94:	18fb      	adds	r3, r7, r3
   25f96:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   25f98:	231a      	movs	r3, #26
   25f9a:	18fb      	adds	r3, r7, r3
   25f9c:	4a31      	ldr	r2, [pc, #196]	; (26064 <nm_get_firmware_full_info+0x1c8>)
   25f9e:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   25fa0:	687b      	ldr	r3, [r7, #4]
   25fa2:	79db      	ldrb	r3, [r3, #7]
   25fa4:	021b      	lsls	r3, r3, #8
   25fa6:	b21a      	sxth	r2, r3
   25fa8:	687b      	ldr	r3, [r7, #4]
   25faa:	7a1b      	ldrb	r3, [r3, #8]
   25fac:	011b      	lsls	r3, r3, #4
   25fae:	b21b      	sxth	r3, r3
   25fb0:	21ff      	movs	r1, #255	; 0xff
   25fb2:	400b      	ands	r3, r1
   25fb4:	b21b      	sxth	r3, r3
   25fb6:	4313      	orrs	r3, r2
   25fb8:	b21a      	sxth	r2, r3
   25fba:	687b      	ldr	r3, [r7, #4]
   25fbc:	7a5b      	ldrb	r3, [r3, #9]
   25fbe:	b21b      	sxth	r3, r3
   25fc0:	210f      	movs	r1, #15
   25fc2:	400b      	ands	r3, r1
   25fc4:	b21b      	sxth	r3, r3
   25fc6:	4313      	orrs	r3, r2
   25fc8:	b21a      	sxth	r2, r3
   25fca:	2318      	movs	r3, #24
   25fcc:	18fb      	adds	r3, r7, r3
   25fce:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   25fd0:	231c      	movs	r3, #28
   25fd2:	18fb      	adds	r3, r7, r3
   25fd4:	881b      	ldrh	r3, [r3, #0]
   25fd6:	2b00      	cmp	r3, #0
   25fd8:	d009      	beq.n	25fee <nm_get_firmware_full_info+0x152>
   25fda:	2318      	movs	r3, #24
   25fdc:	18fb      	adds	r3, r7, r3
   25fde:	881b      	ldrh	r3, [r3, #0]
   25fe0:	2b00      	cmp	r3, #0
   25fe2:	d004      	beq.n	25fee <nm_get_firmware_full_info+0x152>
   25fe4:	2318      	movs	r3, #24
   25fe6:	18fb      	adds	r3, r7, r3
   25fe8:	881b      	ldrh	r3, [r3, #0]
   25fea:	2b00      	cmp	r3, #0
   25fec:	d104      	bne.n	25ff8 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   25fee:	231f      	movs	r3, #31
   25ff0:	18fb      	adds	r3, r7, r3
   25ff2:	22f4      	movs	r2, #244	; 0xf4
   25ff4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   25ff6:	e022      	b.n	2603e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   25ff8:	231a      	movs	r3, #26
   25ffa:	18fa      	adds	r2, r7, r3
   25ffc:	2318      	movs	r3, #24
   25ffe:	18fb      	adds	r3, r7, r3
   26000:	8812      	ldrh	r2, [r2, #0]
   26002:	881b      	ldrh	r3, [r3, #0]
   26004:	429a      	cmp	r2, r3
   26006:	d204      	bcs.n	26012 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   26008:	231f      	movs	r3, #31
   2600a:	18fb      	adds	r3, r7, r3
   2600c:	22f3      	movs	r2, #243	; 0xf3
   2600e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   26010:	e015      	b.n	2603e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   26012:	231a      	movs	r3, #26
   26014:	18fa      	adds	r2, r7, r3
   26016:	231c      	movs	r3, #28
   26018:	18fb      	adds	r3, r7, r3
   2601a:	8812      	ldrh	r2, [r2, #0]
   2601c:	881b      	ldrh	r3, [r3, #0]
   2601e:	429a      	cmp	r2, r3
   26020:	d90d      	bls.n	2603e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   26022:	231f      	movs	r3, #31
   26024:	18fb      	adds	r3, r7, r3
   26026:	22f3      	movs	r2, #243	; 0xf3
   26028:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   2602a:	e008      	b.n	2603e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   2602c:	231f      	movs	r3, #31
   2602e:	18fb      	adds	r3, r7, r3
   26030:	22f4      	movs	r2, #244	; 0xf4
   26032:	701a      	strb	r2, [r3, #0]
   26034:	e003      	b.n	2603e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   26036:	231f      	movs	r3, #31
   26038:	18fb      	adds	r3, r7, r3
   2603a:	22f4      	movs	r2, #244	; 0xf4
   2603c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   2603e:	231f      	movs	r3, #31
   26040:	18fb      	adds	r3, r7, r3
   26042:	781b      	ldrb	r3, [r3, #0]
   26044:	b25b      	sxtb	r3, r3
}
   26046:	0018      	movs	r0, r3
   26048:	46bd      	mov	sp, r7
   2604a:	b009      	add	sp, #36	; 0x24
   2604c:	bd90      	pop	{r4, r7, pc}
   2604e:	46c0      	nop			; (mov r8, r8)
   26050:	00038507 	.word	0x00038507
   26054:	00023bd5 	.word	0x00023bd5
   26058:	000c0008 	.word	0x000c0008
   2605c:	00025c65 	.word	0x00025c65
   26060:	00025cd9 	.word	0x00025cd9
   26064:	00001354 	.word	0x00001354

00026068 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   26068:	b590      	push	{r4, r7, lr}
   2606a:	b085      	sub	sp, #20
   2606c:	af00      	add	r7, sp, #0
   2606e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   26070:	230f      	movs	r3, #15
   26072:	18fb      	adds	r3, r7, r3
   26074:	2200      	movs	r2, #0
   26076:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   26078:	687b      	ldr	r3, [r7, #4]
   2607a:	2b00      	cmp	r3, #0
   2607c:	d013      	beq.n	260a6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   2607e:	230e      	movs	r3, #14
   26080:	18fb      	adds	r3, r7, r3
   26082:	687a      	ldr	r2, [r7, #4]
   26084:	7812      	ldrb	r2, [r2, #0]
   26086:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   26088:	230e      	movs	r3, #14
   2608a:	18fb      	adds	r3, r7, r3
   2608c:	781b      	ldrb	r3, [r3, #0]
   2608e:	2b00      	cmp	r3, #0
   26090:	d004      	beq.n	2609c <nm_drv_init+0x34>
   26092:	230e      	movs	r3, #14
   26094:	18fb      	adds	r3, r7, r3
   26096:	781b      	ldrb	r3, [r3, #0]
   26098:	2b04      	cmp	r3, #4
   2609a:	d908      	bls.n	260ae <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   2609c:	230e      	movs	r3, #14
   2609e:	18fb      	adds	r3, r7, r3
   260a0:	2201      	movs	r2, #1
   260a2:	701a      	strb	r2, [r3, #0]
   260a4:	e003      	b.n	260ae <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   260a6:	230e      	movs	r3, #14
   260a8:	18fb      	adds	r3, r7, r3
   260aa:	2201      	movs	r2, #1
   260ac:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   260ae:	230f      	movs	r3, #15
   260b0:	18fc      	adds	r4, r7, r3
   260b2:	2000      	movs	r0, #0
   260b4:	4b41      	ldr	r3, [pc, #260]	; (261bc <nm_drv_init+0x154>)
   260b6:	4798      	blx	r3
   260b8:	0003      	movs	r3, r0
   260ba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   260bc:	230f      	movs	r3, #15
   260be:	18fb      	adds	r3, r7, r3
   260c0:	781b      	ldrb	r3, [r3, #0]
   260c2:	b25b      	sxtb	r3, r3
   260c4:	2b00      	cmp	r3, #0
   260c6:	d00f      	beq.n	260e8 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   260c8:	2390      	movs	r3, #144	; 0x90
   260ca:	005a      	lsls	r2, r3, #1
   260cc:	493c      	ldr	r1, [pc, #240]	; (261c0 <nm_drv_init+0x158>)
   260ce:	4b3d      	ldr	r3, [pc, #244]	; (261c4 <nm_drv_init+0x15c>)
   260d0:	0018      	movs	r0, r3
   260d2:	4b3d      	ldr	r3, [pc, #244]	; (261c8 <nm_drv_init+0x160>)
   260d4:	4798      	blx	r3
   260d6:	4b3d      	ldr	r3, [pc, #244]	; (261cc <nm_drv_init+0x164>)
   260d8:	0018      	movs	r0, r3
   260da:	4b3b      	ldr	r3, [pc, #236]	; (261c8 <nm_drv_init+0x160>)
   260dc:	4798      	blx	r3
   260de:	4b3c      	ldr	r3, [pc, #240]	; (261d0 <nm_drv_init+0x168>)
   260e0:	0018      	movs	r0, r3
   260e2:	4b39      	ldr	r3, [pc, #228]	; (261c8 <nm_drv_init+0x160>)
   260e4:	4798      	blx	r3
		goto ERR1;
   260e6:	e061      	b.n	261ac <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   260e8:	4b3a      	ldr	r3, [pc, #232]	; (261d4 <nm_drv_init+0x16c>)
   260ea:	0018      	movs	r0, r3
   260ec:	4b36      	ldr	r3, [pc, #216]	; (261c8 <nm_drv_init+0x160>)
   260ee:	4798      	blx	r3
   260f0:	4b39      	ldr	r3, [pc, #228]	; (261d8 <nm_drv_init+0x170>)
   260f2:	4798      	blx	r3
   260f4:	0002      	movs	r2, r0
   260f6:	4b39      	ldr	r3, [pc, #228]	; (261dc <nm_drv_init+0x174>)
   260f8:	0011      	movs	r1, r2
   260fa:	0018      	movs	r0, r3
   260fc:	4b32      	ldr	r3, [pc, #200]	; (261c8 <nm_drv_init+0x160>)
   260fe:	4798      	blx	r3
   26100:	4b33      	ldr	r3, [pc, #204]	; (261d0 <nm_drv_init+0x168>)
   26102:	0018      	movs	r0, r3
   26104:	4b30      	ldr	r3, [pc, #192]	; (261c8 <nm_drv_init+0x160>)
   26106:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   26108:	4b35      	ldr	r3, [pc, #212]	; (261e0 <nm_drv_init+0x178>)
   2610a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   2610c:	230f      	movs	r3, #15
   2610e:	18fc      	adds	r4, r7, r3
   26110:	230e      	movs	r3, #14
   26112:	18fb      	adds	r3, r7, r3
   26114:	781b      	ldrb	r3, [r3, #0]
   26116:	0018      	movs	r0, r3
   26118:	4b32      	ldr	r3, [pc, #200]	; (261e4 <nm_drv_init+0x17c>)
   2611a:	4798      	blx	r3
   2611c:	0003      	movs	r3, r0
   2611e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   26120:	230f      	movs	r3, #15
   26122:	18fb      	adds	r3, r7, r3
   26124:	781b      	ldrb	r3, [r3, #0]
   26126:	b25b      	sxtb	r3, r3
   26128:	2b00      	cmp	r3, #0
   2612a:	d13a      	bne.n	261a2 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   2612c:	230f      	movs	r3, #15
   2612e:	18fc      	adds	r4, r7, r3
   26130:	230e      	movs	r3, #14
   26132:	18fb      	adds	r3, r7, r3
   26134:	781b      	ldrb	r3, [r3, #0]
   26136:	0018      	movs	r0, r3
   26138:	4b2b      	ldr	r3, [pc, #172]	; (261e8 <nm_drv_init+0x180>)
   2613a:	4798      	blx	r3
   2613c:	0003      	movs	r3, r0
   2613e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   26140:	230f      	movs	r3, #15
   26142:	18fb      	adds	r3, r7, r3
   26144:	781b      	ldrb	r3, [r3, #0]
   26146:	b25b      	sxtb	r3, r3
   26148:	2b00      	cmp	r3, #0
   2614a:	d12c      	bne.n	261a6 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   2614c:	230e      	movs	r3, #14
   2614e:	18fb      	adds	r3, r7, r3
   26150:	781b      	ldrb	r3, [r3, #0]
   26152:	2b02      	cmp	r3, #2
   26154:	d02a      	beq.n	261ac <nm_drv_init+0x144>
   26156:	230e      	movs	r3, #14
   26158:	18fb      	adds	r3, r7, r3
   2615a:	781b      	ldrb	r3, [r3, #0]
   2615c:	2b03      	cmp	r3, #3
   2615e:	d025      	beq.n	261ac <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   26160:	230f      	movs	r3, #15
   26162:	18fc      	adds	r4, r7, r3
   26164:	4b21      	ldr	r3, [pc, #132]	; (261ec <nm_drv_init+0x184>)
   26166:	4798      	blx	r3
   26168:	0003      	movs	r3, r0
   2616a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2616c:	230f      	movs	r3, #15
   2616e:	18fb      	adds	r3, r7, r3
   26170:	781b      	ldrb	r3, [r3, #0]
   26172:	b25b      	sxtb	r3, r3
   26174:	2b00      	cmp	r3, #0
   26176:	d00f      	beq.n	26198 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   26178:	23a7      	movs	r3, #167	; 0xa7
   2617a:	005a      	lsls	r2, r3, #1
   2617c:	4910      	ldr	r1, [pc, #64]	; (261c0 <nm_drv_init+0x158>)
   2617e:	4b11      	ldr	r3, [pc, #68]	; (261c4 <nm_drv_init+0x15c>)
   26180:	0018      	movs	r0, r3
   26182:	4b11      	ldr	r3, [pc, #68]	; (261c8 <nm_drv_init+0x160>)
   26184:	4798      	blx	r3
   26186:	4b1a      	ldr	r3, [pc, #104]	; (261f0 <nm_drv_init+0x188>)
   26188:	0018      	movs	r0, r3
   2618a:	4b0f      	ldr	r3, [pc, #60]	; (261c8 <nm_drv_init+0x160>)
   2618c:	4798      	blx	r3
   2618e:	4b10      	ldr	r3, [pc, #64]	; (261d0 <nm_drv_init+0x168>)
   26190:	0018      	movs	r0, r3
   26192:	4b0d      	ldr	r3, [pc, #52]	; (261c8 <nm_drv_init+0x160>)
   26194:	4798      	blx	r3
		goto ERR2;
   26196:	e007      	b.n	261a8 <nm_drv_init+0x140>
	}
	return ret;
   26198:	230f      	movs	r3, #15
   2619a:	18fb      	adds	r3, r7, r3
   2619c:	781b      	ldrb	r3, [r3, #0]
   2619e:	b25b      	sxtb	r3, r3
   261a0:	e008      	b.n	261b4 <nm_drv_init+0x14c>
		goto ERR2;
   261a2:	46c0      	nop			; (mov r8, r8)
   261a4:	e000      	b.n	261a8 <nm_drv_init+0x140>
		goto ERR2;
   261a6:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   261a8:	4b12      	ldr	r3, [pc, #72]	; (261f4 <nm_drv_init+0x18c>)
   261aa:	4798      	blx	r3
ERR1:
	return ret;
   261ac:	230f      	movs	r3, #15
   261ae:	18fb      	adds	r3, r7, r3
   261b0:	781b      	ldrb	r3, [r3, #0]
   261b2:	b25b      	sxtb	r3, r3
}
   261b4:	0018      	movs	r0, r3
   261b6:	46bd      	mov	sp, r7
   261b8:	b005      	add	sp, #20
   261ba:	bd90      	pop	{r4, r7, pc}
   261bc:	00025bc9 	.word	0x00025bc9
   261c0:	0003d22c 	.word	0x0003d22c
   261c4:	0003d15c 	.word	0x0003d15c
   261c8:	00020e3d 	.word	0x00020e3d
   261cc:	0003d170 	.word	0x0003d170
   261d0:	0003d18c 	.word	0x0003d18c
   261d4:	0003d190 	.word	0x0003d190
   261d8:	00025565 	.word	0x00025565
   261dc:	0003d19c 	.word	0x0003d19c
   261e0:	00027a81 	.word	0x00027a81
   261e4:	000258bd 	.word	0x000258bd
   261e8:	00025a55 	.word	0x00025a55
   261ec:	000254b1 	.word	0x000254b1
   261f0:	0003d1ac 	.word	0x0003d1ac
   261f4:	00025bfd 	.word	0x00025bfd

000261f8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   261f8:	b590      	push	{r4, r7, lr}
   261fa:	b085      	sub	sp, #20
   261fc:	af00      	add	r7, sp, #0
   261fe:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   26200:	230f      	movs	r3, #15
   26202:	18fc      	adds	r4, r7, r3
   26204:	4b2e      	ldr	r3, [pc, #184]	; (262c0 <nm_drv_deinit+0xc8>)
   26206:	4798      	blx	r3
   26208:	0003      	movs	r3, r0
   2620a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2620c:	230f      	movs	r3, #15
   2620e:	18fb      	adds	r3, r7, r3
   26210:	781b      	ldrb	r3, [r3, #0]
   26212:	b25b      	sxtb	r3, r3
   26214:	2b00      	cmp	r3, #0
   26216:	d010      	beq.n	2623a <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   26218:	2366      	movs	r3, #102	; 0x66
   2621a:	33ff      	adds	r3, #255	; 0xff
   2621c:	001a      	movs	r2, r3
   2621e:	4929      	ldr	r1, [pc, #164]	; (262c4 <nm_drv_deinit+0xcc>)
   26220:	4b29      	ldr	r3, [pc, #164]	; (262c8 <nm_drv_deinit+0xd0>)
   26222:	0018      	movs	r0, r3
   26224:	4b29      	ldr	r3, [pc, #164]	; (262cc <nm_drv_deinit+0xd4>)
   26226:	4798      	blx	r3
   26228:	4b29      	ldr	r3, [pc, #164]	; (262d0 <nm_drv_deinit+0xd8>)
   2622a:	0018      	movs	r0, r3
   2622c:	4b27      	ldr	r3, [pc, #156]	; (262cc <nm_drv_deinit+0xd4>)
   2622e:	4798      	blx	r3
   26230:	4b28      	ldr	r3, [pc, #160]	; (262d4 <nm_drv_deinit+0xdc>)
   26232:	0018      	movs	r0, r3
   26234:	4b25      	ldr	r3, [pc, #148]	; (262cc <nm_drv_deinit+0xd4>)
   26236:	4798      	blx	r3
		goto ERR1;
   26238:	e03a      	b.n	262b0 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   2623a:	230f      	movs	r3, #15
   2623c:	18fc      	adds	r4, r7, r3
   2623e:	2000      	movs	r0, #0
   26240:	4b25      	ldr	r3, [pc, #148]	; (262d8 <nm_drv_deinit+0xe0>)
   26242:	4798      	blx	r3
   26244:	0003      	movs	r3, r0
   26246:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   26248:	230f      	movs	r3, #15
   2624a:	18fb      	adds	r3, r7, r3
   2624c:	781b      	ldrb	r3, [r3, #0]
   2624e:	b25b      	sxtb	r3, r3
   26250:	2b00      	cmp	r3, #0
   26252:	d00f      	beq.n	26274 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   26254:	23b6      	movs	r3, #182	; 0xb6
   26256:	005a      	lsls	r2, r3, #1
   26258:	491a      	ldr	r1, [pc, #104]	; (262c4 <nm_drv_deinit+0xcc>)
   2625a:	4b1b      	ldr	r3, [pc, #108]	; (262c8 <nm_drv_deinit+0xd0>)
   2625c:	0018      	movs	r0, r3
   2625e:	4b1b      	ldr	r3, [pc, #108]	; (262cc <nm_drv_deinit+0xd4>)
   26260:	4798      	blx	r3
   26262:	4b1e      	ldr	r3, [pc, #120]	; (262dc <nm_drv_deinit+0xe4>)
   26264:	0018      	movs	r0, r3
   26266:	4b19      	ldr	r3, [pc, #100]	; (262cc <nm_drv_deinit+0xd4>)
   26268:	4798      	blx	r3
   2626a:	4b1a      	ldr	r3, [pc, #104]	; (262d4 <nm_drv_deinit+0xdc>)
   2626c:	0018      	movs	r0, r3
   2626e:	4b17      	ldr	r3, [pc, #92]	; (262cc <nm_drv_deinit+0xd4>)
   26270:	4798      	blx	r3
		goto ERR1;
   26272:	e01d      	b.n	262b0 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   26274:	230f      	movs	r3, #15
   26276:	18fc      	adds	r4, r7, r3
   26278:	4b19      	ldr	r3, [pc, #100]	; (262e0 <nm_drv_deinit+0xe8>)
   2627a:	4798      	blx	r3
   2627c:	0003      	movs	r3, r0
   2627e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   26280:	230f      	movs	r3, #15
   26282:	18fb      	adds	r3, r7, r3
   26284:	781b      	ldrb	r3, [r3, #0]
   26286:	b25b      	sxtb	r3, r3
   26288:	2b00      	cmp	r3, #0
   2628a:	d00f      	beq.n	262ac <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   2628c:	23b9      	movs	r3, #185	; 0xb9
   2628e:	005a      	lsls	r2, r3, #1
   26290:	490c      	ldr	r1, [pc, #48]	; (262c4 <nm_drv_deinit+0xcc>)
   26292:	4b0d      	ldr	r3, [pc, #52]	; (262c8 <nm_drv_deinit+0xd0>)
   26294:	0018      	movs	r0, r3
   26296:	4b0d      	ldr	r3, [pc, #52]	; (262cc <nm_drv_deinit+0xd4>)
   26298:	4798      	blx	r3
   2629a:	4b12      	ldr	r3, [pc, #72]	; (262e4 <nm_drv_deinit+0xec>)
   2629c:	0018      	movs	r0, r3
   2629e:	4b0b      	ldr	r3, [pc, #44]	; (262cc <nm_drv_deinit+0xd4>)
   262a0:	4798      	blx	r3
   262a2:	4b0c      	ldr	r3, [pc, #48]	; (262d4 <nm_drv_deinit+0xdc>)
   262a4:	0018      	movs	r0, r3
   262a6:	4b09      	ldr	r3, [pc, #36]	; (262cc <nm_drv_deinit+0xd4>)
   262a8:	4798      	blx	r3
		goto ERR1;
   262aa:	e001      	b.n	262b0 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   262ac:	4b0e      	ldr	r3, [pc, #56]	; (262e8 <nm_drv_deinit+0xf0>)
   262ae:	4798      	blx	r3
#endif

ERR1:
	return ret;
   262b0:	230f      	movs	r3, #15
   262b2:	18fb      	adds	r3, r7, r3
   262b4:	781b      	ldrb	r3, [r3, #0]
   262b6:	b25b      	sxtb	r3, r3
}
   262b8:	0018      	movs	r0, r3
   262ba:	46bd      	mov	sp, r7
   262bc:	b005      	add	sp, #20
   262be:	bd90      	pop	{r4, r7, pc}
   262c0:	00025b09 	.word	0x00025b09
   262c4:	0003d238 	.word	0x0003d238
   262c8:	0003d15c 	.word	0x0003d15c
   262cc:	00020e3d 	.word	0x00020e3d
   262d0:	0003d1cc 	.word	0x0003d1cc
   262d4:	0003d18c 	.word	0x0003d18c
   262d8:	00028f29 	.word	0x00028f29
   262dc:	0003d1ec 	.word	0x0003d1ec
   262e0:	00025bfd 	.word	0x00025bfd
   262e4:	0003d210 	.word	0x0003d210
   262e8:	00027bcd 	.word	0x00027bcd

000262ec <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   262ec:	b580      	push	{r7, lr}
   262ee:	b086      	sub	sp, #24
   262f0:	af00      	add	r7, sp, #0
   262f2:	6078      	str	r0, [r7, #4]
   262f4:	000a      	movs	r2, r1
   262f6:	1cbb      	adds	r3, r7, #2
   262f8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   262fa:	230c      	movs	r3, #12
   262fc:	18fb      	adds	r3, r7, r3
   262fe:	2200      	movs	r2, #0
   26300:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   26302:	230c      	movs	r3, #12
   26304:	18fb      	adds	r3, r7, r3
   26306:	687a      	ldr	r2, [r7, #4]
   26308:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2630a:	230c      	movs	r3, #12
   2630c:	18fb      	adds	r3, r7, r3
   2630e:	1cba      	adds	r2, r7, #2
   26310:	8812      	ldrh	r2, [r2, #0]
   26312:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   26314:	230c      	movs	r3, #12
   26316:	18fb      	adds	r3, r7, r3
   26318:	0019      	movs	r1, r3
   2631a:	2003      	movs	r0, #3
   2631c:	4b03      	ldr	r3, [pc, #12]	; (2632c <nmi_spi_read+0x40>)
   2631e:	4798      	blx	r3
   26320:	0003      	movs	r3, r0
}
   26322:	0018      	movs	r0, r3
   26324:	46bd      	mov	sp, r7
   26326:	b006      	add	sp, #24
   26328:	bd80      	pop	{r7, pc}
   2632a:	46c0      	nop			; (mov r8, r8)
   2632c:	00023a99 	.word	0x00023a99

00026330 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   26330:	b580      	push	{r7, lr}
   26332:	b086      	sub	sp, #24
   26334:	af00      	add	r7, sp, #0
   26336:	6078      	str	r0, [r7, #4]
   26338:	000a      	movs	r2, r1
   2633a:	1cbb      	adds	r3, r7, #2
   2633c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2633e:	230c      	movs	r3, #12
   26340:	18fb      	adds	r3, r7, r3
   26342:	687a      	ldr	r2, [r7, #4]
   26344:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   26346:	230c      	movs	r3, #12
   26348:	18fb      	adds	r3, r7, r3
   2634a:	2200      	movs	r2, #0
   2634c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2634e:	230c      	movs	r3, #12
   26350:	18fb      	adds	r3, r7, r3
   26352:	1cba      	adds	r2, r7, #2
   26354:	8812      	ldrh	r2, [r2, #0]
   26356:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   26358:	230c      	movs	r3, #12
   2635a:	18fb      	adds	r3, r7, r3
   2635c:	0019      	movs	r1, r3
   2635e:	2003      	movs	r0, #3
   26360:	4b03      	ldr	r3, [pc, #12]	; (26370 <nmi_spi_write+0x40>)
   26362:	4798      	blx	r3
   26364:	0003      	movs	r3, r0
}
   26366:	0018      	movs	r0, r3
   26368:	46bd      	mov	sp, r7
   2636a:	b006      	add	sp, #24
   2636c:	bd80      	pop	{r7, pc}
   2636e:	46c0      	nop			; (mov r8, r8)
   26370:	00023a99 	.word	0x00023a99

00026374 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   26374:	b580      	push	{r7, lr}
   26376:	b088      	sub	sp, #32
   26378:	af00      	add	r7, sp, #0
   2637a:	60f8      	str	r0, [r7, #12]
   2637c:	60b9      	str	r1, [r7, #8]
   2637e:	1dbb      	adds	r3, r7, #6
   26380:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   26382:	2314      	movs	r3, #20
   26384:	18fb      	adds	r3, r7, r3
   26386:	68fa      	ldr	r2, [r7, #12]
   26388:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   2638a:	2314      	movs	r3, #20
   2638c:	18fb      	adds	r3, r7, r3
   2638e:	68ba      	ldr	r2, [r7, #8]
   26390:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   26392:	2314      	movs	r3, #20
   26394:	18fb      	adds	r3, r7, r3
   26396:	1dba      	adds	r2, r7, #6
   26398:	8812      	ldrh	r2, [r2, #0]
   2639a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   2639c:	2314      	movs	r3, #20
   2639e:	18fb      	adds	r3, r7, r3
   263a0:	0019      	movs	r1, r3
   263a2:	2003      	movs	r0, #3
   263a4:	4b03      	ldr	r3, [pc, #12]	; (263b4 <nmi_spi_rw+0x40>)
   263a6:	4798      	blx	r3
   263a8:	0003      	movs	r3, r0
}
   263aa:	0018      	movs	r0, r3
   263ac:	46bd      	mov	sp, r7
   263ae:	b008      	add	sp, #32
   263b0:	bd80      	pop	{r7, pc}
   263b2:	46c0      	nop			; (mov r8, r8)
   263b4:	00023a99 	.word	0x00023a99

000263b8 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   263b8:	b580      	push	{r7, lr}
   263ba:	b082      	sub	sp, #8
   263bc:	af00      	add	r7, sp, #0
   263be:	0002      	movs	r2, r0
   263c0:	1dfb      	adds	r3, r7, #7
   263c2:	701a      	strb	r2, [r3, #0]
   263c4:	1dbb      	adds	r3, r7, #6
   263c6:	1c0a      	adds	r2, r1, #0
   263c8:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   263ca:	1dfb      	adds	r3, r7, #7
   263cc:	781b      	ldrb	r3, [r3, #0]
   263ce:	005a      	lsls	r2, r3, #1
   263d0:	1dbb      	adds	r3, r7, #6
   263d2:	781b      	ldrb	r3, [r3, #0]
   263d4:	4053      	eors	r3, r2
   263d6:	4a03      	ldr	r2, [pc, #12]	; (263e4 <crc7_byte+0x2c>)
   263d8:	5cd3      	ldrb	r3, [r2, r3]
}
   263da:	0018      	movs	r0, r3
   263dc:	46bd      	mov	sp, r7
   263de:	b002      	add	sp, #8
   263e0:	bd80      	pop	{r7, pc}
   263e2:	46c0      	nop			; (mov r8, r8)
   263e4:	0003d248 	.word	0x0003d248

000263e8 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   263e8:	b590      	push	{r4, r7, lr}
   263ea:	b085      	sub	sp, #20
   263ec:	af00      	add	r7, sp, #0
   263ee:	60b9      	str	r1, [r7, #8]
   263f0:	607a      	str	r2, [r7, #4]
   263f2:	230f      	movs	r3, #15
   263f4:	18fb      	adds	r3, r7, r3
   263f6:	1c02      	adds	r2, r0, #0
   263f8:	701a      	strb	r2, [r3, #0]
	while (len--)
   263fa:	e00e      	b.n	2641a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   263fc:	68bb      	ldr	r3, [r7, #8]
   263fe:	1c5a      	adds	r2, r3, #1
   26400:	60ba      	str	r2, [r7, #8]
   26402:	781a      	ldrb	r2, [r3, #0]
   26404:	230f      	movs	r3, #15
   26406:	18fc      	adds	r4, r7, r3
   26408:	230f      	movs	r3, #15
   2640a:	18fb      	adds	r3, r7, r3
   2640c:	781b      	ldrb	r3, [r3, #0]
   2640e:	0011      	movs	r1, r2
   26410:	0018      	movs	r0, r3
   26412:	4b08      	ldr	r3, [pc, #32]	; (26434 <crc7+0x4c>)
   26414:	4798      	blx	r3
   26416:	0003      	movs	r3, r0
   26418:	7023      	strb	r3, [r4, #0]
	while (len--)
   2641a:	687b      	ldr	r3, [r7, #4]
   2641c:	1e5a      	subs	r2, r3, #1
   2641e:	607a      	str	r2, [r7, #4]
   26420:	2b00      	cmp	r3, #0
   26422:	d1eb      	bne.n	263fc <crc7+0x14>
	return crc;
   26424:	230f      	movs	r3, #15
   26426:	18fb      	adds	r3, r7, r3
   26428:	781b      	ldrb	r3, [r3, #0]
}
   2642a:	0018      	movs	r0, r3
   2642c:	46bd      	mov	sp, r7
   2642e:	b005      	add	sp, #20
   26430:	bd90      	pop	{r4, r7, pc}
   26432:	46c0      	nop			; (mov r8, r8)
   26434:	000263b9 	.word	0x000263b9

00026438 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   26438:	b590      	push	{r4, r7, lr}
   2643a:	b089      	sub	sp, #36	; 0x24
   2643c:	af00      	add	r7, sp, #0
   2643e:	60b9      	str	r1, [r7, #8]
   26440:	607a      	str	r2, [r7, #4]
   26442:	603b      	str	r3, [r7, #0]
   26444:	230f      	movs	r3, #15
   26446:	18fb      	adds	r3, r7, r3
   26448:	1c02      	adds	r2, r0, #0
   2644a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   2644c:	231f      	movs	r3, #31
   2644e:	18fb      	adds	r3, r7, r3
   26450:	2205      	movs	r2, #5
   26452:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   26454:	231e      	movs	r3, #30
   26456:	18fb      	adds	r3, r7, r3
   26458:	2201      	movs	r2, #1
   2645a:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   2645c:	2314      	movs	r3, #20
   2645e:	18fb      	adds	r3, r7, r3
   26460:	220f      	movs	r2, #15
   26462:	18ba      	adds	r2, r7, r2
   26464:	7812      	ldrb	r2, [r2, #0]
   26466:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   26468:	230f      	movs	r3, #15
   2646a:	18fb      	adds	r3, r7, r3
   2646c:	781b      	ldrb	r3, [r3, #0]
   2646e:	3bc1      	subs	r3, #193	; 0xc1
   26470:	2b0e      	cmp	r3, #14
   26472:	d900      	bls.n	26476 <spi_cmd+0x3e>
   26474:	e11b      	b.n	266ae <spi_cmd+0x276>
   26476:	009a      	lsls	r2, r3, #2
   26478:	4bb6      	ldr	r3, [pc, #728]	; (26754 <spi_cmd+0x31c>)
   2647a:	18d3      	adds	r3, r2, r3
   2647c:	681b      	ldr	r3, [r3, #0]
   2647e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   26480:	68bb      	ldr	r3, [r7, #8]
   26482:	0c1b      	lsrs	r3, r3, #16
   26484:	b2da      	uxtb	r2, r3
   26486:	2314      	movs	r3, #20
   26488:	18fb      	adds	r3, r7, r3
   2648a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2648c:	68bb      	ldr	r3, [r7, #8]
   2648e:	0a1b      	lsrs	r3, r3, #8
   26490:	b2da      	uxtb	r2, r3
   26492:	2314      	movs	r3, #20
   26494:	18fb      	adds	r3, r7, r3
   26496:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   26498:	68bb      	ldr	r3, [r7, #8]
   2649a:	b2da      	uxtb	r2, r3
   2649c:	2314      	movs	r3, #20
   2649e:	18fb      	adds	r3, r7, r3
   264a0:	70da      	strb	r2, [r3, #3]
		len = 5;
   264a2:	231f      	movs	r3, #31
   264a4:	18fb      	adds	r3, r7, r3
   264a6:	2205      	movs	r2, #5
   264a8:	701a      	strb	r2, [r3, #0]
		break;
   264aa:	e105      	b.n	266b8 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   264ac:	68bb      	ldr	r3, [r7, #8]
   264ae:	0a1b      	lsrs	r3, r3, #8
   264b0:	b2da      	uxtb	r2, r3
   264b2:	2314      	movs	r3, #20
   264b4:	18fb      	adds	r3, r7, r3
   264b6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   264b8:	2330      	movs	r3, #48	; 0x30
   264ba:	18fb      	adds	r3, r7, r3
   264bc:	781b      	ldrb	r3, [r3, #0]
   264be:	2b00      	cmp	r3, #0
   264c0:	d009      	beq.n	264d6 <spi_cmd+0x9e>
   264c2:	2314      	movs	r3, #20
   264c4:	18fb      	adds	r3, r7, r3
   264c6:	785b      	ldrb	r3, [r3, #1]
   264c8:	2280      	movs	r2, #128	; 0x80
   264ca:	4252      	negs	r2, r2
   264cc:	4313      	orrs	r3, r2
   264ce:	b2da      	uxtb	r2, r3
   264d0:	2314      	movs	r3, #20
   264d2:	18fb      	adds	r3, r7, r3
   264d4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   264d6:	68bb      	ldr	r3, [r7, #8]
   264d8:	b2da      	uxtb	r2, r3
   264da:	2314      	movs	r3, #20
   264dc:	18fb      	adds	r3, r7, r3
   264de:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   264e0:	2314      	movs	r3, #20
   264e2:	18fb      	adds	r3, r7, r3
   264e4:	2200      	movs	r2, #0
   264e6:	70da      	strb	r2, [r3, #3]
		len = 5;
   264e8:	231f      	movs	r3, #31
   264ea:	18fb      	adds	r3, r7, r3
   264ec:	2205      	movs	r2, #5
   264ee:	701a      	strb	r2, [r3, #0]
		break;
   264f0:	e0e2      	b.n	266b8 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   264f2:	2314      	movs	r3, #20
   264f4:	18fb      	adds	r3, r7, r3
   264f6:	2200      	movs	r2, #0
   264f8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   264fa:	2314      	movs	r3, #20
   264fc:	18fb      	adds	r3, r7, r3
   264fe:	2200      	movs	r2, #0
   26500:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   26502:	2314      	movs	r3, #20
   26504:	18fb      	adds	r3, r7, r3
   26506:	2200      	movs	r2, #0
   26508:	70da      	strb	r2, [r3, #3]
		len = 5;
   2650a:	231f      	movs	r3, #31
   2650c:	18fb      	adds	r3, r7, r3
   2650e:	2205      	movs	r2, #5
   26510:	701a      	strb	r2, [r3, #0]
		break;
   26512:	e0d1      	b.n	266b8 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   26514:	2314      	movs	r3, #20
   26516:	18fb      	adds	r3, r7, r3
   26518:	2200      	movs	r2, #0
   2651a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2651c:	2314      	movs	r3, #20
   2651e:	18fb      	adds	r3, r7, r3
   26520:	2200      	movs	r2, #0
   26522:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   26524:	2314      	movs	r3, #20
   26526:	18fb      	adds	r3, r7, r3
   26528:	2200      	movs	r2, #0
   2652a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2652c:	231f      	movs	r3, #31
   2652e:	18fb      	adds	r3, r7, r3
   26530:	2205      	movs	r2, #5
   26532:	701a      	strb	r2, [r3, #0]
		break;
   26534:	e0c0      	b.n	266b8 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   26536:	2314      	movs	r3, #20
   26538:	18fb      	adds	r3, r7, r3
   2653a:	22ff      	movs	r2, #255	; 0xff
   2653c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2653e:	2314      	movs	r3, #20
   26540:	18fb      	adds	r3, r7, r3
   26542:	22ff      	movs	r2, #255	; 0xff
   26544:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   26546:	2314      	movs	r3, #20
   26548:	18fb      	adds	r3, r7, r3
   2654a:	22ff      	movs	r2, #255	; 0xff
   2654c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2654e:	231f      	movs	r3, #31
   26550:	18fb      	adds	r3, r7, r3
   26552:	2205      	movs	r2, #5
   26554:	701a      	strb	r2, [r3, #0]
		break;
   26556:	e0af      	b.n	266b8 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   26558:	68bb      	ldr	r3, [r7, #8]
   2655a:	0c1b      	lsrs	r3, r3, #16
   2655c:	b2da      	uxtb	r2, r3
   2655e:	2314      	movs	r3, #20
   26560:	18fb      	adds	r3, r7, r3
   26562:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   26564:	68bb      	ldr	r3, [r7, #8]
   26566:	0a1b      	lsrs	r3, r3, #8
   26568:	b2da      	uxtb	r2, r3
   2656a:	2314      	movs	r3, #20
   2656c:	18fb      	adds	r3, r7, r3
   2656e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   26570:	68bb      	ldr	r3, [r7, #8]
   26572:	b2da      	uxtb	r2, r3
   26574:	2314      	movs	r3, #20
   26576:	18fb      	adds	r3, r7, r3
   26578:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   2657a:	683b      	ldr	r3, [r7, #0]
   2657c:	0a1b      	lsrs	r3, r3, #8
   2657e:	b2da      	uxtb	r2, r3
   26580:	2314      	movs	r3, #20
   26582:	18fb      	adds	r3, r7, r3
   26584:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   26586:	683b      	ldr	r3, [r7, #0]
   26588:	b2da      	uxtb	r2, r3
   2658a:	2314      	movs	r3, #20
   2658c:	18fb      	adds	r3, r7, r3
   2658e:	715a      	strb	r2, [r3, #5]
		len = 7;
   26590:	231f      	movs	r3, #31
   26592:	18fb      	adds	r3, r7, r3
   26594:	2207      	movs	r2, #7
   26596:	701a      	strb	r2, [r3, #0]
		break;
   26598:	e08e      	b.n	266b8 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   2659a:	68bb      	ldr	r3, [r7, #8]
   2659c:	0c1b      	lsrs	r3, r3, #16
   2659e:	b2da      	uxtb	r2, r3
   265a0:	2314      	movs	r3, #20
   265a2:	18fb      	adds	r3, r7, r3
   265a4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   265a6:	68bb      	ldr	r3, [r7, #8]
   265a8:	0a1b      	lsrs	r3, r3, #8
   265aa:	b2da      	uxtb	r2, r3
   265ac:	2314      	movs	r3, #20
   265ae:	18fb      	adds	r3, r7, r3
   265b0:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   265b2:	68bb      	ldr	r3, [r7, #8]
   265b4:	b2da      	uxtb	r2, r3
   265b6:	2314      	movs	r3, #20
   265b8:	18fb      	adds	r3, r7, r3
   265ba:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   265bc:	683b      	ldr	r3, [r7, #0]
   265be:	0c1b      	lsrs	r3, r3, #16
   265c0:	b2da      	uxtb	r2, r3
   265c2:	2314      	movs	r3, #20
   265c4:	18fb      	adds	r3, r7, r3
   265c6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   265c8:	683b      	ldr	r3, [r7, #0]
   265ca:	0a1b      	lsrs	r3, r3, #8
   265cc:	b2da      	uxtb	r2, r3
   265ce:	2314      	movs	r3, #20
   265d0:	18fb      	adds	r3, r7, r3
   265d2:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   265d4:	683b      	ldr	r3, [r7, #0]
   265d6:	b2da      	uxtb	r2, r3
   265d8:	2314      	movs	r3, #20
   265da:	18fb      	adds	r3, r7, r3
   265dc:	719a      	strb	r2, [r3, #6]
		len = 8;
   265de:	231f      	movs	r3, #31
   265e0:	18fb      	adds	r3, r7, r3
   265e2:	2208      	movs	r2, #8
   265e4:	701a      	strb	r2, [r3, #0]
		break;
   265e6:	e067      	b.n	266b8 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   265e8:	68bb      	ldr	r3, [r7, #8]
   265ea:	0a1b      	lsrs	r3, r3, #8
   265ec:	b2da      	uxtb	r2, r3
   265ee:	2314      	movs	r3, #20
   265f0:	18fb      	adds	r3, r7, r3
   265f2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   265f4:	2330      	movs	r3, #48	; 0x30
   265f6:	18fb      	adds	r3, r7, r3
   265f8:	781b      	ldrb	r3, [r3, #0]
   265fa:	2b00      	cmp	r3, #0
   265fc:	d009      	beq.n	26612 <spi_cmd+0x1da>
   265fe:	2314      	movs	r3, #20
   26600:	18fb      	adds	r3, r7, r3
   26602:	785b      	ldrb	r3, [r3, #1]
   26604:	2280      	movs	r2, #128	; 0x80
   26606:	4252      	negs	r2, r2
   26608:	4313      	orrs	r3, r2
   2660a:	b2da      	uxtb	r2, r3
   2660c:	2314      	movs	r3, #20
   2660e:	18fb      	adds	r3, r7, r3
   26610:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   26612:	68bb      	ldr	r3, [r7, #8]
   26614:	b2da      	uxtb	r2, r3
   26616:	2314      	movs	r3, #20
   26618:	18fb      	adds	r3, r7, r3
   2661a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   2661c:	687b      	ldr	r3, [r7, #4]
   2661e:	0e1b      	lsrs	r3, r3, #24
   26620:	b2da      	uxtb	r2, r3
   26622:	2314      	movs	r3, #20
   26624:	18fb      	adds	r3, r7, r3
   26626:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   26628:	687b      	ldr	r3, [r7, #4]
   2662a:	0c1b      	lsrs	r3, r3, #16
   2662c:	b2da      	uxtb	r2, r3
   2662e:	2314      	movs	r3, #20
   26630:	18fb      	adds	r3, r7, r3
   26632:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   26634:	687b      	ldr	r3, [r7, #4]
   26636:	0a1b      	lsrs	r3, r3, #8
   26638:	b2da      	uxtb	r2, r3
   2663a:	2314      	movs	r3, #20
   2663c:	18fb      	adds	r3, r7, r3
   2663e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   26640:	687b      	ldr	r3, [r7, #4]
   26642:	b2da      	uxtb	r2, r3
   26644:	2314      	movs	r3, #20
   26646:	18fb      	adds	r3, r7, r3
   26648:	719a      	strb	r2, [r3, #6]
		len = 8;
   2664a:	231f      	movs	r3, #31
   2664c:	18fb      	adds	r3, r7, r3
   2664e:	2208      	movs	r2, #8
   26650:	701a      	strb	r2, [r3, #0]
		break;
   26652:	e031      	b.n	266b8 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   26654:	68bb      	ldr	r3, [r7, #8]
   26656:	0c1b      	lsrs	r3, r3, #16
   26658:	b2da      	uxtb	r2, r3
   2665a:	2314      	movs	r3, #20
   2665c:	18fb      	adds	r3, r7, r3
   2665e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   26660:	68bb      	ldr	r3, [r7, #8]
   26662:	0a1b      	lsrs	r3, r3, #8
   26664:	b2da      	uxtb	r2, r3
   26666:	2314      	movs	r3, #20
   26668:	18fb      	adds	r3, r7, r3
   2666a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   2666c:	68bb      	ldr	r3, [r7, #8]
   2666e:	b2da      	uxtb	r2, r3
   26670:	2314      	movs	r3, #20
   26672:	18fb      	adds	r3, r7, r3
   26674:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   26676:	687b      	ldr	r3, [r7, #4]
   26678:	0e1b      	lsrs	r3, r3, #24
   2667a:	b2da      	uxtb	r2, r3
   2667c:	2314      	movs	r3, #20
   2667e:	18fb      	adds	r3, r7, r3
   26680:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   26682:	687b      	ldr	r3, [r7, #4]
   26684:	0c1b      	lsrs	r3, r3, #16
   26686:	b2da      	uxtb	r2, r3
   26688:	2314      	movs	r3, #20
   2668a:	18fb      	adds	r3, r7, r3
   2668c:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2668e:	687b      	ldr	r3, [r7, #4]
   26690:	0a1b      	lsrs	r3, r3, #8
   26692:	b2da      	uxtb	r2, r3
   26694:	2314      	movs	r3, #20
   26696:	18fb      	adds	r3, r7, r3
   26698:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   2669a:	687b      	ldr	r3, [r7, #4]
   2669c:	b2da      	uxtb	r2, r3
   2669e:	2314      	movs	r3, #20
   266a0:	18fb      	adds	r3, r7, r3
   266a2:	71da      	strb	r2, [r3, #7]
		len = 9;
   266a4:	231f      	movs	r3, #31
   266a6:	18fb      	adds	r3, r7, r3
   266a8:	2209      	movs	r2, #9
   266aa:	701a      	strb	r2, [r3, #0]
		break;
   266ac:	e004      	b.n	266b8 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   266ae:	231e      	movs	r3, #30
   266b0:	18fb      	adds	r3, r7, r3
   266b2:	2200      	movs	r2, #0
   266b4:	701a      	strb	r2, [r3, #0]
		break;
   266b6:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   266b8:	231e      	movs	r3, #30
   266ba:	18fb      	adds	r3, r7, r3
   266bc:	781b      	ldrb	r3, [r3, #0]
   266be:	b25b      	sxtb	r3, r3
   266c0:	2b00      	cmp	r3, #0
   266c2:	d03f      	beq.n	26744 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   266c4:	4b24      	ldr	r3, [pc, #144]	; (26758 <spi_cmd+0x320>)
   266c6:	781b      	ldrb	r3, [r3, #0]
   266c8:	2b00      	cmp	r3, #0
   266ca:	d115      	bne.n	266f8 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   266cc:	231f      	movs	r3, #31
   266ce:	18fb      	adds	r3, r7, r3
   266d0:	781b      	ldrb	r3, [r3, #0]
   266d2:	1e5c      	subs	r4, r3, #1
   266d4:	231f      	movs	r3, #31
   266d6:	18fb      	adds	r3, r7, r3
   266d8:	781b      	ldrb	r3, [r3, #0]
   266da:	3b01      	subs	r3, #1
   266dc:	001a      	movs	r2, r3
   266de:	2314      	movs	r3, #20
   266e0:	18fb      	adds	r3, r7, r3
   266e2:	0019      	movs	r1, r3
   266e4:	207f      	movs	r0, #127	; 0x7f
   266e6:	4b1d      	ldr	r3, [pc, #116]	; (2675c <spi_cmd+0x324>)
   266e8:	4798      	blx	r3
   266ea:	0003      	movs	r3, r0
   266ec:	18db      	adds	r3, r3, r3
   266ee:	b2da      	uxtb	r2, r3
   266f0:	2314      	movs	r3, #20
   266f2:	18fb      	adds	r3, r7, r3
   266f4:	551a      	strb	r2, [r3, r4]
   266f6:	e006      	b.n	26706 <spi_cmd+0x2ce>
		else
			len-=1;
   266f8:	231f      	movs	r3, #31
   266fa:	18fb      	adds	r3, r7, r3
   266fc:	221f      	movs	r2, #31
   266fe:	18ba      	adds	r2, r7, r2
   26700:	7812      	ldrb	r2, [r2, #0]
   26702:	3a01      	subs	r2, #1
   26704:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   26706:	231f      	movs	r3, #31
   26708:	18fb      	adds	r3, r7, r3
   2670a:	781b      	ldrb	r3, [r3, #0]
   2670c:	b29a      	uxth	r2, r3
   2670e:	2314      	movs	r3, #20
   26710:	18fb      	adds	r3, r7, r3
   26712:	0011      	movs	r1, r2
   26714:	0018      	movs	r0, r3
   26716:	4b12      	ldr	r3, [pc, #72]	; (26760 <spi_cmd+0x328>)
   26718:	4798      	blx	r3
   2671a:	1e03      	subs	r3, r0, #0
   2671c:	d012      	beq.n	26744 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2671e:	2390      	movs	r3, #144	; 0x90
   26720:	005a      	lsls	r2, r3, #1
   26722:	4910      	ldr	r1, [pc, #64]	; (26764 <spi_cmd+0x32c>)
   26724:	4b10      	ldr	r3, [pc, #64]	; (26768 <spi_cmd+0x330>)
   26726:	0018      	movs	r0, r3
   26728:	4b10      	ldr	r3, [pc, #64]	; (2676c <spi_cmd+0x334>)
   2672a:	4798      	blx	r3
   2672c:	4b10      	ldr	r3, [pc, #64]	; (26770 <spi_cmd+0x338>)
   2672e:	0018      	movs	r0, r3
   26730:	4b0e      	ldr	r3, [pc, #56]	; (2676c <spi_cmd+0x334>)
   26732:	4798      	blx	r3
   26734:	4b0f      	ldr	r3, [pc, #60]	; (26774 <spi_cmd+0x33c>)
   26736:	0018      	movs	r0, r3
   26738:	4b0c      	ldr	r3, [pc, #48]	; (2676c <spi_cmd+0x334>)
   2673a:	4798      	blx	r3
			result = N_FAIL;
   2673c:	231e      	movs	r3, #30
   2673e:	18fb      	adds	r3, r7, r3
   26740:	2200      	movs	r2, #0
   26742:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   26744:	231e      	movs	r3, #30
   26746:	18fb      	adds	r3, r7, r3
   26748:	781b      	ldrb	r3, [r3, #0]
   2674a:	b25b      	sxtb	r3, r3
}
   2674c:	0018      	movs	r0, r3
   2674e:	46bd      	mov	sp, r7
   26750:	b009      	add	sp, #36	; 0x24
   26752:	bd90      	pop	{r4, r7, pc}
   26754:	0003d8c0 	.word	0x0003d8c0
   26758:	200041d0 	.word	0x200041d0
   2675c:	000263e9 	.word	0x000263e9
   26760:	00026331 	.word	0x00026331
   26764:	0003d938 	.word	0x0003d938
   26768:	0003d348 	.word	0x0003d348
   2676c:	00020e3d 	.word	0x00020e3d
   26770:	0003d35c 	.word	0x0003d35c
   26774:	0003d388 	.word	0x0003d388

00026778 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   26778:	b590      	push	{r4, r7, lr}
   2677a:	b085      	sub	sp, #20
   2677c:	af00      	add	r7, sp, #0
   2677e:	0002      	movs	r2, r0
   26780:	1dfb      	adds	r3, r7, #7
   26782:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   26784:	230e      	movs	r3, #14
   26786:	18fb      	adds	r3, r7, r3
   26788:	2201      	movs	r2, #1
   2678a:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   2678c:	4b32      	ldr	r3, [pc, #200]	; (26858 <spi_data_rsp+0xe0>)
   2678e:	781b      	ldrb	r3, [r3, #0]
   26790:	2b00      	cmp	r3, #0
   26792:	d104      	bne.n	2679e <spi_data_rsp+0x26>
		len = 2;
   26794:	230f      	movs	r3, #15
   26796:	18fb      	adds	r3, r7, r3
   26798:	2202      	movs	r2, #2
   2679a:	701a      	strb	r2, [r3, #0]
   2679c:	e003      	b.n	267a6 <spi_data_rsp+0x2e>
	else
		len = 3;
   2679e:	230f      	movs	r3, #15
   267a0:	18fb      	adds	r3, r7, r3
   267a2:	2203      	movs	r2, #3
   267a4:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   267a6:	230f      	movs	r3, #15
   267a8:	18fb      	adds	r3, r7, r3
   267aa:	781b      	ldrb	r3, [r3, #0]
   267ac:	b29a      	uxth	r2, r3
   267ae:	2308      	movs	r3, #8
   267b0:	18fb      	adds	r3, r7, r3
   267b2:	0011      	movs	r1, r2
   267b4:	0018      	movs	r0, r3
   267b6:	4b29      	ldr	r3, [pc, #164]	; (2685c <spi_data_rsp+0xe4>)
   267b8:	4798      	blx	r3
   267ba:	1e03      	subs	r3, r0, #0
   267bc:	d013      	beq.n	267e6 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   267be:	239a      	movs	r3, #154	; 0x9a
   267c0:	005a      	lsls	r2, r3, #1
   267c2:	4927      	ldr	r1, [pc, #156]	; (26860 <spi_data_rsp+0xe8>)
   267c4:	4b27      	ldr	r3, [pc, #156]	; (26864 <spi_data_rsp+0xec>)
   267c6:	0018      	movs	r0, r3
   267c8:	4b27      	ldr	r3, [pc, #156]	; (26868 <spi_data_rsp+0xf0>)
   267ca:	4798      	blx	r3
   267cc:	4b27      	ldr	r3, [pc, #156]	; (2686c <spi_data_rsp+0xf4>)
   267ce:	0018      	movs	r0, r3
   267d0:	4b25      	ldr	r3, [pc, #148]	; (26868 <spi_data_rsp+0xf0>)
   267d2:	4798      	blx	r3
   267d4:	4b26      	ldr	r3, [pc, #152]	; (26870 <spi_data_rsp+0xf8>)
   267d6:	0018      	movs	r0, r3
   267d8:	4b23      	ldr	r3, [pc, #140]	; (26868 <spi_data_rsp+0xf0>)
   267da:	4798      	blx	r3
		result = N_FAIL;
   267dc:	230e      	movs	r3, #14
   267de:	18fb      	adds	r3, r7, r3
   267e0:	2200      	movs	r2, #0
   267e2:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   267e4:	e030      	b.n	26848 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   267e6:	230f      	movs	r3, #15
   267e8:	18fb      	adds	r3, r7, r3
   267ea:	781b      	ldrb	r3, [r3, #0]
   267ec:	3b01      	subs	r3, #1
   267ee:	2208      	movs	r2, #8
   267f0:	18ba      	adds	r2, r7, r2
   267f2:	5cd3      	ldrb	r3, [r2, r3]
   267f4:	2b00      	cmp	r3, #0
   267f6:	d108      	bne.n	2680a <spi_data_rsp+0x92>
   267f8:	230f      	movs	r3, #15
   267fa:	18fb      	adds	r3, r7, r3
   267fc:	781b      	ldrb	r3, [r3, #0]
   267fe:	3b02      	subs	r3, #2
   26800:	2208      	movs	r2, #8
   26802:	18ba      	adds	r2, r7, r2
   26804:	5cd3      	ldrb	r3, [r2, r3]
   26806:	2bc3      	cmp	r3, #195	; 0xc3
   26808:	d01e      	beq.n	26848 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   2680a:	233c      	movs	r3, #60	; 0x3c
   2680c:	33ff      	adds	r3, #255	; 0xff
   2680e:	001a      	movs	r2, r3
   26810:	4913      	ldr	r1, [pc, #76]	; (26860 <spi_data_rsp+0xe8>)
   26812:	4b14      	ldr	r3, [pc, #80]	; (26864 <spi_data_rsp+0xec>)
   26814:	0018      	movs	r0, r3
   26816:	4b14      	ldr	r3, [pc, #80]	; (26868 <spi_data_rsp+0xf0>)
   26818:	4798      	blx	r3
   2681a:	2308      	movs	r3, #8
   2681c:	18fb      	adds	r3, r7, r3
   2681e:	781b      	ldrb	r3, [r3, #0]
   26820:	0019      	movs	r1, r3
   26822:	2308      	movs	r3, #8
   26824:	18fb      	adds	r3, r7, r3
   26826:	785b      	ldrb	r3, [r3, #1]
   26828:	001a      	movs	r2, r3
   2682a:	2308      	movs	r3, #8
   2682c:	18fb      	adds	r3, r7, r3
   2682e:	789b      	ldrb	r3, [r3, #2]
   26830:	4810      	ldr	r0, [pc, #64]	; (26874 <spi_data_rsp+0xfc>)
   26832:	4c0d      	ldr	r4, [pc, #52]	; (26868 <spi_data_rsp+0xf0>)
   26834:	47a0      	blx	r4
   26836:	4b0e      	ldr	r3, [pc, #56]	; (26870 <spi_data_rsp+0xf8>)
   26838:	0018      	movs	r0, r3
   2683a:	4b0b      	ldr	r3, [pc, #44]	; (26868 <spi_data_rsp+0xf0>)
   2683c:	4798      	blx	r3
		result = N_FAIL;
   2683e:	230e      	movs	r3, #14
   26840:	18fb      	adds	r3, r7, r3
   26842:	2200      	movs	r2, #0
   26844:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   26846:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   26848:	230e      	movs	r3, #14
   2684a:	18fb      	adds	r3, r7, r3
   2684c:	781b      	ldrb	r3, [r3, #0]
   2684e:	b25b      	sxtb	r3, r3
}
   26850:	0018      	movs	r0, r3
   26852:	46bd      	mov	sp, r7
   26854:	b005      	add	sp, #20
   26856:	bd90      	pop	{r4, r7, pc}
   26858:	200041d0 	.word	0x200041d0
   2685c:	000262ed 	.word	0x000262ed
   26860:	0003d940 	.word	0x0003d940
   26864:	0003d348 	.word	0x0003d348
   26868:	00020e3d 	.word	0x00020e3d
   2686c:	0003d38c 	.word	0x0003d38c
   26870:	0003d388 	.word	0x0003d388
   26874:	0003d3ac 	.word	0x0003d3ac

00026878 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   26878:	b580      	push	{r7, lr}
   2687a:	b084      	sub	sp, #16
   2687c:	af00      	add	r7, sp, #0
   2687e:	0002      	movs	r2, r0
   26880:	1dfb      	adds	r3, r7, #7
   26882:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   26884:	230f      	movs	r3, #15
   26886:	18fb      	adds	r3, r7, r3
   26888:	2201      	movs	r2, #1
   2688a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   2688c:	1dfb      	adds	r3, r7, #7
   2688e:	781b      	ldrb	r3, [r3, #0]
   26890:	2bcf      	cmp	r3, #207	; 0xcf
   26892:	d007      	beq.n	268a4 <spi_cmd_rsp+0x2c>
   26894:	1dfb      	adds	r3, r7, #7
   26896:	781b      	ldrb	r3, [r3, #0]
   26898:	2bc5      	cmp	r3, #197	; 0xc5
   2689a:	d003      	beq.n	268a4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   2689c:	1dfb      	adds	r3, r7, #7
   2689e:	781b      	ldrb	r3, [r3, #0]
   268a0:	2bc6      	cmp	r3, #198	; 0xc6
   268a2:	d10c      	bne.n	268be <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   268a4:	230d      	movs	r3, #13
   268a6:	18fb      	adds	r3, r7, r3
   268a8:	2101      	movs	r1, #1
   268aa:	0018      	movs	r0, r3
   268ac:	4b3b      	ldr	r3, [pc, #236]	; (2699c <spi_cmd_rsp+0x124>)
   268ae:	4798      	blx	r3
   268b0:	1e03      	subs	r3, r0, #0
   268b2:	d004      	beq.n	268be <spi_cmd_rsp+0x46>
			result = N_FAIL;
   268b4:	230f      	movs	r3, #15
   268b6:	18fb      	adds	r3, r7, r3
   268b8:	2200      	movs	r2, #0
   268ba:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   268bc:	e065      	b.n	2698a <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   268be:	230e      	movs	r3, #14
   268c0:	18fb      	adds	r3, r7, r3
   268c2:	220a      	movs	r2, #10
   268c4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   268c6:	230d      	movs	r3, #13
   268c8:	18fb      	adds	r3, r7, r3
   268ca:	2101      	movs	r1, #1
   268cc:	0018      	movs	r0, r3
   268ce:	4b33      	ldr	r3, [pc, #204]	; (2699c <spi_cmd_rsp+0x124>)
   268d0:	4798      	blx	r3
   268d2:	1e03      	subs	r3, r0, #0
   268d4:	d014      	beq.n	26900 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   268d6:	235c      	movs	r3, #92	; 0x5c
   268d8:	33ff      	adds	r3, #255	; 0xff
   268da:	001a      	movs	r2, r3
   268dc:	4930      	ldr	r1, [pc, #192]	; (269a0 <spi_cmd_rsp+0x128>)
   268de:	4b31      	ldr	r3, [pc, #196]	; (269a4 <spi_cmd_rsp+0x12c>)
   268e0:	0018      	movs	r0, r3
   268e2:	4b31      	ldr	r3, [pc, #196]	; (269a8 <spi_cmd_rsp+0x130>)
   268e4:	4798      	blx	r3
   268e6:	4b31      	ldr	r3, [pc, #196]	; (269ac <spi_cmd_rsp+0x134>)
   268e8:	0018      	movs	r0, r3
   268ea:	4b2f      	ldr	r3, [pc, #188]	; (269a8 <spi_cmd_rsp+0x130>)
   268ec:	4798      	blx	r3
   268ee:	4b30      	ldr	r3, [pc, #192]	; (269b0 <spi_cmd_rsp+0x138>)
   268f0:	0018      	movs	r0, r3
   268f2:	4b2d      	ldr	r3, [pc, #180]	; (269a8 <spi_cmd_rsp+0x130>)
   268f4:	4798      	blx	r3
			result = N_FAIL;
   268f6:	230f      	movs	r3, #15
   268f8:	18fb      	adds	r3, r7, r3
   268fa:	2200      	movs	r2, #0
   268fc:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   268fe:	e044      	b.n	2698a <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   26900:	230d      	movs	r3, #13
   26902:	18fb      	adds	r3, r7, r3
   26904:	781b      	ldrb	r3, [r3, #0]
   26906:	1dfa      	adds	r2, r7, #7
   26908:	7812      	ldrb	r2, [r2, #0]
   2690a:	429a      	cmp	r2, r3
   2690c:	d00b      	beq.n	26926 <spi_cmd_rsp+0xae>
   2690e:	230e      	movs	r3, #14
   26910:	18fb      	adds	r3, r7, r3
   26912:	781b      	ldrb	r3, [r3, #0]
   26914:	b25b      	sxtb	r3, r3
   26916:	b2da      	uxtb	r2, r3
   26918:	3a01      	subs	r2, #1
   2691a:	b2d1      	uxtb	r1, r2
   2691c:	220e      	movs	r2, #14
   2691e:	18ba      	adds	r2, r7, r2
   26920:	7011      	strb	r1, [r2, #0]
   26922:	2b00      	cmp	r3, #0
   26924:	dccf      	bgt.n	268c6 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   26926:	230e      	movs	r3, #14
   26928:	18fb      	adds	r3, r7, r3
   2692a:	220a      	movs	r2, #10
   2692c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2692e:	230d      	movs	r3, #13
   26930:	18fb      	adds	r3, r7, r3
   26932:	2101      	movs	r1, #1
   26934:	0018      	movs	r0, r3
   26936:	4b19      	ldr	r3, [pc, #100]	; (2699c <spi_cmd_rsp+0x124>)
   26938:	4798      	blx	r3
   2693a:	1e03      	subs	r3, r0, #0
   2693c:	d014      	beq.n	26968 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2693e:	236a      	movs	r3, #106	; 0x6a
   26940:	33ff      	adds	r3, #255	; 0xff
   26942:	001a      	movs	r2, r3
   26944:	4916      	ldr	r1, [pc, #88]	; (269a0 <spi_cmd_rsp+0x128>)
   26946:	4b17      	ldr	r3, [pc, #92]	; (269a4 <spi_cmd_rsp+0x12c>)
   26948:	0018      	movs	r0, r3
   2694a:	4b17      	ldr	r3, [pc, #92]	; (269a8 <spi_cmd_rsp+0x130>)
   2694c:	4798      	blx	r3
   2694e:	4b17      	ldr	r3, [pc, #92]	; (269ac <spi_cmd_rsp+0x134>)
   26950:	0018      	movs	r0, r3
   26952:	4b15      	ldr	r3, [pc, #84]	; (269a8 <spi_cmd_rsp+0x130>)
   26954:	4798      	blx	r3
   26956:	4b16      	ldr	r3, [pc, #88]	; (269b0 <spi_cmd_rsp+0x138>)
   26958:	0018      	movs	r0, r3
   2695a:	4b13      	ldr	r3, [pc, #76]	; (269a8 <spi_cmd_rsp+0x130>)
   2695c:	4798      	blx	r3
			result = N_FAIL;
   2695e:	230f      	movs	r3, #15
   26960:	18fb      	adds	r3, r7, r3
   26962:	2200      	movs	r2, #0
   26964:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   26966:	e010      	b.n	2698a <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   26968:	230d      	movs	r3, #13
   2696a:	18fb      	adds	r3, r7, r3
   2696c:	781b      	ldrb	r3, [r3, #0]
   2696e:	2b00      	cmp	r3, #0
   26970:	d00b      	beq.n	2698a <spi_cmd_rsp+0x112>
   26972:	230e      	movs	r3, #14
   26974:	18fb      	adds	r3, r7, r3
   26976:	781b      	ldrb	r3, [r3, #0]
   26978:	b25b      	sxtb	r3, r3
   2697a:	b2da      	uxtb	r2, r3
   2697c:	3a01      	subs	r2, #1
   2697e:	b2d1      	uxtb	r1, r2
   26980:	220e      	movs	r2, #14
   26982:	18ba      	adds	r2, r7, r2
   26984:	7011      	strb	r1, [r2, #0]
   26986:	2b00      	cmp	r3, #0
   26988:	dcd1      	bgt.n	2692e <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   2698a:	230f      	movs	r3, #15
   2698c:	18fb      	adds	r3, r7, r3
   2698e:	781b      	ldrb	r3, [r3, #0]
   26990:	b25b      	sxtb	r3, r3
}
   26992:	0018      	movs	r0, r3
   26994:	46bd      	mov	sp, r7
   26996:	b004      	add	sp, #16
   26998:	bd80      	pop	{r7, pc}
   2699a:	46c0      	nop			; (mov r8, r8)
   2699c:	000262ed 	.word	0x000262ed
   269a0:	0003d950 	.word	0x0003d950
   269a4:	0003d348 	.word	0x0003d348
   269a8:	00020e3d 	.word	0x00020e3d
   269ac:	0003d3dc 	.word	0x0003d3dc
   269b0:	0003d388 	.word	0x0003d388

000269b4 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   269b4:	b590      	push	{r4, r7, lr}
   269b6:	b09f      	sub	sp, #124	; 0x7c
   269b8:	af00      	add	r7, sp, #0
   269ba:	60b9      	str	r1, [r7, #8]
   269bc:	607a      	str	r2, [r7, #4]
   269be:	603b      	str	r3, [r7, #0]
   269c0:	230f      	movs	r3, #15
   269c2:	18fb      	adds	r3, r7, r3
   269c4:	1c02      	adds	r2, r0, #0
   269c6:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   269c8:	2300      	movs	r3, #0
   269ca:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   269cc:	2301      	movs	r3, #1
   269ce:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   269d0:	2338      	movs	r3, #56	; 0x38
   269d2:	18fb      	adds	r3, r7, r3
   269d4:	220f      	movs	r2, #15
   269d6:	18ba      	adds	r2, r7, r2
   269d8:	7812      	ldrb	r2, [r2, #0]
   269da:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   269dc:	230f      	movs	r3, #15
   269de:	18fb      	adds	r3, r7, r3
   269e0:	781b      	ldrb	r3, [r3, #0]
   269e2:	3bc1      	subs	r3, #193	; 0xc1
   269e4:	2b0e      	cmp	r3, #14
   269e6:	d900      	bls.n	269ea <spi_cmd_complete+0x36>
   269e8:	e103      	b.n	26bf2 <spi_cmd_complete+0x23e>
   269ea:	009a      	lsls	r2, r3, #2
   269ec:	4bd1      	ldr	r3, [pc, #836]	; (26d34 <spi_cmd_complete+0x380>)
   269ee:	18d3      	adds	r3, r2, r3
   269f0:	681b      	ldr	r3, [r3, #0]
   269f2:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   269f4:	68bb      	ldr	r3, [r7, #8]
   269f6:	0c1b      	lsrs	r3, r3, #16
   269f8:	b2da      	uxtb	r2, r3
   269fa:	2338      	movs	r3, #56	; 0x38
   269fc:	18fb      	adds	r3, r7, r3
   269fe:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   26a00:	68bb      	ldr	r3, [r7, #8]
   26a02:	0a1b      	lsrs	r3, r3, #8
   26a04:	b2da      	uxtb	r2, r3
   26a06:	2338      	movs	r3, #56	; 0x38
   26a08:	18fb      	adds	r3, r7, r3
   26a0a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   26a0c:	68bb      	ldr	r3, [r7, #8]
   26a0e:	b2da      	uxtb	r2, r3
   26a10:	2338      	movs	r3, #56	; 0x38
   26a12:	18fb      	adds	r3, r7, r3
   26a14:	70da      	strb	r2, [r3, #3]
		len = 5;
   26a16:	2305      	movs	r3, #5
   26a18:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   26a1a:	e0ed      	b.n	26bf8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   26a1c:	68bb      	ldr	r3, [r7, #8]
   26a1e:	0a1b      	lsrs	r3, r3, #8
   26a20:	b2da      	uxtb	r2, r3
   26a22:	2338      	movs	r3, #56	; 0x38
   26a24:	18fb      	adds	r3, r7, r3
   26a26:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   26a28:	2388      	movs	r3, #136	; 0x88
   26a2a:	18fb      	adds	r3, r7, r3
   26a2c:	781b      	ldrb	r3, [r3, #0]
   26a2e:	2b01      	cmp	r3, #1
   26a30:	d109      	bne.n	26a46 <spi_cmd_complete+0x92>
   26a32:	2338      	movs	r3, #56	; 0x38
   26a34:	18fb      	adds	r3, r7, r3
   26a36:	785b      	ldrb	r3, [r3, #1]
   26a38:	2280      	movs	r2, #128	; 0x80
   26a3a:	4252      	negs	r2, r2
   26a3c:	4313      	orrs	r3, r2
   26a3e:	b2da      	uxtb	r2, r3
   26a40:	2338      	movs	r3, #56	; 0x38
   26a42:	18fb      	adds	r3, r7, r3
   26a44:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   26a46:	68bb      	ldr	r3, [r7, #8]
   26a48:	b2da      	uxtb	r2, r3
   26a4a:	2338      	movs	r3, #56	; 0x38
   26a4c:	18fb      	adds	r3, r7, r3
   26a4e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   26a50:	2338      	movs	r3, #56	; 0x38
   26a52:	18fb      	adds	r3, r7, r3
   26a54:	2200      	movs	r2, #0
   26a56:	70da      	strb	r2, [r3, #3]
		len = 5;
   26a58:	2305      	movs	r3, #5
   26a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26a5c:	e0cc      	b.n	26bf8 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   26a5e:	2338      	movs	r3, #56	; 0x38
   26a60:	18fb      	adds	r3, r7, r3
   26a62:	2200      	movs	r2, #0
   26a64:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   26a66:	2338      	movs	r3, #56	; 0x38
   26a68:	18fb      	adds	r3, r7, r3
   26a6a:	2200      	movs	r2, #0
   26a6c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   26a6e:	2338      	movs	r3, #56	; 0x38
   26a70:	18fb      	adds	r3, r7, r3
   26a72:	2200      	movs	r2, #0
   26a74:	70da      	strb	r2, [r3, #3]
		len = 5;
   26a76:	2305      	movs	r3, #5
   26a78:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26a7a:	e0bd      	b.n	26bf8 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   26a7c:	2338      	movs	r3, #56	; 0x38
   26a7e:	18fb      	adds	r3, r7, r3
   26a80:	2200      	movs	r2, #0
   26a82:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   26a84:	2338      	movs	r3, #56	; 0x38
   26a86:	18fb      	adds	r3, r7, r3
   26a88:	2200      	movs	r2, #0
   26a8a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   26a8c:	2338      	movs	r3, #56	; 0x38
   26a8e:	18fb      	adds	r3, r7, r3
   26a90:	2200      	movs	r2, #0
   26a92:	70da      	strb	r2, [r3, #3]
		len = 5;
   26a94:	2305      	movs	r3, #5
   26a96:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26a98:	e0ae      	b.n	26bf8 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   26a9a:	2338      	movs	r3, #56	; 0x38
   26a9c:	18fb      	adds	r3, r7, r3
   26a9e:	22ff      	movs	r2, #255	; 0xff
   26aa0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   26aa2:	2338      	movs	r3, #56	; 0x38
   26aa4:	18fb      	adds	r3, r7, r3
   26aa6:	22ff      	movs	r2, #255	; 0xff
   26aa8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   26aaa:	2338      	movs	r3, #56	; 0x38
   26aac:	18fb      	adds	r3, r7, r3
   26aae:	22ff      	movs	r2, #255	; 0xff
   26ab0:	70da      	strb	r2, [r3, #3]
		len = 5;
   26ab2:	2305      	movs	r3, #5
   26ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26ab6:	e09f      	b.n	26bf8 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   26ab8:	68bb      	ldr	r3, [r7, #8]
   26aba:	0c1b      	lsrs	r3, r3, #16
   26abc:	b2da      	uxtb	r2, r3
   26abe:	2338      	movs	r3, #56	; 0x38
   26ac0:	18fb      	adds	r3, r7, r3
   26ac2:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   26ac4:	68bb      	ldr	r3, [r7, #8]
   26ac6:	0a1b      	lsrs	r3, r3, #8
   26ac8:	b2da      	uxtb	r2, r3
   26aca:	2338      	movs	r3, #56	; 0x38
   26acc:	18fb      	adds	r3, r7, r3
   26ace:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   26ad0:	68bb      	ldr	r3, [r7, #8]
   26ad2:	b2da      	uxtb	r2, r3
   26ad4:	2338      	movs	r3, #56	; 0x38
   26ad6:	18fb      	adds	r3, r7, r3
   26ad8:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   26ada:	683b      	ldr	r3, [r7, #0]
   26adc:	0a1b      	lsrs	r3, r3, #8
   26ade:	b2da      	uxtb	r2, r3
   26ae0:	2338      	movs	r3, #56	; 0x38
   26ae2:	18fb      	adds	r3, r7, r3
   26ae4:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   26ae6:	683b      	ldr	r3, [r7, #0]
   26ae8:	b2da      	uxtb	r2, r3
   26aea:	2338      	movs	r3, #56	; 0x38
   26aec:	18fb      	adds	r3, r7, r3
   26aee:	715a      	strb	r2, [r3, #5]
		len = 7;
   26af0:	2307      	movs	r3, #7
   26af2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26af4:	e080      	b.n	26bf8 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   26af6:	68bb      	ldr	r3, [r7, #8]
   26af8:	0c1b      	lsrs	r3, r3, #16
   26afa:	b2da      	uxtb	r2, r3
   26afc:	2338      	movs	r3, #56	; 0x38
   26afe:	18fb      	adds	r3, r7, r3
   26b00:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   26b02:	68bb      	ldr	r3, [r7, #8]
   26b04:	0a1b      	lsrs	r3, r3, #8
   26b06:	b2da      	uxtb	r2, r3
   26b08:	2338      	movs	r3, #56	; 0x38
   26b0a:	18fb      	adds	r3, r7, r3
   26b0c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   26b0e:	68bb      	ldr	r3, [r7, #8]
   26b10:	b2da      	uxtb	r2, r3
   26b12:	2338      	movs	r3, #56	; 0x38
   26b14:	18fb      	adds	r3, r7, r3
   26b16:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   26b18:	683b      	ldr	r3, [r7, #0]
   26b1a:	0c1b      	lsrs	r3, r3, #16
   26b1c:	b2da      	uxtb	r2, r3
   26b1e:	2338      	movs	r3, #56	; 0x38
   26b20:	18fb      	adds	r3, r7, r3
   26b22:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   26b24:	683b      	ldr	r3, [r7, #0]
   26b26:	0a1b      	lsrs	r3, r3, #8
   26b28:	b2da      	uxtb	r2, r3
   26b2a:	2338      	movs	r3, #56	; 0x38
   26b2c:	18fb      	adds	r3, r7, r3
   26b2e:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   26b30:	683b      	ldr	r3, [r7, #0]
   26b32:	b2da      	uxtb	r2, r3
   26b34:	2338      	movs	r3, #56	; 0x38
   26b36:	18fb      	adds	r3, r7, r3
   26b38:	719a      	strb	r2, [r3, #6]
		len = 8;
   26b3a:	2308      	movs	r3, #8
   26b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26b3e:	e05b      	b.n	26bf8 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   26b40:	68bb      	ldr	r3, [r7, #8]
   26b42:	0a1b      	lsrs	r3, r3, #8
   26b44:	b2da      	uxtb	r2, r3
   26b46:	2338      	movs	r3, #56	; 0x38
   26b48:	18fb      	adds	r3, r7, r3
   26b4a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   26b4c:	2388      	movs	r3, #136	; 0x88
   26b4e:	18fb      	adds	r3, r7, r3
   26b50:	781b      	ldrb	r3, [r3, #0]
   26b52:	2b01      	cmp	r3, #1
   26b54:	d109      	bne.n	26b6a <spi_cmd_complete+0x1b6>
   26b56:	2338      	movs	r3, #56	; 0x38
   26b58:	18fb      	adds	r3, r7, r3
   26b5a:	785b      	ldrb	r3, [r3, #1]
   26b5c:	2280      	movs	r2, #128	; 0x80
   26b5e:	4252      	negs	r2, r2
   26b60:	4313      	orrs	r3, r2
   26b62:	b2da      	uxtb	r2, r3
   26b64:	2338      	movs	r3, #56	; 0x38
   26b66:	18fb      	adds	r3, r7, r3
   26b68:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   26b6a:	68bb      	ldr	r3, [r7, #8]
   26b6c:	b2da      	uxtb	r2, r3
   26b6e:	2338      	movs	r3, #56	; 0x38
   26b70:	18fb      	adds	r3, r7, r3
   26b72:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   26b74:	687b      	ldr	r3, [r7, #4]
   26b76:	78da      	ldrb	r2, [r3, #3]
   26b78:	2338      	movs	r3, #56	; 0x38
   26b7a:	18fb      	adds	r3, r7, r3
   26b7c:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   26b7e:	687b      	ldr	r3, [r7, #4]
   26b80:	789a      	ldrb	r2, [r3, #2]
   26b82:	2338      	movs	r3, #56	; 0x38
   26b84:	18fb      	adds	r3, r7, r3
   26b86:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   26b88:	687b      	ldr	r3, [r7, #4]
   26b8a:	785a      	ldrb	r2, [r3, #1]
   26b8c:	2338      	movs	r3, #56	; 0x38
   26b8e:	18fb      	adds	r3, r7, r3
   26b90:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   26b92:	687b      	ldr	r3, [r7, #4]
   26b94:	781a      	ldrb	r2, [r3, #0]
   26b96:	2338      	movs	r3, #56	; 0x38
   26b98:	18fb      	adds	r3, r7, r3
   26b9a:	719a      	strb	r2, [r3, #6]
		len = 8;
   26b9c:	2308      	movs	r3, #8
   26b9e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26ba0:	e02a      	b.n	26bf8 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   26ba2:	68bb      	ldr	r3, [r7, #8]
   26ba4:	0c1b      	lsrs	r3, r3, #16
   26ba6:	b2da      	uxtb	r2, r3
   26ba8:	2338      	movs	r3, #56	; 0x38
   26baa:	18fb      	adds	r3, r7, r3
   26bac:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   26bae:	68bb      	ldr	r3, [r7, #8]
   26bb0:	0a1b      	lsrs	r3, r3, #8
   26bb2:	b2da      	uxtb	r2, r3
   26bb4:	2338      	movs	r3, #56	; 0x38
   26bb6:	18fb      	adds	r3, r7, r3
   26bb8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   26bba:	68bb      	ldr	r3, [r7, #8]
   26bbc:	b2da      	uxtb	r2, r3
   26bbe:	2338      	movs	r3, #56	; 0x38
   26bc0:	18fb      	adds	r3, r7, r3
   26bc2:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   26bc4:	687b      	ldr	r3, [r7, #4]
   26bc6:	78da      	ldrb	r2, [r3, #3]
   26bc8:	2338      	movs	r3, #56	; 0x38
   26bca:	18fb      	adds	r3, r7, r3
   26bcc:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   26bce:	687b      	ldr	r3, [r7, #4]
   26bd0:	789a      	ldrb	r2, [r3, #2]
   26bd2:	2338      	movs	r3, #56	; 0x38
   26bd4:	18fb      	adds	r3, r7, r3
   26bd6:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   26bd8:	687b      	ldr	r3, [r7, #4]
   26bda:	785a      	ldrb	r2, [r3, #1]
   26bdc:	2338      	movs	r3, #56	; 0x38
   26bde:	18fb      	adds	r3, r7, r3
   26be0:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   26be2:	687b      	ldr	r3, [r7, #4]
   26be4:	781a      	ldrb	r2, [r3, #0]
   26be6:	2338      	movs	r3, #56	; 0x38
   26be8:	18fb      	adds	r3, r7, r3
   26bea:	71da      	strb	r2, [r3, #7]
		len = 9;
   26bec:	2309      	movs	r3, #9
   26bee:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   26bf0:	e002      	b.n	26bf8 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   26bf2:	2300      	movs	r3, #0
   26bf4:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   26bf6:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   26bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26bfa:	2b01      	cmp	r3, #1
   26bfc:	d001      	beq.n	26c02 <spi_cmd_complete+0x24e>
		return result;
   26bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26c00:	e33a      	b.n	27278 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   26c02:	4b4d      	ldr	r3, [pc, #308]	; (26d38 <spi_cmd_complete+0x384>)
   26c04:	781b      	ldrb	r3, [r3, #0]
   26c06:	2b00      	cmp	r3, #0
   26c08:	d111      	bne.n	26c2e <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   26c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26c0c:	1e5c      	subs	r4, r3, #1
   26c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26c10:	3b01      	subs	r3, #1
   26c12:	001a      	movs	r2, r3
   26c14:	2338      	movs	r3, #56	; 0x38
   26c16:	18fb      	adds	r3, r7, r3
   26c18:	0019      	movs	r1, r3
   26c1a:	207f      	movs	r0, #127	; 0x7f
   26c1c:	4b47      	ldr	r3, [pc, #284]	; (26d3c <spi_cmd_complete+0x388>)
   26c1e:	4798      	blx	r3
   26c20:	0003      	movs	r3, r0
   26c22:	18db      	adds	r3, r3, r3
   26c24:	b2da      	uxtb	r2, r3
   26c26:	2338      	movs	r3, #56	; 0x38
   26c28:	18fb      	adds	r3, r7, r3
   26c2a:	551a      	strb	r2, [r3, r4]
   26c2c:	e002      	b.n	26c34 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   26c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26c30:	3b01      	subs	r3, #1
   26c32:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   26c34:	230f      	movs	r3, #15
   26c36:	18fb      	adds	r3, r7, r3
   26c38:	781b      	ldrb	r3, [r3, #0]
   26c3a:	2bcf      	cmp	r3, #207	; 0xcf
   26c3c:	d009      	beq.n	26c52 <spi_cmd_complete+0x29e>
   26c3e:	230f      	movs	r3, #15
   26c40:	18fb      	adds	r3, r7, r3
   26c42:	781b      	ldrb	r3, [r3, #0]
   26c44:	2bc5      	cmp	r3, #197	; 0xc5
   26c46:	d004      	beq.n	26c52 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   26c48:	230f      	movs	r3, #15
   26c4a:	18fb      	adds	r3, r7, r3
   26c4c:	781b      	ldrb	r3, [r3, #0]
   26c4e:	2bc6      	cmp	r3, #198	; 0xc6
   26c50:	d103      	bne.n	26c5a <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   26c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26c54:	3306      	adds	r3, #6
   26c56:	673b      	str	r3, [r7, #112]	; 0x70
   26c58:	e018      	b.n	26c8c <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   26c5a:	230f      	movs	r3, #15
   26c5c:	18fb      	adds	r3, r7, r3
   26c5e:	781b      	ldrb	r3, [r3, #0]
   26c60:	2bc4      	cmp	r3, #196	; 0xc4
   26c62:	d004      	beq.n	26c6e <spi_cmd_complete+0x2ba>
   26c64:	230f      	movs	r3, #15
   26c66:	18fb      	adds	r3, r7, r3
   26c68:	781b      	ldrb	r3, [r3, #0]
   26c6a:	2bca      	cmp	r3, #202	; 0xca
   26c6c:	d10b      	bne.n	26c86 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   26c6e:	4b32      	ldr	r3, [pc, #200]	; (26d38 <spi_cmd_complete+0x384>)
   26c70:	781b      	ldrb	r3, [r3, #0]
   26c72:	2b00      	cmp	r3, #0
   26c74:	d103      	bne.n	26c7e <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   26c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26c78:	330c      	adds	r3, #12
   26c7a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   26c7c:	e006      	b.n	26c8c <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   26c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26c80:	330a      	adds	r3, #10
   26c82:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   26c84:	e002      	b.n	26c8c <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   26c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   26c88:	3305      	adds	r3, #5
   26c8a:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   26c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26c8e:	2b20      	cmp	r3, #32
   26c90:	d914      	bls.n	26cbc <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   26c92:	23f7      	movs	r3, #247	; 0xf7
   26c94:	005a      	lsls	r2, r3, #1
   26c96:	492a      	ldr	r1, [pc, #168]	; (26d40 <spi_cmd_complete+0x38c>)
   26c98:	4b2a      	ldr	r3, [pc, #168]	; (26d44 <spi_cmd_complete+0x390>)
   26c9a:	0018      	movs	r0, r3
   26c9c:	4b2a      	ldr	r3, [pc, #168]	; (26d48 <spi_cmd_complete+0x394>)
   26c9e:	4798      	blx	r3
   26ca0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   26ca2:	4b2a      	ldr	r3, [pc, #168]	; (26d4c <spi_cmd_complete+0x398>)
   26ca4:	2220      	movs	r2, #32
   26ca6:	0018      	movs	r0, r3
   26ca8:	4b27      	ldr	r3, [pc, #156]	; (26d48 <spi_cmd_complete+0x394>)
   26caa:	4798      	blx	r3
   26cac:	4b28      	ldr	r3, [pc, #160]	; (26d50 <spi_cmd_complete+0x39c>)
   26cae:	0018      	movs	r0, r3
   26cb0:	4b25      	ldr	r3, [pc, #148]	; (26d48 <spi_cmd_complete+0x394>)
   26cb2:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   26cb4:	2300      	movs	r3, #0
   26cb6:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   26cb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26cba:	e2dd      	b.n	27278 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   26cbc:	2377      	movs	r3, #119	; 0x77
   26cbe:	18fb      	adds	r3, r7, r3
   26cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26cc2:	701a      	strb	r2, [r3, #0]
   26cc4:	e00d      	b.n	26ce2 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   26cc6:	2377      	movs	r3, #119	; 0x77
   26cc8:	18fb      	adds	r3, r7, r3
   26cca:	781b      	ldrb	r3, [r3, #0]
   26ccc:	2238      	movs	r2, #56	; 0x38
   26cce:	18ba      	adds	r2, r7, r2
   26cd0:	2100      	movs	r1, #0
   26cd2:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   26cd4:	2377      	movs	r3, #119	; 0x77
   26cd6:	18fb      	adds	r3, r7, r3
   26cd8:	781a      	ldrb	r2, [r3, #0]
   26cda:	2377      	movs	r3, #119	; 0x77
   26cdc:	18fb      	adds	r3, r7, r3
   26cde:	3201      	adds	r2, #1
   26ce0:	701a      	strb	r2, [r3, #0]
   26ce2:	2377      	movs	r3, #119	; 0x77
   26ce4:	18fb      	adds	r3, r7, r3
   26ce6:	781a      	ldrb	r2, [r3, #0]
   26ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26cea:	429a      	cmp	r2, r3
   26cec:	d3eb      	bcc.n	26cc6 <spi_cmd_complete+0x312>
	}
	rix = len;
   26cee:	2376      	movs	r3, #118	; 0x76
   26cf0:	18fb      	adds	r3, r7, r3
   26cf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26cf4:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   26cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26cf8:	b29a      	uxth	r2, r3
   26cfa:	2318      	movs	r3, #24
   26cfc:	18f9      	adds	r1, r7, r3
   26cfe:	2338      	movs	r3, #56	; 0x38
   26d00:	18fb      	adds	r3, r7, r3
   26d02:	0018      	movs	r0, r3
   26d04:	4b13      	ldr	r3, [pc, #76]	; (26d54 <spi_cmd_complete+0x3a0>)
   26d06:	4798      	blx	r3
   26d08:	1e03      	subs	r3, r0, #0
   26d0a:	d027      	beq.n	26d5c <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   26d0c:	23fa      	movs	r3, #250	; 0xfa
   26d0e:	33ff      	adds	r3, #255	; 0xff
   26d10:	001a      	movs	r2, r3
   26d12:	490b      	ldr	r1, [pc, #44]	; (26d40 <spi_cmd_complete+0x38c>)
   26d14:	4b0b      	ldr	r3, [pc, #44]	; (26d44 <spi_cmd_complete+0x390>)
   26d16:	0018      	movs	r0, r3
   26d18:	4b0b      	ldr	r3, [pc, #44]	; (26d48 <spi_cmd_complete+0x394>)
   26d1a:	4798      	blx	r3
   26d1c:	4b0e      	ldr	r3, [pc, #56]	; (26d58 <spi_cmd_complete+0x3a4>)
   26d1e:	0018      	movs	r0, r3
   26d20:	4b09      	ldr	r3, [pc, #36]	; (26d48 <spi_cmd_complete+0x394>)
   26d22:	4798      	blx	r3
   26d24:	4b0a      	ldr	r3, [pc, #40]	; (26d50 <spi_cmd_complete+0x39c>)
   26d26:	0018      	movs	r0, r3
   26d28:	4b07      	ldr	r3, [pc, #28]	; (26d48 <spi_cmd_complete+0x394>)
   26d2a:	4798      	blx	r3
		result = N_FAIL;
   26d2c:	2300      	movs	r3, #0
   26d2e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   26d30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26d32:	e2a1      	b.n	27278 <spi_cmd_complete+0x8c4>
   26d34:	0003d8fc 	.word	0x0003d8fc
   26d38:	200041d0 	.word	0x200041d0
   26d3c:	000263e9 	.word	0x000263e9
   26d40:	0003d95c 	.word	0x0003d95c
   26d44:	0003d348 	.word	0x0003d348
   26d48:	00020e3d 	.word	0x00020e3d
   26d4c:	0003d410 	.word	0x0003d410
   26d50:	0003d388 	.word	0x0003d388
   26d54:	00026375 	.word	0x00026375
   26d58:	0003d35c 	.word	0x0003d35c
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   26d5c:	230f      	movs	r3, #15
   26d5e:	18fb      	adds	r3, r7, r3
   26d60:	781b      	ldrb	r3, [r3, #0]
   26d62:	2bcf      	cmp	r3, #207	; 0xcf
   26d64:	d009      	beq.n	26d7a <spi_cmd_complete+0x3c6>
   26d66:	230f      	movs	r3, #15
   26d68:	18fb      	adds	r3, r7, r3
   26d6a:	781b      	ldrb	r3, [r3, #0]
   26d6c:	2bc5      	cmp	r3, #197	; 0xc5
   26d6e:	d004      	beq.n	26d7a <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   26d70:	230f      	movs	r3, #15
   26d72:	18fb      	adds	r3, r7, r3
   26d74:	781b      	ldrb	r3, [r3, #0]
   26d76:	2bc6      	cmp	r3, #198	; 0xc6
   26d78:	d106      	bne.n	26d88 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   26d7a:	2376      	movs	r3, #118	; 0x76
   26d7c:	18fb      	adds	r3, r7, r3
   26d7e:	781a      	ldrb	r2, [r3, #0]
   26d80:	2376      	movs	r3, #118	; 0x76
   26d82:	18fb      	adds	r3, r7, r3
   26d84:	3201      	adds	r2, #1
   26d86:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   26d88:	2376      	movs	r3, #118	; 0x76
   26d8a:	18fb      	adds	r3, r7, r3
   26d8c:	781b      	ldrb	r3, [r3, #0]
   26d8e:	2276      	movs	r2, #118	; 0x76
   26d90:	18ba      	adds	r2, r7, r2
   26d92:	1c59      	adds	r1, r3, #1
   26d94:	7011      	strb	r1, [r2, #0]
   26d96:	001a      	movs	r2, r3
   26d98:	2318      	movs	r3, #24
   26d9a:	18fb      	adds	r3, r7, r3
   26d9c:	5c9a      	ldrb	r2, [r3, r2]
   26d9e:	2317      	movs	r3, #23
   26da0:	18fb      	adds	r3, r7, r3
   26da2:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   26da4:	2317      	movs	r3, #23
   26da6:	18fb      	adds	r3, r7, r3
   26da8:	781b      	ldrb	r3, [r3, #0]
   26daa:	220f      	movs	r2, #15
   26dac:	18ba      	adds	r2, r7, r2
   26dae:	7812      	ldrb	r2, [r2, #0]
   26db0:	429a      	cmp	r2, r3
   26db2:	d018      	beq.n	26de6 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   26db4:	4add      	ldr	r2, [pc, #884]	; (2712c <spi_cmd_complete+0x778>)
   26db6:	49de      	ldr	r1, [pc, #888]	; (27130 <spi_cmd_complete+0x77c>)
   26db8:	4bde      	ldr	r3, [pc, #888]	; (27134 <spi_cmd_complete+0x780>)
   26dba:	0018      	movs	r0, r3
   26dbc:	4bde      	ldr	r3, [pc, #888]	; (27138 <spi_cmd_complete+0x784>)
   26dbe:	4798      	blx	r3
   26dc0:	230f      	movs	r3, #15
   26dc2:	18fb      	adds	r3, r7, r3
   26dc4:	7819      	ldrb	r1, [r3, #0]
   26dc6:	2317      	movs	r3, #23
   26dc8:	18fb      	adds	r3, r7, r3
   26dca:	781b      	ldrb	r3, [r3, #0]
   26dcc:	001a      	movs	r2, r3
   26dce:	4bdb      	ldr	r3, [pc, #876]	; (2713c <spi_cmd_complete+0x788>)
   26dd0:	0018      	movs	r0, r3
   26dd2:	4bd9      	ldr	r3, [pc, #868]	; (27138 <spi_cmd_complete+0x784>)
   26dd4:	4798      	blx	r3
   26dd6:	4bda      	ldr	r3, [pc, #872]	; (27140 <spi_cmd_complete+0x78c>)
   26dd8:	0018      	movs	r0, r3
   26dda:	4bd7      	ldr	r3, [pc, #860]	; (27138 <spi_cmd_complete+0x784>)
   26ddc:	4798      	blx	r3
		result = N_FAIL;
   26dde:	2300      	movs	r3, #0
   26de0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   26de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26de4:	e248      	b.n	27278 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   26de6:	2376      	movs	r3, #118	; 0x76
   26de8:	18fb      	adds	r3, r7, r3
   26dea:	781b      	ldrb	r3, [r3, #0]
   26dec:	2276      	movs	r2, #118	; 0x76
   26dee:	18ba      	adds	r2, r7, r2
   26df0:	1c59      	adds	r1, r3, #1
   26df2:	7011      	strb	r1, [r2, #0]
   26df4:	001a      	movs	r2, r3
   26df6:	2318      	movs	r3, #24
   26df8:	18fb      	adds	r3, r7, r3
   26dfa:	5c9a      	ldrb	r2, [r3, r2]
   26dfc:	2317      	movs	r3, #23
   26dfe:	18fb      	adds	r3, r7, r3
   26e00:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   26e02:	2317      	movs	r3, #23
   26e04:	18fb      	adds	r3, r7, r3
   26e06:	781b      	ldrb	r3, [r3, #0]
   26e08:	2b00      	cmp	r3, #0
   26e0a:	d016      	beq.n	26e3a <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   26e0c:	4acd      	ldr	r2, [pc, #820]	; (27144 <spi_cmd_complete+0x790>)
   26e0e:	49c8      	ldr	r1, [pc, #800]	; (27130 <spi_cmd_complete+0x77c>)
   26e10:	4bc8      	ldr	r3, [pc, #800]	; (27134 <spi_cmd_complete+0x780>)
   26e12:	0018      	movs	r0, r3
   26e14:	4bc8      	ldr	r3, [pc, #800]	; (27138 <spi_cmd_complete+0x784>)
   26e16:	4798      	blx	r3
   26e18:	2317      	movs	r3, #23
   26e1a:	18fb      	adds	r3, r7, r3
   26e1c:	781b      	ldrb	r3, [r3, #0]
   26e1e:	001a      	movs	r2, r3
   26e20:	4bc9      	ldr	r3, [pc, #804]	; (27148 <spi_cmd_complete+0x794>)
   26e22:	0011      	movs	r1, r2
   26e24:	0018      	movs	r0, r3
   26e26:	4bc4      	ldr	r3, [pc, #784]	; (27138 <spi_cmd_complete+0x784>)
   26e28:	4798      	blx	r3
   26e2a:	4bc5      	ldr	r3, [pc, #788]	; (27140 <spi_cmd_complete+0x78c>)
   26e2c:	0018      	movs	r0, r3
   26e2e:	4bc2      	ldr	r3, [pc, #776]	; (27138 <spi_cmd_complete+0x784>)
   26e30:	4798      	blx	r3
		result = N_FAIL;
   26e32:	2300      	movs	r3, #0
   26e34:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   26e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26e38:	e21e      	b.n	27278 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   26e3a:	230f      	movs	r3, #15
   26e3c:	18fb      	adds	r3, r7, r3
   26e3e:	781b      	ldrb	r3, [r3, #0]
   26e40:	2bc4      	cmp	r3, #196	; 0xc4
   26e42:	d00f      	beq.n	26e64 <spi_cmd_complete+0x4b0>
   26e44:	230f      	movs	r3, #15
   26e46:	18fb      	adds	r3, r7, r3
   26e48:	781b      	ldrb	r3, [r3, #0]
   26e4a:	2bca      	cmp	r3, #202	; 0xca
   26e4c:	d00a      	beq.n	26e64 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   26e4e:	230f      	movs	r3, #15
   26e50:	18fb      	adds	r3, r7, r3
   26e52:	781b      	ldrb	r3, [r3, #0]
   26e54:	2bc2      	cmp	r3, #194	; 0xc2
   26e56:	d005      	beq.n	26e64 <spi_cmd_complete+0x4b0>
   26e58:	230f      	movs	r3, #15
   26e5a:	18fb      	adds	r3, r7, r3
   26e5c:	781b      	ldrb	r3, [r3, #0]
   26e5e:	2bc8      	cmp	r3, #200	; 0xc8
   26e60:	d000      	beq.n	26e64 <spi_cmd_complete+0x4b0>
   26e62:	e208      	b.n	27276 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   26e64:	230a      	movs	r3, #10
   26e66:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   26e68:	2376      	movs	r3, #118	; 0x76
   26e6a:	18fb      	adds	r3, r7, r3
   26e6c:	781a      	ldrb	r2, [r3, #0]
   26e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26e70:	429a      	cmp	r2, r3
   26e72:	d218      	bcs.n	26ea6 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   26e74:	2376      	movs	r3, #118	; 0x76
   26e76:	18fb      	adds	r3, r7, r3
   26e78:	781b      	ldrb	r3, [r3, #0]
   26e7a:	2276      	movs	r2, #118	; 0x76
   26e7c:	18ba      	adds	r2, r7, r2
   26e7e:	1c59      	adds	r1, r3, #1
   26e80:	7011      	strb	r1, [r2, #0]
   26e82:	001a      	movs	r2, r3
   26e84:	2318      	movs	r3, #24
   26e86:	18fb      	adds	r3, r7, r3
   26e88:	5c9a      	ldrb	r2, [r3, r2]
   26e8a:	2317      	movs	r3, #23
   26e8c:	18fb      	adds	r3, r7, r3
   26e8e:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   26e90:	2317      	movs	r3, #23
   26e92:	18fb      	adds	r3, r7, r3
   26e94:	781b      	ldrb	r3, [r3, #0]
   26e96:	091b      	lsrs	r3, r3, #4
   26e98:	b2db      	uxtb	r3, r3
   26e9a:	001a      	movs	r2, r3
   26e9c:	230f      	movs	r3, #15
   26e9e:	4013      	ands	r3, r2
   26ea0:	2b0f      	cmp	r3, #15
   26ea2:	d103      	bne.n	26eac <spi_cmd_complete+0x4f8>
					break;
   26ea4:	e007      	b.n	26eb6 <spi_cmd_complete+0x502>
					retry = 0;
   26ea6:	2300      	movs	r3, #0
   26ea8:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   26eaa:	e004      	b.n	26eb6 <spi_cmd_complete+0x502>
			} while (retry--);
   26eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26eae:	1e5a      	subs	r2, r3, #1
   26eb0:	667a      	str	r2, [r7, #100]	; 0x64
   26eb2:	2b00      	cmp	r3, #0
   26eb4:	d1d8      	bne.n	26e68 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   26eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26eb8:	2b00      	cmp	r3, #0
   26eba:	dc18      	bgt.n	26eee <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   26ebc:	2395      	movs	r3, #149	; 0x95
   26ebe:	009a      	lsls	r2, r3, #2
   26ec0:	499b      	ldr	r1, [pc, #620]	; (27130 <spi_cmd_complete+0x77c>)
   26ec2:	4b9c      	ldr	r3, [pc, #624]	; (27134 <spi_cmd_complete+0x780>)
   26ec4:	0018      	movs	r0, r3
   26ec6:	4b9c      	ldr	r3, [pc, #624]	; (27138 <spi_cmd_complete+0x784>)
   26ec8:	4798      	blx	r3
   26eca:	2317      	movs	r3, #23
   26ecc:	18fb      	adds	r3, r7, r3
   26ece:	781b      	ldrb	r3, [r3, #0]
   26ed0:	001a      	movs	r2, r3
   26ed2:	4b9e      	ldr	r3, [pc, #632]	; (2714c <spi_cmd_complete+0x798>)
   26ed4:	0011      	movs	r1, r2
   26ed6:	0018      	movs	r0, r3
   26ed8:	4b97      	ldr	r3, [pc, #604]	; (27138 <spi_cmd_complete+0x784>)
   26eda:	4798      	blx	r3
   26edc:	4b98      	ldr	r3, [pc, #608]	; (27140 <spi_cmd_complete+0x78c>)
   26ede:	0018      	movs	r0, r3
   26ee0:	4b95      	ldr	r3, [pc, #596]	; (27138 <spi_cmd_complete+0x784>)
   26ee2:	4798      	blx	r3
				result = N_RESET;
   26ee4:	2301      	movs	r3, #1
   26ee6:	425b      	negs	r3, r3
   26ee8:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   26eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26eec:	e1c4      	b.n	27278 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   26eee:	230f      	movs	r3, #15
   26ef0:	18fb      	adds	r3, r7, r3
   26ef2:	781b      	ldrb	r3, [r3, #0]
   26ef4:	2bc4      	cmp	r3, #196	; 0xc4
   26ef6:	d005      	beq.n	26f04 <spi_cmd_complete+0x550>
   26ef8:	230f      	movs	r3, #15
   26efa:	18fb      	adds	r3, r7, r3
   26efc:	781b      	ldrb	r3, [r3, #0]
   26efe:	2bca      	cmp	r3, #202	; 0xca
   26f00:	d000      	beq.n	26f04 <spi_cmd_complete+0x550>
   26f02:	e08e      	b.n	27022 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   26f04:	2376      	movs	r3, #118	; 0x76
   26f06:	18fb      	adds	r3, r7, r3
   26f08:	781b      	ldrb	r3, [r3, #0]
   26f0a:	3303      	adds	r3, #3
   26f0c:	001a      	movs	r2, r3
   26f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26f10:	429a      	cmp	r2, r3
   26f12:	d23c      	bcs.n	26f8e <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   26f14:	2376      	movs	r3, #118	; 0x76
   26f16:	18fb      	adds	r3, r7, r3
   26f18:	781b      	ldrb	r3, [r3, #0]
   26f1a:	2276      	movs	r2, #118	; 0x76
   26f1c:	18ba      	adds	r2, r7, r2
   26f1e:	1c59      	adds	r1, r3, #1
   26f20:	7011      	strb	r1, [r2, #0]
   26f22:	001a      	movs	r2, r3
   26f24:	2318      	movs	r3, #24
   26f26:	18fb      	adds	r3, r7, r3
   26f28:	5c9a      	ldrb	r2, [r3, r2]
   26f2a:	687b      	ldr	r3, [r7, #4]
   26f2c:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   26f2e:	687b      	ldr	r3, [r7, #4]
   26f30:	1c5a      	adds	r2, r3, #1
   26f32:	2376      	movs	r3, #118	; 0x76
   26f34:	18fb      	adds	r3, r7, r3
   26f36:	781b      	ldrb	r3, [r3, #0]
   26f38:	2176      	movs	r1, #118	; 0x76
   26f3a:	1879      	adds	r1, r7, r1
   26f3c:	1c58      	adds	r0, r3, #1
   26f3e:	7008      	strb	r0, [r1, #0]
   26f40:	0019      	movs	r1, r3
   26f42:	2318      	movs	r3, #24
   26f44:	18fb      	adds	r3, r7, r3
   26f46:	5c5b      	ldrb	r3, [r3, r1]
   26f48:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   26f4a:	687b      	ldr	r3, [r7, #4]
   26f4c:	1c9a      	adds	r2, r3, #2
   26f4e:	2376      	movs	r3, #118	; 0x76
   26f50:	18fb      	adds	r3, r7, r3
   26f52:	781b      	ldrb	r3, [r3, #0]
   26f54:	2176      	movs	r1, #118	; 0x76
   26f56:	1879      	adds	r1, r7, r1
   26f58:	1c58      	adds	r0, r3, #1
   26f5a:	7008      	strb	r0, [r1, #0]
   26f5c:	0019      	movs	r1, r3
   26f5e:	2318      	movs	r3, #24
   26f60:	18fb      	adds	r3, r7, r3
   26f62:	5c5b      	ldrb	r3, [r3, r1]
   26f64:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   26f66:	687b      	ldr	r3, [r7, #4]
   26f68:	1cda      	adds	r2, r3, #3
   26f6a:	2376      	movs	r3, #118	; 0x76
   26f6c:	18fb      	adds	r3, r7, r3
   26f6e:	781b      	ldrb	r3, [r3, #0]
   26f70:	2176      	movs	r1, #118	; 0x76
   26f72:	1879      	adds	r1, r7, r1
   26f74:	1c58      	adds	r0, r3, #1
   26f76:	7008      	strb	r0, [r1, #0]
   26f78:	0019      	movs	r1, r3
   26f7a:	2318      	movs	r3, #24
   26f7c:	18fb      	adds	r3, r7, r3
   26f7e:	5c5b      	ldrb	r3, [r3, r1]
   26f80:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   26f82:	4b73      	ldr	r3, [pc, #460]	; (27150 <spi_cmd_complete+0x79c>)
   26f84:	781b      	ldrb	r3, [r3, #0]
   26f86:	2b00      	cmp	r3, #0
   26f88:	d000      	beq.n	26f8c <spi_cmd_complete+0x5d8>
   26f8a:	e174      	b.n	27276 <spi_cmd_complete+0x8c2>
   26f8c:	e011      	b.n	26fb2 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   26f8e:	4a71      	ldr	r2, [pc, #452]	; (27154 <spi_cmd_complete+0x7a0>)
   26f90:	4967      	ldr	r1, [pc, #412]	; (27130 <spi_cmd_complete+0x77c>)
   26f92:	4b68      	ldr	r3, [pc, #416]	; (27134 <spi_cmd_complete+0x780>)
   26f94:	0018      	movs	r0, r3
   26f96:	4b68      	ldr	r3, [pc, #416]	; (27138 <spi_cmd_complete+0x784>)
   26f98:	4798      	blx	r3
   26f9a:	4b6f      	ldr	r3, [pc, #444]	; (27158 <spi_cmd_complete+0x7a4>)
   26f9c:	0018      	movs	r0, r3
   26f9e:	4b66      	ldr	r3, [pc, #408]	; (27138 <spi_cmd_complete+0x784>)
   26fa0:	4798      	blx	r3
   26fa2:	4b67      	ldr	r3, [pc, #412]	; (27140 <spi_cmd_complete+0x78c>)
   26fa4:	0018      	movs	r0, r3
   26fa6:	4b64      	ldr	r3, [pc, #400]	; (27138 <spi_cmd_complete+0x784>)
   26fa8:	4798      	blx	r3
					result = N_FAIL;
   26faa:	2300      	movs	r3, #0
   26fac:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   26fae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26fb0:	e162      	b.n	27278 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   26fb2:	2376      	movs	r3, #118	; 0x76
   26fb4:	18fb      	adds	r3, r7, r3
   26fb6:	781b      	ldrb	r3, [r3, #0]
   26fb8:	3301      	adds	r3, #1
   26fba:	001a      	movs	r2, r3
   26fbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26fbe:	429a      	cmp	r2, r3
   26fc0:	d21c      	bcs.n	26ffc <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   26fc2:	2376      	movs	r3, #118	; 0x76
   26fc4:	18fb      	adds	r3, r7, r3
   26fc6:	781b      	ldrb	r3, [r3, #0]
   26fc8:	2276      	movs	r2, #118	; 0x76
   26fca:	18ba      	adds	r2, r7, r2
   26fcc:	1c59      	adds	r1, r3, #1
   26fce:	7011      	strb	r1, [r2, #0]
   26fd0:	001a      	movs	r2, r3
   26fd2:	2318      	movs	r3, #24
   26fd4:	18fb      	adds	r3, r7, r3
   26fd6:	5c9a      	ldrb	r2, [r3, r2]
   26fd8:	2314      	movs	r3, #20
   26fda:	18fb      	adds	r3, r7, r3
   26fdc:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   26fde:	2376      	movs	r3, #118	; 0x76
   26fe0:	18fb      	adds	r3, r7, r3
   26fe2:	781b      	ldrb	r3, [r3, #0]
   26fe4:	2276      	movs	r2, #118	; 0x76
   26fe6:	18ba      	adds	r2, r7, r2
   26fe8:	1c59      	adds	r1, r3, #1
   26fea:	7011      	strb	r1, [r2, #0]
   26fec:	001a      	movs	r2, r3
   26fee:	2318      	movs	r3, #24
   26ff0:	18fb      	adds	r3, r7, r3
   26ff2:	5c9a      	ldrb	r2, [r3, r2]
   26ff4:	2314      	movs	r3, #20
   26ff6:	18fb      	adds	r3, r7, r3
   26ff8:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   26ffa:	e13c      	b.n	27276 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   26ffc:	239c      	movs	r3, #156	; 0x9c
   26ffe:	009a      	lsls	r2, r3, #2
   27000:	494b      	ldr	r1, [pc, #300]	; (27130 <spi_cmd_complete+0x77c>)
   27002:	4b4c      	ldr	r3, [pc, #304]	; (27134 <spi_cmd_complete+0x780>)
   27004:	0018      	movs	r0, r3
   27006:	4b4c      	ldr	r3, [pc, #304]	; (27138 <spi_cmd_complete+0x784>)
   27008:	4798      	blx	r3
   2700a:	4b54      	ldr	r3, [pc, #336]	; (2715c <spi_cmd_complete+0x7a8>)
   2700c:	0018      	movs	r0, r3
   2700e:	4b4a      	ldr	r3, [pc, #296]	; (27138 <spi_cmd_complete+0x784>)
   27010:	4798      	blx	r3
   27012:	4b4b      	ldr	r3, [pc, #300]	; (27140 <spi_cmd_complete+0x78c>)
   27014:	0018      	movs	r0, r3
   27016:	4b48      	ldr	r3, [pc, #288]	; (27138 <spi_cmd_complete+0x784>)
   27018:	4798      	blx	r3
						result = N_FAIL;
   2701a:	2300      	movs	r3, #0
   2701c:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   2701e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27020:	e12a      	b.n	27278 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   27022:	230f      	movs	r3, #15
   27024:	18fb      	adds	r3, r7, r3
   27026:	781b      	ldrb	r3, [r3, #0]
   27028:	2bc2      	cmp	r3, #194	; 0xc2
   2702a:	d005      	beq.n	27038 <spi_cmd_complete+0x684>
   2702c:	230f      	movs	r3, #15
   2702e:	18fb      	adds	r3, r7, r3
   27030:	781b      	ldrb	r3, [r3, #0]
   27032:	2bc8      	cmp	r3, #200	; 0xc8
   27034:	d000      	beq.n	27038 <spi_cmd_complete+0x684>
   27036:	e11e      	b.n	27276 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   27038:	2300      	movs	r3, #0
   2703a:	663b      	str	r3, [r7, #96]	; 0x60
   2703c:	e011      	b.n	27062 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   2703e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   27040:	1c5a      	adds	r2, r3, #1
   27042:	663a      	str	r2, [r7, #96]	; 0x60
   27044:	001a      	movs	r2, r3
   27046:	687b      	ldr	r3, [r7, #4]
   27048:	189a      	adds	r2, r3, r2
   2704a:	2376      	movs	r3, #118	; 0x76
   2704c:	18fb      	adds	r3, r7, r3
   2704e:	781b      	ldrb	r3, [r3, #0]
   27050:	2176      	movs	r1, #118	; 0x76
   27052:	1879      	adds	r1, r7, r1
   27054:	1c58      	adds	r0, r3, #1
   27056:	7008      	strb	r0, [r1, #0]
   27058:	0019      	movs	r1, r3
   2705a:	2318      	movs	r3, #24
   2705c:	18fb      	adds	r3, r7, r3
   2705e:	5c5b      	ldrb	r3, [r3, r1]
   27060:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   27062:	2376      	movs	r3, #118	; 0x76
   27064:	18fb      	adds	r3, r7, r3
   27066:	781a      	ldrb	r2, [r3, #0]
   27068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2706a:	429a      	cmp	r2, r3
   2706c:	d203      	bcs.n	27076 <spi_cmd_complete+0x6c2>
   2706e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   27070:	683b      	ldr	r3, [r7, #0]
   27072:	429a      	cmp	r2, r3
   27074:	d3e3      	bcc.n	2703e <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   27076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   27078:	683a      	ldr	r2, [r7, #0]
   2707a:	1ad3      	subs	r3, r2, r3
   2707c:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   2707e:	683b      	ldr	r3, [r7, #0]
   27080:	2b00      	cmp	r3, #0
   27082:	d100      	bne.n	27086 <spi_cmd_complete+0x6d2>
   27084:	e0f1      	b.n	2726a <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   27086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   27088:	2280      	movs	r2, #128	; 0x80
   2708a:	0192      	lsls	r2, r2, #6
   2708c:	1ad3      	subs	r3, r2, r3
   2708e:	001a      	movs	r2, r3
   27090:	683b      	ldr	r3, [r7, #0]
   27092:	429a      	cmp	r2, r3
   27094:	d302      	bcc.n	2709c <spi_cmd_complete+0x6e8>
						nbytes = sz;
   27096:	683b      	ldr	r3, [r7, #0]
   27098:	65fb      	str	r3, [r7, #92]	; 0x5c
   2709a:	e004      	b.n	270a6 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   2709c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2709e:	2280      	movs	r2, #128	; 0x80
   270a0:	0192      	lsls	r2, r2, #6
   270a2:	1ad3      	subs	r3, r2, r3
   270a4:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   270a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   270a8:	687a      	ldr	r2, [r7, #4]
   270aa:	18d3      	adds	r3, r2, r3
   270ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   270ae:	b292      	uxth	r2, r2
   270b0:	0011      	movs	r1, r2
   270b2:	0018      	movs	r0, r3
   270b4:	4b2a      	ldr	r3, [pc, #168]	; (27160 <spi_cmd_complete+0x7ac>)
   270b6:	4798      	blx	r3
   270b8:	1e03      	subs	r3, r0, #0
   270ba:	d010      	beq.n	270de <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   270bc:	4a29      	ldr	r2, [pc, #164]	; (27164 <spi_cmd_complete+0x7b0>)
   270be:	491c      	ldr	r1, [pc, #112]	; (27130 <spi_cmd_complete+0x77c>)
   270c0:	4b1c      	ldr	r3, [pc, #112]	; (27134 <spi_cmd_complete+0x780>)
   270c2:	0018      	movs	r0, r3
   270c4:	4b1c      	ldr	r3, [pc, #112]	; (27138 <spi_cmd_complete+0x784>)
   270c6:	4798      	blx	r3
   270c8:	4b27      	ldr	r3, [pc, #156]	; (27168 <spi_cmd_complete+0x7b4>)
   270ca:	0018      	movs	r0, r3
   270cc:	4b1a      	ldr	r3, [pc, #104]	; (27138 <spi_cmd_complete+0x784>)
   270ce:	4798      	blx	r3
   270d0:	4b1b      	ldr	r3, [pc, #108]	; (27140 <spi_cmd_complete+0x78c>)
   270d2:	0018      	movs	r0, r3
   270d4:	4b18      	ldr	r3, [pc, #96]	; (27138 <spi_cmd_complete+0x784>)
   270d6:	4798      	blx	r3
						result = N_FAIL;
   270d8:	2300      	movs	r3, #0
   270da:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   270dc:	e0cb      	b.n	27276 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   270de:	4b1c      	ldr	r3, [pc, #112]	; (27150 <spi_cmd_complete+0x79c>)
   270e0:	781b      	ldrb	r3, [r3, #0]
   270e2:	2b00      	cmp	r3, #0
   270e4:	d119      	bne.n	2711a <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   270e6:	2314      	movs	r3, #20
   270e8:	18fb      	adds	r3, r7, r3
   270ea:	2102      	movs	r1, #2
   270ec:	0018      	movs	r0, r3
   270ee:	4b1c      	ldr	r3, [pc, #112]	; (27160 <spi_cmd_complete+0x7ac>)
   270f0:	4798      	blx	r3
   270f2:	1e03      	subs	r3, r0, #0
   270f4:	d011      	beq.n	2711a <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   270f6:	23a6      	movs	r3, #166	; 0xa6
   270f8:	009a      	lsls	r2, r3, #2
   270fa:	490d      	ldr	r1, [pc, #52]	; (27130 <spi_cmd_complete+0x77c>)
   270fc:	4b0d      	ldr	r3, [pc, #52]	; (27134 <spi_cmd_complete+0x780>)
   270fe:	0018      	movs	r0, r3
   27100:	4b0d      	ldr	r3, [pc, #52]	; (27138 <spi_cmd_complete+0x784>)
   27102:	4798      	blx	r3
   27104:	4b19      	ldr	r3, [pc, #100]	; (2716c <spi_cmd_complete+0x7b8>)
   27106:	0018      	movs	r0, r3
   27108:	4b0b      	ldr	r3, [pc, #44]	; (27138 <spi_cmd_complete+0x784>)
   2710a:	4798      	blx	r3
   2710c:	4b0c      	ldr	r3, [pc, #48]	; (27140 <spi_cmd_complete+0x78c>)
   2710e:	0018      	movs	r0, r3
   27110:	4b09      	ldr	r3, [pc, #36]	; (27138 <spi_cmd_complete+0x784>)
   27112:	4798      	blx	r3
							result = N_FAIL;
   27114:	2300      	movs	r3, #0
   27116:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   27118:	e0ad      	b.n	27276 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   2711a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2711c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   2711e:	18d3      	adds	r3, r2, r3
   27120:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   27122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   27124:	683a      	ldr	r2, [r7, #0]
   27126:	1ad3      	subs	r3, r2, r3
   27128:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   2712a:	e09e      	b.n	2726a <spi_cmd_complete+0x8b6>
   2712c:	0000022f 	.word	0x0000022f
   27130:	0003d95c 	.word	0x0003d95c
   27134:	0003d348 	.word	0x0003d348
   27138:	00020e3d 	.word	0x00020e3d
   2713c:	0003d440 	.word	0x0003d440
   27140:	0003d388 	.word	0x0003d388
   27144:	00000239 	.word	0x00000239
   27148:	0003d47c 	.word	0x0003d47c
   2714c:	0003d4b0 	.word	0x0003d4b0
   27150:	200041d0 	.word	0x200041d0
   27154:	00000263 	.word	0x00000263
   27158:	0003d4e0 	.word	0x0003d4e0
   2715c:	0003d510 	.word	0x0003d510
   27160:	000262ed 	.word	0x000262ed
   27164:	0000028e 	.word	0x0000028e
   27168:	0003d540 	.word	0x0003d540
   2716c:	0003d574 	.word	0x0003d574
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   27170:	683a      	ldr	r2, [r7, #0]
   27172:	2380      	movs	r3, #128	; 0x80
   27174:	019b      	lsls	r3, r3, #6
   27176:	429a      	cmp	r2, r3
   27178:	d802      	bhi.n	27180 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   2717a:	683b      	ldr	r3, [r7, #0]
   2717c:	65bb      	str	r3, [r7, #88]	; 0x58
   2717e:	e002      	b.n	27186 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   27180:	2380      	movs	r3, #128	; 0x80
   27182:	019b      	lsls	r3, r3, #6
   27184:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   27186:	230a      	movs	r3, #10
   27188:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   2718a:	2317      	movs	r3, #23
   2718c:	18fb      	adds	r3, r7, r3
   2718e:	2101      	movs	r1, #1
   27190:	0018      	movs	r0, r3
   27192:	4b3b      	ldr	r3, [pc, #236]	; (27280 <spi_cmd_complete+0x8cc>)
   27194:	4798      	blx	r3
   27196:	1e03      	subs	r3, r0, #0
   27198:	d011      	beq.n	271be <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   2719a:	23ae      	movs	r3, #174	; 0xae
   2719c:	009a      	lsls	r2, r3, #2
   2719e:	4939      	ldr	r1, [pc, #228]	; (27284 <spi_cmd_complete+0x8d0>)
   271a0:	4b39      	ldr	r3, [pc, #228]	; (27288 <spi_cmd_complete+0x8d4>)
   271a2:	0018      	movs	r0, r3
   271a4:	4b39      	ldr	r3, [pc, #228]	; (2728c <spi_cmd_complete+0x8d8>)
   271a6:	4798      	blx	r3
   271a8:	4b39      	ldr	r3, [pc, #228]	; (27290 <spi_cmd_complete+0x8dc>)
   271aa:	0018      	movs	r0, r3
   271ac:	4b37      	ldr	r3, [pc, #220]	; (2728c <spi_cmd_complete+0x8d8>)
   271ae:	4798      	blx	r3
   271b0:	4b38      	ldr	r3, [pc, #224]	; (27294 <spi_cmd_complete+0x8e0>)
   271b2:	0018      	movs	r0, r3
   271b4:	4b35      	ldr	r3, [pc, #212]	; (2728c <spi_cmd_complete+0x8d8>)
   271b6:	4798      	blx	r3
							result = N_FAIL;
   271b8:	2300      	movs	r3, #0
   271ba:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   271bc:	e010      	b.n	271e0 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   271be:	2317      	movs	r3, #23
   271c0:	18fb      	adds	r3, r7, r3
   271c2:	781b      	ldrb	r3, [r3, #0]
   271c4:	091b      	lsrs	r3, r3, #4
   271c6:	b2db      	uxtb	r3, r3
   271c8:	001a      	movs	r2, r3
   271ca:	230f      	movs	r3, #15
   271cc:	4013      	ands	r3, r2
   271ce:	2b0f      	cmp	r3, #15
   271d0:	d005      	beq.n	271de <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   271d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   271d4:	1e5a      	subs	r2, r3, #1
   271d6:	667a      	str	r2, [r7, #100]	; 0x64
   271d8:	2b00      	cmp	r3, #0
   271da:	d1d6      	bne.n	2718a <spi_cmd_complete+0x7d6>
   271dc:	e000      	b.n	271e0 <spi_cmd_complete+0x82c>
							break;
   271de:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   271e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   271e2:	2b00      	cmp	r3, #0
   271e4:	d046      	beq.n	27274 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   271e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   271e8:	687a      	ldr	r2, [r7, #4]
   271ea:	18d3      	adds	r3, r2, r3
   271ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
   271ee:	b292      	uxth	r2, r2
   271f0:	0011      	movs	r1, r2
   271f2:	0018      	movs	r0, r3
   271f4:	4b22      	ldr	r3, [pc, #136]	; (27280 <spi_cmd_complete+0x8cc>)
   271f6:	4798      	blx	r3
   271f8:	1e03      	subs	r3, r0, #0
   271fa:	d011      	beq.n	27220 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   271fc:	23b2      	movs	r3, #178	; 0xb2
   271fe:	009a      	lsls	r2, r3, #2
   27200:	4920      	ldr	r1, [pc, #128]	; (27284 <spi_cmd_complete+0x8d0>)
   27202:	4b21      	ldr	r3, [pc, #132]	; (27288 <spi_cmd_complete+0x8d4>)
   27204:	0018      	movs	r0, r3
   27206:	4b21      	ldr	r3, [pc, #132]	; (2728c <spi_cmd_complete+0x8d8>)
   27208:	4798      	blx	r3
   2720a:	4b23      	ldr	r3, [pc, #140]	; (27298 <spi_cmd_complete+0x8e4>)
   2720c:	0018      	movs	r0, r3
   2720e:	4b1f      	ldr	r3, [pc, #124]	; (2728c <spi_cmd_complete+0x8d8>)
   27210:	4798      	blx	r3
   27212:	4b20      	ldr	r3, [pc, #128]	; (27294 <spi_cmd_complete+0x8e0>)
   27214:	0018      	movs	r0, r3
   27216:	4b1d      	ldr	r3, [pc, #116]	; (2728c <spi_cmd_complete+0x8d8>)
   27218:	4798      	blx	r3
						result = N_FAIL;
   2721a:	2300      	movs	r3, #0
   2721c:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   2721e:	e02a      	b.n	27276 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   27220:	4b1e      	ldr	r3, [pc, #120]	; (2729c <spi_cmd_complete+0x8e8>)
   27222:	781b      	ldrb	r3, [r3, #0]
   27224:	2b00      	cmp	r3, #0
   27226:	d118      	bne.n	2725a <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   27228:	2314      	movs	r3, #20
   2722a:	18fb      	adds	r3, r7, r3
   2722c:	2102      	movs	r1, #2
   2722e:	0018      	movs	r0, r3
   27230:	4b13      	ldr	r3, [pc, #76]	; (27280 <spi_cmd_complete+0x8cc>)
   27232:	4798      	blx	r3
   27234:	1e03      	subs	r3, r0, #0
   27236:	d010      	beq.n	2725a <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   27238:	4a19      	ldr	r2, [pc, #100]	; (272a0 <spi_cmd_complete+0x8ec>)
   2723a:	4912      	ldr	r1, [pc, #72]	; (27284 <spi_cmd_complete+0x8d0>)
   2723c:	4b12      	ldr	r3, [pc, #72]	; (27288 <spi_cmd_complete+0x8d4>)
   2723e:	0018      	movs	r0, r3
   27240:	4b12      	ldr	r3, [pc, #72]	; (2728c <spi_cmd_complete+0x8d8>)
   27242:	4798      	blx	r3
   27244:	4b17      	ldr	r3, [pc, #92]	; (272a4 <spi_cmd_complete+0x8f0>)
   27246:	0018      	movs	r0, r3
   27248:	4b10      	ldr	r3, [pc, #64]	; (2728c <spi_cmd_complete+0x8d8>)
   2724a:	4798      	blx	r3
   2724c:	4b11      	ldr	r3, [pc, #68]	; (27294 <spi_cmd_complete+0x8e0>)
   2724e:	0018      	movs	r0, r3
   27250:	4b0e      	ldr	r3, [pc, #56]	; (2728c <spi_cmd_complete+0x8d8>)
   27252:	4798      	blx	r3
							result = N_FAIL;
   27254:	2300      	movs	r3, #0
   27256:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   27258:	e00d      	b.n	27276 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   2725a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2725c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2725e:	18d3      	adds	r3, r2, r3
   27260:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   27262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27264:	683a      	ldr	r2, [r7, #0]
   27266:	1ad3      	subs	r3, r2, r3
   27268:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   2726a:	683b      	ldr	r3, [r7, #0]
   2726c:	2b00      	cmp	r3, #0
   2726e:	d000      	beq.n	27272 <spi_cmd_complete+0x8be>
   27270:	e77e      	b.n	27170 <spi_cmd_complete+0x7bc>
   27272:	e000      	b.n	27276 <spi_cmd_complete+0x8c2>
						break;
   27274:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   27276:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   27278:	0018      	movs	r0, r3
   2727a:	46bd      	mov	sp, r7
   2727c:	b01f      	add	sp, #124	; 0x7c
   2727e:	bd90      	pop	{r4, r7, pc}
   27280:	000262ed 	.word	0x000262ed
   27284:	0003d95c 	.word	0x0003d95c
   27288:	0003d348 	.word	0x0003d348
   2728c:	00020e3d 	.word	0x00020e3d
   27290:	0003d5ac 	.word	0x0003d5ac
   27294:	0003d388 	.word	0x0003d388
   27298:	0003d540 	.word	0x0003d540
   2729c:	200041d0 	.word	0x200041d0
   272a0:	000002d2 	.word	0x000002d2
   272a4:	0003d574 	.word	0x0003d574

000272a8 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   272a8:	b580      	push	{r7, lr}
   272aa:	b086      	sub	sp, #24
   272ac:	af00      	add	r7, sp, #0
   272ae:	6078      	str	r0, [r7, #4]
   272b0:	000a      	movs	r2, r1
   272b2:	1cbb      	adds	r3, r7, #2
   272b4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   272b6:	2313      	movs	r3, #19
   272b8:	18fb      	adds	r3, r7, r3
   272ba:	2201      	movs	r2, #1
   272bc:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   272be:	230c      	movs	r3, #12
   272c0:	18fb      	adds	r3, r7, r3
   272c2:	2200      	movs	r2, #0
   272c4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   272c6:	2316      	movs	r3, #22
   272c8:	18fb      	adds	r3, r7, r3
   272ca:	2200      	movs	r2, #0
   272cc:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   272ce:	1cbb      	adds	r3, r7, #2
   272d0:	881a      	ldrh	r2, [r3, #0]
   272d2:	2380      	movs	r3, #128	; 0x80
   272d4:	019b      	lsls	r3, r3, #6
   272d6:	429a      	cmp	r2, r3
   272d8:	d805      	bhi.n	272e6 <spi_data_write+0x3e>
			nbytes = sz;
   272da:	2314      	movs	r3, #20
   272dc:	18fb      	adds	r3, r7, r3
   272de:	1cba      	adds	r2, r7, #2
   272e0:	8812      	ldrh	r2, [r2, #0]
   272e2:	801a      	strh	r2, [r3, #0]
   272e4:	e004      	b.n	272f0 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   272e6:	2314      	movs	r3, #20
   272e8:	18fb      	adds	r3, r7, r3
   272ea:	2280      	movs	r2, #128	; 0x80
   272ec:	0192      	lsls	r2, r2, #6
   272ee:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   272f0:	2311      	movs	r3, #17
   272f2:	18fb      	adds	r3, r7, r3
   272f4:	22f0      	movs	r2, #240	; 0xf0
   272f6:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   272f8:	2316      	movs	r3, #22
   272fa:	18fb      	adds	r3, r7, r3
   272fc:	2200      	movs	r2, #0
   272fe:	5e9b      	ldrsh	r3, [r3, r2]
   27300:	2b00      	cmp	r3, #0
   27302:	d10f      	bne.n	27324 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   27304:	1cbb      	adds	r3, r7, #2
   27306:	881a      	ldrh	r2, [r3, #0]
   27308:	2380      	movs	r3, #128	; 0x80
   2730a:	019b      	lsls	r3, r3, #6
   2730c:	429a      	cmp	r2, r3
   2730e:	d804      	bhi.n	2731a <spi_data_write+0x72>
				order = 0x3;
   27310:	2312      	movs	r3, #18
   27312:	18fb      	adds	r3, r7, r3
   27314:	2203      	movs	r2, #3
   27316:	701a      	strb	r2, [r3, #0]
   27318:	e013      	b.n	27342 <spi_data_write+0x9a>
			else
				order = 0x1;
   2731a:	2312      	movs	r3, #18
   2731c:	18fb      	adds	r3, r7, r3
   2731e:	2201      	movs	r2, #1
   27320:	701a      	strb	r2, [r3, #0]
   27322:	e00e      	b.n	27342 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   27324:	1cbb      	adds	r3, r7, #2
   27326:	881a      	ldrh	r2, [r3, #0]
   27328:	2380      	movs	r3, #128	; 0x80
   2732a:	019b      	lsls	r3, r3, #6
   2732c:	429a      	cmp	r2, r3
   2732e:	d804      	bhi.n	2733a <spi_data_write+0x92>
				order = 0x3;
   27330:	2312      	movs	r3, #18
   27332:	18fb      	adds	r3, r7, r3
   27334:	2203      	movs	r2, #3
   27336:	701a      	strb	r2, [r3, #0]
   27338:	e003      	b.n	27342 <spi_data_write+0x9a>
			else
				order = 0x2;
   2733a:	2312      	movs	r3, #18
   2733c:	18fb      	adds	r3, r7, r3
   2733e:	2202      	movs	r2, #2
   27340:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   27342:	2311      	movs	r3, #17
   27344:	18fb      	adds	r3, r7, r3
   27346:	781a      	ldrb	r2, [r3, #0]
   27348:	2312      	movs	r3, #18
   2734a:	18fb      	adds	r3, r7, r3
   2734c:	781b      	ldrb	r3, [r3, #0]
   2734e:	4313      	orrs	r3, r2
   27350:	b2da      	uxtb	r2, r3
   27352:	2311      	movs	r3, #17
   27354:	18fb      	adds	r3, r7, r3
   27356:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   27358:	2311      	movs	r3, #17
   2735a:	18fb      	adds	r3, r7, r3
   2735c:	2101      	movs	r1, #1
   2735e:	0018      	movs	r0, r3
   27360:	4b3c      	ldr	r3, [pc, #240]	; (27454 <spi_data_write+0x1ac>)
   27362:	4798      	blx	r3
   27364:	1e03      	subs	r3, r0, #0
   27366:	d012      	beq.n	2738e <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   27368:	4a3b      	ldr	r2, [pc, #236]	; (27458 <spi_data_write+0x1b0>)
   2736a:	493c      	ldr	r1, [pc, #240]	; (2745c <spi_data_write+0x1b4>)
   2736c:	4b3c      	ldr	r3, [pc, #240]	; (27460 <spi_data_write+0x1b8>)
   2736e:	0018      	movs	r0, r3
   27370:	4b3c      	ldr	r3, [pc, #240]	; (27464 <spi_data_write+0x1bc>)
   27372:	4798      	blx	r3
   27374:	4b3c      	ldr	r3, [pc, #240]	; (27468 <spi_data_write+0x1c0>)
   27376:	0018      	movs	r0, r3
   27378:	4b3a      	ldr	r3, [pc, #232]	; (27464 <spi_data_write+0x1bc>)
   2737a:	4798      	blx	r3
   2737c:	4b3b      	ldr	r3, [pc, #236]	; (2746c <spi_data_write+0x1c4>)
   2737e:	0018      	movs	r0, r3
   27380:	4b38      	ldr	r3, [pc, #224]	; (27464 <spi_data_write+0x1bc>)
   27382:	4798      	blx	r3
			result = N_FAIL;
   27384:	2313      	movs	r3, #19
   27386:	18fb      	adds	r3, r7, r3
   27388:	2200      	movs	r2, #0
   2738a:	701a      	strb	r2, [r3, #0]
			break;
   2738c:	e059      	b.n	27442 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2738e:	2316      	movs	r3, #22
   27390:	18fb      	adds	r3, r7, r3
   27392:	2200      	movs	r2, #0
   27394:	5e9b      	ldrsh	r3, [r3, r2]
   27396:	687a      	ldr	r2, [r7, #4]
   27398:	18d2      	adds	r2, r2, r3
   2739a:	2314      	movs	r3, #20
   2739c:	18fb      	adds	r3, r7, r3
   2739e:	881b      	ldrh	r3, [r3, #0]
   273a0:	0019      	movs	r1, r3
   273a2:	0010      	movs	r0, r2
   273a4:	4b2b      	ldr	r3, [pc, #172]	; (27454 <spi_data_write+0x1ac>)
   273a6:	4798      	blx	r3
   273a8:	1e03      	subs	r3, r0, #0
   273aa:	d012      	beq.n	273d2 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   273ac:	4a30      	ldr	r2, [pc, #192]	; (27470 <spi_data_write+0x1c8>)
   273ae:	492b      	ldr	r1, [pc, #172]	; (2745c <spi_data_write+0x1b4>)
   273b0:	4b2b      	ldr	r3, [pc, #172]	; (27460 <spi_data_write+0x1b8>)
   273b2:	0018      	movs	r0, r3
   273b4:	4b2b      	ldr	r3, [pc, #172]	; (27464 <spi_data_write+0x1bc>)
   273b6:	4798      	blx	r3
   273b8:	4b2e      	ldr	r3, [pc, #184]	; (27474 <spi_data_write+0x1cc>)
   273ba:	0018      	movs	r0, r3
   273bc:	4b29      	ldr	r3, [pc, #164]	; (27464 <spi_data_write+0x1bc>)
   273be:	4798      	blx	r3
   273c0:	4b2a      	ldr	r3, [pc, #168]	; (2746c <spi_data_write+0x1c4>)
   273c2:	0018      	movs	r0, r3
   273c4:	4b27      	ldr	r3, [pc, #156]	; (27464 <spi_data_write+0x1bc>)
   273c6:	4798      	blx	r3
			result = N_FAIL;
   273c8:	2313      	movs	r3, #19
   273ca:	18fb      	adds	r3, r7, r3
   273cc:	2200      	movs	r2, #0
   273ce:	701a      	strb	r2, [r3, #0]
			break;
   273d0:	e037      	b.n	27442 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   273d2:	4b29      	ldr	r3, [pc, #164]	; (27478 <spi_data_write+0x1d0>)
   273d4:	781b      	ldrb	r3, [r3, #0]
   273d6:	2b00      	cmp	r3, #0
   273d8:	d11b      	bne.n	27412 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   273da:	230c      	movs	r3, #12
   273dc:	18fb      	adds	r3, r7, r3
   273de:	2102      	movs	r1, #2
   273e0:	0018      	movs	r0, r3
   273e2:	4b1c      	ldr	r3, [pc, #112]	; (27454 <spi_data_write+0x1ac>)
   273e4:	4798      	blx	r3
   273e6:	1e03      	subs	r3, r0, #0
   273e8:	d013      	beq.n	27412 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   273ea:	23d7      	movs	r3, #215	; 0xd7
   273ec:	009a      	lsls	r2, r3, #2
   273ee:	491b      	ldr	r1, [pc, #108]	; (2745c <spi_data_write+0x1b4>)
   273f0:	4b1b      	ldr	r3, [pc, #108]	; (27460 <spi_data_write+0x1b8>)
   273f2:	0018      	movs	r0, r3
   273f4:	4b1b      	ldr	r3, [pc, #108]	; (27464 <spi_data_write+0x1bc>)
   273f6:	4798      	blx	r3
   273f8:	4b20      	ldr	r3, [pc, #128]	; (2747c <spi_data_write+0x1d4>)
   273fa:	0018      	movs	r0, r3
   273fc:	4b19      	ldr	r3, [pc, #100]	; (27464 <spi_data_write+0x1bc>)
   273fe:	4798      	blx	r3
   27400:	4b1a      	ldr	r3, [pc, #104]	; (2746c <spi_data_write+0x1c4>)
   27402:	0018      	movs	r0, r3
   27404:	4b17      	ldr	r3, [pc, #92]	; (27464 <spi_data_write+0x1bc>)
   27406:	4798      	blx	r3
				result = N_FAIL;
   27408:	2313      	movs	r3, #19
   2740a:	18fb      	adds	r3, r7, r3
   2740c:	2200      	movs	r2, #0
   2740e:	701a      	strb	r2, [r3, #0]
				break;
   27410:	e017      	b.n	27442 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   27412:	2316      	movs	r3, #22
   27414:	18fb      	adds	r3, r7, r3
   27416:	881a      	ldrh	r2, [r3, #0]
   27418:	2314      	movs	r3, #20
   2741a:	18fb      	adds	r3, r7, r3
   2741c:	881b      	ldrh	r3, [r3, #0]
   2741e:	18d3      	adds	r3, r2, r3
   27420:	b29a      	uxth	r2, r3
   27422:	2316      	movs	r3, #22
   27424:	18fb      	adds	r3, r7, r3
   27426:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   27428:	1cbb      	adds	r3, r7, #2
   2742a:	1cb9      	adds	r1, r7, #2
   2742c:	2214      	movs	r2, #20
   2742e:	18ba      	adds	r2, r7, r2
   27430:	8809      	ldrh	r1, [r1, #0]
   27432:	8812      	ldrh	r2, [r2, #0]
   27434:	1a8a      	subs	r2, r1, r2
   27436:	801a      	strh	r2, [r3, #0]
	} while (sz);
   27438:	1cbb      	adds	r3, r7, #2
   2743a:	881b      	ldrh	r3, [r3, #0]
   2743c:	2b00      	cmp	r3, #0
   2743e:	d000      	beq.n	27442 <spi_data_write+0x19a>
   27440:	e745      	b.n	272ce <spi_data_write+0x26>


	return result;
   27442:	2313      	movs	r3, #19
   27444:	18fb      	adds	r3, r7, r3
   27446:	781b      	ldrb	r3, [r3, #0]
   27448:	b25b      	sxtb	r3, r3
}
   2744a:	0018      	movs	r0, r3
   2744c:	46bd      	mov	sp, r7
   2744e:	b006      	add	sp, #24
   27450:	bd80      	pop	{r7, pc}
   27452:	46c0      	nop			; (mov r8, r8)
   27454:	00026331 	.word	0x00026331
   27458:	00000349 	.word	0x00000349
   2745c:	0003d970 	.word	0x0003d970
   27460:	0003d348 	.word	0x0003d348
   27464:	00020e3d 	.word	0x00020e3d
   27468:	0003d610 	.word	0x0003d610
   2746c:	0003d388 	.word	0x0003d388
   27470:	00000352 	.word	0x00000352
   27474:	0003d648 	.word	0x0003d648
   27478:	200041d0 	.word	0x200041d0
   2747c:	0003d67c 	.word	0x0003d67c

00027480 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   27480:	b590      	push	{r4, r7, lr}
   27482:	b087      	sub	sp, #28
   27484:	af02      	add	r7, sp, #8
   27486:	6078      	str	r0, [r7, #4]
   27488:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2748a:	230f      	movs	r3, #15
   2748c:	18fb      	adds	r3, r7, r3
   2748e:	220a      	movs	r2, #10
   27490:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   27492:	230c      	movs	r3, #12
   27494:	18fb      	adds	r3, r7, r3
   27496:	2201      	movs	r2, #1
   27498:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   2749a:	230e      	movs	r3, #14
   2749c:	18fb      	adds	r3, r7, r3
   2749e:	22c9      	movs	r2, #201	; 0xc9
   274a0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   274a2:	230d      	movs	r3, #13
   274a4:	18fb      	adds	r3, r7, r3
   274a6:	2200      	movs	r2, #0
   274a8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   274aa:	687b      	ldr	r3, [r7, #4]
   274ac:	2b30      	cmp	r3, #48	; 0x30
   274ae:	d808      	bhi.n	274c2 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   274b0:	230e      	movs	r3, #14
   274b2:	18fb      	adds	r3, r7, r3
   274b4:	22c3      	movs	r2, #195	; 0xc3
   274b6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   274b8:	230d      	movs	r3, #13
   274ba:	18fb      	adds	r3, r7, r3
   274bc:	2201      	movs	r2, #1
   274be:	701a      	strb	r2, [r3, #0]
   274c0:	e007      	b.n	274d2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   274c2:	230e      	movs	r3, #14
   274c4:	18fb      	adds	r3, r7, r3
   274c6:	22c9      	movs	r2, #201	; 0xc9
   274c8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   274ca:	230d      	movs	r3, #13
   274cc:	18fb      	adds	r3, r7, r3
   274ce:	2200      	movs	r2, #0
   274d0:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   274d2:	003a      	movs	r2, r7
   274d4:	6879      	ldr	r1, [r7, #4]
   274d6:	230e      	movs	r3, #14
   274d8:	18fb      	adds	r3, r7, r3
   274da:	7818      	ldrb	r0, [r3, #0]
   274dc:	230d      	movs	r3, #13
   274de:	18fb      	adds	r3, r7, r3
   274e0:	781b      	ldrb	r3, [r3, #0]
   274e2:	9300      	str	r3, [sp, #0]
   274e4:	2304      	movs	r3, #4
   274e6:	4c2e      	ldr	r4, [pc, #184]	; (275a0 <spi_write_reg+0x120>)
   274e8:	47a0      	blx	r4
   274ea:	0002      	movs	r2, r0
   274ec:	230c      	movs	r3, #12
   274ee:	18fb      	adds	r3, r7, r3
   274f0:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   274f2:	230c      	movs	r3, #12
   274f4:	18fb      	adds	r3, r7, r3
   274f6:	781b      	ldrb	r3, [r3, #0]
   274f8:	b25b      	sxtb	r3, r3
   274fa:	2b01      	cmp	r3, #1
   274fc:	d010      	beq.n	27520 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   274fe:	4a29      	ldr	r2, [pc, #164]	; (275a4 <spi_write_reg+0x124>)
   27500:	4929      	ldr	r1, [pc, #164]	; (275a8 <spi_write_reg+0x128>)
   27502:	4b2a      	ldr	r3, [pc, #168]	; (275ac <spi_write_reg+0x12c>)
   27504:	0018      	movs	r0, r3
   27506:	4b2a      	ldr	r3, [pc, #168]	; (275b0 <spi_write_reg+0x130>)
   27508:	4798      	blx	r3
   2750a:	687a      	ldr	r2, [r7, #4]
   2750c:	4b29      	ldr	r3, [pc, #164]	; (275b4 <spi_write_reg+0x134>)
   2750e:	0011      	movs	r1, r2
   27510:	0018      	movs	r0, r3
   27512:	4b27      	ldr	r3, [pc, #156]	; (275b0 <spi_write_reg+0x130>)
   27514:	4798      	blx	r3
   27516:	4b28      	ldr	r3, [pc, #160]	; (275b8 <spi_write_reg+0x138>)
   27518:	0018      	movs	r0, r3
   2751a:	4b25      	ldr	r3, [pc, #148]	; (275b0 <spi_write_reg+0x130>)
   2751c:	4798      	blx	r3
		goto _FAIL_;
   2751e:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   27520:	230c      	movs	r3, #12
   27522:	18fb      	adds	r3, r7, r3
   27524:	781b      	ldrb	r3, [r3, #0]
   27526:	b25b      	sxtb	r3, r3
   27528:	2b01      	cmp	r3, #1
   2752a:	d030      	beq.n	2758e <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   2752c:	2001      	movs	r0, #1
   2752e:	4b23      	ldr	r3, [pc, #140]	; (275bc <spi_write_reg+0x13c>)
   27530:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   27532:	2300      	movs	r3, #0
   27534:	9300      	str	r3, [sp, #0]
   27536:	2300      	movs	r3, #0
   27538:	2200      	movs	r2, #0
   2753a:	2100      	movs	r1, #0
   2753c:	20cf      	movs	r0, #207	; 0xcf
   2753e:	4c20      	ldr	r4, [pc, #128]	; (275c0 <spi_write_reg+0x140>)
   27540:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   27542:	20cf      	movs	r0, #207	; 0xcf
   27544:	4b1f      	ldr	r3, [pc, #124]	; (275c4 <spi_write_reg+0x144>)
   27546:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   27548:	23ea      	movs	r3, #234	; 0xea
   2754a:	009a      	lsls	r2, r3, #2
   2754c:	4916      	ldr	r1, [pc, #88]	; (275a8 <spi_write_reg+0x128>)
   2754e:	4b17      	ldr	r3, [pc, #92]	; (275ac <spi_write_reg+0x12c>)
   27550:	0018      	movs	r0, r3
   27552:	4b17      	ldr	r3, [pc, #92]	; (275b0 <spi_write_reg+0x130>)
   27554:	4798      	blx	r3
   27556:	230f      	movs	r3, #15
   27558:	18fb      	adds	r3, r7, r3
   2755a:	7819      	ldrb	r1, [r3, #0]
   2755c:	683b      	ldr	r3, [r7, #0]
   2755e:	687a      	ldr	r2, [r7, #4]
   27560:	4819      	ldr	r0, [pc, #100]	; (275c8 <spi_write_reg+0x148>)
   27562:	4c13      	ldr	r4, [pc, #76]	; (275b0 <spi_write_reg+0x130>)
   27564:	47a0      	blx	r4
   27566:	4b14      	ldr	r3, [pc, #80]	; (275b8 <spi_write_reg+0x138>)
   27568:	0018      	movs	r0, r3
   2756a:	4b11      	ldr	r3, [pc, #68]	; (275b0 <spi_write_reg+0x130>)
   2756c:	4798      	blx	r3
		nm_bsp_sleep(1);
   2756e:	2001      	movs	r0, #1
   27570:	4b12      	ldr	r3, [pc, #72]	; (275bc <spi_write_reg+0x13c>)
   27572:	4798      	blx	r3
		retry--;
   27574:	230f      	movs	r3, #15
   27576:	18fb      	adds	r3, r7, r3
   27578:	781a      	ldrb	r2, [r3, #0]
   2757a:	230f      	movs	r3, #15
   2757c:	18fb      	adds	r3, r7, r3
   2757e:	3a01      	subs	r2, #1
   27580:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   27582:	230f      	movs	r3, #15
   27584:	18fb      	adds	r3, r7, r3
   27586:	781b      	ldrb	r3, [r3, #0]
   27588:	2b00      	cmp	r3, #0
   2758a:	d000      	beq.n	2758e <spi_write_reg+0x10e>
   2758c:	e78d      	b.n	274aa <spi_write_reg+0x2a>
	}

	return result;
   2758e:	230c      	movs	r3, #12
   27590:	18fb      	adds	r3, r7, r3
   27592:	781b      	ldrb	r3, [r3, #0]
   27594:	b25b      	sxtb	r3, r3
}
   27596:	0018      	movs	r0, r3
   27598:	46bd      	mov	sp, r7
   2759a:	b005      	add	sp, #20
   2759c:	bd90      	pop	{r4, r7, pc}
   2759e:	46c0      	nop			; (mov r8, r8)
   275a0:	000269b5 	.word	0x000269b5
   275a4:	0000039d 	.word	0x0000039d
   275a8:	0003d980 	.word	0x0003d980
   275ac:	0003d348 	.word	0x0003d348
   275b0:	00020e3d 	.word	0x00020e3d
   275b4:	0003d6b4 	.word	0x0003d6b4
   275b8:	0003d388 	.word	0x0003d388
   275bc:	000232f5 	.word	0x000232f5
   275c0:	00026439 	.word	0x00026439
   275c4:	00026879 	.word	0x00026879
   275c8:	0003d6e0 	.word	0x0003d6e0

000275cc <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   275cc:	b590      	push	{r4, r7, lr}
   275ce:	b089      	sub	sp, #36	; 0x24
   275d0:	af02      	add	r7, sp, #8
   275d2:	60f8      	str	r0, [r7, #12]
   275d4:	60b9      	str	r1, [r7, #8]
   275d6:	1dbb      	adds	r3, r7, #6
   275d8:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   275da:	2316      	movs	r3, #22
   275dc:	18fb      	adds	r3, r7, r3
   275de:	220a      	movs	r2, #10
   275e0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   275e2:	2315      	movs	r3, #21
   275e4:	18fb      	adds	r3, r7, r3
   275e6:	22c7      	movs	r2, #199	; 0xc7
   275e8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   275ea:	1dbb      	adds	r3, r7, #6
   275ec:	881a      	ldrh	r2, [r3, #0]
   275ee:	68f9      	ldr	r1, [r7, #12]
   275f0:	2315      	movs	r3, #21
   275f2:	18fb      	adds	r3, r7, r3
   275f4:	7818      	ldrb	r0, [r3, #0]
   275f6:	2300      	movs	r3, #0
   275f8:	9300      	str	r3, [sp, #0]
   275fa:	0013      	movs	r3, r2
   275fc:	2200      	movs	r2, #0
   275fe:	4c4d      	ldr	r4, [pc, #308]	; (27734 <nm_spi_write+0x168>)
   27600:	47a0      	blx	r4
   27602:	0002      	movs	r2, r0
   27604:	2317      	movs	r3, #23
   27606:	18fb      	adds	r3, r7, r3
   27608:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2760a:	2317      	movs	r3, #23
   2760c:	18fb      	adds	r3, r7, r3
   2760e:	781b      	ldrb	r3, [r3, #0]
   27610:	b25b      	sxtb	r3, r3
   27612:	2b01      	cmp	r3, #1
   27614:	d010      	beq.n	27638 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   27616:	4a48      	ldr	r2, [pc, #288]	; (27738 <nm_spi_write+0x16c>)
   27618:	4948      	ldr	r1, [pc, #288]	; (2773c <nm_spi_write+0x170>)
   2761a:	4b49      	ldr	r3, [pc, #292]	; (27740 <nm_spi_write+0x174>)
   2761c:	0018      	movs	r0, r3
   2761e:	4b49      	ldr	r3, [pc, #292]	; (27744 <nm_spi_write+0x178>)
   27620:	4798      	blx	r3
   27622:	68fa      	ldr	r2, [r7, #12]
   27624:	4b48      	ldr	r3, [pc, #288]	; (27748 <nm_spi_write+0x17c>)
   27626:	0011      	movs	r1, r2
   27628:	0018      	movs	r0, r3
   2762a:	4b46      	ldr	r3, [pc, #280]	; (27744 <nm_spi_write+0x178>)
   2762c:	4798      	blx	r3
   2762e:	4b47      	ldr	r3, [pc, #284]	; (2774c <nm_spi_write+0x180>)
   27630:	0018      	movs	r0, r3
   27632:	4b44      	ldr	r3, [pc, #272]	; (27744 <nm_spi_write+0x178>)
   27634:	4798      	blx	r3
		goto _FAIL_;
   27636:	e03e      	b.n	276b6 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   27638:	2317      	movs	r3, #23
   2763a:	18fc      	adds	r4, r7, r3
   2763c:	1dbb      	adds	r3, r7, #6
   2763e:	881a      	ldrh	r2, [r3, #0]
   27640:	68bb      	ldr	r3, [r7, #8]
   27642:	0011      	movs	r1, r2
   27644:	0018      	movs	r0, r3
   27646:	4b42      	ldr	r3, [pc, #264]	; (27750 <nm_spi_write+0x184>)
   27648:	4798      	blx	r3
   2764a:	0003      	movs	r3, r0
   2764c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2764e:	2317      	movs	r3, #23
   27650:	18fb      	adds	r3, r7, r3
   27652:	781b      	ldrb	r3, [r3, #0]
   27654:	b25b      	sxtb	r3, r3
   27656:	2b01      	cmp	r3, #1
   27658:	d00e      	beq.n	27678 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   2765a:	4a3e      	ldr	r2, [pc, #248]	; (27754 <nm_spi_write+0x188>)
   2765c:	4937      	ldr	r1, [pc, #220]	; (2773c <nm_spi_write+0x170>)
   2765e:	4b38      	ldr	r3, [pc, #224]	; (27740 <nm_spi_write+0x174>)
   27660:	0018      	movs	r0, r3
   27662:	4b38      	ldr	r3, [pc, #224]	; (27744 <nm_spi_write+0x178>)
   27664:	4798      	blx	r3
   27666:	4b3c      	ldr	r3, [pc, #240]	; (27758 <nm_spi_write+0x18c>)
   27668:	0018      	movs	r0, r3
   2766a:	4b36      	ldr	r3, [pc, #216]	; (27744 <nm_spi_write+0x178>)
   2766c:	4798      	blx	r3
   2766e:	4b37      	ldr	r3, [pc, #220]	; (2774c <nm_spi_write+0x180>)
   27670:	0018      	movs	r0, r3
   27672:	4b34      	ldr	r3, [pc, #208]	; (27744 <nm_spi_write+0x178>)
   27674:	4798      	blx	r3
		goto _FAIL_;
   27676:	e01e      	b.n	276b6 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   27678:	2317      	movs	r3, #23
   2767a:	18fc      	adds	r4, r7, r3
   2767c:	2315      	movs	r3, #21
   2767e:	18fb      	adds	r3, r7, r3
   27680:	781b      	ldrb	r3, [r3, #0]
   27682:	0018      	movs	r0, r3
   27684:	4b35      	ldr	r3, [pc, #212]	; (2775c <nm_spi_write+0x190>)
   27686:	4798      	blx	r3
   27688:	0003      	movs	r3, r0
   2768a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2768c:	2317      	movs	r3, #23
   2768e:	18fb      	adds	r3, r7, r3
   27690:	781b      	ldrb	r3, [r3, #0]
   27692:	b25b      	sxtb	r3, r3
   27694:	2b01      	cmp	r3, #1
   27696:	d00e      	beq.n	276b6 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   27698:	4a31      	ldr	r2, [pc, #196]	; (27760 <nm_spi_write+0x194>)
   2769a:	4928      	ldr	r1, [pc, #160]	; (2773c <nm_spi_write+0x170>)
   2769c:	4b28      	ldr	r3, [pc, #160]	; (27740 <nm_spi_write+0x174>)
   2769e:	0018      	movs	r0, r3
   276a0:	4b28      	ldr	r3, [pc, #160]	; (27744 <nm_spi_write+0x178>)
   276a2:	4798      	blx	r3
   276a4:	4b2c      	ldr	r3, [pc, #176]	; (27758 <nm_spi_write+0x18c>)
   276a6:	0018      	movs	r0, r3
   276a8:	4b26      	ldr	r3, [pc, #152]	; (27744 <nm_spi_write+0x178>)
   276aa:	4798      	blx	r3
   276ac:	4b27      	ldr	r3, [pc, #156]	; (2774c <nm_spi_write+0x180>)
   276ae:	0018      	movs	r0, r3
   276b0:	4b24      	ldr	r3, [pc, #144]	; (27744 <nm_spi_write+0x178>)
   276b2:	4798      	blx	r3
		goto _FAIL_;
   276b4:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   276b6:	2317      	movs	r3, #23
   276b8:	18fb      	adds	r3, r7, r3
   276ba:	781b      	ldrb	r3, [r3, #0]
   276bc:	b25b      	sxtb	r3, r3
   276be:	2b01      	cmp	r3, #1
   276c0:	d030      	beq.n	27724 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   276c2:	2001      	movs	r0, #1
   276c4:	4b27      	ldr	r3, [pc, #156]	; (27764 <nm_spi_write+0x198>)
   276c6:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   276c8:	2300      	movs	r3, #0
   276ca:	9300      	str	r3, [sp, #0]
   276cc:	2300      	movs	r3, #0
   276ce:	2200      	movs	r2, #0
   276d0:	2100      	movs	r1, #0
   276d2:	20cf      	movs	r0, #207	; 0xcf
   276d4:	4c24      	ldr	r4, [pc, #144]	; (27768 <nm_spi_write+0x19c>)
   276d6:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   276d8:	20cf      	movs	r0, #207	; 0xcf
   276da:	4b24      	ldr	r3, [pc, #144]	; (2776c <nm_spi_write+0x1a0>)
   276dc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   276de:	4a24      	ldr	r2, [pc, #144]	; (27770 <nm_spi_write+0x1a4>)
   276e0:	4916      	ldr	r1, [pc, #88]	; (2773c <nm_spi_write+0x170>)
   276e2:	4b17      	ldr	r3, [pc, #92]	; (27740 <nm_spi_write+0x174>)
   276e4:	0018      	movs	r0, r3
   276e6:	4b17      	ldr	r3, [pc, #92]	; (27744 <nm_spi_write+0x178>)
   276e8:	4798      	blx	r3
   276ea:	2316      	movs	r3, #22
   276ec:	18fb      	adds	r3, r7, r3
   276ee:	7819      	ldrb	r1, [r3, #0]
   276f0:	1dbb      	adds	r3, r7, #6
   276f2:	881b      	ldrh	r3, [r3, #0]
   276f4:	68fa      	ldr	r2, [r7, #12]
   276f6:	481f      	ldr	r0, [pc, #124]	; (27774 <nm_spi_write+0x1a8>)
   276f8:	4c12      	ldr	r4, [pc, #72]	; (27744 <nm_spi_write+0x178>)
   276fa:	47a0      	blx	r4
   276fc:	4b13      	ldr	r3, [pc, #76]	; (2774c <nm_spi_write+0x180>)
   276fe:	0018      	movs	r0, r3
   27700:	4b10      	ldr	r3, [pc, #64]	; (27744 <nm_spi_write+0x178>)
   27702:	4798      	blx	r3
		nm_bsp_sleep(1);
   27704:	2001      	movs	r0, #1
   27706:	4b17      	ldr	r3, [pc, #92]	; (27764 <nm_spi_write+0x198>)
   27708:	4798      	blx	r3
		retry--;
   2770a:	2316      	movs	r3, #22
   2770c:	18fb      	adds	r3, r7, r3
   2770e:	781a      	ldrb	r2, [r3, #0]
   27710:	2316      	movs	r3, #22
   27712:	18fb      	adds	r3, r7, r3
   27714:	3a01      	subs	r2, #1
   27716:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   27718:	2316      	movs	r3, #22
   2771a:	18fb      	adds	r3, r7, r3
   2771c:	781b      	ldrb	r3, [r3, #0]
   2771e:	2b00      	cmp	r3, #0
   27720:	d000      	beq.n	27724 <nm_spi_write+0x158>
   27722:	e762      	b.n	275ea <nm_spi_write+0x1e>
	}


	return result;
   27724:	2317      	movs	r3, #23
   27726:	18fb      	adds	r3, r7, r3
   27728:	781b      	ldrb	r3, [r3, #0]
   2772a:	b25b      	sxtb	r3, r3
}
   2772c:	0018      	movs	r0, r3
   2772e:	46bd      	mov	sp, r7
   27730:	b007      	add	sp, #28
   27732:	bd90      	pop	{r4, r7, pc}
   27734:	000269b5 	.word	0x000269b5
   27738:	000003cf 	.word	0x000003cf
   2773c:	0003d990 	.word	0x0003d990
   27740:	0003d348 	.word	0x0003d348
   27744:	00020e3d 	.word	0x00020e3d
   27748:	0003d6fc 	.word	0x0003d6fc
   2774c:	0003d388 	.word	0x0003d388
   27750:	000272a9 	.word	0x000272a9
   27754:	000003d9 	.word	0x000003d9
   27758:	0003d72c 	.word	0x0003d72c
   2775c:	00026779 	.word	0x00026779
   27760:	000003e1 	.word	0x000003e1
   27764:	000232f5 	.word	0x000232f5
   27768:	00026439 	.word	0x00026439
   2776c:	00026879 	.word	0x00026879
   27770:	000003eb 	.word	0x000003eb
   27774:	0003d754 	.word	0x0003d754

00027778 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   27778:	b590      	push	{r4, r7, lr}
   2777a:	b087      	sub	sp, #28
   2777c:	af02      	add	r7, sp, #8
   2777e:	6078      	str	r0, [r7, #4]
   27780:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   27782:	230f      	movs	r3, #15
   27784:	18fb      	adds	r3, r7, r3
   27786:	220a      	movs	r2, #10
   27788:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2778a:	230c      	movs	r3, #12
   2778c:	18fb      	adds	r3, r7, r3
   2778e:	2201      	movs	r2, #1
   27790:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   27792:	230e      	movs	r3, #14
   27794:	18fb      	adds	r3, r7, r3
   27796:	22ca      	movs	r2, #202	; 0xca
   27798:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   2779a:	230d      	movs	r3, #13
   2779c:	18fb      	adds	r3, r7, r3
   2779e:	2200      	movs	r2, #0
   277a0:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   277a2:	687b      	ldr	r3, [r7, #4]
   277a4:	2bff      	cmp	r3, #255	; 0xff
   277a6:	d808      	bhi.n	277ba <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   277a8:	230e      	movs	r3, #14
   277aa:	18fb      	adds	r3, r7, r3
   277ac:	22c4      	movs	r2, #196	; 0xc4
   277ae:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   277b0:	230d      	movs	r3, #13
   277b2:	18fb      	adds	r3, r7, r3
   277b4:	2201      	movs	r2, #1
   277b6:	701a      	strb	r2, [r3, #0]
   277b8:	e007      	b.n	277ca <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   277ba:	230e      	movs	r3, #14
   277bc:	18fb      	adds	r3, r7, r3
   277be:	22ca      	movs	r2, #202	; 0xca
   277c0:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   277c2:	230d      	movs	r3, #13
   277c4:	18fb      	adds	r3, r7, r3
   277c6:	2200      	movs	r2, #0
   277c8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   277ca:	2308      	movs	r3, #8
   277cc:	18fa      	adds	r2, r7, r3
   277ce:	6879      	ldr	r1, [r7, #4]
   277d0:	230e      	movs	r3, #14
   277d2:	18fb      	adds	r3, r7, r3
   277d4:	7818      	ldrb	r0, [r3, #0]
   277d6:	230d      	movs	r3, #13
   277d8:	18fb      	adds	r3, r7, r3
   277da:	781b      	ldrb	r3, [r3, #0]
   277dc:	9300      	str	r3, [sp, #0]
   277de:	2304      	movs	r3, #4
   277e0:	4c37      	ldr	r4, [pc, #220]	; (278c0 <spi_read_reg+0x148>)
   277e2:	47a0      	blx	r4
   277e4:	0002      	movs	r2, r0
   277e6:	230c      	movs	r3, #12
   277e8:	18fb      	adds	r3, r7, r3
   277ea:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   277ec:	230c      	movs	r3, #12
   277ee:	18fb      	adds	r3, r7, r3
   277f0:	781b      	ldrb	r3, [r3, #0]
   277f2:	b25b      	sxtb	r3, r3
   277f4:	2b01      	cmp	r3, #1
   277f6:	d010      	beq.n	2781a <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   277f8:	4a32      	ldr	r2, [pc, #200]	; (278c4 <spi_read_reg+0x14c>)
   277fa:	4933      	ldr	r1, [pc, #204]	; (278c8 <spi_read_reg+0x150>)
   277fc:	4b33      	ldr	r3, [pc, #204]	; (278cc <spi_read_reg+0x154>)
   277fe:	0018      	movs	r0, r3
   27800:	4b33      	ldr	r3, [pc, #204]	; (278d0 <spi_read_reg+0x158>)
   27802:	4798      	blx	r3
   27804:	687a      	ldr	r2, [r7, #4]
   27806:	4b33      	ldr	r3, [pc, #204]	; (278d4 <spi_read_reg+0x15c>)
   27808:	0011      	movs	r1, r2
   2780a:	0018      	movs	r0, r3
   2780c:	4b30      	ldr	r3, [pc, #192]	; (278d0 <spi_read_reg+0x158>)
   2780e:	4798      	blx	r3
   27810:	4b31      	ldr	r3, [pc, #196]	; (278d8 <spi_read_reg+0x160>)
   27812:	0018      	movs	r0, r3
   27814:	4b2e      	ldr	r3, [pc, #184]	; (278d0 <spi_read_reg+0x158>)
   27816:	4798      	blx	r3
		goto _FAIL_;
   27818:	e014      	b.n	27844 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   2781a:	2308      	movs	r3, #8
   2781c:	18fb      	adds	r3, r7, r3
   2781e:	781b      	ldrb	r3, [r3, #0]
   27820:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   27822:	2308      	movs	r3, #8
   27824:	18fb      	adds	r3, r7, r3
   27826:	785b      	ldrb	r3, [r3, #1]
   27828:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   2782a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   2782c:	2308      	movs	r3, #8
   2782e:	18fb      	adds	r3, r7, r3
   27830:	789b      	ldrb	r3, [r3, #2]
   27832:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   27834:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   27836:	2308      	movs	r3, #8
   27838:	18fb      	adds	r3, r7, r3
   2783a:	78db      	ldrb	r3, [r3, #3]
   2783c:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2783e:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   27840:	683b      	ldr	r3, [r7, #0]
   27842:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   27844:	230c      	movs	r3, #12
   27846:	18fb      	adds	r3, r7, r3
   27848:	781b      	ldrb	r3, [r3, #0]
   2784a:	b25b      	sxtb	r3, r3
   2784c:	2b01      	cmp	r3, #1
   2784e:	d02f      	beq.n	278b0 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   27850:	2001      	movs	r0, #1
   27852:	4b22      	ldr	r3, [pc, #136]	; (278dc <spi_read_reg+0x164>)
   27854:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   27856:	2300      	movs	r3, #0
   27858:	9300      	str	r3, [sp, #0]
   2785a:	2300      	movs	r3, #0
   2785c:	2200      	movs	r2, #0
   2785e:	2100      	movs	r1, #0
   27860:	20cf      	movs	r0, #207	; 0xcf
   27862:	4c1f      	ldr	r4, [pc, #124]	; (278e0 <spi_read_reg+0x168>)
   27864:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   27866:	20cf      	movs	r0, #207	; 0xcf
   27868:	4b1e      	ldr	r3, [pc, #120]	; (278e4 <spi_read_reg+0x16c>)
   2786a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   2786c:	4a1e      	ldr	r2, [pc, #120]	; (278e8 <spi_read_reg+0x170>)
   2786e:	4916      	ldr	r1, [pc, #88]	; (278c8 <spi_read_reg+0x150>)
   27870:	4b16      	ldr	r3, [pc, #88]	; (278cc <spi_read_reg+0x154>)
   27872:	0018      	movs	r0, r3
   27874:	4b16      	ldr	r3, [pc, #88]	; (278d0 <spi_read_reg+0x158>)
   27876:	4798      	blx	r3
   27878:	230f      	movs	r3, #15
   2787a:	18fb      	adds	r3, r7, r3
   2787c:	7819      	ldrb	r1, [r3, #0]
   2787e:	687a      	ldr	r2, [r7, #4]
   27880:	4b1a      	ldr	r3, [pc, #104]	; (278ec <spi_read_reg+0x174>)
   27882:	0018      	movs	r0, r3
   27884:	4b12      	ldr	r3, [pc, #72]	; (278d0 <spi_read_reg+0x158>)
   27886:	4798      	blx	r3
   27888:	4b13      	ldr	r3, [pc, #76]	; (278d8 <spi_read_reg+0x160>)
   2788a:	0018      	movs	r0, r3
   2788c:	4b10      	ldr	r3, [pc, #64]	; (278d0 <spi_read_reg+0x158>)
   2788e:	4798      	blx	r3
		nm_bsp_sleep(1);
   27890:	2001      	movs	r0, #1
   27892:	4b12      	ldr	r3, [pc, #72]	; (278dc <spi_read_reg+0x164>)
   27894:	4798      	blx	r3
		retry--;
   27896:	230f      	movs	r3, #15
   27898:	18fb      	adds	r3, r7, r3
   2789a:	781a      	ldrb	r2, [r3, #0]
   2789c:	230f      	movs	r3, #15
   2789e:	18fb      	adds	r3, r7, r3
   278a0:	3a01      	subs	r2, #1
   278a2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   278a4:	230f      	movs	r3, #15
   278a6:	18fb      	adds	r3, r7, r3
   278a8:	781b      	ldrb	r3, [r3, #0]
   278aa:	2b00      	cmp	r3, #0
   278ac:	d000      	beq.n	278b0 <spi_read_reg+0x138>
   278ae:	e778      	b.n	277a2 <spi_read_reg+0x2a>
	}
		
	return result;
   278b0:	230c      	movs	r3, #12
   278b2:	18fb      	adds	r3, r7, r3
   278b4:	781b      	ldrb	r3, [r3, #0]
   278b6:	b25b      	sxtb	r3, r3
}
   278b8:	0018      	movs	r0, r3
   278ba:	46bd      	mov	sp, r7
   278bc:	b005      	add	sp, #20
   278be:	bd90      	pop	{r4, r7, pc}
   278c0:	000269b5 	.word	0x000269b5
   278c4:	00000423 	.word	0x00000423
   278c8:	0003d9a0 	.word	0x0003d9a0
   278cc:	0003d348 	.word	0x0003d348
   278d0:	00020e3d 	.word	0x00020e3d
   278d4:	0003d770 	.word	0x0003d770
   278d8:	0003d388 	.word	0x0003d388
   278dc:	000232f5 	.word	0x000232f5
   278e0:	00026439 	.word	0x00026439
   278e4:	00026879 	.word	0x00026879
   278e8:	00000435 	.word	0x00000435
   278ec:	0003d79c 	.word	0x0003d79c

000278f0 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   278f0:	b590      	push	{r4, r7, lr}
   278f2:	b089      	sub	sp, #36	; 0x24
   278f4:	af02      	add	r7, sp, #8
   278f6:	60f8      	str	r0, [r7, #12]
   278f8:	60b9      	str	r1, [r7, #8]
   278fa:	1dbb      	adds	r3, r7, #6
   278fc:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   278fe:	2316      	movs	r3, #22
   27900:	18fb      	adds	r3, r7, r3
   27902:	22c8      	movs	r2, #200	; 0xc8
   27904:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   27906:	2317      	movs	r3, #23
   27908:	18fb      	adds	r3, r7, r3
   2790a:	220a      	movs	r2, #10
   2790c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2790e:	1dbb      	adds	r3, r7, #6
   27910:	881c      	ldrh	r4, [r3, #0]
   27912:	68ba      	ldr	r2, [r7, #8]
   27914:	68f9      	ldr	r1, [r7, #12]
   27916:	2316      	movs	r3, #22
   27918:	18fb      	adds	r3, r7, r3
   2791a:	7818      	ldrb	r0, [r3, #0]
   2791c:	2300      	movs	r3, #0
   2791e:	9300      	str	r3, [sp, #0]
   27920:	0023      	movs	r3, r4
   27922:	4c2e      	ldr	r4, [pc, #184]	; (279dc <nm_spi_read+0xec>)
   27924:	47a0      	blx	r4
   27926:	0002      	movs	r2, r0
   27928:	2315      	movs	r3, #21
   2792a:	18fb      	adds	r3, r7, r3
   2792c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2792e:	2315      	movs	r3, #21
   27930:	18fb      	adds	r3, r7, r3
   27932:	781b      	ldrb	r3, [r3, #0]
   27934:	b25b      	sxtb	r3, r3
   27936:	2b01      	cmp	r3, #1
   27938:	d010      	beq.n	2795c <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   2793a:	4a29      	ldr	r2, [pc, #164]	; (279e0 <nm_spi_read+0xf0>)
   2793c:	4929      	ldr	r1, [pc, #164]	; (279e4 <nm_spi_read+0xf4>)
   2793e:	4b2a      	ldr	r3, [pc, #168]	; (279e8 <nm_spi_read+0xf8>)
   27940:	0018      	movs	r0, r3
   27942:	4b2a      	ldr	r3, [pc, #168]	; (279ec <nm_spi_read+0xfc>)
   27944:	4798      	blx	r3
   27946:	68fa      	ldr	r2, [r7, #12]
   27948:	4b29      	ldr	r3, [pc, #164]	; (279f0 <nm_spi_read+0x100>)
   2794a:	0011      	movs	r1, r2
   2794c:	0018      	movs	r0, r3
   2794e:	4b27      	ldr	r3, [pc, #156]	; (279ec <nm_spi_read+0xfc>)
   27950:	4798      	blx	r3
   27952:	4b28      	ldr	r3, [pc, #160]	; (279f4 <nm_spi_read+0x104>)
   27954:	0018      	movs	r0, r3
   27956:	4b25      	ldr	r3, [pc, #148]	; (279ec <nm_spi_read+0xfc>)
   27958:	4798      	blx	r3
		goto _FAIL_;
   2795a:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   2795c:	2315      	movs	r3, #21
   2795e:	18fb      	adds	r3, r7, r3
   27960:	781b      	ldrb	r3, [r3, #0]
   27962:	b25b      	sxtb	r3, r3
   27964:	2b01      	cmp	r3, #1
   27966:	d030      	beq.n	279ca <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   27968:	2001      	movs	r0, #1
   2796a:	4b23      	ldr	r3, [pc, #140]	; (279f8 <nm_spi_read+0x108>)
   2796c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2796e:	2300      	movs	r3, #0
   27970:	9300      	str	r3, [sp, #0]
   27972:	2300      	movs	r3, #0
   27974:	2200      	movs	r2, #0
   27976:	2100      	movs	r1, #0
   27978:	20cf      	movs	r0, #207	; 0xcf
   2797a:	4c20      	ldr	r4, [pc, #128]	; (279fc <nm_spi_read+0x10c>)
   2797c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2797e:	20cf      	movs	r0, #207	; 0xcf
   27980:	4b1f      	ldr	r3, [pc, #124]	; (27a00 <nm_spi_read+0x110>)
   27982:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   27984:	4a1f      	ldr	r2, [pc, #124]	; (27a04 <nm_spi_read+0x114>)
   27986:	4917      	ldr	r1, [pc, #92]	; (279e4 <nm_spi_read+0xf4>)
   27988:	4b17      	ldr	r3, [pc, #92]	; (279e8 <nm_spi_read+0xf8>)
   2798a:	0018      	movs	r0, r3
   2798c:	4b17      	ldr	r3, [pc, #92]	; (279ec <nm_spi_read+0xfc>)
   2798e:	4798      	blx	r3
   27990:	2317      	movs	r3, #23
   27992:	18fb      	adds	r3, r7, r3
   27994:	7819      	ldrb	r1, [r3, #0]
   27996:	1dbb      	adds	r3, r7, #6
   27998:	881b      	ldrh	r3, [r3, #0]
   2799a:	68fa      	ldr	r2, [r7, #12]
   2799c:	481a      	ldr	r0, [pc, #104]	; (27a08 <nm_spi_read+0x118>)
   2799e:	4c13      	ldr	r4, [pc, #76]	; (279ec <nm_spi_read+0xfc>)
   279a0:	47a0      	blx	r4
   279a2:	4b14      	ldr	r3, [pc, #80]	; (279f4 <nm_spi_read+0x104>)
   279a4:	0018      	movs	r0, r3
   279a6:	4b11      	ldr	r3, [pc, #68]	; (279ec <nm_spi_read+0xfc>)
   279a8:	4798      	blx	r3
		nm_bsp_sleep(1);
   279aa:	2001      	movs	r0, #1
   279ac:	4b12      	ldr	r3, [pc, #72]	; (279f8 <nm_spi_read+0x108>)
   279ae:	4798      	blx	r3
		retry--;
   279b0:	2317      	movs	r3, #23
   279b2:	18fb      	adds	r3, r7, r3
   279b4:	781a      	ldrb	r2, [r3, #0]
   279b6:	2317      	movs	r3, #23
   279b8:	18fb      	adds	r3, r7, r3
   279ba:	3a01      	subs	r2, #1
   279bc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   279be:	2317      	movs	r3, #23
   279c0:	18fb      	adds	r3, r7, r3
   279c2:	781b      	ldrb	r3, [r3, #0]
   279c4:	2b00      	cmp	r3, #0
   279c6:	d000      	beq.n	279ca <nm_spi_read+0xda>
   279c8:	e7a1      	b.n	2790e <nm_spi_read+0x1e>
	}

	return result;
   279ca:	2315      	movs	r3, #21
   279cc:	18fb      	adds	r3, r7, r3
   279ce:	781b      	ldrb	r3, [r3, #0]
   279d0:	b25b      	sxtb	r3, r3
}
   279d2:	0018      	movs	r0, r3
   279d4:	46bd      	mov	sp, r7
   279d6:	b007      	add	sp, #28
   279d8:	bd90      	pop	{r4, r7, pc}
   279da:	46c0      	nop			; (mov r8, r8)
   279dc:	000269b5 	.word	0x000269b5
   279e0:	00000472 	.word	0x00000472
   279e4:	0003d9b0 	.word	0x0003d9b0
   279e8:	0003d348 	.word	0x0003d348
   279ec:	00020e3d 	.word	0x00020e3d
   279f0:	0003d7b4 	.word	0x0003d7b4
   279f4:	0003d388 	.word	0x0003d388
   279f8:	000232f5 	.word	0x000232f5
   279fc:	00026439 	.word	0x00026439
   27a00:	00026879 	.word	0x00026879
   27a04:	0000047d 	.word	0x0000047d
   27a08:	0003d754 	.word	0x0003d754

00027a0c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   27a0c:	b580      	push	{r7, lr}
   27a0e:	b082      	sub	sp, #8
   27a10:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   27a12:	4b0c      	ldr	r3, [pc, #48]	; (27a44 <spi_init_pkt_sz+0x38>)
   27a14:	0018      	movs	r0, r3
   27a16:	4b0c      	ldr	r3, [pc, #48]	; (27a48 <spi_init_pkt_sz+0x3c>)
   27a18:	4798      	blx	r3
   27a1a:	0003      	movs	r3, r0
   27a1c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   27a1e:	687b      	ldr	r3, [r7, #4]
   27a20:	2270      	movs	r2, #112	; 0x70
   27a22:	4393      	bics	r3, r2
   27a24:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   27a26:	687b      	ldr	r3, [r7, #4]
   27a28:	2250      	movs	r2, #80	; 0x50
   27a2a:	4313      	orrs	r3, r2
   27a2c:	607b      	str	r3, [r7, #4]
   27a2e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   27a30:	687b      	ldr	r3, [r7, #4]
   27a32:	4a04      	ldr	r2, [pc, #16]	; (27a44 <spi_init_pkt_sz+0x38>)
   27a34:	0019      	movs	r1, r3
   27a36:	0010      	movs	r0, r2
   27a38:	4b04      	ldr	r3, [pc, #16]	; (27a4c <spi_init_pkt_sz+0x40>)
   27a3a:	4798      	blx	r3
}
   27a3c:	46c0      	nop			; (mov r8, r8)
   27a3e:	46bd      	mov	sp, r7
   27a40:	b002      	add	sp, #8
   27a42:	bd80      	pop	{r7, pc}
   27a44:	0000e824 	.word	0x0000e824
   27a48:	00027be5 	.word	0x00027be5
   27a4c:	00027c59 	.word	0x00027c59

00027a50 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   27a50:	b590      	push	{r4, r7, lr}
   27a52:	b083      	sub	sp, #12
   27a54:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   27a56:	2300      	movs	r3, #0
   27a58:	9300      	str	r3, [sp, #0]
   27a5a:	2300      	movs	r3, #0
   27a5c:	2200      	movs	r2, #0
   27a5e:	2100      	movs	r1, #0
   27a60:	20cf      	movs	r0, #207	; 0xcf
   27a62:	4c05      	ldr	r4, [pc, #20]	; (27a78 <nm_spi_reset+0x28>)
   27a64:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   27a66:	20cf      	movs	r0, #207	; 0xcf
   27a68:	4b04      	ldr	r3, [pc, #16]	; (27a7c <nm_spi_reset+0x2c>)
   27a6a:	4798      	blx	r3
	return M2M_SUCCESS;
   27a6c:	2300      	movs	r3, #0
}
   27a6e:	0018      	movs	r0, r3
   27a70:	46bd      	mov	sp, r7
   27a72:	b001      	add	sp, #4
   27a74:	bd90      	pop	{r4, r7, pc}
   27a76:	46c0      	nop			; (mov r8, r8)
   27a78:	00026439 	.word	0x00026439
   27a7c:	00026879 	.word	0x00026879

00027a80 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   27a80:	b580      	push	{r7, lr}
   27a82:	b082      	sub	sp, #8
   27a84:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   27a86:	2300      	movs	r3, #0
   27a88:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   27a8a:	4b40      	ldr	r3, [pc, #256]	; (27b8c <nm_spi_init+0x10c>)
   27a8c:	2200      	movs	r2, #0
   27a8e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   27a90:	003b      	movs	r3, r7
   27a92:	4a3f      	ldr	r2, [pc, #252]	; (27b90 <nm_spi_init+0x110>)
   27a94:	0019      	movs	r1, r3
   27a96:	0010      	movs	r0, r2
   27a98:	4b3e      	ldr	r3, [pc, #248]	; (27b94 <nm_spi_init+0x114>)
   27a9a:	4798      	blx	r3
   27a9c:	1e03      	subs	r3, r0, #0
   27a9e:	d129      	bne.n	27af4 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   27aa0:	4b3a      	ldr	r3, [pc, #232]	; (27b8c <nm_spi_init+0x10c>)
   27aa2:	2201      	movs	r2, #1
   27aa4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   27aa6:	2398      	movs	r3, #152	; 0x98
   27aa8:	00da      	lsls	r2, r3, #3
   27aaa:	493b      	ldr	r1, [pc, #236]	; (27b98 <nm_spi_init+0x118>)
   27aac:	4b3b      	ldr	r3, [pc, #236]	; (27b9c <nm_spi_init+0x11c>)
   27aae:	0018      	movs	r0, r3
   27ab0:	4b3b      	ldr	r3, [pc, #236]	; (27ba0 <nm_spi_init+0x120>)
   27ab2:	4798      	blx	r3
   27ab4:	4b3b      	ldr	r3, [pc, #236]	; (27ba4 <nm_spi_init+0x124>)
   27ab6:	0018      	movs	r0, r3
   27ab8:	4b39      	ldr	r3, [pc, #228]	; (27ba0 <nm_spi_init+0x120>)
   27aba:	4798      	blx	r3
   27abc:	4b3a      	ldr	r3, [pc, #232]	; (27ba8 <nm_spi_init+0x128>)
   27abe:	0018      	movs	r0, r3
   27ac0:	4b37      	ldr	r3, [pc, #220]	; (27ba0 <nm_spi_init+0x120>)
   27ac2:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   27ac4:	003b      	movs	r3, r7
   27ac6:	4a32      	ldr	r2, [pc, #200]	; (27b90 <nm_spi_init+0x110>)
   27ac8:	0019      	movs	r1, r3
   27aca:	0010      	movs	r0, r2
   27acc:	4b31      	ldr	r3, [pc, #196]	; (27b94 <nm_spi_init+0x114>)
   27ace:	4798      	blx	r3
   27ad0:	1e03      	subs	r3, r0, #0
   27ad2:	d10f      	bne.n	27af4 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   27ad4:	4a35      	ldr	r2, [pc, #212]	; (27bac <nm_spi_init+0x12c>)
   27ad6:	4930      	ldr	r1, [pc, #192]	; (27b98 <nm_spi_init+0x118>)
   27ad8:	4b30      	ldr	r3, [pc, #192]	; (27b9c <nm_spi_init+0x11c>)
   27ada:	0018      	movs	r0, r3
   27adc:	4b30      	ldr	r3, [pc, #192]	; (27ba0 <nm_spi_init+0x120>)
   27ade:	4798      	blx	r3
   27ae0:	4b33      	ldr	r3, [pc, #204]	; (27bb0 <nm_spi_init+0x130>)
   27ae2:	0018      	movs	r0, r3
   27ae4:	4b2e      	ldr	r3, [pc, #184]	; (27ba0 <nm_spi_init+0x120>)
   27ae6:	4798      	blx	r3
   27ae8:	4b2f      	ldr	r3, [pc, #188]	; (27ba8 <nm_spi_init+0x128>)
   27aea:	0018      	movs	r0, r3
   27aec:	4b2c      	ldr	r3, [pc, #176]	; (27ba0 <nm_spi_init+0x120>)
   27aee:	4798      	blx	r3
			return 0;
   27af0:	2300      	movs	r3, #0
   27af2:	e047      	b.n	27b84 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   27af4:	4b25      	ldr	r3, [pc, #148]	; (27b8c <nm_spi_init+0x10c>)
   27af6:	781b      	ldrb	r3, [r3, #0]
   27af8:	2b00      	cmp	r3, #0
   27afa:	d126      	bne.n	27b4a <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   27afc:	683b      	ldr	r3, [r7, #0]
   27afe:	220c      	movs	r2, #12
   27b00:	4393      	bics	r3, r2
   27b02:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   27b04:	683b      	ldr	r3, [r7, #0]
   27b06:	2270      	movs	r2, #112	; 0x70
   27b08:	4393      	bics	r3, r2
   27b0a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   27b0c:	683b      	ldr	r3, [r7, #0]
   27b0e:	2250      	movs	r2, #80	; 0x50
   27b10:	4313      	orrs	r3, r2
   27b12:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   27b14:	683b      	ldr	r3, [r7, #0]
   27b16:	4a1e      	ldr	r2, [pc, #120]	; (27b90 <nm_spi_init+0x110>)
   27b18:	0019      	movs	r1, r3
   27b1a:	0010      	movs	r0, r2
   27b1c:	4b25      	ldr	r3, [pc, #148]	; (27bb4 <nm_spi_init+0x134>)
   27b1e:	4798      	blx	r3
   27b20:	1e03      	subs	r3, r0, #0
   27b22:	d10f      	bne.n	27b44 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   27b24:	4a24      	ldr	r2, [pc, #144]	; (27bb8 <nm_spi_init+0x138>)
   27b26:	491c      	ldr	r1, [pc, #112]	; (27b98 <nm_spi_init+0x118>)
   27b28:	4b1c      	ldr	r3, [pc, #112]	; (27b9c <nm_spi_init+0x11c>)
   27b2a:	0018      	movs	r0, r3
   27b2c:	4b1c      	ldr	r3, [pc, #112]	; (27ba0 <nm_spi_init+0x120>)
   27b2e:	4798      	blx	r3
   27b30:	4b22      	ldr	r3, [pc, #136]	; (27bbc <nm_spi_init+0x13c>)
   27b32:	0018      	movs	r0, r3
   27b34:	4b1a      	ldr	r3, [pc, #104]	; (27ba0 <nm_spi_init+0x120>)
   27b36:	4798      	blx	r3
   27b38:	4b1b      	ldr	r3, [pc, #108]	; (27ba8 <nm_spi_init+0x128>)
   27b3a:	0018      	movs	r0, r3
   27b3c:	4b18      	ldr	r3, [pc, #96]	; (27ba0 <nm_spi_init+0x120>)
   27b3e:	4798      	blx	r3
			return 0;
   27b40:	2300      	movs	r3, #0
   27b42:	e01f      	b.n	27b84 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   27b44:	4b11      	ldr	r3, [pc, #68]	; (27b8c <nm_spi_init+0x10c>)
   27b46:	2201      	movs	r2, #1
   27b48:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   27b4a:	1d3a      	adds	r2, r7, #4
   27b4c:	2380      	movs	r3, #128	; 0x80
   27b4e:	015b      	lsls	r3, r3, #5
   27b50:	0011      	movs	r1, r2
   27b52:	0018      	movs	r0, r3
   27b54:	4b0f      	ldr	r3, [pc, #60]	; (27b94 <nm_spi_init+0x114>)
   27b56:	4798      	blx	r3
   27b58:	1e03      	subs	r3, r0, #0
   27b5a:	d110      	bne.n	27b7e <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   27b5c:	4a18      	ldr	r2, [pc, #96]	; (27bc0 <nm_spi_init+0x140>)
   27b5e:	490e      	ldr	r1, [pc, #56]	; (27b98 <nm_spi_init+0x118>)
   27b60:	4b0e      	ldr	r3, [pc, #56]	; (27b9c <nm_spi_init+0x11c>)
   27b62:	0018      	movs	r0, r3
   27b64:	4b0e      	ldr	r3, [pc, #56]	; (27ba0 <nm_spi_init+0x120>)
   27b66:	4798      	blx	r3
   27b68:	4b16      	ldr	r3, [pc, #88]	; (27bc4 <nm_spi_init+0x144>)
   27b6a:	0018      	movs	r0, r3
   27b6c:	4b0c      	ldr	r3, [pc, #48]	; (27ba0 <nm_spi_init+0x120>)
   27b6e:	4798      	blx	r3
   27b70:	4b0d      	ldr	r3, [pc, #52]	; (27ba8 <nm_spi_init+0x128>)
   27b72:	0018      	movs	r0, r3
   27b74:	4b0a      	ldr	r3, [pc, #40]	; (27ba0 <nm_spi_init+0x120>)
   27b76:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   27b78:	2306      	movs	r3, #6
   27b7a:	425b      	negs	r3, r3
   27b7c:	e002      	b.n	27b84 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   27b7e:	4b12      	ldr	r3, [pc, #72]	; (27bc8 <nm_spi_init+0x148>)
   27b80:	4798      	blx	r3


	return M2M_SUCCESS;
   27b82:	2300      	movs	r3, #0
}
   27b84:	0018      	movs	r0, r3
   27b86:	46bd      	mov	sp, r7
   27b88:	b002      	add	sp, #8
   27b8a:	bd80      	pop	{r7, pc}
   27b8c:	200041d0 	.word	0x200041d0
   27b90:	0000e824 	.word	0x0000e824
   27b94:	00027779 	.word	0x00027779
   27b98:	0003d9bc 	.word	0x0003d9bc
   27b9c:	0003d348 	.word	0x0003d348
   27ba0:	00020e3d 	.word	0x00020e3d
   27ba4:	0003d7e4 	.word	0x0003d7e4
   27ba8:	0003d388 	.word	0x0003d388
   27bac:	000004c3 	.word	0x000004c3
   27bb0:	0003d834 	.word	0x0003d834
   27bb4:	00027481 	.word	0x00027481
   27bb8:	000004cd 	.word	0x000004cd
   27bbc:	0003d864 	.word	0x0003d864
   27bc0:	000004d7 	.word	0x000004d7
   27bc4:	0003d898 	.word	0x0003d898
   27bc8:	00027a0d 	.word	0x00027a0d

00027bcc <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   27bcc:	b580      	push	{r7, lr}
   27bce:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   27bd0:	4b03      	ldr	r3, [pc, #12]	; (27be0 <nm_spi_deinit+0x14>)
   27bd2:	2200      	movs	r2, #0
   27bd4:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   27bd6:	2300      	movs	r3, #0
}
   27bd8:	0018      	movs	r0, r3
   27bda:	46bd      	mov	sp, r7
   27bdc:	bd80      	pop	{r7, pc}
   27bde:	46c0      	nop			; (mov r8, r8)
   27be0:	200041d0 	.word	0x200041d0

00027be4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   27be4:	b580      	push	{r7, lr}
   27be6:	b084      	sub	sp, #16
   27be8:	af00      	add	r7, sp, #0
   27bea:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   27bec:	230c      	movs	r3, #12
   27bee:	18fa      	adds	r2, r7, r3
   27bf0:	687b      	ldr	r3, [r7, #4]
   27bf2:	0011      	movs	r1, r2
   27bf4:	0018      	movs	r0, r3
   27bf6:	4b03      	ldr	r3, [pc, #12]	; (27c04 <nm_spi_read_reg+0x20>)
   27bf8:	4798      	blx	r3

	return u32Val;
   27bfa:	68fb      	ldr	r3, [r7, #12]
}
   27bfc:	0018      	movs	r0, r3
   27bfe:	46bd      	mov	sp, r7
   27c00:	b004      	add	sp, #16
   27c02:	bd80      	pop	{r7, pc}
   27c04:	00027779 	.word	0x00027779

00027c08 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   27c08:	b590      	push	{r4, r7, lr}
   27c0a:	b085      	sub	sp, #20
   27c0c:	af00      	add	r7, sp, #0
   27c0e:	6078      	str	r0, [r7, #4]
   27c10:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   27c12:	230f      	movs	r3, #15
   27c14:	18fc      	adds	r4, r7, r3
   27c16:	683a      	ldr	r2, [r7, #0]
   27c18:	687b      	ldr	r3, [r7, #4]
   27c1a:	0011      	movs	r1, r2
   27c1c:	0018      	movs	r0, r3
   27c1e:	4b0d      	ldr	r3, [pc, #52]	; (27c54 <nm_spi_read_reg_with_ret+0x4c>)
   27c20:	4798      	blx	r3
   27c22:	0003      	movs	r3, r0
   27c24:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   27c26:	230f      	movs	r3, #15
   27c28:	18fb      	adds	r3, r7, r3
   27c2a:	781b      	ldrb	r3, [r3, #0]
   27c2c:	b25b      	sxtb	r3, r3
   27c2e:	2b01      	cmp	r3, #1
   27c30:	d104      	bne.n	27c3c <nm_spi_read_reg_with_ret+0x34>
   27c32:	230f      	movs	r3, #15
   27c34:	18fb      	adds	r3, r7, r3
   27c36:	2200      	movs	r2, #0
   27c38:	701a      	strb	r2, [r3, #0]
   27c3a:	e003      	b.n	27c44 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   27c3c:	230f      	movs	r3, #15
   27c3e:	18fb      	adds	r3, r7, r3
   27c40:	22fa      	movs	r2, #250	; 0xfa
   27c42:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27c44:	230f      	movs	r3, #15
   27c46:	18fb      	adds	r3, r7, r3
   27c48:	781b      	ldrb	r3, [r3, #0]
   27c4a:	b25b      	sxtb	r3, r3
}
   27c4c:	0018      	movs	r0, r3
   27c4e:	46bd      	mov	sp, r7
   27c50:	b005      	add	sp, #20
   27c52:	bd90      	pop	{r4, r7, pc}
   27c54:	00027779 	.word	0x00027779

00027c58 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   27c58:	b590      	push	{r4, r7, lr}
   27c5a:	b085      	sub	sp, #20
   27c5c:	af00      	add	r7, sp, #0
   27c5e:	6078      	str	r0, [r7, #4]
   27c60:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   27c62:	230f      	movs	r3, #15
   27c64:	18fc      	adds	r4, r7, r3
   27c66:	683a      	ldr	r2, [r7, #0]
   27c68:	687b      	ldr	r3, [r7, #4]
   27c6a:	0011      	movs	r1, r2
   27c6c:	0018      	movs	r0, r3
   27c6e:	4b0d      	ldr	r3, [pc, #52]	; (27ca4 <nm_spi_write_reg+0x4c>)
   27c70:	4798      	blx	r3
   27c72:	0003      	movs	r3, r0
   27c74:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   27c76:	230f      	movs	r3, #15
   27c78:	18fb      	adds	r3, r7, r3
   27c7a:	781b      	ldrb	r3, [r3, #0]
   27c7c:	b25b      	sxtb	r3, r3
   27c7e:	2b01      	cmp	r3, #1
   27c80:	d104      	bne.n	27c8c <nm_spi_write_reg+0x34>
   27c82:	230f      	movs	r3, #15
   27c84:	18fb      	adds	r3, r7, r3
   27c86:	2200      	movs	r2, #0
   27c88:	701a      	strb	r2, [r3, #0]
   27c8a:	e003      	b.n	27c94 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   27c8c:	230f      	movs	r3, #15
   27c8e:	18fb      	adds	r3, r7, r3
   27c90:	22fa      	movs	r2, #250	; 0xfa
   27c92:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27c94:	230f      	movs	r3, #15
   27c96:	18fb      	adds	r3, r7, r3
   27c98:	781b      	ldrb	r3, [r3, #0]
   27c9a:	b25b      	sxtb	r3, r3
}
   27c9c:	0018      	movs	r0, r3
   27c9e:	46bd      	mov	sp, r7
   27ca0:	b005      	add	sp, #20
   27ca2:	bd90      	pop	{r4, r7, pc}
   27ca4:	00027481 	.word	0x00027481

00027ca8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   27ca8:	b590      	push	{r4, r7, lr}
   27caa:	b087      	sub	sp, #28
   27cac:	af00      	add	r7, sp, #0
   27cae:	60f8      	str	r0, [r7, #12]
   27cb0:	60b9      	str	r1, [r7, #8]
   27cb2:	1dbb      	adds	r3, r7, #6
   27cb4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   27cb6:	2317      	movs	r3, #23
   27cb8:	18fc      	adds	r4, r7, r3
   27cba:	1dbb      	adds	r3, r7, #6
   27cbc:	881a      	ldrh	r2, [r3, #0]
   27cbe:	68b9      	ldr	r1, [r7, #8]
   27cc0:	68fb      	ldr	r3, [r7, #12]
   27cc2:	0018      	movs	r0, r3
   27cc4:	4b0d      	ldr	r3, [pc, #52]	; (27cfc <nm_spi_read_block+0x54>)
   27cc6:	4798      	blx	r3
   27cc8:	0003      	movs	r3, r0
   27cca:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   27ccc:	2317      	movs	r3, #23
   27cce:	18fb      	adds	r3, r7, r3
   27cd0:	781b      	ldrb	r3, [r3, #0]
   27cd2:	b25b      	sxtb	r3, r3
   27cd4:	2b01      	cmp	r3, #1
   27cd6:	d104      	bne.n	27ce2 <nm_spi_read_block+0x3a>
   27cd8:	2317      	movs	r3, #23
   27cda:	18fb      	adds	r3, r7, r3
   27cdc:	2200      	movs	r2, #0
   27cde:	701a      	strb	r2, [r3, #0]
   27ce0:	e003      	b.n	27cea <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   27ce2:	2317      	movs	r3, #23
   27ce4:	18fb      	adds	r3, r7, r3
   27ce6:	22fa      	movs	r2, #250	; 0xfa
   27ce8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27cea:	2317      	movs	r3, #23
   27cec:	18fb      	adds	r3, r7, r3
   27cee:	781b      	ldrb	r3, [r3, #0]
   27cf0:	b25b      	sxtb	r3, r3
}
   27cf2:	0018      	movs	r0, r3
   27cf4:	46bd      	mov	sp, r7
   27cf6:	b007      	add	sp, #28
   27cf8:	bd90      	pop	{r4, r7, pc}
   27cfa:	46c0      	nop			; (mov r8, r8)
   27cfc:	000278f1 	.word	0x000278f1

00027d00 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   27d00:	b590      	push	{r4, r7, lr}
   27d02:	b087      	sub	sp, #28
   27d04:	af00      	add	r7, sp, #0
   27d06:	60f8      	str	r0, [r7, #12]
   27d08:	60b9      	str	r1, [r7, #8]
   27d0a:	1dbb      	adds	r3, r7, #6
   27d0c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   27d0e:	2317      	movs	r3, #23
   27d10:	18fc      	adds	r4, r7, r3
   27d12:	1dbb      	adds	r3, r7, #6
   27d14:	881a      	ldrh	r2, [r3, #0]
   27d16:	68b9      	ldr	r1, [r7, #8]
   27d18:	68fb      	ldr	r3, [r7, #12]
   27d1a:	0018      	movs	r0, r3
   27d1c:	4b0d      	ldr	r3, [pc, #52]	; (27d54 <nm_spi_write_block+0x54>)
   27d1e:	4798      	blx	r3
   27d20:	0003      	movs	r3, r0
   27d22:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   27d24:	2317      	movs	r3, #23
   27d26:	18fb      	adds	r3, r7, r3
   27d28:	781b      	ldrb	r3, [r3, #0]
   27d2a:	b25b      	sxtb	r3, r3
   27d2c:	2b01      	cmp	r3, #1
   27d2e:	d104      	bne.n	27d3a <nm_spi_write_block+0x3a>
   27d30:	2317      	movs	r3, #23
   27d32:	18fb      	adds	r3, r7, r3
   27d34:	2200      	movs	r2, #0
   27d36:	701a      	strb	r2, [r3, #0]
   27d38:	e003      	b.n	27d42 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   27d3a:	2317      	movs	r3, #23
   27d3c:	18fb      	adds	r3, r7, r3
   27d3e:	22fa      	movs	r2, #250	; 0xfa
   27d40:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   27d42:	2317      	movs	r3, #23
   27d44:	18fb      	adds	r3, r7, r3
   27d46:	781b      	ldrb	r3, [r3, #0]
   27d48:	b25b      	sxtb	r3, r3
}
   27d4a:	0018      	movs	r0, r3
   27d4c:	46bd      	mov	sp, r7
   27d4e:	b007      	add	sp, #28
   27d50:	bd90      	pop	{r4, r7, pc}
   27d52:	46c0      	nop			; (mov r8, r8)
   27d54:	000275cd 	.word	0x000275cd

00027d58 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   27d58:	b590      	push	{r4, r7, lr}
   27d5a:	b089      	sub	sp, #36	; 0x24
   27d5c:	af00      	add	r7, sp, #0
   27d5e:	60b9      	str	r1, [r7, #8]
   27d60:	0011      	movs	r1, r2
   27d62:	607b      	str	r3, [r7, #4]
   27d64:	230f      	movs	r3, #15
   27d66:	18fb      	adds	r3, r7, r3
   27d68:	1c02      	adds	r2, r0, #0
   27d6a:	701a      	strb	r2, [r3, #0]
   27d6c:	230e      	movs	r3, #14
   27d6e:	18fb      	adds	r3, r7, r3
   27d70:	1c0a      	adds	r2, r1, #0
   27d72:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   27d74:	2330      	movs	r3, #48	; 0x30
   27d76:	18fb      	adds	r3, r7, r3
   27d78:	881b      	ldrh	r3, [r3, #0]
   27d7a:	2b00      	cmp	r3, #0
   27d7c:	d100      	bne.n	27d80 <Socket_ReadSocketData+0x28>
   27d7e:	e0d7      	b.n	27f30 <Socket_ReadSocketData+0x1d8>
   27d80:	230f      	movs	r3, #15
   27d82:	18fb      	adds	r3, r7, r3
   27d84:	2200      	movs	r2, #0
   27d86:	569a      	ldrsb	r2, [r3, r2]
   27d88:	4b6b      	ldr	r3, [pc, #428]	; (27f38 <Socket_ReadSocketData+0x1e0>)
   27d8a:	0112      	lsls	r2, r2, #4
   27d8c:	58d3      	ldr	r3, [r2, r3]
   27d8e:	2b00      	cmp	r3, #0
   27d90:	d100      	bne.n	27d94 <Socket_ReadSocketData+0x3c>
   27d92:	e0cd      	b.n	27f30 <Socket_ReadSocketData+0x1d8>
   27d94:	230f      	movs	r3, #15
   27d96:	18fb      	adds	r3, r7, r3
   27d98:	781b      	ldrb	r3, [r3, #0]
   27d9a:	b25b      	sxtb	r3, r3
   27d9c:	4a66      	ldr	r2, [pc, #408]	; (27f38 <Socket_ReadSocketData+0x1e0>)
   27d9e:	011b      	lsls	r3, r3, #4
   27da0:	18d3      	adds	r3, r2, r3
   27da2:	3304      	adds	r3, #4
   27da4:	881b      	ldrh	r3, [r3, #0]
   27da6:	b29b      	uxth	r3, r3
   27da8:	2b00      	cmp	r3, #0
   27daa:	d100      	bne.n	27dae <Socket_ReadSocketData+0x56>
   27dac:	e0c0      	b.n	27f30 <Socket_ReadSocketData+0x1d8>
   27dae:	230f      	movs	r3, #15
   27db0:	18fb      	adds	r3, r7, r3
   27db2:	781b      	ldrb	r3, [r3, #0]
   27db4:	b25b      	sxtb	r3, r3
   27db6:	4a60      	ldr	r2, [pc, #384]	; (27f38 <Socket_ReadSocketData+0x1e0>)
   27db8:	011b      	lsls	r3, r3, #4
   27dba:	18d3      	adds	r3, r2, r3
   27dbc:	330a      	adds	r3, #10
   27dbe:	781b      	ldrb	r3, [r3, #0]
   27dc0:	b2db      	uxtb	r3, r3
   27dc2:	2b01      	cmp	r3, #1
   27dc4:	d000      	beq.n	27dc8 <Socket_ReadSocketData+0x70>
   27dc6:	e0b3      	b.n	27f30 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   27dc8:	687b      	ldr	r3, [r7, #4]
   27dca:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   27dcc:	68bb      	ldr	r3, [r7, #8]
   27dce:	2230      	movs	r2, #48	; 0x30
   27dd0:	18ba      	adds	r2, r7, r2
   27dd2:	8812      	ldrh	r2, [r2, #0]
   27dd4:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   27dd6:	2319      	movs	r3, #25
   27dd8:	18fb      	adds	r3, r7, r3
   27dda:	2201      	movs	r2, #1
   27ddc:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   27dde:	231a      	movs	r3, #26
   27de0:	18fb      	adds	r3, r7, r3
   27de2:	2230      	movs	r2, #48	; 0x30
   27de4:	18ba      	adds	r2, r7, r2
   27de6:	8812      	ldrh	r2, [r2, #0]
   27de8:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   27dea:	230f      	movs	r3, #15
   27dec:	18fb      	adds	r3, r7, r3
   27dee:	781b      	ldrb	r3, [r3, #0]
   27df0:	b25b      	sxtb	r3, r3
   27df2:	4a51      	ldr	r2, [pc, #324]	; (27f38 <Socket_ReadSocketData+0x1e0>)
   27df4:	011b      	lsls	r3, r3, #4
   27df6:	18d3      	adds	r3, r2, r3
   27df8:	3304      	adds	r3, #4
   27dfa:	881b      	ldrh	r3, [r3, #0]
   27dfc:	b29b      	uxth	r3, r3
   27dfe:	221a      	movs	r2, #26
   27e00:	18ba      	adds	r2, r7, r2
   27e02:	8812      	ldrh	r2, [r2, #0]
   27e04:	1ad3      	subs	r3, r2, r3
   27e06:	b29a      	uxth	r2, r3
   27e08:	2316      	movs	r3, #22
   27e0a:	18fb      	adds	r3, r7, r3
   27e0c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   27e0e:	2316      	movs	r3, #22
   27e10:	18fb      	adds	r3, r7, r3
   27e12:	2200      	movs	r2, #0
   27e14:	5e9b      	ldrsh	r3, [r3, r2]
   27e16:	2b00      	cmp	r3, #0
   27e18:	dd0f      	ble.n	27e3a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   27e1a:	2319      	movs	r3, #25
   27e1c:	18fb      	adds	r3, r7, r3
   27e1e:	2200      	movs	r2, #0
   27e20:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   27e22:	230f      	movs	r3, #15
   27e24:	18fb      	adds	r3, r7, r3
   27e26:	2200      	movs	r2, #0
   27e28:	569a      	ldrsb	r2, [r3, r2]
   27e2a:	231a      	movs	r3, #26
   27e2c:	18fb      	adds	r3, r7, r3
   27e2e:	4942      	ldr	r1, [pc, #264]	; (27f38 <Socket_ReadSocketData+0x1e0>)
   27e30:	0112      	lsls	r2, r2, #4
   27e32:	188a      	adds	r2, r1, r2
   27e34:	3204      	adds	r2, #4
   27e36:	8812      	ldrh	r2, [r2, #0]
   27e38:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   27e3a:	230f      	movs	r3, #15
   27e3c:	18fb      	adds	r3, r7, r3
   27e3e:	2200      	movs	r2, #0
   27e40:	569a      	ldrsb	r2, [r3, r2]
   27e42:	4b3d      	ldr	r3, [pc, #244]	; (27f38 <Socket_ReadSocketData+0x1e0>)
   27e44:	0112      	lsls	r2, r2, #4
   27e46:	58d1      	ldr	r1, [r2, r3]
   27e48:	2319      	movs	r3, #25
   27e4a:	18fb      	adds	r3, r7, r3
   27e4c:	781c      	ldrb	r4, [r3, #0]
   27e4e:	231a      	movs	r3, #26
   27e50:	18fb      	adds	r3, r7, r3
   27e52:	881a      	ldrh	r2, [r3, #0]
   27e54:	69f8      	ldr	r0, [r7, #28]
   27e56:	0023      	movs	r3, r4
   27e58:	4c38      	ldr	r4, [pc, #224]	; (27f3c <Socket_ReadSocketData+0x1e4>)
   27e5a:	47a0      	blx	r4
   27e5c:	1e03      	subs	r3, r0, #0
   27e5e:	d14f      	bne.n	27f00 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   27e60:	230f      	movs	r3, #15
   27e62:	18fb      	adds	r3, r7, r3
   27e64:	2200      	movs	r2, #0
   27e66:	569a      	ldrsb	r2, [r3, r2]
   27e68:	4b33      	ldr	r3, [pc, #204]	; (27f38 <Socket_ReadSocketData+0x1e0>)
   27e6a:	0112      	lsls	r2, r2, #4
   27e6c:	58d2      	ldr	r2, [r2, r3]
   27e6e:	68bb      	ldr	r3, [r7, #8]
   27e70:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   27e72:	231a      	movs	r3, #26
   27e74:	18fb      	adds	r3, r7, r3
   27e76:	2200      	movs	r2, #0
   27e78:	5e9a      	ldrsh	r2, [r3, r2]
   27e7a:	68bb      	ldr	r3, [r7, #8]
   27e7c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   27e7e:	68bb      	ldr	r3, [r7, #8]
   27e80:	88da      	ldrh	r2, [r3, #6]
   27e82:	231a      	movs	r3, #26
   27e84:	18fb      	adds	r3, r7, r3
   27e86:	881b      	ldrh	r3, [r3, #0]
   27e88:	1ad3      	subs	r3, r2, r3
   27e8a:	b29a      	uxth	r2, r3
   27e8c:	68bb      	ldr	r3, [r7, #8]
   27e8e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   27e90:	4b2b      	ldr	r3, [pc, #172]	; (27f40 <Socket_ReadSocketData+0x1e8>)
   27e92:	681b      	ldr	r3, [r3, #0]
   27e94:	2b00      	cmp	r3, #0
   27e96:	d00b      	beq.n	27eb0 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   27e98:	4b29      	ldr	r3, [pc, #164]	; (27f40 <Socket_ReadSocketData+0x1e8>)
   27e9a:	681b      	ldr	r3, [r3, #0]
   27e9c:	68bc      	ldr	r4, [r7, #8]
   27e9e:	220e      	movs	r2, #14
   27ea0:	18ba      	adds	r2, r7, r2
   27ea2:	7811      	ldrb	r1, [r2, #0]
   27ea4:	220f      	movs	r2, #15
   27ea6:	18ba      	adds	r2, r7, r2
   27ea8:	2000      	movs	r0, #0
   27eaa:	5610      	ldrsb	r0, [r2, r0]
   27eac:	0022      	movs	r2, r4
   27eae:	4798      	blx	r3

				u16ReadCount -= u16Read;
   27eb0:	2330      	movs	r3, #48	; 0x30
   27eb2:	18f9      	adds	r1, r7, r3
   27eb4:	2330      	movs	r3, #48	; 0x30
   27eb6:	18fa      	adds	r2, r7, r3
   27eb8:	231a      	movs	r3, #26
   27eba:	18fb      	adds	r3, r7, r3
   27ebc:	8812      	ldrh	r2, [r2, #0]
   27ebe:	881b      	ldrh	r3, [r3, #0]
   27ec0:	1ad3      	subs	r3, r2, r3
   27ec2:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   27ec4:	231a      	movs	r3, #26
   27ec6:	18fb      	adds	r3, r7, r3
   27ec8:	881b      	ldrh	r3, [r3, #0]
   27eca:	69fa      	ldr	r2, [r7, #28]
   27ecc:	18d3      	adds	r3, r2, r3
   27ece:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   27ed0:	230f      	movs	r3, #15
   27ed2:	18fb      	adds	r3, r7, r3
   27ed4:	781b      	ldrb	r3, [r3, #0]
   27ed6:	b25b      	sxtb	r3, r3
   27ed8:	4a17      	ldr	r2, [pc, #92]	; (27f38 <Socket_ReadSocketData+0x1e0>)
   27eda:	011b      	lsls	r3, r3, #4
   27edc:	18d3      	adds	r3, r2, r3
   27ede:	330a      	adds	r3, #10
   27ee0:	781b      	ldrb	r3, [r3, #0]
   27ee2:	b2db      	uxtb	r3, r3
   27ee4:	2b00      	cmp	r3, #0
   27ee6:	d11c      	bne.n	27f22 <Socket_ReadSocketData+0x1ca>
   27ee8:	2330      	movs	r3, #48	; 0x30
   27eea:	18fb      	adds	r3, r7, r3
   27eec:	881b      	ldrh	r3, [r3, #0]
   27eee:	2b00      	cmp	r3, #0
   27ef0:	d017      	beq.n	27f22 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   27ef2:	2301      	movs	r3, #1
   27ef4:	2200      	movs	r2, #0
   27ef6:	2100      	movs	r1, #0
   27ef8:	2000      	movs	r0, #0
   27efa:	4c10      	ldr	r4, [pc, #64]	; (27f3c <Socket_ReadSocketData+0x1e4>)
   27efc:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   27efe:	e017      	b.n	27f30 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   27f00:	4b10      	ldr	r3, [pc, #64]	; (27f44 <Socket_ReadSocketData+0x1ec>)
   27f02:	0018      	movs	r0, r3
   27f04:	4b10      	ldr	r3, [pc, #64]	; (27f48 <Socket_ReadSocketData+0x1f0>)
   27f06:	4798      	blx	r3
   27f08:	2330      	movs	r3, #48	; 0x30
   27f0a:	18fb      	adds	r3, r7, r3
   27f0c:	881a      	ldrh	r2, [r3, #0]
   27f0e:	4b0f      	ldr	r3, [pc, #60]	; (27f4c <Socket_ReadSocketData+0x1f4>)
   27f10:	0011      	movs	r1, r2
   27f12:	0018      	movs	r0, r3
   27f14:	4b0c      	ldr	r3, [pc, #48]	; (27f48 <Socket_ReadSocketData+0x1f0>)
   27f16:	4798      	blx	r3
   27f18:	4b0d      	ldr	r3, [pc, #52]	; (27f50 <Socket_ReadSocketData+0x1f8>)
   27f1a:	0018      	movs	r0, r3
   27f1c:	4b0a      	ldr	r3, [pc, #40]	; (27f48 <Socket_ReadSocketData+0x1f0>)
   27f1e:	4798      	blx	r3
				break;
   27f20:	e006      	b.n	27f30 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   27f22:	2330      	movs	r3, #48	; 0x30
   27f24:	18fb      	adds	r3, r7, r3
   27f26:	881b      	ldrh	r3, [r3, #0]
   27f28:	2b00      	cmp	r3, #0
   27f2a:	d000      	beq.n	27f2e <Socket_ReadSocketData+0x1d6>
   27f2c:	e753      	b.n	27dd6 <Socket_ReadSocketData+0x7e>
	}
}
   27f2e:	e7ff      	b.n	27f30 <Socket_ReadSocketData+0x1d8>
   27f30:	46c0      	nop			; (mov r8, r8)
   27f32:	46bd      	mov	sp, r7
   27f34:	b009      	add	sp, #36	; 0x24
   27f36:	bd90      	pop	{r4, r7, pc}
   27f38:	20005b18 	.word	0x20005b18
   27f3c:	00024751 	.word	0x00024751
   27f40:	20005bc8 	.word	0x20005bc8
   27f44:	0003d9c8 	.word	0x0003d9c8
   27f48:	00020e3d 	.word	0x00020e3d
   27f4c:	0003d9d4 	.word	0x0003d9d4
   27f50:	0003d9e8 	.word	0x0003d9e8

00027f54 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   27f54:	b590      	push	{r4, r7, lr}
   27f56:	b0bb      	sub	sp, #236	; 0xec
   27f58:	af02      	add	r7, sp, #8
   27f5a:	603a      	str	r2, [r7, #0]
   27f5c:	1dfb      	adds	r3, r7, #7
   27f5e:	1c02      	adds	r2, r0, #0
   27f60:	701a      	strb	r2, [r3, #0]
   27f62:	1d3b      	adds	r3, r7, #4
   27f64:	1c0a      	adds	r2, r1, #0
   27f66:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   27f68:	1dfb      	adds	r3, r7, #7
   27f6a:	781b      	ldrb	r3, [r3, #0]
   27f6c:	2b41      	cmp	r3, #65	; 0x41
   27f6e:	d003      	beq.n	27f78 <m2m_ip_cb+0x24>
   27f70:	1dfb      	adds	r3, r7, #7
   27f72:	781b      	ldrb	r3, [r3, #0]
   27f74:	2b54      	cmp	r3, #84	; 0x54
   27f76:	d120      	bne.n	27fba <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   27f78:	23cc      	movs	r3, #204	; 0xcc
   27f7a:	18f9      	adds	r1, r7, r3
   27f7c:	6838      	ldr	r0, [r7, #0]
   27f7e:	2300      	movs	r3, #0
   27f80:	2204      	movs	r2, #4
   27f82:	4c98      	ldr	r4, [pc, #608]	; (281e4 <m2m_ip_cb+0x290>)
   27f84:	47a0      	blx	r4
   27f86:	1e03      	subs	r3, r0, #0
   27f88:	d000      	beq.n	27f8c <m2m_ip_cb+0x38>
   27f8a:	e275      	b.n	28478 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   27f8c:	23cc      	movs	r3, #204	; 0xcc
   27f8e:	18fb      	adds	r3, r7, r3
   27f90:	2201      	movs	r2, #1
   27f92:	569a      	ldrsb	r2, [r3, r2]
   27f94:	23c8      	movs	r3, #200	; 0xc8
   27f96:	18fb      	adds	r3, r7, r3
   27f98:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   27f9a:	4b93      	ldr	r3, [pc, #588]	; (281e8 <m2m_ip_cb+0x294>)
   27f9c:	681b      	ldr	r3, [r3, #0]
   27f9e:	2b00      	cmp	r3, #0
   27fa0:	d100      	bne.n	27fa4 <m2m_ip_cb+0x50>
   27fa2:	e269      	b.n	28478 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   27fa4:	4b90      	ldr	r3, [pc, #576]	; (281e8 <m2m_ip_cb+0x294>)
   27fa6:	681b      	ldr	r3, [r3, #0]
   27fa8:	22cc      	movs	r2, #204	; 0xcc
   27faa:	18ba      	adds	r2, r7, r2
   27fac:	2000      	movs	r0, #0
   27fae:	5610      	ldrsb	r0, [r2, r0]
   27fb0:	22c8      	movs	r2, #200	; 0xc8
   27fb2:	18ba      	adds	r2, r7, r2
   27fb4:	2101      	movs	r1, #1
   27fb6:	4798      	blx	r3
	{
   27fb8:	e25e      	b.n	28478 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   27fba:	1dfb      	adds	r3, r7, #7
   27fbc:	781b      	ldrb	r3, [r3, #0]
   27fbe:	2b42      	cmp	r3, #66	; 0x42
   27fc0:	d120      	bne.n	28004 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   27fc2:	23c4      	movs	r3, #196	; 0xc4
   27fc4:	18f9      	adds	r1, r7, r3
   27fc6:	6838      	ldr	r0, [r7, #0]
   27fc8:	2300      	movs	r3, #0
   27fca:	2204      	movs	r2, #4
   27fcc:	4c85      	ldr	r4, [pc, #532]	; (281e4 <m2m_ip_cb+0x290>)
   27fce:	47a0      	blx	r4
   27fd0:	1e03      	subs	r3, r0, #0
   27fd2:	d000      	beq.n	27fd6 <m2m_ip_cb+0x82>
   27fd4:	e257      	b.n	28486 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   27fd6:	23c4      	movs	r3, #196	; 0xc4
   27fd8:	18fb      	adds	r3, r7, r3
   27fda:	2201      	movs	r2, #1
   27fdc:	569a      	ldrsb	r2, [r3, r2]
   27fde:	23c0      	movs	r3, #192	; 0xc0
   27fe0:	18fb      	adds	r3, r7, r3
   27fe2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   27fe4:	4b80      	ldr	r3, [pc, #512]	; (281e8 <m2m_ip_cb+0x294>)
   27fe6:	681b      	ldr	r3, [r3, #0]
   27fe8:	2b00      	cmp	r3, #0
   27fea:	d100      	bne.n	27fee <m2m_ip_cb+0x9a>
   27fec:	e24b      	b.n	28486 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   27fee:	4b7e      	ldr	r3, [pc, #504]	; (281e8 <m2m_ip_cb+0x294>)
   27ff0:	681b      	ldr	r3, [r3, #0]
   27ff2:	22c4      	movs	r2, #196	; 0xc4
   27ff4:	18ba      	adds	r2, r7, r2
   27ff6:	2000      	movs	r0, #0
   27ff8:	5610      	ldrsb	r0, [r2, r0]
   27ffa:	22c0      	movs	r2, #192	; 0xc0
   27ffc:	18ba      	adds	r2, r7, r2
   27ffe:	2102      	movs	r1, #2
   28000:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   28002:	e240      	b.n	28486 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   28004:	1dfb      	adds	r3, r7, #7
   28006:	781b      	ldrb	r3, [r3, #0]
   28008:	2b43      	cmp	r3, #67	; 0x43
   2800a:	d000      	beq.n	2800e <m2m_ip_cb+0xba>
   2800c:	e086      	b.n	2811c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   2800e:	23b4      	movs	r3, #180	; 0xb4
   28010:	18f9      	adds	r1, r7, r3
   28012:	6838      	ldr	r0, [r7, #0]
   28014:	2300      	movs	r3, #0
   28016:	220c      	movs	r2, #12
   28018:	4c72      	ldr	r4, [pc, #456]	; (281e4 <m2m_ip_cb+0x290>)
   2801a:	47a0      	blx	r4
   2801c:	1e03      	subs	r3, r0, #0
   2801e:	d000      	beq.n	28022 <m2m_ip_cb+0xce>
   28020:	e231      	b.n	28486 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   28022:	23b4      	movs	r3, #180	; 0xb4
   28024:	18fb      	adds	r3, r7, r3
   28026:	7a5b      	ldrb	r3, [r3, #9]
   28028:	b25b      	sxtb	r3, r3
   2802a:	2b00      	cmp	r3, #0
   2802c:	db4f      	blt.n	280ce <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   2802e:	23b4      	movs	r3, #180	; 0xb4
   28030:	18fb      	adds	r3, r7, r3
   28032:	7a5b      	ldrb	r3, [r3, #9]
   28034:	b25b      	sxtb	r3, r3
   28036:	0018      	movs	r0, r3
   28038:	23b4      	movs	r3, #180	; 0xb4
   2803a:	18fb      	adds	r3, r7, r3
   2803c:	7a1b      	ldrb	r3, [r3, #8]
   2803e:	b25b      	sxtb	r3, r3
   28040:	4a6a      	ldr	r2, [pc, #424]	; (281ec <m2m_ip_cb+0x298>)
   28042:	011b      	lsls	r3, r3, #4
   28044:	18d3      	adds	r3, r2, r3
   28046:	330b      	adds	r3, #11
   28048:	781b      	ldrb	r3, [r3, #0]
   2804a:	b2d9      	uxtb	r1, r3
   2804c:	4a67      	ldr	r2, [pc, #412]	; (281ec <m2m_ip_cb+0x298>)
   2804e:	0103      	lsls	r3, r0, #4
   28050:	18d3      	adds	r3, r2, r3
   28052:	330b      	adds	r3, #11
   28054:	1c0a      	adds	r2, r1, #0
   28056:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   28058:	23b4      	movs	r3, #180	; 0xb4
   2805a:	18fb      	adds	r3, r7, r3
   2805c:	7a5b      	ldrb	r3, [r3, #9]
   2805e:	b25b      	sxtb	r3, r3
   28060:	4a62      	ldr	r2, [pc, #392]	; (281ec <m2m_ip_cb+0x298>)
   28062:	011b      	lsls	r3, r3, #4
   28064:	18d3      	adds	r3, r2, r3
   28066:	330a      	adds	r3, #10
   28068:	2201      	movs	r2, #1
   2806a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   2806c:	23b4      	movs	r3, #180	; 0xb4
   2806e:	18fb      	adds	r3, r7, r3
   28070:	7a5b      	ldrb	r3, [r3, #9]
   28072:	b25b      	sxtb	r3, r3
   28074:	0018      	movs	r0, r3
   28076:	23b4      	movs	r3, #180	; 0xb4
   28078:	18fb      	adds	r3, r7, r3
   2807a:	895b      	ldrh	r3, [r3, #10]
   2807c:	3b08      	subs	r3, #8
   2807e:	b299      	uxth	r1, r3
   28080:	4a5a      	ldr	r2, [pc, #360]	; (281ec <m2m_ip_cb+0x298>)
   28082:	0103      	lsls	r3, r0, #4
   28084:	18d3      	adds	r3, r2, r3
   28086:	3308      	adds	r3, #8
   28088:	1c0a      	adds	r2, r1, #0
   2808a:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   2808c:	4b58      	ldr	r3, [pc, #352]	; (281f0 <m2m_ip_cb+0x29c>)
   2808e:	881b      	ldrh	r3, [r3, #0]
   28090:	b29b      	uxth	r3, r3
   28092:	3301      	adds	r3, #1
   28094:	b29a      	uxth	r2, r3
   28096:	4b56      	ldr	r3, [pc, #344]	; (281f0 <m2m_ip_cb+0x29c>)
   28098:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   2809a:	4b55      	ldr	r3, [pc, #340]	; (281f0 <m2m_ip_cb+0x29c>)
   2809c:	881b      	ldrh	r3, [r3, #0]
   2809e:	b29b      	uxth	r3, r3
   280a0:	2b00      	cmp	r3, #0
   280a2:	d106      	bne.n	280b2 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   280a4:	4b52      	ldr	r3, [pc, #328]	; (281f0 <m2m_ip_cb+0x29c>)
   280a6:	881b      	ldrh	r3, [r3, #0]
   280a8:	b29b      	uxth	r3, r3
   280aa:	3301      	adds	r3, #1
   280ac:	b29a      	uxth	r2, r3
   280ae:	4b50      	ldr	r3, [pc, #320]	; (281f0 <m2m_ip_cb+0x29c>)
   280b0:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   280b2:	23b4      	movs	r3, #180	; 0xb4
   280b4:	18fb      	adds	r3, r7, r3
   280b6:	7a5b      	ldrb	r3, [r3, #9]
   280b8:	b25b      	sxtb	r3, r3
   280ba:	0018      	movs	r0, r3
   280bc:	4b4c      	ldr	r3, [pc, #304]	; (281f0 <m2m_ip_cb+0x29c>)
   280be:	881b      	ldrh	r3, [r3, #0]
   280c0:	b299      	uxth	r1, r3
   280c2:	4a4a      	ldr	r2, [pc, #296]	; (281ec <m2m_ip_cb+0x298>)
   280c4:	0103      	lsls	r3, r0, #4
   280c6:	18d3      	adds	r3, r2, r3
   280c8:	3306      	adds	r3, #6
   280ca:	1c0a      	adds	r2, r1, #0
   280cc:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   280ce:	23b4      	movs	r3, #180	; 0xb4
   280d0:	18fb      	adds	r3, r7, r3
   280d2:	2209      	movs	r2, #9
   280d4:	569a      	ldrsb	r2, [r3, r2]
   280d6:	23a0      	movs	r3, #160	; 0xa0
   280d8:	18fb      	adds	r3, r7, r3
   280da:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   280dc:	23a0      	movs	r3, #160	; 0xa0
   280de:	18fb      	adds	r3, r7, r3
   280e0:	2202      	movs	r2, #2
   280e2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   280e4:	23b4      	movs	r3, #180	; 0xb4
   280e6:	18fb      	adds	r3, r7, r3
   280e8:	885a      	ldrh	r2, [r3, #2]
   280ea:	23a0      	movs	r3, #160	; 0xa0
   280ec:	18fb      	adds	r3, r7, r3
   280ee:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   280f0:	23b4      	movs	r3, #180	; 0xb4
   280f2:	18fb      	adds	r3, r7, r3
   280f4:	685a      	ldr	r2, [r3, #4]
   280f6:	23a0      	movs	r3, #160	; 0xa0
   280f8:	18fb      	adds	r3, r7, r3
   280fa:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   280fc:	4b3a      	ldr	r3, [pc, #232]	; (281e8 <m2m_ip_cb+0x294>)
   280fe:	681b      	ldr	r3, [r3, #0]
   28100:	2b00      	cmp	r3, #0
   28102:	d100      	bne.n	28106 <m2m_ip_cb+0x1b2>
   28104:	e1bf      	b.n	28486 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   28106:	4b38      	ldr	r3, [pc, #224]	; (281e8 <m2m_ip_cb+0x294>)
   28108:	681b      	ldr	r3, [r3, #0]
   2810a:	22b4      	movs	r2, #180	; 0xb4
   2810c:	18ba      	adds	r2, r7, r2
   2810e:	2008      	movs	r0, #8
   28110:	5610      	ldrsb	r0, [r2, r0]
   28112:	22a0      	movs	r2, #160	; 0xa0
   28114:	18ba      	adds	r2, r7, r2
   28116:	2104      	movs	r1, #4
   28118:	4798      	blx	r3
}
   2811a:	e1b4      	b.n	28486 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   2811c:	1dfb      	adds	r3, r7, #7
   2811e:	781b      	ldrb	r3, [r3, #0]
   28120:	2b44      	cmp	r3, #68	; 0x44
   28122:	d003      	beq.n	2812c <m2m_ip_cb+0x1d8>
   28124:	1dfb      	adds	r3, r7, #7
   28126:	781b      	ldrb	r3, [r3, #0]
   28128:	2b4b      	cmp	r3, #75	; 0x4b
   2812a:	d13d      	bne.n	281a8 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   2812c:	239c      	movs	r3, #156	; 0x9c
   2812e:	18f9      	adds	r1, r7, r3
   28130:	6838      	ldr	r0, [r7, #0]
   28132:	2300      	movs	r3, #0
   28134:	2204      	movs	r2, #4
   28136:	4c2b      	ldr	r4, [pc, #172]	; (281e4 <m2m_ip_cb+0x290>)
   28138:	47a0      	blx	r4
   2813a:	1e03      	subs	r3, r0, #0
   2813c:	d000      	beq.n	28140 <m2m_ip_cb+0x1ec>
   2813e:	e19d      	b.n	2847c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   28140:	239c      	movs	r3, #156	; 0x9c
   28142:	18fb      	adds	r3, r7, r3
   28144:	2200      	movs	r2, #0
   28146:	569a      	ldrsb	r2, [r3, r2]
   28148:	2398      	movs	r3, #152	; 0x98
   2814a:	18fb      	adds	r3, r7, r3
   2814c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2814e:	239c      	movs	r3, #156	; 0x9c
   28150:	18fb      	adds	r3, r7, r3
   28152:	2201      	movs	r2, #1
   28154:	569a      	ldrsb	r2, [r3, r2]
   28156:	2398      	movs	r3, #152	; 0x98
   28158:	18fb      	adds	r3, r7, r3
   2815a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   2815c:	239c      	movs	r3, #156	; 0x9c
   2815e:	18fb      	adds	r3, r7, r3
   28160:	785b      	ldrb	r3, [r3, #1]
   28162:	b25b      	sxtb	r3, r3
   28164:	2b00      	cmp	r3, #0
   28166:	d10f      	bne.n	28188 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   28168:	239c      	movs	r3, #156	; 0x9c
   2816a:	18fb      	adds	r3, r7, r3
   2816c:	781b      	ldrb	r3, [r3, #0]
   2816e:	b25b      	sxtb	r3, r3
   28170:	0018      	movs	r0, r3
   28172:	239c      	movs	r3, #156	; 0x9c
   28174:	18fb      	adds	r3, r7, r3
   28176:	885b      	ldrh	r3, [r3, #2]
   28178:	3b08      	subs	r3, #8
   2817a:	b299      	uxth	r1, r3
   2817c:	4a1b      	ldr	r2, [pc, #108]	; (281ec <m2m_ip_cb+0x298>)
   2817e:	0103      	lsls	r3, r0, #4
   28180:	18d3      	adds	r3, r2, r3
   28182:	3308      	adds	r3, #8
   28184:	1c0a      	adds	r2, r1, #0
   28186:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   28188:	4b17      	ldr	r3, [pc, #92]	; (281e8 <m2m_ip_cb+0x294>)
   2818a:	681b      	ldr	r3, [r3, #0]
   2818c:	2b00      	cmp	r3, #0
   2818e:	d100      	bne.n	28192 <m2m_ip_cb+0x23e>
   28190:	e174      	b.n	2847c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   28192:	4b15      	ldr	r3, [pc, #84]	; (281e8 <m2m_ip_cb+0x294>)
   28194:	681b      	ldr	r3, [r3, #0]
   28196:	229c      	movs	r2, #156	; 0x9c
   28198:	18ba      	adds	r2, r7, r2
   2819a:	2000      	movs	r0, #0
   2819c:	5610      	ldrsb	r0, [r2, r0]
   2819e:	2298      	movs	r2, #152	; 0x98
   281a0:	18ba      	adds	r2, r7, r2
   281a2:	2105      	movs	r1, #5
   281a4:	4798      	blx	r3
	{
   281a6:	e169      	b.n	2847c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   281a8:	1dfb      	adds	r3, r7, #7
   281aa:	781b      	ldrb	r3, [r3, #0]
   281ac:	2b4a      	cmp	r3, #74	; 0x4a
   281ae:	d123      	bne.n	281f8 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   281b0:	230c      	movs	r3, #12
   281b2:	18f9      	adds	r1, r7, r3
   281b4:	6838      	ldr	r0, [r7, #0]
   281b6:	2300      	movs	r3, #0
   281b8:	2244      	movs	r2, #68	; 0x44
   281ba:	4c0a      	ldr	r4, [pc, #40]	; (281e4 <m2m_ip_cb+0x290>)
   281bc:	47a0      	blx	r4
   281be:	1e03      	subs	r3, r0, #0
   281c0:	d000      	beq.n	281c4 <m2m_ip_cb+0x270>
   281c2:	e160      	b.n	28486 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   281c4:	4b0b      	ldr	r3, [pc, #44]	; (281f4 <m2m_ip_cb+0x2a0>)
   281c6:	681b      	ldr	r3, [r3, #0]
   281c8:	2b00      	cmp	r3, #0
   281ca:	d100      	bne.n	281ce <m2m_ip_cb+0x27a>
   281cc:	e15b      	b.n	28486 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   281ce:	4b09      	ldr	r3, [pc, #36]	; (281f4 <m2m_ip_cb+0x2a0>)
   281d0:	681a      	ldr	r2, [r3, #0]
   281d2:	230c      	movs	r3, #12
   281d4:	18fb      	adds	r3, r7, r3
   281d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   281d8:	230c      	movs	r3, #12
   281da:	18fb      	adds	r3, r7, r3
   281dc:	0018      	movs	r0, r3
   281de:	4790      	blx	r2
}
   281e0:	e151      	b.n	28486 <m2m_ip_cb+0x532>
   281e2:	46c0      	nop			; (mov r8, r8)
   281e4:	00024751 	.word	0x00024751
   281e8:	20005bc8 	.word	0x20005bc8
   281ec:	20005b18 	.word	0x20005b18
   281f0:	200041d2 	.word	0x200041d2
   281f4:	20005bd0 	.word	0x20005bd0
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   281f8:	1dfb      	adds	r3, r7, #7
   281fa:	781b      	ldrb	r3, [r3, #0]
   281fc:	2b46      	cmp	r3, #70	; 0x46
   281fe:	d008      	beq.n	28212 <m2m_ip_cb+0x2be>
   28200:	1dfb      	adds	r3, r7, #7
   28202:	781b      	ldrb	r3, [r3, #0]
   28204:	2b48      	cmp	r3, #72	; 0x48
   28206:	d004      	beq.n	28212 <m2m_ip_cb+0x2be>
   28208:	1dfb      	adds	r3, r7, #7
   2820a:	781b      	ldrb	r3, [r3, #0]
   2820c:	2b4d      	cmp	r3, #77	; 0x4d
   2820e:	d000      	beq.n	28212 <m2m_ip_cb+0x2be>
   28210:	e0b4      	b.n	2837c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   28212:	23df      	movs	r3, #223	; 0xdf
   28214:	18fb      	adds	r3, r7, r3
   28216:	2206      	movs	r2, #6
   28218:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   2821a:	1dfb      	adds	r3, r7, #7
   2821c:	781b      	ldrb	r3, [r3, #0]
   2821e:	2b48      	cmp	r3, #72	; 0x48
   28220:	d103      	bne.n	2822a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   28222:	23df      	movs	r3, #223	; 0xdf
   28224:	18fb      	adds	r3, r7, r3
   28226:	2209      	movs	r2, #9
   28228:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   2822a:	23d8      	movs	r3, #216	; 0xd8
   2822c:	18fb      	adds	r3, r7, r3
   2822e:	2210      	movs	r2, #16
   28230:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   28232:	23d8      	movs	r3, #216	; 0xd8
   28234:	18fb      	adds	r3, r7, r3
   28236:	881a      	ldrh	r2, [r3, #0]
   28238:	2388      	movs	r3, #136	; 0x88
   2823a:	18f9      	adds	r1, r7, r3
   2823c:	6838      	ldr	r0, [r7, #0]
   2823e:	2300      	movs	r3, #0
   28240:	4c93      	ldr	r4, [pc, #588]	; (28490 <m2m_ip_cb+0x53c>)
   28242:	47a0      	blx	r4
   28244:	1e03      	subs	r3, r0, #0
   28246:	d000      	beq.n	2824a <m2m_ip_cb+0x2f6>
   28248:	e11a      	b.n	28480 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   2824a:	23d6      	movs	r3, #214	; 0xd6
   2824c:	18fb      	adds	r3, r7, r3
   2824e:	2200      	movs	r2, #0
   28250:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   28252:	23d5      	movs	r3, #213	; 0xd5
   28254:	18fb      	adds	r3, r7, r3
   28256:	2288      	movs	r2, #136	; 0x88
   28258:	18ba      	adds	r2, r7, r2
   2825a:	7b12      	ldrb	r2, [r2, #12]
   2825c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2825e:	23d6      	movs	r3, #214	; 0xd6
   28260:	18fb      	adds	r3, r7, r3
   28262:	2288      	movs	r2, #136	; 0x88
   28264:	18ba      	adds	r2, r7, r2
   28266:	89d2      	ldrh	r2, [r2, #14]
   28268:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   2826a:	23d5      	movs	r3, #213	; 0xd5
   2826c:	18fb      	adds	r3, r7, r3
   2826e:	781b      	ldrb	r3, [r3, #0]
   28270:	b25b      	sxtb	r3, r3
   28272:	4a88      	ldr	r2, [pc, #544]	; (28494 <m2m_ip_cb+0x540>)
   28274:	011b      	lsls	r3, r3, #4
   28276:	18d3      	adds	r3, r2, r3
   28278:	330c      	adds	r3, #12
   2827a:	2200      	movs	r2, #0
   2827c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2827e:	23d2      	movs	r3, #210	; 0xd2
   28280:	18fb      	adds	r3, r7, r3
   28282:	2288      	movs	r2, #136	; 0x88
   28284:	18ba      	adds	r2, r7, r2
   28286:	8912      	ldrh	r2, [r2, #8]
   28288:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   2828a:	23d0      	movs	r3, #208	; 0xd0
   2828c:	18fb      	adds	r3, r7, r3
   2828e:	2288      	movs	r2, #136	; 0x88
   28290:	18ba      	adds	r2, r7, r2
   28292:	8952      	ldrh	r2, [r2, #10]
   28294:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   28296:	2388      	movs	r3, #136	; 0x88
   28298:	18fb      	adds	r3, r7, r3
   2829a:	885a      	ldrh	r2, [r3, #2]
   2829c:	2370      	movs	r3, #112	; 0x70
   2829e:	18fb      	adds	r3, r7, r3
   282a0:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   282a2:	2388      	movs	r3, #136	; 0x88
   282a4:	18fb      	adds	r3, r7, r3
   282a6:	685a      	ldr	r2, [r3, #4]
   282a8:	2370      	movs	r3, #112	; 0x70
   282aa:	18fb      	adds	r3, r7, r3
   282ac:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   282ae:	23d5      	movs	r3, #213	; 0xd5
   282b0:	18fb      	adds	r3, r7, r3
   282b2:	781b      	ldrb	r3, [r3, #0]
   282b4:	b25b      	sxtb	r3, r3
   282b6:	4a77      	ldr	r2, [pc, #476]	; (28494 <m2m_ip_cb+0x540>)
   282b8:	011b      	lsls	r3, r3, #4
   282ba:	18d3      	adds	r3, r2, r3
   282bc:	3306      	adds	r3, #6
   282be:	881b      	ldrh	r3, [r3, #0]
   282c0:	b29b      	uxth	r3, r3
   282c2:	22d6      	movs	r2, #214	; 0xd6
   282c4:	18ba      	adds	r2, r7, r2
   282c6:	8812      	ldrh	r2, [r2, #0]
   282c8:	429a      	cmp	r2, r3
   282ca:	d148      	bne.n	2835e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   282cc:	23d2      	movs	r3, #210	; 0xd2
   282ce:	18fb      	adds	r3, r7, r3
   282d0:	2200      	movs	r2, #0
   282d2:	5e9b      	ldrsh	r3, [r3, r2]
   282d4:	2b00      	cmp	r3, #0
   282d6:	dd25      	ble.n	28324 <m2m_ip_cb+0x3d0>
   282d8:	23d2      	movs	r3, #210	; 0xd2
   282da:	18fb      	adds	r3, r7, r3
   282dc:	2200      	movs	r2, #0
   282de:	5e9a      	ldrsh	r2, [r3, r2]
   282e0:	1d3b      	adds	r3, r7, #4
   282e2:	881b      	ldrh	r3, [r3, #0]
   282e4:	429a      	cmp	r2, r3
   282e6:	da1d      	bge.n	28324 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   282e8:	23d0      	movs	r3, #208	; 0xd0
   282ea:	18fb      	adds	r3, r7, r3
   282ec:	881b      	ldrh	r3, [r3, #0]
   282ee:	683a      	ldr	r2, [r7, #0]
   282f0:	18d3      	adds	r3, r2, r3
   282f2:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   282f4:	23d8      	movs	r3, #216	; 0xd8
   282f6:	18fb      	adds	r3, r7, r3
   282f8:	22d2      	movs	r2, #210	; 0xd2
   282fa:	18ba      	adds	r2, r7, r2
   282fc:	8812      	ldrh	r2, [r2, #0]
   282fe:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   28300:	683c      	ldr	r4, [r7, #0]
   28302:	23df      	movs	r3, #223	; 0xdf
   28304:	18fb      	adds	r3, r7, r3
   28306:	781a      	ldrb	r2, [r3, #0]
   28308:	2370      	movs	r3, #112	; 0x70
   2830a:	18f9      	adds	r1, r7, r3
   2830c:	23d5      	movs	r3, #213	; 0xd5
   2830e:	18fb      	adds	r3, r7, r3
   28310:	2000      	movs	r0, #0
   28312:	5618      	ldrsb	r0, [r3, r0]
   28314:	23d8      	movs	r3, #216	; 0xd8
   28316:	18fb      	adds	r3, r7, r3
   28318:	881b      	ldrh	r3, [r3, #0]
   2831a:	9300      	str	r3, [sp, #0]
   2831c:	0023      	movs	r3, r4
   2831e:	4c5e      	ldr	r4, [pc, #376]	; (28498 <m2m_ip_cb+0x544>)
   28320:	47a0      	blx	r4
	{
   28322:	e0ad      	b.n	28480 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   28324:	2370      	movs	r3, #112	; 0x70
   28326:	18fb      	adds	r3, r7, r3
   28328:	22d2      	movs	r2, #210	; 0xd2
   2832a:	18ba      	adds	r2, r7, r2
   2832c:	8812      	ldrh	r2, [r2, #0]
   2832e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   28330:	2370      	movs	r3, #112	; 0x70
   28332:	18fb      	adds	r3, r7, r3
   28334:	2200      	movs	r2, #0
   28336:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   28338:	4b58      	ldr	r3, [pc, #352]	; (2849c <m2m_ip_cb+0x548>)
   2833a:	681b      	ldr	r3, [r3, #0]
   2833c:	2b00      	cmp	r3, #0
   2833e:	d100      	bne.n	28342 <m2m_ip_cb+0x3ee>
   28340:	e09e      	b.n	28480 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   28342:	4b56      	ldr	r3, [pc, #344]	; (2849c <m2m_ip_cb+0x548>)
   28344:	681b      	ldr	r3, [r3, #0]
   28346:	2270      	movs	r2, #112	; 0x70
   28348:	18bc      	adds	r4, r7, r2
   2834a:	22df      	movs	r2, #223	; 0xdf
   2834c:	18ba      	adds	r2, r7, r2
   2834e:	7811      	ldrb	r1, [r2, #0]
   28350:	22d5      	movs	r2, #213	; 0xd5
   28352:	18ba      	adds	r2, r7, r2
   28354:	2000      	movs	r0, #0
   28356:	5610      	ldrsb	r0, [r2, r0]
   28358:	0022      	movs	r2, r4
   2835a:	4798      	blx	r3
	{
   2835c:	e090      	b.n	28480 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2835e:	23d8      	movs	r3, #216	; 0xd8
   28360:	18fa      	adds	r2, r7, r3
   28362:	1d3b      	adds	r3, r7, #4
   28364:	8812      	ldrh	r2, [r2, #0]
   28366:	881b      	ldrh	r3, [r3, #0]
   28368:	429a      	cmp	r2, r3
   2836a:	d300      	bcc.n	2836e <m2m_ip_cb+0x41a>
   2836c:	e088      	b.n	28480 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2836e:	2301      	movs	r3, #1
   28370:	2200      	movs	r2, #0
   28372:	2100      	movs	r1, #0
   28374:	2000      	movs	r0, #0
   28376:	4c46      	ldr	r4, [pc, #280]	; (28490 <m2m_ip_cb+0x53c>)
   28378:	47a0      	blx	r4
	{
   2837a:	e081      	b.n	28480 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   2837c:	1dfb      	adds	r3, r7, #7
   2837e:	781b      	ldrb	r3, [r3, #0]
   28380:	2b45      	cmp	r3, #69	; 0x45
   28382:	d007      	beq.n	28394 <m2m_ip_cb+0x440>
   28384:	1dfb      	adds	r3, r7, #7
   28386:	781b      	ldrb	r3, [r3, #0]
   28388:	2b47      	cmp	r3, #71	; 0x47
   2838a:	d003      	beq.n	28394 <m2m_ip_cb+0x440>
   2838c:	1dfb      	adds	r3, r7, #7
   2838e:	781b      	ldrb	r3, [r3, #0]
   28390:	2b4c      	cmp	r3, #76	; 0x4c
   28392:	d14c      	bne.n	2842e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   28394:	23de      	movs	r3, #222	; 0xde
   28396:	18fb      	adds	r3, r7, r3
   28398:	2207      	movs	r2, #7
   2839a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   2839c:	1dfb      	adds	r3, r7, #7
   2839e:	781b      	ldrb	r3, [r3, #0]
   283a0:	2b47      	cmp	r3, #71	; 0x47
   283a2:	d103      	bne.n	283ac <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   283a4:	23de      	movs	r3, #222	; 0xde
   283a6:	18fb      	adds	r3, r7, r3
   283a8:	2208      	movs	r2, #8
   283aa:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   283ac:	2364      	movs	r3, #100	; 0x64
   283ae:	18f9      	adds	r1, r7, r3
   283b0:	6838      	ldr	r0, [r7, #0]
   283b2:	2300      	movs	r3, #0
   283b4:	2208      	movs	r2, #8
   283b6:	4c36      	ldr	r4, [pc, #216]	; (28490 <m2m_ip_cb+0x53c>)
   283b8:	47a0      	blx	r4
   283ba:	1e03      	subs	r3, r0, #0
   283bc:	d162      	bne.n	28484 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   283be:	23dc      	movs	r3, #220	; 0xdc
   283c0:	18fb      	adds	r3, r7, r3
   283c2:	2200      	movs	r2, #0
   283c4:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   283c6:	23db      	movs	r3, #219	; 0xdb
   283c8:	18fb      	adds	r3, r7, r3
   283ca:	2264      	movs	r2, #100	; 0x64
   283cc:	18ba      	adds	r2, r7, r2
   283ce:	7812      	ldrb	r2, [r2, #0]
   283d0:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   283d2:	23dc      	movs	r3, #220	; 0xdc
   283d4:	18fb      	adds	r3, r7, r3
   283d6:	2264      	movs	r2, #100	; 0x64
   283d8:	18ba      	adds	r2, r7, r2
   283da:	8892      	ldrh	r2, [r2, #4]
   283dc:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   283de:	2364      	movs	r3, #100	; 0x64
   283e0:	18fb      	adds	r3, r7, r3
   283e2:	2202      	movs	r2, #2
   283e4:	5e9a      	ldrsh	r2, [r3, r2]
   283e6:	236e      	movs	r3, #110	; 0x6e
   283e8:	18fb      	adds	r3, r7, r3
   283ea:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   283ec:	23db      	movs	r3, #219	; 0xdb
   283ee:	18fb      	adds	r3, r7, r3
   283f0:	781b      	ldrb	r3, [r3, #0]
   283f2:	b25b      	sxtb	r3, r3
   283f4:	4a27      	ldr	r2, [pc, #156]	; (28494 <m2m_ip_cb+0x540>)
   283f6:	011b      	lsls	r3, r3, #4
   283f8:	18d3      	adds	r3, r2, r3
   283fa:	3306      	adds	r3, #6
   283fc:	881b      	ldrh	r3, [r3, #0]
   283fe:	b29b      	uxth	r3, r3
   28400:	22dc      	movs	r2, #220	; 0xdc
   28402:	18ba      	adds	r2, r7, r2
   28404:	8812      	ldrh	r2, [r2, #0]
   28406:	429a      	cmp	r2, r3
   28408:	d13c      	bne.n	28484 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   2840a:	4b24      	ldr	r3, [pc, #144]	; (2849c <m2m_ip_cb+0x548>)
   2840c:	681b      	ldr	r3, [r3, #0]
   2840e:	2b00      	cmp	r3, #0
   28410:	d038      	beq.n	28484 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   28412:	4b22      	ldr	r3, [pc, #136]	; (2849c <m2m_ip_cb+0x548>)
   28414:	681b      	ldr	r3, [r3, #0]
   28416:	226e      	movs	r2, #110	; 0x6e
   28418:	18bc      	adds	r4, r7, r2
   2841a:	22de      	movs	r2, #222	; 0xde
   2841c:	18ba      	adds	r2, r7, r2
   2841e:	7811      	ldrb	r1, [r2, #0]
   28420:	22db      	movs	r2, #219	; 0xdb
   28422:	18ba      	adds	r2, r7, r2
   28424:	2000      	movs	r0, #0
   28426:	5610      	ldrsb	r0, [r2, r0]
   28428:	0022      	movs	r2, r4
   2842a:	4798      	blx	r3
	{
   2842c:	e02a      	b.n	28484 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2842e:	1dfb      	adds	r3, r7, #7
   28430:	781b      	ldrb	r3, [r3, #0]
   28432:	2b52      	cmp	r3, #82	; 0x52
   28434:	d127      	bne.n	28486 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   28436:	2350      	movs	r3, #80	; 0x50
   28438:	18f9      	adds	r1, r7, r3
   2843a:	6838      	ldr	r0, [r7, #0]
   2843c:	2301      	movs	r3, #1
   2843e:	2214      	movs	r2, #20
   28440:	4c13      	ldr	r4, [pc, #76]	; (28490 <m2m_ip_cb+0x53c>)
   28442:	47a0      	blx	r4
   28444:	1e03      	subs	r3, r0, #0
   28446:	d11e      	bne.n	28486 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   28448:	2350      	movs	r3, #80	; 0x50
   2844a:	18fb      	adds	r3, r7, r3
   2844c:	685b      	ldr	r3, [r3, #4]
   2844e:	001a      	movs	r2, r3
   28450:	4b13      	ldr	r3, [pc, #76]	; (284a0 <m2m_ip_cb+0x54c>)
   28452:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   28454:	4b12      	ldr	r3, [pc, #72]	; (284a0 <m2m_ip_cb+0x54c>)
   28456:	681b      	ldr	r3, [r3, #0]
   28458:	2b00      	cmp	r3, #0
   2845a:	d014      	beq.n	28486 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   2845c:	4b10      	ldr	r3, [pc, #64]	; (284a0 <m2m_ip_cb+0x54c>)
   2845e:	681c      	ldr	r4, [r3, #0]
   28460:	2350      	movs	r3, #80	; 0x50
   28462:	18fb      	adds	r3, r7, r3
   28464:	6818      	ldr	r0, [r3, #0]
   28466:	2350      	movs	r3, #80	; 0x50
   28468:	18fb      	adds	r3, r7, r3
   2846a:	6899      	ldr	r1, [r3, #8]
   2846c:	2350      	movs	r3, #80	; 0x50
   2846e:	18fb      	adds	r3, r7, r3
   28470:	7c1b      	ldrb	r3, [r3, #16]
   28472:	001a      	movs	r2, r3
   28474:	47a0      	blx	r4
}
   28476:	e006      	b.n	28486 <m2m_ip_cb+0x532>
	{
   28478:	46c0      	nop			; (mov r8, r8)
   2847a:	e004      	b.n	28486 <m2m_ip_cb+0x532>
	{
   2847c:	46c0      	nop			; (mov r8, r8)
   2847e:	e002      	b.n	28486 <m2m_ip_cb+0x532>
	{
   28480:	46c0      	nop			; (mov r8, r8)
   28482:	e000      	b.n	28486 <m2m_ip_cb+0x532>
	{
   28484:	46c0      	nop			; (mov r8, r8)
}
   28486:	46c0      	nop			; (mov r8, r8)
   28488:	46bd      	mov	sp, r7
   2848a:	b039      	add	sp, #228	; 0xe4
   2848c:	bd90      	pop	{r4, r7, pc}
   2848e:	46c0      	nop			; (mov r8, r8)
   28490:	00024751 	.word	0x00024751
   28494:	20005b18 	.word	0x20005b18
   28498:	00027d59 	.word	0x00027d59
   2849c:	20005bc8 	.word	0x20005bc8
   284a0:	20005bcc 	.word	0x20005bcc

000284a4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   284a4:	b580      	push	{r7, lr}
   284a6:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   284a8:	4b0c      	ldr	r3, [pc, #48]	; (284dc <socketInit+0x38>)
   284aa:	781b      	ldrb	r3, [r3, #0]
   284ac:	b2db      	uxtb	r3, r3
   284ae:	2b00      	cmp	r3, #0
   284b0:	d110      	bne.n	284d4 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   284b2:	4b0b      	ldr	r3, [pc, #44]	; (284e0 <socketInit+0x3c>)
   284b4:	22b0      	movs	r2, #176	; 0xb0
   284b6:	2100      	movs	r1, #0
   284b8:	0018      	movs	r0, r3
   284ba:	4b0a      	ldr	r3, [pc, #40]	; (284e4 <socketInit+0x40>)
   284bc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   284be:	4b0a      	ldr	r3, [pc, #40]	; (284e8 <socketInit+0x44>)
   284c0:	0019      	movs	r1, r3
   284c2:	2002      	movs	r0, #2
   284c4:	4b09      	ldr	r3, [pc, #36]	; (284ec <socketInit+0x48>)
   284c6:	4798      	blx	r3
		gbSocketInit	= 1;
   284c8:	4b04      	ldr	r3, [pc, #16]	; (284dc <socketInit+0x38>)
   284ca:	2201      	movs	r2, #1
   284cc:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   284ce:	4b08      	ldr	r3, [pc, #32]	; (284f0 <socketInit+0x4c>)
   284d0:	2200      	movs	r2, #0
   284d2:	801a      	strh	r2, [r3, #0]
	}
}
   284d4:	46c0      	nop			; (mov r8, r8)
   284d6:	46bd      	mov	sp, r7
   284d8:	bd80      	pop	{r7, pc}
   284da:	46c0      	nop			; (mov r8, r8)
   284dc:	200041d4 	.word	0x200041d4
   284e0:	20005b18 	.word	0x20005b18
   284e4:	00023bd5 	.word	0x00023bd5
   284e8:	00027f55 	.word	0x00027f55
   284ec:	000248d1 	.word	0x000248d1
   284f0:	200041d2 	.word	0x200041d2

000284f4 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   284f4:	b580      	push	{r7, lr}
   284f6:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   284f8:	4b0a      	ldr	r3, [pc, #40]	; (28524 <socketDeinit+0x30>)
   284fa:	22b0      	movs	r2, #176	; 0xb0
   284fc:	2100      	movs	r1, #0
   284fe:	0018      	movs	r0, r3
   28500:	4b09      	ldr	r3, [pc, #36]	; (28528 <socketDeinit+0x34>)
   28502:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   28504:	2100      	movs	r1, #0
   28506:	2002      	movs	r0, #2
   28508:	4b08      	ldr	r3, [pc, #32]	; (2852c <socketDeinit+0x38>)
   2850a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   2850c:	4b08      	ldr	r3, [pc, #32]	; (28530 <socketDeinit+0x3c>)
   2850e:	2200      	movs	r2, #0
   28510:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   28512:	4b08      	ldr	r3, [pc, #32]	; (28534 <socketDeinit+0x40>)
   28514:	2200      	movs	r2, #0
   28516:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   28518:	4b07      	ldr	r3, [pc, #28]	; (28538 <socketDeinit+0x44>)
   2851a:	2200      	movs	r2, #0
   2851c:	701a      	strb	r2, [r3, #0]
}
   2851e:	46c0      	nop			; (mov r8, r8)
   28520:	46bd      	mov	sp, r7
   28522:	bd80      	pop	{r7, pc}
   28524:	20005b18 	.word	0x20005b18
   28528:	00023bd5 	.word	0x00023bd5
   2852c:	000248d1 	.word	0x000248d1
   28530:	20005bc8 	.word	0x20005bc8
   28534:	20005bd0 	.word	0x20005bd0
   28538:	200041d4 	.word	0x200041d4

0002853c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   2853c:	b580      	push	{r7, lr}
   2853e:	b082      	sub	sp, #8
   28540:	af00      	add	r7, sp, #0
   28542:	6078      	str	r0, [r7, #4]
   28544:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   28546:	4b05      	ldr	r3, [pc, #20]	; (2855c <registerSocketCallback+0x20>)
   28548:	687a      	ldr	r2, [r7, #4]
   2854a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   2854c:	4b04      	ldr	r3, [pc, #16]	; (28560 <registerSocketCallback+0x24>)
   2854e:	683a      	ldr	r2, [r7, #0]
   28550:	601a      	str	r2, [r3, #0]
}
   28552:	46c0      	nop			; (mov r8, r8)
   28554:	46bd      	mov	sp, r7
   28556:	b002      	add	sp, #8
   28558:	bd80      	pop	{r7, pc}
   2855a:	46c0      	nop			; (mov r8, r8)
   2855c:	20005bc8 	.word	0x20005bc8
   28560:	20005bd0 	.word	0x20005bd0

00028564 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   28564:	b590      	push	{r4, r7, lr}
   28566:	b08d      	sub	sp, #52	; 0x34
   28568:	af04      	add	r7, sp, #16
   2856a:	0004      	movs	r4, r0
   2856c:	0008      	movs	r0, r1
   2856e:	0011      	movs	r1, r2
   28570:	1dbb      	adds	r3, r7, #6
   28572:	1c22      	adds	r2, r4, #0
   28574:	801a      	strh	r2, [r3, #0]
   28576:	1d7b      	adds	r3, r7, #5
   28578:	1c02      	adds	r2, r0, #0
   2857a:	701a      	strb	r2, [r3, #0]
   2857c:	1d3b      	adds	r3, r7, #4
   2857e:	1c0a      	adds	r2, r1, #0
   28580:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   28582:	231f      	movs	r3, #31
   28584:	18fb      	adds	r3, r7, r3
   28586:	22ff      	movs	r2, #255	; 0xff
   28588:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   2858a:	1dbb      	adds	r3, r7, #6
   2858c:	881b      	ldrh	r3, [r3, #0]
   2858e:	2b02      	cmp	r3, #2
   28590:	d000      	beq.n	28594 <socket+0x30>
   28592:	e0ce      	b.n	28732 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   28594:	1d7b      	adds	r3, r7, #5
   28596:	781b      	ldrb	r3, [r3, #0]
   28598:	2b01      	cmp	r3, #1
   2859a:	d135      	bne.n	28608 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2859c:	231e      	movs	r3, #30
   2859e:	18fb      	adds	r3, r7, r3
   285a0:	2200      	movs	r2, #0
   285a2:	701a      	strb	r2, [r3, #0]
   285a4:	e02a      	b.n	285fc <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   285a6:	2317      	movs	r3, #23
   285a8:	18fb      	adds	r3, r7, r3
   285aa:	4a66      	ldr	r2, [pc, #408]	; (28744 <socket+0x1e0>)
   285ac:	7812      	ldrb	r2, [r2, #0]
   285ae:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   285b0:	4b64      	ldr	r3, [pc, #400]	; (28744 <socket+0x1e0>)
   285b2:	781b      	ldrb	r3, [r3, #0]
   285b4:	b2db      	uxtb	r3, r3
   285b6:	011a      	lsls	r2, r3, #4
   285b8:	4b63      	ldr	r3, [pc, #396]	; (28748 <socket+0x1e4>)
   285ba:	18d3      	adds	r3, r2, r3
   285bc:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   285be:	4b61      	ldr	r3, [pc, #388]	; (28744 <socket+0x1e0>)
   285c0:	781b      	ldrb	r3, [r3, #0]
   285c2:	b2db      	uxtb	r3, r3
   285c4:	1c5a      	adds	r2, r3, #1
   285c6:	4b61      	ldr	r3, [pc, #388]	; (2874c <socket+0x1e8>)
   285c8:	2107      	movs	r1, #7
   285ca:	0010      	movs	r0, r2
   285cc:	4798      	blx	r3
   285ce:	000b      	movs	r3, r1
   285d0:	b2da      	uxtb	r2, r3
   285d2:	4b5c      	ldr	r3, [pc, #368]	; (28744 <socket+0x1e0>)
   285d4:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   285d6:	69bb      	ldr	r3, [r7, #24]
   285d8:	7a9b      	ldrb	r3, [r3, #10]
   285da:	b2db      	uxtb	r3, r3
   285dc:	2b00      	cmp	r3, #0
   285de:	d106      	bne.n	285ee <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   285e0:	231f      	movs	r3, #31
   285e2:	18fb      	adds	r3, r7, r3
   285e4:	2217      	movs	r2, #23
   285e6:	18ba      	adds	r2, r7, r2
   285e8:	7812      	ldrb	r2, [r2, #0]
   285ea:	701a      	strb	r2, [r3, #0]
					break;
   285ec:	e04c      	b.n	28688 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   285ee:	231e      	movs	r3, #30
   285f0:	18fb      	adds	r3, r7, r3
   285f2:	781a      	ldrb	r2, [r3, #0]
   285f4:	231e      	movs	r3, #30
   285f6:	18fb      	adds	r3, r7, r3
   285f8:	3201      	adds	r2, #1
   285fa:	701a      	strb	r2, [r3, #0]
   285fc:	231e      	movs	r3, #30
   285fe:	18fb      	adds	r3, r7, r3
   28600:	781b      	ldrb	r3, [r3, #0]
   28602:	2b06      	cmp	r3, #6
   28604:	d9cf      	bls.n	285a6 <socket+0x42>
   28606:	e03f      	b.n	28688 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   28608:	1d7b      	adds	r3, r7, #5
   2860a:	781b      	ldrb	r3, [r3, #0]
   2860c:	2b02      	cmp	r3, #2
   2860e:	d13b      	bne.n	28688 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   28610:	4b4f      	ldr	r3, [pc, #316]	; (28750 <socket+0x1ec>)
   28612:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   28614:	231e      	movs	r3, #30
   28616:	18fb      	adds	r3, r7, r3
   28618:	2200      	movs	r2, #0
   2861a:	701a      	strb	r2, [r3, #0]
   2861c:	e02f      	b.n	2867e <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2861e:	2317      	movs	r3, #23
   28620:	18fb      	adds	r3, r7, r3
   28622:	4a4c      	ldr	r2, [pc, #304]	; (28754 <socket+0x1f0>)
   28624:	7812      	ldrb	r2, [r2, #0]
   28626:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   28628:	4b4a      	ldr	r3, [pc, #296]	; (28754 <socket+0x1f0>)
   2862a:	781b      	ldrb	r3, [r3, #0]
   2862c:	b2db      	uxtb	r3, r3
   2862e:	011b      	lsls	r3, r3, #4
   28630:	693a      	ldr	r2, [r7, #16]
   28632:	18d3      	adds	r3, r2, r3
   28634:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   28636:	4b47      	ldr	r3, [pc, #284]	; (28754 <socket+0x1f0>)
   28638:	781b      	ldrb	r3, [r3, #0]
   2863a:	b2db      	uxtb	r3, r3
   2863c:	3301      	adds	r3, #1
   2863e:	4a46      	ldr	r2, [pc, #280]	; (28758 <socket+0x1f4>)
   28640:	4013      	ands	r3, r2
   28642:	d504      	bpl.n	2864e <socket+0xea>
   28644:	3b01      	subs	r3, #1
   28646:	2204      	movs	r2, #4
   28648:	4252      	negs	r2, r2
   2864a:	4313      	orrs	r3, r2
   2864c:	3301      	adds	r3, #1
   2864e:	b2da      	uxtb	r2, r3
   28650:	4b40      	ldr	r3, [pc, #256]	; (28754 <socket+0x1f0>)
   28652:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   28654:	69bb      	ldr	r3, [r7, #24]
   28656:	7a9b      	ldrb	r3, [r3, #10]
   28658:	b2db      	uxtb	r3, r3
   2865a:	2b00      	cmp	r3, #0
   2865c:	d108      	bne.n	28670 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2865e:	2317      	movs	r3, #23
   28660:	18fb      	adds	r3, r7, r3
   28662:	781b      	ldrb	r3, [r3, #0]
   28664:	3307      	adds	r3, #7
   28666:	b2da      	uxtb	r2, r3
   28668:	231f      	movs	r3, #31
   2866a:	18fb      	adds	r3, r7, r3
   2866c:	701a      	strb	r2, [r3, #0]
					break;
   2866e:	e00b      	b.n	28688 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   28670:	231e      	movs	r3, #30
   28672:	18fb      	adds	r3, r7, r3
   28674:	781a      	ldrb	r2, [r3, #0]
   28676:	231e      	movs	r3, #30
   28678:	18fb      	adds	r3, r7, r3
   2867a:	3201      	adds	r2, #1
   2867c:	701a      	strb	r2, [r3, #0]
   2867e:	231e      	movs	r3, #30
   28680:	18fb      	adds	r3, r7, r3
   28682:	781b      	ldrb	r3, [r3, #0]
   28684:	2b03      	cmp	r3, #3
   28686:	d9ca      	bls.n	2861e <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   28688:	231f      	movs	r3, #31
   2868a:	18fb      	adds	r3, r7, r3
   2868c:	781b      	ldrb	r3, [r3, #0]
   2868e:	2b7f      	cmp	r3, #127	; 0x7f
   28690:	d84f      	bhi.n	28732 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   28692:	69bb      	ldr	r3, [r7, #24]
   28694:	2210      	movs	r2, #16
   28696:	2100      	movs	r1, #0
   28698:	0018      	movs	r0, r3
   2869a:	4b30      	ldr	r3, [pc, #192]	; (2875c <socket+0x1f8>)
   2869c:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2869e:	69bb      	ldr	r3, [r7, #24]
   286a0:	2201      	movs	r2, #1
   286a2:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   286a4:	4b2e      	ldr	r3, [pc, #184]	; (28760 <socket+0x1fc>)
   286a6:	881b      	ldrh	r3, [r3, #0]
   286a8:	b29b      	uxth	r3, r3
   286aa:	3301      	adds	r3, #1
   286ac:	b29a      	uxth	r2, r3
   286ae:	4b2c      	ldr	r3, [pc, #176]	; (28760 <socket+0x1fc>)
   286b0:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   286b2:	4b2b      	ldr	r3, [pc, #172]	; (28760 <socket+0x1fc>)
   286b4:	881b      	ldrh	r3, [r3, #0]
   286b6:	b29b      	uxth	r3, r3
   286b8:	2b00      	cmp	r3, #0
   286ba:	d106      	bne.n	286ca <socket+0x166>
				++gu16SessionID;
   286bc:	4b28      	ldr	r3, [pc, #160]	; (28760 <socket+0x1fc>)
   286be:	881b      	ldrh	r3, [r3, #0]
   286c0:	b29b      	uxth	r3, r3
   286c2:	3301      	adds	r3, #1
   286c4:	b29a      	uxth	r2, r3
   286c6:	4b26      	ldr	r3, [pc, #152]	; (28760 <socket+0x1fc>)
   286c8:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   286ca:	4b25      	ldr	r3, [pc, #148]	; (28760 <socket+0x1fc>)
   286cc:	881b      	ldrh	r3, [r3, #0]
   286ce:	b29a      	uxth	r2, r3
   286d0:	69bb      	ldr	r3, [r7, #24]
   286d2:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   286d4:	4b23      	ldr	r3, [pc, #140]	; (28764 <socket+0x200>)
   286d6:	0018      	movs	r0, r3
   286d8:	4b23      	ldr	r3, [pc, #140]	; (28768 <socket+0x204>)
   286da:	4798      	blx	r3
   286dc:	231f      	movs	r3, #31
   286de:	18fb      	adds	r3, r7, r3
   286e0:	2100      	movs	r1, #0
   286e2:	5659      	ldrsb	r1, [r3, r1]
   286e4:	4b1e      	ldr	r3, [pc, #120]	; (28760 <socket+0x1fc>)
   286e6:	881b      	ldrh	r3, [r3, #0]
   286e8:	b29b      	uxth	r3, r3
   286ea:	001a      	movs	r2, r3
   286ec:	4b1f      	ldr	r3, [pc, #124]	; (2876c <socket+0x208>)
   286ee:	0018      	movs	r0, r3
   286f0:	4b1d      	ldr	r3, [pc, #116]	; (28768 <socket+0x204>)
   286f2:	4798      	blx	r3
   286f4:	4b1e      	ldr	r3, [pc, #120]	; (28770 <socket+0x20c>)
   286f6:	0018      	movs	r0, r3
   286f8:	4b1b      	ldr	r3, [pc, #108]	; (28768 <socket+0x204>)
   286fa:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   286fc:	1d3b      	adds	r3, r7, #4
   286fe:	781b      	ldrb	r3, [r3, #0]
   28700:	2201      	movs	r2, #1
   28702:	4013      	ands	r3, r2
   28704:	d015      	beq.n	28732 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   28706:	230c      	movs	r3, #12
   28708:	18fb      	adds	r3, r7, r3
   2870a:	221f      	movs	r2, #31
   2870c:	18ba      	adds	r2, r7, r2
   2870e:	7812      	ldrb	r2, [r2, #0]
   28710:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   28712:	69bb      	ldr	r3, [r7, #24]
   28714:	2221      	movs	r2, #33	; 0x21
   28716:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   28718:	230c      	movs	r3, #12
   2871a:	18fa      	adds	r2, r7, r3
   2871c:	2300      	movs	r3, #0
   2871e:	9302      	str	r3, [sp, #8]
   28720:	2300      	movs	r3, #0
   28722:	9301      	str	r3, [sp, #4]
   28724:	2300      	movs	r3, #0
   28726:	9300      	str	r3, [sp, #0]
   28728:	2304      	movs	r3, #4
   2872a:	2150      	movs	r1, #80	; 0x50
   2872c:	2002      	movs	r0, #2
   2872e:	4c11      	ldr	r4, [pc, #68]	; (28774 <socket+0x210>)
   28730:	47a0      	blx	r4
			}
		}
	}
	return sock;
   28732:	231f      	movs	r3, #31
   28734:	18fb      	adds	r3, r7, r3
   28736:	781b      	ldrb	r3, [r3, #0]
   28738:	b25b      	sxtb	r3, r3
}
   2873a:	0018      	movs	r0, r3
   2873c:	46bd      	mov	sp, r7
   2873e:	b009      	add	sp, #36	; 0x24
   28740:	bd90      	pop	{r4, r7, pc}
   28742:	46c0      	nop			; (mov r8, r8)
   28744:	200041d5 	.word	0x200041d5
   28748:	20005b18 	.word	0x20005b18
   2874c:	00035cd1 	.word	0x00035cd1
   28750:	20005b88 	.word	0x20005b88
   28754:	200041d6 	.word	0x200041d6
   28758:	80000003 	.word	0x80000003
   2875c:	00023bd5 	.word	0x00023bd5
   28760:	200041d2 	.word	0x200041d2
   28764:	0003d9c8 	.word	0x0003d9c8
   28768:	00020e3d 	.word	0x00020e3d
   2876c:	0003d9ec 	.word	0x0003d9ec
   28770:	0003d9e8 	.word	0x0003d9e8
   28774:	00023e35 	.word	0x00023e35

00028778 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   28778:	b5b0      	push	{r4, r5, r7, lr}
   2877a:	b08a      	sub	sp, #40	; 0x28
   2877c:	af04      	add	r7, sp, #16
   2877e:	6039      	str	r1, [r7, #0]
   28780:	0011      	movs	r1, r2
   28782:	1dfb      	adds	r3, r7, #7
   28784:	1c02      	adds	r2, r0, #0
   28786:	701a      	strb	r2, [r3, #0]
   28788:	1dbb      	adds	r3, r7, #6
   2878a:	1c0a      	adds	r2, r1, #0
   2878c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2878e:	2317      	movs	r3, #23
   28790:	18fb      	adds	r3, r7, r3
   28792:	22fa      	movs	r2, #250	; 0xfa
   28794:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   28796:	1dfb      	adds	r3, r7, #7
   28798:	781b      	ldrb	r3, [r3, #0]
   2879a:	2b7f      	cmp	r3, #127	; 0x7f
   2879c:	d867      	bhi.n	2886e <connect+0xf6>
   2879e:	683b      	ldr	r3, [r7, #0]
   287a0:	2b00      	cmp	r3, #0
   287a2:	d064      	beq.n	2886e <connect+0xf6>
   287a4:	1dfb      	adds	r3, r7, #7
   287a6:	781b      	ldrb	r3, [r3, #0]
   287a8:	b25b      	sxtb	r3, r3
   287aa:	4a35      	ldr	r2, [pc, #212]	; (28880 <connect+0x108>)
   287ac:	011b      	lsls	r3, r3, #4
   287ae:	18d3      	adds	r3, r2, r3
   287b0:	330a      	adds	r3, #10
   287b2:	781b      	ldrb	r3, [r3, #0]
   287b4:	b2db      	uxtb	r3, r3
   287b6:	2b01      	cmp	r3, #1
   287b8:	d159      	bne.n	2886e <connect+0xf6>
   287ba:	1dbb      	adds	r3, r7, #6
   287bc:	781b      	ldrb	r3, [r3, #0]
   287be:	2b00      	cmp	r3, #0
   287c0:	d055      	beq.n	2886e <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   287c2:	2316      	movs	r3, #22
   287c4:	18fb      	adds	r3, r7, r3
   287c6:	2244      	movs	r2, #68	; 0x44
   287c8:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   287ca:	1dfb      	adds	r3, r7, #7
   287cc:	781b      	ldrb	r3, [r3, #0]
   287ce:	b25b      	sxtb	r3, r3
   287d0:	4a2b      	ldr	r2, [pc, #172]	; (28880 <connect+0x108>)
   287d2:	011b      	lsls	r3, r3, #4
   287d4:	18d3      	adds	r3, r2, r3
   287d6:	330b      	adds	r3, #11
   287d8:	781b      	ldrb	r3, [r3, #0]
   287da:	b2db      	uxtb	r3, r3
   287dc:	001a      	movs	r2, r3
   287de:	2301      	movs	r3, #1
   287e0:	4013      	ands	r3, r2
   287e2:	d00f      	beq.n	28804 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   287e4:	2316      	movs	r3, #22
   287e6:	18fb      	adds	r3, r7, r3
   287e8:	224b      	movs	r2, #75	; 0x4b
   287ea:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   287ec:	1dfb      	adds	r3, r7, #7
   287ee:	781b      	ldrb	r3, [r3, #0]
   287f0:	b25b      	sxtb	r3, r3
   287f2:	4a23      	ldr	r2, [pc, #140]	; (28880 <connect+0x108>)
   287f4:	011b      	lsls	r3, r3, #4
   287f6:	18d3      	adds	r3, r2, r3
   287f8:	330b      	adds	r3, #11
   287fa:	781b      	ldrb	r3, [r3, #0]
   287fc:	b2da      	uxtb	r2, r3
   287fe:	2308      	movs	r3, #8
   28800:	18fb      	adds	r3, r7, r3
   28802:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   28804:	2308      	movs	r3, #8
   28806:	18fb      	adds	r3, r7, r3
   28808:	1dfa      	adds	r2, r7, #7
   2880a:	7812      	ldrb	r2, [r2, #0]
   2880c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2880e:	6839      	ldr	r1, [r7, #0]
   28810:	2308      	movs	r3, #8
   28812:	18fb      	adds	r3, r7, r3
   28814:	2208      	movs	r2, #8
   28816:	0018      	movs	r0, r3
   28818:	4b1a      	ldr	r3, [pc, #104]	; (28884 <connect+0x10c>)
   2881a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   2881c:	1dfb      	adds	r3, r7, #7
   2881e:	781b      	ldrb	r3, [r3, #0]
   28820:	b25b      	sxtb	r3, r3
   28822:	4a17      	ldr	r2, [pc, #92]	; (28880 <connect+0x108>)
   28824:	011b      	lsls	r3, r3, #4
   28826:	18d3      	adds	r3, r2, r3
   28828:	3306      	adds	r3, #6
   2882a:	881b      	ldrh	r3, [r3, #0]
   2882c:	b29a      	uxth	r2, r3
   2882e:	2308      	movs	r3, #8
   28830:	18fb      	adds	r3, r7, r3
   28832:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   28834:	2317      	movs	r3, #23
   28836:	18fc      	adds	r4, r7, r3
   28838:	2308      	movs	r3, #8
   2883a:	18fa      	adds	r2, r7, r3
   2883c:	2316      	movs	r3, #22
   2883e:	18fb      	adds	r3, r7, r3
   28840:	7819      	ldrb	r1, [r3, #0]
   28842:	2300      	movs	r3, #0
   28844:	9302      	str	r3, [sp, #8]
   28846:	2300      	movs	r3, #0
   28848:	9301      	str	r3, [sp, #4]
   2884a:	2300      	movs	r3, #0
   2884c:	9300      	str	r3, [sp, #0]
   2884e:	230c      	movs	r3, #12
   28850:	2002      	movs	r0, #2
   28852:	4d0d      	ldr	r5, [pc, #52]	; (28888 <connect+0x110>)
   28854:	47a8      	blx	r5
   28856:	0003      	movs	r3, r0
   28858:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   2885a:	2317      	movs	r3, #23
   2885c:	18fb      	adds	r3, r7, r3
   2885e:	781b      	ldrb	r3, [r3, #0]
   28860:	b25b      	sxtb	r3, r3
   28862:	2b00      	cmp	r3, #0
   28864:	d003      	beq.n	2886e <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   28866:	2317      	movs	r3, #23
   28868:	18fb      	adds	r3, r7, r3
   2886a:	22f7      	movs	r2, #247	; 0xf7
   2886c:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2886e:	2317      	movs	r3, #23
   28870:	18fb      	adds	r3, r7, r3
   28872:	781b      	ldrb	r3, [r3, #0]
   28874:	b25b      	sxtb	r3, r3
}
   28876:	0018      	movs	r0, r3
   28878:	46bd      	mov	sp, r7
   2887a:	b006      	add	sp, #24
   2887c:	bdb0      	pop	{r4, r5, r7, pc}
   2887e:	46c0      	nop			; (mov r8, r8)
   28880:	20005b18 	.word	0x20005b18
   28884:	00023b99 	.word	0x00023b99
   28888:	00023e35 	.word	0x00023e35

0002888c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   2888c:	b590      	push	{r4, r7, lr}
   2888e:	b08f      	sub	sp, #60	; 0x3c
   28890:	af04      	add	r7, sp, #16
   28892:	0004      	movs	r4, r0
   28894:	60b9      	str	r1, [r7, #8]
   28896:	0010      	movs	r0, r2
   28898:	0019      	movs	r1, r3
   2889a:	230f      	movs	r3, #15
   2889c:	18fb      	adds	r3, r7, r3
   2889e:	1c22      	adds	r2, r4, #0
   288a0:	701a      	strb	r2, [r3, #0]
   288a2:	230c      	movs	r3, #12
   288a4:	18fb      	adds	r3, r7, r3
   288a6:	1c02      	adds	r2, r0, #0
   288a8:	801a      	strh	r2, [r3, #0]
   288aa:	1dbb      	adds	r3, r7, #6
   288ac:	1c0a      	adds	r2, r1, #0
   288ae:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   288b0:	2326      	movs	r3, #38	; 0x26
   288b2:	18fb      	adds	r3, r7, r3
   288b4:	2206      	movs	r2, #6
   288b6:	4252      	negs	r2, r2
   288b8:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   288ba:	230f      	movs	r3, #15
   288bc:	18fb      	adds	r3, r7, r3
   288be:	781b      	ldrb	r3, [r3, #0]
   288c0:	2b7f      	cmp	r3, #127	; 0x7f
   288c2:	d900      	bls.n	288c6 <send+0x3a>
   288c4:	e087      	b.n	289d6 <send+0x14a>
   288c6:	68bb      	ldr	r3, [r7, #8]
   288c8:	2b00      	cmp	r3, #0
   288ca:	d100      	bne.n	288ce <send+0x42>
   288cc:	e083      	b.n	289d6 <send+0x14a>
   288ce:	230c      	movs	r3, #12
   288d0:	18fb      	adds	r3, r7, r3
   288d2:	881a      	ldrh	r2, [r3, #0]
   288d4:	23af      	movs	r3, #175	; 0xaf
   288d6:	00db      	lsls	r3, r3, #3
   288d8:	429a      	cmp	r2, r3
   288da:	d900      	bls.n	288de <send+0x52>
   288dc:	e07b      	b.n	289d6 <send+0x14a>
   288de:	230f      	movs	r3, #15
   288e0:	18fb      	adds	r3, r7, r3
   288e2:	781b      	ldrb	r3, [r3, #0]
   288e4:	b25b      	sxtb	r3, r3
   288e6:	4a40      	ldr	r2, [pc, #256]	; (289e8 <send+0x15c>)
   288e8:	011b      	lsls	r3, r3, #4
   288ea:	18d3      	adds	r3, r2, r3
   288ec:	330a      	adds	r3, #10
   288ee:	781b      	ldrb	r3, [r3, #0]
   288f0:	b2db      	uxtb	r3, r3
   288f2:	2b01      	cmp	r3, #1
   288f4:	d16f      	bne.n	289d6 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   288f6:	2323      	movs	r3, #35	; 0x23
   288f8:	18fb      	adds	r3, r7, r3
   288fa:	2245      	movs	r2, #69	; 0x45
   288fc:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   288fe:	2324      	movs	r3, #36	; 0x24
   28900:	18fb      	adds	r3, r7, r3
   28902:	2250      	movs	r2, #80	; 0x50
   28904:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   28906:	2310      	movs	r3, #16
   28908:	18fb      	adds	r3, r7, r3
   2890a:	220f      	movs	r2, #15
   2890c:	18ba      	adds	r2, r7, r2
   2890e:	7812      	ldrb	r2, [r2, #0]
   28910:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   28912:	2310      	movs	r3, #16
   28914:	18fb      	adds	r3, r7, r3
   28916:	220c      	movs	r2, #12
   28918:	18ba      	adds	r2, r7, r2
   2891a:	8812      	ldrh	r2, [r2, #0]
   2891c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2891e:	230f      	movs	r3, #15
   28920:	18fb      	adds	r3, r7, r3
   28922:	781b      	ldrb	r3, [r3, #0]
   28924:	b25b      	sxtb	r3, r3
   28926:	4a30      	ldr	r2, [pc, #192]	; (289e8 <send+0x15c>)
   28928:	011b      	lsls	r3, r3, #4
   2892a:	18d3      	adds	r3, r2, r3
   2892c:	3306      	adds	r3, #6
   2892e:	881b      	ldrh	r3, [r3, #0]
   28930:	b29a      	uxth	r2, r3
   28932:	2310      	movs	r3, #16
   28934:	18fb      	adds	r3, r7, r3
   28936:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   28938:	230f      	movs	r3, #15
   2893a:	18fb      	adds	r3, r7, r3
   2893c:	781b      	ldrb	r3, [r3, #0]
   2893e:	b25b      	sxtb	r3, r3
   28940:	2b06      	cmp	r3, #6
   28942:	dd03      	ble.n	2894c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   28944:	2324      	movs	r3, #36	; 0x24
   28946:	18fb      	adds	r3, r7, r3
   28948:	2244      	movs	r2, #68	; 0x44
   2894a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2894c:	230f      	movs	r3, #15
   2894e:	18fb      	adds	r3, r7, r3
   28950:	781b      	ldrb	r3, [r3, #0]
   28952:	b25b      	sxtb	r3, r3
   28954:	4a24      	ldr	r2, [pc, #144]	; (289e8 <send+0x15c>)
   28956:	011b      	lsls	r3, r3, #4
   28958:	18d3      	adds	r3, r2, r3
   2895a:	330b      	adds	r3, #11
   2895c:	781b      	ldrb	r3, [r3, #0]
   2895e:	b2db      	uxtb	r3, r3
   28960:	001a      	movs	r2, r3
   28962:	2301      	movs	r3, #1
   28964:	4013      	ands	r3, r2
   28966:	d00f      	beq.n	28988 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   28968:	2323      	movs	r3, #35	; 0x23
   2896a:	18fb      	adds	r3, r7, r3
   2896c:	224c      	movs	r2, #76	; 0x4c
   2896e:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   28970:	230f      	movs	r3, #15
   28972:	18fb      	adds	r3, r7, r3
   28974:	2200      	movs	r2, #0
   28976:	569a      	ldrsb	r2, [r3, r2]
   28978:	2324      	movs	r3, #36	; 0x24
   2897a:	18fb      	adds	r3, r7, r3
   2897c:	491a      	ldr	r1, [pc, #104]	; (289e8 <send+0x15c>)
   2897e:	0112      	lsls	r2, r2, #4
   28980:	188a      	adds	r2, r1, r2
   28982:	3208      	adds	r2, #8
   28984:	8812      	ldrh	r2, [r2, #0]
   28986:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   28988:	2323      	movs	r3, #35	; 0x23
   2898a:	18fb      	adds	r3, r7, r3
   2898c:	781b      	ldrb	r3, [r3, #0]
   2898e:	2280      	movs	r2, #128	; 0x80
   28990:	4252      	negs	r2, r2
   28992:	4313      	orrs	r3, r2
   28994:	b2d9      	uxtb	r1, r3
   28996:	2310      	movs	r3, #16
   28998:	18fa      	adds	r2, r7, r3
   2899a:	2324      	movs	r3, #36	; 0x24
   2899c:	18fb      	adds	r3, r7, r3
   2899e:	881b      	ldrh	r3, [r3, #0]
   289a0:	9302      	str	r3, [sp, #8]
   289a2:	230c      	movs	r3, #12
   289a4:	18fb      	adds	r3, r7, r3
   289a6:	881b      	ldrh	r3, [r3, #0]
   289a8:	9301      	str	r3, [sp, #4]
   289aa:	68bb      	ldr	r3, [r7, #8]
   289ac:	9300      	str	r3, [sp, #0]
   289ae:	2310      	movs	r3, #16
   289b0:	2002      	movs	r0, #2
   289b2:	4c0e      	ldr	r4, [pc, #56]	; (289ec <send+0x160>)
   289b4:	47a0      	blx	r4
   289b6:	0003      	movs	r3, r0
   289b8:	001a      	movs	r2, r3
   289ba:	2326      	movs	r3, #38	; 0x26
   289bc:	18fb      	adds	r3, r7, r3
   289be:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   289c0:	2326      	movs	r3, #38	; 0x26
   289c2:	18fb      	adds	r3, r7, r3
   289c4:	2200      	movs	r2, #0
   289c6:	5e9b      	ldrsh	r3, [r3, r2]
   289c8:	2b00      	cmp	r3, #0
   289ca:	d004      	beq.n	289d6 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   289cc:	2326      	movs	r3, #38	; 0x26
   289ce:	18fb      	adds	r3, r7, r3
   289d0:	220e      	movs	r2, #14
   289d2:	4252      	negs	r2, r2
   289d4:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   289d6:	2326      	movs	r3, #38	; 0x26
   289d8:	18fb      	adds	r3, r7, r3
   289da:	2200      	movs	r2, #0
   289dc:	5e9b      	ldrsh	r3, [r3, r2]
}
   289de:	0018      	movs	r0, r3
   289e0:	46bd      	mov	sp, r7
   289e2:	b00b      	add	sp, #44	; 0x2c
   289e4:	bd90      	pop	{r4, r7, pc}
   289e6:	46c0      	nop			; (mov r8, r8)
   289e8:	20005b18 	.word	0x20005b18
   289ec:	00023e35 	.word	0x00023e35

000289f0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   289f0:	b590      	push	{r4, r7, lr}
   289f2:	b08d      	sub	sp, #52	; 0x34
   289f4:	af04      	add	r7, sp, #16
   289f6:	60b9      	str	r1, [r7, #8]
   289f8:	0011      	movs	r1, r2
   289fa:	607b      	str	r3, [r7, #4]
   289fc:	230f      	movs	r3, #15
   289fe:	18fb      	adds	r3, r7, r3
   28a00:	1c02      	adds	r2, r0, #0
   28a02:	701a      	strb	r2, [r3, #0]
   28a04:	230c      	movs	r3, #12
   28a06:	18fb      	adds	r3, r7, r3
   28a08:	1c0a      	adds	r2, r1, #0
   28a0a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   28a0c:	231e      	movs	r3, #30
   28a0e:	18fb      	adds	r3, r7, r3
   28a10:	2206      	movs	r2, #6
   28a12:	4252      	negs	r2, r2
   28a14:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   28a16:	230f      	movs	r3, #15
   28a18:	18fb      	adds	r3, r7, r3
   28a1a:	781b      	ldrb	r3, [r3, #0]
   28a1c:	2b7f      	cmp	r3, #127	; 0x7f
   28a1e:	d900      	bls.n	28a22 <recv+0x32>
   28a20:	e099      	b.n	28b56 <recv+0x166>
   28a22:	68bb      	ldr	r3, [r7, #8]
   28a24:	2b00      	cmp	r3, #0
   28a26:	d100      	bne.n	28a2a <recv+0x3a>
   28a28:	e095      	b.n	28b56 <recv+0x166>
   28a2a:	230c      	movs	r3, #12
   28a2c:	18fb      	adds	r3, r7, r3
   28a2e:	881b      	ldrh	r3, [r3, #0]
   28a30:	2b00      	cmp	r3, #0
   28a32:	d100      	bne.n	28a36 <recv+0x46>
   28a34:	e08f      	b.n	28b56 <recv+0x166>
   28a36:	230f      	movs	r3, #15
   28a38:	18fb      	adds	r3, r7, r3
   28a3a:	781b      	ldrb	r3, [r3, #0]
   28a3c:	b25b      	sxtb	r3, r3
   28a3e:	4a4a      	ldr	r2, [pc, #296]	; (28b68 <recv+0x178>)
   28a40:	011b      	lsls	r3, r3, #4
   28a42:	18d3      	adds	r3, r2, r3
   28a44:	330a      	adds	r3, #10
   28a46:	781b      	ldrb	r3, [r3, #0]
   28a48:	b2db      	uxtb	r3, r3
   28a4a:	2b01      	cmp	r3, #1
   28a4c:	d000      	beq.n	28a50 <recv+0x60>
   28a4e:	e082      	b.n	28b56 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   28a50:	231e      	movs	r3, #30
   28a52:	18fb      	adds	r3, r7, r3
   28a54:	2200      	movs	r2, #0
   28a56:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   28a58:	230f      	movs	r3, #15
   28a5a:	18fb      	adds	r3, r7, r3
   28a5c:	2200      	movs	r2, #0
   28a5e:	569a      	ldrsb	r2, [r3, r2]
   28a60:	4b41      	ldr	r3, [pc, #260]	; (28b68 <recv+0x178>)
   28a62:	0112      	lsls	r2, r2, #4
   28a64:	68b9      	ldr	r1, [r7, #8]
   28a66:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   28a68:	230f      	movs	r3, #15
   28a6a:	18fb      	adds	r3, r7, r3
   28a6c:	781b      	ldrb	r3, [r3, #0]
   28a6e:	b25b      	sxtb	r3, r3
   28a70:	4a3d      	ldr	r2, [pc, #244]	; (28b68 <recv+0x178>)
   28a72:	011b      	lsls	r3, r3, #4
   28a74:	18d3      	adds	r3, r2, r3
   28a76:	3304      	adds	r3, #4
   28a78:	220c      	movs	r2, #12
   28a7a:	18ba      	adds	r2, r7, r2
   28a7c:	8812      	ldrh	r2, [r2, #0]
   28a7e:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   28a80:	230f      	movs	r3, #15
   28a82:	18fb      	adds	r3, r7, r3
   28a84:	781b      	ldrb	r3, [r3, #0]
   28a86:	b25b      	sxtb	r3, r3
   28a88:	4a37      	ldr	r2, [pc, #220]	; (28b68 <recv+0x178>)
   28a8a:	011b      	lsls	r3, r3, #4
   28a8c:	18d3      	adds	r3, r2, r3
   28a8e:	330c      	adds	r3, #12
   28a90:	781b      	ldrb	r3, [r3, #0]
   28a92:	b2db      	uxtb	r3, r3
   28a94:	2b00      	cmp	r3, #0
   28a96:	d15e      	bne.n	28b56 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   28a98:	231d      	movs	r3, #29
   28a9a:	18fb      	adds	r3, r7, r3
   28a9c:	2246      	movs	r2, #70	; 0x46
   28a9e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   28aa0:	230f      	movs	r3, #15
   28aa2:	18fb      	adds	r3, r7, r3
   28aa4:	781b      	ldrb	r3, [r3, #0]
   28aa6:	b25b      	sxtb	r3, r3
   28aa8:	4a2f      	ldr	r2, [pc, #188]	; (28b68 <recv+0x178>)
   28aaa:	011b      	lsls	r3, r3, #4
   28aac:	18d3      	adds	r3, r2, r3
   28aae:	330c      	adds	r3, #12
   28ab0:	2201      	movs	r2, #1
   28ab2:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   28ab4:	230f      	movs	r3, #15
   28ab6:	18fb      	adds	r3, r7, r3
   28ab8:	781b      	ldrb	r3, [r3, #0]
   28aba:	b25b      	sxtb	r3, r3
   28abc:	4a2a      	ldr	r2, [pc, #168]	; (28b68 <recv+0x178>)
   28abe:	011b      	lsls	r3, r3, #4
   28ac0:	18d3      	adds	r3, r2, r3
   28ac2:	330b      	adds	r3, #11
   28ac4:	781b      	ldrb	r3, [r3, #0]
   28ac6:	b2db      	uxtb	r3, r3
   28ac8:	001a      	movs	r2, r3
   28aca:	2301      	movs	r3, #1
   28acc:	4013      	ands	r3, r2
   28ace:	d003      	beq.n	28ad8 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   28ad0:	231d      	movs	r3, #29
   28ad2:	18fb      	adds	r3, r7, r3
   28ad4:	224d      	movs	r2, #77	; 0x4d
   28ad6:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   28ad8:	687b      	ldr	r3, [r7, #4]
   28ada:	2b00      	cmp	r3, #0
   28adc:	d105      	bne.n	28aea <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   28ade:	2314      	movs	r3, #20
   28ae0:	18fb      	adds	r3, r7, r3
   28ae2:	2201      	movs	r2, #1
   28ae4:	4252      	negs	r2, r2
   28ae6:	601a      	str	r2, [r3, #0]
   28ae8:	e003      	b.n	28af2 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   28aea:	2314      	movs	r3, #20
   28aec:	18fb      	adds	r3, r7, r3
   28aee:	687a      	ldr	r2, [r7, #4]
   28af0:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   28af2:	2314      	movs	r3, #20
   28af4:	18fb      	adds	r3, r7, r3
   28af6:	220f      	movs	r2, #15
   28af8:	18ba      	adds	r2, r7, r2
   28afa:	7812      	ldrb	r2, [r2, #0]
   28afc:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   28afe:	230f      	movs	r3, #15
   28b00:	18fb      	adds	r3, r7, r3
   28b02:	781b      	ldrb	r3, [r3, #0]
   28b04:	b25b      	sxtb	r3, r3
   28b06:	4a18      	ldr	r2, [pc, #96]	; (28b68 <recv+0x178>)
   28b08:	011b      	lsls	r3, r3, #4
   28b0a:	18d3      	adds	r3, r2, r3
   28b0c:	3306      	adds	r3, #6
   28b0e:	881b      	ldrh	r3, [r3, #0]
   28b10:	b29a      	uxth	r2, r3
   28b12:	2314      	movs	r3, #20
   28b14:	18fb      	adds	r3, r7, r3
   28b16:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   28b18:	2314      	movs	r3, #20
   28b1a:	18fa      	adds	r2, r7, r3
   28b1c:	231d      	movs	r3, #29
   28b1e:	18fb      	adds	r3, r7, r3
   28b20:	7819      	ldrb	r1, [r3, #0]
   28b22:	2300      	movs	r3, #0
   28b24:	9302      	str	r3, [sp, #8]
   28b26:	2300      	movs	r3, #0
   28b28:	9301      	str	r3, [sp, #4]
   28b2a:	2300      	movs	r3, #0
   28b2c:	9300      	str	r3, [sp, #0]
   28b2e:	2308      	movs	r3, #8
   28b30:	2002      	movs	r0, #2
   28b32:	4c0e      	ldr	r4, [pc, #56]	; (28b6c <recv+0x17c>)
   28b34:	47a0      	blx	r4
   28b36:	0003      	movs	r3, r0
   28b38:	001a      	movs	r2, r3
   28b3a:	231e      	movs	r3, #30
   28b3c:	18fb      	adds	r3, r7, r3
   28b3e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   28b40:	231e      	movs	r3, #30
   28b42:	18fb      	adds	r3, r7, r3
   28b44:	2200      	movs	r2, #0
   28b46:	5e9b      	ldrsh	r3, [r3, r2]
   28b48:	2b00      	cmp	r3, #0
   28b4a:	d004      	beq.n	28b56 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   28b4c:	231e      	movs	r3, #30
   28b4e:	18fb      	adds	r3, r7, r3
   28b50:	220e      	movs	r2, #14
   28b52:	4252      	negs	r2, r2
   28b54:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   28b56:	231e      	movs	r3, #30
   28b58:	18fb      	adds	r3, r7, r3
   28b5a:	2200      	movs	r2, #0
   28b5c:	5e9b      	ldrsh	r3, [r3, r2]
}
   28b5e:	0018      	movs	r0, r3
   28b60:	46bd      	mov	sp, r7
   28b62:	b009      	add	sp, #36	; 0x24
   28b64:	bd90      	pop	{r4, r7, pc}
   28b66:	46c0      	nop			; (mov r8, r8)
   28b68:	20005b18 	.word	0x20005b18
   28b6c:	00023e35 	.word	0x00023e35

00028b70 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   28b70:	b5b0      	push	{r4, r5, r7, lr}
   28b72:	b088      	sub	sp, #32
   28b74:	af04      	add	r7, sp, #16
   28b76:	0002      	movs	r2, r0
   28b78:	1dfb      	adds	r3, r7, #7
   28b7a:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   28b7c:	230f      	movs	r3, #15
   28b7e:	18fb      	adds	r3, r7, r3
   28b80:	22fa      	movs	r2, #250	; 0xfa
   28b82:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   28b84:	4b43      	ldr	r3, [pc, #268]	; (28c94 <close+0x124>)
   28b86:	0018      	movs	r0, r3
   28b88:	4b43      	ldr	r3, [pc, #268]	; (28c98 <close+0x128>)
   28b8a:	4798      	blx	r3
   28b8c:	1dfb      	adds	r3, r7, #7
   28b8e:	2200      	movs	r2, #0
   28b90:	569a      	ldrsb	r2, [r3, r2]
   28b92:	4b42      	ldr	r3, [pc, #264]	; (28c9c <close+0x12c>)
   28b94:	0011      	movs	r1, r2
   28b96:	0018      	movs	r0, r3
   28b98:	4b3f      	ldr	r3, [pc, #252]	; (28c98 <close+0x128>)
   28b9a:	4798      	blx	r3
   28b9c:	4b40      	ldr	r3, [pc, #256]	; (28ca0 <close+0x130>)
   28b9e:	0018      	movs	r0, r3
   28ba0:	4b3d      	ldr	r3, [pc, #244]	; (28c98 <close+0x128>)
   28ba2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   28ba4:	1dfb      	adds	r3, r7, #7
   28ba6:	781b      	ldrb	r3, [r3, #0]
   28ba8:	2b7f      	cmp	r3, #127	; 0x7f
   28baa:	d86a      	bhi.n	28c82 <close+0x112>
   28bac:	1dfb      	adds	r3, r7, #7
   28bae:	781b      	ldrb	r3, [r3, #0]
   28bb0:	b25b      	sxtb	r3, r3
   28bb2:	4a3c      	ldr	r2, [pc, #240]	; (28ca4 <close+0x134>)
   28bb4:	011b      	lsls	r3, r3, #4
   28bb6:	18d3      	adds	r3, r2, r3
   28bb8:	330a      	adds	r3, #10
   28bba:	781b      	ldrb	r3, [r3, #0]
   28bbc:	b2db      	uxtb	r3, r3
   28bbe:	2b01      	cmp	r3, #1
   28bc0:	d15f      	bne.n	28c82 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   28bc2:	230e      	movs	r3, #14
   28bc4:	18fb      	adds	r3, r7, r3
   28bc6:	2249      	movs	r2, #73	; 0x49
   28bc8:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   28bca:	2308      	movs	r3, #8
   28bcc:	18fb      	adds	r3, r7, r3
   28bce:	1dfa      	adds	r2, r7, #7
   28bd0:	7812      	ldrb	r2, [r2, #0]
   28bd2:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   28bd4:	1dfb      	adds	r3, r7, #7
   28bd6:	781b      	ldrb	r3, [r3, #0]
   28bd8:	b25b      	sxtb	r3, r3
   28bda:	4a32      	ldr	r2, [pc, #200]	; (28ca4 <close+0x134>)
   28bdc:	011b      	lsls	r3, r3, #4
   28bde:	18d3      	adds	r3, r2, r3
   28be0:	3306      	adds	r3, #6
   28be2:	881b      	ldrh	r3, [r3, #0]
   28be4:	b29a      	uxth	r2, r3
   28be6:	2308      	movs	r3, #8
   28be8:	18fb      	adds	r3, r7, r3
   28bea:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   28bec:	1dfb      	adds	r3, r7, #7
   28bee:	781b      	ldrb	r3, [r3, #0]
   28bf0:	b25b      	sxtb	r3, r3
   28bf2:	4a2c      	ldr	r2, [pc, #176]	; (28ca4 <close+0x134>)
   28bf4:	011b      	lsls	r3, r3, #4
   28bf6:	18d3      	adds	r3, r2, r3
   28bf8:	330a      	adds	r3, #10
   28bfa:	2200      	movs	r2, #0
   28bfc:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   28bfe:	1dfb      	adds	r3, r7, #7
   28c00:	781b      	ldrb	r3, [r3, #0]
   28c02:	b25b      	sxtb	r3, r3
   28c04:	4a27      	ldr	r2, [pc, #156]	; (28ca4 <close+0x134>)
   28c06:	011b      	lsls	r3, r3, #4
   28c08:	18d3      	adds	r3, r2, r3
   28c0a:	3306      	adds	r3, #6
   28c0c:	2200      	movs	r2, #0
   28c0e:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   28c10:	1dfb      	adds	r3, r7, #7
   28c12:	781b      	ldrb	r3, [r3, #0]
   28c14:	b25b      	sxtb	r3, r3
   28c16:	4a23      	ldr	r2, [pc, #140]	; (28ca4 <close+0x134>)
   28c18:	011b      	lsls	r3, r3, #4
   28c1a:	18d3      	adds	r3, r2, r3
   28c1c:	330b      	adds	r3, #11
   28c1e:	781b      	ldrb	r3, [r3, #0]
   28c20:	b2db      	uxtb	r3, r3
   28c22:	001a      	movs	r2, r3
   28c24:	2301      	movs	r3, #1
   28c26:	4013      	ands	r3, r2
   28c28:	d003      	beq.n	28c32 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   28c2a:	230e      	movs	r3, #14
   28c2c:	18fb      	adds	r3, r7, r3
   28c2e:	224e      	movs	r2, #78	; 0x4e
   28c30:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   28c32:	230f      	movs	r3, #15
   28c34:	18fc      	adds	r4, r7, r3
   28c36:	2308      	movs	r3, #8
   28c38:	18fa      	adds	r2, r7, r3
   28c3a:	230e      	movs	r3, #14
   28c3c:	18fb      	adds	r3, r7, r3
   28c3e:	7819      	ldrb	r1, [r3, #0]
   28c40:	2300      	movs	r3, #0
   28c42:	9302      	str	r3, [sp, #8]
   28c44:	2300      	movs	r3, #0
   28c46:	9301      	str	r3, [sp, #4]
   28c48:	2300      	movs	r3, #0
   28c4a:	9300      	str	r3, [sp, #0]
   28c4c:	2304      	movs	r3, #4
   28c4e:	2002      	movs	r0, #2
   28c50:	4d15      	ldr	r5, [pc, #84]	; (28ca8 <close+0x138>)
   28c52:	47a8      	blx	r5
   28c54:	0003      	movs	r3, r0
   28c56:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   28c58:	230f      	movs	r3, #15
   28c5a:	18fb      	adds	r3, r7, r3
   28c5c:	781b      	ldrb	r3, [r3, #0]
   28c5e:	b25b      	sxtb	r3, r3
   28c60:	2b00      	cmp	r3, #0
   28c62:	d003      	beq.n	28c6c <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   28c64:	230f      	movs	r3, #15
   28c66:	18fb      	adds	r3, r7, r3
   28c68:	22f7      	movs	r2, #247	; 0xf7
   28c6a:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   28c6c:	1dfb      	adds	r3, r7, #7
   28c6e:	781b      	ldrb	r3, [r3, #0]
   28c70:	b25b      	sxtb	r3, r3
   28c72:	011a      	lsls	r2, r3, #4
   28c74:	4b0b      	ldr	r3, [pc, #44]	; (28ca4 <close+0x134>)
   28c76:	18d3      	adds	r3, r2, r3
   28c78:	2210      	movs	r2, #16
   28c7a:	2100      	movs	r1, #0
   28c7c:	0018      	movs	r0, r3
   28c7e:	4b0b      	ldr	r3, [pc, #44]	; (28cac <close+0x13c>)
   28c80:	4798      	blx	r3
	}
	return s8Ret;
   28c82:	230f      	movs	r3, #15
   28c84:	18fb      	adds	r3, r7, r3
   28c86:	781b      	ldrb	r3, [r3, #0]
   28c88:	b25b      	sxtb	r3, r3
}
   28c8a:	0018      	movs	r0, r3
   28c8c:	46bd      	mov	sp, r7
   28c8e:	b004      	add	sp, #16
   28c90:	bdb0      	pop	{r4, r5, r7, pc}
   28c92:	46c0      	nop			; (mov r8, r8)
   28c94:	0003d9c8 	.word	0x0003d9c8
   28c98:	00020e3d 	.word	0x00020e3d
   28c9c:	0003da08 	.word	0x0003da08
   28ca0:	0003d9e8 	.word	0x0003d9e8
   28ca4:	20005b18 	.word	0x20005b18
   28ca8:	00023e35 	.word	0x00023e35
   28cac:	00023bd5 	.word	0x00023bd5

00028cb0 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   28cb0:	b580      	push	{r7, lr}
   28cb2:	b086      	sub	sp, #24
   28cb4:	af00      	add	r7, sp, #0
   28cb6:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   28cb8:	2300      	movs	r3, #0
   28cba:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   28cbc:	2317      	movs	r3, #23
   28cbe:	18fb      	adds	r3, r7, r3
   28cc0:	2200      	movs	r2, #0
   28cc2:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   28cc4:	2316      	movs	r3, #22
   28cc6:	18fb      	adds	r3, r7, r3
   28cc8:	2200      	movs	r2, #0
   28cca:	701a      	strb	r2, [r3, #0]
   28ccc:	e060      	b.n	28d90 <nmi_inet_addr+0xe0>
	{
		j = 0;
   28cce:	2315      	movs	r3, #21
   28cd0:	18fb      	adds	r3, r7, r3
   28cd2:	2200      	movs	r2, #0
   28cd4:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   28cd6:	2314      	movs	r3, #20
   28cd8:	18fb      	adds	r3, r7, r3
   28cda:	687a      	ldr	r2, [r7, #4]
   28cdc:	7812      	ldrb	r2, [r2, #0]
   28cde:	701a      	strb	r2, [r3, #0]
			++j;
   28ce0:	2315      	movs	r3, #21
   28ce2:	18fb      	adds	r3, r7, r3
   28ce4:	2215      	movs	r2, #21
   28ce6:	18ba      	adds	r2, r7, r2
   28ce8:	7812      	ldrb	r2, [r2, #0]
   28cea:	3201      	adds	r2, #1
   28cec:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   28cee:	2315      	movs	r3, #21
   28cf0:	18fb      	adds	r3, r7, r3
   28cf2:	781b      	ldrb	r3, [r3, #0]
   28cf4:	2b04      	cmp	r3, #4
   28cf6:	d901      	bls.n	28cfc <nmi_inet_addr+0x4c>
			{
				return 0;
   28cf8:	2300      	movs	r3, #0
   28cfa:	e057      	b.n	28dac <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   28cfc:	2314      	movs	r3, #20
   28cfe:	18fb      	adds	r3, r7, r3
   28d00:	781b      	ldrb	r3, [r3, #0]
   28d02:	2b2e      	cmp	r3, #46	; 0x2e
   28d04:	d004      	beq.n	28d10 <nmi_inet_addr+0x60>
   28d06:	2314      	movs	r3, #20
   28d08:	18fb      	adds	r3, r7, r3
   28d0a:	781b      	ldrb	r3, [r3, #0]
   28d0c:	2b00      	cmp	r3, #0
   28d0e:	d10d      	bne.n	28d2c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   28d10:	2316      	movs	r3, #22
   28d12:	18fb      	adds	r3, r7, r3
   28d14:	781b      	ldrb	r3, [r3, #0]
   28d16:	220c      	movs	r2, #12
   28d18:	18ba      	adds	r2, r7, r2
   28d1a:	2117      	movs	r1, #23
   28d1c:	1879      	adds	r1, r7, r1
   28d1e:	7809      	ldrb	r1, [r1, #0]
   28d20:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   28d22:	2317      	movs	r3, #23
   28d24:	18fb      	adds	r3, r7, r3
   28d26:	2200      	movs	r2, #0
   28d28:	701a      	strb	r2, [r3, #0]
   28d2a:	e01d      	b.n	28d68 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   28d2c:	2314      	movs	r3, #20
   28d2e:	18fb      	adds	r3, r7, r3
   28d30:	781b      	ldrb	r3, [r3, #0]
   28d32:	2b2f      	cmp	r3, #47	; 0x2f
   28d34:	d916      	bls.n	28d64 <nmi_inet_addr+0xb4>
   28d36:	2314      	movs	r3, #20
   28d38:	18fb      	adds	r3, r7, r3
   28d3a:	781b      	ldrb	r3, [r3, #0]
   28d3c:	2b39      	cmp	r3, #57	; 0x39
   28d3e:	d811      	bhi.n	28d64 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   28d40:	2317      	movs	r3, #23
   28d42:	18fb      	adds	r3, r7, r3
   28d44:	781b      	ldrb	r3, [r3, #0]
   28d46:	1c1a      	adds	r2, r3, #0
   28d48:	0092      	lsls	r2, r2, #2
   28d4a:	18d3      	adds	r3, r2, r3
   28d4c:	18db      	adds	r3, r3, r3
   28d4e:	b2da      	uxtb	r2, r3
   28d50:	2314      	movs	r3, #20
   28d52:	18fb      	adds	r3, r7, r3
   28d54:	781b      	ldrb	r3, [r3, #0]
   28d56:	18d3      	adds	r3, r2, r3
   28d58:	b2da      	uxtb	r2, r3
   28d5a:	2317      	movs	r3, #23
   28d5c:	18fb      	adds	r3, r7, r3
   28d5e:	3a30      	subs	r2, #48	; 0x30
   28d60:	701a      	strb	r2, [r3, #0]
   28d62:	e001      	b.n	28d68 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   28d64:	2300      	movs	r3, #0
   28d66:	e021      	b.n	28dac <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   28d68:	687b      	ldr	r3, [r7, #4]
   28d6a:	3301      	adds	r3, #1
   28d6c:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   28d6e:	2314      	movs	r3, #20
   28d70:	18fb      	adds	r3, r7, r3
   28d72:	781b      	ldrb	r3, [r3, #0]
   28d74:	2b2e      	cmp	r3, #46	; 0x2e
   28d76:	d004      	beq.n	28d82 <nmi_inet_addr+0xd2>
   28d78:	2314      	movs	r3, #20
   28d7a:	18fb      	adds	r3, r7, r3
   28d7c:	781b      	ldrb	r3, [r3, #0]
   28d7e:	2b00      	cmp	r3, #0
   28d80:	d1a9      	bne.n	28cd6 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   28d82:	2316      	movs	r3, #22
   28d84:	18fb      	adds	r3, r7, r3
   28d86:	2216      	movs	r2, #22
   28d88:	18ba      	adds	r2, r7, r2
   28d8a:	7812      	ldrb	r2, [r2, #0]
   28d8c:	3201      	adds	r2, #1
   28d8e:	701a      	strb	r2, [r3, #0]
   28d90:	2316      	movs	r3, #22
   28d92:	18fb      	adds	r3, r7, r3
   28d94:	781b      	ldrb	r3, [r3, #0]
   28d96:	2b03      	cmp	r3, #3
   28d98:	d999      	bls.n	28cce <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   28d9a:	230c      	movs	r3, #12
   28d9c:	18f9      	adds	r1, r7, r3
   28d9e:	2310      	movs	r3, #16
   28da0:	18fb      	adds	r3, r7, r3
   28da2:	2204      	movs	r2, #4
   28da4:	0018      	movs	r0, r3
   28da6:	4b03      	ldr	r3, [pc, #12]	; (28db4 <nmi_inet_addr+0x104>)
   28da8:	4798      	blx	r3
	return u32IP;
   28daa:	693b      	ldr	r3, [r7, #16]
}
   28dac:	0018      	movs	r0, r3
   28dae:	46bd      	mov	sp, r7
   28db0:	b006      	add	sp, #24
   28db2:	bd80      	pop	{r7, pc}
   28db4:	00023b99 	.word	0x00023b99

00028db8 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   28db8:	b5b0      	push	{r4, r5, r7, lr}
   28dba:	b088      	sub	sp, #32
   28dbc:	af04      	add	r7, sp, #16
   28dbe:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   28dc0:	230f      	movs	r3, #15
   28dc2:	18fb      	adds	r3, r7, r3
   28dc4:	22fa      	movs	r2, #250	; 0xfa
   28dc6:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   28dc8:	687b      	ldr	r3, [r7, #4]
   28dca:	0018      	movs	r0, r3
   28dcc:	4b14      	ldr	r3, [pc, #80]	; (28e20 <gethostbyname+0x68>)
   28dce:	4798      	blx	r3
   28dd0:	0003      	movs	r3, r0
   28dd2:	001a      	movs	r2, r3
   28dd4:	230e      	movs	r3, #14
   28dd6:	18fb      	adds	r3, r7, r3
   28dd8:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   28dda:	230e      	movs	r3, #14
   28ddc:	18fb      	adds	r3, r7, r3
   28dde:	781b      	ldrb	r3, [r3, #0]
   28de0:	2b40      	cmp	r3, #64	; 0x40
   28de2:	d815      	bhi.n	28e10 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   28de4:	230e      	movs	r3, #14
   28de6:	18fb      	adds	r3, r7, r3
   28de8:	781b      	ldrb	r3, [r3, #0]
   28dea:	b29b      	uxth	r3, r3
   28dec:	3301      	adds	r3, #1
   28dee:	b299      	uxth	r1, r3
   28df0:	230f      	movs	r3, #15
   28df2:	18fc      	adds	r4, r7, r3
   28df4:	687a      	ldr	r2, [r7, #4]
   28df6:	2300      	movs	r3, #0
   28df8:	9302      	str	r3, [sp, #8]
   28dfa:	2300      	movs	r3, #0
   28dfc:	9301      	str	r3, [sp, #4]
   28dfe:	2300      	movs	r3, #0
   28e00:	9300      	str	r3, [sp, #0]
   28e02:	000b      	movs	r3, r1
   28e04:	214a      	movs	r1, #74	; 0x4a
   28e06:	2002      	movs	r0, #2
   28e08:	4d06      	ldr	r5, [pc, #24]	; (28e24 <gethostbyname+0x6c>)
   28e0a:	47a8      	blx	r5
   28e0c:	0003      	movs	r3, r0
   28e0e:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   28e10:	230f      	movs	r3, #15
   28e12:	18fb      	adds	r3, r7, r3
   28e14:	781b      	ldrb	r3, [r3, #0]
   28e16:	b25b      	sxtb	r3, r3
}
   28e18:	0018      	movs	r0, r3
   28e1a:	46bd      	mov	sp, r7
   28e1c:	b004      	add	sp, #16
   28e1e:	bdb0      	pop	{r4, r5, r7, pc}
   28e20:	00023c13 	.word	0x00023c13
   28e24:	00023e35 	.word	0x00023e35

00028e28 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   28e28:	b580      	push	{r7, lr}
   28e2a:	b082      	sub	sp, #8
   28e2c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   28e2e:	003b      	movs	r3, r7
   28e30:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   28e32:	687b      	ldr	r3, [r7, #4]
   28e34:	22b9      	movs	r2, #185	; 0xb9
   28e36:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   28e38:	4b13      	ldr	r3, [pc, #76]	; (28e88 <spi_flash_enter_low_power_mode+0x60>)
   28e3a:	2100      	movs	r1, #0
   28e3c:	0018      	movs	r0, r3
   28e3e:	4b13      	ldr	r3, [pc, #76]	; (28e8c <spi_flash_enter_low_power_mode+0x64>)
   28e40:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   28e42:	687b      	ldr	r3, [r7, #4]
   28e44:	781b      	ldrb	r3, [r3, #0]
   28e46:	001a      	movs	r2, r3
   28e48:	4b11      	ldr	r3, [pc, #68]	; (28e90 <spi_flash_enter_low_power_mode+0x68>)
   28e4a:	0011      	movs	r1, r2
   28e4c:	0018      	movs	r0, r3
   28e4e:	4b0f      	ldr	r3, [pc, #60]	; (28e8c <spi_flash_enter_low_power_mode+0x64>)
   28e50:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   28e52:	4b10      	ldr	r3, [pc, #64]	; (28e94 <spi_flash_enter_low_power_mode+0x6c>)
   28e54:	2101      	movs	r1, #1
   28e56:	0018      	movs	r0, r3
   28e58:	4b0c      	ldr	r3, [pc, #48]	; (28e8c <spi_flash_enter_low_power_mode+0x64>)
   28e5a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   28e5c:	4b0e      	ldr	r3, [pc, #56]	; (28e98 <spi_flash_enter_low_power_mode+0x70>)
   28e5e:	2100      	movs	r1, #0
   28e60:	0018      	movs	r0, r3
   28e62:	4b0a      	ldr	r3, [pc, #40]	; (28e8c <spi_flash_enter_low_power_mode+0x64>)
   28e64:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   28e66:	4b0d      	ldr	r3, [pc, #52]	; (28e9c <spi_flash_enter_low_power_mode+0x74>)
   28e68:	2181      	movs	r1, #129	; 0x81
   28e6a:	0018      	movs	r0, r3
   28e6c:	4b07      	ldr	r3, [pc, #28]	; (28e8c <spi_flash_enter_low_power_mode+0x64>)
   28e6e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   28e70:	46c0      	nop			; (mov r8, r8)
   28e72:	4b0b      	ldr	r3, [pc, #44]	; (28ea0 <spi_flash_enter_low_power_mode+0x78>)
   28e74:	0018      	movs	r0, r3
   28e76:	4b0b      	ldr	r3, [pc, #44]	; (28ea4 <spi_flash_enter_low_power_mode+0x7c>)
   28e78:	4798      	blx	r3
   28e7a:	0003      	movs	r3, r0
   28e7c:	2b01      	cmp	r3, #1
   28e7e:	d1f8      	bne.n	28e72 <spi_flash_enter_low_power_mode+0x4a>
}
   28e80:	46c0      	nop			; (mov r8, r8)
   28e82:	46bd      	mov	sp, r7
   28e84:	b002      	add	sp, #8
   28e86:	bd80      	pop	{r7, pc}
   28e88:	00010208 	.word	0x00010208
   28e8c:	00025c89 	.word	0x00025c89
   28e90:	0001020c 	.word	0x0001020c
   28e94:	00010214 	.word	0x00010214
   28e98:	0001021c 	.word	0x0001021c
   28e9c:	00010204 	.word	0x00010204
   28ea0:	00010218 	.word	0x00010218
   28ea4:	00025c45 	.word	0x00025c45

00028ea8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   28ea8:	b580      	push	{r7, lr}
   28eaa:	b082      	sub	sp, #8
   28eac:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   28eae:	003b      	movs	r3, r7
   28eb0:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   28eb2:	687b      	ldr	r3, [r7, #4]
   28eb4:	22ab      	movs	r2, #171	; 0xab
   28eb6:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   28eb8:	4b13      	ldr	r3, [pc, #76]	; (28f08 <spi_flash_leave_low_power_mode+0x60>)
   28eba:	2100      	movs	r1, #0
   28ebc:	0018      	movs	r0, r3
   28ebe:	4b13      	ldr	r3, [pc, #76]	; (28f0c <spi_flash_leave_low_power_mode+0x64>)
   28ec0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   28ec2:	687b      	ldr	r3, [r7, #4]
   28ec4:	781b      	ldrb	r3, [r3, #0]
   28ec6:	001a      	movs	r2, r3
   28ec8:	4b11      	ldr	r3, [pc, #68]	; (28f10 <spi_flash_leave_low_power_mode+0x68>)
   28eca:	0011      	movs	r1, r2
   28ecc:	0018      	movs	r0, r3
   28ece:	4b0f      	ldr	r3, [pc, #60]	; (28f0c <spi_flash_leave_low_power_mode+0x64>)
   28ed0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   28ed2:	4b10      	ldr	r3, [pc, #64]	; (28f14 <spi_flash_leave_low_power_mode+0x6c>)
   28ed4:	2101      	movs	r1, #1
   28ed6:	0018      	movs	r0, r3
   28ed8:	4b0c      	ldr	r3, [pc, #48]	; (28f0c <spi_flash_leave_low_power_mode+0x64>)
   28eda:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   28edc:	4b0e      	ldr	r3, [pc, #56]	; (28f18 <spi_flash_leave_low_power_mode+0x70>)
   28ede:	2100      	movs	r1, #0
   28ee0:	0018      	movs	r0, r3
   28ee2:	4b0a      	ldr	r3, [pc, #40]	; (28f0c <spi_flash_leave_low_power_mode+0x64>)
   28ee4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   28ee6:	4b0d      	ldr	r3, [pc, #52]	; (28f1c <spi_flash_leave_low_power_mode+0x74>)
   28ee8:	2181      	movs	r1, #129	; 0x81
   28eea:	0018      	movs	r0, r3
   28eec:	4b07      	ldr	r3, [pc, #28]	; (28f0c <spi_flash_leave_low_power_mode+0x64>)
   28eee:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   28ef0:	46c0      	nop			; (mov r8, r8)
   28ef2:	4b0b      	ldr	r3, [pc, #44]	; (28f20 <spi_flash_leave_low_power_mode+0x78>)
   28ef4:	0018      	movs	r0, r3
   28ef6:	4b0b      	ldr	r3, [pc, #44]	; (28f24 <spi_flash_leave_low_power_mode+0x7c>)
   28ef8:	4798      	blx	r3
   28efa:	0003      	movs	r3, r0
   28efc:	2b01      	cmp	r3, #1
   28efe:	d1f8      	bne.n	28ef2 <spi_flash_leave_low_power_mode+0x4a>
}
   28f00:	46c0      	nop			; (mov r8, r8)
   28f02:	46bd      	mov	sp, r7
   28f04:	b002      	add	sp, #8
   28f06:	bd80      	pop	{r7, pc}
   28f08:	00010208 	.word	0x00010208
   28f0c:	00025c89 	.word	0x00025c89
   28f10:	0001020c 	.word	0x0001020c
   28f14:	00010214 	.word	0x00010214
   28f18:	0001021c 	.word	0x0001021c
   28f1c:	00010204 	.word	0x00010204
   28f20:	00010218 	.word	0x00010218
   28f24:	00025c45 	.word	0x00025c45

00028f28 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   28f28:	b590      	push	{r4, r7, lr}
   28f2a:	b085      	sub	sp, #20
   28f2c:	af00      	add	r7, sp, #0
   28f2e:	0002      	movs	r2, r0
   28f30:	1dfb      	adds	r3, r7, #7
   28f32:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   28f34:	230f      	movs	r3, #15
   28f36:	18fb      	adds	r3, r7, r3
   28f38:	2200      	movs	r2, #0
   28f3a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   28f3c:	4b24      	ldr	r3, [pc, #144]	; (28fd0 <spi_flash_enable+0xa8>)
   28f3e:	4798      	blx	r3
   28f40:	0003      	movs	r3, r0
   28f42:	051b      	lsls	r3, r3, #20
   28f44:	0d1b      	lsrs	r3, r3, #20
   28f46:	4a23      	ldr	r2, [pc, #140]	; (28fd4 <spi_flash_enable+0xac>)
   28f48:	4293      	cmp	r3, r2
   28f4a:	d938      	bls.n	28fbe <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   28f4c:	230f      	movs	r3, #15
   28f4e:	18fc      	adds	r4, r7, r3
   28f50:	2308      	movs	r3, #8
   28f52:	18fb      	adds	r3, r7, r3
   28f54:	4a20      	ldr	r2, [pc, #128]	; (28fd8 <spi_flash_enable+0xb0>)
   28f56:	0019      	movs	r1, r3
   28f58:	0010      	movs	r0, r2
   28f5a:	4b20      	ldr	r3, [pc, #128]	; (28fdc <spi_flash_enable+0xb4>)
   28f5c:	4798      	blx	r3
   28f5e:	0003      	movs	r3, r0
   28f60:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   28f62:	230f      	movs	r3, #15
   28f64:	18fb      	adds	r3, r7, r3
   28f66:	781b      	ldrb	r3, [r3, #0]
   28f68:	b25b      	sxtb	r3, r3
   28f6a:	2b00      	cmp	r3, #0
   28f6c:	d126      	bne.n	28fbc <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   28f6e:	68bb      	ldr	r3, [r7, #8]
   28f70:	4a1b      	ldr	r2, [pc, #108]	; (28fe0 <spi_flash_enable+0xb8>)
   28f72:	4013      	ands	r3, r2
   28f74:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   28f76:	68bb      	ldr	r3, [r7, #8]
   28f78:	4a1a      	ldr	r2, [pc, #104]	; (28fe4 <spi_flash_enable+0xbc>)
   28f7a:	4313      	orrs	r3, r2
   28f7c:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   28f7e:	68bb      	ldr	r3, [r7, #8]
   28f80:	4a15      	ldr	r2, [pc, #84]	; (28fd8 <spi_flash_enable+0xb0>)
   28f82:	0019      	movs	r1, r3
   28f84:	0010      	movs	r0, r2
   28f86:	4b18      	ldr	r3, [pc, #96]	; (28fe8 <spi_flash_enable+0xc0>)
   28f88:	4798      	blx	r3
		if(enable) {
   28f8a:	1dfb      	adds	r3, r7, #7
   28f8c:	781b      	ldrb	r3, [r3, #0]
   28f8e:	2b00      	cmp	r3, #0
   28f90:	d002      	beq.n	28f98 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   28f92:	4b16      	ldr	r3, [pc, #88]	; (28fec <spi_flash_enable+0xc4>)
   28f94:	4798      	blx	r3
   28f96:	e001      	b.n	28f9c <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   28f98:	4b15      	ldr	r3, [pc, #84]	; (28ff0 <spi_flash_enable+0xc8>)
   28f9a:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   28f9c:	68bb      	ldr	r3, [r7, #8]
   28f9e:	4a10      	ldr	r2, [pc, #64]	; (28fe0 <spi_flash_enable+0xb8>)
   28fa0:	4013      	ands	r3, r2
   28fa2:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   28fa4:	68bb      	ldr	r3, [r7, #8]
   28fa6:	2280      	movs	r2, #128	; 0x80
   28fa8:	0252      	lsls	r2, r2, #9
   28faa:	4313      	orrs	r3, r2
   28fac:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   28fae:	68bb      	ldr	r3, [r7, #8]
   28fb0:	4a09      	ldr	r2, [pc, #36]	; (28fd8 <spi_flash_enable+0xb0>)
   28fb2:	0019      	movs	r1, r3
   28fb4:	0010      	movs	r0, r2
   28fb6:	4b0c      	ldr	r3, [pc, #48]	; (28fe8 <spi_flash_enable+0xc0>)
   28fb8:	4798      	blx	r3
   28fba:	e000      	b.n	28fbe <spi_flash_enable+0x96>
			goto ERR1;
   28fbc:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   28fbe:	230f      	movs	r3, #15
   28fc0:	18fb      	adds	r3, r7, r3
   28fc2:	781b      	ldrb	r3, [r3, #0]
   28fc4:	b25b      	sxtb	r3, r3
}
   28fc6:	0018      	movs	r0, r3
   28fc8:	46bd      	mov	sp, r7
   28fca:	b005      	add	sp, #20
   28fcc:	bd90      	pop	{r4, r7, pc}
   28fce:	46c0      	nop			; (mov r8, r8)
   28fd0:	00025565 	.word	0x00025565
   28fd4:	0000039f 	.word	0x0000039f
   28fd8:	00001410 	.word	0x00001410
   28fdc:	00025c65 	.word	0x00025c65
   28fe0:	f8888fff 	.word	0xf8888fff
   28fe4:	01111000 	.word	0x01111000
   28fe8:	00025c89 	.word	0x00025c89
   28fec:	00028ea9 	.word	0x00028ea9
   28ff0:	00028e29 	.word	0x00028e29

00028ff4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   28ff4:	b580      	push	{r7, lr}
   28ff6:	b084      	sub	sp, #16
   28ff8:	af00      	add	r7, sp, #0
   28ffa:	0002      	movs	r2, r0
   28ffc:	1dfb      	adds	r3, r7, #7
   28ffe:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   29000:	1dfb      	adds	r3, r7, #7
   29002:	781b      	ldrb	r3, [r3, #0]
   29004:	2b00      	cmp	r3, #0
   29006:	d108      	bne.n	2901a <mem_test_unit_ready+0x26>
   29008:	1dfb      	adds	r3, r7, #7
   2900a:	781a      	ldrb	r2, [r3, #0]
   2900c:	4b08      	ldr	r3, [pc, #32]	; (29030 <mem_test_unit_ready+0x3c>)
   2900e:	0152      	lsls	r2, r2, #5
   29010:	58d3      	ldr	r3, [r2, r3]
   29012:	4798      	blx	r3
   29014:	0003      	movs	r3, r0
   29016:	001a      	movs	r2, r3
   29018:	e000      	b.n	2901c <mem_test_unit_ready+0x28>
   2901a:	2201      	movs	r2, #1
  status =
   2901c:	230f      	movs	r3, #15
   2901e:	18fb      	adds	r3, r7, r3
   29020:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   29022:	230f      	movs	r3, #15
   29024:	18fb      	adds	r3, r7, r3
   29026:	781b      	ldrb	r3, [r3, #0]
}
   29028:	0018      	movs	r0, r3
   2902a:	46bd      	mov	sp, r7
   2902c:	b004      	add	sp, #16
   2902e:	bd80      	pop	{r7, pc}
   29030:	0003da94 	.word	0x0003da94

00029034 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   29034:	b580      	push	{r7, lr}
   29036:	b084      	sub	sp, #16
   29038:	af00      	add	r7, sp, #0
   2903a:	0002      	movs	r2, r0
   2903c:	6039      	str	r1, [r7, #0]
   2903e:	1dfb      	adds	r3, r7, #7
   29040:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   29042:	1dfb      	adds	r3, r7, #7
   29044:	781b      	ldrb	r3, [r3, #0]
   29046:	2b00      	cmp	r3, #0
   29048:	d10c      	bne.n	29064 <mem_read_capacity+0x30>
   2904a:	1dfb      	adds	r3, r7, #7
   2904c:	781b      	ldrb	r3, [r3, #0]
   2904e:	4a0b      	ldr	r2, [pc, #44]	; (2907c <mem_read_capacity+0x48>)
   29050:	015b      	lsls	r3, r3, #5
   29052:	18d3      	adds	r3, r2, r3
   29054:	3304      	adds	r3, #4
   29056:	681b      	ldr	r3, [r3, #0]
   29058:	683a      	ldr	r2, [r7, #0]
   2905a:	0010      	movs	r0, r2
   2905c:	4798      	blx	r3
   2905e:	0003      	movs	r3, r0
   29060:	001a      	movs	r2, r3
   29062:	e000      	b.n	29066 <mem_read_capacity+0x32>
   29064:	2201      	movs	r2, #1
  status =
   29066:	230f      	movs	r3, #15
   29068:	18fb      	adds	r3, r7, r3
   2906a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   2906c:	230f      	movs	r3, #15
   2906e:	18fb      	adds	r3, r7, r3
   29070:	781b      	ldrb	r3, [r3, #0]
}
   29072:	0018      	movs	r0, r3
   29074:	46bd      	mov	sp, r7
   29076:	b004      	add	sp, #16
   29078:	bd80      	pop	{r7, pc}
   2907a:	46c0      	nop			; (mov r8, r8)
   2907c:	0003da94 	.word	0x0003da94

00029080 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   29080:	b580      	push	{r7, lr}
   29082:	b084      	sub	sp, #16
   29084:	af00      	add	r7, sp, #0
   29086:	0002      	movs	r2, r0
   29088:	1dfb      	adds	r3, r7, #7
   2908a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   2908c:	1dfb      	adds	r3, r7, #7
   2908e:	781b      	ldrb	r3, [r3, #0]
   29090:	425a      	negs	r2, r3
   29092:	4153      	adcs	r3, r2
   29094:	b2da      	uxtb	r2, r3
  sector_size =
   29096:	230f      	movs	r3, #15
   29098:	18fb      	adds	r3, r7, r3
   2909a:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   2909c:	230f      	movs	r3, #15
   2909e:	18fb      	adds	r3, r7, r3
   290a0:	781b      	ldrb	r3, [r3, #0]
}
   290a2:	0018      	movs	r0, r3
   290a4:	46bd      	mov	sp, r7
   290a6:	b004      	add	sp, #16
   290a8:	bd80      	pop	{r7, pc}
	...

000290ac <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   290ac:	b580      	push	{r7, lr}
   290ae:	b084      	sub	sp, #16
   290b0:	af00      	add	r7, sp, #0
   290b2:	0002      	movs	r2, r0
   290b4:	1dfb      	adds	r3, r7, #7
   290b6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   290b8:	1dfb      	adds	r3, r7, #7
   290ba:	781b      	ldrb	r3, [r3, #0]
   290bc:	2b00      	cmp	r3, #0
   290be:	d109      	bne.n	290d4 <mem_wr_protect+0x28>
   290c0:	1dfb      	adds	r3, r7, #7
   290c2:	781b      	ldrb	r3, [r3, #0]
   290c4:	4a0a      	ldr	r2, [pc, #40]	; (290f0 <mem_wr_protect+0x44>)
   290c6:	015b      	lsls	r3, r3, #5
   290c8:	18d3      	adds	r3, r2, r3
   290ca:	330c      	adds	r3, #12
   290cc:	681b      	ldr	r3, [r3, #0]
   290ce:	4798      	blx	r3
   290d0:	1e03      	subs	r3, r0, #0
   290d2:	d001      	beq.n	290d8 <mem_wr_protect+0x2c>
   290d4:	2201      	movs	r2, #1
   290d6:	e000      	b.n	290da <mem_wr_protect+0x2e>
   290d8:	2200      	movs	r2, #0
  wr_protect =
   290da:	230f      	movs	r3, #15
   290dc:	18fb      	adds	r3, r7, r3
   290de:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   290e0:	230f      	movs	r3, #15
   290e2:	18fb      	adds	r3, r7, r3
   290e4:	781b      	ldrb	r3, [r3, #0]
}
   290e6:	0018      	movs	r0, r3
   290e8:	46bd      	mov	sp, r7
   290ea:	b004      	add	sp, #16
   290ec:	bd80      	pop	{r7, pc}
   290ee:	46c0      	nop			; (mov r8, r8)
   290f0:	0003da94 	.word	0x0003da94

000290f4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   290f4:	b580      	push	{r7, lr}
   290f6:	b086      	sub	sp, #24
   290f8:	af00      	add	r7, sp, #0
   290fa:	60b9      	str	r1, [r7, #8]
   290fc:	607a      	str	r2, [r7, #4]
   290fe:	230f      	movs	r3, #15
   29100:	18fb      	adds	r3, r7, r3
   29102:	1c02      	adds	r2, r0, #0
   29104:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   29106:	230f      	movs	r3, #15
   29108:	18fb      	adds	r3, r7, r3
   2910a:	781b      	ldrb	r3, [r3, #0]
   2910c:	2b00      	cmp	r3, #0
   2910e:	d10e      	bne.n	2912e <memory_2_ram+0x3a>
   29110:	230f      	movs	r3, #15
   29112:	18fb      	adds	r3, r7, r3
   29114:	781b      	ldrb	r3, [r3, #0]
   29116:	4a0b      	ldr	r2, [pc, #44]	; (29144 <memory_2_ram+0x50>)
   29118:	015b      	lsls	r3, r3, #5
   2911a:	18d3      	adds	r3, r2, r3
   2911c:	3314      	adds	r3, #20
   2911e:	681b      	ldr	r3, [r3, #0]
   29120:	6879      	ldr	r1, [r7, #4]
   29122:	68ba      	ldr	r2, [r7, #8]
   29124:	0010      	movs	r0, r2
   29126:	4798      	blx	r3
   29128:	0003      	movs	r3, r0
   2912a:	001a      	movs	r2, r3
   2912c:	e000      	b.n	29130 <memory_2_ram+0x3c>
   2912e:	2201      	movs	r2, #1
  status =
   29130:	2317      	movs	r3, #23
   29132:	18fb      	adds	r3, r7, r3
   29134:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   29136:	2317      	movs	r3, #23
   29138:	18fb      	adds	r3, r7, r3
   2913a:	781b      	ldrb	r3, [r3, #0]
}
   2913c:	0018      	movs	r0, r3
   2913e:	46bd      	mov	sp, r7
   29140:	b006      	add	sp, #24
   29142:	bd80      	pop	{r7, pc}
   29144:	0003da94 	.word	0x0003da94

00029148 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   29148:	b580      	push	{r7, lr}
   2914a:	b086      	sub	sp, #24
   2914c:	af00      	add	r7, sp, #0
   2914e:	60b9      	str	r1, [r7, #8]
   29150:	607a      	str	r2, [r7, #4]
   29152:	230f      	movs	r3, #15
   29154:	18fb      	adds	r3, r7, r3
   29156:	1c02      	adds	r2, r0, #0
   29158:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   2915a:	230f      	movs	r3, #15
   2915c:	18fb      	adds	r3, r7, r3
   2915e:	781b      	ldrb	r3, [r3, #0]
   29160:	2b00      	cmp	r3, #0
   29162:	d10e      	bne.n	29182 <ram_2_memory+0x3a>
   29164:	230f      	movs	r3, #15
   29166:	18fb      	adds	r3, r7, r3
   29168:	781b      	ldrb	r3, [r3, #0]
   2916a:	4a0b      	ldr	r2, [pc, #44]	; (29198 <ram_2_memory+0x50>)
   2916c:	015b      	lsls	r3, r3, #5
   2916e:	18d3      	adds	r3, r2, r3
   29170:	3318      	adds	r3, #24
   29172:	681b      	ldr	r3, [r3, #0]
   29174:	6879      	ldr	r1, [r7, #4]
   29176:	68ba      	ldr	r2, [r7, #8]
   29178:	0010      	movs	r0, r2
   2917a:	4798      	blx	r3
   2917c:	0003      	movs	r3, r0
   2917e:	001a      	movs	r2, r3
   29180:	e000      	b.n	29184 <ram_2_memory+0x3c>
   29182:	2201      	movs	r2, #1
  status =
   29184:	2317      	movs	r3, #23
   29186:	18fb      	adds	r3, r7, r3
   29188:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   2918a:	2317      	movs	r3, #23
   2918c:	18fb      	adds	r3, r7, r3
   2918e:	781b      	ldrb	r3, [r3, #0]
}
   29190:	0018      	movs	r0, r3
   29192:	46bd      	mov	sp, r7
   29194:	b006      	add	sp, #24
   29196:	bd80      	pop	{r7, pc}
   29198:	0003da94 	.word	0x0003da94

0002919c <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   2919c:	b580      	push	{r7, lr}
   2919e:	b082      	sub	sp, #8
   291a0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   291a2:	4b10      	ldr	r3, [pc, #64]	; (291e4 <cpu_irq_enter_critical+0x48>)
   291a4:	681b      	ldr	r3, [r3, #0]
   291a6:	2b00      	cmp	r3, #0
   291a8:	d112      	bne.n	291d0 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   291aa:	f3ef 8310 	mrs	r3, PRIMASK
   291ae:	607b      	str	r3, [r7, #4]
  return(result);
   291b0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   291b2:	2b00      	cmp	r3, #0
   291b4:	d109      	bne.n	291ca <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   291b6:	b672      	cpsid	i
   291b8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   291bc:	4b0a      	ldr	r3, [pc, #40]	; (291e8 <cpu_irq_enter_critical+0x4c>)
   291be:	2200      	movs	r2, #0
   291c0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   291c2:	4b0a      	ldr	r3, [pc, #40]	; (291ec <cpu_irq_enter_critical+0x50>)
   291c4:	2201      	movs	r2, #1
   291c6:	701a      	strb	r2, [r3, #0]
   291c8:	e002      	b.n	291d0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   291ca:	4b08      	ldr	r3, [pc, #32]	; (291ec <cpu_irq_enter_critical+0x50>)
   291cc:	2200      	movs	r2, #0
   291ce:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   291d0:	4b04      	ldr	r3, [pc, #16]	; (291e4 <cpu_irq_enter_critical+0x48>)
   291d2:	681b      	ldr	r3, [r3, #0]
   291d4:	1c5a      	adds	r2, r3, #1
   291d6:	4b03      	ldr	r3, [pc, #12]	; (291e4 <cpu_irq_enter_critical+0x48>)
   291d8:	601a      	str	r2, [r3, #0]
}
   291da:	46c0      	nop			; (mov r8, r8)
   291dc:	46bd      	mov	sp, r7
   291de:	b002      	add	sp, #8
   291e0:	bd80      	pop	{r7, pc}
   291e2:	46c0      	nop			; (mov r8, r8)
   291e4:	200041d8 	.word	0x200041d8
   291e8:	200001a2 	.word	0x200001a2
   291ec:	200041dc 	.word	0x200041dc

000291f0 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   291f0:	b580      	push	{r7, lr}
   291f2:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   291f4:	4b0b      	ldr	r3, [pc, #44]	; (29224 <cpu_irq_leave_critical+0x34>)
   291f6:	681b      	ldr	r3, [r3, #0]
   291f8:	1e5a      	subs	r2, r3, #1
   291fa:	4b0a      	ldr	r3, [pc, #40]	; (29224 <cpu_irq_leave_critical+0x34>)
   291fc:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   291fe:	4b09      	ldr	r3, [pc, #36]	; (29224 <cpu_irq_leave_critical+0x34>)
   29200:	681b      	ldr	r3, [r3, #0]
   29202:	2b00      	cmp	r3, #0
   29204:	d10a      	bne.n	2921c <cpu_irq_leave_critical+0x2c>
   29206:	4b08      	ldr	r3, [pc, #32]	; (29228 <cpu_irq_leave_critical+0x38>)
   29208:	781b      	ldrb	r3, [r3, #0]
   2920a:	b2db      	uxtb	r3, r3
   2920c:	2b00      	cmp	r3, #0
   2920e:	d005      	beq.n	2921c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   29210:	4b06      	ldr	r3, [pc, #24]	; (2922c <cpu_irq_leave_critical+0x3c>)
   29212:	2201      	movs	r2, #1
   29214:	701a      	strb	r2, [r3, #0]
   29216:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2921a:	b662      	cpsie	i
	}
}
   2921c:	46c0      	nop			; (mov r8, r8)
   2921e:	46bd      	mov	sp, r7
   29220:	bd80      	pop	{r7, pc}
   29222:	46c0      	nop			; (mov r8, r8)
   29224:	200041d8 	.word	0x200041d8
   29228:	200041dc 	.word	0x200041dc
   2922c:	200001a2 	.word	0x200001a2

00029230 <system_pinmux_get_group_from_gpio_pin>:
{
   29230:	b580      	push	{r7, lr}
   29232:	b084      	sub	sp, #16
   29234:	af00      	add	r7, sp, #0
   29236:	0002      	movs	r2, r0
   29238:	1dfb      	adds	r3, r7, #7
   2923a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2923c:	230f      	movs	r3, #15
   2923e:	18fb      	adds	r3, r7, r3
   29240:	1dfa      	adds	r2, r7, #7
   29242:	7812      	ldrb	r2, [r2, #0]
   29244:	09d2      	lsrs	r2, r2, #7
   29246:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29248:	230e      	movs	r3, #14
   2924a:	18fb      	adds	r3, r7, r3
   2924c:	1dfa      	adds	r2, r7, #7
   2924e:	7812      	ldrb	r2, [r2, #0]
   29250:	0952      	lsrs	r2, r2, #5
   29252:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29254:	4b0d      	ldr	r3, [pc, #52]	; (2928c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29256:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29258:	230f      	movs	r3, #15
   2925a:	18fb      	adds	r3, r7, r3
   2925c:	781b      	ldrb	r3, [r3, #0]
   2925e:	2b00      	cmp	r3, #0
   29260:	d10f      	bne.n	29282 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29262:	230f      	movs	r3, #15
   29264:	18fb      	adds	r3, r7, r3
   29266:	781b      	ldrb	r3, [r3, #0]
   29268:	009b      	lsls	r3, r3, #2
   2926a:	2210      	movs	r2, #16
   2926c:	4694      	mov	ip, r2
   2926e:	44bc      	add	ip, r7
   29270:	4463      	add	r3, ip
   29272:	3b08      	subs	r3, #8
   29274:	681a      	ldr	r2, [r3, #0]
   29276:	230e      	movs	r3, #14
   29278:	18fb      	adds	r3, r7, r3
   2927a:	781b      	ldrb	r3, [r3, #0]
   2927c:	01db      	lsls	r3, r3, #7
   2927e:	18d3      	adds	r3, r2, r3
   29280:	e000      	b.n	29284 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29282:	2300      	movs	r3, #0
}
   29284:	0018      	movs	r0, r3
   29286:	46bd      	mov	sp, r7
   29288:	b004      	add	sp, #16
   2928a:	bd80      	pop	{r7, pc}
   2928c:	41004400 	.word	0x41004400

00029290 <port_get_group_from_gpio_pin>:
{
   29290:	b580      	push	{r7, lr}
   29292:	b082      	sub	sp, #8
   29294:	af00      	add	r7, sp, #0
   29296:	0002      	movs	r2, r0
   29298:	1dfb      	adds	r3, r7, #7
   2929a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2929c:	1dfb      	adds	r3, r7, #7
   2929e:	781b      	ldrb	r3, [r3, #0]
   292a0:	0018      	movs	r0, r3
   292a2:	4b03      	ldr	r3, [pc, #12]	; (292b0 <port_get_group_from_gpio_pin+0x20>)
   292a4:	4798      	blx	r3
   292a6:	0003      	movs	r3, r0
}
   292a8:	0018      	movs	r0, r3
   292aa:	46bd      	mov	sp, r7
   292ac:	b002      	add	sp, #8
   292ae:	bd80      	pop	{r7, pc}
   292b0:	00029231 	.word	0x00029231

000292b4 <port_get_config_defaults>:
{
   292b4:	b580      	push	{r7, lr}
   292b6:	b082      	sub	sp, #8
   292b8:	af00      	add	r7, sp, #0
   292ba:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   292bc:	687b      	ldr	r3, [r7, #4]
   292be:	2200      	movs	r2, #0
   292c0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   292c2:	687b      	ldr	r3, [r7, #4]
   292c4:	2201      	movs	r2, #1
   292c6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   292c8:	687b      	ldr	r3, [r7, #4]
   292ca:	2200      	movs	r2, #0
   292cc:	709a      	strb	r2, [r3, #2]
}
   292ce:	46c0      	nop			; (mov r8, r8)
   292d0:	46bd      	mov	sp, r7
   292d2:	b002      	add	sp, #8
   292d4:	bd80      	pop	{r7, pc}
	...

000292d8 <port_pin_set_output_level>:
{
   292d8:	b580      	push	{r7, lr}
   292da:	b084      	sub	sp, #16
   292dc:	af00      	add	r7, sp, #0
   292de:	0002      	movs	r2, r0
   292e0:	1dfb      	adds	r3, r7, #7
   292e2:	701a      	strb	r2, [r3, #0]
   292e4:	1dbb      	adds	r3, r7, #6
   292e6:	1c0a      	adds	r2, r1, #0
   292e8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   292ea:	1dfb      	adds	r3, r7, #7
   292ec:	781b      	ldrb	r3, [r3, #0]
   292ee:	0018      	movs	r0, r3
   292f0:	4b0d      	ldr	r3, [pc, #52]	; (29328 <port_pin_set_output_level+0x50>)
   292f2:	4798      	blx	r3
   292f4:	0003      	movs	r3, r0
   292f6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   292f8:	1dfb      	adds	r3, r7, #7
   292fa:	781b      	ldrb	r3, [r3, #0]
   292fc:	221f      	movs	r2, #31
   292fe:	4013      	ands	r3, r2
   29300:	2201      	movs	r2, #1
   29302:	409a      	lsls	r2, r3
   29304:	0013      	movs	r3, r2
   29306:	60bb      	str	r3, [r7, #8]
	if (level) {
   29308:	1dbb      	adds	r3, r7, #6
   2930a:	781b      	ldrb	r3, [r3, #0]
   2930c:	2b00      	cmp	r3, #0
   2930e:	d003      	beq.n	29318 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   29310:	68fb      	ldr	r3, [r7, #12]
   29312:	68ba      	ldr	r2, [r7, #8]
   29314:	619a      	str	r2, [r3, #24]
}
   29316:	e002      	b.n	2931e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   29318:	68fb      	ldr	r3, [r7, #12]
   2931a:	68ba      	ldr	r2, [r7, #8]
   2931c:	615a      	str	r2, [r3, #20]
}
   2931e:	46c0      	nop			; (mov r8, r8)
   29320:	46bd      	mov	sp, r7
   29322:	b004      	add	sp, #16
   29324:	bd80      	pop	{r7, pc}
   29326:	46c0      	nop			; (mov r8, r8)
   29328:	00029291 	.word	0x00029291

0002932c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   2932c:	b580      	push	{r7, lr}
   2932e:	b082      	sub	sp, #8
   29330:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   29332:	1d3b      	adds	r3, r7, #4
   29334:	0018      	movs	r0, r3
   29336:	4b0e      	ldr	r3, [pc, #56]	; (29370 <system_board_init+0x44>)
   29338:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   2933a:	1d3b      	adds	r3, r7, #4
   2933c:	2201      	movs	r2, #1
   2933e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   29340:	1d3b      	adds	r3, r7, #4
   29342:	0019      	movs	r1, r3
   29344:	2017      	movs	r0, #23
   29346:	4b0b      	ldr	r3, [pc, #44]	; (29374 <system_board_init+0x48>)
   29348:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   2934a:	2101      	movs	r1, #1
   2934c:	2017      	movs	r0, #23
   2934e:	4b0a      	ldr	r3, [pc, #40]	; (29378 <system_board_init+0x4c>)
   29350:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   29352:	1d3b      	adds	r3, r7, #4
   29354:	2200      	movs	r2, #0
   29356:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   29358:	1d3b      	adds	r3, r7, #4
   2935a:	2201      	movs	r2, #1
   2935c:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2935e:	1d3b      	adds	r3, r7, #4
   29360:	0019      	movs	r1, r3
   29362:	2037      	movs	r0, #55	; 0x37
   29364:	4b03      	ldr	r3, [pc, #12]	; (29374 <system_board_init+0x48>)
   29366:	4798      	blx	r3
}
   29368:	46c0      	nop			; (mov r8, r8)
   2936a:	46bd      	mov	sp, r7
   2936c:	b002      	add	sp, #8
   2936e:	bd80      	pop	{r7, pc}
   29370:	000292b5 	.word	0x000292b5
   29374:	000299a1 	.word	0x000299a1
   29378:	000292d9 	.word	0x000292d9

0002937c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   2937c:	b580      	push	{r7, lr}
   2937e:	b084      	sub	sp, #16
   29380:	af00      	add	r7, sp, #0
   29382:	0002      	movs	r2, r0
   29384:	1dfb      	adds	r3, r7, #7
   29386:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   29388:	230f      	movs	r3, #15
   2938a:	18fb      	adds	r3, r7, r3
   2938c:	1dfa      	adds	r2, r7, #7
   2938e:	7812      	ldrb	r2, [r2, #0]
   29390:	0952      	lsrs	r2, r2, #5
   29392:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   29394:	230f      	movs	r3, #15
   29396:	18fb      	adds	r3, r7, r3
   29398:	781b      	ldrb	r3, [r3, #0]
   2939a:	2b00      	cmp	r3, #0
   2939c:	d10c      	bne.n	293b8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2939e:	4b09      	ldr	r3, [pc, #36]	; (293c4 <_extint_get_eic_from_channel+0x48>)
   293a0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   293a2:	230f      	movs	r3, #15
   293a4:	18fb      	adds	r3, r7, r3
   293a6:	781b      	ldrb	r3, [r3, #0]
   293a8:	009b      	lsls	r3, r3, #2
   293aa:	2210      	movs	r2, #16
   293ac:	4694      	mov	ip, r2
   293ae:	44bc      	add	ip, r7
   293b0:	4463      	add	r3, ip
   293b2:	3b08      	subs	r3, #8
   293b4:	681b      	ldr	r3, [r3, #0]
   293b6:	e000      	b.n	293ba <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   293b8:	2300      	movs	r3, #0
	}
}
   293ba:	0018      	movs	r0, r3
   293bc:	46bd      	mov	sp, r7
   293be:	b004      	add	sp, #16
   293c0:	bd80      	pop	{r7, pc}
   293c2:	46c0      	nop			; (mov r8, r8)
   293c4:	40001800 	.word	0x40001800

000293c8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   293c8:	b580      	push	{r7, lr}
   293ca:	b084      	sub	sp, #16
   293cc:	af00      	add	r7, sp, #0
   293ce:	0002      	movs	r2, r0
   293d0:	1dfb      	adds	r3, r7, #7
   293d2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   293d4:	1dfb      	adds	r3, r7, #7
   293d6:	781b      	ldrb	r3, [r3, #0]
   293d8:	0018      	movs	r0, r3
   293da:	4b0b      	ldr	r3, [pc, #44]	; (29408 <extint_chan_is_detected+0x40>)
   293dc:	4798      	blx	r3
   293de:	0003      	movs	r3, r0
   293e0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   293e2:	1dfb      	adds	r3, r7, #7
   293e4:	781b      	ldrb	r3, [r3, #0]
   293e6:	221f      	movs	r2, #31
   293e8:	4013      	ands	r3, r2
   293ea:	2201      	movs	r2, #1
   293ec:	409a      	lsls	r2, r3
   293ee:	0013      	movs	r3, r2
   293f0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   293f2:	68fb      	ldr	r3, [r7, #12]
   293f4:	691b      	ldr	r3, [r3, #16]
   293f6:	68ba      	ldr	r2, [r7, #8]
   293f8:	4013      	ands	r3, r2
   293fa:	1e5a      	subs	r2, r3, #1
   293fc:	4193      	sbcs	r3, r2
   293fe:	b2db      	uxtb	r3, r3
}
   29400:	0018      	movs	r0, r3
   29402:	46bd      	mov	sp, r7
   29404:	b004      	add	sp, #16
   29406:	bd80      	pop	{r7, pc}
   29408:	0002937d 	.word	0x0002937d

0002940c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   2940c:	b580      	push	{r7, lr}
   2940e:	b084      	sub	sp, #16
   29410:	af00      	add	r7, sp, #0
   29412:	0002      	movs	r2, r0
   29414:	1dfb      	adds	r3, r7, #7
   29416:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   29418:	1dfb      	adds	r3, r7, #7
   2941a:	781b      	ldrb	r3, [r3, #0]
   2941c:	0018      	movs	r0, r3
   2941e:	4b09      	ldr	r3, [pc, #36]	; (29444 <extint_chan_clear_detected+0x38>)
   29420:	4798      	blx	r3
   29422:	0003      	movs	r3, r0
   29424:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   29426:	1dfb      	adds	r3, r7, #7
   29428:	781b      	ldrb	r3, [r3, #0]
   2942a:	221f      	movs	r2, #31
   2942c:	4013      	ands	r3, r2
   2942e:	2201      	movs	r2, #1
   29430:	409a      	lsls	r2, r3
   29432:	0013      	movs	r3, r2
   29434:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   29436:	68fb      	ldr	r3, [r7, #12]
   29438:	68ba      	ldr	r2, [r7, #8]
   2943a:	611a      	str	r2, [r3, #16]
}
   2943c:	46c0      	nop			; (mov r8, r8)
   2943e:	46bd      	mov	sp, r7
   29440:	b004      	add	sp, #16
   29442:	bd80      	pop	{r7, pc}
   29444:	0002937d 	.word	0x0002937d

00029448 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   29448:	b580      	push	{r7, lr}
   2944a:	b082      	sub	sp, #8
   2944c:	af00      	add	r7, sp, #0
   2944e:	6078      	str	r0, [r7, #4]
   29450:	0008      	movs	r0, r1
   29452:	0011      	movs	r1, r2
   29454:	1cfb      	adds	r3, r7, #3
   29456:	1c02      	adds	r2, r0, #0
   29458:	701a      	strb	r2, [r3, #0]
   2945a:	1cbb      	adds	r3, r7, #2
   2945c:	1c0a      	adds	r2, r1, #0
   2945e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   29460:	1cbb      	adds	r3, r7, #2
   29462:	781b      	ldrb	r3, [r3, #0]
   29464:	2b00      	cmp	r3, #0
   29466:	d001      	beq.n	2946c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29468:	2317      	movs	r3, #23
   2946a:	e019      	b.n	294a0 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   2946c:	1cfb      	adds	r3, r7, #3
   2946e:	781a      	ldrb	r2, [r3, #0]
   29470:	4b0d      	ldr	r3, [pc, #52]	; (294a8 <extint_register_callback+0x60>)
   29472:	0092      	lsls	r2, r2, #2
   29474:	58d3      	ldr	r3, [r2, r3]
   29476:	2b00      	cmp	r3, #0
   29478:	d107      	bne.n	2948a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   2947a:	1cfb      	adds	r3, r7, #3
   2947c:	781a      	ldrb	r2, [r3, #0]
   2947e:	4b0a      	ldr	r3, [pc, #40]	; (294a8 <extint_register_callback+0x60>)
   29480:	0092      	lsls	r2, r2, #2
   29482:	6879      	ldr	r1, [r7, #4]
   29484:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   29486:	2300      	movs	r3, #0
   29488:	e00a      	b.n	294a0 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   2948a:	1cfb      	adds	r3, r7, #3
   2948c:	781a      	ldrb	r2, [r3, #0]
   2948e:	4b06      	ldr	r3, [pc, #24]	; (294a8 <extint_register_callback+0x60>)
   29490:	0092      	lsls	r2, r2, #2
   29492:	58d2      	ldr	r2, [r2, r3]
   29494:	687b      	ldr	r3, [r7, #4]
   29496:	429a      	cmp	r2, r3
   29498:	d101      	bne.n	2949e <extint_register_callback+0x56>
		return STATUS_OK;
   2949a:	2300      	movs	r3, #0
   2949c:	e000      	b.n	294a0 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2949e:	231d      	movs	r3, #29
}
   294a0:	0018      	movs	r0, r3
   294a2:	46bd      	mov	sp, r7
   294a4:	b002      	add	sp, #8
   294a6:	bd80      	pop	{r7, pc}
   294a8:	20005bd8 	.word	0x20005bd8

000294ac <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   294ac:	b580      	push	{r7, lr}
   294ae:	b084      	sub	sp, #16
   294b0:	af00      	add	r7, sp, #0
   294b2:	0002      	movs	r2, r0
   294b4:	1dfb      	adds	r3, r7, #7
   294b6:	701a      	strb	r2, [r3, #0]
   294b8:	1dbb      	adds	r3, r7, #6
   294ba:	1c0a      	adds	r2, r1, #0
   294bc:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   294be:	1dbb      	adds	r3, r7, #6
   294c0:	781b      	ldrb	r3, [r3, #0]
   294c2:	2b00      	cmp	r3, #0
   294c4:	d10e      	bne.n	294e4 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   294c6:	1dfb      	adds	r3, r7, #7
   294c8:	781b      	ldrb	r3, [r3, #0]
   294ca:	0018      	movs	r0, r3
   294cc:	4b08      	ldr	r3, [pc, #32]	; (294f0 <extint_chan_enable_callback+0x44>)
   294ce:	4798      	blx	r3
   294d0:	0003      	movs	r3, r0
   294d2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   294d4:	1dfb      	adds	r3, r7, #7
   294d6:	781b      	ldrb	r3, [r3, #0]
   294d8:	2201      	movs	r2, #1
   294da:	409a      	lsls	r2, r3
   294dc:	68fb      	ldr	r3, [r7, #12]
   294de:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   294e0:	2300      	movs	r3, #0
   294e2:	e000      	b.n	294e6 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   294e4:	2317      	movs	r3, #23
}
   294e6:	0018      	movs	r0, r3
   294e8:	46bd      	mov	sp, r7
   294ea:	b004      	add	sp, #16
   294ec:	bd80      	pop	{r7, pc}
   294ee:	46c0      	nop			; (mov r8, r8)
   294f0:	0002937d 	.word	0x0002937d

000294f4 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   294f4:	b580      	push	{r7, lr}
   294f6:	b084      	sub	sp, #16
   294f8:	af00      	add	r7, sp, #0
   294fa:	0002      	movs	r2, r0
   294fc:	1dfb      	adds	r3, r7, #7
   294fe:	701a      	strb	r2, [r3, #0]
   29500:	1dbb      	adds	r3, r7, #6
   29502:	1c0a      	adds	r2, r1, #0
   29504:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   29506:	1dbb      	adds	r3, r7, #6
   29508:	781b      	ldrb	r3, [r3, #0]
   2950a:	2b00      	cmp	r3, #0
   2950c:	d10e      	bne.n	2952c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2950e:	1dfb      	adds	r3, r7, #7
   29510:	781b      	ldrb	r3, [r3, #0]
   29512:	0018      	movs	r0, r3
   29514:	4b08      	ldr	r3, [pc, #32]	; (29538 <extint_chan_disable_callback+0x44>)
   29516:	4798      	blx	r3
   29518:	0003      	movs	r3, r0
   2951a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   2951c:	1dfb      	adds	r3, r7, #7
   2951e:	781b      	ldrb	r3, [r3, #0]
   29520:	2201      	movs	r2, #1
   29522:	409a      	lsls	r2, r3
   29524:	68fb      	ldr	r3, [r7, #12]
   29526:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   29528:	2300      	movs	r3, #0
   2952a:	e000      	b.n	2952e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2952c:	2317      	movs	r3, #23
}
   2952e:	0018      	movs	r0, r3
   29530:	46bd      	mov	sp, r7
   29532:	b004      	add	sp, #16
   29534:	bd80      	pop	{r7, pc}
   29536:	46c0      	nop			; (mov r8, r8)
   29538:	0002937d 	.word	0x0002937d

0002953c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   2953c:	b580      	push	{r7, lr}
   2953e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   29540:	4b15      	ldr	r3, [pc, #84]	; (29598 <EIC_Handler+0x5c>)
   29542:	2200      	movs	r2, #0
   29544:	701a      	strb	r2, [r3, #0]
   29546:	e020      	b.n	2958a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   29548:	4b13      	ldr	r3, [pc, #76]	; (29598 <EIC_Handler+0x5c>)
   2954a:	781b      	ldrb	r3, [r3, #0]
   2954c:	0018      	movs	r0, r3
   2954e:	4b13      	ldr	r3, [pc, #76]	; (2959c <EIC_Handler+0x60>)
   29550:	4798      	blx	r3
   29552:	1e03      	subs	r3, r0, #0
   29554:	d013      	beq.n	2957e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   29556:	4b10      	ldr	r3, [pc, #64]	; (29598 <EIC_Handler+0x5c>)
   29558:	781b      	ldrb	r3, [r3, #0]
   2955a:	0018      	movs	r0, r3
   2955c:	4b10      	ldr	r3, [pc, #64]	; (295a0 <EIC_Handler+0x64>)
   2955e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   29560:	4b0d      	ldr	r3, [pc, #52]	; (29598 <EIC_Handler+0x5c>)
   29562:	781b      	ldrb	r3, [r3, #0]
   29564:	001a      	movs	r2, r3
   29566:	4b0f      	ldr	r3, [pc, #60]	; (295a4 <EIC_Handler+0x68>)
   29568:	0092      	lsls	r2, r2, #2
   2956a:	58d3      	ldr	r3, [r2, r3]
   2956c:	2b00      	cmp	r3, #0
   2956e:	d006      	beq.n	2957e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   29570:	4b09      	ldr	r3, [pc, #36]	; (29598 <EIC_Handler+0x5c>)
   29572:	781b      	ldrb	r3, [r3, #0]
   29574:	001a      	movs	r2, r3
   29576:	4b0b      	ldr	r3, [pc, #44]	; (295a4 <EIC_Handler+0x68>)
   29578:	0092      	lsls	r2, r2, #2
   2957a:	58d3      	ldr	r3, [r2, r3]
   2957c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2957e:	4b06      	ldr	r3, [pc, #24]	; (29598 <EIC_Handler+0x5c>)
   29580:	781b      	ldrb	r3, [r3, #0]
   29582:	3301      	adds	r3, #1
   29584:	b2da      	uxtb	r2, r3
   29586:	4b04      	ldr	r3, [pc, #16]	; (29598 <EIC_Handler+0x5c>)
   29588:	701a      	strb	r2, [r3, #0]
   2958a:	4b03      	ldr	r3, [pc, #12]	; (29598 <EIC_Handler+0x5c>)
   2958c:	781b      	ldrb	r3, [r3, #0]
   2958e:	2b0f      	cmp	r3, #15
   29590:	d9da      	bls.n	29548 <EIC_Handler+0xc>
			}
		}
	}
}
   29592:	46c0      	nop			; (mov r8, r8)
   29594:	46bd      	mov	sp, r7
   29596:	bd80      	pop	{r7, pc}
   29598:	20005bd4 	.word	0x20005bd4
   2959c:	000293c9 	.word	0x000293c9
   295a0:	0002940d 	.word	0x0002940d
   295a4:	20005bd8 	.word	0x20005bd8

000295a8 <system_gclk_chan_get_config_defaults>:
{
   295a8:	b580      	push	{r7, lr}
   295aa:	b082      	sub	sp, #8
   295ac:	af00      	add	r7, sp, #0
   295ae:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   295b0:	687b      	ldr	r3, [r7, #4]
   295b2:	2200      	movs	r2, #0
   295b4:	701a      	strb	r2, [r3, #0]
}
   295b6:	46c0      	nop			; (mov r8, r8)
   295b8:	46bd      	mov	sp, r7
   295ba:	b002      	add	sp, #8
   295bc:	bd80      	pop	{r7, pc}
	...

000295c0 <system_apb_clock_set_mask>:
{
   295c0:	b580      	push	{r7, lr}
   295c2:	b082      	sub	sp, #8
   295c4:	af00      	add	r7, sp, #0
   295c6:	0002      	movs	r2, r0
   295c8:	6039      	str	r1, [r7, #0]
   295ca:	1dfb      	adds	r3, r7, #7
   295cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   295ce:	1dfb      	adds	r3, r7, #7
   295d0:	781b      	ldrb	r3, [r3, #0]
   295d2:	2b01      	cmp	r3, #1
   295d4:	d00a      	beq.n	295ec <system_apb_clock_set_mask+0x2c>
   295d6:	2b02      	cmp	r3, #2
   295d8:	d00f      	beq.n	295fa <system_apb_clock_set_mask+0x3a>
   295da:	2b00      	cmp	r3, #0
   295dc:	d114      	bne.n	29608 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   295de:	4b0e      	ldr	r3, [pc, #56]	; (29618 <system_apb_clock_set_mask+0x58>)
   295e0:	4a0d      	ldr	r2, [pc, #52]	; (29618 <system_apb_clock_set_mask+0x58>)
   295e2:	6991      	ldr	r1, [r2, #24]
   295e4:	683a      	ldr	r2, [r7, #0]
   295e6:	430a      	orrs	r2, r1
   295e8:	619a      	str	r2, [r3, #24]
			break;
   295ea:	e00f      	b.n	2960c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   295ec:	4b0a      	ldr	r3, [pc, #40]	; (29618 <system_apb_clock_set_mask+0x58>)
   295ee:	4a0a      	ldr	r2, [pc, #40]	; (29618 <system_apb_clock_set_mask+0x58>)
   295f0:	69d1      	ldr	r1, [r2, #28]
   295f2:	683a      	ldr	r2, [r7, #0]
   295f4:	430a      	orrs	r2, r1
   295f6:	61da      	str	r2, [r3, #28]
			break;
   295f8:	e008      	b.n	2960c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   295fa:	4b07      	ldr	r3, [pc, #28]	; (29618 <system_apb_clock_set_mask+0x58>)
   295fc:	4a06      	ldr	r2, [pc, #24]	; (29618 <system_apb_clock_set_mask+0x58>)
   295fe:	6a11      	ldr	r1, [r2, #32]
   29600:	683a      	ldr	r2, [r7, #0]
   29602:	430a      	orrs	r2, r1
   29604:	621a      	str	r2, [r3, #32]
			break;
   29606:	e001      	b.n	2960c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29608:	2317      	movs	r3, #23
   2960a:	e000      	b.n	2960e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2960c:	2300      	movs	r3, #0
}
   2960e:	0018      	movs	r0, r3
   29610:	46bd      	mov	sp, r7
   29612:	b002      	add	sp, #8
   29614:	bd80      	pop	{r7, pc}
   29616:	46c0      	nop			; (mov r8, r8)
   29618:	40000400 	.word	0x40000400

0002961c <system_pinmux_get_config_defaults>:
{
   2961c:	b580      	push	{r7, lr}
   2961e:	b082      	sub	sp, #8
   29620:	af00      	add	r7, sp, #0
   29622:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29624:	687b      	ldr	r3, [r7, #4]
   29626:	2280      	movs	r2, #128	; 0x80
   29628:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2962a:	687b      	ldr	r3, [r7, #4]
   2962c:	2200      	movs	r2, #0
   2962e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29630:	687b      	ldr	r3, [r7, #4]
   29632:	2201      	movs	r2, #1
   29634:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29636:	687b      	ldr	r3, [r7, #4]
   29638:	2200      	movs	r2, #0
   2963a:	70da      	strb	r2, [r3, #3]
}
   2963c:	46c0      	nop			; (mov r8, r8)
   2963e:	46bd      	mov	sp, r7
   29640:	b002      	add	sp, #8
   29642:	bd80      	pop	{r7, pc}

00029644 <system_interrupt_enable>:
{
   29644:	b580      	push	{r7, lr}
   29646:	b082      	sub	sp, #8
   29648:	af00      	add	r7, sp, #0
   2964a:	0002      	movs	r2, r0
   2964c:	1dfb      	adds	r3, r7, #7
   2964e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   29650:	4b06      	ldr	r3, [pc, #24]	; (2966c <system_interrupt_enable+0x28>)
   29652:	1dfa      	adds	r2, r7, #7
   29654:	7812      	ldrb	r2, [r2, #0]
   29656:	0011      	movs	r1, r2
   29658:	221f      	movs	r2, #31
   2965a:	400a      	ands	r2, r1
   2965c:	2101      	movs	r1, #1
   2965e:	4091      	lsls	r1, r2
   29660:	000a      	movs	r2, r1
   29662:	601a      	str	r2, [r3, #0]
}
   29664:	46c0      	nop			; (mov r8, r8)
   29666:	46bd      	mov	sp, r7
   29668:	b002      	add	sp, #8
   2966a:	bd80      	pop	{r7, pc}
   2966c:	e000e100 	.word	0xe000e100

00029670 <_extint_get_eic_from_channel>:
{
   29670:	b580      	push	{r7, lr}
   29672:	b084      	sub	sp, #16
   29674:	af00      	add	r7, sp, #0
   29676:	0002      	movs	r2, r0
   29678:	1dfb      	adds	r3, r7, #7
   2967a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   2967c:	230f      	movs	r3, #15
   2967e:	18fb      	adds	r3, r7, r3
   29680:	1dfa      	adds	r2, r7, #7
   29682:	7812      	ldrb	r2, [r2, #0]
   29684:	0952      	lsrs	r2, r2, #5
   29686:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   29688:	230f      	movs	r3, #15
   2968a:	18fb      	adds	r3, r7, r3
   2968c:	781b      	ldrb	r3, [r3, #0]
   2968e:	2b00      	cmp	r3, #0
   29690:	d10c      	bne.n	296ac <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   29692:	4b09      	ldr	r3, [pc, #36]	; (296b8 <_extint_get_eic_from_channel+0x48>)
   29694:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   29696:	230f      	movs	r3, #15
   29698:	18fb      	adds	r3, r7, r3
   2969a:	781b      	ldrb	r3, [r3, #0]
   2969c:	009b      	lsls	r3, r3, #2
   2969e:	2210      	movs	r2, #16
   296a0:	4694      	mov	ip, r2
   296a2:	44bc      	add	ip, r7
   296a4:	4463      	add	r3, ip
   296a6:	3b08      	subs	r3, #8
   296a8:	681b      	ldr	r3, [r3, #0]
   296aa:	e000      	b.n	296ae <_extint_get_eic_from_channel+0x3e>
		return NULL;
   296ac:	2300      	movs	r3, #0
}
   296ae:	0018      	movs	r0, r3
   296b0:	46bd      	mov	sp, r7
   296b2:	b004      	add	sp, #16
   296b4:	bd80      	pop	{r7, pc}
   296b6:	46c0      	nop			; (mov r8, r8)
   296b8:	40001800 	.word	0x40001800

000296bc <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   296bc:	b580      	push	{r7, lr}
   296be:	b082      	sub	sp, #8
   296c0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   296c2:	4b0f      	ldr	r3, [pc, #60]	; (29700 <extint_is_syncing+0x44>)
   296c4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   296c6:	2300      	movs	r3, #0
   296c8:	607b      	str	r3, [r7, #4]
   296ca:	e011      	b.n	296f0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   296cc:	687b      	ldr	r3, [r7, #4]
   296ce:	009b      	lsls	r3, r3, #2
   296d0:	2208      	movs	r2, #8
   296d2:	4694      	mov	ip, r2
   296d4:	44bc      	add	ip, r7
   296d6:	4463      	add	r3, ip
   296d8:	3b08      	subs	r3, #8
   296da:	681b      	ldr	r3, [r3, #0]
   296dc:	785b      	ldrb	r3, [r3, #1]
   296de:	b2db      	uxtb	r3, r3
   296e0:	b25b      	sxtb	r3, r3
   296e2:	2b00      	cmp	r3, #0
   296e4:	da01      	bge.n	296ea <extint_is_syncing+0x2e>
			return true;
   296e6:	2301      	movs	r3, #1
   296e8:	e006      	b.n	296f8 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   296ea:	687b      	ldr	r3, [r7, #4]
   296ec:	3301      	adds	r3, #1
   296ee:	607b      	str	r3, [r7, #4]
   296f0:	687b      	ldr	r3, [r7, #4]
   296f2:	2b00      	cmp	r3, #0
   296f4:	d0ea      	beq.n	296cc <extint_is_syncing+0x10>
		}
	}
	return false;
   296f6:	2300      	movs	r3, #0
}
   296f8:	0018      	movs	r0, r3
   296fa:	46bd      	mov	sp, r7
   296fc:	b002      	add	sp, #8
   296fe:	bd80      	pop	{r7, pc}
   29700:	40001800 	.word	0x40001800

00029704 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   29704:	b580      	push	{r7, lr}
   29706:	b084      	sub	sp, #16
   29708:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2970a:	4b2d      	ldr	r3, [pc, #180]	; (297c0 <_system_extint_init+0xbc>)
   2970c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2970e:	2140      	movs	r1, #64	; 0x40
   29710:	2000      	movs	r0, #0
   29712:	4b2c      	ldr	r3, [pc, #176]	; (297c4 <_system_extint_init+0xc0>)
   29714:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29716:	003b      	movs	r3, r7
   29718:	0018      	movs	r0, r3
   2971a:	4b2b      	ldr	r3, [pc, #172]	; (297c8 <_system_extint_init+0xc4>)
   2971c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2971e:	003b      	movs	r3, r7
   29720:	2200      	movs	r2, #0
   29722:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   29724:	003b      	movs	r3, r7
   29726:	0019      	movs	r1, r3
   29728:	2005      	movs	r0, #5
   2972a:	4b28      	ldr	r3, [pc, #160]	; (297cc <_system_extint_init+0xc8>)
   2972c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2972e:	2005      	movs	r0, #5
   29730:	4b27      	ldr	r3, [pc, #156]	; (297d0 <_system_extint_init+0xcc>)
   29732:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   29734:	2300      	movs	r3, #0
   29736:	60fb      	str	r3, [r7, #12]
   29738:	e018      	b.n	2976c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   2973a:	68fb      	ldr	r3, [r7, #12]
   2973c:	009b      	lsls	r3, r3, #2
   2973e:	2210      	movs	r2, #16
   29740:	4694      	mov	ip, r2
   29742:	44bc      	add	ip, r7
   29744:	4463      	add	r3, ip
   29746:	3b0c      	subs	r3, #12
   29748:	681a      	ldr	r2, [r3, #0]
   2974a:	68fb      	ldr	r3, [r7, #12]
   2974c:	009b      	lsls	r3, r3, #2
   2974e:	2110      	movs	r1, #16
   29750:	468c      	mov	ip, r1
   29752:	44bc      	add	ip, r7
   29754:	4463      	add	r3, ip
   29756:	3b0c      	subs	r3, #12
   29758:	681b      	ldr	r3, [r3, #0]
   2975a:	781b      	ldrb	r3, [r3, #0]
   2975c:	b2db      	uxtb	r3, r3
   2975e:	2101      	movs	r1, #1
   29760:	430b      	orrs	r3, r1
   29762:	b2db      	uxtb	r3, r3
   29764:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   29766:	68fb      	ldr	r3, [r7, #12]
   29768:	3301      	adds	r3, #1
   2976a:	60fb      	str	r3, [r7, #12]
   2976c:	68fb      	ldr	r3, [r7, #12]
   2976e:	2b00      	cmp	r3, #0
   29770:	d0e3      	beq.n	2973a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   29772:	46c0      	nop			; (mov r8, r8)
   29774:	4b17      	ldr	r3, [pc, #92]	; (297d4 <_system_extint_init+0xd0>)
   29776:	4798      	blx	r3
   29778:	1e03      	subs	r3, r0, #0
   2977a:	d1fb      	bne.n	29774 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2977c:	230b      	movs	r3, #11
   2977e:	18fb      	adds	r3, r7, r3
   29780:	2200      	movs	r2, #0
   29782:	701a      	strb	r2, [r3, #0]
   29784:	e00d      	b.n	297a2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   29786:	230b      	movs	r3, #11
   29788:	18fb      	adds	r3, r7, r3
   2978a:	781a      	ldrb	r2, [r3, #0]
   2978c:	4b12      	ldr	r3, [pc, #72]	; (297d8 <_system_extint_init+0xd4>)
   2978e:	0092      	lsls	r2, r2, #2
   29790:	2100      	movs	r1, #0
   29792:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   29794:	230b      	movs	r3, #11
   29796:	18fb      	adds	r3, r7, r3
   29798:	781a      	ldrb	r2, [r3, #0]
   2979a:	230b      	movs	r3, #11
   2979c:	18fb      	adds	r3, r7, r3
   2979e:	3201      	adds	r2, #1
   297a0:	701a      	strb	r2, [r3, #0]
   297a2:	230b      	movs	r3, #11
   297a4:	18fb      	adds	r3, r7, r3
   297a6:	781b      	ldrb	r3, [r3, #0]
   297a8:	2b0f      	cmp	r3, #15
   297aa:	d9ec      	bls.n	29786 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   297ac:	2004      	movs	r0, #4
   297ae:	4b0b      	ldr	r3, [pc, #44]	; (297dc <_system_extint_init+0xd8>)
   297b0:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   297b2:	4b0b      	ldr	r3, [pc, #44]	; (297e0 <_system_extint_init+0xdc>)
   297b4:	4798      	blx	r3
}
   297b6:	46c0      	nop			; (mov r8, r8)
   297b8:	46bd      	mov	sp, r7
   297ba:	b004      	add	sp, #16
   297bc:	bd80      	pop	{r7, pc}
   297be:	46c0      	nop			; (mov r8, r8)
   297c0:	40001800 	.word	0x40001800
   297c4:	000295c1 	.word	0x000295c1
   297c8:	000295a9 	.word	0x000295a9
   297cc:	0002ce31 	.word	0x0002ce31
   297d0:	0002ce75 	.word	0x0002ce75
   297d4:	000296bd 	.word	0x000296bd
   297d8:	20005bd8 	.word	0x20005bd8
   297dc:	00029645 	.word	0x00029645
   297e0:	000297e5 	.word	0x000297e5

000297e4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   297e4:	b580      	push	{r7, lr}
   297e6:	b082      	sub	sp, #8
   297e8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   297ea:	4b15      	ldr	r3, [pc, #84]	; (29840 <_extint_enable+0x5c>)
   297ec:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   297ee:	2300      	movs	r3, #0
   297f0:	607b      	str	r3, [r7, #4]
   297f2:	e018      	b.n	29826 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   297f4:	687b      	ldr	r3, [r7, #4]
   297f6:	009b      	lsls	r3, r3, #2
   297f8:	2208      	movs	r2, #8
   297fa:	4694      	mov	ip, r2
   297fc:	44bc      	add	ip, r7
   297fe:	4463      	add	r3, ip
   29800:	3b08      	subs	r3, #8
   29802:	681a      	ldr	r2, [r3, #0]
   29804:	687b      	ldr	r3, [r7, #4]
   29806:	009b      	lsls	r3, r3, #2
   29808:	2108      	movs	r1, #8
   2980a:	468c      	mov	ip, r1
   2980c:	44bc      	add	ip, r7
   2980e:	4463      	add	r3, ip
   29810:	3b08      	subs	r3, #8
   29812:	681b      	ldr	r3, [r3, #0]
   29814:	781b      	ldrb	r3, [r3, #0]
   29816:	b2db      	uxtb	r3, r3
   29818:	2102      	movs	r1, #2
   2981a:	430b      	orrs	r3, r1
   2981c:	b2db      	uxtb	r3, r3
   2981e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   29820:	687b      	ldr	r3, [r7, #4]
   29822:	3301      	adds	r3, #1
   29824:	607b      	str	r3, [r7, #4]
   29826:	687b      	ldr	r3, [r7, #4]
   29828:	2b00      	cmp	r3, #0
   2982a:	d0e3      	beq.n	297f4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   2982c:	46c0      	nop			; (mov r8, r8)
   2982e:	4b05      	ldr	r3, [pc, #20]	; (29844 <_extint_enable+0x60>)
   29830:	4798      	blx	r3
   29832:	1e03      	subs	r3, r0, #0
   29834:	d1fb      	bne.n	2982e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   29836:	46c0      	nop			; (mov r8, r8)
   29838:	46bd      	mov	sp, r7
   2983a:	b002      	add	sp, #8
   2983c:	bd80      	pop	{r7, pc}
   2983e:	46c0      	nop			; (mov r8, r8)
   29840:	40001800 	.word	0x40001800
   29844:	000296bd 	.word	0x000296bd

00029848 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   29848:	b580      	push	{r7, lr}
   2984a:	b082      	sub	sp, #8
   2984c:	af00      	add	r7, sp, #0
   2984e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   29850:	687b      	ldr	r3, [r7, #4]
   29852:	2200      	movs	r2, #0
   29854:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   29856:	687b      	ldr	r3, [r7, #4]
   29858:	2200      	movs	r2, #0
   2985a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   2985c:	687b      	ldr	r3, [r7, #4]
   2985e:	2201      	movs	r2, #1
   29860:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   29862:	687b      	ldr	r3, [r7, #4]
   29864:	2201      	movs	r2, #1
   29866:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   29868:	687b      	ldr	r3, [r7, #4]
   2986a:	2200      	movs	r2, #0
   2986c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2986e:	687b      	ldr	r3, [r7, #4]
   29870:	2202      	movs	r2, #2
   29872:	72da      	strb	r2, [r3, #11]
}
   29874:	46c0      	nop			; (mov r8, r8)
   29876:	46bd      	mov	sp, r7
   29878:	b002      	add	sp, #8
   2987a:	bd80      	pop	{r7, pc}

0002987c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   2987c:	b580      	push	{r7, lr}
   2987e:	b086      	sub	sp, #24
   29880:	af00      	add	r7, sp, #0
   29882:	0002      	movs	r2, r0
   29884:	6039      	str	r1, [r7, #0]
   29886:	1dfb      	adds	r3, r7, #7
   29888:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2988a:	2308      	movs	r3, #8
   2988c:	18fb      	adds	r3, r7, r3
   2988e:	0018      	movs	r0, r3
   29890:	4b36      	ldr	r3, [pc, #216]	; (2996c <extint_chan_set_config+0xf0>)
   29892:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   29894:	683b      	ldr	r3, [r7, #0]
   29896:	685b      	ldr	r3, [r3, #4]
   29898:	b2da      	uxtb	r2, r3
   2989a:	2308      	movs	r3, #8
   2989c:	18fb      	adds	r3, r7, r3
   2989e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   298a0:	2308      	movs	r3, #8
   298a2:	18fb      	adds	r3, r7, r3
   298a4:	2200      	movs	r2, #0
   298a6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   298a8:	683b      	ldr	r3, [r7, #0]
   298aa:	7a1a      	ldrb	r2, [r3, #8]
   298ac:	2308      	movs	r3, #8
   298ae:	18fb      	adds	r3, r7, r3
   298b0:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   298b2:	683b      	ldr	r3, [r7, #0]
   298b4:	681b      	ldr	r3, [r3, #0]
   298b6:	b2db      	uxtb	r3, r3
   298b8:	2208      	movs	r2, #8
   298ba:	18ba      	adds	r2, r7, r2
   298bc:	0011      	movs	r1, r2
   298be:	0018      	movs	r0, r3
   298c0:	4b2b      	ldr	r3, [pc, #172]	; (29970 <extint_chan_set_config+0xf4>)
   298c2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   298c4:	1dfb      	adds	r3, r7, #7
   298c6:	781b      	ldrb	r3, [r3, #0]
   298c8:	0018      	movs	r0, r3
   298ca:	4b2a      	ldr	r3, [pc, #168]	; (29974 <extint_chan_set_config+0xf8>)
   298cc:	4798      	blx	r3
   298ce:	0003      	movs	r3, r0
   298d0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   298d2:	1dfb      	adds	r3, r7, #7
   298d4:	781b      	ldrb	r3, [r3, #0]
   298d6:	2207      	movs	r2, #7
   298d8:	4013      	ands	r3, r2
   298da:	009b      	lsls	r3, r3, #2
   298dc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   298de:	683b      	ldr	r3, [r7, #0]
   298e0:	7adb      	ldrb	r3, [r3, #11]
   298e2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   298e4:	683b      	ldr	r3, [r7, #0]
   298e6:	7a9b      	ldrb	r3, [r3, #10]
   298e8:	2b00      	cmp	r3, #0
   298ea:	d003      	beq.n	298f4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   298ec:	697b      	ldr	r3, [r7, #20]
   298ee:	2208      	movs	r2, #8
   298f0:	4313      	orrs	r3, r2
   298f2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   298f4:	1dfb      	adds	r3, r7, #7
   298f6:	781b      	ldrb	r3, [r3, #0]
   298f8:	08db      	lsrs	r3, r3, #3
   298fa:	b2db      	uxtb	r3, r3
   298fc:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   298fe:	1dfb      	adds	r3, r7, #7
   29900:	781b      	ldrb	r3, [r3, #0]
   29902:	08db      	lsrs	r3, r3, #3
   29904:	b2db      	uxtb	r3, r3
   29906:	001a      	movs	r2, r3
   29908:	693b      	ldr	r3, [r7, #16]
   2990a:	3206      	adds	r2, #6
   2990c:	0092      	lsls	r2, r2, #2
   2990e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   29910:	210f      	movs	r1, #15
   29912:	68fa      	ldr	r2, [r7, #12]
   29914:	4091      	lsls	r1, r2
   29916:	000a      	movs	r2, r1
   29918:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   2991a:	401a      	ands	r2, r3
			(new_config << config_pos);
   2991c:	6979      	ldr	r1, [r7, #20]
   2991e:	68fb      	ldr	r3, [r7, #12]
   29920:	4099      	lsls	r1, r3
   29922:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   29924:	431a      	orrs	r2, r3
   29926:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   29928:	693b      	ldr	r3, [r7, #16]
   2992a:	1d82      	adds	r2, r0, #6
   2992c:	0092      	lsls	r2, r2, #2
   2992e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   29930:	683b      	ldr	r3, [r7, #0]
   29932:	7a5b      	ldrb	r3, [r3, #9]
   29934:	2b00      	cmp	r3, #0
   29936:	d00a      	beq.n	2994e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   29938:	693b      	ldr	r3, [r7, #16]
   2993a:	695a      	ldr	r2, [r3, #20]
   2993c:	1dfb      	adds	r3, r7, #7
   2993e:	781b      	ldrb	r3, [r3, #0]
   29940:	2101      	movs	r1, #1
   29942:	4099      	lsls	r1, r3
   29944:	000b      	movs	r3, r1
   29946:	431a      	orrs	r2, r3
   29948:	693b      	ldr	r3, [r7, #16]
   2994a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   2994c:	e00a      	b.n	29964 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2994e:	693b      	ldr	r3, [r7, #16]
   29950:	695b      	ldr	r3, [r3, #20]
   29952:	1dfa      	adds	r2, r7, #7
   29954:	7812      	ldrb	r2, [r2, #0]
   29956:	2101      	movs	r1, #1
   29958:	4091      	lsls	r1, r2
   2995a:	000a      	movs	r2, r1
   2995c:	43d2      	mvns	r2, r2
   2995e:	401a      	ands	r2, r3
   29960:	693b      	ldr	r3, [r7, #16]
   29962:	615a      	str	r2, [r3, #20]
}
   29964:	46c0      	nop			; (mov r8, r8)
   29966:	46bd      	mov	sp, r7
   29968:	b006      	add	sp, #24
   2996a:	bd80      	pop	{r7, pc}
   2996c:	0002961d 	.word	0x0002961d
   29970:	0002d191 	.word	0x0002d191
   29974:	00029671 	.word	0x00029671

00029978 <system_pinmux_get_config_defaults>:
{
   29978:	b580      	push	{r7, lr}
   2997a:	b082      	sub	sp, #8
   2997c:	af00      	add	r7, sp, #0
   2997e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29980:	687b      	ldr	r3, [r7, #4]
   29982:	2280      	movs	r2, #128	; 0x80
   29984:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29986:	687b      	ldr	r3, [r7, #4]
   29988:	2200      	movs	r2, #0
   2998a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2998c:	687b      	ldr	r3, [r7, #4]
   2998e:	2201      	movs	r2, #1
   29990:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29992:	687b      	ldr	r3, [r7, #4]
   29994:	2200      	movs	r2, #0
   29996:	70da      	strb	r2, [r3, #3]
}
   29998:	46c0      	nop			; (mov r8, r8)
   2999a:	46bd      	mov	sp, r7
   2999c:	b002      	add	sp, #8
   2999e:	bd80      	pop	{r7, pc}

000299a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   299a0:	b580      	push	{r7, lr}
   299a2:	b084      	sub	sp, #16
   299a4:	af00      	add	r7, sp, #0
   299a6:	0002      	movs	r2, r0
   299a8:	6039      	str	r1, [r7, #0]
   299aa:	1dfb      	adds	r3, r7, #7
   299ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   299ae:	230c      	movs	r3, #12
   299b0:	18fb      	adds	r3, r7, r3
   299b2:	0018      	movs	r0, r3
   299b4:	4b10      	ldr	r3, [pc, #64]	; (299f8 <port_pin_set_config+0x58>)
   299b6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   299b8:	230c      	movs	r3, #12
   299ba:	18fb      	adds	r3, r7, r3
   299bc:	2280      	movs	r2, #128	; 0x80
   299be:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   299c0:	683b      	ldr	r3, [r7, #0]
   299c2:	781a      	ldrb	r2, [r3, #0]
   299c4:	230c      	movs	r3, #12
   299c6:	18fb      	adds	r3, r7, r3
   299c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   299ca:	683b      	ldr	r3, [r7, #0]
   299cc:	785a      	ldrb	r2, [r3, #1]
   299ce:	230c      	movs	r3, #12
   299d0:	18fb      	adds	r3, r7, r3
   299d2:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   299d4:	683b      	ldr	r3, [r7, #0]
   299d6:	789a      	ldrb	r2, [r3, #2]
   299d8:	230c      	movs	r3, #12
   299da:	18fb      	adds	r3, r7, r3
   299dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   299de:	230c      	movs	r3, #12
   299e0:	18fa      	adds	r2, r7, r3
   299e2:	1dfb      	adds	r3, r7, #7
   299e4:	781b      	ldrb	r3, [r3, #0]
   299e6:	0011      	movs	r1, r2
   299e8:	0018      	movs	r0, r3
   299ea:	4b04      	ldr	r3, [pc, #16]	; (299fc <port_pin_set_config+0x5c>)
   299ec:	4798      	blx	r3
}
   299ee:	46c0      	nop			; (mov r8, r8)
   299f0:	46bd      	mov	sp, r7
   299f2:	b004      	add	sp, #16
   299f4:	bd80      	pop	{r7, pc}
   299f6:	46c0      	nop			; (mov r8, r8)
   299f8:	00029979 	.word	0x00029979
   299fc:	0002d191 	.word	0x0002d191

00029a00 <system_gclk_chan_get_config_defaults>:
{
   29a00:	b580      	push	{r7, lr}
   29a02:	b082      	sub	sp, #8
   29a04:	af00      	add	r7, sp, #0
   29a06:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29a08:	687b      	ldr	r3, [r7, #4]
   29a0a:	2200      	movs	r2, #0
   29a0c:	701a      	strb	r2, [r3, #0]
}
   29a0e:	46c0      	nop			; (mov r8, r8)
   29a10:	46bd      	mov	sp, r7
   29a12:	b002      	add	sp, #8
   29a14:	bd80      	pop	{r7, pc}
	...

00029a18 <system_apb_clock_set_mask>:
{
   29a18:	b580      	push	{r7, lr}
   29a1a:	b082      	sub	sp, #8
   29a1c:	af00      	add	r7, sp, #0
   29a1e:	0002      	movs	r2, r0
   29a20:	6039      	str	r1, [r7, #0]
   29a22:	1dfb      	adds	r3, r7, #7
   29a24:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29a26:	1dfb      	adds	r3, r7, #7
   29a28:	781b      	ldrb	r3, [r3, #0]
   29a2a:	2b01      	cmp	r3, #1
   29a2c:	d00a      	beq.n	29a44 <system_apb_clock_set_mask+0x2c>
   29a2e:	2b02      	cmp	r3, #2
   29a30:	d00f      	beq.n	29a52 <system_apb_clock_set_mask+0x3a>
   29a32:	2b00      	cmp	r3, #0
   29a34:	d114      	bne.n	29a60 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29a36:	4b0e      	ldr	r3, [pc, #56]	; (29a70 <system_apb_clock_set_mask+0x58>)
   29a38:	4a0d      	ldr	r2, [pc, #52]	; (29a70 <system_apb_clock_set_mask+0x58>)
   29a3a:	6991      	ldr	r1, [r2, #24]
   29a3c:	683a      	ldr	r2, [r7, #0]
   29a3e:	430a      	orrs	r2, r1
   29a40:	619a      	str	r2, [r3, #24]
			break;
   29a42:	e00f      	b.n	29a64 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29a44:	4b0a      	ldr	r3, [pc, #40]	; (29a70 <system_apb_clock_set_mask+0x58>)
   29a46:	4a0a      	ldr	r2, [pc, #40]	; (29a70 <system_apb_clock_set_mask+0x58>)
   29a48:	69d1      	ldr	r1, [r2, #28]
   29a4a:	683a      	ldr	r2, [r7, #0]
   29a4c:	430a      	orrs	r2, r1
   29a4e:	61da      	str	r2, [r3, #28]
			break;
   29a50:	e008      	b.n	29a64 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29a52:	4b07      	ldr	r3, [pc, #28]	; (29a70 <system_apb_clock_set_mask+0x58>)
   29a54:	4a06      	ldr	r2, [pc, #24]	; (29a70 <system_apb_clock_set_mask+0x58>)
   29a56:	6a11      	ldr	r1, [r2, #32]
   29a58:	683a      	ldr	r2, [r7, #0]
   29a5a:	430a      	orrs	r2, r1
   29a5c:	621a      	str	r2, [r3, #32]
			break;
   29a5e:	e001      	b.n	29a64 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29a60:	2317      	movs	r3, #23
   29a62:	e000      	b.n	29a66 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29a64:	2300      	movs	r3, #0
}
   29a66:	0018      	movs	r0, r3
   29a68:	46bd      	mov	sp, r7
   29a6a:	b002      	add	sp, #8
   29a6c:	bd80      	pop	{r7, pc}
   29a6e:	46c0      	nop			; (mov r8, r8)
   29a70:	40000400 	.word	0x40000400

00029a74 <system_interrupt_enable>:
{
   29a74:	b580      	push	{r7, lr}
   29a76:	b082      	sub	sp, #8
   29a78:	af00      	add	r7, sp, #0
   29a7a:	0002      	movs	r2, r0
   29a7c:	1dfb      	adds	r3, r7, #7
   29a7e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   29a80:	4b06      	ldr	r3, [pc, #24]	; (29a9c <system_interrupt_enable+0x28>)
   29a82:	1dfa      	adds	r2, r7, #7
   29a84:	7812      	ldrb	r2, [r2, #0]
   29a86:	0011      	movs	r1, r2
   29a88:	221f      	movs	r2, #31
   29a8a:	400a      	ands	r2, r1
   29a8c:	2101      	movs	r1, #1
   29a8e:	4091      	lsls	r1, r2
   29a90:	000a      	movs	r2, r1
   29a92:	601a      	str	r2, [r3, #0]
}
   29a94:	46c0      	nop			; (mov r8, r8)
   29a96:	46bd      	mov	sp, r7
   29a98:	b002      	add	sp, #8
   29a9a:	bd80      	pop	{r7, pc}
   29a9c:	e000e100 	.word	0xe000e100

00029aa0 <system_interrupt_disable>:
{
   29aa0:	b580      	push	{r7, lr}
   29aa2:	b082      	sub	sp, #8
   29aa4:	af00      	add	r7, sp, #0
   29aa6:	0002      	movs	r2, r0
   29aa8:	1dfb      	adds	r3, r7, #7
   29aaa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   29aac:	4a07      	ldr	r2, [pc, #28]	; (29acc <system_interrupt_disable+0x2c>)
   29aae:	1dfb      	adds	r3, r7, #7
   29ab0:	781b      	ldrb	r3, [r3, #0]
   29ab2:	0019      	movs	r1, r3
   29ab4:	231f      	movs	r3, #31
   29ab6:	400b      	ands	r3, r1
   29ab8:	2101      	movs	r1, #1
   29aba:	4099      	lsls	r1, r3
   29abc:	000b      	movs	r3, r1
   29abe:	0019      	movs	r1, r3
   29ac0:	2380      	movs	r3, #128	; 0x80
   29ac2:	50d1      	str	r1, [r2, r3]
}
   29ac4:	46c0      	nop			; (mov r8, r8)
   29ac6:	46bd      	mov	sp, r7
   29ac8:	b002      	add	sp, #8
   29aca:	bd80      	pop	{r7, pc}
   29acc:	e000e100 	.word	0xe000e100

00029ad0 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   29ad0:	b580      	push	{r7, lr}
   29ad2:	b084      	sub	sp, #16
   29ad4:	af00      	add	r7, sp, #0
   29ad6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29ad8:	687b      	ldr	r3, [r7, #4]
   29ada:	681b      	ldr	r3, [r3, #0]
   29adc:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   29ade:	68fb      	ldr	r3, [r7, #12]
   29ae0:	7a9b      	ldrb	r3, [r3, #10]
   29ae2:	b2db      	uxtb	r3, r3
   29ae4:	b25b      	sxtb	r3, r3
   29ae6:	2b00      	cmp	r3, #0
   29ae8:	da01      	bge.n	29aee <rtc_calendar_is_syncing+0x1e>
                return true;
   29aea:	2301      	movs	r3, #1
   29aec:	e000      	b.n	29af0 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   29aee:	2300      	movs	r3, #0
}
   29af0:	0018      	movs	r0, r3
   29af2:	46bd      	mov	sp, r7
   29af4:	b004      	add	sp, #16
   29af6:	bd80      	pop	{r7, pc}

00029af8 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   29af8:	b580      	push	{r7, lr}
   29afa:	b084      	sub	sp, #16
   29afc:	af00      	add	r7, sp, #0
   29afe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29b00:	687b      	ldr	r3, [r7, #4]
   29b02:	681b      	ldr	r3, [r3, #0]
   29b04:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   29b06:	2003      	movs	r0, #3
   29b08:	4b0a      	ldr	r3, [pc, #40]	; (29b34 <rtc_calendar_enable+0x3c>)
   29b0a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   29b0c:	46c0      	nop			; (mov r8, r8)
   29b0e:	687b      	ldr	r3, [r7, #4]
   29b10:	0018      	movs	r0, r3
   29b12:	4b09      	ldr	r3, [pc, #36]	; (29b38 <rtc_calendar_enable+0x40>)
   29b14:	4798      	blx	r3
   29b16:	1e03      	subs	r3, r0, #0
   29b18:	d1f9      	bne.n	29b0e <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   29b1a:	68fb      	ldr	r3, [r7, #12]
   29b1c:	881b      	ldrh	r3, [r3, #0]
   29b1e:	b29b      	uxth	r3, r3
   29b20:	2202      	movs	r2, #2
   29b22:	4313      	orrs	r3, r2
   29b24:	b29a      	uxth	r2, r3
   29b26:	68fb      	ldr	r3, [r7, #12]
   29b28:	801a      	strh	r2, [r3, #0]
}
   29b2a:	46c0      	nop			; (mov r8, r8)
   29b2c:	46bd      	mov	sp, r7
   29b2e:	b004      	add	sp, #16
   29b30:	bd80      	pop	{r7, pc}
   29b32:	46c0      	nop			; (mov r8, r8)
   29b34:	00029a75 	.word	0x00029a75
   29b38:	00029ad1 	.word	0x00029ad1

00029b3c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   29b3c:	b580      	push	{r7, lr}
   29b3e:	b084      	sub	sp, #16
   29b40:	af00      	add	r7, sp, #0
   29b42:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29b44:	687b      	ldr	r3, [r7, #4]
   29b46:	681b      	ldr	r3, [r3, #0]
   29b48:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   29b4a:	2003      	movs	r0, #3
   29b4c:	4b0d      	ldr	r3, [pc, #52]	; (29b84 <rtc_calendar_disable+0x48>)
   29b4e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   29b50:	46c0      	nop			; (mov r8, r8)
   29b52:	687b      	ldr	r3, [r7, #4]
   29b54:	0018      	movs	r0, r3
   29b56:	4b0c      	ldr	r3, [pc, #48]	; (29b88 <rtc_calendar_disable+0x4c>)
   29b58:	4798      	blx	r3
   29b5a:	1e03      	subs	r3, r0, #0
   29b5c:	d1f9      	bne.n	29b52 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   29b5e:	68fb      	ldr	r3, [r7, #12]
   29b60:	22c1      	movs	r2, #193	; 0xc1
   29b62:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   29b64:	68fb      	ldr	r3, [r7, #12]
   29b66:	22c1      	movs	r2, #193	; 0xc1
   29b68:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   29b6a:	68fb      	ldr	r3, [r7, #12]
   29b6c:	881b      	ldrh	r3, [r3, #0]
   29b6e:	b29b      	uxth	r3, r3
   29b70:	2202      	movs	r2, #2
   29b72:	4393      	bics	r3, r2
   29b74:	b29a      	uxth	r2, r3
   29b76:	68fb      	ldr	r3, [r7, #12]
   29b78:	801a      	strh	r2, [r3, #0]
}
   29b7a:	46c0      	nop			; (mov r8, r8)
   29b7c:	46bd      	mov	sp, r7
   29b7e:	b004      	add	sp, #16
   29b80:	bd80      	pop	{r7, pc}
   29b82:	46c0      	nop			; (mov r8, r8)
   29b84:	00029aa1 	.word	0x00029aa1
   29b88:	00029ad1 	.word	0x00029ad1

00029b8c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   29b8c:	b580      	push	{r7, lr}
   29b8e:	b084      	sub	sp, #16
   29b90:	af00      	add	r7, sp, #0
   29b92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29b94:	687b      	ldr	r3, [r7, #4]
   29b96:	681b      	ldr	r3, [r3, #0]
   29b98:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   29b9a:	687b      	ldr	r3, [r7, #4]
   29b9c:	0018      	movs	r0, r3
   29b9e:	4b0d      	ldr	r3, [pc, #52]	; (29bd4 <rtc_calendar_reset+0x48>)
   29ba0:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   29ba2:	687b      	ldr	r3, [r7, #4]
   29ba4:	2200      	movs	r2, #0
   29ba6:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   29ba8:	687b      	ldr	r3, [r7, #4]
   29baa:	2200      	movs	r2, #0
   29bac:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   29bae:	46c0      	nop			; (mov r8, r8)
   29bb0:	687b      	ldr	r3, [r7, #4]
   29bb2:	0018      	movs	r0, r3
   29bb4:	4b08      	ldr	r3, [pc, #32]	; (29bd8 <rtc_calendar_reset+0x4c>)
   29bb6:	4798      	blx	r3
   29bb8:	1e03      	subs	r3, r0, #0
   29bba:	d1f9      	bne.n	29bb0 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   29bbc:	68fb      	ldr	r3, [r7, #12]
   29bbe:	881b      	ldrh	r3, [r3, #0]
   29bc0:	b29b      	uxth	r3, r3
   29bc2:	2201      	movs	r2, #1
   29bc4:	4313      	orrs	r3, r2
   29bc6:	b29a      	uxth	r2, r3
   29bc8:	68fb      	ldr	r3, [r7, #12]
   29bca:	801a      	strh	r2, [r3, #0]
}
   29bcc:	46c0      	nop			; (mov r8, r8)
   29bce:	46bd      	mov	sp, r7
   29bd0:	b004      	add	sp, #16
   29bd2:	bd80      	pop	{r7, pc}
   29bd4:	00029b3d 	.word	0x00029b3d
   29bd8:	00029ad1 	.word	0x00029ad1

00029bdc <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   29bdc:	b580      	push	{r7, lr}
   29bde:	b084      	sub	sp, #16
   29be0:	af00      	add	r7, sp, #0
   29be2:	6078      	str	r0, [r7, #4]
   29be4:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   29be6:	683b      	ldr	r3, [r7, #0]
   29be8:	88db      	ldrh	r3, [r3, #6]
   29bea:	001a      	movs	r2, r3
   29bec:	687b      	ldr	r3, [r7, #4]
   29bee:	88db      	ldrh	r3, [r3, #6]
   29bf0:	1ad3      	subs	r3, r2, r3
   29bf2:	069b      	lsls	r3, r3, #26
   29bf4:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   29bf6:	683b      	ldr	r3, [r7, #0]
   29bf8:	795b      	ldrb	r3, [r3, #5]
   29bfa:	059b      	lsls	r3, r3, #22
   29bfc:	001a      	movs	r2, r3
   29bfe:	68fb      	ldr	r3, [r7, #12]
   29c00:	4313      	orrs	r3, r2
   29c02:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   29c04:	683b      	ldr	r3, [r7, #0]
   29c06:	791b      	ldrb	r3, [r3, #4]
   29c08:	045b      	lsls	r3, r3, #17
   29c0a:	001a      	movs	r2, r3
   29c0c:	68fb      	ldr	r3, [r7, #12]
   29c0e:	4313      	orrs	r3, r2
   29c10:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   29c12:	683b      	ldr	r3, [r7, #0]
   29c14:	789b      	ldrb	r3, [r3, #2]
   29c16:	031b      	lsls	r3, r3, #12
   29c18:	001a      	movs	r2, r3
   29c1a:	68fb      	ldr	r3, [r7, #12]
   29c1c:	4313      	orrs	r3, r2
   29c1e:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   29c20:	687b      	ldr	r3, [r7, #4]
   29c22:	791b      	ldrb	r3, [r3, #4]
   29c24:	2201      	movs	r2, #1
   29c26:	4053      	eors	r3, r2
   29c28:	b2db      	uxtb	r3, r3
   29c2a:	2b00      	cmp	r3, #0
   29c2c:	d008      	beq.n	29c40 <rtc_calendar_time_to_register_value+0x64>
   29c2e:	683b      	ldr	r3, [r7, #0]
   29c30:	78db      	ldrb	r3, [r3, #3]
   29c32:	2b00      	cmp	r3, #0
   29c34:	d004      	beq.n	29c40 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   29c36:	68fb      	ldr	r3, [r7, #12]
   29c38:	2280      	movs	r2, #128	; 0x80
   29c3a:	0252      	lsls	r2, r2, #9
   29c3c:	4313      	orrs	r3, r2
   29c3e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   29c40:	683b      	ldr	r3, [r7, #0]
   29c42:	785b      	ldrb	r3, [r3, #1]
   29c44:	019b      	lsls	r3, r3, #6
   29c46:	001a      	movs	r2, r3
   29c48:	68fb      	ldr	r3, [r7, #12]
   29c4a:	4313      	orrs	r3, r2
   29c4c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   29c4e:	683b      	ldr	r3, [r7, #0]
   29c50:	781b      	ldrb	r3, [r3, #0]
   29c52:	001a      	movs	r2, r3
   29c54:	68fb      	ldr	r3, [r7, #12]
   29c56:	4313      	orrs	r3, r2
   29c58:	60fb      	str	r3, [r7, #12]

	return register_value;
   29c5a:	68fb      	ldr	r3, [r7, #12]
}
   29c5c:	0018      	movs	r0, r3
   29c5e:	46bd      	mov	sp, r7
   29c60:	b004      	add	sp, #16
   29c62:	bd80      	pop	{r7, pc}

00029c64 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   29c64:	b580      	push	{r7, lr}
   29c66:	b084      	sub	sp, #16
   29c68:	af00      	add	r7, sp, #0
   29c6a:	60f8      	str	r0, [r7, #12]
   29c6c:	60b9      	str	r1, [r7, #8]
   29c6e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   29c70:	68bb      	ldr	r3, [r7, #8]
   29c72:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   29c74:	b29a      	uxth	r2, r3
   29c76:	68fb      	ldr	r3, [r7, #12]
   29c78:	88db      	ldrh	r3, [r3, #6]
   29c7a:	18d3      	adds	r3, r2, r3
   29c7c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   29c7e:	687b      	ldr	r3, [r7, #4]
   29c80:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   29c82:	68bb      	ldr	r3, [r7, #8]
   29c84:	0d9b      	lsrs	r3, r3, #22
   29c86:	b2db      	uxtb	r3, r3
   29c88:	220f      	movs	r2, #15
   29c8a:	4013      	ands	r3, r2
   29c8c:	b2da      	uxtb	r2, r3
   29c8e:	687b      	ldr	r3, [r7, #4]
   29c90:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   29c92:	68bb      	ldr	r3, [r7, #8]
   29c94:	0c5b      	lsrs	r3, r3, #17
   29c96:	b2db      	uxtb	r3, r3
   29c98:	221f      	movs	r2, #31
   29c9a:	4013      	ands	r3, r2
   29c9c:	b2da      	uxtb	r2, r3
   29c9e:	687b      	ldr	r3, [r7, #4]
   29ca0:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   29ca2:	68fb      	ldr	r3, [r7, #12]
   29ca4:	791b      	ldrb	r3, [r3, #4]
   29ca6:	2b00      	cmp	r3, #0
   29ca8:	d008      	beq.n	29cbc <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   29caa:	68bb      	ldr	r3, [r7, #8]
   29cac:	0b1b      	lsrs	r3, r3, #12
   29cae:	b2db      	uxtb	r3, r3
   29cb0:	221f      	movs	r2, #31
   29cb2:	4013      	ands	r3, r2
   29cb4:	b2da      	uxtb	r2, r3
   29cb6:	687b      	ldr	r3, [r7, #4]
   29cb8:	709a      	strb	r2, [r3, #2]
   29cba:	e010      	b.n	29cde <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   29cbc:	68bb      	ldr	r3, [r7, #8]
   29cbe:	0b1b      	lsrs	r3, r3, #12
   29cc0:	b2db      	uxtb	r3, r3
   29cc2:	220f      	movs	r2, #15
   29cc4:	4013      	ands	r3, r2
   29cc6:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   29cc8:	687b      	ldr	r3, [r7, #4]
   29cca:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   29ccc:	68ba      	ldr	r2, [r7, #8]
   29cce:	2380      	movs	r3, #128	; 0x80
   29cd0:	025b      	lsls	r3, r3, #9
   29cd2:	4013      	ands	r3, r2
   29cd4:	1e5a      	subs	r2, r3, #1
   29cd6:	4193      	sbcs	r3, r2
   29cd8:	b2da      	uxtb	r2, r3
   29cda:	687b      	ldr	r3, [r7, #4]
   29cdc:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   29cde:	68bb      	ldr	r3, [r7, #8]
   29ce0:	099b      	lsrs	r3, r3, #6
   29ce2:	b2db      	uxtb	r3, r3
   29ce4:	223f      	movs	r2, #63	; 0x3f
   29ce6:	4013      	ands	r3, r2
   29ce8:	b2da      	uxtb	r2, r3
   29cea:	687b      	ldr	r3, [r7, #4]
   29cec:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   29cee:	68bb      	ldr	r3, [r7, #8]
   29cf0:	b2db      	uxtb	r3, r3
   29cf2:	223f      	movs	r2, #63	; 0x3f
   29cf4:	4013      	ands	r3, r2
   29cf6:	b2da      	uxtb	r2, r3
   29cf8:	687b      	ldr	r3, [r7, #4]
   29cfa:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   29cfc:	46c0      	nop			; (mov r8, r8)
   29cfe:	46bd      	mov	sp, r7
   29d00:	b004      	add	sp, #16
   29d02:	bd80      	pop	{r7, pc}

00029d04 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   29d04:	b580      	push	{r7, lr}
   29d06:	b084      	sub	sp, #16
   29d08:	af00      	add	r7, sp, #0
   29d0a:	6078      	str	r0, [r7, #4]
   29d0c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29d0e:	687b      	ldr	r3, [r7, #4]
   29d10:	681b      	ldr	r3, [r3, #0]
   29d12:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   29d14:	683b      	ldr	r3, [r7, #0]
   29d16:	881a      	ldrh	r2, [r3, #0]
   29d18:	230e      	movs	r3, #14
   29d1a:	18fb      	adds	r3, r7, r3
   29d1c:	2108      	movs	r1, #8
   29d1e:	430a      	orrs	r2, r1
   29d20:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   29d22:	683b      	ldr	r3, [r7, #0]
   29d24:	791b      	ldrb	r3, [r3, #4]
   29d26:	2201      	movs	r2, #1
   29d28:	4053      	eors	r3, r2
   29d2a:	b2db      	uxtb	r3, r3
   29d2c:	2b00      	cmp	r3, #0
   29d2e:	d007      	beq.n	29d40 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   29d30:	230e      	movs	r3, #14
   29d32:	18fb      	adds	r3, r7, r3
   29d34:	220e      	movs	r2, #14
   29d36:	18ba      	adds	r2, r7, r2
   29d38:	8812      	ldrh	r2, [r2, #0]
   29d3a:	2140      	movs	r1, #64	; 0x40
   29d3c:	430a      	orrs	r2, r1
   29d3e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   29d40:	683b      	ldr	r3, [r7, #0]
   29d42:	789b      	ldrb	r3, [r3, #2]
   29d44:	2b00      	cmp	r3, #0
   29d46:	d007      	beq.n	29d58 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   29d48:	230e      	movs	r3, #14
   29d4a:	18fb      	adds	r3, r7, r3
   29d4c:	220e      	movs	r2, #14
   29d4e:	18ba      	adds	r2, r7, r2
   29d50:	8812      	ldrh	r2, [r2, #0]
   29d52:	2180      	movs	r1, #128	; 0x80
   29d54:	430a      	orrs	r2, r1
   29d56:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   29d58:	68bb      	ldr	r3, [r7, #8]
   29d5a:	220e      	movs	r2, #14
   29d5c:	18ba      	adds	r2, r7, r2
   29d5e:	8812      	ldrh	r2, [r2, #0]
   29d60:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   29d62:	683b      	ldr	r3, [r7, #0]
   29d64:	78db      	ldrb	r3, [r3, #3]
   29d66:	2b00      	cmp	r3, #0
   29d68:	d008      	beq.n	29d7c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   29d6a:	68bb      	ldr	r3, [r7, #8]
   29d6c:	885b      	ldrh	r3, [r3, #2]
   29d6e:	b29b      	uxth	r3, r3
   29d70:	2280      	movs	r2, #128	; 0x80
   29d72:	01d2      	lsls	r2, r2, #7
   29d74:	4313      	orrs	r3, r2
   29d76:	b29a      	uxth	r2, r3
   29d78:	68bb      	ldr	r3, [r7, #8]
   29d7a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   29d7c:	230d      	movs	r3, #13
   29d7e:	18fb      	adds	r3, r7, r3
   29d80:	2200      	movs	r2, #0
   29d82:	701a      	strb	r2, [r3, #0]
   29d84:	e017      	b.n	29db6 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   29d86:	230d      	movs	r3, #13
   29d88:	18fb      	adds	r3, r7, r3
   29d8a:	781a      	ldrb	r2, [r3, #0]
   29d8c:	0013      	movs	r3, r2
   29d8e:	009b      	lsls	r3, r3, #2
   29d90:	189b      	adds	r3, r3, r2
   29d92:	005b      	lsls	r3, r3, #1
   29d94:	3308      	adds	r3, #8
   29d96:	683a      	ldr	r2, [r7, #0]
   29d98:	18d1      	adds	r1, r2, r3
   29d9a:	230d      	movs	r3, #13
   29d9c:	18fb      	adds	r3, r7, r3
   29d9e:	781a      	ldrb	r2, [r3, #0]
   29da0:	687b      	ldr	r3, [r7, #4]
   29da2:	0018      	movs	r0, r3
   29da4:	4b08      	ldr	r3, [pc, #32]	; (29dc8 <_rtc_calendar_set_config+0xc4>)
   29da6:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   29da8:	230d      	movs	r3, #13
   29daa:	18fb      	adds	r3, r7, r3
   29dac:	781a      	ldrb	r2, [r3, #0]
   29dae:	230d      	movs	r3, #13
   29db0:	18fb      	adds	r3, r7, r3
   29db2:	3201      	adds	r2, #1
   29db4:	701a      	strb	r2, [r3, #0]
   29db6:	230d      	movs	r3, #13
   29db8:	18fb      	adds	r3, r7, r3
   29dba:	781b      	ldrb	r3, [r3, #0]
   29dbc:	2b00      	cmp	r3, #0
   29dbe:	d0e2      	beq.n	29d86 <_rtc_calendar_set_config+0x82>
	}
}
   29dc0:	46c0      	nop			; (mov r8, r8)
   29dc2:	46bd      	mov	sp, r7
   29dc4:	b004      	add	sp, #16
   29dc6:	bd80      	pop	{r7, pc}
   29dc8:	00029eed 	.word	0x00029eed

00029dcc <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   29dcc:	b580      	push	{r7, lr}
   29dce:	b086      	sub	sp, #24
   29dd0:	af00      	add	r7, sp, #0
   29dd2:	60f8      	str	r0, [r7, #12]
   29dd4:	60b9      	str	r1, [r7, #8]
   29dd6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   29dd8:	68fb      	ldr	r3, [r7, #12]
   29dda:	68ba      	ldr	r2, [r7, #8]
   29ddc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   29dde:	2120      	movs	r1, #32
   29de0:	2000      	movs	r0, #0
   29de2:	4b18      	ldr	r3, [pc, #96]	; (29e44 <rtc_calendar_init+0x78>)
   29de4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   29de6:	2314      	movs	r3, #20
   29de8:	18fb      	adds	r3, r7, r3
   29dea:	0018      	movs	r0, r3
   29dec:	4b16      	ldr	r3, [pc, #88]	; (29e48 <rtc_calendar_init+0x7c>)
   29dee:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   29df0:	2314      	movs	r3, #20
   29df2:	18fb      	adds	r3, r7, r3
   29df4:	2202      	movs	r2, #2
   29df6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   29df8:	2314      	movs	r3, #20
   29dfa:	18fb      	adds	r3, r7, r3
   29dfc:	0019      	movs	r1, r3
   29dfe:	2004      	movs	r0, #4
   29e00:	4b12      	ldr	r3, [pc, #72]	; (29e4c <rtc_calendar_init+0x80>)
   29e02:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   29e04:	2004      	movs	r0, #4
   29e06:	4b12      	ldr	r3, [pc, #72]	; (29e50 <rtc_calendar_init+0x84>)
   29e08:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   29e0a:	68fb      	ldr	r3, [r7, #12]
   29e0c:	0018      	movs	r0, r3
   29e0e:	4b11      	ldr	r3, [pc, #68]	; (29e54 <rtc_calendar_init+0x88>)
   29e10:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   29e12:	687b      	ldr	r3, [r7, #4]
   29e14:	791a      	ldrb	r2, [r3, #4]
   29e16:	68fb      	ldr	r3, [r7, #12]
   29e18:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   29e1a:	687b      	ldr	r3, [r7, #4]
   29e1c:	78da      	ldrb	r2, [r3, #3]
   29e1e:	68fb      	ldr	r3, [r7, #12]
   29e20:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   29e22:	687b      	ldr	r3, [r7, #4]
   29e24:	88da      	ldrh	r2, [r3, #6]
   29e26:	68fb      	ldr	r3, [r7, #12]
   29e28:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   29e2a:	4b0b      	ldr	r3, [pc, #44]	; (29e58 <rtc_calendar_init+0x8c>)
   29e2c:	68fa      	ldr	r2, [r7, #12]
   29e2e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   29e30:	687a      	ldr	r2, [r7, #4]
   29e32:	68fb      	ldr	r3, [r7, #12]
   29e34:	0011      	movs	r1, r2
   29e36:	0018      	movs	r0, r3
   29e38:	4b08      	ldr	r3, [pc, #32]	; (29e5c <rtc_calendar_init+0x90>)
   29e3a:	4798      	blx	r3
}
   29e3c:	46c0      	nop			; (mov r8, r8)
   29e3e:	46bd      	mov	sp, r7
   29e40:	b006      	add	sp, #24
   29e42:	bd80      	pop	{r7, pc}
   29e44:	00029a19 	.word	0x00029a19
   29e48:	00029a01 	.word	0x00029a01
   29e4c:	0002ce31 	.word	0x0002ce31
   29e50:	0002ce75 	.word	0x0002ce75
   29e54:	00029b8d 	.word	0x00029b8d
   29e58:	20005c18 	.word	0x20005c18
   29e5c:	00029d05 	.word	0x00029d05

00029e60 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   29e60:	b580      	push	{r7, lr}
   29e62:	b084      	sub	sp, #16
   29e64:	af00      	add	r7, sp, #0
   29e66:	6078      	str	r0, [r7, #4]
   29e68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29e6a:	687b      	ldr	r3, [r7, #4]
   29e6c:	681b      	ldr	r3, [r3, #0]
   29e6e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   29e70:	687b      	ldr	r3, [r7, #4]
   29e72:	795b      	ldrb	r3, [r3, #5]
   29e74:	2201      	movs	r2, #1
   29e76:	4053      	eors	r3, r2
   29e78:	b2db      	uxtb	r3, r3
   29e7a:	2b00      	cmp	r3, #0
   29e7c:	d00a      	beq.n	29e94 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   29e7e:	68fb      	ldr	r3, [r7, #12]
   29e80:	4a16      	ldr	r2, [pc, #88]	; (29edc <rtc_calendar_get_time+0x7c>)
   29e82:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   29e84:	46c0      	nop			; (mov r8, r8)
   29e86:	687b      	ldr	r3, [r7, #4]
   29e88:	0018      	movs	r0, r3
   29e8a:	4b15      	ldr	r3, [pc, #84]	; (29ee0 <rtc_calendar_get_time+0x80>)
   29e8c:	4798      	blx	r3
   29e8e:	1e03      	subs	r3, r0, #0
   29e90:	d1f9      	bne.n	29e86 <rtc_calendar_get_time+0x26>
   29e92:	e016      	b.n	29ec2 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   29e94:	68fb      	ldr	r3, [r7, #12]
   29e96:	885b      	ldrh	r3, [r3, #2]
   29e98:	b29b      	uxth	r3, r3
   29e9a:	001a      	movs	r2, r3
   29e9c:	2380      	movs	r3, #128	; 0x80
   29e9e:	01db      	lsls	r3, r3, #7
   29ea0:	4013      	ands	r3, r2
   29ea2:	d10e      	bne.n	29ec2 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   29ea4:	68fb      	ldr	r3, [r7, #12]
   29ea6:	885b      	ldrh	r3, [r3, #2]
   29ea8:	b29b      	uxth	r3, r3
   29eaa:	4a0e      	ldr	r2, [pc, #56]	; (29ee4 <rtc_calendar_get_time+0x84>)
   29eac:	4313      	orrs	r3, r2
   29eae:	b29a      	uxth	r2, r3
   29eb0:	68fb      	ldr	r3, [r7, #12]
   29eb2:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   29eb4:	46c0      	nop			; (mov r8, r8)
   29eb6:	687b      	ldr	r3, [r7, #4]
   29eb8:	0018      	movs	r0, r3
   29eba:	4b09      	ldr	r3, [pc, #36]	; (29ee0 <rtc_calendar_get_time+0x80>)
   29ebc:	4798      	blx	r3
   29ebe:	1e03      	subs	r3, r0, #0
   29ec0:	d1f9      	bne.n	29eb6 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   29ec2:	68fb      	ldr	r3, [r7, #12]
   29ec4:	691b      	ldr	r3, [r3, #16]
   29ec6:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   29ec8:	683a      	ldr	r2, [r7, #0]
   29eca:	68b9      	ldr	r1, [r7, #8]
   29ecc:	687b      	ldr	r3, [r7, #4]
   29ece:	0018      	movs	r0, r3
   29ed0:	4b05      	ldr	r3, [pc, #20]	; (29ee8 <rtc_calendar_get_time+0x88>)
   29ed2:	4798      	blx	r3
}
   29ed4:	46c0      	nop			; (mov r8, r8)
   29ed6:	46bd      	mov	sp, r7
   29ed8:	b004      	add	sp, #16
   29eda:	bd80      	pop	{r7, pc}
   29edc:	ffff8000 	.word	0xffff8000
   29ee0:	00029ad1 	.word	0x00029ad1
   29ee4:	ffffc000 	.word	0xffffc000
   29ee8:	00029c65 	.word	0x00029c65

00029eec <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   29eec:	b580      	push	{r7, lr}
   29eee:	b086      	sub	sp, #24
   29ef0:	af00      	add	r7, sp, #0
   29ef2:	60f8      	str	r0, [r7, #12]
   29ef4:	60b9      	str	r1, [r7, #8]
   29ef6:	1dfb      	adds	r3, r7, #7
   29ef8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   29efa:	68fb      	ldr	r3, [r7, #12]
   29efc:	681b      	ldr	r3, [r3, #0]
   29efe:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   29f00:	1dfb      	adds	r3, r7, #7
   29f02:	781b      	ldrb	r3, [r3, #0]
   29f04:	2b01      	cmp	r3, #1
   29f06:	d901      	bls.n	29f0c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   29f08:	2317      	movs	r3, #23
   29f0a:	e021      	b.n	29f50 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   29f0c:	68ba      	ldr	r2, [r7, #8]
   29f0e:	68fb      	ldr	r3, [r7, #12]
   29f10:	0011      	movs	r1, r2
   29f12:	0018      	movs	r0, r3
   29f14:	4b10      	ldr	r3, [pc, #64]	; (29f58 <rtc_calendar_set_alarm+0x6c>)
   29f16:	4798      	blx	r3
   29f18:	0003      	movs	r3, r0
   29f1a:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   29f1c:	46c0      	nop			; (mov r8, r8)
   29f1e:	68fb      	ldr	r3, [r7, #12]
   29f20:	0018      	movs	r0, r3
   29f22:	4b0e      	ldr	r3, [pc, #56]	; (29f5c <rtc_calendar_set_alarm+0x70>)
   29f24:	4798      	blx	r3
   29f26:	1e03      	subs	r3, r0, #0
   29f28:	d1f9      	bne.n	29f1e <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   29f2a:	1dfb      	adds	r3, r7, #7
   29f2c:	781a      	ldrb	r2, [r3, #0]
   29f2e:	697b      	ldr	r3, [r7, #20]
   29f30:	3203      	adds	r2, #3
   29f32:	00d2      	lsls	r2, r2, #3
   29f34:	6939      	ldr	r1, [r7, #16]
   29f36:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   29f38:	1dfb      	adds	r3, r7, #7
   29f3a:	781b      	ldrb	r3, [r3, #0]
   29f3c:	68ba      	ldr	r2, [r7, #8]
   29f3e:	7a11      	ldrb	r1, [r2, #8]
   29f40:	697a      	ldr	r2, [r7, #20]
   29f42:	3303      	adds	r3, #3
   29f44:	00db      	lsls	r3, r3, #3
   29f46:	18d3      	adds	r3, r2, r3
   29f48:	3304      	adds	r3, #4
   29f4a:	1c0a      	adds	r2, r1, #0
   29f4c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   29f4e:	2300      	movs	r3, #0
}
   29f50:	0018      	movs	r0, r3
   29f52:	46bd      	mov	sp, r7
   29f54:	b006      	add	sp, #24
   29f56:	bd80      	pop	{r7, pc}
   29f58:	00029bdd 	.word	0x00029bdd
   29f5c:	00029ad1 	.word	0x00029ad1

00029f60 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   29f60:	b580      	push	{r7, lr}
   29f62:	b086      	sub	sp, #24
   29f64:	af00      	add	r7, sp, #0
   29f66:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   29f68:	4b28      	ldr	r3, [pc, #160]	; (2a00c <_rtc_interrupt_handler+0xac>)
   29f6a:	687a      	ldr	r2, [r7, #4]
   29f6c:	0092      	lsls	r2, r2, #2
   29f6e:	58d3      	ldr	r3, [r2, r3]
   29f70:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   29f72:	697b      	ldr	r3, [r7, #20]
   29f74:	681b      	ldr	r3, [r3, #0]
   29f76:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   29f78:	230e      	movs	r3, #14
   29f7a:	18fb      	adds	r3, r7, r3
   29f7c:	697a      	ldr	r2, [r7, #20]
   29f7e:	8a52      	ldrh	r2, [r2, #18]
   29f80:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   29f82:	697b      	ldr	r3, [r7, #20]
   29f84:	8a1b      	ldrh	r3, [r3, #16]
   29f86:	b29a      	uxth	r2, r3
   29f88:	230e      	movs	r3, #14
   29f8a:	18fb      	adds	r3, r7, r3
   29f8c:	210e      	movs	r1, #14
   29f8e:	1879      	adds	r1, r7, r1
   29f90:	8809      	ldrh	r1, [r1, #0]
   29f92:	400a      	ands	r2, r1
   29f94:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   29f96:	693b      	ldr	r3, [r7, #16]
   29f98:	7a1b      	ldrb	r3, [r3, #8]
   29f9a:	b2da      	uxtb	r2, r3
   29f9c:	230c      	movs	r3, #12
   29f9e:	18fb      	adds	r3, r7, r3
   29fa0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   29fa2:	693b      	ldr	r3, [r7, #16]
   29fa4:	79db      	ldrb	r3, [r3, #7]
   29fa6:	b2db      	uxtb	r3, r3
   29fa8:	b29a      	uxth	r2, r3
   29faa:	230c      	movs	r3, #12
   29fac:	18fb      	adds	r3, r7, r3
   29fae:	210c      	movs	r1, #12
   29fb0:	1879      	adds	r1, r7, r1
   29fb2:	8809      	ldrh	r1, [r1, #0]
   29fb4:	400a      	ands	r2, r1
   29fb6:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   29fb8:	230c      	movs	r3, #12
   29fba:	18fb      	adds	r3, r7, r3
   29fbc:	881b      	ldrh	r3, [r3, #0]
   29fbe:	2280      	movs	r2, #128	; 0x80
   29fc0:	4013      	ands	r3, r2
   29fc2:	d00c      	beq.n	29fde <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   29fc4:	230e      	movs	r3, #14
   29fc6:	18fb      	adds	r3, r7, r3
   29fc8:	881b      	ldrh	r3, [r3, #0]
   29fca:	2202      	movs	r2, #2
   29fcc:	4013      	ands	r3, r2
   29fce:	d002      	beq.n	29fd6 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   29fd0:	697b      	ldr	r3, [r7, #20]
   29fd2:	68db      	ldr	r3, [r3, #12]
   29fd4:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   29fd6:	693b      	ldr	r3, [r7, #16]
   29fd8:	2280      	movs	r2, #128	; 0x80
   29fda:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   29fdc:	e011      	b.n	2a002 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   29fde:	230c      	movs	r3, #12
   29fe0:	18fb      	adds	r3, r7, r3
   29fe2:	881b      	ldrh	r3, [r3, #0]
   29fe4:	2201      	movs	r2, #1
   29fe6:	4013      	ands	r3, r2
   29fe8:	d00b      	beq.n	2a002 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   29fea:	230e      	movs	r3, #14
   29fec:	18fb      	adds	r3, r7, r3
   29fee:	881b      	ldrh	r3, [r3, #0]
   29ff0:	2201      	movs	r2, #1
   29ff2:	4013      	ands	r3, r2
   29ff4:	d002      	beq.n	29ffc <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   29ff6:	697b      	ldr	r3, [r7, #20]
   29ff8:	689b      	ldr	r3, [r3, #8]
   29ffa:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   29ffc:	693b      	ldr	r3, [r7, #16]
   29ffe:	2201      	movs	r2, #1
   2a000:	721a      	strb	r2, [r3, #8]
}
   2a002:	46c0      	nop			; (mov r8, r8)
   2a004:	46bd      	mov	sp, r7
   2a006:	b006      	add	sp, #24
   2a008:	bd80      	pop	{r7, pc}
   2a00a:	46c0      	nop			; (mov r8, r8)
   2a00c:	20005c18 	.word	0x20005c18

0002a010 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   2a010:	b580      	push	{r7, lr}
   2a012:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   2a014:	2000      	movs	r0, #0
   2a016:	4b02      	ldr	r3, [pc, #8]	; (2a020 <RTC_Handler+0x10>)
   2a018:	4798      	blx	r3
}
   2a01a:	46c0      	nop			; (mov r8, r8)
   2a01c:	46bd      	mov	sp, r7
   2a01e:	bd80      	pop	{r7, pc}
   2a020:	00029f61 	.word	0x00029f61

0002a024 <system_gclk_chan_get_config_defaults>:
{
   2a024:	b580      	push	{r7, lr}
   2a026:	b082      	sub	sp, #8
   2a028:	af00      	add	r7, sp, #0
   2a02a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a02c:	687b      	ldr	r3, [r7, #4]
   2a02e:	2200      	movs	r2, #0
   2a030:	701a      	strb	r2, [r3, #0]
}
   2a032:	46c0      	nop			; (mov r8, r8)
   2a034:	46bd      	mov	sp, r7
   2a036:	b002      	add	sp, #8
   2a038:	bd80      	pop	{r7, pc}

0002a03a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   2a03a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a03c:	b08d      	sub	sp, #52	; 0x34
   2a03e:	af00      	add	r7, sp, #0
   2a040:	60b8      	str	r0, [r7, #8]
   2a042:	60f9      	str	r1, [r7, #12]
   2a044:	603a      	str	r2, [r7, #0]
   2a046:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   2a048:	2300      	movs	r3, #0
   2a04a:	2400      	movs	r4, #0
   2a04c:	623b      	str	r3, [r7, #32]
   2a04e:	627c      	str	r4, [r7, #36]	; 0x24
   2a050:	2300      	movs	r3, #0
   2a052:	2400      	movs	r4, #0
   2a054:	61bb      	str	r3, [r7, #24]
   2a056:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   2a058:	233f      	movs	r3, #63	; 0x3f
   2a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2a05c:	e053      	b.n	2a106 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2a05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a060:	3b20      	subs	r3, #32
   2a062:	2b00      	cmp	r3, #0
   2a064:	db04      	blt.n	2a070 <long_division+0x36>
   2a066:	2201      	movs	r2, #1
   2a068:	409a      	lsls	r2, r3
   2a06a:	0013      	movs	r3, r2
   2a06c:	617b      	str	r3, [r7, #20]
   2a06e:	e00b      	b.n	2a088 <long_division+0x4e>
   2a070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a072:	2220      	movs	r2, #32
   2a074:	1ad3      	subs	r3, r2, r3
   2a076:	2201      	movs	r2, #1
   2a078:	40da      	lsrs	r2, r3
   2a07a:	0013      	movs	r3, r2
   2a07c:	2100      	movs	r1, #0
   2a07e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a080:	4091      	lsls	r1, r2
   2a082:	000a      	movs	r2, r1
   2a084:	4313      	orrs	r3, r2
   2a086:	617b      	str	r3, [r7, #20]
   2a088:	2201      	movs	r2, #1
   2a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a08c:	409a      	lsls	r2, r3
   2a08e:	0013      	movs	r3, r2
   2a090:	613b      	str	r3, [r7, #16]

		r = r << 1;
   2a092:	69bb      	ldr	r3, [r7, #24]
   2a094:	69fc      	ldr	r4, [r7, #28]
   2a096:	18db      	adds	r3, r3, r3
   2a098:	4164      	adcs	r4, r4
   2a09a:	61bb      	str	r3, [r7, #24]
   2a09c:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   2a09e:	68bb      	ldr	r3, [r7, #8]
   2a0a0:	693a      	ldr	r2, [r7, #16]
   2a0a2:	401a      	ands	r2, r3
   2a0a4:	0015      	movs	r5, r2
   2a0a6:	68fb      	ldr	r3, [r7, #12]
   2a0a8:	697a      	ldr	r2, [r7, #20]
   2a0aa:	401a      	ands	r2, r3
   2a0ac:	0016      	movs	r6, r2
   2a0ae:	002b      	movs	r3, r5
   2a0b0:	4333      	orrs	r3, r6
   2a0b2:	d007      	beq.n	2a0c4 <long_division+0x8a>
			r |= 0x01;
   2a0b4:	69bb      	ldr	r3, [r7, #24]
   2a0b6:	2201      	movs	r2, #1
   2a0b8:	4313      	orrs	r3, r2
   2a0ba:	61bb      	str	r3, [r7, #24]
   2a0bc:	69fb      	ldr	r3, [r7, #28]
   2a0be:	2200      	movs	r2, #0
   2a0c0:	4313      	orrs	r3, r2
   2a0c2:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   2a0c4:	687a      	ldr	r2, [r7, #4]
   2a0c6:	69fb      	ldr	r3, [r7, #28]
   2a0c8:	429a      	cmp	r2, r3
   2a0ca:	d819      	bhi.n	2a100 <long_division+0xc6>
   2a0cc:	687a      	ldr	r2, [r7, #4]
   2a0ce:	69fb      	ldr	r3, [r7, #28]
   2a0d0:	429a      	cmp	r2, r3
   2a0d2:	d103      	bne.n	2a0dc <long_division+0xa2>
   2a0d4:	683a      	ldr	r2, [r7, #0]
   2a0d6:	69bb      	ldr	r3, [r7, #24]
   2a0d8:	429a      	cmp	r2, r3
   2a0da:	d811      	bhi.n	2a100 <long_division+0xc6>
			r = r - d;
   2a0dc:	69b9      	ldr	r1, [r7, #24]
   2a0de:	69fa      	ldr	r2, [r7, #28]
   2a0e0:	683b      	ldr	r3, [r7, #0]
   2a0e2:	687c      	ldr	r4, [r7, #4]
   2a0e4:	1ac9      	subs	r1, r1, r3
   2a0e6:	41a2      	sbcs	r2, r4
   2a0e8:	000b      	movs	r3, r1
   2a0ea:	0014      	movs	r4, r2
   2a0ec:	61bb      	str	r3, [r7, #24]
   2a0ee:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   2a0f0:	6a3a      	ldr	r2, [r7, #32]
   2a0f2:	693b      	ldr	r3, [r7, #16]
   2a0f4:	4313      	orrs	r3, r2
   2a0f6:	623b      	str	r3, [r7, #32]
   2a0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2a0fa:	697b      	ldr	r3, [r7, #20]
   2a0fc:	4313      	orrs	r3, r2
   2a0fe:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   2a100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a102:	3b01      	subs	r3, #1
   2a104:	62fb      	str	r3, [r7, #44]	; 0x2c
   2a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a108:	2b00      	cmp	r3, #0
   2a10a:	daa8      	bge.n	2a05e <long_division+0x24>
		}
	}

	return q;
   2a10c:	6a3b      	ldr	r3, [r7, #32]
   2a10e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   2a110:	0018      	movs	r0, r3
   2a112:	0021      	movs	r1, r4
   2a114:	46bd      	mov	sp, r7
   2a116:	b00d      	add	sp, #52	; 0x34
   2a118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a11a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   2a11a:	b580      	push	{r7, lr}
   2a11c:	b086      	sub	sp, #24
   2a11e:	af00      	add	r7, sp, #0
   2a120:	60f8      	str	r0, [r7, #12]
   2a122:	60b9      	str	r1, [r7, #8]
   2a124:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   2a126:	2316      	movs	r3, #22
   2a128:	18fb      	adds	r3, r7, r3
   2a12a:	2200      	movs	r2, #0
   2a12c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   2a12e:	68bb      	ldr	r3, [r7, #8]
   2a130:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   2a132:	68bb      	ldr	r3, [r7, #8]
   2a134:	085a      	lsrs	r2, r3, #1
   2a136:	68fb      	ldr	r3, [r7, #12]
   2a138:	429a      	cmp	r2, r3
   2a13a:	d201      	bcs.n	2a140 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2a13c:	2340      	movs	r3, #64	; 0x40
   2a13e:	e026      	b.n	2a18e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   2a140:	68bb      	ldr	r3, [r7, #8]
   2a142:	085b      	lsrs	r3, r3, #1
   2a144:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   2a146:	e00a      	b.n	2a15e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   2a148:	693a      	ldr	r2, [r7, #16]
   2a14a:	68fb      	ldr	r3, [r7, #12]
   2a14c:	1ad3      	subs	r3, r2, r3
   2a14e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   2a150:	2316      	movs	r3, #22
   2a152:	18fb      	adds	r3, r7, r3
   2a154:	881a      	ldrh	r2, [r3, #0]
   2a156:	2316      	movs	r3, #22
   2a158:	18fb      	adds	r3, r7, r3
   2a15a:	3201      	adds	r2, #1
   2a15c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2a15e:	693a      	ldr	r2, [r7, #16]
   2a160:	68fb      	ldr	r3, [r7, #12]
   2a162:	429a      	cmp	r2, r3
   2a164:	d2f0      	bcs.n	2a148 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   2a166:	2316      	movs	r3, #22
   2a168:	18fb      	adds	r3, r7, r3
   2a16a:	2216      	movs	r2, #22
   2a16c:	18ba      	adds	r2, r7, r2
   2a16e:	8812      	ldrh	r2, [r2, #0]
   2a170:	3a01      	subs	r2, #1
   2a172:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   2a174:	2316      	movs	r3, #22
   2a176:	18fb      	adds	r3, r7, r3
   2a178:	881b      	ldrh	r3, [r3, #0]
   2a17a:	2bff      	cmp	r3, #255	; 0xff
   2a17c:	d901      	bls.n	2a182 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2a17e:	2340      	movs	r3, #64	; 0x40
   2a180:	e005      	b.n	2a18e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   2a182:	687b      	ldr	r3, [r7, #4]
   2a184:	2216      	movs	r2, #22
   2a186:	18ba      	adds	r2, r7, r2
   2a188:	8812      	ldrh	r2, [r2, #0]
   2a18a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   2a18c:	2300      	movs	r3, #0
	}
}
   2a18e:	0018      	movs	r0, r3
   2a190:	46bd      	mov	sp, r7
   2a192:	b006      	add	sp, #24
   2a194:	bd80      	pop	{r7, pc}
	...

0002a198 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   2a198:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a19a:	b0a1      	sub	sp, #132	; 0x84
   2a19c:	af00      	add	r7, sp, #0
   2a19e:	64f8      	str	r0, [r7, #76]	; 0x4c
   2a1a0:	64b9      	str	r1, [r7, #72]	; 0x48
   2a1a2:	647a      	str	r2, [r7, #68]	; 0x44
   2a1a4:	2243      	movs	r2, #67	; 0x43
   2a1a6:	18ba      	adds	r2, r7, r2
   2a1a8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   2a1aa:	2300      	movs	r3, #0
   2a1ac:	2400      	movs	r4, #0
   2a1ae:	673b      	str	r3, [r7, #112]	; 0x70
   2a1b0:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   2a1b2:	2300      	movs	r3, #0
   2a1b4:	2400      	movs	r4, #0
   2a1b6:	66bb      	str	r3, [r7, #104]	; 0x68
   2a1b8:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   2a1ba:	2300      	movs	r3, #0
   2a1bc:	2400      	movs	r4, #0
   2a1be:	67bb      	str	r3, [r7, #120]	; 0x78
   2a1c0:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   2a1c2:	2300      	movs	r3, #0
   2a1c4:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   2a1c6:	2358      	movs	r3, #88	; 0x58
   2a1c8:	2240      	movs	r2, #64	; 0x40
   2a1ca:	4694      	mov	ip, r2
   2a1cc:	44bc      	add	ip, r7
   2a1ce:	4463      	add	r3, ip
   2a1d0:	781a      	ldrb	r2, [r3, #0]
   2a1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2a1d4:	435a      	muls	r2, r3
   2a1d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2a1d8:	429a      	cmp	r2, r3
   2a1da:	d901      	bls.n	2a1e0 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2a1dc:	2340      	movs	r3, #64	; 0x40
   2a1de:	e0b3      	b.n	2a348 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   2a1e0:	2343      	movs	r3, #67	; 0x43
   2a1e2:	18fb      	adds	r3, r7, r3
   2a1e4:	781b      	ldrb	r3, [r3, #0]
   2a1e6:	2b00      	cmp	r3, #0
   2a1e8:	d13d      	bne.n	2a266 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   2a1ea:	2358      	movs	r3, #88	; 0x58
   2a1ec:	2240      	movs	r2, #64	; 0x40
   2a1ee:	4694      	mov	ip, r2
   2a1f0:	44bc      	add	ip, r7
   2a1f2:	4463      	add	r3, ip
   2a1f4:	781b      	ldrb	r3, [r3, #0]
   2a1f6:	b2db      	uxtb	r3, r3
   2a1f8:	613b      	str	r3, [r7, #16]
   2a1fa:	2300      	movs	r3, #0
   2a1fc:	617b      	str	r3, [r7, #20]
   2a1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2a200:	60bb      	str	r3, [r7, #8]
   2a202:	2300      	movs	r3, #0
   2a204:	60fb      	str	r3, [r7, #12]
   2a206:	4c52      	ldr	r4, [pc, #328]	; (2a350 <_sercom_get_async_baud_val+0x1b8>)
   2a208:	68ba      	ldr	r2, [r7, #8]
   2a20a:	68fb      	ldr	r3, [r7, #12]
   2a20c:	6938      	ldr	r0, [r7, #16]
   2a20e:	6979      	ldr	r1, [r7, #20]
   2a210:	47a0      	blx	r4
   2a212:	0003      	movs	r3, r0
   2a214:	000c      	movs	r4, r1
   2a216:	001b      	movs	r3, r3
   2a218:	65fb      	str	r3, [r7, #92]	; 0x5c
   2a21a:	2300      	movs	r3, #0
   2a21c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   2a21e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2a220:	603b      	str	r3, [r7, #0]
   2a222:	2300      	movs	r3, #0
   2a224:	607b      	str	r3, [r7, #4]
   2a226:	6db8      	ldr	r0, [r7, #88]	; 0x58
   2a228:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   2a22a:	683a      	ldr	r2, [r7, #0]
   2a22c:	687b      	ldr	r3, [r7, #4]
   2a22e:	4c49      	ldr	r4, [pc, #292]	; (2a354 <_sercom_get_async_baud_val+0x1bc>)
   2a230:	47a0      	blx	r4
   2a232:	0003      	movs	r3, r0
   2a234:	000c      	movs	r4, r1
   2a236:	673b      	str	r3, [r7, #112]	; 0x70
   2a238:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   2a23a:	2100      	movs	r1, #0
   2a23c:	2201      	movs	r2, #1
   2a23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2a240:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   2a242:	1ac9      	subs	r1, r1, r3
   2a244:	41a2      	sbcs	r2, r4
   2a246:	000b      	movs	r3, r1
   2a248:	0014      	movs	r4, r2
   2a24a:	66bb      	str	r3, [r7, #104]	; 0x68
   2a24c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2a24e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2a250:	0c1b      	lsrs	r3, r3, #16
   2a252:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2a254:	0416      	lsls	r6, r2, #16
   2a256:	431e      	orrs	r6, r3
   2a258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2a25a:	041d      	lsls	r5, r3, #16
   2a25c:	0033      	movs	r3, r6
   2a25e:	67bb      	str	r3, [r7, #120]	; 0x78
   2a260:	2300      	movs	r3, #0
   2a262:	67fb      	str	r3, [r7, #124]	; 0x7c
   2a264:	e06a      	b.n	2a33c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   2a266:	2343      	movs	r3, #67	; 0x43
   2a268:	18fb      	adds	r3, r7, r3
   2a26a:	781b      	ldrb	r3, [r3, #0]
   2a26c:	2b01      	cmp	r3, #1
   2a26e:	d165      	bne.n	2a33c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   2a270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2a272:	633b      	str	r3, [r7, #48]	; 0x30
   2a274:	2300      	movs	r3, #0
   2a276:	637b      	str	r3, [r7, #52]	; 0x34
   2a278:	2358      	movs	r3, #88	; 0x58
   2a27a:	2240      	movs	r2, #64	; 0x40
   2a27c:	4694      	mov	ip, r2
   2a27e:	44bc      	add	ip, r7
   2a280:	4463      	add	r3, ip
   2a282:	781b      	ldrb	r3, [r3, #0]
   2a284:	b2db      	uxtb	r3, r3
   2a286:	62bb      	str	r3, [r7, #40]	; 0x28
   2a288:	2300      	movs	r3, #0
   2a28a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2a28c:	4c30      	ldr	r4, [pc, #192]	; (2a350 <_sercom_get_async_baud_val+0x1b8>)
   2a28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a292:	6b38      	ldr	r0, [r7, #48]	; 0x30
   2a294:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2a296:	47a0      	blx	r4
   2a298:	0003      	movs	r3, r0
   2a29a:	000c      	movs	r4, r1
   2a29c:	65bb      	str	r3, [r7, #88]	; 0x58
   2a29e:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   2a2a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2a2a2:	623b      	str	r3, [r7, #32]
   2a2a4:	2300      	movs	r3, #0
   2a2a6:	627b      	str	r3, [r7, #36]	; 0x24
   2a2a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2a2aa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2a2ac:	001a      	movs	r2, r3
   2a2ae:	0023      	movs	r3, r4
   2a2b0:	6a38      	ldr	r0, [r7, #32]
   2a2b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2a2b4:	4c27      	ldr	r4, [pc, #156]	; (2a354 <_sercom_get_async_baud_val+0x1bc>)
   2a2b6:	47a0      	blx	r4
   2a2b8:	0003      	movs	r3, r0
   2a2ba:	000c      	movs	r4, r1
   2a2bc:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2a2be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   2a2c0:	2380      	movs	r3, #128	; 0x80
   2a2c2:	019b      	lsls	r3, r3, #6
   2a2c4:	429a      	cmp	r2, r3
   2a2c6:	d901      	bls.n	2a2cc <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2a2c8:	2340      	movs	r3, #64	; 0x40
   2a2ca:	e03d      	b.n	2a348 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   2a2cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2a2ce:	61bb      	str	r3, [r7, #24]
   2a2d0:	2300      	movs	r3, #0
   2a2d2:	61fb      	str	r3, [r7, #28]
   2a2d4:	69b9      	ldr	r1, [r7, #24]
   2a2d6:	69fa      	ldr	r2, [r7, #28]
   2a2d8:	000b      	movs	r3, r1
   2a2da:	0f5b      	lsrs	r3, r3, #29
   2a2dc:	0010      	movs	r0, r2
   2a2de:	00c0      	lsls	r0, r0, #3
   2a2e0:	63f8      	str	r0, [r7, #60]	; 0x3c
   2a2e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   2a2e4:	4318      	orrs	r0, r3
   2a2e6:	63f8      	str	r0, [r7, #60]	; 0x3c
   2a2e8:	000b      	movs	r3, r1
   2a2ea:	00db      	lsls	r3, r3, #3
   2a2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   2a2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2a2f0:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2a2f2:	001a      	movs	r2, r3
   2a2f4:	0023      	movs	r3, r4
   2a2f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   2a2f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2a2fa:	4c16      	ldr	r4, [pc, #88]	; (2a354 <_sercom_get_async_baud_val+0x1bc>)
   2a2fc:	47a0      	blx	r4
   2a2fe:	0003      	movs	r3, r0
   2a300:	000c      	movs	r4, r1
   2a302:	65bb      	str	r3, [r7, #88]	; 0x58
   2a304:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   2a306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2a308:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2a30a:	b2d9      	uxtb	r1, r3
   2a30c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2a30e:	b2db      	uxtb	r3, r3
   2a310:	00db      	lsls	r3, r3, #3
   2a312:	b2da      	uxtb	r2, r3
   2a314:	2317      	movs	r3, #23
   2a316:	2040      	movs	r0, #64	; 0x40
   2a318:	4684      	mov	ip, r0
   2a31a:	44bc      	add	ip, r7
   2a31c:	4463      	add	r3, ip
   2a31e:	1a8a      	subs	r2, r1, r2
   2a320:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   2a322:	2317      	movs	r3, #23
   2a324:	2240      	movs	r2, #64	; 0x40
   2a326:	4694      	mov	ip, r2
   2a328:	44bc      	add	ip, r7
   2a32a:	4463      	add	r3, ip
   2a32c:	781b      	ldrb	r3, [r3, #0]
   2a32e:	035b      	lsls	r3, r3, #13
   2a330:	001a      	movs	r2, r3
   2a332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2a334:	4313      	orrs	r3, r2
   2a336:	67bb      	str	r3, [r7, #120]	; 0x78
   2a338:	2300      	movs	r3, #0
   2a33a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   2a33c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2a33e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   2a340:	b29a      	uxth	r2, r3
   2a342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2a344:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   2a346:	2300      	movs	r3, #0
}
   2a348:	0018      	movs	r0, r3
   2a34a:	46bd      	mov	sp, r7
   2a34c:	b021      	add	sp, #132	; 0x84
   2a34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a350:	00035d51 	.word	0x00035d51
   2a354:	0002a03b 	.word	0x0002a03b

0002a358 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   2a358:	b580      	push	{r7, lr}
   2a35a:	b084      	sub	sp, #16
   2a35c:	af00      	add	r7, sp, #0
   2a35e:	0002      	movs	r2, r0
   2a360:	1dfb      	adds	r3, r7, #7
   2a362:	701a      	strb	r2, [r3, #0]
   2a364:	1dbb      	adds	r3, r7, #6
   2a366:	1c0a      	adds	r2, r1, #0
   2a368:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   2a36a:	4b1a      	ldr	r3, [pc, #104]	; (2a3d4 <sercom_set_gclk_generator+0x7c>)
   2a36c:	781b      	ldrb	r3, [r3, #0]
   2a36e:	2201      	movs	r2, #1
   2a370:	4053      	eors	r3, r2
   2a372:	b2db      	uxtb	r3, r3
   2a374:	2b00      	cmp	r3, #0
   2a376:	d103      	bne.n	2a380 <sercom_set_gclk_generator+0x28>
   2a378:	1dbb      	adds	r3, r7, #6
   2a37a:	781b      	ldrb	r3, [r3, #0]
   2a37c:	2b00      	cmp	r3, #0
   2a37e:	d01b      	beq.n	2a3b8 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2a380:	230c      	movs	r3, #12
   2a382:	18fb      	adds	r3, r7, r3
   2a384:	0018      	movs	r0, r3
   2a386:	4b14      	ldr	r3, [pc, #80]	; (2a3d8 <sercom_set_gclk_generator+0x80>)
   2a388:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   2a38a:	230c      	movs	r3, #12
   2a38c:	18fb      	adds	r3, r7, r3
   2a38e:	1dfa      	adds	r2, r7, #7
   2a390:	7812      	ldrb	r2, [r2, #0]
   2a392:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   2a394:	230c      	movs	r3, #12
   2a396:	18fb      	adds	r3, r7, r3
   2a398:	0019      	movs	r1, r3
   2a39a:	2013      	movs	r0, #19
   2a39c:	4b0f      	ldr	r3, [pc, #60]	; (2a3dc <sercom_set_gclk_generator+0x84>)
   2a39e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   2a3a0:	2013      	movs	r0, #19
   2a3a2:	4b0f      	ldr	r3, [pc, #60]	; (2a3e0 <sercom_set_gclk_generator+0x88>)
   2a3a4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   2a3a6:	4b0b      	ldr	r3, [pc, #44]	; (2a3d4 <sercom_set_gclk_generator+0x7c>)
   2a3a8:	1dfa      	adds	r2, r7, #7
   2a3aa:	7812      	ldrb	r2, [r2, #0]
   2a3ac:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   2a3ae:	4b09      	ldr	r3, [pc, #36]	; (2a3d4 <sercom_set_gclk_generator+0x7c>)
   2a3b0:	2201      	movs	r2, #1
   2a3b2:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   2a3b4:	2300      	movs	r3, #0
   2a3b6:	e008      	b.n	2a3ca <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   2a3b8:	4b06      	ldr	r3, [pc, #24]	; (2a3d4 <sercom_set_gclk_generator+0x7c>)
   2a3ba:	785b      	ldrb	r3, [r3, #1]
   2a3bc:	1dfa      	adds	r2, r7, #7
   2a3be:	7812      	ldrb	r2, [r2, #0]
   2a3c0:	429a      	cmp	r2, r3
   2a3c2:	d101      	bne.n	2a3c8 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   2a3c4:	2300      	movs	r3, #0
   2a3c6:	e000      	b.n	2a3ca <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   2a3c8:	231d      	movs	r3, #29
}
   2a3ca:	0018      	movs	r0, r3
   2a3cc:	46bd      	mov	sp, r7
   2a3ce:	b004      	add	sp, #16
   2a3d0:	bd80      	pop	{r7, pc}
   2a3d2:	46c0      	nop			; (mov r8, r8)
   2a3d4:	200041e0 	.word	0x200041e0
   2a3d8:	0002a025 	.word	0x0002a025
   2a3dc:	0002ce31 	.word	0x0002ce31
   2a3e0:	0002ce75 	.word	0x0002ce75

0002a3e4 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   2a3e4:	b580      	push	{r7, lr}
   2a3e6:	b082      	sub	sp, #8
   2a3e8:	af00      	add	r7, sp, #0
   2a3ea:	6078      	str	r0, [r7, #4]
   2a3ec:	000a      	movs	r2, r1
   2a3ee:	1cfb      	adds	r3, r7, #3
   2a3f0:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2a3f2:	687b      	ldr	r3, [r7, #4]
   2a3f4:	4a4d      	ldr	r2, [pc, #308]	; (2a52c <_sercom_get_default_pad+0x148>)
   2a3f6:	4293      	cmp	r3, r2
   2a3f8:	d03f      	beq.n	2a47a <_sercom_get_default_pad+0x96>
   2a3fa:	4a4c      	ldr	r2, [pc, #304]	; (2a52c <_sercom_get_default_pad+0x148>)
   2a3fc:	4293      	cmp	r3, r2
   2a3fe:	d806      	bhi.n	2a40e <_sercom_get_default_pad+0x2a>
   2a400:	4a4b      	ldr	r2, [pc, #300]	; (2a530 <_sercom_get_default_pad+0x14c>)
   2a402:	4293      	cmp	r3, r2
   2a404:	d00f      	beq.n	2a426 <_sercom_get_default_pad+0x42>
   2a406:	4a4b      	ldr	r2, [pc, #300]	; (2a534 <_sercom_get_default_pad+0x150>)
   2a408:	4293      	cmp	r3, r2
   2a40a:	d021      	beq.n	2a450 <_sercom_get_default_pad+0x6c>
   2a40c:	e089      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a40e:	4a4a      	ldr	r2, [pc, #296]	; (2a538 <_sercom_get_default_pad+0x154>)
   2a410:	4293      	cmp	r3, r2
   2a412:	d100      	bne.n	2a416 <_sercom_get_default_pad+0x32>
   2a414:	e05b      	b.n	2a4ce <_sercom_get_default_pad+0xea>
   2a416:	4a49      	ldr	r2, [pc, #292]	; (2a53c <_sercom_get_default_pad+0x158>)
   2a418:	4293      	cmp	r3, r2
   2a41a:	d100      	bne.n	2a41e <_sercom_get_default_pad+0x3a>
   2a41c:	e06c      	b.n	2a4f8 <_sercom_get_default_pad+0x114>
   2a41e:	4a48      	ldr	r2, [pc, #288]	; (2a540 <_sercom_get_default_pad+0x15c>)
   2a420:	4293      	cmp	r3, r2
   2a422:	d03f      	beq.n	2a4a4 <_sercom_get_default_pad+0xc0>
   2a424:	e07d      	b.n	2a522 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   2a426:	1cfb      	adds	r3, r7, #3
   2a428:	781b      	ldrb	r3, [r3, #0]
   2a42a:	2b01      	cmp	r3, #1
   2a42c:	d00a      	beq.n	2a444 <_sercom_get_default_pad+0x60>
   2a42e:	dc02      	bgt.n	2a436 <_sercom_get_default_pad+0x52>
   2a430:	2b00      	cmp	r3, #0
   2a432:	d005      	beq.n	2a440 <_sercom_get_default_pad+0x5c>
   2a434:	e075      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a436:	2b02      	cmp	r3, #2
   2a438:	d006      	beq.n	2a448 <_sercom_get_default_pad+0x64>
   2a43a:	2b03      	cmp	r3, #3
   2a43c:	d006      	beq.n	2a44c <_sercom_get_default_pad+0x68>
   2a43e:	e070      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a440:	4b40      	ldr	r3, [pc, #256]	; (2a544 <_sercom_get_default_pad+0x160>)
   2a442:	e06f      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a444:	4b40      	ldr	r3, [pc, #256]	; (2a548 <_sercom_get_default_pad+0x164>)
   2a446:	e06d      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a448:	4b40      	ldr	r3, [pc, #256]	; (2a54c <_sercom_get_default_pad+0x168>)
   2a44a:	e06b      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a44c:	4b40      	ldr	r3, [pc, #256]	; (2a550 <_sercom_get_default_pad+0x16c>)
   2a44e:	e069      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a450:	1cfb      	adds	r3, r7, #3
   2a452:	781b      	ldrb	r3, [r3, #0]
   2a454:	2b01      	cmp	r3, #1
   2a456:	d00a      	beq.n	2a46e <_sercom_get_default_pad+0x8a>
   2a458:	dc02      	bgt.n	2a460 <_sercom_get_default_pad+0x7c>
   2a45a:	2b00      	cmp	r3, #0
   2a45c:	d005      	beq.n	2a46a <_sercom_get_default_pad+0x86>
   2a45e:	e060      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a460:	2b02      	cmp	r3, #2
   2a462:	d006      	beq.n	2a472 <_sercom_get_default_pad+0x8e>
   2a464:	2b03      	cmp	r3, #3
   2a466:	d006      	beq.n	2a476 <_sercom_get_default_pad+0x92>
   2a468:	e05b      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a46a:	2303      	movs	r3, #3
   2a46c:	e05a      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a46e:	4b39      	ldr	r3, [pc, #228]	; (2a554 <_sercom_get_default_pad+0x170>)
   2a470:	e058      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a472:	4b39      	ldr	r3, [pc, #228]	; (2a558 <_sercom_get_default_pad+0x174>)
   2a474:	e056      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a476:	4b39      	ldr	r3, [pc, #228]	; (2a55c <_sercom_get_default_pad+0x178>)
   2a478:	e054      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a47a:	1cfb      	adds	r3, r7, #3
   2a47c:	781b      	ldrb	r3, [r3, #0]
   2a47e:	2b01      	cmp	r3, #1
   2a480:	d00a      	beq.n	2a498 <_sercom_get_default_pad+0xb4>
   2a482:	dc02      	bgt.n	2a48a <_sercom_get_default_pad+0xa6>
   2a484:	2b00      	cmp	r3, #0
   2a486:	d005      	beq.n	2a494 <_sercom_get_default_pad+0xb0>
   2a488:	e04b      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a48a:	2b02      	cmp	r3, #2
   2a48c:	d006      	beq.n	2a49c <_sercom_get_default_pad+0xb8>
   2a48e:	2b03      	cmp	r3, #3
   2a490:	d006      	beq.n	2a4a0 <_sercom_get_default_pad+0xbc>
   2a492:	e046      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a494:	4b32      	ldr	r3, [pc, #200]	; (2a560 <_sercom_get_default_pad+0x17c>)
   2a496:	e045      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a498:	4b32      	ldr	r3, [pc, #200]	; (2a564 <_sercom_get_default_pad+0x180>)
   2a49a:	e043      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a49c:	4b32      	ldr	r3, [pc, #200]	; (2a568 <_sercom_get_default_pad+0x184>)
   2a49e:	e041      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4a0:	4b32      	ldr	r3, [pc, #200]	; (2a56c <_sercom_get_default_pad+0x188>)
   2a4a2:	e03f      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4a4:	1cfb      	adds	r3, r7, #3
   2a4a6:	781b      	ldrb	r3, [r3, #0]
   2a4a8:	2b01      	cmp	r3, #1
   2a4aa:	d00a      	beq.n	2a4c2 <_sercom_get_default_pad+0xde>
   2a4ac:	dc02      	bgt.n	2a4b4 <_sercom_get_default_pad+0xd0>
   2a4ae:	2b00      	cmp	r3, #0
   2a4b0:	d005      	beq.n	2a4be <_sercom_get_default_pad+0xda>
   2a4b2:	e036      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a4b4:	2b02      	cmp	r3, #2
   2a4b6:	d006      	beq.n	2a4c6 <_sercom_get_default_pad+0xe2>
   2a4b8:	2b03      	cmp	r3, #3
   2a4ba:	d006      	beq.n	2a4ca <_sercom_get_default_pad+0xe6>
   2a4bc:	e031      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a4be:	4b2c      	ldr	r3, [pc, #176]	; (2a570 <_sercom_get_default_pad+0x18c>)
   2a4c0:	e030      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4c2:	4b2c      	ldr	r3, [pc, #176]	; (2a574 <_sercom_get_default_pad+0x190>)
   2a4c4:	e02e      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4c6:	4b2c      	ldr	r3, [pc, #176]	; (2a578 <_sercom_get_default_pad+0x194>)
   2a4c8:	e02c      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4ca:	4b2c      	ldr	r3, [pc, #176]	; (2a57c <_sercom_get_default_pad+0x198>)
   2a4cc:	e02a      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4ce:	1cfb      	adds	r3, r7, #3
   2a4d0:	781b      	ldrb	r3, [r3, #0]
   2a4d2:	2b01      	cmp	r3, #1
   2a4d4:	d00a      	beq.n	2a4ec <_sercom_get_default_pad+0x108>
   2a4d6:	dc02      	bgt.n	2a4de <_sercom_get_default_pad+0xfa>
   2a4d8:	2b00      	cmp	r3, #0
   2a4da:	d005      	beq.n	2a4e8 <_sercom_get_default_pad+0x104>
   2a4dc:	e021      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a4de:	2b02      	cmp	r3, #2
   2a4e0:	d006      	beq.n	2a4f0 <_sercom_get_default_pad+0x10c>
   2a4e2:	2b03      	cmp	r3, #3
   2a4e4:	d006      	beq.n	2a4f4 <_sercom_get_default_pad+0x110>
   2a4e6:	e01c      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a4e8:	4b25      	ldr	r3, [pc, #148]	; (2a580 <_sercom_get_default_pad+0x19c>)
   2a4ea:	e01b      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4ec:	4b25      	ldr	r3, [pc, #148]	; (2a584 <_sercom_get_default_pad+0x1a0>)
   2a4ee:	e019      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4f0:	4b25      	ldr	r3, [pc, #148]	; (2a588 <_sercom_get_default_pad+0x1a4>)
   2a4f2:	e017      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4f4:	4b25      	ldr	r3, [pc, #148]	; (2a58c <_sercom_get_default_pad+0x1a8>)
   2a4f6:	e015      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a4f8:	1cfb      	adds	r3, r7, #3
   2a4fa:	781b      	ldrb	r3, [r3, #0]
   2a4fc:	2b01      	cmp	r3, #1
   2a4fe:	d00a      	beq.n	2a516 <_sercom_get_default_pad+0x132>
   2a500:	dc02      	bgt.n	2a508 <_sercom_get_default_pad+0x124>
   2a502:	2b00      	cmp	r3, #0
   2a504:	d005      	beq.n	2a512 <_sercom_get_default_pad+0x12e>
   2a506:	e00c      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a508:	2b02      	cmp	r3, #2
   2a50a:	d006      	beq.n	2a51a <_sercom_get_default_pad+0x136>
   2a50c:	2b03      	cmp	r3, #3
   2a50e:	d006      	beq.n	2a51e <_sercom_get_default_pad+0x13a>
   2a510:	e007      	b.n	2a522 <_sercom_get_default_pad+0x13e>
   2a512:	4b1f      	ldr	r3, [pc, #124]	; (2a590 <_sercom_get_default_pad+0x1ac>)
   2a514:	e006      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a516:	4b1f      	ldr	r3, [pc, #124]	; (2a594 <_sercom_get_default_pad+0x1b0>)
   2a518:	e004      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a51a:	4b1f      	ldr	r3, [pc, #124]	; (2a598 <_sercom_get_default_pad+0x1b4>)
   2a51c:	e002      	b.n	2a524 <_sercom_get_default_pad+0x140>
   2a51e:	4b1f      	ldr	r3, [pc, #124]	; (2a59c <_sercom_get_default_pad+0x1b8>)
   2a520:	e000      	b.n	2a524 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   2a522:	2300      	movs	r3, #0
}
   2a524:	0018      	movs	r0, r3
   2a526:	46bd      	mov	sp, r7
   2a528:	b002      	add	sp, #8
   2a52a:	bd80      	pop	{r7, pc}
   2a52c:	42001000 	.word	0x42001000
   2a530:	42000800 	.word	0x42000800
   2a534:	42000c00 	.word	0x42000c00
   2a538:	42001800 	.word	0x42001800
   2a53c:	42001c00 	.word	0x42001c00
   2a540:	42001400 	.word	0x42001400
   2a544:	00040003 	.word	0x00040003
   2a548:	00050003 	.word	0x00050003
   2a54c:	00060003 	.word	0x00060003
   2a550:	00070003 	.word	0x00070003
   2a554:	00010003 	.word	0x00010003
   2a558:	001e0003 	.word	0x001e0003
   2a55c:	001f0003 	.word	0x001f0003
   2a560:	00080003 	.word	0x00080003
   2a564:	00090003 	.word	0x00090003
   2a568:	000a0003 	.word	0x000a0003
   2a56c:	000b0003 	.word	0x000b0003
   2a570:	00100003 	.word	0x00100003
   2a574:	00110003 	.word	0x00110003
   2a578:	00120003 	.word	0x00120003
   2a57c:	00130003 	.word	0x00130003
   2a580:	000c0003 	.word	0x000c0003
   2a584:	000d0003 	.word	0x000d0003
   2a588:	000e0003 	.word	0x000e0003
   2a58c:	000f0003 	.word	0x000f0003
   2a590:	00160003 	.word	0x00160003
   2a594:	00170003 	.word	0x00170003
   2a598:	00180003 	.word	0x00180003
   2a59c:	00190003 	.word	0x00190003

0002a5a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   2a5a0:	b590      	push	{r4, r7, lr}
   2a5a2:	b08b      	sub	sp, #44	; 0x2c
   2a5a4:	af00      	add	r7, sp, #0
   2a5a6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   2a5a8:	230c      	movs	r3, #12
   2a5aa:	18fb      	adds	r3, r7, r3
   2a5ac:	4a0f      	ldr	r2, [pc, #60]	; (2a5ec <_sercom_get_sercom_inst_index+0x4c>)
   2a5ae:	ca13      	ldmia	r2!, {r0, r1, r4}
   2a5b0:	c313      	stmia	r3!, {r0, r1, r4}
   2a5b2:	ca13      	ldmia	r2!, {r0, r1, r4}
   2a5b4:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2a5b6:	2300      	movs	r3, #0
   2a5b8:	627b      	str	r3, [r7, #36]	; 0x24
   2a5ba:	e00e      	b.n	2a5da <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   2a5bc:	230c      	movs	r3, #12
   2a5be:	18fb      	adds	r3, r7, r3
   2a5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2a5c2:	0092      	lsls	r2, r2, #2
   2a5c4:	58d3      	ldr	r3, [r2, r3]
   2a5c6:	001a      	movs	r2, r3
   2a5c8:	687b      	ldr	r3, [r7, #4]
   2a5ca:	429a      	cmp	r2, r3
   2a5cc:	d102      	bne.n	2a5d4 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a5d0:	b2db      	uxtb	r3, r3
   2a5d2:	e006      	b.n	2a5e2 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a5d6:	3301      	adds	r3, #1
   2a5d8:	627b      	str	r3, [r7, #36]	; 0x24
   2a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2a5dc:	2b05      	cmp	r3, #5
   2a5de:	d9ed      	bls.n	2a5bc <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2a5e0:	2300      	movs	r3, #0
}
   2a5e2:	0018      	movs	r0, r3
   2a5e4:	46bd      	mov	sp, r7
   2a5e6:	b00b      	add	sp, #44	; 0x2c
   2a5e8:	bd90      	pop	{r4, r7, pc}
   2a5ea:	46c0      	nop			; (mov r8, r8)
   2a5ec:	0003dab4 	.word	0x0003dab4

0002a5f0 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2a5f0:	b580      	push	{r7, lr}
   2a5f2:	b082      	sub	sp, #8
   2a5f4:	af00      	add	r7, sp, #0
   2a5f6:	0002      	movs	r2, r0
   2a5f8:	1dfb      	adds	r3, r7, #7
   2a5fa:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   2a5fc:	46c0      	nop			; (mov r8, r8)
   2a5fe:	46bd      	mov	sp, r7
   2a600:	b002      	add	sp, #8
   2a602:	bd80      	pop	{r7, pc}

0002a604 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   2a604:	b580      	push	{r7, lr}
   2a606:	b084      	sub	sp, #16
   2a608:	af00      	add	r7, sp, #0
   2a60a:	0002      	movs	r2, r0
   2a60c:	6039      	str	r1, [r7, #0]
   2a60e:	1dfb      	adds	r3, r7, #7
   2a610:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2a612:	4b13      	ldr	r3, [pc, #76]	; (2a660 <_sercom_set_handler+0x5c>)
   2a614:	781b      	ldrb	r3, [r3, #0]
   2a616:	2201      	movs	r2, #1
   2a618:	4053      	eors	r3, r2
   2a61a:	b2db      	uxtb	r3, r3
   2a61c:	2b00      	cmp	r3, #0
   2a61e:	d015      	beq.n	2a64c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2a620:	2300      	movs	r3, #0
   2a622:	60fb      	str	r3, [r7, #12]
   2a624:	e00c      	b.n	2a640 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   2a626:	4b0f      	ldr	r3, [pc, #60]	; (2a664 <_sercom_set_handler+0x60>)
   2a628:	68fa      	ldr	r2, [r7, #12]
   2a62a:	0092      	lsls	r2, r2, #2
   2a62c:	490e      	ldr	r1, [pc, #56]	; (2a668 <_sercom_set_handler+0x64>)
   2a62e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2a630:	4b0e      	ldr	r3, [pc, #56]	; (2a66c <_sercom_set_handler+0x68>)
   2a632:	68fa      	ldr	r2, [r7, #12]
   2a634:	0092      	lsls	r2, r2, #2
   2a636:	2100      	movs	r1, #0
   2a638:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2a63a:	68fb      	ldr	r3, [r7, #12]
   2a63c:	3301      	adds	r3, #1
   2a63e:	60fb      	str	r3, [r7, #12]
   2a640:	68fb      	ldr	r3, [r7, #12]
   2a642:	2b05      	cmp	r3, #5
   2a644:	d9ef      	bls.n	2a626 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   2a646:	4b06      	ldr	r3, [pc, #24]	; (2a660 <_sercom_set_handler+0x5c>)
   2a648:	2201      	movs	r2, #1
   2a64a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   2a64c:	1dfb      	adds	r3, r7, #7
   2a64e:	781a      	ldrb	r2, [r3, #0]
   2a650:	4b04      	ldr	r3, [pc, #16]	; (2a664 <_sercom_set_handler+0x60>)
   2a652:	0092      	lsls	r2, r2, #2
   2a654:	6839      	ldr	r1, [r7, #0]
   2a656:	50d1      	str	r1, [r2, r3]
}
   2a658:	46c0      	nop			; (mov r8, r8)
   2a65a:	46bd      	mov	sp, r7
   2a65c:	b004      	add	sp, #16
   2a65e:	bd80      	pop	{r7, pc}
   2a660:	200041e2 	.word	0x200041e2
   2a664:	200041e4 	.word	0x200041e4
   2a668:	0002a5f1 	.word	0x0002a5f1
   2a66c:	20005c1c 	.word	0x20005c1c

0002a670 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2a670:	b590      	push	{r4, r7, lr}
   2a672:	b085      	sub	sp, #20
   2a674:	af00      	add	r7, sp, #0
   2a676:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   2a678:	2308      	movs	r3, #8
   2a67a:	18fb      	adds	r3, r7, r3
   2a67c:	4a0b      	ldr	r2, [pc, #44]	; (2a6ac <_sercom_get_interrupt_vector+0x3c>)
   2a67e:	6811      	ldr	r1, [r2, #0]
   2a680:	6019      	str	r1, [r3, #0]
   2a682:	8892      	ldrh	r2, [r2, #4]
   2a684:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   2a686:	230f      	movs	r3, #15
   2a688:	18fc      	adds	r4, r7, r3
   2a68a:	687b      	ldr	r3, [r7, #4]
   2a68c:	0018      	movs	r0, r3
   2a68e:	4b08      	ldr	r3, [pc, #32]	; (2a6b0 <_sercom_get_interrupt_vector+0x40>)
   2a690:	4798      	blx	r3
   2a692:	0003      	movs	r3, r0
   2a694:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   2a696:	230f      	movs	r3, #15
   2a698:	18fb      	adds	r3, r7, r3
   2a69a:	781b      	ldrb	r3, [r3, #0]
   2a69c:	2208      	movs	r2, #8
   2a69e:	18ba      	adds	r2, r7, r2
   2a6a0:	5cd3      	ldrb	r3, [r2, r3]
   2a6a2:	b25b      	sxtb	r3, r3
}
   2a6a4:	0018      	movs	r0, r3
   2a6a6:	46bd      	mov	sp, r7
   2a6a8:	b005      	add	sp, #20
   2a6aa:	bd90      	pop	{r4, r7, pc}
   2a6ac:	0003dacc 	.word	0x0003dacc
   2a6b0:	0002a5a1 	.word	0x0002a5a1

0002a6b4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   2a6b4:	b580      	push	{r7, lr}
   2a6b6:	af00      	add	r7, sp, #0
   2a6b8:	4b03      	ldr	r3, [pc, #12]	; (2a6c8 <SERCOM0_Handler+0x14>)
   2a6ba:	681b      	ldr	r3, [r3, #0]
   2a6bc:	2000      	movs	r0, #0
   2a6be:	4798      	blx	r3
   2a6c0:	46c0      	nop			; (mov r8, r8)
   2a6c2:	46bd      	mov	sp, r7
   2a6c4:	bd80      	pop	{r7, pc}
   2a6c6:	46c0      	nop			; (mov r8, r8)
   2a6c8:	200041e4 	.word	0x200041e4

0002a6cc <SERCOM1_Handler>:
   2a6cc:	b580      	push	{r7, lr}
   2a6ce:	af00      	add	r7, sp, #0
   2a6d0:	4b03      	ldr	r3, [pc, #12]	; (2a6e0 <SERCOM1_Handler+0x14>)
   2a6d2:	685b      	ldr	r3, [r3, #4]
   2a6d4:	2001      	movs	r0, #1
   2a6d6:	4798      	blx	r3
   2a6d8:	46c0      	nop			; (mov r8, r8)
   2a6da:	46bd      	mov	sp, r7
   2a6dc:	bd80      	pop	{r7, pc}
   2a6de:	46c0      	nop			; (mov r8, r8)
   2a6e0:	200041e4 	.word	0x200041e4

0002a6e4 <SERCOM2_Handler>:
   2a6e4:	b580      	push	{r7, lr}
   2a6e6:	af00      	add	r7, sp, #0
   2a6e8:	4b03      	ldr	r3, [pc, #12]	; (2a6f8 <SERCOM2_Handler+0x14>)
   2a6ea:	689b      	ldr	r3, [r3, #8]
   2a6ec:	2002      	movs	r0, #2
   2a6ee:	4798      	blx	r3
   2a6f0:	46c0      	nop			; (mov r8, r8)
   2a6f2:	46bd      	mov	sp, r7
   2a6f4:	bd80      	pop	{r7, pc}
   2a6f6:	46c0      	nop			; (mov r8, r8)
   2a6f8:	200041e4 	.word	0x200041e4

0002a6fc <SERCOM3_Handler>:
   2a6fc:	b580      	push	{r7, lr}
   2a6fe:	af00      	add	r7, sp, #0
   2a700:	4b03      	ldr	r3, [pc, #12]	; (2a710 <SERCOM3_Handler+0x14>)
   2a702:	68db      	ldr	r3, [r3, #12]
   2a704:	2003      	movs	r0, #3
   2a706:	4798      	blx	r3
   2a708:	46c0      	nop			; (mov r8, r8)
   2a70a:	46bd      	mov	sp, r7
   2a70c:	bd80      	pop	{r7, pc}
   2a70e:	46c0      	nop			; (mov r8, r8)
   2a710:	200041e4 	.word	0x200041e4

0002a714 <SERCOM4_Handler>:
   2a714:	b580      	push	{r7, lr}
   2a716:	af00      	add	r7, sp, #0
   2a718:	4b03      	ldr	r3, [pc, #12]	; (2a728 <SERCOM4_Handler+0x14>)
   2a71a:	691b      	ldr	r3, [r3, #16]
   2a71c:	2004      	movs	r0, #4
   2a71e:	4798      	blx	r3
   2a720:	46c0      	nop			; (mov r8, r8)
   2a722:	46bd      	mov	sp, r7
   2a724:	bd80      	pop	{r7, pc}
   2a726:	46c0      	nop			; (mov r8, r8)
   2a728:	200041e4 	.word	0x200041e4

0002a72c <SERCOM5_Handler>:
   2a72c:	b580      	push	{r7, lr}
   2a72e:	af00      	add	r7, sp, #0
   2a730:	4b03      	ldr	r3, [pc, #12]	; (2a740 <SERCOM5_Handler+0x14>)
   2a732:	695b      	ldr	r3, [r3, #20]
   2a734:	2005      	movs	r0, #5
   2a736:	4798      	blx	r3
   2a738:	46c0      	nop			; (mov r8, r8)
   2a73a:	46bd      	mov	sp, r7
   2a73c:	bd80      	pop	{r7, pc}
   2a73e:	46c0      	nop			; (mov r8, r8)
   2a740:	200041e4 	.word	0x200041e4

0002a744 <system_pinmux_get_config_defaults>:
{
   2a744:	b580      	push	{r7, lr}
   2a746:	b082      	sub	sp, #8
   2a748:	af00      	add	r7, sp, #0
   2a74a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a74c:	687b      	ldr	r3, [r7, #4]
   2a74e:	2280      	movs	r2, #128	; 0x80
   2a750:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a752:	687b      	ldr	r3, [r7, #4]
   2a754:	2200      	movs	r2, #0
   2a756:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a758:	687b      	ldr	r3, [r7, #4]
   2a75a:	2201      	movs	r2, #1
   2a75c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a75e:	687b      	ldr	r3, [r7, #4]
   2a760:	2200      	movs	r2, #0
   2a762:	70da      	strb	r2, [r3, #3]
}
   2a764:	46c0      	nop			; (mov r8, r8)
   2a766:	46bd      	mov	sp, r7
   2a768:	b002      	add	sp, #8
   2a76a:	bd80      	pop	{r7, pc}

0002a76c <system_pinmux_get_group_from_gpio_pin>:
{
   2a76c:	b580      	push	{r7, lr}
   2a76e:	b084      	sub	sp, #16
   2a770:	af00      	add	r7, sp, #0
   2a772:	0002      	movs	r2, r0
   2a774:	1dfb      	adds	r3, r7, #7
   2a776:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2a778:	230f      	movs	r3, #15
   2a77a:	18fb      	adds	r3, r7, r3
   2a77c:	1dfa      	adds	r2, r7, #7
   2a77e:	7812      	ldrb	r2, [r2, #0]
   2a780:	09d2      	lsrs	r2, r2, #7
   2a782:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2a784:	230e      	movs	r3, #14
   2a786:	18fb      	adds	r3, r7, r3
   2a788:	1dfa      	adds	r2, r7, #7
   2a78a:	7812      	ldrb	r2, [r2, #0]
   2a78c:	0952      	lsrs	r2, r2, #5
   2a78e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2a790:	4b0d      	ldr	r3, [pc, #52]	; (2a7c8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2a792:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2a794:	230f      	movs	r3, #15
   2a796:	18fb      	adds	r3, r7, r3
   2a798:	781b      	ldrb	r3, [r3, #0]
   2a79a:	2b00      	cmp	r3, #0
   2a79c:	d10f      	bne.n	2a7be <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2a79e:	230f      	movs	r3, #15
   2a7a0:	18fb      	adds	r3, r7, r3
   2a7a2:	781b      	ldrb	r3, [r3, #0]
   2a7a4:	009b      	lsls	r3, r3, #2
   2a7a6:	2210      	movs	r2, #16
   2a7a8:	4694      	mov	ip, r2
   2a7aa:	44bc      	add	ip, r7
   2a7ac:	4463      	add	r3, ip
   2a7ae:	3b08      	subs	r3, #8
   2a7b0:	681a      	ldr	r2, [r3, #0]
   2a7b2:	230e      	movs	r3, #14
   2a7b4:	18fb      	adds	r3, r7, r3
   2a7b6:	781b      	ldrb	r3, [r3, #0]
   2a7b8:	01db      	lsls	r3, r3, #7
   2a7ba:	18d3      	adds	r3, r2, r3
   2a7bc:	e000      	b.n	2a7c0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2a7be:	2300      	movs	r3, #0
}
   2a7c0:	0018      	movs	r0, r3
   2a7c2:	46bd      	mov	sp, r7
   2a7c4:	b004      	add	sp, #16
   2a7c6:	bd80      	pop	{r7, pc}
   2a7c8:	41004400 	.word	0x41004400

0002a7cc <port_get_group_from_gpio_pin>:
{
   2a7cc:	b580      	push	{r7, lr}
   2a7ce:	b082      	sub	sp, #8
   2a7d0:	af00      	add	r7, sp, #0
   2a7d2:	0002      	movs	r2, r0
   2a7d4:	1dfb      	adds	r3, r7, #7
   2a7d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a7d8:	1dfb      	adds	r3, r7, #7
   2a7da:	781b      	ldrb	r3, [r3, #0]
   2a7dc:	0018      	movs	r0, r3
   2a7de:	4b03      	ldr	r3, [pc, #12]	; (2a7ec <port_get_group_from_gpio_pin+0x20>)
   2a7e0:	4798      	blx	r3
   2a7e2:	0003      	movs	r3, r0
}
   2a7e4:	0018      	movs	r0, r3
   2a7e6:	46bd      	mov	sp, r7
   2a7e8:	b002      	add	sp, #8
   2a7ea:	bd80      	pop	{r7, pc}
   2a7ec:	0002a76d 	.word	0x0002a76d

0002a7f0 <port_pin_set_output_level>:
{
   2a7f0:	b580      	push	{r7, lr}
   2a7f2:	b084      	sub	sp, #16
   2a7f4:	af00      	add	r7, sp, #0
   2a7f6:	0002      	movs	r2, r0
   2a7f8:	1dfb      	adds	r3, r7, #7
   2a7fa:	701a      	strb	r2, [r3, #0]
   2a7fc:	1dbb      	adds	r3, r7, #6
   2a7fe:	1c0a      	adds	r2, r1, #0
   2a800:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2a802:	1dfb      	adds	r3, r7, #7
   2a804:	781b      	ldrb	r3, [r3, #0]
   2a806:	0018      	movs	r0, r3
   2a808:	4b0d      	ldr	r3, [pc, #52]	; (2a840 <port_pin_set_output_level+0x50>)
   2a80a:	4798      	blx	r3
   2a80c:	0003      	movs	r3, r0
   2a80e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2a810:	1dfb      	adds	r3, r7, #7
   2a812:	781b      	ldrb	r3, [r3, #0]
   2a814:	221f      	movs	r2, #31
   2a816:	4013      	ands	r3, r2
   2a818:	2201      	movs	r2, #1
   2a81a:	409a      	lsls	r2, r3
   2a81c:	0013      	movs	r3, r2
   2a81e:	60bb      	str	r3, [r7, #8]
	if (level) {
   2a820:	1dbb      	adds	r3, r7, #6
   2a822:	781b      	ldrb	r3, [r3, #0]
   2a824:	2b00      	cmp	r3, #0
   2a826:	d003      	beq.n	2a830 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   2a828:	68fb      	ldr	r3, [r7, #12]
   2a82a:	68ba      	ldr	r2, [r7, #8]
   2a82c:	619a      	str	r2, [r3, #24]
}
   2a82e:	e002      	b.n	2a836 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2a830:	68fb      	ldr	r3, [r7, #12]
   2a832:	68ba      	ldr	r2, [r7, #8]
   2a834:	615a      	str	r2, [r3, #20]
}
   2a836:	46c0      	nop			; (mov r8, r8)
   2a838:	46bd      	mov	sp, r7
   2a83a:	b004      	add	sp, #16
   2a83c:	bd80      	pop	{r7, pc}
   2a83e:	46c0      	nop			; (mov r8, r8)
   2a840:	0002a7cd 	.word	0x0002a7cd

0002a844 <system_gclk_chan_get_config_defaults>:
{
   2a844:	b580      	push	{r7, lr}
   2a846:	b082      	sub	sp, #8
   2a848:	af00      	add	r7, sp, #0
   2a84a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a84c:	687b      	ldr	r3, [r7, #4]
   2a84e:	2200      	movs	r2, #0
   2a850:	701a      	strb	r2, [r3, #0]
}
   2a852:	46c0      	nop			; (mov r8, r8)
   2a854:	46bd      	mov	sp, r7
   2a856:	b002      	add	sp, #8
   2a858:	bd80      	pop	{r7, pc}
	...

0002a85c <system_apb_clock_set_mask>:
{
   2a85c:	b580      	push	{r7, lr}
   2a85e:	b082      	sub	sp, #8
   2a860:	af00      	add	r7, sp, #0
   2a862:	0002      	movs	r2, r0
   2a864:	6039      	str	r1, [r7, #0]
   2a866:	1dfb      	adds	r3, r7, #7
   2a868:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a86a:	1dfb      	adds	r3, r7, #7
   2a86c:	781b      	ldrb	r3, [r3, #0]
   2a86e:	2b01      	cmp	r3, #1
   2a870:	d00a      	beq.n	2a888 <system_apb_clock_set_mask+0x2c>
   2a872:	2b02      	cmp	r3, #2
   2a874:	d00f      	beq.n	2a896 <system_apb_clock_set_mask+0x3a>
   2a876:	2b00      	cmp	r3, #0
   2a878:	d114      	bne.n	2a8a4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a87a:	4b0e      	ldr	r3, [pc, #56]	; (2a8b4 <system_apb_clock_set_mask+0x58>)
   2a87c:	4a0d      	ldr	r2, [pc, #52]	; (2a8b4 <system_apb_clock_set_mask+0x58>)
   2a87e:	6991      	ldr	r1, [r2, #24]
   2a880:	683a      	ldr	r2, [r7, #0]
   2a882:	430a      	orrs	r2, r1
   2a884:	619a      	str	r2, [r3, #24]
			break;
   2a886:	e00f      	b.n	2a8a8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a888:	4b0a      	ldr	r3, [pc, #40]	; (2a8b4 <system_apb_clock_set_mask+0x58>)
   2a88a:	4a0a      	ldr	r2, [pc, #40]	; (2a8b4 <system_apb_clock_set_mask+0x58>)
   2a88c:	69d1      	ldr	r1, [r2, #28]
   2a88e:	683a      	ldr	r2, [r7, #0]
   2a890:	430a      	orrs	r2, r1
   2a892:	61da      	str	r2, [r3, #28]
			break;
   2a894:	e008      	b.n	2a8a8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a896:	4b07      	ldr	r3, [pc, #28]	; (2a8b4 <system_apb_clock_set_mask+0x58>)
   2a898:	4a06      	ldr	r2, [pc, #24]	; (2a8b4 <system_apb_clock_set_mask+0x58>)
   2a89a:	6a11      	ldr	r1, [r2, #32]
   2a89c:	683a      	ldr	r2, [r7, #0]
   2a89e:	430a      	orrs	r2, r1
   2a8a0:	621a      	str	r2, [r3, #32]
			break;
   2a8a2:	e001      	b.n	2a8a8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a8a4:	2317      	movs	r3, #23
   2a8a6:	e000      	b.n	2a8aa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a8a8:	2300      	movs	r3, #0
}
   2a8aa:	0018      	movs	r0, r3
   2a8ac:	46bd      	mov	sp, r7
   2a8ae:	b002      	add	sp, #8
   2a8b0:	bd80      	pop	{r7, pc}
   2a8b2:	46c0      	nop			; (mov r8, r8)
   2a8b4:	40000400 	.word	0x40000400

0002a8b8 <system_is_debugger_present>:
{
   2a8b8:	b580      	push	{r7, lr}
   2a8ba:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2a8bc:	4b05      	ldr	r3, [pc, #20]	; (2a8d4 <system_is_debugger_present+0x1c>)
   2a8be:	789b      	ldrb	r3, [r3, #2]
   2a8c0:	b2db      	uxtb	r3, r3
   2a8c2:	001a      	movs	r2, r3
   2a8c4:	2302      	movs	r3, #2
   2a8c6:	4013      	ands	r3, r2
   2a8c8:	1e5a      	subs	r2, r3, #1
   2a8ca:	4193      	sbcs	r3, r2
   2a8cc:	b2db      	uxtb	r3, r3
}
   2a8ce:	0018      	movs	r0, r3
   2a8d0:	46bd      	mov	sp, r7
   2a8d2:	bd80      	pop	{r7, pc}
   2a8d4:	41002000 	.word	0x41002000

0002a8d8 <system_interrupt_enable>:
{
   2a8d8:	b580      	push	{r7, lr}
   2a8da:	b082      	sub	sp, #8
   2a8dc:	af00      	add	r7, sp, #0
   2a8de:	0002      	movs	r2, r0
   2a8e0:	1dfb      	adds	r3, r7, #7
   2a8e2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a8e4:	4b06      	ldr	r3, [pc, #24]	; (2a900 <system_interrupt_enable+0x28>)
   2a8e6:	1dfa      	adds	r2, r7, #7
   2a8e8:	7812      	ldrb	r2, [r2, #0]
   2a8ea:	0011      	movs	r1, r2
   2a8ec:	221f      	movs	r2, #31
   2a8ee:	400a      	ands	r2, r1
   2a8f0:	2101      	movs	r1, #1
   2a8f2:	4091      	lsls	r1, r2
   2a8f4:	000a      	movs	r2, r1
   2a8f6:	601a      	str	r2, [r3, #0]
}
   2a8f8:	46c0      	nop			; (mov r8, r8)
   2a8fa:	46bd      	mov	sp, r7
   2a8fc:	b002      	add	sp, #8
   2a8fe:	bd80      	pop	{r7, pc}
   2a900:	e000e100 	.word	0xe000e100

0002a904 <system_interrupt_disable>:
{
   2a904:	b580      	push	{r7, lr}
   2a906:	b082      	sub	sp, #8
   2a908:	af00      	add	r7, sp, #0
   2a90a:	0002      	movs	r2, r0
   2a90c:	1dfb      	adds	r3, r7, #7
   2a90e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a910:	4a07      	ldr	r2, [pc, #28]	; (2a930 <system_interrupt_disable+0x2c>)
   2a912:	1dfb      	adds	r3, r7, #7
   2a914:	781b      	ldrb	r3, [r3, #0]
   2a916:	0019      	movs	r1, r3
   2a918:	231f      	movs	r3, #31
   2a91a:	400b      	ands	r3, r1
   2a91c:	2101      	movs	r1, #1
   2a91e:	4099      	lsls	r1, r3
   2a920:	000b      	movs	r3, r1
   2a922:	0019      	movs	r1, r3
   2a924:	2380      	movs	r3, #128	; 0x80
   2a926:	50d1      	str	r1, [r2, r3]
}
   2a928:	46c0      	nop			; (mov r8, r8)
   2a92a:	46bd      	mov	sp, r7
   2a92c:	b002      	add	sp, #8
   2a92e:	bd80      	pop	{r7, pc}
   2a930:	e000e100 	.word	0xe000e100

0002a934 <spi_is_syncing>:
{
   2a934:	b580      	push	{r7, lr}
   2a936:	b084      	sub	sp, #16
   2a938:	af00      	add	r7, sp, #0
   2a93a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a93c:	687b      	ldr	r3, [r7, #4]
   2a93e:	681b      	ldr	r3, [r3, #0]
   2a940:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2a942:	68fb      	ldr	r3, [r7, #12]
   2a944:	69db      	ldr	r3, [r3, #28]
   2a946:	1e5a      	subs	r2, r3, #1
   2a948:	4193      	sbcs	r3, r2
   2a94a:	b2db      	uxtb	r3, r3
}
   2a94c:	0018      	movs	r0, r3
   2a94e:	46bd      	mov	sp, r7
   2a950:	b004      	add	sp, #16
   2a952:	bd80      	pop	{r7, pc}

0002a954 <spi_enable>:
{
   2a954:	b580      	push	{r7, lr}
   2a956:	b084      	sub	sp, #16
   2a958:	af00      	add	r7, sp, #0
   2a95a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a95c:	687b      	ldr	r3, [r7, #4]
   2a95e:	681b      	ldr	r3, [r3, #0]
   2a960:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2a962:	687b      	ldr	r3, [r7, #4]
   2a964:	681b      	ldr	r3, [r3, #0]
   2a966:	0018      	movs	r0, r3
   2a968:	4b0b      	ldr	r3, [pc, #44]	; (2a998 <spi_enable+0x44>)
   2a96a:	4798      	blx	r3
   2a96c:	0003      	movs	r3, r0
   2a96e:	0018      	movs	r0, r3
   2a970:	4b0a      	ldr	r3, [pc, #40]	; (2a99c <spi_enable+0x48>)
   2a972:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2a974:	46c0      	nop			; (mov r8, r8)
   2a976:	687b      	ldr	r3, [r7, #4]
   2a978:	0018      	movs	r0, r3
   2a97a:	4b09      	ldr	r3, [pc, #36]	; (2a9a0 <spi_enable+0x4c>)
   2a97c:	4798      	blx	r3
   2a97e:	1e03      	subs	r3, r0, #0
   2a980:	d1f9      	bne.n	2a976 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2a982:	68fb      	ldr	r3, [r7, #12]
   2a984:	681b      	ldr	r3, [r3, #0]
   2a986:	2202      	movs	r2, #2
   2a988:	431a      	orrs	r2, r3
   2a98a:	68fb      	ldr	r3, [r7, #12]
   2a98c:	601a      	str	r2, [r3, #0]
}
   2a98e:	46c0      	nop			; (mov r8, r8)
   2a990:	46bd      	mov	sp, r7
   2a992:	b004      	add	sp, #16
   2a994:	bd80      	pop	{r7, pc}
   2a996:	46c0      	nop			; (mov r8, r8)
   2a998:	0002a671 	.word	0x0002a671
   2a99c:	0002a8d9 	.word	0x0002a8d9
   2a9a0:	0002a935 	.word	0x0002a935

0002a9a4 <spi_disable>:
{
   2a9a4:	b580      	push	{r7, lr}
   2a9a6:	b084      	sub	sp, #16
   2a9a8:	af00      	add	r7, sp, #0
   2a9aa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2a9ac:	687b      	ldr	r3, [r7, #4]
   2a9ae:	681b      	ldr	r3, [r3, #0]
   2a9b0:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2a9b2:	687b      	ldr	r3, [r7, #4]
   2a9b4:	681b      	ldr	r3, [r3, #0]
   2a9b6:	0018      	movs	r0, r3
   2a9b8:	4b0e      	ldr	r3, [pc, #56]	; (2a9f4 <spi_disable+0x50>)
   2a9ba:	4798      	blx	r3
   2a9bc:	0003      	movs	r3, r0
   2a9be:	0018      	movs	r0, r3
   2a9c0:	4b0d      	ldr	r3, [pc, #52]	; (2a9f8 <spi_disable+0x54>)
   2a9c2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2a9c4:	46c0      	nop			; (mov r8, r8)
   2a9c6:	687b      	ldr	r3, [r7, #4]
   2a9c8:	0018      	movs	r0, r3
   2a9ca:	4b0c      	ldr	r3, [pc, #48]	; (2a9fc <spi_disable+0x58>)
   2a9cc:	4798      	blx	r3
   2a9ce:	1e03      	subs	r3, r0, #0
   2a9d0:	d1f9      	bne.n	2a9c6 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2a9d2:	68fb      	ldr	r3, [r7, #12]
   2a9d4:	228f      	movs	r2, #143	; 0x8f
   2a9d6:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   2a9d8:	68fb      	ldr	r3, [r7, #12]
   2a9da:	228f      	movs	r2, #143	; 0x8f
   2a9dc:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2a9de:	68fb      	ldr	r3, [r7, #12]
   2a9e0:	681b      	ldr	r3, [r3, #0]
   2a9e2:	2202      	movs	r2, #2
   2a9e4:	4393      	bics	r3, r2
   2a9e6:	001a      	movs	r2, r3
   2a9e8:	68fb      	ldr	r3, [r7, #12]
   2a9ea:	601a      	str	r2, [r3, #0]
}
   2a9ec:	46c0      	nop			; (mov r8, r8)
   2a9ee:	46bd      	mov	sp, r7
   2a9f0:	b004      	add	sp, #16
   2a9f2:	bd80      	pop	{r7, pc}
   2a9f4:	0002a671 	.word	0x0002a671
   2a9f8:	0002a905 	.word	0x0002a905
   2a9fc:	0002a935 	.word	0x0002a935

0002aa00 <spi_is_write_complete>:
{
   2aa00:	b580      	push	{r7, lr}
   2aa02:	b084      	sub	sp, #16
   2aa04:	af00      	add	r7, sp, #0
   2aa06:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2aa08:	687b      	ldr	r3, [r7, #4]
   2aa0a:	681b      	ldr	r3, [r3, #0]
   2aa0c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2aa0e:	68fb      	ldr	r3, [r7, #12]
   2aa10:	7e1b      	ldrb	r3, [r3, #24]
   2aa12:	b2db      	uxtb	r3, r3
   2aa14:	001a      	movs	r2, r3
   2aa16:	2302      	movs	r3, #2
   2aa18:	4013      	ands	r3, r2
   2aa1a:	1e5a      	subs	r2, r3, #1
   2aa1c:	4193      	sbcs	r3, r2
   2aa1e:	b2db      	uxtb	r3, r3
}
   2aa20:	0018      	movs	r0, r3
   2aa22:	46bd      	mov	sp, r7
   2aa24:	b004      	add	sp, #16
   2aa26:	bd80      	pop	{r7, pc}

0002aa28 <spi_is_ready_to_write>:
{
   2aa28:	b580      	push	{r7, lr}
   2aa2a:	b084      	sub	sp, #16
   2aa2c:	af00      	add	r7, sp, #0
   2aa2e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2aa30:	687b      	ldr	r3, [r7, #4]
   2aa32:	681b      	ldr	r3, [r3, #0]
   2aa34:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2aa36:	68fb      	ldr	r3, [r7, #12]
   2aa38:	7e1b      	ldrb	r3, [r3, #24]
   2aa3a:	b2db      	uxtb	r3, r3
   2aa3c:	001a      	movs	r2, r3
   2aa3e:	2301      	movs	r3, #1
   2aa40:	4013      	ands	r3, r2
   2aa42:	1e5a      	subs	r2, r3, #1
   2aa44:	4193      	sbcs	r3, r2
   2aa46:	b2db      	uxtb	r3, r3
}
   2aa48:	0018      	movs	r0, r3
   2aa4a:	46bd      	mov	sp, r7
   2aa4c:	b004      	add	sp, #16
   2aa4e:	bd80      	pop	{r7, pc}

0002aa50 <spi_is_ready_to_read>:
{
   2aa50:	b580      	push	{r7, lr}
   2aa52:	b084      	sub	sp, #16
   2aa54:	af00      	add	r7, sp, #0
   2aa56:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2aa58:	687b      	ldr	r3, [r7, #4]
   2aa5a:	681b      	ldr	r3, [r3, #0]
   2aa5c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2aa5e:	68fb      	ldr	r3, [r7, #12]
   2aa60:	7e1b      	ldrb	r3, [r3, #24]
   2aa62:	b2db      	uxtb	r3, r3
   2aa64:	001a      	movs	r2, r3
   2aa66:	2304      	movs	r3, #4
   2aa68:	4013      	ands	r3, r2
   2aa6a:	1e5a      	subs	r2, r3, #1
   2aa6c:	4193      	sbcs	r3, r2
   2aa6e:	b2db      	uxtb	r3, r3
}
   2aa70:	0018      	movs	r0, r3
   2aa72:	46bd      	mov	sp, r7
   2aa74:	b004      	add	sp, #16
   2aa76:	bd80      	pop	{r7, pc}

0002aa78 <spi_write>:
{
   2aa78:	b580      	push	{r7, lr}
   2aa7a:	b084      	sub	sp, #16
   2aa7c:	af00      	add	r7, sp, #0
   2aa7e:	6078      	str	r0, [r7, #4]
   2aa80:	000a      	movs	r2, r1
   2aa82:	1cbb      	adds	r3, r7, #2
   2aa84:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2aa86:	687b      	ldr	r3, [r7, #4]
   2aa88:	681b      	ldr	r3, [r3, #0]
   2aa8a:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   2aa8c:	687b      	ldr	r3, [r7, #4]
   2aa8e:	0018      	movs	r0, r3
   2aa90:	4b0a      	ldr	r3, [pc, #40]	; (2aabc <spi_write+0x44>)
   2aa92:	4798      	blx	r3
   2aa94:	0003      	movs	r3, r0
   2aa96:	001a      	movs	r2, r3
   2aa98:	2301      	movs	r3, #1
   2aa9a:	4053      	eors	r3, r2
   2aa9c:	b2db      	uxtb	r3, r3
   2aa9e:	2b00      	cmp	r3, #0
   2aaa0:	d001      	beq.n	2aaa6 <spi_write+0x2e>
		return STATUS_BUSY;
   2aaa2:	2305      	movs	r3, #5
   2aaa4:	e006      	b.n	2aab4 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2aaa6:	1cbb      	adds	r3, r7, #2
   2aaa8:	881b      	ldrh	r3, [r3, #0]
   2aaaa:	05db      	lsls	r3, r3, #23
   2aaac:	0dda      	lsrs	r2, r3, #23
   2aaae:	68fb      	ldr	r3, [r7, #12]
   2aab0:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2aab2:	2300      	movs	r3, #0
}
   2aab4:	0018      	movs	r0, r3
   2aab6:	46bd      	mov	sp, r7
   2aab8:	b004      	add	sp, #16
   2aaba:	bd80      	pop	{r7, pc}
   2aabc:	0002aa29 	.word	0x0002aa29

0002aac0 <spi_read>:
{
   2aac0:	b580      	push	{r7, lr}
   2aac2:	b084      	sub	sp, #16
   2aac4:	af00      	add	r7, sp, #0
   2aac6:	6078      	str	r0, [r7, #4]
   2aac8:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2aaca:	687b      	ldr	r3, [r7, #4]
   2aacc:	681b      	ldr	r3, [r3, #0]
   2aace:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2aad0:	687b      	ldr	r3, [r7, #4]
   2aad2:	0018      	movs	r0, r3
   2aad4:	4b1b      	ldr	r3, [pc, #108]	; (2ab44 <spi_read+0x84>)
   2aad6:	4798      	blx	r3
   2aad8:	0003      	movs	r3, r0
   2aada:	001a      	movs	r2, r3
   2aadc:	2301      	movs	r3, #1
   2aade:	4053      	eors	r3, r2
   2aae0:	b2db      	uxtb	r3, r3
   2aae2:	2b00      	cmp	r3, #0
   2aae4:	d001      	beq.n	2aaea <spi_read+0x2a>
		return STATUS_ERR_IO;
   2aae6:	2310      	movs	r3, #16
   2aae8:	e027      	b.n	2ab3a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   2aaea:	230f      	movs	r3, #15
   2aaec:	18fb      	adds	r3, r7, r3
   2aaee:	2200      	movs	r2, #0
   2aaf0:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2aaf2:	68bb      	ldr	r3, [r7, #8]
   2aaf4:	8b5b      	ldrh	r3, [r3, #26]
   2aaf6:	b29b      	uxth	r3, r3
   2aaf8:	001a      	movs	r2, r3
   2aafa:	2304      	movs	r3, #4
   2aafc:	4013      	ands	r3, r2
   2aafe:	d006      	beq.n	2ab0e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2ab00:	230f      	movs	r3, #15
   2ab02:	18fb      	adds	r3, r7, r3
   2ab04:	221e      	movs	r2, #30
   2ab06:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   2ab08:	68bb      	ldr	r3, [r7, #8]
   2ab0a:	2204      	movs	r2, #4
   2ab0c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2ab0e:	687b      	ldr	r3, [r7, #4]
   2ab10:	799b      	ldrb	r3, [r3, #6]
   2ab12:	2b01      	cmp	r3, #1
   2ab14:	d108      	bne.n	2ab28 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2ab16:	68bb      	ldr	r3, [r7, #8]
   2ab18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ab1a:	b29b      	uxth	r3, r3
   2ab1c:	05db      	lsls	r3, r3, #23
   2ab1e:	0ddb      	lsrs	r3, r3, #23
   2ab20:	b29a      	uxth	r2, r3
   2ab22:	683b      	ldr	r3, [r7, #0]
   2ab24:	801a      	strh	r2, [r3, #0]
   2ab26:	e005      	b.n	2ab34 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   2ab28:	68bb      	ldr	r3, [r7, #8]
   2ab2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ab2c:	b2db      	uxtb	r3, r3
   2ab2e:	b29a      	uxth	r2, r3
   2ab30:	683b      	ldr	r3, [r7, #0]
   2ab32:	801a      	strh	r2, [r3, #0]
	return retval;
   2ab34:	230f      	movs	r3, #15
   2ab36:	18fb      	adds	r3, r7, r3
   2ab38:	781b      	ldrb	r3, [r3, #0]
}
   2ab3a:	0018      	movs	r0, r3
   2ab3c:	46bd      	mov	sp, r7
   2ab3e:	b004      	add	sp, #16
   2ab40:	bd80      	pop	{r7, pc}
   2ab42:	46c0      	nop			; (mov r8, r8)
   2ab44:	0002aa51 	.word	0x0002aa51

0002ab48 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   2ab48:	b590      	push	{r4, r7, lr}
   2ab4a:	b089      	sub	sp, #36	; 0x24
   2ab4c:	af00      	add	r7, sp, #0
   2ab4e:	6078      	str	r0, [r7, #4]
   2ab50:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2ab52:	230c      	movs	r3, #12
   2ab54:	18fb      	adds	r3, r7, r3
   2ab56:	2200      	movs	r2, #0
   2ab58:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2ab5a:	687b      	ldr	r3, [r7, #4]
   2ab5c:	681b      	ldr	r3, [r3, #0]
   2ab5e:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   2ab60:	687b      	ldr	r3, [r7, #4]
   2ab62:	0018      	movs	r0, r3
   2ab64:	4b24      	ldr	r3, [pc, #144]	; (2abf8 <spi_set_baudrate+0xb0>)
   2ab66:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2ab68:	46c0      	nop			; (mov r8, r8)
   2ab6a:	687b      	ldr	r3, [r7, #4]
   2ab6c:	0018      	movs	r0, r3
   2ab6e:	4b23      	ldr	r3, [pc, #140]	; (2abfc <spi_set_baudrate+0xb4>)
   2ab70:	4798      	blx	r3
   2ab72:	1e03      	subs	r3, r0, #0
   2ab74:	d1f9      	bne.n	2ab6a <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2ab76:	687b      	ldr	r3, [r7, #4]
   2ab78:	681b      	ldr	r3, [r3, #0]
   2ab7a:	0018      	movs	r0, r3
   2ab7c:	4b20      	ldr	r3, [pc, #128]	; (2ac00 <spi_set_baudrate+0xb8>)
   2ab7e:	4798      	blx	r3
   2ab80:	0003      	movs	r3, r0
   2ab82:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2ab84:	69bb      	ldr	r3, [r7, #24]
   2ab86:	3314      	adds	r3, #20
   2ab88:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2ab8a:	697b      	ldr	r3, [r7, #20]
   2ab8c:	b2db      	uxtb	r3, r3
   2ab8e:	0018      	movs	r0, r3
   2ab90:	4b1c      	ldr	r3, [pc, #112]	; (2ac04 <spi_set_baudrate+0xbc>)
   2ab92:	4798      	blx	r3
   2ab94:	0003      	movs	r3, r0
   2ab96:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   2ab98:	230f      	movs	r3, #15
   2ab9a:	18fc      	adds	r4, r7, r3
   2ab9c:	230c      	movs	r3, #12
   2ab9e:	18fa      	adds	r2, r7, r3
   2aba0:	6939      	ldr	r1, [r7, #16]
   2aba2:	683b      	ldr	r3, [r7, #0]
   2aba4:	0018      	movs	r0, r3
   2aba6:	4b18      	ldr	r3, [pc, #96]	; (2ac08 <spi_set_baudrate+0xc0>)
   2aba8:	4798      	blx	r3
   2abaa:	0003      	movs	r3, r0
   2abac:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2abae:	230f      	movs	r3, #15
   2abb0:	18fb      	adds	r3, r7, r3
   2abb2:	781b      	ldrb	r3, [r3, #0]
   2abb4:	2b00      	cmp	r3, #0
   2abb6:	d001      	beq.n	2abbc <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   2abb8:	2317      	movs	r3, #23
   2abba:	e018      	b.n	2abee <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   2abbc:	230c      	movs	r3, #12
   2abbe:	18fb      	adds	r3, r7, r3
   2abc0:	881b      	ldrh	r3, [r3, #0]
   2abc2:	b2da      	uxtb	r2, r3
   2abc4:	69fb      	ldr	r3, [r7, #28]
   2abc6:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   2abc8:	46c0      	nop			; (mov r8, r8)
   2abca:	687b      	ldr	r3, [r7, #4]
   2abcc:	0018      	movs	r0, r3
   2abce:	4b0b      	ldr	r3, [pc, #44]	; (2abfc <spi_set_baudrate+0xb4>)
   2abd0:	4798      	blx	r3
   2abd2:	1e03      	subs	r3, r0, #0
   2abd4:	d1f9      	bne.n	2abca <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   2abd6:	687b      	ldr	r3, [r7, #4]
   2abd8:	0018      	movs	r0, r3
   2abda:	4b0c      	ldr	r3, [pc, #48]	; (2ac0c <spi_set_baudrate+0xc4>)
   2abdc:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2abde:	46c0      	nop			; (mov r8, r8)
   2abe0:	687b      	ldr	r3, [r7, #4]
   2abe2:	0018      	movs	r0, r3
   2abe4:	4b05      	ldr	r3, [pc, #20]	; (2abfc <spi_set_baudrate+0xb4>)
   2abe6:	4798      	blx	r3
   2abe8:	1e03      	subs	r3, r0, #0
   2abea:	d1f9      	bne.n	2abe0 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   2abec:	2300      	movs	r3, #0
}
   2abee:	0018      	movs	r0, r3
   2abf0:	46bd      	mov	sp, r7
   2abf2:	b009      	add	sp, #36	; 0x24
   2abf4:	bd90      	pop	{r4, r7, pc}
   2abf6:	46c0      	nop			; (mov r8, r8)
   2abf8:	0002a9a5 	.word	0x0002a9a5
   2abfc:	0002a935 	.word	0x0002a935
   2ac00:	0002a5a1 	.word	0x0002a5a1
   2ac04:	0002cf55 	.word	0x0002cf55
   2ac08:	0002a11b 	.word	0x0002a11b
   2ac0c:	0002a955 	.word	0x0002a955

0002ac10 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2ac10:	b590      	push	{r4, r7, lr}
   2ac12:	b093      	sub	sp, #76	; 0x4c
   2ac14:	af00      	add	r7, sp, #0
   2ac16:	6078      	str	r0, [r7, #4]
   2ac18:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2ac1a:	687b      	ldr	r3, [r7, #4]
   2ac1c:	681b      	ldr	r3, [r3, #0]
   2ac1e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2ac20:	687b      	ldr	r3, [r7, #4]
   2ac22:	681b      	ldr	r3, [r3, #0]
   2ac24:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2ac26:	231c      	movs	r3, #28
   2ac28:	18fb      	adds	r3, r7, r3
   2ac2a:	0018      	movs	r0, r3
   2ac2c:	4b75      	ldr	r3, [pc, #468]	; (2ae04 <_spi_set_config+0x1f4>)
   2ac2e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2ac30:	231c      	movs	r3, #28
   2ac32:	18fb      	adds	r3, r7, r3
   2ac34:	2200      	movs	r2, #0
   2ac36:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   2ac38:	683b      	ldr	r3, [r7, #0]
   2ac3a:	781b      	ldrb	r3, [r3, #0]
   2ac3c:	2b00      	cmp	r3, #0
   2ac3e:	d103      	bne.n	2ac48 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2ac40:	231c      	movs	r3, #28
   2ac42:	18fb      	adds	r3, r7, r3
   2ac44:	2200      	movs	r2, #0
   2ac46:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2ac48:	683b      	ldr	r3, [r7, #0]
   2ac4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2ac4c:	230c      	movs	r3, #12
   2ac4e:	18fb      	adds	r3, r7, r3
   2ac50:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2ac52:	683b      	ldr	r3, [r7, #0]
   2ac54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   2ac56:	230c      	movs	r3, #12
   2ac58:	18fb      	adds	r3, r7, r3
   2ac5a:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2ac5c:	683b      	ldr	r3, [r7, #0]
   2ac5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2ac60:	230c      	movs	r3, #12
   2ac62:	18fb      	adds	r3, r7, r3
   2ac64:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2ac66:	683b      	ldr	r3, [r7, #0]
   2ac68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2ac6a:	230c      	movs	r3, #12
   2ac6c:	18fb      	adds	r3, r7, r3
   2ac6e:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2ac70:	2347      	movs	r3, #71	; 0x47
   2ac72:	18fb      	adds	r3, r7, r3
   2ac74:	2200      	movs	r2, #0
   2ac76:	701a      	strb	r2, [r3, #0]
   2ac78:	e02c      	b.n	2acd4 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2ac7a:	2347      	movs	r3, #71	; 0x47
   2ac7c:	18fb      	adds	r3, r7, r3
   2ac7e:	781a      	ldrb	r2, [r3, #0]
   2ac80:	230c      	movs	r3, #12
   2ac82:	18fb      	adds	r3, r7, r3
   2ac84:	0092      	lsls	r2, r2, #2
   2ac86:	58d3      	ldr	r3, [r2, r3]
   2ac88:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2ac8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ac8c:	2b00      	cmp	r3, #0
   2ac8e:	d109      	bne.n	2aca4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2ac90:	2347      	movs	r3, #71	; 0x47
   2ac92:	18fb      	adds	r3, r7, r3
   2ac94:	781a      	ldrb	r2, [r3, #0]
   2ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ac98:	0011      	movs	r1, r2
   2ac9a:	0018      	movs	r0, r3
   2ac9c:	4b5a      	ldr	r3, [pc, #360]	; (2ae08 <_spi_set_config+0x1f8>)
   2ac9e:	4798      	blx	r3
   2aca0:	0003      	movs	r3, r0
   2aca2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2aca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2aca6:	3301      	adds	r3, #1
   2aca8:	d00d      	beq.n	2acc6 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2acaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2acac:	b2da      	uxtb	r2, r3
   2acae:	231c      	movs	r3, #28
   2acb0:	18fb      	adds	r3, r7, r3
   2acb2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2acb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2acb6:	0c1b      	lsrs	r3, r3, #16
   2acb8:	b2db      	uxtb	r3, r3
   2acba:	221c      	movs	r2, #28
   2acbc:	18ba      	adds	r2, r7, r2
   2acbe:	0011      	movs	r1, r2
   2acc0:	0018      	movs	r0, r3
   2acc2:	4b52      	ldr	r3, [pc, #328]	; (2ae0c <_spi_set_config+0x1fc>)
   2acc4:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2acc6:	2347      	movs	r3, #71	; 0x47
   2acc8:	18fb      	adds	r3, r7, r3
   2acca:	781a      	ldrb	r2, [r3, #0]
   2accc:	2347      	movs	r3, #71	; 0x47
   2acce:	18fb      	adds	r3, r7, r3
   2acd0:	3201      	adds	r2, #1
   2acd2:	701a      	strb	r2, [r3, #0]
   2acd4:	2347      	movs	r3, #71	; 0x47
   2acd6:	18fb      	adds	r3, r7, r3
   2acd8:	781b      	ldrb	r3, [r3, #0]
   2acda:	2b03      	cmp	r3, #3
   2acdc:	d9cd      	bls.n	2ac7a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2acde:	683b      	ldr	r3, [r7, #0]
   2ace0:	781a      	ldrb	r2, [r3, #0]
   2ace2:	687b      	ldr	r3, [r7, #4]
   2ace4:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   2ace6:	683b      	ldr	r3, [r7, #0]
   2ace8:	7c1a      	ldrb	r2, [r3, #16]
   2acea:	687b      	ldr	r3, [r7, #4]
   2acec:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2acee:	683b      	ldr	r3, [r7, #0]
   2acf0:	7c9a      	ldrb	r2, [r3, #18]
   2acf2:	687b      	ldr	r3, [r7, #4]
   2acf4:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   2acf6:	683b      	ldr	r3, [r7, #0]
   2acf8:	7d1a      	ldrb	r2, [r3, #20]
   2acfa:	687b      	ldr	r3, [r7, #4]
   2acfc:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2acfe:	230a      	movs	r3, #10
   2ad00:	18fb      	adds	r3, r7, r3
   2ad02:	2200      	movs	r2, #0
   2ad04:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   2ad06:	2300      	movs	r3, #0
   2ad08:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   2ad0a:	2300      	movs	r3, #0
   2ad0c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2ad0e:	683b      	ldr	r3, [r7, #0]
   2ad10:	781b      	ldrb	r3, [r3, #0]
   2ad12:	2b01      	cmp	r3, #1
   2ad14:	d129      	bne.n	2ad6a <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2ad16:	687b      	ldr	r3, [r7, #4]
   2ad18:	681b      	ldr	r3, [r3, #0]
   2ad1a:	0018      	movs	r0, r3
   2ad1c:	4b3c      	ldr	r3, [pc, #240]	; (2ae10 <_spi_set_config+0x200>)
   2ad1e:	4798      	blx	r3
   2ad20:	0003      	movs	r3, r0
   2ad22:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2ad24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ad26:	3314      	adds	r3, #20
   2ad28:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ad2c:	b2db      	uxtb	r3, r3
   2ad2e:	0018      	movs	r0, r3
   2ad30:	4b38      	ldr	r3, [pc, #224]	; (2ae14 <_spi_set_config+0x204>)
   2ad32:	4798      	blx	r3
   2ad34:	0003      	movs	r3, r0
   2ad36:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   2ad38:	683b      	ldr	r3, [r7, #0]
   2ad3a:	699b      	ldr	r3, [r3, #24]
   2ad3c:	2223      	movs	r2, #35	; 0x23
   2ad3e:	18bc      	adds	r4, r7, r2
   2ad40:	220a      	movs	r2, #10
   2ad42:	18ba      	adds	r2, r7, r2
   2ad44:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2ad46:	0018      	movs	r0, r3
   2ad48:	4b33      	ldr	r3, [pc, #204]	; (2ae18 <_spi_set_config+0x208>)
   2ad4a:	4798      	blx	r3
   2ad4c:	0003      	movs	r3, r0
   2ad4e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2ad50:	2323      	movs	r3, #35	; 0x23
   2ad52:	18fb      	adds	r3, r7, r3
   2ad54:	781b      	ldrb	r3, [r3, #0]
   2ad56:	2b00      	cmp	r3, #0
   2ad58:	d001      	beq.n	2ad5e <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   2ad5a:	2317      	movs	r3, #23
   2ad5c:	e04e      	b.n	2adfc <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2ad5e:	230a      	movs	r3, #10
   2ad60:	18fb      	adds	r3, r7, r3
   2ad62:	881b      	ldrh	r3, [r3, #0]
   2ad64:	b2da      	uxtb	r2, r3
   2ad66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ad68:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   2ad6a:	683b      	ldr	r3, [r7, #0]
   2ad6c:	685b      	ldr	r3, [r3, #4]
   2ad6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ad70:	4313      	orrs	r3, r2
   2ad72:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   2ad74:	683b      	ldr	r3, [r7, #0]
   2ad76:	689b      	ldr	r3, [r3, #8]
   2ad78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ad7a:	4313      	orrs	r3, r2
   2ad7c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2ad7e:	683b      	ldr	r3, [r7, #0]
   2ad80:	68db      	ldr	r3, [r3, #12]
   2ad82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ad84:	4313      	orrs	r3, r2
   2ad86:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   2ad88:	683b      	ldr	r3, [r7, #0]
   2ad8a:	7c1b      	ldrb	r3, [r3, #16]
   2ad8c:	001a      	movs	r2, r3
   2ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ad90:	4313      	orrs	r3, r2
   2ad92:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2ad94:	683b      	ldr	r3, [r7, #0]
   2ad96:	7c5b      	ldrb	r3, [r3, #17]
   2ad98:	2b00      	cmp	r3, #0
   2ad9a:	d103      	bne.n	2ada4 <_spi_set_config+0x194>
   2ad9c:	4b1f      	ldr	r3, [pc, #124]	; (2ae1c <_spi_set_config+0x20c>)
   2ad9e:	4798      	blx	r3
   2ada0:	1e03      	subs	r3, r0, #0
   2ada2:	d003      	beq.n	2adac <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   2ada4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ada6:	2280      	movs	r2, #128	; 0x80
   2ada8:	4313      	orrs	r3, r2
   2adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   2adac:	683b      	ldr	r3, [r7, #0]
   2adae:	7c9b      	ldrb	r3, [r3, #18]
   2adb0:	2b00      	cmp	r3, #0
   2adb2:	d004      	beq.n	2adbe <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   2adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2adb6:	2280      	movs	r2, #128	; 0x80
   2adb8:	0292      	lsls	r2, r2, #10
   2adba:	4313      	orrs	r3, r2
   2adbc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2adbe:	683b      	ldr	r3, [r7, #0]
   2adc0:	7cdb      	ldrb	r3, [r3, #19]
   2adc2:	2b00      	cmp	r3, #0
   2adc4:	d004      	beq.n	2add0 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   2adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2adc8:	2280      	movs	r2, #128	; 0x80
   2adca:	0092      	lsls	r2, r2, #2
   2adcc:	4313      	orrs	r3, r2
   2adce:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2add0:	683b      	ldr	r3, [r7, #0]
   2add2:	7d1b      	ldrb	r3, [r3, #20]
   2add4:	2b00      	cmp	r3, #0
   2add6:	d004      	beq.n	2ade2 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   2add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2adda:	2280      	movs	r2, #128	; 0x80
   2addc:	0192      	lsls	r2, r2, #6
   2adde:	4313      	orrs	r3, r2
   2ade0:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2ade2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ade4:	681a      	ldr	r2, [r3, #0]
   2ade6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ade8:	431a      	orrs	r2, r3
   2adea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2adec:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2adee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2adf0:	685a      	ldr	r2, [r3, #4]
   2adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2adf4:	431a      	orrs	r2, r3
   2adf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2adf8:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   2adfa:	2300      	movs	r3, #0
}
   2adfc:	0018      	movs	r0, r3
   2adfe:	46bd      	mov	sp, r7
   2ae00:	b013      	add	sp, #76	; 0x4c
   2ae02:	bd90      	pop	{r4, r7, pc}
   2ae04:	0002a745 	.word	0x0002a745
   2ae08:	0002a3e5 	.word	0x0002a3e5
   2ae0c:	0002d191 	.word	0x0002d191
   2ae10:	0002a5a1 	.word	0x0002a5a1
   2ae14:	0002cf55 	.word	0x0002cf55
   2ae18:	0002a11b 	.word	0x0002a11b
   2ae1c:	0002a8b9 	.word	0x0002a8b9

0002ae20 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2ae20:	b590      	push	{r4, r7, lr}
   2ae22:	b08b      	sub	sp, #44	; 0x2c
   2ae24:	af00      	add	r7, sp, #0
   2ae26:	60f8      	str	r0, [r7, #12]
   2ae28:	60b9      	str	r1, [r7, #8]
   2ae2a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   2ae2c:	68fb      	ldr	r3, [r7, #12]
   2ae2e:	68ba      	ldr	r2, [r7, #8]
   2ae30:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2ae32:	68fb      	ldr	r3, [r7, #12]
   2ae34:	681b      	ldr	r3, [r3, #0]
   2ae36:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   2ae38:	6a3b      	ldr	r3, [r7, #32]
   2ae3a:	681b      	ldr	r3, [r3, #0]
   2ae3c:	2202      	movs	r2, #2
   2ae3e:	4013      	ands	r3, r2
   2ae40:	d001      	beq.n	2ae46 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2ae42:	231c      	movs	r3, #28
   2ae44:	e09c      	b.n	2af80 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   2ae46:	6a3b      	ldr	r3, [r7, #32]
   2ae48:	681b      	ldr	r3, [r3, #0]
   2ae4a:	2201      	movs	r2, #1
   2ae4c:	4013      	ands	r3, r2
   2ae4e:	d001      	beq.n	2ae54 <spi_init+0x34>
		return STATUS_BUSY;
   2ae50:	2305      	movs	r3, #5
   2ae52:	e095      	b.n	2af80 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2ae54:	68fb      	ldr	r3, [r7, #12]
   2ae56:	681b      	ldr	r3, [r3, #0]
   2ae58:	0018      	movs	r0, r3
   2ae5a:	4b4b      	ldr	r3, [pc, #300]	; (2af88 <spi_init+0x168>)
   2ae5c:	4798      	blx	r3
   2ae5e:	0003      	movs	r3, r0
   2ae60:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2ae62:	69fb      	ldr	r3, [r7, #28]
   2ae64:	3302      	adds	r3, #2
   2ae66:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2ae68:	69fb      	ldr	r3, [r7, #28]
   2ae6a:	3314      	adds	r3, #20
   2ae6c:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2ae6e:	2201      	movs	r2, #1
   2ae70:	69bb      	ldr	r3, [r7, #24]
   2ae72:	409a      	lsls	r2, r3
   2ae74:	0013      	movs	r3, r2
   2ae76:	0019      	movs	r1, r3
   2ae78:	2002      	movs	r0, #2
   2ae7a:	4b44      	ldr	r3, [pc, #272]	; (2af8c <spi_init+0x16c>)
   2ae7c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2ae7e:	2310      	movs	r3, #16
   2ae80:	18fb      	adds	r3, r7, r3
   2ae82:	0018      	movs	r0, r3
   2ae84:	4b42      	ldr	r3, [pc, #264]	; (2af90 <spi_init+0x170>)
   2ae86:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2ae88:	687b      	ldr	r3, [r7, #4]
   2ae8a:	2224      	movs	r2, #36	; 0x24
   2ae8c:	5c9a      	ldrb	r2, [r3, r2]
   2ae8e:	2310      	movs	r3, #16
   2ae90:	18fb      	adds	r3, r7, r3
   2ae92:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2ae94:	697b      	ldr	r3, [r7, #20]
   2ae96:	b2db      	uxtb	r3, r3
   2ae98:	2210      	movs	r2, #16
   2ae9a:	18ba      	adds	r2, r7, r2
   2ae9c:	0011      	movs	r1, r2
   2ae9e:	0018      	movs	r0, r3
   2aea0:	4b3c      	ldr	r3, [pc, #240]	; (2af94 <spi_init+0x174>)
   2aea2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2aea4:	697b      	ldr	r3, [r7, #20]
   2aea6:	b2db      	uxtb	r3, r3
   2aea8:	0018      	movs	r0, r3
   2aeaa:	4b3b      	ldr	r3, [pc, #236]	; (2af98 <spi_init+0x178>)
   2aeac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2aeae:	687b      	ldr	r3, [r7, #4]
   2aeb0:	2224      	movs	r2, #36	; 0x24
   2aeb2:	5c9b      	ldrb	r3, [r3, r2]
   2aeb4:	2100      	movs	r1, #0
   2aeb6:	0018      	movs	r0, r3
   2aeb8:	4b38      	ldr	r3, [pc, #224]	; (2af9c <spi_init+0x17c>)
   2aeba:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   2aebc:	687b      	ldr	r3, [r7, #4]
   2aebe:	781b      	ldrb	r3, [r3, #0]
   2aec0:	2b01      	cmp	r3, #1
   2aec2:	d105      	bne.n	2aed0 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   2aec4:	6a3b      	ldr	r3, [r7, #32]
   2aec6:	681b      	ldr	r3, [r3, #0]
   2aec8:	220c      	movs	r2, #12
   2aeca:	431a      	orrs	r2, r3
   2aecc:	6a3b      	ldr	r3, [r7, #32]
   2aece:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2aed0:	2327      	movs	r3, #39	; 0x27
   2aed2:	18fb      	adds	r3, r7, r3
   2aed4:	2200      	movs	r2, #0
   2aed6:	701a      	strb	r2, [r3, #0]
   2aed8:	e010      	b.n	2aefc <spi_init+0xdc>
		module->callback[i]        = NULL;
   2aeda:	2327      	movs	r3, #39	; 0x27
   2aedc:	18fb      	adds	r3, r7, r3
   2aede:	781b      	ldrb	r3, [r3, #0]
   2aee0:	68fa      	ldr	r2, [r7, #12]
   2aee2:	3302      	adds	r3, #2
   2aee4:	009b      	lsls	r3, r3, #2
   2aee6:	18d3      	adds	r3, r2, r3
   2aee8:	3304      	adds	r3, #4
   2aeea:	2200      	movs	r2, #0
   2aeec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2aeee:	2327      	movs	r3, #39	; 0x27
   2aef0:	18fb      	adds	r3, r7, r3
   2aef2:	781a      	ldrb	r2, [r3, #0]
   2aef4:	2327      	movs	r3, #39	; 0x27
   2aef6:	18fb      	adds	r3, r7, r3
   2aef8:	3201      	adds	r2, #1
   2aefa:	701a      	strb	r2, [r3, #0]
   2aefc:	2327      	movs	r3, #39	; 0x27
   2aefe:	18fb      	adds	r3, r7, r3
   2af00:	781b      	ldrb	r3, [r3, #0]
   2af02:	2b06      	cmp	r3, #6
   2af04:	d9e9      	bls.n	2aeda <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   2af06:	68fb      	ldr	r3, [r7, #12]
   2af08:	2200      	movs	r2, #0
   2af0a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   2af0c:	68fb      	ldr	r3, [r7, #12]
   2af0e:	2200      	movs	r2, #0
   2af10:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2af12:	68fb      	ldr	r3, [r7, #12]
   2af14:	2200      	movs	r2, #0
   2af16:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   2af18:	68fb      	ldr	r3, [r7, #12]
   2af1a:	2200      	movs	r2, #0
   2af1c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   2af1e:	68fb      	ldr	r3, [r7, #12]
   2af20:	2236      	movs	r2, #54	; 0x36
   2af22:	2100      	movs	r1, #0
   2af24:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   2af26:	68fb      	ldr	r3, [r7, #12]
   2af28:	2237      	movs	r2, #55	; 0x37
   2af2a:	2100      	movs	r1, #0
   2af2c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   2af2e:	68fb      	ldr	r3, [r7, #12]
   2af30:	2238      	movs	r2, #56	; 0x38
   2af32:	2100      	movs	r1, #0
   2af34:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   2af36:	68fb      	ldr	r3, [r7, #12]
   2af38:	2203      	movs	r2, #3
   2af3a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   2af3c:	68fb      	ldr	r3, [r7, #12]
   2af3e:	2200      	movs	r2, #0
   2af40:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2af42:	68fb      	ldr	r3, [r7, #12]
   2af44:	681b      	ldr	r3, [r3, #0]
   2af46:	2213      	movs	r2, #19
   2af48:	18bc      	adds	r4, r7, r2
   2af4a:	0018      	movs	r0, r3
   2af4c:	4b0e      	ldr	r3, [pc, #56]	; (2af88 <spi_init+0x168>)
   2af4e:	4798      	blx	r3
   2af50:	0003      	movs	r3, r0
   2af52:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   2af54:	4a12      	ldr	r2, [pc, #72]	; (2afa0 <spi_init+0x180>)
   2af56:	2313      	movs	r3, #19
   2af58:	18fb      	adds	r3, r7, r3
   2af5a:	781b      	ldrb	r3, [r3, #0]
   2af5c:	0011      	movs	r1, r2
   2af5e:	0018      	movs	r0, r3
   2af60:	4b10      	ldr	r3, [pc, #64]	; (2afa4 <spi_init+0x184>)
   2af62:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2af64:	2313      	movs	r3, #19
   2af66:	18fb      	adds	r3, r7, r3
   2af68:	781a      	ldrb	r2, [r3, #0]
   2af6a:	4b0f      	ldr	r3, [pc, #60]	; (2afa8 <spi_init+0x188>)
   2af6c:	0092      	lsls	r2, r2, #2
   2af6e:	68f9      	ldr	r1, [r7, #12]
   2af70:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2af72:	687a      	ldr	r2, [r7, #4]
   2af74:	68fb      	ldr	r3, [r7, #12]
   2af76:	0011      	movs	r1, r2
   2af78:	0018      	movs	r0, r3
   2af7a:	4b0c      	ldr	r3, [pc, #48]	; (2afac <spi_init+0x18c>)
   2af7c:	4798      	blx	r3
   2af7e:	0003      	movs	r3, r0
}
   2af80:	0018      	movs	r0, r3
   2af82:	46bd      	mov	sp, r7
   2af84:	b00b      	add	sp, #44	; 0x2c
   2af86:	bd90      	pop	{r4, r7, pc}
   2af88:	0002a5a1 	.word	0x0002a5a1
   2af8c:	0002a85d 	.word	0x0002a85d
   2af90:	0002a845 	.word	0x0002a845
   2af94:	0002ce31 	.word	0x0002ce31
   2af98:	0002ce75 	.word	0x0002ce75
   2af9c:	0002a359 	.word	0x0002a359
   2afa0:	0002b479 	.word	0x0002b479
   2afa4:	0002a605 	.word	0x0002a605
   2afa8:	20005c1c 	.word	0x20005c1c
   2afac:	0002ac11 	.word	0x0002ac11

0002afb0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2afb0:	b590      	push	{r4, r7, lr}
   2afb2:	b087      	sub	sp, #28
   2afb4:	af00      	add	r7, sp, #0
   2afb6:	60f8      	str	r0, [r7, #12]
   2afb8:	60b9      	str	r1, [r7, #8]
   2afba:	0019      	movs	r1, r3
   2afbc:	1dbb      	adds	r3, r7, #6
   2afbe:	801a      	strh	r2, [r3, #0]
   2afc0:	1d3b      	adds	r3, r7, #4
   2afc2:	1c0a      	adds	r2, r1, #0
   2afc4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2afc6:	68fb      	ldr	r3, [r7, #12]
   2afc8:	2238      	movs	r2, #56	; 0x38
   2afca:	5c9b      	ldrb	r3, [r3, r2]
   2afcc:	b2db      	uxtb	r3, r3
   2afce:	2b05      	cmp	r3, #5
   2afd0:	d101      	bne.n	2afd6 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2afd2:	2305      	movs	r3, #5
   2afd4:	e07a      	b.n	2b0cc <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   2afd6:	1dbb      	adds	r3, r7, #6
   2afd8:	881b      	ldrh	r3, [r3, #0]
   2afda:	2b00      	cmp	r3, #0
   2afdc:	d101      	bne.n	2afe2 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2afde:	2317      	movs	r3, #23
   2afe0:	e074      	b.n	2b0cc <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2afe2:	68fb      	ldr	r3, [r7, #12]
   2afe4:	79db      	ldrb	r3, [r3, #7]
   2afe6:	2201      	movs	r2, #1
   2afe8:	4053      	eors	r3, r2
   2afea:	b2db      	uxtb	r3, r3
   2afec:	2b00      	cmp	r3, #0
   2afee:	d001      	beq.n	2aff4 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   2aff0:	231c      	movs	r3, #28
   2aff2:	e06b      	b.n	2b0cc <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   2aff4:	2316      	movs	r3, #22
   2aff6:	18fb      	adds	r3, r7, r3
   2aff8:	2200      	movs	r2, #0
   2affa:	801a      	strh	r2, [r3, #0]

	while (length--) {
   2affc:	e05e      	b.n	2b0bc <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2affe:	68fb      	ldr	r3, [r7, #12]
   2b000:	795b      	ldrb	r3, [r3, #5]
   2b002:	2b01      	cmp	r3, #1
   2b004:	d112      	bne.n	2b02c <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   2b006:	46c0      	nop			; (mov r8, r8)
   2b008:	68fb      	ldr	r3, [r7, #12]
   2b00a:	0018      	movs	r0, r3
   2b00c:	4b31      	ldr	r3, [pc, #196]	; (2b0d4 <spi_read_buffer_wait+0x124>)
   2b00e:	4798      	blx	r3
   2b010:	0003      	movs	r3, r0
   2b012:	001a      	movs	r2, r3
   2b014:	2301      	movs	r3, #1
   2b016:	4053      	eors	r3, r2
   2b018:	b2db      	uxtb	r3, r3
   2b01a:	2b00      	cmp	r3, #0
   2b01c:	d1f4      	bne.n	2b008 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   2b01e:	1d3b      	adds	r3, r7, #4
   2b020:	881a      	ldrh	r2, [r3, #0]
   2b022:	68fb      	ldr	r3, [r7, #12]
   2b024:	0011      	movs	r1, r2
   2b026:	0018      	movs	r0, r3
   2b028:	4b2b      	ldr	r3, [pc, #172]	; (2b0d8 <spi_read_buffer_wait+0x128>)
   2b02a:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   2b02c:	46c0      	nop			; (mov r8, r8)
   2b02e:	68fb      	ldr	r3, [r7, #12]
   2b030:	0018      	movs	r0, r3
   2b032:	4b2a      	ldr	r3, [pc, #168]	; (2b0dc <spi_read_buffer_wait+0x12c>)
   2b034:	4798      	blx	r3
   2b036:	0003      	movs	r3, r0
   2b038:	001a      	movs	r2, r3
   2b03a:	2301      	movs	r3, #1
   2b03c:	4053      	eors	r3, r2
   2b03e:	b2db      	uxtb	r3, r3
   2b040:	2b00      	cmp	r3, #0
   2b042:	d1f4      	bne.n	2b02e <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   2b044:	2312      	movs	r3, #18
   2b046:	18fb      	adds	r3, r7, r3
   2b048:	2200      	movs	r2, #0
   2b04a:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   2b04c:	2315      	movs	r3, #21
   2b04e:	18fc      	adds	r4, r7, r3
   2b050:	2312      	movs	r3, #18
   2b052:	18fa      	adds	r2, r7, r3
   2b054:	68fb      	ldr	r3, [r7, #12]
   2b056:	0011      	movs	r1, r2
   2b058:	0018      	movs	r0, r3
   2b05a:	4b21      	ldr	r3, [pc, #132]	; (2b0e0 <spi_read_buffer_wait+0x130>)
   2b05c:	4798      	blx	r3
   2b05e:	0003      	movs	r3, r0
   2b060:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2b062:	2315      	movs	r3, #21
   2b064:	18fb      	adds	r3, r7, r3
   2b066:	781b      	ldrb	r3, [r3, #0]
   2b068:	2b00      	cmp	r3, #0
   2b06a:	d003      	beq.n	2b074 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   2b06c:	2315      	movs	r3, #21
   2b06e:	18fb      	adds	r3, r7, r3
   2b070:	781b      	ldrb	r3, [r3, #0]
   2b072:	e02b      	b.n	2b0cc <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   2b074:	2316      	movs	r3, #22
   2b076:	18fb      	adds	r3, r7, r3
   2b078:	881b      	ldrh	r3, [r3, #0]
   2b07a:	2216      	movs	r2, #22
   2b07c:	18ba      	adds	r2, r7, r2
   2b07e:	1c59      	adds	r1, r3, #1
   2b080:	8011      	strh	r1, [r2, #0]
   2b082:	001a      	movs	r2, r3
   2b084:	68bb      	ldr	r3, [r7, #8]
   2b086:	189b      	adds	r3, r3, r2
   2b088:	2212      	movs	r2, #18
   2b08a:	18ba      	adds	r2, r7, r2
   2b08c:	8812      	ldrh	r2, [r2, #0]
   2b08e:	b2d2      	uxtb	r2, r2
   2b090:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2b092:	68fb      	ldr	r3, [r7, #12]
   2b094:	799b      	ldrb	r3, [r3, #6]
   2b096:	2b01      	cmp	r3, #1
   2b098:	d110      	bne.n	2b0bc <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   2b09a:	2316      	movs	r3, #22
   2b09c:	18fb      	adds	r3, r7, r3
   2b09e:	881b      	ldrh	r3, [r3, #0]
   2b0a0:	2216      	movs	r2, #22
   2b0a2:	18ba      	adds	r2, r7, r2
   2b0a4:	1c59      	adds	r1, r3, #1
   2b0a6:	8011      	strh	r1, [r2, #0]
   2b0a8:	001a      	movs	r2, r3
   2b0aa:	68bb      	ldr	r3, [r7, #8]
   2b0ac:	189b      	adds	r3, r3, r2
   2b0ae:	2212      	movs	r2, #18
   2b0b0:	18ba      	adds	r2, r7, r2
   2b0b2:	8812      	ldrh	r2, [r2, #0]
   2b0b4:	0a12      	lsrs	r2, r2, #8
   2b0b6:	b292      	uxth	r2, r2
   2b0b8:	b2d2      	uxtb	r2, r2
   2b0ba:	701a      	strb	r2, [r3, #0]
	while (length--) {
   2b0bc:	1dbb      	adds	r3, r7, #6
   2b0be:	881b      	ldrh	r3, [r3, #0]
   2b0c0:	1dba      	adds	r2, r7, #6
   2b0c2:	1e59      	subs	r1, r3, #1
   2b0c4:	8011      	strh	r1, [r2, #0]
   2b0c6:	2b00      	cmp	r3, #0
   2b0c8:	d199      	bne.n	2affe <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   2b0ca:	2300      	movs	r3, #0
}
   2b0cc:	0018      	movs	r0, r3
   2b0ce:	46bd      	mov	sp, r7
   2b0d0:	b007      	add	sp, #28
   2b0d2:	bd90      	pop	{r4, r7, pc}
   2b0d4:	0002aa29 	.word	0x0002aa29
   2b0d8:	0002aa79 	.word	0x0002aa79
   2b0dc:	0002aa51 	.word	0x0002aa51
   2b0e0:	0002aac1 	.word	0x0002aac1

0002b0e4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   2b0e4:	b580      	push	{r7, lr}
   2b0e6:	b086      	sub	sp, #24
   2b0e8:	af00      	add	r7, sp, #0
   2b0ea:	60f8      	str	r0, [r7, #12]
   2b0ec:	60b9      	str	r1, [r7, #8]
   2b0ee:	1dfb      	adds	r3, r7, #7
   2b0f0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   2b0f2:	68fb      	ldr	r3, [r7, #12]
   2b0f4:	795b      	ldrb	r3, [r3, #5]
   2b0f6:	2b01      	cmp	r3, #1
   2b0f8:	d001      	beq.n	2b0fe <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   2b0fa:	2315      	movs	r3, #21
   2b0fc:	e05c      	b.n	2b1b8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   2b0fe:	68fb      	ldr	r3, [r7, #12]
   2b100:	7a1b      	ldrb	r3, [r3, #8]
   2b102:	2201      	movs	r2, #1
   2b104:	4053      	eors	r3, r2
   2b106:	b2db      	uxtb	r3, r3
   2b108:	2b00      	cmp	r3, #0
   2b10a:	d054      	beq.n	2b1b6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   2b10c:	1dfb      	adds	r3, r7, #7
   2b10e:	781b      	ldrb	r3, [r3, #0]
   2b110:	2b00      	cmp	r3, #0
   2b112:	d04a      	beq.n	2b1aa <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   2b114:	68bb      	ldr	r3, [r7, #8]
   2b116:	785b      	ldrb	r3, [r3, #1]
   2b118:	2b00      	cmp	r3, #0
   2b11a:	d03f      	beq.n	2b19c <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   2b11c:	68fb      	ldr	r3, [r7, #12]
   2b11e:	0018      	movs	r0, r3
   2b120:	4b27      	ldr	r3, [pc, #156]	; (2b1c0 <spi_select_slave+0xdc>)
   2b122:	4798      	blx	r3
   2b124:	0003      	movs	r3, r0
   2b126:	001a      	movs	r2, r3
   2b128:	2301      	movs	r3, #1
   2b12a:	4053      	eors	r3, r2
   2b12c:	b2db      	uxtb	r3, r3
   2b12e:	2b00      	cmp	r3, #0
   2b130:	d007      	beq.n	2b142 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   2b132:	68bb      	ldr	r3, [r7, #8]
   2b134:	781b      	ldrb	r3, [r3, #0]
   2b136:	2101      	movs	r1, #1
   2b138:	0018      	movs	r0, r3
   2b13a:	4b22      	ldr	r3, [pc, #136]	; (2b1c4 <spi_select_slave+0xe0>)
   2b13c:	4798      	blx	r3
					return STATUS_BUSY;
   2b13e:	2305      	movs	r3, #5
   2b140:	e03a      	b.n	2b1b8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2b142:	68bb      	ldr	r3, [r7, #8]
   2b144:	781b      	ldrb	r3, [r3, #0]
   2b146:	2100      	movs	r1, #0
   2b148:	0018      	movs	r0, r3
   2b14a:	4b1e      	ldr	r3, [pc, #120]	; (2b1c4 <spi_select_slave+0xe0>)
   2b14c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2b14e:	68bb      	ldr	r3, [r7, #8]
   2b150:	789b      	ldrb	r3, [r3, #2]
   2b152:	b29a      	uxth	r2, r3
   2b154:	68fb      	ldr	r3, [r7, #12]
   2b156:	0011      	movs	r1, r2
   2b158:	0018      	movs	r0, r3
   2b15a:	4b1b      	ldr	r3, [pc, #108]	; (2b1c8 <spi_select_slave+0xe4>)
   2b15c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2b15e:	68fb      	ldr	r3, [r7, #12]
   2b160:	79db      	ldrb	r3, [r3, #7]
   2b162:	2201      	movs	r2, #1
   2b164:	4053      	eors	r3, r2
   2b166:	b2db      	uxtb	r3, r3
   2b168:	2b00      	cmp	r3, #0
   2b16a:	d024      	beq.n	2b1b6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   2b16c:	46c0      	nop			; (mov r8, r8)
   2b16e:	68fb      	ldr	r3, [r7, #12]
   2b170:	0018      	movs	r0, r3
   2b172:	4b16      	ldr	r3, [pc, #88]	; (2b1cc <spi_select_slave+0xe8>)
   2b174:	4798      	blx	r3
   2b176:	0003      	movs	r3, r0
   2b178:	001a      	movs	r2, r3
   2b17a:	2301      	movs	r3, #1
   2b17c:	4053      	eors	r3, r2
   2b17e:	b2db      	uxtb	r3, r3
   2b180:	2b00      	cmp	r3, #0
   2b182:	d1f4      	bne.n	2b16e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   2b184:	2316      	movs	r3, #22
   2b186:	18fb      	adds	r3, r7, r3
   2b188:	2200      	movs	r2, #0
   2b18a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   2b18c:	2316      	movs	r3, #22
   2b18e:	18fa      	adds	r2, r7, r3
   2b190:	68fb      	ldr	r3, [r7, #12]
   2b192:	0011      	movs	r1, r2
   2b194:	0018      	movs	r0, r3
   2b196:	4b0e      	ldr	r3, [pc, #56]	; (2b1d0 <spi_select_slave+0xec>)
   2b198:	4798      	blx	r3
   2b19a:	e00c      	b.n	2b1b6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2b19c:	68bb      	ldr	r3, [r7, #8]
   2b19e:	781b      	ldrb	r3, [r3, #0]
   2b1a0:	2100      	movs	r1, #0
   2b1a2:	0018      	movs	r0, r3
   2b1a4:	4b07      	ldr	r3, [pc, #28]	; (2b1c4 <spi_select_slave+0xe0>)
   2b1a6:	4798      	blx	r3
   2b1a8:	e005      	b.n	2b1b6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   2b1aa:	68bb      	ldr	r3, [r7, #8]
   2b1ac:	781b      	ldrb	r3, [r3, #0]
   2b1ae:	2101      	movs	r1, #1
   2b1b0:	0018      	movs	r0, r3
   2b1b2:	4b04      	ldr	r3, [pc, #16]	; (2b1c4 <spi_select_slave+0xe0>)
   2b1b4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2b1b6:	2300      	movs	r3, #0
}
   2b1b8:	0018      	movs	r0, r3
   2b1ba:	46bd      	mov	sp, r7
   2b1bc:	b006      	add	sp, #24
   2b1be:	bd80      	pop	{r7, pc}
   2b1c0:	0002aa29 	.word	0x0002aa29
   2b1c4:	0002a7f1 	.word	0x0002a7f1
   2b1c8:	0002aa79 	.word	0x0002aa79
   2b1cc:	0002aa51 	.word	0x0002aa51
   2b1d0:	0002aac1 	.word	0x0002aac1

0002b1d4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2b1d4:	b580      	push	{r7, lr}
   2b1d6:	b086      	sub	sp, #24
   2b1d8:	af00      	add	r7, sp, #0
   2b1da:	60f8      	str	r0, [r7, #12]
   2b1dc:	60b9      	str	r1, [r7, #8]
   2b1de:	1dbb      	adds	r3, r7, #6
   2b1e0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2b1e2:	68fb      	ldr	r3, [r7, #12]
   2b1e4:	2238      	movs	r2, #56	; 0x38
   2b1e6:	5c9b      	ldrb	r3, [r3, r2]
   2b1e8:	b2db      	uxtb	r3, r3
   2b1ea:	2b05      	cmp	r3, #5
   2b1ec:	d101      	bne.n	2b1f2 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2b1ee:	2305      	movs	r3, #5
   2b1f0:	e087      	b.n	2b302 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   2b1f2:	1dbb      	adds	r3, r7, #6
   2b1f4:	881b      	ldrh	r3, [r3, #0]
   2b1f6:	2b00      	cmp	r3, #0
   2b1f8:	d101      	bne.n	2b1fe <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   2b1fa:	2317      	movs	r3, #23
   2b1fc:	e081      	b.n	2b302 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   2b1fe:	2316      	movs	r3, #22
   2b200:	18fb      	adds	r3, r7, r3
   2b202:	2200      	movs	r2, #0
   2b204:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   2b206:	2314      	movs	r3, #20
   2b208:	18fb      	adds	r3, r7, r3
   2b20a:	1dba      	adds	r2, r7, #6
   2b20c:	8812      	ldrh	r2, [r2, #0]
   2b20e:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   2b210:	e05f      	b.n	2b2d2 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2b212:	46c0      	nop			; (mov r8, r8)
   2b214:	68fb      	ldr	r3, [r7, #12]
   2b216:	0018      	movs	r0, r3
   2b218:	4b3c      	ldr	r3, [pc, #240]	; (2b30c <spi_write_buffer_wait+0x138>)
   2b21a:	4798      	blx	r3
   2b21c:	0003      	movs	r3, r0
   2b21e:	001a      	movs	r2, r3
   2b220:	2301      	movs	r3, #1
   2b222:	4053      	eors	r3, r2
   2b224:	b2db      	uxtb	r3, r3
   2b226:	2b00      	cmp	r3, #0
   2b228:	d1f4      	bne.n	2b214 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   2b22a:	2316      	movs	r3, #22
   2b22c:	18fb      	adds	r3, r7, r3
   2b22e:	881b      	ldrh	r3, [r3, #0]
   2b230:	2216      	movs	r2, #22
   2b232:	18ba      	adds	r2, r7, r2
   2b234:	1c59      	adds	r1, r3, #1
   2b236:	8011      	strh	r1, [r2, #0]
   2b238:	001a      	movs	r2, r3
   2b23a:	68bb      	ldr	r3, [r7, #8]
   2b23c:	189b      	adds	r3, r3, r2
   2b23e:	781a      	ldrb	r2, [r3, #0]
   2b240:	2312      	movs	r3, #18
   2b242:	18fb      	adds	r3, r7, r3
   2b244:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2b246:	68fb      	ldr	r3, [r7, #12]
   2b248:	799b      	ldrb	r3, [r3, #6]
   2b24a:	2b01      	cmp	r3, #1
   2b24c:	d115      	bne.n	2b27a <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2b24e:	2316      	movs	r3, #22
   2b250:	18fb      	adds	r3, r7, r3
   2b252:	881b      	ldrh	r3, [r3, #0]
   2b254:	2216      	movs	r2, #22
   2b256:	18ba      	adds	r2, r7, r2
   2b258:	1c59      	adds	r1, r3, #1
   2b25a:	8011      	strh	r1, [r2, #0]
   2b25c:	001a      	movs	r2, r3
   2b25e:	68bb      	ldr	r3, [r7, #8]
   2b260:	189b      	adds	r3, r3, r2
   2b262:	781b      	ldrb	r3, [r3, #0]
   2b264:	021b      	lsls	r3, r3, #8
   2b266:	b21a      	sxth	r2, r3
   2b268:	2312      	movs	r3, #18
   2b26a:	18fb      	adds	r3, r7, r3
   2b26c:	2100      	movs	r1, #0
   2b26e:	5e5b      	ldrsh	r3, [r3, r1]
   2b270:	4313      	orrs	r3, r2
   2b272:	b21a      	sxth	r2, r3
   2b274:	2312      	movs	r3, #18
   2b276:	18fb      	adds	r3, r7, r3
   2b278:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   2b27a:	2312      	movs	r3, #18
   2b27c:	18fb      	adds	r3, r7, r3
   2b27e:	881a      	ldrh	r2, [r3, #0]
   2b280:	68fb      	ldr	r3, [r7, #12]
   2b282:	0011      	movs	r1, r2
   2b284:	0018      	movs	r0, r3
   2b286:	4b22      	ldr	r3, [pc, #136]	; (2b310 <spi_write_buffer_wait+0x13c>)
   2b288:	4798      	blx	r3

		if (module->receiver_enabled) {
   2b28a:	68fb      	ldr	r3, [r7, #12]
   2b28c:	79db      	ldrb	r3, [r3, #7]
   2b28e:	2214      	movs	r2, #20
   2b290:	18ba      	adds	r2, r7, r2
   2b292:	2114      	movs	r1, #20
   2b294:	1879      	adds	r1, r7, r1
   2b296:	8809      	ldrh	r1, [r1, #0]
   2b298:	8011      	strh	r1, [r2, #0]
   2b29a:	2b00      	cmp	r3, #0
   2b29c:	d019      	beq.n	2b2d2 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2b29e:	46c0      	nop			; (mov r8, r8)
   2b2a0:	68fb      	ldr	r3, [r7, #12]
   2b2a2:	0018      	movs	r0, r3
   2b2a4:	4b1b      	ldr	r3, [pc, #108]	; (2b314 <spi_write_buffer_wait+0x140>)
   2b2a6:	4798      	blx	r3
   2b2a8:	0003      	movs	r3, r0
   2b2aa:	001a      	movs	r2, r3
   2b2ac:	2301      	movs	r3, #1
   2b2ae:	4053      	eors	r3, r2
   2b2b0:	b2db      	uxtb	r3, r3
   2b2b2:	2b00      	cmp	r3, #0
   2b2b4:	d1f4      	bne.n	2b2a0 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2b2b6:	2310      	movs	r3, #16
   2b2b8:	18fa      	adds	r2, r7, r3
   2b2ba:	68fb      	ldr	r3, [r7, #12]
   2b2bc:	0011      	movs	r1, r2
   2b2be:	0018      	movs	r0, r3
   2b2c0:	4b15      	ldr	r3, [pc, #84]	; (2b318 <spi_write_buffer_wait+0x144>)
   2b2c2:	4798      	blx	r3
			flush_length--;
   2b2c4:	2314      	movs	r3, #20
   2b2c6:	18fb      	adds	r3, r7, r3
   2b2c8:	881a      	ldrh	r2, [r3, #0]
   2b2ca:	2314      	movs	r3, #20
   2b2cc:	18fb      	adds	r3, r7, r3
   2b2ce:	3a01      	subs	r2, #1
   2b2d0:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2b2d2:	1dbb      	adds	r3, r7, #6
   2b2d4:	881b      	ldrh	r3, [r3, #0]
   2b2d6:	1dba      	adds	r2, r7, #6
   2b2d8:	1e59      	subs	r1, r3, #1
   2b2da:	8011      	strh	r1, [r2, #0]
   2b2dc:	2b00      	cmp	r3, #0
   2b2de:	d198      	bne.n	2b212 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   2b2e0:	68fb      	ldr	r3, [r7, #12]
   2b2e2:	795b      	ldrb	r3, [r3, #5]
   2b2e4:	2b01      	cmp	r3, #1
   2b2e6:	d10b      	bne.n	2b300 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   2b2e8:	46c0      	nop			; (mov r8, r8)
   2b2ea:	68fb      	ldr	r3, [r7, #12]
   2b2ec:	0018      	movs	r0, r3
   2b2ee:	4b0b      	ldr	r3, [pc, #44]	; (2b31c <spi_write_buffer_wait+0x148>)
   2b2f0:	4798      	blx	r3
   2b2f2:	0003      	movs	r3, r0
   2b2f4:	001a      	movs	r2, r3
   2b2f6:	2301      	movs	r3, #1
   2b2f8:	4053      	eors	r3, r2
   2b2fa:	b2db      	uxtb	r3, r3
   2b2fc:	2b00      	cmp	r3, #0
   2b2fe:	d1f4      	bne.n	2b2ea <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   2b300:	2300      	movs	r3, #0
}
   2b302:	0018      	movs	r0, r3
   2b304:	46bd      	mov	sp, r7
   2b306:	b006      	add	sp, #24
   2b308:	bd80      	pop	{r7, pc}
   2b30a:	46c0      	nop			; (mov r8, r8)
   2b30c:	0002aa29 	.word	0x0002aa29
   2b310:	0002aa79 	.word	0x0002aa79
   2b314:	0002aa51 	.word	0x0002aa51
   2b318:	0002aac1 	.word	0x0002aac1
   2b31c:	0002aa01 	.word	0x0002aa01

0002b320 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   2b320:	b580      	push	{r7, lr}
   2b322:	b084      	sub	sp, #16
   2b324:	af00      	add	r7, sp, #0
   2b326:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2b328:	687b      	ldr	r3, [r7, #4]
   2b32a:	681b      	ldr	r3, [r3, #0]
   2b32c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   2b32e:	687b      	ldr	r3, [r7, #4]
   2b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b332:	781b      	ldrb	r3, [r3, #0]
   2b334:	b2da      	uxtb	r2, r3
   2b336:	230e      	movs	r3, #14
   2b338:	18fb      	adds	r3, r7, r3
   2b33a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   2b33c:	687b      	ldr	r3, [r7, #4]
   2b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b340:	1c5a      	adds	r2, r3, #1
   2b342:	687b      	ldr	r3, [r7, #4]
   2b344:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2b346:	687b      	ldr	r3, [r7, #4]
   2b348:	799b      	ldrb	r3, [r3, #6]
   2b34a:	2b01      	cmp	r3, #1
   2b34c:	d113      	bne.n	2b376 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2b34e:	687b      	ldr	r3, [r7, #4]
   2b350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b352:	781b      	ldrb	r3, [r3, #0]
   2b354:	b2db      	uxtb	r3, r3
   2b356:	021b      	lsls	r3, r3, #8
   2b358:	b21a      	sxth	r2, r3
   2b35a:	230e      	movs	r3, #14
   2b35c:	18fb      	adds	r3, r7, r3
   2b35e:	2100      	movs	r1, #0
   2b360:	5e5b      	ldrsh	r3, [r3, r1]
   2b362:	4313      	orrs	r3, r2
   2b364:	b21a      	sxth	r2, r3
   2b366:	230e      	movs	r3, #14
   2b368:	18fb      	adds	r3, r7, r3
   2b36a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   2b36c:	687b      	ldr	r3, [r7, #4]
   2b36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b370:	1c5a      	adds	r2, r3, #1
   2b372:	687b      	ldr	r3, [r7, #4]
   2b374:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   2b376:	230e      	movs	r3, #14
   2b378:	18fb      	adds	r3, r7, r3
   2b37a:	881b      	ldrh	r3, [r3, #0]
   2b37c:	05db      	lsls	r3, r3, #23
   2b37e:	0dda      	lsrs	r2, r3, #23
   2b380:	68bb      	ldr	r3, [r7, #8]
   2b382:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   2b384:	687b      	ldr	r3, [r7, #4]
   2b386:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2b388:	b29b      	uxth	r3, r3
   2b38a:	3b01      	subs	r3, #1
   2b38c:	b29a      	uxth	r2, r3
   2b38e:	687b      	ldr	r3, [r7, #4]
   2b390:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2b392:	46c0      	nop			; (mov r8, r8)
   2b394:	46bd      	mov	sp, r7
   2b396:	b004      	add	sp, #16
   2b398:	bd80      	pop	{r7, pc}
	...

0002b39c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   2b39c:	b580      	push	{r7, lr}
   2b39e:	b084      	sub	sp, #16
   2b3a0:	af00      	add	r7, sp, #0
   2b3a2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2b3a4:	687b      	ldr	r3, [r7, #4]
   2b3a6:	681b      	ldr	r3, [r3, #0]
   2b3a8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   2b3aa:	4b08      	ldr	r3, [pc, #32]	; (2b3cc <_spi_write_dummy+0x30>)
   2b3ac:	881b      	ldrh	r3, [r3, #0]
   2b3ae:	001a      	movs	r2, r3
   2b3b0:	68fb      	ldr	r3, [r7, #12]
   2b3b2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2b3b4:	687b      	ldr	r3, [r7, #4]
   2b3b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2b3b8:	b29b      	uxth	r3, r3
   2b3ba:	3b01      	subs	r3, #1
   2b3bc:	b29a      	uxth	r2, r3
   2b3be:	687b      	ldr	r3, [r7, #4]
   2b3c0:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2b3c2:	46c0      	nop			; (mov r8, r8)
   2b3c4:	46bd      	mov	sp, r7
   2b3c6:	b004      	add	sp, #16
   2b3c8:	bd80      	pop	{r7, pc}
   2b3ca:	46c0      	nop			; (mov r8, r8)
   2b3cc:	20005c34 	.word	0x20005c34

0002b3d0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   2b3d0:	b580      	push	{r7, lr}
   2b3d2:	b084      	sub	sp, #16
   2b3d4:	af00      	add	r7, sp, #0
   2b3d6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2b3d8:	687b      	ldr	r3, [r7, #4]
   2b3da:	681b      	ldr	r3, [r3, #0]
   2b3dc:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   2b3de:	230a      	movs	r3, #10
   2b3e0:	18fb      	adds	r3, r7, r3
   2b3e2:	2200      	movs	r2, #0
   2b3e4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   2b3e6:	68fb      	ldr	r3, [r7, #12]
   2b3e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2b3ea:	230a      	movs	r3, #10
   2b3ec:	18fb      	adds	r3, r7, r3
   2b3ee:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2b3f0:	687b      	ldr	r3, [r7, #4]
   2b3f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2b3f4:	b29b      	uxth	r3, r3
   2b3f6:	3b01      	subs	r3, #1
   2b3f8:	b29a      	uxth	r2, r3
   2b3fa:	687b      	ldr	r3, [r7, #4]
   2b3fc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2b3fe:	46c0      	nop			; (mov r8, r8)
   2b400:	46bd      	mov	sp, r7
   2b402:	b004      	add	sp, #16
   2b404:	bd80      	pop	{r7, pc}

0002b406 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   2b406:	b580      	push	{r7, lr}
   2b408:	b084      	sub	sp, #16
   2b40a:	af00      	add	r7, sp, #0
   2b40c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2b40e:	687b      	ldr	r3, [r7, #4]
   2b410:	681b      	ldr	r3, [r3, #0]
   2b412:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   2b414:	68fb      	ldr	r3, [r7, #12]
   2b416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b418:	b29a      	uxth	r2, r3
   2b41a:	230a      	movs	r3, #10
   2b41c:	18fb      	adds	r3, r7, r3
   2b41e:	05d2      	lsls	r2, r2, #23
   2b420:	0dd2      	lsrs	r2, r2, #23
   2b422:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   2b424:	687b      	ldr	r3, [r7, #4]
   2b426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b428:	220a      	movs	r2, #10
   2b42a:	18ba      	adds	r2, r7, r2
   2b42c:	8812      	ldrh	r2, [r2, #0]
   2b42e:	b2d2      	uxtb	r2, r2
   2b430:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   2b432:	687b      	ldr	r3, [r7, #4]
   2b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b436:	1c5a      	adds	r2, r3, #1
   2b438:	687b      	ldr	r3, [r7, #4]
   2b43a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2b43c:	687b      	ldr	r3, [r7, #4]
   2b43e:	799b      	ldrb	r3, [r3, #6]
   2b440:	2b01      	cmp	r3, #1
   2b442:	d10d      	bne.n	2b460 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   2b444:	687b      	ldr	r3, [r7, #4]
   2b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b448:	220a      	movs	r2, #10
   2b44a:	18ba      	adds	r2, r7, r2
   2b44c:	8812      	ldrh	r2, [r2, #0]
   2b44e:	0a12      	lsrs	r2, r2, #8
   2b450:	b292      	uxth	r2, r2
   2b452:	b2d2      	uxtb	r2, r2
   2b454:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   2b456:	687b      	ldr	r3, [r7, #4]
   2b458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b45a:	1c5a      	adds	r2, r3, #1
   2b45c:	687b      	ldr	r3, [r7, #4]
   2b45e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2b460:	687b      	ldr	r3, [r7, #4]
   2b462:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2b464:	b29b      	uxth	r3, r3
   2b466:	3b01      	subs	r3, #1
   2b468:	b29a      	uxth	r2, r3
   2b46a:	687b      	ldr	r3, [r7, #4]
   2b46c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2b46e:	46c0      	nop			; (mov r8, r8)
   2b470:	46bd      	mov	sp, r7
   2b472:	b004      	add	sp, #16
   2b474:	bd80      	pop	{r7, pc}
	...

0002b478 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   2b478:	b580      	push	{r7, lr}
   2b47a:	b086      	sub	sp, #24
   2b47c:	af00      	add	r7, sp, #0
   2b47e:	0002      	movs	r2, r0
   2b480:	1dfb      	adds	r3, r7, #7
   2b482:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   2b484:	1dfb      	adds	r3, r7, #7
   2b486:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   2b488:	4b96      	ldr	r3, [pc, #600]	; (2b6e4 <_spi_interrupt_handler+0x26c>)
   2b48a:	0092      	lsls	r2, r2, #2
   2b48c:	58d3      	ldr	r3, [r2, r3]
   2b48e:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2b490:	697b      	ldr	r3, [r7, #20]
   2b492:	681b      	ldr	r3, [r3, #0]
   2b494:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   2b496:	697b      	ldr	r3, [r7, #20]
   2b498:	2237      	movs	r2, #55	; 0x37
   2b49a:	5c9a      	ldrb	r2, [r3, r2]
   2b49c:	697b      	ldr	r3, [r7, #20]
   2b49e:	2136      	movs	r1, #54	; 0x36
   2b4a0:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2b4a2:	230f      	movs	r3, #15
   2b4a4:	18fb      	adds	r3, r7, r3
   2b4a6:	400a      	ands	r2, r1
   2b4a8:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   2b4aa:	693b      	ldr	r3, [r7, #16]
   2b4ac:	7e1b      	ldrb	r3, [r3, #24]
   2b4ae:	b2da      	uxtb	r2, r3
   2b4b0:	230c      	movs	r3, #12
   2b4b2:	18fb      	adds	r3, r7, r3
   2b4b4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   2b4b6:	693b      	ldr	r3, [r7, #16]
   2b4b8:	7d9b      	ldrb	r3, [r3, #22]
   2b4ba:	b2db      	uxtb	r3, r3
   2b4bc:	b29a      	uxth	r2, r3
   2b4be:	230c      	movs	r3, #12
   2b4c0:	18fb      	adds	r3, r7, r3
   2b4c2:	210c      	movs	r1, #12
   2b4c4:	1879      	adds	r1, r7, r1
   2b4c6:	8809      	ldrh	r1, [r1, #0]
   2b4c8:	400a      	ands	r2, r1
   2b4ca:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   2b4cc:	230c      	movs	r3, #12
   2b4ce:	18fb      	adds	r3, r7, r3
   2b4d0:	881b      	ldrh	r3, [r3, #0]
   2b4d2:	2201      	movs	r2, #1
   2b4d4:	4013      	ands	r3, r2
   2b4d6:	d038      	beq.n	2b54a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2b4d8:	697b      	ldr	r3, [r7, #20]
   2b4da:	795b      	ldrb	r3, [r3, #5]
   2b4dc:	2b01      	cmp	r3, #1
   2b4de:	d110      	bne.n	2b502 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   2b4e0:	697b      	ldr	r3, [r7, #20]
   2b4e2:	7a5b      	ldrb	r3, [r3, #9]
   2b4e4:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2b4e6:	2b00      	cmp	r3, #0
   2b4e8:	d10b      	bne.n	2b502 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   2b4ea:	697b      	ldr	r3, [r7, #20]
   2b4ec:	0018      	movs	r0, r3
   2b4ee:	4b7e      	ldr	r3, [pc, #504]	; (2b6e8 <_spi_interrupt_handler+0x270>)
   2b4f0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2b4f2:	697b      	ldr	r3, [r7, #20]
   2b4f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2b4f6:	b29b      	uxth	r3, r3
   2b4f8:	2b00      	cmp	r3, #0
   2b4fa:	d102      	bne.n	2b502 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2b4fc:	693b      	ldr	r3, [r7, #16]
   2b4fe:	2201      	movs	r2, #1
   2b500:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2b502:	697b      	ldr	r3, [r7, #20]
   2b504:	795b      	ldrb	r3, [r3, #5]
		if (0
   2b506:	2b01      	cmp	r3, #1
   2b508:	d11f      	bne.n	2b54a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   2b50a:	697b      	ldr	r3, [r7, #20]
   2b50c:	7a5b      	ldrb	r3, [r3, #9]
   2b50e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   2b510:	2b00      	cmp	r3, #0
   2b512:	d01a      	beq.n	2b54a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   2b514:	697b      	ldr	r3, [r7, #20]
   2b516:	0018      	movs	r0, r3
   2b518:	4b74      	ldr	r3, [pc, #464]	; (2b6ec <_spi_interrupt_handler+0x274>)
   2b51a:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   2b51c:	697b      	ldr	r3, [r7, #20]
   2b51e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2b520:	b29b      	uxth	r3, r3
   2b522:	2b00      	cmp	r3, #0
   2b524:	d111      	bne.n	2b54a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2b526:	693b      	ldr	r3, [r7, #16]
   2b528:	2201      	movs	r2, #1
   2b52a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   2b52c:	697b      	ldr	r3, [r7, #20]
   2b52e:	7a5b      	ldrb	r3, [r3, #9]
   2b530:	b2db      	uxtb	r3, r3
   2b532:	2b01      	cmp	r3, #1
   2b534:	d109      	bne.n	2b54a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   2b536:	697b      	ldr	r3, [r7, #20]
   2b538:	79db      	ldrb	r3, [r3, #7]
   2b53a:	2201      	movs	r2, #1
   2b53c:	4053      	eors	r3, r2
   2b53e:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2b540:	2b00      	cmp	r3, #0
   2b542:	d002      	beq.n	2b54a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2b544:	693b      	ldr	r3, [r7, #16]
   2b546:	2202      	movs	r2, #2
   2b548:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   2b54a:	230c      	movs	r3, #12
   2b54c:	18fb      	adds	r3, r7, r3
   2b54e:	881b      	ldrh	r3, [r3, #0]
   2b550:	2204      	movs	r2, #4
   2b552:	4013      	ands	r3, r2
   2b554:	d100      	bne.n	2b558 <_spi_interrupt_handler+0xe0>
   2b556:	e07e      	b.n	2b656 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2b558:	693b      	ldr	r3, [r7, #16]
   2b55a:	8b5b      	ldrh	r3, [r3, #26]
   2b55c:	b29b      	uxth	r3, r3
   2b55e:	001a      	movs	r2, r3
   2b560:	2304      	movs	r3, #4
   2b562:	4013      	ands	r3, r2
   2b564:	d022      	beq.n	2b5ac <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   2b566:	697b      	ldr	r3, [r7, #20]
   2b568:	7a5b      	ldrb	r3, [r3, #9]
   2b56a:	b2db      	uxtb	r3, r3
   2b56c:	2b01      	cmp	r3, #1
   2b56e:	d014      	beq.n	2b59a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2b570:	697b      	ldr	r3, [r7, #20]
   2b572:	2238      	movs	r2, #56	; 0x38
   2b574:	211e      	movs	r1, #30
   2b576:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   2b578:	697b      	ldr	r3, [r7, #20]
   2b57a:	2203      	movs	r2, #3
   2b57c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2b57e:	693b      	ldr	r3, [r7, #16]
   2b580:	2205      	movs	r2, #5
   2b582:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   2b584:	230f      	movs	r3, #15
   2b586:	18fb      	adds	r3, r7, r3
   2b588:	781b      	ldrb	r3, [r3, #0]
   2b58a:	2208      	movs	r2, #8
   2b58c:	4013      	ands	r3, r2
   2b58e:	d004      	beq.n	2b59a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   2b590:	697b      	ldr	r3, [r7, #20]
   2b592:	699b      	ldr	r3, [r3, #24]
   2b594:	697a      	ldr	r2, [r7, #20]
   2b596:	0010      	movs	r0, r2
   2b598:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   2b59a:	693b      	ldr	r3, [r7, #16]
   2b59c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2b59e:	230a      	movs	r3, #10
   2b5a0:	18fb      	adds	r3, r7, r3
   2b5a2:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   2b5a4:	693b      	ldr	r3, [r7, #16]
   2b5a6:	2204      	movs	r2, #4
   2b5a8:	835a      	strh	r2, [r3, #26]
   2b5aa:	e054      	b.n	2b656 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   2b5ac:	697b      	ldr	r3, [r7, #20]
   2b5ae:	7a5b      	ldrb	r3, [r3, #9]
   2b5b0:	b2db      	uxtb	r3, r3
   2b5b2:	2b01      	cmp	r3, #1
   2b5b4:	d11e      	bne.n	2b5f4 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   2b5b6:	697b      	ldr	r3, [r7, #20]
   2b5b8:	0018      	movs	r0, r3
   2b5ba:	4b4d      	ldr	r3, [pc, #308]	; (2b6f0 <_spi_interrupt_handler+0x278>)
   2b5bc:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2b5be:	697b      	ldr	r3, [r7, #20]
   2b5c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2b5c2:	b29b      	uxth	r3, r3
   2b5c4:	2b00      	cmp	r3, #0
   2b5c6:	d146      	bne.n	2b656 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2b5c8:	693b      	ldr	r3, [r7, #16]
   2b5ca:	2204      	movs	r2, #4
   2b5cc:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2b5ce:	697b      	ldr	r3, [r7, #20]
   2b5d0:	2238      	movs	r2, #56	; 0x38
   2b5d2:	2100      	movs	r1, #0
   2b5d4:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   2b5d6:	697b      	ldr	r3, [r7, #20]
   2b5d8:	2203      	movs	r2, #3
   2b5da:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   2b5dc:	230f      	movs	r3, #15
   2b5de:	18fb      	adds	r3, r7, r3
   2b5e0:	781b      	ldrb	r3, [r3, #0]
   2b5e2:	2201      	movs	r2, #1
   2b5e4:	4013      	ands	r3, r2
   2b5e6:	d036      	beq.n	2b656 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   2b5e8:	697b      	ldr	r3, [r7, #20]
   2b5ea:	68db      	ldr	r3, [r3, #12]
   2b5ec:	697a      	ldr	r2, [r7, #20]
   2b5ee:	0010      	movs	r0, r2
   2b5f0:	4798      	blx	r3
   2b5f2:	e030      	b.n	2b656 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   2b5f4:	697b      	ldr	r3, [r7, #20]
   2b5f6:	0018      	movs	r0, r3
   2b5f8:	4b3e      	ldr	r3, [pc, #248]	; (2b6f4 <_spi_interrupt_handler+0x27c>)
   2b5fa:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   2b5fc:	697b      	ldr	r3, [r7, #20]
   2b5fe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2b600:	b29b      	uxth	r3, r3
   2b602:	2b00      	cmp	r3, #0
   2b604:	d127      	bne.n	2b656 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   2b606:	697b      	ldr	r3, [r7, #20]
   2b608:	2238      	movs	r2, #56	; 0x38
   2b60a:	2100      	movs	r1, #0
   2b60c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2b60e:	693b      	ldr	r3, [r7, #16]
   2b610:	2204      	movs	r2, #4
   2b612:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   2b614:	697b      	ldr	r3, [r7, #20]
   2b616:	7a5b      	ldrb	r3, [r3, #9]
   2b618:	b2db      	uxtb	r3, r3
   2b61a:	2b02      	cmp	r3, #2
   2b61c:	d10b      	bne.n	2b636 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2b61e:	230f      	movs	r3, #15
   2b620:	18fb      	adds	r3, r7, r3
   2b622:	781b      	ldrb	r3, [r3, #0]
   2b624:	2204      	movs	r2, #4
   2b626:	4013      	ands	r3, r2
   2b628:	d015      	beq.n	2b656 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   2b62a:	697b      	ldr	r3, [r7, #20]
   2b62c:	695b      	ldr	r3, [r3, #20]
   2b62e:	697a      	ldr	r2, [r7, #20]
   2b630:	0010      	movs	r0, r2
   2b632:	4798      	blx	r3
   2b634:	e00f      	b.n	2b656 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   2b636:	697b      	ldr	r3, [r7, #20]
   2b638:	7a5b      	ldrb	r3, [r3, #9]
   2b63a:	b2db      	uxtb	r3, r3
   2b63c:	2b00      	cmp	r3, #0
   2b63e:	d10a      	bne.n	2b656 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2b640:	230f      	movs	r3, #15
   2b642:	18fb      	adds	r3, r7, r3
   2b644:	781b      	ldrb	r3, [r3, #0]
   2b646:	2202      	movs	r2, #2
   2b648:	4013      	ands	r3, r2
   2b64a:	d004      	beq.n	2b656 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   2b64c:	697b      	ldr	r3, [r7, #20]
   2b64e:	691b      	ldr	r3, [r3, #16]
   2b650:	697a      	ldr	r2, [r7, #20]
   2b652:	0010      	movs	r0, r2
   2b654:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   2b656:	230c      	movs	r3, #12
   2b658:	18fb      	adds	r3, r7, r3
   2b65a:	881b      	ldrh	r3, [r3, #0]
   2b65c:	2202      	movs	r2, #2
   2b65e:	4013      	ands	r3, r2
   2b660:	d024      	beq.n	2b6ac <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2b662:	697b      	ldr	r3, [r7, #20]
   2b664:	795b      	ldrb	r3, [r3, #5]
   2b666:	2b01      	cmp	r3, #1
   2b668:	d120      	bne.n	2b6ac <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   2b66a:	697b      	ldr	r3, [r7, #20]
   2b66c:	7a5b      	ldrb	r3, [r3, #9]
   2b66e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2b670:	2b01      	cmp	r3, #1
   2b672:	d11b      	bne.n	2b6ac <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   2b674:	697b      	ldr	r3, [r7, #20]
   2b676:	79db      	ldrb	r3, [r3, #7]
   2b678:	2201      	movs	r2, #1
   2b67a:	4053      	eors	r3, r2
   2b67c:	b2db      	uxtb	r3, r3
   2b67e:	2b00      	cmp	r3, #0
   2b680:	d014      	beq.n	2b6ac <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2b682:	693b      	ldr	r3, [r7, #16]
   2b684:	2202      	movs	r2, #2
   2b686:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   2b688:	697b      	ldr	r3, [r7, #20]
   2b68a:	2203      	movs	r2, #3
   2b68c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2b68e:	697b      	ldr	r3, [r7, #20]
   2b690:	2238      	movs	r2, #56	; 0x38
   2b692:	2100      	movs	r1, #0
   2b694:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   2b696:	230f      	movs	r3, #15
   2b698:	18fb      	adds	r3, r7, r3
   2b69a:	781b      	ldrb	r3, [r3, #0]
   2b69c:	2201      	movs	r2, #1
   2b69e:	4013      	ands	r3, r2
   2b6a0:	d004      	beq.n	2b6ac <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2b6a2:	697b      	ldr	r3, [r7, #20]
   2b6a4:	68db      	ldr	r3, [r3, #12]
   2b6a6:	697a      	ldr	r2, [r7, #20]
   2b6a8:	0010      	movs	r0, r2
   2b6aa:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   2b6ac:	230c      	movs	r3, #12
   2b6ae:	18fb      	adds	r3, r7, r3
   2b6b0:	881b      	ldrh	r3, [r3, #0]
   2b6b2:	2280      	movs	r2, #128	; 0x80
   2b6b4:	4013      	ands	r3, r2
   2b6b6:	d010      	beq.n	2b6da <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2b6b8:	693b      	ldr	r3, [r7, #16]
   2b6ba:	2280      	movs	r2, #128	; 0x80
   2b6bc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2b6be:	693b      	ldr	r3, [r7, #16]
   2b6c0:	2280      	movs	r2, #128	; 0x80
   2b6c2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   2b6c4:	230f      	movs	r3, #15
   2b6c6:	18fb      	adds	r3, r7, r3
   2b6c8:	781b      	ldrb	r3, [r3, #0]
   2b6ca:	2240      	movs	r2, #64	; 0x40
   2b6cc:	4013      	ands	r3, r2
   2b6ce:	d004      	beq.n	2b6da <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2b6d0:	697b      	ldr	r3, [r7, #20]
   2b6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2b6d4:	697a      	ldr	r2, [r7, #20]
   2b6d6:	0010      	movs	r0, r2
   2b6d8:	4798      	blx	r3
		}
	}
#  endif
}
   2b6da:	46c0      	nop			; (mov r8, r8)
   2b6dc:	46bd      	mov	sp, r7
   2b6de:	b006      	add	sp, #24
   2b6e0:	bd80      	pop	{r7, pc}
   2b6e2:	46c0      	nop			; (mov r8, r8)
   2b6e4:	20005c1c 	.word	0x20005c1c
   2b6e8:	0002b39d 	.word	0x0002b39d
   2b6ec:	0002b321 	.word	0x0002b321
   2b6f0:	0002b3d1 	.word	0x0002b3d1
   2b6f4:	0002b407 	.word	0x0002b407

0002b6f8 <system_gclk_chan_get_config_defaults>:
{
   2b6f8:	b580      	push	{r7, lr}
   2b6fa:	b082      	sub	sp, #8
   2b6fc:	af00      	add	r7, sp, #0
   2b6fe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b700:	687b      	ldr	r3, [r7, #4]
   2b702:	2200      	movs	r2, #0
   2b704:	701a      	strb	r2, [r3, #0]
}
   2b706:	46c0      	nop			; (mov r8, r8)
   2b708:	46bd      	mov	sp, r7
   2b70a:	b002      	add	sp, #8
   2b70c:	bd80      	pop	{r7, pc}
	...

0002b710 <system_apb_clock_set_mask>:
{
   2b710:	b580      	push	{r7, lr}
   2b712:	b082      	sub	sp, #8
   2b714:	af00      	add	r7, sp, #0
   2b716:	0002      	movs	r2, r0
   2b718:	6039      	str	r1, [r7, #0]
   2b71a:	1dfb      	adds	r3, r7, #7
   2b71c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b71e:	1dfb      	adds	r3, r7, #7
   2b720:	781b      	ldrb	r3, [r3, #0]
   2b722:	2b01      	cmp	r3, #1
   2b724:	d00a      	beq.n	2b73c <system_apb_clock_set_mask+0x2c>
   2b726:	2b02      	cmp	r3, #2
   2b728:	d00f      	beq.n	2b74a <system_apb_clock_set_mask+0x3a>
   2b72a:	2b00      	cmp	r3, #0
   2b72c:	d114      	bne.n	2b758 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2b72e:	4b0e      	ldr	r3, [pc, #56]	; (2b768 <system_apb_clock_set_mask+0x58>)
   2b730:	4a0d      	ldr	r2, [pc, #52]	; (2b768 <system_apb_clock_set_mask+0x58>)
   2b732:	6991      	ldr	r1, [r2, #24]
   2b734:	683a      	ldr	r2, [r7, #0]
   2b736:	430a      	orrs	r2, r1
   2b738:	619a      	str	r2, [r3, #24]
			break;
   2b73a:	e00f      	b.n	2b75c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2b73c:	4b0a      	ldr	r3, [pc, #40]	; (2b768 <system_apb_clock_set_mask+0x58>)
   2b73e:	4a0a      	ldr	r2, [pc, #40]	; (2b768 <system_apb_clock_set_mask+0x58>)
   2b740:	69d1      	ldr	r1, [r2, #28]
   2b742:	683a      	ldr	r2, [r7, #0]
   2b744:	430a      	orrs	r2, r1
   2b746:	61da      	str	r2, [r3, #28]
			break;
   2b748:	e008      	b.n	2b75c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2b74a:	4b07      	ldr	r3, [pc, #28]	; (2b768 <system_apb_clock_set_mask+0x58>)
   2b74c:	4a06      	ldr	r2, [pc, #24]	; (2b768 <system_apb_clock_set_mask+0x58>)
   2b74e:	6a11      	ldr	r1, [r2, #32]
   2b750:	683a      	ldr	r2, [r7, #0]
   2b752:	430a      	orrs	r2, r1
   2b754:	621a      	str	r2, [r3, #32]
			break;
   2b756:	e001      	b.n	2b75c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2b758:	2317      	movs	r3, #23
   2b75a:	e000      	b.n	2b75e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2b75c:	2300      	movs	r3, #0
}
   2b75e:	0018      	movs	r0, r3
   2b760:	46bd      	mov	sp, r7
   2b762:	b002      	add	sp, #8
   2b764:	bd80      	pop	{r7, pc}
   2b766:	46c0      	nop			; (mov r8, r8)
   2b768:	40000400 	.word	0x40000400

0002b76c <system_pinmux_get_config_defaults>:
{
   2b76c:	b580      	push	{r7, lr}
   2b76e:	b082      	sub	sp, #8
   2b770:	af00      	add	r7, sp, #0
   2b772:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2b774:	687b      	ldr	r3, [r7, #4]
   2b776:	2280      	movs	r2, #128	; 0x80
   2b778:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2b77a:	687b      	ldr	r3, [r7, #4]
   2b77c:	2200      	movs	r2, #0
   2b77e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2b780:	687b      	ldr	r3, [r7, #4]
   2b782:	2201      	movs	r2, #1
   2b784:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2b786:	687b      	ldr	r3, [r7, #4]
   2b788:	2200      	movs	r2, #0
   2b78a:	70da      	strb	r2, [r3, #3]
}
   2b78c:	46c0      	nop			; (mov r8, r8)
   2b78e:	46bd      	mov	sp, r7
   2b790:	b002      	add	sp, #8
   2b792:	bd80      	pop	{r7, pc}

0002b794 <system_is_debugger_present>:
{
   2b794:	b580      	push	{r7, lr}
   2b796:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2b798:	4b05      	ldr	r3, [pc, #20]	; (2b7b0 <system_is_debugger_present+0x1c>)
   2b79a:	789b      	ldrb	r3, [r3, #2]
   2b79c:	b2db      	uxtb	r3, r3
   2b79e:	001a      	movs	r2, r3
   2b7a0:	2302      	movs	r3, #2
   2b7a2:	4013      	ands	r3, r2
   2b7a4:	1e5a      	subs	r2, r3, #1
   2b7a6:	4193      	sbcs	r3, r2
   2b7a8:	b2db      	uxtb	r3, r3
}
   2b7aa:	0018      	movs	r0, r3
   2b7ac:	46bd      	mov	sp, r7
   2b7ae:	bd80      	pop	{r7, pc}
   2b7b0:	41002000 	.word	0x41002000

0002b7b4 <usart_is_syncing>:
{
   2b7b4:	b580      	push	{r7, lr}
   2b7b6:	b084      	sub	sp, #16
   2b7b8:	af00      	add	r7, sp, #0
   2b7ba:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b7bc:	687b      	ldr	r3, [r7, #4]
   2b7be:	681b      	ldr	r3, [r3, #0]
   2b7c0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2b7c2:	68fb      	ldr	r3, [r7, #12]
   2b7c4:	69db      	ldr	r3, [r3, #28]
   2b7c6:	1e5a      	subs	r2, r3, #1
   2b7c8:	4193      	sbcs	r3, r2
   2b7ca:	b2db      	uxtb	r3, r3
}
   2b7cc:	0018      	movs	r0, r3
   2b7ce:	46bd      	mov	sp, r7
   2b7d0:	b004      	add	sp, #16
   2b7d2:	bd80      	pop	{r7, pc}

0002b7d4 <_usart_wait_for_sync>:
{
   2b7d4:	b580      	push	{r7, lr}
   2b7d6:	b082      	sub	sp, #8
   2b7d8:	af00      	add	r7, sp, #0
   2b7da:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2b7dc:	46c0      	nop			; (mov r8, r8)
   2b7de:	687b      	ldr	r3, [r7, #4]
   2b7e0:	0018      	movs	r0, r3
   2b7e2:	4b04      	ldr	r3, [pc, #16]	; (2b7f4 <_usart_wait_for_sync+0x20>)
   2b7e4:	4798      	blx	r3
   2b7e6:	1e03      	subs	r3, r0, #0
   2b7e8:	d1f9      	bne.n	2b7de <_usart_wait_for_sync+0xa>
}
   2b7ea:	46c0      	nop			; (mov r8, r8)
   2b7ec:	46bd      	mov	sp, r7
   2b7ee:	b002      	add	sp, #8
   2b7f0:	bd80      	pop	{r7, pc}
   2b7f2:	46c0      	nop			; (mov r8, r8)
   2b7f4:	0002b7b5 	.word	0x0002b7b5

0002b7f8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   2b7f8:	b5b0      	push	{r4, r5, r7, lr}
   2b7fa:	b08c      	sub	sp, #48	; 0x30
   2b7fc:	af02      	add	r7, sp, #8
   2b7fe:	6078      	str	r0, [r7, #4]
   2b800:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2b802:	687b      	ldr	r3, [r7, #4]
   2b804:	681b      	ldr	r3, [r3, #0]
   2b806:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2b808:	687b      	ldr	r3, [r7, #4]
   2b80a:	681b      	ldr	r3, [r3, #0]
   2b80c:	0018      	movs	r0, r3
   2b80e:	4bab      	ldr	r3, [pc, #684]	; (2babc <_usart_set_config+0x2c4>)
   2b810:	4798      	blx	r3
   2b812:	0003      	movs	r3, r0
   2b814:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2b816:	697b      	ldr	r3, [r7, #20]
   2b818:	3314      	adds	r3, #20
   2b81a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2b81c:	2300      	movs	r3, #0
   2b81e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2b820:	2300      	movs	r3, #0
   2b822:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   2b824:	230a      	movs	r3, #10
   2b826:	18fb      	adds	r3, r7, r3
   2b828:	2200      	movs	r2, #0
   2b82a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2b82c:	231f      	movs	r3, #31
   2b82e:	18fb      	adds	r3, r7, r3
   2b830:	2200      	movs	r2, #0
   2b832:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2b834:	231e      	movs	r3, #30
   2b836:	18fb      	adds	r3, r7, r3
   2b838:	2210      	movs	r2, #16
   2b83a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2b83c:	683b      	ldr	r3, [r7, #0]
   2b83e:	8a1b      	ldrh	r3, [r3, #16]
   2b840:	2280      	movs	r2, #128	; 0x80
   2b842:	01d2      	lsls	r2, r2, #7
   2b844:	4293      	cmp	r3, r2
   2b846:	d01c      	beq.n	2b882 <_usart_set_config+0x8a>
   2b848:	2280      	movs	r2, #128	; 0x80
   2b84a:	01d2      	lsls	r2, r2, #7
   2b84c:	4293      	cmp	r3, r2
   2b84e:	dc06      	bgt.n	2b85e <_usart_set_config+0x66>
   2b850:	2b00      	cmp	r3, #0
   2b852:	d00d      	beq.n	2b870 <_usart_set_config+0x78>
   2b854:	2280      	movs	r2, #128	; 0x80
   2b856:	0192      	lsls	r2, r2, #6
   2b858:	4293      	cmp	r3, r2
   2b85a:	d024      	beq.n	2b8a6 <_usart_set_config+0xae>
   2b85c:	e035      	b.n	2b8ca <_usart_set_config+0xd2>
   2b85e:	22c0      	movs	r2, #192	; 0xc0
   2b860:	01d2      	lsls	r2, r2, #7
   2b862:	4293      	cmp	r3, r2
   2b864:	d028      	beq.n	2b8b8 <_usart_set_config+0xc0>
   2b866:	2280      	movs	r2, #128	; 0x80
   2b868:	0212      	lsls	r2, r2, #8
   2b86a:	4293      	cmp	r3, r2
   2b86c:	d012      	beq.n	2b894 <_usart_set_config+0x9c>
   2b86e:	e02c      	b.n	2b8ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2b870:	231f      	movs	r3, #31
   2b872:	18fb      	adds	r3, r7, r3
   2b874:	2200      	movs	r2, #0
   2b876:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2b878:	231e      	movs	r3, #30
   2b87a:	18fb      	adds	r3, r7, r3
   2b87c:	2210      	movs	r2, #16
   2b87e:	701a      	strb	r2, [r3, #0]
			break;
   2b880:	e023      	b.n	2b8ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2b882:	231f      	movs	r3, #31
   2b884:	18fb      	adds	r3, r7, r3
   2b886:	2200      	movs	r2, #0
   2b888:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2b88a:	231e      	movs	r3, #30
   2b88c:	18fb      	adds	r3, r7, r3
   2b88e:	2208      	movs	r2, #8
   2b890:	701a      	strb	r2, [r3, #0]
			break;
   2b892:	e01a      	b.n	2b8ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2b894:	231f      	movs	r3, #31
   2b896:	18fb      	adds	r3, r7, r3
   2b898:	2200      	movs	r2, #0
   2b89a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   2b89c:	231e      	movs	r3, #30
   2b89e:	18fb      	adds	r3, r7, r3
   2b8a0:	2203      	movs	r2, #3
   2b8a2:	701a      	strb	r2, [r3, #0]
			break;
   2b8a4:	e011      	b.n	2b8ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2b8a6:	231f      	movs	r3, #31
   2b8a8:	18fb      	adds	r3, r7, r3
   2b8aa:	2201      	movs	r2, #1
   2b8ac:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2b8ae:	231e      	movs	r3, #30
   2b8b0:	18fb      	adds	r3, r7, r3
   2b8b2:	2210      	movs	r2, #16
   2b8b4:	701a      	strb	r2, [r3, #0]
			break;
   2b8b6:	e008      	b.n	2b8ca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2b8b8:	231f      	movs	r3, #31
   2b8ba:	18fb      	adds	r3, r7, r3
   2b8bc:	2201      	movs	r2, #1
   2b8be:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2b8c0:	231e      	movs	r3, #30
   2b8c2:	18fb      	adds	r3, r7, r3
   2b8c4:	2208      	movs	r2, #8
   2b8c6:	701a      	strb	r2, [r3, #0]
			break;
   2b8c8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2b8ca:	683b      	ldr	r3, [r7, #0]
   2b8cc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2b8ce:	683b      	ldr	r3, [r7, #0]
   2b8d0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2b8d2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2b8d4:	683b      	ldr	r3, [r7, #0]
   2b8d6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   2b8d8:	4313      	orrs	r3, r2
		config->sample_rate |
   2b8da:	683a      	ldr	r2, [r7, #0]
   2b8dc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2b8de:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2b8e0:	683a      	ldr	r2, [r7, #0]
   2b8e2:	7e12      	ldrb	r2, [r2, #24]
   2b8e4:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2b8e6:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   2b8e8:	683a      	ldr	r2, [r7, #0]
   2b8ea:	2126      	movs	r1, #38	; 0x26
   2b8ec:	5c52      	ldrb	r2, [r2, r1]
   2b8ee:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2b8f0:	4313      	orrs	r3, r2
   2b8f2:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2b8f4:	231d      	movs	r3, #29
   2b8f6:	18fb      	adds	r3, r7, r3
   2b8f8:	2200      	movs	r2, #0
   2b8fa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2b8fc:	683b      	ldr	r3, [r7, #0]
   2b8fe:	685b      	ldr	r3, [r3, #4]
   2b900:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2b902:	68fb      	ldr	r3, [r7, #12]
   2b904:	2b00      	cmp	r3, #0
   2b906:	d01e      	beq.n	2b946 <_usart_set_config+0x14e>
   2b908:	2280      	movs	r2, #128	; 0x80
   2b90a:	0552      	lsls	r2, r2, #21
   2b90c:	4293      	cmp	r3, r2
   2b90e:	d14f      	bne.n	2b9b0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2b910:	683b      	ldr	r3, [r7, #0]
   2b912:	2227      	movs	r2, #39	; 0x27
   2b914:	5c9b      	ldrb	r3, [r3, r2]
   2b916:	2201      	movs	r2, #1
   2b918:	4053      	eors	r3, r2
   2b91a:	b2db      	uxtb	r3, r3
   2b91c:	2b00      	cmp	r3, #0
   2b91e:	d046      	beq.n	2b9ae <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2b920:	683b      	ldr	r3, [r7, #0]
   2b922:	6a1d      	ldr	r5, [r3, #32]
   2b924:	693b      	ldr	r3, [r7, #16]
   2b926:	b2db      	uxtb	r3, r3
   2b928:	0018      	movs	r0, r3
   2b92a:	4b65      	ldr	r3, [pc, #404]	; (2bac0 <_usart_set_config+0x2c8>)
   2b92c:	4798      	blx	r3
   2b92e:	0001      	movs	r1, r0
   2b930:	231d      	movs	r3, #29
   2b932:	18fc      	adds	r4, r7, r3
   2b934:	230a      	movs	r3, #10
   2b936:	18fb      	adds	r3, r7, r3
   2b938:	001a      	movs	r2, r3
   2b93a:	0028      	movs	r0, r5
   2b93c:	4b61      	ldr	r3, [pc, #388]	; (2bac4 <_usart_set_config+0x2cc>)
   2b93e:	4798      	blx	r3
   2b940:	0003      	movs	r3, r0
   2b942:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   2b944:	e033      	b.n	2b9ae <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   2b946:	683b      	ldr	r3, [r7, #0]
   2b948:	2227      	movs	r2, #39	; 0x27
   2b94a:	5c9b      	ldrb	r3, [r3, r2]
   2b94c:	2b00      	cmp	r3, #0
   2b94e:	d014      	beq.n	2b97a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2b950:	683b      	ldr	r3, [r7, #0]
   2b952:	6a18      	ldr	r0, [r3, #32]
   2b954:	683b      	ldr	r3, [r7, #0]
   2b956:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   2b958:	231d      	movs	r3, #29
   2b95a:	18fc      	adds	r4, r7, r3
   2b95c:	231f      	movs	r3, #31
   2b95e:	18fb      	adds	r3, r7, r3
   2b960:	781d      	ldrb	r5, [r3, #0]
   2b962:	230a      	movs	r3, #10
   2b964:	18fa      	adds	r2, r7, r3
   2b966:	231e      	movs	r3, #30
   2b968:	18fb      	adds	r3, r7, r3
   2b96a:	781b      	ldrb	r3, [r3, #0]
   2b96c:	9300      	str	r3, [sp, #0]
   2b96e:	002b      	movs	r3, r5
   2b970:	4d55      	ldr	r5, [pc, #340]	; (2bac8 <_usart_set_config+0x2d0>)
   2b972:	47a8      	blx	r5
   2b974:	0003      	movs	r3, r0
   2b976:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   2b978:	e01a      	b.n	2b9b0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   2b97a:	683b      	ldr	r3, [r7, #0]
   2b97c:	6a1d      	ldr	r5, [r3, #32]
   2b97e:	693b      	ldr	r3, [r7, #16]
   2b980:	b2db      	uxtb	r3, r3
   2b982:	0018      	movs	r0, r3
   2b984:	4b4e      	ldr	r3, [pc, #312]	; (2bac0 <_usart_set_config+0x2c8>)
   2b986:	4798      	blx	r3
				status_code =
   2b988:	231d      	movs	r3, #29
   2b98a:	18fc      	adds	r4, r7, r3
   2b98c:	231f      	movs	r3, #31
   2b98e:	18fb      	adds	r3, r7, r3
   2b990:	7819      	ldrb	r1, [r3, #0]
   2b992:	230a      	movs	r3, #10
   2b994:	18fa      	adds	r2, r7, r3
   2b996:	231e      	movs	r3, #30
   2b998:	18fb      	adds	r3, r7, r3
   2b99a:	781b      	ldrb	r3, [r3, #0]
   2b99c:	9300      	str	r3, [sp, #0]
   2b99e:	000b      	movs	r3, r1
   2b9a0:	0001      	movs	r1, r0
   2b9a2:	0028      	movs	r0, r5
   2b9a4:	4d48      	ldr	r5, [pc, #288]	; (2bac8 <_usart_set_config+0x2d0>)
   2b9a6:	47a8      	blx	r5
   2b9a8:	0003      	movs	r3, r0
   2b9aa:	7023      	strb	r3, [r4, #0]
			break;
   2b9ac:	e000      	b.n	2b9b0 <_usart_set_config+0x1b8>
			break;
   2b9ae:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2b9b0:	231d      	movs	r3, #29
   2b9b2:	18fb      	adds	r3, r7, r3
   2b9b4:	781b      	ldrb	r3, [r3, #0]
   2b9b6:	2b00      	cmp	r3, #0
   2b9b8:	d003      	beq.n	2b9c2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2b9ba:	231d      	movs	r3, #29
   2b9bc:	18fb      	adds	r3, r7, r3
   2b9be:	781b      	ldrb	r3, [r3, #0]
   2b9c0:	e077      	b.n	2bab2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2b9c2:	683b      	ldr	r3, [r7, #0]
   2b9c4:	7e5b      	ldrb	r3, [r3, #25]
   2b9c6:	2b00      	cmp	r3, #0
   2b9c8:	d003      	beq.n	2b9d2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2b9ca:	683b      	ldr	r3, [r7, #0]
   2b9cc:	7e9a      	ldrb	r2, [r3, #26]
   2b9ce:	69bb      	ldr	r3, [r7, #24]
   2b9d0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2b9d2:	687b      	ldr	r3, [r7, #4]
   2b9d4:	0018      	movs	r0, r3
   2b9d6:	4b3d      	ldr	r3, [pc, #244]	; (2bacc <_usart_set_config+0x2d4>)
   2b9d8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2b9da:	230a      	movs	r3, #10
   2b9dc:	18fb      	adds	r3, r7, r3
   2b9de:	881a      	ldrh	r2, [r3, #0]
   2b9e0:	69bb      	ldr	r3, [r7, #24]
   2b9e2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2b9e6:	68fb      	ldr	r3, [r7, #12]
   2b9e8:	4313      	orrs	r3, r2
   2b9ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2b9ec:	683b      	ldr	r3, [r7, #0]
   2b9ee:	2227      	movs	r2, #39	; 0x27
   2b9f0:	5c9b      	ldrb	r3, [r3, r2]
   2b9f2:	2201      	movs	r2, #1
   2b9f4:	4053      	eors	r3, r2
   2b9f6:	b2db      	uxtb	r3, r3
   2b9f8:	2b00      	cmp	r3, #0
   2b9fa:	d003      	beq.n	2ba04 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b9fe:	2204      	movs	r2, #4
   2ba00:	4313      	orrs	r3, r2
   2ba02:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2ba04:	683b      	ldr	r3, [r7, #0]
   2ba06:	7e5b      	ldrb	r3, [r3, #25]
   2ba08:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2ba0a:	683b      	ldr	r3, [r7, #0]
   2ba0c:	7f1b      	ldrb	r3, [r3, #28]
   2ba0e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2ba10:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2ba12:	683b      	ldr	r3, [r7, #0]
   2ba14:	7f5b      	ldrb	r3, [r3, #29]
   2ba16:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2ba18:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2ba1a:	683b      	ldr	r3, [r7, #0]
   2ba1c:	2124      	movs	r1, #36	; 0x24
   2ba1e:	5c5b      	ldrb	r3, [r3, r1]
   2ba20:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2ba22:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   2ba24:	683b      	ldr	r3, [r7, #0]
   2ba26:	2125      	movs	r1, #37	; 0x25
   2ba28:	5c5b      	ldrb	r3, [r3, r1]
   2ba2a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2ba2c:	4313      	orrs	r3, r2
	ctrlb =  
   2ba2e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2ba30:	683b      	ldr	r3, [r7, #0]
   2ba32:	7a9b      	ldrb	r3, [r3, #10]
   2ba34:	001a      	movs	r2, r3
   2ba36:	6a3b      	ldr	r3, [r7, #32]
   2ba38:	4313      	orrs	r3, r2
   2ba3a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2ba3c:	683b      	ldr	r3, [r7, #0]
   2ba3e:	7adb      	ldrb	r3, [r3, #11]
   2ba40:	001a      	movs	r2, r3
   2ba42:	6a3b      	ldr	r3, [r7, #32]
   2ba44:	4313      	orrs	r3, r2
   2ba46:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   2ba48:	683b      	ldr	r3, [r7, #0]
   2ba4a:	891b      	ldrh	r3, [r3, #8]
   2ba4c:	2bff      	cmp	r3, #255	; 0xff
   2ba4e:	d00b      	beq.n	2ba68 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ba52:	2280      	movs	r2, #128	; 0x80
   2ba54:	0452      	lsls	r2, r2, #17
   2ba56:	4313      	orrs	r3, r2
   2ba58:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   2ba5a:	683b      	ldr	r3, [r7, #0]
   2ba5c:	891b      	ldrh	r3, [r3, #8]
   2ba5e:	001a      	movs	r2, r3
   2ba60:	6a3b      	ldr	r3, [r7, #32]
   2ba62:	4313      	orrs	r3, r2
   2ba64:	623b      	str	r3, [r7, #32]
   2ba66:	e008      	b.n	2ba7a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   2ba68:	683b      	ldr	r3, [r7, #0]
   2ba6a:	7edb      	ldrb	r3, [r3, #27]
   2ba6c:	2b00      	cmp	r3, #0
   2ba6e:	d004      	beq.n	2ba7a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ba72:	2280      	movs	r2, #128	; 0x80
   2ba74:	04d2      	lsls	r2, r2, #19
   2ba76:	4313      	orrs	r3, r2
   2ba78:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   2ba7a:	683b      	ldr	r3, [r7, #0]
   2ba7c:	222c      	movs	r2, #44	; 0x2c
   2ba7e:	5c9b      	ldrb	r3, [r3, r2]
   2ba80:	2b00      	cmp	r3, #0
   2ba82:	d103      	bne.n	2ba8c <_usart_set_config+0x294>
   2ba84:	4b12      	ldr	r3, [pc, #72]	; (2bad0 <_usart_set_config+0x2d8>)
   2ba86:	4798      	blx	r3
   2ba88:	1e03      	subs	r3, r0, #0
   2ba8a:	d003      	beq.n	2ba94 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   2ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ba8e:	2280      	movs	r2, #128	; 0x80
   2ba90:	4313      	orrs	r3, r2
   2ba92:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2ba94:	687b      	ldr	r3, [r7, #4]
   2ba96:	0018      	movs	r0, r3
   2ba98:	4b0c      	ldr	r3, [pc, #48]	; (2bacc <_usart_set_config+0x2d4>)
   2ba9a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   2ba9c:	69bb      	ldr	r3, [r7, #24]
   2ba9e:	6a3a      	ldr	r2, [r7, #32]
   2baa0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2baa2:	687b      	ldr	r3, [r7, #4]
   2baa4:	0018      	movs	r0, r3
   2baa6:	4b09      	ldr	r3, [pc, #36]	; (2bacc <_usart_set_config+0x2d4>)
   2baa8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   2baaa:	69bb      	ldr	r3, [r7, #24]
   2baac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2baae:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2bab0:	2300      	movs	r3, #0
}
   2bab2:	0018      	movs	r0, r3
   2bab4:	46bd      	mov	sp, r7
   2bab6:	b00a      	add	sp, #40	; 0x28
   2bab8:	bdb0      	pop	{r4, r5, r7, pc}
   2baba:	46c0      	nop			; (mov r8, r8)
   2babc:	0002a5a1 	.word	0x0002a5a1
   2bac0:	0002cf55 	.word	0x0002cf55
   2bac4:	0002a11b 	.word	0x0002a11b
   2bac8:	0002a199 	.word	0x0002a199
   2bacc:	0002b7d5 	.word	0x0002b7d5
   2bad0:	0002b795 	.word	0x0002b795

0002bad4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2bad4:	b590      	push	{r4, r7, lr}
   2bad6:	b093      	sub	sp, #76	; 0x4c
   2bad8:	af00      	add	r7, sp, #0
   2bada:	60f8      	str	r0, [r7, #12]
   2badc:	60b9      	str	r1, [r7, #8]
   2bade:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2bae0:	233b      	movs	r3, #59	; 0x3b
   2bae2:	18fb      	adds	r3, r7, r3
   2bae4:	2200      	movs	r2, #0
   2bae6:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   2bae8:	68fb      	ldr	r3, [r7, #12]
   2baea:	68ba      	ldr	r2, [r7, #8]
   2baec:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2baee:	68fb      	ldr	r3, [r7, #12]
   2baf0:	681b      	ldr	r3, [r3, #0]
   2baf2:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2baf4:	68fb      	ldr	r3, [r7, #12]
   2baf6:	681b      	ldr	r3, [r3, #0]
   2baf8:	0018      	movs	r0, r3
   2bafa:	4b86      	ldr	r3, [pc, #536]	; (2bd14 <usart_init+0x240>)
   2bafc:	4798      	blx	r3
   2bafe:	0003      	movs	r3, r0
   2bb00:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2bb04:	3302      	adds	r3, #2
   2bb06:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2bb0a:	3314      	adds	r3, #20
   2bb0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2bb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2bb10:	681b      	ldr	r3, [r3, #0]
   2bb12:	2201      	movs	r2, #1
   2bb14:	4013      	ands	r3, r2
   2bb16:	d001      	beq.n	2bb1c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   2bb18:	2305      	movs	r3, #5
   2bb1a:	e0f6      	b.n	2bd0a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2bb1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2bb1e:	681b      	ldr	r3, [r3, #0]
   2bb20:	2202      	movs	r2, #2
   2bb22:	4013      	ands	r3, r2
   2bb24:	d001      	beq.n	2bb2a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   2bb26:	231c      	movs	r3, #28
   2bb28:	e0ef      	b.n	2bd0a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2bb2a:	2201      	movs	r2, #1
   2bb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2bb2e:	409a      	lsls	r2, r3
   2bb30:	0013      	movs	r3, r2
   2bb32:	0019      	movs	r1, r3
   2bb34:	2002      	movs	r0, #2
   2bb36:	4b78      	ldr	r3, [pc, #480]	; (2bd18 <usart_init+0x244>)
   2bb38:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2bb3a:	2324      	movs	r3, #36	; 0x24
   2bb3c:	18fb      	adds	r3, r7, r3
   2bb3e:	0018      	movs	r0, r3
   2bb40:	4b76      	ldr	r3, [pc, #472]	; (2bd1c <usart_init+0x248>)
   2bb42:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   2bb44:	687b      	ldr	r3, [r7, #4]
   2bb46:	222d      	movs	r2, #45	; 0x2d
   2bb48:	5c9a      	ldrb	r2, [r3, r2]
   2bb4a:	2324      	movs	r3, #36	; 0x24
   2bb4c:	18fb      	adds	r3, r7, r3
   2bb4e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2bb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bb52:	b2db      	uxtb	r3, r3
   2bb54:	2224      	movs	r2, #36	; 0x24
   2bb56:	18ba      	adds	r2, r7, r2
   2bb58:	0011      	movs	r1, r2
   2bb5a:	0018      	movs	r0, r3
   2bb5c:	4b70      	ldr	r3, [pc, #448]	; (2bd20 <usart_init+0x24c>)
   2bb5e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2bb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bb62:	b2db      	uxtb	r3, r3
   2bb64:	0018      	movs	r0, r3
   2bb66:	4b6f      	ldr	r3, [pc, #444]	; (2bd24 <usart_init+0x250>)
   2bb68:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2bb6a:	687b      	ldr	r3, [r7, #4]
   2bb6c:	222d      	movs	r2, #45	; 0x2d
   2bb6e:	5c9b      	ldrb	r3, [r3, r2]
   2bb70:	2100      	movs	r1, #0
   2bb72:	0018      	movs	r0, r3
   2bb74:	4b6c      	ldr	r3, [pc, #432]	; (2bd28 <usart_init+0x254>)
   2bb76:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   2bb78:	687b      	ldr	r3, [r7, #4]
   2bb7a:	7ada      	ldrb	r2, [r3, #11]
   2bb7c:	68fb      	ldr	r3, [r7, #12]
   2bb7e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2bb80:	687b      	ldr	r3, [r7, #4]
   2bb82:	2224      	movs	r2, #36	; 0x24
   2bb84:	5c9a      	ldrb	r2, [r3, r2]
   2bb86:	68fb      	ldr	r3, [r7, #12]
   2bb88:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   2bb8a:	687b      	ldr	r3, [r7, #4]
   2bb8c:	2225      	movs	r2, #37	; 0x25
   2bb8e:	5c9a      	ldrb	r2, [r3, r2]
   2bb90:	68fb      	ldr	r3, [r7, #12]
   2bb92:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   2bb94:	687b      	ldr	r3, [r7, #4]
   2bb96:	7eda      	ldrb	r2, [r3, #27]
   2bb98:	68fb      	ldr	r3, [r7, #12]
   2bb9a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   2bb9c:	687b      	ldr	r3, [r7, #4]
   2bb9e:	7f1a      	ldrb	r2, [r3, #28]
   2bba0:	68fb      	ldr	r3, [r7, #12]
   2bba2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   2bba4:	233b      	movs	r3, #59	; 0x3b
   2bba6:	18fc      	adds	r4, r7, r3
   2bba8:	687a      	ldr	r2, [r7, #4]
   2bbaa:	68fb      	ldr	r3, [r7, #12]
   2bbac:	0011      	movs	r1, r2
   2bbae:	0018      	movs	r0, r3
   2bbb0:	4b5e      	ldr	r3, [pc, #376]	; (2bd2c <usart_init+0x258>)
   2bbb2:	4798      	blx	r3
   2bbb4:	0003      	movs	r3, r0
   2bbb6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   2bbb8:	233b      	movs	r3, #59	; 0x3b
   2bbba:	18fb      	adds	r3, r7, r3
   2bbbc:	781b      	ldrb	r3, [r3, #0]
   2bbbe:	2b00      	cmp	r3, #0
   2bbc0:	d003      	beq.n	2bbca <usart_init+0xf6>
		return status_code;
   2bbc2:	233b      	movs	r3, #59	; 0x3b
   2bbc4:	18fb      	adds	r3, r7, r3
   2bbc6:	781b      	ldrb	r3, [r3, #0]
   2bbc8:	e09f      	b.n	2bd0a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2bbca:	2320      	movs	r3, #32
   2bbcc:	18fb      	adds	r3, r7, r3
   2bbce:	0018      	movs	r0, r3
   2bbd0:	4b57      	ldr	r3, [pc, #348]	; (2bd30 <usart_init+0x25c>)
   2bbd2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2bbd4:	2320      	movs	r3, #32
   2bbd6:	18fb      	adds	r3, r7, r3
   2bbd8:	2200      	movs	r2, #0
   2bbda:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2bbdc:	2320      	movs	r3, #32
   2bbde:	18fb      	adds	r3, r7, r3
   2bbe0:	2200      	movs	r2, #0
   2bbe2:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   2bbe4:	687b      	ldr	r3, [r7, #4]
   2bbe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2bbe8:	2310      	movs	r3, #16
   2bbea:	18fb      	adds	r3, r7, r3
   2bbec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2bbee:	687b      	ldr	r3, [r7, #4]
   2bbf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2bbf2:	2310      	movs	r3, #16
   2bbf4:	18fb      	adds	r3, r7, r3
   2bbf6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   2bbf8:	687b      	ldr	r3, [r7, #4]
   2bbfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2bbfc:	2310      	movs	r3, #16
   2bbfe:	18fb      	adds	r3, r7, r3
   2bc00:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2bc02:	687b      	ldr	r3, [r7, #4]
   2bc04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   2bc06:	2310      	movs	r3, #16
   2bc08:	18fb      	adds	r3, r7, r3
   2bc0a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2bc0c:	2347      	movs	r3, #71	; 0x47
   2bc0e:	18fb      	adds	r3, r7, r3
   2bc10:	2200      	movs	r2, #0
   2bc12:	701a      	strb	r2, [r3, #0]
   2bc14:	e02c      	b.n	2bc70 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   2bc16:	2347      	movs	r3, #71	; 0x47
   2bc18:	18fb      	adds	r3, r7, r3
   2bc1a:	781a      	ldrb	r2, [r3, #0]
   2bc1c:	2310      	movs	r3, #16
   2bc1e:	18fb      	adds	r3, r7, r3
   2bc20:	0092      	lsls	r2, r2, #2
   2bc22:	58d3      	ldr	r3, [r2, r3]
   2bc24:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   2bc26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2bc28:	2b00      	cmp	r3, #0
   2bc2a:	d109      	bne.n	2bc40 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2bc2c:	2347      	movs	r3, #71	; 0x47
   2bc2e:	18fb      	adds	r3, r7, r3
   2bc30:	781a      	ldrb	r2, [r3, #0]
   2bc32:	68bb      	ldr	r3, [r7, #8]
   2bc34:	0011      	movs	r1, r2
   2bc36:	0018      	movs	r0, r3
   2bc38:	4b3e      	ldr	r3, [pc, #248]	; (2bd34 <usart_init+0x260>)
   2bc3a:	4798      	blx	r3
   2bc3c:	0003      	movs	r3, r0
   2bc3e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2bc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2bc42:	3301      	adds	r3, #1
   2bc44:	d00d      	beq.n	2bc62 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   2bc46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2bc48:	b2da      	uxtb	r2, r3
   2bc4a:	2320      	movs	r3, #32
   2bc4c:	18fb      	adds	r3, r7, r3
   2bc4e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2bc50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2bc52:	0c1b      	lsrs	r3, r3, #16
   2bc54:	b2db      	uxtb	r3, r3
   2bc56:	2220      	movs	r2, #32
   2bc58:	18ba      	adds	r2, r7, r2
   2bc5a:	0011      	movs	r1, r2
   2bc5c:	0018      	movs	r0, r3
   2bc5e:	4b36      	ldr	r3, [pc, #216]	; (2bd38 <usart_init+0x264>)
   2bc60:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2bc62:	2347      	movs	r3, #71	; 0x47
   2bc64:	18fb      	adds	r3, r7, r3
   2bc66:	781a      	ldrb	r2, [r3, #0]
   2bc68:	2347      	movs	r3, #71	; 0x47
   2bc6a:	18fb      	adds	r3, r7, r3
   2bc6c:	3201      	adds	r2, #1
   2bc6e:	701a      	strb	r2, [r3, #0]
   2bc70:	2347      	movs	r3, #71	; 0x47
   2bc72:	18fb      	adds	r3, r7, r3
   2bc74:	781b      	ldrb	r3, [r3, #0]
   2bc76:	2b03      	cmp	r3, #3
   2bc78:	d9cd      	bls.n	2bc16 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2bc7a:	2300      	movs	r3, #0
   2bc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bc7e:	e00a      	b.n	2bc96 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2bc80:	68fa      	ldr	r2, [r7, #12]
   2bc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bc84:	3302      	adds	r3, #2
   2bc86:	009b      	lsls	r3, r3, #2
   2bc88:	18d3      	adds	r3, r2, r3
   2bc8a:	3304      	adds	r3, #4
   2bc8c:	2200      	movs	r2, #0
   2bc8e:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2bc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bc92:	3301      	adds	r3, #1
   2bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bc98:	2b05      	cmp	r3, #5
   2bc9a:	d9f1      	bls.n	2bc80 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   2bc9c:	68fb      	ldr	r3, [r7, #12]
   2bc9e:	2200      	movs	r2, #0
   2bca0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2bca2:	68fb      	ldr	r3, [r7, #12]
   2bca4:	2200      	movs	r2, #0
   2bca6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   2bca8:	68fb      	ldr	r3, [r7, #12]
   2bcaa:	2200      	movs	r2, #0
   2bcac:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2bcae:	68fb      	ldr	r3, [r7, #12]
   2bcb0:	2200      	movs	r2, #0
   2bcb2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   2bcb4:	68fb      	ldr	r3, [r7, #12]
   2bcb6:	2230      	movs	r2, #48	; 0x30
   2bcb8:	2100      	movs	r1, #0
   2bcba:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2bcbc:	68fb      	ldr	r3, [r7, #12]
   2bcbe:	2231      	movs	r2, #49	; 0x31
   2bcc0:	2100      	movs	r1, #0
   2bcc2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   2bcc4:	68fb      	ldr	r3, [r7, #12]
   2bcc6:	2232      	movs	r2, #50	; 0x32
   2bcc8:	2100      	movs	r1, #0
   2bcca:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2bccc:	68fb      	ldr	r3, [r7, #12]
   2bcce:	2233      	movs	r2, #51	; 0x33
   2bcd0:	2100      	movs	r1, #0
   2bcd2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   2bcd4:	68fb      	ldr	r3, [r7, #12]
   2bcd6:	681b      	ldr	r3, [r3, #0]
   2bcd8:	2227      	movs	r2, #39	; 0x27
   2bcda:	18bc      	adds	r4, r7, r2
   2bcdc:	0018      	movs	r0, r3
   2bcde:	4b0d      	ldr	r3, [pc, #52]	; (2bd14 <usart_init+0x240>)
   2bce0:	4798      	blx	r3
   2bce2:	0003      	movs	r3, r0
   2bce4:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   2bce6:	4a15      	ldr	r2, [pc, #84]	; (2bd3c <usart_init+0x268>)
   2bce8:	2327      	movs	r3, #39	; 0x27
   2bcea:	18fb      	adds	r3, r7, r3
   2bcec:	781b      	ldrb	r3, [r3, #0]
   2bcee:	0011      	movs	r1, r2
   2bcf0:	0018      	movs	r0, r3
   2bcf2:	4b13      	ldr	r3, [pc, #76]	; (2bd40 <usart_init+0x26c>)
   2bcf4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   2bcf6:	2327      	movs	r3, #39	; 0x27
   2bcf8:	18fb      	adds	r3, r7, r3
   2bcfa:	781a      	ldrb	r2, [r3, #0]
   2bcfc:	4b11      	ldr	r3, [pc, #68]	; (2bd44 <usart_init+0x270>)
   2bcfe:	0092      	lsls	r2, r2, #2
   2bd00:	68f9      	ldr	r1, [r7, #12]
   2bd02:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   2bd04:	233b      	movs	r3, #59	; 0x3b
   2bd06:	18fb      	adds	r3, r7, r3
   2bd08:	781b      	ldrb	r3, [r3, #0]
}
   2bd0a:	0018      	movs	r0, r3
   2bd0c:	46bd      	mov	sp, r7
   2bd0e:	b013      	add	sp, #76	; 0x4c
   2bd10:	bd90      	pop	{r4, r7, pc}
   2bd12:	46c0      	nop			; (mov r8, r8)
   2bd14:	0002a5a1 	.word	0x0002a5a1
   2bd18:	0002b711 	.word	0x0002b711
   2bd1c:	0002b6f9 	.word	0x0002b6f9
   2bd20:	0002ce31 	.word	0x0002ce31
   2bd24:	0002ce75 	.word	0x0002ce75
   2bd28:	0002a359 	.word	0x0002a359
   2bd2c:	0002b7f9 	.word	0x0002b7f9
   2bd30:	0002b76d 	.word	0x0002b76d
   2bd34:	0002a3e5 	.word	0x0002a3e5
   2bd38:	0002d191 	.word	0x0002d191
   2bd3c:	0002bfb1 	.word	0x0002bfb1
   2bd40:	0002a605 	.word	0x0002a605
   2bd44:	20005c1c 	.word	0x20005c1c

0002bd48 <system_interrupt_enter_critical_section>:
{
   2bd48:	b580      	push	{r7, lr}
   2bd4a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2bd4c:	4b02      	ldr	r3, [pc, #8]	; (2bd58 <system_interrupt_enter_critical_section+0x10>)
   2bd4e:	4798      	blx	r3
}
   2bd50:	46c0      	nop			; (mov r8, r8)
   2bd52:	46bd      	mov	sp, r7
   2bd54:	bd80      	pop	{r7, pc}
   2bd56:	46c0      	nop			; (mov r8, r8)
   2bd58:	0002919d 	.word	0x0002919d

0002bd5c <system_interrupt_leave_critical_section>:
{
   2bd5c:	b580      	push	{r7, lr}
   2bd5e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2bd60:	4b02      	ldr	r3, [pc, #8]	; (2bd6c <system_interrupt_leave_critical_section+0x10>)
   2bd62:	4798      	blx	r3
}
   2bd64:	46c0      	nop			; (mov r8, r8)
   2bd66:	46bd      	mov	sp, r7
   2bd68:	bd80      	pop	{r7, pc}
   2bd6a:	46c0      	nop			; (mov r8, r8)
   2bd6c:	000291f1 	.word	0x000291f1

0002bd70 <usart_is_syncing>:
{
   2bd70:	b580      	push	{r7, lr}
   2bd72:	b084      	sub	sp, #16
   2bd74:	af00      	add	r7, sp, #0
   2bd76:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2bd78:	687b      	ldr	r3, [r7, #4]
   2bd7a:	681b      	ldr	r3, [r3, #0]
   2bd7c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2bd7e:	68fb      	ldr	r3, [r7, #12]
   2bd80:	69db      	ldr	r3, [r3, #28]
   2bd82:	1e5a      	subs	r2, r3, #1
   2bd84:	4193      	sbcs	r3, r2
   2bd86:	b2db      	uxtb	r3, r3
}
   2bd88:	0018      	movs	r0, r3
   2bd8a:	46bd      	mov	sp, r7
   2bd8c:	b004      	add	sp, #16
   2bd8e:	bd80      	pop	{r7, pc}

0002bd90 <_usart_wait_for_sync>:
{
   2bd90:	b580      	push	{r7, lr}
   2bd92:	b082      	sub	sp, #8
   2bd94:	af00      	add	r7, sp, #0
   2bd96:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2bd98:	46c0      	nop			; (mov r8, r8)
   2bd9a:	687b      	ldr	r3, [r7, #4]
   2bd9c:	0018      	movs	r0, r3
   2bd9e:	4b04      	ldr	r3, [pc, #16]	; (2bdb0 <_usart_wait_for_sync+0x20>)
   2bda0:	4798      	blx	r3
   2bda2:	1e03      	subs	r3, r0, #0
   2bda4:	d1f9      	bne.n	2bd9a <_usart_wait_for_sync+0xa>
}
   2bda6:	46c0      	nop			; (mov r8, r8)
   2bda8:	46bd      	mov	sp, r7
   2bdaa:	b002      	add	sp, #8
   2bdac:	bd80      	pop	{r7, pc}
   2bdae:	46c0      	nop			; (mov r8, r8)
   2bdb0:	0002bd71 	.word	0x0002bd71

0002bdb4 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2bdb4:	b580      	push	{r7, lr}
   2bdb6:	b086      	sub	sp, #24
   2bdb8:	af00      	add	r7, sp, #0
   2bdba:	60f8      	str	r0, [r7, #12]
   2bdbc:	60b9      	str	r1, [r7, #8]
   2bdbe:	1dbb      	adds	r3, r7, #6
   2bdc0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2bdc2:	68fb      	ldr	r3, [r7, #12]
   2bdc4:	681b      	ldr	r3, [r3, #0]
   2bdc6:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2bdc8:	4b0f      	ldr	r3, [pc, #60]	; (2be08 <_usart_write_buffer+0x54>)
   2bdca:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   2bdcc:	68fb      	ldr	r3, [r7, #12]
   2bdce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2bdd0:	b29b      	uxth	r3, r3
   2bdd2:	2b00      	cmp	r3, #0
   2bdd4:	d003      	beq.n	2bdde <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2bdd6:	4b0d      	ldr	r3, [pc, #52]	; (2be0c <_usart_write_buffer+0x58>)
   2bdd8:	4798      	blx	r3
		return STATUS_BUSY;
   2bdda:	2305      	movs	r3, #5
   2bddc:	e010      	b.n	2be00 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2bdde:	68fb      	ldr	r3, [r7, #12]
   2bde0:	1dba      	adds	r2, r7, #6
   2bde2:	8812      	ldrh	r2, [r2, #0]
   2bde4:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   2bde6:	4b09      	ldr	r3, [pc, #36]	; (2be0c <_usart_write_buffer+0x58>)
   2bde8:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   2bdea:	68fb      	ldr	r3, [r7, #12]
   2bdec:	68ba      	ldr	r2, [r7, #8]
   2bdee:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2bdf0:	68fb      	ldr	r3, [r7, #12]
   2bdf2:	2233      	movs	r2, #51	; 0x33
   2bdf4:	2105      	movs	r1, #5
   2bdf6:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   2bdf8:	697b      	ldr	r3, [r7, #20]
   2bdfa:	2201      	movs	r2, #1
   2bdfc:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2bdfe:	2300      	movs	r3, #0
}
   2be00:	0018      	movs	r0, r3
   2be02:	46bd      	mov	sp, r7
   2be04:	b006      	add	sp, #24
   2be06:	bd80      	pop	{r7, pc}
   2be08:	0002bd49 	.word	0x0002bd49
   2be0c:	0002bd5d 	.word	0x0002bd5d

0002be10 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2be10:	b580      	push	{r7, lr}
   2be12:	b086      	sub	sp, #24
   2be14:	af00      	add	r7, sp, #0
   2be16:	60f8      	str	r0, [r7, #12]
   2be18:	60b9      	str	r1, [r7, #8]
   2be1a:	1dbb      	adds	r3, r7, #6
   2be1c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2be1e:	68fb      	ldr	r3, [r7, #12]
   2be20:	681b      	ldr	r3, [r3, #0]
   2be22:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   2be24:	4b16      	ldr	r3, [pc, #88]	; (2be80 <_usart_read_buffer+0x70>)
   2be26:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   2be28:	68fb      	ldr	r3, [r7, #12]
   2be2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2be2c:	b29b      	uxth	r3, r3
   2be2e:	2b00      	cmp	r3, #0
   2be30:	d003      	beq.n	2be3a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2be32:	4b14      	ldr	r3, [pc, #80]	; (2be84 <_usart_read_buffer+0x74>)
   2be34:	4798      	blx	r3
		return STATUS_BUSY;
   2be36:	2305      	movs	r3, #5
   2be38:	e01e      	b.n	2be78 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   2be3a:	68fb      	ldr	r3, [r7, #12]
   2be3c:	1dba      	adds	r2, r7, #6
   2be3e:	8812      	ldrh	r2, [r2, #0]
   2be40:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2be42:	4b10      	ldr	r3, [pc, #64]	; (2be84 <_usart_read_buffer+0x74>)
   2be44:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   2be46:	68fb      	ldr	r3, [r7, #12]
   2be48:	68ba      	ldr	r2, [r7, #8]
   2be4a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   2be4c:	68fb      	ldr	r3, [r7, #12]
   2be4e:	2232      	movs	r2, #50	; 0x32
   2be50:	2105      	movs	r1, #5
   2be52:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   2be54:	697b      	ldr	r3, [r7, #20]
   2be56:	2204      	movs	r2, #4
   2be58:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   2be5a:	68fb      	ldr	r3, [r7, #12]
   2be5c:	7a1b      	ldrb	r3, [r3, #8]
   2be5e:	2b00      	cmp	r3, #0
   2be60:	d002      	beq.n	2be68 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2be62:	697b      	ldr	r3, [r7, #20]
   2be64:	2220      	movs	r2, #32
   2be66:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   2be68:	68fb      	ldr	r3, [r7, #12]
   2be6a:	7a5b      	ldrb	r3, [r3, #9]
   2be6c:	2b00      	cmp	r3, #0
   2be6e:	d002      	beq.n	2be76 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2be70:	697b      	ldr	r3, [r7, #20]
   2be72:	2208      	movs	r2, #8
   2be74:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   2be76:	2300      	movs	r3, #0
}
   2be78:	0018      	movs	r0, r3
   2be7a:	46bd      	mov	sp, r7
   2be7c:	b006      	add	sp, #24
   2be7e:	bd80      	pop	{r7, pc}
   2be80:	0002bd49 	.word	0x0002bd49
   2be84:	0002bd5d 	.word	0x0002bd5d

0002be88 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   2be88:	b580      	push	{r7, lr}
   2be8a:	b084      	sub	sp, #16
   2be8c:	af00      	add	r7, sp, #0
   2be8e:	60f8      	str	r0, [r7, #12]
   2be90:	60b9      	str	r1, [r7, #8]
   2be92:	1dfb      	adds	r3, r7, #7
   2be94:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2be96:	1dfb      	adds	r3, r7, #7
   2be98:	781b      	ldrb	r3, [r3, #0]
   2be9a:	68fa      	ldr	r2, [r7, #12]
   2be9c:	3302      	adds	r3, #2
   2be9e:	009b      	lsls	r3, r3, #2
   2bea0:	18d3      	adds	r3, r2, r3
   2bea2:	3304      	adds	r3, #4
   2bea4:	68ba      	ldr	r2, [r7, #8]
   2bea6:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   2bea8:	68fb      	ldr	r3, [r7, #12]
   2beaa:	2230      	movs	r2, #48	; 0x30
   2beac:	5c9b      	ldrb	r3, [r3, r2]
   2beae:	b25a      	sxtb	r2, r3
   2beb0:	1dfb      	adds	r3, r7, #7
   2beb2:	781b      	ldrb	r3, [r3, #0]
   2beb4:	2101      	movs	r1, #1
   2beb6:	4099      	lsls	r1, r3
   2beb8:	000b      	movs	r3, r1
   2beba:	b25b      	sxtb	r3, r3
   2bebc:	4313      	orrs	r3, r2
   2bebe:	b25b      	sxtb	r3, r3
   2bec0:	b2d9      	uxtb	r1, r3
   2bec2:	68fb      	ldr	r3, [r7, #12]
   2bec4:	2230      	movs	r2, #48	; 0x30
   2bec6:	5499      	strb	r1, [r3, r2]
}
   2bec8:	46c0      	nop			; (mov r8, r8)
   2beca:	46bd      	mov	sp, r7
   2becc:	b004      	add	sp, #16
   2bece:	bd80      	pop	{r7, pc}

0002bed0 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2bed0:	b580      	push	{r7, lr}
   2bed2:	b084      	sub	sp, #16
   2bed4:	af00      	add	r7, sp, #0
   2bed6:	60f8      	str	r0, [r7, #12]
   2bed8:	60b9      	str	r1, [r7, #8]
   2beda:	1dbb      	adds	r3, r7, #6
   2bedc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2bede:	1dbb      	adds	r3, r7, #6
   2bee0:	881b      	ldrh	r3, [r3, #0]
   2bee2:	2b00      	cmp	r3, #0
   2bee4:	d101      	bne.n	2beea <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2bee6:	2317      	movs	r3, #23
   2bee8:	e010      	b.n	2bf0c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   2beea:	68fb      	ldr	r3, [r7, #12]
   2beec:	79db      	ldrb	r3, [r3, #7]
   2beee:	2201      	movs	r2, #1
   2bef0:	4053      	eors	r3, r2
   2bef2:	b2db      	uxtb	r3, r3
   2bef4:	2b00      	cmp	r3, #0
   2bef6:	d001      	beq.n	2befc <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2bef8:	231c      	movs	r3, #28
   2befa:	e007      	b.n	2bf0c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   2befc:	1dbb      	adds	r3, r7, #6
   2befe:	881a      	ldrh	r2, [r3, #0]
   2bf00:	68b9      	ldr	r1, [r7, #8]
   2bf02:	68fb      	ldr	r3, [r7, #12]
   2bf04:	0018      	movs	r0, r3
   2bf06:	4b03      	ldr	r3, [pc, #12]	; (2bf14 <usart_write_buffer_job+0x44>)
   2bf08:	4798      	blx	r3
   2bf0a:	0003      	movs	r3, r0
}
   2bf0c:	0018      	movs	r0, r3
   2bf0e:	46bd      	mov	sp, r7
   2bf10:	b004      	add	sp, #16
   2bf12:	bd80      	pop	{r7, pc}
   2bf14:	0002bdb5 	.word	0x0002bdb5

0002bf18 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2bf18:	b580      	push	{r7, lr}
   2bf1a:	b084      	sub	sp, #16
   2bf1c:	af00      	add	r7, sp, #0
   2bf1e:	60f8      	str	r0, [r7, #12]
   2bf20:	60b9      	str	r1, [r7, #8]
   2bf22:	1dbb      	adds	r3, r7, #6
   2bf24:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   2bf26:	1dbb      	adds	r3, r7, #6
   2bf28:	881b      	ldrh	r3, [r3, #0]
   2bf2a:	2b00      	cmp	r3, #0
   2bf2c:	d101      	bne.n	2bf32 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2bf2e:	2317      	movs	r3, #23
   2bf30:	e010      	b.n	2bf54 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2bf32:	68fb      	ldr	r3, [r7, #12]
   2bf34:	799b      	ldrb	r3, [r3, #6]
   2bf36:	2201      	movs	r2, #1
   2bf38:	4053      	eors	r3, r2
   2bf3a:	b2db      	uxtb	r3, r3
   2bf3c:	2b00      	cmp	r3, #0
   2bf3e:	d001      	beq.n	2bf44 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2bf40:	231c      	movs	r3, #28
   2bf42:	e007      	b.n	2bf54 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   2bf44:	1dbb      	adds	r3, r7, #6
   2bf46:	881a      	ldrh	r2, [r3, #0]
   2bf48:	68b9      	ldr	r1, [r7, #8]
   2bf4a:	68fb      	ldr	r3, [r7, #12]
   2bf4c:	0018      	movs	r0, r3
   2bf4e:	4b03      	ldr	r3, [pc, #12]	; (2bf5c <usart_read_buffer_job+0x44>)
   2bf50:	4798      	blx	r3
   2bf52:	0003      	movs	r3, r0
}
   2bf54:	0018      	movs	r0, r3
   2bf56:	46bd      	mov	sp, r7
   2bf58:	b004      	add	sp, #16
   2bf5a:	bd80      	pop	{r7, pc}
   2bf5c:	0002be11 	.word	0x0002be11

0002bf60 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2bf60:	b580      	push	{r7, lr}
   2bf62:	b084      	sub	sp, #16
   2bf64:	af00      	add	r7, sp, #0
   2bf66:	6078      	str	r0, [r7, #4]
   2bf68:	000a      	movs	r2, r1
   2bf6a:	1cfb      	adds	r3, r7, #3
   2bf6c:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2bf6e:	1cfb      	adds	r3, r7, #3
   2bf70:	781b      	ldrb	r3, [r3, #0]
   2bf72:	2b00      	cmp	r3, #0
   2bf74:	d002      	beq.n	2bf7c <usart_get_job_status+0x1c>
   2bf76:	2b01      	cmp	r3, #1
   2bf78:	d007      	beq.n	2bf8a <usart_get_job_status+0x2a>
   2bf7a:	e00d      	b.n	2bf98 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   2bf7c:	230f      	movs	r3, #15
   2bf7e:	18fb      	adds	r3, r7, r3
   2bf80:	687a      	ldr	r2, [r7, #4]
   2bf82:	2132      	movs	r1, #50	; 0x32
   2bf84:	5c52      	ldrb	r2, [r2, r1]
   2bf86:	701a      	strb	r2, [r3, #0]
			break;
   2bf88:	e00b      	b.n	2bfa2 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   2bf8a:	230f      	movs	r3, #15
   2bf8c:	18fb      	adds	r3, r7, r3
   2bf8e:	687a      	ldr	r2, [r7, #4]
   2bf90:	2133      	movs	r1, #51	; 0x33
   2bf92:	5c52      	ldrb	r2, [r2, r1]
   2bf94:	701a      	strb	r2, [r3, #0]
			break;
   2bf96:	e004      	b.n	2bfa2 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   2bf98:	230f      	movs	r3, #15
   2bf9a:	18fb      	adds	r3, r7, r3
   2bf9c:	2217      	movs	r2, #23
   2bf9e:	701a      	strb	r2, [r3, #0]
			break;
   2bfa0:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2bfa2:	230f      	movs	r3, #15
   2bfa4:	18fb      	adds	r3, r7, r3
   2bfa6:	781b      	ldrb	r3, [r3, #0]
}
   2bfa8:	0018      	movs	r0, r3
   2bfaa:	46bd      	mov	sp, r7
   2bfac:	b004      	add	sp, #16
   2bfae:	bd80      	pop	{r7, pc}

0002bfb0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2bfb0:	b580      	push	{r7, lr}
   2bfb2:	b088      	sub	sp, #32
   2bfb4:	af00      	add	r7, sp, #0
   2bfb6:	0002      	movs	r2, r0
   2bfb8:	1dfb      	adds	r3, r7, #7
   2bfba:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   2bfbc:	1dfb      	adds	r3, r7, #7
   2bfbe:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2bfc0:	4ba3      	ldr	r3, [pc, #652]	; (2c250 <_usart_interrupt_handler+0x2a0>)
   2bfc2:	0092      	lsls	r2, r2, #2
   2bfc4:	58d3      	ldr	r3, [r2, r3]
   2bfc6:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   2bfc8:	69bb      	ldr	r3, [r7, #24]
   2bfca:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   2bfcc:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2bfce:	69bb      	ldr	r3, [r7, #24]
   2bfd0:	0018      	movs	r0, r3
   2bfd2:	4ba0      	ldr	r3, [pc, #640]	; (2c254 <_usart_interrupt_handler+0x2a4>)
   2bfd4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   2bfd6:	697b      	ldr	r3, [r7, #20]
   2bfd8:	7e1b      	ldrb	r3, [r3, #24]
   2bfda:	b2da      	uxtb	r2, r3
   2bfdc:	2312      	movs	r3, #18
   2bfde:	18fb      	adds	r3, r7, r3
   2bfe0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2bfe2:	697b      	ldr	r3, [r7, #20]
   2bfe4:	7d9b      	ldrb	r3, [r3, #22]
   2bfe6:	b2db      	uxtb	r3, r3
   2bfe8:	b29a      	uxth	r2, r3
   2bfea:	2312      	movs	r3, #18
   2bfec:	18fb      	adds	r3, r7, r3
   2bfee:	2112      	movs	r1, #18
   2bff0:	1879      	adds	r1, r7, r1
   2bff2:	8809      	ldrh	r1, [r1, #0]
   2bff4:	400a      	ands	r2, r1
   2bff6:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   2bff8:	69bb      	ldr	r3, [r7, #24]
   2bffa:	2230      	movs	r2, #48	; 0x30
   2bffc:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2bffe:	69ba      	ldr	r2, [r7, #24]
   2c000:	2131      	movs	r1, #49	; 0x31
   2c002:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   2c004:	4013      	ands	r3, r2
   2c006:	b2da      	uxtb	r2, r3
   2c008:	2310      	movs	r3, #16
   2c00a:	18fb      	adds	r3, r7, r3
   2c00c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   2c00e:	2312      	movs	r3, #18
   2c010:	18fb      	adds	r3, r7, r3
   2c012:	881b      	ldrh	r3, [r3, #0]
   2c014:	2201      	movs	r2, #1
   2c016:	4013      	ands	r3, r2
   2c018:	d044      	beq.n	2c0a4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   2c01a:	69bb      	ldr	r3, [r7, #24]
   2c01c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2c01e:	b29b      	uxth	r3, r3
   2c020:	2b00      	cmp	r3, #0
   2c022:	d03c      	beq.n	2c09e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   2c024:	69bb      	ldr	r3, [r7, #24]
   2c026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c028:	781b      	ldrb	r3, [r3, #0]
   2c02a:	b2da      	uxtb	r2, r3
   2c02c:	231c      	movs	r3, #28
   2c02e:	18fb      	adds	r3, r7, r3
   2c030:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   2c032:	69bb      	ldr	r3, [r7, #24]
   2c034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c036:	1c5a      	adds	r2, r3, #1
   2c038:	69bb      	ldr	r3, [r7, #24]
   2c03a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2c03c:	69bb      	ldr	r3, [r7, #24]
   2c03e:	795b      	ldrb	r3, [r3, #5]
   2c040:	2b01      	cmp	r3, #1
   2c042:	d113      	bne.n	2c06c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   2c044:	69bb      	ldr	r3, [r7, #24]
   2c046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c048:	781b      	ldrb	r3, [r3, #0]
   2c04a:	b2db      	uxtb	r3, r3
   2c04c:	021b      	lsls	r3, r3, #8
   2c04e:	b21a      	sxth	r2, r3
   2c050:	231c      	movs	r3, #28
   2c052:	18fb      	adds	r3, r7, r3
   2c054:	2100      	movs	r1, #0
   2c056:	5e5b      	ldrsh	r3, [r3, r1]
   2c058:	4313      	orrs	r3, r2
   2c05a:	b21a      	sxth	r2, r3
   2c05c:	231c      	movs	r3, #28
   2c05e:	18fb      	adds	r3, r7, r3
   2c060:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2c062:	69bb      	ldr	r3, [r7, #24]
   2c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c066:	1c5a      	adds	r2, r3, #1
   2c068:	69bb      	ldr	r3, [r7, #24]
   2c06a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   2c06c:	231c      	movs	r3, #28
   2c06e:	18fb      	adds	r3, r7, r3
   2c070:	881b      	ldrh	r3, [r3, #0]
   2c072:	05db      	lsls	r3, r3, #23
   2c074:	0ddb      	lsrs	r3, r3, #23
   2c076:	b29a      	uxth	r2, r3
   2c078:	697b      	ldr	r3, [r7, #20]
   2c07a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   2c07c:	69bb      	ldr	r3, [r7, #24]
   2c07e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2c080:	b29b      	uxth	r3, r3
   2c082:	3b01      	subs	r3, #1
   2c084:	b29b      	uxth	r3, r3
   2c086:	69ba      	ldr	r2, [r7, #24]
   2c088:	1c19      	adds	r1, r3, #0
   2c08a:	85d1      	strh	r1, [r2, #46]	; 0x2e
   2c08c:	2b00      	cmp	r3, #0
   2c08e:	d109      	bne.n	2c0a4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2c090:	697b      	ldr	r3, [r7, #20]
   2c092:	2201      	movs	r2, #1
   2c094:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   2c096:	697b      	ldr	r3, [r7, #20]
   2c098:	2202      	movs	r2, #2
   2c09a:	759a      	strb	r2, [r3, #22]
   2c09c:	e002      	b.n	2c0a4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2c09e:	697b      	ldr	r3, [r7, #20]
   2c0a0:	2201      	movs	r2, #1
   2c0a2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   2c0a4:	2312      	movs	r3, #18
   2c0a6:	18fb      	adds	r3, r7, r3
   2c0a8:	881b      	ldrh	r3, [r3, #0]
   2c0aa:	2202      	movs	r2, #2
   2c0ac:	4013      	ands	r3, r2
   2c0ae:	d011      	beq.n	2c0d4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2c0b0:	697b      	ldr	r3, [r7, #20]
   2c0b2:	2202      	movs	r2, #2
   2c0b4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   2c0b6:	69bb      	ldr	r3, [r7, #24]
   2c0b8:	2233      	movs	r2, #51	; 0x33
   2c0ba:	2100      	movs	r1, #0
   2c0bc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2c0be:	2310      	movs	r3, #16
   2c0c0:	18fb      	adds	r3, r7, r3
   2c0c2:	881b      	ldrh	r3, [r3, #0]
   2c0c4:	2201      	movs	r2, #1
   2c0c6:	4013      	ands	r3, r2
   2c0c8:	d004      	beq.n	2c0d4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   2c0ca:	69bb      	ldr	r3, [r7, #24]
   2c0cc:	68db      	ldr	r3, [r3, #12]
   2c0ce:	69ba      	ldr	r2, [r7, #24]
   2c0d0:	0010      	movs	r0, r2
   2c0d2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   2c0d4:	2312      	movs	r3, #18
   2c0d6:	18fb      	adds	r3, r7, r3
   2c0d8:	881b      	ldrh	r3, [r3, #0]
   2c0da:	2204      	movs	r2, #4
   2c0dc:	4013      	ands	r3, r2
   2c0de:	d100      	bne.n	2c0e2 <_usart_interrupt_handler+0x132>
   2c0e0:	e0bd      	b.n	2c25e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   2c0e2:	69bb      	ldr	r3, [r7, #24]
   2c0e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2c0e6:	b29b      	uxth	r3, r3
   2c0e8:	2b00      	cmp	r3, #0
   2c0ea:	d100      	bne.n	2c0ee <_usart_interrupt_handler+0x13e>
   2c0ec:	e0b4      	b.n	2c258 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   2c0ee:	697b      	ldr	r3, [r7, #20]
   2c0f0:	8b5b      	ldrh	r3, [r3, #26]
   2c0f2:	b29b      	uxth	r3, r3
   2c0f4:	b2da      	uxtb	r2, r3
   2c0f6:	231f      	movs	r3, #31
   2c0f8:	18fb      	adds	r3, r7, r3
   2c0fa:	213f      	movs	r1, #63	; 0x3f
   2c0fc:	400a      	ands	r2, r1
   2c0fe:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   2c100:	231f      	movs	r3, #31
   2c102:	18fb      	adds	r3, r7, r3
   2c104:	781b      	ldrb	r3, [r3, #0]
   2c106:	2208      	movs	r2, #8
   2c108:	4013      	ands	r3, r2
   2c10a:	d007      	beq.n	2c11c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   2c10c:	231f      	movs	r3, #31
   2c10e:	18fb      	adds	r3, r7, r3
   2c110:	221f      	movs	r2, #31
   2c112:	18ba      	adds	r2, r7, r2
   2c114:	7812      	ldrb	r2, [r2, #0]
   2c116:	2108      	movs	r1, #8
   2c118:	438a      	bics	r2, r1
   2c11a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   2c11c:	231f      	movs	r3, #31
   2c11e:	18fb      	adds	r3, r7, r3
   2c120:	781b      	ldrb	r3, [r3, #0]
   2c122:	2b00      	cmp	r3, #0
   2c124:	d050      	beq.n	2c1c8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   2c126:	231f      	movs	r3, #31
   2c128:	18fb      	adds	r3, r7, r3
   2c12a:	781b      	ldrb	r3, [r3, #0]
   2c12c:	2202      	movs	r2, #2
   2c12e:	4013      	ands	r3, r2
   2c130:	d007      	beq.n	2c142 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   2c132:	69bb      	ldr	r3, [r7, #24]
   2c134:	2232      	movs	r2, #50	; 0x32
   2c136:	211a      	movs	r1, #26
   2c138:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   2c13a:	697b      	ldr	r3, [r7, #20]
   2c13c:	2202      	movs	r2, #2
   2c13e:	835a      	strh	r2, [r3, #26]
   2c140:	e036      	b.n	2c1b0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2c142:	231f      	movs	r3, #31
   2c144:	18fb      	adds	r3, r7, r3
   2c146:	781b      	ldrb	r3, [r3, #0]
   2c148:	2204      	movs	r2, #4
   2c14a:	4013      	ands	r3, r2
   2c14c:	d007      	beq.n	2c15e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2c14e:	69bb      	ldr	r3, [r7, #24]
   2c150:	2232      	movs	r2, #50	; 0x32
   2c152:	211e      	movs	r1, #30
   2c154:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   2c156:	697b      	ldr	r3, [r7, #20]
   2c158:	2204      	movs	r2, #4
   2c15a:	835a      	strh	r2, [r3, #26]
   2c15c:	e028      	b.n	2c1b0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2c15e:	231f      	movs	r3, #31
   2c160:	18fb      	adds	r3, r7, r3
   2c162:	781b      	ldrb	r3, [r3, #0]
   2c164:	2201      	movs	r2, #1
   2c166:	4013      	ands	r3, r2
   2c168:	d007      	beq.n	2c17a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   2c16a:	69bb      	ldr	r3, [r7, #24]
   2c16c:	2232      	movs	r2, #50	; 0x32
   2c16e:	2113      	movs	r1, #19
   2c170:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2c172:	697b      	ldr	r3, [r7, #20]
   2c174:	2201      	movs	r2, #1
   2c176:	835a      	strh	r2, [r3, #26]
   2c178:	e01a      	b.n	2c1b0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2c17a:	231f      	movs	r3, #31
   2c17c:	18fb      	adds	r3, r7, r3
   2c17e:	781b      	ldrb	r3, [r3, #0]
   2c180:	2210      	movs	r2, #16
   2c182:	4013      	ands	r3, r2
   2c184:	d007      	beq.n	2c196 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2c186:	69bb      	ldr	r3, [r7, #24]
   2c188:	2232      	movs	r2, #50	; 0x32
   2c18a:	2142      	movs	r1, #66	; 0x42
   2c18c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2c18e:	697b      	ldr	r3, [r7, #20]
   2c190:	2210      	movs	r2, #16
   2c192:	835a      	strh	r2, [r3, #26]
   2c194:	e00c      	b.n	2c1b0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2c196:	231f      	movs	r3, #31
   2c198:	18fb      	adds	r3, r7, r3
   2c19a:	781b      	ldrb	r3, [r3, #0]
   2c19c:	2220      	movs	r2, #32
   2c19e:	4013      	ands	r3, r2
   2c1a0:	d006      	beq.n	2c1b0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2c1a2:	69bb      	ldr	r3, [r7, #24]
   2c1a4:	2232      	movs	r2, #50	; 0x32
   2c1a6:	2141      	movs	r1, #65	; 0x41
   2c1a8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2c1aa:	697b      	ldr	r3, [r7, #20]
   2c1ac:	2220      	movs	r2, #32
   2c1ae:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2c1b0:	2310      	movs	r3, #16
   2c1b2:	18fb      	adds	r3, r7, r3
   2c1b4:	881b      	ldrh	r3, [r3, #0]
   2c1b6:	2204      	movs	r2, #4
   2c1b8:	4013      	ands	r3, r2
				if (callback_status
   2c1ba:	d050      	beq.n	2c25e <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2c1bc:	69bb      	ldr	r3, [r7, #24]
   2c1be:	695b      	ldr	r3, [r3, #20]
   2c1c0:	69ba      	ldr	r2, [r7, #24]
   2c1c2:	0010      	movs	r0, r2
   2c1c4:	4798      	blx	r3
   2c1c6:	e04a      	b.n	2c25e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   2c1c8:	697b      	ldr	r3, [r7, #20]
   2c1ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2c1cc:	b29a      	uxth	r2, r3
   2c1ce:	230e      	movs	r3, #14
   2c1d0:	18fb      	adds	r3, r7, r3
   2c1d2:	05d2      	lsls	r2, r2, #23
   2c1d4:	0dd2      	lsrs	r2, r2, #23
   2c1d6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   2c1d8:	69bb      	ldr	r3, [r7, #24]
   2c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c1dc:	220e      	movs	r2, #14
   2c1de:	18ba      	adds	r2, r7, r2
   2c1e0:	8812      	ldrh	r2, [r2, #0]
   2c1e2:	b2d2      	uxtb	r2, r2
   2c1e4:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2c1e6:	69bb      	ldr	r3, [r7, #24]
   2c1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c1ea:	1c5a      	adds	r2, r3, #1
   2c1ec:	69bb      	ldr	r3, [r7, #24]
   2c1ee:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2c1f0:	69bb      	ldr	r3, [r7, #24]
   2c1f2:	795b      	ldrb	r3, [r3, #5]
   2c1f4:	2b01      	cmp	r3, #1
   2c1f6:	d10d      	bne.n	2c214 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   2c1f8:	69bb      	ldr	r3, [r7, #24]
   2c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c1fc:	220e      	movs	r2, #14
   2c1fe:	18ba      	adds	r2, r7, r2
   2c200:	8812      	ldrh	r2, [r2, #0]
   2c202:	0a12      	lsrs	r2, r2, #8
   2c204:	b292      	uxth	r2, r2
   2c206:	b2d2      	uxtb	r2, r2
   2c208:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2c20a:	69bb      	ldr	r3, [r7, #24]
   2c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c20e:	1c5a      	adds	r2, r3, #1
   2c210:	69bb      	ldr	r3, [r7, #24]
   2c212:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2c214:	69bb      	ldr	r3, [r7, #24]
   2c216:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2c218:	b29b      	uxth	r3, r3
   2c21a:	3b01      	subs	r3, #1
   2c21c:	b29b      	uxth	r3, r3
   2c21e:	69ba      	ldr	r2, [r7, #24]
   2c220:	1c19      	adds	r1, r3, #0
   2c222:	8591      	strh	r1, [r2, #44]	; 0x2c
   2c224:	2b00      	cmp	r3, #0
   2c226:	d11a      	bne.n	2c25e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2c228:	697b      	ldr	r3, [r7, #20]
   2c22a:	2204      	movs	r2, #4
   2c22c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2c22e:	69bb      	ldr	r3, [r7, #24]
   2c230:	2232      	movs	r2, #50	; 0x32
   2c232:	2100      	movs	r1, #0
   2c234:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2c236:	2310      	movs	r3, #16
   2c238:	18fb      	adds	r3, r7, r3
   2c23a:	881b      	ldrh	r3, [r3, #0]
   2c23c:	2202      	movs	r2, #2
   2c23e:	4013      	ands	r3, r2
					if (callback_status
   2c240:	d00d      	beq.n	2c25e <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2c242:	69bb      	ldr	r3, [r7, #24]
   2c244:	691b      	ldr	r3, [r3, #16]
   2c246:	69ba      	ldr	r2, [r7, #24]
   2c248:	0010      	movs	r0, r2
   2c24a:	4798      	blx	r3
   2c24c:	e007      	b.n	2c25e <_usart_interrupt_handler+0x2ae>
   2c24e:	46c0      	nop			; (mov r8, r8)
   2c250:	20005c1c 	.word	0x20005c1c
   2c254:	0002bd91 	.word	0x0002bd91
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2c258:	697b      	ldr	r3, [r7, #20]
   2c25a:	2204      	movs	r2, #4
   2c25c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2c25e:	2312      	movs	r3, #18
   2c260:	18fb      	adds	r3, r7, r3
   2c262:	881b      	ldrh	r3, [r3, #0]
   2c264:	2210      	movs	r2, #16
   2c266:	4013      	ands	r3, r2
   2c268:	d010      	beq.n	2c28c <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2c26a:	697b      	ldr	r3, [r7, #20]
   2c26c:	2210      	movs	r2, #16
   2c26e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2c270:	697b      	ldr	r3, [r7, #20]
   2c272:	2210      	movs	r2, #16
   2c274:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2c276:	2310      	movs	r3, #16
   2c278:	18fb      	adds	r3, r7, r3
   2c27a:	881b      	ldrh	r3, [r3, #0]
   2c27c:	2210      	movs	r2, #16
   2c27e:	4013      	ands	r3, r2
   2c280:	d004      	beq.n	2c28c <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2c282:	69bb      	ldr	r3, [r7, #24]
   2c284:	69db      	ldr	r3, [r3, #28]
   2c286:	69ba      	ldr	r2, [r7, #24]
   2c288:	0010      	movs	r0, r2
   2c28a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2c28c:	2312      	movs	r3, #18
   2c28e:	18fb      	adds	r3, r7, r3
   2c290:	881b      	ldrh	r3, [r3, #0]
   2c292:	2220      	movs	r2, #32
   2c294:	4013      	ands	r3, r2
   2c296:	d010      	beq.n	2c2ba <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2c298:	697b      	ldr	r3, [r7, #20]
   2c29a:	2220      	movs	r2, #32
   2c29c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2c29e:	697b      	ldr	r3, [r7, #20]
   2c2a0:	2220      	movs	r2, #32
   2c2a2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2c2a4:	2310      	movs	r3, #16
   2c2a6:	18fb      	adds	r3, r7, r3
   2c2a8:	881b      	ldrh	r3, [r3, #0]
   2c2aa:	2208      	movs	r2, #8
   2c2ac:	4013      	ands	r3, r2
   2c2ae:	d004      	beq.n	2c2ba <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2c2b0:	69bb      	ldr	r3, [r7, #24]
   2c2b2:	699b      	ldr	r3, [r3, #24]
   2c2b4:	69ba      	ldr	r2, [r7, #24]
   2c2b6:	0010      	movs	r0, r2
   2c2b8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2c2ba:	2312      	movs	r3, #18
   2c2bc:	18fb      	adds	r3, r7, r3
   2c2be:	881b      	ldrh	r3, [r3, #0]
   2c2c0:	2208      	movs	r2, #8
   2c2c2:	4013      	ands	r3, r2
   2c2c4:	d010      	beq.n	2c2e8 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2c2c6:	697b      	ldr	r3, [r7, #20]
   2c2c8:	2208      	movs	r2, #8
   2c2ca:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2c2cc:	697b      	ldr	r3, [r7, #20]
   2c2ce:	2208      	movs	r2, #8
   2c2d0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2c2d2:	2310      	movs	r3, #16
   2c2d4:	18fb      	adds	r3, r7, r3
   2c2d6:	881b      	ldrh	r3, [r3, #0]
   2c2d8:	2220      	movs	r2, #32
   2c2da:	4013      	ands	r3, r2
   2c2dc:	d004      	beq.n	2c2e8 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2c2de:	69bb      	ldr	r3, [r7, #24]
   2c2e0:	6a1b      	ldr	r3, [r3, #32]
   2c2e2:	69ba      	ldr	r2, [r7, #24]
   2c2e4:	0010      	movs	r0, r2
   2c2e6:	4798      	blx	r3
		}
	}
#endif
}
   2c2e8:	46c0      	nop			; (mov r8, r8)
   2c2ea:	46bd      	mov	sp, r7
   2c2ec:	b008      	add	sp, #32
   2c2ee:	bd80      	pop	{r7, pc}

0002c2f0 <system_gclk_gen_get_config_defaults>:
{
   2c2f0:	b580      	push	{r7, lr}
   2c2f2:	b082      	sub	sp, #8
   2c2f4:	af00      	add	r7, sp, #0
   2c2f6:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2c2f8:	687b      	ldr	r3, [r7, #4]
   2c2fa:	2201      	movs	r2, #1
   2c2fc:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2c2fe:	687b      	ldr	r3, [r7, #4]
   2c300:	2200      	movs	r2, #0
   2c302:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2c304:	687b      	ldr	r3, [r7, #4]
   2c306:	2206      	movs	r2, #6
   2c308:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2c30a:	687b      	ldr	r3, [r7, #4]
   2c30c:	2200      	movs	r2, #0
   2c30e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2c310:	687b      	ldr	r3, [r7, #4]
   2c312:	2200      	movs	r2, #0
   2c314:	725a      	strb	r2, [r3, #9]
}
   2c316:	46c0      	nop			; (mov r8, r8)
   2c318:	46bd      	mov	sp, r7
   2c31a:	b002      	add	sp, #8
   2c31c:	bd80      	pop	{r7, pc}

0002c31e <system_gclk_chan_get_config_defaults>:
{
   2c31e:	b580      	push	{r7, lr}
   2c320:	b082      	sub	sp, #8
   2c322:	af00      	add	r7, sp, #0
   2c324:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2c326:	687b      	ldr	r3, [r7, #4]
   2c328:	2200      	movs	r2, #0
   2c32a:	701a      	strb	r2, [r3, #0]
}
   2c32c:	46c0      	nop			; (mov r8, r8)
   2c32e:	46bd      	mov	sp, r7
   2c330:	b002      	add	sp, #8
   2c332:	bd80      	pop	{r7, pc}

0002c334 <system_clock_source_osc8m_get_config_defaults>:
{
   2c334:	b580      	push	{r7, lr}
   2c336:	b082      	sub	sp, #8
   2c338:	af00      	add	r7, sp, #0
   2c33a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2c33c:	687b      	ldr	r3, [r7, #4]
   2c33e:	2203      	movs	r2, #3
   2c340:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2c342:	687b      	ldr	r3, [r7, #4]
   2c344:	2200      	movs	r2, #0
   2c346:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2c348:	687b      	ldr	r3, [r7, #4]
   2c34a:	2201      	movs	r2, #1
   2c34c:	709a      	strb	r2, [r3, #2]
}
   2c34e:	46c0      	nop			; (mov r8, r8)
   2c350:	46bd      	mov	sp, r7
   2c352:	b002      	add	sp, #8
   2c354:	bd80      	pop	{r7, pc}
	...

0002c358 <system_cpu_clock_set_divider>:
{
   2c358:	b580      	push	{r7, lr}
   2c35a:	b082      	sub	sp, #8
   2c35c:	af00      	add	r7, sp, #0
   2c35e:	0002      	movs	r2, r0
   2c360:	1dfb      	adds	r3, r7, #7
   2c362:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2c364:	4a03      	ldr	r2, [pc, #12]	; (2c374 <system_cpu_clock_set_divider+0x1c>)
   2c366:	1dfb      	adds	r3, r7, #7
   2c368:	781b      	ldrb	r3, [r3, #0]
   2c36a:	7213      	strb	r3, [r2, #8]
}
   2c36c:	46c0      	nop			; (mov r8, r8)
   2c36e:	46bd      	mov	sp, r7
   2c370:	b002      	add	sp, #8
   2c372:	bd80      	pop	{r7, pc}
   2c374:	40000400 	.word	0x40000400

0002c378 <system_apb_clock_set_divider>:
{
   2c378:	b580      	push	{r7, lr}
   2c37a:	b082      	sub	sp, #8
   2c37c:	af00      	add	r7, sp, #0
   2c37e:	0002      	movs	r2, r0
   2c380:	1dfb      	adds	r3, r7, #7
   2c382:	701a      	strb	r2, [r3, #0]
   2c384:	1dbb      	adds	r3, r7, #6
   2c386:	1c0a      	adds	r2, r1, #0
   2c388:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2c38a:	1dfb      	adds	r3, r7, #7
   2c38c:	781b      	ldrb	r3, [r3, #0]
   2c38e:	2b01      	cmp	r3, #1
   2c390:	d008      	beq.n	2c3a4 <system_apb_clock_set_divider+0x2c>
   2c392:	2b02      	cmp	r3, #2
   2c394:	d00b      	beq.n	2c3ae <system_apb_clock_set_divider+0x36>
   2c396:	2b00      	cmp	r3, #0
   2c398:	d10e      	bne.n	2c3b8 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2c39a:	4a0b      	ldr	r2, [pc, #44]	; (2c3c8 <system_apb_clock_set_divider+0x50>)
   2c39c:	1dbb      	adds	r3, r7, #6
   2c39e:	781b      	ldrb	r3, [r3, #0]
   2c3a0:	7253      	strb	r3, [r2, #9]
			break;
   2c3a2:	e00b      	b.n	2c3bc <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2c3a4:	4a08      	ldr	r2, [pc, #32]	; (2c3c8 <system_apb_clock_set_divider+0x50>)
   2c3a6:	1dbb      	adds	r3, r7, #6
   2c3a8:	781b      	ldrb	r3, [r3, #0]
   2c3aa:	7293      	strb	r3, [r2, #10]
			break;
   2c3ac:	e006      	b.n	2c3bc <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2c3ae:	4a06      	ldr	r2, [pc, #24]	; (2c3c8 <system_apb_clock_set_divider+0x50>)
   2c3b0:	1dbb      	adds	r3, r7, #6
   2c3b2:	781b      	ldrb	r3, [r3, #0]
   2c3b4:	72d3      	strb	r3, [r2, #11]
			break;
   2c3b6:	e001      	b.n	2c3bc <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2c3b8:	2317      	movs	r3, #23
   2c3ba:	e000      	b.n	2c3be <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2c3bc:	2300      	movs	r3, #0
}
   2c3be:	0018      	movs	r0, r3
   2c3c0:	46bd      	mov	sp, r7
   2c3c2:	b002      	add	sp, #8
   2c3c4:	bd80      	pop	{r7, pc}
   2c3c6:	46c0      	nop			; (mov r8, r8)
   2c3c8:	40000400 	.word	0x40000400

0002c3cc <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2c3cc:	b580      	push	{r7, lr}
   2c3ce:	b082      	sub	sp, #8
   2c3d0:	af00      	add	r7, sp, #0
   2c3d2:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2c3d4:	687b      	ldr	r3, [r7, #4]
   2c3d6:	2201      	movs	r2, #1
   2c3d8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2c3da:	687b      	ldr	r3, [r7, #4]
   2c3dc:	2200      	movs	r2, #0
   2c3de:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2c3e0:	687b      	ldr	r3, [r7, #4]
   2c3e2:	2200      	movs	r2, #0
   2c3e4:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2c3e6:	687b      	ldr	r3, [r7, #4]
   2c3e8:	2200      	movs	r2, #0
   2c3ea:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2c3ec:	687b      	ldr	r3, [r7, #4]
   2c3ee:	2200      	movs	r2, #0
   2c3f0:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2c3f2:	687b      	ldr	r3, [r7, #4]
   2c3f4:	4a0a      	ldr	r2, [pc, #40]	; (2c420 <system_clock_source_dpll_get_config_defaults+0x54>)
   2c3f6:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2c3f8:	687b      	ldr	r3, [r7, #4]
   2c3fa:	2280      	movs	r2, #128	; 0x80
   2c3fc:	0212      	lsls	r2, r2, #8
   2c3fe:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2c400:	687b      	ldr	r3, [r7, #4]
   2c402:	2201      	movs	r2, #1
   2c404:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2c406:	687b      	ldr	r3, [r7, #4]
   2c408:	2200      	movs	r2, #0
   2c40a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2c40c:	687b      	ldr	r3, [r7, #4]
   2c40e:	2200      	movs	r2, #0
   2c410:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2c412:	687b      	ldr	r3, [r7, #4]
   2c414:	2200      	movs	r2, #0
   2c416:	749a      	strb	r2, [r3, #18]
};
   2c418:	46c0      	nop			; (mov r8, r8)
   2c41a:	46bd      	mov	sp, r7
   2c41c:	b002      	add	sp, #8
   2c41e:	bd80      	pop	{r7, pc}
   2c420:	02dc6c00 	.word	0x02dc6c00

0002c424 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2c424:	b580      	push	{r7, lr}
   2c426:	b082      	sub	sp, #8
   2c428:	af00      	add	r7, sp, #0
   2c42a:	0002      	movs	r2, r0
   2c42c:	1dfb      	adds	r3, r7, #7
   2c42e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2c430:	4a08      	ldr	r2, [pc, #32]	; (2c454 <system_flash_set_waitstates+0x30>)
   2c432:	1dfb      	adds	r3, r7, #7
   2c434:	781b      	ldrb	r3, [r3, #0]
   2c436:	210f      	movs	r1, #15
   2c438:	400b      	ands	r3, r1
   2c43a:	b2d9      	uxtb	r1, r3
   2c43c:	6853      	ldr	r3, [r2, #4]
   2c43e:	200f      	movs	r0, #15
   2c440:	4001      	ands	r1, r0
   2c442:	0049      	lsls	r1, r1, #1
   2c444:	201e      	movs	r0, #30
   2c446:	4383      	bics	r3, r0
   2c448:	430b      	orrs	r3, r1
   2c44a:	6053      	str	r3, [r2, #4]
}
   2c44c:	46c0      	nop			; (mov r8, r8)
   2c44e:	46bd      	mov	sp, r7
   2c450:	b002      	add	sp, #8
   2c452:	bd80      	pop	{r7, pc}
   2c454:	41004000 	.word	0x41004000

0002c458 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2c458:	b580      	push	{r7, lr}
   2c45a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2c45c:	46c0      	nop			; (mov r8, r8)
   2c45e:	4b04      	ldr	r3, [pc, #16]	; (2c470 <_system_dfll_wait_for_sync+0x18>)
   2c460:	68db      	ldr	r3, [r3, #12]
   2c462:	2210      	movs	r2, #16
   2c464:	4013      	ands	r3, r2
   2c466:	d0fa      	beq.n	2c45e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2c468:	46c0      	nop			; (mov r8, r8)
   2c46a:	46bd      	mov	sp, r7
   2c46c:	bd80      	pop	{r7, pc}
   2c46e:	46c0      	nop			; (mov r8, r8)
   2c470:	40000800 	.word	0x40000800

0002c474 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2c474:	b580      	push	{r7, lr}
   2c476:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2c478:	4b0c      	ldr	r3, [pc, #48]	; (2c4ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2c47a:	2202      	movs	r2, #2
   2c47c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2c47e:	4b0c      	ldr	r3, [pc, #48]	; (2c4b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2c480:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2c482:	4a0a      	ldr	r2, [pc, #40]	; (2c4ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2c484:	4b0b      	ldr	r3, [pc, #44]	; (2c4b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2c486:	689b      	ldr	r3, [r3, #8]
   2c488:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2c48a:	4a08      	ldr	r2, [pc, #32]	; (2c4ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2c48c:	4b09      	ldr	r3, [pc, #36]	; (2c4b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2c48e:	685b      	ldr	r3, [r3, #4]
   2c490:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2c492:	4b06      	ldr	r3, [pc, #24]	; (2c4ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2c494:	2200      	movs	r2, #0
   2c496:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2c498:	4b05      	ldr	r3, [pc, #20]	; (2c4b0 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2c49a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2c49c:	4a03      	ldr	r2, [pc, #12]	; (2c4ac <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2c49e:	4b05      	ldr	r3, [pc, #20]	; (2c4b4 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2c4a0:	681b      	ldr	r3, [r3, #0]
   2c4a2:	b29b      	uxth	r3, r3
   2c4a4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2c4a6:	46c0      	nop			; (mov r8, r8)
   2c4a8:	46bd      	mov	sp, r7
   2c4aa:	bd80      	pop	{r7, pc}
   2c4ac:	40000800 	.word	0x40000800
   2c4b0:	0002c459 	.word	0x0002c459
   2c4b4:	200041fc 	.word	0x200041fc

0002c4b8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2c4b8:	b580      	push	{r7, lr}
   2c4ba:	b082      	sub	sp, #8
   2c4bc:	af00      	add	r7, sp, #0
   2c4be:	0002      	movs	r2, r0
   2c4c0:	1dfb      	adds	r3, r7, #7
   2c4c2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2c4c4:	1dfb      	adds	r3, r7, #7
   2c4c6:	781b      	ldrb	r3, [r3, #0]
   2c4c8:	2b08      	cmp	r3, #8
   2c4ca:	d841      	bhi.n	2c550 <system_clock_source_get_hz+0x98>
   2c4cc:	009a      	lsls	r2, r3, #2
   2c4ce:	4b23      	ldr	r3, [pc, #140]	; (2c55c <system_clock_source_get_hz+0xa4>)
   2c4d0:	18d3      	adds	r3, r2, r3
   2c4d2:	681b      	ldr	r3, [r3, #0]
   2c4d4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2c4d6:	4b22      	ldr	r3, [pc, #136]	; (2c560 <system_clock_source_get_hz+0xa8>)
   2c4d8:	691b      	ldr	r3, [r3, #16]
   2c4da:	e03a      	b.n	2c552 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2c4dc:	4b21      	ldr	r3, [pc, #132]	; (2c564 <system_clock_source_get_hz+0xac>)
   2c4de:	6a1b      	ldr	r3, [r3, #32]
   2c4e0:	059b      	lsls	r3, r3, #22
   2c4e2:	0f9b      	lsrs	r3, r3, #30
   2c4e4:	b2db      	uxtb	r3, r3
   2c4e6:	001a      	movs	r2, r3
   2c4e8:	4b1f      	ldr	r3, [pc, #124]	; (2c568 <system_clock_source_get_hz+0xb0>)
   2c4ea:	40d3      	lsrs	r3, r2
   2c4ec:	e031      	b.n	2c552 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2c4ee:	2380      	movs	r3, #128	; 0x80
   2c4f0:	021b      	lsls	r3, r3, #8
   2c4f2:	e02e      	b.n	2c552 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2c4f4:	2380      	movs	r3, #128	; 0x80
   2c4f6:	021b      	lsls	r3, r3, #8
   2c4f8:	e02b      	b.n	2c552 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2c4fa:	4b19      	ldr	r3, [pc, #100]	; (2c560 <system_clock_source_get_hz+0xa8>)
   2c4fc:	695b      	ldr	r3, [r3, #20]
   2c4fe:	e028      	b.n	2c552 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2c500:	4b17      	ldr	r3, [pc, #92]	; (2c560 <system_clock_source_get_hz+0xa8>)
   2c502:	681b      	ldr	r3, [r3, #0]
   2c504:	2202      	movs	r2, #2
   2c506:	4013      	ands	r3, r2
   2c508:	d101      	bne.n	2c50e <system_clock_source_get_hz+0x56>
			return 0;
   2c50a:	2300      	movs	r3, #0
   2c50c:	e021      	b.n	2c552 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2c50e:	4b17      	ldr	r3, [pc, #92]	; (2c56c <system_clock_source_get_hz+0xb4>)
   2c510:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2c512:	4b13      	ldr	r3, [pc, #76]	; (2c560 <system_clock_source_get_hz+0xa8>)
   2c514:	681b      	ldr	r3, [r3, #0]
   2c516:	2224      	movs	r2, #36	; 0x24
   2c518:	4013      	ands	r3, r2
   2c51a:	2b04      	cmp	r3, #4
   2c51c:	d109      	bne.n	2c532 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2c51e:	2000      	movs	r0, #0
   2c520:	4b13      	ldr	r3, [pc, #76]	; (2c570 <system_clock_source_get_hz+0xb8>)
   2c522:	4798      	blx	r3
   2c524:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2c526:	4b0e      	ldr	r3, [pc, #56]	; (2c560 <system_clock_source_get_hz+0xa8>)
   2c528:	689b      	ldr	r3, [r3, #8]
   2c52a:	041b      	lsls	r3, r3, #16
   2c52c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2c52e:	4353      	muls	r3, r2
   2c530:	e00f      	b.n	2c552 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2c532:	4b10      	ldr	r3, [pc, #64]	; (2c574 <system_clock_source_get_hz+0xbc>)
   2c534:	e00d      	b.n	2c552 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2c536:	4a0b      	ldr	r2, [pc, #44]	; (2c564 <system_clock_source_get_hz+0xac>)
   2c538:	2350      	movs	r3, #80	; 0x50
   2c53a:	5cd3      	ldrb	r3, [r2, r3]
   2c53c:	b2db      	uxtb	r3, r3
   2c53e:	001a      	movs	r2, r3
   2c540:	2304      	movs	r3, #4
   2c542:	4013      	ands	r3, r2
   2c544:	d101      	bne.n	2c54a <system_clock_source_get_hz+0x92>
			return 0;
   2c546:	2300      	movs	r3, #0
   2c548:	e003      	b.n	2c552 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2c54a:	4b05      	ldr	r3, [pc, #20]	; (2c560 <system_clock_source_get_hz+0xa8>)
   2c54c:	68db      	ldr	r3, [r3, #12]
   2c54e:	e000      	b.n	2c552 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2c550:	2300      	movs	r3, #0
	}
}
   2c552:	0018      	movs	r0, r3
   2c554:	46bd      	mov	sp, r7
   2c556:	b002      	add	sp, #8
   2c558:	bd80      	pop	{r7, pc}
   2c55a:	46c0      	nop			; (mov r8, r8)
   2c55c:	0003dad4 	.word	0x0003dad4
   2c560:	200041fc 	.word	0x200041fc
   2c564:	40000800 	.word	0x40000800
   2c568:	007a1200 	.word	0x007a1200
   2c56c:	0002c459 	.word	0x0002c459
   2c570:	0002cf55 	.word	0x0002cf55
   2c574:	02dc6c00 	.word	0x02dc6c00

0002c578 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2c578:	b580      	push	{r7, lr}
   2c57a:	b084      	sub	sp, #16
   2c57c:	af00      	add	r7, sp, #0
   2c57e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2c580:	4b1a      	ldr	r3, [pc, #104]	; (2c5ec <system_clock_source_osc8m_set_config+0x74>)
   2c582:	6a1b      	ldr	r3, [r3, #32]
   2c584:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2c586:	687b      	ldr	r3, [r7, #4]
   2c588:	781b      	ldrb	r3, [r3, #0]
   2c58a:	1c1a      	adds	r2, r3, #0
   2c58c:	2303      	movs	r3, #3
   2c58e:	4013      	ands	r3, r2
   2c590:	b2da      	uxtb	r2, r3
   2c592:	230d      	movs	r3, #13
   2c594:	18fb      	adds	r3, r7, r3
   2c596:	2103      	movs	r1, #3
   2c598:	400a      	ands	r2, r1
   2c59a:	0010      	movs	r0, r2
   2c59c:	781a      	ldrb	r2, [r3, #0]
   2c59e:	2103      	movs	r1, #3
   2c5a0:	438a      	bics	r2, r1
   2c5a2:	1c11      	adds	r1, r2, #0
   2c5a4:	1c02      	adds	r2, r0, #0
   2c5a6:	430a      	orrs	r2, r1
   2c5a8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2c5aa:	687b      	ldr	r3, [r7, #4]
   2c5ac:	789a      	ldrb	r2, [r3, #2]
   2c5ae:	230c      	movs	r3, #12
   2c5b0:	18fb      	adds	r3, r7, r3
   2c5b2:	01d0      	lsls	r0, r2, #7
   2c5b4:	781a      	ldrb	r2, [r3, #0]
   2c5b6:	217f      	movs	r1, #127	; 0x7f
   2c5b8:	400a      	ands	r2, r1
   2c5ba:	1c11      	adds	r1, r2, #0
   2c5bc:	1c02      	adds	r2, r0, #0
   2c5be:	430a      	orrs	r2, r1
   2c5c0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2c5c2:	687b      	ldr	r3, [r7, #4]
   2c5c4:	785a      	ldrb	r2, [r3, #1]
   2c5c6:	230c      	movs	r3, #12
   2c5c8:	18fb      	adds	r3, r7, r3
   2c5ca:	2101      	movs	r1, #1
   2c5cc:	400a      	ands	r2, r1
   2c5ce:	0190      	lsls	r0, r2, #6
   2c5d0:	781a      	ldrb	r2, [r3, #0]
   2c5d2:	2140      	movs	r1, #64	; 0x40
   2c5d4:	438a      	bics	r2, r1
   2c5d6:	1c11      	adds	r1, r2, #0
   2c5d8:	1c02      	adds	r2, r0, #0
   2c5da:	430a      	orrs	r2, r1
   2c5dc:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2c5de:	4b03      	ldr	r3, [pc, #12]	; (2c5ec <system_clock_source_osc8m_set_config+0x74>)
   2c5e0:	68fa      	ldr	r2, [r7, #12]
   2c5e2:	621a      	str	r2, [r3, #32]
}
   2c5e4:	46c0      	nop			; (mov r8, r8)
   2c5e6:	46bd      	mov	sp, r7
   2c5e8:	b004      	add	sp, #16
   2c5ea:	bd80      	pop	{r7, pc}
   2c5ec:	40000800 	.word	0x40000800

0002c5f0 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2c5f0:	b580      	push	{r7, lr}
   2c5f2:	b086      	sub	sp, #24
   2c5f4:	af00      	add	r7, sp, #0
   2c5f6:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2c5f8:	687b      	ldr	r3, [r7, #4]
   2c5fa:	68db      	ldr	r3, [r3, #12]
   2c5fc:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2c5fe:	687b      	ldr	r3, [r7, #4]
   2c600:	7d1b      	ldrb	r3, [r3, #20]
   2c602:	2b01      	cmp	r3, #1
   2c604:	d10a      	bne.n	2c61c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2c606:	687b      	ldr	r3, [r7, #4]
   2c608:	8a1b      	ldrh	r3, [r3, #16]
   2c60a:	3301      	adds	r3, #1
   2c60c:	005b      	lsls	r3, r3, #1
   2c60e:	001a      	movs	r2, r3
   2c610:	4b36      	ldr	r3, [pc, #216]	; (2c6ec <system_clock_source_dpll_set_config+0xfc>)
   2c612:	0011      	movs	r1, r2
   2c614:	6978      	ldr	r0, [r7, #20]
   2c616:	4798      	blx	r3
   2c618:	0003      	movs	r3, r0
   2c61a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2c61c:	687b      	ldr	r3, [r7, #4]
   2c61e:	689b      	ldr	r3, [r3, #8]
   2c620:	011a      	lsls	r2, r3, #4
   2c622:	4b32      	ldr	r3, [pc, #200]	; (2c6ec <system_clock_source_dpll_set_config+0xfc>)
   2c624:	6979      	ldr	r1, [r7, #20]
   2c626:	0010      	movs	r0, r2
   2c628:	4798      	blx	r3
   2c62a:	0003      	movs	r3, r0
   2c62c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2c62e:	693b      	ldr	r3, [r7, #16]
   2c630:	b2da      	uxtb	r2, r3
   2c632:	230f      	movs	r3, #15
   2c634:	18fb      	adds	r3, r7, r3
   2c636:	210f      	movs	r1, #15
   2c638:	400a      	ands	r2, r1
   2c63a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2c63c:	693b      	ldr	r3, [r7, #16]
   2c63e:	091b      	lsrs	r3, r3, #4
   2c640:	3b01      	subs	r3, #1
   2c642:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2c644:	492a      	ldr	r1, [pc, #168]	; (2c6f0 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2c646:	687b      	ldr	r3, [r7, #4]
   2c648:	781b      	ldrb	r3, [r3, #0]
   2c64a:	01db      	lsls	r3, r3, #7
   2c64c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2c64e:	687b      	ldr	r3, [r7, #4]
   2c650:	785b      	ldrb	r3, [r3, #1]
   2c652:	019b      	lsls	r3, r3, #6
   2c654:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2c656:	4313      	orrs	r3, r2
   2c658:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2c65a:	2344      	movs	r3, #68	; 0x44
   2c65c:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2c65e:	4b24      	ldr	r3, [pc, #144]	; (2c6f0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2c660:	220f      	movs	r2, #15
   2c662:	18ba      	adds	r2, r7, r2
   2c664:	7812      	ldrb	r2, [r2, #0]
   2c666:	0412      	lsls	r2, r2, #16
   2c668:	0011      	movs	r1, r2
   2c66a:	22f0      	movs	r2, #240	; 0xf0
   2c66c:	0312      	lsls	r2, r2, #12
   2c66e:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2c670:	693a      	ldr	r2, [r7, #16]
   2c672:	0512      	lsls	r2, r2, #20
   2c674:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2c676:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2c678:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2c67a:	4b1d      	ldr	r3, [pc, #116]	; (2c6f0 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2c67c:	687a      	ldr	r2, [r7, #4]
   2c67e:	8a12      	ldrh	r2, [r2, #16]
   2c680:	0412      	lsls	r2, r2, #16
   2c682:	0011      	movs	r1, r2
   2c684:	4a1b      	ldr	r2, [pc, #108]	; (2c6f4 <system_clock_source_dpll_set_config+0x104>)
   2c686:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2c688:	687a      	ldr	r2, [r7, #4]
   2c68a:	7892      	ldrb	r2, [r2, #2]
   2c68c:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2c68e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2c690:	687a      	ldr	r2, [r7, #4]
   2c692:	7cd2      	ldrb	r2, [r2, #19]
   2c694:	0212      	lsls	r2, r2, #8
   2c696:	0010      	movs	r0, r2
   2c698:	22e0      	movs	r2, #224	; 0xe0
   2c69a:	00d2      	lsls	r2, r2, #3
   2c69c:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2c69e:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2c6a0:	687a      	ldr	r2, [r7, #4]
   2c6a2:	7d12      	ldrb	r2, [r2, #20]
   2c6a4:	0112      	lsls	r2, r2, #4
   2c6a6:	0010      	movs	r0, r2
   2c6a8:	2230      	movs	r2, #48	; 0x30
   2c6aa:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2c6ac:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2c6ae:	687a      	ldr	r2, [r7, #4]
   2c6b0:	78d2      	ldrb	r2, [r2, #3]
   2c6b2:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2c6b4:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2c6b6:	687a      	ldr	r2, [r7, #4]
   2c6b8:	7912      	ldrb	r2, [r2, #4]
   2c6ba:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2c6bc:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2c6be:	687a      	ldr	r2, [r7, #4]
   2c6c0:	7c92      	ldrb	r2, [r2, #18]
   2c6c2:	0010      	movs	r0, r2
   2c6c4:	2203      	movs	r2, #3
   2c6c6:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2c6c8:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2c6ca:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2c6cc:	693b      	ldr	r3, [r7, #16]
   2c6ce:	3301      	adds	r3, #1
   2c6d0:	011a      	lsls	r2, r3, #4
   2c6d2:	230f      	movs	r3, #15
   2c6d4:	18fb      	adds	r3, r7, r3
   2c6d6:	781b      	ldrb	r3, [r3, #0]
   2c6d8:	18d3      	adds	r3, r2, r3
   2c6da:	697a      	ldr	r2, [r7, #20]
   2c6dc:	4353      	muls	r3, r2
   2c6de:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2c6e0:	4b05      	ldr	r3, [pc, #20]	; (2c6f8 <system_clock_source_dpll_set_config+0x108>)
   2c6e2:	60da      	str	r2, [r3, #12]
}
   2c6e4:	46c0      	nop			; (mov r8, r8)
   2c6e6:	46bd      	mov	sp, r7
   2c6e8:	b006      	add	sp, #24
   2c6ea:	bd80      	pop	{r7, pc}
   2c6ec:	000359f1 	.word	0x000359f1
   2c6f0:	40000800 	.word	0x40000800
   2c6f4:	07ff0000 	.word	0x07ff0000
   2c6f8:	200041fc 	.word	0x200041fc

0002c6fc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2c6fc:	b580      	push	{r7, lr}
   2c6fe:	b082      	sub	sp, #8
   2c700:	af00      	add	r7, sp, #0
   2c702:	0002      	movs	r2, r0
   2c704:	1dfb      	adds	r3, r7, #7
   2c706:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2c708:	1dfb      	adds	r3, r7, #7
   2c70a:	781b      	ldrb	r3, [r3, #0]
   2c70c:	2b08      	cmp	r3, #8
   2c70e:	d83b      	bhi.n	2c788 <system_clock_source_enable+0x8c>
   2c710:	009a      	lsls	r2, r3, #2
   2c712:	4b21      	ldr	r3, [pc, #132]	; (2c798 <system_clock_source_enable+0x9c>)
   2c714:	18d3      	adds	r3, r2, r3
   2c716:	681b      	ldr	r3, [r3, #0]
   2c718:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2c71a:	4b20      	ldr	r3, [pc, #128]	; (2c79c <system_clock_source_enable+0xa0>)
   2c71c:	4a1f      	ldr	r2, [pc, #124]	; (2c79c <system_clock_source_enable+0xa0>)
   2c71e:	6a12      	ldr	r2, [r2, #32]
   2c720:	2102      	movs	r1, #2
   2c722:	430a      	orrs	r2, r1
   2c724:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2c726:	2300      	movs	r3, #0
   2c728:	e031      	b.n	2c78e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2c72a:	4b1c      	ldr	r3, [pc, #112]	; (2c79c <system_clock_source_enable+0xa0>)
   2c72c:	4a1b      	ldr	r2, [pc, #108]	; (2c79c <system_clock_source_enable+0xa0>)
   2c72e:	6992      	ldr	r2, [r2, #24]
   2c730:	2102      	movs	r1, #2
   2c732:	430a      	orrs	r2, r1
   2c734:	619a      	str	r2, [r3, #24]
		break;
   2c736:	e029      	b.n	2c78c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2c738:	4a18      	ldr	r2, [pc, #96]	; (2c79c <system_clock_source_enable+0xa0>)
   2c73a:	4b18      	ldr	r3, [pc, #96]	; (2c79c <system_clock_source_enable+0xa0>)
   2c73c:	8a1b      	ldrh	r3, [r3, #16]
   2c73e:	b29b      	uxth	r3, r3
   2c740:	2102      	movs	r1, #2
   2c742:	430b      	orrs	r3, r1
   2c744:	b29b      	uxth	r3, r3
   2c746:	8213      	strh	r3, [r2, #16]
		break;
   2c748:	e020      	b.n	2c78c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2c74a:	4a14      	ldr	r2, [pc, #80]	; (2c79c <system_clock_source_enable+0xa0>)
   2c74c:	4b13      	ldr	r3, [pc, #76]	; (2c79c <system_clock_source_enable+0xa0>)
   2c74e:	8a9b      	ldrh	r3, [r3, #20]
   2c750:	b29b      	uxth	r3, r3
   2c752:	2102      	movs	r1, #2
   2c754:	430b      	orrs	r3, r1
   2c756:	b29b      	uxth	r3, r3
   2c758:	8293      	strh	r3, [r2, #20]
		break;
   2c75a:	e017      	b.n	2c78c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2c75c:	4b10      	ldr	r3, [pc, #64]	; (2c7a0 <system_clock_source_enable+0xa4>)
   2c75e:	681b      	ldr	r3, [r3, #0]
   2c760:	2202      	movs	r2, #2
   2c762:	431a      	orrs	r2, r3
   2c764:	4b0e      	ldr	r3, [pc, #56]	; (2c7a0 <system_clock_source_enable+0xa4>)
   2c766:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2c768:	4b0e      	ldr	r3, [pc, #56]	; (2c7a4 <system_clock_source_enable+0xa8>)
   2c76a:	4798      	blx	r3
		break;
   2c76c:	e00e      	b.n	2c78c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2c76e:	4a0b      	ldr	r2, [pc, #44]	; (2c79c <system_clock_source_enable+0xa0>)
   2c770:	490a      	ldr	r1, [pc, #40]	; (2c79c <system_clock_source_enable+0xa0>)
   2c772:	2344      	movs	r3, #68	; 0x44
   2c774:	5ccb      	ldrb	r3, [r1, r3]
   2c776:	b2db      	uxtb	r3, r3
   2c778:	2102      	movs	r1, #2
   2c77a:	430b      	orrs	r3, r1
   2c77c:	b2d9      	uxtb	r1, r3
   2c77e:	2344      	movs	r3, #68	; 0x44
   2c780:	54d1      	strb	r1, [r2, r3]
		break;
   2c782:	e003      	b.n	2c78c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2c784:	2300      	movs	r3, #0
   2c786:	e002      	b.n	2c78e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2c788:	2317      	movs	r3, #23
   2c78a:	e000      	b.n	2c78e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2c78c:	2300      	movs	r3, #0
}
   2c78e:	0018      	movs	r0, r3
   2c790:	46bd      	mov	sp, r7
   2c792:	b002      	add	sp, #8
   2c794:	bd80      	pop	{r7, pc}
   2c796:	46c0      	nop			; (mov r8, r8)
   2c798:	0003daf8 	.word	0x0003daf8
   2c79c:	40000800 	.word	0x40000800
   2c7a0:	200041fc 	.word	0x200041fc
   2c7a4:	0002c475 	.word	0x0002c475

0002c7a8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2c7a8:	b580      	push	{r7, lr}
   2c7aa:	b084      	sub	sp, #16
   2c7ac:	af00      	add	r7, sp, #0
   2c7ae:	0002      	movs	r2, r0
   2c7b0:	1dfb      	adds	r3, r7, #7
   2c7b2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2c7b4:	2300      	movs	r3, #0
   2c7b6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2c7b8:	1dfb      	adds	r3, r7, #7
   2c7ba:	781b      	ldrb	r3, [r3, #0]
   2c7bc:	2b08      	cmp	r3, #8
   2c7be:	d821      	bhi.n	2c804 <system_clock_source_is_ready+0x5c>
   2c7c0:	009a      	lsls	r2, r3, #2
   2c7c2:	4b18      	ldr	r3, [pc, #96]	; (2c824 <system_clock_source_is_ready+0x7c>)
   2c7c4:	18d3      	adds	r3, r2, r3
   2c7c6:	681b      	ldr	r3, [r3, #0]
   2c7c8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2c7ca:	2308      	movs	r3, #8
   2c7cc:	60fb      	str	r3, [r7, #12]
		break;
   2c7ce:	e01b      	b.n	2c808 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2c7d0:	2304      	movs	r3, #4
   2c7d2:	60fb      	str	r3, [r7, #12]
		break;
   2c7d4:	e018      	b.n	2c808 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2c7d6:	2301      	movs	r3, #1
   2c7d8:	60fb      	str	r3, [r7, #12]
		break;
   2c7da:	e015      	b.n	2c808 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2c7dc:	2302      	movs	r3, #2
   2c7de:	60fb      	str	r3, [r7, #12]
		break;
   2c7e0:	e012      	b.n	2c808 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2c7e2:	2310      	movs	r3, #16
   2c7e4:	60fb      	str	r3, [r7, #12]
		}
		break;
   2c7e6:	e00f      	b.n	2c808 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2c7e8:	4a0f      	ldr	r2, [pc, #60]	; (2c828 <system_clock_source_is_ready+0x80>)
   2c7ea:	2350      	movs	r3, #80	; 0x50
   2c7ec:	5cd3      	ldrb	r3, [r2, r3]
   2c7ee:	b2db      	uxtb	r3, r3
   2c7f0:	001a      	movs	r2, r3
   2c7f2:	2303      	movs	r3, #3
   2c7f4:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2c7f6:	3b03      	subs	r3, #3
   2c7f8:	425a      	negs	r2, r3
   2c7fa:	4153      	adcs	r3, r2
   2c7fc:	b2db      	uxtb	r3, r3
   2c7fe:	e00c      	b.n	2c81a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2c800:	2301      	movs	r3, #1
   2c802:	e00a      	b.n	2c81a <system_clock_source_is_ready+0x72>

	default:
		return false;
   2c804:	2300      	movs	r3, #0
   2c806:	e008      	b.n	2c81a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2c808:	4b07      	ldr	r3, [pc, #28]	; (2c828 <system_clock_source_is_ready+0x80>)
   2c80a:	68db      	ldr	r3, [r3, #12]
   2c80c:	68fa      	ldr	r2, [r7, #12]
   2c80e:	401a      	ands	r2, r3
   2c810:	68fb      	ldr	r3, [r7, #12]
   2c812:	1ad3      	subs	r3, r2, r3
   2c814:	425a      	negs	r2, r3
   2c816:	4153      	adcs	r3, r2
   2c818:	b2db      	uxtb	r3, r3
}
   2c81a:	0018      	movs	r0, r3
   2c81c:	46bd      	mov	sp, r7
   2c81e:	b004      	add	sp, #16
   2c820:	bd80      	pop	{r7, pc}
   2c822:	46c0      	nop			; (mov r8, r8)
   2c824:	0003db1c 	.word	0x0003db1c
   2c828:	40000800 	.word	0x40000800

0002c82c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2c82c:	b580      	push	{r7, lr}
   2c82e:	b082      	sub	sp, #8
   2c830:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2c832:	003b      	movs	r3, r7
   2c834:	2203      	movs	r2, #3
   2c836:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2c838:	2300      	movs	r3, #0
   2c83a:	607b      	str	r3, [r7, #4]
   2c83c:	e009      	b.n	2c852 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2c83e:	687b      	ldr	r3, [r7, #4]
   2c840:	b2db      	uxtb	r3, r3
   2c842:	003a      	movs	r2, r7
   2c844:	0011      	movs	r1, r2
   2c846:	0018      	movs	r0, r3
   2c848:	4b05      	ldr	r3, [pc, #20]	; (2c860 <_switch_peripheral_gclk+0x34>)
   2c84a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2c84c:	687b      	ldr	r3, [r7, #4]
   2c84e:	3301      	adds	r3, #1
   2c850:	607b      	str	r3, [r7, #4]
   2c852:	687b      	ldr	r3, [r7, #4]
   2c854:	2b24      	cmp	r3, #36	; 0x24
   2c856:	d9f2      	bls.n	2c83e <_switch_peripheral_gclk+0x12>
	}
}
   2c858:	46c0      	nop			; (mov r8, r8)
   2c85a:	46bd      	mov	sp, r7
   2c85c:	b002      	add	sp, #8
   2c85e:	bd80      	pop	{r7, pc}
   2c860:	0002ce31 	.word	0x0002ce31

0002c864 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2c864:	b580      	push	{r7, lr}
   2c866:	b0a6      	sub	sp, #152	; 0x98
   2c868:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2c86a:	4b92      	ldr	r3, [pc, #584]	; (2cab4 <system_clock_init+0x250>)
   2c86c:	22c2      	movs	r2, #194	; 0xc2
   2c86e:	00d2      	lsls	r2, r2, #3
   2c870:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2c872:	2003      	movs	r0, #3
   2c874:	4b90      	ldr	r3, [pc, #576]	; (2cab8 <system_clock_init+0x254>)
   2c876:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2c878:	4b90      	ldr	r3, [pc, #576]	; (2cabc <system_clock_init+0x258>)
   2c87a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2c87c:	2394      	movs	r3, #148	; 0x94
   2c87e:	18fb      	adds	r3, r7, r3
   2c880:	0018      	movs	r0, r3
   2c882:	4b8f      	ldr	r3, [pc, #572]	; (2cac0 <system_clock_init+0x25c>)
   2c884:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2c886:	2394      	movs	r3, #148	; 0x94
   2c888:	18fb      	adds	r3, r7, r3
   2c88a:	2200      	movs	r2, #0
   2c88c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2c88e:	2394      	movs	r3, #148	; 0x94
   2c890:	18fb      	adds	r3, r7, r3
   2c892:	2201      	movs	r2, #1
   2c894:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2c896:	2394      	movs	r3, #148	; 0x94
   2c898:	18fb      	adds	r3, r7, r3
   2c89a:	2200      	movs	r2, #0
   2c89c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2c89e:	2394      	movs	r3, #148	; 0x94
   2c8a0:	18fb      	adds	r3, r7, r3
   2c8a2:	0018      	movs	r0, r3
   2c8a4:	4b87      	ldr	r3, [pc, #540]	; (2cac4 <system_clock_init+0x260>)
   2c8a6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2c8a8:	2006      	movs	r0, #6
   2c8aa:	4b87      	ldr	r3, [pc, #540]	; (2cac8 <system_clock_init+0x264>)
   2c8ac:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2c8ae:	4b87      	ldr	r3, [pc, #540]	; (2cacc <system_clock_init+0x268>)
   2c8b0:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2c8b2:	2360      	movs	r3, #96	; 0x60
   2c8b4:	18fb      	adds	r3, r7, r3
   2c8b6:	0018      	movs	r0, r3
   2c8b8:	4b85      	ldr	r3, [pc, #532]	; (2cad0 <system_clock_init+0x26c>)
   2c8ba:	4798      	blx	r3
   2c8bc:	2360      	movs	r3, #96	; 0x60
   2c8be:	18fb      	adds	r3, r7, r3
   2c8c0:	2206      	movs	r2, #6
   2c8c2:	701a      	strb	r2, [r3, #0]
   2c8c4:	2360      	movs	r3, #96	; 0x60
   2c8c6:	18fb      	adds	r3, r7, r3
   2c8c8:	2208      	movs	r2, #8
   2c8ca:	605a      	str	r2, [r3, #4]
   2c8cc:	2360      	movs	r3, #96	; 0x60
   2c8ce:	18fb      	adds	r3, r7, r3
   2c8d0:	2200      	movs	r2, #0
   2c8d2:	721a      	strb	r2, [r3, #8]
   2c8d4:	2360      	movs	r3, #96	; 0x60
   2c8d6:	18fb      	adds	r3, r7, r3
   2c8d8:	2200      	movs	r2, #0
   2c8da:	725a      	strb	r2, [r3, #9]
   2c8dc:	2360      	movs	r3, #96	; 0x60
   2c8de:	18fb      	adds	r3, r7, r3
   2c8e0:	0019      	movs	r1, r3
   2c8e2:	2001      	movs	r0, #1
   2c8e4:	4b7b      	ldr	r3, [pc, #492]	; (2cad4 <system_clock_init+0x270>)
   2c8e6:	4798      	blx	r3
   2c8e8:	2001      	movs	r0, #1
   2c8ea:	4b7b      	ldr	r3, [pc, #492]	; (2cad8 <system_clock_init+0x274>)
   2c8ec:	4798      	blx	r3
   2c8ee:	2354      	movs	r3, #84	; 0x54
   2c8f0:	18fb      	adds	r3, r7, r3
   2c8f2:	0018      	movs	r0, r3
   2c8f4:	4b76      	ldr	r3, [pc, #472]	; (2cad0 <system_clock_init+0x26c>)
   2c8f6:	4798      	blx	r3
   2c8f8:	2354      	movs	r3, #84	; 0x54
   2c8fa:	18fb      	adds	r3, r7, r3
   2c8fc:	2203      	movs	r2, #3
   2c8fe:	701a      	strb	r2, [r3, #0]
   2c900:	2354      	movs	r3, #84	; 0x54
   2c902:	18fb      	adds	r3, r7, r3
   2c904:	2201      	movs	r2, #1
   2c906:	605a      	str	r2, [r3, #4]
   2c908:	2354      	movs	r3, #84	; 0x54
   2c90a:	18fb      	adds	r3, r7, r3
   2c90c:	2201      	movs	r2, #1
   2c90e:	721a      	strb	r2, [r3, #8]
   2c910:	2354      	movs	r3, #84	; 0x54
   2c912:	18fb      	adds	r3, r7, r3
   2c914:	2200      	movs	r2, #0
   2c916:	725a      	strb	r2, [r3, #9]
   2c918:	2354      	movs	r3, #84	; 0x54
   2c91a:	18fb      	adds	r3, r7, r3
   2c91c:	0019      	movs	r1, r3
   2c91e:	2002      	movs	r0, #2
   2c920:	4b6c      	ldr	r3, [pc, #432]	; (2cad4 <system_clock_init+0x270>)
   2c922:	4798      	blx	r3
   2c924:	2002      	movs	r0, #2
   2c926:	4b6c      	ldr	r3, [pc, #432]	; (2cad8 <system_clock_init+0x274>)
   2c928:	4798      	blx	r3
   2c92a:	233c      	movs	r3, #60	; 0x3c
   2c92c:	18fb      	adds	r3, r7, r3
   2c92e:	0018      	movs	r0, r3
   2c930:	4b67      	ldr	r3, [pc, #412]	; (2cad0 <system_clock_init+0x26c>)
   2c932:	4798      	blx	r3
   2c934:	233c      	movs	r3, #60	; 0x3c
   2c936:	18fb      	adds	r3, r7, r3
   2c938:	2203      	movs	r2, #3
   2c93a:	701a      	strb	r2, [r3, #0]
   2c93c:	233c      	movs	r3, #60	; 0x3c
   2c93e:	18fb      	adds	r3, r7, r3
   2c940:	2220      	movs	r2, #32
   2c942:	605a      	str	r2, [r3, #4]
   2c944:	233c      	movs	r3, #60	; 0x3c
   2c946:	18fb      	adds	r3, r7, r3
   2c948:	2200      	movs	r2, #0
   2c94a:	721a      	strb	r2, [r3, #8]
   2c94c:	233c      	movs	r3, #60	; 0x3c
   2c94e:	18fb      	adds	r3, r7, r3
   2c950:	2200      	movs	r2, #0
   2c952:	725a      	strb	r2, [r3, #9]
   2c954:	233c      	movs	r3, #60	; 0x3c
   2c956:	18fb      	adds	r3, r7, r3
   2c958:	0019      	movs	r1, r3
   2c95a:	2004      	movs	r0, #4
   2c95c:	4b5d      	ldr	r3, [pc, #372]	; (2cad4 <system_clock_init+0x270>)
   2c95e:	4798      	blx	r3
   2c960:	2004      	movs	r0, #4
   2c962:	4b5d      	ldr	r3, [pc, #372]	; (2cad8 <system_clock_init+0x274>)
   2c964:	4798      	blx	r3
   2c966:	2330      	movs	r3, #48	; 0x30
   2c968:	18fb      	adds	r3, r7, r3
   2c96a:	0018      	movs	r0, r3
   2c96c:	4b58      	ldr	r3, [pc, #352]	; (2cad0 <system_clock_init+0x26c>)
   2c96e:	4798      	blx	r3
   2c970:	2330      	movs	r3, #48	; 0x30
   2c972:	18fb      	adds	r3, r7, r3
   2c974:	2206      	movs	r2, #6
   2c976:	701a      	strb	r2, [r3, #0]
   2c978:	2330      	movs	r3, #48	; 0x30
   2c97a:	18fb      	adds	r3, r7, r3
   2c97c:	2201      	movs	r2, #1
   2c97e:	605a      	str	r2, [r3, #4]
   2c980:	2330      	movs	r3, #48	; 0x30
   2c982:	18fb      	adds	r3, r7, r3
   2c984:	2200      	movs	r2, #0
   2c986:	721a      	strb	r2, [r3, #8]
   2c988:	2330      	movs	r3, #48	; 0x30
   2c98a:	18fb      	adds	r3, r7, r3
   2c98c:	2200      	movs	r2, #0
   2c98e:	725a      	strb	r2, [r3, #9]
   2c990:	2330      	movs	r3, #48	; 0x30
   2c992:	18fb      	adds	r3, r7, r3
   2c994:	0019      	movs	r1, r3
   2c996:	2005      	movs	r0, #5
   2c998:	4b4e      	ldr	r3, [pc, #312]	; (2cad4 <system_clock_init+0x270>)
   2c99a:	4798      	blx	r3
   2c99c:	2005      	movs	r0, #5
   2c99e:	4b4e      	ldr	r3, [pc, #312]	; (2cad8 <system_clock_init+0x274>)
   2c9a0:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2c9a2:	2390      	movs	r3, #144	; 0x90
   2c9a4:	18fb      	adds	r3, r7, r3
   2c9a6:	0018      	movs	r0, r3
   2c9a8:	4b4c      	ldr	r3, [pc, #304]	; (2cadc <system_clock_init+0x278>)
   2c9aa:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2c9ac:	2390      	movs	r3, #144	; 0x90
   2c9ae:	18fb      	adds	r3, r7, r3
   2c9b0:	2201      	movs	r2, #1
   2c9b2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2c9b4:	2390      	movs	r3, #144	; 0x90
   2c9b6:	18fb      	adds	r3, r7, r3
   2c9b8:	0019      	movs	r1, r3
   2c9ba:	2001      	movs	r0, #1
   2c9bc:	4b48      	ldr	r3, [pc, #288]	; (2cae0 <system_clock_init+0x27c>)
   2c9be:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2c9c0:	2001      	movs	r0, #1
   2c9c2:	4b48      	ldr	r3, [pc, #288]	; (2cae4 <system_clock_init+0x280>)
   2c9c4:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2c9c6:	2378      	movs	r3, #120	; 0x78
   2c9c8:	18fb      	adds	r3, r7, r3
   2c9ca:	0018      	movs	r0, r3
   2c9cc:	4b46      	ldr	r3, [pc, #280]	; (2cae8 <system_clock_init+0x284>)
   2c9ce:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2c9d0:	2378      	movs	r3, #120	; 0x78
   2c9d2:	18fb      	adds	r3, r7, r3
   2c9d4:	2200      	movs	r2, #0
   2c9d6:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2c9d8:	2378      	movs	r3, #120	; 0x78
   2c9da:	18fb      	adds	r3, r7, r3
   2c9dc:	2200      	movs	r2, #0
   2c9de:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2c9e0:	2378      	movs	r3, #120	; 0x78
   2c9e2:	18fb      	adds	r3, r7, r3
   2c9e4:	2200      	movs	r2, #0
   2c9e6:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2c9e8:	2378      	movs	r3, #120	; 0x78
   2c9ea:	18fb      	adds	r3, r7, r3
   2c9ec:	2200      	movs	r2, #0
   2c9ee:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2c9f0:	2378      	movs	r3, #120	; 0x78
   2c9f2:	18fb      	adds	r3, r7, r3
   2c9f4:	2200      	movs	r2, #0
   2c9f6:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2c9f8:	2378      	movs	r3, #120	; 0x78
   2c9fa:	18fb      	adds	r3, r7, r3
   2c9fc:	2200      	movs	r2, #0
   2c9fe:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2ca00:	2378      	movs	r3, #120	; 0x78
   2ca02:	18fb      	adds	r3, r7, r3
   2ca04:	2200      	movs	r2, #0
   2ca06:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2ca08:	2378      	movs	r3, #120	; 0x78
   2ca0a:	18fb      	adds	r3, r7, r3
   2ca0c:	2202      	movs	r2, #2
   2ca0e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2ca10:	2378      	movs	r3, #120	; 0x78
   2ca12:	18fb      	adds	r3, r7, r3
   2ca14:	4a35      	ldr	r2, [pc, #212]	; (2caec <system_clock_init+0x288>)
   2ca16:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2ca18:	2378      	movs	r3, #120	; 0x78
   2ca1a:	18fb      	adds	r3, r7, r3
   2ca1c:	2201      	movs	r2, #1
   2ca1e:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2ca20:	2378      	movs	r3, #120	; 0x78
   2ca22:	18fb      	adds	r3, r7, r3
   2ca24:	4a32      	ldr	r2, [pc, #200]	; (2caf0 <system_clock_init+0x28c>)
   2ca26:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2ca28:	2378      	movs	r3, #120	; 0x78
   2ca2a:	18fb      	adds	r3, r7, r3
   2ca2c:	0018      	movs	r0, r3
   2ca2e:	4b31      	ldr	r3, [pc, #196]	; (2caf4 <system_clock_init+0x290>)
   2ca30:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2ca32:	2008      	movs	r0, #8
   2ca34:	4b24      	ldr	r3, [pc, #144]	; (2cac8 <system_clock_init+0x264>)
   2ca36:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2ca38:	46c0      	nop			; (mov r8, r8)
   2ca3a:	2008      	movs	r0, #8
   2ca3c:	4b2e      	ldr	r3, [pc, #184]	; (2caf8 <system_clock_init+0x294>)
   2ca3e:	4798      	blx	r3
   2ca40:	0003      	movs	r3, r0
   2ca42:	001a      	movs	r2, r3
   2ca44:	2301      	movs	r3, #1
   2ca46:	4053      	eors	r3, r2
   2ca48:	b2db      	uxtb	r3, r3
   2ca4a:	2b00      	cmp	r3, #0
   2ca4c:	d1f5      	bne.n	2ca3a <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2ca4e:	4919      	ldr	r1, [pc, #100]	; (2cab4 <system_clock_init+0x250>)
   2ca50:	2244      	movs	r2, #68	; 0x44
   2ca52:	5c8b      	ldrb	r3, [r1, r2]
   2ca54:	2080      	movs	r0, #128	; 0x80
   2ca56:	4240      	negs	r0, r0
   2ca58:	4303      	orrs	r3, r0
   2ca5a:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2ca5c:	2000      	movs	r0, #0
   2ca5e:	4b27      	ldr	r3, [pc, #156]	; (2cafc <system_clock_init+0x298>)
   2ca60:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2ca62:	2100      	movs	r1, #0
   2ca64:	2000      	movs	r0, #0
   2ca66:	4b26      	ldr	r3, [pc, #152]	; (2cb00 <system_clock_init+0x29c>)
   2ca68:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2ca6a:	2100      	movs	r1, #0
   2ca6c:	2001      	movs	r0, #1
   2ca6e:	4b24      	ldr	r3, [pc, #144]	; (2cb00 <system_clock_init+0x29c>)
   2ca70:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2ca72:	2100      	movs	r1, #0
   2ca74:	2002      	movs	r0, #2
   2ca76:	4b22      	ldr	r3, [pc, #136]	; (2cb00 <system_clock_init+0x29c>)
   2ca78:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2ca7a:	003b      	movs	r3, r7
   2ca7c:	0018      	movs	r0, r3
   2ca7e:	4b14      	ldr	r3, [pc, #80]	; (2cad0 <system_clock_init+0x26c>)
   2ca80:	4798      	blx	r3
   2ca82:	003b      	movs	r3, r7
   2ca84:	2208      	movs	r2, #8
   2ca86:	701a      	strb	r2, [r3, #0]
   2ca88:	003b      	movs	r3, r7
   2ca8a:	2201      	movs	r2, #1
   2ca8c:	605a      	str	r2, [r3, #4]
   2ca8e:	003b      	movs	r3, r7
   2ca90:	2200      	movs	r2, #0
   2ca92:	721a      	strb	r2, [r3, #8]
   2ca94:	003b      	movs	r3, r7
   2ca96:	2201      	movs	r2, #1
   2ca98:	725a      	strb	r2, [r3, #9]
   2ca9a:	003b      	movs	r3, r7
   2ca9c:	0019      	movs	r1, r3
   2ca9e:	2000      	movs	r0, #0
   2caa0:	4b0c      	ldr	r3, [pc, #48]	; (2cad4 <system_clock_init+0x270>)
   2caa2:	4798      	blx	r3
   2caa4:	2000      	movs	r0, #0
   2caa6:	4b0c      	ldr	r3, [pc, #48]	; (2cad8 <system_clock_init+0x274>)
   2caa8:	4798      	blx	r3
#endif
}
   2caaa:	46c0      	nop			; (mov r8, r8)
   2caac:	46bd      	mov	sp, r7
   2caae:	b026      	add	sp, #152	; 0x98
   2cab0:	bd80      	pop	{r7, pc}
   2cab2:	46c0      	nop			; (mov r8, r8)
   2cab4:	40000800 	.word	0x40000800
   2cab8:	0002c425 	.word	0x0002c425
   2cabc:	0002c82d 	.word	0x0002c82d
   2cac0:	0002c335 	.word	0x0002c335
   2cac4:	0002c579 	.word	0x0002c579
   2cac8:	0002c6fd 	.word	0x0002c6fd
   2cacc:	0002cba9 	.word	0x0002cba9
   2cad0:	0002c2f1 	.word	0x0002c2f1
   2cad4:	0002cbd9 	.word	0x0002cbd9
   2cad8:	0002ccfd 	.word	0x0002ccfd
   2cadc:	0002c31f 	.word	0x0002c31f
   2cae0:	0002ce31 	.word	0x0002ce31
   2cae4:	0002ce75 	.word	0x0002ce75
   2cae8:	0002c3cd 	.word	0x0002c3cd
   2caec:	000f4240 	.word	0x000f4240
   2caf0:	02dc6c00 	.word	0x02dc6c00
   2caf4:	0002c5f1 	.word	0x0002c5f1
   2caf8:	0002c7a9 	.word	0x0002c7a9
   2cafc:	0002c359 	.word	0x0002c359
   2cb00:	0002c379 	.word	0x0002c379

0002cb04 <system_apb_clock_set_mask>:
{
   2cb04:	b580      	push	{r7, lr}
   2cb06:	b082      	sub	sp, #8
   2cb08:	af00      	add	r7, sp, #0
   2cb0a:	0002      	movs	r2, r0
   2cb0c:	6039      	str	r1, [r7, #0]
   2cb0e:	1dfb      	adds	r3, r7, #7
   2cb10:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2cb12:	1dfb      	adds	r3, r7, #7
   2cb14:	781b      	ldrb	r3, [r3, #0]
   2cb16:	2b01      	cmp	r3, #1
   2cb18:	d00a      	beq.n	2cb30 <system_apb_clock_set_mask+0x2c>
   2cb1a:	2b02      	cmp	r3, #2
   2cb1c:	d00f      	beq.n	2cb3e <system_apb_clock_set_mask+0x3a>
   2cb1e:	2b00      	cmp	r3, #0
   2cb20:	d114      	bne.n	2cb4c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2cb22:	4b0e      	ldr	r3, [pc, #56]	; (2cb5c <system_apb_clock_set_mask+0x58>)
   2cb24:	4a0d      	ldr	r2, [pc, #52]	; (2cb5c <system_apb_clock_set_mask+0x58>)
   2cb26:	6991      	ldr	r1, [r2, #24]
   2cb28:	683a      	ldr	r2, [r7, #0]
   2cb2a:	430a      	orrs	r2, r1
   2cb2c:	619a      	str	r2, [r3, #24]
			break;
   2cb2e:	e00f      	b.n	2cb50 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2cb30:	4b0a      	ldr	r3, [pc, #40]	; (2cb5c <system_apb_clock_set_mask+0x58>)
   2cb32:	4a0a      	ldr	r2, [pc, #40]	; (2cb5c <system_apb_clock_set_mask+0x58>)
   2cb34:	69d1      	ldr	r1, [r2, #28]
   2cb36:	683a      	ldr	r2, [r7, #0]
   2cb38:	430a      	orrs	r2, r1
   2cb3a:	61da      	str	r2, [r3, #28]
			break;
   2cb3c:	e008      	b.n	2cb50 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2cb3e:	4b07      	ldr	r3, [pc, #28]	; (2cb5c <system_apb_clock_set_mask+0x58>)
   2cb40:	4a06      	ldr	r2, [pc, #24]	; (2cb5c <system_apb_clock_set_mask+0x58>)
   2cb42:	6a11      	ldr	r1, [r2, #32]
   2cb44:	683a      	ldr	r2, [r7, #0]
   2cb46:	430a      	orrs	r2, r1
   2cb48:	621a      	str	r2, [r3, #32]
			break;
   2cb4a:	e001      	b.n	2cb50 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2cb4c:	2317      	movs	r3, #23
   2cb4e:	e000      	b.n	2cb52 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2cb50:	2300      	movs	r3, #0
}
   2cb52:	0018      	movs	r0, r3
   2cb54:	46bd      	mov	sp, r7
   2cb56:	b002      	add	sp, #8
   2cb58:	bd80      	pop	{r7, pc}
   2cb5a:	46c0      	nop			; (mov r8, r8)
   2cb5c:	40000400 	.word	0x40000400

0002cb60 <system_interrupt_enter_critical_section>:
{
   2cb60:	b580      	push	{r7, lr}
   2cb62:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2cb64:	4b02      	ldr	r3, [pc, #8]	; (2cb70 <system_interrupt_enter_critical_section+0x10>)
   2cb66:	4798      	blx	r3
}
   2cb68:	46c0      	nop			; (mov r8, r8)
   2cb6a:	46bd      	mov	sp, r7
   2cb6c:	bd80      	pop	{r7, pc}
   2cb6e:	46c0      	nop			; (mov r8, r8)
   2cb70:	0002919d 	.word	0x0002919d

0002cb74 <system_interrupt_leave_critical_section>:
{
   2cb74:	b580      	push	{r7, lr}
   2cb76:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2cb78:	4b02      	ldr	r3, [pc, #8]	; (2cb84 <system_interrupt_leave_critical_section+0x10>)
   2cb7a:	4798      	blx	r3
}
   2cb7c:	46c0      	nop			; (mov r8, r8)
   2cb7e:	46bd      	mov	sp, r7
   2cb80:	bd80      	pop	{r7, pc}
   2cb82:	46c0      	nop			; (mov r8, r8)
   2cb84:	000291f1 	.word	0x000291f1

0002cb88 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2cb88:	b580      	push	{r7, lr}
   2cb8a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2cb8c:	4b05      	ldr	r3, [pc, #20]	; (2cba4 <system_gclk_is_syncing+0x1c>)
   2cb8e:	785b      	ldrb	r3, [r3, #1]
   2cb90:	b2db      	uxtb	r3, r3
   2cb92:	b25b      	sxtb	r3, r3
   2cb94:	2b00      	cmp	r3, #0
   2cb96:	da01      	bge.n	2cb9c <system_gclk_is_syncing+0x14>
		return true;
   2cb98:	2301      	movs	r3, #1
   2cb9a:	e000      	b.n	2cb9e <system_gclk_is_syncing+0x16>
	}

	return false;
   2cb9c:	2300      	movs	r3, #0
}
   2cb9e:	0018      	movs	r0, r3
   2cba0:	46bd      	mov	sp, r7
   2cba2:	bd80      	pop	{r7, pc}
   2cba4:	40000c00 	.word	0x40000c00

0002cba8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2cba8:	b580      	push	{r7, lr}
   2cbaa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2cbac:	2108      	movs	r1, #8
   2cbae:	2000      	movs	r0, #0
   2cbb0:	4b07      	ldr	r3, [pc, #28]	; (2cbd0 <system_gclk_init+0x28>)
   2cbb2:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2cbb4:	4b07      	ldr	r3, [pc, #28]	; (2cbd4 <system_gclk_init+0x2c>)
   2cbb6:	2201      	movs	r2, #1
   2cbb8:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2cbba:	46c0      	nop			; (mov r8, r8)
   2cbbc:	4b05      	ldr	r3, [pc, #20]	; (2cbd4 <system_gclk_init+0x2c>)
   2cbbe:	781b      	ldrb	r3, [r3, #0]
   2cbc0:	b2db      	uxtb	r3, r3
   2cbc2:	001a      	movs	r2, r3
   2cbc4:	2301      	movs	r3, #1
   2cbc6:	4013      	ands	r3, r2
   2cbc8:	d1f8      	bne.n	2cbbc <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2cbca:	46c0      	nop			; (mov r8, r8)
   2cbcc:	46bd      	mov	sp, r7
   2cbce:	bd80      	pop	{r7, pc}
   2cbd0:	0002cb05 	.word	0x0002cb05
   2cbd4:	40000c00 	.word	0x40000c00

0002cbd8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2cbd8:	b580      	push	{r7, lr}
   2cbda:	b086      	sub	sp, #24
   2cbdc:	af00      	add	r7, sp, #0
   2cbde:	0002      	movs	r2, r0
   2cbe0:	6039      	str	r1, [r7, #0]
   2cbe2:	1dfb      	adds	r3, r7, #7
   2cbe4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2cbe6:	1dfb      	adds	r3, r7, #7
   2cbe8:	781b      	ldrb	r3, [r3, #0]
   2cbea:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2cbec:	1dfb      	adds	r3, r7, #7
   2cbee:	781b      	ldrb	r3, [r3, #0]
   2cbf0:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2cbf2:	683b      	ldr	r3, [r7, #0]
   2cbf4:	781b      	ldrb	r3, [r3, #0]
   2cbf6:	021b      	lsls	r3, r3, #8
   2cbf8:	001a      	movs	r2, r3
   2cbfa:	697b      	ldr	r3, [r7, #20]
   2cbfc:	4313      	orrs	r3, r2
   2cbfe:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2cc00:	683b      	ldr	r3, [r7, #0]
   2cc02:	785b      	ldrb	r3, [r3, #1]
   2cc04:	2b00      	cmp	r3, #0
   2cc06:	d004      	beq.n	2cc12 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2cc08:	697b      	ldr	r3, [r7, #20]
   2cc0a:	2280      	movs	r2, #128	; 0x80
   2cc0c:	02d2      	lsls	r2, r2, #11
   2cc0e:	4313      	orrs	r3, r2
   2cc10:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2cc12:	683b      	ldr	r3, [r7, #0]
   2cc14:	7a5b      	ldrb	r3, [r3, #9]
   2cc16:	2b00      	cmp	r3, #0
   2cc18:	d004      	beq.n	2cc24 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2cc1a:	697b      	ldr	r3, [r7, #20]
   2cc1c:	2280      	movs	r2, #128	; 0x80
   2cc1e:	0312      	lsls	r2, r2, #12
   2cc20:	4313      	orrs	r3, r2
   2cc22:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2cc24:	683b      	ldr	r3, [r7, #0]
   2cc26:	685b      	ldr	r3, [r3, #4]
   2cc28:	2b01      	cmp	r3, #1
   2cc2a:	d92c      	bls.n	2cc86 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2cc2c:	683b      	ldr	r3, [r7, #0]
   2cc2e:	685a      	ldr	r2, [r3, #4]
   2cc30:	683b      	ldr	r3, [r7, #0]
   2cc32:	685b      	ldr	r3, [r3, #4]
   2cc34:	3b01      	subs	r3, #1
   2cc36:	4013      	ands	r3, r2
   2cc38:	d11a      	bne.n	2cc70 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2cc3a:	2300      	movs	r3, #0
   2cc3c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2cc3e:	2302      	movs	r3, #2
   2cc40:	60bb      	str	r3, [r7, #8]
   2cc42:	e005      	b.n	2cc50 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2cc44:	68fb      	ldr	r3, [r7, #12]
   2cc46:	3301      	adds	r3, #1
   2cc48:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2cc4a:	68bb      	ldr	r3, [r7, #8]
   2cc4c:	005b      	lsls	r3, r3, #1
   2cc4e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2cc50:	683b      	ldr	r3, [r7, #0]
   2cc52:	685a      	ldr	r2, [r3, #4]
   2cc54:	68bb      	ldr	r3, [r7, #8]
   2cc56:	429a      	cmp	r2, r3
   2cc58:	d8f4      	bhi.n	2cc44 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2cc5a:	68fb      	ldr	r3, [r7, #12]
   2cc5c:	021b      	lsls	r3, r3, #8
   2cc5e:	693a      	ldr	r2, [r7, #16]
   2cc60:	4313      	orrs	r3, r2
   2cc62:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2cc64:	697b      	ldr	r3, [r7, #20]
   2cc66:	2280      	movs	r2, #128	; 0x80
   2cc68:	0352      	lsls	r2, r2, #13
   2cc6a:	4313      	orrs	r3, r2
   2cc6c:	617b      	str	r3, [r7, #20]
   2cc6e:	e00a      	b.n	2cc86 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2cc70:	683b      	ldr	r3, [r7, #0]
   2cc72:	685b      	ldr	r3, [r3, #4]
   2cc74:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2cc76:	693a      	ldr	r2, [r7, #16]
   2cc78:	4313      	orrs	r3, r2
   2cc7a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2cc7c:	697b      	ldr	r3, [r7, #20]
   2cc7e:	2280      	movs	r2, #128	; 0x80
   2cc80:	0292      	lsls	r2, r2, #10
   2cc82:	4313      	orrs	r3, r2
   2cc84:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2cc86:	683b      	ldr	r3, [r7, #0]
   2cc88:	7a1b      	ldrb	r3, [r3, #8]
   2cc8a:	2b00      	cmp	r3, #0
   2cc8c:	d004      	beq.n	2cc98 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2cc8e:	697b      	ldr	r3, [r7, #20]
   2cc90:	2280      	movs	r2, #128	; 0x80
   2cc92:	0392      	lsls	r2, r2, #14
   2cc94:	4313      	orrs	r3, r2
   2cc96:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2cc98:	46c0      	nop			; (mov r8, r8)
   2cc9a:	4b13      	ldr	r3, [pc, #76]	; (2cce8 <system_gclk_gen_set_config+0x110>)
   2cc9c:	4798      	blx	r3
   2cc9e:	1e03      	subs	r3, r0, #0
   2cca0:	d1fb      	bne.n	2cc9a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2cca2:	4b12      	ldr	r3, [pc, #72]	; (2ccec <system_gclk_gen_set_config+0x114>)
   2cca4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2cca6:	4a12      	ldr	r2, [pc, #72]	; (2ccf0 <system_gclk_gen_set_config+0x118>)
   2cca8:	1dfb      	adds	r3, r7, #7
   2ccaa:	781b      	ldrb	r3, [r3, #0]
   2ccac:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2ccae:	46c0      	nop			; (mov r8, r8)
   2ccb0:	4b0d      	ldr	r3, [pc, #52]	; (2cce8 <system_gclk_gen_set_config+0x110>)
   2ccb2:	4798      	blx	r3
   2ccb4:	1e03      	subs	r3, r0, #0
   2ccb6:	d1fb      	bne.n	2ccb0 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2ccb8:	4b0e      	ldr	r3, [pc, #56]	; (2ccf4 <system_gclk_gen_set_config+0x11c>)
   2ccba:	693a      	ldr	r2, [r7, #16]
   2ccbc:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2ccbe:	46c0      	nop			; (mov r8, r8)
   2ccc0:	4b09      	ldr	r3, [pc, #36]	; (2cce8 <system_gclk_gen_set_config+0x110>)
   2ccc2:	4798      	blx	r3
   2ccc4:	1e03      	subs	r3, r0, #0
   2ccc6:	d1fb      	bne.n	2ccc0 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2ccc8:	4b0a      	ldr	r3, [pc, #40]	; (2ccf4 <system_gclk_gen_set_config+0x11c>)
   2ccca:	4a0a      	ldr	r2, [pc, #40]	; (2ccf4 <system_gclk_gen_set_config+0x11c>)
   2cccc:	6851      	ldr	r1, [r2, #4]
   2ccce:	2280      	movs	r2, #128	; 0x80
   2ccd0:	0252      	lsls	r2, r2, #9
   2ccd2:	4011      	ands	r1, r2
   2ccd4:	697a      	ldr	r2, [r7, #20]
   2ccd6:	430a      	orrs	r2, r1
   2ccd8:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2ccda:	4b07      	ldr	r3, [pc, #28]	; (2ccf8 <system_gclk_gen_set_config+0x120>)
   2ccdc:	4798      	blx	r3
}
   2ccde:	46c0      	nop			; (mov r8, r8)
   2cce0:	46bd      	mov	sp, r7
   2cce2:	b006      	add	sp, #24
   2cce4:	bd80      	pop	{r7, pc}
   2cce6:	46c0      	nop			; (mov r8, r8)
   2cce8:	0002cb89 	.word	0x0002cb89
   2ccec:	0002cb61 	.word	0x0002cb61
   2ccf0:	40000c08 	.word	0x40000c08
   2ccf4:	40000c00 	.word	0x40000c00
   2ccf8:	0002cb75 	.word	0x0002cb75

0002ccfc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2ccfc:	b580      	push	{r7, lr}
   2ccfe:	b082      	sub	sp, #8
   2cd00:	af00      	add	r7, sp, #0
   2cd02:	0002      	movs	r2, r0
   2cd04:	1dfb      	adds	r3, r7, #7
   2cd06:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2cd08:	46c0      	nop			; (mov r8, r8)
   2cd0a:	4b0e      	ldr	r3, [pc, #56]	; (2cd44 <system_gclk_gen_enable+0x48>)
   2cd0c:	4798      	blx	r3
   2cd0e:	1e03      	subs	r3, r0, #0
   2cd10:	d1fb      	bne.n	2cd0a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2cd12:	4b0d      	ldr	r3, [pc, #52]	; (2cd48 <system_gclk_gen_enable+0x4c>)
   2cd14:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2cd16:	4a0d      	ldr	r2, [pc, #52]	; (2cd4c <system_gclk_gen_enable+0x50>)
   2cd18:	1dfb      	adds	r3, r7, #7
   2cd1a:	781b      	ldrb	r3, [r3, #0]
   2cd1c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2cd1e:	46c0      	nop			; (mov r8, r8)
   2cd20:	4b08      	ldr	r3, [pc, #32]	; (2cd44 <system_gclk_gen_enable+0x48>)
   2cd22:	4798      	blx	r3
   2cd24:	1e03      	subs	r3, r0, #0
   2cd26:	d1fb      	bne.n	2cd20 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2cd28:	4b09      	ldr	r3, [pc, #36]	; (2cd50 <system_gclk_gen_enable+0x54>)
   2cd2a:	4a09      	ldr	r2, [pc, #36]	; (2cd50 <system_gclk_gen_enable+0x54>)
   2cd2c:	6852      	ldr	r2, [r2, #4]
   2cd2e:	2180      	movs	r1, #128	; 0x80
   2cd30:	0249      	lsls	r1, r1, #9
   2cd32:	430a      	orrs	r2, r1
   2cd34:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2cd36:	4b07      	ldr	r3, [pc, #28]	; (2cd54 <system_gclk_gen_enable+0x58>)
   2cd38:	4798      	blx	r3
}
   2cd3a:	46c0      	nop			; (mov r8, r8)
   2cd3c:	46bd      	mov	sp, r7
   2cd3e:	b002      	add	sp, #8
   2cd40:	bd80      	pop	{r7, pc}
   2cd42:	46c0      	nop			; (mov r8, r8)
   2cd44:	0002cb89 	.word	0x0002cb89
   2cd48:	0002cb61 	.word	0x0002cb61
   2cd4c:	40000c04 	.word	0x40000c04
   2cd50:	40000c00 	.word	0x40000c00
   2cd54:	0002cb75 	.word	0x0002cb75

0002cd58 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2cd58:	b580      	push	{r7, lr}
   2cd5a:	b086      	sub	sp, #24
   2cd5c:	af00      	add	r7, sp, #0
   2cd5e:	0002      	movs	r2, r0
   2cd60:	1dfb      	adds	r3, r7, #7
   2cd62:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2cd64:	46c0      	nop			; (mov r8, r8)
   2cd66:	4b2a      	ldr	r3, [pc, #168]	; (2ce10 <system_gclk_gen_get_hz+0xb8>)
   2cd68:	4798      	blx	r3
   2cd6a:	1e03      	subs	r3, r0, #0
   2cd6c:	d1fb      	bne.n	2cd66 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2cd6e:	4b29      	ldr	r3, [pc, #164]	; (2ce14 <system_gclk_gen_get_hz+0xbc>)
   2cd70:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2cd72:	4a29      	ldr	r2, [pc, #164]	; (2ce18 <system_gclk_gen_get_hz+0xc0>)
   2cd74:	1dfb      	adds	r3, r7, #7
   2cd76:	781b      	ldrb	r3, [r3, #0]
   2cd78:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2cd7a:	46c0      	nop			; (mov r8, r8)
   2cd7c:	4b24      	ldr	r3, [pc, #144]	; (2ce10 <system_gclk_gen_get_hz+0xb8>)
   2cd7e:	4798      	blx	r3
   2cd80:	1e03      	subs	r3, r0, #0
   2cd82:	d1fb      	bne.n	2cd7c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2cd84:	4b25      	ldr	r3, [pc, #148]	; (2ce1c <system_gclk_gen_get_hz+0xc4>)
   2cd86:	685b      	ldr	r3, [r3, #4]
   2cd88:	04db      	lsls	r3, r3, #19
   2cd8a:	0edb      	lsrs	r3, r3, #27
   2cd8c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2cd8e:	0018      	movs	r0, r3
   2cd90:	4b23      	ldr	r3, [pc, #140]	; (2ce20 <system_gclk_gen_get_hz+0xc8>)
   2cd92:	4798      	blx	r3
   2cd94:	0003      	movs	r3, r0
   2cd96:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2cd98:	4a1f      	ldr	r2, [pc, #124]	; (2ce18 <system_gclk_gen_get_hz+0xc0>)
   2cd9a:	1dfb      	adds	r3, r7, #7
   2cd9c:	781b      	ldrb	r3, [r3, #0]
   2cd9e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2cda0:	4b1e      	ldr	r3, [pc, #120]	; (2ce1c <system_gclk_gen_get_hz+0xc4>)
   2cda2:	685b      	ldr	r3, [r3, #4]
   2cda4:	02db      	lsls	r3, r3, #11
   2cda6:	0fdb      	lsrs	r3, r3, #31
   2cda8:	b2da      	uxtb	r2, r3
   2cdaa:	2313      	movs	r3, #19
   2cdac:	18fb      	adds	r3, r7, r3
   2cdae:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2cdb0:	4a1c      	ldr	r2, [pc, #112]	; (2ce24 <system_gclk_gen_get_hz+0xcc>)
   2cdb2:	1dfb      	adds	r3, r7, #7
   2cdb4:	781b      	ldrb	r3, [r3, #0]
   2cdb6:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2cdb8:	46c0      	nop			; (mov r8, r8)
   2cdba:	4b15      	ldr	r3, [pc, #84]	; (2ce10 <system_gclk_gen_get_hz+0xb8>)
   2cdbc:	4798      	blx	r3
   2cdbe:	1e03      	subs	r3, r0, #0
   2cdc0:	d1fb      	bne.n	2cdba <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2cdc2:	4b16      	ldr	r3, [pc, #88]	; (2ce1c <system_gclk_gen_get_hz+0xc4>)
   2cdc4:	689b      	ldr	r3, [r3, #8]
   2cdc6:	021b      	lsls	r3, r3, #8
   2cdc8:	0c1b      	lsrs	r3, r3, #16
   2cdca:	b29b      	uxth	r3, r3
   2cdcc:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2cdce:	4b16      	ldr	r3, [pc, #88]	; (2ce28 <system_gclk_gen_get_hz+0xd0>)
   2cdd0:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2cdd2:	2313      	movs	r3, #19
   2cdd4:	18fb      	adds	r3, r7, r3
   2cdd6:	781b      	ldrb	r3, [r3, #0]
   2cdd8:	2b00      	cmp	r3, #0
   2cdda:	d109      	bne.n	2cdf0 <system_gclk_gen_get_hz+0x98>
   2cddc:	68fb      	ldr	r3, [r7, #12]
   2cdde:	2b01      	cmp	r3, #1
   2cde0:	d906      	bls.n	2cdf0 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2cde2:	4b12      	ldr	r3, [pc, #72]	; (2ce2c <system_gclk_gen_get_hz+0xd4>)
   2cde4:	68f9      	ldr	r1, [r7, #12]
   2cde6:	6978      	ldr	r0, [r7, #20]
   2cde8:	4798      	blx	r3
   2cdea:	0003      	movs	r3, r0
   2cdec:	617b      	str	r3, [r7, #20]
   2cdee:	e00a      	b.n	2ce06 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2cdf0:	2313      	movs	r3, #19
   2cdf2:	18fb      	adds	r3, r7, r3
   2cdf4:	781b      	ldrb	r3, [r3, #0]
   2cdf6:	2b00      	cmp	r3, #0
   2cdf8:	d005      	beq.n	2ce06 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2cdfa:	68fb      	ldr	r3, [r7, #12]
   2cdfc:	3301      	adds	r3, #1
   2cdfe:	697a      	ldr	r2, [r7, #20]
   2ce00:	40da      	lsrs	r2, r3
   2ce02:	0013      	movs	r3, r2
   2ce04:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2ce06:	697b      	ldr	r3, [r7, #20]
}
   2ce08:	0018      	movs	r0, r3
   2ce0a:	46bd      	mov	sp, r7
   2ce0c:	b006      	add	sp, #24
   2ce0e:	bd80      	pop	{r7, pc}
   2ce10:	0002cb89 	.word	0x0002cb89
   2ce14:	0002cb61 	.word	0x0002cb61
   2ce18:	40000c04 	.word	0x40000c04
   2ce1c:	40000c00 	.word	0x40000c00
   2ce20:	0002c4b9 	.word	0x0002c4b9
   2ce24:	40000c08 	.word	0x40000c08
   2ce28:	0002cb75 	.word	0x0002cb75
   2ce2c:	000359f1 	.word	0x000359f1

0002ce30 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2ce30:	b580      	push	{r7, lr}
   2ce32:	b084      	sub	sp, #16
   2ce34:	af00      	add	r7, sp, #0
   2ce36:	0002      	movs	r2, r0
   2ce38:	6039      	str	r1, [r7, #0]
   2ce3a:	1dfb      	adds	r3, r7, #7
   2ce3c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2ce3e:	1dfb      	adds	r3, r7, #7
   2ce40:	781b      	ldrb	r3, [r3, #0]
   2ce42:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2ce44:	683b      	ldr	r3, [r7, #0]
   2ce46:	781b      	ldrb	r3, [r3, #0]
   2ce48:	021b      	lsls	r3, r3, #8
   2ce4a:	001a      	movs	r2, r3
   2ce4c:	68fb      	ldr	r3, [r7, #12]
   2ce4e:	4313      	orrs	r3, r2
   2ce50:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2ce52:	1dfb      	adds	r3, r7, #7
   2ce54:	781b      	ldrb	r3, [r3, #0]
   2ce56:	0018      	movs	r0, r3
   2ce58:	4b04      	ldr	r3, [pc, #16]	; (2ce6c <system_gclk_chan_set_config+0x3c>)
   2ce5a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2ce5c:	4b04      	ldr	r3, [pc, #16]	; (2ce70 <system_gclk_chan_set_config+0x40>)
   2ce5e:	68fa      	ldr	r2, [r7, #12]
   2ce60:	b292      	uxth	r2, r2
   2ce62:	805a      	strh	r2, [r3, #2]
}
   2ce64:	46c0      	nop			; (mov r8, r8)
   2ce66:	46bd      	mov	sp, r7
   2ce68:	b004      	add	sp, #16
   2ce6a:	bd80      	pop	{r7, pc}
   2ce6c:	0002cebd 	.word	0x0002cebd
   2ce70:	40000c00 	.word	0x40000c00

0002ce74 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2ce74:	b580      	push	{r7, lr}
   2ce76:	b082      	sub	sp, #8
   2ce78:	af00      	add	r7, sp, #0
   2ce7a:	0002      	movs	r2, r0
   2ce7c:	1dfb      	adds	r3, r7, #7
   2ce7e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2ce80:	4b0a      	ldr	r3, [pc, #40]	; (2ceac <system_gclk_chan_enable+0x38>)
   2ce82:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ce84:	4a0a      	ldr	r2, [pc, #40]	; (2ceb0 <system_gclk_chan_enable+0x3c>)
   2ce86:	1dfb      	adds	r3, r7, #7
   2ce88:	781b      	ldrb	r3, [r3, #0]
   2ce8a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2ce8c:	4909      	ldr	r1, [pc, #36]	; (2ceb4 <system_gclk_chan_enable+0x40>)
   2ce8e:	4b09      	ldr	r3, [pc, #36]	; (2ceb4 <system_gclk_chan_enable+0x40>)
   2ce90:	885b      	ldrh	r3, [r3, #2]
   2ce92:	b29b      	uxth	r3, r3
   2ce94:	2280      	movs	r2, #128	; 0x80
   2ce96:	01d2      	lsls	r2, r2, #7
   2ce98:	4313      	orrs	r3, r2
   2ce9a:	b29b      	uxth	r3, r3
   2ce9c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2ce9e:	4b06      	ldr	r3, [pc, #24]	; (2ceb8 <system_gclk_chan_enable+0x44>)
   2cea0:	4798      	blx	r3
}
   2cea2:	46c0      	nop			; (mov r8, r8)
   2cea4:	46bd      	mov	sp, r7
   2cea6:	b002      	add	sp, #8
   2cea8:	bd80      	pop	{r7, pc}
   2ceaa:	46c0      	nop			; (mov r8, r8)
   2ceac:	0002cb61 	.word	0x0002cb61
   2ceb0:	40000c02 	.word	0x40000c02
   2ceb4:	40000c00 	.word	0x40000c00
   2ceb8:	0002cb75 	.word	0x0002cb75

0002cebc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2cebc:	b580      	push	{r7, lr}
   2cebe:	b084      	sub	sp, #16
   2cec0:	af00      	add	r7, sp, #0
   2cec2:	0002      	movs	r2, r0
   2cec4:	1dfb      	adds	r3, r7, #7
   2cec6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2cec8:	4b1c      	ldr	r3, [pc, #112]	; (2cf3c <system_gclk_chan_disable+0x80>)
   2ceca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2cecc:	4a1c      	ldr	r2, [pc, #112]	; (2cf40 <system_gclk_chan_disable+0x84>)
   2cece:	1dfb      	adds	r3, r7, #7
   2ced0:	781b      	ldrb	r3, [r3, #0]
   2ced2:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2ced4:	4b1b      	ldr	r3, [pc, #108]	; (2cf44 <system_gclk_chan_disable+0x88>)
   2ced6:	885b      	ldrh	r3, [r3, #2]
   2ced8:	051b      	lsls	r3, r3, #20
   2ceda:	0f1b      	lsrs	r3, r3, #28
   2cedc:	b2db      	uxtb	r3, r3
   2cede:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2cee0:	4a18      	ldr	r2, [pc, #96]	; (2cf44 <system_gclk_chan_disable+0x88>)
   2cee2:	8853      	ldrh	r3, [r2, #2]
   2cee4:	4918      	ldr	r1, [pc, #96]	; (2cf48 <system_gclk_chan_disable+0x8c>)
   2cee6:	400b      	ands	r3, r1
   2cee8:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2ceea:	4a16      	ldr	r2, [pc, #88]	; (2cf44 <system_gclk_chan_disable+0x88>)
   2ceec:	4b15      	ldr	r3, [pc, #84]	; (2cf44 <system_gclk_chan_disable+0x88>)
   2ceee:	885b      	ldrh	r3, [r3, #2]
   2cef0:	b29b      	uxth	r3, r3
   2cef2:	4916      	ldr	r1, [pc, #88]	; (2cf4c <system_gclk_chan_disable+0x90>)
   2cef4:	400b      	ands	r3, r1
   2cef6:	b29b      	uxth	r3, r3
   2cef8:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2cefa:	46c0      	nop			; (mov r8, r8)
   2cefc:	4b11      	ldr	r3, [pc, #68]	; (2cf44 <system_gclk_chan_disable+0x88>)
   2cefe:	885b      	ldrh	r3, [r3, #2]
   2cf00:	b29b      	uxth	r3, r3
   2cf02:	001a      	movs	r2, r3
   2cf04:	2380      	movs	r3, #128	; 0x80
   2cf06:	01db      	lsls	r3, r3, #7
   2cf08:	4013      	ands	r3, r2
   2cf0a:	d1f7      	bne.n	2cefc <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2cf0c:	4a0d      	ldr	r2, [pc, #52]	; (2cf44 <system_gclk_chan_disable+0x88>)
   2cf0e:	68fb      	ldr	r3, [r7, #12]
   2cf10:	b2db      	uxtb	r3, r3
   2cf12:	1c19      	adds	r1, r3, #0
   2cf14:	230f      	movs	r3, #15
   2cf16:	400b      	ands	r3, r1
   2cf18:	b2d9      	uxtb	r1, r3
   2cf1a:	8853      	ldrh	r3, [r2, #2]
   2cf1c:	1c08      	adds	r0, r1, #0
   2cf1e:	210f      	movs	r1, #15
   2cf20:	4001      	ands	r1, r0
   2cf22:	0208      	lsls	r0, r1, #8
   2cf24:	4908      	ldr	r1, [pc, #32]	; (2cf48 <system_gclk_chan_disable+0x8c>)
   2cf26:	400b      	ands	r3, r1
   2cf28:	1c19      	adds	r1, r3, #0
   2cf2a:	1c03      	adds	r3, r0, #0
   2cf2c:	430b      	orrs	r3, r1
   2cf2e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2cf30:	4b07      	ldr	r3, [pc, #28]	; (2cf50 <system_gclk_chan_disable+0x94>)
   2cf32:	4798      	blx	r3
}
   2cf34:	46c0      	nop			; (mov r8, r8)
   2cf36:	46bd      	mov	sp, r7
   2cf38:	b004      	add	sp, #16
   2cf3a:	bd80      	pop	{r7, pc}
   2cf3c:	0002cb61 	.word	0x0002cb61
   2cf40:	40000c02 	.word	0x40000c02
   2cf44:	40000c00 	.word	0x40000c00
   2cf48:	fffff0ff 	.word	0xfffff0ff
   2cf4c:	ffffbfff 	.word	0xffffbfff
   2cf50:	0002cb75 	.word	0x0002cb75

0002cf54 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2cf54:	b580      	push	{r7, lr}
   2cf56:	b084      	sub	sp, #16
   2cf58:	af00      	add	r7, sp, #0
   2cf5a:	0002      	movs	r2, r0
   2cf5c:	1dfb      	adds	r3, r7, #7
   2cf5e:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2cf60:	4b0d      	ldr	r3, [pc, #52]	; (2cf98 <system_gclk_chan_get_hz+0x44>)
   2cf62:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2cf64:	4a0d      	ldr	r2, [pc, #52]	; (2cf9c <system_gclk_chan_get_hz+0x48>)
   2cf66:	1dfb      	adds	r3, r7, #7
   2cf68:	781b      	ldrb	r3, [r3, #0]
   2cf6a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2cf6c:	4b0c      	ldr	r3, [pc, #48]	; (2cfa0 <system_gclk_chan_get_hz+0x4c>)
   2cf6e:	885b      	ldrh	r3, [r3, #2]
   2cf70:	051b      	lsls	r3, r3, #20
   2cf72:	0f1b      	lsrs	r3, r3, #28
   2cf74:	b2da      	uxtb	r2, r3
   2cf76:	230f      	movs	r3, #15
   2cf78:	18fb      	adds	r3, r7, r3
   2cf7a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2cf7c:	4b09      	ldr	r3, [pc, #36]	; (2cfa4 <system_gclk_chan_get_hz+0x50>)
   2cf7e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2cf80:	230f      	movs	r3, #15
   2cf82:	18fb      	adds	r3, r7, r3
   2cf84:	781b      	ldrb	r3, [r3, #0]
   2cf86:	0018      	movs	r0, r3
   2cf88:	4b07      	ldr	r3, [pc, #28]	; (2cfa8 <system_gclk_chan_get_hz+0x54>)
   2cf8a:	4798      	blx	r3
   2cf8c:	0003      	movs	r3, r0
}
   2cf8e:	0018      	movs	r0, r3
   2cf90:	46bd      	mov	sp, r7
   2cf92:	b004      	add	sp, #16
   2cf94:	bd80      	pop	{r7, pc}
   2cf96:	46c0      	nop			; (mov r8, r8)
   2cf98:	0002cb61 	.word	0x0002cb61
   2cf9c:	40000c02 	.word	0x40000c02
   2cfa0:	40000c00 	.word	0x40000c00
   2cfa4:	0002cb75 	.word	0x0002cb75
   2cfa8:	0002cd59 	.word	0x0002cd59

0002cfac <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2cfac:	b580      	push	{r7, lr}
   2cfae:	b084      	sub	sp, #16
   2cfb0:	af00      	add	r7, sp, #0
   2cfb2:	0002      	movs	r2, r0
   2cfb4:	1dfb      	adds	r3, r7, #7
   2cfb6:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2cfb8:	230f      	movs	r3, #15
   2cfba:	18fb      	adds	r3, r7, r3
   2cfbc:	2200      	movs	r2, #0
   2cfbe:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2cfc0:	1dfb      	adds	r3, r7, #7
   2cfc2:	781b      	ldrb	r3, [r3, #0]
   2cfc4:	2b7f      	cmp	r3, #127	; 0x7f
   2cfc6:	d80b      	bhi.n	2cfe0 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2cfc8:	4a13      	ldr	r2, [pc, #76]	; (2d018 <system_interrupt_clear_pending+0x6c>)
   2cfca:	1dfb      	adds	r3, r7, #7
   2cfcc:	781b      	ldrb	r3, [r3, #0]
   2cfce:	b25b      	sxtb	r3, r3
   2cfd0:	2101      	movs	r1, #1
   2cfd2:	4099      	lsls	r1, r3
   2cfd4:	000b      	movs	r3, r1
   2cfd6:	0019      	movs	r1, r3
   2cfd8:	23c0      	movs	r3, #192	; 0xc0
   2cfda:	005b      	lsls	r3, r3, #1
   2cfdc:	50d1      	str	r1, [r2, r3]
   2cfde:	e014      	b.n	2d00a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2cfe0:	1dfb      	adds	r3, r7, #7
   2cfe2:	781b      	ldrb	r3, [r3, #0]
   2cfe4:	b25b      	sxtb	r3, r3
   2cfe6:	330e      	adds	r3, #14
   2cfe8:	d101      	bne.n	2cfee <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2cfea:	2317      	movs	r3, #23
   2cfec:	e010      	b.n	2d010 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2cfee:	1dfb      	adds	r3, r7, #7
   2cff0:	781b      	ldrb	r3, [r3, #0]
   2cff2:	b25b      	sxtb	r3, r3
   2cff4:	3301      	adds	r3, #1
   2cff6:	d104      	bne.n	2d002 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2cff8:	4b08      	ldr	r3, [pc, #32]	; (2d01c <system_interrupt_clear_pending+0x70>)
   2cffa:	2280      	movs	r2, #128	; 0x80
   2cffc:	0492      	lsls	r2, r2, #18
   2cffe:	605a      	str	r2, [r3, #4]
   2d000:	e003      	b.n	2d00a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2d002:	230f      	movs	r3, #15
   2d004:	18fb      	adds	r3, r7, r3
   2d006:	2217      	movs	r2, #23
   2d008:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2d00a:	230f      	movs	r3, #15
   2d00c:	18fb      	adds	r3, r7, r3
   2d00e:	781b      	ldrb	r3, [r3, #0]
}
   2d010:	0018      	movs	r0, r3
   2d012:	46bd      	mov	sp, r7
   2d014:	b004      	add	sp, #16
   2d016:	bd80      	pop	{r7, pc}
   2d018:	e000e100 	.word	0xe000e100
   2d01c:	e000ed00 	.word	0xe000ed00

0002d020 <system_pinmux_get_group_from_gpio_pin>:
{
   2d020:	b580      	push	{r7, lr}
   2d022:	b084      	sub	sp, #16
   2d024:	af00      	add	r7, sp, #0
   2d026:	0002      	movs	r2, r0
   2d028:	1dfb      	adds	r3, r7, #7
   2d02a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2d02c:	230f      	movs	r3, #15
   2d02e:	18fb      	adds	r3, r7, r3
   2d030:	1dfa      	adds	r2, r7, #7
   2d032:	7812      	ldrb	r2, [r2, #0]
   2d034:	09d2      	lsrs	r2, r2, #7
   2d036:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2d038:	230e      	movs	r3, #14
   2d03a:	18fb      	adds	r3, r7, r3
   2d03c:	1dfa      	adds	r2, r7, #7
   2d03e:	7812      	ldrb	r2, [r2, #0]
   2d040:	0952      	lsrs	r2, r2, #5
   2d042:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2d044:	4b0d      	ldr	r3, [pc, #52]	; (2d07c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2d046:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2d048:	230f      	movs	r3, #15
   2d04a:	18fb      	adds	r3, r7, r3
   2d04c:	781b      	ldrb	r3, [r3, #0]
   2d04e:	2b00      	cmp	r3, #0
   2d050:	d10f      	bne.n	2d072 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2d052:	230f      	movs	r3, #15
   2d054:	18fb      	adds	r3, r7, r3
   2d056:	781b      	ldrb	r3, [r3, #0]
   2d058:	009b      	lsls	r3, r3, #2
   2d05a:	2210      	movs	r2, #16
   2d05c:	4694      	mov	ip, r2
   2d05e:	44bc      	add	ip, r7
   2d060:	4463      	add	r3, ip
   2d062:	3b08      	subs	r3, #8
   2d064:	681a      	ldr	r2, [r3, #0]
   2d066:	230e      	movs	r3, #14
   2d068:	18fb      	adds	r3, r7, r3
   2d06a:	781b      	ldrb	r3, [r3, #0]
   2d06c:	01db      	lsls	r3, r3, #7
   2d06e:	18d3      	adds	r3, r2, r3
   2d070:	e000      	b.n	2d074 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2d072:	2300      	movs	r3, #0
}
   2d074:	0018      	movs	r0, r3
   2d076:	46bd      	mov	sp, r7
   2d078:	b004      	add	sp, #16
   2d07a:	bd80      	pop	{r7, pc}
   2d07c:	41004400 	.word	0x41004400

0002d080 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2d080:	b580      	push	{r7, lr}
   2d082:	b088      	sub	sp, #32
   2d084:	af00      	add	r7, sp, #0
   2d086:	60f8      	str	r0, [r7, #12]
   2d088:	60b9      	str	r1, [r7, #8]
   2d08a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2d08c:	2300      	movs	r3, #0
   2d08e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2d090:	687b      	ldr	r3, [r7, #4]
   2d092:	78db      	ldrb	r3, [r3, #3]
   2d094:	2201      	movs	r2, #1
   2d096:	4053      	eors	r3, r2
   2d098:	b2db      	uxtb	r3, r3
   2d09a:	2b00      	cmp	r3, #0
   2d09c:	d035      	beq.n	2d10a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2d09e:	687b      	ldr	r3, [r7, #4]
   2d0a0:	781b      	ldrb	r3, [r3, #0]
   2d0a2:	2b80      	cmp	r3, #128	; 0x80
   2d0a4:	d00b      	beq.n	2d0be <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2d0a6:	69fb      	ldr	r3, [r7, #28]
   2d0a8:	2280      	movs	r2, #128	; 0x80
   2d0aa:	0252      	lsls	r2, r2, #9
   2d0ac:	4313      	orrs	r3, r2
   2d0ae:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2d0b0:	687b      	ldr	r3, [r7, #4]
   2d0b2:	781b      	ldrb	r3, [r3, #0]
   2d0b4:	061b      	lsls	r3, r3, #24
   2d0b6:	001a      	movs	r2, r3
   2d0b8:	69fb      	ldr	r3, [r7, #28]
   2d0ba:	4313      	orrs	r3, r2
   2d0bc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2d0be:	687b      	ldr	r3, [r7, #4]
   2d0c0:	785b      	ldrb	r3, [r3, #1]
   2d0c2:	2b00      	cmp	r3, #0
   2d0c4:	d003      	beq.n	2d0ce <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2d0c6:	687b      	ldr	r3, [r7, #4]
   2d0c8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2d0ca:	2b02      	cmp	r3, #2
   2d0cc:	d110      	bne.n	2d0f0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2d0ce:	69fb      	ldr	r3, [r7, #28]
   2d0d0:	2280      	movs	r2, #128	; 0x80
   2d0d2:	0292      	lsls	r2, r2, #10
   2d0d4:	4313      	orrs	r3, r2
   2d0d6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2d0d8:	687b      	ldr	r3, [r7, #4]
   2d0da:	789b      	ldrb	r3, [r3, #2]
   2d0dc:	2b00      	cmp	r3, #0
   2d0de:	d004      	beq.n	2d0ea <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2d0e0:	69fb      	ldr	r3, [r7, #28]
   2d0e2:	2280      	movs	r2, #128	; 0x80
   2d0e4:	02d2      	lsls	r2, r2, #11
   2d0e6:	4313      	orrs	r3, r2
   2d0e8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2d0ea:	68fb      	ldr	r3, [r7, #12]
   2d0ec:	68ba      	ldr	r2, [r7, #8]
   2d0ee:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2d0f0:	687b      	ldr	r3, [r7, #4]
   2d0f2:	785b      	ldrb	r3, [r3, #1]
   2d0f4:	2b01      	cmp	r3, #1
   2d0f6:	d003      	beq.n	2d100 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2d0f8:	687b      	ldr	r3, [r7, #4]
   2d0fa:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2d0fc:	2b02      	cmp	r3, #2
   2d0fe:	d107      	bne.n	2d110 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2d100:	69fb      	ldr	r3, [r7, #28]
   2d102:	4a22      	ldr	r2, [pc, #136]	; (2d18c <_system_pinmux_config+0x10c>)
   2d104:	4013      	ands	r3, r2
   2d106:	61fb      	str	r3, [r7, #28]
   2d108:	e002      	b.n	2d110 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2d10a:	68fb      	ldr	r3, [r7, #12]
   2d10c:	68ba      	ldr	r2, [r7, #8]
   2d10e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2d110:	68bb      	ldr	r3, [r7, #8]
   2d112:	041b      	lsls	r3, r3, #16
   2d114:	0c1b      	lsrs	r3, r3, #16
   2d116:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2d118:	68bb      	ldr	r3, [r7, #8]
   2d11a:	0c1b      	lsrs	r3, r3, #16
   2d11c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2d11e:	69ba      	ldr	r2, [r7, #24]
   2d120:	69fb      	ldr	r3, [r7, #28]
   2d122:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2d124:	22a0      	movs	r2, #160	; 0xa0
   2d126:	05d2      	lsls	r2, r2, #23
   2d128:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2d12a:	68fb      	ldr	r3, [r7, #12]
   2d12c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2d12e:	697a      	ldr	r2, [r7, #20]
   2d130:	69fb      	ldr	r3, [r7, #28]
   2d132:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2d134:	22d0      	movs	r2, #208	; 0xd0
   2d136:	0612      	lsls	r2, r2, #24
   2d138:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2d13a:	68fb      	ldr	r3, [r7, #12]
   2d13c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2d13e:	687b      	ldr	r3, [r7, #4]
   2d140:	78db      	ldrb	r3, [r3, #3]
   2d142:	2201      	movs	r2, #1
   2d144:	4053      	eors	r3, r2
   2d146:	b2db      	uxtb	r3, r3
   2d148:	2b00      	cmp	r3, #0
   2d14a:	d01a      	beq.n	2d182 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2d14c:	69fa      	ldr	r2, [r7, #28]
   2d14e:	2380      	movs	r3, #128	; 0x80
   2d150:	02db      	lsls	r3, r3, #11
   2d152:	4013      	ands	r3, r2
   2d154:	d00a      	beq.n	2d16c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2d156:	687b      	ldr	r3, [r7, #4]
   2d158:	789b      	ldrb	r3, [r3, #2]
   2d15a:	2b01      	cmp	r3, #1
   2d15c:	d103      	bne.n	2d166 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2d15e:	68fb      	ldr	r3, [r7, #12]
   2d160:	68ba      	ldr	r2, [r7, #8]
   2d162:	619a      	str	r2, [r3, #24]
   2d164:	e002      	b.n	2d16c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2d166:	68fb      	ldr	r3, [r7, #12]
   2d168:	68ba      	ldr	r2, [r7, #8]
   2d16a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2d16c:	687b      	ldr	r3, [r7, #4]
   2d16e:	785b      	ldrb	r3, [r3, #1]
   2d170:	2b01      	cmp	r3, #1
   2d172:	d003      	beq.n	2d17c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2d174:	687b      	ldr	r3, [r7, #4]
   2d176:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2d178:	2b02      	cmp	r3, #2
   2d17a:	d102      	bne.n	2d182 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2d17c:	68fb      	ldr	r3, [r7, #12]
   2d17e:	68ba      	ldr	r2, [r7, #8]
   2d180:	609a      	str	r2, [r3, #8]
		}
	}
}
   2d182:	46c0      	nop			; (mov r8, r8)
   2d184:	46bd      	mov	sp, r7
   2d186:	b008      	add	sp, #32
   2d188:	bd80      	pop	{r7, pc}
   2d18a:	46c0      	nop			; (mov r8, r8)
   2d18c:	fffbffff 	.word	0xfffbffff

0002d190 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2d190:	b580      	push	{r7, lr}
   2d192:	b084      	sub	sp, #16
   2d194:	af00      	add	r7, sp, #0
   2d196:	0002      	movs	r2, r0
   2d198:	6039      	str	r1, [r7, #0]
   2d19a:	1dfb      	adds	r3, r7, #7
   2d19c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2d19e:	1dfb      	adds	r3, r7, #7
   2d1a0:	781b      	ldrb	r3, [r3, #0]
   2d1a2:	0018      	movs	r0, r3
   2d1a4:	4b0a      	ldr	r3, [pc, #40]	; (2d1d0 <system_pinmux_pin_set_config+0x40>)
   2d1a6:	4798      	blx	r3
   2d1a8:	0003      	movs	r3, r0
   2d1aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2d1ac:	1dfb      	adds	r3, r7, #7
   2d1ae:	781b      	ldrb	r3, [r3, #0]
   2d1b0:	221f      	movs	r2, #31
   2d1b2:	4013      	ands	r3, r2
   2d1b4:	2201      	movs	r2, #1
   2d1b6:	409a      	lsls	r2, r3
   2d1b8:	0013      	movs	r3, r2
   2d1ba:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2d1bc:	683a      	ldr	r2, [r7, #0]
   2d1be:	68b9      	ldr	r1, [r7, #8]
   2d1c0:	68fb      	ldr	r3, [r7, #12]
   2d1c2:	0018      	movs	r0, r3
   2d1c4:	4b03      	ldr	r3, [pc, #12]	; (2d1d4 <system_pinmux_pin_set_config+0x44>)
   2d1c6:	4798      	blx	r3
}
   2d1c8:	46c0      	nop			; (mov r8, r8)
   2d1ca:	46bd      	mov	sp, r7
   2d1cc:	b004      	add	sp, #16
   2d1ce:	bd80      	pop	{r7, pc}
   2d1d0:	0002d021 	.word	0x0002d021
   2d1d4:	0002d081 	.word	0x0002d081

0002d1d8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2d1d8:	b580      	push	{r7, lr}
   2d1da:	af00      	add	r7, sp, #0
	return;
   2d1dc:	46c0      	nop			; (mov r8, r8)
}
   2d1de:	46bd      	mov	sp, r7
   2d1e0:	bd80      	pop	{r7, pc}
	...

0002d1e4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2d1e4:	b580      	push	{r7, lr}
   2d1e6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2d1e8:	4b06      	ldr	r3, [pc, #24]	; (2d204 <system_init+0x20>)
   2d1ea:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2d1ec:	4b06      	ldr	r3, [pc, #24]	; (2d208 <system_init+0x24>)
   2d1ee:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2d1f0:	4b06      	ldr	r3, [pc, #24]	; (2d20c <system_init+0x28>)
   2d1f2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2d1f4:	4b06      	ldr	r3, [pc, #24]	; (2d210 <system_init+0x2c>)
   2d1f6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2d1f8:	4b06      	ldr	r3, [pc, #24]	; (2d214 <system_init+0x30>)
   2d1fa:	4798      	blx	r3
}
   2d1fc:	46c0      	nop			; (mov r8, r8)
   2d1fe:	46bd      	mov	sp, r7
   2d200:	bd80      	pop	{r7, pc}
   2d202:	46c0      	nop			; (mov r8, r8)
   2d204:	0002c865 	.word	0x0002c865
   2d208:	0002932d 	.word	0x0002932d
   2d20c:	00014485 	.word	0x00014485
   2d210:	00029705 	.word	0x00029705
   2d214:	0002d1d9 	.word	0x0002d1d9

0002d218 <system_gclk_chan_get_config_defaults>:
{
   2d218:	b580      	push	{r7, lr}
   2d21a:	b082      	sub	sp, #8
   2d21c:	af00      	add	r7, sp, #0
   2d21e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2d220:	687b      	ldr	r3, [r7, #4]
   2d222:	2200      	movs	r2, #0
   2d224:	701a      	strb	r2, [r3, #0]
}
   2d226:	46c0      	nop			; (mov r8, r8)
   2d228:	46bd      	mov	sp, r7
   2d22a:	b002      	add	sp, #8
   2d22c:	bd80      	pop	{r7, pc}
	...

0002d230 <system_apb_clock_set_mask>:
{
   2d230:	b580      	push	{r7, lr}
   2d232:	b082      	sub	sp, #8
   2d234:	af00      	add	r7, sp, #0
   2d236:	0002      	movs	r2, r0
   2d238:	6039      	str	r1, [r7, #0]
   2d23a:	1dfb      	adds	r3, r7, #7
   2d23c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2d23e:	1dfb      	adds	r3, r7, #7
   2d240:	781b      	ldrb	r3, [r3, #0]
   2d242:	2b01      	cmp	r3, #1
   2d244:	d00a      	beq.n	2d25c <system_apb_clock_set_mask+0x2c>
   2d246:	2b02      	cmp	r3, #2
   2d248:	d00f      	beq.n	2d26a <system_apb_clock_set_mask+0x3a>
   2d24a:	2b00      	cmp	r3, #0
   2d24c:	d114      	bne.n	2d278 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2d24e:	4b0e      	ldr	r3, [pc, #56]	; (2d288 <system_apb_clock_set_mask+0x58>)
   2d250:	4a0d      	ldr	r2, [pc, #52]	; (2d288 <system_apb_clock_set_mask+0x58>)
   2d252:	6991      	ldr	r1, [r2, #24]
   2d254:	683a      	ldr	r2, [r7, #0]
   2d256:	430a      	orrs	r2, r1
   2d258:	619a      	str	r2, [r3, #24]
			break;
   2d25a:	e00f      	b.n	2d27c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2d25c:	4b0a      	ldr	r3, [pc, #40]	; (2d288 <system_apb_clock_set_mask+0x58>)
   2d25e:	4a0a      	ldr	r2, [pc, #40]	; (2d288 <system_apb_clock_set_mask+0x58>)
   2d260:	69d1      	ldr	r1, [r2, #28]
   2d262:	683a      	ldr	r2, [r7, #0]
   2d264:	430a      	orrs	r2, r1
   2d266:	61da      	str	r2, [r3, #28]
			break;
   2d268:	e008      	b.n	2d27c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2d26a:	4b07      	ldr	r3, [pc, #28]	; (2d288 <system_apb_clock_set_mask+0x58>)
   2d26c:	4a06      	ldr	r2, [pc, #24]	; (2d288 <system_apb_clock_set_mask+0x58>)
   2d26e:	6a11      	ldr	r1, [r2, #32]
   2d270:	683a      	ldr	r2, [r7, #0]
   2d272:	430a      	orrs	r2, r1
   2d274:	621a      	str	r2, [r3, #32]
			break;
   2d276:	e001      	b.n	2d27c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2d278:	2317      	movs	r3, #23
   2d27a:	e000      	b.n	2d27e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2d27c:	2300      	movs	r3, #0
}
   2d27e:	0018      	movs	r0, r3
   2d280:	46bd      	mov	sp, r7
   2d282:	b002      	add	sp, #8
   2d284:	bd80      	pop	{r7, pc}
   2d286:	46c0      	nop			; (mov r8, r8)
   2d288:	40000400 	.word	0x40000400

0002d28c <system_pinmux_get_config_defaults>:
{
   2d28c:	b580      	push	{r7, lr}
   2d28e:	b082      	sub	sp, #8
   2d290:	af00      	add	r7, sp, #0
   2d292:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2d294:	687b      	ldr	r3, [r7, #4]
   2d296:	2280      	movs	r2, #128	; 0x80
   2d298:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2d29a:	687b      	ldr	r3, [r7, #4]
   2d29c:	2200      	movs	r2, #0
   2d29e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2d2a0:	687b      	ldr	r3, [r7, #4]
   2d2a2:	2201      	movs	r2, #1
   2d2a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2d2a6:	687b      	ldr	r3, [r7, #4]
   2d2a8:	2200      	movs	r2, #0
   2d2aa:	70da      	strb	r2, [r3, #3]
}
   2d2ac:	46c0      	nop			; (mov r8, r8)
   2d2ae:	46bd      	mov	sp, r7
   2d2b0:	b002      	add	sp, #8
   2d2b2:	bd80      	pop	{r7, pc}

0002d2b4 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2d2b4:	b580      	push	{r7, lr}
   2d2b6:	b084      	sub	sp, #16
   2d2b8:	af00      	add	r7, sp, #0
   2d2ba:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2d2bc:	2300      	movs	r3, #0
   2d2be:	60fb      	str	r3, [r7, #12]
   2d2c0:	e00c      	b.n	2d2dc <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2d2c2:	4b0a      	ldr	r3, [pc, #40]	; (2d2ec <_tcc_get_inst_index+0x38>)
   2d2c4:	68fa      	ldr	r2, [r7, #12]
   2d2c6:	0092      	lsls	r2, r2, #2
   2d2c8:	58d2      	ldr	r2, [r2, r3]
   2d2ca:	687b      	ldr	r3, [r7, #4]
   2d2cc:	429a      	cmp	r2, r3
   2d2ce:	d102      	bne.n	2d2d6 <_tcc_get_inst_index+0x22>
			return i;
   2d2d0:	68fb      	ldr	r3, [r7, #12]
   2d2d2:	b2db      	uxtb	r3, r3
   2d2d4:	e006      	b.n	2d2e4 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2d2d6:	68fb      	ldr	r3, [r7, #12]
   2d2d8:	3301      	adds	r3, #1
   2d2da:	60fb      	str	r3, [r7, #12]
   2d2dc:	68fb      	ldr	r3, [r7, #12]
   2d2de:	2b02      	cmp	r3, #2
   2d2e0:	d9ef      	bls.n	2d2c2 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2d2e2:	2300      	movs	r3, #0
}
   2d2e4:	0018      	movs	r0, r3
   2d2e6:	46bd      	mov	sp, r7
   2d2e8:	b004      	add	sp, #16
   2d2ea:	bd80      	pop	{r7, pc}
   2d2ec:	0003db40 	.word	0x0003db40

0002d2f0 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2d2f0:	b590      	push	{r4, r7, lr}
   2d2f2:	b085      	sub	sp, #20
   2d2f4:	af00      	add	r7, sp, #0
   2d2f6:	6078      	str	r0, [r7, #4]
   2d2f8:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2d2fa:	230f      	movs	r3, #15
   2d2fc:	18fc      	adds	r4, r7, r3
   2d2fe:	683b      	ldr	r3, [r7, #0]
   2d300:	0018      	movs	r0, r3
   2d302:	4bad      	ldr	r3, [pc, #692]	; (2d5b8 <tcc_get_config_defaults+0x2c8>)
   2d304:	4798      	blx	r3
   2d306:	0003      	movs	r3, r0
   2d308:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2d30a:	687b      	ldr	r3, [r7, #4]
   2d30c:	2200      	movs	r2, #0
   2d30e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2d310:	230f      	movs	r3, #15
   2d312:	18fb      	adds	r3, r7, r3
   2d314:	781a      	ldrb	r2, [r3, #0]
   2d316:	4ba9      	ldr	r3, [pc, #676]	; (2d5bc <tcc_get_config_defaults+0x2cc>)
   2d318:	0092      	lsls	r2, r2, #2
   2d31a:	58d2      	ldr	r2, [r2, r3]
   2d31c:	687b      	ldr	r3, [r7, #4]
   2d31e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2d320:	687b      	ldr	r3, [r7, #4]
   2d322:	2200      	movs	r2, #0
   2d324:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2d326:	687b      	ldr	r3, [r7, #4]
   2d328:	2200      	movs	r2, #0
   2d32a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2d32c:	687b      	ldr	r3, [r7, #4]
   2d32e:	2200      	movs	r2, #0
   2d330:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2d332:	687b      	ldr	r3, [r7, #4]
   2d334:	2200      	movs	r2, #0
   2d336:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2d338:	687b      	ldr	r3, [r7, #4]
   2d33a:	2200      	movs	r2, #0
   2d33c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2d33e:	687b      	ldr	r3, [r7, #4]
   2d340:	2200      	movs	r2, #0
   2d342:	61da      	str	r2, [r3, #28]
   2d344:	687b      	ldr	r3, [r7, #4]
   2d346:	2200      	movs	r2, #0
   2d348:	621a      	str	r2, [r3, #32]
   2d34a:	687b      	ldr	r3, [r7, #4]
   2d34c:	2200      	movs	r2, #0
   2d34e:	625a      	str	r2, [r3, #36]	; 0x24
   2d350:	687b      	ldr	r3, [r7, #4]
   2d352:	2200      	movs	r2, #0
   2d354:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2d356:	687b      	ldr	r3, [r7, #4]
   2d358:	2200      	movs	r2, #0
   2d35a:	751a      	strb	r2, [r3, #20]
   2d35c:	687b      	ldr	r3, [r7, #4]
   2d35e:	2200      	movs	r2, #0
   2d360:	755a      	strb	r2, [r3, #21]
   2d362:	687b      	ldr	r3, [r7, #4]
   2d364:	2200      	movs	r2, #0
   2d366:	759a      	strb	r2, [r3, #22]
   2d368:	687b      	ldr	r3, [r7, #4]
   2d36a:	2200      	movs	r2, #0
   2d36c:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2d36e:	687b      	ldr	r3, [r7, #4]
   2d370:	2200      	movs	r2, #0
   2d372:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2d374:	687b      	ldr	r3, [r7, #4]
   2d376:	2200      	movs	r2, #0
   2d378:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2d37a:	687b      	ldr	r3, [r7, #4]
   2d37c:	2200      	movs	r2, #0
   2d37e:	741a      	strb	r2, [r3, #16]
   2d380:	687b      	ldr	r3, [r7, #4]
   2d382:	2200      	movs	r2, #0
   2d384:	745a      	strb	r2, [r3, #17]
   2d386:	687b      	ldr	r3, [r7, #4]
   2d388:	2200      	movs	r2, #0
   2d38a:	749a      	strb	r2, [r3, #18]
   2d38c:	687b      	ldr	r3, [r7, #4]
   2d38e:	2200      	movs	r2, #0
   2d390:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2d392:	687b      	ldr	r3, [r7, #4]
   2d394:	222c      	movs	r2, #44	; 0x2c
   2d396:	2100      	movs	r1, #0
   2d398:	5499      	strb	r1, [r3, r2]
   2d39a:	687b      	ldr	r3, [r7, #4]
   2d39c:	222d      	movs	r2, #45	; 0x2d
   2d39e:	2100      	movs	r1, #0
   2d3a0:	5499      	strb	r1, [r3, r2]
   2d3a2:	687b      	ldr	r3, [r7, #4]
   2d3a4:	222e      	movs	r2, #46	; 0x2e
   2d3a6:	2100      	movs	r1, #0
   2d3a8:	5499      	strb	r1, [r3, r2]
   2d3aa:	687b      	ldr	r3, [r7, #4]
   2d3ac:	222f      	movs	r2, #47	; 0x2f
   2d3ae:	2100      	movs	r1, #0
   2d3b0:	5499      	strb	r1, [r3, r2]
   2d3b2:	687b      	ldr	r3, [r7, #4]
   2d3b4:	2230      	movs	r2, #48	; 0x30
   2d3b6:	2100      	movs	r1, #0
   2d3b8:	5499      	strb	r1, [r3, r2]
   2d3ba:	687b      	ldr	r3, [r7, #4]
   2d3bc:	2231      	movs	r2, #49	; 0x31
   2d3be:	2100      	movs	r1, #0
   2d3c0:	5499      	strb	r1, [r3, r2]
   2d3c2:	687b      	ldr	r3, [r7, #4]
   2d3c4:	2232      	movs	r2, #50	; 0x32
   2d3c6:	2100      	movs	r1, #0
   2d3c8:	5499      	strb	r1, [r3, r2]
   2d3ca:	687b      	ldr	r3, [r7, #4]
   2d3cc:	2233      	movs	r2, #51	; 0x33
   2d3ce:	2100      	movs	r1, #0
   2d3d0:	5499      	strb	r1, [r3, r2]
   2d3d2:	687b      	ldr	r3, [r7, #4]
   2d3d4:	2234      	movs	r2, #52	; 0x34
   2d3d6:	2100      	movs	r1, #0
   2d3d8:	5499      	strb	r1, [r3, r2]
   2d3da:	687b      	ldr	r3, [r7, #4]
   2d3dc:	2235      	movs	r2, #53	; 0x35
   2d3de:	2100      	movs	r1, #0
   2d3e0:	5499      	strb	r1, [r3, r2]
   2d3e2:	687b      	ldr	r3, [r7, #4]
   2d3e4:	2236      	movs	r2, #54	; 0x36
   2d3e6:	2100      	movs	r1, #0
   2d3e8:	5499      	strb	r1, [r3, r2]
   2d3ea:	687b      	ldr	r3, [r7, #4]
   2d3ec:	2237      	movs	r2, #55	; 0x37
   2d3ee:	2100      	movs	r1, #0
   2d3f0:	5499      	strb	r1, [r3, r2]
   2d3f2:	687b      	ldr	r3, [r7, #4]
   2d3f4:	2238      	movs	r2, #56	; 0x38
   2d3f6:	2100      	movs	r1, #0
   2d3f8:	5499      	strb	r1, [r3, r2]
   2d3fa:	687b      	ldr	r3, [r7, #4]
   2d3fc:	2239      	movs	r2, #57	; 0x39
   2d3fe:	2100      	movs	r1, #0
   2d400:	5499      	strb	r1, [r3, r2]
   2d402:	687b      	ldr	r3, [r7, #4]
   2d404:	223a      	movs	r2, #58	; 0x3a
   2d406:	2100      	movs	r1, #0
   2d408:	5499      	strb	r1, [r3, r2]
   2d40a:	687b      	ldr	r3, [r7, #4]
   2d40c:	223b      	movs	r2, #59	; 0x3b
   2d40e:	2100      	movs	r1, #0
   2d410:	5499      	strb	r1, [r3, r2]
   2d412:	687b      	ldr	r3, [r7, #4]
   2d414:	223c      	movs	r2, #60	; 0x3c
   2d416:	2100      	movs	r1, #0
   2d418:	5499      	strb	r1, [r3, r2]
   2d41a:	687b      	ldr	r3, [r7, #4]
   2d41c:	223d      	movs	r2, #61	; 0x3d
   2d41e:	2100      	movs	r1, #0
   2d420:	5499      	strb	r1, [r3, r2]
   2d422:	687b      	ldr	r3, [r7, #4]
   2d424:	223e      	movs	r2, #62	; 0x3e
   2d426:	2100      	movs	r1, #0
   2d428:	5499      	strb	r1, [r3, r2]
   2d42a:	687b      	ldr	r3, [r7, #4]
   2d42c:	223f      	movs	r2, #63	; 0x3f
   2d42e:	2100      	movs	r1, #0
   2d430:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2d432:	687b      	ldr	r3, [r7, #4]
   2d434:	2240      	movs	r2, #64	; 0x40
   2d436:	2100      	movs	r1, #0
   2d438:	5499      	strb	r1, [r3, r2]
   2d43a:	687b      	ldr	r3, [r7, #4]
   2d43c:	2241      	movs	r2, #65	; 0x41
   2d43e:	2100      	movs	r1, #0
   2d440:	5499      	strb	r1, [r3, r2]
   2d442:	687b      	ldr	r3, [r7, #4]
   2d444:	2242      	movs	r2, #66	; 0x42
   2d446:	2100      	movs	r1, #0
   2d448:	5499      	strb	r1, [r3, r2]
   2d44a:	687b      	ldr	r3, [r7, #4]
   2d44c:	2243      	movs	r2, #67	; 0x43
   2d44e:	2100      	movs	r1, #0
   2d450:	5499      	strb	r1, [r3, r2]
   2d452:	687b      	ldr	r3, [r7, #4]
   2d454:	2244      	movs	r2, #68	; 0x44
   2d456:	2100      	movs	r1, #0
   2d458:	5499      	strb	r1, [r3, r2]
   2d45a:	687b      	ldr	r3, [r7, #4]
   2d45c:	2245      	movs	r2, #69	; 0x45
   2d45e:	2100      	movs	r1, #0
   2d460:	5499      	strb	r1, [r3, r2]
   2d462:	687b      	ldr	r3, [r7, #4]
   2d464:	2246      	movs	r2, #70	; 0x46
   2d466:	2100      	movs	r1, #0
   2d468:	5499      	strb	r1, [r3, r2]
   2d46a:	687b      	ldr	r3, [r7, #4]
   2d46c:	2247      	movs	r2, #71	; 0x47
   2d46e:	2100      	movs	r1, #0
   2d470:	5499      	strb	r1, [r3, r2]
   2d472:	687b      	ldr	r3, [r7, #4]
   2d474:	2248      	movs	r2, #72	; 0x48
   2d476:	2100      	movs	r1, #0
   2d478:	5499      	strb	r1, [r3, r2]
   2d47a:	687b      	ldr	r3, [r7, #4]
   2d47c:	2249      	movs	r2, #73	; 0x49
   2d47e:	2100      	movs	r1, #0
   2d480:	5499      	strb	r1, [r3, r2]
   2d482:	687b      	ldr	r3, [r7, #4]
   2d484:	224a      	movs	r2, #74	; 0x4a
   2d486:	2100      	movs	r1, #0
   2d488:	5499      	strb	r1, [r3, r2]
   2d48a:	687b      	ldr	r3, [r7, #4]
   2d48c:	224b      	movs	r2, #75	; 0x4b
   2d48e:	2100      	movs	r1, #0
   2d490:	5499      	strb	r1, [r3, r2]
   2d492:	687b      	ldr	r3, [r7, #4]
   2d494:	224c      	movs	r2, #76	; 0x4c
   2d496:	2100      	movs	r1, #0
   2d498:	5499      	strb	r1, [r3, r2]
   2d49a:	687b      	ldr	r3, [r7, #4]
   2d49c:	224d      	movs	r2, #77	; 0x4d
   2d49e:	2100      	movs	r1, #0
   2d4a0:	5499      	strb	r1, [r3, r2]
   2d4a2:	687b      	ldr	r3, [r7, #4]
   2d4a4:	224e      	movs	r2, #78	; 0x4e
   2d4a6:	2100      	movs	r1, #0
   2d4a8:	5499      	strb	r1, [r3, r2]
   2d4aa:	687b      	ldr	r3, [r7, #4]
   2d4ac:	224f      	movs	r2, #79	; 0x4f
   2d4ae:	2100      	movs	r1, #0
   2d4b0:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2d4b2:	687b      	ldr	r3, [r7, #4]
   2d4b4:	2250      	movs	r2, #80	; 0x50
   2d4b6:	2100      	movs	r1, #0
   2d4b8:	5499      	strb	r1, [r3, r2]
   2d4ba:	687b      	ldr	r3, [r7, #4]
   2d4bc:	2251      	movs	r2, #81	; 0x51
   2d4be:	2100      	movs	r1, #0
   2d4c0:	5499      	strb	r1, [r3, r2]
   2d4c2:	687b      	ldr	r3, [r7, #4]
   2d4c4:	2252      	movs	r2, #82	; 0x52
   2d4c6:	2100      	movs	r1, #0
   2d4c8:	5499      	strb	r1, [r3, r2]
   2d4ca:	687b      	ldr	r3, [r7, #4]
   2d4cc:	2253      	movs	r2, #83	; 0x53
   2d4ce:	2100      	movs	r1, #0
   2d4d0:	5499      	strb	r1, [r3, r2]
   2d4d2:	687b      	ldr	r3, [r7, #4]
   2d4d4:	2254      	movs	r2, #84	; 0x54
   2d4d6:	2100      	movs	r1, #0
   2d4d8:	5499      	strb	r1, [r3, r2]
   2d4da:	687b      	ldr	r3, [r7, #4]
   2d4dc:	2255      	movs	r2, #85	; 0x55
   2d4de:	2100      	movs	r1, #0
   2d4e0:	5499      	strb	r1, [r3, r2]
   2d4e2:	687b      	ldr	r3, [r7, #4]
   2d4e4:	2256      	movs	r2, #86	; 0x56
   2d4e6:	2100      	movs	r1, #0
   2d4e8:	5499      	strb	r1, [r3, r2]
   2d4ea:	687b      	ldr	r3, [r7, #4]
   2d4ec:	2257      	movs	r2, #87	; 0x57
   2d4ee:	2100      	movs	r1, #0
   2d4f0:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2d4f2:	687b      	ldr	r3, [r7, #4]
   2d4f4:	2298      	movs	r2, #152	; 0x98
   2d4f6:	2100      	movs	r1, #0
   2d4f8:	5499      	strb	r1, [r3, r2]
   2d4fa:	687b      	ldr	r3, [r7, #4]
   2d4fc:	2200      	movs	r2, #0
   2d4fe:	659a      	str	r2, [r3, #88]	; 0x58
   2d500:	687b      	ldr	r3, [r7, #4]
   2d502:	2200      	movs	r2, #0
   2d504:	679a      	str	r2, [r3, #120]	; 0x78
   2d506:	687b      	ldr	r3, [r7, #4]
   2d508:	2299      	movs	r2, #153	; 0x99
   2d50a:	2100      	movs	r1, #0
   2d50c:	5499      	strb	r1, [r3, r2]
   2d50e:	687b      	ldr	r3, [r7, #4]
   2d510:	2200      	movs	r2, #0
   2d512:	65da      	str	r2, [r3, #92]	; 0x5c
   2d514:	687b      	ldr	r3, [r7, #4]
   2d516:	2200      	movs	r2, #0
   2d518:	67da      	str	r2, [r3, #124]	; 0x7c
   2d51a:	687b      	ldr	r3, [r7, #4]
   2d51c:	229a      	movs	r2, #154	; 0x9a
   2d51e:	2100      	movs	r1, #0
   2d520:	5499      	strb	r1, [r3, r2]
   2d522:	687b      	ldr	r3, [r7, #4]
   2d524:	2200      	movs	r2, #0
   2d526:	661a      	str	r2, [r3, #96]	; 0x60
   2d528:	687b      	ldr	r3, [r7, #4]
   2d52a:	2280      	movs	r2, #128	; 0x80
   2d52c:	2100      	movs	r1, #0
   2d52e:	5099      	str	r1, [r3, r2]
   2d530:	687b      	ldr	r3, [r7, #4]
   2d532:	229b      	movs	r2, #155	; 0x9b
   2d534:	2100      	movs	r1, #0
   2d536:	5499      	strb	r1, [r3, r2]
   2d538:	687b      	ldr	r3, [r7, #4]
   2d53a:	2200      	movs	r2, #0
   2d53c:	665a      	str	r2, [r3, #100]	; 0x64
   2d53e:	687b      	ldr	r3, [r7, #4]
   2d540:	2284      	movs	r2, #132	; 0x84
   2d542:	2100      	movs	r1, #0
   2d544:	5099      	str	r1, [r3, r2]
   2d546:	687b      	ldr	r3, [r7, #4]
   2d548:	229c      	movs	r2, #156	; 0x9c
   2d54a:	2100      	movs	r1, #0
   2d54c:	5499      	strb	r1, [r3, r2]
   2d54e:	687b      	ldr	r3, [r7, #4]
   2d550:	2200      	movs	r2, #0
   2d552:	669a      	str	r2, [r3, #104]	; 0x68
   2d554:	687b      	ldr	r3, [r7, #4]
   2d556:	2288      	movs	r2, #136	; 0x88
   2d558:	2100      	movs	r1, #0
   2d55a:	5099      	str	r1, [r3, r2]
   2d55c:	687b      	ldr	r3, [r7, #4]
   2d55e:	229d      	movs	r2, #157	; 0x9d
   2d560:	2100      	movs	r1, #0
   2d562:	5499      	strb	r1, [r3, r2]
   2d564:	687b      	ldr	r3, [r7, #4]
   2d566:	2200      	movs	r2, #0
   2d568:	66da      	str	r2, [r3, #108]	; 0x6c
   2d56a:	687b      	ldr	r3, [r7, #4]
   2d56c:	228c      	movs	r2, #140	; 0x8c
   2d56e:	2100      	movs	r1, #0
   2d570:	5099      	str	r1, [r3, r2]
   2d572:	687b      	ldr	r3, [r7, #4]
   2d574:	229e      	movs	r2, #158	; 0x9e
   2d576:	2100      	movs	r1, #0
   2d578:	5499      	strb	r1, [r3, r2]
   2d57a:	687b      	ldr	r3, [r7, #4]
   2d57c:	2200      	movs	r2, #0
   2d57e:	671a      	str	r2, [r3, #112]	; 0x70
   2d580:	687b      	ldr	r3, [r7, #4]
   2d582:	2290      	movs	r2, #144	; 0x90
   2d584:	2100      	movs	r1, #0
   2d586:	5099      	str	r1, [r3, r2]
   2d588:	687b      	ldr	r3, [r7, #4]
   2d58a:	229f      	movs	r2, #159	; 0x9f
   2d58c:	2100      	movs	r1, #0
   2d58e:	5499      	strb	r1, [r3, r2]
   2d590:	687b      	ldr	r3, [r7, #4]
   2d592:	2200      	movs	r2, #0
   2d594:	675a      	str	r2, [r3, #116]	; 0x74
   2d596:	687b      	ldr	r3, [r7, #4]
   2d598:	2294      	movs	r2, #148	; 0x94
   2d59a:	2100      	movs	r1, #0
   2d59c:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2d59e:	687b      	ldr	r3, [r7, #4]
   2d5a0:	22a0      	movs	r2, #160	; 0xa0
   2d5a2:	2101      	movs	r1, #1
   2d5a4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2d5a6:	687b      	ldr	r3, [r7, #4]
   2d5a8:	22a1      	movs	r2, #161	; 0xa1
   2d5aa:	2100      	movs	r1, #0
   2d5ac:	5499      	strb	r1, [r3, r2]
}
   2d5ae:	46c0      	nop			; (mov r8, r8)
   2d5b0:	46bd      	mov	sp, r7
   2d5b2:	b005      	add	sp, #20
   2d5b4:	bd90      	pop	{r4, r7, pc}
   2d5b6:	46c0      	nop			; (mov r8, r8)
   2d5b8:	0002d2b5 	.word	0x0002d2b5
   2d5bc:	0003db5c 	.word	0x0003db5c

0002d5c0 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2d5c0:	b580      	push	{r7, lr}
   2d5c2:	b086      	sub	sp, #24
   2d5c4:	af00      	add	r7, sp, #0
   2d5c6:	60b9      	str	r1, [r7, #8]
   2d5c8:	607a      	str	r2, [r7, #4]
   2d5ca:	230f      	movs	r3, #15
   2d5cc:	18fb      	adds	r3, r7, r3
   2d5ce:	1c02      	adds	r2, r0, #0
   2d5d0:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2d5d2:	2300      	movs	r3, #0
   2d5d4:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2d5d6:	2300      	movs	r3, #0
   2d5d8:	613b      	str	r3, [r7, #16]
   2d5da:	e01d      	b.n	2d618 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2d5dc:	68ba      	ldr	r2, [r7, #8]
   2d5de:	693b      	ldr	r3, [r7, #16]
   2d5e0:	18d3      	adds	r3, r2, r3
   2d5e2:	3310      	adds	r3, #16
   2d5e4:	781b      	ldrb	r3, [r3, #0]
   2d5e6:	2b01      	cmp	r3, #1
   2d5e8:	d113      	bne.n	2d612 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2d5ea:	230f      	movs	r3, #15
   2d5ec:	18fb      	adds	r3, r7, r3
   2d5ee:	781b      	ldrb	r3, [r3, #0]
   2d5f0:	4a1b      	ldr	r2, [pc, #108]	; (2d660 <_tcc_build_ctrla+0xa0>)
   2d5f2:	5cd3      	ldrb	r3, [r2, r3]
   2d5f4:	001a      	movs	r2, r3
   2d5f6:	693b      	ldr	r3, [r7, #16]
   2d5f8:	429a      	cmp	r2, r3
   2d5fa:	da01      	bge.n	2d600 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2d5fc:	2317      	movs	r3, #23
   2d5fe:	e02a      	b.n	2d656 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2d600:	2380      	movs	r3, #128	; 0x80
   2d602:	045a      	lsls	r2, r3, #17
   2d604:	693b      	ldr	r3, [r7, #16]
   2d606:	409a      	lsls	r2, r3
   2d608:	0013      	movs	r3, r2
   2d60a:	001a      	movs	r2, r3
   2d60c:	697b      	ldr	r3, [r7, #20]
   2d60e:	4313      	orrs	r3, r2
   2d610:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2d612:	693b      	ldr	r3, [r7, #16]
   2d614:	3301      	adds	r3, #1
   2d616:	613b      	str	r3, [r7, #16]
   2d618:	693b      	ldr	r3, [r7, #16]
   2d61a:	2b03      	cmp	r3, #3
   2d61c:	ddde      	ble.n	2d5dc <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2d61e:	68bb      	ldr	r3, [r7, #8]
   2d620:	22a1      	movs	r2, #161	; 0xa1
   2d622:	5c9b      	ldrb	r3, [r3, r2]
   2d624:	2b00      	cmp	r3, #0
   2d626:	d004      	beq.n	2d632 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2d628:	697b      	ldr	r3, [r7, #20]
   2d62a:	2280      	movs	r2, #128	; 0x80
   2d62c:	0112      	lsls	r2, r2, #4
   2d62e:	4313      	orrs	r3, r2
   2d630:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2d632:	68bb      	ldr	r3, [r7, #8]
   2d634:	7b1b      	ldrb	r3, [r3, #12]
   2d636:	031b      	lsls	r3, r3, #12
   2d638:	001a      	movs	r2, r3
   2d63a:	697b      	ldr	r3, [r7, #20]
   2d63c:	4313      	orrs	r3, r2
   2d63e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2d640:	68bb      	ldr	r3, [r7, #8]
   2d642:	7adb      	ldrb	r3, [r3, #11]
   2d644:	021b      	lsls	r3, r3, #8
   2d646:	001a      	movs	r2, r3
   2d648:	697b      	ldr	r3, [r7, #20]
   2d64a:	4313      	orrs	r3, r2
   2d64c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2d64e:	687b      	ldr	r3, [r7, #4]
   2d650:	697a      	ldr	r2, [r7, #20]
   2d652:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2d654:	2300      	movs	r3, #0
}
   2d656:	0018      	movs	r0, r3
   2d658:	46bd      	mov	sp, r7
   2d65a:	b006      	add	sp, #24
   2d65c:	bd80      	pop	{r7, pc}
   2d65e:	46c0      	nop			; (mov r8, r8)
   2d660:	0003db68 	.word	0x0003db68

0002d664 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2d664:	b580      	push	{r7, lr}
   2d666:	b086      	sub	sp, #24
   2d668:	af00      	add	r7, sp, #0
   2d66a:	60b9      	str	r1, [r7, #8]
   2d66c:	607a      	str	r2, [r7, #4]
   2d66e:	230f      	movs	r3, #15
   2d670:	18fb      	adds	r3, r7, r3
   2d672:	1c02      	adds	r2, r0, #0
   2d674:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2d676:	2317      	movs	r3, #23
   2d678:	18fb      	adds	r3, r7, r3
   2d67a:	2200      	movs	r2, #0
   2d67c:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2d67e:	68bb      	ldr	r3, [r7, #8]
   2d680:	7a1b      	ldrb	r3, [r3, #8]
   2d682:	2b00      	cmp	r3, #0
   2d684:	d007      	beq.n	2d696 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2d686:	2317      	movs	r3, #23
   2d688:	18fb      	adds	r3, r7, r3
   2d68a:	2217      	movs	r2, #23
   2d68c:	18ba      	adds	r2, r7, r2
   2d68e:	7812      	ldrb	r2, [r2, #0]
   2d690:	2104      	movs	r1, #4
   2d692:	430a      	orrs	r2, r1
   2d694:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2d696:	68bb      	ldr	r3, [r7, #8]
   2d698:	7a5b      	ldrb	r3, [r3, #9]
   2d69a:	2b01      	cmp	r3, #1
   2d69c:	d107      	bne.n	2d6ae <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2d69e:	2317      	movs	r3, #23
   2d6a0:	18fb      	adds	r3, r7, r3
   2d6a2:	2217      	movs	r2, #23
   2d6a4:	18ba      	adds	r2, r7, r2
   2d6a6:	7812      	ldrb	r2, [r2, #0]
   2d6a8:	2101      	movs	r1, #1
   2d6aa:	430a      	orrs	r2, r1
   2d6ac:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2d6ae:	687b      	ldr	r3, [r7, #4]
   2d6b0:	2217      	movs	r2, #23
   2d6b2:	18ba      	adds	r2, r7, r2
   2d6b4:	7812      	ldrb	r2, [r2, #0]
   2d6b6:	701a      	strb	r2, [r3, #0]
}
   2d6b8:	46c0      	nop			; (mov r8, r8)
   2d6ba:	46bd      	mov	sp, r7
   2d6bc:	b006      	add	sp, #24
   2d6be:	bd80      	pop	{r7, pc}

0002d6c0 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2d6c0:	b580      	push	{r7, lr}
   2d6c2:	b088      	sub	sp, #32
   2d6c4:	af00      	add	r7, sp, #0
   2d6c6:	60b9      	str	r1, [r7, #8]
   2d6c8:	607a      	str	r2, [r7, #4]
   2d6ca:	230f      	movs	r3, #15
   2d6cc:	18fb      	adds	r3, r7, r3
   2d6ce:	1c02      	adds	r2, r0, #0
   2d6d0:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2d6d2:	230f      	movs	r3, #15
   2d6d4:	18fb      	adds	r3, r7, r3
   2d6d6:	781a      	ldrb	r2, [r3, #0]
   2d6d8:	231b      	movs	r3, #27
   2d6da:	18fb      	adds	r3, r7, r3
   2d6dc:	493e      	ldr	r1, [pc, #248]	; (2d7d8 <_tcc_build_faults+0x118>)
   2d6de:	5c8a      	ldrb	r2, [r1, r2]
   2d6e0:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2d6e2:	2300      	movs	r3, #0
   2d6e4:	61fb      	str	r3, [r7, #28]
   2d6e6:	e06e      	b.n	2d7c6 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2d6e8:	69fa      	ldr	r2, [r7, #28]
   2d6ea:	0013      	movs	r3, r2
   2d6ec:	009b      	lsls	r3, r3, #2
   2d6ee:	189b      	adds	r3, r3, r2
   2d6f0:	005b      	lsls	r3, r3, #1
   2d6f2:	3328      	adds	r3, #40	; 0x28
   2d6f4:	68ba      	ldr	r2, [r7, #8]
   2d6f6:	18d3      	adds	r3, r2, r3
   2d6f8:	3304      	adds	r3, #4
   2d6fa:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2d6fc:	697b      	ldr	r3, [r7, #20]
   2d6fe:	7a5b      	ldrb	r3, [r3, #9]
   2d700:	221b      	movs	r2, #27
   2d702:	18ba      	adds	r2, r7, r2
   2d704:	7812      	ldrb	r2, [r2, #0]
   2d706:	429a      	cmp	r2, r3
   2d708:	d801      	bhi.n	2d70e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2d70a:	2317      	movs	r3, #23
   2d70c:	e05f      	b.n	2d7ce <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2d70e:	697b      	ldr	r3, [r7, #20]
   2d710:	781b      	ldrb	r3, [r3, #0]
   2d712:	2b0f      	cmp	r3, #15
   2d714:	d901      	bls.n	2d71a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2d716:	2317      	movs	r3, #23
   2d718:	e059      	b.n	2d7ce <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2d71a:	697b      	ldr	r3, [r7, #20]
   2d71c:	781b      	ldrb	r3, [r3, #0]
   2d71e:	061b      	lsls	r3, r3, #24
   2d720:	001a      	movs	r2, r3
   2d722:	23f0      	movs	r3, #240	; 0xf0
   2d724:	051b      	lsls	r3, r3, #20
   2d726:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2d728:	697b      	ldr	r3, [r7, #20]
   2d72a:	785b      	ldrb	r3, [r3, #1]
   2d72c:	041b      	lsls	r3, r3, #16
   2d72e:	0019      	movs	r1, r3
   2d730:	23ff      	movs	r3, #255	; 0xff
   2d732:	041b      	lsls	r3, r3, #16
   2d734:	400b      	ands	r3, r1
   2d736:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2d738:	697b      	ldr	r3, [r7, #20]
   2d73a:	789b      	ldrb	r3, [r3, #2]
   2d73c:	2b00      	cmp	r3, #0
   2d73e:	d001      	beq.n	2d744 <_tcc_build_faults+0x84>
   2d740:	2380      	movs	r3, #128	; 0x80
   2d742:	e000      	b.n	2d746 <_tcc_build_faults+0x86>
   2d744:	2300      	movs	r3, #0
   2d746:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2d748:	697b      	ldr	r3, [r7, #20]
   2d74a:	78db      	ldrb	r3, [r3, #3]
   2d74c:	2b00      	cmp	r3, #0
   2d74e:	d001      	beq.n	2d754 <_tcc_build_faults+0x94>
   2d750:	2308      	movs	r3, #8
   2d752:	e000      	b.n	2d756 <_tcc_build_faults+0x96>
   2d754:	2300      	movs	r3, #0
   2d756:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2d758:	697b      	ldr	r3, [r7, #20]
   2d75a:	791b      	ldrb	r3, [r3, #4]
   2d75c:	2b00      	cmp	r3, #0
   2d75e:	d001      	beq.n	2d764 <_tcc_build_faults+0xa4>
   2d760:	2310      	movs	r3, #16
   2d762:	e000      	b.n	2d766 <_tcc_build_faults+0xa6>
   2d764:	2300      	movs	r3, #0
   2d766:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2d768:	697b      	ldr	r3, [r7, #20]
   2d76a:	795b      	ldrb	r3, [r3, #5]
   2d76c:	0019      	movs	r1, r3
   2d76e:	2303      	movs	r3, #3
   2d770:	400b      	ands	r3, r1
   2d772:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2d774:	697b      	ldr	r3, [r7, #20]
   2d776:	799b      	ldrb	r3, [r3, #6]
   2d778:	015b      	lsls	r3, r3, #5
   2d77a:	0019      	movs	r1, r3
   2d77c:	2360      	movs	r3, #96	; 0x60
   2d77e:	400b      	ands	r3, r1
   2d780:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2d782:	697b      	ldr	r3, [r7, #20]
   2d784:	79db      	ldrb	r3, [r3, #7]
   2d786:	021b      	lsls	r3, r3, #8
   2d788:	0019      	movs	r1, r3
   2d78a:	23c0      	movs	r3, #192	; 0xc0
   2d78c:	009b      	lsls	r3, r3, #2
   2d78e:	400b      	ands	r3, r1
   2d790:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2d792:	697b      	ldr	r3, [r7, #20]
   2d794:	7a1b      	ldrb	r3, [r3, #8]
   2d796:	031b      	lsls	r3, r3, #12
   2d798:	0019      	movs	r1, r3
   2d79a:	23e0      	movs	r3, #224	; 0xe0
   2d79c:	01db      	lsls	r3, r3, #7
   2d79e:	400b      	ands	r3, r1
   2d7a0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2d7a2:	697b      	ldr	r3, [r7, #20]
   2d7a4:	7a5b      	ldrb	r3, [r3, #9]
   2d7a6:	029b      	lsls	r3, r3, #10
   2d7a8:	0019      	movs	r1, r3
   2d7aa:	23c0      	movs	r3, #192	; 0xc0
   2d7ac:	011b      	lsls	r3, r3, #4
   2d7ae:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2d7b0:	4313      	orrs	r3, r2
   2d7b2:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2d7b4:	69fb      	ldr	r3, [r7, #28]
   2d7b6:	009b      	lsls	r3, r3, #2
   2d7b8:	687a      	ldr	r2, [r7, #4]
   2d7ba:	18d3      	adds	r3, r2, r3
   2d7bc:	693a      	ldr	r2, [r7, #16]
   2d7be:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2d7c0:	69fb      	ldr	r3, [r7, #28]
   2d7c2:	3301      	adds	r3, #1
   2d7c4:	61fb      	str	r3, [r7, #28]
   2d7c6:	69fb      	ldr	r3, [r7, #28]
   2d7c8:	2b01      	cmp	r3, #1
   2d7ca:	dd8d      	ble.n	2d6e8 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2d7cc:	2300      	movs	r3, #0
}
   2d7ce:	0018      	movs	r0, r3
   2d7d0:	46bd      	mov	sp, r7
   2d7d2:	b008      	add	sp, #32
   2d7d4:	bd80      	pop	{r7, pc}
   2d7d6:	46c0      	nop			; (mov r8, r8)
   2d7d8:	0003db68 	.word	0x0003db68

0002d7dc <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2d7dc:	b580      	push	{r7, lr}
   2d7de:	b088      	sub	sp, #32
   2d7e0:	af00      	add	r7, sp, #0
   2d7e2:	60b9      	str	r1, [r7, #8]
   2d7e4:	607a      	str	r2, [r7, #4]
   2d7e6:	230f      	movs	r3, #15
   2d7e8:	18fb      	adds	r3, r7, r3
   2d7ea:	1c02      	adds	r2, r0, #0
   2d7ec:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2d7ee:	230f      	movs	r3, #15
   2d7f0:	18fb      	adds	r3, r7, r3
   2d7f2:	781a      	ldrb	r2, [r3, #0]
   2d7f4:	2317      	movs	r3, #23
   2d7f6:	18fb      	adds	r3, r7, r3
   2d7f8:	492d      	ldr	r1, [pc, #180]	; (2d8b0 <_tcc_build_drvctrl+0xd4>)
   2d7fa:	5c8a      	ldrb	r2, [r1, r2]
   2d7fc:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2d7fe:	2300      	movs	r3, #0
   2d800:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2d802:	2300      	movs	r3, #0
   2d804:	61fb      	str	r3, [r7, #28]
   2d806:	e048      	b.n	2d89a <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2d808:	68ba      	ldr	r2, [r7, #8]
   2d80a:	2150      	movs	r1, #80	; 0x50
   2d80c:	69fb      	ldr	r3, [r7, #28]
   2d80e:	18d3      	adds	r3, r2, r3
   2d810:	185b      	adds	r3, r3, r1
   2d812:	781b      	ldrb	r3, [r3, #0]
   2d814:	2b00      	cmp	r3, #0
   2d816:	d010      	beq.n	2d83a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2d818:	2317      	movs	r3, #23
   2d81a:	18fb      	adds	r3, r7, r3
   2d81c:	781a      	ldrb	r2, [r3, #0]
   2d81e:	69fb      	ldr	r3, [r7, #28]
   2d820:	429a      	cmp	r2, r3
   2d822:	d801      	bhi.n	2d828 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2d824:	2317      	movs	r3, #23
   2d826:	e03f      	b.n	2d8a8 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2d828:	2380      	movs	r3, #128	; 0x80
   2d82a:	025a      	lsls	r2, r3, #9
   2d82c:	69fb      	ldr	r3, [r7, #28]
   2d82e:	409a      	lsls	r2, r3
   2d830:	0013      	movs	r3, r2
   2d832:	001a      	movs	r2, r3
   2d834:	69bb      	ldr	r3, [r7, #24]
   2d836:	4313      	orrs	r3, r2
   2d838:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2d83a:	68ba      	ldr	r2, [r7, #8]
   2d83c:	69fb      	ldr	r3, [r7, #28]
   2d83e:	331c      	adds	r3, #28
   2d840:	005b      	lsls	r3, r3, #1
   2d842:	18d3      	adds	r3, r2, r3
   2d844:	3309      	adds	r3, #9
   2d846:	781b      	ldrb	r3, [r3, #0]
   2d848:	2b00      	cmp	r3, #0
   2d84a:	d023      	beq.n	2d894 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2d84c:	2317      	movs	r3, #23
   2d84e:	18fb      	adds	r3, r7, r3
   2d850:	781a      	ldrb	r2, [r3, #0]
   2d852:	69fb      	ldr	r3, [r7, #28]
   2d854:	429a      	cmp	r2, r3
   2d856:	d801      	bhi.n	2d85c <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2d858:	2317      	movs	r3, #23
   2d85a:	e025      	b.n	2d8a8 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2d85c:	68ba      	ldr	r2, [r7, #8]
   2d85e:	69fb      	ldr	r3, [r7, #28]
   2d860:	331c      	adds	r3, #28
   2d862:	005b      	lsls	r3, r3, #1
   2d864:	18d3      	adds	r3, r2, r3
   2d866:	3309      	adds	r3, #9
   2d868:	781b      	ldrb	r3, [r3, #0]
   2d86a:	2b02      	cmp	r3, #2
   2d86c:	d10a      	bne.n	2d884 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2d86e:	2302      	movs	r3, #2
   2d870:	33ff      	adds	r3, #255	; 0xff
   2d872:	001a      	movs	r2, r3
   2d874:	69fb      	ldr	r3, [r7, #28]
   2d876:	409a      	lsls	r2, r3
   2d878:	0013      	movs	r3, r2
   2d87a:	001a      	movs	r2, r3
   2d87c:	69bb      	ldr	r3, [r7, #24]
   2d87e:	4313      	orrs	r3, r2
   2d880:	61bb      	str	r3, [r7, #24]
   2d882:	e007      	b.n	2d894 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2d884:	2201      	movs	r2, #1
   2d886:	69fb      	ldr	r3, [r7, #28]
   2d888:	409a      	lsls	r2, r3
   2d88a:	0013      	movs	r3, r2
   2d88c:	001a      	movs	r2, r3
   2d88e:	69bb      	ldr	r3, [r7, #24]
   2d890:	4313      	orrs	r3, r2
   2d892:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2d894:	69fb      	ldr	r3, [r7, #28]
   2d896:	3301      	adds	r3, #1
   2d898:	61fb      	str	r3, [r7, #28]
   2d89a:	69fb      	ldr	r3, [r7, #28]
   2d89c:	2b07      	cmp	r3, #7
   2d89e:	d9b3      	bls.n	2d808 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2d8a0:	687b      	ldr	r3, [r7, #4]
   2d8a2:	69ba      	ldr	r2, [r7, #24]
   2d8a4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2d8a6:	2300      	movs	r3, #0
}
   2d8a8:	0018      	movs	r0, r3
   2d8aa:	46bd      	mov	sp, r7
   2d8ac:	b008      	add	sp, #32
   2d8ae:	bd80      	pop	{r7, pc}
   2d8b0:	0003db6c 	.word	0x0003db6c

0002d8b4 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2d8b4:	b580      	push	{r7, lr}
   2d8b6:	b088      	sub	sp, #32
   2d8b8:	af00      	add	r7, sp, #0
   2d8ba:	60b9      	str	r1, [r7, #8]
   2d8bc:	607a      	str	r2, [r7, #4]
   2d8be:	230f      	movs	r3, #15
   2d8c0:	18fb      	adds	r3, r7, r3
   2d8c2:	1c02      	adds	r2, r0, #0
   2d8c4:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2d8c6:	230f      	movs	r3, #15
   2d8c8:	18fb      	adds	r3, r7, r3
   2d8ca:	781a      	ldrb	r2, [r3, #0]
   2d8cc:	2317      	movs	r3, #23
   2d8ce:	18fb      	adds	r3, r7, r3
   2d8d0:	491d      	ldr	r1, [pc, #116]	; (2d948 <_tcc_build_waves+0x94>)
   2d8d2:	5c8a      	ldrb	r2, [r1, r2]
   2d8d4:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2d8d6:	68bb      	ldr	r3, [r7, #8]
   2d8d8:	3310      	adds	r3, #16
   2d8da:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2d8dc:	693b      	ldr	r3, [r7, #16]
   2d8de:	7a5b      	ldrb	r3, [r3, #9]
   2d8e0:	011b      	lsls	r3, r3, #4
   2d8e2:	001a      	movs	r2, r3
   2d8e4:	2330      	movs	r3, #48	; 0x30
   2d8e6:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2d8e8:	693b      	ldr	r3, [r7, #16]
   2d8ea:	7a1b      	ldrb	r3, [r3, #8]
   2d8ec:	0019      	movs	r1, r3
   2d8ee:	2307      	movs	r3, #7
   2d8f0:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2d8f2:	4313      	orrs	r3, r2
   2d8f4:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2d8f6:	2300      	movs	r3, #0
   2d8f8:	61fb      	str	r3, [r7, #28]
   2d8fa:	e01a      	b.n	2d932 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2d8fc:	693a      	ldr	r2, [r7, #16]
   2d8fe:	69fb      	ldr	r3, [r7, #28]
   2d900:	18d3      	adds	r3, r2, r3
   2d902:	3304      	adds	r3, #4
   2d904:	781b      	ldrb	r3, [r3, #0]
   2d906:	2b00      	cmp	r3, #0
   2d908:	d010      	beq.n	2d92c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2d90a:	2317      	movs	r3, #23
   2d90c:	18fb      	adds	r3, r7, r3
   2d90e:	781a      	ldrb	r2, [r3, #0]
   2d910:	69fb      	ldr	r3, [r7, #28]
   2d912:	429a      	cmp	r2, r3
   2d914:	dc01      	bgt.n	2d91a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2d916:	2317      	movs	r3, #23
   2d918:	e012      	b.n	2d940 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2d91a:	2380      	movs	r3, #128	; 0x80
   2d91c:	025a      	lsls	r2, r3, #9
   2d91e:	69fb      	ldr	r3, [r7, #28]
   2d920:	409a      	lsls	r2, r3
   2d922:	0013      	movs	r3, r2
   2d924:	001a      	movs	r2, r3
   2d926:	69bb      	ldr	r3, [r7, #24]
   2d928:	4313      	orrs	r3, r2
   2d92a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2d92c:	69fb      	ldr	r3, [r7, #28]
   2d92e:	3301      	adds	r3, #1
   2d930:	61fb      	str	r3, [r7, #28]
   2d932:	69fb      	ldr	r3, [r7, #28]
   2d934:	2b03      	cmp	r3, #3
   2d936:	dde1      	ble.n	2d8fc <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2d938:	687b      	ldr	r3, [r7, #4]
   2d93a:	69ba      	ldr	r2, [r7, #24]
   2d93c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2d93e:	2300      	movs	r3, #0
}
   2d940:	0018      	movs	r0, r3
   2d942:	46bd      	mov	sp, r7
   2d944:	b008      	add	sp, #32
   2d946:	bd80      	pop	{r7, pc}
   2d948:	0003db68 	.word	0x0003db68

0002d94c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2d94c:	b590      	push	{r4, r7, lr}
   2d94e:	b091      	sub	sp, #68	; 0x44
   2d950:	af00      	add	r7, sp, #0
   2d952:	60f8      	str	r0, [r7, #12]
   2d954:	60b9      	str	r1, [r7, #8]
   2d956:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2d958:	233b      	movs	r3, #59	; 0x3b
   2d95a:	18fc      	adds	r4, r7, r3
   2d95c:	68bb      	ldr	r3, [r7, #8]
   2d95e:	0018      	movs	r0, r3
   2d960:	4bc4      	ldr	r3, [pc, #784]	; (2dc74 <tcc_init+0x328>)
   2d962:	4798      	blx	r3
   2d964:	0003      	movs	r3, r0
   2d966:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2d968:	233b      	movs	r3, #59	; 0x3b
   2d96a:	18fb      	adds	r3, r7, r3
   2d96c:	781a      	ldrb	r2, [r3, #0]
   2d96e:	4bc2      	ldr	r3, [pc, #776]	; (2dc78 <tcc_init+0x32c>)
   2d970:	0092      	lsls	r2, r2, #2
   2d972:	58d3      	ldr	r3, [r2, r3]
   2d974:	0019      	movs	r1, r3
   2d976:	2002      	movs	r0, #2
   2d978:	4bc0      	ldr	r3, [pc, #768]	; (2dc7c <tcc_init+0x330>)
   2d97a:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2d97c:	68bb      	ldr	r3, [r7, #8]
   2d97e:	681b      	ldr	r3, [r3, #0]
   2d980:	2202      	movs	r2, #2
   2d982:	4013      	ands	r3, r2
   2d984:	d001      	beq.n	2d98a <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2d986:	231c      	movs	r3, #28
   2d988:	e1be      	b.n	2dd08 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2d98a:	68bb      	ldr	r3, [r7, #8]
   2d98c:	681b      	ldr	r3, [r3, #0]
   2d98e:	2201      	movs	r2, #1
   2d990:	4013      	ands	r3, r2
   2d992:	d001      	beq.n	2d998 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2d994:	231c      	movs	r3, #28
   2d996:	e1b7      	b.n	2dd08 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2d998:	233b      	movs	r3, #59	; 0x3b
   2d99a:	18fb      	adds	r3, r7, r3
   2d99c:	781a      	ldrb	r2, [r3, #0]
   2d99e:	4bb8      	ldr	r3, [pc, #736]	; (2dc80 <tcc_init+0x334>)
   2d9a0:	0092      	lsls	r2, r2, #2
   2d9a2:	58d3      	ldr	r3, [r2, r3]
   2d9a4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2d9a6:	687b      	ldr	r3, [r7, #4]
   2d9a8:	681a      	ldr	r2, [r3, #0]
   2d9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d9ac:	429a      	cmp	r2, r3
   2d9ae:	d804      	bhi.n	2d9ba <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2d9b0:	687b      	ldr	r3, [r7, #4]
   2d9b2:	685a      	ldr	r2, [r3, #4]
   2d9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d9b6:	429a      	cmp	r2, r3
   2d9b8:	d901      	bls.n	2d9be <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2d9ba:	2317      	movs	r3, #23
   2d9bc:	e1a4      	b.n	2dd08 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2d9be:	2300      	movs	r3, #0
   2d9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d9c2:	e00e      	b.n	2d9e2 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2d9c4:	687a      	ldr	r2, [r7, #4]
   2d9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d9c8:	3306      	adds	r3, #6
   2d9ca:	009b      	lsls	r3, r3, #2
   2d9cc:	18d3      	adds	r3, r2, r3
   2d9ce:	3304      	adds	r3, #4
   2d9d0:	681a      	ldr	r2, [r3, #0]
   2d9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d9d4:	429a      	cmp	r2, r3
   2d9d6:	d901      	bls.n	2d9dc <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2d9d8:	2317      	movs	r3, #23
   2d9da:	e195      	b.n	2dd08 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2d9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d9de:	3301      	adds	r3, #1
   2d9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d9e4:	2b03      	cmp	r3, #3
   2d9e6:	dded      	ble.n	2d9c4 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2d9e8:	2300      	movs	r3, #0
   2d9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d9ec:	e019      	b.n	2da22 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2d9ee:	687a      	ldr	r2, [r7, #4]
   2d9f0:	2198      	movs	r1, #152	; 0x98
   2d9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d9f4:	18d3      	adds	r3, r2, r3
   2d9f6:	185b      	adds	r3, r3, r1
   2d9f8:	781b      	ldrb	r3, [r3, #0]
   2d9fa:	2201      	movs	r2, #1
   2d9fc:	4053      	eors	r3, r2
   2d9fe:	b2db      	uxtb	r3, r3
   2da00:	2b00      	cmp	r3, #0
   2da02:	d10a      	bne.n	2da1a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2da04:	233b      	movs	r3, #59	; 0x3b
   2da06:	18fb      	adds	r3, r7, r3
   2da08:	781b      	ldrb	r3, [r3, #0]
   2da0a:	4a9e      	ldr	r2, [pc, #632]	; (2dc84 <tcc_init+0x338>)
   2da0c:	5cd3      	ldrb	r3, [r2, r3]
   2da0e:	001a      	movs	r2, r3
   2da10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2da12:	429a      	cmp	r2, r3
   2da14:	dc02      	bgt.n	2da1c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2da16:	2317      	movs	r3, #23
   2da18:	e176      	b.n	2dd08 <tcc_init+0x3bc>
			continue;
   2da1a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2da1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2da1e:	3301      	adds	r3, #1
   2da20:	63fb      	str	r3, [r7, #60]	; 0x3c
   2da22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2da24:	2b07      	cmp	r3, #7
   2da26:	dde2      	ble.n	2d9ee <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2da28:	2300      	movs	r3, #0
   2da2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2da2c:	2333      	movs	r3, #51	; 0x33
   2da2e:	18fc      	adds	r4, r7, r3
   2da30:	232c      	movs	r3, #44	; 0x2c
   2da32:	18fa      	adds	r2, r7, r3
   2da34:	6879      	ldr	r1, [r7, #4]
   2da36:	233b      	movs	r3, #59	; 0x3b
   2da38:	18fb      	adds	r3, r7, r3
   2da3a:	781b      	ldrb	r3, [r3, #0]
   2da3c:	0018      	movs	r0, r3
   2da3e:	4b92      	ldr	r3, [pc, #584]	; (2dc88 <tcc_init+0x33c>)
   2da40:	4798      	blx	r3
   2da42:	0003      	movs	r3, r0
   2da44:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2da46:	2333      	movs	r3, #51	; 0x33
   2da48:	18fb      	adds	r3, r7, r3
   2da4a:	781b      	ldrb	r3, [r3, #0]
   2da4c:	2b00      	cmp	r3, #0
   2da4e:	d003      	beq.n	2da58 <tcc_init+0x10c>
		return status;
   2da50:	2333      	movs	r3, #51	; 0x33
   2da52:	18fb      	adds	r3, r7, r3
   2da54:	781b      	ldrb	r3, [r3, #0]
   2da56:	e157      	b.n	2dd08 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2da58:	232b      	movs	r3, #43	; 0x2b
   2da5a:	18fa      	adds	r2, r7, r3
   2da5c:	6879      	ldr	r1, [r7, #4]
   2da5e:	233b      	movs	r3, #59	; 0x3b
   2da60:	18fb      	adds	r3, r7, r3
   2da62:	781b      	ldrb	r3, [r3, #0]
   2da64:	0018      	movs	r0, r3
   2da66:	4b89      	ldr	r3, [pc, #548]	; (2dc8c <tcc_init+0x340>)
   2da68:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2da6a:	2333      	movs	r3, #51	; 0x33
   2da6c:	18fc      	adds	r4, r7, r3
   2da6e:	2320      	movs	r3, #32
   2da70:	18fa      	adds	r2, r7, r3
   2da72:	6879      	ldr	r1, [r7, #4]
   2da74:	233b      	movs	r3, #59	; 0x3b
   2da76:	18fb      	adds	r3, r7, r3
   2da78:	781b      	ldrb	r3, [r3, #0]
   2da7a:	0018      	movs	r0, r3
   2da7c:	4b84      	ldr	r3, [pc, #528]	; (2dc90 <tcc_init+0x344>)
   2da7e:	4798      	blx	r3
   2da80:	0003      	movs	r3, r0
   2da82:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2da84:	2333      	movs	r3, #51	; 0x33
   2da86:	18fb      	adds	r3, r7, r3
   2da88:	781b      	ldrb	r3, [r3, #0]
   2da8a:	2b00      	cmp	r3, #0
   2da8c:	d003      	beq.n	2da96 <tcc_init+0x14a>
		return status;
   2da8e:	2333      	movs	r3, #51	; 0x33
   2da90:	18fb      	adds	r3, r7, r3
   2da92:	781b      	ldrb	r3, [r3, #0]
   2da94:	e138      	b.n	2dd08 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2da96:	2300      	movs	r3, #0
   2da98:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2da9a:	2333      	movs	r3, #51	; 0x33
   2da9c:	18fc      	adds	r4, r7, r3
   2da9e:	231c      	movs	r3, #28
   2daa0:	18fa      	adds	r2, r7, r3
   2daa2:	6879      	ldr	r1, [r7, #4]
   2daa4:	233b      	movs	r3, #59	; 0x3b
   2daa6:	18fb      	adds	r3, r7, r3
   2daa8:	781b      	ldrb	r3, [r3, #0]
   2daaa:	0018      	movs	r0, r3
   2daac:	4b79      	ldr	r3, [pc, #484]	; (2dc94 <tcc_init+0x348>)
   2daae:	4798      	blx	r3
   2dab0:	0003      	movs	r3, r0
   2dab2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2dab4:	2333      	movs	r3, #51	; 0x33
   2dab6:	18fb      	adds	r3, r7, r3
   2dab8:	781b      	ldrb	r3, [r3, #0]
   2daba:	2b00      	cmp	r3, #0
   2dabc:	d003      	beq.n	2dac6 <tcc_init+0x17a>
		return status;
   2dabe:	2333      	movs	r3, #51	; 0x33
   2dac0:	18fb      	adds	r3, r7, r3
   2dac2:	781b      	ldrb	r3, [r3, #0]
   2dac4:	e120      	b.n	2dd08 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2dac6:	2333      	movs	r3, #51	; 0x33
   2dac8:	18fc      	adds	r4, r7, r3
   2daca:	2318      	movs	r3, #24
   2dacc:	18fa      	adds	r2, r7, r3
   2dace:	6879      	ldr	r1, [r7, #4]
   2dad0:	233b      	movs	r3, #59	; 0x3b
   2dad2:	18fb      	adds	r3, r7, r3
   2dad4:	781b      	ldrb	r3, [r3, #0]
   2dad6:	0018      	movs	r0, r3
   2dad8:	4b6f      	ldr	r3, [pc, #444]	; (2dc98 <tcc_init+0x34c>)
   2dada:	4798      	blx	r3
   2dadc:	0003      	movs	r3, r0
   2dade:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2dae0:	2333      	movs	r3, #51	; 0x33
   2dae2:	18fb      	adds	r3, r7, r3
   2dae4:	781b      	ldrb	r3, [r3, #0]
   2dae6:	2b00      	cmp	r3, #0
   2dae8:	d003      	beq.n	2daf2 <tcc_init+0x1a6>
		return status;
   2daea:	2333      	movs	r3, #51	; 0x33
   2daec:	18fb      	adds	r3, r7, r3
   2daee:	781b      	ldrb	r3, [r3, #0]
   2daf0:	e10a      	b.n	2dd08 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2daf2:	2300      	movs	r3, #0
   2daf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2daf6:	e009      	b.n	2db0c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2daf8:	68fa      	ldr	r2, [r7, #12]
   2dafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dafc:	009b      	lsls	r3, r3, #2
   2dafe:	18d3      	adds	r3, r2, r3
   2db00:	3304      	adds	r3, #4
   2db02:	2200      	movs	r2, #0
   2db04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2db06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2db08:	3301      	adds	r3, #1
   2db0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2db0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2db0e:	2b0b      	cmp	r3, #11
   2db10:	ddf2      	ble.n	2daf8 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2db12:	68fb      	ldr	r3, [r7, #12]
   2db14:	2200      	movs	r2, #0
   2db16:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2db18:	68fb      	ldr	r3, [r7, #12]
   2db1a:	2200      	movs	r2, #0
   2db1c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2db1e:	233b      	movs	r3, #59	; 0x3b
   2db20:	18fb      	adds	r3, r7, r3
   2db22:	781a      	ldrb	r2, [r3, #0]
   2db24:	4b5d      	ldr	r3, [pc, #372]	; (2dc9c <tcc_init+0x350>)
   2db26:	0092      	lsls	r2, r2, #2
   2db28:	68f9      	ldr	r1, [r7, #12]
   2db2a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2db2c:	68fb      	ldr	r3, [r7, #12]
   2db2e:	68ba      	ldr	r2, [r7, #8]
   2db30:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2db32:	687b      	ldr	r3, [r7, #4]
   2db34:	22a0      	movs	r2, #160	; 0xa0
   2db36:	5c99      	ldrb	r1, [r3, r2]
   2db38:	68fb      	ldr	r3, [r7, #12]
   2db3a:	223c      	movs	r2, #60	; 0x3c
   2db3c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2db3e:	2314      	movs	r3, #20
   2db40:	18fb      	adds	r3, r7, r3
   2db42:	0018      	movs	r0, r3
   2db44:	4b56      	ldr	r3, [pc, #344]	; (2dca0 <tcc_init+0x354>)
   2db46:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2db48:	687b      	ldr	r3, [r7, #4]
   2db4a:	7a9a      	ldrb	r2, [r3, #10]
   2db4c:	2314      	movs	r3, #20
   2db4e:	18fb      	adds	r3, r7, r3
   2db50:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2db52:	233b      	movs	r3, #59	; 0x3b
   2db54:	18fb      	adds	r3, r7, r3
   2db56:	781b      	ldrb	r3, [r3, #0]
   2db58:	4a52      	ldr	r2, [pc, #328]	; (2dca4 <tcc_init+0x358>)
   2db5a:	5cd3      	ldrb	r3, [r2, r3]
   2db5c:	2214      	movs	r2, #20
   2db5e:	18ba      	adds	r2, r7, r2
   2db60:	0011      	movs	r1, r2
   2db62:	0018      	movs	r0, r3
   2db64:	4b50      	ldr	r3, [pc, #320]	; (2dca8 <tcc_init+0x35c>)
   2db66:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2db68:	233b      	movs	r3, #59	; 0x3b
   2db6a:	18fb      	adds	r3, r7, r3
   2db6c:	781b      	ldrb	r3, [r3, #0]
   2db6e:	4a4d      	ldr	r2, [pc, #308]	; (2dca4 <tcc_init+0x358>)
   2db70:	5cd3      	ldrb	r3, [r2, r3]
   2db72:	0018      	movs	r0, r3
   2db74:	4b4d      	ldr	r3, [pc, #308]	; (2dcac <tcc_init+0x360>)
   2db76:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2db78:	2300      	movs	r3, #0
   2db7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2db7c:	e02d      	b.n	2dbda <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2db7e:	687a      	ldr	r2, [r7, #4]
   2db80:	2198      	movs	r1, #152	; 0x98
   2db82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2db84:	18d3      	adds	r3, r2, r3
   2db86:	185b      	adds	r3, r3, r1
   2db88:	781b      	ldrb	r3, [r3, #0]
   2db8a:	2201      	movs	r2, #1
   2db8c:	4053      	eors	r3, r2
   2db8e:	b2db      	uxtb	r3, r3
   2db90:	2b00      	cmp	r3, #0
   2db92:	d11e      	bne.n	2dbd2 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2db94:	2310      	movs	r3, #16
   2db96:	18fb      	adds	r3, r7, r3
   2db98:	0018      	movs	r0, r3
   2db9a:	4b45      	ldr	r3, [pc, #276]	; (2dcb0 <tcc_init+0x364>)
   2db9c:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2db9e:	687b      	ldr	r3, [r7, #4]
   2dba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2dba2:	321e      	adds	r2, #30
   2dba4:	0092      	lsls	r2, r2, #2
   2dba6:	58d3      	ldr	r3, [r2, r3]
   2dba8:	b2da      	uxtb	r2, r3
   2dbaa:	2310      	movs	r3, #16
   2dbac:	18fb      	adds	r3, r7, r3
   2dbae:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2dbb0:	2310      	movs	r3, #16
   2dbb2:	18fb      	adds	r3, r7, r3
   2dbb4:	2201      	movs	r2, #1
   2dbb6:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2dbb8:	687b      	ldr	r3, [r7, #4]
   2dbba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2dbbc:	3216      	adds	r2, #22
   2dbbe:	0092      	lsls	r2, r2, #2
   2dbc0:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2dbc2:	b2db      	uxtb	r3, r3
   2dbc4:	2210      	movs	r2, #16
   2dbc6:	18ba      	adds	r2, r7, r2
   2dbc8:	0011      	movs	r1, r2
   2dbca:	0018      	movs	r0, r3
   2dbcc:	4b39      	ldr	r3, [pc, #228]	; (2dcb4 <tcc_init+0x368>)
   2dbce:	4798      	blx	r3
   2dbd0:	e000      	b.n	2dbd4 <tcc_init+0x288>
			continue;
   2dbd2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2dbd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dbd6:	3301      	adds	r3, #1
   2dbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2dbda:	233b      	movs	r3, #59	; 0x3b
   2dbdc:	18fb      	adds	r3, r7, r3
   2dbde:	781b      	ldrb	r3, [r3, #0]
   2dbe0:	4a28      	ldr	r2, [pc, #160]	; (2dc84 <tcc_init+0x338>)
   2dbe2:	5cd3      	ldrb	r3, [r2, r3]
   2dbe4:	001a      	movs	r2, r3
   2dbe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dbe8:	429a      	cmp	r2, r3
   2dbea:	dcc8      	bgt.n	2db7e <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2dbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2dbee:	68bb      	ldr	r3, [r7, #8]
   2dbf0:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2dbf2:	46c0      	nop			; (mov r8, r8)
   2dbf4:	68bb      	ldr	r3, [r7, #8]
   2dbf6:	689b      	ldr	r3, [r3, #8]
   2dbf8:	2204      	movs	r2, #4
   2dbfa:	4013      	ands	r3, r2
   2dbfc:	d1fa      	bne.n	2dbf4 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2dbfe:	68bb      	ldr	r3, [r7, #8]
   2dc00:	22ff      	movs	r2, #255	; 0xff
   2dc02:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2dc04:	46c0      	nop			; (mov r8, r8)
   2dc06:	68bb      	ldr	r3, [r7, #8]
   2dc08:	689b      	ldr	r3, [r3, #8]
   2dc0a:	2204      	movs	r2, #4
   2dc0c:	4013      	ands	r3, r2
   2dc0e:	d1fa      	bne.n	2dc06 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2dc10:	232b      	movs	r3, #43	; 0x2b
   2dc12:	18fb      	adds	r3, r7, r3
   2dc14:	781a      	ldrb	r2, [r3, #0]
   2dc16:	68bb      	ldr	r3, [r7, #8]
   2dc18:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2dc1a:	2320      	movs	r3, #32
   2dc1c:	18fb      	adds	r3, r7, r3
   2dc1e:	681a      	ldr	r2, [r3, #0]
   2dc20:	68bb      	ldr	r3, [r7, #8]
   2dc22:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2dc24:	2320      	movs	r3, #32
   2dc26:	18fb      	adds	r3, r7, r3
   2dc28:	685a      	ldr	r2, [r3, #4]
   2dc2a:	68bb      	ldr	r3, [r7, #8]
   2dc2c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2dc2e:	69fa      	ldr	r2, [r7, #28]
   2dc30:	68bb      	ldr	r3, [r7, #8]
   2dc32:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2dc34:	46c0      	nop			; (mov r8, r8)
   2dc36:	68bb      	ldr	r3, [r7, #8]
   2dc38:	689b      	ldr	r3, [r3, #8]
   2dc3a:	4a1f      	ldr	r2, [pc, #124]	; (2dcb8 <tcc_init+0x36c>)
   2dc3c:	4013      	ands	r3, r2
   2dc3e:	d1fa      	bne.n	2dc36 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2dc40:	69ba      	ldr	r2, [r7, #24]
   2dc42:	68bb      	ldr	r3, [r7, #8]
   2dc44:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2dc46:	46c0      	nop			; (mov r8, r8)
   2dc48:	68bb      	ldr	r3, [r7, #8]
   2dc4a:	689b      	ldr	r3, [r3, #8]
   2dc4c:	2210      	movs	r2, #16
   2dc4e:	4013      	ands	r3, r2
   2dc50:	d1fa      	bne.n	2dc48 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2dc52:	687b      	ldr	r3, [r7, #4]
   2dc54:	681a      	ldr	r2, [r3, #0]
   2dc56:	68bb      	ldr	r3, [r7, #8]
   2dc58:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2dc5a:	46c0      	nop			; (mov r8, r8)
   2dc5c:	68bb      	ldr	r3, [r7, #8]
   2dc5e:	689b      	ldr	r3, [r3, #8]
   2dc60:	4a16      	ldr	r2, [pc, #88]	; (2dcbc <tcc_init+0x370>)
   2dc62:	4013      	ands	r3, r2
   2dc64:	d1fa      	bne.n	2dc5c <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2dc66:	687b      	ldr	r3, [r7, #4]
   2dc68:	685a      	ldr	r2, [r3, #4]
   2dc6a:	68bb      	ldr	r3, [r7, #8]
   2dc6c:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2dc6e:	2300      	movs	r3, #0
   2dc70:	63fb      	str	r3, [r7, #60]	; 0x3c
   2dc72:	e03f      	b.n	2dcf4 <tcc_init+0x3a8>
   2dc74:	0002d2b5 	.word	0x0002d2b5
   2dc78:	0003db50 	.word	0x0003db50
   2dc7c:	0002d231 	.word	0x0002d231
   2dc80:	0003db5c 	.word	0x0003db5c
   2dc84:	0003db6c 	.word	0x0003db6c
   2dc88:	0002d5c1 	.word	0x0002d5c1
   2dc8c:	0002d665 	.word	0x0002d665
   2dc90:	0002d6c1 	.word	0x0002d6c1
   2dc94:	0002d7dd 	.word	0x0002d7dd
   2dc98:	0002d8b5 	.word	0x0002d8b5
   2dc9c:	20005c38 	.word	0x20005c38
   2dca0:	0002d219 	.word	0x0002d219
   2dca4:	0003db4c 	.word	0x0003db4c
   2dca8:	0002ce31 	.word	0x0002ce31
   2dcac:	0002ce75 	.word	0x0002ce75
   2dcb0:	0002d28d 	.word	0x0002d28d
   2dcb4:	0002d191 	.word	0x0002d191
   2dcb8:	00020040 	.word	0x00020040
   2dcbc:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2dcc0:	46c0      	nop			; (mov r8, r8)
   2dcc2:	68bb      	ldr	r3, [r7, #8]
   2dcc4:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2dcc6:	4912      	ldr	r1, [pc, #72]	; (2dd10 <tcc_init+0x3c4>)
   2dcc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2dcca:	4091      	lsls	r1, r2
   2dccc:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2dcce:	4013      	ands	r3, r2
   2dcd0:	d1f7      	bne.n	2dcc2 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2dcd2:	687a      	ldr	r2, [r7, #4]
   2dcd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dcd6:	3306      	adds	r3, #6
   2dcd8:	009b      	lsls	r3, r3, #2
   2dcda:	18d3      	adds	r3, r2, r3
   2dcdc:	3304      	adds	r3, #4
   2dcde:	681a      	ldr	r2, [r3, #0]
   2dce0:	68b9      	ldr	r1, [r7, #8]
   2dce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dce4:	3310      	adds	r3, #16
   2dce6:	009b      	lsls	r3, r3, #2
   2dce8:	18cb      	adds	r3, r1, r3
   2dcea:	3304      	adds	r3, #4
   2dcec:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2dcee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dcf0:	3301      	adds	r3, #1
   2dcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2dcf4:	233b      	movs	r3, #59	; 0x3b
   2dcf6:	18fb      	adds	r3, r7, r3
   2dcf8:	781b      	ldrb	r3, [r3, #0]
   2dcfa:	4a06      	ldr	r2, [pc, #24]	; (2dd14 <tcc_init+0x3c8>)
   2dcfc:	5cd3      	ldrb	r3, [r2, r3]
   2dcfe:	001a      	movs	r2, r3
   2dd00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2dd02:	429a      	cmp	r2, r3
   2dd04:	dcdc      	bgt.n	2dcc0 <tcc_init+0x374>
	}

	return STATUS_OK;
   2dd06:	2300      	movs	r3, #0
}
   2dd08:	0018      	movs	r0, r3
   2dd0a:	46bd      	mov	sp, r7
   2dd0c:	b011      	add	sp, #68	; 0x44
   2dd0e:	bd90      	pop	{r4, r7, pc}
   2dd10:	00080100 	.word	0x00080100
   2dd14:	0003db68 	.word	0x0003db68

0002dd18 <system_interrupt_enable>:
{
   2dd18:	b580      	push	{r7, lr}
   2dd1a:	b082      	sub	sp, #8
   2dd1c:	af00      	add	r7, sp, #0
   2dd1e:	0002      	movs	r2, r0
   2dd20:	1dfb      	adds	r3, r7, #7
   2dd22:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2dd24:	4b06      	ldr	r3, [pc, #24]	; (2dd40 <system_interrupt_enable+0x28>)
   2dd26:	1dfa      	adds	r2, r7, #7
   2dd28:	7812      	ldrb	r2, [r2, #0]
   2dd2a:	0011      	movs	r1, r2
   2dd2c:	221f      	movs	r2, #31
   2dd2e:	400a      	ands	r2, r1
   2dd30:	2101      	movs	r1, #1
   2dd32:	4091      	lsls	r1, r2
   2dd34:	000a      	movs	r2, r1
   2dd36:	601a      	str	r2, [r3, #0]
}
   2dd38:	46c0      	nop			; (mov r8, r8)
   2dd3a:	46bd      	mov	sp, r7
   2dd3c:	b002      	add	sp, #8
   2dd3e:	bd80      	pop	{r7, pc}
   2dd40:	e000e100 	.word	0xe000e100

0002dd44 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2dd44:	b580      	push	{r7, lr}
   2dd46:	b082      	sub	sp, #8
   2dd48:	af00      	add	r7, sp, #0
   2dd4a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2dd4c:	4a04      	ldr	r2, [pc, #16]	; (2dd60 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2dd4e:	687b      	ldr	r3, [r7, #4]
   2dd50:	18d3      	adds	r3, r2, r3
   2dd52:	781b      	ldrb	r3, [r3, #0]
   2dd54:	b25b      	sxtb	r3, r3
}
   2dd56:	0018      	movs	r0, r3
   2dd58:	46bd      	mov	sp, r7
   2dd5a:	b002      	add	sp, #8
   2dd5c:	bd80      	pop	{r7, pc}
   2dd5e:	46c0      	nop			; (mov r8, r8)
   2dd60:	200001a4 	.word	0x200001a4

0002dd64 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2dd64:	b580      	push	{r7, lr}
   2dd66:	b084      	sub	sp, #16
   2dd68:	af00      	add	r7, sp, #0
   2dd6a:	60f8      	str	r0, [r7, #12]
   2dd6c:	60b9      	str	r1, [r7, #8]
   2dd6e:	1dfb      	adds	r3, r7, #7
   2dd70:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2dd72:	1dfb      	adds	r3, r7, #7
   2dd74:	781b      	ldrb	r3, [r3, #0]
   2dd76:	68fa      	ldr	r2, [r7, #12]
   2dd78:	009b      	lsls	r3, r3, #2
   2dd7a:	18d3      	adds	r3, r2, r3
   2dd7c:	3304      	adds	r3, #4
   2dd7e:	68ba      	ldr	r2, [r7, #8]
   2dd80:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2dd82:	68fb      	ldr	r3, [r7, #12]
   2dd84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2dd86:	1dfb      	adds	r3, r7, #7
   2dd88:	7819      	ldrb	r1, [r3, #0]
   2dd8a:	4b05      	ldr	r3, [pc, #20]	; (2dda0 <tcc_register_callback+0x3c>)
   2dd8c:	0089      	lsls	r1, r1, #2
   2dd8e:	58cb      	ldr	r3, [r1, r3]
   2dd90:	431a      	orrs	r2, r3
   2dd92:	68fb      	ldr	r3, [r7, #12]
   2dd94:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2dd96:	2300      	movs	r3, #0
}
   2dd98:	0018      	movs	r0, r3
   2dd9a:	46bd      	mov	sp, r7
   2dd9c:	b004      	add	sp, #16
   2dd9e:	bd80      	pop	{r7, pc}
   2dda0:	0003db70 	.word	0x0003db70

0002dda4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2dda4:	b580      	push	{r7, lr}
   2dda6:	b082      	sub	sp, #8
   2dda8:	af00      	add	r7, sp, #0
   2ddaa:	6078      	str	r0, [r7, #4]
   2ddac:	000a      	movs	r2, r1
   2ddae:	1cfb      	adds	r3, r7, #3
   2ddb0:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2ddb2:	687b      	ldr	r3, [r7, #4]
   2ddb4:	681b      	ldr	r3, [r3, #0]
   2ddb6:	0018      	movs	r0, r3
   2ddb8:	4b0f      	ldr	r3, [pc, #60]	; (2ddf8 <tcc_enable_callback+0x54>)
   2ddba:	4798      	blx	r3
   2ddbc:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2ddbe:	0018      	movs	r0, r3
   2ddc0:	4b0e      	ldr	r3, [pc, #56]	; (2ddfc <tcc_enable_callback+0x58>)
   2ddc2:	4798      	blx	r3
   2ddc4:	0003      	movs	r3, r0
   2ddc6:	0018      	movs	r0, r3
   2ddc8:	4b0d      	ldr	r3, [pc, #52]	; (2de00 <tcc_enable_callback+0x5c>)
   2ddca:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2ddcc:	687b      	ldr	r3, [r7, #4]
   2ddce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ddd0:	1cfb      	adds	r3, r7, #3
   2ddd2:	7819      	ldrb	r1, [r3, #0]
   2ddd4:	4b0b      	ldr	r3, [pc, #44]	; (2de04 <tcc_enable_callback+0x60>)
   2ddd6:	0089      	lsls	r1, r1, #2
   2ddd8:	58cb      	ldr	r3, [r1, r3]
   2ddda:	431a      	orrs	r2, r3
   2dddc:	687b      	ldr	r3, [r7, #4]
   2ddde:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2dde0:	687b      	ldr	r3, [r7, #4]
   2dde2:	681b      	ldr	r3, [r3, #0]
   2dde4:	1cfa      	adds	r2, r7, #3
   2dde6:	7811      	ldrb	r1, [r2, #0]
   2dde8:	4a06      	ldr	r2, [pc, #24]	; (2de04 <tcc_enable_callback+0x60>)
   2ddea:	0089      	lsls	r1, r1, #2
   2ddec:	588a      	ldr	r2, [r1, r2]
   2ddee:	629a      	str	r2, [r3, #40]	; 0x28
}
   2ddf0:	46c0      	nop			; (mov r8, r8)
   2ddf2:	46bd      	mov	sp, r7
   2ddf4:	b002      	add	sp, #8
   2ddf6:	bd80      	pop	{r7, pc}
   2ddf8:	0002d2b5 	.word	0x0002d2b5
   2ddfc:	0002dd45 	.word	0x0002dd45
   2de00:	0002dd19 	.word	0x0002dd19
   2de04:	0003db70 	.word	0x0003db70

0002de08 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2de08:	b580      	push	{r7, lr}
   2de0a:	af00      	add	r7, sp, #0
   2de0c:	2000      	movs	r0, #0
   2de0e:	4b02      	ldr	r3, [pc, #8]	; (2de18 <TCC0_Handler+0x10>)
   2de10:	4798      	blx	r3
   2de12:	46c0      	nop			; (mov r8, r8)
   2de14:	46bd      	mov	sp, r7
   2de16:	bd80      	pop	{r7, pc}
   2de18:	0002de45 	.word	0x0002de45

0002de1c <TCC1_Handler>:
   2de1c:	b580      	push	{r7, lr}
   2de1e:	af00      	add	r7, sp, #0
   2de20:	2001      	movs	r0, #1
   2de22:	4b02      	ldr	r3, [pc, #8]	; (2de2c <TCC1_Handler+0x10>)
   2de24:	4798      	blx	r3
   2de26:	46c0      	nop			; (mov r8, r8)
   2de28:	46bd      	mov	sp, r7
   2de2a:	bd80      	pop	{r7, pc}
   2de2c:	0002de45 	.word	0x0002de45

0002de30 <TCC2_Handler>:
   2de30:	b580      	push	{r7, lr}
   2de32:	af00      	add	r7, sp, #0
   2de34:	2002      	movs	r0, #2
   2de36:	4b02      	ldr	r3, [pc, #8]	; (2de40 <TCC2_Handler+0x10>)
   2de38:	4798      	blx	r3
   2de3a:	46c0      	nop			; (mov r8, r8)
   2de3c:	46bd      	mov	sp, r7
   2de3e:	bd80      	pop	{r7, pc}
   2de40:	0002de45 	.word	0x0002de45

0002de44 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2de44:	b580      	push	{r7, lr}
   2de46:	b086      	sub	sp, #24
   2de48:	af00      	add	r7, sp, #0
   2de4a:	0002      	movs	r2, r0
   2de4c:	1dfb      	adds	r3, r7, #7
   2de4e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2de50:	1dfb      	adds	r3, r7, #7
   2de52:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2de54:	4b18      	ldr	r3, [pc, #96]	; (2deb8 <_tcc_interrupt_handler+0x74>)
   2de56:	0092      	lsls	r2, r2, #2
   2de58:	58d3      	ldr	r3, [r2, r3]
   2de5a:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2de5c:	693b      	ldr	r3, [r7, #16]
   2de5e:	681b      	ldr	r3, [r3, #0]
   2de60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2de62:	693b      	ldr	r3, [r7, #16]
   2de64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2de66:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2de68:	693b      	ldr	r3, [r7, #16]
   2de6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2de6c:	4013      	ands	r3, r2
   2de6e:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2de70:	2300      	movs	r3, #0
   2de72:	617b      	str	r3, [r7, #20]
   2de74:	e019      	b.n	2deaa <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2de76:	4b11      	ldr	r3, [pc, #68]	; (2debc <_tcc_interrupt_handler+0x78>)
   2de78:	697a      	ldr	r2, [r7, #20]
   2de7a:	0092      	lsls	r2, r2, #2
   2de7c:	58d3      	ldr	r3, [r2, r3]
   2de7e:	68fa      	ldr	r2, [r7, #12]
   2de80:	4013      	ands	r3, r2
   2de82:	d00f      	beq.n	2dea4 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2de84:	693a      	ldr	r2, [r7, #16]
   2de86:	697b      	ldr	r3, [r7, #20]
   2de88:	009b      	lsls	r3, r3, #2
   2de8a:	18d3      	adds	r3, r2, r3
   2de8c:	3304      	adds	r3, #4
   2de8e:	681b      	ldr	r3, [r3, #0]
   2de90:	693a      	ldr	r2, [r7, #16]
   2de92:	0010      	movs	r0, r2
   2de94:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2de96:	693b      	ldr	r3, [r7, #16]
   2de98:	681b      	ldr	r3, [r3, #0]
   2de9a:	4a08      	ldr	r2, [pc, #32]	; (2debc <_tcc_interrupt_handler+0x78>)
   2de9c:	6979      	ldr	r1, [r7, #20]
   2de9e:	0089      	lsls	r1, r1, #2
   2dea0:	588a      	ldr	r2, [r1, r2]
   2dea2:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2dea4:	697b      	ldr	r3, [r7, #20]
   2dea6:	3301      	adds	r3, #1
   2dea8:	617b      	str	r3, [r7, #20]
   2deaa:	697b      	ldr	r3, [r7, #20]
   2deac:	2b0b      	cmp	r3, #11
   2deae:	dde2      	ble.n	2de76 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2deb0:	46c0      	nop			; (mov r8, r8)
   2deb2:	46bd      	mov	sp, r7
   2deb4:	b006      	add	sp, #24
   2deb6:	bd80      	pop	{r7, pc}
   2deb8:	20005c38 	.word	0x20005c38
   2debc:	0003db70 	.word	0x0003db70

0002dec0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2dec0:	b580      	push	{r7, lr}
   2dec2:	b082      	sub	sp, #8
   2dec4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2dec6:	4b2f      	ldr	r3, [pc, #188]	; (2df84 <Reset_Handler+0xc4>)
   2dec8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2deca:	4b2f      	ldr	r3, [pc, #188]	; (2df88 <Reset_Handler+0xc8>)
   2decc:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2dece:	687a      	ldr	r2, [r7, #4]
   2ded0:	683b      	ldr	r3, [r7, #0]
   2ded2:	429a      	cmp	r2, r3
   2ded4:	d00c      	beq.n	2def0 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2ded6:	e007      	b.n	2dee8 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2ded8:	683b      	ldr	r3, [r7, #0]
   2deda:	1d1a      	adds	r2, r3, #4
   2dedc:	603a      	str	r2, [r7, #0]
   2dede:	687a      	ldr	r2, [r7, #4]
   2dee0:	1d11      	adds	r1, r2, #4
   2dee2:	6079      	str	r1, [r7, #4]
   2dee4:	6812      	ldr	r2, [r2, #0]
   2dee6:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2dee8:	683a      	ldr	r2, [r7, #0]
   2deea:	4b28      	ldr	r3, [pc, #160]	; (2df8c <Reset_Handler+0xcc>)
   2deec:	429a      	cmp	r2, r3
   2deee:	d3f3      	bcc.n	2ded8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2def0:	4b27      	ldr	r3, [pc, #156]	; (2df90 <Reset_Handler+0xd0>)
   2def2:	603b      	str	r3, [r7, #0]
   2def4:	e004      	b.n	2df00 <Reset_Handler+0x40>
                *pDest++ = 0;
   2def6:	683b      	ldr	r3, [r7, #0]
   2def8:	1d1a      	adds	r2, r3, #4
   2defa:	603a      	str	r2, [r7, #0]
   2defc:	2200      	movs	r2, #0
   2defe:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2df00:	683a      	ldr	r2, [r7, #0]
   2df02:	4b24      	ldr	r3, [pc, #144]	; (2df94 <Reset_Handler+0xd4>)
   2df04:	429a      	cmp	r2, r3
   2df06:	d3f6      	bcc.n	2def6 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2df08:	4b23      	ldr	r3, [pc, #140]	; (2df98 <Reset_Handler+0xd8>)
   2df0a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2df0c:	4b23      	ldr	r3, [pc, #140]	; (2df9c <Reset_Handler+0xdc>)
   2df0e:	687a      	ldr	r2, [r7, #4]
   2df10:	21ff      	movs	r1, #255	; 0xff
   2df12:	438a      	bics	r2, r1
   2df14:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2df16:	4a22      	ldr	r2, [pc, #136]	; (2dfa0 <Reset_Handler+0xe0>)
   2df18:	2390      	movs	r3, #144	; 0x90
   2df1a:	005b      	lsls	r3, r3, #1
   2df1c:	2102      	movs	r1, #2
   2df1e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2df20:	4a20      	ldr	r2, [pc, #128]	; (2dfa4 <Reset_Handler+0xe4>)
   2df22:	78d3      	ldrb	r3, [r2, #3]
   2df24:	2103      	movs	r1, #3
   2df26:	438b      	bics	r3, r1
   2df28:	1c19      	adds	r1, r3, #0
   2df2a:	2302      	movs	r3, #2
   2df2c:	430b      	orrs	r3, r1
   2df2e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2df30:	4a1c      	ldr	r2, [pc, #112]	; (2dfa4 <Reset_Handler+0xe4>)
   2df32:	78d3      	ldrb	r3, [r2, #3]
   2df34:	210c      	movs	r1, #12
   2df36:	438b      	bics	r3, r1
   2df38:	1c19      	adds	r1, r3, #0
   2df3a:	2308      	movs	r3, #8
   2df3c:	430b      	orrs	r3, r1
   2df3e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2df40:	4a19      	ldr	r2, [pc, #100]	; (2dfa8 <Reset_Handler+0xe8>)
   2df42:	7b93      	ldrb	r3, [r2, #14]
   2df44:	2130      	movs	r1, #48	; 0x30
   2df46:	438b      	bics	r3, r1
   2df48:	1c19      	adds	r1, r3, #0
   2df4a:	2320      	movs	r3, #32
   2df4c:	430b      	orrs	r3, r1
   2df4e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2df50:	4a15      	ldr	r2, [pc, #84]	; (2dfa8 <Reset_Handler+0xe8>)
   2df52:	7b93      	ldrb	r3, [r2, #14]
   2df54:	210c      	movs	r1, #12
   2df56:	438b      	bics	r3, r1
   2df58:	1c19      	adds	r1, r3, #0
   2df5a:	2308      	movs	r3, #8
   2df5c:	430b      	orrs	r3, r1
   2df5e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2df60:	4a11      	ldr	r2, [pc, #68]	; (2dfa8 <Reset_Handler+0xe8>)
   2df62:	7b93      	ldrb	r3, [r2, #14]
   2df64:	2103      	movs	r1, #3
   2df66:	438b      	bics	r3, r1
   2df68:	1c19      	adds	r1, r3, #0
   2df6a:	2302      	movs	r3, #2
   2df6c:	430b      	orrs	r3, r1
   2df6e:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2df70:	4a0e      	ldr	r2, [pc, #56]	; (2dfac <Reset_Handler+0xec>)
   2df72:	6853      	ldr	r3, [r2, #4]
   2df74:	2180      	movs	r1, #128	; 0x80
   2df76:	430b      	orrs	r3, r1
   2df78:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2df7a:	4b0d      	ldr	r3, [pc, #52]	; (2dfb0 <Reset_Handler+0xf0>)
   2df7c:	4798      	blx	r3

        /* Branch to main function */
        main();
   2df7e:	4b0d      	ldr	r3, [pc, #52]	; (2dfb4 <Reset_Handler+0xf4>)
   2df80:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2df82:	e7fe      	b.n	2df82 <Reset_Handler+0xc2>
   2df84:	0003e954 	.word	0x0003e954
   2df88:	20000000 	.word	0x20000000
   2df8c:	2000037c 	.word	0x2000037c
   2df90:	20000380 	.word	0x20000380
   2df94:	20005ca8 	.word	0x20005ca8
   2df98:	00012000 	.word	0x00012000
   2df9c:	e000ed00 	.word	0xe000ed00
   2dfa0:	41007000 	.word	0x41007000
   2dfa4:	41005000 	.word	0x41005000
   2dfa8:	41004800 	.word	0x41004800
   2dfac:	41004000 	.word	0x41004000
   2dfb0:	00038461 	.word	0x00038461
   2dfb4:	000356f5 	.word	0x000356f5

0002dfb8 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2dfb8:	b580      	push	{r7, lr}
   2dfba:	af00      	add	r7, sp, #0
  __asm volatile (
   2dfbc:	2004      	movs	r0, #4
   2dfbe:	4671      	mov	r1, lr
   2dfc0:	4208      	tst	r0, r1
   2dfc2:	d002      	beq.n	2dfca <_MSP>
   2dfc4:	f3ef 8009 	mrs	r0, PSP
   2dfc8:	e001      	b.n	2dfce <_HALT>

0002dfca <_MSP>:
   2dfca:	f3ef 8008 	mrs	r0, MSP

0002dfce <_HALT>:
   2dfce:	6941      	ldr	r1, [r0, #20]
   2dfd0:	e004      	b.n	2dfdc <HardFault_HandlerC>
   2dfd2:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2dfd4:	46c0      	nop			; (mov r8, r8)
   2dfd6:	46bd      	mov	sp, r7
   2dfd8:	bd80      	pop	{r7, pc}
	...

0002dfdc <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2dfdc:	b580      	push	{r7, lr}
   2dfde:	b090      	sub	sp, #64	; 0x40
   2dfe0:	af00      	add	r7, sp, #0
   2dfe2:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2dfe4:	687b      	ldr	r3, [r7, #4]
   2dfe6:	681b      	ldr	r3, [r3, #0]
   2dfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2dfea:	687b      	ldr	r3, [r7, #4]
   2dfec:	685b      	ldr	r3, [r3, #4]
   2dfee:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2dff0:	687b      	ldr	r3, [r7, #4]
   2dff2:	689b      	ldr	r3, [r3, #8]
   2dff4:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2dff6:	687b      	ldr	r3, [r7, #4]
   2dff8:	68db      	ldr	r3, [r3, #12]
   2dffa:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2dffc:	687b      	ldr	r3, [r7, #4]
   2dffe:	691b      	ldr	r3, [r3, #16]
   2e000:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2e002:	687b      	ldr	r3, [r7, #4]
   2e004:	695b      	ldr	r3, [r3, #20]
   2e006:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2e008:	687b      	ldr	r3, [r7, #4]
   2e00a:	699b      	ldr	r3, [r3, #24]
   2e00c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2e00e:	687b      	ldr	r3, [r7, #4]
   2e010:	69db      	ldr	r3, [r3, #28]
   2e012:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2e014:	4b0b      	ldr	r3, [pc, #44]	; (2e044 <HardFault_HandlerC+0x68>)
   2e016:	681b      	ldr	r3, [r3, #0]
   2e018:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2e01a:	4b0b      	ldr	r3, [pc, #44]	; (2e048 <HardFault_HandlerC+0x6c>)
   2e01c:	681b      	ldr	r3, [r3, #0]
   2e01e:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2e020:	4b0a      	ldr	r3, [pc, #40]	; (2e04c <HardFault_HandlerC+0x70>)
   2e022:	681b      	ldr	r3, [r3, #0]
   2e024:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2e026:	4b0a      	ldr	r3, [pc, #40]	; (2e050 <HardFault_HandlerC+0x74>)
   2e028:	681b      	ldr	r3, [r3, #0]
   2e02a:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2e02c:	4b09      	ldr	r3, [pc, #36]	; (2e054 <HardFault_HandlerC+0x78>)
   2e02e:	681b      	ldr	r3, [r3, #0]
   2e030:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2e032:	4b09      	ldr	r3, [pc, #36]	; (2e058 <HardFault_HandlerC+0x7c>)
   2e034:	681b      	ldr	r3, [r3, #0]
   2e036:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2e038:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2e03a:	46c0      	nop			; (mov r8, r8)
   2e03c:	46bd      	mov	sp, r7
   2e03e:	b010      	add	sp, #64	; 0x40
   2e040:	bd80      	pop	{r7, pc}
   2e042:	46c0      	nop			; (mov r8, r8)
   2e044:	e000ed28 	.word	0xe000ed28
   2e048:	e000ed2c 	.word	0xe000ed2c
   2e04c:	e000ed30 	.word	0xe000ed30
   2e050:	e000ed3c 	.word	0xe000ed3c
   2e054:	e000ed34 	.word	0xe000ed34
   2e058:	e000ed38 	.word	0xe000ed38

0002e05c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2e05c:	b580      	push	{r7, lr}
   2e05e:	b086      	sub	sp, #24
   2e060:	af00      	add	r7, sp, #0
   2e062:	60f8      	str	r0, [r7, #12]
   2e064:	60b9      	str	r1, [r7, #8]
   2e066:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2e068:	2300      	movs	r3, #0
   2e06a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2e06c:	68fb      	ldr	r3, [r7, #12]
   2e06e:	2b00      	cmp	r3, #0
   2e070:	d012      	beq.n	2e098 <_read+0x3c>
		return -1;
   2e072:	2301      	movs	r3, #1
   2e074:	425b      	negs	r3, r3
   2e076:	e013      	b.n	2e0a0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2e078:	4b0b      	ldr	r3, [pc, #44]	; (2e0a8 <_read+0x4c>)
   2e07a:	681a      	ldr	r2, [r3, #0]
   2e07c:	4b0b      	ldr	r3, [pc, #44]	; (2e0ac <_read+0x50>)
   2e07e:	681b      	ldr	r3, [r3, #0]
   2e080:	68b9      	ldr	r1, [r7, #8]
   2e082:	0018      	movs	r0, r3
   2e084:	4790      	blx	r2
		ptr++;
   2e086:	68bb      	ldr	r3, [r7, #8]
   2e088:	3301      	adds	r3, #1
   2e08a:	60bb      	str	r3, [r7, #8]
		nChars++;
   2e08c:	697b      	ldr	r3, [r7, #20]
   2e08e:	3301      	adds	r3, #1
   2e090:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2e092:	687b      	ldr	r3, [r7, #4]
   2e094:	3b01      	subs	r3, #1
   2e096:	607b      	str	r3, [r7, #4]
   2e098:	687b      	ldr	r3, [r7, #4]
   2e09a:	2b00      	cmp	r3, #0
   2e09c:	dcec      	bgt.n	2e078 <_read+0x1c>
	}
	return nChars;
   2e09e:	697b      	ldr	r3, [r7, #20]
}
   2e0a0:	0018      	movs	r0, r3
   2e0a2:	46bd      	mov	sp, r7
   2e0a4:	b006      	add	sp, #24
   2e0a6:	bd80      	pop	{r7, pc}
   2e0a8:	20005c44 	.word	0x20005c44
   2e0ac:	20005c4c 	.word	0x20005c4c

0002e0b0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2e0b0:	b580      	push	{r7, lr}
   2e0b2:	b086      	sub	sp, #24
   2e0b4:	af00      	add	r7, sp, #0
   2e0b6:	60f8      	str	r0, [r7, #12]
   2e0b8:	60b9      	str	r1, [r7, #8]
   2e0ba:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2e0bc:	2300      	movs	r3, #0
   2e0be:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2e0c0:	68fb      	ldr	r3, [r7, #12]
   2e0c2:	2b01      	cmp	r3, #1
   2e0c4:	d01d      	beq.n	2e102 <_write+0x52>
   2e0c6:	68fb      	ldr	r3, [r7, #12]
   2e0c8:	2b02      	cmp	r3, #2
   2e0ca:	d01a      	beq.n	2e102 <_write+0x52>
   2e0cc:	68fb      	ldr	r3, [r7, #12]
   2e0ce:	2b03      	cmp	r3, #3
   2e0d0:	d017      	beq.n	2e102 <_write+0x52>
		return -1;
   2e0d2:	2301      	movs	r3, #1
   2e0d4:	425b      	negs	r3, r3
   2e0d6:	e018      	b.n	2e10a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2e0d8:	4b0e      	ldr	r3, [pc, #56]	; (2e114 <_write+0x64>)
   2e0da:	681a      	ldr	r2, [r3, #0]
   2e0dc:	4b0e      	ldr	r3, [pc, #56]	; (2e118 <_write+0x68>)
   2e0de:	6818      	ldr	r0, [r3, #0]
   2e0e0:	68bb      	ldr	r3, [r7, #8]
   2e0e2:	1c59      	adds	r1, r3, #1
   2e0e4:	60b9      	str	r1, [r7, #8]
   2e0e6:	781b      	ldrb	r3, [r3, #0]
   2e0e8:	0019      	movs	r1, r3
   2e0ea:	4790      	blx	r2
   2e0ec:	1e03      	subs	r3, r0, #0
   2e0ee:	da02      	bge.n	2e0f6 <_write+0x46>
			return -1;
   2e0f0:	2301      	movs	r3, #1
   2e0f2:	425b      	negs	r3, r3
   2e0f4:	e009      	b.n	2e10a <_write+0x5a>
		}
		++nChars;
   2e0f6:	697b      	ldr	r3, [r7, #20]
   2e0f8:	3301      	adds	r3, #1
   2e0fa:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2e0fc:	687b      	ldr	r3, [r7, #4]
   2e0fe:	3b01      	subs	r3, #1
   2e100:	607b      	str	r3, [r7, #4]
   2e102:	687b      	ldr	r3, [r7, #4]
   2e104:	2b00      	cmp	r3, #0
   2e106:	d1e7      	bne.n	2e0d8 <_write+0x28>
	}
	return nChars;
   2e108:	697b      	ldr	r3, [r7, #20]
}
   2e10a:	0018      	movs	r0, r3
   2e10c:	46bd      	mov	sp, r7
   2e10e:	b006      	add	sp, #24
   2e110:	bd80      	pop	{r7, pc}
   2e112:	46c0      	nop			; (mov r8, r8)
   2e114:	20005c48 	.word	0x20005c48
   2e118:	20005c4c 	.word	0x20005c4c

0002e11c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2e11c:	b580      	push	{r7, lr}
   2e11e:	b084      	sub	sp, #16
   2e120:	af00      	add	r7, sp, #0
   2e122:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2e124:	4b0a      	ldr	r3, [pc, #40]	; (2e150 <_sbrk+0x34>)
   2e126:	681b      	ldr	r3, [r3, #0]
   2e128:	2b00      	cmp	r3, #0
   2e12a:	d102      	bne.n	2e132 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2e12c:	4b08      	ldr	r3, [pc, #32]	; (2e150 <_sbrk+0x34>)
   2e12e:	4a09      	ldr	r2, [pc, #36]	; (2e154 <_sbrk+0x38>)
   2e130:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2e132:	4b07      	ldr	r3, [pc, #28]	; (2e150 <_sbrk+0x34>)
   2e134:	681b      	ldr	r3, [r3, #0]
   2e136:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2e138:	4b05      	ldr	r3, [pc, #20]	; (2e150 <_sbrk+0x34>)
   2e13a:	681a      	ldr	r2, [r3, #0]
   2e13c:	687b      	ldr	r3, [r7, #4]
   2e13e:	18d2      	adds	r2, r2, r3
   2e140:	4b03      	ldr	r3, [pc, #12]	; (2e150 <_sbrk+0x34>)
   2e142:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2e144:	68fb      	ldr	r3, [r7, #12]
}
   2e146:	0018      	movs	r0, r3
   2e148:	46bd      	mov	sp, r7
   2e14a:	b004      	add	sp, #16
   2e14c:	bd80      	pop	{r7, pc}
   2e14e:	46c0      	nop			; (mov r8, r8)
   2e150:	20004214 	.word	0x20004214
   2e154:	20007ca8 	.word	0x20007ca8

0002e158 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2e158:	b580      	push	{r7, lr}
   2e15a:	b082      	sub	sp, #8
   2e15c:	af00      	add	r7, sp, #0
   2e15e:	6078      	str	r0, [r7, #4]
	return -1;
   2e160:	2301      	movs	r3, #1
   2e162:	425b      	negs	r3, r3
}
   2e164:	0018      	movs	r0, r3
   2e166:	46bd      	mov	sp, r7
   2e168:	b002      	add	sp, #8
   2e16a:	bd80      	pop	{r7, pc}

0002e16c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2e16c:	b580      	push	{r7, lr}
   2e16e:	b082      	sub	sp, #8
   2e170:	af00      	add	r7, sp, #0
   2e172:	6078      	str	r0, [r7, #4]
   2e174:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2e176:	683b      	ldr	r3, [r7, #0]
   2e178:	2280      	movs	r2, #128	; 0x80
   2e17a:	0192      	lsls	r2, r2, #6
   2e17c:	605a      	str	r2, [r3, #4]

	return 0;
   2e17e:	2300      	movs	r3, #0
}
   2e180:	0018      	movs	r0, r3
   2e182:	46bd      	mov	sp, r7
   2e184:	b002      	add	sp, #8
   2e186:	bd80      	pop	{r7, pc}

0002e188 <_isatty>:

extern int _isatty(int file)
{
   2e188:	b580      	push	{r7, lr}
   2e18a:	b082      	sub	sp, #8
   2e18c:	af00      	add	r7, sp, #0
   2e18e:	6078      	str	r0, [r7, #4]
	return 1;
   2e190:	2301      	movs	r3, #1
}
   2e192:	0018      	movs	r0, r3
   2e194:	46bd      	mov	sp, r7
   2e196:	b002      	add	sp, #8
   2e198:	bd80      	pop	{r7, pc}

0002e19a <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2e19a:	b580      	push	{r7, lr}
   2e19c:	b084      	sub	sp, #16
   2e19e:	af00      	add	r7, sp, #0
   2e1a0:	60f8      	str	r0, [r7, #12]
   2e1a2:	60b9      	str	r1, [r7, #8]
   2e1a4:	607a      	str	r2, [r7, #4]
	return 0;
   2e1a6:	2300      	movs	r3, #0
}
   2e1a8:	0018      	movs	r0, r3
   2e1aa:	46bd      	mov	sp, r7
   2e1ac:	b004      	add	sp, #16
   2e1ae:	bd80      	pop	{r7, pc}

0002e1b0 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2e1b0:	b580      	push	{r7, lr}
   2e1b2:	b082      	sub	sp, #8
   2e1b4:	af00      	add	r7, sp, #0
   2e1b6:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2e1b8:	687b      	ldr	r3, [r7, #4]
   2e1ba:	2200      	movs	r2, #0
   2e1bc:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2e1be:	687b      	ldr	r3, [r7, #4]
   2e1c0:	2200      	movs	r2, #0
   2e1c2:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2e1c4:	687b      	ldr	r3, [r7, #4]
   2e1c6:	2200      	movs	r2, #0
   2e1c8:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2e1ca:	687b      	ldr	r3, [r7, #4]
   2e1cc:	2200      	movs	r2, #0
   2e1ce:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2e1d0:	687b      	ldr	r3, [r7, #4]
   2e1d2:	2201      	movs	r2, #1
   2e1d4:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2e1d6:	687b      	ldr	r3, [r7, #4]
   2e1d8:	2201      	movs	r2, #1
   2e1da:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2e1dc:	687b      	ldr	r3, [r7, #4]
   2e1de:	22fa      	movs	r2, #250	; 0xfa
   2e1e0:	00d2      	lsls	r2, r2, #3
   2e1e2:	80da      	strh	r2, [r3, #6]
}
   2e1e4:	46c0      	nop			; (mov r8, r8)
   2e1e6:	46bd      	mov	sp, r7
   2e1e8:	b002      	add	sp, #8
   2e1ea:	bd80      	pop	{r7, pc}

0002e1ec <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2e1ec:	b580      	push	{r7, lr}
   2e1ee:	b086      	sub	sp, #24
   2e1f0:	af00      	add	r7, sp, #0
   2e1f2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2e1f4:	230c      	movs	r3, #12
   2e1f6:	18fb      	adds	r3, r7, r3
   2e1f8:	0018      	movs	r0, r3
   2e1fa:	4b23      	ldr	r3, [pc, #140]	; (2e288 <rtc_calendar_get_config_defaults+0x9c>)
   2e1fc:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2e1fe:	687b      	ldr	r3, [r7, #4]
   2e200:	22a0      	movs	r2, #160	; 0xa0
   2e202:	0112      	lsls	r2, r2, #4
   2e204:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2e206:	687b      	ldr	r3, [r7, #4]
   2e208:	2200      	movs	r2, #0
   2e20a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2e20c:	687b      	ldr	r3, [r7, #4]
   2e20e:	2200      	movs	r2, #0
   2e210:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2e212:	687b      	ldr	r3, [r7, #4]
   2e214:	2200      	movs	r2, #0
   2e216:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2e218:	687b      	ldr	r3, [r7, #4]
   2e21a:	22fa      	movs	r2, #250	; 0xfa
   2e21c:	00d2      	lsls	r2, r2, #3
   2e21e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2e220:	2317      	movs	r3, #23
   2e222:	18fb      	adds	r3, r7, r3
   2e224:	2200      	movs	r2, #0
   2e226:	701a      	strb	r2, [r3, #0]
   2e228:	e025      	b.n	2e276 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2e22a:	2317      	movs	r3, #23
   2e22c:	18fb      	adds	r3, r7, r3
   2e22e:	781a      	ldrb	r2, [r3, #0]
   2e230:	6879      	ldr	r1, [r7, #4]
   2e232:	2008      	movs	r0, #8
   2e234:	0013      	movs	r3, r2
   2e236:	009b      	lsls	r3, r3, #2
   2e238:	189b      	adds	r3, r3, r2
   2e23a:	005b      	lsls	r3, r3, #1
   2e23c:	18cb      	adds	r3, r1, r3
   2e23e:	181a      	adds	r2, r3, r0
   2e240:	230c      	movs	r3, #12
   2e242:	18fb      	adds	r3, r7, r3
   2e244:	0010      	movs	r0, r2
   2e246:	0019      	movs	r1, r3
   2e248:	2308      	movs	r3, #8
   2e24a:	001a      	movs	r2, r3
   2e24c:	4b0f      	ldr	r3, [pc, #60]	; (2e28c <rtc_calendar_get_config_defaults+0xa0>)
   2e24e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2e250:	2317      	movs	r3, #23
   2e252:	18fb      	adds	r3, r7, r3
   2e254:	781a      	ldrb	r2, [r3, #0]
   2e256:	6879      	ldr	r1, [r7, #4]
   2e258:	0013      	movs	r3, r2
   2e25a:	009b      	lsls	r3, r3, #2
   2e25c:	189b      	adds	r3, r3, r2
   2e25e:	005b      	lsls	r3, r3, #1
   2e260:	18cb      	adds	r3, r1, r3
   2e262:	3310      	adds	r3, #16
   2e264:	2206      	movs	r2, #6
   2e266:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2e268:	2317      	movs	r3, #23
   2e26a:	18fb      	adds	r3, r7, r3
   2e26c:	781a      	ldrb	r2, [r3, #0]
   2e26e:	2317      	movs	r3, #23
   2e270:	18fb      	adds	r3, r7, r3
   2e272:	3201      	adds	r2, #1
   2e274:	701a      	strb	r2, [r3, #0]
   2e276:	2317      	movs	r3, #23
   2e278:	18fb      	adds	r3, r7, r3
   2e27a:	781b      	ldrb	r3, [r3, #0]
   2e27c:	2b00      	cmp	r3, #0
   2e27e:	d0d4      	beq.n	2e22a <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2e280:	46c0      	nop			; (mov r8, r8)
   2e282:	46bd      	mov	sp, r7
   2e284:	b006      	add	sp, #24
   2e286:	bd80      	pop	{r7, pc}
   2e288:	0002e1b1 	.word	0x0002e1b1
   2e28c:	000384d1 	.word	0x000384d1

0002e290 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2e290:	b580      	push	{r7, lr}
   2e292:	b088      	sub	sp, #32
   2e294:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2e296:	230c      	movs	r3, #12
   2e298:	18fb      	adds	r3, r7, r3
   2e29a:	0018      	movs	r0, r3
   2e29c:	4b1a      	ldr	r3, [pc, #104]	; (2e308 <configure_rtc_calendar+0x78>)
   2e29e:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2e2a0:	1d3b      	adds	r3, r7, #4
   2e2a2:	0018      	movs	r0, r3
   2e2a4:	4b19      	ldr	r3, [pc, #100]	; (2e30c <configure_rtc_calendar+0x7c>)
   2e2a6:	4798      	blx	r3
	init_time.year   = 2014;
   2e2a8:	1d3b      	adds	r3, r7, #4
   2e2aa:	4a19      	ldr	r2, [pc, #100]	; (2e310 <configure_rtc_calendar+0x80>)
   2e2ac:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2e2ae:	1d3b      	adds	r3, r7, #4
   2e2b0:	2201      	movs	r2, #1
   2e2b2:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2e2b4:	1d3b      	adds	r3, r7, #4
   2e2b6:	2201      	movs	r2, #1
   2e2b8:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2e2ba:	1d3b      	adds	r3, r7, #4
   2e2bc:	2200      	movs	r2, #0
   2e2be:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2e2c0:	1d3b      	adds	r3, r7, #4
   2e2c2:	2200      	movs	r2, #0
   2e2c4:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2e2c6:	1d3b      	adds	r3, r7, #4
   2e2c8:	2204      	movs	r2, #4
   2e2ca:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2e2cc:	230c      	movs	r3, #12
   2e2ce:	18fb      	adds	r3, r7, r3
   2e2d0:	2201      	movs	r2, #1
   2e2d2:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2e2d4:	230c      	movs	r3, #12
   2e2d6:	18fb      	adds	r3, r7, r3
   2e2d8:	1d3a      	adds	r2, r7, #4
   2e2da:	3308      	adds	r3, #8
   2e2dc:	ca03      	ldmia	r2!, {r0, r1}
   2e2de:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2e2e0:	230c      	movs	r3, #12
   2e2e2:	18fb      	adds	r3, r7, r3
   2e2e4:	2206      	movs	r2, #6
   2e2e6:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2e2e8:	230c      	movs	r3, #12
   2e2ea:	18fa      	adds	r2, r7, r3
   2e2ec:	4909      	ldr	r1, [pc, #36]	; (2e314 <configure_rtc_calendar+0x84>)
   2e2ee:	4b0a      	ldr	r3, [pc, #40]	; (2e318 <configure_rtc_calendar+0x88>)
   2e2f0:	0018      	movs	r0, r3
   2e2f2:	4b0a      	ldr	r3, [pc, #40]	; (2e31c <configure_rtc_calendar+0x8c>)
   2e2f4:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2e2f6:	4b08      	ldr	r3, [pc, #32]	; (2e318 <configure_rtc_calendar+0x88>)
   2e2f8:	0018      	movs	r0, r3
   2e2fa:	4b09      	ldr	r3, [pc, #36]	; (2e320 <configure_rtc_calendar+0x90>)
   2e2fc:	4798      	blx	r3
}
   2e2fe:	46c0      	nop			; (mov r8, r8)
   2e300:	46bd      	mov	sp, r7
   2e302:	b008      	add	sp, #32
   2e304:	bd80      	pop	{r7, pc}
   2e306:	46c0      	nop			; (mov r8, r8)
   2e308:	0002e1ed 	.word	0x0002e1ed
   2e30c:	0002e1b1 	.word	0x0002e1b1
   2e310:	000007de 	.word	0x000007de
   2e314:	40001400 	.word	0x40001400
   2e318:	20005c50 	.word	0x20005c50
   2e31c:	00029dcd 	.word	0x00029dcd
   2e320:	00029af9 	.word	0x00029af9

0002e324 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2e324:	b590      	push	{r4, r7, lr}
   2e326:	b085      	sub	sp, #20
   2e328:	af00      	add	r7, sp, #0
   2e32a:	0002      	movs	r2, r0
   2e32c:	1dfb      	adds	r3, r7, #7
   2e32e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2e330:	4b1a      	ldr	r3, [pc, #104]	; (2e39c <disk_initialize+0x78>)
   2e332:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2e334:	1dfb      	adds	r3, r7, #7
   2e336:	781b      	ldrb	r3, [r3, #0]
   2e338:	2b01      	cmp	r3, #1
   2e33a:	d901      	bls.n	2e340 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2e33c:	2301      	movs	r3, #1
   2e33e:	e029      	b.n	2e394 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2e340:	2300      	movs	r3, #0
   2e342:	60fb      	str	r3, [r7, #12]
   2e344:	e010      	b.n	2e368 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2e346:	230b      	movs	r3, #11
   2e348:	18fc      	adds	r4, r7, r3
   2e34a:	1dfb      	adds	r3, r7, #7
   2e34c:	781b      	ldrb	r3, [r3, #0]
   2e34e:	0018      	movs	r0, r3
   2e350:	4b13      	ldr	r3, [pc, #76]	; (2e3a0 <disk_initialize+0x7c>)
   2e352:	4798      	blx	r3
   2e354:	0003      	movs	r3, r0
   2e356:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2e358:	230b      	movs	r3, #11
   2e35a:	18fb      	adds	r3, r7, r3
   2e35c:	781b      	ldrb	r3, [r3, #0]
   2e35e:	2b03      	cmp	r3, #3
   2e360:	d106      	bne.n	2e370 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2e362:	68fb      	ldr	r3, [r7, #12]
   2e364:	3301      	adds	r3, #1
   2e366:	60fb      	str	r3, [r7, #12]
   2e368:	68fb      	ldr	r3, [r7, #12]
   2e36a:	2b01      	cmp	r3, #1
   2e36c:	ddeb      	ble.n	2e346 <disk_initialize+0x22>
   2e36e:	e000      	b.n	2e372 <disk_initialize+0x4e>
			break;
   2e370:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2e372:	230b      	movs	r3, #11
   2e374:	18fb      	adds	r3, r7, r3
   2e376:	781b      	ldrb	r3, [r3, #0]
   2e378:	2b00      	cmp	r3, #0
   2e37a:	d001      	beq.n	2e380 <disk_initialize+0x5c>
		return STA_NOINIT;
   2e37c:	2301      	movs	r3, #1
   2e37e:	e009      	b.n	2e394 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2e380:	1dfb      	adds	r3, r7, #7
   2e382:	781b      	ldrb	r3, [r3, #0]
   2e384:	0018      	movs	r0, r3
   2e386:	4b07      	ldr	r3, [pc, #28]	; (2e3a4 <disk_initialize+0x80>)
   2e388:	4798      	blx	r3
   2e38a:	1e03      	subs	r3, r0, #0
   2e38c:	d001      	beq.n	2e392 <disk_initialize+0x6e>
		return STA_PROTECT;
   2e38e:	2304      	movs	r3, #4
   2e390:	e000      	b.n	2e394 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2e392:	2300      	movs	r3, #0
}
   2e394:	0018      	movs	r0, r3
   2e396:	46bd      	mov	sp, r7
   2e398:	b005      	add	sp, #20
   2e39a:	bd90      	pop	{r4, r7, pc}
   2e39c:	0002e291 	.word	0x0002e291
   2e3a0:	00028ff5 	.word	0x00028ff5
   2e3a4:	000290ad 	.word	0x000290ad

0002e3a8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2e3a8:	b580      	push	{r7, lr}
   2e3aa:	b082      	sub	sp, #8
   2e3ac:	af00      	add	r7, sp, #0
   2e3ae:	0002      	movs	r2, r0
   2e3b0:	1dfb      	adds	r3, r7, #7
   2e3b2:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2e3b4:	1dfb      	adds	r3, r7, #7
   2e3b6:	781b      	ldrb	r3, [r3, #0]
   2e3b8:	0018      	movs	r0, r3
   2e3ba:	4b08      	ldr	r3, [pc, #32]	; (2e3dc <disk_status+0x34>)
   2e3bc:	4798      	blx	r3
   2e3be:	1e03      	subs	r3, r0, #0
   2e3c0:	d002      	beq.n	2e3c8 <disk_status+0x20>
   2e3c2:	2b02      	cmp	r3, #2
   2e3c4:	d002      	beq.n	2e3cc <disk_status+0x24>
   2e3c6:	e003      	b.n	2e3d0 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2e3c8:	2300      	movs	r3, #0
   2e3ca:	e002      	b.n	2e3d2 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2e3cc:	2303      	movs	r3, #3
   2e3ce:	e000      	b.n	2e3d2 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2e3d0:	2301      	movs	r3, #1
	}
}
   2e3d2:	0018      	movs	r0, r3
   2e3d4:	46bd      	mov	sp, r7
   2e3d6:	b002      	add	sp, #8
   2e3d8:	bd80      	pop	{r7, pc}
   2e3da:	46c0      	nop			; (mov r8, r8)
   2e3dc:	00028ff5 	.word	0x00028ff5

0002e3e0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2e3e0:	b590      	push	{r4, r7, lr}
   2e3e2:	b089      	sub	sp, #36	; 0x24
   2e3e4:	af00      	add	r7, sp, #0
   2e3e6:	60b9      	str	r1, [r7, #8]
   2e3e8:	607a      	str	r2, [r7, #4]
   2e3ea:	0019      	movs	r1, r3
   2e3ec:	230f      	movs	r3, #15
   2e3ee:	18fb      	adds	r3, r7, r3
   2e3f0:	1c02      	adds	r2, r0, #0
   2e3f2:	701a      	strb	r2, [r3, #0]
   2e3f4:	230e      	movs	r3, #14
   2e3f6:	18fb      	adds	r3, r7, r3
   2e3f8:	1c0a      	adds	r2, r1, #0
   2e3fa:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2e3fc:	231b      	movs	r3, #27
   2e3fe:	18fc      	adds	r4, r7, r3
   2e400:	230f      	movs	r3, #15
   2e402:	18fb      	adds	r3, r7, r3
   2e404:	781b      	ldrb	r3, [r3, #0]
   2e406:	0018      	movs	r0, r3
   2e408:	4b28      	ldr	r3, [pc, #160]	; (2e4ac <disk_read+0xcc>)
   2e40a:	4798      	blx	r3
   2e40c:	0003      	movs	r3, r0
   2e40e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2e410:	231b      	movs	r3, #27
   2e412:	18fb      	adds	r3, r7, r3
   2e414:	781b      	ldrb	r3, [r3, #0]
   2e416:	2b00      	cmp	r3, #0
   2e418:	d101      	bne.n	2e41e <disk_read+0x3e>
		return RES_ERROR;
   2e41a:	2301      	movs	r3, #1
   2e41c:	e042      	b.n	2e4a4 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2e41e:	2314      	movs	r3, #20
   2e420:	18fa      	adds	r2, r7, r3
   2e422:	230f      	movs	r3, #15
   2e424:	18fb      	adds	r3, r7, r3
   2e426:	781b      	ldrb	r3, [r3, #0]
   2e428:	0011      	movs	r1, r2
   2e42a:	0018      	movs	r0, r3
   2e42c:	4b20      	ldr	r3, [pc, #128]	; (2e4b0 <disk_read+0xd0>)
   2e42e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2e430:	230e      	movs	r3, #14
   2e432:	18fb      	adds	r3, r7, r3
   2e434:	781b      	ldrb	r3, [r3, #0]
   2e436:	221b      	movs	r2, #27
   2e438:	18ba      	adds	r2, r7, r2
   2e43a:	7812      	ldrb	r2, [r2, #0]
   2e43c:	4353      	muls	r3, r2
   2e43e:	001a      	movs	r2, r3
   2e440:	687b      	ldr	r3, [r7, #4]
   2e442:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2e444:	697b      	ldr	r3, [r7, #20]
   2e446:	3301      	adds	r3, #1
   2e448:	211b      	movs	r1, #27
   2e44a:	1879      	adds	r1, r7, r1
   2e44c:	7809      	ldrb	r1, [r1, #0]
   2e44e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2e450:	429a      	cmp	r2, r3
   2e452:	d901      	bls.n	2e458 <disk_read+0x78>
		return RES_PARERR;
   2e454:	2304      	movs	r3, #4
   2e456:	e025      	b.n	2e4a4 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2e458:	2300      	movs	r3, #0
   2e45a:	61fb      	str	r3, [r7, #28]
   2e45c:	e01b      	b.n	2e496 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2e45e:	231b      	movs	r3, #27
   2e460:	18fb      	adds	r3, r7, r3
   2e462:	781b      	ldrb	r3, [r3, #0]
   2e464:	69fa      	ldr	r2, [r7, #28]
   2e466:	435a      	muls	r2, r3
   2e468:	687b      	ldr	r3, [r7, #4]
   2e46a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2e46c:	231b      	movs	r3, #27
   2e46e:	18fb      	adds	r3, r7, r3
   2e470:	781b      	ldrb	r3, [r3, #0]
   2e472:	69fa      	ldr	r2, [r7, #28]
   2e474:	4353      	muls	r3, r2
   2e476:	025b      	lsls	r3, r3, #9
   2e478:	68ba      	ldr	r2, [r7, #8]
   2e47a:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2e47c:	230f      	movs	r3, #15
   2e47e:	18fb      	adds	r3, r7, r3
   2e480:	781b      	ldrb	r3, [r3, #0]
   2e482:	0018      	movs	r0, r3
   2e484:	4b0b      	ldr	r3, [pc, #44]	; (2e4b4 <disk_read+0xd4>)
   2e486:	4798      	blx	r3
   2e488:	1e03      	subs	r3, r0, #0
   2e48a:	d001      	beq.n	2e490 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2e48c:	2301      	movs	r3, #1
   2e48e:	e009      	b.n	2e4a4 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2e490:	69fb      	ldr	r3, [r7, #28]
   2e492:	3301      	adds	r3, #1
   2e494:	61fb      	str	r3, [r7, #28]
   2e496:	230e      	movs	r3, #14
   2e498:	18fb      	adds	r3, r7, r3
   2e49a:	781a      	ldrb	r2, [r3, #0]
   2e49c:	69fb      	ldr	r3, [r7, #28]
   2e49e:	429a      	cmp	r2, r3
   2e4a0:	d8dd      	bhi.n	2e45e <disk_read+0x7e>
		}
	}

	return RES_OK;
   2e4a2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2e4a4:	0018      	movs	r0, r3
   2e4a6:	46bd      	mov	sp, r7
   2e4a8:	b009      	add	sp, #36	; 0x24
   2e4aa:	bd90      	pop	{r4, r7, pc}
   2e4ac:	00029081 	.word	0x00029081
   2e4b0:	00029035 	.word	0x00029035
   2e4b4:	000290f5 	.word	0x000290f5

0002e4b8 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2e4b8:	b590      	push	{r4, r7, lr}
   2e4ba:	b089      	sub	sp, #36	; 0x24
   2e4bc:	af00      	add	r7, sp, #0
   2e4be:	60b9      	str	r1, [r7, #8]
   2e4c0:	607a      	str	r2, [r7, #4]
   2e4c2:	0019      	movs	r1, r3
   2e4c4:	230f      	movs	r3, #15
   2e4c6:	18fb      	adds	r3, r7, r3
   2e4c8:	1c02      	adds	r2, r0, #0
   2e4ca:	701a      	strb	r2, [r3, #0]
   2e4cc:	230e      	movs	r3, #14
   2e4ce:	18fb      	adds	r3, r7, r3
   2e4d0:	1c0a      	adds	r2, r1, #0
   2e4d2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2e4d4:	231b      	movs	r3, #27
   2e4d6:	18fc      	adds	r4, r7, r3
   2e4d8:	230f      	movs	r3, #15
   2e4da:	18fb      	adds	r3, r7, r3
   2e4dc:	781b      	ldrb	r3, [r3, #0]
   2e4de:	0018      	movs	r0, r3
   2e4e0:	4b28      	ldr	r3, [pc, #160]	; (2e584 <disk_write+0xcc>)
   2e4e2:	4798      	blx	r3
   2e4e4:	0003      	movs	r3, r0
   2e4e6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2e4e8:	231b      	movs	r3, #27
   2e4ea:	18fb      	adds	r3, r7, r3
   2e4ec:	781b      	ldrb	r3, [r3, #0]
   2e4ee:	2b00      	cmp	r3, #0
   2e4f0:	d101      	bne.n	2e4f6 <disk_write+0x3e>
		return RES_ERROR;
   2e4f2:	2301      	movs	r3, #1
   2e4f4:	e042      	b.n	2e57c <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2e4f6:	2314      	movs	r3, #20
   2e4f8:	18fa      	adds	r2, r7, r3
   2e4fa:	230f      	movs	r3, #15
   2e4fc:	18fb      	adds	r3, r7, r3
   2e4fe:	781b      	ldrb	r3, [r3, #0]
   2e500:	0011      	movs	r1, r2
   2e502:	0018      	movs	r0, r3
   2e504:	4b20      	ldr	r3, [pc, #128]	; (2e588 <disk_write+0xd0>)
   2e506:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2e508:	230e      	movs	r3, #14
   2e50a:	18fb      	adds	r3, r7, r3
   2e50c:	781b      	ldrb	r3, [r3, #0]
   2e50e:	221b      	movs	r2, #27
   2e510:	18ba      	adds	r2, r7, r2
   2e512:	7812      	ldrb	r2, [r2, #0]
   2e514:	4353      	muls	r3, r2
   2e516:	001a      	movs	r2, r3
   2e518:	687b      	ldr	r3, [r7, #4]
   2e51a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2e51c:	697b      	ldr	r3, [r7, #20]
   2e51e:	3301      	adds	r3, #1
   2e520:	211b      	movs	r1, #27
   2e522:	1879      	adds	r1, r7, r1
   2e524:	7809      	ldrb	r1, [r1, #0]
   2e526:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2e528:	429a      	cmp	r2, r3
   2e52a:	d901      	bls.n	2e530 <disk_write+0x78>
		return RES_PARERR;
   2e52c:	2304      	movs	r3, #4
   2e52e:	e025      	b.n	2e57c <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2e530:	2300      	movs	r3, #0
   2e532:	61fb      	str	r3, [r7, #28]
   2e534:	e01b      	b.n	2e56e <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2e536:	231b      	movs	r3, #27
   2e538:	18fb      	adds	r3, r7, r3
   2e53a:	781b      	ldrb	r3, [r3, #0]
   2e53c:	69fa      	ldr	r2, [r7, #28]
   2e53e:	435a      	muls	r2, r3
   2e540:	687b      	ldr	r3, [r7, #4]
   2e542:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2e544:	231b      	movs	r3, #27
   2e546:	18fb      	adds	r3, r7, r3
   2e548:	781b      	ldrb	r3, [r3, #0]
   2e54a:	69fa      	ldr	r2, [r7, #28]
   2e54c:	4353      	muls	r3, r2
   2e54e:	025b      	lsls	r3, r3, #9
   2e550:	68ba      	ldr	r2, [r7, #8]
   2e552:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2e554:	230f      	movs	r3, #15
   2e556:	18fb      	adds	r3, r7, r3
   2e558:	781b      	ldrb	r3, [r3, #0]
   2e55a:	0018      	movs	r0, r3
   2e55c:	4b0b      	ldr	r3, [pc, #44]	; (2e58c <disk_write+0xd4>)
   2e55e:	4798      	blx	r3
   2e560:	1e03      	subs	r3, r0, #0
   2e562:	d001      	beq.n	2e568 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2e564:	2301      	movs	r3, #1
   2e566:	e009      	b.n	2e57c <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2e568:	69fb      	ldr	r3, [r7, #28]
   2e56a:	3301      	adds	r3, #1
   2e56c:	61fb      	str	r3, [r7, #28]
   2e56e:	230e      	movs	r3, #14
   2e570:	18fb      	adds	r3, r7, r3
   2e572:	781a      	ldrb	r2, [r3, #0]
   2e574:	69fb      	ldr	r3, [r7, #28]
   2e576:	429a      	cmp	r2, r3
   2e578:	d8dd      	bhi.n	2e536 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2e57a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2e57c:	0018      	movs	r0, r3
   2e57e:	46bd      	mov	sp, r7
   2e580:	b009      	add	sp, #36	; 0x24
   2e582:	bd90      	pop	{r4, r7, pc}
   2e584:	00029081 	.word	0x00029081
   2e588:	00029035 	.word	0x00029035
   2e58c:	00029149 	.word	0x00029149

0002e590 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2e590:	b590      	push	{r4, r7, lr}
   2e592:	b085      	sub	sp, #20
   2e594:	af00      	add	r7, sp, #0
   2e596:	603a      	str	r2, [r7, #0]
   2e598:	1dfb      	adds	r3, r7, #7
   2e59a:	1c02      	adds	r2, r0, #0
   2e59c:	701a      	strb	r2, [r3, #0]
   2e59e:	1dbb      	adds	r3, r7, #6
   2e5a0:	1c0a      	adds	r2, r1, #0
   2e5a2:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2e5a4:	230f      	movs	r3, #15
   2e5a6:	18fb      	adds	r3, r7, r3
   2e5a8:	2204      	movs	r2, #4
   2e5aa:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2e5ac:	1dbb      	adds	r3, r7, #6
   2e5ae:	781b      	ldrb	r3, [r3, #0]
   2e5b0:	2b01      	cmp	r3, #1
   2e5b2:	d00f      	beq.n	2e5d4 <disk_ioctl+0x44>
   2e5b4:	dc02      	bgt.n	2e5bc <disk_ioctl+0x2c>
   2e5b6:	2b00      	cmp	r3, #0
   2e5b8:	d044      	beq.n	2e644 <disk_ioctl+0xb4>
   2e5ba:	e054      	b.n	2e666 <disk_ioctl+0xd6>
   2e5bc:	2b02      	cmp	r3, #2
   2e5be:	d01a      	beq.n	2e5f6 <disk_ioctl+0x66>
   2e5c0:	2b03      	cmp	r3, #3
   2e5c2:	d150      	bne.n	2e666 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2e5c4:	683b      	ldr	r3, [r7, #0]
   2e5c6:	2201      	movs	r2, #1
   2e5c8:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2e5ca:	230f      	movs	r3, #15
   2e5cc:	18fb      	adds	r3, r7, r3
   2e5ce:	2200      	movs	r2, #0
   2e5d0:	701a      	strb	r2, [r3, #0]
		break;
   2e5d2:	e04c      	b.n	2e66e <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2e5d4:	2308      	movs	r3, #8
   2e5d6:	18fa      	adds	r2, r7, r3
   2e5d8:	1dfb      	adds	r3, r7, #7
   2e5da:	781b      	ldrb	r3, [r3, #0]
   2e5dc:	0011      	movs	r1, r2
   2e5de:	0018      	movs	r0, r3
   2e5e0:	4b26      	ldr	r3, [pc, #152]	; (2e67c <disk_ioctl+0xec>)
   2e5e2:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2e5e4:	68bb      	ldr	r3, [r7, #8]
   2e5e6:	1c5a      	adds	r2, r3, #1
   2e5e8:	683b      	ldr	r3, [r7, #0]
   2e5ea:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2e5ec:	230f      	movs	r3, #15
   2e5ee:	18fb      	adds	r3, r7, r3
   2e5f0:	2200      	movs	r2, #0
   2e5f2:	701a      	strb	r2, [r3, #0]
	}
	break;
   2e5f4:	e03b      	b.n	2e66e <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2e5f6:	230e      	movs	r3, #14
   2e5f8:	18fc      	adds	r4, r7, r3
   2e5fa:	1dfb      	adds	r3, r7, #7
   2e5fc:	781b      	ldrb	r3, [r3, #0]
   2e5fe:	0018      	movs	r0, r3
   2e600:	4b1f      	ldr	r3, [pc, #124]	; (2e680 <disk_ioctl+0xf0>)
   2e602:	4798      	blx	r3
   2e604:	0003      	movs	r3, r0
   2e606:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2e608:	230e      	movs	r3, #14
   2e60a:	18fb      	adds	r3, r7, r3
   2e60c:	781b      	ldrb	r3, [r3, #0]
   2e60e:	2b01      	cmp	r3, #1
   2e610:	d010      	beq.n	2e634 <disk_ioctl+0xa4>
   2e612:	230e      	movs	r3, #14
   2e614:	18fb      	adds	r3, r7, r3
   2e616:	781b      	ldrb	r3, [r3, #0]
   2e618:	2b02      	cmp	r3, #2
   2e61a:	d00b      	beq.n	2e634 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2e61c:	230e      	movs	r3, #14
   2e61e:	18fb      	adds	r3, r7, r3
   2e620:	781b      	ldrb	r3, [r3, #0]
   2e622:	2b04      	cmp	r3, #4
   2e624:	d006      	beq.n	2e634 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2e626:	230e      	movs	r3, #14
   2e628:	18fb      	adds	r3, r7, r3
   2e62a:	781b      	ldrb	r3, [r3, #0]
   2e62c:	2b08      	cmp	r3, #8
   2e62e:	d001      	beq.n	2e634 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2e630:	2301      	movs	r3, #1
   2e632:	e01f      	b.n	2e674 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2e634:	683b      	ldr	r3, [r7, #0]
   2e636:	2200      	movs	r2, #0
   2e638:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2e63a:	230f      	movs	r3, #15
   2e63c:	18fb      	adds	r3, r7, r3
   2e63e:	2200      	movs	r2, #0
   2e640:	701a      	strb	r2, [r3, #0]
	}
	break;
   2e642:	e014      	b.n	2e66e <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2e644:	1dfb      	adds	r3, r7, #7
   2e646:	781b      	ldrb	r3, [r3, #0]
   2e648:	0018      	movs	r0, r3
   2e64a:	4b0e      	ldr	r3, [pc, #56]	; (2e684 <disk_ioctl+0xf4>)
   2e64c:	4798      	blx	r3
   2e64e:	1e03      	subs	r3, r0, #0
   2e650:	d104      	bne.n	2e65c <disk_ioctl+0xcc>
			res = RES_OK;
   2e652:	230f      	movs	r3, #15
   2e654:	18fb      	adds	r3, r7, r3
   2e656:	2200      	movs	r2, #0
   2e658:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2e65a:	e008      	b.n	2e66e <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2e65c:	230f      	movs	r3, #15
   2e65e:	18fb      	adds	r3, r7, r3
   2e660:	2203      	movs	r2, #3
   2e662:	701a      	strb	r2, [r3, #0]
		break;
   2e664:	e003      	b.n	2e66e <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2e666:	230f      	movs	r3, #15
   2e668:	18fb      	adds	r3, r7, r3
   2e66a:	2204      	movs	r2, #4
   2e66c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2e66e:	230f      	movs	r3, #15
   2e670:	18fb      	adds	r3, r7, r3
   2e672:	781b      	ldrb	r3, [r3, #0]
}
   2e674:	0018      	movs	r0, r3
   2e676:	46bd      	mov	sp, r7
   2e678:	b005      	add	sp, #20
   2e67a:	bd90      	pop	{r4, r7, pc}
   2e67c:	00029035 	.word	0x00029035
   2e680:	00029081 	.word	0x00029081
   2e684:	00028ff5 	.word	0x00028ff5

0002e688 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2e688:	b580      	push	{r7, lr}
   2e68a:	b084      	sub	sp, #16
   2e68c:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2e68e:	1d3a      	adds	r2, r7, #4
   2e690:	4b12      	ldr	r3, [pc, #72]	; (2e6dc <get_fattime+0x54>)
   2e692:	0011      	movs	r1, r2
   2e694:	0018      	movs	r0, r3
   2e696:	4b12      	ldr	r3, [pc, #72]	; (2e6e0 <get_fattime+0x58>)
   2e698:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2e69a:	1d3b      	adds	r3, r7, #4
   2e69c:	88db      	ldrh	r3, [r3, #6]
   2e69e:	4a11      	ldr	r2, [pc, #68]	; (2e6e4 <get_fattime+0x5c>)
   2e6a0:	4694      	mov	ip, r2
   2e6a2:	4463      	add	r3, ip
   2e6a4:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2e6a6:	1d3b      	adds	r3, r7, #4
   2e6a8:	795b      	ldrb	r3, [r3, #5]
   2e6aa:	055b      	lsls	r3, r3, #21
   2e6ac:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2e6ae:	1d3b      	adds	r3, r7, #4
   2e6b0:	791b      	ldrb	r3, [r3, #4]
   2e6b2:	041b      	lsls	r3, r3, #16
   2e6b4:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2e6b6:	1d3b      	adds	r3, r7, #4
   2e6b8:	789b      	ldrb	r3, [r3, #2]
   2e6ba:	02db      	lsls	r3, r3, #11
   2e6bc:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2e6be:	1d3b      	adds	r3, r7, #4
   2e6c0:	785b      	ldrb	r3, [r3, #1]
   2e6c2:	015b      	lsls	r3, r3, #5
   2e6c4:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2e6c6:	1d3a      	adds	r2, r7, #4
   2e6c8:	7812      	ldrb	r2, [r2, #0]
   2e6ca:	0852      	lsrs	r2, r2, #1
   2e6cc:	b2d2      	uxtb	r2, r2
   2e6ce:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2e6d0:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2e6d2:	68fb      	ldr	r3, [r7, #12]
}
   2e6d4:	0018      	movs	r0, r3
   2e6d6:	46bd      	mov	sp, r7
   2e6d8:	b004      	add	sp, #16
   2e6da:	bd80      	pop	{r7, pc}
   2e6dc:	20005c50 	.word	0x20005c50
   2e6e0:	00029e61 	.word	0x00029e61
   2e6e4:	fffff844 	.word	0xfffff844

0002e6e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2e6e8:	b580      	push	{r7, lr}
   2e6ea:	b086      	sub	sp, #24
   2e6ec:	af00      	add	r7, sp, #0
   2e6ee:	60f8      	str	r0, [r7, #12]
   2e6f0:	60b9      	str	r1, [r7, #8]
   2e6f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2e6f4:	68fb      	ldr	r3, [r7, #12]
   2e6f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2e6f8:	68bb      	ldr	r3, [r7, #8]
   2e6fa:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2e6fc:	e007      	b.n	2e70e <mem_cpy+0x26>
		*d++ = *s++;
   2e6fe:	697b      	ldr	r3, [r7, #20]
   2e700:	1c5a      	adds	r2, r3, #1
   2e702:	617a      	str	r2, [r7, #20]
   2e704:	693a      	ldr	r2, [r7, #16]
   2e706:	1c51      	adds	r1, r2, #1
   2e708:	6139      	str	r1, [r7, #16]
   2e70a:	7812      	ldrb	r2, [r2, #0]
   2e70c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2e70e:	687b      	ldr	r3, [r7, #4]
   2e710:	1e5a      	subs	r2, r3, #1
   2e712:	607a      	str	r2, [r7, #4]
   2e714:	2b00      	cmp	r3, #0
   2e716:	d1f2      	bne.n	2e6fe <mem_cpy+0x16>
}
   2e718:	46c0      	nop			; (mov r8, r8)
   2e71a:	46bd      	mov	sp, r7
   2e71c:	b006      	add	sp, #24
   2e71e:	bd80      	pop	{r7, pc}

0002e720 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2e720:	b580      	push	{r7, lr}
   2e722:	b086      	sub	sp, #24
   2e724:	af00      	add	r7, sp, #0
   2e726:	60f8      	str	r0, [r7, #12]
   2e728:	60b9      	str	r1, [r7, #8]
   2e72a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2e72c:	68fb      	ldr	r3, [r7, #12]
   2e72e:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2e730:	e005      	b.n	2e73e <mem_set+0x1e>
		*d++ = (BYTE)val;
   2e732:	697b      	ldr	r3, [r7, #20]
   2e734:	1c5a      	adds	r2, r3, #1
   2e736:	617a      	str	r2, [r7, #20]
   2e738:	68ba      	ldr	r2, [r7, #8]
   2e73a:	b2d2      	uxtb	r2, r2
   2e73c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2e73e:	687b      	ldr	r3, [r7, #4]
   2e740:	1e5a      	subs	r2, r3, #1
   2e742:	607a      	str	r2, [r7, #4]
   2e744:	2b00      	cmp	r3, #0
   2e746:	d1f4      	bne.n	2e732 <mem_set+0x12>
}
   2e748:	46c0      	nop			; (mov r8, r8)
   2e74a:	46bd      	mov	sp, r7
   2e74c:	b006      	add	sp, #24
   2e74e:	bd80      	pop	{r7, pc}

0002e750 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2e750:	b580      	push	{r7, lr}
   2e752:	b088      	sub	sp, #32
   2e754:	af00      	add	r7, sp, #0
   2e756:	60f8      	str	r0, [r7, #12]
   2e758:	60b9      	str	r1, [r7, #8]
   2e75a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2e75c:	68fb      	ldr	r3, [r7, #12]
   2e75e:	61fb      	str	r3, [r7, #28]
   2e760:	68bb      	ldr	r3, [r7, #8]
   2e762:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2e764:	2300      	movs	r3, #0
   2e766:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2e768:	46c0      	nop			; (mov r8, r8)
   2e76a:	687b      	ldr	r3, [r7, #4]
   2e76c:	1e5a      	subs	r2, r3, #1
   2e76e:	607a      	str	r2, [r7, #4]
   2e770:	2b00      	cmp	r3, #0
   2e772:	d00d      	beq.n	2e790 <mem_cmp+0x40>
   2e774:	69fb      	ldr	r3, [r7, #28]
   2e776:	1c5a      	adds	r2, r3, #1
   2e778:	61fa      	str	r2, [r7, #28]
   2e77a:	781b      	ldrb	r3, [r3, #0]
   2e77c:	0019      	movs	r1, r3
   2e77e:	69bb      	ldr	r3, [r7, #24]
   2e780:	1c5a      	adds	r2, r3, #1
   2e782:	61ba      	str	r2, [r7, #24]
   2e784:	781b      	ldrb	r3, [r3, #0]
   2e786:	1acb      	subs	r3, r1, r3
   2e788:	617b      	str	r3, [r7, #20]
   2e78a:	697b      	ldr	r3, [r7, #20]
   2e78c:	2b00      	cmp	r3, #0
   2e78e:	d0ec      	beq.n	2e76a <mem_cmp+0x1a>
	return r;
   2e790:	697b      	ldr	r3, [r7, #20]
}
   2e792:	0018      	movs	r0, r3
   2e794:	46bd      	mov	sp, r7
   2e796:	b008      	add	sp, #32
   2e798:	bd80      	pop	{r7, pc}

0002e79a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2e79a:	b580      	push	{r7, lr}
   2e79c:	b082      	sub	sp, #8
   2e79e:	af00      	add	r7, sp, #0
   2e7a0:	6078      	str	r0, [r7, #4]
   2e7a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2e7a4:	e002      	b.n	2e7ac <chk_chr+0x12>
   2e7a6:	687b      	ldr	r3, [r7, #4]
   2e7a8:	3301      	adds	r3, #1
   2e7aa:	607b      	str	r3, [r7, #4]
   2e7ac:	687b      	ldr	r3, [r7, #4]
   2e7ae:	781b      	ldrb	r3, [r3, #0]
   2e7b0:	2b00      	cmp	r3, #0
   2e7b2:	d005      	beq.n	2e7c0 <chk_chr+0x26>
   2e7b4:	687b      	ldr	r3, [r7, #4]
   2e7b6:	781b      	ldrb	r3, [r3, #0]
   2e7b8:	001a      	movs	r2, r3
   2e7ba:	683b      	ldr	r3, [r7, #0]
   2e7bc:	429a      	cmp	r2, r3
   2e7be:	d1f2      	bne.n	2e7a6 <chk_chr+0xc>
	return *str;
   2e7c0:	687b      	ldr	r3, [r7, #4]
   2e7c2:	781b      	ldrb	r3, [r3, #0]
}
   2e7c4:	0018      	movs	r0, r3
   2e7c6:	46bd      	mov	sp, r7
   2e7c8:	b002      	add	sp, #8
   2e7ca:	bd80      	pop	{r7, pc}

0002e7cc <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2e7cc:	b590      	push	{r4, r7, lr}
   2e7ce:	b085      	sub	sp, #20
   2e7d0:	af00      	add	r7, sp, #0
   2e7d2:	6078      	str	r0, [r7, #4]
   2e7d4:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2e7d6:	687b      	ldr	r3, [r7, #4]
   2e7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e7da:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2e7dc:	68fa      	ldr	r2, [r7, #12]
   2e7de:	683b      	ldr	r3, [r7, #0]
   2e7e0:	429a      	cmp	r2, r3
   2e7e2:	d04e      	beq.n	2e882 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2e7e4:	687b      	ldr	r3, [r7, #4]
   2e7e6:	791b      	ldrb	r3, [r3, #4]
   2e7e8:	2b00      	cmp	r3, #0
   2e7ea:	d037      	beq.n	2e85c <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2e7ec:	687b      	ldr	r3, [r7, #4]
   2e7ee:	7858      	ldrb	r0, [r3, #1]
   2e7f0:	687b      	ldr	r3, [r7, #4]
   2e7f2:	3330      	adds	r3, #48	; 0x30
   2e7f4:	0019      	movs	r1, r3
   2e7f6:	68fa      	ldr	r2, [r7, #12]
   2e7f8:	2301      	movs	r3, #1
   2e7fa:	4c24      	ldr	r4, [pc, #144]	; (2e88c <move_window+0xc0>)
   2e7fc:	47a0      	blx	r4
   2e7fe:	1e03      	subs	r3, r0, #0
   2e800:	d001      	beq.n	2e806 <move_window+0x3a>
				return FR_DISK_ERR;
   2e802:	2301      	movs	r3, #1
   2e804:	e03e      	b.n	2e884 <move_window+0xb8>
			fs->wflag = 0;
   2e806:	687b      	ldr	r3, [r7, #4]
   2e808:	2200      	movs	r2, #0
   2e80a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2e80c:	687b      	ldr	r3, [r7, #4]
   2e80e:	6a1a      	ldr	r2, [r3, #32]
   2e810:	687b      	ldr	r3, [r7, #4]
   2e812:	69db      	ldr	r3, [r3, #28]
   2e814:	18d2      	adds	r2, r2, r3
   2e816:	68fb      	ldr	r3, [r7, #12]
   2e818:	429a      	cmp	r2, r3
   2e81a:	d91f      	bls.n	2e85c <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2e81c:	230b      	movs	r3, #11
   2e81e:	18fb      	adds	r3, r7, r3
   2e820:	687a      	ldr	r2, [r7, #4]
   2e822:	78d2      	ldrb	r2, [r2, #3]
   2e824:	701a      	strb	r2, [r3, #0]
   2e826:	e014      	b.n	2e852 <move_window+0x86>
					wsect += fs->fsize;
   2e828:	687b      	ldr	r3, [r7, #4]
   2e82a:	69db      	ldr	r3, [r3, #28]
   2e82c:	68fa      	ldr	r2, [r7, #12]
   2e82e:	18d3      	adds	r3, r2, r3
   2e830:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2e832:	687b      	ldr	r3, [r7, #4]
   2e834:	7858      	ldrb	r0, [r3, #1]
   2e836:	687b      	ldr	r3, [r7, #4]
   2e838:	3330      	adds	r3, #48	; 0x30
   2e83a:	0019      	movs	r1, r3
   2e83c:	68fa      	ldr	r2, [r7, #12]
   2e83e:	2301      	movs	r3, #1
   2e840:	4c12      	ldr	r4, [pc, #72]	; (2e88c <move_window+0xc0>)
   2e842:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2e844:	230b      	movs	r3, #11
   2e846:	18fb      	adds	r3, r7, r3
   2e848:	781a      	ldrb	r2, [r3, #0]
   2e84a:	230b      	movs	r3, #11
   2e84c:	18fb      	adds	r3, r7, r3
   2e84e:	3a01      	subs	r2, #1
   2e850:	701a      	strb	r2, [r3, #0]
   2e852:	230b      	movs	r3, #11
   2e854:	18fb      	adds	r3, r7, r3
   2e856:	781b      	ldrb	r3, [r3, #0]
   2e858:	2b01      	cmp	r3, #1
   2e85a:	d8e5      	bhi.n	2e828 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2e85c:	683b      	ldr	r3, [r7, #0]
   2e85e:	2b00      	cmp	r3, #0
   2e860:	d00f      	beq.n	2e882 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2e862:	687b      	ldr	r3, [r7, #4]
   2e864:	7858      	ldrb	r0, [r3, #1]
   2e866:	687b      	ldr	r3, [r7, #4]
   2e868:	3330      	adds	r3, #48	; 0x30
   2e86a:	0019      	movs	r1, r3
   2e86c:	683a      	ldr	r2, [r7, #0]
   2e86e:	2301      	movs	r3, #1
   2e870:	4c07      	ldr	r4, [pc, #28]	; (2e890 <move_window+0xc4>)
   2e872:	47a0      	blx	r4
   2e874:	1e03      	subs	r3, r0, #0
   2e876:	d001      	beq.n	2e87c <move_window+0xb0>
				return FR_DISK_ERR;
   2e878:	2301      	movs	r3, #1
   2e87a:	e003      	b.n	2e884 <move_window+0xb8>
			fs->winsect = sector;
   2e87c:	687b      	ldr	r3, [r7, #4]
   2e87e:	683a      	ldr	r2, [r7, #0]
   2e880:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2e882:	2300      	movs	r3, #0
}
   2e884:	0018      	movs	r0, r3
   2e886:	46bd      	mov	sp, r7
   2e888:	b005      	add	sp, #20
   2e88a:	bd90      	pop	{r4, r7, pc}
   2e88c:	0002e4b9 	.word	0x0002e4b9
   2e890:	0002e3e1 	.word	0x0002e3e1

0002e894 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2e894:	b590      	push	{r4, r7, lr}
   2e896:	b085      	sub	sp, #20
   2e898:	af00      	add	r7, sp, #0
   2e89a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2e89c:	230f      	movs	r3, #15
   2e89e:	18fc      	adds	r4, r7, r3
   2e8a0:	687b      	ldr	r3, [r7, #4]
   2e8a2:	2100      	movs	r1, #0
   2e8a4:	0018      	movs	r0, r3
   2e8a6:	4b52      	ldr	r3, [pc, #328]	; (2e9f0 <sync+0x15c>)
   2e8a8:	4798      	blx	r3
   2e8aa:	0003      	movs	r3, r0
   2e8ac:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e8ae:	230f      	movs	r3, #15
   2e8b0:	18fb      	adds	r3, r7, r3
   2e8b2:	781b      	ldrb	r3, [r3, #0]
   2e8b4:	2b00      	cmp	r3, #0
   2e8b6:	d000      	beq.n	2e8ba <sync+0x26>
   2e8b8:	e093      	b.n	2e9e2 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2e8ba:	687b      	ldr	r3, [r7, #4]
   2e8bc:	781b      	ldrb	r3, [r3, #0]
   2e8be:	2b03      	cmp	r3, #3
   2e8c0:	d000      	beq.n	2e8c4 <sync+0x30>
   2e8c2:	e081      	b.n	2e9c8 <sync+0x134>
   2e8c4:	687b      	ldr	r3, [r7, #4]
   2e8c6:	795b      	ldrb	r3, [r3, #5]
   2e8c8:	2b00      	cmp	r3, #0
   2e8ca:	d07d      	beq.n	2e9c8 <sync+0x134>
			fs->winsect = 0;
   2e8cc:	687b      	ldr	r3, [r7, #4]
   2e8ce:	2200      	movs	r2, #0
   2e8d0:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2e8d2:	687b      	ldr	r3, [r7, #4]
   2e8d4:	3330      	adds	r3, #48	; 0x30
   2e8d6:	0018      	movs	r0, r3
   2e8d8:	2380      	movs	r3, #128	; 0x80
   2e8da:	009b      	lsls	r3, r3, #2
   2e8dc:	001a      	movs	r2, r3
   2e8de:	2100      	movs	r1, #0
   2e8e0:	4b44      	ldr	r3, [pc, #272]	; (2e9f4 <sync+0x160>)
   2e8e2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2e8e4:	687b      	ldr	r3, [r7, #4]
   2e8e6:	4a44      	ldr	r2, [pc, #272]	; (2e9f8 <sync+0x164>)
   2e8e8:	2155      	movs	r1, #85	; 0x55
   2e8ea:	5499      	strb	r1, [r3, r2]
   2e8ec:	687b      	ldr	r3, [r7, #4]
   2e8ee:	4a43      	ldr	r2, [pc, #268]	; (2e9fc <sync+0x168>)
   2e8f0:	21aa      	movs	r1, #170	; 0xaa
   2e8f2:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2e8f4:	687b      	ldr	r3, [r7, #4]
   2e8f6:	2230      	movs	r2, #48	; 0x30
   2e8f8:	2152      	movs	r1, #82	; 0x52
   2e8fa:	5499      	strb	r1, [r3, r2]
   2e8fc:	687b      	ldr	r3, [r7, #4]
   2e8fe:	2231      	movs	r2, #49	; 0x31
   2e900:	2152      	movs	r1, #82	; 0x52
   2e902:	5499      	strb	r1, [r3, r2]
   2e904:	687b      	ldr	r3, [r7, #4]
   2e906:	2232      	movs	r2, #50	; 0x32
   2e908:	2161      	movs	r1, #97	; 0x61
   2e90a:	5499      	strb	r1, [r3, r2]
   2e90c:	687b      	ldr	r3, [r7, #4]
   2e90e:	2233      	movs	r2, #51	; 0x33
   2e910:	2141      	movs	r1, #65	; 0x41
   2e912:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2e914:	687a      	ldr	r2, [r7, #4]
   2e916:	2385      	movs	r3, #133	; 0x85
   2e918:	009b      	lsls	r3, r3, #2
   2e91a:	2172      	movs	r1, #114	; 0x72
   2e91c:	54d1      	strb	r1, [r2, r3]
   2e91e:	687b      	ldr	r3, [r7, #4]
   2e920:	4a37      	ldr	r2, [pc, #220]	; (2ea00 <sync+0x16c>)
   2e922:	2172      	movs	r1, #114	; 0x72
   2e924:	5499      	strb	r1, [r3, r2]
   2e926:	687b      	ldr	r3, [r7, #4]
   2e928:	4a36      	ldr	r2, [pc, #216]	; (2ea04 <sync+0x170>)
   2e92a:	2141      	movs	r1, #65	; 0x41
   2e92c:	5499      	strb	r1, [r3, r2]
   2e92e:	687b      	ldr	r3, [r7, #4]
   2e930:	4a35      	ldr	r2, [pc, #212]	; (2ea08 <sync+0x174>)
   2e932:	2161      	movs	r1, #97	; 0x61
   2e934:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2e936:	687b      	ldr	r3, [r7, #4]
   2e938:	691b      	ldr	r3, [r3, #16]
   2e93a:	b2d9      	uxtb	r1, r3
   2e93c:	687a      	ldr	r2, [r7, #4]
   2e93e:	2386      	movs	r3, #134	; 0x86
   2e940:	009b      	lsls	r3, r3, #2
   2e942:	54d1      	strb	r1, [r2, r3]
   2e944:	687b      	ldr	r3, [r7, #4]
   2e946:	691b      	ldr	r3, [r3, #16]
   2e948:	b29b      	uxth	r3, r3
   2e94a:	0a1b      	lsrs	r3, r3, #8
   2e94c:	b29b      	uxth	r3, r3
   2e94e:	b2d9      	uxtb	r1, r3
   2e950:	687b      	ldr	r3, [r7, #4]
   2e952:	4a2e      	ldr	r2, [pc, #184]	; (2ea0c <sync+0x178>)
   2e954:	5499      	strb	r1, [r3, r2]
   2e956:	687b      	ldr	r3, [r7, #4]
   2e958:	691b      	ldr	r3, [r3, #16]
   2e95a:	0c1b      	lsrs	r3, r3, #16
   2e95c:	b2d9      	uxtb	r1, r3
   2e95e:	687b      	ldr	r3, [r7, #4]
   2e960:	4a2b      	ldr	r2, [pc, #172]	; (2ea10 <sync+0x17c>)
   2e962:	5499      	strb	r1, [r3, r2]
   2e964:	687b      	ldr	r3, [r7, #4]
   2e966:	691b      	ldr	r3, [r3, #16]
   2e968:	0e1b      	lsrs	r3, r3, #24
   2e96a:	b2d9      	uxtb	r1, r3
   2e96c:	687b      	ldr	r3, [r7, #4]
   2e96e:	4a29      	ldr	r2, [pc, #164]	; (2ea14 <sync+0x180>)
   2e970:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2e972:	687b      	ldr	r3, [r7, #4]
   2e974:	68db      	ldr	r3, [r3, #12]
   2e976:	b2d9      	uxtb	r1, r3
   2e978:	687a      	ldr	r2, [r7, #4]
   2e97a:	2387      	movs	r3, #135	; 0x87
   2e97c:	009b      	lsls	r3, r3, #2
   2e97e:	54d1      	strb	r1, [r2, r3]
   2e980:	687b      	ldr	r3, [r7, #4]
   2e982:	68db      	ldr	r3, [r3, #12]
   2e984:	b29b      	uxth	r3, r3
   2e986:	0a1b      	lsrs	r3, r3, #8
   2e988:	b29b      	uxth	r3, r3
   2e98a:	b2d9      	uxtb	r1, r3
   2e98c:	687b      	ldr	r3, [r7, #4]
   2e98e:	4a22      	ldr	r2, [pc, #136]	; (2ea18 <sync+0x184>)
   2e990:	5499      	strb	r1, [r3, r2]
   2e992:	687b      	ldr	r3, [r7, #4]
   2e994:	68db      	ldr	r3, [r3, #12]
   2e996:	0c1b      	lsrs	r3, r3, #16
   2e998:	b2d9      	uxtb	r1, r3
   2e99a:	687b      	ldr	r3, [r7, #4]
   2e99c:	4a1f      	ldr	r2, [pc, #124]	; (2ea1c <sync+0x188>)
   2e99e:	5499      	strb	r1, [r3, r2]
   2e9a0:	687b      	ldr	r3, [r7, #4]
   2e9a2:	68db      	ldr	r3, [r3, #12]
   2e9a4:	0e1b      	lsrs	r3, r3, #24
   2e9a6:	b2d9      	uxtb	r1, r3
   2e9a8:	687b      	ldr	r3, [r7, #4]
   2e9aa:	4a1d      	ldr	r2, [pc, #116]	; (2ea20 <sync+0x18c>)
   2e9ac:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2e9ae:	687b      	ldr	r3, [r7, #4]
   2e9b0:	7858      	ldrb	r0, [r3, #1]
   2e9b2:	687b      	ldr	r3, [r7, #4]
   2e9b4:	3330      	adds	r3, #48	; 0x30
   2e9b6:	0019      	movs	r1, r3
   2e9b8:	687b      	ldr	r3, [r7, #4]
   2e9ba:	695a      	ldr	r2, [r3, #20]
   2e9bc:	2301      	movs	r3, #1
   2e9be:	4c19      	ldr	r4, [pc, #100]	; (2ea24 <sync+0x190>)
   2e9c0:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2e9c2:	687b      	ldr	r3, [r7, #4]
   2e9c4:	2200      	movs	r2, #0
   2e9c6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2e9c8:	687b      	ldr	r3, [r7, #4]
   2e9ca:	785b      	ldrb	r3, [r3, #1]
   2e9cc:	2200      	movs	r2, #0
   2e9ce:	2100      	movs	r1, #0
   2e9d0:	0018      	movs	r0, r3
   2e9d2:	4b15      	ldr	r3, [pc, #84]	; (2ea28 <sync+0x194>)
   2e9d4:	4798      	blx	r3
   2e9d6:	1e03      	subs	r3, r0, #0
   2e9d8:	d003      	beq.n	2e9e2 <sync+0x14e>
			res = FR_DISK_ERR;
   2e9da:	230f      	movs	r3, #15
   2e9dc:	18fb      	adds	r3, r7, r3
   2e9de:	2201      	movs	r2, #1
   2e9e0:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2e9e2:	230f      	movs	r3, #15
   2e9e4:	18fb      	adds	r3, r7, r3
   2e9e6:	781b      	ldrb	r3, [r3, #0]
}
   2e9e8:	0018      	movs	r0, r3
   2e9ea:	46bd      	mov	sp, r7
   2e9ec:	b005      	add	sp, #20
   2e9ee:	bd90      	pop	{r4, r7, pc}
   2e9f0:	0002e7cd 	.word	0x0002e7cd
   2e9f4:	0002e721 	.word	0x0002e721
   2e9f8:	0000022e 	.word	0x0000022e
   2e9fc:	0000022f 	.word	0x0000022f
   2ea00:	00000215 	.word	0x00000215
   2ea04:	00000216 	.word	0x00000216
   2ea08:	00000217 	.word	0x00000217
   2ea0c:	00000219 	.word	0x00000219
   2ea10:	0000021a 	.word	0x0000021a
   2ea14:	0000021b 	.word	0x0000021b
   2ea18:	0000021d 	.word	0x0000021d
   2ea1c:	0000021e 	.word	0x0000021e
   2ea20:	0000021f 	.word	0x0000021f
   2ea24:	0002e4b9 	.word	0x0002e4b9
   2ea28:	0002e591 	.word	0x0002e591

0002ea2c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2ea2c:	b580      	push	{r7, lr}
   2ea2e:	b082      	sub	sp, #8
   2ea30:	af00      	add	r7, sp, #0
   2ea32:	6078      	str	r0, [r7, #4]
   2ea34:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2ea36:	683b      	ldr	r3, [r7, #0]
   2ea38:	3b02      	subs	r3, #2
   2ea3a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2ea3c:	687b      	ldr	r3, [r7, #4]
   2ea3e:	699b      	ldr	r3, [r3, #24]
   2ea40:	1e9a      	subs	r2, r3, #2
   2ea42:	683b      	ldr	r3, [r7, #0]
   2ea44:	429a      	cmp	r2, r3
   2ea46:	d801      	bhi.n	2ea4c <clust2sect+0x20>
   2ea48:	2300      	movs	r3, #0
   2ea4a:	e007      	b.n	2ea5c <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2ea4c:	687b      	ldr	r3, [r7, #4]
   2ea4e:	789b      	ldrb	r3, [r3, #2]
   2ea50:	001a      	movs	r2, r3
   2ea52:	683b      	ldr	r3, [r7, #0]
   2ea54:	435a      	muls	r2, r3
   2ea56:	687b      	ldr	r3, [r7, #4]
   2ea58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2ea5a:	18d3      	adds	r3, r2, r3
}
   2ea5c:	0018      	movs	r0, r3
   2ea5e:	46bd      	mov	sp, r7
   2ea60:	b002      	add	sp, #8
   2ea62:	bd80      	pop	{r7, pc}

0002ea64 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2ea64:	b580      	push	{r7, lr}
   2ea66:	b086      	sub	sp, #24
   2ea68:	af00      	add	r7, sp, #0
   2ea6a:	6078      	str	r0, [r7, #4]
   2ea6c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2ea6e:	683b      	ldr	r3, [r7, #0]
   2ea70:	2b01      	cmp	r3, #1
   2ea72:	d904      	bls.n	2ea7e <get_fat+0x1a>
   2ea74:	687b      	ldr	r3, [r7, #4]
   2ea76:	699a      	ldr	r2, [r3, #24]
   2ea78:	683b      	ldr	r3, [r7, #0]
   2ea7a:	429a      	cmp	r2, r3
   2ea7c:	d801      	bhi.n	2ea82 <get_fat+0x1e>
		return 1;
   2ea7e:	2301      	movs	r3, #1
   2ea80:	e09f      	b.n	2ebc2 <get_fat+0x15e>

	switch (fs->fs_type) {
   2ea82:	687b      	ldr	r3, [r7, #4]
   2ea84:	781b      	ldrb	r3, [r3, #0]
   2ea86:	2b02      	cmp	r3, #2
   2ea88:	d048      	beq.n	2eb1c <get_fat+0xb8>
   2ea8a:	2b03      	cmp	r3, #3
   2ea8c:	d067      	beq.n	2eb5e <get_fat+0xfa>
   2ea8e:	2b01      	cmp	r3, #1
   2ea90:	d000      	beq.n	2ea94 <get_fat+0x30>
   2ea92:	e094      	b.n	2ebbe <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2ea94:	683b      	ldr	r3, [r7, #0]
   2ea96:	617b      	str	r3, [r7, #20]
   2ea98:	697b      	ldr	r3, [r7, #20]
   2ea9a:	085b      	lsrs	r3, r3, #1
   2ea9c:	697a      	ldr	r2, [r7, #20]
   2ea9e:	18d3      	adds	r3, r2, r3
   2eaa0:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2eaa2:	687b      	ldr	r3, [r7, #4]
   2eaa4:	6a1a      	ldr	r2, [r3, #32]
   2eaa6:	697b      	ldr	r3, [r7, #20]
   2eaa8:	0a5b      	lsrs	r3, r3, #9
   2eaaa:	18d2      	adds	r2, r2, r3
   2eaac:	687b      	ldr	r3, [r7, #4]
   2eaae:	0011      	movs	r1, r2
   2eab0:	0018      	movs	r0, r3
   2eab2:	4b46      	ldr	r3, [pc, #280]	; (2ebcc <get_fat+0x168>)
   2eab4:	4798      	blx	r3
   2eab6:	1e03      	subs	r3, r0, #0
   2eab8:	d000      	beq.n	2eabc <get_fat+0x58>
   2eaba:	e079      	b.n	2ebb0 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2eabc:	697b      	ldr	r3, [r7, #20]
   2eabe:	05db      	lsls	r3, r3, #23
   2eac0:	0ddb      	lsrs	r3, r3, #23
   2eac2:	687a      	ldr	r2, [r7, #4]
   2eac4:	2130      	movs	r1, #48	; 0x30
   2eac6:	18d3      	adds	r3, r2, r3
   2eac8:	185b      	adds	r3, r3, r1
   2eaca:	781b      	ldrb	r3, [r3, #0]
   2eacc:	613b      	str	r3, [r7, #16]
   2eace:	697b      	ldr	r3, [r7, #20]
   2ead0:	3301      	adds	r3, #1
   2ead2:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ead4:	687b      	ldr	r3, [r7, #4]
   2ead6:	6a1a      	ldr	r2, [r3, #32]
   2ead8:	697b      	ldr	r3, [r7, #20]
   2eada:	0a5b      	lsrs	r3, r3, #9
   2eadc:	18d2      	adds	r2, r2, r3
   2eade:	687b      	ldr	r3, [r7, #4]
   2eae0:	0011      	movs	r1, r2
   2eae2:	0018      	movs	r0, r3
   2eae4:	4b39      	ldr	r3, [pc, #228]	; (2ebcc <get_fat+0x168>)
   2eae6:	4798      	blx	r3
   2eae8:	1e03      	subs	r3, r0, #0
   2eaea:	d163      	bne.n	2ebb4 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2eaec:	697b      	ldr	r3, [r7, #20]
   2eaee:	05db      	lsls	r3, r3, #23
   2eaf0:	0ddb      	lsrs	r3, r3, #23
   2eaf2:	687a      	ldr	r2, [r7, #4]
   2eaf4:	2130      	movs	r1, #48	; 0x30
   2eaf6:	18d3      	adds	r3, r2, r3
   2eaf8:	185b      	adds	r3, r3, r1
   2eafa:	781b      	ldrb	r3, [r3, #0]
   2eafc:	021b      	lsls	r3, r3, #8
   2eafe:	001a      	movs	r2, r3
   2eb00:	693b      	ldr	r3, [r7, #16]
   2eb02:	4313      	orrs	r3, r2
   2eb04:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2eb06:	683b      	ldr	r3, [r7, #0]
   2eb08:	2201      	movs	r2, #1
   2eb0a:	4013      	ands	r3, r2
   2eb0c:	d002      	beq.n	2eb14 <get_fat+0xb0>
   2eb0e:	693b      	ldr	r3, [r7, #16]
   2eb10:	091b      	lsrs	r3, r3, #4
   2eb12:	e056      	b.n	2ebc2 <get_fat+0x15e>
   2eb14:	693b      	ldr	r3, [r7, #16]
   2eb16:	051b      	lsls	r3, r3, #20
   2eb18:	0d1b      	lsrs	r3, r3, #20
   2eb1a:	e052      	b.n	2ebc2 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2eb1c:	687b      	ldr	r3, [r7, #4]
   2eb1e:	6a1a      	ldr	r2, [r3, #32]
   2eb20:	683b      	ldr	r3, [r7, #0]
   2eb22:	0a1b      	lsrs	r3, r3, #8
   2eb24:	18d2      	adds	r2, r2, r3
   2eb26:	687b      	ldr	r3, [r7, #4]
   2eb28:	0011      	movs	r1, r2
   2eb2a:	0018      	movs	r0, r3
   2eb2c:	4b27      	ldr	r3, [pc, #156]	; (2ebcc <get_fat+0x168>)
   2eb2e:	4798      	blx	r3
   2eb30:	1e03      	subs	r3, r0, #0
   2eb32:	d141      	bne.n	2ebb8 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2eb34:	683b      	ldr	r3, [r7, #0]
   2eb36:	005a      	lsls	r2, r3, #1
   2eb38:	23ff      	movs	r3, #255	; 0xff
   2eb3a:	005b      	lsls	r3, r3, #1
   2eb3c:	4013      	ands	r3, r2
   2eb3e:	3330      	adds	r3, #48	; 0x30
   2eb40:	687a      	ldr	r2, [r7, #4]
   2eb42:	18d3      	adds	r3, r2, r3
   2eb44:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2eb46:	68fb      	ldr	r3, [r7, #12]
   2eb48:	3301      	adds	r3, #1
   2eb4a:	781b      	ldrb	r3, [r3, #0]
   2eb4c:	021b      	lsls	r3, r3, #8
   2eb4e:	b21a      	sxth	r2, r3
   2eb50:	68fb      	ldr	r3, [r7, #12]
   2eb52:	781b      	ldrb	r3, [r3, #0]
   2eb54:	b21b      	sxth	r3, r3
   2eb56:	4313      	orrs	r3, r2
   2eb58:	b21b      	sxth	r3, r3
   2eb5a:	b29b      	uxth	r3, r3
   2eb5c:	e031      	b.n	2ebc2 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2eb5e:	687b      	ldr	r3, [r7, #4]
   2eb60:	6a1a      	ldr	r2, [r3, #32]
   2eb62:	683b      	ldr	r3, [r7, #0]
   2eb64:	09db      	lsrs	r3, r3, #7
   2eb66:	18d2      	adds	r2, r2, r3
   2eb68:	687b      	ldr	r3, [r7, #4]
   2eb6a:	0011      	movs	r1, r2
   2eb6c:	0018      	movs	r0, r3
   2eb6e:	4b17      	ldr	r3, [pc, #92]	; (2ebcc <get_fat+0x168>)
   2eb70:	4798      	blx	r3
   2eb72:	1e03      	subs	r3, r0, #0
   2eb74:	d122      	bne.n	2ebbc <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2eb76:	683b      	ldr	r3, [r7, #0]
   2eb78:	009a      	lsls	r2, r3, #2
   2eb7a:	23fe      	movs	r3, #254	; 0xfe
   2eb7c:	005b      	lsls	r3, r3, #1
   2eb7e:	4013      	ands	r3, r2
   2eb80:	3330      	adds	r3, #48	; 0x30
   2eb82:	687a      	ldr	r2, [r7, #4]
   2eb84:	18d3      	adds	r3, r2, r3
   2eb86:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2eb88:	68fb      	ldr	r3, [r7, #12]
   2eb8a:	3303      	adds	r3, #3
   2eb8c:	781b      	ldrb	r3, [r3, #0]
   2eb8e:	061a      	lsls	r2, r3, #24
   2eb90:	68fb      	ldr	r3, [r7, #12]
   2eb92:	3302      	adds	r3, #2
   2eb94:	781b      	ldrb	r3, [r3, #0]
   2eb96:	041b      	lsls	r3, r3, #16
   2eb98:	4313      	orrs	r3, r2
   2eb9a:	68fa      	ldr	r2, [r7, #12]
   2eb9c:	3201      	adds	r2, #1
   2eb9e:	7812      	ldrb	r2, [r2, #0]
   2eba0:	0212      	lsls	r2, r2, #8
   2eba2:	4313      	orrs	r3, r2
   2eba4:	68fa      	ldr	r2, [r7, #12]
   2eba6:	7812      	ldrb	r2, [r2, #0]
   2eba8:	4313      	orrs	r3, r2
   2ebaa:	011b      	lsls	r3, r3, #4
   2ebac:	091b      	lsrs	r3, r3, #4
   2ebae:	e008      	b.n	2ebc2 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ebb0:	46c0      	nop			; (mov r8, r8)
   2ebb2:	e004      	b.n	2ebbe <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ebb4:	46c0      	nop			; (mov r8, r8)
   2ebb6:	e002      	b.n	2ebbe <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ebb8:	46c0      	nop			; (mov r8, r8)
   2ebba:	e000      	b.n	2ebbe <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ebbc:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2ebbe:	2301      	movs	r3, #1
   2ebc0:	425b      	negs	r3, r3
}
   2ebc2:	0018      	movs	r0, r3
   2ebc4:	46bd      	mov	sp, r7
   2ebc6:	b006      	add	sp, #24
   2ebc8:	bd80      	pop	{r7, pc}
   2ebca:	46c0      	nop			; (mov r8, r8)
   2ebcc:	0002e7cd 	.word	0x0002e7cd

0002ebd0 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2ebd0:	b590      	push	{r4, r7, lr}
   2ebd2:	b089      	sub	sp, #36	; 0x24
   2ebd4:	af00      	add	r7, sp, #0
   2ebd6:	60f8      	str	r0, [r7, #12]
   2ebd8:	60b9      	str	r1, [r7, #8]
   2ebda:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ebdc:	68bb      	ldr	r3, [r7, #8]
   2ebde:	2b01      	cmp	r3, #1
   2ebe0:	d904      	bls.n	2ebec <put_fat+0x1c>
   2ebe2:	68fb      	ldr	r3, [r7, #12]
   2ebe4:	699a      	ldr	r2, [r3, #24]
   2ebe6:	68bb      	ldr	r3, [r7, #8]
   2ebe8:	429a      	cmp	r2, r3
   2ebea:	d804      	bhi.n	2ebf6 <put_fat+0x26>
		res = FR_INT_ERR;
   2ebec:	231f      	movs	r3, #31
   2ebee:	18fb      	adds	r3, r7, r3
   2ebf0:	2202      	movs	r2, #2
   2ebf2:	701a      	strb	r2, [r3, #0]
   2ebf4:	e100      	b.n	2edf8 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2ebf6:	68fb      	ldr	r3, [r7, #12]
   2ebf8:	781b      	ldrb	r3, [r3, #0]
   2ebfa:	2b02      	cmp	r3, #2
   2ebfc:	d100      	bne.n	2ec00 <put_fat+0x30>
   2ebfe:	e078      	b.n	2ecf2 <put_fat+0x122>
   2ec00:	2b03      	cmp	r3, #3
   2ec02:	d100      	bne.n	2ec06 <put_fat+0x36>
   2ec04:	e09e      	b.n	2ed44 <put_fat+0x174>
   2ec06:	2b01      	cmp	r3, #1
   2ec08:	d000      	beq.n	2ec0c <put_fat+0x3c>
   2ec0a:	e0e6      	b.n	2edda <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2ec0c:	68bb      	ldr	r3, [r7, #8]
   2ec0e:	61bb      	str	r3, [r7, #24]
   2ec10:	69bb      	ldr	r3, [r7, #24]
   2ec12:	085b      	lsrs	r3, r3, #1
   2ec14:	69ba      	ldr	r2, [r7, #24]
   2ec16:	18d3      	adds	r3, r2, r3
   2ec18:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2ec1a:	68fb      	ldr	r3, [r7, #12]
   2ec1c:	6a1a      	ldr	r2, [r3, #32]
   2ec1e:	69bb      	ldr	r3, [r7, #24]
   2ec20:	0a5b      	lsrs	r3, r3, #9
   2ec22:	18d2      	adds	r2, r2, r3
   2ec24:	231f      	movs	r3, #31
   2ec26:	18fc      	adds	r4, r7, r3
   2ec28:	68fb      	ldr	r3, [r7, #12]
   2ec2a:	0011      	movs	r1, r2
   2ec2c:	0018      	movs	r0, r3
   2ec2e:	4b76      	ldr	r3, [pc, #472]	; (2ee08 <put_fat+0x238>)
   2ec30:	4798      	blx	r3
   2ec32:	0003      	movs	r3, r0
   2ec34:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ec36:	231f      	movs	r3, #31
   2ec38:	18fb      	adds	r3, r7, r3
   2ec3a:	781b      	ldrb	r3, [r3, #0]
   2ec3c:	2b00      	cmp	r3, #0
   2ec3e:	d000      	beq.n	2ec42 <put_fat+0x72>
   2ec40:	e0d0      	b.n	2ede4 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2ec42:	69bb      	ldr	r3, [r7, #24]
   2ec44:	05db      	lsls	r3, r3, #23
   2ec46:	0ddb      	lsrs	r3, r3, #23
   2ec48:	3330      	adds	r3, #48	; 0x30
   2ec4a:	68fa      	ldr	r2, [r7, #12]
   2ec4c:	18d3      	adds	r3, r2, r3
   2ec4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2ec50:	68bb      	ldr	r3, [r7, #8]
   2ec52:	2201      	movs	r2, #1
   2ec54:	4013      	ands	r3, r2
   2ec56:	d00d      	beq.n	2ec74 <put_fat+0xa4>
   2ec58:	697b      	ldr	r3, [r7, #20]
   2ec5a:	781b      	ldrb	r3, [r3, #0]
   2ec5c:	b25b      	sxtb	r3, r3
   2ec5e:	220f      	movs	r2, #15
   2ec60:	4013      	ands	r3, r2
   2ec62:	b25a      	sxtb	r2, r3
   2ec64:	687b      	ldr	r3, [r7, #4]
   2ec66:	b2db      	uxtb	r3, r3
   2ec68:	011b      	lsls	r3, r3, #4
   2ec6a:	b25b      	sxtb	r3, r3
   2ec6c:	4313      	orrs	r3, r2
   2ec6e:	b25b      	sxtb	r3, r3
   2ec70:	b2db      	uxtb	r3, r3
   2ec72:	e001      	b.n	2ec78 <put_fat+0xa8>
   2ec74:	687b      	ldr	r3, [r7, #4]
   2ec76:	b2db      	uxtb	r3, r3
   2ec78:	697a      	ldr	r2, [r7, #20]
   2ec7a:	7013      	strb	r3, [r2, #0]
			bc++;
   2ec7c:	69bb      	ldr	r3, [r7, #24]
   2ec7e:	3301      	adds	r3, #1
   2ec80:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2ec82:	68fb      	ldr	r3, [r7, #12]
   2ec84:	2201      	movs	r2, #1
   2ec86:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2ec88:	68fb      	ldr	r3, [r7, #12]
   2ec8a:	6a1a      	ldr	r2, [r3, #32]
   2ec8c:	69bb      	ldr	r3, [r7, #24]
   2ec8e:	0a5b      	lsrs	r3, r3, #9
   2ec90:	18d2      	adds	r2, r2, r3
   2ec92:	231f      	movs	r3, #31
   2ec94:	18fc      	adds	r4, r7, r3
   2ec96:	68fb      	ldr	r3, [r7, #12]
   2ec98:	0011      	movs	r1, r2
   2ec9a:	0018      	movs	r0, r3
   2ec9c:	4b5a      	ldr	r3, [pc, #360]	; (2ee08 <put_fat+0x238>)
   2ec9e:	4798      	blx	r3
   2eca0:	0003      	movs	r3, r0
   2eca2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2eca4:	231f      	movs	r3, #31
   2eca6:	18fb      	adds	r3, r7, r3
   2eca8:	781b      	ldrb	r3, [r3, #0]
   2ecaa:	2b00      	cmp	r3, #0
   2ecac:	d000      	beq.n	2ecb0 <put_fat+0xe0>
   2ecae:	e09b      	b.n	2ede8 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2ecb0:	69bb      	ldr	r3, [r7, #24]
   2ecb2:	05db      	lsls	r3, r3, #23
   2ecb4:	0ddb      	lsrs	r3, r3, #23
   2ecb6:	3330      	adds	r3, #48	; 0x30
   2ecb8:	68fa      	ldr	r2, [r7, #12]
   2ecba:	18d3      	adds	r3, r2, r3
   2ecbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2ecbe:	68bb      	ldr	r3, [r7, #8]
   2ecc0:	2201      	movs	r2, #1
   2ecc2:	4013      	ands	r3, r2
   2ecc4:	d003      	beq.n	2ecce <put_fat+0xfe>
   2ecc6:	687b      	ldr	r3, [r7, #4]
   2ecc8:	091b      	lsrs	r3, r3, #4
   2ecca:	b2db      	uxtb	r3, r3
   2eccc:	e00e      	b.n	2ecec <put_fat+0x11c>
   2ecce:	697b      	ldr	r3, [r7, #20]
   2ecd0:	781b      	ldrb	r3, [r3, #0]
   2ecd2:	b25b      	sxtb	r3, r3
   2ecd4:	220f      	movs	r2, #15
   2ecd6:	4393      	bics	r3, r2
   2ecd8:	b25a      	sxtb	r2, r3
   2ecda:	687b      	ldr	r3, [r7, #4]
   2ecdc:	0a1b      	lsrs	r3, r3, #8
   2ecde:	b25b      	sxtb	r3, r3
   2ece0:	210f      	movs	r1, #15
   2ece2:	400b      	ands	r3, r1
   2ece4:	b25b      	sxtb	r3, r3
   2ece6:	4313      	orrs	r3, r2
   2ece8:	b25b      	sxtb	r3, r3
   2ecea:	b2db      	uxtb	r3, r3
   2ecec:	697a      	ldr	r2, [r7, #20]
   2ecee:	7013      	strb	r3, [r2, #0]
			break;
   2ecf0:	e07f      	b.n	2edf2 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2ecf2:	68fb      	ldr	r3, [r7, #12]
   2ecf4:	6a1a      	ldr	r2, [r3, #32]
   2ecf6:	68bb      	ldr	r3, [r7, #8]
   2ecf8:	0a1b      	lsrs	r3, r3, #8
   2ecfa:	18d2      	adds	r2, r2, r3
   2ecfc:	231f      	movs	r3, #31
   2ecfe:	18fc      	adds	r4, r7, r3
   2ed00:	68fb      	ldr	r3, [r7, #12]
   2ed02:	0011      	movs	r1, r2
   2ed04:	0018      	movs	r0, r3
   2ed06:	4b40      	ldr	r3, [pc, #256]	; (2ee08 <put_fat+0x238>)
   2ed08:	4798      	blx	r3
   2ed0a:	0003      	movs	r3, r0
   2ed0c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ed0e:	231f      	movs	r3, #31
   2ed10:	18fb      	adds	r3, r7, r3
   2ed12:	781b      	ldrb	r3, [r3, #0]
   2ed14:	2b00      	cmp	r3, #0
   2ed16:	d169      	bne.n	2edec <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2ed18:	68bb      	ldr	r3, [r7, #8]
   2ed1a:	005a      	lsls	r2, r3, #1
   2ed1c:	23ff      	movs	r3, #255	; 0xff
   2ed1e:	005b      	lsls	r3, r3, #1
   2ed20:	4013      	ands	r3, r2
   2ed22:	3330      	adds	r3, #48	; 0x30
   2ed24:	68fa      	ldr	r2, [r7, #12]
   2ed26:	18d3      	adds	r3, r2, r3
   2ed28:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2ed2a:	687b      	ldr	r3, [r7, #4]
   2ed2c:	b2da      	uxtb	r2, r3
   2ed2e:	697b      	ldr	r3, [r7, #20]
   2ed30:	701a      	strb	r2, [r3, #0]
   2ed32:	697b      	ldr	r3, [r7, #20]
   2ed34:	3301      	adds	r3, #1
   2ed36:	687a      	ldr	r2, [r7, #4]
   2ed38:	b292      	uxth	r2, r2
   2ed3a:	0a12      	lsrs	r2, r2, #8
   2ed3c:	b292      	uxth	r2, r2
   2ed3e:	b2d2      	uxtb	r2, r2
   2ed40:	701a      	strb	r2, [r3, #0]
			break;
   2ed42:	e056      	b.n	2edf2 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2ed44:	68fb      	ldr	r3, [r7, #12]
   2ed46:	6a1a      	ldr	r2, [r3, #32]
   2ed48:	68bb      	ldr	r3, [r7, #8]
   2ed4a:	09db      	lsrs	r3, r3, #7
   2ed4c:	18d2      	adds	r2, r2, r3
   2ed4e:	231f      	movs	r3, #31
   2ed50:	18fc      	adds	r4, r7, r3
   2ed52:	68fb      	ldr	r3, [r7, #12]
   2ed54:	0011      	movs	r1, r2
   2ed56:	0018      	movs	r0, r3
   2ed58:	4b2b      	ldr	r3, [pc, #172]	; (2ee08 <put_fat+0x238>)
   2ed5a:	4798      	blx	r3
   2ed5c:	0003      	movs	r3, r0
   2ed5e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ed60:	231f      	movs	r3, #31
   2ed62:	18fb      	adds	r3, r7, r3
   2ed64:	781b      	ldrb	r3, [r3, #0]
   2ed66:	2b00      	cmp	r3, #0
   2ed68:	d142      	bne.n	2edf0 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2ed6a:	68bb      	ldr	r3, [r7, #8]
   2ed6c:	009a      	lsls	r2, r3, #2
   2ed6e:	23fe      	movs	r3, #254	; 0xfe
   2ed70:	005b      	lsls	r3, r3, #1
   2ed72:	4013      	ands	r3, r2
   2ed74:	3330      	adds	r3, #48	; 0x30
   2ed76:	68fa      	ldr	r2, [r7, #12]
   2ed78:	18d3      	adds	r3, r2, r3
   2ed7a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2ed7c:	697b      	ldr	r3, [r7, #20]
   2ed7e:	3303      	adds	r3, #3
   2ed80:	781b      	ldrb	r3, [r3, #0]
   2ed82:	061a      	lsls	r2, r3, #24
   2ed84:	697b      	ldr	r3, [r7, #20]
   2ed86:	3302      	adds	r3, #2
   2ed88:	781b      	ldrb	r3, [r3, #0]
   2ed8a:	041b      	lsls	r3, r3, #16
   2ed8c:	4313      	orrs	r3, r2
   2ed8e:	697a      	ldr	r2, [r7, #20]
   2ed90:	3201      	adds	r2, #1
   2ed92:	7812      	ldrb	r2, [r2, #0]
   2ed94:	0212      	lsls	r2, r2, #8
   2ed96:	4313      	orrs	r3, r2
   2ed98:	697a      	ldr	r2, [r7, #20]
   2ed9a:	7812      	ldrb	r2, [r2, #0]
   2ed9c:	4313      	orrs	r3, r2
   2ed9e:	0f1b      	lsrs	r3, r3, #28
   2eda0:	071b      	lsls	r3, r3, #28
   2eda2:	687a      	ldr	r2, [r7, #4]
   2eda4:	4313      	orrs	r3, r2
   2eda6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2eda8:	687b      	ldr	r3, [r7, #4]
   2edaa:	b2da      	uxtb	r2, r3
   2edac:	697b      	ldr	r3, [r7, #20]
   2edae:	701a      	strb	r2, [r3, #0]
   2edb0:	697b      	ldr	r3, [r7, #20]
   2edb2:	3301      	adds	r3, #1
   2edb4:	687a      	ldr	r2, [r7, #4]
   2edb6:	b292      	uxth	r2, r2
   2edb8:	0a12      	lsrs	r2, r2, #8
   2edba:	b292      	uxth	r2, r2
   2edbc:	b2d2      	uxtb	r2, r2
   2edbe:	701a      	strb	r2, [r3, #0]
   2edc0:	697b      	ldr	r3, [r7, #20]
   2edc2:	3302      	adds	r3, #2
   2edc4:	687a      	ldr	r2, [r7, #4]
   2edc6:	0c12      	lsrs	r2, r2, #16
   2edc8:	b2d2      	uxtb	r2, r2
   2edca:	701a      	strb	r2, [r3, #0]
   2edcc:	697b      	ldr	r3, [r7, #20]
   2edce:	3303      	adds	r3, #3
   2edd0:	687a      	ldr	r2, [r7, #4]
   2edd2:	0e12      	lsrs	r2, r2, #24
   2edd4:	b2d2      	uxtb	r2, r2
   2edd6:	701a      	strb	r2, [r3, #0]
			break;
   2edd8:	e00b      	b.n	2edf2 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2edda:	231f      	movs	r3, #31
   2eddc:	18fb      	adds	r3, r7, r3
   2edde:	2202      	movs	r2, #2
   2ede0:	701a      	strb	r2, [r3, #0]
   2ede2:	e006      	b.n	2edf2 <put_fat+0x222>
			if (res != FR_OK) break;
   2ede4:	46c0      	nop			; (mov r8, r8)
   2ede6:	e004      	b.n	2edf2 <put_fat+0x222>
			if (res != FR_OK) break;
   2ede8:	46c0      	nop			; (mov r8, r8)
   2edea:	e002      	b.n	2edf2 <put_fat+0x222>
			if (res != FR_OK) break;
   2edec:	46c0      	nop			; (mov r8, r8)
   2edee:	e000      	b.n	2edf2 <put_fat+0x222>
			if (res != FR_OK) break;
   2edf0:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2edf2:	68fb      	ldr	r3, [r7, #12]
   2edf4:	2201      	movs	r2, #1
   2edf6:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2edf8:	231f      	movs	r3, #31
   2edfa:	18fb      	adds	r3, r7, r3
   2edfc:	781b      	ldrb	r3, [r3, #0]
}
   2edfe:	0018      	movs	r0, r3
   2ee00:	46bd      	mov	sp, r7
   2ee02:	b009      	add	sp, #36	; 0x24
   2ee04:	bd90      	pop	{r4, r7, pc}
   2ee06:	46c0      	nop			; (mov r8, r8)
   2ee08:	0002e7cd 	.word	0x0002e7cd

0002ee0c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2ee0c:	b590      	push	{r4, r7, lr}
   2ee0e:	b085      	sub	sp, #20
   2ee10:	af00      	add	r7, sp, #0
   2ee12:	6078      	str	r0, [r7, #4]
   2ee14:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ee16:	683b      	ldr	r3, [r7, #0]
   2ee18:	2b01      	cmp	r3, #1
   2ee1a:	d904      	bls.n	2ee26 <remove_chain+0x1a>
   2ee1c:	687b      	ldr	r3, [r7, #4]
   2ee1e:	699a      	ldr	r2, [r3, #24]
   2ee20:	683b      	ldr	r3, [r7, #0]
   2ee22:	429a      	cmp	r2, r3
   2ee24:	d804      	bhi.n	2ee30 <remove_chain+0x24>
		res = FR_INT_ERR;
   2ee26:	230f      	movs	r3, #15
   2ee28:	18fb      	adds	r3, r7, r3
   2ee2a:	2202      	movs	r2, #2
   2ee2c:	701a      	strb	r2, [r3, #0]
   2ee2e:	e045      	b.n	2eebc <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2ee30:	230f      	movs	r3, #15
   2ee32:	18fb      	adds	r3, r7, r3
   2ee34:	2200      	movs	r2, #0
   2ee36:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2ee38:	e037      	b.n	2eeaa <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2ee3a:	683a      	ldr	r2, [r7, #0]
   2ee3c:	687b      	ldr	r3, [r7, #4]
   2ee3e:	0011      	movs	r1, r2
   2ee40:	0018      	movs	r0, r3
   2ee42:	4b22      	ldr	r3, [pc, #136]	; (2eecc <remove_chain+0xc0>)
   2ee44:	4798      	blx	r3
   2ee46:	0003      	movs	r3, r0
   2ee48:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2ee4a:	68bb      	ldr	r3, [r7, #8]
   2ee4c:	2b00      	cmp	r3, #0
   2ee4e:	d032      	beq.n	2eeb6 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2ee50:	68bb      	ldr	r3, [r7, #8]
   2ee52:	2b01      	cmp	r3, #1
   2ee54:	d104      	bne.n	2ee60 <remove_chain+0x54>
   2ee56:	230f      	movs	r3, #15
   2ee58:	18fb      	adds	r3, r7, r3
   2ee5a:	2202      	movs	r2, #2
   2ee5c:	701a      	strb	r2, [r3, #0]
   2ee5e:	e02d      	b.n	2eebc <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2ee60:	68bb      	ldr	r3, [r7, #8]
   2ee62:	3301      	adds	r3, #1
   2ee64:	d104      	bne.n	2ee70 <remove_chain+0x64>
   2ee66:	230f      	movs	r3, #15
   2ee68:	18fb      	adds	r3, r7, r3
   2ee6a:	2201      	movs	r2, #1
   2ee6c:	701a      	strb	r2, [r3, #0]
   2ee6e:	e025      	b.n	2eebc <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2ee70:	230f      	movs	r3, #15
   2ee72:	18fc      	adds	r4, r7, r3
   2ee74:	6839      	ldr	r1, [r7, #0]
   2ee76:	687b      	ldr	r3, [r7, #4]
   2ee78:	2200      	movs	r2, #0
   2ee7a:	0018      	movs	r0, r3
   2ee7c:	4b14      	ldr	r3, [pc, #80]	; (2eed0 <remove_chain+0xc4>)
   2ee7e:	4798      	blx	r3
   2ee80:	0003      	movs	r3, r0
   2ee82:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ee84:	230f      	movs	r3, #15
   2ee86:	18fb      	adds	r3, r7, r3
   2ee88:	781b      	ldrb	r3, [r3, #0]
   2ee8a:	2b00      	cmp	r3, #0
   2ee8c:	d115      	bne.n	2eeba <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2ee8e:	687b      	ldr	r3, [r7, #4]
   2ee90:	691b      	ldr	r3, [r3, #16]
   2ee92:	3301      	adds	r3, #1
   2ee94:	d007      	beq.n	2eea6 <remove_chain+0x9a>
				fs->free_clust++;
   2ee96:	687b      	ldr	r3, [r7, #4]
   2ee98:	691b      	ldr	r3, [r3, #16]
   2ee9a:	1c5a      	adds	r2, r3, #1
   2ee9c:	687b      	ldr	r3, [r7, #4]
   2ee9e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2eea0:	687b      	ldr	r3, [r7, #4]
   2eea2:	2201      	movs	r2, #1
   2eea4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2eea6:	68bb      	ldr	r3, [r7, #8]
   2eea8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2eeaa:	687b      	ldr	r3, [r7, #4]
   2eeac:	699a      	ldr	r2, [r3, #24]
   2eeae:	683b      	ldr	r3, [r7, #0]
   2eeb0:	429a      	cmp	r2, r3
   2eeb2:	d8c2      	bhi.n	2ee3a <remove_chain+0x2e>
   2eeb4:	e002      	b.n	2eebc <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2eeb6:	46c0      	nop			; (mov r8, r8)
   2eeb8:	e000      	b.n	2eebc <remove_chain+0xb0>
			if (res != FR_OK) break;
   2eeba:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2eebc:	230f      	movs	r3, #15
   2eebe:	18fb      	adds	r3, r7, r3
   2eec0:	781b      	ldrb	r3, [r3, #0]
}
   2eec2:	0018      	movs	r0, r3
   2eec4:	46bd      	mov	sp, r7
   2eec6:	b005      	add	sp, #20
   2eec8:	bd90      	pop	{r4, r7, pc}
   2eeca:	46c0      	nop			; (mov r8, r8)
   2eecc:	0002ea65 	.word	0x0002ea65
   2eed0:	0002ebd1 	.word	0x0002ebd1

0002eed4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2eed4:	b590      	push	{r4, r7, lr}
   2eed6:	b087      	sub	sp, #28
   2eed8:	af00      	add	r7, sp, #0
   2eeda:	6078      	str	r0, [r7, #4]
   2eedc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2eede:	683b      	ldr	r3, [r7, #0]
   2eee0:	2b00      	cmp	r3, #0
   2eee2:	d10d      	bne.n	2ef00 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2eee4:	687b      	ldr	r3, [r7, #4]
   2eee6:	68db      	ldr	r3, [r3, #12]
   2eee8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2eeea:	693b      	ldr	r3, [r7, #16]
   2eeec:	2b00      	cmp	r3, #0
   2eeee:	d004      	beq.n	2eefa <create_chain+0x26>
   2eef0:	687b      	ldr	r3, [r7, #4]
   2eef2:	699a      	ldr	r2, [r3, #24]
   2eef4:	693b      	ldr	r3, [r7, #16]
   2eef6:	429a      	cmp	r2, r3
   2eef8:	d818      	bhi.n	2ef2c <create_chain+0x58>
   2eefa:	2301      	movs	r3, #1
   2eefc:	613b      	str	r3, [r7, #16]
   2eefe:	e015      	b.n	2ef2c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2ef00:	683a      	ldr	r2, [r7, #0]
   2ef02:	687b      	ldr	r3, [r7, #4]
   2ef04:	0011      	movs	r1, r2
   2ef06:	0018      	movs	r0, r3
   2ef08:	4b3e      	ldr	r3, [pc, #248]	; (2f004 <create_chain+0x130>)
   2ef0a:	4798      	blx	r3
   2ef0c:	0003      	movs	r3, r0
   2ef0e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2ef10:	68bb      	ldr	r3, [r7, #8]
   2ef12:	2b01      	cmp	r3, #1
   2ef14:	d801      	bhi.n	2ef1a <create_chain+0x46>
   2ef16:	2301      	movs	r3, #1
   2ef18:	e070      	b.n	2effc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2ef1a:	687b      	ldr	r3, [r7, #4]
   2ef1c:	699a      	ldr	r2, [r3, #24]
   2ef1e:	68bb      	ldr	r3, [r7, #8]
   2ef20:	429a      	cmp	r2, r3
   2ef22:	d901      	bls.n	2ef28 <create_chain+0x54>
   2ef24:	68bb      	ldr	r3, [r7, #8]
   2ef26:	e069      	b.n	2effc <create_chain+0x128>
		scl = clst;
   2ef28:	683b      	ldr	r3, [r7, #0]
   2ef2a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2ef2c:	693b      	ldr	r3, [r7, #16]
   2ef2e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2ef30:	697b      	ldr	r3, [r7, #20]
   2ef32:	3301      	adds	r3, #1
   2ef34:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2ef36:	687b      	ldr	r3, [r7, #4]
   2ef38:	699a      	ldr	r2, [r3, #24]
   2ef3a:	697b      	ldr	r3, [r7, #20]
   2ef3c:	429a      	cmp	r2, r3
   2ef3e:	d807      	bhi.n	2ef50 <create_chain+0x7c>
			ncl = 2;
   2ef40:	2302      	movs	r3, #2
   2ef42:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2ef44:	697a      	ldr	r2, [r7, #20]
   2ef46:	693b      	ldr	r3, [r7, #16]
   2ef48:	429a      	cmp	r2, r3
   2ef4a:	d901      	bls.n	2ef50 <create_chain+0x7c>
   2ef4c:	2300      	movs	r3, #0
   2ef4e:	e055      	b.n	2effc <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2ef50:	697a      	ldr	r2, [r7, #20]
   2ef52:	687b      	ldr	r3, [r7, #4]
   2ef54:	0011      	movs	r1, r2
   2ef56:	0018      	movs	r0, r3
   2ef58:	4b2a      	ldr	r3, [pc, #168]	; (2f004 <create_chain+0x130>)
   2ef5a:	4798      	blx	r3
   2ef5c:	0003      	movs	r3, r0
   2ef5e:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2ef60:	68bb      	ldr	r3, [r7, #8]
   2ef62:	2b00      	cmp	r3, #0
   2ef64:	d00d      	beq.n	2ef82 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2ef66:	68bb      	ldr	r3, [r7, #8]
   2ef68:	3301      	adds	r3, #1
   2ef6a:	d002      	beq.n	2ef72 <create_chain+0x9e>
   2ef6c:	68bb      	ldr	r3, [r7, #8]
   2ef6e:	2b01      	cmp	r3, #1
   2ef70:	d101      	bne.n	2ef76 <create_chain+0xa2>
			return cs;
   2ef72:	68bb      	ldr	r3, [r7, #8]
   2ef74:	e042      	b.n	2effc <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2ef76:	697a      	ldr	r2, [r7, #20]
   2ef78:	693b      	ldr	r3, [r7, #16]
   2ef7a:	429a      	cmp	r2, r3
   2ef7c:	d1d8      	bne.n	2ef30 <create_chain+0x5c>
   2ef7e:	2300      	movs	r3, #0
   2ef80:	e03c      	b.n	2effc <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2ef82:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2ef84:	230f      	movs	r3, #15
   2ef86:	18fc      	adds	r4, r7, r3
   2ef88:	4a1f      	ldr	r2, [pc, #124]	; (2f008 <create_chain+0x134>)
   2ef8a:	6979      	ldr	r1, [r7, #20]
   2ef8c:	687b      	ldr	r3, [r7, #4]
   2ef8e:	0018      	movs	r0, r3
   2ef90:	4b1e      	ldr	r3, [pc, #120]	; (2f00c <create_chain+0x138>)
   2ef92:	4798      	blx	r3
   2ef94:	0003      	movs	r3, r0
   2ef96:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2ef98:	230f      	movs	r3, #15
   2ef9a:	18fb      	adds	r3, r7, r3
   2ef9c:	781b      	ldrb	r3, [r3, #0]
   2ef9e:	2b00      	cmp	r3, #0
   2efa0:	d10c      	bne.n	2efbc <create_chain+0xe8>
   2efa2:	683b      	ldr	r3, [r7, #0]
   2efa4:	2b00      	cmp	r3, #0
   2efa6:	d009      	beq.n	2efbc <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2efa8:	230f      	movs	r3, #15
   2efaa:	18fc      	adds	r4, r7, r3
   2efac:	697a      	ldr	r2, [r7, #20]
   2efae:	6839      	ldr	r1, [r7, #0]
   2efb0:	687b      	ldr	r3, [r7, #4]
   2efb2:	0018      	movs	r0, r3
   2efb4:	4b15      	ldr	r3, [pc, #84]	; (2f00c <create_chain+0x138>)
   2efb6:	4798      	blx	r3
   2efb8:	0003      	movs	r3, r0
   2efba:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2efbc:	230f      	movs	r3, #15
   2efbe:	18fb      	adds	r3, r7, r3
   2efc0:	781b      	ldrb	r3, [r3, #0]
   2efc2:	2b00      	cmp	r3, #0
   2efc4:	d10f      	bne.n	2efe6 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2efc6:	687b      	ldr	r3, [r7, #4]
   2efc8:	697a      	ldr	r2, [r7, #20]
   2efca:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2efcc:	687b      	ldr	r3, [r7, #4]
   2efce:	691b      	ldr	r3, [r3, #16]
   2efd0:	3301      	adds	r3, #1
   2efd2:	d012      	beq.n	2effa <create_chain+0x126>
			fs->free_clust--;
   2efd4:	687b      	ldr	r3, [r7, #4]
   2efd6:	691b      	ldr	r3, [r3, #16]
   2efd8:	1e5a      	subs	r2, r3, #1
   2efda:	687b      	ldr	r3, [r7, #4]
   2efdc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2efde:	687b      	ldr	r3, [r7, #4]
   2efe0:	2201      	movs	r2, #1
   2efe2:	715a      	strb	r2, [r3, #5]
   2efe4:	e009      	b.n	2effa <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2efe6:	230f      	movs	r3, #15
   2efe8:	18fb      	adds	r3, r7, r3
   2efea:	781b      	ldrb	r3, [r3, #0]
   2efec:	2b01      	cmp	r3, #1
   2efee:	d102      	bne.n	2eff6 <create_chain+0x122>
   2eff0:	2301      	movs	r3, #1
   2eff2:	425b      	negs	r3, r3
   2eff4:	e000      	b.n	2eff8 <create_chain+0x124>
   2eff6:	2301      	movs	r3, #1
   2eff8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2effa:	697b      	ldr	r3, [r7, #20]
}
   2effc:	0018      	movs	r0, r3
   2effe:	46bd      	mov	sp, r7
   2f000:	b007      	add	sp, #28
   2f002:	bd90      	pop	{r4, r7, pc}
   2f004:	0002ea65 	.word	0x0002ea65
   2f008:	0fffffff 	.word	0x0fffffff
   2f00c:	0002ebd1 	.word	0x0002ebd1

0002f010 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2f010:	b580      	push	{r7, lr}
   2f012:	b084      	sub	sp, #16
   2f014:	af00      	add	r7, sp, #0
   2f016:	6078      	str	r0, [r7, #4]
   2f018:	000a      	movs	r2, r1
   2f01a:	1cbb      	adds	r3, r7, #2
   2f01c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2f01e:	687b      	ldr	r3, [r7, #4]
   2f020:	1cba      	adds	r2, r7, #2
   2f022:	8812      	ldrh	r2, [r2, #0]
   2f024:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2f026:	687b      	ldr	r3, [r7, #4]
   2f028:	689b      	ldr	r3, [r3, #8]
   2f02a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2f02c:	68fb      	ldr	r3, [r7, #12]
   2f02e:	2b01      	cmp	r3, #1
   2f030:	d005      	beq.n	2f03e <dir_sdi+0x2e>
   2f032:	687b      	ldr	r3, [r7, #4]
   2f034:	681b      	ldr	r3, [r3, #0]
   2f036:	699a      	ldr	r2, [r3, #24]
   2f038:	68fb      	ldr	r3, [r7, #12]
   2f03a:	429a      	cmp	r2, r3
   2f03c:	d801      	bhi.n	2f042 <dir_sdi+0x32>
		return FR_INT_ERR;
   2f03e:	2302      	movs	r3, #2
   2f040:	e075      	b.n	2f12e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2f042:	68fb      	ldr	r3, [r7, #12]
   2f044:	2b00      	cmp	r3, #0
   2f046:	d108      	bne.n	2f05a <dir_sdi+0x4a>
   2f048:	687b      	ldr	r3, [r7, #4]
   2f04a:	681b      	ldr	r3, [r3, #0]
   2f04c:	781b      	ldrb	r3, [r3, #0]
   2f04e:	2b03      	cmp	r3, #3
   2f050:	d103      	bne.n	2f05a <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2f052:	687b      	ldr	r3, [r7, #4]
   2f054:	681b      	ldr	r3, [r3, #0]
   2f056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2f058:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2f05a:	68fb      	ldr	r3, [r7, #12]
   2f05c:	2b00      	cmp	r3, #0
   2f05e:	d116      	bne.n	2f08e <dir_sdi+0x7e>
		dj->clust = clst;
   2f060:	687b      	ldr	r3, [r7, #4]
   2f062:	68fa      	ldr	r2, [r7, #12]
   2f064:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2f066:	687b      	ldr	r3, [r7, #4]
   2f068:	681b      	ldr	r3, [r3, #0]
   2f06a:	891b      	ldrh	r3, [r3, #8]
   2f06c:	1cba      	adds	r2, r7, #2
   2f06e:	8812      	ldrh	r2, [r2, #0]
   2f070:	429a      	cmp	r2, r3
   2f072:	d301      	bcc.n	2f078 <dir_sdi+0x68>
			return FR_INT_ERR;
   2f074:	2302      	movs	r3, #2
   2f076:	e05a      	b.n	2f12e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2f078:	687b      	ldr	r3, [r7, #4]
   2f07a:	681b      	ldr	r3, [r3, #0]
   2f07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2f07e:	1cba      	adds	r2, r7, #2
   2f080:	8812      	ldrh	r2, [r2, #0]
   2f082:	0912      	lsrs	r2, r2, #4
   2f084:	b292      	uxth	r2, r2
   2f086:	189a      	adds	r2, r3, r2
   2f088:	687b      	ldr	r3, [r7, #4]
   2f08a:	611a      	str	r2, [r3, #16]
   2f08c:	e042      	b.n	2f114 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2f08e:	687b      	ldr	r3, [r7, #4]
   2f090:	681b      	ldr	r3, [r3, #0]
   2f092:	789b      	ldrb	r3, [r3, #2]
   2f094:	b29a      	uxth	r2, r3
   2f096:	230a      	movs	r3, #10
   2f098:	18fb      	adds	r3, r7, r3
   2f09a:	0112      	lsls	r2, r2, #4
   2f09c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2f09e:	e020      	b.n	2f0e2 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2f0a0:	687b      	ldr	r3, [r7, #4]
   2f0a2:	681b      	ldr	r3, [r3, #0]
   2f0a4:	68fa      	ldr	r2, [r7, #12]
   2f0a6:	0011      	movs	r1, r2
   2f0a8:	0018      	movs	r0, r3
   2f0aa:	4b23      	ldr	r3, [pc, #140]	; (2f138 <dir_sdi+0x128>)
   2f0ac:	4798      	blx	r3
   2f0ae:	0003      	movs	r3, r0
   2f0b0:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2f0b2:	68fb      	ldr	r3, [r7, #12]
   2f0b4:	3301      	adds	r3, #1
   2f0b6:	d101      	bne.n	2f0bc <dir_sdi+0xac>
   2f0b8:	2301      	movs	r3, #1
   2f0ba:	e038      	b.n	2f12e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2f0bc:	68fb      	ldr	r3, [r7, #12]
   2f0be:	2b01      	cmp	r3, #1
   2f0c0:	d905      	bls.n	2f0ce <dir_sdi+0xbe>
   2f0c2:	687b      	ldr	r3, [r7, #4]
   2f0c4:	681b      	ldr	r3, [r3, #0]
   2f0c6:	699a      	ldr	r2, [r3, #24]
   2f0c8:	68fb      	ldr	r3, [r7, #12]
   2f0ca:	429a      	cmp	r2, r3
   2f0cc:	d801      	bhi.n	2f0d2 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2f0ce:	2302      	movs	r3, #2
   2f0d0:	e02d      	b.n	2f12e <dir_sdi+0x11e>
			idx -= ic;
   2f0d2:	1cbb      	adds	r3, r7, #2
   2f0d4:	1cb9      	adds	r1, r7, #2
   2f0d6:	220a      	movs	r2, #10
   2f0d8:	18ba      	adds	r2, r7, r2
   2f0da:	8809      	ldrh	r1, [r1, #0]
   2f0dc:	8812      	ldrh	r2, [r2, #0]
   2f0de:	1a8a      	subs	r2, r1, r2
   2f0e0:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2f0e2:	1cba      	adds	r2, r7, #2
   2f0e4:	230a      	movs	r3, #10
   2f0e6:	18fb      	adds	r3, r7, r3
   2f0e8:	8812      	ldrh	r2, [r2, #0]
   2f0ea:	881b      	ldrh	r3, [r3, #0]
   2f0ec:	429a      	cmp	r2, r3
   2f0ee:	d2d7      	bcs.n	2f0a0 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2f0f0:	687b      	ldr	r3, [r7, #4]
   2f0f2:	68fa      	ldr	r2, [r7, #12]
   2f0f4:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2f0f6:	687b      	ldr	r3, [r7, #4]
   2f0f8:	681b      	ldr	r3, [r3, #0]
   2f0fa:	68fa      	ldr	r2, [r7, #12]
   2f0fc:	0011      	movs	r1, r2
   2f0fe:	0018      	movs	r0, r3
   2f100:	4b0e      	ldr	r3, [pc, #56]	; (2f13c <dir_sdi+0x12c>)
   2f102:	4798      	blx	r3
   2f104:	0002      	movs	r2, r0
   2f106:	1cbb      	adds	r3, r7, #2
   2f108:	881b      	ldrh	r3, [r3, #0]
   2f10a:	091b      	lsrs	r3, r3, #4
   2f10c:	b29b      	uxth	r3, r3
   2f10e:	18d2      	adds	r2, r2, r3
   2f110:	687b      	ldr	r3, [r7, #4]
   2f112:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2f114:	687b      	ldr	r3, [r7, #4]
   2f116:	681b      	ldr	r3, [r3, #0]
   2f118:	3330      	adds	r3, #48	; 0x30
   2f11a:	001a      	movs	r2, r3
   2f11c:	1cbb      	adds	r3, r7, #2
   2f11e:	881b      	ldrh	r3, [r3, #0]
   2f120:	210f      	movs	r1, #15
   2f122:	400b      	ands	r3, r1
   2f124:	015b      	lsls	r3, r3, #5
   2f126:	18d2      	adds	r2, r2, r3
   2f128:	687b      	ldr	r3, [r7, #4]
   2f12a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2f12c:	2300      	movs	r3, #0
}
   2f12e:	0018      	movs	r0, r3
   2f130:	46bd      	mov	sp, r7
   2f132:	b004      	add	sp, #16
   2f134:	bd80      	pop	{r7, pc}
   2f136:	46c0      	nop			; (mov r8, r8)
   2f138:	0002ea65 	.word	0x0002ea65
   2f13c:	0002ea2d 	.word	0x0002ea2d

0002f140 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2f140:	b590      	push	{r4, r7, lr}
   2f142:	b085      	sub	sp, #20
   2f144:	af00      	add	r7, sp, #0
   2f146:	6078      	str	r0, [r7, #4]
   2f148:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2f14a:	687b      	ldr	r3, [r7, #4]
   2f14c:	88da      	ldrh	r2, [r3, #6]
   2f14e:	2308      	movs	r3, #8
   2f150:	18fb      	adds	r3, r7, r3
   2f152:	3201      	adds	r2, #1
   2f154:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2f156:	2308      	movs	r3, #8
   2f158:	18fb      	adds	r3, r7, r3
   2f15a:	881b      	ldrh	r3, [r3, #0]
   2f15c:	2b00      	cmp	r3, #0
   2f15e:	d003      	beq.n	2f168 <dir_next+0x28>
   2f160:	687b      	ldr	r3, [r7, #4]
   2f162:	691b      	ldr	r3, [r3, #16]
   2f164:	2b00      	cmp	r3, #0
   2f166:	d101      	bne.n	2f16c <dir_next+0x2c>
		return FR_NO_FILE;
   2f168:	2304      	movs	r3, #4
   2f16a:	e0d2      	b.n	2f312 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2f16c:	2308      	movs	r3, #8
   2f16e:	18fb      	adds	r3, r7, r3
   2f170:	881b      	ldrh	r3, [r3, #0]
   2f172:	220f      	movs	r2, #15
   2f174:	4013      	ands	r3, r2
   2f176:	b29b      	uxth	r3, r3
   2f178:	2b00      	cmp	r3, #0
   2f17a:	d000      	beq.n	2f17e <dir_next+0x3e>
   2f17c:	e0b6      	b.n	2f2ec <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2f17e:	687b      	ldr	r3, [r7, #4]
   2f180:	691b      	ldr	r3, [r3, #16]
   2f182:	1c5a      	adds	r2, r3, #1
   2f184:	687b      	ldr	r3, [r7, #4]
   2f186:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2f188:	687b      	ldr	r3, [r7, #4]
   2f18a:	68db      	ldr	r3, [r3, #12]
   2f18c:	2b00      	cmp	r3, #0
   2f18e:	d10a      	bne.n	2f1a6 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2f190:	687b      	ldr	r3, [r7, #4]
   2f192:	681b      	ldr	r3, [r3, #0]
   2f194:	891b      	ldrh	r3, [r3, #8]
   2f196:	2208      	movs	r2, #8
   2f198:	18ba      	adds	r2, r7, r2
   2f19a:	8812      	ldrh	r2, [r2, #0]
   2f19c:	429a      	cmp	r2, r3
   2f19e:	d200      	bcs.n	2f1a2 <dir_next+0x62>
   2f1a0:	e0a4      	b.n	2f2ec <dir_next+0x1ac>
				return FR_NO_FILE;
   2f1a2:	2304      	movs	r3, #4
   2f1a4:	e0b5      	b.n	2f312 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2f1a6:	2308      	movs	r3, #8
   2f1a8:	18fb      	adds	r3, r7, r3
   2f1aa:	881b      	ldrh	r3, [r3, #0]
   2f1ac:	091b      	lsrs	r3, r3, #4
   2f1ae:	b29b      	uxth	r3, r3
   2f1b0:	001a      	movs	r2, r3
   2f1b2:	687b      	ldr	r3, [r7, #4]
   2f1b4:	681b      	ldr	r3, [r3, #0]
   2f1b6:	789b      	ldrb	r3, [r3, #2]
   2f1b8:	3b01      	subs	r3, #1
   2f1ba:	4013      	ands	r3, r2
   2f1bc:	d000      	beq.n	2f1c0 <dir_next+0x80>
   2f1be:	e095      	b.n	2f2ec <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2f1c0:	687b      	ldr	r3, [r7, #4]
   2f1c2:	681a      	ldr	r2, [r3, #0]
   2f1c4:	687b      	ldr	r3, [r7, #4]
   2f1c6:	68db      	ldr	r3, [r3, #12]
   2f1c8:	0019      	movs	r1, r3
   2f1ca:	0010      	movs	r0, r2
   2f1cc:	4b53      	ldr	r3, [pc, #332]	; (2f31c <dir_next+0x1dc>)
   2f1ce:	4798      	blx	r3
   2f1d0:	0003      	movs	r3, r0
   2f1d2:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2f1d4:	68fb      	ldr	r3, [r7, #12]
   2f1d6:	2b01      	cmp	r3, #1
   2f1d8:	d801      	bhi.n	2f1de <dir_next+0x9e>
   2f1da:	2302      	movs	r3, #2
   2f1dc:	e099      	b.n	2f312 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2f1de:	68fb      	ldr	r3, [r7, #12]
   2f1e0:	3301      	adds	r3, #1
   2f1e2:	d101      	bne.n	2f1e8 <dir_next+0xa8>
   2f1e4:	2301      	movs	r3, #1
   2f1e6:	e094      	b.n	2f312 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2f1e8:	687b      	ldr	r3, [r7, #4]
   2f1ea:	681b      	ldr	r3, [r3, #0]
   2f1ec:	699a      	ldr	r2, [r3, #24]
   2f1ee:	68fb      	ldr	r3, [r7, #12]
   2f1f0:	429a      	cmp	r2, r3
   2f1f2:	d900      	bls.n	2f1f6 <dir_next+0xb6>
   2f1f4:	e06d      	b.n	2f2d2 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2f1f6:	683b      	ldr	r3, [r7, #0]
   2f1f8:	2b00      	cmp	r3, #0
   2f1fa:	d101      	bne.n	2f200 <dir_next+0xc0>
   2f1fc:	2304      	movs	r3, #4
   2f1fe:	e088      	b.n	2f312 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2f200:	687b      	ldr	r3, [r7, #4]
   2f202:	681a      	ldr	r2, [r3, #0]
   2f204:	687b      	ldr	r3, [r7, #4]
   2f206:	68db      	ldr	r3, [r3, #12]
   2f208:	0019      	movs	r1, r3
   2f20a:	0010      	movs	r0, r2
   2f20c:	4b44      	ldr	r3, [pc, #272]	; (2f320 <dir_next+0x1e0>)
   2f20e:	4798      	blx	r3
   2f210:	0003      	movs	r3, r0
   2f212:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2f214:	68fb      	ldr	r3, [r7, #12]
   2f216:	2b00      	cmp	r3, #0
   2f218:	d101      	bne.n	2f21e <dir_next+0xde>
   2f21a:	2307      	movs	r3, #7
   2f21c:	e079      	b.n	2f312 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2f21e:	68fb      	ldr	r3, [r7, #12]
   2f220:	2b01      	cmp	r3, #1
   2f222:	d101      	bne.n	2f228 <dir_next+0xe8>
   2f224:	2302      	movs	r3, #2
   2f226:	e074      	b.n	2f312 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2f228:	68fb      	ldr	r3, [r7, #12]
   2f22a:	3301      	adds	r3, #1
   2f22c:	d101      	bne.n	2f232 <dir_next+0xf2>
   2f22e:	2301      	movs	r3, #1
   2f230:	e06f      	b.n	2f312 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2f232:	687b      	ldr	r3, [r7, #4]
   2f234:	681b      	ldr	r3, [r3, #0]
   2f236:	2100      	movs	r1, #0
   2f238:	0018      	movs	r0, r3
   2f23a:	4b3a      	ldr	r3, [pc, #232]	; (2f324 <dir_next+0x1e4>)
   2f23c:	4798      	blx	r3
   2f23e:	1e03      	subs	r3, r0, #0
   2f240:	d001      	beq.n	2f246 <dir_next+0x106>
   2f242:	2301      	movs	r3, #1
   2f244:	e065      	b.n	2f312 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2f246:	687b      	ldr	r3, [r7, #4]
   2f248:	681b      	ldr	r3, [r3, #0]
   2f24a:	3330      	adds	r3, #48	; 0x30
   2f24c:	0018      	movs	r0, r3
   2f24e:	2380      	movs	r3, #128	; 0x80
   2f250:	009b      	lsls	r3, r3, #2
   2f252:	001a      	movs	r2, r3
   2f254:	2100      	movs	r1, #0
   2f256:	4b34      	ldr	r3, [pc, #208]	; (2f328 <dir_next+0x1e8>)
   2f258:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2f25a:	687b      	ldr	r3, [r7, #4]
   2f25c:	681c      	ldr	r4, [r3, #0]
   2f25e:	687b      	ldr	r3, [r7, #4]
   2f260:	681b      	ldr	r3, [r3, #0]
   2f262:	68fa      	ldr	r2, [r7, #12]
   2f264:	0011      	movs	r1, r2
   2f266:	0018      	movs	r0, r3
   2f268:	4b30      	ldr	r3, [pc, #192]	; (2f32c <dir_next+0x1ec>)
   2f26a:	4798      	blx	r3
   2f26c:	0003      	movs	r3, r0
   2f26e:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2f270:	230b      	movs	r3, #11
   2f272:	18fb      	adds	r3, r7, r3
   2f274:	2200      	movs	r2, #0
   2f276:	701a      	strb	r2, [r3, #0]
   2f278:	e019      	b.n	2f2ae <dir_next+0x16e>
						dj->fs->wflag = 1;
   2f27a:	687b      	ldr	r3, [r7, #4]
   2f27c:	681b      	ldr	r3, [r3, #0]
   2f27e:	2201      	movs	r2, #1
   2f280:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2f282:	687b      	ldr	r3, [r7, #4]
   2f284:	681b      	ldr	r3, [r3, #0]
   2f286:	2100      	movs	r1, #0
   2f288:	0018      	movs	r0, r3
   2f28a:	4b26      	ldr	r3, [pc, #152]	; (2f324 <dir_next+0x1e4>)
   2f28c:	4798      	blx	r3
   2f28e:	1e03      	subs	r3, r0, #0
   2f290:	d001      	beq.n	2f296 <dir_next+0x156>
   2f292:	2301      	movs	r3, #1
   2f294:	e03d      	b.n	2f312 <dir_next+0x1d2>
						dj->fs->winsect++;
   2f296:	687b      	ldr	r3, [r7, #4]
   2f298:	681b      	ldr	r3, [r3, #0]
   2f29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f29c:	3201      	adds	r2, #1
   2f29e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2f2a0:	230b      	movs	r3, #11
   2f2a2:	18fb      	adds	r3, r7, r3
   2f2a4:	781a      	ldrb	r2, [r3, #0]
   2f2a6:	230b      	movs	r3, #11
   2f2a8:	18fb      	adds	r3, r7, r3
   2f2aa:	3201      	adds	r2, #1
   2f2ac:	701a      	strb	r2, [r3, #0]
   2f2ae:	687b      	ldr	r3, [r7, #4]
   2f2b0:	681b      	ldr	r3, [r3, #0]
   2f2b2:	789b      	ldrb	r3, [r3, #2]
   2f2b4:	220b      	movs	r2, #11
   2f2b6:	18ba      	adds	r2, r7, r2
   2f2b8:	7812      	ldrb	r2, [r2, #0]
   2f2ba:	429a      	cmp	r2, r3
   2f2bc:	d3dd      	bcc.n	2f27a <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2f2be:	687b      	ldr	r3, [r7, #4]
   2f2c0:	681b      	ldr	r3, [r3, #0]
   2f2c2:	687a      	ldr	r2, [r7, #4]
   2f2c4:	6812      	ldr	r2, [r2, #0]
   2f2c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2f2c8:	220b      	movs	r2, #11
   2f2ca:	18ba      	adds	r2, r7, r2
   2f2cc:	7812      	ldrb	r2, [r2, #0]
   2f2ce:	1a8a      	subs	r2, r1, r2
   2f2d0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2f2d2:	687b      	ldr	r3, [r7, #4]
   2f2d4:	68fa      	ldr	r2, [r7, #12]
   2f2d6:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2f2d8:	687b      	ldr	r3, [r7, #4]
   2f2da:	681b      	ldr	r3, [r3, #0]
   2f2dc:	68fa      	ldr	r2, [r7, #12]
   2f2de:	0011      	movs	r1, r2
   2f2e0:	0018      	movs	r0, r3
   2f2e2:	4b12      	ldr	r3, [pc, #72]	; (2f32c <dir_next+0x1ec>)
   2f2e4:	4798      	blx	r3
   2f2e6:	0002      	movs	r2, r0
   2f2e8:	687b      	ldr	r3, [r7, #4]
   2f2ea:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2f2ec:	687b      	ldr	r3, [r7, #4]
   2f2ee:	2208      	movs	r2, #8
   2f2f0:	18ba      	adds	r2, r7, r2
   2f2f2:	8812      	ldrh	r2, [r2, #0]
   2f2f4:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2f2f6:	687b      	ldr	r3, [r7, #4]
   2f2f8:	681b      	ldr	r3, [r3, #0]
   2f2fa:	3330      	adds	r3, #48	; 0x30
   2f2fc:	001a      	movs	r2, r3
   2f2fe:	2308      	movs	r3, #8
   2f300:	18fb      	adds	r3, r7, r3
   2f302:	881b      	ldrh	r3, [r3, #0]
   2f304:	210f      	movs	r1, #15
   2f306:	400b      	ands	r3, r1
   2f308:	015b      	lsls	r3, r3, #5
   2f30a:	18d2      	adds	r2, r2, r3
   2f30c:	687b      	ldr	r3, [r7, #4]
   2f30e:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2f310:	2300      	movs	r3, #0
}
   2f312:	0018      	movs	r0, r3
   2f314:	46bd      	mov	sp, r7
   2f316:	b005      	add	sp, #20
   2f318:	bd90      	pop	{r4, r7, pc}
   2f31a:	46c0      	nop			; (mov r8, r8)
   2f31c:	0002ea65 	.word	0x0002ea65
   2f320:	0002eed5 	.word	0x0002eed5
   2f324:	0002e7cd 	.word	0x0002e7cd
   2f328:	0002e721 	.word	0x0002e721
   2f32c:	0002ea2d 	.word	0x0002ea2d

0002f330 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2f330:	b590      	push	{r4, r7, lr}
   2f332:	b087      	sub	sp, #28
   2f334:	af00      	add	r7, sp, #0
   2f336:	6078      	str	r0, [r7, #4]
   2f338:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2f33a:	683b      	ldr	r3, [r7, #0]
   2f33c:	781b      	ldrb	r3, [r3, #0]
   2f33e:	001a      	movs	r2, r3
   2f340:	2340      	movs	r3, #64	; 0x40
   2f342:	439a      	bics	r2, r3
   2f344:	0013      	movs	r3, r2
   2f346:	1e5a      	subs	r2, r3, #1
   2f348:	0013      	movs	r3, r2
   2f34a:	005b      	lsls	r3, r3, #1
   2f34c:	189b      	adds	r3, r3, r2
   2f34e:	009b      	lsls	r3, r3, #2
   2f350:	189b      	adds	r3, r3, r2
   2f352:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2f354:	2300      	movs	r3, #0
   2f356:	613b      	str	r3, [r7, #16]
   2f358:	230e      	movs	r3, #14
   2f35a:	18fb      	adds	r3, r7, r3
   2f35c:	2201      	movs	r2, #1
   2f35e:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2f360:	4a31      	ldr	r2, [pc, #196]	; (2f428 <cmp_lfn+0xf8>)
   2f362:	693b      	ldr	r3, [r7, #16]
   2f364:	18d3      	adds	r3, r2, r3
   2f366:	781b      	ldrb	r3, [r3, #0]
   2f368:	3301      	adds	r3, #1
   2f36a:	683a      	ldr	r2, [r7, #0]
   2f36c:	18d3      	adds	r3, r2, r3
   2f36e:	781b      	ldrb	r3, [r3, #0]
   2f370:	021b      	lsls	r3, r3, #8
   2f372:	b21a      	sxth	r2, r3
   2f374:	492c      	ldr	r1, [pc, #176]	; (2f428 <cmp_lfn+0xf8>)
   2f376:	693b      	ldr	r3, [r7, #16]
   2f378:	18cb      	adds	r3, r1, r3
   2f37a:	781b      	ldrb	r3, [r3, #0]
   2f37c:	0019      	movs	r1, r3
   2f37e:	683b      	ldr	r3, [r7, #0]
   2f380:	185b      	adds	r3, r3, r1
   2f382:	781b      	ldrb	r3, [r3, #0]
   2f384:	b21b      	sxth	r3, r3
   2f386:	4313      	orrs	r3, r2
   2f388:	b21a      	sxth	r2, r3
   2f38a:	230c      	movs	r3, #12
   2f38c:	18fb      	adds	r3, r7, r3
   2f38e:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2f390:	230e      	movs	r3, #14
   2f392:	18fb      	adds	r3, r7, r3
   2f394:	881b      	ldrh	r3, [r3, #0]
   2f396:	2b00      	cmp	r3, #0
   2f398:	d01f      	beq.n	2f3da <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2f39a:	230e      	movs	r3, #14
   2f39c:	18fc      	adds	r4, r7, r3
   2f39e:	230c      	movs	r3, #12
   2f3a0:	18fb      	adds	r3, r7, r3
   2f3a2:	881b      	ldrh	r3, [r3, #0]
   2f3a4:	0018      	movs	r0, r3
   2f3a6:	4b21      	ldr	r3, [pc, #132]	; (2f42c <cmp_lfn+0xfc>)
   2f3a8:	4798      	blx	r3
   2f3aa:	0003      	movs	r3, r0
   2f3ac:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2f3ae:	697b      	ldr	r3, [r7, #20]
   2f3b0:	2bfe      	cmp	r3, #254	; 0xfe
   2f3b2:	d810      	bhi.n	2f3d6 <cmp_lfn+0xa6>
   2f3b4:	697b      	ldr	r3, [r7, #20]
   2f3b6:	1c5a      	adds	r2, r3, #1
   2f3b8:	617a      	str	r2, [r7, #20]
   2f3ba:	005b      	lsls	r3, r3, #1
   2f3bc:	687a      	ldr	r2, [r7, #4]
   2f3be:	18d3      	adds	r3, r2, r3
   2f3c0:	881b      	ldrh	r3, [r3, #0]
   2f3c2:	0018      	movs	r0, r3
   2f3c4:	4b19      	ldr	r3, [pc, #100]	; (2f42c <cmp_lfn+0xfc>)
   2f3c6:	4798      	blx	r3
   2f3c8:	0003      	movs	r3, r0
   2f3ca:	001a      	movs	r2, r3
   2f3cc:	230e      	movs	r3, #14
   2f3ce:	18fb      	adds	r3, r7, r3
   2f3d0:	881b      	ldrh	r3, [r3, #0]
   2f3d2:	4293      	cmp	r3, r2
   2f3d4:	d009      	beq.n	2f3ea <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2f3d6:	2300      	movs	r3, #0
   2f3d8:	e022      	b.n	2f420 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2f3da:	230c      	movs	r3, #12
   2f3dc:	18fb      	adds	r3, r7, r3
   2f3de:	881b      	ldrh	r3, [r3, #0]
   2f3e0:	4a13      	ldr	r2, [pc, #76]	; (2f430 <cmp_lfn+0x100>)
   2f3e2:	4293      	cmp	r3, r2
   2f3e4:	d001      	beq.n	2f3ea <cmp_lfn+0xba>
   2f3e6:	2300      	movs	r3, #0
   2f3e8:	e01a      	b.n	2f420 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2f3ea:	693b      	ldr	r3, [r7, #16]
   2f3ec:	3301      	adds	r3, #1
   2f3ee:	613b      	str	r3, [r7, #16]
   2f3f0:	693b      	ldr	r3, [r7, #16]
   2f3f2:	2b0c      	cmp	r3, #12
   2f3f4:	d9b4      	bls.n	2f360 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2f3f6:	683b      	ldr	r3, [r7, #0]
   2f3f8:	781b      	ldrb	r3, [r3, #0]
   2f3fa:	001a      	movs	r2, r3
   2f3fc:	2340      	movs	r3, #64	; 0x40
   2f3fe:	4013      	ands	r3, r2
   2f400:	d00d      	beq.n	2f41e <cmp_lfn+0xee>
   2f402:	230e      	movs	r3, #14
   2f404:	18fb      	adds	r3, r7, r3
   2f406:	881b      	ldrh	r3, [r3, #0]
   2f408:	2b00      	cmp	r3, #0
   2f40a:	d008      	beq.n	2f41e <cmp_lfn+0xee>
   2f40c:	697b      	ldr	r3, [r7, #20]
   2f40e:	005b      	lsls	r3, r3, #1
   2f410:	687a      	ldr	r2, [r7, #4]
   2f412:	18d3      	adds	r3, r2, r3
   2f414:	881b      	ldrh	r3, [r3, #0]
   2f416:	2b00      	cmp	r3, #0
   2f418:	d001      	beq.n	2f41e <cmp_lfn+0xee>
		return 0;
   2f41a:	2300      	movs	r3, #0
   2f41c:	e000      	b.n	2f420 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2f41e:	2301      	movs	r3, #1
}
   2f420:	0018      	movs	r0, r3
   2f422:	46bd      	mov	sp, r7
   2f424:	b007      	add	sp, #28
   2f426:	bd90      	pop	{r4, r7, pc}
   2f428:	0003dba0 	.word	0x0003dba0
   2f42c:	000313dd 	.word	0x000313dd
   2f430:	0000ffff 	.word	0x0000ffff

0002f434 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2f434:	b580      	push	{r7, lr}
   2f436:	b088      	sub	sp, #32
   2f438:	af00      	add	r7, sp, #0
   2f43a:	60f8      	str	r0, [r7, #12]
   2f43c:	60b9      	str	r1, [r7, #8]
   2f43e:	0019      	movs	r1, r3
   2f440:	1dfb      	adds	r3, r7, #7
   2f442:	701a      	strb	r2, [r3, #0]
   2f444:	1dbb      	adds	r3, r7, #6
   2f446:	1c0a      	adds	r2, r1, #0
   2f448:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2f44a:	68bb      	ldr	r3, [r7, #8]
   2f44c:	330d      	adds	r3, #13
   2f44e:	1dba      	adds	r2, r7, #6
   2f450:	7812      	ldrb	r2, [r2, #0]
   2f452:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2f454:	68bb      	ldr	r3, [r7, #8]
   2f456:	330b      	adds	r3, #11
   2f458:	220f      	movs	r2, #15
   2f45a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2f45c:	68bb      	ldr	r3, [r7, #8]
   2f45e:	330c      	adds	r3, #12
   2f460:	2200      	movs	r2, #0
   2f462:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2f464:	68bb      	ldr	r3, [r7, #8]
   2f466:	331a      	adds	r3, #26
   2f468:	2200      	movs	r2, #0
   2f46a:	701a      	strb	r2, [r3, #0]
   2f46c:	68bb      	ldr	r3, [r7, #8]
   2f46e:	331b      	adds	r3, #27
   2f470:	2200      	movs	r2, #0
   2f472:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2f474:	1dfb      	adds	r3, r7, #7
   2f476:	781b      	ldrb	r3, [r3, #0]
   2f478:	1e5a      	subs	r2, r3, #1
   2f47a:	0013      	movs	r3, r2
   2f47c:	005b      	lsls	r3, r3, #1
   2f47e:	189b      	adds	r3, r3, r2
   2f480:	009b      	lsls	r3, r3, #2
   2f482:	189b      	adds	r3, r3, r2
   2f484:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2f486:	2316      	movs	r3, #22
   2f488:	18fb      	adds	r3, r7, r3
   2f48a:	2200      	movs	r2, #0
   2f48c:	801a      	strh	r2, [r3, #0]
   2f48e:	2300      	movs	r3, #0
   2f490:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2f492:	2316      	movs	r3, #22
   2f494:	18fb      	adds	r3, r7, r3
   2f496:	881b      	ldrh	r3, [r3, #0]
   2f498:	4a28      	ldr	r2, [pc, #160]	; (2f53c <fit_lfn+0x108>)
   2f49a:	4293      	cmp	r3, r2
   2f49c:	d009      	beq.n	2f4b2 <fit_lfn+0x7e>
   2f49e:	69fb      	ldr	r3, [r7, #28]
   2f4a0:	1c5a      	adds	r2, r3, #1
   2f4a2:	61fa      	str	r2, [r7, #28]
   2f4a4:	005b      	lsls	r3, r3, #1
   2f4a6:	68fa      	ldr	r2, [r7, #12]
   2f4a8:	18d2      	adds	r2, r2, r3
   2f4aa:	2316      	movs	r3, #22
   2f4ac:	18fb      	adds	r3, r7, r3
   2f4ae:	8812      	ldrh	r2, [r2, #0]
   2f4b0:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2f4b2:	4a23      	ldr	r2, [pc, #140]	; (2f540 <fit_lfn+0x10c>)
   2f4b4:	69bb      	ldr	r3, [r7, #24]
   2f4b6:	18d3      	adds	r3, r2, r3
   2f4b8:	781b      	ldrb	r3, [r3, #0]
   2f4ba:	001a      	movs	r2, r3
   2f4bc:	68bb      	ldr	r3, [r7, #8]
   2f4be:	189b      	adds	r3, r3, r2
   2f4c0:	2216      	movs	r2, #22
   2f4c2:	18ba      	adds	r2, r7, r2
   2f4c4:	8812      	ldrh	r2, [r2, #0]
   2f4c6:	b2d2      	uxtb	r2, r2
   2f4c8:	701a      	strb	r2, [r3, #0]
   2f4ca:	4a1d      	ldr	r2, [pc, #116]	; (2f540 <fit_lfn+0x10c>)
   2f4cc:	69bb      	ldr	r3, [r7, #24]
   2f4ce:	18d3      	adds	r3, r2, r3
   2f4d0:	781b      	ldrb	r3, [r3, #0]
   2f4d2:	3301      	adds	r3, #1
   2f4d4:	68ba      	ldr	r2, [r7, #8]
   2f4d6:	18d3      	adds	r3, r2, r3
   2f4d8:	2216      	movs	r2, #22
   2f4da:	18ba      	adds	r2, r7, r2
   2f4dc:	8812      	ldrh	r2, [r2, #0]
   2f4de:	0a12      	lsrs	r2, r2, #8
   2f4e0:	b292      	uxth	r2, r2
   2f4e2:	b2d2      	uxtb	r2, r2
   2f4e4:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2f4e6:	2316      	movs	r3, #22
   2f4e8:	18fb      	adds	r3, r7, r3
   2f4ea:	881b      	ldrh	r3, [r3, #0]
   2f4ec:	2b00      	cmp	r3, #0
   2f4ee:	d104      	bne.n	2f4fa <fit_lfn+0xc6>
   2f4f0:	2316      	movs	r3, #22
   2f4f2:	18fb      	adds	r3, r7, r3
   2f4f4:	2201      	movs	r2, #1
   2f4f6:	4252      	negs	r2, r2
   2f4f8:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2f4fa:	69bb      	ldr	r3, [r7, #24]
   2f4fc:	3301      	adds	r3, #1
   2f4fe:	61bb      	str	r3, [r7, #24]
   2f500:	69bb      	ldr	r3, [r7, #24]
   2f502:	2b0c      	cmp	r3, #12
   2f504:	d9c5      	bls.n	2f492 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2f506:	2316      	movs	r3, #22
   2f508:	18fb      	adds	r3, r7, r3
   2f50a:	881b      	ldrh	r3, [r3, #0]
   2f50c:	4a0b      	ldr	r2, [pc, #44]	; (2f53c <fit_lfn+0x108>)
   2f50e:	4293      	cmp	r3, r2
   2f510:	d006      	beq.n	2f520 <fit_lfn+0xec>
   2f512:	69fb      	ldr	r3, [r7, #28]
   2f514:	005b      	lsls	r3, r3, #1
   2f516:	68fa      	ldr	r2, [r7, #12]
   2f518:	18d3      	adds	r3, r2, r3
   2f51a:	881b      	ldrh	r3, [r3, #0]
   2f51c:	2b00      	cmp	r3, #0
   2f51e:	d105      	bne.n	2f52c <fit_lfn+0xf8>
   2f520:	1dfb      	adds	r3, r7, #7
   2f522:	1dfa      	adds	r2, r7, #7
   2f524:	7812      	ldrb	r2, [r2, #0]
   2f526:	2140      	movs	r1, #64	; 0x40
   2f528:	430a      	orrs	r2, r1
   2f52a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2f52c:	68bb      	ldr	r3, [r7, #8]
   2f52e:	1dfa      	adds	r2, r7, #7
   2f530:	7812      	ldrb	r2, [r2, #0]
   2f532:	701a      	strb	r2, [r3, #0]
}
   2f534:	46c0      	nop			; (mov r8, r8)
   2f536:	46bd      	mov	sp, r7
   2f538:	b008      	add	sp, #32
   2f53a:	bd80      	pop	{r7, pc}
   2f53c:	0000ffff 	.word	0x0000ffff
   2f540:	0003dba0 	.word	0x0003dba0

0002f544 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2f544:	b580      	push	{r7, lr}
   2f546:	b08a      	sub	sp, #40	; 0x28
   2f548:	af00      	add	r7, sp, #0
   2f54a:	60f8      	str	r0, [r7, #12]
   2f54c:	60b9      	str	r1, [r7, #8]
   2f54e:	607a      	str	r2, [r7, #4]
   2f550:	001a      	movs	r2, r3
   2f552:	1cbb      	adds	r3, r7, #2
   2f554:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2f556:	68b9      	ldr	r1, [r7, #8]
   2f558:	68fb      	ldr	r3, [r7, #12]
   2f55a:	220b      	movs	r2, #11
   2f55c:	0018      	movs	r0, r3
   2f55e:	4b38      	ldr	r3, [pc, #224]	; (2f640 <gen_numname+0xfc>)
   2f560:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2f562:	1cbb      	adds	r3, r7, #2
   2f564:	881b      	ldrh	r3, [r3, #0]
   2f566:	2b05      	cmp	r3, #5
   2f568:	d911      	bls.n	2f58e <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2f56a:	1cbb      	adds	r3, r7, #2
   2f56c:	881b      	ldrh	r3, [r3, #0]
   2f56e:	b29a      	uxth	r2, r3
   2f570:	0852      	lsrs	r2, r2, #1
   2f572:	03db      	lsls	r3, r3, #15
   2f574:	4313      	orrs	r3, r2
   2f576:	b299      	uxth	r1, r3
   2f578:	687b      	ldr	r3, [r7, #4]
   2f57a:	1c9a      	adds	r2, r3, #2
   2f57c:	607a      	str	r2, [r7, #4]
   2f57e:	881a      	ldrh	r2, [r3, #0]
   2f580:	1cbb      	adds	r3, r7, #2
   2f582:	188a      	adds	r2, r1, r2
   2f584:	801a      	strh	r2, [r3, #0]
   2f586:	687b      	ldr	r3, [r7, #4]
   2f588:	881b      	ldrh	r3, [r3, #0]
   2f58a:	2b00      	cmp	r3, #0
   2f58c:	d1ed      	bne.n	2f56a <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2f58e:	2307      	movs	r3, #7
   2f590:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2f592:	1cbb      	adds	r3, r7, #2
   2f594:	881b      	ldrh	r3, [r3, #0]
   2f596:	b2db      	uxtb	r3, r3
   2f598:	220f      	movs	r2, #15
   2f59a:	4013      	ands	r3, r2
   2f59c:	b2da      	uxtb	r2, r3
   2f59e:	2327      	movs	r3, #39	; 0x27
   2f5a0:	18fb      	adds	r3, r7, r3
   2f5a2:	3230      	adds	r2, #48	; 0x30
   2f5a4:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2f5a6:	2327      	movs	r3, #39	; 0x27
   2f5a8:	18fb      	adds	r3, r7, r3
   2f5aa:	781b      	ldrb	r3, [r3, #0]
   2f5ac:	2b39      	cmp	r3, #57	; 0x39
   2f5ae:	d906      	bls.n	2f5be <gen_numname+0x7a>
   2f5b0:	2327      	movs	r3, #39	; 0x27
   2f5b2:	18fb      	adds	r3, r7, r3
   2f5b4:	2227      	movs	r2, #39	; 0x27
   2f5b6:	18ba      	adds	r2, r7, r2
   2f5b8:	7812      	ldrb	r2, [r2, #0]
   2f5ba:	3207      	adds	r2, #7
   2f5bc:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2f5be:	6a3b      	ldr	r3, [r7, #32]
   2f5c0:	1e5a      	subs	r2, r3, #1
   2f5c2:	623a      	str	r2, [r7, #32]
   2f5c4:	2214      	movs	r2, #20
   2f5c6:	18ba      	adds	r2, r7, r2
   2f5c8:	2127      	movs	r1, #39	; 0x27
   2f5ca:	1879      	adds	r1, r7, r1
   2f5cc:	7809      	ldrb	r1, [r1, #0]
   2f5ce:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2f5d0:	1cbb      	adds	r3, r7, #2
   2f5d2:	1cba      	adds	r2, r7, #2
   2f5d4:	8812      	ldrh	r2, [r2, #0]
   2f5d6:	0912      	lsrs	r2, r2, #4
   2f5d8:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2f5da:	1cbb      	adds	r3, r7, #2
   2f5dc:	881b      	ldrh	r3, [r3, #0]
   2f5de:	2b00      	cmp	r3, #0
   2f5e0:	d1d7      	bne.n	2f592 <gen_numname+0x4e>
	ns[i] = '~';
   2f5e2:	2314      	movs	r3, #20
   2f5e4:	18fa      	adds	r2, r7, r3
   2f5e6:	6a3b      	ldr	r3, [r7, #32]
   2f5e8:	18d3      	adds	r3, r2, r3
   2f5ea:	227e      	movs	r2, #126	; 0x7e
   2f5ec:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2f5ee:	2300      	movs	r3, #0
   2f5f0:	61fb      	str	r3, [r7, #28]
   2f5f2:	e002      	b.n	2f5fa <gen_numname+0xb6>
   2f5f4:	69fb      	ldr	r3, [r7, #28]
   2f5f6:	3301      	adds	r3, #1
   2f5f8:	61fb      	str	r3, [r7, #28]
   2f5fa:	69fa      	ldr	r2, [r7, #28]
   2f5fc:	6a3b      	ldr	r3, [r7, #32]
   2f5fe:	429a      	cmp	r2, r3
   2f600:	d205      	bcs.n	2f60e <gen_numname+0xca>
   2f602:	68fa      	ldr	r2, [r7, #12]
   2f604:	69fb      	ldr	r3, [r7, #28]
   2f606:	18d3      	adds	r3, r2, r3
   2f608:	781b      	ldrb	r3, [r3, #0]
   2f60a:	2b20      	cmp	r3, #32
   2f60c:	d1f2      	bne.n	2f5f4 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2f60e:	69fb      	ldr	r3, [r7, #28]
   2f610:	1c5a      	adds	r2, r3, #1
   2f612:	61fa      	str	r2, [r7, #28]
   2f614:	68fa      	ldr	r2, [r7, #12]
   2f616:	18d2      	adds	r2, r2, r3
   2f618:	6a3b      	ldr	r3, [r7, #32]
   2f61a:	2b07      	cmp	r3, #7
   2f61c:	d806      	bhi.n	2f62c <gen_numname+0xe8>
   2f61e:	6a3b      	ldr	r3, [r7, #32]
   2f620:	1c59      	adds	r1, r3, #1
   2f622:	6239      	str	r1, [r7, #32]
   2f624:	2114      	movs	r1, #20
   2f626:	1879      	adds	r1, r7, r1
   2f628:	5ccb      	ldrb	r3, [r1, r3]
   2f62a:	e000      	b.n	2f62e <gen_numname+0xea>
   2f62c:	2320      	movs	r3, #32
   2f62e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2f630:	69fb      	ldr	r3, [r7, #28]
   2f632:	2b07      	cmp	r3, #7
   2f634:	d9eb      	bls.n	2f60e <gen_numname+0xca>
}
   2f636:	46c0      	nop			; (mov r8, r8)
   2f638:	46bd      	mov	sp, r7
   2f63a:	b00a      	add	sp, #40	; 0x28
   2f63c:	bd80      	pop	{r7, pc}
   2f63e:	46c0      	nop			; (mov r8, r8)
   2f640:	0002e6e9 	.word	0x0002e6e9

0002f644 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2f644:	b580      	push	{r7, lr}
   2f646:	b084      	sub	sp, #16
   2f648:	af00      	add	r7, sp, #0
   2f64a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2f64c:	230f      	movs	r3, #15
   2f64e:	18fb      	adds	r3, r7, r3
   2f650:	2200      	movs	r2, #0
   2f652:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2f654:	230b      	movs	r3, #11
   2f656:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2f658:	230f      	movs	r3, #15
   2f65a:	18fb      	adds	r3, r7, r3
   2f65c:	781b      	ldrb	r3, [r3, #0]
   2f65e:	b2da      	uxtb	r2, r3
   2f660:	0852      	lsrs	r2, r2, #1
   2f662:	01db      	lsls	r3, r3, #7
   2f664:	4313      	orrs	r3, r2
   2f666:	b2d9      	uxtb	r1, r3
   2f668:	687b      	ldr	r3, [r7, #4]
   2f66a:	1c5a      	adds	r2, r3, #1
   2f66c:	607a      	str	r2, [r7, #4]
   2f66e:	781a      	ldrb	r2, [r3, #0]
   2f670:	230f      	movs	r3, #15
   2f672:	18fb      	adds	r3, r7, r3
   2f674:	188a      	adds	r2, r1, r2
   2f676:	701a      	strb	r2, [r3, #0]
   2f678:	68bb      	ldr	r3, [r7, #8]
   2f67a:	3b01      	subs	r3, #1
   2f67c:	60bb      	str	r3, [r7, #8]
   2f67e:	68bb      	ldr	r3, [r7, #8]
   2f680:	2b00      	cmp	r3, #0
   2f682:	d1e9      	bne.n	2f658 <sum_sfn+0x14>
	return sum;
   2f684:	230f      	movs	r3, #15
   2f686:	18fb      	adds	r3, r7, r3
   2f688:	781b      	ldrb	r3, [r3, #0]
}
   2f68a:	0018      	movs	r0, r3
   2f68c:	46bd      	mov	sp, r7
   2f68e:	b004      	add	sp, #16
   2f690:	bd80      	pop	{r7, pc}
	...

0002f694 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2f694:	b590      	push	{r4, r7, lr}
   2f696:	b087      	sub	sp, #28
   2f698:	af00      	add	r7, sp, #0
   2f69a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2f69c:	2317      	movs	r3, #23
   2f69e:	18fc      	adds	r4, r7, r3
   2f6a0:	687b      	ldr	r3, [r7, #4]
   2f6a2:	2100      	movs	r1, #0
   2f6a4:	0018      	movs	r0, r3
   2f6a6:	4b74      	ldr	r3, [pc, #464]	; (2f878 <dir_find+0x1e4>)
   2f6a8:	4798      	blx	r3
   2f6aa:	0003      	movs	r3, r0
   2f6ac:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2f6ae:	2317      	movs	r3, #23
   2f6b0:	18fb      	adds	r3, r7, r3
   2f6b2:	781b      	ldrb	r3, [r3, #0]
   2f6b4:	2b00      	cmp	r3, #0
   2f6b6:	d003      	beq.n	2f6c0 <dir_find+0x2c>
   2f6b8:	2317      	movs	r3, #23
   2f6ba:	18fb      	adds	r3, r7, r3
   2f6bc:	781b      	ldrb	r3, [r3, #0]
   2f6be:	e0d6      	b.n	2f86e <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2f6c0:	2314      	movs	r3, #20
   2f6c2:	18fb      	adds	r3, r7, r3
   2f6c4:	22ff      	movs	r2, #255	; 0xff
   2f6c6:	701a      	strb	r2, [r3, #0]
   2f6c8:	2315      	movs	r3, #21
   2f6ca:	18fb      	adds	r3, r7, r3
   2f6cc:	2214      	movs	r2, #20
   2f6ce:	18ba      	adds	r2, r7, r2
   2f6d0:	7812      	ldrb	r2, [r2, #0]
   2f6d2:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2f6d4:	687b      	ldr	r3, [r7, #4]
   2f6d6:	681a      	ldr	r2, [r3, #0]
   2f6d8:	687b      	ldr	r3, [r7, #4]
   2f6da:	691b      	ldr	r3, [r3, #16]
   2f6dc:	2117      	movs	r1, #23
   2f6de:	187c      	adds	r4, r7, r1
   2f6e0:	0019      	movs	r1, r3
   2f6e2:	0010      	movs	r0, r2
   2f6e4:	4b65      	ldr	r3, [pc, #404]	; (2f87c <dir_find+0x1e8>)
   2f6e6:	4798      	blx	r3
   2f6e8:	0003      	movs	r3, r0
   2f6ea:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2f6ec:	2317      	movs	r3, #23
   2f6ee:	18fb      	adds	r3, r7, r3
   2f6f0:	781b      	ldrb	r3, [r3, #0]
   2f6f2:	2b00      	cmp	r3, #0
   2f6f4:	d000      	beq.n	2f6f8 <dir_find+0x64>
   2f6f6:	e0b2      	b.n	2f85e <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2f6f8:	687b      	ldr	r3, [r7, #4]
   2f6fa:	695b      	ldr	r3, [r3, #20]
   2f6fc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2f6fe:	2316      	movs	r3, #22
   2f700:	18fb      	adds	r3, r7, r3
   2f702:	693a      	ldr	r2, [r7, #16]
   2f704:	7812      	ldrb	r2, [r2, #0]
   2f706:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2f708:	2316      	movs	r3, #22
   2f70a:	18fb      	adds	r3, r7, r3
   2f70c:	781b      	ldrb	r3, [r3, #0]
   2f70e:	2b00      	cmp	r3, #0
   2f710:	d104      	bne.n	2f71c <dir_find+0x88>
   2f712:	2317      	movs	r3, #23
   2f714:	18fb      	adds	r3, r7, r3
   2f716:	2204      	movs	r2, #4
   2f718:	701a      	strb	r2, [r3, #0]
   2f71a:	e0a5      	b.n	2f868 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2f71c:	693b      	ldr	r3, [r7, #16]
   2f71e:	330b      	adds	r3, #11
   2f720:	781a      	ldrb	r2, [r3, #0]
   2f722:	230f      	movs	r3, #15
   2f724:	18fb      	adds	r3, r7, r3
   2f726:	213f      	movs	r1, #63	; 0x3f
   2f728:	400a      	ands	r2, r1
   2f72a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2f72c:	2316      	movs	r3, #22
   2f72e:	18fb      	adds	r3, r7, r3
   2f730:	781b      	ldrb	r3, [r3, #0]
   2f732:	2be5      	cmp	r3, #229	; 0xe5
   2f734:	d00a      	beq.n	2f74c <dir_find+0xb8>
   2f736:	230f      	movs	r3, #15
   2f738:	18fb      	adds	r3, r7, r3
   2f73a:	781b      	ldrb	r3, [r3, #0]
   2f73c:	2208      	movs	r2, #8
   2f73e:	4013      	ands	r3, r2
   2f740:	d009      	beq.n	2f756 <dir_find+0xc2>
   2f742:	230f      	movs	r3, #15
   2f744:	18fb      	adds	r3, r7, r3
   2f746:	781b      	ldrb	r3, [r3, #0]
   2f748:	2b0f      	cmp	r3, #15
   2f74a:	d004      	beq.n	2f756 <dir_find+0xc2>
			ord = 0xFF;
   2f74c:	2315      	movs	r3, #21
   2f74e:	18fb      	adds	r3, r7, r3
   2f750:	22ff      	movs	r2, #255	; 0xff
   2f752:	701a      	strb	r2, [r3, #0]
   2f754:	e073      	b.n	2f83e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2f756:	230f      	movs	r3, #15
   2f758:	18fb      	adds	r3, r7, r3
   2f75a:	781b      	ldrb	r3, [r3, #0]
   2f75c:	2b0f      	cmp	r3, #15
   2f75e:	d145      	bne.n	2f7ec <dir_find+0x158>
				if (dj->lfn) {
   2f760:	687b      	ldr	r3, [r7, #4]
   2f762:	69db      	ldr	r3, [r3, #28]
   2f764:	2b00      	cmp	r3, #0
   2f766:	d100      	bne.n	2f76a <dir_find+0xd6>
   2f768:	e069      	b.n	2f83e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2f76a:	2316      	movs	r3, #22
   2f76c:	18fb      	adds	r3, r7, r3
   2f76e:	781b      	ldrb	r3, [r3, #0]
   2f770:	2240      	movs	r2, #64	; 0x40
   2f772:	4013      	ands	r3, r2
   2f774:	d016      	beq.n	2f7a4 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2f776:	2314      	movs	r3, #20
   2f778:	18fb      	adds	r3, r7, r3
   2f77a:	693a      	ldr	r2, [r7, #16]
   2f77c:	7b52      	ldrb	r2, [r2, #13]
   2f77e:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2f780:	2316      	movs	r3, #22
   2f782:	18fb      	adds	r3, r7, r3
   2f784:	2216      	movs	r2, #22
   2f786:	18ba      	adds	r2, r7, r2
   2f788:	7812      	ldrb	r2, [r2, #0]
   2f78a:	2140      	movs	r1, #64	; 0x40
   2f78c:	438a      	bics	r2, r1
   2f78e:	701a      	strb	r2, [r3, #0]
   2f790:	2315      	movs	r3, #21
   2f792:	18fb      	adds	r3, r7, r3
   2f794:	2216      	movs	r2, #22
   2f796:	18ba      	adds	r2, r7, r2
   2f798:	7812      	ldrb	r2, [r2, #0]
   2f79a:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2f79c:	687b      	ldr	r3, [r7, #4]
   2f79e:	88da      	ldrh	r2, [r3, #6]
   2f7a0:	687b      	ldr	r3, [r7, #4]
   2f7a2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2f7a4:	2316      	movs	r3, #22
   2f7a6:	18fa      	adds	r2, r7, r3
   2f7a8:	2315      	movs	r3, #21
   2f7aa:	18fb      	adds	r3, r7, r3
   2f7ac:	7812      	ldrb	r2, [r2, #0]
   2f7ae:	781b      	ldrb	r3, [r3, #0]
   2f7b0:	429a      	cmp	r2, r3
   2f7b2:	d116      	bne.n	2f7e2 <dir_find+0x14e>
   2f7b4:	693b      	ldr	r3, [r7, #16]
   2f7b6:	330d      	adds	r3, #13
   2f7b8:	781b      	ldrb	r3, [r3, #0]
   2f7ba:	2214      	movs	r2, #20
   2f7bc:	18ba      	adds	r2, r7, r2
   2f7be:	7812      	ldrb	r2, [r2, #0]
   2f7c0:	429a      	cmp	r2, r3
   2f7c2:	d10e      	bne.n	2f7e2 <dir_find+0x14e>
   2f7c4:	687b      	ldr	r3, [r7, #4]
   2f7c6:	69db      	ldr	r3, [r3, #28]
   2f7c8:	693a      	ldr	r2, [r7, #16]
   2f7ca:	0011      	movs	r1, r2
   2f7cc:	0018      	movs	r0, r3
   2f7ce:	4b2c      	ldr	r3, [pc, #176]	; (2f880 <dir_find+0x1ec>)
   2f7d0:	4798      	blx	r3
   2f7d2:	1e03      	subs	r3, r0, #0
   2f7d4:	d005      	beq.n	2f7e2 <dir_find+0x14e>
   2f7d6:	2315      	movs	r3, #21
   2f7d8:	18fb      	adds	r3, r7, r3
   2f7da:	781b      	ldrb	r3, [r3, #0]
   2f7dc:	3b01      	subs	r3, #1
   2f7de:	b2da      	uxtb	r2, r3
   2f7e0:	e000      	b.n	2f7e4 <dir_find+0x150>
   2f7e2:	22ff      	movs	r2, #255	; 0xff
   2f7e4:	2315      	movs	r3, #21
   2f7e6:	18fb      	adds	r3, r7, r3
   2f7e8:	701a      	strb	r2, [r3, #0]
   2f7ea:	e028      	b.n	2f83e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2f7ec:	2315      	movs	r3, #21
   2f7ee:	18fb      	adds	r3, r7, r3
   2f7f0:	781b      	ldrb	r3, [r3, #0]
   2f7f2:	2b00      	cmp	r3, #0
   2f7f4:	d10a      	bne.n	2f80c <dir_find+0x178>
   2f7f6:	693b      	ldr	r3, [r7, #16]
   2f7f8:	0018      	movs	r0, r3
   2f7fa:	4b22      	ldr	r3, [pc, #136]	; (2f884 <dir_find+0x1f0>)
   2f7fc:	4798      	blx	r3
   2f7fe:	0003      	movs	r3, r0
   2f800:	001a      	movs	r2, r3
   2f802:	2314      	movs	r3, #20
   2f804:	18fb      	adds	r3, r7, r3
   2f806:	781b      	ldrb	r3, [r3, #0]
   2f808:	4293      	cmp	r3, r2
   2f80a:	d02a      	beq.n	2f862 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2f80c:	2315      	movs	r3, #21
   2f80e:	18fb      	adds	r3, r7, r3
   2f810:	22ff      	movs	r2, #255	; 0xff
   2f812:	701a      	strb	r2, [r3, #0]
   2f814:	687b      	ldr	r3, [r7, #4]
   2f816:	2201      	movs	r2, #1
   2f818:	4252      	negs	r2, r2
   2f81a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2f81c:	687b      	ldr	r3, [r7, #4]
   2f81e:	699b      	ldr	r3, [r3, #24]
   2f820:	330b      	adds	r3, #11
   2f822:	781b      	ldrb	r3, [r3, #0]
   2f824:	001a      	movs	r2, r3
   2f826:	2301      	movs	r3, #1
   2f828:	4013      	ands	r3, r2
   2f82a:	d108      	bne.n	2f83e <dir_find+0x1aa>
   2f82c:	687b      	ldr	r3, [r7, #4]
   2f82e:	6999      	ldr	r1, [r3, #24]
   2f830:	693b      	ldr	r3, [r7, #16]
   2f832:	220b      	movs	r2, #11
   2f834:	0018      	movs	r0, r3
   2f836:	4b14      	ldr	r3, [pc, #80]	; (2f888 <dir_find+0x1f4>)
   2f838:	4798      	blx	r3
   2f83a:	1e03      	subs	r3, r0, #0
   2f83c:	d013      	beq.n	2f866 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2f83e:	2317      	movs	r3, #23
   2f840:	18fc      	adds	r4, r7, r3
   2f842:	687b      	ldr	r3, [r7, #4]
   2f844:	2100      	movs	r1, #0
   2f846:	0018      	movs	r0, r3
   2f848:	4b10      	ldr	r3, [pc, #64]	; (2f88c <dir_find+0x1f8>)
   2f84a:	4798      	blx	r3
   2f84c:	0003      	movs	r3, r0
   2f84e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2f850:	2317      	movs	r3, #23
   2f852:	18fb      	adds	r3, r7, r3
   2f854:	781b      	ldrb	r3, [r3, #0]
   2f856:	2b00      	cmp	r3, #0
   2f858:	d100      	bne.n	2f85c <dir_find+0x1c8>
   2f85a:	e73b      	b.n	2f6d4 <dir_find+0x40>
   2f85c:	e004      	b.n	2f868 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2f85e:	46c0      	nop			; (mov r8, r8)
   2f860:	e002      	b.n	2f868 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2f862:	46c0      	nop			; (mov r8, r8)
   2f864:	e000      	b.n	2f868 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2f866:	46c0      	nop			; (mov r8, r8)

	return res;
   2f868:	2317      	movs	r3, #23
   2f86a:	18fb      	adds	r3, r7, r3
   2f86c:	781b      	ldrb	r3, [r3, #0]
}
   2f86e:	0018      	movs	r0, r3
   2f870:	46bd      	mov	sp, r7
   2f872:	b007      	add	sp, #28
   2f874:	bd90      	pop	{r4, r7, pc}
   2f876:	46c0      	nop			; (mov r8, r8)
   2f878:	0002f011 	.word	0x0002f011
   2f87c:	0002e7cd 	.word	0x0002e7cd
   2f880:	0002f331 	.word	0x0002f331
   2f884:	0002f645 	.word	0x0002f645
   2f888:	0002e751 	.word	0x0002e751
   2f88c:	0002f141 	.word	0x0002f141

0002f890 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2f890:	b590      	push	{r4, r7, lr}
   2f892:	b08d      	sub	sp, #52	; 0x34
   2f894:	af00      	add	r7, sp, #0
   2f896:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2f898:	687b      	ldr	r3, [r7, #4]
   2f89a:	699b      	ldr	r3, [r3, #24]
   2f89c:	627b      	str	r3, [r7, #36]	; 0x24
   2f89e:	687b      	ldr	r3, [r7, #4]
   2f8a0:	69db      	ldr	r3, [r3, #28]
   2f8a2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2f8a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f8a6:	230c      	movs	r3, #12
   2f8a8:	18fb      	adds	r3, r7, r3
   2f8aa:	220c      	movs	r2, #12
   2f8ac:	0018      	movs	r0, r3
   2f8ae:	4bc8      	ldr	r3, [pc, #800]	; (2fbd0 <dir_register+0x340>)
   2f8b0:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2f8b2:	230c      	movs	r3, #12
   2f8b4:	18fb      	adds	r3, r7, r3
   2f8b6:	7adb      	ldrb	r3, [r3, #11]
   2f8b8:	001a      	movs	r2, r3
   2f8ba:	2301      	movs	r3, #1
   2f8bc:	4013      	ands	r3, r2
   2f8be:	d048      	beq.n	2f952 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2f8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f8c2:	330b      	adds	r3, #11
   2f8c4:	2200      	movs	r2, #0
   2f8c6:	701a      	strb	r2, [r3, #0]
   2f8c8:	687b      	ldr	r3, [r7, #4]
   2f8ca:	2200      	movs	r2, #0
   2f8cc:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2f8ce:	232c      	movs	r3, #44	; 0x2c
   2f8d0:	18fb      	adds	r3, r7, r3
   2f8d2:	2201      	movs	r2, #1
   2f8d4:	801a      	strh	r2, [r3, #0]
   2f8d6:	e01c      	b.n	2f912 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2f8d8:	232c      	movs	r3, #44	; 0x2c
   2f8da:	18fb      	adds	r3, r7, r3
   2f8dc:	881b      	ldrh	r3, [r3, #0]
   2f8de:	6a3a      	ldr	r2, [r7, #32]
   2f8e0:	210c      	movs	r1, #12
   2f8e2:	1879      	adds	r1, r7, r1
   2f8e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2f8e6:	4cbb      	ldr	r4, [pc, #748]	; (2fbd4 <dir_register+0x344>)
   2f8e8:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2f8ea:	232f      	movs	r3, #47	; 0x2f
   2f8ec:	18fc      	adds	r4, r7, r3
   2f8ee:	687b      	ldr	r3, [r7, #4]
   2f8f0:	0018      	movs	r0, r3
   2f8f2:	4bb9      	ldr	r3, [pc, #740]	; (2fbd8 <dir_register+0x348>)
   2f8f4:	4798      	blx	r3
   2f8f6:	0003      	movs	r3, r0
   2f8f8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2f8fa:	232f      	movs	r3, #47	; 0x2f
   2f8fc:	18fb      	adds	r3, r7, r3
   2f8fe:	781b      	ldrb	r3, [r3, #0]
   2f900:	2b00      	cmp	r3, #0
   2f902:	d10c      	bne.n	2f91e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2f904:	232c      	movs	r3, #44	; 0x2c
   2f906:	18fb      	adds	r3, r7, r3
   2f908:	881a      	ldrh	r2, [r3, #0]
   2f90a:	232c      	movs	r3, #44	; 0x2c
   2f90c:	18fb      	adds	r3, r7, r3
   2f90e:	3201      	adds	r2, #1
   2f910:	801a      	strh	r2, [r3, #0]
   2f912:	232c      	movs	r3, #44	; 0x2c
   2f914:	18fb      	adds	r3, r7, r3
   2f916:	881b      	ldrh	r3, [r3, #0]
   2f918:	2b63      	cmp	r3, #99	; 0x63
   2f91a:	d9dd      	bls.n	2f8d8 <dir_register+0x48>
   2f91c:	e000      	b.n	2f920 <dir_register+0x90>
			if (res != FR_OK) break;
   2f91e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2f920:	232c      	movs	r3, #44	; 0x2c
   2f922:	18fb      	adds	r3, r7, r3
   2f924:	881b      	ldrh	r3, [r3, #0]
   2f926:	2b64      	cmp	r3, #100	; 0x64
   2f928:	d101      	bne.n	2f92e <dir_register+0x9e>
   2f92a:	2307      	movs	r3, #7
   2f92c:	e14c      	b.n	2fbc8 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2f92e:	232f      	movs	r3, #47	; 0x2f
   2f930:	18fb      	adds	r3, r7, r3
   2f932:	781b      	ldrb	r3, [r3, #0]
   2f934:	2b04      	cmp	r3, #4
   2f936:	d003      	beq.n	2f940 <dir_register+0xb0>
   2f938:	232f      	movs	r3, #47	; 0x2f
   2f93a:	18fb      	adds	r3, r7, r3
   2f93c:	781b      	ldrb	r3, [r3, #0]
   2f93e:	e143      	b.n	2fbc8 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f942:	330b      	adds	r3, #11
   2f944:	220c      	movs	r2, #12
   2f946:	18ba      	adds	r2, r7, r2
   2f948:	7ad2      	ldrb	r2, [r2, #11]
   2f94a:	701a      	strb	r2, [r3, #0]
   2f94c:	687b      	ldr	r3, [r7, #4]
   2f94e:	6a3a      	ldr	r2, [r7, #32]
   2f950:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2f952:	230c      	movs	r3, #12
   2f954:	18fb      	adds	r3, r7, r3
   2f956:	7adb      	ldrb	r3, [r3, #11]
   2f958:	001a      	movs	r2, r3
   2f95a:	2302      	movs	r3, #2
   2f95c:	4013      	ands	r3, r2
   2f95e:	d023      	beq.n	2f9a8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2f960:	232a      	movs	r3, #42	; 0x2a
   2f962:	18fb      	adds	r3, r7, r3
   2f964:	2200      	movs	r2, #0
   2f966:	801a      	strh	r2, [r3, #0]
   2f968:	e006      	b.n	2f978 <dir_register+0xe8>
   2f96a:	232a      	movs	r3, #42	; 0x2a
   2f96c:	18fb      	adds	r3, r7, r3
   2f96e:	881a      	ldrh	r2, [r3, #0]
   2f970:	232a      	movs	r3, #42	; 0x2a
   2f972:	18fb      	adds	r3, r7, r3
   2f974:	3201      	adds	r2, #1
   2f976:	801a      	strh	r2, [r3, #0]
   2f978:	232a      	movs	r3, #42	; 0x2a
   2f97a:	18fb      	adds	r3, r7, r3
   2f97c:	881b      	ldrh	r3, [r3, #0]
   2f97e:	005b      	lsls	r3, r3, #1
   2f980:	6a3a      	ldr	r2, [r7, #32]
   2f982:	18d3      	adds	r3, r2, r3
   2f984:	881b      	ldrh	r3, [r3, #0]
   2f986:	2b00      	cmp	r3, #0
   2f988:	d1ef      	bne.n	2f96a <dir_register+0xda>
		ne = (ne + 25) / 13;
   2f98a:	232a      	movs	r3, #42	; 0x2a
   2f98c:	18fb      	adds	r3, r7, r3
   2f98e:	881b      	ldrh	r3, [r3, #0]
   2f990:	3319      	adds	r3, #25
   2f992:	001a      	movs	r2, r3
   2f994:	4b91      	ldr	r3, [pc, #580]	; (2fbdc <dir_register+0x34c>)
   2f996:	210d      	movs	r1, #13
   2f998:	0010      	movs	r0, r2
   2f99a:	4798      	blx	r3
   2f99c:	0003      	movs	r3, r0
   2f99e:	001a      	movs	r2, r3
   2f9a0:	232a      	movs	r3, #42	; 0x2a
   2f9a2:	18fb      	adds	r3, r7, r3
   2f9a4:	801a      	strh	r2, [r3, #0]
   2f9a6:	e003      	b.n	2f9b0 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2f9a8:	232a      	movs	r3, #42	; 0x2a
   2f9aa:	18fb      	adds	r3, r7, r3
   2f9ac:	2201      	movs	r2, #1
   2f9ae:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2f9b0:	232f      	movs	r3, #47	; 0x2f
   2f9b2:	18fc      	adds	r4, r7, r3
   2f9b4:	687b      	ldr	r3, [r7, #4]
   2f9b6:	2100      	movs	r1, #0
   2f9b8:	0018      	movs	r0, r3
   2f9ba:	4b89      	ldr	r3, [pc, #548]	; (2fbe0 <dir_register+0x350>)
   2f9bc:	4798      	blx	r3
   2f9be:	0003      	movs	r3, r0
   2f9c0:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2f9c2:	232f      	movs	r3, #47	; 0x2f
   2f9c4:	18fb      	adds	r3, r7, r3
   2f9c6:	781b      	ldrb	r3, [r3, #0]
   2f9c8:	2b00      	cmp	r3, #0
   2f9ca:	d003      	beq.n	2f9d4 <dir_register+0x144>
   2f9cc:	232f      	movs	r3, #47	; 0x2f
   2f9ce:	18fb      	adds	r3, r7, r3
   2f9d0:	781b      	ldrb	r3, [r3, #0]
   2f9d2:	e0f9      	b.n	2fbc8 <dir_register+0x338>
	n = is = 0;
   2f9d4:	2328      	movs	r3, #40	; 0x28
   2f9d6:	18fb      	adds	r3, r7, r3
   2f9d8:	2200      	movs	r2, #0
   2f9da:	801a      	strh	r2, [r3, #0]
   2f9dc:	232c      	movs	r3, #44	; 0x2c
   2f9de:	18fb      	adds	r3, r7, r3
   2f9e0:	2228      	movs	r2, #40	; 0x28
   2f9e2:	18ba      	adds	r2, r7, r2
   2f9e4:	8812      	ldrh	r2, [r2, #0]
   2f9e6:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2f9e8:	687b      	ldr	r3, [r7, #4]
   2f9ea:	681a      	ldr	r2, [r3, #0]
   2f9ec:	687b      	ldr	r3, [r7, #4]
   2f9ee:	691b      	ldr	r3, [r3, #16]
   2f9f0:	212f      	movs	r1, #47	; 0x2f
   2f9f2:	187c      	adds	r4, r7, r1
   2f9f4:	0019      	movs	r1, r3
   2f9f6:	0010      	movs	r0, r2
   2f9f8:	4b7a      	ldr	r3, [pc, #488]	; (2fbe4 <dir_register+0x354>)
   2f9fa:	4798      	blx	r3
   2f9fc:	0003      	movs	r3, r0
   2f9fe:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2fa00:	232f      	movs	r3, #47	; 0x2f
   2fa02:	18fb      	adds	r3, r7, r3
   2fa04:	781b      	ldrb	r3, [r3, #0]
   2fa06:	2b00      	cmp	r3, #0
   2fa08:	d13c      	bne.n	2fa84 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2fa0a:	687b      	ldr	r3, [r7, #4]
   2fa0c:	695a      	ldr	r2, [r3, #20]
   2fa0e:	231f      	movs	r3, #31
   2fa10:	18fb      	adds	r3, r7, r3
   2fa12:	7812      	ldrb	r2, [r2, #0]
   2fa14:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2fa16:	231f      	movs	r3, #31
   2fa18:	18fb      	adds	r3, r7, r3
   2fa1a:	781b      	ldrb	r3, [r3, #0]
   2fa1c:	2be5      	cmp	r3, #229	; 0xe5
   2fa1e:	d004      	beq.n	2fa2a <dir_register+0x19a>
   2fa20:	231f      	movs	r3, #31
   2fa22:	18fb      	adds	r3, r7, r3
   2fa24:	781b      	ldrb	r3, [r3, #0]
   2fa26:	2b00      	cmp	r3, #0
   2fa28:	d119      	bne.n	2fa5e <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2fa2a:	232c      	movs	r3, #44	; 0x2c
   2fa2c:	18fb      	adds	r3, r7, r3
   2fa2e:	881b      	ldrh	r3, [r3, #0]
   2fa30:	2b00      	cmp	r3, #0
   2fa32:	d104      	bne.n	2fa3e <dir_register+0x1ae>
   2fa34:	2328      	movs	r3, #40	; 0x28
   2fa36:	18fb      	adds	r3, r7, r3
   2fa38:	687a      	ldr	r2, [r7, #4]
   2fa3a:	88d2      	ldrh	r2, [r2, #6]
   2fa3c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2fa3e:	232c      	movs	r3, #44	; 0x2c
   2fa40:	18fb      	adds	r3, r7, r3
   2fa42:	222c      	movs	r2, #44	; 0x2c
   2fa44:	18ba      	adds	r2, r7, r2
   2fa46:	8812      	ldrh	r2, [r2, #0]
   2fa48:	3201      	adds	r2, #1
   2fa4a:	801a      	strh	r2, [r3, #0]
   2fa4c:	232c      	movs	r3, #44	; 0x2c
   2fa4e:	18fa      	adds	r2, r7, r3
   2fa50:	232a      	movs	r3, #42	; 0x2a
   2fa52:	18fb      	adds	r3, r7, r3
   2fa54:	8812      	ldrh	r2, [r2, #0]
   2fa56:	881b      	ldrh	r3, [r3, #0]
   2fa58:	429a      	cmp	r2, r3
   2fa5a:	d104      	bne.n	2fa66 <dir_register+0x1d6>
   2fa5c:	e013      	b.n	2fa86 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2fa5e:	232c      	movs	r3, #44	; 0x2c
   2fa60:	18fb      	adds	r3, r7, r3
   2fa62:	2200      	movs	r2, #0
   2fa64:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2fa66:	232f      	movs	r3, #47	; 0x2f
   2fa68:	18fc      	adds	r4, r7, r3
   2fa6a:	687b      	ldr	r3, [r7, #4]
   2fa6c:	2101      	movs	r1, #1
   2fa6e:	0018      	movs	r0, r3
   2fa70:	4b5d      	ldr	r3, [pc, #372]	; (2fbe8 <dir_register+0x358>)
   2fa72:	4798      	blx	r3
   2fa74:	0003      	movs	r3, r0
   2fa76:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2fa78:	232f      	movs	r3, #47	; 0x2f
   2fa7a:	18fb      	adds	r3, r7, r3
   2fa7c:	781b      	ldrb	r3, [r3, #0]
   2fa7e:	2b00      	cmp	r3, #0
   2fa80:	d0b2      	beq.n	2f9e8 <dir_register+0x158>
   2fa82:	e000      	b.n	2fa86 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2fa84:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2fa86:	232f      	movs	r3, #47	; 0x2f
   2fa88:	18fb      	adds	r3, r7, r3
   2fa8a:	781b      	ldrb	r3, [r3, #0]
   2fa8c:	2b00      	cmp	r3, #0
   2fa8e:	d163      	bne.n	2fb58 <dir_register+0x2c8>
   2fa90:	232a      	movs	r3, #42	; 0x2a
   2fa92:	18fb      	adds	r3, r7, r3
   2fa94:	881b      	ldrh	r3, [r3, #0]
   2fa96:	2b01      	cmp	r3, #1
   2fa98:	d95e      	bls.n	2fb58 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2fa9a:	232f      	movs	r3, #47	; 0x2f
   2fa9c:	18fc      	adds	r4, r7, r3
   2fa9e:	2328      	movs	r3, #40	; 0x28
   2faa0:	18fb      	adds	r3, r7, r3
   2faa2:	881a      	ldrh	r2, [r3, #0]
   2faa4:	687b      	ldr	r3, [r7, #4]
   2faa6:	0011      	movs	r1, r2
   2faa8:	0018      	movs	r0, r3
   2faaa:	4b4d      	ldr	r3, [pc, #308]	; (2fbe0 <dir_register+0x350>)
   2faac:	4798      	blx	r3
   2faae:	0003      	movs	r3, r0
   2fab0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2fab2:	232f      	movs	r3, #47	; 0x2f
   2fab4:	18fb      	adds	r3, r7, r3
   2fab6:	781b      	ldrb	r3, [r3, #0]
   2fab8:	2b00      	cmp	r3, #0
   2faba:	d14d      	bne.n	2fb58 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2fabc:	687b      	ldr	r3, [r7, #4]
   2fabe:	699b      	ldr	r3, [r3, #24]
   2fac0:	221e      	movs	r2, #30
   2fac2:	18bc      	adds	r4, r7, r2
   2fac4:	0018      	movs	r0, r3
   2fac6:	4b49      	ldr	r3, [pc, #292]	; (2fbec <dir_register+0x35c>)
   2fac8:	4798      	blx	r3
   2faca:	0003      	movs	r3, r0
   2facc:	7023      	strb	r3, [r4, #0]
			ne--;
   2face:	232a      	movs	r3, #42	; 0x2a
   2fad0:	18fb      	adds	r3, r7, r3
   2fad2:	881a      	ldrh	r2, [r3, #0]
   2fad4:	232a      	movs	r3, #42	; 0x2a
   2fad6:	18fb      	adds	r3, r7, r3
   2fad8:	3a01      	subs	r2, #1
   2fada:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2fadc:	687b      	ldr	r3, [r7, #4]
   2fade:	681a      	ldr	r2, [r3, #0]
   2fae0:	687b      	ldr	r3, [r7, #4]
   2fae2:	691b      	ldr	r3, [r3, #16]
   2fae4:	212f      	movs	r1, #47	; 0x2f
   2fae6:	187c      	adds	r4, r7, r1
   2fae8:	0019      	movs	r1, r3
   2faea:	0010      	movs	r0, r2
   2faec:	4b3d      	ldr	r3, [pc, #244]	; (2fbe4 <dir_register+0x354>)
   2faee:	4798      	blx	r3
   2faf0:	0003      	movs	r3, r0
   2faf2:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2faf4:	232f      	movs	r3, #47	; 0x2f
   2faf6:	18fb      	adds	r3, r7, r3
   2faf8:	781b      	ldrb	r3, [r3, #0]
   2fafa:	2b00      	cmp	r3, #0
   2fafc:	d12b      	bne.n	2fb56 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2fafe:	687b      	ldr	r3, [r7, #4]
   2fb00:	69d8      	ldr	r0, [r3, #28]
   2fb02:	687b      	ldr	r3, [r7, #4]
   2fb04:	6959      	ldr	r1, [r3, #20]
   2fb06:	232a      	movs	r3, #42	; 0x2a
   2fb08:	18fb      	adds	r3, r7, r3
   2fb0a:	881b      	ldrh	r3, [r3, #0]
   2fb0c:	b2da      	uxtb	r2, r3
   2fb0e:	231e      	movs	r3, #30
   2fb10:	18fb      	adds	r3, r7, r3
   2fb12:	781b      	ldrb	r3, [r3, #0]
   2fb14:	4c36      	ldr	r4, [pc, #216]	; (2fbf0 <dir_register+0x360>)
   2fb16:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2fb18:	687b      	ldr	r3, [r7, #4]
   2fb1a:	681b      	ldr	r3, [r3, #0]
   2fb1c:	2201      	movs	r2, #1
   2fb1e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2fb20:	232f      	movs	r3, #47	; 0x2f
   2fb22:	18fc      	adds	r4, r7, r3
   2fb24:	687b      	ldr	r3, [r7, #4]
   2fb26:	2100      	movs	r1, #0
   2fb28:	0018      	movs	r0, r3
   2fb2a:	4b2f      	ldr	r3, [pc, #188]	; (2fbe8 <dir_register+0x358>)
   2fb2c:	4798      	blx	r3
   2fb2e:	0003      	movs	r3, r0
   2fb30:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2fb32:	232f      	movs	r3, #47	; 0x2f
   2fb34:	18fb      	adds	r3, r7, r3
   2fb36:	781b      	ldrb	r3, [r3, #0]
   2fb38:	2b00      	cmp	r3, #0
   2fb3a:	d10d      	bne.n	2fb58 <dir_register+0x2c8>
   2fb3c:	232a      	movs	r3, #42	; 0x2a
   2fb3e:	18fb      	adds	r3, r7, r3
   2fb40:	222a      	movs	r2, #42	; 0x2a
   2fb42:	18ba      	adds	r2, r7, r2
   2fb44:	8812      	ldrh	r2, [r2, #0]
   2fb46:	3a01      	subs	r2, #1
   2fb48:	801a      	strh	r2, [r3, #0]
   2fb4a:	232a      	movs	r3, #42	; 0x2a
   2fb4c:	18fb      	adds	r3, r7, r3
   2fb4e:	881b      	ldrh	r3, [r3, #0]
   2fb50:	2b00      	cmp	r3, #0
   2fb52:	d1c3      	bne.n	2fadc <dir_register+0x24c>
   2fb54:	e000      	b.n	2fb58 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2fb56:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2fb58:	232f      	movs	r3, #47	; 0x2f
   2fb5a:	18fb      	adds	r3, r7, r3
   2fb5c:	781b      	ldrb	r3, [r3, #0]
   2fb5e:	2b00      	cmp	r3, #0
   2fb60:	d12f      	bne.n	2fbc2 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2fb62:	687b      	ldr	r3, [r7, #4]
   2fb64:	681a      	ldr	r2, [r3, #0]
   2fb66:	687b      	ldr	r3, [r7, #4]
   2fb68:	691b      	ldr	r3, [r3, #16]
   2fb6a:	212f      	movs	r1, #47	; 0x2f
   2fb6c:	187c      	adds	r4, r7, r1
   2fb6e:	0019      	movs	r1, r3
   2fb70:	0010      	movs	r0, r2
   2fb72:	4b1c      	ldr	r3, [pc, #112]	; (2fbe4 <dir_register+0x354>)
   2fb74:	4798      	blx	r3
   2fb76:	0003      	movs	r3, r0
   2fb78:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2fb7a:	232f      	movs	r3, #47	; 0x2f
   2fb7c:	18fb      	adds	r3, r7, r3
   2fb7e:	781b      	ldrb	r3, [r3, #0]
   2fb80:	2b00      	cmp	r3, #0
   2fb82:	d11e      	bne.n	2fbc2 <dir_register+0x332>
			dir = dj->dir;
   2fb84:	687b      	ldr	r3, [r7, #4]
   2fb86:	695b      	ldr	r3, [r3, #20]
   2fb88:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2fb8a:	69bb      	ldr	r3, [r7, #24]
   2fb8c:	2220      	movs	r2, #32
   2fb8e:	2100      	movs	r1, #0
   2fb90:	0018      	movs	r0, r3
   2fb92:	4b18      	ldr	r3, [pc, #96]	; (2fbf4 <dir_register+0x364>)
   2fb94:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2fb96:	687b      	ldr	r3, [r7, #4]
   2fb98:	6999      	ldr	r1, [r3, #24]
   2fb9a:	69bb      	ldr	r3, [r7, #24]
   2fb9c:	220b      	movs	r2, #11
   2fb9e:	0018      	movs	r0, r3
   2fba0:	4b0b      	ldr	r3, [pc, #44]	; (2fbd0 <dir_register+0x340>)
   2fba2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2fba4:	69bb      	ldr	r3, [r7, #24]
   2fba6:	330c      	adds	r3, #12
   2fba8:	001a      	movs	r2, r3
   2fbaa:	687b      	ldr	r3, [r7, #4]
   2fbac:	699b      	ldr	r3, [r3, #24]
   2fbae:	330b      	adds	r3, #11
   2fbb0:	781b      	ldrb	r3, [r3, #0]
   2fbb2:	2118      	movs	r1, #24
   2fbb4:	400b      	ands	r3, r1
   2fbb6:	b2db      	uxtb	r3, r3
   2fbb8:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2fbba:	687b      	ldr	r3, [r7, #4]
   2fbbc:	681b      	ldr	r3, [r3, #0]
   2fbbe:	2201      	movs	r2, #1
   2fbc0:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2fbc2:	232f      	movs	r3, #47	; 0x2f
   2fbc4:	18fb      	adds	r3, r7, r3
   2fbc6:	781b      	ldrb	r3, [r3, #0]
}
   2fbc8:	0018      	movs	r0, r3
   2fbca:	46bd      	mov	sp, r7
   2fbcc:	b00d      	add	sp, #52	; 0x34
   2fbce:	bd90      	pop	{r4, r7, pc}
   2fbd0:	0002e6e9 	.word	0x0002e6e9
   2fbd4:	0002f545 	.word	0x0002f545
   2fbd8:	0002f695 	.word	0x0002f695
   2fbdc:	00035b05 	.word	0x00035b05
   2fbe0:	0002f011 	.word	0x0002f011
   2fbe4:	0002e7cd 	.word	0x0002e7cd
   2fbe8:	0002f141 	.word	0x0002f141
   2fbec:	0002f645 	.word	0x0002f645
   2fbf0:	0002f435 	.word	0x0002f435
   2fbf4:	0002e721 	.word	0x0002e721

0002fbf8 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2fbf8:	b590      	push	{r4, r7, lr}
   2fbfa:	b08b      	sub	sp, #44	; 0x2c
   2fbfc:	af00      	add	r7, sp, #0
   2fbfe:	6078      	str	r0, [r7, #4]
   2fc00:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2fc02:	683b      	ldr	r3, [r7, #0]
   2fc04:	681b      	ldr	r3, [r3, #0]
   2fc06:	613b      	str	r3, [r7, #16]
   2fc08:	e002      	b.n	2fc10 <create_name+0x18>
   2fc0a:	693b      	ldr	r3, [r7, #16]
   2fc0c:	3301      	adds	r3, #1
   2fc0e:	613b      	str	r3, [r7, #16]
   2fc10:	693b      	ldr	r3, [r7, #16]
   2fc12:	781b      	ldrb	r3, [r3, #0]
   2fc14:	2b2f      	cmp	r3, #47	; 0x2f
   2fc16:	d0f8      	beq.n	2fc0a <create_name+0x12>
   2fc18:	693b      	ldr	r3, [r7, #16]
   2fc1a:	781b      	ldrb	r3, [r3, #0]
   2fc1c:	2b5c      	cmp	r3, #92	; 0x5c
   2fc1e:	d0f4      	beq.n	2fc0a <create_name+0x12>
	lfn = dj->lfn;
   2fc20:	687b      	ldr	r3, [r7, #4]
   2fc22:	69db      	ldr	r3, [r3, #28]
   2fc24:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2fc26:	2300      	movs	r3, #0
   2fc28:	617b      	str	r3, [r7, #20]
   2fc2a:	697b      	ldr	r3, [r7, #20]
   2fc2c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2fc2e:	69bb      	ldr	r3, [r7, #24]
   2fc30:	1c5a      	adds	r2, r3, #1
   2fc32:	61ba      	str	r2, [r7, #24]
   2fc34:	693a      	ldr	r2, [r7, #16]
   2fc36:	18d3      	adds	r3, r2, r3
   2fc38:	781a      	ldrb	r2, [r3, #0]
   2fc3a:	2324      	movs	r3, #36	; 0x24
   2fc3c:	18fb      	adds	r3, r7, r3
   2fc3e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2fc40:	2324      	movs	r3, #36	; 0x24
   2fc42:	18fb      	adds	r3, r7, r3
   2fc44:	881b      	ldrh	r3, [r3, #0]
   2fc46:	2b1f      	cmp	r3, #31
   2fc48:	d944      	bls.n	2fcd4 <create_name+0xdc>
   2fc4a:	2324      	movs	r3, #36	; 0x24
   2fc4c:	18fb      	adds	r3, r7, r3
   2fc4e:	881b      	ldrh	r3, [r3, #0]
   2fc50:	2b2f      	cmp	r3, #47	; 0x2f
   2fc52:	d03f      	beq.n	2fcd4 <create_name+0xdc>
   2fc54:	2324      	movs	r3, #36	; 0x24
   2fc56:	18fb      	adds	r3, r7, r3
   2fc58:	881b      	ldrh	r3, [r3, #0]
   2fc5a:	2b5c      	cmp	r3, #92	; 0x5c
   2fc5c:	d03a      	beq.n	2fcd4 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2fc5e:	697b      	ldr	r3, [r7, #20]
   2fc60:	2bfe      	cmp	r3, #254	; 0xfe
   2fc62:	d901      	bls.n	2fc68 <create_name+0x70>
			return FR_INVALID_NAME;
   2fc64:	2306      	movs	r3, #6
   2fc66:	e1e7      	b.n	30038 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2fc68:	2324      	movs	r3, #36	; 0x24
   2fc6a:	18fb      	adds	r3, r7, r3
   2fc6c:	2224      	movs	r2, #36	; 0x24
   2fc6e:	18ba      	adds	r2, r7, r2
   2fc70:	8812      	ldrh	r2, [r2, #0]
   2fc72:	21ff      	movs	r1, #255	; 0xff
   2fc74:	400a      	ands	r2, r1
   2fc76:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2fc78:	2324      	movs	r3, #36	; 0x24
   2fc7a:	18fc      	adds	r4, r7, r3
   2fc7c:	2324      	movs	r3, #36	; 0x24
   2fc7e:	18fb      	adds	r3, r7, r3
   2fc80:	881b      	ldrh	r3, [r3, #0]
   2fc82:	2101      	movs	r1, #1
   2fc84:	0018      	movs	r0, r3
   2fc86:	4bba      	ldr	r3, [pc, #744]	; (2ff70 <create_name+0x378>)
   2fc88:	4798      	blx	r3
   2fc8a:	0003      	movs	r3, r0
   2fc8c:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2fc8e:	2324      	movs	r3, #36	; 0x24
   2fc90:	18fb      	adds	r3, r7, r3
   2fc92:	881b      	ldrh	r3, [r3, #0]
   2fc94:	2b00      	cmp	r3, #0
   2fc96:	d101      	bne.n	2fc9c <create_name+0xa4>
   2fc98:	2306      	movs	r3, #6
   2fc9a:	e1cd      	b.n	30038 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2fc9c:	2324      	movs	r3, #36	; 0x24
   2fc9e:	18fb      	adds	r3, r7, r3
   2fca0:	881b      	ldrh	r3, [r3, #0]
   2fca2:	2b7f      	cmp	r3, #127	; 0x7f
   2fca4:	d80b      	bhi.n	2fcbe <create_name+0xc6>
   2fca6:	2324      	movs	r3, #36	; 0x24
   2fca8:	18fb      	adds	r3, r7, r3
   2fcaa:	881a      	ldrh	r2, [r3, #0]
   2fcac:	4bb1      	ldr	r3, [pc, #708]	; (2ff74 <create_name+0x37c>)
   2fcae:	0011      	movs	r1, r2
   2fcb0:	0018      	movs	r0, r3
   2fcb2:	4bb1      	ldr	r3, [pc, #708]	; (2ff78 <create_name+0x380>)
   2fcb4:	4798      	blx	r3
   2fcb6:	1e03      	subs	r3, r0, #0
   2fcb8:	d001      	beq.n	2fcbe <create_name+0xc6>
			return FR_INVALID_NAME;
   2fcba:	2306      	movs	r3, #6
   2fcbc:	e1bc      	b.n	30038 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2fcbe:	697b      	ldr	r3, [r7, #20]
   2fcc0:	1c5a      	adds	r2, r3, #1
   2fcc2:	617a      	str	r2, [r7, #20]
   2fcc4:	005b      	lsls	r3, r3, #1
   2fcc6:	68fa      	ldr	r2, [r7, #12]
   2fcc8:	18d3      	adds	r3, r2, r3
   2fcca:	2224      	movs	r2, #36	; 0x24
   2fccc:	18ba      	adds	r2, r7, r2
   2fcce:	8812      	ldrh	r2, [r2, #0]
   2fcd0:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2fcd2:	e7ac      	b.n	2fc2e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2fcd4:	693a      	ldr	r2, [r7, #16]
   2fcd6:	69bb      	ldr	r3, [r7, #24]
   2fcd8:	18d2      	adds	r2, r2, r3
   2fcda:	683b      	ldr	r3, [r7, #0]
   2fcdc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2fcde:	2324      	movs	r3, #36	; 0x24
   2fce0:	18fb      	adds	r3, r7, r3
   2fce2:	881b      	ldrh	r3, [r3, #0]
   2fce4:	2b1f      	cmp	r3, #31
   2fce6:	d801      	bhi.n	2fcec <create_name+0xf4>
   2fce8:	2204      	movs	r2, #4
   2fcea:	e000      	b.n	2fcee <create_name+0xf6>
   2fcec:	2200      	movs	r2, #0
   2fcee:	2326      	movs	r3, #38	; 0x26
   2fcf0:	18fb      	adds	r3, r7, r3
   2fcf2:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2fcf4:	e017      	b.n	2fd26 <create_name+0x12e>
		w = lfn[di-1];
   2fcf6:	697b      	ldr	r3, [r7, #20]
   2fcf8:	4aa0      	ldr	r2, [pc, #640]	; (2ff7c <create_name+0x384>)
   2fcfa:	4694      	mov	ip, r2
   2fcfc:	4463      	add	r3, ip
   2fcfe:	005b      	lsls	r3, r3, #1
   2fd00:	68fa      	ldr	r2, [r7, #12]
   2fd02:	18d2      	adds	r2, r2, r3
   2fd04:	2324      	movs	r3, #36	; 0x24
   2fd06:	18fb      	adds	r3, r7, r3
   2fd08:	8812      	ldrh	r2, [r2, #0]
   2fd0a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2fd0c:	2324      	movs	r3, #36	; 0x24
   2fd0e:	18fb      	adds	r3, r7, r3
   2fd10:	881b      	ldrh	r3, [r3, #0]
   2fd12:	2b20      	cmp	r3, #32
   2fd14:	d004      	beq.n	2fd20 <create_name+0x128>
   2fd16:	2324      	movs	r3, #36	; 0x24
   2fd18:	18fb      	adds	r3, r7, r3
   2fd1a:	881b      	ldrh	r3, [r3, #0]
   2fd1c:	2b2e      	cmp	r3, #46	; 0x2e
   2fd1e:	d106      	bne.n	2fd2e <create_name+0x136>
		di--;
   2fd20:	697b      	ldr	r3, [r7, #20]
   2fd22:	3b01      	subs	r3, #1
   2fd24:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2fd26:	697b      	ldr	r3, [r7, #20]
   2fd28:	2b00      	cmp	r3, #0
   2fd2a:	d1e4      	bne.n	2fcf6 <create_name+0xfe>
   2fd2c:	e000      	b.n	2fd30 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2fd2e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2fd30:	697b      	ldr	r3, [r7, #20]
   2fd32:	2b00      	cmp	r3, #0
   2fd34:	d101      	bne.n	2fd3a <create_name+0x142>
   2fd36:	2306      	movs	r3, #6
   2fd38:	e17e      	b.n	30038 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2fd3a:	697b      	ldr	r3, [r7, #20]
   2fd3c:	005b      	lsls	r3, r3, #1
   2fd3e:	68fa      	ldr	r2, [r7, #12]
   2fd40:	18d3      	adds	r3, r2, r3
   2fd42:	2200      	movs	r2, #0
   2fd44:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2fd46:	687b      	ldr	r3, [r7, #4]
   2fd48:	699b      	ldr	r3, [r3, #24]
   2fd4a:	220b      	movs	r2, #11
   2fd4c:	2120      	movs	r1, #32
   2fd4e:	0018      	movs	r0, r3
   2fd50:	4b8b      	ldr	r3, [pc, #556]	; (2ff80 <create_name+0x388>)
   2fd52:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2fd54:	2300      	movs	r3, #0
   2fd56:	61bb      	str	r3, [r7, #24]
   2fd58:	e002      	b.n	2fd60 <create_name+0x168>
   2fd5a:	69bb      	ldr	r3, [r7, #24]
   2fd5c:	3301      	adds	r3, #1
   2fd5e:	61bb      	str	r3, [r7, #24]
   2fd60:	69bb      	ldr	r3, [r7, #24]
   2fd62:	005b      	lsls	r3, r3, #1
   2fd64:	68fa      	ldr	r2, [r7, #12]
   2fd66:	18d3      	adds	r3, r2, r3
   2fd68:	881b      	ldrh	r3, [r3, #0]
   2fd6a:	2b20      	cmp	r3, #32
   2fd6c:	d0f5      	beq.n	2fd5a <create_name+0x162>
   2fd6e:	69bb      	ldr	r3, [r7, #24]
   2fd70:	005b      	lsls	r3, r3, #1
   2fd72:	68fa      	ldr	r2, [r7, #12]
   2fd74:	18d3      	adds	r3, r2, r3
   2fd76:	881b      	ldrh	r3, [r3, #0]
   2fd78:	2b2e      	cmp	r3, #46	; 0x2e
   2fd7a:	d0ee      	beq.n	2fd5a <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2fd7c:	69bb      	ldr	r3, [r7, #24]
   2fd7e:	2b00      	cmp	r3, #0
   2fd80:	d00b      	beq.n	2fd9a <create_name+0x1a2>
   2fd82:	2326      	movs	r3, #38	; 0x26
   2fd84:	18fb      	adds	r3, r7, r3
   2fd86:	2226      	movs	r2, #38	; 0x26
   2fd88:	18ba      	adds	r2, r7, r2
   2fd8a:	7812      	ldrb	r2, [r2, #0]
   2fd8c:	2103      	movs	r1, #3
   2fd8e:	430a      	orrs	r2, r1
   2fd90:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2fd92:	e002      	b.n	2fd9a <create_name+0x1a2>
   2fd94:	697b      	ldr	r3, [r7, #20]
   2fd96:	3b01      	subs	r3, #1
   2fd98:	617b      	str	r3, [r7, #20]
   2fd9a:	697b      	ldr	r3, [r7, #20]
   2fd9c:	2b00      	cmp	r3, #0
   2fd9e:	d009      	beq.n	2fdb4 <create_name+0x1bc>
   2fda0:	697b      	ldr	r3, [r7, #20]
   2fda2:	4a76      	ldr	r2, [pc, #472]	; (2ff7c <create_name+0x384>)
   2fda4:	4694      	mov	ip, r2
   2fda6:	4463      	add	r3, ip
   2fda8:	005b      	lsls	r3, r3, #1
   2fdaa:	68fa      	ldr	r2, [r7, #12]
   2fdac:	18d3      	adds	r3, r2, r3
   2fdae:	881b      	ldrh	r3, [r3, #0]
   2fdb0:	2b2e      	cmp	r3, #46	; 0x2e
   2fdb2:	d1ef      	bne.n	2fd94 <create_name+0x19c>

	b = i = 0; ni = 8;
   2fdb4:	2300      	movs	r3, #0
   2fdb6:	623b      	str	r3, [r7, #32]
   2fdb8:	2327      	movs	r3, #39	; 0x27
   2fdba:	18fb      	adds	r3, r7, r3
   2fdbc:	2200      	movs	r2, #0
   2fdbe:	701a      	strb	r2, [r3, #0]
   2fdc0:	2308      	movs	r3, #8
   2fdc2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2fdc4:	69bb      	ldr	r3, [r7, #24]
   2fdc6:	1c5a      	adds	r2, r3, #1
   2fdc8:	61ba      	str	r2, [r7, #24]
   2fdca:	005b      	lsls	r3, r3, #1
   2fdcc:	68fa      	ldr	r2, [r7, #12]
   2fdce:	18d2      	adds	r2, r2, r3
   2fdd0:	2324      	movs	r3, #36	; 0x24
   2fdd2:	18fb      	adds	r3, r7, r3
   2fdd4:	8812      	ldrh	r2, [r2, #0]
   2fdd6:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2fdd8:	2324      	movs	r3, #36	; 0x24
   2fdda:	18fb      	adds	r3, r7, r3
   2fddc:	881b      	ldrh	r3, [r3, #0]
   2fdde:	2b00      	cmp	r3, #0
   2fde0:	d100      	bne.n	2fde4 <create_name+0x1ec>
   2fde2:	e0c3      	b.n	2ff6c <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2fde4:	2324      	movs	r3, #36	; 0x24
   2fde6:	18fb      	adds	r3, r7, r3
   2fde8:	881b      	ldrh	r3, [r3, #0]
   2fdea:	2b20      	cmp	r3, #32
   2fdec:	d008      	beq.n	2fe00 <create_name+0x208>
   2fdee:	2324      	movs	r3, #36	; 0x24
   2fdf0:	18fb      	adds	r3, r7, r3
   2fdf2:	881b      	ldrh	r3, [r3, #0]
   2fdf4:	2b2e      	cmp	r3, #46	; 0x2e
   2fdf6:	d10c      	bne.n	2fe12 <create_name+0x21a>
   2fdf8:	69ba      	ldr	r2, [r7, #24]
   2fdfa:	697b      	ldr	r3, [r7, #20]
   2fdfc:	429a      	cmp	r2, r3
   2fdfe:	d008      	beq.n	2fe12 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2fe00:	2326      	movs	r3, #38	; 0x26
   2fe02:	18fb      	adds	r3, r7, r3
   2fe04:	2226      	movs	r2, #38	; 0x26
   2fe06:	18ba      	adds	r2, r7, r2
   2fe08:	7812      	ldrb	r2, [r2, #0]
   2fe0a:	2103      	movs	r1, #3
   2fe0c:	430a      	orrs	r2, r1
   2fe0e:	701a      	strb	r2, [r3, #0]
   2fe10:	e0ab      	b.n	2ff6a <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2fe12:	6a3a      	ldr	r2, [r7, #32]
   2fe14:	69fb      	ldr	r3, [r7, #28]
   2fe16:	429a      	cmp	r2, r3
   2fe18:	d203      	bcs.n	2fe22 <create_name+0x22a>
   2fe1a:	69ba      	ldr	r2, [r7, #24]
   2fe1c:	697b      	ldr	r3, [r7, #20]
   2fe1e:	429a      	cmp	r2, r3
   2fe20:	d12a      	bne.n	2fe78 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2fe22:	69fb      	ldr	r3, [r7, #28]
   2fe24:	2b0b      	cmp	r3, #11
   2fe26:	d108      	bne.n	2fe3a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2fe28:	2326      	movs	r3, #38	; 0x26
   2fe2a:	18fb      	adds	r3, r7, r3
   2fe2c:	2226      	movs	r2, #38	; 0x26
   2fe2e:	18ba      	adds	r2, r7, r2
   2fe30:	7812      	ldrb	r2, [r2, #0]
   2fe32:	2103      	movs	r1, #3
   2fe34:	430a      	orrs	r2, r1
   2fe36:	701a      	strb	r2, [r3, #0]
   2fe38:	e0a9      	b.n	2ff8e <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2fe3a:	69ba      	ldr	r2, [r7, #24]
   2fe3c:	697b      	ldr	r3, [r7, #20]
   2fe3e:	429a      	cmp	r2, r3
   2fe40:	d007      	beq.n	2fe52 <create_name+0x25a>
   2fe42:	2326      	movs	r3, #38	; 0x26
   2fe44:	18fb      	adds	r3, r7, r3
   2fe46:	2226      	movs	r2, #38	; 0x26
   2fe48:	18ba      	adds	r2, r7, r2
   2fe4a:	7812      	ldrb	r2, [r2, #0]
   2fe4c:	2103      	movs	r1, #3
   2fe4e:	430a      	orrs	r2, r1
   2fe50:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2fe52:	69ba      	ldr	r2, [r7, #24]
   2fe54:	697b      	ldr	r3, [r7, #20]
   2fe56:	429a      	cmp	r2, r3
   2fe58:	d900      	bls.n	2fe5c <create_name+0x264>
   2fe5a:	e097      	b.n	2ff8c <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2fe5c:	697b      	ldr	r3, [r7, #20]
   2fe5e:	61bb      	str	r3, [r7, #24]
   2fe60:	2308      	movs	r3, #8
   2fe62:	623b      	str	r3, [r7, #32]
   2fe64:	230b      	movs	r3, #11
   2fe66:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2fe68:	2327      	movs	r3, #39	; 0x27
   2fe6a:	18fb      	adds	r3, r7, r3
   2fe6c:	2227      	movs	r2, #39	; 0x27
   2fe6e:	18ba      	adds	r2, r7, r2
   2fe70:	7812      	ldrb	r2, [r2, #0]
   2fe72:	0092      	lsls	r2, r2, #2
   2fe74:	701a      	strb	r2, [r3, #0]
   2fe76:	e078      	b.n	2ff6a <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2fe78:	2324      	movs	r3, #36	; 0x24
   2fe7a:	18fb      	adds	r3, r7, r3
   2fe7c:	881b      	ldrh	r3, [r3, #0]
   2fe7e:	2b7f      	cmp	r3, #127	; 0x7f
   2fe80:	d920      	bls.n	2fec4 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2fe82:	2324      	movs	r3, #36	; 0x24
   2fe84:	18fc      	adds	r4, r7, r3
   2fe86:	2324      	movs	r3, #36	; 0x24
   2fe88:	18fb      	adds	r3, r7, r3
   2fe8a:	881b      	ldrh	r3, [r3, #0]
   2fe8c:	2100      	movs	r1, #0
   2fe8e:	0018      	movs	r0, r3
   2fe90:	4b37      	ldr	r3, [pc, #220]	; (2ff70 <create_name+0x378>)
   2fe92:	4798      	blx	r3
   2fe94:	0003      	movs	r3, r0
   2fe96:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2fe98:	2324      	movs	r3, #36	; 0x24
   2fe9a:	18fb      	adds	r3, r7, r3
   2fe9c:	881b      	ldrh	r3, [r3, #0]
   2fe9e:	2b00      	cmp	r3, #0
   2fea0:	d008      	beq.n	2feb4 <create_name+0x2bc>
   2fea2:	2324      	movs	r3, #36	; 0x24
   2fea4:	18fb      	adds	r3, r7, r3
   2fea6:	881b      	ldrh	r3, [r3, #0]
   2fea8:	3b80      	subs	r3, #128	; 0x80
   2feaa:	4a36      	ldr	r2, [pc, #216]	; (2ff84 <create_name+0x38c>)
   2feac:	5cd2      	ldrb	r2, [r2, r3]
   2feae:	2324      	movs	r3, #36	; 0x24
   2feb0:	18fb      	adds	r3, r7, r3
   2feb2:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2feb4:	2326      	movs	r3, #38	; 0x26
   2feb6:	18fb      	adds	r3, r7, r3
   2feb8:	2226      	movs	r2, #38	; 0x26
   2feba:	18ba      	adds	r2, r7, r2
   2febc:	7812      	ldrb	r2, [r2, #0]
   2febe:	2102      	movs	r1, #2
   2fec0:	430a      	orrs	r2, r1
   2fec2:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2fec4:	2324      	movs	r3, #36	; 0x24
   2fec6:	18fb      	adds	r3, r7, r3
   2fec8:	881b      	ldrh	r3, [r3, #0]
   2feca:	2b00      	cmp	r3, #0
   2fecc:	d009      	beq.n	2fee2 <create_name+0x2ea>
   2fece:	2324      	movs	r3, #36	; 0x24
   2fed0:	18fb      	adds	r3, r7, r3
   2fed2:	881a      	ldrh	r2, [r3, #0]
   2fed4:	4b2c      	ldr	r3, [pc, #176]	; (2ff88 <create_name+0x390>)
   2fed6:	0011      	movs	r1, r2
   2fed8:	0018      	movs	r0, r3
   2feda:	4b27      	ldr	r3, [pc, #156]	; (2ff78 <create_name+0x380>)
   2fedc:	4798      	blx	r3
   2fede:	1e03      	subs	r3, r0, #0
   2fee0:	d00c      	beq.n	2fefc <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2fee2:	2324      	movs	r3, #36	; 0x24
   2fee4:	18fb      	adds	r3, r7, r3
   2fee6:	225f      	movs	r2, #95	; 0x5f
   2fee8:	801a      	strh	r2, [r3, #0]
   2feea:	2326      	movs	r3, #38	; 0x26
   2feec:	18fb      	adds	r3, r7, r3
   2feee:	2226      	movs	r2, #38	; 0x26
   2fef0:	18ba      	adds	r2, r7, r2
   2fef2:	7812      	ldrb	r2, [r2, #0]
   2fef4:	2103      	movs	r1, #3
   2fef6:	430a      	orrs	r2, r1
   2fef8:	701a      	strb	r2, [r3, #0]
   2fefa:	e02b      	b.n	2ff54 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2fefc:	2324      	movs	r3, #36	; 0x24
   2fefe:	18fb      	adds	r3, r7, r3
   2ff00:	881b      	ldrh	r3, [r3, #0]
   2ff02:	2b40      	cmp	r3, #64	; 0x40
   2ff04:	d90d      	bls.n	2ff22 <create_name+0x32a>
   2ff06:	2324      	movs	r3, #36	; 0x24
   2ff08:	18fb      	adds	r3, r7, r3
   2ff0a:	881b      	ldrh	r3, [r3, #0]
   2ff0c:	2b5a      	cmp	r3, #90	; 0x5a
   2ff0e:	d808      	bhi.n	2ff22 <create_name+0x32a>
					b |= 2;
   2ff10:	2327      	movs	r3, #39	; 0x27
   2ff12:	18fb      	adds	r3, r7, r3
   2ff14:	2227      	movs	r2, #39	; 0x27
   2ff16:	18ba      	adds	r2, r7, r2
   2ff18:	7812      	ldrb	r2, [r2, #0]
   2ff1a:	2102      	movs	r1, #2
   2ff1c:	430a      	orrs	r2, r1
   2ff1e:	701a      	strb	r2, [r3, #0]
   2ff20:	e018      	b.n	2ff54 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2ff22:	2324      	movs	r3, #36	; 0x24
   2ff24:	18fb      	adds	r3, r7, r3
   2ff26:	881b      	ldrh	r3, [r3, #0]
   2ff28:	2b60      	cmp	r3, #96	; 0x60
   2ff2a:	d913      	bls.n	2ff54 <create_name+0x35c>
   2ff2c:	2324      	movs	r3, #36	; 0x24
   2ff2e:	18fb      	adds	r3, r7, r3
   2ff30:	881b      	ldrh	r3, [r3, #0]
   2ff32:	2b7a      	cmp	r3, #122	; 0x7a
   2ff34:	d80e      	bhi.n	2ff54 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2ff36:	2327      	movs	r3, #39	; 0x27
   2ff38:	18fb      	adds	r3, r7, r3
   2ff3a:	2227      	movs	r2, #39	; 0x27
   2ff3c:	18ba      	adds	r2, r7, r2
   2ff3e:	7812      	ldrb	r2, [r2, #0]
   2ff40:	2101      	movs	r1, #1
   2ff42:	430a      	orrs	r2, r1
   2ff44:	701a      	strb	r2, [r3, #0]
   2ff46:	2324      	movs	r3, #36	; 0x24
   2ff48:	18fb      	adds	r3, r7, r3
   2ff4a:	2224      	movs	r2, #36	; 0x24
   2ff4c:	18ba      	adds	r2, r7, r2
   2ff4e:	8812      	ldrh	r2, [r2, #0]
   2ff50:	3a20      	subs	r2, #32
   2ff52:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2ff54:	687b      	ldr	r3, [r7, #4]
   2ff56:	699a      	ldr	r2, [r3, #24]
   2ff58:	6a3b      	ldr	r3, [r7, #32]
   2ff5a:	1c59      	adds	r1, r3, #1
   2ff5c:	6239      	str	r1, [r7, #32]
   2ff5e:	18d3      	adds	r3, r2, r3
   2ff60:	2224      	movs	r2, #36	; 0x24
   2ff62:	18ba      	adds	r2, r7, r2
   2ff64:	8812      	ldrh	r2, [r2, #0]
   2ff66:	b2d2      	uxtb	r2, r2
   2ff68:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2ff6a:	e72b      	b.n	2fdc4 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2ff6c:	46c0      	nop			; (mov r8, r8)
   2ff6e:	e00e      	b.n	2ff8e <create_name+0x396>
   2ff70:	00031331 	.word	0x00031331
   2ff74:	0003dbb0 	.word	0x0003dbb0
   2ff78:	0002e79b 	.word	0x0002e79b
   2ff7c:	7fffffff 	.word	0x7fffffff
   2ff80:	0002e721 	.word	0x0002e721
   2ff84:	0003dbf8 	.word	0x0003dbf8
   2ff88:	0003dbbc 	.word	0x0003dbbc
			if (si > di) break;			/* No extension */
   2ff8c:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2ff8e:	687b      	ldr	r3, [r7, #4]
   2ff90:	699b      	ldr	r3, [r3, #24]
   2ff92:	781b      	ldrb	r3, [r3, #0]
   2ff94:	2be5      	cmp	r3, #229	; 0xe5
   2ff96:	d103      	bne.n	2ffa0 <create_name+0x3a8>
   2ff98:	687b      	ldr	r3, [r7, #4]
   2ff9a:	699b      	ldr	r3, [r3, #24]
   2ff9c:	2205      	movs	r2, #5
   2ff9e:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2ffa0:	69fb      	ldr	r3, [r7, #28]
   2ffa2:	2b08      	cmp	r3, #8
   2ffa4:	d106      	bne.n	2ffb4 <create_name+0x3bc>
   2ffa6:	2327      	movs	r3, #39	; 0x27
   2ffa8:	18fb      	adds	r3, r7, r3
   2ffaa:	2227      	movs	r2, #39	; 0x27
   2ffac:	18ba      	adds	r2, r7, r2
   2ffae:	7812      	ldrb	r2, [r2, #0]
   2ffb0:	0092      	lsls	r2, r2, #2
   2ffb2:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2ffb4:	2327      	movs	r3, #39	; 0x27
   2ffb6:	18fb      	adds	r3, r7, r3
   2ffb8:	781b      	ldrb	r3, [r3, #0]
   2ffba:	220c      	movs	r2, #12
   2ffbc:	4013      	ands	r3, r2
   2ffbe:	2b0c      	cmp	r3, #12
   2ffc0:	d006      	beq.n	2ffd0 <create_name+0x3d8>
   2ffc2:	2327      	movs	r3, #39	; 0x27
   2ffc4:	18fb      	adds	r3, r7, r3
   2ffc6:	781b      	ldrb	r3, [r3, #0]
   2ffc8:	2203      	movs	r2, #3
   2ffca:	4013      	ands	r3, r2
   2ffcc:	2b03      	cmp	r3, #3
   2ffce:	d107      	bne.n	2ffe0 <create_name+0x3e8>
		cf |= NS_LFN;
   2ffd0:	2326      	movs	r3, #38	; 0x26
   2ffd2:	18fb      	adds	r3, r7, r3
   2ffd4:	2226      	movs	r2, #38	; 0x26
   2ffd6:	18ba      	adds	r2, r7, r2
   2ffd8:	7812      	ldrb	r2, [r2, #0]
   2ffda:	2102      	movs	r1, #2
   2ffdc:	430a      	orrs	r2, r1
   2ffde:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2ffe0:	2326      	movs	r3, #38	; 0x26
   2ffe2:	18fb      	adds	r3, r7, r3
   2ffe4:	781b      	ldrb	r3, [r3, #0]
   2ffe6:	2202      	movs	r2, #2
   2ffe8:	4013      	ands	r3, r2
   2ffea:	d11d      	bne.n	30028 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2ffec:	2327      	movs	r3, #39	; 0x27
   2ffee:	18fb      	adds	r3, r7, r3
   2fff0:	781b      	ldrb	r3, [r3, #0]
   2fff2:	2203      	movs	r2, #3
   2fff4:	4013      	ands	r3, r2
   2fff6:	2b01      	cmp	r3, #1
   2fff8:	d107      	bne.n	3000a <create_name+0x412>
   2fffa:	2326      	movs	r3, #38	; 0x26
   2fffc:	18fb      	adds	r3, r7, r3
   2fffe:	2226      	movs	r2, #38	; 0x26
   30000:	18ba      	adds	r2, r7, r2
   30002:	7812      	ldrb	r2, [r2, #0]
   30004:	2110      	movs	r1, #16
   30006:	430a      	orrs	r2, r1
   30008:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   3000a:	2327      	movs	r3, #39	; 0x27
   3000c:	18fb      	adds	r3, r7, r3
   3000e:	781b      	ldrb	r3, [r3, #0]
   30010:	220c      	movs	r2, #12
   30012:	4013      	ands	r3, r2
   30014:	2b04      	cmp	r3, #4
   30016:	d107      	bne.n	30028 <create_name+0x430>
   30018:	2326      	movs	r3, #38	; 0x26
   3001a:	18fb      	adds	r3, r7, r3
   3001c:	2226      	movs	r2, #38	; 0x26
   3001e:	18ba      	adds	r2, r7, r2
   30020:	7812      	ldrb	r2, [r2, #0]
   30022:	2108      	movs	r1, #8
   30024:	430a      	orrs	r2, r1
   30026:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   30028:	687b      	ldr	r3, [r7, #4]
   3002a:	699b      	ldr	r3, [r3, #24]
   3002c:	330b      	adds	r3, #11
   3002e:	2226      	movs	r2, #38	; 0x26
   30030:	18ba      	adds	r2, r7, r2
   30032:	7812      	ldrb	r2, [r2, #0]
   30034:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   30036:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   30038:	0018      	movs	r0, r3
   3003a:	46bd      	mov	sp, r7
   3003c:	b00b      	add	sp, #44	; 0x2c
   3003e:	bd90      	pop	{r4, r7, pc}

00030040 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   30040:	b590      	push	{r4, r7, lr}
   30042:	b085      	sub	sp, #20
   30044:	af00      	add	r7, sp, #0
   30046:	6078      	str	r0, [r7, #4]
   30048:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   3004a:	683b      	ldr	r3, [r7, #0]
   3004c:	781b      	ldrb	r3, [r3, #0]
   3004e:	2b2f      	cmp	r3, #47	; 0x2f
   30050:	d003      	beq.n	3005a <follow_path+0x1a>
   30052:	683b      	ldr	r3, [r7, #0]
   30054:	781b      	ldrb	r3, [r3, #0]
   30056:	2b5c      	cmp	r3, #92	; 0x5c
   30058:	d102      	bne.n	30060 <follow_path+0x20>
		path++;
   3005a:	683b      	ldr	r3, [r7, #0]
   3005c:	3301      	adds	r3, #1
   3005e:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   30060:	687b      	ldr	r3, [r7, #4]
   30062:	2200      	movs	r2, #0
   30064:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   30066:	683b      	ldr	r3, [r7, #0]
   30068:	781b      	ldrb	r3, [r3, #0]
   3006a:	2b1f      	cmp	r3, #31
   3006c:	d80c      	bhi.n	30088 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   3006e:	230f      	movs	r3, #15
   30070:	18fc      	adds	r4, r7, r3
   30072:	687b      	ldr	r3, [r7, #4]
   30074:	2100      	movs	r1, #0
   30076:	0018      	movs	r0, r3
   30078:	4b3c      	ldr	r3, [pc, #240]	; (3016c <follow_path+0x12c>)
   3007a:	4798      	blx	r3
   3007c:	0003      	movs	r3, r0
   3007e:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   30080:	687b      	ldr	r3, [r7, #4]
   30082:	2200      	movs	r2, #0
   30084:	615a      	str	r2, [r3, #20]
   30086:	e06a      	b.n	3015e <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   30088:	230f      	movs	r3, #15
   3008a:	18fc      	adds	r4, r7, r3
   3008c:	003a      	movs	r2, r7
   3008e:	687b      	ldr	r3, [r7, #4]
   30090:	0011      	movs	r1, r2
   30092:	0018      	movs	r0, r3
   30094:	4b36      	ldr	r3, [pc, #216]	; (30170 <follow_path+0x130>)
   30096:	4798      	blx	r3
   30098:	0003      	movs	r3, r0
   3009a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   3009c:	230f      	movs	r3, #15
   3009e:	18fb      	adds	r3, r7, r3
   300a0:	781b      	ldrb	r3, [r3, #0]
   300a2:	2b00      	cmp	r3, #0
   300a4:	d154      	bne.n	30150 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   300a6:	230f      	movs	r3, #15
   300a8:	18fc      	adds	r4, r7, r3
   300aa:	687b      	ldr	r3, [r7, #4]
   300ac:	0018      	movs	r0, r3
   300ae:	4b31      	ldr	r3, [pc, #196]	; (30174 <follow_path+0x134>)
   300b0:	4798      	blx	r3
   300b2:	0003      	movs	r3, r0
   300b4:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   300b6:	687b      	ldr	r3, [r7, #4]
   300b8:	699a      	ldr	r2, [r3, #24]
   300ba:	230e      	movs	r3, #14
   300bc:	18fb      	adds	r3, r7, r3
   300be:	7ad2      	ldrb	r2, [r2, #11]
   300c0:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   300c2:	230f      	movs	r3, #15
   300c4:	18fb      	adds	r3, r7, r3
   300c6:	781b      	ldrb	r3, [r3, #0]
   300c8:	2b00      	cmp	r3, #0
   300ca:	d00f      	beq.n	300ec <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   300cc:	230f      	movs	r3, #15
   300ce:	18fb      	adds	r3, r7, r3
   300d0:	781b      	ldrb	r3, [r3, #0]
   300d2:	2b04      	cmp	r3, #4
   300d4:	d13e      	bne.n	30154 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   300d6:	230e      	movs	r3, #14
   300d8:	18fb      	adds	r3, r7, r3
   300da:	781b      	ldrb	r3, [r3, #0]
   300dc:	2204      	movs	r2, #4
   300de:	4013      	ands	r3, r2
   300e0:	d13a      	bne.n	30158 <follow_path+0x118>
   300e2:	230f      	movs	r3, #15
   300e4:	18fb      	adds	r3, r7, r3
   300e6:	2205      	movs	r2, #5
   300e8:	701a      	strb	r2, [r3, #0]
				}
				break;
   300ea:	e035      	b.n	30158 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   300ec:	230e      	movs	r3, #14
   300ee:	18fb      	adds	r3, r7, r3
   300f0:	781b      	ldrb	r3, [r3, #0]
   300f2:	2204      	movs	r2, #4
   300f4:	4013      	ands	r3, r2
   300f6:	d131      	bne.n	3015c <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   300f8:	687b      	ldr	r3, [r7, #4]
   300fa:	695b      	ldr	r3, [r3, #20]
   300fc:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   300fe:	68bb      	ldr	r3, [r7, #8]
   30100:	330b      	adds	r3, #11
   30102:	781b      	ldrb	r3, [r3, #0]
   30104:	001a      	movs	r2, r3
   30106:	2310      	movs	r3, #16
   30108:	4013      	ands	r3, r2
   3010a:	d104      	bne.n	30116 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   3010c:	230f      	movs	r3, #15
   3010e:	18fb      	adds	r3, r7, r3
   30110:	2205      	movs	r2, #5
   30112:	701a      	strb	r2, [r3, #0]
   30114:	e023      	b.n	3015e <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   30116:	68bb      	ldr	r3, [r7, #8]
   30118:	3315      	adds	r3, #21
   3011a:	781b      	ldrb	r3, [r3, #0]
   3011c:	021b      	lsls	r3, r3, #8
   3011e:	b21a      	sxth	r2, r3
   30120:	68bb      	ldr	r3, [r7, #8]
   30122:	3314      	adds	r3, #20
   30124:	781b      	ldrb	r3, [r3, #0]
   30126:	b21b      	sxth	r3, r3
   30128:	4313      	orrs	r3, r2
   3012a:	b21b      	sxth	r3, r3
   3012c:	b29b      	uxth	r3, r3
   3012e:	041b      	lsls	r3, r3, #16
   30130:	68ba      	ldr	r2, [r7, #8]
   30132:	321b      	adds	r2, #27
   30134:	7812      	ldrb	r2, [r2, #0]
   30136:	0212      	lsls	r2, r2, #8
   30138:	b211      	sxth	r1, r2
   3013a:	68ba      	ldr	r2, [r7, #8]
   3013c:	321a      	adds	r2, #26
   3013e:	7812      	ldrb	r2, [r2, #0]
   30140:	b212      	sxth	r2, r2
   30142:	430a      	orrs	r2, r1
   30144:	b212      	sxth	r2, r2
   30146:	b292      	uxth	r2, r2
   30148:	431a      	orrs	r2, r3
   3014a:	687b      	ldr	r3, [r7, #4]
   3014c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   3014e:	e79b      	b.n	30088 <follow_path+0x48>
			if (res != FR_OK) break;
   30150:	46c0      	nop			; (mov r8, r8)
   30152:	e004      	b.n	3015e <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   30154:	46c0      	nop			; (mov r8, r8)
   30156:	e002      	b.n	3015e <follow_path+0x11e>
				break;
   30158:	46c0      	nop			; (mov r8, r8)
   3015a:	e000      	b.n	3015e <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   3015c:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   3015e:	230f      	movs	r3, #15
   30160:	18fb      	adds	r3, r7, r3
   30162:	781b      	ldrb	r3, [r3, #0]
}
   30164:	0018      	movs	r0, r3
   30166:	46bd      	mov	sp, r7
   30168:	b005      	add	sp, #20
   3016a:	bd90      	pop	{r4, r7, pc}
   3016c:	0002f011 	.word	0x0002f011
   30170:	0002fbf9 	.word	0x0002fbf9
   30174:	0002f695 	.word	0x0002f695

00030178 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   30178:	b590      	push	{r4, r7, lr}
   3017a:	b083      	sub	sp, #12
   3017c:	af00      	add	r7, sp, #0
   3017e:	6078      	str	r0, [r7, #4]
   30180:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   30182:	687b      	ldr	r3, [r7, #4]
   30184:	7858      	ldrb	r0, [r3, #1]
   30186:	687b      	ldr	r3, [r7, #4]
   30188:	3330      	adds	r3, #48	; 0x30
   3018a:	0019      	movs	r1, r3
   3018c:	683a      	ldr	r2, [r7, #0]
   3018e:	2301      	movs	r3, #1
   30190:	4c2a      	ldr	r4, [pc, #168]	; (3023c <check_fs+0xc4>)
   30192:	47a0      	blx	r4
   30194:	1e03      	subs	r3, r0, #0
   30196:	d001      	beq.n	3019c <check_fs+0x24>
		return 3;
   30198:	2303      	movs	r3, #3
   3019a:	e04b      	b.n	30234 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   3019c:	687b      	ldr	r3, [r7, #4]
   3019e:	4a28      	ldr	r2, [pc, #160]	; (30240 <check_fs+0xc8>)
   301a0:	4694      	mov	ip, r2
   301a2:	4463      	add	r3, ip
   301a4:	3301      	adds	r3, #1
   301a6:	781b      	ldrb	r3, [r3, #0]
   301a8:	021b      	lsls	r3, r3, #8
   301aa:	b21a      	sxth	r2, r3
   301ac:	687b      	ldr	r3, [r7, #4]
   301ae:	4924      	ldr	r1, [pc, #144]	; (30240 <check_fs+0xc8>)
   301b0:	5c5b      	ldrb	r3, [r3, r1]
   301b2:	b21b      	sxth	r3, r3
   301b4:	4313      	orrs	r3, r2
   301b6:	b21b      	sxth	r3, r3
   301b8:	4a22      	ldr	r2, [pc, #136]	; (30244 <check_fs+0xcc>)
   301ba:	4293      	cmp	r3, r2
   301bc:	d001      	beq.n	301c2 <check_fs+0x4a>
		return 2;
   301be:	2302      	movs	r3, #2
   301c0:	e038      	b.n	30234 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   301c2:	687b      	ldr	r3, [r7, #4]
   301c4:	3366      	adds	r3, #102	; 0x66
   301c6:	3303      	adds	r3, #3
   301c8:	781b      	ldrb	r3, [r3, #0]
   301ca:	061a      	lsls	r2, r3, #24
   301cc:	687b      	ldr	r3, [r7, #4]
   301ce:	3366      	adds	r3, #102	; 0x66
   301d0:	3302      	adds	r3, #2
   301d2:	781b      	ldrb	r3, [r3, #0]
   301d4:	041b      	lsls	r3, r3, #16
   301d6:	4313      	orrs	r3, r2
   301d8:	687a      	ldr	r2, [r7, #4]
   301da:	3266      	adds	r2, #102	; 0x66
   301dc:	3201      	adds	r2, #1
   301de:	7812      	ldrb	r2, [r2, #0]
   301e0:	0212      	lsls	r2, r2, #8
   301e2:	4313      	orrs	r3, r2
   301e4:	687a      	ldr	r2, [r7, #4]
   301e6:	2166      	movs	r1, #102	; 0x66
   301e8:	5c52      	ldrb	r2, [r2, r1]
   301ea:	4313      	orrs	r3, r2
   301ec:	021b      	lsls	r3, r3, #8
   301ee:	0a1b      	lsrs	r3, r3, #8
   301f0:	4a15      	ldr	r2, [pc, #84]	; (30248 <check_fs+0xd0>)
   301f2:	4293      	cmp	r3, r2
   301f4:	d101      	bne.n	301fa <check_fs+0x82>
		return 0;
   301f6:	2300      	movs	r3, #0
   301f8:	e01c      	b.n	30234 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   301fa:	687b      	ldr	r3, [r7, #4]
   301fc:	3382      	adds	r3, #130	; 0x82
   301fe:	3303      	adds	r3, #3
   30200:	781b      	ldrb	r3, [r3, #0]
   30202:	061a      	lsls	r2, r3, #24
   30204:	687b      	ldr	r3, [r7, #4]
   30206:	3382      	adds	r3, #130	; 0x82
   30208:	3302      	adds	r3, #2
   3020a:	781b      	ldrb	r3, [r3, #0]
   3020c:	041b      	lsls	r3, r3, #16
   3020e:	4313      	orrs	r3, r2
   30210:	687a      	ldr	r2, [r7, #4]
   30212:	3282      	adds	r2, #130	; 0x82
   30214:	3201      	adds	r2, #1
   30216:	7812      	ldrb	r2, [r2, #0]
   30218:	0212      	lsls	r2, r2, #8
   3021a:	4313      	orrs	r3, r2
   3021c:	687a      	ldr	r2, [r7, #4]
   3021e:	2182      	movs	r1, #130	; 0x82
   30220:	5c52      	ldrb	r2, [r2, r1]
   30222:	4313      	orrs	r3, r2
   30224:	021b      	lsls	r3, r3, #8
   30226:	0a1b      	lsrs	r3, r3, #8
   30228:	4a07      	ldr	r2, [pc, #28]	; (30248 <check_fs+0xd0>)
   3022a:	4293      	cmp	r3, r2
   3022c:	d101      	bne.n	30232 <check_fs+0xba>
		return 0;
   3022e:	2300      	movs	r3, #0
   30230:	e000      	b.n	30234 <check_fs+0xbc>

	return 1;
   30232:	2301      	movs	r3, #1
}
   30234:	0018      	movs	r0, r3
   30236:	46bd      	mov	sp, r7
   30238:	b003      	add	sp, #12
   3023a:	bd90      	pop	{r4, r7, pc}
   3023c:	0002e3e1 	.word	0x0002e3e1
   30240:	0000022e 	.word	0x0000022e
   30244:	ffffaa55 	.word	0xffffaa55
   30248:	00544146 	.word	0x00544146

0003024c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   3024c:	b590      	push	{r4, r7, lr}
   3024e:	b093      	sub	sp, #76	; 0x4c
   30250:	af00      	add	r7, sp, #0
   30252:	60f8      	str	r0, [r7, #12]
   30254:	60b9      	str	r1, [r7, #8]
   30256:	1dfb      	adds	r3, r7, #7
   30258:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   3025a:	68fb      	ldr	r3, [r7, #12]
   3025c:	681b      	ldr	r3, [r3, #0]
   3025e:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   30260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30262:	781b      	ldrb	r3, [r3, #0]
   30264:	3b30      	subs	r3, #48	; 0x30
   30266:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   30268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3026a:	2b09      	cmp	r3, #9
   3026c:	d80b      	bhi.n	30286 <chk_mounted+0x3a>
   3026e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   30270:	3301      	adds	r3, #1
   30272:	781b      	ldrb	r3, [r3, #0]
   30274:	2b3a      	cmp	r3, #58	; 0x3a
   30276:	d106      	bne.n	30286 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   30278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   3027a:	3302      	adds	r3, #2
   3027c:	62fb      	str	r3, [r7, #44]	; 0x2c
   3027e:	68fb      	ldr	r3, [r7, #12]
   30280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   30282:	601a      	str	r2, [r3, #0]
   30284:	e001      	b.n	3028a <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   30286:	2300      	movs	r3, #0
   30288:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   3028a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   3028c:	2b07      	cmp	r3, #7
   3028e:	d901      	bls.n	30294 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   30290:	230b      	movs	r3, #11
   30292:	e2af      	b.n	307f4 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   30294:	4bc5      	ldr	r3, [pc, #788]	; (305ac <chk_mounted+0x360>)
   30296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30298:	0092      	lsls	r2, r2, #2
   3029a:	58d3      	ldr	r3, [r2, r3]
   3029c:	62bb      	str	r3, [r7, #40]	; 0x28
   3029e:	68bb      	ldr	r3, [r7, #8]
   302a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   302a2:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   302a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   302a6:	2b00      	cmp	r3, #0
   302a8:	d101      	bne.n	302ae <chk_mounted+0x62>
   302aa:	230c      	movs	r3, #12
   302ac:	e2a2      	b.n	307f4 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   302ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   302b0:	781b      	ldrb	r3, [r3, #0]
   302b2:	2b00      	cmp	r3, #0
   302b4:	d01c      	beq.n	302f0 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   302b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   302b8:	785b      	ldrb	r3, [r3, #1]
   302ba:	2227      	movs	r2, #39	; 0x27
   302bc:	18bc      	adds	r4, r7, r2
   302be:	0018      	movs	r0, r3
   302c0:	4bbb      	ldr	r3, [pc, #748]	; (305b0 <chk_mounted+0x364>)
   302c2:	4798      	blx	r3
   302c4:	0003      	movs	r3, r0
   302c6:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   302c8:	2327      	movs	r3, #39	; 0x27
   302ca:	18fb      	adds	r3, r7, r3
   302cc:	781b      	ldrb	r3, [r3, #0]
   302ce:	2201      	movs	r2, #1
   302d0:	4013      	ands	r3, r2
   302d2:	d10d      	bne.n	302f0 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   302d4:	1dfb      	adds	r3, r7, #7
   302d6:	781b      	ldrb	r3, [r3, #0]
   302d8:	2b00      	cmp	r3, #0
   302da:	d007      	beq.n	302ec <chk_mounted+0xa0>
   302dc:	2327      	movs	r3, #39	; 0x27
   302de:	18fb      	adds	r3, r7, r3
   302e0:	781b      	ldrb	r3, [r3, #0]
   302e2:	2204      	movs	r2, #4
   302e4:	4013      	ands	r3, r2
   302e6:	d001      	beq.n	302ec <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   302e8:	230a      	movs	r3, #10
   302ea:	e283      	b.n	307f4 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   302ec:	2300      	movs	r3, #0
   302ee:	e281      	b.n	307f4 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   302f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   302f2:	2200      	movs	r2, #0
   302f4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   302f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   302f8:	b2da      	uxtb	r2, r3
   302fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   302fc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   302fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30300:	785b      	ldrb	r3, [r3, #1]
   30302:	2227      	movs	r2, #39	; 0x27
   30304:	18bc      	adds	r4, r7, r2
   30306:	0018      	movs	r0, r3
   30308:	4baa      	ldr	r3, [pc, #680]	; (305b4 <chk_mounted+0x368>)
   3030a:	4798      	blx	r3
   3030c:	0003      	movs	r3, r0
   3030e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   30310:	2327      	movs	r3, #39	; 0x27
   30312:	18fb      	adds	r3, r7, r3
   30314:	781b      	ldrb	r3, [r3, #0]
   30316:	2201      	movs	r2, #1
   30318:	4013      	ands	r3, r2
   3031a:	d001      	beq.n	30320 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   3031c:	2303      	movs	r3, #3
   3031e:	e269      	b.n	307f4 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   30320:	1dfb      	adds	r3, r7, #7
   30322:	781b      	ldrb	r3, [r3, #0]
   30324:	2b00      	cmp	r3, #0
   30326:	d007      	beq.n	30338 <chk_mounted+0xec>
   30328:	2327      	movs	r3, #39	; 0x27
   3032a:	18fb      	adds	r3, r7, r3
   3032c:	781b      	ldrb	r3, [r3, #0]
   3032e:	2204      	movs	r2, #4
   30330:	4013      	ands	r3, r2
   30332:	d001      	beq.n	30338 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   30334:	230a      	movs	r3, #10
   30336:	e25d      	b.n	307f4 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   30338:	2300      	movs	r3, #0
   3033a:	63fb      	str	r3, [r7, #60]	; 0x3c
   3033c:	2347      	movs	r3, #71	; 0x47
   3033e:	18fc      	adds	r4, r7, r3
   30340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30342:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30344:	0011      	movs	r1, r2
   30346:	0018      	movs	r0, r3
   30348:	4b9b      	ldr	r3, [pc, #620]	; (305b8 <chk_mounted+0x36c>)
   3034a:	4798      	blx	r3
   3034c:	0003      	movs	r3, r0
   3034e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   30350:	2347      	movs	r3, #71	; 0x47
   30352:	18fb      	adds	r3, r7, r3
   30354:	781b      	ldrb	r3, [r3, #0]
   30356:	2b01      	cmp	r3, #1
   30358:	d13b      	bne.n	303d2 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   3035a:	2346      	movs	r3, #70	; 0x46
   3035c:	18fb      	adds	r3, r7, r3
   3035e:	2200      	movs	r2, #0
   30360:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   30362:	2346      	movs	r3, #70	; 0x46
   30364:	18fb      	adds	r3, r7, r3
   30366:	781b      	ldrb	r3, [r3, #0]
   30368:	2b00      	cmp	r3, #0
   3036a:	d006      	beq.n	3037a <chk_mounted+0x12e>
   3036c:	2346      	movs	r3, #70	; 0x46
   3036e:	18fb      	adds	r3, r7, r3
   30370:	781a      	ldrb	r2, [r3, #0]
   30372:	2346      	movs	r3, #70	; 0x46
   30374:	18fb      	adds	r3, r7, r3
   30376:	3a01      	subs	r2, #1
   30378:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   3037a:	2346      	movs	r3, #70	; 0x46
   3037c:	18fb      	adds	r3, r7, r3
   3037e:	781b      	ldrb	r3, [r3, #0]
   30380:	011b      	lsls	r3, r3, #4
   30382:	33bf      	adds	r3, #191	; 0xbf
   30384:	33ff      	adds	r3, #255	; 0xff
   30386:	3330      	adds	r3, #48	; 0x30
   30388:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3038a:	18d3      	adds	r3, r2, r3
   3038c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   3038e:	6a3b      	ldr	r3, [r7, #32]
   30390:	3304      	adds	r3, #4
   30392:	781b      	ldrb	r3, [r3, #0]
   30394:	2b00      	cmp	r3, #0
   30396:	d01c      	beq.n	303d2 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   30398:	6a3b      	ldr	r3, [r7, #32]
   3039a:	330b      	adds	r3, #11
   3039c:	781b      	ldrb	r3, [r3, #0]
   3039e:	061a      	lsls	r2, r3, #24
   303a0:	6a3b      	ldr	r3, [r7, #32]
   303a2:	330a      	adds	r3, #10
   303a4:	781b      	ldrb	r3, [r3, #0]
   303a6:	041b      	lsls	r3, r3, #16
   303a8:	4313      	orrs	r3, r2
   303aa:	6a3a      	ldr	r2, [r7, #32]
   303ac:	3209      	adds	r2, #9
   303ae:	7812      	ldrb	r2, [r2, #0]
   303b0:	0212      	lsls	r2, r2, #8
   303b2:	4313      	orrs	r3, r2
   303b4:	6a3a      	ldr	r2, [r7, #32]
   303b6:	3208      	adds	r2, #8
   303b8:	7812      	ldrb	r2, [r2, #0]
   303ba:	4313      	orrs	r3, r2
   303bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   303be:	2347      	movs	r3, #71	; 0x47
   303c0:	18fc      	adds	r4, r7, r3
   303c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   303c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   303c6:	0011      	movs	r1, r2
   303c8:	0018      	movs	r0, r3
   303ca:	4b7b      	ldr	r3, [pc, #492]	; (305b8 <chk_mounted+0x36c>)
   303cc:	4798      	blx	r3
   303ce:	0003      	movs	r3, r0
   303d0:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   303d2:	2347      	movs	r3, #71	; 0x47
   303d4:	18fb      	adds	r3, r7, r3
   303d6:	781b      	ldrb	r3, [r3, #0]
   303d8:	2b03      	cmp	r3, #3
   303da:	d101      	bne.n	303e0 <chk_mounted+0x194>
   303dc:	2301      	movs	r3, #1
   303de:	e209      	b.n	307f4 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   303e0:	2347      	movs	r3, #71	; 0x47
   303e2:	18fb      	adds	r3, r7, r3
   303e4:	781b      	ldrb	r3, [r3, #0]
   303e6:	2b00      	cmp	r3, #0
   303e8:	d001      	beq.n	303ee <chk_mounted+0x1a2>
   303ea:	230d      	movs	r3, #13
   303ec:	e202      	b.n	307f4 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   303ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   303f0:	223c      	movs	r2, #60	; 0x3c
   303f2:	5c9b      	ldrb	r3, [r3, r2]
   303f4:	021b      	lsls	r3, r3, #8
   303f6:	b21a      	sxth	r2, r3
   303f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   303fa:	213b      	movs	r1, #59	; 0x3b
   303fc:	5c5b      	ldrb	r3, [r3, r1]
   303fe:	b21b      	sxth	r3, r3
   30400:	4313      	orrs	r3, r2
   30402:	b21a      	sxth	r2, r3
   30404:	2380      	movs	r3, #128	; 0x80
   30406:	009b      	lsls	r3, r3, #2
   30408:	429a      	cmp	r2, r3
   3040a:	d001      	beq.n	30410 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   3040c:	230d      	movs	r3, #13
   3040e:	e1f1      	b.n	307f4 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   30410:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30412:	2247      	movs	r2, #71	; 0x47
   30414:	5c9b      	ldrb	r3, [r3, r2]
   30416:	021b      	lsls	r3, r3, #8
   30418:	b21a      	sxth	r2, r3
   3041a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3041c:	2146      	movs	r1, #70	; 0x46
   3041e:	5c5b      	ldrb	r3, [r3, r1]
   30420:	b21b      	sxth	r3, r3
   30422:	4313      	orrs	r3, r2
   30424:	b21b      	sxth	r3, r3
   30426:	b29b      	uxth	r3, r3
   30428:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   3042a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3042c:	2b00      	cmp	r3, #0
   3042e:	d112      	bne.n	30456 <chk_mounted+0x20a>
   30430:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30432:	2257      	movs	r2, #87	; 0x57
   30434:	5c9b      	ldrb	r3, [r3, r2]
   30436:	061a      	lsls	r2, r3, #24
   30438:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3043a:	2156      	movs	r1, #86	; 0x56
   3043c:	5c5b      	ldrb	r3, [r3, r1]
   3043e:	041b      	lsls	r3, r3, #16
   30440:	4313      	orrs	r3, r2
   30442:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30444:	2155      	movs	r1, #85	; 0x55
   30446:	5c52      	ldrb	r2, [r2, r1]
   30448:	0212      	lsls	r2, r2, #8
   3044a:	4313      	orrs	r3, r2
   3044c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3044e:	2154      	movs	r1, #84	; 0x54
   30450:	5c52      	ldrb	r2, [r2, r1]
   30452:	4313      	orrs	r3, r2
   30454:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   30456:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30458:	6bba      	ldr	r2, [r7, #56]	; 0x38
   3045a:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   3045c:	231f      	movs	r3, #31
   3045e:	18fb      	adds	r3, r7, r3
   30460:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30462:	2140      	movs	r1, #64	; 0x40
   30464:	5c52      	ldrb	r2, [r2, r1]
   30466:	701a      	strb	r2, [r3, #0]
   30468:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3046a:	221f      	movs	r2, #31
   3046c:	18ba      	adds	r2, r7, r2
   3046e:	7812      	ldrb	r2, [r2, #0]
   30470:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   30472:	231f      	movs	r3, #31
   30474:	18fb      	adds	r3, r7, r3
   30476:	781b      	ldrb	r3, [r3, #0]
   30478:	2b01      	cmp	r3, #1
   3047a:	d006      	beq.n	3048a <chk_mounted+0x23e>
   3047c:	231f      	movs	r3, #31
   3047e:	18fb      	adds	r3, r7, r3
   30480:	781b      	ldrb	r3, [r3, #0]
   30482:	2b02      	cmp	r3, #2
   30484:	d001      	beq.n	3048a <chk_mounted+0x23e>
   30486:	230d      	movs	r3, #13
   30488:	e1b4      	b.n	307f4 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   3048a:	231f      	movs	r3, #31
   3048c:	18fb      	adds	r3, r7, r3
   3048e:	781a      	ldrb	r2, [r3, #0]
   30490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30492:	4353      	muls	r3, r2
   30494:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   30496:	231f      	movs	r3, #31
   30498:	18fb      	adds	r3, r7, r3
   3049a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3049c:	213d      	movs	r1, #61	; 0x3d
   3049e:	5c52      	ldrb	r2, [r2, r1]
   304a0:	701a      	strb	r2, [r3, #0]
   304a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   304a4:	221f      	movs	r2, #31
   304a6:	18ba      	adds	r2, r7, r2
   304a8:	7812      	ldrb	r2, [r2, #0]
   304aa:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   304ac:	231f      	movs	r3, #31
   304ae:	18fb      	adds	r3, r7, r3
   304b0:	781b      	ldrb	r3, [r3, #0]
   304b2:	2b00      	cmp	r3, #0
   304b4:	d008      	beq.n	304c8 <chk_mounted+0x27c>
   304b6:	231f      	movs	r3, #31
   304b8:	18fb      	adds	r3, r7, r3
   304ba:	781b      	ldrb	r3, [r3, #0]
   304bc:	221f      	movs	r2, #31
   304be:	18ba      	adds	r2, r7, r2
   304c0:	7812      	ldrb	r2, [r2, #0]
   304c2:	3a01      	subs	r2, #1
   304c4:	4013      	ands	r3, r2
   304c6:	d001      	beq.n	304cc <chk_mounted+0x280>
   304c8:	230d      	movs	r3, #13
   304ca:	e193      	b.n	307f4 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   304cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   304ce:	2242      	movs	r2, #66	; 0x42
   304d0:	5c9b      	ldrb	r3, [r3, r2]
   304d2:	021b      	lsls	r3, r3, #8
   304d4:	b21a      	sxth	r2, r3
   304d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   304d8:	2141      	movs	r1, #65	; 0x41
   304da:	5c5b      	ldrb	r3, [r3, r1]
   304dc:	b21b      	sxth	r3, r3
   304de:	4313      	orrs	r3, r2
   304e0:	b21b      	sxth	r3, r3
   304e2:	b29a      	uxth	r2, r3
   304e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   304e6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   304e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   304ea:	891b      	ldrh	r3, [r3, #8]
   304ec:	220f      	movs	r2, #15
   304ee:	4013      	ands	r3, r2
   304f0:	b29b      	uxth	r3, r3
   304f2:	2b00      	cmp	r3, #0
   304f4:	d001      	beq.n	304fa <chk_mounted+0x2ae>
   304f6:	230d      	movs	r3, #13
   304f8:	e17c      	b.n	307f4 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   304fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   304fc:	2244      	movs	r2, #68	; 0x44
   304fe:	5c9b      	ldrb	r3, [r3, r2]
   30500:	021b      	lsls	r3, r3, #8
   30502:	b21a      	sxth	r2, r3
   30504:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30506:	2143      	movs	r1, #67	; 0x43
   30508:	5c5b      	ldrb	r3, [r3, r1]
   3050a:	b21b      	sxth	r3, r3
   3050c:	4313      	orrs	r3, r2
   3050e:	b21b      	sxth	r3, r3
   30510:	b29b      	uxth	r3, r3
   30512:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   30514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30516:	2b00      	cmp	r3, #0
   30518:	d112      	bne.n	30540 <chk_mounted+0x2f4>
   3051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3051c:	2253      	movs	r2, #83	; 0x53
   3051e:	5c9b      	ldrb	r3, [r3, r2]
   30520:	061a      	lsls	r2, r3, #24
   30522:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30524:	2152      	movs	r1, #82	; 0x52
   30526:	5c5b      	ldrb	r3, [r3, r1]
   30528:	041b      	lsls	r3, r3, #16
   3052a:	4313      	orrs	r3, r2
   3052c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3052e:	2151      	movs	r1, #81	; 0x51
   30530:	5c52      	ldrb	r2, [r2, r1]
   30532:	0212      	lsls	r2, r2, #8
   30534:	4313      	orrs	r3, r2
   30536:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30538:	2150      	movs	r1, #80	; 0x50
   3053a:	5c52      	ldrb	r2, [r2, r1]
   3053c:	4313      	orrs	r3, r2
   3053e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   30540:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30542:	223f      	movs	r2, #63	; 0x3f
   30544:	5c9b      	ldrb	r3, [r3, r2]
   30546:	021b      	lsls	r3, r3, #8
   30548:	b21a      	sxth	r2, r3
   3054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3054c:	213e      	movs	r1, #62	; 0x3e
   3054e:	5c5b      	ldrb	r3, [r3, r1]
   30550:	b21b      	sxth	r3, r3
   30552:	4313      	orrs	r3, r2
   30554:	b21a      	sxth	r2, r3
   30556:	231c      	movs	r3, #28
   30558:	18fb      	adds	r3, r7, r3
   3055a:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   3055c:	231c      	movs	r3, #28
   3055e:	18fb      	adds	r3, r7, r3
   30560:	881b      	ldrh	r3, [r3, #0]
   30562:	2b00      	cmp	r3, #0
   30564:	d101      	bne.n	3056a <chk_mounted+0x31e>
   30566:	230d      	movs	r3, #13
   30568:	e144      	b.n	307f4 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   3056a:	231c      	movs	r3, #28
   3056c:	18fb      	adds	r3, r7, r3
   3056e:	881a      	ldrh	r2, [r3, #0]
   30570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30572:	18d3      	adds	r3, r2, r3
   30574:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30576:	8912      	ldrh	r2, [r2, #8]
   30578:	0912      	lsrs	r2, r2, #4
   3057a:	b292      	uxth	r2, r2
   3057c:	189b      	adds	r3, r3, r2
   3057e:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   30580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   30582:	69bb      	ldr	r3, [r7, #24]
   30584:	429a      	cmp	r2, r3
   30586:	d201      	bcs.n	3058c <chk_mounted+0x340>
   30588:	230d      	movs	r3, #13
   3058a:	e133      	b.n	307f4 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   3058c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   3058e:	69bb      	ldr	r3, [r7, #24]
   30590:	1ad2      	subs	r2, r2, r3
   30592:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30594:	789b      	ldrb	r3, [r3, #2]
   30596:	0019      	movs	r1, r3
   30598:	4b08      	ldr	r3, [pc, #32]	; (305bc <chk_mounted+0x370>)
   3059a:	0010      	movs	r0, r2
   3059c:	4798      	blx	r3
   3059e:	0003      	movs	r3, r0
   305a0:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   305a2:	697b      	ldr	r3, [r7, #20]
   305a4:	2b00      	cmp	r3, #0
   305a6:	d10b      	bne.n	305c0 <chk_mounted+0x374>
   305a8:	230d      	movs	r3, #13
   305aa:	e123      	b.n	307f4 <chk_mounted+0x5a8>
   305ac:	20004218 	.word	0x20004218
   305b0:	0002e3a9 	.word	0x0002e3a9
   305b4:	0002e325 	.word	0x0002e325
   305b8:	00030179 	.word	0x00030179
   305bc:	000359f1 	.word	0x000359f1
	fmt = FS_FAT12;
   305c0:	2347      	movs	r3, #71	; 0x47
   305c2:	18fb      	adds	r3, r7, r3
   305c4:	2201      	movs	r2, #1
   305c6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   305c8:	697b      	ldr	r3, [r7, #20]
   305ca:	4a8c      	ldr	r2, [pc, #560]	; (307fc <chk_mounted+0x5b0>)
   305cc:	4293      	cmp	r3, r2
   305ce:	d903      	bls.n	305d8 <chk_mounted+0x38c>
   305d0:	2347      	movs	r3, #71	; 0x47
   305d2:	18fb      	adds	r3, r7, r3
   305d4:	2202      	movs	r2, #2
   305d6:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   305d8:	697b      	ldr	r3, [r7, #20]
   305da:	4a89      	ldr	r2, [pc, #548]	; (30800 <chk_mounted+0x5b4>)
   305dc:	4293      	cmp	r3, r2
   305de:	d903      	bls.n	305e8 <chk_mounted+0x39c>
   305e0:	2347      	movs	r3, #71	; 0x47
   305e2:	18fb      	adds	r3, r7, r3
   305e4:	2203      	movs	r2, #3
   305e6:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   305e8:	697b      	ldr	r3, [r7, #20]
   305ea:	1c9a      	adds	r2, r3, #2
   305ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   305ee:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   305f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   305f2:	69bb      	ldr	r3, [r7, #24]
   305f4:	18d2      	adds	r2, r2, r3
   305f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   305f8:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   305fa:	231c      	movs	r3, #28
   305fc:	18fb      	adds	r3, r7, r3
   305fe:	881a      	ldrh	r2, [r3, #0]
   30600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30602:	18d2      	adds	r2, r2, r3
   30604:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30606:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   30608:	2347      	movs	r3, #71	; 0x47
   3060a:	18fb      	adds	r3, r7, r3
   3060c:	781b      	ldrb	r3, [r3, #0]
   3060e:	2b03      	cmp	r3, #3
   30610:	d11e      	bne.n	30650 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   30612:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30614:	891b      	ldrh	r3, [r3, #8]
   30616:	2b00      	cmp	r3, #0
   30618:	d001      	beq.n	3061e <chk_mounted+0x3d2>
   3061a:	230d      	movs	r3, #13
   3061c:	e0ea      	b.n	307f4 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   3061e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30620:	225f      	movs	r2, #95	; 0x5f
   30622:	5c9b      	ldrb	r3, [r3, r2]
   30624:	061a      	lsls	r2, r3, #24
   30626:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30628:	215e      	movs	r1, #94	; 0x5e
   3062a:	5c5b      	ldrb	r3, [r3, r1]
   3062c:	041b      	lsls	r3, r3, #16
   3062e:	4313      	orrs	r3, r2
   30630:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30632:	215d      	movs	r1, #93	; 0x5d
   30634:	5c52      	ldrb	r2, [r2, r1]
   30636:	0212      	lsls	r2, r2, #8
   30638:	4313      	orrs	r3, r2
   3063a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3063c:	215c      	movs	r1, #92	; 0x5c
   3063e:	5c52      	ldrb	r2, [r2, r1]
   30640:	431a      	orrs	r2, r3
   30642:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30644:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   30646:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30648:	699b      	ldr	r3, [r3, #24]
   3064a:	009b      	lsls	r3, r3, #2
   3064c:	633b      	str	r3, [r7, #48]	; 0x30
   3064e:	e020      	b.n	30692 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   30650:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30652:	891b      	ldrh	r3, [r3, #8]
   30654:	2b00      	cmp	r3, #0
   30656:	d101      	bne.n	3065c <chk_mounted+0x410>
   30658:	230d      	movs	r3, #13
   3065a:	e0cb      	b.n	307f4 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   3065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3065e:	6a1a      	ldr	r2, [r3, #32]
   30660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30662:	18d2      	adds	r2, r2, r3
   30664:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30666:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   30668:	2347      	movs	r3, #71	; 0x47
   3066a:	18fb      	adds	r3, r7, r3
   3066c:	781b      	ldrb	r3, [r3, #0]
   3066e:	2b02      	cmp	r3, #2
   30670:	d103      	bne.n	3067a <chk_mounted+0x42e>
   30672:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30674:	699b      	ldr	r3, [r3, #24]
   30676:	005b      	lsls	r3, r3, #1
   30678:	e00a      	b.n	30690 <chk_mounted+0x444>
   3067a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3067c:	699a      	ldr	r2, [r3, #24]
   3067e:	0013      	movs	r3, r2
   30680:	005b      	lsls	r3, r3, #1
   30682:	189b      	adds	r3, r3, r2
   30684:	085a      	lsrs	r2, r3, #1
   30686:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30688:	699b      	ldr	r3, [r3, #24]
   3068a:	2101      	movs	r1, #1
   3068c:	400b      	ands	r3, r1
   3068e:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   30690:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   30692:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30694:	69da      	ldr	r2, [r3, #28]
   30696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30698:	495a      	ldr	r1, [pc, #360]	; (30804 <chk_mounted+0x5b8>)
   3069a:	468c      	mov	ip, r1
   3069c:	4463      	add	r3, ip
   3069e:	0a5b      	lsrs	r3, r3, #9
   306a0:	429a      	cmp	r2, r3
   306a2:	d201      	bcs.n	306a8 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   306a4:	230d      	movs	r3, #13
   306a6:	e0a5      	b.n	307f4 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   306a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306aa:	2201      	movs	r2, #1
   306ac:	4252      	negs	r2, r2
   306ae:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   306b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306b2:	2200      	movs	r2, #0
   306b4:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   306b6:	2347      	movs	r3, #71	; 0x47
   306b8:	18fb      	adds	r3, r7, r3
   306ba:	781b      	ldrb	r3, [r3, #0]
   306bc:	2b03      	cmp	r3, #3
   306be:	d000      	beq.n	306c2 <chk_mounted+0x476>
   306c0:	e082      	b.n	307c8 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   306c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306c4:	2200      	movs	r2, #0
   306c6:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   306c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306ca:	2261      	movs	r2, #97	; 0x61
   306cc:	5c9b      	ldrb	r3, [r3, r2]
   306ce:	021b      	lsls	r3, r3, #8
   306d0:	b21a      	sxth	r2, r3
   306d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306d4:	2160      	movs	r1, #96	; 0x60
   306d6:	5c5b      	ldrb	r3, [r3, r1]
   306d8:	b21b      	sxth	r3, r3
   306da:	4313      	orrs	r3, r2
   306dc:	b21b      	sxth	r3, r3
   306de:	b29b      	uxth	r3, r3
   306e0:	001a      	movs	r2, r3
   306e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   306e4:	18d2      	adds	r2, r2, r3
   306e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306e8:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   306ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306ec:	7858      	ldrb	r0, [r3, #1]
   306ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306f0:	3330      	adds	r3, #48	; 0x30
   306f2:	0019      	movs	r1, r3
   306f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   306f6:	695a      	ldr	r2, [r3, #20]
   306f8:	2301      	movs	r3, #1
   306fa:	4c43      	ldr	r4, [pc, #268]	; (30808 <chk_mounted+0x5bc>)
   306fc:	47a0      	blx	r4
   306fe:	1e03      	subs	r3, r0, #0
   30700:	d162      	bne.n	307c8 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   30702:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30704:	4a41      	ldr	r2, [pc, #260]	; (3080c <chk_mounted+0x5c0>)
   30706:	5c9b      	ldrb	r3, [r3, r2]
   30708:	021b      	lsls	r3, r3, #8
   3070a:	b21a      	sxth	r2, r3
   3070c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3070e:	4940      	ldr	r1, [pc, #256]	; (30810 <chk_mounted+0x5c4>)
   30710:	5c5b      	ldrb	r3, [r3, r1]
   30712:	b21b      	sxth	r3, r3
   30714:	4313      	orrs	r3, r2
   30716:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   30718:	4a3e      	ldr	r2, [pc, #248]	; (30814 <chk_mounted+0x5c8>)
   3071a:	4293      	cmp	r3, r2
   3071c:	d154      	bne.n	307c8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   3071e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30720:	2233      	movs	r2, #51	; 0x33
   30722:	5c9b      	ldrb	r3, [r3, r2]
   30724:	061a      	lsls	r2, r3, #24
   30726:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30728:	2132      	movs	r1, #50	; 0x32
   3072a:	5c5b      	ldrb	r3, [r3, r1]
   3072c:	041b      	lsls	r3, r3, #16
   3072e:	4313      	orrs	r3, r2
   30730:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30732:	2131      	movs	r1, #49	; 0x31
   30734:	5c52      	ldrb	r2, [r2, r1]
   30736:	0212      	lsls	r2, r2, #8
   30738:	4313      	orrs	r3, r2
   3073a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3073c:	2130      	movs	r1, #48	; 0x30
   3073e:	5c52      	ldrb	r2, [r2, r1]
   30740:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   30742:	4a35      	ldr	r2, [pc, #212]	; (30818 <chk_mounted+0x5cc>)
   30744:	4293      	cmp	r3, r2
   30746:	d13f      	bne.n	307c8 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   30748:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3074a:	4a34      	ldr	r2, [pc, #208]	; (3081c <chk_mounted+0x5d0>)
   3074c:	5c9b      	ldrb	r3, [r3, r2]
   3074e:	061a      	lsls	r2, r3, #24
   30750:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30752:	4933      	ldr	r1, [pc, #204]	; (30820 <chk_mounted+0x5d4>)
   30754:	5c5b      	ldrb	r3, [r3, r1]
   30756:	041b      	lsls	r3, r3, #16
   30758:	4313      	orrs	r3, r2
   3075a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   3075c:	4931      	ldr	r1, [pc, #196]	; (30824 <chk_mounted+0x5d8>)
   3075e:	5c52      	ldrb	r2, [r2, r1]
   30760:	0212      	lsls	r2, r2, #8
   30762:	4313      	orrs	r3, r2
   30764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   30766:	2285      	movs	r2, #133	; 0x85
   30768:	0092      	lsls	r2, r2, #2
   3076a:	5c8a      	ldrb	r2, [r1, r2]
   3076c:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   3076e:	4a2e      	ldr	r2, [pc, #184]	; (30828 <chk_mounted+0x5dc>)
   30770:	4293      	cmp	r3, r2
   30772:	d129      	bne.n	307c8 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   30774:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30776:	4a2d      	ldr	r2, [pc, #180]	; (3082c <chk_mounted+0x5e0>)
   30778:	5c9b      	ldrb	r3, [r3, r2]
   3077a:	061a      	lsls	r2, r3, #24
   3077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3077e:	492c      	ldr	r1, [pc, #176]	; (30830 <chk_mounted+0x5e4>)
   30780:	5c5b      	ldrb	r3, [r3, r1]
   30782:	041b      	lsls	r3, r3, #16
   30784:	4313      	orrs	r3, r2
   30786:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30788:	492a      	ldr	r1, [pc, #168]	; (30834 <chk_mounted+0x5e8>)
   3078a:	5c52      	ldrb	r2, [r2, r1]
   3078c:	0212      	lsls	r2, r2, #8
   3078e:	4313      	orrs	r3, r2
   30790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   30792:	2287      	movs	r2, #135	; 0x87
   30794:	0092      	lsls	r2, r2, #2
   30796:	5c8a      	ldrb	r2, [r1, r2]
   30798:	431a      	orrs	r2, r3
   3079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   3079c:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   3079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   307a0:	4a25      	ldr	r2, [pc, #148]	; (30838 <chk_mounted+0x5ec>)
   307a2:	5c9b      	ldrb	r3, [r3, r2]
   307a4:	061a      	lsls	r2, r3, #24
   307a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   307a8:	4924      	ldr	r1, [pc, #144]	; (3083c <chk_mounted+0x5f0>)
   307aa:	5c5b      	ldrb	r3, [r3, r1]
   307ac:	041b      	lsls	r3, r3, #16
   307ae:	4313      	orrs	r3, r2
   307b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   307b2:	4923      	ldr	r1, [pc, #140]	; (30840 <chk_mounted+0x5f4>)
   307b4:	5c52      	ldrb	r2, [r2, r1]
   307b6:	0212      	lsls	r2, r2, #8
   307b8:	4313      	orrs	r3, r2
   307ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   307bc:	2286      	movs	r2, #134	; 0x86
   307be:	0092      	lsls	r2, r2, #2
   307c0:	5c8a      	ldrb	r2, [r1, r2]
   307c2:	431a      	orrs	r2, r3
   307c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   307c6:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   307c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   307ca:	2247      	movs	r2, #71	; 0x47
   307cc:	18ba      	adds	r2, r7, r2
   307ce:	7812      	ldrb	r2, [r2, #0]
   307d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   307d2:	4b1c      	ldr	r3, [pc, #112]	; (30844 <chk_mounted+0x5f8>)
   307d4:	881b      	ldrh	r3, [r3, #0]
   307d6:	3301      	adds	r3, #1
   307d8:	b29a      	uxth	r2, r3
   307da:	4b1a      	ldr	r3, [pc, #104]	; (30844 <chk_mounted+0x5f8>)
   307dc:	801a      	strh	r2, [r3, #0]
   307de:	4b19      	ldr	r3, [pc, #100]	; (30844 <chk_mounted+0x5f8>)
   307e0:	881a      	ldrh	r2, [r3, #0]
   307e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   307e4:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   307e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   307e8:	2200      	movs	r2, #0
   307ea:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   307ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   307ee:	2200      	movs	r2, #0
   307f0:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   307f2:	2300      	movs	r3, #0
}
   307f4:	0018      	movs	r0, r3
   307f6:	46bd      	mov	sp, r7
   307f8:	b013      	add	sp, #76	; 0x4c
   307fa:	bd90      	pop	{r4, r7, pc}
   307fc:	00000ff5 	.word	0x00000ff5
   30800:	0000fff5 	.word	0x0000fff5
   30804:	000001ff 	.word	0x000001ff
   30808:	0002e3e1 	.word	0x0002e3e1
   3080c:	0000022f 	.word	0x0000022f
   30810:	0000022e 	.word	0x0000022e
   30814:	ffffaa55 	.word	0xffffaa55
   30818:	41615252 	.word	0x41615252
   3081c:	00000217 	.word	0x00000217
   30820:	00000216 	.word	0x00000216
   30824:	00000215 	.word	0x00000215
   30828:	61417272 	.word	0x61417272
   3082c:	0000021f 	.word	0x0000021f
   30830:	0000021e 	.word	0x0000021e
   30834:	0000021d 	.word	0x0000021d
   30838:	0000021b 	.word	0x0000021b
   3083c:	0000021a 	.word	0x0000021a
   30840:	00000219 	.word	0x00000219
   30844:	20004238 	.word	0x20004238

00030848 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   30848:	b580      	push	{r7, lr}
   3084a:	b082      	sub	sp, #8
   3084c:	af00      	add	r7, sp, #0
   3084e:	6078      	str	r0, [r7, #4]
   30850:	000a      	movs	r2, r1
   30852:	1cbb      	adds	r3, r7, #2
   30854:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   30856:	687b      	ldr	r3, [r7, #4]
   30858:	2b00      	cmp	r3, #0
   3085a:	d009      	beq.n	30870 <validate+0x28>
   3085c:	687b      	ldr	r3, [r7, #4]
   3085e:	781b      	ldrb	r3, [r3, #0]
   30860:	2b00      	cmp	r3, #0
   30862:	d005      	beq.n	30870 <validate+0x28>
   30864:	687b      	ldr	r3, [r7, #4]
   30866:	88db      	ldrh	r3, [r3, #6]
   30868:	1cba      	adds	r2, r7, #2
   3086a:	8812      	ldrh	r2, [r2, #0]
   3086c:	429a      	cmp	r2, r3
   3086e:	d001      	beq.n	30874 <validate+0x2c>
		return FR_INVALID_OBJECT;
   30870:	2309      	movs	r3, #9
   30872:	e00c      	b.n	3088e <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   30874:	687b      	ldr	r3, [r7, #4]
   30876:	785b      	ldrb	r3, [r3, #1]
   30878:	0018      	movs	r0, r3
   3087a:	4b07      	ldr	r3, [pc, #28]	; (30898 <validate+0x50>)
   3087c:	4798      	blx	r3
   3087e:	0003      	movs	r3, r0
   30880:	001a      	movs	r2, r3
   30882:	2301      	movs	r3, #1
   30884:	4013      	ands	r3, r2
   30886:	d001      	beq.n	3088c <validate+0x44>
		return FR_NOT_READY;
   30888:	2303      	movs	r3, #3
   3088a:	e000      	b.n	3088e <validate+0x46>

	return FR_OK;
   3088c:	2300      	movs	r3, #0
}
   3088e:	0018      	movs	r0, r3
   30890:	46bd      	mov	sp, r7
   30892:	b002      	add	sp, #8
   30894:	bd80      	pop	{r7, pc}
   30896:	46c0      	nop			; (mov r8, r8)
   30898:	0002e3a9 	.word	0x0002e3a9

0003089c <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   3089c:	b580      	push	{r7, lr}
   3089e:	b084      	sub	sp, #16
   308a0:	af00      	add	r7, sp, #0
   308a2:	0002      	movs	r2, r0
   308a4:	6039      	str	r1, [r7, #0]
   308a6:	1dfb      	adds	r3, r7, #7
   308a8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   308aa:	1dfb      	adds	r3, r7, #7
   308ac:	781b      	ldrb	r3, [r3, #0]
   308ae:	2b07      	cmp	r3, #7
   308b0:	d901      	bls.n	308b6 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   308b2:	230b      	movs	r3, #11
   308b4:	e018      	b.n	308e8 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   308b6:	1dfb      	adds	r3, r7, #7
   308b8:	781a      	ldrb	r2, [r3, #0]
   308ba:	4b0d      	ldr	r3, [pc, #52]	; (308f0 <f_mount+0x54>)
   308bc:	0092      	lsls	r2, r2, #2
   308be:	58d3      	ldr	r3, [r2, r3]
   308c0:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   308c2:	68fb      	ldr	r3, [r7, #12]
   308c4:	2b00      	cmp	r3, #0
   308c6:	d002      	beq.n	308ce <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   308c8:	68fb      	ldr	r3, [r7, #12]
   308ca:	2200      	movs	r2, #0
   308cc:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   308ce:	683b      	ldr	r3, [r7, #0]
   308d0:	2b00      	cmp	r3, #0
   308d2:	d002      	beq.n	308da <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   308d4:	683b      	ldr	r3, [r7, #0]
   308d6:	2200      	movs	r2, #0
   308d8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   308da:	1dfb      	adds	r3, r7, #7
   308dc:	781a      	ldrb	r2, [r3, #0]
   308de:	4b04      	ldr	r3, [pc, #16]	; (308f0 <f_mount+0x54>)
   308e0:	0092      	lsls	r2, r2, #2
   308e2:	6839      	ldr	r1, [r7, #0]
   308e4:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   308e6:	2300      	movs	r3, #0
}
   308e8:	0018      	movs	r0, r3
   308ea:	46bd      	mov	sp, r7
   308ec:	b004      	add	sp, #16
   308ee:	bd80      	pop	{r7, pc}
   308f0:	20004218 	.word	0x20004218

000308f4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   308f4:	b590      	push	{r4, r7, lr}
   308f6:	4ce5      	ldr	r4, [pc, #916]	; (30c8c <f_open+0x398>)
   308f8:	44a5      	add	sp, r4
   308fa:	af00      	add	r7, sp, #0
   308fc:	60f8      	str	r0, [r7, #12]
   308fe:	60b9      	str	r1, [r7, #8]
   30900:	4be3      	ldr	r3, [pc, #908]	; (30c90 <f_open+0x39c>)
   30902:	2194      	movs	r1, #148	; 0x94
   30904:	0089      	lsls	r1, r1, #2
   30906:	468c      	mov	ip, r1
   30908:	44bc      	add	ip, r7
   3090a:	4463      	add	r3, ip
   3090c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   3090e:	68fb      	ldr	r3, [r7, #12]
   30910:	2200      	movs	r2, #0
   30912:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   30914:	4bde      	ldr	r3, [pc, #888]	; (30c90 <f_open+0x39c>)
   30916:	2294      	movs	r2, #148	; 0x94
   30918:	0092      	lsls	r2, r2, #2
   3091a:	4694      	mov	ip, r2
   3091c:	44bc      	add	ip, r7
   3091e:	4463      	add	r3, ip
   30920:	4adb      	ldr	r2, [pc, #876]	; (30c90 <f_open+0x39c>)
   30922:	2194      	movs	r1, #148	; 0x94
   30924:	0089      	lsls	r1, r1, #2
   30926:	468c      	mov	ip, r1
   30928:	44bc      	add	ip, r7
   3092a:	4462      	add	r2, ip
   3092c:	7812      	ldrb	r2, [r2, #0]
   3092e:	211f      	movs	r1, #31
   30930:	400a      	ands	r2, r1
   30932:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   30934:	4bd6      	ldr	r3, [pc, #856]	; (30c90 <f_open+0x39c>)
   30936:	2294      	movs	r2, #148	; 0x94
   30938:	0092      	lsls	r2, r2, #2
   3093a:	4694      	mov	ip, r2
   3093c:	44bc      	add	ip, r7
   3093e:	4463      	add	r3, ip
   30940:	781b      	ldrb	r3, [r3, #0]
   30942:	2201      	movs	r2, #1
   30944:	4393      	bics	r3, r2
   30946:	b2da      	uxtb	r2, r3
   30948:	4bd2      	ldr	r3, [pc, #840]	; (30c94 <f_open+0x3a0>)
   3094a:	18fc      	adds	r4, r7, r3
   3094c:	2387      	movs	r3, #135	; 0x87
   3094e:	009b      	lsls	r3, r3, #2
   30950:	18f9      	adds	r1, r7, r3
   30952:	2308      	movs	r3, #8
   30954:	18fb      	adds	r3, r7, r3
   30956:	0018      	movs	r0, r3
   30958:	4bcf      	ldr	r3, [pc, #828]	; (30c98 <f_open+0x3a4>)
   3095a:	4798      	blx	r3
   3095c:	0003      	movs	r3, r0
   3095e:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   30960:	2387      	movs	r3, #135	; 0x87
   30962:	009b      	lsls	r3, r3, #2
   30964:	18fb      	adds	r3, r7, r3
   30966:	2284      	movs	r2, #132	; 0x84
   30968:	0092      	lsls	r2, r2, #2
   3096a:	18ba      	adds	r2, r7, r2
   3096c:	619a      	str	r2, [r3, #24]
   3096e:	2387      	movs	r3, #135	; 0x87
   30970:	009b      	lsls	r3, r3, #2
   30972:	18fb      	adds	r3, r7, r3
   30974:	2210      	movs	r2, #16
   30976:	18ba      	adds	r2, r7, r2
   30978:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   3097a:	4bc6      	ldr	r3, [pc, #792]	; (30c94 <f_open+0x3a0>)
   3097c:	18fb      	adds	r3, r7, r3
   3097e:	781b      	ldrb	r3, [r3, #0]
   30980:	2b00      	cmp	r3, #0
   30982:	d10b      	bne.n	3099c <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   30984:	68ba      	ldr	r2, [r7, #8]
   30986:	4bc3      	ldr	r3, [pc, #780]	; (30c94 <f_open+0x3a0>)
   30988:	18fc      	adds	r4, r7, r3
   3098a:	2387      	movs	r3, #135	; 0x87
   3098c:	009b      	lsls	r3, r3, #2
   3098e:	18fb      	adds	r3, r7, r3
   30990:	0011      	movs	r1, r2
   30992:	0018      	movs	r0, r3
   30994:	4bc1      	ldr	r3, [pc, #772]	; (30c9c <f_open+0x3a8>)
   30996:	4798      	blx	r3
   30998:	0003      	movs	r3, r0
   3099a:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   3099c:	2387      	movs	r3, #135	; 0x87
   3099e:	009b      	lsls	r3, r3, #2
   309a0:	18fb      	adds	r3, r7, r3
   309a2:	695b      	ldr	r3, [r3, #20]
   309a4:	2292      	movs	r2, #146	; 0x92
   309a6:	0092      	lsls	r2, r2, #2
   309a8:	18ba      	adds	r2, r7, r2
   309aa:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   309ac:	4bb9      	ldr	r3, [pc, #740]	; (30c94 <f_open+0x3a0>)
   309ae:	18fb      	adds	r3, r7, r3
   309b0:	781b      	ldrb	r3, [r3, #0]
   309b2:	2b00      	cmp	r3, #0
   309b4:	d109      	bne.n	309ca <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   309b6:	2392      	movs	r3, #146	; 0x92
   309b8:	009b      	lsls	r3, r3, #2
   309ba:	18fb      	adds	r3, r7, r3
   309bc:	681b      	ldr	r3, [r3, #0]
   309be:	2b00      	cmp	r3, #0
   309c0:	d103      	bne.n	309ca <f_open+0xd6>
			res = FR_INVALID_NAME;
   309c2:	4bb4      	ldr	r3, [pc, #720]	; (30c94 <f_open+0x3a0>)
   309c4:	18fb      	adds	r3, r7, r3
   309c6:	2206      	movs	r2, #6
   309c8:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   309ca:	4bb1      	ldr	r3, [pc, #708]	; (30c90 <f_open+0x39c>)
   309cc:	2294      	movs	r2, #148	; 0x94
   309ce:	0092      	lsls	r2, r2, #2
   309d0:	4694      	mov	ip, r2
   309d2:	44bc      	add	ip, r7
   309d4:	4463      	add	r3, ip
   309d6:	781b      	ldrb	r3, [r3, #0]
   309d8:	221c      	movs	r2, #28
   309da:	4013      	ands	r3, r2
   309dc:	d100      	bne.n	309e0 <f_open+0xec>
   309de:	e141      	b.n	30c64 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   309e0:	4bac      	ldr	r3, [pc, #688]	; (30c94 <f_open+0x3a0>)
   309e2:	18fb      	adds	r3, r7, r3
   309e4:	781b      	ldrb	r3, [r3, #0]
   309e6:	2b00      	cmp	r3, #0
   309e8:	d027      	beq.n	30a3a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   309ea:	4baa      	ldr	r3, [pc, #680]	; (30c94 <f_open+0x3a0>)
   309ec:	18fb      	adds	r3, r7, r3
   309ee:	781b      	ldrb	r3, [r3, #0]
   309f0:	2b04      	cmp	r3, #4
   309f2:	d109      	bne.n	30a08 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   309f4:	4ba7      	ldr	r3, [pc, #668]	; (30c94 <f_open+0x3a0>)
   309f6:	18fc      	adds	r4, r7, r3
   309f8:	2387      	movs	r3, #135	; 0x87
   309fa:	009b      	lsls	r3, r3, #2
   309fc:	18fb      	adds	r3, r7, r3
   309fe:	0018      	movs	r0, r3
   30a00:	4ba7      	ldr	r3, [pc, #668]	; (30ca0 <f_open+0x3ac>)
   30a02:	4798      	blx	r3
   30a04:	0003      	movs	r3, r0
   30a06:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   30a08:	4ba1      	ldr	r3, [pc, #644]	; (30c90 <f_open+0x39c>)
   30a0a:	2294      	movs	r2, #148	; 0x94
   30a0c:	0092      	lsls	r2, r2, #2
   30a0e:	4694      	mov	ip, r2
   30a10:	44bc      	add	ip, r7
   30a12:	4463      	add	r3, ip
   30a14:	4a9e      	ldr	r2, [pc, #632]	; (30c90 <f_open+0x39c>)
   30a16:	2194      	movs	r1, #148	; 0x94
   30a18:	0089      	lsls	r1, r1, #2
   30a1a:	468c      	mov	ip, r1
   30a1c:	44bc      	add	ip, r7
   30a1e:	4462      	add	r2, ip
   30a20:	7812      	ldrb	r2, [r2, #0]
   30a22:	2108      	movs	r1, #8
   30a24:	430a      	orrs	r2, r1
   30a26:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   30a28:	2387      	movs	r3, #135	; 0x87
   30a2a:	009b      	lsls	r3, r3, #2
   30a2c:	18fb      	adds	r3, r7, r3
   30a2e:	695b      	ldr	r3, [r3, #20]
   30a30:	2292      	movs	r2, #146	; 0x92
   30a32:	0092      	lsls	r2, r2, #2
   30a34:	18ba      	adds	r2, r7, r2
   30a36:	6013      	str	r3, [r2, #0]
   30a38:	e01c      	b.n	30a74 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   30a3a:	2392      	movs	r3, #146	; 0x92
   30a3c:	009b      	lsls	r3, r3, #2
   30a3e:	18fb      	adds	r3, r7, r3
   30a40:	681b      	ldr	r3, [r3, #0]
   30a42:	330b      	adds	r3, #11
   30a44:	781b      	ldrb	r3, [r3, #0]
   30a46:	001a      	movs	r2, r3
   30a48:	2311      	movs	r3, #17
   30a4a:	4013      	ands	r3, r2
   30a4c:	d004      	beq.n	30a58 <f_open+0x164>
				res = FR_DENIED;
   30a4e:	4b91      	ldr	r3, [pc, #580]	; (30c94 <f_open+0x3a0>)
   30a50:	18fb      	adds	r3, r7, r3
   30a52:	2207      	movs	r2, #7
   30a54:	701a      	strb	r2, [r3, #0]
   30a56:	e00d      	b.n	30a74 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   30a58:	4b8d      	ldr	r3, [pc, #564]	; (30c90 <f_open+0x39c>)
   30a5a:	2294      	movs	r2, #148	; 0x94
   30a5c:	0092      	lsls	r2, r2, #2
   30a5e:	4694      	mov	ip, r2
   30a60:	44bc      	add	ip, r7
   30a62:	4463      	add	r3, ip
   30a64:	781b      	ldrb	r3, [r3, #0]
   30a66:	2204      	movs	r2, #4
   30a68:	4013      	ands	r3, r2
   30a6a:	d003      	beq.n	30a74 <f_open+0x180>
					res = FR_EXIST;
   30a6c:	4b89      	ldr	r3, [pc, #548]	; (30c94 <f_open+0x3a0>)
   30a6e:	18fb      	adds	r3, r7, r3
   30a70:	2208      	movs	r2, #8
   30a72:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   30a74:	4b87      	ldr	r3, [pc, #540]	; (30c94 <f_open+0x3a0>)
   30a76:	18fb      	adds	r3, r7, r3
   30a78:	781b      	ldrb	r3, [r3, #0]
   30a7a:	2b00      	cmp	r3, #0
   30a7c:	d000      	beq.n	30a80 <f_open+0x18c>
   30a7e:	e12f      	b.n	30ce0 <f_open+0x3ec>
   30a80:	4b83      	ldr	r3, [pc, #524]	; (30c90 <f_open+0x39c>)
   30a82:	2294      	movs	r2, #148	; 0x94
   30a84:	0092      	lsls	r2, r2, #2
   30a86:	4694      	mov	ip, r2
   30a88:	44bc      	add	ip, r7
   30a8a:	4463      	add	r3, ip
   30a8c:	781b      	ldrb	r3, [r3, #0]
   30a8e:	2208      	movs	r2, #8
   30a90:	4013      	ands	r3, r2
   30a92:	d100      	bne.n	30a96 <f_open+0x1a2>
   30a94:	e124      	b.n	30ce0 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   30a96:	4b83      	ldr	r3, [pc, #524]	; (30ca4 <f_open+0x3b0>)
   30a98:	4798      	blx	r3
   30a9a:	0003      	movs	r3, r0
   30a9c:	2291      	movs	r2, #145	; 0x91
   30a9e:	0092      	lsls	r2, r2, #2
   30aa0:	18ba      	adds	r2, r7, r2
   30aa2:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   30aa4:	2392      	movs	r3, #146	; 0x92
   30aa6:	009b      	lsls	r3, r3, #2
   30aa8:	18fb      	adds	r3, r7, r3
   30aaa:	681b      	ldr	r3, [r3, #0]
   30aac:	330e      	adds	r3, #14
   30aae:	2291      	movs	r2, #145	; 0x91
   30ab0:	0092      	lsls	r2, r2, #2
   30ab2:	18ba      	adds	r2, r7, r2
   30ab4:	6812      	ldr	r2, [r2, #0]
   30ab6:	b2d2      	uxtb	r2, r2
   30ab8:	701a      	strb	r2, [r3, #0]
   30aba:	2392      	movs	r3, #146	; 0x92
   30abc:	009b      	lsls	r3, r3, #2
   30abe:	18fb      	adds	r3, r7, r3
   30ac0:	681b      	ldr	r3, [r3, #0]
   30ac2:	330f      	adds	r3, #15
   30ac4:	2291      	movs	r2, #145	; 0x91
   30ac6:	0092      	lsls	r2, r2, #2
   30ac8:	18ba      	adds	r2, r7, r2
   30aca:	6812      	ldr	r2, [r2, #0]
   30acc:	b292      	uxth	r2, r2
   30ace:	0a12      	lsrs	r2, r2, #8
   30ad0:	b292      	uxth	r2, r2
   30ad2:	b2d2      	uxtb	r2, r2
   30ad4:	701a      	strb	r2, [r3, #0]
   30ad6:	2392      	movs	r3, #146	; 0x92
   30ad8:	009b      	lsls	r3, r3, #2
   30ada:	18fb      	adds	r3, r7, r3
   30adc:	681b      	ldr	r3, [r3, #0]
   30ade:	3310      	adds	r3, #16
   30ae0:	2291      	movs	r2, #145	; 0x91
   30ae2:	0092      	lsls	r2, r2, #2
   30ae4:	18ba      	adds	r2, r7, r2
   30ae6:	6812      	ldr	r2, [r2, #0]
   30ae8:	0c12      	lsrs	r2, r2, #16
   30aea:	b2d2      	uxtb	r2, r2
   30aec:	701a      	strb	r2, [r3, #0]
   30aee:	2392      	movs	r3, #146	; 0x92
   30af0:	009b      	lsls	r3, r3, #2
   30af2:	18fb      	adds	r3, r7, r3
   30af4:	681b      	ldr	r3, [r3, #0]
   30af6:	3311      	adds	r3, #17
   30af8:	2291      	movs	r2, #145	; 0x91
   30afa:	0092      	lsls	r2, r2, #2
   30afc:	18ba      	adds	r2, r7, r2
   30afe:	6812      	ldr	r2, [r2, #0]
   30b00:	0e12      	lsrs	r2, r2, #24
   30b02:	b2d2      	uxtb	r2, r2
   30b04:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   30b06:	2392      	movs	r3, #146	; 0x92
   30b08:	009b      	lsls	r3, r3, #2
   30b0a:	18fb      	adds	r3, r7, r3
   30b0c:	681b      	ldr	r3, [r3, #0]
   30b0e:	330b      	adds	r3, #11
   30b10:	2200      	movs	r2, #0
   30b12:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   30b14:	2392      	movs	r3, #146	; 0x92
   30b16:	009b      	lsls	r3, r3, #2
   30b18:	18fb      	adds	r3, r7, r3
   30b1a:	681b      	ldr	r3, [r3, #0]
   30b1c:	331c      	adds	r3, #28
   30b1e:	2200      	movs	r2, #0
   30b20:	701a      	strb	r2, [r3, #0]
   30b22:	2392      	movs	r3, #146	; 0x92
   30b24:	009b      	lsls	r3, r3, #2
   30b26:	18fb      	adds	r3, r7, r3
   30b28:	681b      	ldr	r3, [r3, #0]
   30b2a:	331d      	adds	r3, #29
   30b2c:	2200      	movs	r2, #0
   30b2e:	701a      	strb	r2, [r3, #0]
   30b30:	2392      	movs	r3, #146	; 0x92
   30b32:	009b      	lsls	r3, r3, #2
   30b34:	18fb      	adds	r3, r7, r3
   30b36:	681b      	ldr	r3, [r3, #0]
   30b38:	331e      	adds	r3, #30
   30b3a:	2200      	movs	r2, #0
   30b3c:	701a      	strb	r2, [r3, #0]
   30b3e:	2392      	movs	r3, #146	; 0x92
   30b40:	009b      	lsls	r3, r3, #2
   30b42:	18fb      	adds	r3, r7, r3
   30b44:	681b      	ldr	r3, [r3, #0]
   30b46:	331f      	adds	r3, #31
   30b48:	2200      	movs	r2, #0
   30b4a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   30b4c:	2392      	movs	r3, #146	; 0x92
   30b4e:	009b      	lsls	r3, r3, #2
   30b50:	18fb      	adds	r3, r7, r3
   30b52:	681b      	ldr	r3, [r3, #0]
   30b54:	3315      	adds	r3, #21
   30b56:	781b      	ldrb	r3, [r3, #0]
   30b58:	021b      	lsls	r3, r3, #8
   30b5a:	b21a      	sxth	r2, r3
   30b5c:	2392      	movs	r3, #146	; 0x92
   30b5e:	009b      	lsls	r3, r3, #2
   30b60:	18fb      	adds	r3, r7, r3
   30b62:	681b      	ldr	r3, [r3, #0]
   30b64:	3314      	adds	r3, #20
   30b66:	781b      	ldrb	r3, [r3, #0]
   30b68:	b21b      	sxth	r3, r3
   30b6a:	4313      	orrs	r3, r2
   30b6c:	b21b      	sxth	r3, r3
   30b6e:	b29b      	uxth	r3, r3
   30b70:	041b      	lsls	r3, r3, #16
   30b72:	2292      	movs	r2, #146	; 0x92
   30b74:	0092      	lsls	r2, r2, #2
   30b76:	18ba      	adds	r2, r7, r2
   30b78:	6812      	ldr	r2, [r2, #0]
   30b7a:	321b      	adds	r2, #27
   30b7c:	7812      	ldrb	r2, [r2, #0]
   30b7e:	0212      	lsls	r2, r2, #8
   30b80:	b211      	sxth	r1, r2
   30b82:	2292      	movs	r2, #146	; 0x92
   30b84:	0092      	lsls	r2, r2, #2
   30b86:	18ba      	adds	r2, r7, r2
   30b88:	6812      	ldr	r2, [r2, #0]
   30b8a:	321a      	adds	r2, #26
   30b8c:	7812      	ldrb	r2, [r2, #0]
   30b8e:	b212      	sxth	r2, r2
   30b90:	430a      	orrs	r2, r1
   30b92:	b212      	sxth	r2, r2
   30b94:	b292      	uxth	r2, r2
   30b96:	4313      	orrs	r3, r2
   30b98:	2290      	movs	r2, #144	; 0x90
   30b9a:	0092      	lsls	r2, r2, #2
   30b9c:	18ba      	adds	r2, r7, r2
   30b9e:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   30ba0:	2392      	movs	r3, #146	; 0x92
   30ba2:	009b      	lsls	r3, r3, #2
   30ba4:	18fb      	adds	r3, r7, r3
   30ba6:	681b      	ldr	r3, [r3, #0]
   30ba8:	331a      	adds	r3, #26
   30baa:	2200      	movs	r2, #0
   30bac:	701a      	strb	r2, [r3, #0]
   30bae:	2392      	movs	r3, #146	; 0x92
   30bb0:	009b      	lsls	r3, r3, #2
   30bb2:	18fb      	adds	r3, r7, r3
   30bb4:	681b      	ldr	r3, [r3, #0]
   30bb6:	331b      	adds	r3, #27
   30bb8:	2200      	movs	r2, #0
   30bba:	701a      	strb	r2, [r3, #0]
   30bbc:	2392      	movs	r3, #146	; 0x92
   30bbe:	009b      	lsls	r3, r3, #2
   30bc0:	18fb      	adds	r3, r7, r3
   30bc2:	681b      	ldr	r3, [r3, #0]
   30bc4:	3314      	adds	r3, #20
   30bc6:	2200      	movs	r2, #0
   30bc8:	701a      	strb	r2, [r3, #0]
   30bca:	2392      	movs	r3, #146	; 0x92
   30bcc:	009b      	lsls	r3, r3, #2
   30bce:	18fb      	adds	r3, r7, r3
   30bd0:	681b      	ldr	r3, [r3, #0]
   30bd2:	3315      	adds	r3, #21
   30bd4:	2200      	movs	r2, #0
   30bd6:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   30bd8:	2387      	movs	r3, #135	; 0x87
   30bda:	009b      	lsls	r3, r3, #2
   30bdc:	18fb      	adds	r3, r7, r3
   30bde:	681b      	ldr	r3, [r3, #0]
   30be0:	2201      	movs	r2, #1
   30be2:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   30be4:	2390      	movs	r3, #144	; 0x90
   30be6:	009b      	lsls	r3, r3, #2
   30be8:	18fb      	adds	r3, r7, r3
   30bea:	681b      	ldr	r3, [r3, #0]
   30bec:	2b00      	cmp	r3, #0
   30bee:	d100      	bne.n	30bf2 <f_open+0x2fe>
   30bf0:	e076      	b.n	30ce0 <f_open+0x3ec>
				dw = dj.fs->winsect;
   30bf2:	2387      	movs	r3, #135	; 0x87
   30bf4:	009b      	lsls	r3, r3, #2
   30bf6:	18fb      	adds	r3, r7, r3
   30bf8:	681b      	ldr	r3, [r3, #0]
   30bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30bfc:	2291      	movs	r2, #145	; 0x91
   30bfe:	0092      	lsls	r2, r2, #2
   30c00:	18ba      	adds	r2, r7, r2
   30c02:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   30c04:	2387      	movs	r3, #135	; 0x87
   30c06:	009b      	lsls	r3, r3, #2
   30c08:	18fb      	adds	r3, r7, r3
   30c0a:	681b      	ldr	r3, [r3, #0]
   30c0c:	4a21      	ldr	r2, [pc, #132]	; (30c94 <f_open+0x3a0>)
   30c0e:	18bc      	adds	r4, r7, r2
   30c10:	2290      	movs	r2, #144	; 0x90
   30c12:	0092      	lsls	r2, r2, #2
   30c14:	18ba      	adds	r2, r7, r2
   30c16:	6812      	ldr	r2, [r2, #0]
   30c18:	0011      	movs	r1, r2
   30c1a:	0018      	movs	r0, r3
   30c1c:	4b22      	ldr	r3, [pc, #136]	; (30ca8 <f_open+0x3b4>)
   30c1e:	4798      	blx	r3
   30c20:	0003      	movs	r3, r0
   30c22:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   30c24:	4b1b      	ldr	r3, [pc, #108]	; (30c94 <f_open+0x3a0>)
   30c26:	18fb      	adds	r3, r7, r3
   30c28:	781b      	ldrb	r3, [r3, #0]
   30c2a:	2b00      	cmp	r3, #0
   30c2c:	d158      	bne.n	30ce0 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   30c2e:	2387      	movs	r3, #135	; 0x87
   30c30:	009b      	lsls	r3, r3, #2
   30c32:	18fb      	adds	r3, r7, r3
   30c34:	681b      	ldr	r3, [r3, #0]
   30c36:	2290      	movs	r2, #144	; 0x90
   30c38:	0092      	lsls	r2, r2, #2
   30c3a:	18ba      	adds	r2, r7, r2
   30c3c:	6812      	ldr	r2, [r2, #0]
   30c3e:	3a01      	subs	r2, #1
   30c40:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   30c42:	2387      	movs	r3, #135	; 0x87
   30c44:	009b      	lsls	r3, r3, #2
   30c46:	18fb      	adds	r3, r7, r3
   30c48:	681b      	ldr	r3, [r3, #0]
   30c4a:	4a12      	ldr	r2, [pc, #72]	; (30c94 <f_open+0x3a0>)
   30c4c:	18bc      	adds	r4, r7, r2
   30c4e:	2291      	movs	r2, #145	; 0x91
   30c50:	0092      	lsls	r2, r2, #2
   30c52:	18ba      	adds	r2, r7, r2
   30c54:	6812      	ldr	r2, [r2, #0]
   30c56:	0011      	movs	r1, r2
   30c58:	0018      	movs	r0, r3
   30c5a:	4b14      	ldr	r3, [pc, #80]	; (30cac <f_open+0x3b8>)
   30c5c:	4798      	blx	r3
   30c5e:	0003      	movs	r3, r0
   30c60:	7023      	strb	r3, [r4, #0]
   30c62:	e03d      	b.n	30ce0 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   30c64:	4b0b      	ldr	r3, [pc, #44]	; (30c94 <f_open+0x3a0>)
   30c66:	18fb      	adds	r3, r7, r3
   30c68:	781b      	ldrb	r3, [r3, #0]
   30c6a:	2b00      	cmp	r3, #0
   30c6c:	d138      	bne.n	30ce0 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   30c6e:	2392      	movs	r3, #146	; 0x92
   30c70:	009b      	lsls	r3, r3, #2
   30c72:	18fb      	adds	r3, r7, r3
   30c74:	681b      	ldr	r3, [r3, #0]
   30c76:	330b      	adds	r3, #11
   30c78:	781b      	ldrb	r3, [r3, #0]
   30c7a:	001a      	movs	r2, r3
   30c7c:	2310      	movs	r3, #16
   30c7e:	4013      	ands	r3, r2
   30c80:	d016      	beq.n	30cb0 <f_open+0x3bc>
				res = FR_NO_FILE;
   30c82:	4b04      	ldr	r3, [pc, #16]	; (30c94 <f_open+0x3a0>)
   30c84:	18fb      	adds	r3, r7, r3
   30c86:	2204      	movs	r2, #4
   30c88:	701a      	strb	r2, [r3, #0]
   30c8a:	e029      	b.n	30ce0 <f_open+0x3ec>
   30c8c:	fffffdac 	.word	0xfffffdac
   30c90:	fffffdb7 	.word	0xfffffdb7
   30c94:	0000024f 	.word	0x0000024f
   30c98:	0003024d 	.word	0x0003024d
   30c9c:	00030041 	.word	0x00030041
   30ca0:	0002f891 	.word	0x0002f891
   30ca4:	0002e689 	.word	0x0002e689
   30ca8:	0002ee0d 	.word	0x0002ee0d
   30cac:	0002e7cd 	.word	0x0002e7cd
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   30cb0:	4b5a      	ldr	r3, [pc, #360]	; (30e1c <f_open+0x528>)
   30cb2:	2294      	movs	r2, #148	; 0x94
   30cb4:	0092      	lsls	r2, r2, #2
   30cb6:	4694      	mov	ip, r2
   30cb8:	44bc      	add	ip, r7
   30cba:	4463      	add	r3, ip
   30cbc:	781b      	ldrb	r3, [r3, #0]
   30cbe:	2202      	movs	r2, #2
   30cc0:	4013      	ands	r3, r2
   30cc2:	d00d      	beq.n	30ce0 <f_open+0x3ec>
   30cc4:	2392      	movs	r3, #146	; 0x92
   30cc6:	009b      	lsls	r3, r3, #2
   30cc8:	18fb      	adds	r3, r7, r3
   30cca:	681b      	ldr	r3, [r3, #0]
   30ccc:	330b      	adds	r3, #11
   30cce:	781b      	ldrb	r3, [r3, #0]
   30cd0:	001a      	movs	r2, r3
   30cd2:	2301      	movs	r3, #1
   30cd4:	4013      	ands	r3, r2
   30cd6:	d003      	beq.n	30ce0 <f_open+0x3ec>
					res = FR_DENIED;
   30cd8:	4b51      	ldr	r3, [pc, #324]	; (30e20 <f_open+0x52c>)
   30cda:	18fb      	adds	r3, r7, r3
   30cdc:	2207      	movs	r2, #7
   30cde:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   30ce0:	4b4f      	ldr	r3, [pc, #316]	; (30e20 <f_open+0x52c>)
   30ce2:	18fb      	adds	r3, r7, r3
   30ce4:	781b      	ldrb	r3, [r3, #0]
   30ce6:	2b00      	cmp	r3, #0
   30ce8:	d126      	bne.n	30d38 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   30cea:	4b4c      	ldr	r3, [pc, #304]	; (30e1c <f_open+0x528>)
   30cec:	2294      	movs	r2, #148	; 0x94
   30cee:	0092      	lsls	r2, r2, #2
   30cf0:	4694      	mov	ip, r2
   30cf2:	44bc      	add	ip, r7
   30cf4:	4463      	add	r3, ip
   30cf6:	781b      	ldrb	r3, [r3, #0]
   30cf8:	2208      	movs	r2, #8
   30cfa:	4013      	ands	r3, r2
   30cfc:	d00f      	beq.n	30d1e <f_open+0x42a>
			mode |= FA__WRITTEN;
   30cfe:	4b47      	ldr	r3, [pc, #284]	; (30e1c <f_open+0x528>)
   30d00:	2294      	movs	r2, #148	; 0x94
   30d02:	0092      	lsls	r2, r2, #2
   30d04:	4694      	mov	ip, r2
   30d06:	44bc      	add	ip, r7
   30d08:	4463      	add	r3, ip
   30d0a:	4a44      	ldr	r2, [pc, #272]	; (30e1c <f_open+0x528>)
   30d0c:	2194      	movs	r1, #148	; 0x94
   30d0e:	0089      	lsls	r1, r1, #2
   30d10:	468c      	mov	ip, r1
   30d12:	44bc      	add	ip, r7
   30d14:	4462      	add	r2, ip
   30d16:	7812      	ldrb	r2, [r2, #0]
   30d18:	2120      	movs	r1, #32
   30d1a:	430a      	orrs	r2, r1
   30d1c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   30d1e:	2387      	movs	r3, #135	; 0x87
   30d20:	009b      	lsls	r3, r3, #2
   30d22:	18fb      	adds	r3, r7, r3
   30d24:	681b      	ldr	r3, [r3, #0]
   30d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30d28:	68fb      	ldr	r3, [r7, #12]
   30d2a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   30d2c:	68fb      	ldr	r3, [r7, #12]
   30d2e:	2292      	movs	r2, #146	; 0x92
   30d30:	0092      	lsls	r2, r2, #2
   30d32:	18ba      	adds	r2, r7, r2
   30d34:	6812      	ldr	r2, [r2, #0]
   30d36:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   30d38:	4b39      	ldr	r3, [pc, #228]	; (30e20 <f_open+0x52c>)
   30d3a:	18fb      	adds	r3, r7, r3
   30d3c:	781b      	ldrb	r3, [r3, #0]
   30d3e:	2b00      	cmp	r3, #0
   30d40:	d163      	bne.n	30e0a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   30d42:	68fb      	ldr	r3, [r7, #12]
   30d44:	4a35      	ldr	r2, [pc, #212]	; (30e1c <f_open+0x528>)
   30d46:	2194      	movs	r1, #148	; 0x94
   30d48:	0089      	lsls	r1, r1, #2
   30d4a:	468c      	mov	ip, r1
   30d4c:	44bc      	add	ip, r7
   30d4e:	4462      	add	r2, ip
   30d50:	7812      	ldrb	r2, [r2, #0]
   30d52:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   30d54:	2392      	movs	r3, #146	; 0x92
   30d56:	009b      	lsls	r3, r3, #2
   30d58:	18fb      	adds	r3, r7, r3
   30d5a:	681b      	ldr	r3, [r3, #0]
   30d5c:	3315      	adds	r3, #21
   30d5e:	781b      	ldrb	r3, [r3, #0]
   30d60:	021b      	lsls	r3, r3, #8
   30d62:	b21a      	sxth	r2, r3
   30d64:	2392      	movs	r3, #146	; 0x92
   30d66:	009b      	lsls	r3, r3, #2
   30d68:	18fb      	adds	r3, r7, r3
   30d6a:	681b      	ldr	r3, [r3, #0]
   30d6c:	3314      	adds	r3, #20
   30d6e:	781b      	ldrb	r3, [r3, #0]
   30d70:	b21b      	sxth	r3, r3
   30d72:	4313      	orrs	r3, r2
   30d74:	b21b      	sxth	r3, r3
   30d76:	b29b      	uxth	r3, r3
   30d78:	041b      	lsls	r3, r3, #16
   30d7a:	2292      	movs	r2, #146	; 0x92
   30d7c:	0092      	lsls	r2, r2, #2
   30d7e:	18ba      	adds	r2, r7, r2
   30d80:	6812      	ldr	r2, [r2, #0]
   30d82:	321b      	adds	r2, #27
   30d84:	7812      	ldrb	r2, [r2, #0]
   30d86:	0212      	lsls	r2, r2, #8
   30d88:	b211      	sxth	r1, r2
   30d8a:	2292      	movs	r2, #146	; 0x92
   30d8c:	0092      	lsls	r2, r2, #2
   30d8e:	18ba      	adds	r2, r7, r2
   30d90:	6812      	ldr	r2, [r2, #0]
   30d92:	321a      	adds	r2, #26
   30d94:	7812      	ldrb	r2, [r2, #0]
   30d96:	b212      	sxth	r2, r2
   30d98:	430a      	orrs	r2, r1
   30d9a:	b212      	sxth	r2, r2
   30d9c:	b292      	uxth	r2, r2
   30d9e:	431a      	orrs	r2, r3
   30da0:	68fb      	ldr	r3, [r7, #12]
   30da2:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   30da4:	2392      	movs	r3, #146	; 0x92
   30da6:	009b      	lsls	r3, r3, #2
   30da8:	18fb      	adds	r3, r7, r3
   30daa:	681b      	ldr	r3, [r3, #0]
   30dac:	331f      	adds	r3, #31
   30dae:	781b      	ldrb	r3, [r3, #0]
   30db0:	061a      	lsls	r2, r3, #24
   30db2:	2392      	movs	r3, #146	; 0x92
   30db4:	009b      	lsls	r3, r3, #2
   30db6:	18fb      	adds	r3, r7, r3
   30db8:	681b      	ldr	r3, [r3, #0]
   30dba:	331e      	adds	r3, #30
   30dbc:	781b      	ldrb	r3, [r3, #0]
   30dbe:	041b      	lsls	r3, r3, #16
   30dc0:	4313      	orrs	r3, r2
   30dc2:	2292      	movs	r2, #146	; 0x92
   30dc4:	0092      	lsls	r2, r2, #2
   30dc6:	18ba      	adds	r2, r7, r2
   30dc8:	6812      	ldr	r2, [r2, #0]
   30dca:	321d      	adds	r2, #29
   30dcc:	7812      	ldrb	r2, [r2, #0]
   30dce:	0212      	lsls	r2, r2, #8
   30dd0:	4313      	orrs	r3, r2
   30dd2:	2292      	movs	r2, #146	; 0x92
   30dd4:	0092      	lsls	r2, r2, #2
   30dd6:	18ba      	adds	r2, r7, r2
   30dd8:	6812      	ldr	r2, [r2, #0]
   30dda:	321c      	adds	r2, #28
   30ddc:	7812      	ldrb	r2, [r2, #0]
   30dde:	431a      	orrs	r2, r3
   30de0:	68fb      	ldr	r3, [r7, #12]
   30de2:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   30de4:	68fb      	ldr	r3, [r7, #12]
   30de6:	2200      	movs	r2, #0
   30de8:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   30dea:	68fb      	ldr	r3, [r7, #12]
   30dec:	2200      	movs	r2, #0
   30dee:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   30df0:	2387      	movs	r3, #135	; 0x87
   30df2:	009b      	lsls	r3, r3, #2
   30df4:	18fb      	adds	r3, r7, r3
   30df6:	681a      	ldr	r2, [r3, #0]
   30df8:	68fb      	ldr	r3, [r7, #12]
   30dfa:	601a      	str	r2, [r3, #0]
   30dfc:	2387      	movs	r3, #135	; 0x87
   30dfe:	009b      	lsls	r3, r3, #2
   30e00:	18fb      	adds	r3, r7, r3
   30e02:	681b      	ldr	r3, [r3, #0]
   30e04:	88da      	ldrh	r2, [r3, #6]
   30e06:	68fb      	ldr	r3, [r7, #12]
   30e08:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   30e0a:	4b05      	ldr	r3, [pc, #20]	; (30e20 <f_open+0x52c>)
   30e0c:	18fb      	adds	r3, r7, r3
   30e0e:	781b      	ldrb	r3, [r3, #0]
}
   30e10:	0018      	movs	r0, r3
   30e12:	46bd      	mov	sp, r7
   30e14:	2395      	movs	r3, #149	; 0x95
   30e16:	009b      	lsls	r3, r3, #2
   30e18:	449d      	add	sp, r3
   30e1a:	bd90      	pop	{r4, r7, pc}
   30e1c:	fffffdb7 	.word	0xfffffdb7
   30e20:	0000024f 	.word	0x0000024f

00030e24 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   30e24:	b590      	push	{r4, r7, lr}
   30e26:	b08b      	sub	sp, #44	; 0x2c
   30e28:	af00      	add	r7, sp, #0
   30e2a:	60f8      	str	r0, [r7, #12]
   30e2c:	60b9      	str	r1, [r7, #8]
   30e2e:	607a      	str	r2, [r7, #4]
   30e30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   30e32:	68bb      	ldr	r3, [r7, #8]
   30e34:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   30e36:	683b      	ldr	r3, [r7, #0]
   30e38:	2200      	movs	r2, #0
   30e3a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   30e3c:	68fb      	ldr	r3, [r7, #12]
   30e3e:	681a      	ldr	r2, [r3, #0]
   30e40:	68fb      	ldr	r3, [r7, #12]
   30e42:	889b      	ldrh	r3, [r3, #4]
   30e44:	2117      	movs	r1, #23
   30e46:	187c      	adds	r4, r7, r1
   30e48:	0019      	movs	r1, r3
   30e4a:	0010      	movs	r0, r2
   30e4c:	4bc3      	ldr	r3, [pc, #780]	; (3115c <f_write+0x338>)
   30e4e:	4798      	blx	r3
   30e50:	0003      	movs	r3, r0
   30e52:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   30e54:	2317      	movs	r3, #23
   30e56:	18fb      	adds	r3, r7, r3
   30e58:	781b      	ldrb	r3, [r3, #0]
   30e5a:	2b00      	cmp	r3, #0
   30e5c:	d003      	beq.n	30e66 <f_write+0x42>
   30e5e:	2317      	movs	r3, #23
   30e60:	18fb      	adds	r3, r7, r3
   30e62:	781b      	ldrb	r3, [r3, #0]
   30e64:	e176      	b.n	31154 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   30e66:	68fb      	ldr	r3, [r7, #12]
   30e68:	799b      	ldrb	r3, [r3, #6]
   30e6a:	b25b      	sxtb	r3, r3
   30e6c:	2b00      	cmp	r3, #0
   30e6e:	da01      	bge.n	30e74 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   30e70:	2302      	movs	r3, #2
   30e72:	e16f      	b.n	31154 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   30e74:	68fb      	ldr	r3, [r7, #12]
   30e76:	799b      	ldrb	r3, [r3, #6]
   30e78:	001a      	movs	r2, r3
   30e7a:	2302      	movs	r3, #2
   30e7c:	4013      	ands	r3, r2
   30e7e:	d101      	bne.n	30e84 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   30e80:	2307      	movs	r3, #7
   30e82:	e167      	b.n	31154 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   30e84:	68fb      	ldr	r3, [r7, #12]
   30e86:	68da      	ldr	r2, [r3, #12]
   30e88:	687b      	ldr	r3, [r7, #4]
   30e8a:	18d2      	adds	r2, r2, r3
   30e8c:	68fb      	ldr	r3, [r7, #12]
   30e8e:	68db      	ldr	r3, [r3, #12]
   30e90:	429a      	cmp	r2, r3
   30e92:	d300      	bcc.n	30e96 <f_write+0x72>
   30e94:	e146      	b.n	31124 <f_write+0x300>
   30e96:	2300      	movs	r3, #0
   30e98:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   30e9a:	e143      	b.n	31124 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   30e9c:	68fb      	ldr	r3, [r7, #12]
   30e9e:	689b      	ldr	r3, [r3, #8]
   30ea0:	05db      	lsls	r3, r3, #23
   30ea2:	0ddb      	lsrs	r3, r3, #23
   30ea4:	d000      	beq.n	30ea8 <f_write+0x84>
   30ea6:	e0f6      	b.n	31096 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   30ea8:	68fb      	ldr	r3, [r7, #12]
   30eaa:	689b      	ldr	r3, [r3, #8]
   30eac:	0a5b      	lsrs	r3, r3, #9
   30eae:	b2da      	uxtb	r2, r3
   30eb0:	68fb      	ldr	r3, [r7, #12]
   30eb2:	681b      	ldr	r3, [r3, #0]
   30eb4:	789b      	ldrb	r3, [r3, #2]
   30eb6:	3b01      	subs	r3, #1
   30eb8:	b2d9      	uxtb	r1, r3
   30eba:	2316      	movs	r3, #22
   30ebc:	18fb      	adds	r3, r7, r3
   30ebe:	400a      	ands	r2, r1
   30ec0:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   30ec2:	2316      	movs	r3, #22
   30ec4:	18fb      	adds	r3, r7, r3
   30ec6:	781b      	ldrb	r3, [r3, #0]
   30ec8:	2b00      	cmp	r3, #0
   30eca:	d140      	bne.n	30f4e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   30ecc:	68fb      	ldr	r3, [r7, #12]
   30ece:	689b      	ldr	r3, [r3, #8]
   30ed0:	2b00      	cmp	r3, #0
   30ed2:	d111      	bne.n	30ef8 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   30ed4:	68fb      	ldr	r3, [r7, #12]
   30ed6:	691b      	ldr	r3, [r3, #16]
   30ed8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   30eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30edc:	2b00      	cmp	r3, #0
   30ede:	d115      	bne.n	30f0c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   30ee0:	68fb      	ldr	r3, [r7, #12]
   30ee2:	681b      	ldr	r3, [r3, #0]
   30ee4:	2100      	movs	r1, #0
   30ee6:	0018      	movs	r0, r3
   30ee8:	4b9d      	ldr	r3, [pc, #628]	; (31160 <f_write+0x33c>)
   30eea:	4798      	blx	r3
   30eec:	0003      	movs	r3, r0
   30eee:	627b      	str	r3, [r7, #36]	; 0x24
   30ef0:	68fb      	ldr	r3, [r7, #12]
   30ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30ef4:	611a      	str	r2, [r3, #16]
   30ef6:	e009      	b.n	30f0c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   30ef8:	68fb      	ldr	r3, [r7, #12]
   30efa:	681a      	ldr	r2, [r3, #0]
   30efc:	68fb      	ldr	r3, [r7, #12]
   30efe:	695b      	ldr	r3, [r3, #20]
   30f00:	0019      	movs	r1, r3
   30f02:	0010      	movs	r0, r2
   30f04:	4b96      	ldr	r3, [pc, #600]	; (31160 <f_write+0x33c>)
   30f06:	4798      	blx	r3
   30f08:	0003      	movs	r3, r0
   30f0a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   30f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f0e:	2b00      	cmp	r3, #0
   30f10:	d100      	bne.n	30f14 <f_write+0xf0>
   30f12:	e10c      	b.n	3112e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   30f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f16:	2b01      	cmp	r3, #1
   30f18:	d109      	bne.n	30f2e <f_write+0x10a>
   30f1a:	68fb      	ldr	r3, [r7, #12]
   30f1c:	799b      	ldrb	r3, [r3, #6]
   30f1e:	2280      	movs	r2, #128	; 0x80
   30f20:	4252      	negs	r2, r2
   30f22:	4313      	orrs	r3, r2
   30f24:	b2da      	uxtb	r2, r3
   30f26:	68fb      	ldr	r3, [r7, #12]
   30f28:	719a      	strb	r2, [r3, #6]
   30f2a:	2302      	movs	r3, #2
   30f2c:	e112      	b.n	31154 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   30f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f30:	3301      	adds	r3, #1
   30f32:	d109      	bne.n	30f48 <f_write+0x124>
   30f34:	68fb      	ldr	r3, [r7, #12]
   30f36:	799b      	ldrb	r3, [r3, #6]
   30f38:	2280      	movs	r2, #128	; 0x80
   30f3a:	4252      	negs	r2, r2
   30f3c:	4313      	orrs	r3, r2
   30f3e:	b2da      	uxtb	r2, r3
   30f40:	68fb      	ldr	r3, [r7, #12]
   30f42:	719a      	strb	r2, [r3, #6]
   30f44:	2301      	movs	r3, #1
   30f46:	e105      	b.n	31154 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   30f48:	68fb      	ldr	r3, [r7, #12]
   30f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30f4c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   30f4e:	68fb      	ldr	r3, [r7, #12]
   30f50:	681b      	ldr	r3, [r3, #0]
   30f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   30f54:	68fb      	ldr	r3, [r7, #12]
   30f56:	699b      	ldr	r3, [r3, #24]
   30f58:	429a      	cmp	r2, r3
   30f5a:	d111      	bne.n	30f80 <f_write+0x15c>
   30f5c:	68fb      	ldr	r3, [r7, #12]
   30f5e:	681b      	ldr	r3, [r3, #0]
   30f60:	2100      	movs	r1, #0
   30f62:	0018      	movs	r0, r3
   30f64:	4b7f      	ldr	r3, [pc, #508]	; (31164 <f_write+0x340>)
   30f66:	4798      	blx	r3
   30f68:	1e03      	subs	r3, r0, #0
   30f6a:	d009      	beq.n	30f80 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   30f6c:	68fb      	ldr	r3, [r7, #12]
   30f6e:	799b      	ldrb	r3, [r3, #6]
   30f70:	2280      	movs	r2, #128	; 0x80
   30f72:	4252      	negs	r2, r2
   30f74:	4313      	orrs	r3, r2
   30f76:	b2da      	uxtb	r2, r3
   30f78:	68fb      	ldr	r3, [r7, #12]
   30f7a:	719a      	strb	r2, [r3, #6]
   30f7c:	2301      	movs	r3, #1
   30f7e:	e0e9      	b.n	31154 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   30f80:	68fb      	ldr	r3, [r7, #12]
   30f82:	681a      	ldr	r2, [r3, #0]
   30f84:	68fb      	ldr	r3, [r7, #12]
   30f86:	695b      	ldr	r3, [r3, #20]
   30f88:	0019      	movs	r1, r3
   30f8a:	0010      	movs	r0, r2
   30f8c:	4b76      	ldr	r3, [pc, #472]	; (31168 <f_write+0x344>)
   30f8e:	4798      	blx	r3
   30f90:	0003      	movs	r3, r0
   30f92:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   30f94:	693b      	ldr	r3, [r7, #16]
   30f96:	2b00      	cmp	r3, #0
   30f98:	d109      	bne.n	30fae <f_write+0x18a>
   30f9a:	68fb      	ldr	r3, [r7, #12]
   30f9c:	799b      	ldrb	r3, [r3, #6]
   30f9e:	2280      	movs	r2, #128	; 0x80
   30fa0:	4252      	negs	r2, r2
   30fa2:	4313      	orrs	r3, r2
   30fa4:	b2da      	uxtb	r2, r3
   30fa6:	68fb      	ldr	r3, [r7, #12]
   30fa8:	719a      	strb	r2, [r3, #6]
   30faa:	2302      	movs	r3, #2
   30fac:	e0d2      	b.n	31154 <f_write+0x330>
			sect += csect;
   30fae:	2316      	movs	r3, #22
   30fb0:	18fb      	adds	r3, r7, r3
   30fb2:	781b      	ldrb	r3, [r3, #0]
   30fb4:	693a      	ldr	r2, [r7, #16]
   30fb6:	18d3      	adds	r3, r2, r3
   30fb8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   30fba:	687b      	ldr	r3, [r7, #4]
   30fbc:	0a5b      	lsrs	r3, r3, #9
   30fbe:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   30fc0:	69fb      	ldr	r3, [r7, #28]
   30fc2:	2b00      	cmp	r3, #0
   30fc4:	d048      	beq.n	31058 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   30fc6:	2316      	movs	r3, #22
   30fc8:	18fb      	adds	r3, r7, r3
   30fca:	781a      	ldrb	r2, [r3, #0]
   30fcc:	69fb      	ldr	r3, [r7, #28]
   30fce:	18d2      	adds	r2, r2, r3
   30fd0:	68fb      	ldr	r3, [r7, #12]
   30fd2:	681b      	ldr	r3, [r3, #0]
   30fd4:	789b      	ldrb	r3, [r3, #2]
   30fd6:	429a      	cmp	r2, r3
   30fd8:	d908      	bls.n	30fec <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   30fda:	68fb      	ldr	r3, [r7, #12]
   30fdc:	681b      	ldr	r3, [r3, #0]
   30fde:	789b      	ldrb	r3, [r3, #2]
   30fe0:	001a      	movs	r2, r3
   30fe2:	2316      	movs	r3, #22
   30fe4:	18fb      	adds	r3, r7, r3
   30fe6:	781b      	ldrb	r3, [r3, #0]
   30fe8:	1ad3      	subs	r3, r2, r3
   30fea:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   30fec:	68fb      	ldr	r3, [r7, #12]
   30fee:	681b      	ldr	r3, [r3, #0]
   30ff0:	7858      	ldrb	r0, [r3, #1]
   30ff2:	69fb      	ldr	r3, [r7, #28]
   30ff4:	b2db      	uxtb	r3, r3
   30ff6:	693a      	ldr	r2, [r7, #16]
   30ff8:	69b9      	ldr	r1, [r7, #24]
   30ffa:	4c5c      	ldr	r4, [pc, #368]	; (3116c <f_write+0x348>)
   30ffc:	47a0      	blx	r4
   30ffe:	1e03      	subs	r3, r0, #0
   31000:	d009      	beq.n	31016 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   31002:	68fb      	ldr	r3, [r7, #12]
   31004:	799b      	ldrb	r3, [r3, #6]
   31006:	2280      	movs	r2, #128	; 0x80
   31008:	4252      	negs	r2, r2
   3100a:	4313      	orrs	r3, r2
   3100c:	b2da      	uxtb	r2, r3
   3100e:	68fb      	ldr	r3, [r7, #12]
   31010:	719a      	strb	r2, [r3, #6]
   31012:	2301      	movs	r3, #1
   31014:	e09e      	b.n	31154 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   31016:	68fb      	ldr	r3, [r7, #12]
   31018:	681b      	ldr	r3, [r3, #0]
   3101a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   3101c:	693b      	ldr	r3, [r7, #16]
   3101e:	1ad2      	subs	r2, r2, r3
   31020:	69fb      	ldr	r3, [r7, #28]
   31022:	429a      	cmp	r2, r3
   31024:	d214      	bcs.n	31050 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   31026:	68fb      	ldr	r3, [r7, #12]
   31028:	681b      	ldr	r3, [r3, #0]
   3102a:	3330      	adds	r3, #48	; 0x30
   3102c:	0018      	movs	r0, r3
   3102e:	68fb      	ldr	r3, [r7, #12]
   31030:	681b      	ldr	r3, [r3, #0]
   31032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   31034:	693b      	ldr	r3, [r7, #16]
   31036:	1ad3      	subs	r3, r2, r3
   31038:	025b      	lsls	r3, r3, #9
   3103a:	69ba      	ldr	r2, [r7, #24]
   3103c:	18d1      	adds	r1, r2, r3
   3103e:	2380      	movs	r3, #128	; 0x80
   31040:	009b      	lsls	r3, r3, #2
   31042:	001a      	movs	r2, r3
   31044:	4b4a      	ldr	r3, [pc, #296]	; (31170 <f_write+0x34c>)
   31046:	4798      	blx	r3
					fp->fs->wflag = 0;
   31048:	68fb      	ldr	r3, [r7, #12]
   3104a:	681b      	ldr	r3, [r3, #0]
   3104c:	2200      	movs	r2, #0
   3104e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   31050:	69fb      	ldr	r3, [r7, #28]
   31052:	025b      	lsls	r3, r3, #9
   31054:	623b      	str	r3, [r7, #32]
				continue;
   31056:	e051      	b.n	310fc <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   31058:	68fb      	ldr	r3, [r7, #12]
   3105a:	689a      	ldr	r2, [r3, #8]
   3105c:	68fb      	ldr	r3, [r7, #12]
   3105e:	68db      	ldr	r3, [r3, #12]
   31060:	429a      	cmp	r2, r3
   31062:	d315      	bcc.n	31090 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   31064:	68fb      	ldr	r3, [r7, #12]
   31066:	681b      	ldr	r3, [r3, #0]
   31068:	2100      	movs	r1, #0
   3106a:	0018      	movs	r0, r3
   3106c:	4b3d      	ldr	r3, [pc, #244]	; (31164 <f_write+0x340>)
   3106e:	4798      	blx	r3
   31070:	1e03      	subs	r3, r0, #0
   31072:	d009      	beq.n	31088 <f_write+0x264>
   31074:	68fb      	ldr	r3, [r7, #12]
   31076:	799b      	ldrb	r3, [r3, #6]
   31078:	2280      	movs	r2, #128	; 0x80
   3107a:	4252      	negs	r2, r2
   3107c:	4313      	orrs	r3, r2
   3107e:	b2da      	uxtb	r2, r3
   31080:	68fb      	ldr	r3, [r7, #12]
   31082:	719a      	strb	r2, [r3, #6]
   31084:	2301      	movs	r3, #1
   31086:	e065      	b.n	31154 <f_write+0x330>
				fp->fs->winsect = sect;
   31088:	68fb      	ldr	r3, [r7, #12]
   3108a:	681b      	ldr	r3, [r3, #0]
   3108c:	693a      	ldr	r2, [r7, #16]
   3108e:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   31090:	68fb      	ldr	r3, [r7, #12]
   31092:	693a      	ldr	r2, [r7, #16]
   31094:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   31096:	68fb      	ldr	r3, [r7, #12]
   31098:	689b      	ldr	r3, [r3, #8]
   3109a:	05db      	lsls	r3, r3, #23
   3109c:	0ddb      	lsrs	r3, r3, #23
   3109e:	2280      	movs	r2, #128	; 0x80
   310a0:	0092      	lsls	r2, r2, #2
   310a2:	1ad3      	subs	r3, r2, r3
   310a4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   310a6:	6a3a      	ldr	r2, [r7, #32]
   310a8:	687b      	ldr	r3, [r7, #4]
   310aa:	429a      	cmp	r2, r3
   310ac:	d901      	bls.n	310b2 <f_write+0x28e>
   310ae:	687b      	ldr	r3, [r7, #4]
   310b0:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   310b2:	68fb      	ldr	r3, [r7, #12]
   310b4:	681a      	ldr	r2, [r3, #0]
   310b6:	68fb      	ldr	r3, [r7, #12]
   310b8:	699b      	ldr	r3, [r3, #24]
   310ba:	0019      	movs	r1, r3
   310bc:	0010      	movs	r0, r2
   310be:	4b29      	ldr	r3, [pc, #164]	; (31164 <f_write+0x340>)
   310c0:	4798      	blx	r3
   310c2:	1e03      	subs	r3, r0, #0
   310c4:	d009      	beq.n	310da <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   310c6:	68fb      	ldr	r3, [r7, #12]
   310c8:	799b      	ldrb	r3, [r3, #6]
   310ca:	2280      	movs	r2, #128	; 0x80
   310cc:	4252      	negs	r2, r2
   310ce:	4313      	orrs	r3, r2
   310d0:	b2da      	uxtb	r2, r3
   310d2:	68fb      	ldr	r3, [r7, #12]
   310d4:	719a      	strb	r2, [r3, #6]
   310d6:	2301      	movs	r3, #1
   310d8:	e03c      	b.n	31154 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   310da:	68fb      	ldr	r3, [r7, #12]
   310dc:	681a      	ldr	r2, [r3, #0]
   310de:	68fb      	ldr	r3, [r7, #12]
   310e0:	689b      	ldr	r3, [r3, #8]
   310e2:	05db      	lsls	r3, r3, #23
   310e4:	0ddb      	lsrs	r3, r3, #23
   310e6:	3330      	adds	r3, #48	; 0x30
   310e8:	18d3      	adds	r3, r2, r3
   310ea:	6a3a      	ldr	r2, [r7, #32]
   310ec:	69b9      	ldr	r1, [r7, #24]
   310ee:	0018      	movs	r0, r3
   310f0:	4b1f      	ldr	r3, [pc, #124]	; (31170 <f_write+0x34c>)
   310f2:	4798      	blx	r3
		fp->fs->wflag = 1;
   310f4:	68fb      	ldr	r3, [r7, #12]
   310f6:	681b      	ldr	r3, [r3, #0]
   310f8:	2201      	movs	r2, #1
   310fa:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   310fc:	69ba      	ldr	r2, [r7, #24]
   310fe:	6a3b      	ldr	r3, [r7, #32]
   31100:	18d3      	adds	r3, r2, r3
   31102:	61bb      	str	r3, [r7, #24]
   31104:	68fb      	ldr	r3, [r7, #12]
   31106:	689a      	ldr	r2, [r3, #8]
   31108:	6a3b      	ldr	r3, [r7, #32]
   3110a:	18d2      	adds	r2, r2, r3
   3110c:	68fb      	ldr	r3, [r7, #12]
   3110e:	609a      	str	r2, [r3, #8]
   31110:	683b      	ldr	r3, [r7, #0]
   31112:	681a      	ldr	r2, [r3, #0]
   31114:	6a3b      	ldr	r3, [r7, #32]
   31116:	18d2      	adds	r2, r2, r3
   31118:	683b      	ldr	r3, [r7, #0]
   3111a:	601a      	str	r2, [r3, #0]
   3111c:	687a      	ldr	r2, [r7, #4]
   3111e:	6a3b      	ldr	r3, [r7, #32]
   31120:	1ad3      	subs	r3, r2, r3
   31122:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   31124:	687b      	ldr	r3, [r7, #4]
   31126:	2b00      	cmp	r3, #0
   31128:	d000      	beq.n	3112c <f_write+0x308>
   3112a:	e6b7      	b.n	30e9c <f_write+0x78>
   3112c:	e000      	b.n	31130 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   3112e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   31130:	68fb      	ldr	r3, [r7, #12]
   31132:	689a      	ldr	r2, [r3, #8]
   31134:	68fb      	ldr	r3, [r7, #12]
   31136:	68db      	ldr	r3, [r3, #12]
   31138:	429a      	cmp	r2, r3
   3113a:	d903      	bls.n	31144 <f_write+0x320>
   3113c:	68fb      	ldr	r3, [r7, #12]
   3113e:	689a      	ldr	r2, [r3, #8]
   31140:	68fb      	ldr	r3, [r7, #12]
   31142:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   31144:	68fb      	ldr	r3, [r7, #12]
   31146:	799b      	ldrb	r3, [r3, #6]
   31148:	2220      	movs	r2, #32
   3114a:	4313      	orrs	r3, r2
   3114c:	b2da      	uxtb	r2, r3
   3114e:	68fb      	ldr	r3, [r7, #12]
   31150:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   31152:	2300      	movs	r3, #0
}
   31154:	0018      	movs	r0, r3
   31156:	46bd      	mov	sp, r7
   31158:	b00b      	add	sp, #44	; 0x2c
   3115a:	bd90      	pop	{r4, r7, pc}
   3115c:	00030849 	.word	0x00030849
   31160:	0002eed5 	.word	0x0002eed5
   31164:	0002e7cd 	.word	0x0002e7cd
   31168:	0002ea2d 	.word	0x0002ea2d
   3116c:	0002e4b9 	.word	0x0002e4b9
   31170:	0002e6e9 	.word	0x0002e6e9

00031174 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   31174:	b590      	push	{r4, r7, lr}
   31176:	b087      	sub	sp, #28
   31178:	af00      	add	r7, sp, #0
   3117a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   3117c:	687b      	ldr	r3, [r7, #4]
   3117e:	681a      	ldr	r2, [r3, #0]
   31180:	687b      	ldr	r3, [r7, #4]
   31182:	889b      	ldrh	r3, [r3, #4]
   31184:	2117      	movs	r1, #23
   31186:	187c      	adds	r4, r7, r1
   31188:	0019      	movs	r1, r3
   3118a:	0010      	movs	r0, r2
   3118c:	4b55      	ldr	r3, [pc, #340]	; (312e4 <f_sync+0x170>)
   3118e:	4798      	blx	r3
   31190:	0003      	movs	r3, r0
   31192:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   31194:	2317      	movs	r3, #23
   31196:	18fb      	adds	r3, r7, r3
   31198:	781b      	ldrb	r3, [r3, #0]
   3119a:	2b00      	cmp	r3, #0
   3119c:	d000      	beq.n	311a0 <f_sync+0x2c>
   3119e:	e09a      	b.n	312d6 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   311a0:	687b      	ldr	r3, [r7, #4]
   311a2:	799b      	ldrb	r3, [r3, #6]
   311a4:	001a      	movs	r2, r3
   311a6:	2320      	movs	r3, #32
   311a8:	4013      	ands	r3, r2
   311aa:	d100      	bne.n	311ae <f_sync+0x3a>
   311ac:	e093      	b.n	312d6 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   311ae:	687b      	ldr	r3, [r7, #4]
   311b0:	681a      	ldr	r2, [r3, #0]
   311b2:	687b      	ldr	r3, [r7, #4]
   311b4:	69db      	ldr	r3, [r3, #28]
   311b6:	2117      	movs	r1, #23
   311b8:	187c      	adds	r4, r7, r1
   311ba:	0019      	movs	r1, r3
   311bc:	0010      	movs	r0, r2
   311be:	4b4a      	ldr	r3, [pc, #296]	; (312e8 <f_sync+0x174>)
   311c0:	4798      	blx	r3
   311c2:	0003      	movs	r3, r0
   311c4:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   311c6:	2317      	movs	r3, #23
   311c8:	18fb      	adds	r3, r7, r3
   311ca:	781b      	ldrb	r3, [r3, #0]
   311cc:	2b00      	cmp	r3, #0
   311ce:	d000      	beq.n	311d2 <f_sync+0x5e>
   311d0:	e081      	b.n	312d6 <f_sync+0x162>
				dir = fp->dir_ptr;
   311d2:	687b      	ldr	r3, [r7, #4]
   311d4:	6a1b      	ldr	r3, [r3, #32]
   311d6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   311d8:	693b      	ldr	r3, [r7, #16]
   311da:	330b      	adds	r3, #11
   311dc:	693a      	ldr	r2, [r7, #16]
   311de:	320b      	adds	r2, #11
   311e0:	7812      	ldrb	r2, [r2, #0]
   311e2:	2120      	movs	r1, #32
   311e4:	430a      	orrs	r2, r1
   311e6:	b2d2      	uxtb	r2, r2
   311e8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   311ea:	693b      	ldr	r3, [r7, #16]
   311ec:	331c      	adds	r3, #28
   311ee:	001a      	movs	r2, r3
   311f0:	687b      	ldr	r3, [r7, #4]
   311f2:	68db      	ldr	r3, [r3, #12]
   311f4:	b2db      	uxtb	r3, r3
   311f6:	7013      	strb	r3, [r2, #0]
   311f8:	693b      	ldr	r3, [r7, #16]
   311fa:	331d      	adds	r3, #29
   311fc:	001a      	movs	r2, r3
   311fe:	687b      	ldr	r3, [r7, #4]
   31200:	68db      	ldr	r3, [r3, #12]
   31202:	b29b      	uxth	r3, r3
   31204:	0a1b      	lsrs	r3, r3, #8
   31206:	b29b      	uxth	r3, r3
   31208:	b2db      	uxtb	r3, r3
   3120a:	7013      	strb	r3, [r2, #0]
   3120c:	693b      	ldr	r3, [r7, #16]
   3120e:	331e      	adds	r3, #30
   31210:	001a      	movs	r2, r3
   31212:	687b      	ldr	r3, [r7, #4]
   31214:	68db      	ldr	r3, [r3, #12]
   31216:	0c1b      	lsrs	r3, r3, #16
   31218:	b2db      	uxtb	r3, r3
   3121a:	7013      	strb	r3, [r2, #0]
   3121c:	693b      	ldr	r3, [r7, #16]
   3121e:	331f      	adds	r3, #31
   31220:	001a      	movs	r2, r3
   31222:	687b      	ldr	r3, [r7, #4]
   31224:	68db      	ldr	r3, [r3, #12]
   31226:	0e1b      	lsrs	r3, r3, #24
   31228:	b2db      	uxtb	r3, r3
   3122a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   3122c:	693b      	ldr	r3, [r7, #16]
   3122e:	331a      	adds	r3, #26
   31230:	001a      	movs	r2, r3
   31232:	687b      	ldr	r3, [r7, #4]
   31234:	691b      	ldr	r3, [r3, #16]
   31236:	b2db      	uxtb	r3, r3
   31238:	7013      	strb	r3, [r2, #0]
   3123a:	693b      	ldr	r3, [r7, #16]
   3123c:	331b      	adds	r3, #27
   3123e:	001a      	movs	r2, r3
   31240:	687b      	ldr	r3, [r7, #4]
   31242:	691b      	ldr	r3, [r3, #16]
   31244:	b29b      	uxth	r3, r3
   31246:	0a1b      	lsrs	r3, r3, #8
   31248:	b29b      	uxth	r3, r3
   3124a:	b2db      	uxtb	r3, r3
   3124c:	7013      	strb	r3, [r2, #0]
   3124e:	693b      	ldr	r3, [r7, #16]
   31250:	3314      	adds	r3, #20
   31252:	001a      	movs	r2, r3
   31254:	687b      	ldr	r3, [r7, #4]
   31256:	691b      	ldr	r3, [r3, #16]
   31258:	0c1b      	lsrs	r3, r3, #16
   3125a:	b2db      	uxtb	r3, r3
   3125c:	7013      	strb	r3, [r2, #0]
   3125e:	693b      	ldr	r3, [r7, #16]
   31260:	3315      	adds	r3, #21
   31262:	001a      	movs	r2, r3
   31264:	687b      	ldr	r3, [r7, #4]
   31266:	691b      	ldr	r3, [r3, #16]
   31268:	0c1b      	lsrs	r3, r3, #16
   3126a:	b29b      	uxth	r3, r3
   3126c:	0a1b      	lsrs	r3, r3, #8
   3126e:	b29b      	uxth	r3, r3
   31270:	b2db      	uxtb	r3, r3
   31272:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   31274:	4b1d      	ldr	r3, [pc, #116]	; (312ec <f_sync+0x178>)
   31276:	4798      	blx	r3
   31278:	0003      	movs	r3, r0
   3127a:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   3127c:	693b      	ldr	r3, [r7, #16]
   3127e:	3316      	adds	r3, #22
   31280:	68fa      	ldr	r2, [r7, #12]
   31282:	b2d2      	uxtb	r2, r2
   31284:	701a      	strb	r2, [r3, #0]
   31286:	693b      	ldr	r3, [r7, #16]
   31288:	3317      	adds	r3, #23
   3128a:	68fa      	ldr	r2, [r7, #12]
   3128c:	b292      	uxth	r2, r2
   3128e:	0a12      	lsrs	r2, r2, #8
   31290:	b292      	uxth	r2, r2
   31292:	b2d2      	uxtb	r2, r2
   31294:	701a      	strb	r2, [r3, #0]
   31296:	693b      	ldr	r3, [r7, #16]
   31298:	3318      	adds	r3, #24
   3129a:	68fa      	ldr	r2, [r7, #12]
   3129c:	0c12      	lsrs	r2, r2, #16
   3129e:	b2d2      	uxtb	r2, r2
   312a0:	701a      	strb	r2, [r3, #0]
   312a2:	693b      	ldr	r3, [r7, #16]
   312a4:	3319      	adds	r3, #25
   312a6:	68fa      	ldr	r2, [r7, #12]
   312a8:	0e12      	lsrs	r2, r2, #24
   312aa:	b2d2      	uxtb	r2, r2
   312ac:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   312ae:	687b      	ldr	r3, [r7, #4]
   312b0:	799b      	ldrb	r3, [r3, #6]
   312b2:	2220      	movs	r2, #32
   312b4:	4393      	bics	r3, r2
   312b6:	b2da      	uxtb	r2, r3
   312b8:	687b      	ldr	r3, [r7, #4]
   312ba:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   312bc:	687b      	ldr	r3, [r7, #4]
   312be:	681b      	ldr	r3, [r3, #0]
   312c0:	2201      	movs	r2, #1
   312c2:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   312c4:	687b      	ldr	r3, [r7, #4]
   312c6:	681b      	ldr	r3, [r3, #0]
   312c8:	2217      	movs	r2, #23
   312ca:	18bc      	adds	r4, r7, r2
   312cc:	0018      	movs	r0, r3
   312ce:	4b08      	ldr	r3, [pc, #32]	; (312f0 <f_sync+0x17c>)
   312d0:	4798      	blx	r3
   312d2:	0003      	movs	r3, r0
   312d4:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   312d6:	2317      	movs	r3, #23
   312d8:	18fb      	adds	r3, r7, r3
   312da:	781b      	ldrb	r3, [r3, #0]
}
   312dc:	0018      	movs	r0, r3
   312de:	46bd      	mov	sp, r7
   312e0:	b007      	add	sp, #28
   312e2:	bd90      	pop	{r4, r7, pc}
   312e4:	00030849 	.word	0x00030849
   312e8:	0002e7cd 	.word	0x0002e7cd
   312ec:	0002e689 	.word	0x0002e689
   312f0:	0002e895 	.word	0x0002e895

000312f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   312f4:	b590      	push	{r4, r7, lr}
   312f6:	b085      	sub	sp, #20
   312f8:	af00      	add	r7, sp, #0
   312fa:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   312fc:	230f      	movs	r3, #15
   312fe:	18fc      	adds	r4, r7, r3
   31300:	687b      	ldr	r3, [r7, #4]
   31302:	0018      	movs	r0, r3
   31304:	4b09      	ldr	r3, [pc, #36]	; (3132c <f_close+0x38>)
   31306:	4798      	blx	r3
   31308:	0003      	movs	r3, r0
   3130a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   3130c:	230f      	movs	r3, #15
   3130e:	18fb      	adds	r3, r7, r3
   31310:	781b      	ldrb	r3, [r3, #0]
   31312:	2b00      	cmp	r3, #0
   31314:	d102      	bne.n	3131c <f_close+0x28>
   31316:	687b      	ldr	r3, [r7, #4]
   31318:	2200      	movs	r2, #0
   3131a:	601a      	str	r2, [r3, #0]
	return res;
   3131c:	230f      	movs	r3, #15
   3131e:	18fb      	adds	r3, r7, r3
   31320:	781b      	ldrb	r3, [r3, #0]
#endif
}
   31322:	0018      	movs	r0, r3
   31324:	46bd      	mov	sp, r7
   31326:	b005      	add	sp, #20
   31328:	bd90      	pop	{r4, r7, pc}
   3132a:	46c0      	nop			; (mov r8, r8)
   3132c:	00031175 	.word	0x00031175

00031330 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   31330:	b580      	push	{r7, lr}
   31332:	b084      	sub	sp, #16
   31334:	af00      	add	r7, sp, #0
   31336:	0002      	movs	r2, r0
   31338:	6039      	str	r1, [r7, #0]
   3133a:	1dbb      	adds	r3, r7, #6
   3133c:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   3133e:	1dbb      	adds	r3, r7, #6
   31340:	881b      	ldrh	r3, [r3, #0]
   31342:	2b7f      	cmp	r3, #127	; 0x7f
   31344:	d805      	bhi.n	31352 <ff_convert+0x22>
		c = src;
   31346:	230e      	movs	r3, #14
   31348:	18fb      	adds	r3, r7, r3
   3134a:	1dba      	adds	r2, r7, #6
   3134c:	8812      	ldrh	r2, [r2, #0]
   3134e:	801a      	strh	r2, [r3, #0]
   31350:	e03a      	b.n	313c8 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   31352:	683b      	ldr	r3, [r7, #0]
   31354:	2b00      	cmp	r3, #0
   31356:	d010      	beq.n	3137a <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   31358:	1dbb      	adds	r3, r7, #6
   3135a:	881b      	ldrh	r3, [r3, #0]
   3135c:	2bff      	cmp	r3, #255	; 0xff
   3135e:	d807      	bhi.n	31370 <ff_convert+0x40>
   31360:	1dbb      	adds	r3, r7, #6
   31362:	881b      	ldrh	r3, [r3, #0]
   31364:	3b80      	subs	r3, #128	; 0x80
   31366:	001a      	movs	r2, r3
   31368:	4b1b      	ldr	r3, [pc, #108]	; (313d8 <ff_convert+0xa8>)
   3136a:	0052      	lsls	r2, r2, #1
   3136c:	5ad2      	ldrh	r2, [r2, r3]
   3136e:	e000      	b.n	31372 <ff_convert+0x42>
   31370:	2200      	movs	r2, #0
   31372:	230e      	movs	r3, #14
   31374:	18fb      	adds	r3, r7, r3
   31376:	801a      	strh	r2, [r3, #0]
   31378:	e026      	b.n	313c8 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   3137a:	230e      	movs	r3, #14
   3137c:	18fb      	adds	r3, r7, r3
   3137e:	2200      	movs	r2, #0
   31380:	801a      	strh	r2, [r3, #0]
   31382:	e010      	b.n	313a6 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   31384:	230e      	movs	r3, #14
   31386:	18fb      	adds	r3, r7, r3
   31388:	881a      	ldrh	r2, [r3, #0]
   3138a:	4b13      	ldr	r3, [pc, #76]	; (313d8 <ff_convert+0xa8>)
   3138c:	0052      	lsls	r2, r2, #1
   3138e:	5ad3      	ldrh	r3, [r2, r3]
   31390:	1dba      	adds	r2, r7, #6
   31392:	8812      	ldrh	r2, [r2, #0]
   31394:	429a      	cmp	r2, r3
   31396:	d00c      	beq.n	313b2 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   31398:	230e      	movs	r3, #14
   3139a:	18fb      	adds	r3, r7, r3
   3139c:	881a      	ldrh	r2, [r3, #0]
   3139e:	230e      	movs	r3, #14
   313a0:	18fb      	adds	r3, r7, r3
   313a2:	3201      	adds	r2, #1
   313a4:	801a      	strh	r2, [r3, #0]
   313a6:	230e      	movs	r3, #14
   313a8:	18fb      	adds	r3, r7, r3
   313aa:	881b      	ldrh	r3, [r3, #0]
   313ac:	2b7f      	cmp	r3, #127	; 0x7f
   313ae:	d9e9      	bls.n	31384 <ff_convert+0x54>
   313b0:	e000      	b.n	313b4 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   313b2:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   313b4:	230e      	movs	r3, #14
   313b6:	18fb      	adds	r3, r7, r3
   313b8:	881b      	ldrh	r3, [r3, #0]
   313ba:	3380      	adds	r3, #128	; 0x80
   313bc:	b29a      	uxth	r2, r3
   313be:	230e      	movs	r3, #14
   313c0:	18fb      	adds	r3, r7, r3
   313c2:	21ff      	movs	r1, #255	; 0xff
   313c4:	400a      	ands	r2, r1
   313c6:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   313c8:	230e      	movs	r3, #14
   313ca:	18fb      	adds	r3, r7, r3
   313cc:	881b      	ldrh	r3, [r3, #0]
}
   313ce:	0018      	movs	r0, r3
   313d0:	46bd      	mov	sp, r7
   313d2:	b004      	add	sp, #16
   313d4:	bd80      	pop	{r7, pc}
   313d6:	46c0      	nop			; (mov r8, r8)
   313d8:	0003dc78 	.word	0x0003dc78

000313dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   313dc:	b580      	push	{r7, lr}
   313de:	b084      	sub	sp, #16
   313e0:	af00      	add	r7, sp, #0
   313e2:	0002      	movs	r2, r0
   313e4:	1dbb      	adds	r3, r7, #6
   313e6:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   313e8:	2300      	movs	r3, #0
   313ea:	60fb      	str	r3, [r7, #12]
   313ec:	e002      	b.n	313f4 <ff_wtoupper+0x18>
   313ee:	68fb      	ldr	r3, [r7, #12]
   313f0:	3301      	adds	r3, #1
   313f2:	60fb      	str	r3, [r7, #12]
   313f4:	4b0f      	ldr	r3, [pc, #60]	; (31434 <ff_wtoupper+0x58>)
   313f6:	68fa      	ldr	r2, [r7, #12]
   313f8:	0052      	lsls	r2, r2, #1
   313fa:	5ad3      	ldrh	r3, [r2, r3]
   313fc:	2b00      	cmp	r3, #0
   313fe:	d007      	beq.n	31410 <ff_wtoupper+0x34>
   31400:	4b0c      	ldr	r3, [pc, #48]	; (31434 <ff_wtoupper+0x58>)
   31402:	68fa      	ldr	r2, [r7, #12]
   31404:	0052      	lsls	r2, r2, #1
   31406:	5ad3      	ldrh	r3, [r2, r3]
   31408:	1dba      	adds	r2, r7, #6
   3140a:	8812      	ldrh	r2, [r2, #0]
   3140c:	429a      	cmp	r2, r3
   3140e:	d1ee      	bne.n	313ee <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   31410:	4b08      	ldr	r3, [pc, #32]	; (31434 <ff_wtoupper+0x58>)
   31412:	68fa      	ldr	r2, [r7, #12]
   31414:	0052      	lsls	r2, r2, #1
   31416:	5ad3      	ldrh	r3, [r2, r3]
   31418:	2b00      	cmp	r3, #0
   3141a:	d004      	beq.n	31426 <ff_wtoupper+0x4a>
   3141c:	4b06      	ldr	r3, [pc, #24]	; (31438 <ff_wtoupper+0x5c>)
   3141e:	68fa      	ldr	r2, [r7, #12]
   31420:	0052      	lsls	r2, r2, #1
   31422:	5ad3      	ldrh	r3, [r2, r3]
   31424:	e001      	b.n	3142a <ff_wtoupper+0x4e>
   31426:	1dbb      	adds	r3, r7, #6
   31428:	881b      	ldrh	r3, [r3, #0]
}
   3142a:	0018      	movs	r0, r3
   3142c:	46bd      	mov	sp, r7
   3142e:	b004      	add	sp, #16
   31430:	bd80      	pop	{r7, pc}
   31432:	46c0      	nop			; (mov r8, r8)
   31434:	0003dd78 	.word	0x0003dd78
   31438:	0003df58 	.word	0x0003df58

0003143c <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   3143c:	b580      	push	{r7, lr}
   3143e:	b084      	sub	sp, #16
   31440:	af00      	add	r7, sp, #0
   31442:	60f8      	str	r0, [r7, #12]
   31444:	60b9      	str	r1, [r7, #8]
   31446:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   31448:	68fb      	ldr	r3, [r7, #12]
   3144a:	68ba      	ldr	r2, [r7, #8]
   3144c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   3144e:	68fb      	ldr	r3, [r7, #12]
   31450:	687a      	ldr	r2, [r7, #4]
   31452:	601a      	str	r2, [r3, #0]
}
   31454:	46c0      	nop			; (mov r8, r8)
   31456:	46bd      	mov	sp, r7
   31458:	b004      	add	sp, #16
   3145a:	bd80      	pop	{r7, pc}

0003145c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   3145c:	b580      	push	{r7, lr}
   3145e:	b082      	sub	sp, #8
   31460:	af00      	add	r7, sp, #0
   31462:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   31464:	687b      	ldr	r3, [r7, #4]
   31466:	681b      	ldr	r3, [r3, #0]
   31468:	4a07      	ldr	r2, [pc, #28]	; (31488 <getNextPacketId+0x2c>)
   3146a:	4293      	cmp	r3, r2
   3146c:	d003      	beq.n	31476 <getNextPacketId+0x1a>
   3146e:	687b      	ldr	r3, [r7, #4]
   31470:	681b      	ldr	r3, [r3, #0]
   31472:	1c5a      	adds	r2, r3, #1
   31474:	e000      	b.n	31478 <getNextPacketId+0x1c>
   31476:	2201      	movs	r2, #1
   31478:	687b      	ldr	r3, [r7, #4]
   3147a:	601a      	str	r2, [r3, #0]
   3147c:	687b      	ldr	r3, [r7, #4]
   3147e:	681b      	ldr	r3, [r3, #0]
}
   31480:	0018      	movs	r0, r3
   31482:	46bd      	mov	sp, r7
   31484:	b002      	add	sp, #8
   31486:	bd80      	pop	{r7, pc}
   31488:	0000ffff 	.word	0x0000ffff

0003148c <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   3148c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3148e:	b087      	sub	sp, #28
   31490:	af00      	add	r7, sp, #0
   31492:	60f8      	str	r0, [r7, #12]
   31494:	60b9      	str	r1, [r7, #8]
   31496:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   31498:	2301      	movs	r3, #1
   3149a:	425b      	negs	r3, r3
   3149c:	617b      	str	r3, [r7, #20]
        sent = 0;
   3149e:	2300      	movs	r3, #0
   314a0:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   314a2:	e01a      	b.n	314da <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   314a4:	68fb      	ldr	r3, [r7, #12]
   314a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   314a8:	68dc      	ldr	r4, [r3, #12]
   314aa:	68fb      	ldr	r3, [r7, #12]
   314ac:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   314ae:	68fb      	ldr	r3, [r7, #12]
   314b0:	691a      	ldr	r2, [r3, #16]
   314b2:	693b      	ldr	r3, [r7, #16]
   314b4:	18d6      	adds	r6, r2, r3
   314b6:	687b      	ldr	r3, [r7, #4]
   314b8:	0018      	movs	r0, r3
   314ba:	4b1a      	ldr	r3, [pc, #104]	; (31524 <sendPacket+0x98>)
   314bc:	4798      	blx	r3
   314be:	0003      	movs	r3, r0
   314c0:	68ba      	ldr	r2, [r7, #8]
   314c2:	0031      	movs	r1, r6
   314c4:	0028      	movs	r0, r5
   314c6:	47a0      	blx	r4
   314c8:	0003      	movs	r3, r0
   314ca:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   314cc:	697b      	ldr	r3, [r7, #20]
   314ce:	2b00      	cmp	r3, #0
   314d0:	db0e      	blt.n	314f0 <sendPacket+0x64>
            break;
        sent += rc;
   314d2:	693a      	ldr	r2, [r7, #16]
   314d4:	697b      	ldr	r3, [r7, #20]
   314d6:	18d3      	adds	r3, r2, r3
   314d8:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   314da:	693a      	ldr	r2, [r7, #16]
   314dc:	68bb      	ldr	r3, [r7, #8]
   314de:	429a      	cmp	r2, r3
   314e0:	da07      	bge.n	314f2 <sendPacket+0x66>
   314e2:	687b      	ldr	r3, [r7, #4]
   314e4:	0018      	movs	r0, r3
   314e6:	4b10      	ldr	r3, [pc, #64]	; (31528 <sendPacket+0x9c>)
   314e8:	4798      	blx	r3
   314ea:	1e03      	subs	r3, r0, #0
   314ec:	d0da      	beq.n	314a4 <sendPacket+0x18>
   314ee:	e000      	b.n	314f2 <sendPacket+0x66>
            break;
   314f0:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   314f2:	693a      	ldr	r2, [r7, #16]
   314f4:	68bb      	ldr	r3, [r7, #8]
   314f6:	429a      	cmp	r2, r3
   314f8:	d10b      	bne.n	31512 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   314fa:	68fb      	ldr	r3, [r7, #12]
   314fc:	3354      	adds	r3, #84	; 0x54
   314fe:	001a      	movs	r2, r3
   31500:	68fb      	ldr	r3, [r7, #12]
   31502:	699b      	ldr	r3, [r3, #24]
   31504:	0019      	movs	r1, r3
   31506:	0010      	movs	r0, r2
   31508:	4b08      	ldr	r3, [pc, #32]	; (3152c <sendPacket+0xa0>)
   3150a:	4798      	blx	r3
        rc = SUCCESS;
   3150c:	2300      	movs	r3, #0
   3150e:	617b      	str	r3, [r7, #20]
   31510:	e002      	b.n	31518 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   31512:	2301      	movs	r3, #1
   31514:	425b      	negs	r3, r3
   31516:	617b      	str	r3, [r7, #20]
    return rc;
   31518:	697b      	ldr	r3, [r7, #20]
}
   3151a:	0018      	movs	r0, r3
   3151c:	46bd      	mov	sp, r7
   3151e:	b007      	add	sp, #28
   31520:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31522:	46c0      	nop			; (mov r8, r8)
   31524:	000322ed 	.word	0x000322ed
   31528:	00032271 	.word	0x00032271
   3152c:	000322c5 	.word	0x000322c5

00031530 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   31530:	b580      	push	{r7, lr}
   31532:	b086      	sub	sp, #24
   31534:	af00      	add	r7, sp, #0
   31536:	60f8      	str	r0, [r7, #12]
   31538:	60b9      	str	r1, [r7, #8]
   3153a:	607a      	str	r2, [r7, #4]
   3153c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   3153e:	68fb      	ldr	r3, [r7, #12]
   31540:	68ba      	ldr	r2, [r7, #8]
   31542:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31544:	2300      	movs	r3, #0
   31546:	617b      	str	r3, [r7, #20]
   31548:	e00a      	b.n	31560 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   3154a:	68fa      	ldr	r2, [r7, #12]
   3154c:	697b      	ldr	r3, [r7, #20]
   3154e:	3304      	adds	r3, #4
   31550:	00db      	lsls	r3, r3, #3
   31552:	18d3      	adds	r3, r2, r3
   31554:	3304      	adds	r3, #4
   31556:	2200      	movs	r2, #0
   31558:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   3155a:	697b      	ldr	r3, [r7, #20]
   3155c:	3301      	adds	r3, #1
   3155e:	617b      	str	r3, [r7, #20]
   31560:	697b      	ldr	r3, [r7, #20]
   31562:	2b04      	cmp	r3, #4
   31564:	ddf1      	ble.n	3154a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   31566:	68fb      	ldr	r3, [r7, #12]
   31568:	687a      	ldr	r2, [r7, #4]
   3156a:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   3156c:	68fb      	ldr	r3, [r7, #12]
   3156e:	683a      	ldr	r2, [r7, #0]
   31570:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   31572:	68fb      	ldr	r3, [r7, #12]
   31574:	6a3a      	ldr	r2, [r7, #32]
   31576:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   31578:	68fb      	ldr	r3, [r7, #12]
   3157a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3157c:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   3157e:	68fb      	ldr	r3, [r7, #12]
   31580:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31582:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   31584:	68fb      	ldr	r3, [r7, #12]
   31586:	2200      	movs	r2, #0
   31588:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   3158a:	68fb      	ldr	r3, [r7, #12]
   3158c:	2200      	movs	r2, #0
   3158e:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   31590:	68fb      	ldr	r3, [r7, #12]
   31592:	2200      	movs	r2, #0
   31594:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   31596:	68fb      	ldr	r3, [r7, #12]
   31598:	2201      	movs	r2, #1
   3159a:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   3159c:	68fb      	ldr	r3, [r7, #12]
   3159e:	3354      	adds	r3, #84	; 0x54
   315a0:	0018      	movs	r0, r3
   315a2:	4b03      	ldr	r3, [pc, #12]	; (315b0 <MQTTClientInit+0x80>)
   315a4:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   315a6:	46c0      	nop			; (mov r8, r8)
   315a8:	46bd      	mov	sp, r7
   315aa:	b006      	add	sp, #24
   315ac:	bd80      	pop	{r7, pc}
   315ae:	46c0      	nop			; (mov r8, r8)
   315b0:	00032315 	.word	0x00032315

000315b4 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   315b4:	b590      	push	{r4, r7, lr}
   315b6:	b08b      	sub	sp, #44	; 0x2c
   315b8:	af00      	add	r7, sp, #0
   315ba:	60f8      	str	r0, [r7, #12]
   315bc:	60b9      	str	r1, [r7, #8]
   315be:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   315c0:	2301      	movs	r3, #1
   315c2:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   315c4:	2300      	movs	r3, #0
   315c6:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   315c8:	2304      	movs	r3, #4
   315ca:	61fb      	str	r3, [r7, #28]

    *value = 0;
   315cc:	68bb      	ldr	r3, [r7, #8]
   315ce:	2200      	movs	r2, #0
   315d0:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   315d2:	2301      	movs	r3, #1
   315d4:	425b      	negs	r3, r3
   315d6:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   315d8:	6a3b      	ldr	r3, [r7, #32]
   315da:	3301      	adds	r3, #1
   315dc:	623b      	str	r3, [r7, #32]
   315de:	6a3a      	ldr	r2, [r7, #32]
   315e0:	69fb      	ldr	r3, [r7, #28]
   315e2:	429a      	cmp	r2, r3
   315e4:	dd03      	ble.n	315ee <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   315e6:	2301      	movs	r3, #1
   315e8:	425b      	negs	r3, r3
   315ea:	61bb      	str	r3, [r7, #24]
            goto exit;
   315ec:	e026      	b.n	3163c <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   315ee:	68fb      	ldr	r3, [r7, #12]
   315f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   315f2:	689c      	ldr	r4, [r3, #8]
   315f4:	68fb      	ldr	r3, [r7, #12]
   315f6:	6d18      	ldr	r0, [r3, #80]	; 0x50
   315f8:	687b      	ldr	r3, [r7, #4]
   315fa:	2217      	movs	r2, #23
   315fc:	18b9      	adds	r1, r7, r2
   315fe:	2201      	movs	r2, #1
   31600:	47a0      	blx	r4
   31602:	0003      	movs	r3, r0
   31604:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   31606:	69bb      	ldr	r3, [r7, #24]
   31608:	2b01      	cmp	r3, #1
   3160a:	d116      	bne.n	3163a <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   3160c:	68bb      	ldr	r3, [r7, #8]
   3160e:	681a      	ldr	r2, [r3, #0]
   31610:	2317      	movs	r3, #23
   31612:	18fb      	adds	r3, r7, r3
   31614:	781b      	ldrb	r3, [r3, #0]
   31616:	0019      	movs	r1, r3
   31618:	237f      	movs	r3, #127	; 0x7f
   3161a:	400b      	ands	r3, r1
   3161c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   3161e:	434b      	muls	r3, r1
   31620:	18d2      	adds	r2, r2, r3
   31622:	68bb      	ldr	r3, [r7, #8]
   31624:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   31626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31628:	01db      	lsls	r3, r3, #7
   3162a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   3162c:	2317      	movs	r3, #23
   3162e:	18fb      	adds	r3, r7, r3
   31630:	781b      	ldrb	r3, [r3, #0]
   31632:	b25b      	sxtb	r3, r3
   31634:	2b00      	cmp	r3, #0
   31636:	dbcc      	blt.n	315d2 <decodePacket+0x1e>
   31638:	e000      	b.n	3163c <decodePacket+0x88>
            goto exit;
   3163a:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   3163c:	6a3b      	ldr	r3, [r7, #32]
}
   3163e:	0018      	movs	r0, r3
   31640:	46bd      	mov	sp, r7
   31642:	b00b      	add	sp, #44	; 0x2c
   31644:	bd90      	pop	{r4, r7, pc}
	...

00031648 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   31648:	b5f0      	push	{r4, r5, r6, r7, lr}
   3164a:	46c6      	mov	lr, r8
   3164c:	b500      	push	{lr}
   3164e:	b086      	sub	sp, #24
   31650:	af00      	add	r7, sp, #0
   31652:	6078      	str	r0, [r7, #4]
   31654:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   31656:	2301      	movs	r3, #1
   31658:	425b      	negs	r3, r3
   3165a:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   3165c:	2300      	movs	r3, #0
   3165e:	60fb      	str	r3, [r7, #12]
    int len = 0;
   31660:	2300      	movs	r3, #0
   31662:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   31664:	2300      	movs	r3, #0
   31666:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   31668:	687b      	ldr	r3, [r7, #4]
   3166a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   3166c:	689c      	ldr	r4, [r3, #8]
   3166e:	687b      	ldr	r3, [r7, #4]
   31670:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   31672:	687b      	ldr	r3, [r7, #4]
   31674:	695e      	ldr	r6, [r3, #20]
   31676:	683b      	ldr	r3, [r7, #0]
   31678:	0018      	movs	r0, r3
   3167a:	4b2b      	ldr	r3, [pc, #172]	; (31728 <readPacket+0xe0>)
   3167c:	4798      	blx	r3
   3167e:	0003      	movs	r3, r0
   31680:	2201      	movs	r2, #1
   31682:	0031      	movs	r1, r6
   31684:	0028      	movs	r0, r5
   31686:	47a0      	blx	r4
   31688:	0003      	movs	r3, r0
   3168a:	2b01      	cmp	r3, #1
   3168c:	d141      	bne.n	31712 <readPacket+0xca>
        goto exit;

    len = 1;
   3168e:	2301      	movs	r3, #1
   31690:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   31692:	683b      	ldr	r3, [r7, #0]
   31694:	0018      	movs	r0, r3
   31696:	4b24      	ldr	r3, [pc, #144]	; (31728 <readPacket+0xe0>)
   31698:	4798      	blx	r3
   3169a:	0002      	movs	r2, r0
   3169c:	2308      	movs	r3, #8
   3169e:	18f9      	adds	r1, r7, r3
   316a0:	687b      	ldr	r3, [r7, #4]
   316a2:	0018      	movs	r0, r3
   316a4:	4b21      	ldr	r3, [pc, #132]	; (3172c <readPacket+0xe4>)
   316a6:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   316a8:	687b      	ldr	r3, [r7, #4]
   316aa:	695b      	ldr	r3, [r3, #20]
   316ac:	3301      	adds	r3, #1
   316ae:	68ba      	ldr	r2, [r7, #8]
   316b0:	0011      	movs	r1, r2
   316b2:	0018      	movs	r0, r3
   316b4:	4b1e      	ldr	r3, [pc, #120]	; (31730 <readPacket+0xe8>)
   316b6:	4798      	blx	r3
   316b8:	0002      	movs	r2, r0
   316ba:	693b      	ldr	r3, [r7, #16]
   316bc:	189b      	adds	r3, r3, r2
   316be:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   316c0:	68bb      	ldr	r3, [r7, #8]
   316c2:	2b00      	cmp	r3, #0
   316c4:	dd17      	ble.n	316f6 <readPacket+0xae>
   316c6:	687b      	ldr	r3, [r7, #4]
   316c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   316ca:	689c      	ldr	r4, [r3, #8]
   316cc:	687b      	ldr	r3, [r7, #4]
   316ce:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   316d0:	687b      	ldr	r3, [r7, #4]
   316d2:	695a      	ldr	r2, [r3, #20]
   316d4:	693b      	ldr	r3, [r7, #16]
   316d6:	18d6      	adds	r6, r2, r3
   316d8:	68bb      	ldr	r3, [r7, #8]
   316da:	4698      	mov	r8, r3
   316dc:	683b      	ldr	r3, [r7, #0]
   316de:	0018      	movs	r0, r3
   316e0:	4b11      	ldr	r3, [pc, #68]	; (31728 <readPacket+0xe0>)
   316e2:	4798      	blx	r3
   316e4:	0003      	movs	r3, r0
   316e6:	4642      	mov	r2, r8
   316e8:	0031      	movs	r1, r6
   316ea:	0028      	movs	r0, r5
   316ec:	47a0      	blx	r4
   316ee:	0002      	movs	r2, r0
   316f0:	68bb      	ldr	r3, [r7, #8]
   316f2:	429a      	cmp	r2, r3
   316f4:	d10f      	bne.n	31716 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   316f6:	687b      	ldr	r3, [r7, #4]
   316f8:	695b      	ldr	r3, [r3, #20]
   316fa:	781a      	ldrb	r2, [r3, #0]
   316fc:	230c      	movs	r3, #12
   316fe:	18fb      	adds	r3, r7, r3
   31700:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   31702:	230c      	movs	r3, #12
   31704:	18fb      	adds	r3, r7, r3
   31706:	781b      	ldrb	r3, [r3, #0]
   31708:	061b      	lsls	r3, r3, #24
   3170a:	0f1b      	lsrs	r3, r3, #28
   3170c:	b2db      	uxtb	r3, r3
   3170e:	617b      	str	r3, [r7, #20]
   31710:	e002      	b.n	31718 <readPacket+0xd0>
        goto exit;
   31712:	46c0      	nop			; (mov r8, r8)
   31714:	e000      	b.n	31718 <readPacket+0xd0>
        goto exit;
   31716:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   31718:	697b      	ldr	r3, [r7, #20]
}
   3171a:	0018      	movs	r0, r3
   3171c:	46bd      	mov	sp, r7
   3171e:	b006      	add	sp, #24
   31720:	bc04      	pop	{r2}
   31722:	4690      	mov	r8, r2
   31724:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31726:	46c0      	nop			; (mov r8, r8)
   31728:	000322ed 	.word	0x000322ed
   3172c:	000315b5 	.word	0x000315b5
   31730:	000330c5 	.word	0x000330c5

00031734 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   31734:	b580      	push	{r7, lr}
   31736:	b086      	sub	sp, #24
   31738:	af00      	add	r7, sp, #0
   3173a:	6078      	str	r0, [r7, #4]
   3173c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   3173e:	687b      	ldr	r3, [r7, #4]
   31740:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   31742:	683b      	ldr	r3, [r7, #0]
   31744:	689b      	ldr	r3, [r3, #8]
   31746:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   31748:	683b      	ldr	r3, [r7, #0]
   3174a:	685b      	ldr	r3, [r3, #4]
   3174c:	001a      	movs	r2, r3
   3174e:	693b      	ldr	r3, [r7, #16]
   31750:	189b      	adds	r3, r3, r2
   31752:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   31754:	e039      	b.n	317ca <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   31756:	693b      	ldr	r3, [r7, #16]
   31758:	781b      	ldrb	r3, [r3, #0]
   3175a:	2b2f      	cmp	r3, #47	; 0x2f
   3175c:	d103      	bne.n	31766 <isTopicMatched+0x32>
   3175e:	697b      	ldr	r3, [r7, #20]
   31760:	781b      	ldrb	r3, [r3, #0]
   31762:	2b2f      	cmp	r3, #47	; 0x2f
   31764:	d13a      	bne.n	317dc <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   31766:	697b      	ldr	r3, [r7, #20]
   31768:	781b      	ldrb	r3, [r3, #0]
   3176a:	2b2b      	cmp	r3, #43	; 0x2b
   3176c:	d009      	beq.n	31782 <isTopicMatched+0x4e>
   3176e:	697b      	ldr	r3, [r7, #20]
   31770:	781b      	ldrb	r3, [r3, #0]
   31772:	2b23      	cmp	r3, #35	; 0x23
   31774:	d005      	beq.n	31782 <isTopicMatched+0x4e>
   31776:	697b      	ldr	r3, [r7, #20]
   31778:	781a      	ldrb	r2, [r3, #0]
   3177a:	693b      	ldr	r3, [r7, #16]
   3177c:	781b      	ldrb	r3, [r3, #0]
   3177e:	429a      	cmp	r2, r3
   31780:	d12e      	bne.n	317e0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   31782:	697b      	ldr	r3, [r7, #20]
   31784:	781b      	ldrb	r3, [r3, #0]
   31786:	2b2b      	cmp	r3, #43	; 0x2b
   31788:	d112      	bne.n	317b0 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   3178a:	693b      	ldr	r3, [r7, #16]
   3178c:	3301      	adds	r3, #1
   3178e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   31790:	e005      	b.n	3179e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   31792:	693b      	ldr	r3, [r7, #16]
   31794:	3301      	adds	r3, #1
   31796:	613b      	str	r3, [r7, #16]
   31798:	693b      	ldr	r3, [r7, #16]
   3179a:	3301      	adds	r3, #1
   3179c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   3179e:	68fa      	ldr	r2, [r7, #12]
   317a0:	68bb      	ldr	r3, [r7, #8]
   317a2:	429a      	cmp	r2, r3
   317a4:	d20b      	bcs.n	317be <isTopicMatched+0x8a>
   317a6:	68fb      	ldr	r3, [r7, #12]
   317a8:	781b      	ldrb	r3, [r3, #0]
   317aa:	2b2f      	cmp	r3, #47	; 0x2f
   317ac:	d1f1      	bne.n	31792 <isTopicMatched+0x5e>
   317ae:	e006      	b.n	317be <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   317b0:	697b      	ldr	r3, [r7, #20]
   317b2:	781b      	ldrb	r3, [r3, #0]
   317b4:	2b23      	cmp	r3, #35	; 0x23
   317b6:	d102      	bne.n	317be <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   317b8:	68bb      	ldr	r3, [r7, #8]
   317ba:	3b01      	subs	r3, #1
   317bc:	613b      	str	r3, [r7, #16]
        curf++;
   317be:	697b      	ldr	r3, [r7, #20]
   317c0:	3301      	adds	r3, #1
   317c2:	617b      	str	r3, [r7, #20]
        curn++;
   317c4:	693b      	ldr	r3, [r7, #16]
   317c6:	3301      	adds	r3, #1
   317c8:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   317ca:	697b      	ldr	r3, [r7, #20]
   317cc:	781b      	ldrb	r3, [r3, #0]
   317ce:	2b00      	cmp	r3, #0
   317d0:	d007      	beq.n	317e2 <isTopicMatched+0xae>
   317d2:	693a      	ldr	r2, [r7, #16]
   317d4:	68bb      	ldr	r3, [r7, #8]
   317d6:	429a      	cmp	r2, r3
   317d8:	d3bd      	bcc.n	31756 <isTopicMatched+0x22>
   317da:	e002      	b.n	317e2 <isTopicMatched+0xae>
            break;
   317dc:	46c0      	nop			; (mov r8, r8)
   317de:	e000      	b.n	317e2 <isTopicMatched+0xae>
            break;
   317e0:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   317e2:	693a      	ldr	r2, [r7, #16]
   317e4:	68bb      	ldr	r3, [r7, #8]
   317e6:	429a      	cmp	r2, r3
   317e8:	d105      	bne.n	317f6 <isTopicMatched+0xc2>
   317ea:	697b      	ldr	r3, [r7, #20]
   317ec:	781b      	ldrb	r3, [r3, #0]
   317ee:	2b00      	cmp	r3, #0
   317f0:	d101      	bne.n	317f6 <isTopicMatched+0xc2>
   317f2:	2301      	movs	r3, #1
   317f4:	e000      	b.n	317f8 <isTopicMatched+0xc4>
   317f6:	2300      	movs	r3, #0
   317f8:	b2db      	uxtb	r3, r3
}
   317fa:	0018      	movs	r0, r3
   317fc:	46bd      	mov	sp, r7
   317fe:	b006      	add	sp, #24
   31800:	bd80      	pop	{r7, pc}
	...

00031804 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   31804:	b580      	push	{r7, lr}
   31806:	b08a      	sub	sp, #40	; 0x28
   31808:	af00      	add	r7, sp, #0
   3180a:	60f8      	str	r0, [r7, #12]
   3180c:	60b9      	str	r1, [r7, #8]
   3180e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   31810:	2301      	movs	r3, #1
   31812:	425b      	negs	r3, r3
   31814:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31816:	2300      	movs	r3, #0
   31818:	627b      	str	r3, [r7, #36]	; 0x24
   3181a:	e044      	b.n	318a6 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   3181c:	68fa      	ldr	r2, [r7, #12]
   3181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31820:	3304      	adds	r3, #4
   31822:	00db      	lsls	r3, r3, #3
   31824:	18d3      	adds	r3, r2, r3
   31826:	3304      	adds	r3, #4
   31828:	681b      	ldr	r3, [r3, #0]
   3182a:	2b00      	cmp	r3, #0
   3182c:	d038      	beq.n	318a0 <deliverMessage+0x9c>
   3182e:	68fa      	ldr	r2, [r7, #12]
   31830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31832:	3304      	adds	r3, #4
   31834:	00db      	lsls	r3, r3, #3
   31836:	18d3      	adds	r3, r2, r3
   31838:	3304      	adds	r3, #4
   3183a:	681a      	ldr	r2, [r3, #0]
   3183c:	68bb      	ldr	r3, [r7, #8]
   3183e:	0011      	movs	r1, r2
   31840:	0018      	movs	r0, r3
   31842:	4b28      	ldr	r3, [pc, #160]	; (318e4 <deliverMessage+0xe0>)
   31844:	4798      	blx	r3
   31846:	1e03      	subs	r3, r0, #0
   31848:	d10d      	bne.n	31866 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   3184a:	68fa      	ldr	r2, [r7, #12]
   3184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3184e:	3304      	adds	r3, #4
   31850:	00db      	lsls	r3, r3, #3
   31852:	18d3      	adds	r3, r2, r3
   31854:	3304      	adds	r3, #4
   31856:	681b      	ldr	r3, [r3, #0]
   31858:	68ba      	ldr	r2, [r7, #8]
   3185a:	0011      	movs	r1, r2
   3185c:	0018      	movs	r0, r3
   3185e:	4b22      	ldr	r3, [pc, #136]	; (318e8 <deliverMessage+0xe4>)
   31860:	4798      	blx	r3
   31862:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   31864:	d01c      	beq.n	318a0 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   31866:	68fa      	ldr	r2, [r7, #12]
   31868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3186a:	3304      	adds	r3, #4
   3186c:	00db      	lsls	r3, r3, #3
   3186e:	18d3      	adds	r3, r2, r3
   31870:	3308      	adds	r3, #8
   31872:	681b      	ldr	r3, [r3, #0]
   31874:	2b00      	cmp	r3, #0
   31876:	d013      	beq.n	318a0 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   31878:	687a      	ldr	r2, [r7, #4]
   3187a:	68b9      	ldr	r1, [r7, #8]
   3187c:	2318      	movs	r3, #24
   3187e:	18fb      	adds	r3, r7, r3
   31880:	0018      	movs	r0, r3
   31882:	4b1a      	ldr	r3, [pc, #104]	; (318ec <deliverMessage+0xe8>)
   31884:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   31886:	68fa      	ldr	r2, [r7, #12]
   31888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3188a:	3304      	adds	r3, #4
   3188c:	00db      	lsls	r3, r3, #3
   3188e:	18d3      	adds	r3, r2, r3
   31890:	3308      	adds	r3, #8
   31892:	681b      	ldr	r3, [r3, #0]
   31894:	2218      	movs	r2, #24
   31896:	18ba      	adds	r2, r7, r2
   31898:	0010      	movs	r0, r2
   3189a:	4798      	blx	r3
                rc = SUCCESS;
   3189c:	2300      	movs	r3, #0
   3189e:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   318a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318a2:	3301      	adds	r3, #1
   318a4:	627b      	str	r3, [r7, #36]	; 0x24
   318a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318a8:	2b04      	cmp	r3, #4
   318aa:	ddb7      	ble.n	3181c <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   318ac:	6a3b      	ldr	r3, [r7, #32]
   318ae:	3301      	adds	r3, #1
   318b0:	d112      	bne.n	318d8 <deliverMessage+0xd4>
   318b2:	68fb      	ldr	r3, [r7, #12]
   318b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318b6:	2b00      	cmp	r3, #0
   318b8:	d00e      	beq.n	318d8 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   318ba:	687a      	ldr	r2, [r7, #4]
   318bc:	68b9      	ldr	r1, [r7, #8]
   318be:	2310      	movs	r3, #16
   318c0:	18fb      	adds	r3, r7, r3
   318c2:	0018      	movs	r0, r3
   318c4:	4b09      	ldr	r3, [pc, #36]	; (318ec <deliverMessage+0xe8>)
   318c6:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   318c8:	68fb      	ldr	r3, [r7, #12]
   318ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318cc:	2210      	movs	r2, #16
   318ce:	18ba      	adds	r2, r7, r2
   318d0:	0010      	movs	r0, r2
   318d2:	4798      	blx	r3
        rc = SUCCESS;
   318d4:	2300      	movs	r3, #0
   318d6:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   318d8:	6a3b      	ldr	r3, [r7, #32]
}
   318da:	0018      	movs	r0, r3
   318dc:	46bd      	mov	sp, r7
   318de:	b00a      	add	sp, #40	; 0x28
   318e0:	bd80      	pop	{r7, pc}
   318e2:	46c0      	nop			; (mov r8, r8)
   318e4:	000334d9 	.word	0x000334d9
   318e8:	00031735 	.word	0x00031735
   318ec:	0003143d 	.word	0x0003143d

000318f0 <keepalive>:


int keepalive(MQTTClient* c)
{
   318f0:	b580      	push	{r7, lr}
   318f2:	b088      	sub	sp, #32
   318f4:	af00      	add	r7, sp, #0
   318f6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   318f8:	2301      	movs	r3, #1
   318fa:	425b      	negs	r3, r3
   318fc:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   318fe:	687b      	ldr	r3, [r7, #4]
   31900:	699b      	ldr	r3, [r3, #24]
   31902:	2b00      	cmp	r3, #0
   31904:	d102      	bne.n	3190c <keepalive+0x1c>
    {
        rc = SUCCESS;
   31906:	2300      	movs	r3, #0
   31908:	61fb      	str	r3, [r7, #28]
        goto exit;
   3190a:	e033      	b.n	31974 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   3190c:	687b      	ldr	r3, [r7, #4]
   3190e:	3354      	adds	r3, #84	; 0x54
   31910:	0018      	movs	r0, r3
   31912:	4b1b      	ldr	r3, [pc, #108]	; (31980 <keepalive+0x90>)
   31914:	4798      	blx	r3
   31916:	1e03      	subs	r3, r0, #0
   31918:	d02c      	beq.n	31974 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   3191a:	687b      	ldr	r3, [r7, #4]
   3191c:	7f1b      	ldrb	r3, [r3, #28]
   3191e:	2b00      	cmp	r3, #0
   31920:	d128      	bne.n	31974 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   31922:	230c      	movs	r3, #12
   31924:	18fb      	adds	r3, r7, r3
   31926:	0018      	movs	r0, r3
   31928:	4b16      	ldr	r3, [pc, #88]	; (31984 <keepalive+0x94>)
   3192a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   3192c:	23fa      	movs	r3, #250	; 0xfa
   3192e:	009a      	lsls	r2, r3, #2
   31930:	230c      	movs	r3, #12
   31932:	18fb      	adds	r3, r7, r3
   31934:	0011      	movs	r1, r2
   31936:	0018      	movs	r0, r3
   31938:	4b13      	ldr	r3, [pc, #76]	; (31988 <keepalive+0x98>)
   3193a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   3193c:	687b      	ldr	r3, [r7, #4]
   3193e:	691a      	ldr	r2, [r3, #16]
   31940:	687b      	ldr	r3, [r7, #4]
   31942:	689b      	ldr	r3, [r3, #8]
   31944:	0019      	movs	r1, r3
   31946:	0010      	movs	r0, r2
   31948:	4b10      	ldr	r3, [pc, #64]	; (3198c <keepalive+0x9c>)
   3194a:	4798      	blx	r3
   3194c:	0003      	movs	r3, r0
   3194e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   31950:	69bb      	ldr	r3, [r7, #24]
   31952:	2b00      	cmp	r3, #0
   31954:	dd0e      	ble.n	31974 <keepalive+0x84>
   31956:	230c      	movs	r3, #12
   31958:	18fa      	adds	r2, r7, r3
   3195a:	69b9      	ldr	r1, [r7, #24]
   3195c:	687b      	ldr	r3, [r7, #4]
   3195e:	0018      	movs	r0, r3
   31960:	4b0b      	ldr	r3, [pc, #44]	; (31990 <keepalive+0xa0>)
   31962:	4798      	blx	r3
   31964:	0003      	movs	r3, r0
   31966:	61fb      	str	r3, [r7, #28]
   31968:	69fb      	ldr	r3, [r7, #28]
   3196a:	2b00      	cmp	r3, #0
   3196c:	d102      	bne.n	31974 <keepalive+0x84>
                c->ping_outstanding = 1;
   3196e:	687b      	ldr	r3, [r7, #4]
   31970:	2201      	movs	r2, #1
   31972:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   31974:	69fb      	ldr	r3, [r7, #28]
}
   31976:	0018      	movs	r0, r3
   31978:	46bd      	mov	sp, r7
   3197a:	b008      	add	sp, #32
   3197c:	bd80      	pop	{r7, pc}
   3197e:	46c0      	nop			; (mov r8, r8)
   31980:	00032271 	.word	0x00032271
   31984:	00032315 	.word	0x00032315
   31988:	0003229d 	.word	0x0003229d
   3198c:	00032ee9 	.word	0x00032ee9
   31990:	0003148d 	.word	0x0003148d

00031994 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   31994:	b5f0      	push	{r4, r5, r6, r7, lr}
   31996:	b095      	sub	sp, #84	; 0x54
   31998:	af06      	add	r7, sp, #24
   3199a:	6078      	str	r0, [r7, #4]
   3199c:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   3199e:	683a      	ldr	r2, [r7, #0]
   319a0:	687b      	ldr	r3, [r7, #4]
   319a2:	0011      	movs	r1, r2
   319a4:	0018      	movs	r0, r3
   319a6:	4b70      	ldr	r3, [pc, #448]	; (31b68 <cycle+0x1d4>)
   319a8:	4798      	blx	r3
   319aa:	0002      	movs	r2, r0
   319ac:	232e      	movs	r3, #46	; 0x2e
   319ae:	18fb      	adds	r3, r7, r3
   319b0:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   319b2:	2300      	movs	r3, #0
   319b4:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   319b6:	2300      	movs	r3, #0
   319b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   319ba:	232e      	movs	r3, #46	; 0x2e
   319bc:	18fb      	adds	r3, r7, r3
   319be:	881b      	ldrh	r3, [r3, #0]
   319c0:	2b0d      	cmp	r3, #13
   319c2:	d900      	bls.n	319c6 <cycle+0x32>
   319c4:	e0bd      	b.n	31b42 <cycle+0x1ae>
   319c6:	009a      	lsls	r2, r3, #2
   319c8:	4b68      	ldr	r3, [pc, #416]	; (31b6c <cycle+0x1d8>)
   319ca:	18d3      	adds	r3, r2, r3
   319cc:	681b      	ldr	r3, [r3, #0]
   319ce:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   319d0:	687b      	ldr	r3, [r7, #4]
   319d2:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   319d4:	687b      	ldr	r3, [r7, #4]
   319d6:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   319d8:	001e      	movs	r6, r3
   319da:	2310      	movs	r3, #16
   319dc:	18fb      	adds	r3, r7, r3
   319de:	1d1d      	adds	r5, r3, #4
   319e0:	2310      	movs	r3, #16
   319e2:	18fb      	adds	r3, r7, r3
   319e4:	1c5c      	adds	r4, r3, #1
   319e6:	230c      	movs	r3, #12
   319e8:	18f9      	adds	r1, r7, r3
   319ea:	2310      	movs	r3, #16
   319ec:	18fb      	adds	r3, r7, r3
   319ee:	1c98      	adds	r0, r3, #2
   319f0:	9604      	str	r6, [sp, #16]
   319f2:	9203      	str	r2, [sp, #12]
   319f4:	2310      	movs	r3, #16
   319f6:	18fb      	adds	r3, r7, r3
   319f8:	330c      	adds	r3, #12
   319fa:	9302      	str	r3, [sp, #8]
   319fc:	2310      	movs	r3, #16
   319fe:	18fb      	adds	r3, r7, r3
   31a00:	3308      	adds	r3, #8
   31a02:	9301      	str	r3, [sp, #4]
   31a04:	2320      	movs	r3, #32
   31a06:	18fb      	adds	r3, r7, r3
   31a08:	9300      	str	r3, [sp, #0]
   31a0a:	002b      	movs	r3, r5
   31a0c:	0022      	movs	r2, r4
   31a0e:	4c58      	ldr	r4, [pc, #352]	; (31b70 <cycle+0x1dc>)
   31a10:	47a0      	blx	r4
   31a12:	0003      	movs	r3, r0
   31a14:	2b01      	cmp	r3, #1
   31a16:	d000      	beq.n	31a1a <cycle+0x86>
   31a18:	e098      	b.n	31b4c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   31a1a:	68fb      	ldr	r3, [r7, #12]
   31a1c:	b2da      	uxtb	r2, r3
   31a1e:	2310      	movs	r3, #16
   31a20:	18fb      	adds	r3, r7, r3
   31a22:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   31a24:	2310      	movs	r3, #16
   31a26:	18fa      	adds	r2, r7, r3
   31a28:	2320      	movs	r3, #32
   31a2a:	18f9      	adds	r1, r7, r3
   31a2c:	687b      	ldr	r3, [r7, #4]
   31a2e:	0018      	movs	r0, r3
   31a30:	4b50      	ldr	r3, [pc, #320]	; (31b74 <cycle+0x1e0>)
   31a32:	4798      	blx	r3
            if (msg.qos != QOS0)
   31a34:	2310      	movs	r3, #16
   31a36:	18fb      	adds	r3, r7, r3
   31a38:	781b      	ldrb	r3, [r3, #0]
   31a3a:	2b00      	cmp	r3, #0
   31a3c:	d100      	bne.n	31a40 <cycle+0xac>
   31a3e:	e07d      	b.n	31b3c <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   31a40:	2310      	movs	r3, #16
   31a42:	18fb      	adds	r3, r7, r3
   31a44:	781b      	ldrb	r3, [r3, #0]
   31a46:	2b01      	cmp	r3, #1
   31a48:	d10f      	bne.n	31a6a <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   31a4a:	687b      	ldr	r3, [r7, #4]
   31a4c:	6918      	ldr	r0, [r3, #16]
   31a4e:	687b      	ldr	r3, [r7, #4]
   31a50:	689b      	ldr	r3, [r3, #8]
   31a52:	0019      	movs	r1, r3
   31a54:	2310      	movs	r3, #16
   31a56:	18fb      	adds	r3, r7, r3
   31a58:	889b      	ldrh	r3, [r3, #4]
   31a5a:	9300      	str	r3, [sp, #0]
   31a5c:	2300      	movs	r3, #0
   31a5e:	2204      	movs	r2, #4
   31a60:	4c45      	ldr	r4, [pc, #276]	; (31b78 <cycle+0x1e4>)
   31a62:	47a0      	blx	r4
   31a64:	0003      	movs	r3, r0
   31a66:	637b      	str	r3, [r7, #52]	; 0x34
   31a68:	e013      	b.n	31a92 <cycle+0xfe>
                else if (msg.qos == QOS2)
   31a6a:	2310      	movs	r3, #16
   31a6c:	18fb      	adds	r3, r7, r3
   31a6e:	781b      	ldrb	r3, [r3, #0]
   31a70:	2b02      	cmp	r3, #2
   31a72:	d10e      	bne.n	31a92 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   31a74:	687b      	ldr	r3, [r7, #4]
   31a76:	6918      	ldr	r0, [r3, #16]
   31a78:	687b      	ldr	r3, [r7, #4]
   31a7a:	689b      	ldr	r3, [r3, #8]
   31a7c:	0019      	movs	r1, r3
   31a7e:	2310      	movs	r3, #16
   31a80:	18fb      	adds	r3, r7, r3
   31a82:	889b      	ldrh	r3, [r3, #4]
   31a84:	9300      	str	r3, [sp, #0]
   31a86:	2300      	movs	r3, #0
   31a88:	2205      	movs	r2, #5
   31a8a:	4c3b      	ldr	r4, [pc, #236]	; (31b78 <cycle+0x1e4>)
   31a8c:	47a0      	blx	r4
   31a8e:	0003      	movs	r3, r0
   31a90:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   31a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31a94:	2b00      	cmp	r3, #0
   31a96:	dc03      	bgt.n	31aa0 <cycle+0x10c>
                    rc = FAILURE;
   31a98:	2301      	movs	r3, #1
   31a9a:	425b      	negs	r3, r3
   31a9c:	633b      	str	r3, [r7, #48]	; 0x30
   31a9e:	e007      	b.n	31ab0 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   31aa0:	683a      	ldr	r2, [r7, #0]
   31aa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   31aa4:	687b      	ldr	r3, [r7, #4]
   31aa6:	0018      	movs	r0, r3
   31aa8:	4b34      	ldr	r3, [pc, #208]	; (31b7c <cycle+0x1e8>)
   31aaa:	4798      	blx	r3
   31aac:	0003      	movs	r3, r0
   31aae:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   31ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31ab2:	3301      	adds	r3, #1
   31ab4:	d142      	bne.n	31b3c <cycle+0x1a8>
                    goto exit; // there was a problem
   31ab6:	46c0      	nop			; (mov r8, r8)
   31ab8:	e049      	b.n	31b4e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   31aba:	687b      	ldr	r3, [r7, #4]
   31abc:	695c      	ldr	r4, [r3, #20]
   31abe:	687b      	ldr	r3, [r7, #4]
   31ac0:	68db      	ldr	r3, [r3, #12]
   31ac2:	220a      	movs	r2, #10
   31ac4:	18ba      	adds	r2, r7, r2
   31ac6:	2109      	movs	r1, #9
   31ac8:	1879      	adds	r1, r7, r1
   31aca:	2008      	movs	r0, #8
   31acc:	1838      	adds	r0, r7, r0
   31ace:	9300      	str	r3, [sp, #0]
   31ad0:	0023      	movs	r3, r4
   31ad2:	4c2b      	ldr	r4, [pc, #172]	; (31b80 <cycle+0x1ec>)
   31ad4:	47a0      	blx	r4
   31ad6:	0003      	movs	r3, r0
   31ad8:	2b01      	cmp	r3, #1
   31ada:	d003      	beq.n	31ae4 <cycle+0x150>
                rc = FAILURE;
   31adc:	2301      	movs	r3, #1
   31ade:	425b      	negs	r3, r3
   31ae0:	633b      	str	r3, [r7, #48]	; 0x30
   31ae2:	e023      	b.n	31b2c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   31ae4:	687b      	ldr	r3, [r7, #4]
   31ae6:	6918      	ldr	r0, [r3, #16]
   31ae8:	687b      	ldr	r3, [r7, #4]
   31aea:	689b      	ldr	r3, [r3, #8]
   31aec:	0019      	movs	r1, r3
   31aee:	230a      	movs	r3, #10
   31af0:	18fb      	adds	r3, r7, r3
   31af2:	881b      	ldrh	r3, [r3, #0]
   31af4:	9300      	str	r3, [sp, #0]
   31af6:	2300      	movs	r3, #0
   31af8:	2206      	movs	r2, #6
   31afa:	4c1f      	ldr	r4, [pc, #124]	; (31b78 <cycle+0x1e4>)
   31afc:	47a0      	blx	r4
   31afe:	0003      	movs	r3, r0
   31b00:	637b      	str	r3, [r7, #52]	; 0x34
   31b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31b04:	2b00      	cmp	r3, #0
   31b06:	dc03      	bgt.n	31b10 <cycle+0x17c>
                rc = FAILURE;
   31b08:	2301      	movs	r3, #1
   31b0a:	425b      	negs	r3, r3
   31b0c:	633b      	str	r3, [r7, #48]	; 0x30
   31b0e:	e00d      	b.n	31b2c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   31b10:	683a      	ldr	r2, [r7, #0]
   31b12:	6b79      	ldr	r1, [r7, #52]	; 0x34
   31b14:	687b      	ldr	r3, [r7, #4]
   31b16:	0018      	movs	r0, r3
   31b18:	4b18      	ldr	r3, [pc, #96]	; (31b7c <cycle+0x1e8>)
   31b1a:	4798      	blx	r3
   31b1c:	0003      	movs	r3, r0
   31b1e:	633b      	str	r3, [r7, #48]	; 0x30
   31b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31b22:	2b00      	cmp	r3, #0
   31b24:	d002      	beq.n	31b2c <cycle+0x198>
                rc = FAILURE; // there was a problem
   31b26:	2301      	movs	r3, #1
   31b28:	425b      	negs	r3, r3
   31b2a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   31b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31b2e:	3301      	adds	r3, #1
   31b30:	d106      	bne.n	31b40 <cycle+0x1ac>
                goto exit; // there was a problem
   31b32:	e00c      	b.n	31b4e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   31b34:	687b      	ldr	r3, [r7, #4]
   31b36:	2200      	movs	r2, #0
   31b38:	771a      	strb	r2, [r3, #28]
            break;
   31b3a:	e002      	b.n	31b42 <cycle+0x1ae>
            break;
   31b3c:	46c0      	nop			; (mov r8, r8)
   31b3e:	e000      	b.n	31b42 <cycle+0x1ae>
            break;
   31b40:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   31b42:	687b      	ldr	r3, [r7, #4]
   31b44:	0018      	movs	r0, r3
   31b46:	4b0f      	ldr	r3, [pc, #60]	; (31b84 <cycle+0x1f0>)
   31b48:	4798      	blx	r3
   31b4a:	e000      	b.n	31b4e <cycle+0x1ba>
                goto exit;
   31b4c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   31b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31b50:	2b00      	cmp	r3, #0
   31b52:	d103      	bne.n	31b5c <cycle+0x1c8>
        rc = packet_type;
   31b54:	232e      	movs	r3, #46	; 0x2e
   31b56:	18fb      	adds	r3, r7, r3
   31b58:	881b      	ldrh	r3, [r3, #0]
   31b5a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   31b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   31b5e:	0018      	movs	r0, r3
   31b60:	46bd      	mov	sp, r7
   31b62:	b00f      	add	sp, #60	; 0x3c
   31b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31b66:	46c0      	nop			; (mov r8, r8)
   31b68:	00031649 	.word	0x00031649
   31b6c:	0003e138 	.word	0x0003e138
   31b70:	00032f0d 	.word	0x00032f0d
   31b74:	00031805 	.word	0x00031805
   31b78:	00033705 	.word	0x00033705
   31b7c:	0003148d 	.word	0x0003148d
   31b80:	00033011 	.word	0x00033011
   31b84:	000318f1 	.word	0x000318f1

00031b88 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   31b88:	b580      	push	{r7, lr}
   31b8a:	b086      	sub	sp, #24
   31b8c:	af00      	add	r7, sp, #0
   31b8e:	6078      	str	r0, [r7, #4]
   31b90:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   31b92:	2300      	movs	r3, #0
   31b94:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   31b96:	2308      	movs	r3, #8
   31b98:	18fb      	adds	r3, r7, r3
   31b9a:	0018      	movs	r0, r3
   31b9c:	4b11      	ldr	r3, [pc, #68]	; (31be4 <MQTTYield+0x5c>)
   31b9e:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   31ba0:	683a      	ldr	r2, [r7, #0]
   31ba2:	2308      	movs	r3, #8
   31ba4:	18fb      	adds	r3, r7, r3
   31ba6:	0011      	movs	r1, r2
   31ba8:	0018      	movs	r0, r3
   31baa:	4b0f      	ldr	r3, [pc, #60]	; (31be8 <MQTTYield+0x60>)
   31bac:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   31bae:	2308      	movs	r3, #8
   31bb0:	18fa      	adds	r2, r7, r3
   31bb2:	687b      	ldr	r3, [r7, #4]
   31bb4:	0011      	movs	r1, r2
   31bb6:	0018      	movs	r0, r3
   31bb8:	4b0c      	ldr	r3, [pc, #48]	; (31bec <MQTTYield+0x64>)
   31bba:	4798      	blx	r3
   31bbc:	0003      	movs	r3, r0
   31bbe:	3301      	adds	r3, #1
   31bc0:	d103      	bne.n	31bca <MQTTYield+0x42>
        {
            rc = FAILURE;
   31bc2:	2301      	movs	r3, #1
   31bc4:	425b      	negs	r3, r3
   31bc6:	617b      	str	r3, [r7, #20]
            break;
   31bc8:	e006      	b.n	31bd8 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   31bca:	2308      	movs	r3, #8
   31bcc:	18fb      	adds	r3, r7, r3
   31bce:	0018      	movs	r0, r3
   31bd0:	4b07      	ldr	r3, [pc, #28]	; (31bf0 <MQTTYield+0x68>)
   31bd2:	4798      	blx	r3
   31bd4:	1e03      	subs	r3, r0, #0
   31bd6:	d0ea      	beq.n	31bae <MQTTYield+0x26>
        
    return rc;
   31bd8:	697b      	ldr	r3, [r7, #20]
}
   31bda:	0018      	movs	r0, r3
   31bdc:	46bd      	mov	sp, r7
   31bde:	b006      	add	sp, #24
   31be0:	bd80      	pop	{r7, pc}
   31be2:	46c0      	nop			; (mov r8, r8)
   31be4:	00032315 	.word	0x00032315
   31be8:	0003229d 	.word	0x0003229d
   31bec:	00031995 	.word	0x00031995
   31bf0:	00032271 	.word	0x00032271

00031bf4 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   31bf4:	b580      	push	{r7, lr}
   31bf6:	b086      	sub	sp, #24
   31bf8:	af00      	add	r7, sp, #0
   31bfa:	60f8      	str	r0, [r7, #12]
   31bfc:	60b9      	str	r1, [r7, #8]
   31bfe:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   31c00:	2301      	movs	r3, #1
   31c02:	425b      	negs	r3, r3
   31c04:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   31c06:	687b      	ldr	r3, [r7, #4]
   31c08:	0018      	movs	r0, r3
   31c0a:	4b0b      	ldr	r3, [pc, #44]	; (31c38 <waitfor+0x44>)
   31c0c:	4798      	blx	r3
   31c0e:	1e03      	subs	r3, r0, #0
   31c10:	d10c      	bne.n	31c2c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   31c12:	687a      	ldr	r2, [r7, #4]
   31c14:	68fb      	ldr	r3, [r7, #12]
   31c16:	0011      	movs	r1, r2
   31c18:	0018      	movs	r0, r3
   31c1a:	4b08      	ldr	r3, [pc, #32]	; (31c3c <waitfor+0x48>)
   31c1c:	4798      	blx	r3
   31c1e:	0003      	movs	r3, r0
   31c20:	617b      	str	r3, [r7, #20]
   31c22:	697a      	ldr	r2, [r7, #20]
   31c24:	68bb      	ldr	r3, [r7, #8]
   31c26:	429a      	cmp	r2, r3
   31c28:	d1ed      	bne.n	31c06 <waitfor+0x12>
   31c2a:	e000      	b.n	31c2e <waitfor+0x3a>
            break; // we timed out
   31c2c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   31c2e:	697b      	ldr	r3, [r7, #20]
}
   31c30:	0018      	movs	r0, r3
   31c32:	46bd      	mov	sp, r7
   31c34:	b006      	add	sp, #24
   31c36:	bd80      	pop	{r7, pc}
   31c38:	00032271 	.word	0x00032271
   31c3c:	00031995 	.word	0x00031995

00031c40 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   31c40:	b590      	push	{r4, r7, lr}
   31c42:	b09f      	sub	sp, #124	; 0x7c
   31c44:	af00      	add	r7, sp, #0
   31c46:	6078      	str	r0, [r7, #4]
   31c48:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   31c4a:	2301      	movs	r3, #1
   31c4c:	425b      	negs	r3, r3
   31c4e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   31c50:	230c      	movs	r3, #12
   31c52:	18fa      	adds	r2, r7, r3
   31c54:	4b41      	ldr	r3, [pc, #260]	; (31d5c <MQTTConnect+0x11c>)
   31c56:	0010      	movs	r0, r2
   31c58:	0019      	movs	r1, r3
   31c5a:	2358      	movs	r3, #88	; 0x58
   31c5c:	001a      	movs	r2, r3
   31c5e:	4b40      	ldr	r3, [pc, #256]	; (31d60 <MQTTConnect+0x120>)
   31c60:	4798      	blx	r3
    int len = 0;
   31c62:	2300      	movs	r3, #0
   31c64:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   31c66:	687b      	ldr	r3, [r7, #4]
   31c68:	6a1b      	ldr	r3, [r3, #32]
   31c6a:	2b00      	cmp	r3, #0
   31c6c:	d166      	bne.n	31d3c <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   31c6e:	2364      	movs	r3, #100	; 0x64
   31c70:	18fb      	adds	r3, r7, r3
   31c72:	0018      	movs	r0, r3
   31c74:	4b3b      	ldr	r3, [pc, #236]	; (31d64 <MQTTConnect+0x124>)
   31c76:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   31c78:	687b      	ldr	r3, [r7, #4]
   31c7a:	685a      	ldr	r2, [r3, #4]
   31c7c:	2364      	movs	r3, #100	; 0x64
   31c7e:	18fb      	adds	r3, r7, r3
   31c80:	0011      	movs	r1, r2
   31c82:	0018      	movs	r0, r3
   31c84:	4b38      	ldr	r3, [pc, #224]	; (31d68 <MQTTConnect+0x128>)
   31c86:	4798      	blx	r3

    if (options == 0)
   31c88:	683b      	ldr	r3, [r7, #0]
   31c8a:	2b00      	cmp	r3, #0
   31c8c:	d102      	bne.n	31c94 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   31c8e:	230c      	movs	r3, #12
   31c90:	18fb      	adds	r3, r7, r3
   31c92:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   31c94:	683b      	ldr	r3, [r7, #0]
   31c96:	8b1b      	ldrh	r3, [r3, #24]
   31c98:	001a      	movs	r2, r3
   31c9a:	687b      	ldr	r3, [r7, #4]
   31c9c:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   31c9e:	687b      	ldr	r3, [r7, #4]
   31ca0:	3354      	adds	r3, #84	; 0x54
   31ca2:	001a      	movs	r2, r3
   31ca4:	687b      	ldr	r3, [r7, #4]
   31ca6:	699b      	ldr	r3, [r3, #24]
   31ca8:	0019      	movs	r1, r3
   31caa:	0010      	movs	r0, r2
   31cac:	4b2f      	ldr	r3, [pc, #188]	; (31d6c <MQTTConnect+0x12c>)
   31cae:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   31cb0:	687b      	ldr	r3, [r7, #4]
   31cb2:	6918      	ldr	r0, [r3, #16]
   31cb4:	687b      	ldr	r3, [r7, #4]
   31cb6:	689b      	ldr	r3, [r3, #8]
   31cb8:	0019      	movs	r1, r3
   31cba:	683b      	ldr	r3, [r7, #0]
   31cbc:	001a      	movs	r2, r3
   31cbe:	4b2c      	ldr	r3, [pc, #176]	; (31d70 <MQTTConnect+0x130>)
   31cc0:	4798      	blx	r3
   31cc2:	0003      	movs	r3, r0
   31cc4:	673b      	str	r3, [r7, #112]	; 0x70
   31cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31cc8:	2b00      	cmp	r3, #0
   31cca:	dd39      	ble.n	31d40 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   31ccc:	2364      	movs	r3, #100	; 0x64
   31cce:	18fa      	adds	r2, r7, r3
   31cd0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31cd2:	687b      	ldr	r3, [r7, #4]
   31cd4:	0018      	movs	r0, r3
   31cd6:	4b27      	ldr	r3, [pc, #156]	; (31d74 <MQTTConnect+0x134>)
   31cd8:	4798      	blx	r3
   31cda:	0003      	movs	r3, r0
   31cdc:	677b      	str	r3, [r7, #116]	; 0x74
   31cde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ce0:	2b00      	cmp	r3, #0
   31ce2:	d12f      	bne.n	31d44 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   31ce4:	2364      	movs	r3, #100	; 0x64
   31ce6:	18fa      	adds	r2, r7, r3
   31ce8:	687b      	ldr	r3, [r7, #4]
   31cea:	2102      	movs	r1, #2
   31cec:	0018      	movs	r0, r3
   31cee:	4b22      	ldr	r3, [pc, #136]	; (31d78 <MQTTConnect+0x138>)
   31cf0:	4798      	blx	r3
   31cf2:	0003      	movs	r3, r0
   31cf4:	2b02      	cmp	r3, #2
   31cf6:	d11d      	bne.n	31d34 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   31cf8:	230b      	movs	r3, #11
   31cfa:	18fb      	adds	r3, r7, r3
   31cfc:	22ff      	movs	r2, #255	; 0xff
   31cfe:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   31d00:	230a      	movs	r3, #10
   31d02:	18fb      	adds	r3, r7, r3
   31d04:	2200      	movs	r2, #0
   31d06:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   31d08:	687b      	ldr	r3, [r7, #4]
   31d0a:	695a      	ldr	r2, [r3, #20]
   31d0c:	687b      	ldr	r3, [r7, #4]
   31d0e:	68db      	ldr	r3, [r3, #12]
   31d10:	210b      	movs	r1, #11
   31d12:	1879      	adds	r1, r7, r1
   31d14:	200a      	movs	r0, #10
   31d16:	1838      	adds	r0, r7, r0
   31d18:	4c18      	ldr	r4, [pc, #96]	; (31d7c <MQTTConnect+0x13c>)
   31d1a:	47a0      	blx	r4
   31d1c:	0003      	movs	r3, r0
   31d1e:	2b01      	cmp	r3, #1
   31d20:	d104      	bne.n	31d2c <MQTTConnect+0xec>
            rc = connack_rc;
   31d22:	230b      	movs	r3, #11
   31d24:	18fb      	adds	r3, r7, r3
   31d26:	781b      	ldrb	r3, [r3, #0]
   31d28:	677b      	str	r3, [r7, #116]	; 0x74
   31d2a:	e00c      	b.n	31d46 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   31d2c:	2301      	movs	r3, #1
   31d2e:	425b      	negs	r3, r3
   31d30:	677b      	str	r3, [r7, #116]	; 0x74
   31d32:	e008      	b.n	31d46 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   31d34:	2301      	movs	r3, #1
   31d36:	425b      	negs	r3, r3
   31d38:	677b      	str	r3, [r7, #116]	; 0x74
   31d3a:	e004      	b.n	31d46 <MQTTConnect+0x106>
		goto exit;
   31d3c:	46c0      	nop			; (mov r8, r8)
   31d3e:	e002      	b.n	31d46 <MQTTConnect+0x106>
        goto exit;
   31d40:	46c0      	nop			; (mov r8, r8)
   31d42:	e000      	b.n	31d46 <MQTTConnect+0x106>
        goto exit; // there was a problem
   31d44:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   31d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31d48:	2b00      	cmp	r3, #0
   31d4a:	d102      	bne.n	31d52 <MQTTConnect+0x112>
        c->isconnected = 1;
   31d4c:	687b      	ldr	r3, [r7, #4]
   31d4e:	2201      	movs	r2, #1
   31d50:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   31d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   31d54:	0018      	movs	r0, r3
   31d56:	46bd      	mov	sp, r7
   31d58:	b01f      	add	sp, #124	; 0x7c
   31d5a:	bd90      	pop	{r4, r7, pc}
   31d5c:	0003e170 	.word	0x0003e170
   31d60:	000384d1 	.word	0x000384d1
   31d64:	00032315 	.word	0x00032315
   31d68:	0003229d 	.word	0x0003229d
   31d6c:	000322c5 	.word	0x000322c5
   31d70:	00032af1 	.word	0x00032af1
   31d74:	0003148d 	.word	0x0003148d
   31d78:	00031bf5 	.word	0x00031bf5
   31d7c:	00032d6d 	.word	0x00032d6d

00031d80 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   31d80:	b5b0      	push	{r4, r5, r7, lr}
   31d82:	b096      	sub	sp, #88	; 0x58
   31d84:	af04      	add	r7, sp, #16
   31d86:	60f8      	str	r0, [r7, #12]
   31d88:	60b9      	str	r1, [r7, #8]
   31d8a:	603b      	str	r3, [r7, #0]
   31d8c:	1dfb      	adds	r3, r7, #7
   31d8e:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   31d90:	2301      	movs	r3, #1
   31d92:	425b      	negs	r3, r3
   31d94:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   31d96:	2300      	movs	r3, #0
   31d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   31d9a:	2324      	movs	r3, #36	; 0x24
   31d9c:	18fb      	adds	r3, r7, r3
   31d9e:	2200      	movs	r2, #0
   31da0:	601a      	str	r2, [r3, #0]
   31da2:	2324      	movs	r3, #36	; 0x24
   31da4:	18fb      	adds	r3, r7, r3
   31da6:	2200      	movs	r2, #0
   31da8:	605a      	str	r2, [r3, #4]
   31daa:	2324      	movs	r3, #36	; 0x24
   31dac:	18fb      	adds	r3, r7, r3
   31dae:	2200      	movs	r2, #0
   31db0:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   31db2:	1dfb      	adds	r3, r7, #7
   31db4:	781b      	ldrb	r3, [r3, #0]
   31db6:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   31db8:	2324      	movs	r3, #36	; 0x24
   31dba:	18fb      	adds	r3, r7, r3
   31dbc:	68ba      	ldr	r2, [r7, #8]
   31dbe:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   31dc0:	68fb      	ldr	r3, [r7, #12]
   31dc2:	6a1b      	ldr	r3, [r3, #32]
   31dc4:	2b00      	cmp	r3, #0
   31dc6:	d100      	bne.n	31dca <MQTTSubscribe+0x4a>
   31dc8:	e088      	b.n	31edc <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   31dca:	2330      	movs	r3, #48	; 0x30
   31dcc:	18fb      	adds	r3, r7, r3
   31dce:	0018      	movs	r0, r3
   31dd0:	4b47      	ldr	r3, [pc, #284]	; (31ef0 <MQTTSubscribe+0x170>)
   31dd2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31dd4:	68fb      	ldr	r3, [r7, #12]
   31dd6:	685a      	ldr	r2, [r3, #4]
   31dd8:	2330      	movs	r3, #48	; 0x30
   31dda:	18fb      	adds	r3, r7, r3
   31ddc:	0011      	movs	r1, r2
   31dde:	0018      	movs	r0, r3
   31de0:	4b44      	ldr	r3, [pc, #272]	; (31ef4 <MQTTSubscribe+0x174>)
   31de2:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   31de4:	68fb      	ldr	r3, [r7, #12]
   31de6:	691c      	ldr	r4, [r3, #16]
   31de8:	68fb      	ldr	r3, [r7, #12]
   31dea:	689b      	ldr	r3, [r3, #8]
   31dec:	001d      	movs	r5, r3
   31dee:	68fb      	ldr	r3, [r7, #12]
   31df0:	0018      	movs	r0, r3
   31df2:	4b41      	ldr	r3, [pc, #260]	; (31ef8 <MQTTSubscribe+0x178>)
   31df4:	4798      	blx	r3
   31df6:	0003      	movs	r3, r0
   31df8:	b29a      	uxth	r2, r3
   31dfa:	2320      	movs	r3, #32
   31dfc:	18fb      	adds	r3, r7, r3
   31dfe:	9302      	str	r3, [sp, #8]
   31e00:	2324      	movs	r3, #36	; 0x24
   31e02:	18fb      	adds	r3, r7, r3
   31e04:	9301      	str	r3, [sp, #4]
   31e06:	2301      	movs	r3, #1
   31e08:	9300      	str	r3, [sp, #0]
   31e0a:	0013      	movs	r3, r2
   31e0c:	2200      	movs	r2, #0
   31e0e:	0029      	movs	r1, r5
   31e10:	0020      	movs	r0, r4
   31e12:	4c3a      	ldr	r4, [pc, #232]	; (31efc <MQTTSubscribe+0x17c>)
   31e14:	47a0      	blx	r4
   31e16:	0003      	movs	r3, r0
   31e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   31e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31e1c:	2b00      	cmp	r3, #0
   31e1e:	dd5f      	ble.n	31ee0 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   31e20:	2330      	movs	r3, #48	; 0x30
   31e22:	18fa      	adds	r2, r7, r3
   31e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   31e26:	68fb      	ldr	r3, [r7, #12]
   31e28:	0018      	movs	r0, r3
   31e2a:	4b35      	ldr	r3, [pc, #212]	; (31f00 <MQTTSubscribe+0x180>)
   31e2c:	4798      	blx	r3
   31e2e:	0003      	movs	r3, r0
   31e30:	647b      	str	r3, [r7, #68]	; 0x44
   31e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   31e34:	2b00      	cmp	r3, #0
   31e36:	d155      	bne.n	31ee4 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   31e38:	2330      	movs	r3, #48	; 0x30
   31e3a:	18fa      	adds	r2, r7, r3
   31e3c:	68fb      	ldr	r3, [r7, #12]
   31e3e:	2109      	movs	r1, #9
   31e40:	0018      	movs	r0, r3
   31e42:	4b30      	ldr	r3, [pc, #192]	; (31f04 <MQTTSubscribe+0x184>)
   31e44:	4798      	blx	r3
   31e46:	0003      	movs	r3, r0
   31e48:	2b09      	cmp	r3, #9
   31e4a:	d143      	bne.n	31ed4 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   31e4c:	2300      	movs	r3, #0
   31e4e:	61fb      	str	r3, [r7, #28]
   31e50:	2301      	movs	r3, #1
   31e52:	425b      	negs	r3, r3
   31e54:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   31e56:	68fb      	ldr	r3, [r7, #12]
   31e58:	695a      	ldr	r2, [r3, #20]
   31e5a:	68fb      	ldr	r3, [r7, #12]
   31e5c:	68db      	ldr	r3, [r3, #12]
   31e5e:	001c      	movs	r4, r3
   31e60:	2318      	movs	r3, #24
   31e62:	18fb      	adds	r3, r7, r3
   31e64:	211c      	movs	r1, #28
   31e66:	1879      	adds	r1, r7, r1
   31e68:	2016      	movs	r0, #22
   31e6a:	1838      	adds	r0, r7, r0
   31e6c:	9401      	str	r4, [sp, #4]
   31e6e:	9200      	str	r2, [sp, #0]
   31e70:	000a      	movs	r2, r1
   31e72:	2101      	movs	r1, #1
   31e74:	4c24      	ldr	r4, [pc, #144]	; (31f08 <MQTTSubscribe+0x188>)
   31e76:	47a0      	blx	r4
   31e78:	0003      	movs	r3, r0
   31e7a:	2b01      	cmp	r3, #1
   31e7c:	d101      	bne.n	31e82 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   31e7e:	69bb      	ldr	r3, [r7, #24]
   31e80:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   31e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   31e84:	2b80      	cmp	r3, #128	; 0x80
   31e86:	d02e      	beq.n	31ee6 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31e88:	2300      	movs	r3, #0
   31e8a:	643b      	str	r3, [r7, #64]	; 0x40
   31e8c:	e01e      	b.n	31ecc <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   31e8e:	68fa      	ldr	r2, [r7, #12]
   31e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31e92:	3304      	adds	r3, #4
   31e94:	00db      	lsls	r3, r3, #3
   31e96:	18d3      	adds	r3, r2, r3
   31e98:	3304      	adds	r3, #4
   31e9a:	681b      	ldr	r3, [r3, #0]
   31e9c:	2b00      	cmp	r3, #0
   31e9e:	d112      	bne.n	31ec6 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   31ea0:	68fa      	ldr	r2, [r7, #12]
   31ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31ea4:	3304      	adds	r3, #4
   31ea6:	00db      	lsls	r3, r3, #3
   31ea8:	18d3      	adds	r3, r2, r3
   31eaa:	3304      	adds	r3, #4
   31eac:	68ba      	ldr	r2, [r7, #8]
   31eae:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   31eb0:	68fa      	ldr	r2, [r7, #12]
   31eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31eb4:	3304      	adds	r3, #4
   31eb6:	00db      	lsls	r3, r3, #3
   31eb8:	18d3      	adds	r3, r2, r3
   31eba:	3308      	adds	r3, #8
   31ebc:	683a      	ldr	r2, [r7, #0]
   31ebe:	601a      	str	r2, [r3, #0]
                    rc = 0;
   31ec0:	2300      	movs	r3, #0
   31ec2:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   31ec4:	e00f      	b.n	31ee6 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   31ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31ec8:	3301      	adds	r3, #1
   31eca:	643b      	str	r3, [r7, #64]	; 0x40
   31ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   31ece:	2b04      	cmp	r3, #4
   31ed0:	dddd      	ble.n	31e8e <MQTTSubscribe+0x10e>
   31ed2:	e008      	b.n	31ee6 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   31ed4:	2301      	movs	r3, #1
   31ed6:	425b      	negs	r3, r3
   31ed8:	647b      	str	r3, [r7, #68]	; 0x44
   31eda:	e004      	b.n	31ee6 <MQTTSubscribe+0x166>
		goto exit;
   31edc:	46c0      	nop			; (mov r8, r8)
   31ede:	e002      	b.n	31ee6 <MQTTSubscribe+0x166>
        goto exit;
   31ee0:	46c0      	nop			; (mov r8, r8)
   31ee2:	e000      	b.n	31ee6 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   31ee4:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   31ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   31ee8:	0018      	movs	r0, r3
   31eea:	46bd      	mov	sp, r7
   31eec:	b012      	add	sp, #72	; 0x48
   31eee:	bdb0      	pop	{r4, r5, r7, pc}
   31ef0:	00032315 	.word	0x00032315
   31ef4:	0003229d 	.word	0x0003229d
   31ef8:	0003145d 	.word	0x0003145d
   31efc:	0003384d 	.word	0x0003384d
   31f00:	0003148d 	.word	0x0003148d
   31f04:	00031bf5 	.word	0x00031bf5
   31f08:	0003399d 	.word	0x0003399d

00031f0c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   31f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   31f0e:	46ce      	mov	lr, r9
   31f10:	4647      	mov	r7, r8
   31f12:	b580      	push	{r7, lr}
   31f14:	b097      	sub	sp, #92	; 0x5c
   31f16:	af08      	add	r7, sp, #32
   31f18:	60f8      	str	r0, [r7, #12]
   31f1a:	60b9      	str	r1, [r7, #8]
   31f1c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   31f1e:	2301      	movs	r3, #1
   31f20:	425b      	negs	r3, r3
   31f22:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   31f24:	2318      	movs	r3, #24
   31f26:	18fb      	adds	r3, r7, r3
   31f28:	2200      	movs	r2, #0
   31f2a:	601a      	str	r2, [r3, #0]
   31f2c:	2318      	movs	r3, #24
   31f2e:	18fb      	adds	r3, r7, r3
   31f30:	2200      	movs	r2, #0
   31f32:	605a      	str	r2, [r3, #4]
   31f34:	2318      	movs	r3, #24
   31f36:	18fb      	adds	r3, r7, r3
   31f38:	2200      	movs	r2, #0
   31f3a:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   31f3c:	2318      	movs	r3, #24
   31f3e:	18fb      	adds	r3, r7, r3
   31f40:	68ba      	ldr	r2, [r7, #8]
   31f42:	601a      	str	r2, [r3, #0]
    int len = 0;
   31f44:	2300      	movs	r3, #0
   31f46:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   31f48:	68fb      	ldr	r3, [r7, #12]
   31f4a:	6a1b      	ldr	r3, [r3, #32]
   31f4c:	2b00      	cmp	r3, #0
   31f4e:	d100      	bne.n	31f52 <MQTTPublish+0x46>
   31f50:	e0a0      	b.n	32094 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   31f52:	2324      	movs	r3, #36	; 0x24
   31f54:	18fb      	adds	r3, r7, r3
   31f56:	0018      	movs	r0, r3
   31f58:	4b55      	ldr	r3, [pc, #340]	; (320b0 <MQTTPublish+0x1a4>)
   31f5a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   31f5c:	68fb      	ldr	r3, [r7, #12]
   31f5e:	685a      	ldr	r2, [r3, #4]
   31f60:	2324      	movs	r3, #36	; 0x24
   31f62:	18fb      	adds	r3, r7, r3
   31f64:	0011      	movs	r1, r2
   31f66:	0018      	movs	r0, r3
   31f68:	4b52      	ldr	r3, [pc, #328]	; (320b4 <MQTTPublish+0x1a8>)
   31f6a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   31f6c:	687b      	ldr	r3, [r7, #4]
   31f6e:	781b      	ldrb	r3, [r3, #0]
   31f70:	2b01      	cmp	r3, #1
   31f72:	d003      	beq.n	31f7c <MQTTPublish+0x70>
   31f74:	687b      	ldr	r3, [r7, #4]
   31f76:	781b      	ldrb	r3, [r3, #0]
   31f78:	2b02      	cmp	r3, #2
   31f7a:	d107      	bne.n	31f8c <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   31f7c:	68fb      	ldr	r3, [r7, #12]
   31f7e:	0018      	movs	r0, r3
   31f80:	4b4d      	ldr	r3, [pc, #308]	; (320b8 <MQTTPublish+0x1ac>)
   31f82:	4798      	blx	r3
   31f84:	0003      	movs	r3, r0
   31f86:	b29a      	uxth	r2, r3
   31f88:	687b      	ldr	r3, [r7, #4]
   31f8a:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   31f8c:	68fb      	ldr	r3, [r7, #12]
   31f8e:	691b      	ldr	r3, [r3, #16]
   31f90:	469c      	mov	ip, r3
   31f92:	68fb      	ldr	r3, [r7, #12]
   31f94:	689b      	ldr	r3, [r3, #8]
   31f96:	001d      	movs	r5, r3
   31f98:	687b      	ldr	r3, [r7, #4]
   31f9a:	781b      	ldrb	r3, [r3, #0]
   31f9c:	001e      	movs	r6, r3
   31f9e:	687b      	ldr	r3, [r7, #4]
   31fa0:	785b      	ldrb	r3, [r3, #1]
   31fa2:	4698      	mov	r8, r3
   31fa4:	687b      	ldr	r3, [r7, #4]
   31fa6:	889b      	ldrh	r3, [r3, #4]
   31fa8:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   31faa:	687b      	ldr	r3, [r7, #4]
   31fac:	689a      	ldr	r2, [r3, #8]
   31fae:	687b      	ldr	r3, [r7, #4]
   31fb0:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   31fb2:	9306      	str	r3, [sp, #24]
   31fb4:	9205      	str	r2, [sp, #20]
   31fb6:	2318      	movs	r3, #24
   31fb8:	18fa      	adds	r2, r7, r3
   31fba:	2308      	movs	r3, #8
   31fbc:	446b      	add	r3, sp
   31fbe:	ca13      	ldmia	r2!, {r0, r1, r4}
   31fc0:	c313      	stmia	r3!, {r0, r1, r4}
   31fc2:	464b      	mov	r3, r9
   31fc4:	9301      	str	r3, [sp, #4]
   31fc6:	4643      	mov	r3, r8
   31fc8:	9300      	str	r3, [sp, #0]
   31fca:	0033      	movs	r3, r6
   31fcc:	2200      	movs	r2, #0
   31fce:	0029      	movs	r1, r5
   31fd0:	4660      	mov	r0, ip
   31fd2:	4c3a      	ldr	r4, [pc, #232]	; (320bc <MQTTPublish+0x1b0>)
   31fd4:	47a0      	blx	r4
   31fd6:	0003      	movs	r3, r0
   31fd8:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   31fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31fdc:	2b00      	cmp	r3, #0
   31fde:	dd5b      	ble.n	32098 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   31fe0:	2324      	movs	r3, #36	; 0x24
   31fe2:	18fa      	adds	r2, r7, r3
   31fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
   31fe6:	68fb      	ldr	r3, [r7, #12]
   31fe8:	0018      	movs	r0, r3
   31fea:	4b35      	ldr	r3, [pc, #212]	; (320c0 <MQTTPublish+0x1b4>)
   31fec:	4798      	blx	r3
   31fee:	0003      	movs	r3, r0
   31ff0:	637b      	str	r3, [r7, #52]	; 0x34
   31ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   31ff4:	2b00      	cmp	r3, #0
   31ff6:	d151      	bne.n	3209c <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   31ff8:	687b      	ldr	r3, [r7, #4]
   31ffa:	781b      	ldrb	r3, [r3, #0]
   31ffc:	2b01      	cmp	r3, #1
   31ffe:	d122      	bne.n	32046 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   32000:	2324      	movs	r3, #36	; 0x24
   32002:	18fa      	adds	r2, r7, r3
   32004:	68fb      	ldr	r3, [r7, #12]
   32006:	2104      	movs	r1, #4
   32008:	0018      	movs	r0, r3
   3200a:	4b2e      	ldr	r3, [pc, #184]	; (320c4 <MQTTPublish+0x1b8>)
   3200c:	4798      	blx	r3
   3200e:	0003      	movs	r3, r0
   32010:	2b04      	cmp	r3, #4
   32012:	d114      	bne.n	3203e <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   32014:	68fb      	ldr	r3, [r7, #12]
   32016:	695c      	ldr	r4, [r3, #20]
   32018:	68fb      	ldr	r3, [r7, #12]
   3201a:	68db      	ldr	r3, [r3, #12]
   3201c:	2216      	movs	r2, #22
   3201e:	18ba      	adds	r2, r7, r2
   32020:	2115      	movs	r1, #21
   32022:	1879      	adds	r1, r7, r1
   32024:	2014      	movs	r0, #20
   32026:	1838      	adds	r0, r7, r0
   32028:	9300      	str	r3, [sp, #0]
   3202a:	0023      	movs	r3, r4
   3202c:	4c26      	ldr	r4, [pc, #152]	; (320c8 <MQTTPublish+0x1bc>)
   3202e:	47a0      	blx	r4
   32030:	0003      	movs	r3, r0
   32032:	2b01      	cmp	r3, #1
   32034:	d033      	beq.n	3209e <MQTTPublish+0x192>
                rc = FAILURE;
   32036:	2301      	movs	r3, #1
   32038:	425b      	negs	r3, r3
   3203a:	637b      	str	r3, [r7, #52]	; 0x34
   3203c:	e02f      	b.n	3209e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   3203e:	2301      	movs	r3, #1
   32040:	425b      	negs	r3, r3
   32042:	637b      	str	r3, [r7, #52]	; 0x34
   32044:	e02b      	b.n	3209e <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   32046:	687b      	ldr	r3, [r7, #4]
   32048:	781b      	ldrb	r3, [r3, #0]
   3204a:	2b02      	cmp	r3, #2
   3204c:	d127      	bne.n	3209e <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   3204e:	2324      	movs	r3, #36	; 0x24
   32050:	18fa      	adds	r2, r7, r3
   32052:	68fb      	ldr	r3, [r7, #12]
   32054:	2107      	movs	r1, #7
   32056:	0018      	movs	r0, r3
   32058:	4b1a      	ldr	r3, [pc, #104]	; (320c4 <MQTTPublish+0x1b8>)
   3205a:	4798      	blx	r3
   3205c:	0003      	movs	r3, r0
   3205e:	2b07      	cmp	r3, #7
   32060:	d114      	bne.n	3208c <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   32062:	68fb      	ldr	r3, [r7, #12]
   32064:	695c      	ldr	r4, [r3, #20]
   32066:	68fb      	ldr	r3, [r7, #12]
   32068:	68db      	ldr	r3, [r3, #12]
   3206a:	2212      	movs	r2, #18
   3206c:	18ba      	adds	r2, r7, r2
   3206e:	2111      	movs	r1, #17
   32070:	1879      	adds	r1, r7, r1
   32072:	2010      	movs	r0, #16
   32074:	1838      	adds	r0, r7, r0
   32076:	9300      	str	r3, [sp, #0]
   32078:	0023      	movs	r3, r4
   3207a:	4c13      	ldr	r4, [pc, #76]	; (320c8 <MQTTPublish+0x1bc>)
   3207c:	47a0      	blx	r4
   3207e:	0003      	movs	r3, r0
   32080:	2b01      	cmp	r3, #1
   32082:	d00c      	beq.n	3209e <MQTTPublish+0x192>
                rc = FAILURE;
   32084:	2301      	movs	r3, #1
   32086:	425b      	negs	r3, r3
   32088:	637b      	str	r3, [r7, #52]	; 0x34
   3208a:	e008      	b.n	3209e <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   3208c:	2301      	movs	r3, #1
   3208e:	425b      	negs	r3, r3
   32090:	637b      	str	r3, [r7, #52]	; 0x34
   32092:	e004      	b.n	3209e <MQTTPublish+0x192>
		goto exit;
   32094:	46c0      	nop			; (mov r8, r8)
   32096:	e002      	b.n	3209e <MQTTPublish+0x192>
        goto exit;
   32098:	46c0      	nop			; (mov r8, r8)
   3209a:	e000      	b.n	3209e <MQTTPublish+0x192>
        goto exit; // there was a problem
   3209c:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   3209e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   320a0:	0018      	movs	r0, r3
   320a2:	46bd      	mov	sp, r7
   320a4:	b00f      	add	sp, #60	; 0x3c
   320a6:	bc0c      	pop	{r2, r3}
   320a8:	4690      	mov	r8, r2
   320aa:	4699      	mov	r9, r3
   320ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   320ae:	46c0      	nop			; (mov r8, r8)
   320b0:	00032315 	.word	0x00032315
   320b4:	0003229d 	.word	0x0003229d
   320b8:	0003145d 	.word	0x0003145d
   320bc:	00033599 	.word	0x00033599
   320c0:	0003148d 	.word	0x0003148d
   320c4:	00031bf5 	.word	0x00031bf5
   320c8:	00033011 	.word	0x00033011

000320cc <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   320cc:	b580      	push	{r7, lr}
   320ce:	b088      	sub	sp, #32
   320d0:	af00      	add	r7, sp, #0
   320d2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   320d4:	2301      	movs	r3, #1
   320d6:	425b      	negs	r3, r3
   320d8:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   320da:	2300      	movs	r3, #0
   320dc:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   320de:	230c      	movs	r3, #12
   320e0:	18fb      	adds	r3, r7, r3
   320e2:	0018      	movs	r0, r3
   320e4:	4b13      	ldr	r3, [pc, #76]	; (32134 <MQTTDisconnect+0x68>)
   320e6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   320e8:	687b      	ldr	r3, [r7, #4]
   320ea:	685a      	ldr	r2, [r3, #4]
   320ec:	230c      	movs	r3, #12
   320ee:	18fb      	adds	r3, r7, r3
   320f0:	0011      	movs	r1, r2
   320f2:	0018      	movs	r0, r3
   320f4:	4b10      	ldr	r3, [pc, #64]	; (32138 <MQTTDisconnect+0x6c>)
   320f6:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   320f8:	687b      	ldr	r3, [r7, #4]
   320fa:	691a      	ldr	r2, [r3, #16]
   320fc:	687b      	ldr	r3, [r7, #4]
   320fe:	689b      	ldr	r3, [r3, #8]
   32100:	0019      	movs	r1, r3
   32102:	0010      	movs	r0, r2
   32104:	4b0d      	ldr	r3, [pc, #52]	; (3213c <MQTTDisconnect+0x70>)
   32106:	4798      	blx	r3
   32108:	0003      	movs	r3, r0
   3210a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   3210c:	69bb      	ldr	r3, [r7, #24]
   3210e:	2b00      	cmp	r3, #0
   32110:	dd08      	ble.n	32124 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   32112:	230c      	movs	r3, #12
   32114:	18fa      	adds	r2, r7, r3
   32116:	69b9      	ldr	r1, [r7, #24]
   32118:	687b      	ldr	r3, [r7, #4]
   3211a:	0018      	movs	r0, r3
   3211c:	4b08      	ldr	r3, [pc, #32]	; (32140 <MQTTDisconnect+0x74>)
   3211e:	4798      	blx	r3
   32120:	0003      	movs	r3, r0
   32122:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   32124:	687b      	ldr	r3, [r7, #4]
   32126:	2200      	movs	r2, #0
   32128:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   3212a:	69fb      	ldr	r3, [r7, #28]
}
   3212c:	0018      	movs	r0, r3
   3212e:	46bd      	mov	sp, r7
   32130:	b008      	add	sp, #32
   32132:	bd80      	pop	{r7, pc}
   32134:	00032315 	.word	0x00032315
   32138:	0003229d 	.word	0x0003229d
   3213c:	00032ec5 	.word	0x00032ec5
   32140:	0003148d 	.word	0x0003148d

00032144 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   32144:	b580      	push	{r7, lr}
   32146:	b084      	sub	sp, #16
   32148:	af00      	add	r7, sp, #0
   3214a:	0002      	movs	r2, r0
   3214c:	1dfb      	adds	r3, r7, #7
   3214e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   32150:	2300      	movs	r3, #0
   32152:	60fb      	str	r3, [r7, #12]
   32154:	e01c      	b.n	32190 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   32156:	4a12      	ldr	r2, [pc, #72]	; (321a0 <isMQTTSocket+0x5c>)
   32158:	68fb      	ldr	r3, [r7, #12]
   3215a:	2164      	movs	r1, #100	; 0x64
   3215c:	434b      	muls	r3, r1
   3215e:	18d3      	adds	r3, r2, r3
   32160:	3360      	adds	r3, #96	; 0x60
   32162:	681b      	ldr	r3, [r3, #0]
   32164:	2b00      	cmp	r3, #0
   32166:	d010      	beq.n	3218a <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   32168:	4a0d      	ldr	r2, [pc, #52]	; (321a0 <isMQTTSocket+0x5c>)
   3216a:	68fb      	ldr	r3, [r7, #12]
   3216c:	2164      	movs	r1, #100	; 0x64
   3216e:	434b      	muls	r3, r1
   32170:	18d3      	adds	r3, r2, r3
   32172:	3360      	adds	r3, #96	; 0x60
   32174:	681b      	ldr	r3, [r3, #0]
   32176:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   32178:	68bb      	ldr	r3, [r7, #8]
   3217a:	6a1a      	ldr	r2, [r3, #32]
   3217c:	1dfb      	adds	r3, r7, #7
   3217e:	781b      	ldrb	r3, [r3, #0]
   32180:	b25b      	sxtb	r3, r3
   32182:	429a      	cmp	r2, r3
   32184:	d101      	bne.n	3218a <isMQTTSocket+0x46>
				return true;
   32186:	2301      	movs	r3, #1
   32188:	e006      	b.n	32198 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3218a:	68fb      	ldr	r3, [r7, #12]
   3218c:	3301      	adds	r3, #1
   3218e:	60fb      	str	r3, [r7, #12]
   32190:	68fb      	ldr	r3, [r7, #12]
   32192:	2b06      	cmp	r3, #6
   32194:	d9df      	bls.n	32156 <isMQTTSocket+0x12>
		}
	}
	return false;
   32196:	2300      	movs	r3, #0
}
   32198:	0018      	movs	r0, r3
   3219a:	46bd      	mov	sp, r7
   3219c:	b004      	add	sp, #16
   3219e:	bd80      	pop	{r7, pc}
   321a0:	20004354 	.word	0x20004354

000321a4 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   321a4:	b580      	push	{r7, lr}
   321a6:	b082      	sub	sp, #8
   321a8:	af00      	add	r7, sp, #0
   321aa:	6078      	str	r0, [r7, #4]
   321ac:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   321ae:	4b0d      	ldr	r3, [pc, #52]	; (321e4 <dnsResolveCallback+0x40>)
   321b0:	781b      	ldrb	r3, [r3, #0]
   321b2:	2201      	movs	r2, #1
   321b4:	4053      	eors	r3, r2
   321b6:	b2db      	uxtb	r3, r3
   321b8:	2b00      	cmp	r3, #0
   321ba:	d00e      	beq.n	321da <dnsResolveCallback+0x36>
   321bc:	4b0a      	ldr	r3, [pc, #40]	; (321e8 <dnsResolveCallback+0x44>)
   321be:	681b      	ldr	r3, [r3, #0]
   321c0:	687a      	ldr	r2, [r7, #4]
   321c2:	0011      	movs	r1, r2
   321c4:	0018      	movs	r0, r3
   321c6:	4b09      	ldr	r3, [pc, #36]	; (321ec <dnsResolveCallback+0x48>)
   321c8:	4798      	blx	r3
   321ca:	1e03      	subs	r3, r0, #0
   321cc:	d105      	bne.n	321da <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   321ce:	683a      	ldr	r2, [r7, #0]
   321d0:	4b07      	ldr	r3, [pc, #28]	; (321f0 <dnsResolveCallback+0x4c>)
   321d2:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   321d4:	4b03      	ldr	r3, [pc, #12]	; (321e4 <dnsResolveCallback+0x40>)
   321d6:	2201      	movs	r2, #1
   321d8:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   321da:	46c0      	nop			; (mov r8, r8)
   321dc:	46bd      	mov	sp, r7
   321de:	b002      	add	sp, #8
   321e0:	bd80      	pop	{r7, pc}
   321e2:	46c0      	nop			; (mov r8, r8)
   321e4:	20004244 	.word	0x20004244
   321e8:	20004350 	.word	0x20004350
   321ec:	00038861 	.word	0x00038861
   321f0:	2000423c 	.word	0x2000423c

000321f4 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   321f4:	b580      	push	{r7, lr}
   321f6:	b084      	sub	sp, #16
   321f8:	af00      	add	r7, sp, #0
   321fa:	603a      	str	r2, [r7, #0]
   321fc:	1dfb      	adds	r3, r7, #7
   321fe:	1c02      	adds	r2, r0, #0
   32200:	701a      	strb	r2, [r3, #0]
   32202:	1dbb      	adds	r3, r7, #6
   32204:	1c0a      	adds	r2, r1, #0
   32206:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   32208:	1dfb      	adds	r3, r7, #7
   3220a:	781b      	ldrb	r3, [r3, #0]
   3220c:	b25b      	sxtb	r3, r3
   3220e:	0018      	movs	r0, r3
   32210:	4b12      	ldr	r3, [pc, #72]	; (3225c <tcpClientSocketEventHandler+0x68>)
   32212:	4798      	blx	r3
   32214:	1e03      	subs	r3, r0, #0
   32216:	d01c      	beq.n	32252 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   32218:	1dbb      	adds	r3, r7, #6
   3221a:	781b      	ldrb	r3, [r3, #0]
   3221c:	2b06      	cmp	r3, #6
   3221e:	d00c      	beq.n	3223a <tcpClientSocketEventHandler+0x46>
   32220:	2b07      	cmp	r3, #7
   32222:	d006      	beq.n	32232 <tcpClientSocketEventHandler+0x3e>
   32224:	2b05      	cmp	r3, #5
   32226:	d000      	beq.n	3222a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   32228:	e013      	b.n	32252 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   3222a:	4b0d      	ldr	r3, [pc, #52]	; (32260 <tcpClientSocketEventHandler+0x6c>)
   3222c:	2201      	movs	r2, #1
   3222e:	701a      	strb	r2, [r3, #0]
			break;
   32230:	e00f      	b.n	32252 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   32232:	4b0c      	ldr	r3, [pc, #48]	; (32264 <tcpClientSocketEventHandler+0x70>)
   32234:	2201      	movs	r2, #1
   32236:	701a      	strb	r2, [r3, #0]
			break;
   32238:	e00b      	b.n	32252 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   3223a:	683b      	ldr	r3, [r7, #0]
   3223c:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   3223e:	68fb      	ldr	r3, [r7, #12]
   32240:	2204      	movs	r2, #4
   32242:	5e9b      	ldrsh	r3, [r3, r2]
   32244:	001a      	movs	r2, r3
   32246:	4b08      	ldr	r3, [pc, #32]	; (32268 <tcpClientSocketEventHandler+0x74>)
   32248:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   3224a:	4b08      	ldr	r3, [pc, #32]	; (3226c <tcpClientSocketEventHandler+0x78>)
   3224c:	2201      	movs	r2, #1
   3224e:	701a      	strb	r2, [r3, #0]
			break;
   32250:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   32252:	46c0      	nop			; (mov r8, r8)
   32254:	46bd      	mov	sp, r7
   32256:	b004      	add	sp, #16
   32258:	bd80      	pop	{r7, pc}
   3225a:	46c0      	nop			; (mov r8, r8)
   3225c:	00032145 	.word	0x00032145
   32260:	20004245 	.word	0x20004245
   32264:	20004246 	.word	0x20004246
   32268:	20004240 	.word	0x20004240
   3226c:	20004247 	.word	0x20004247

00032270 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   32270:	b580      	push	{r7, lr}
   32272:	b082      	sub	sp, #8
   32274:	af00      	add	r7, sp, #0
   32276:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   32278:	687b      	ldr	r3, [r7, #4]
   3227a:	3304      	adds	r3, #4
   3227c:	687a      	ldr	r2, [r7, #4]
   3227e:	0011      	movs	r1, r2
   32280:	0018      	movs	r0, r3
   32282:	4b05      	ldr	r3, [pc, #20]	; (32298 <TimerIsExpired+0x28>)
   32284:	4798      	blx	r3
   32286:	0003      	movs	r3, r0
   32288:	3b01      	subs	r3, #1
   3228a:	425a      	negs	r2, r3
   3228c:	4153      	adcs	r3, r2
   3228e:	b2db      	uxtb	r3, r3
}
   32290:	0018      	movs	r0, r3
   32292:	46bd      	mov	sp, r7
   32294:	b002      	add	sp, #8
   32296:	bd80      	pop	{r7, pc}
   32298:	0001f971 	.word	0x0001f971

0003229c <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   3229c:	b580      	push	{r7, lr}
   3229e:	b082      	sub	sp, #8
   322a0:	af00      	add	r7, sp, #0
   322a2:	6078      	str	r0, [r7, #4]
   322a4:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   322a6:	687b      	ldr	r3, [r7, #4]
   322a8:	683a      	ldr	r2, [r7, #0]
   322aa:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   322ac:	687b      	ldr	r3, [r7, #4]
   322ae:	3304      	adds	r3, #4
   322b0:	0018      	movs	r0, r3
   322b2:	4b03      	ldr	r3, [pc, #12]	; (322c0 <TimerCountdownMS+0x24>)
   322b4:	4798      	blx	r3
}
   322b6:	46c0      	nop			; (mov r8, r8)
   322b8:	46bd      	mov	sp, r7
   322ba:	b002      	add	sp, #8
   322bc:	bd80      	pop	{r7, pc}
   322be:	46c0      	nop			; (mov r8, r8)
   322c0:	0001f905 	.word	0x0001f905

000322c4 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   322c4:	b580      	push	{r7, lr}
   322c6:	b082      	sub	sp, #8
   322c8:	af00      	add	r7, sp, #0
   322ca:	6078      	str	r0, [r7, #4]
   322cc:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   322ce:	683b      	ldr	r3, [r7, #0]
   322d0:	22fa      	movs	r2, #250	; 0xfa
   322d2:	0092      	lsls	r2, r2, #2
   322d4:	435a      	muls	r2, r3
   322d6:	687b      	ldr	r3, [r7, #4]
   322d8:	0011      	movs	r1, r2
   322da:	0018      	movs	r0, r3
   322dc:	4b02      	ldr	r3, [pc, #8]	; (322e8 <TimerCountdown+0x24>)
   322de:	4798      	blx	r3
}
   322e0:	46c0      	nop			; (mov r8, r8)
   322e2:	46bd      	mov	sp, r7
   322e4:	b002      	add	sp, #8
   322e6:	bd80      	pop	{r7, pc}
   322e8:	0003229d 	.word	0x0003229d

000322ec <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   322ec:	b580      	push	{r7, lr}
   322ee:	b082      	sub	sp, #8
   322f0:	af00      	add	r7, sp, #0
   322f2:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   322f4:	687b      	ldr	r3, [r7, #4]
   322f6:	3304      	adds	r3, #4
   322f8:	687a      	ldr	r2, [r7, #4]
   322fa:	0011      	movs	r1, r2
   322fc:	0018      	movs	r0, r3
   322fe:	4b04      	ldr	r3, [pc, #16]	; (32310 <TimerLeftMS+0x24>)
   32300:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   32302:	687b      	ldr	r3, [r7, #4]
   32304:	681b      	ldr	r3, [r3, #0]
}
   32306:	0018      	movs	r0, r3
   32308:	46bd      	mov	sp, r7
   3230a:	b002      	add	sp, #8
   3230c:	bd80      	pop	{r7, pc}
   3230e:	46c0      	nop			; (mov r8, r8)
   32310:	0001f971 	.word	0x0001f971

00032314 <TimerInit>:


void TimerInit(Timer* timer) {
   32314:	b580      	push	{r7, lr}
   32316:	b082      	sub	sp, #8
   32318:	af00      	add	r7, sp, #0
   3231a:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   3231c:	687b      	ldr	r3, [r7, #4]
   3231e:	2200      	movs	r2, #0
   32320:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   32322:	687b      	ldr	r3, [r7, #4]
   32324:	3304      	adds	r3, #4
   32326:	2208      	movs	r2, #8
   32328:	2100      	movs	r1, #0
   3232a:	0018      	movs	r0, r3
   3232c:	4b02      	ldr	r3, [pc, #8]	; (32338 <TimerInit+0x24>)
   3232e:	4798      	blx	r3
}
   32330:	46c0      	nop			; (mov r8, r8)
   32332:	46bd      	mov	sp, r7
   32334:	b002      	add	sp, #8
   32336:	bd80      	pop	{r7, pc}
   32338:	00038507 	.word	0x00038507

0003233c <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   3233c:	b590      	push	{r4, r7, lr}
   3233e:	b085      	sub	sp, #20
   32340:	af00      	add	r7, sp, #0
   32342:	60f8      	str	r0, [r7, #12]
   32344:	60b9      	str	r1, [r7, #8]
   32346:	607a      	str	r2, [r7, #4]
   32348:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   3234a:	683b      	ldr	r3, [r7, #0]
   3234c:	2b00      	cmp	r3, #0
   3234e:	d101      	bne.n	32354 <WINC1500_read+0x18>
   32350:	230a      	movs	r3, #10
   32352:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   32354:	4b2c      	ldr	r3, [pc, #176]	; (32408 <WINC1500_read+0xcc>)
   32356:	681b      	ldr	r3, [r3, #0]
   32358:	2b00      	cmp	r3, #0
   3235a:	d131      	bne.n	323c0 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   3235c:	4b2b      	ldr	r3, [pc, #172]	; (3240c <WINC1500_read+0xd0>)
   3235e:	2200      	movs	r2, #0
   32360:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   32362:	68fb      	ldr	r3, [r7, #12]
   32364:	681b      	ldr	r3, [r3, #0]
   32366:	b258      	sxtb	r0, r3
   32368:	683c      	ldr	r4, [r7, #0]
   3236a:	2380      	movs	r3, #128	; 0x80
   3236c:	005a      	lsls	r2, r3, #1
   3236e:	4928      	ldr	r1, [pc, #160]	; (32410 <WINC1500_read+0xd4>)
   32370:	0023      	movs	r3, r4
   32372:	4c28      	ldr	r4, [pc, #160]	; (32414 <WINC1500_read+0xd8>)
   32374:	47a0      	blx	r4
   32376:	1e03      	subs	r3, r0, #0
   32378:	d005      	beq.n	32386 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   3237a:	2301      	movs	r3, #1
   3237c:	425b      	negs	r3, r3
   3237e:	e03e      	b.n	323fe <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   32380:	2000      	movs	r0, #0
   32382:	4b25      	ldr	r3, [pc, #148]	; (32418 <WINC1500_read+0xdc>)
   32384:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   32386:	4b21      	ldr	r3, [pc, #132]	; (3240c <WINC1500_read+0xd0>)
   32388:	781b      	ldrb	r3, [r3, #0]
   3238a:	2201      	movs	r2, #1
   3238c:	4053      	eors	r3, r2
   3238e:	b2db      	uxtb	r3, r3
   32390:	2b00      	cmp	r3, #0
   32392:	d1f5      	bne.n	32380 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   32394:	4b21      	ldr	r3, [pc, #132]	; (3241c <WINC1500_read+0xe0>)
   32396:	681b      	ldr	r3, [r3, #0]
   32398:	2b00      	cmp	r3, #0
   3239a:	dd08      	ble.n	323ae <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   3239c:	4b1f      	ldr	r3, [pc, #124]	; (3241c <WINC1500_read+0xe0>)
   3239e:	681b      	ldr	r3, [r3, #0]
   323a0:	001a      	movs	r2, r3
   323a2:	4b19      	ldr	r3, [pc, #100]	; (32408 <WINC1500_read+0xcc>)
   323a4:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   323a6:	4b1e      	ldr	r3, [pc, #120]	; (32420 <WINC1500_read+0xe4>)
   323a8:	2200      	movs	r2, #0
   323aa:	601a      	str	r2, [r3, #0]
   323ac:	e008      	b.n	323c0 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   323ae:	4b16      	ldr	r3, [pc, #88]	; (32408 <WINC1500_read+0xcc>)
   323b0:	2200      	movs	r2, #0
   323b2:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   323b4:	4b1a      	ldr	r3, [pc, #104]	; (32420 <WINC1500_read+0xe4>)
   323b6:	2200      	movs	r2, #0
   323b8:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   323ba:	4b18      	ldr	r3, [pc, #96]	; (3241c <WINC1500_read+0xe0>)
   323bc:	681b      	ldr	r3, [r3, #0]
   323be:	e01e      	b.n	323fe <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   323c0:	4b11      	ldr	r3, [pc, #68]	; (32408 <WINC1500_read+0xcc>)
   323c2:	681b      	ldr	r3, [r3, #0]
   323c4:	001a      	movs	r2, r3
   323c6:	687b      	ldr	r3, [r7, #4]
   323c8:	4293      	cmp	r3, r2
   323ca:	dd02      	ble.n	323d2 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   323cc:	2301      	movs	r3, #1
   323ce:	425b      	negs	r3, r3
   323d0:	e015      	b.n	323fe <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   323d2:	4b13      	ldr	r3, [pc, #76]	; (32420 <WINC1500_read+0xe4>)
   323d4:	681a      	ldr	r2, [r3, #0]
   323d6:	4b0e      	ldr	r3, [pc, #56]	; (32410 <WINC1500_read+0xd4>)
   323d8:	18d1      	adds	r1, r2, r3
   323da:	687a      	ldr	r2, [r7, #4]
   323dc:	68bb      	ldr	r3, [r7, #8]
   323de:	0018      	movs	r0, r3
   323e0:	4b10      	ldr	r3, [pc, #64]	; (32424 <WINC1500_read+0xe8>)
   323e2:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   323e4:	4b08      	ldr	r3, [pc, #32]	; (32408 <WINC1500_read+0xcc>)
   323e6:	681a      	ldr	r2, [r3, #0]
   323e8:	687b      	ldr	r3, [r7, #4]
   323ea:	1ad2      	subs	r2, r2, r3
   323ec:	4b06      	ldr	r3, [pc, #24]	; (32408 <WINC1500_read+0xcc>)
   323ee:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   323f0:	4b0b      	ldr	r3, [pc, #44]	; (32420 <WINC1500_read+0xe4>)
   323f2:	681a      	ldr	r2, [r3, #0]
   323f4:	687b      	ldr	r3, [r7, #4]
   323f6:	18d2      	adds	r2, r2, r3
   323f8:	4b09      	ldr	r3, [pc, #36]	; (32420 <WINC1500_read+0xe4>)
   323fa:	601a      	str	r2, [r3, #0]
  
  return len;
   323fc:	687b      	ldr	r3, [r7, #4]
}
   323fe:	0018      	movs	r0, r3
   32400:	46bd      	mov	sp, r7
   32402:	b005      	add	sp, #20
   32404:	bd90      	pop	{r4, r7, pc}
   32406:	46c0      	nop			; (mov r8, r8)
   32408:	2000434c 	.word	0x2000434c
   3240c:	20004247 	.word	0x20004247
   32410:	20004248 	.word	0x20004248
   32414:	000289f1 	.word	0x000289f1
   32418:	00024f39 	.word	0x00024f39
   3241c:	20004240 	.word	0x20004240
   32420:	20004348 	.word	0x20004348
   32424:	000384d1 	.word	0x000384d1

00032428 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   32428:	b590      	push	{r4, r7, lr}
   3242a:	b085      	sub	sp, #20
   3242c:	af00      	add	r7, sp, #0
   3242e:	60f8      	str	r0, [r7, #12]
   32430:	60b9      	str	r1, [r7, #8]
   32432:	607a      	str	r2, [r7, #4]
   32434:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   32436:	4b10      	ldr	r3, [pc, #64]	; (32478 <WINC1500_write+0x50>)
   32438:	2200      	movs	r2, #0
   3243a:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   3243c:	68fb      	ldr	r3, [r7, #12]
   3243e:	681b      	ldr	r3, [r3, #0]
   32440:	b258      	sxtb	r0, r3
   32442:	687b      	ldr	r3, [r7, #4]
   32444:	b29a      	uxth	r2, r3
   32446:	68b9      	ldr	r1, [r7, #8]
   32448:	2300      	movs	r3, #0
   3244a:	4c0c      	ldr	r4, [pc, #48]	; (3247c <WINC1500_write+0x54>)
   3244c:	47a0      	blx	r4
   3244e:	1e03      	subs	r3, r0, #0
   32450:	d005      	beq.n	3245e <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   32452:	2301      	movs	r3, #1
   32454:	425b      	negs	r3, r3
   32456:	e00a      	b.n	3246e <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   32458:	2000      	movs	r0, #0
   3245a:	4b09      	ldr	r3, [pc, #36]	; (32480 <WINC1500_write+0x58>)
   3245c:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   3245e:	4b06      	ldr	r3, [pc, #24]	; (32478 <WINC1500_write+0x50>)
   32460:	781b      	ldrb	r3, [r3, #0]
   32462:	2201      	movs	r2, #1
   32464:	4053      	eors	r3, r2
   32466:	b2db      	uxtb	r3, r3
   32468:	2b00      	cmp	r3, #0
   3246a:	d1f5      	bne.n	32458 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   3246c:	687b      	ldr	r3, [r7, #4]
}
   3246e:	0018      	movs	r0, r3
   32470:	46bd      	mov	sp, r7
   32472:	b005      	add	sp, #20
   32474:	bd90      	pop	{r4, r7, pc}
   32476:	46c0      	nop			; (mov r8, r8)
   32478:	20004246 	.word	0x20004246
   3247c:	0002888d 	.word	0x0002888d
   32480:	00024f39 	.word	0x00024f39

00032484 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   32484:	b580      	push	{r7, lr}
   32486:	b082      	sub	sp, #8
   32488:	af00      	add	r7, sp, #0
   3248a:	6078      	str	r0, [r7, #4]
	close(n->socket);
   3248c:	687b      	ldr	r3, [r7, #4]
   3248e:	681b      	ldr	r3, [r3, #0]
   32490:	b25b      	sxtb	r3, r3
   32492:	0018      	movs	r0, r3
   32494:	4b06      	ldr	r3, [pc, #24]	; (324b0 <WINC1500_disconnect+0x2c>)
   32496:	4798      	blx	r3
	n->socket=-1;
   32498:	687b      	ldr	r3, [r7, #4]
   3249a:	2201      	movs	r2, #1
   3249c:	4252      	negs	r2, r2
   3249e:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   324a0:	4b04      	ldr	r3, [pc, #16]	; (324b4 <WINC1500_disconnect+0x30>)
   324a2:	2200      	movs	r2, #0
   324a4:	701a      	strb	r2, [r3, #0]
}
   324a6:	46c0      	nop			; (mov r8, r8)
   324a8:	46bd      	mov	sp, r7
   324aa:	b002      	add	sp, #8
   324ac:	bd80      	pop	{r7, pc}
   324ae:	46c0      	nop			; (mov r8, r8)
   324b0:	00028b71 	.word	0x00028b71
   324b4:	20004245 	.word	0x20004245

000324b8 <NetworkInit>:


void NetworkInit(Network* n) {
   324b8:	b580      	push	{r7, lr}
   324ba:	b082      	sub	sp, #8
   324bc:	af00      	add	r7, sp, #0
   324be:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   324c0:	687b      	ldr	r3, [r7, #4]
   324c2:	2201      	movs	r2, #1
   324c4:	4252      	negs	r2, r2
   324c6:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   324c8:	687b      	ldr	r3, [r7, #4]
   324ca:	4a06      	ldr	r2, [pc, #24]	; (324e4 <NetworkInit+0x2c>)
   324cc:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   324ce:	687b      	ldr	r3, [r7, #4]
   324d0:	4a05      	ldr	r2, [pc, #20]	; (324e8 <NetworkInit+0x30>)
   324d2:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   324d4:	687b      	ldr	r3, [r7, #4]
   324d6:	4a05      	ldr	r2, [pc, #20]	; (324ec <NetworkInit+0x34>)
   324d8:	611a      	str	r2, [r3, #16]
}
   324da:	46c0      	nop			; (mov r8, r8)
   324dc:	46bd      	mov	sp, r7
   324de:	b002      	add	sp, #8
   324e0:	bd80      	pop	{r7, pc}
   324e2:	46c0      	nop			; (mov r8, r8)
   324e4:	0003233d 	.word	0x0003233d
   324e8:	00032429 	.word	0x00032429
   324ec:	00032485 	.word	0x00032485

000324f0 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   324f0:	b580      	push	{r7, lr}
   324f2:	b088      	sub	sp, #32
   324f4:	af00      	add	r7, sp, #0
   324f6:	60f8      	str	r0, [r7, #12]
   324f8:	60b9      	str	r1, [r7, #8]
   324fa:	607a      	str	r2, [r7, #4]
   324fc:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   324fe:	4b37      	ldr	r3, [pc, #220]	; (325dc <ConnectNetwork+0xec>)
   32500:	2200      	movs	r2, #0
   32502:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   32504:	4b36      	ldr	r3, [pc, #216]	; (325e0 <ConnectNetwork+0xf0>)
   32506:	68ba      	ldr	r2, [r7, #8]
   32508:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   3250a:	68bb      	ldr	r3, [r7, #8]
   3250c:	0018      	movs	r0, r3
   3250e:	4b35      	ldr	r3, [pc, #212]	; (325e4 <ConnectNetwork+0xf4>)
   32510:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   32512:	e002      	b.n	3251a <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   32514:	2000      	movs	r0, #0
   32516:	4b34      	ldr	r3, [pc, #208]	; (325e8 <ConnectNetwork+0xf8>)
   32518:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   3251a:	4b30      	ldr	r3, [pc, #192]	; (325dc <ConnectNetwork+0xec>)
   3251c:	781b      	ldrb	r3, [r3, #0]
   3251e:	2201      	movs	r2, #1
   32520:	4053      	eors	r3, r2
   32522:	b2db      	uxtb	r3, r3
   32524:	2b00      	cmp	r3, #0
   32526:	d1f5      	bne.n	32514 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   32528:	4b30      	ldr	r3, [pc, #192]	; (325ec <ConnectNetwork+0xfc>)
   3252a:	681a      	ldr	r2, [r3, #0]
   3252c:	68fb      	ldr	r3, [r7, #12]
   3252e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   32530:	2310      	movs	r3, #16
   32532:	18fb      	adds	r3, r7, r3
   32534:	2202      	movs	r2, #2
   32536:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   32538:	687b      	ldr	r3, [r7, #4]
   3253a:	b29b      	uxth	r3, r3
   3253c:	021b      	lsls	r3, r3, #8
   3253e:	b21a      	sxth	r2, r3
   32540:	687b      	ldr	r3, [r7, #4]
   32542:	b29b      	uxth	r3, r3
   32544:	0a1b      	lsrs	r3, r3, #8
   32546:	b29b      	uxth	r3, r3
   32548:	b21b      	sxth	r3, r3
   3254a:	4313      	orrs	r3, r2
   3254c:	b21b      	sxth	r3, r3
   3254e:	b29a      	uxth	r2, r3
   32550:	2310      	movs	r3, #16
   32552:	18fb      	adds	r3, r7, r3
   32554:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   32556:	4b25      	ldr	r3, [pc, #148]	; (325ec <ConnectNetwork+0xfc>)
   32558:	681b      	ldr	r3, [r3, #0]
   3255a:	001a      	movs	r2, r3
   3255c:	2310      	movs	r3, #16
   3255e:	18fb      	adds	r3, r7, r3
   32560:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   32562:	68fb      	ldr	r3, [r7, #12]
   32564:	681b      	ldr	r3, [r3, #0]
   32566:	2b00      	cmp	r3, #0
   32568:	da0a      	bge.n	32580 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   3256a:	683b      	ldr	r3, [r7, #0]
   3256c:	b2db      	uxtb	r3, r3
   3256e:	001a      	movs	r2, r3
   32570:	2101      	movs	r1, #1
   32572:	2002      	movs	r0, #2
   32574:	4b1e      	ldr	r3, [pc, #120]	; (325f0 <ConnectNetwork+0x100>)
   32576:	4798      	blx	r3
   32578:	0003      	movs	r3, r0
   3257a:	001a      	movs	r2, r3
   3257c:	68fb      	ldr	r3, [r7, #12]
   3257e:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   32580:	68fb      	ldr	r3, [r7, #12]
   32582:	681b      	ldr	r3, [r3, #0]
   32584:	3301      	adds	r3, #1
   32586:	d108      	bne.n	3259a <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   32588:	68fb      	ldr	r3, [r7, #12]
   3258a:	681b      	ldr	r3, [r3, #0]
   3258c:	b25b      	sxtb	r3, r3
   3258e:	0018      	movs	r0, r3
   32590:	4b18      	ldr	r3, [pc, #96]	; (325f4 <ConnectNetwork+0x104>)
   32592:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   32594:	2309      	movs	r3, #9
   32596:	425b      	negs	r3, r3
   32598:	e01c      	b.n	325d4 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   3259a:	68fb      	ldr	r3, [r7, #12]
   3259c:	681b      	ldr	r3, [r3, #0]
   3259e:	b25b      	sxtb	r3, r3
   325a0:	2210      	movs	r2, #16
   325a2:	18b9      	adds	r1, r7, r2
   325a4:	2210      	movs	r2, #16
   325a6:	0018      	movs	r0, r3
   325a8:	4b13      	ldr	r3, [pc, #76]	; (325f8 <ConnectNetwork+0x108>)
   325aa:	4798      	blx	r3
   325ac:	1e03      	subs	r3, r0, #0
   325ae:	d002      	beq.n	325b6 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   325b0:	2309      	movs	r3, #9
   325b2:	425b      	negs	r3, r3
   325b4:	e00e      	b.n	325d4 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   325b6:	4b11      	ldr	r3, [pc, #68]	; (325fc <ConnectNetwork+0x10c>)
   325b8:	2200      	movs	r2, #0
   325ba:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   325bc:	e002      	b.n	325c4 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   325be:	2000      	movs	r0, #0
   325c0:	4b09      	ldr	r3, [pc, #36]	; (325e8 <ConnectNetwork+0xf8>)
   325c2:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   325c4:	4b0d      	ldr	r3, [pc, #52]	; (325fc <ConnectNetwork+0x10c>)
   325c6:	781b      	ldrb	r3, [r3, #0]
   325c8:	2201      	movs	r2, #1
   325ca:	4053      	eors	r3, r2
   325cc:	b2db      	uxtb	r3, r3
   325ce:	2b00      	cmp	r3, #0
   325d0:	d1f5      	bne.n	325be <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   325d2:	2300      	movs	r3, #0
   325d4:	0018      	movs	r0, r3
   325d6:	46bd      	mov	sp, r7
   325d8:	b008      	add	sp, #32
   325da:	bd80      	pop	{r7, pc}
   325dc:	20004244 	.word	0x20004244
   325e0:	20004350 	.word	0x20004350
   325e4:	00028db9 	.word	0x00028db9
   325e8:	00024f39 	.word	0x00024f39
   325ec:	2000423c 	.word	0x2000423c
   325f0:	00028565 	.word	0x00028565
   325f4:	00028b71 	.word	0x00028b71
   325f8:	00028779 	.word	0x00028779
   325fc:	20004245 	.word	0x20004245

00032600 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   32600:	b580      	push	{r7, lr}
   32602:	b084      	sub	sp, #16
   32604:	af00      	add	r7, sp, #0
   32606:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   32608:	687b      	ldr	r3, [r7, #4]
   3260a:	2b00      	cmp	r3, #0
   3260c:	d022      	beq.n	32654 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3260e:	2300      	movs	r3, #0
   32610:	60fb      	str	r3, [r7, #12]
   32612:	e01b      	b.n	3264c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   32614:	4a11      	ldr	r2, [pc, #68]	; (3265c <allocateClient+0x5c>)
   32616:	68fb      	ldr	r3, [r7, #12]
   32618:	2164      	movs	r1, #100	; 0x64
   3261a:	434b      	muls	r3, r1
   3261c:	18d3      	adds	r3, r2, r3
   3261e:	3360      	adds	r3, #96	; 0x60
   32620:	681b      	ldr	r3, [r3, #0]
   32622:	2b00      	cmp	r3, #0
   32624:	d10f      	bne.n	32646 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   32626:	4a0d      	ldr	r2, [pc, #52]	; (3265c <allocateClient+0x5c>)
   32628:	68fb      	ldr	r3, [r7, #12]
   3262a:	2164      	movs	r1, #100	; 0x64
   3262c:	434b      	muls	r3, r1
   3262e:	18d3      	adds	r3, r2, r3
   32630:	3360      	adds	r3, #96	; 0x60
   32632:	687a      	ldr	r2, [r7, #4]
   32634:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   32636:	68fb      	ldr	r3, [r7, #12]
   32638:	2264      	movs	r2, #100	; 0x64
   3263a:	435a      	muls	r2, r3
   3263c:	4b07      	ldr	r3, [pc, #28]	; (3265c <allocateClient+0x5c>)
   3263e:	18d2      	adds	r2, r2, r3
   32640:	687b      	ldr	r3, [r7, #4]
   32642:	61da      	str	r2, [r3, #28]
			return;
   32644:	e007      	b.n	32656 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   32646:	68fb      	ldr	r3, [r7, #12]
   32648:	3301      	adds	r3, #1
   3264a:	60fb      	str	r3, [r7, #12]
   3264c:	68fb      	ldr	r3, [r7, #12]
   3264e:	2b06      	cmp	r3, #6
   32650:	d9e0      	bls.n	32614 <allocateClient+0x14>
   32652:	e000      	b.n	32656 <allocateClient+0x56>
		return;
   32654:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   32656:	46bd      	mov	sp, r7
   32658:	b004      	add	sp, #16
   3265a:	bd80      	pop	{r7, pc}
   3265c:	20004354 	.word	0x20004354

00032660 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   32660:	b5f0      	push	{r4, r5, r6, r7, lr}
   32662:	b089      	sub	sp, #36	; 0x24
   32664:	af04      	add	r7, sp, #16
   32666:	6078      	str	r0, [r7, #4]
   32668:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   3266a:	687b      	ldr	r3, [r7, #4]
   3266c:	2b00      	cmp	r3, #0
   3266e:	d00a      	beq.n	32686 <mqtt_init+0x26>
   32670:	683b      	ldr	r3, [r7, #0]
   32672:	2b00      	cmp	r3, #0
   32674:	d007      	beq.n	32686 <mqtt_init+0x26>
   32676:	683b      	ldr	r3, [r7, #0]
   32678:	691b      	ldr	r3, [r3, #16]
   3267a:	2b00      	cmp	r3, #0
   3267c:	d003      	beq.n	32686 <mqtt_init+0x26>
   3267e:	683b      	ldr	r3, [r7, #0]
   32680:	689b      	ldr	r3, [r3, #8]
   32682:	2b00      	cmp	r3, #0
   32684:	d102      	bne.n	3268c <mqtt_init+0x2c>
		return FAILURE;
   32686:	2301      	movs	r3, #1
   32688:	425b      	negs	r3, r3
   3268a:	e034      	b.n	326f6 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   3268c:	683b      	ldr	r3, [r7, #0]
   3268e:	889b      	ldrh	r3, [r3, #4]
   32690:	001a      	movs	r2, r3
   32692:	23fa      	movs	r3, #250	; 0xfa
   32694:	009b      	lsls	r3, r3, #2
   32696:	4353      	muls	r3, r2
   32698:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   3269a:	687b      	ldr	r3, [r7, #4]
   3269c:	3320      	adds	r3, #32
   3269e:	0018      	movs	r0, r3
   326a0:	4b17      	ldr	r3, [pc, #92]	; (32700 <mqtt_init+0xa0>)
   326a2:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   326a4:	687b      	ldr	r3, [r7, #4]
   326a6:	3304      	adds	r3, #4
   326a8:	6839      	ldr	r1, [r7, #0]
   326aa:	2218      	movs	r2, #24
   326ac:	0018      	movs	r0, r3
   326ae:	4b15      	ldr	r3, [pc, #84]	; (32704 <mqtt_init+0xa4>)
   326b0:	4798      	blx	r3
	allocateClient(module);
   326b2:	687b      	ldr	r3, [r7, #4]
   326b4:	0018      	movs	r0, r3
   326b6:	4b14      	ldr	r3, [pc, #80]	; (32708 <mqtt_init+0xa8>)
   326b8:	4798      	blx	r3
	
	if(module->client)
   326ba:	687b      	ldr	r3, [r7, #4]
   326bc:	69db      	ldr	r3, [r3, #28]
   326be:	2b00      	cmp	r3, #0
   326c0:	d017      	beq.n	326f2 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   326c2:	687b      	ldr	r3, [r7, #4]
   326c4:	69d8      	ldr	r0, [r3, #28]
   326c6:	687b      	ldr	r3, [r7, #4]
   326c8:	3320      	adds	r3, #32
   326ca:	001c      	movs	r4, r3
   326cc:	683b      	ldr	r3, [r7, #0]
   326ce:	691e      	ldr	r6, [r3, #16]
   326d0:	683b      	ldr	r3, [r7, #0]
   326d2:	695a      	ldr	r2, [r3, #20]
   326d4:	683b      	ldr	r3, [r7, #0]
   326d6:	6899      	ldr	r1, [r3, #8]
   326d8:	683b      	ldr	r3, [r7, #0]
   326da:	68db      	ldr	r3, [r3, #12]
   326dc:	68fd      	ldr	r5, [r7, #12]
   326de:	9302      	str	r3, [sp, #8]
   326e0:	9101      	str	r1, [sp, #4]
   326e2:	9200      	str	r2, [sp, #0]
   326e4:	0033      	movs	r3, r6
   326e6:	002a      	movs	r2, r5
   326e8:	0021      	movs	r1, r4
   326ea:	4c08      	ldr	r4, [pc, #32]	; (3270c <mqtt_init+0xac>)
   326ec:	47a0      	blx	r4
		return SUCCESS;
   326ee:	2300      	movs	r3, #0
   326f0:	e001      	b.n	326f6 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   326f2:	2301      	movs	r3, #1
   326f4:	425b      	negs	r3, r3
}
   326f6:	0018      	movs	r0, r3
   326f8:	46bd      	mov	sp, r7
   326fa:	b005      	add	sp, #20
   326fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   326fe:	46c0      	nop			; (mov r8, r8)
   32700:	000324b9 	.word	0x000324b9
   32704:	000384d1 	.word	0x000384d1
   32708:	00032601 	.word	0x00032601
   3270c:	00031531 	.word	0x00031531

00032710 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   32710:	b580      	push	{r7, lr}
   32712:	b082      	sub	sp, #8
   32714:	af00      	add	r7, sp, #0
   32716:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   32718:	687b      	ldr	r3, [r7, #4]
   3271a:	4a0c      	ldr	r2, [pc, #48]	; (3274c <mqtt_get_config_defaults+0x3c>)
   3271c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3271e:	687b      	ldr	r3, [r7, #4]
   32720:	2200      	movs	r2, #0
   32722:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   32724:	687b      	ldr	r3, [r7, #4]
   32726:	223c      	movs	r2, #60	; 0x3c
   32728:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   3272a:	687b      	ldr	r3, [r7, #4]
   3272c:	2200      	movs	r2, #0
   3272e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   32730:	687b      	ldr	r3, [r7, #4]
   32732:	2200      	movs	r2, #0
   32734:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   32736:	687b      	ldr	r3, [r7, #4]
   32738:	2200      	movs	r2, #0
   3273a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   3273c:	687b      	ldr	r3, [r7, #4]
   3273e:	2200      	movs	r2, #0
   32740:	615a      	str	r2, [r3, #20]
}
   32742:	46c0      	nop			; (mov r8, r8)
   32744:	46bd      	mov	sp, r7
   32746:	b002      	add	sp, #8
   32748:	bd80      	pop	{r7, pc}
   3274a:	46c0      	nop			; (mov r8, r8)
   3274c:	0000075b 	.word	0x0000075b

00032750 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   32750:	b580      	push	{r7, lr}
   32752:	b082      	sub	sp, #8
   32754:	af00      	add	r7, sp, #0
   32756:	6078      	str	r0, [r7, #4]
   32758:	6039      	str	r1, [r7, #0]
	if(module)
   3275a:	687b      	ldr	r3, [r7, #4]
   3275c:	2b00      	cmp	r3, #0
   3275e:	d004      	beq.n	3276a <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   32760:	687b      	ldr	r3, [r7, #4]
   32762:	683a      	ldr	r2, [r7, #0]
   32764:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   32766:	2300      	movs	r3, #0
   32768:	e001      	b.n	3276e <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   3276a:	2301      	movs	r3, #1
   3276c:	425b      	negs	r3, r3
}
   3276e:	0018      	movs	r0, r3
   32770:	46bd      	mov	sp, r7
   32772:	b002      	add	sp, #8
   32774:	bd80      	pop	{r7, pc}
	...

00032778 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   32778:	b580      	push	{r7, lr}
   3277a:	b082      	sub	sp, #8
   3277c:	af00      	add	r7, sp, #0
   3277e:	603a      	str	r2, [r7, #0]
   32780:	1dfb      	adds	r3, r7, #7
   32782:	1c02      	adds	r2, r0, #0
   32784:	701a      	strb	r2, [r3, #0]
   32786:	1dbb      	adds	r3, r7, #6
   32788:	1c0a      	adds	r2, r1, #0
   3278a:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   3278c:	683a      	ldr	r2, [r7, #0]
   3278e:	1dbb      	adds	r3, r7, #6
   32790:	7819      	ldrb	r1, [r3, #0]
   32792:	1dfb      	adds	r3, r7, #7
   32794:	781b      	ldrb	r3, [r3, #0]
   32796:	b25b      	sxtb	r3, r3
   32798:	0018      	movs	r0, r3
   3279a:	4b03      	ldr	r3, [pc, #12]	; (327a8 <mqtt_socket_event_handler+0x30>)
   3279c:	4798      	blx	r3
}
   3279e:	46c0      	nop			; (mov r8, r8)
   327a0:	46bd      	mov	sp, r7
   327a2:	b002      	add	sp, #8
   327a4:	bd80      	pop	{r7, pc}
   327a6:	46c0      	nop			; (mov r8, r8)
   327a8:	000321f5 	.word	0x000321f5

000327ac <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   327ac:	b580      	push	{r7, lr}
   327ae:	b082      	sub	sp, #8
   327b0:	af00      	add	r7, sp, #0
   327b2:	6078      	str	r0, [r7, #4]
   327b4:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   327b6:	683a      	ldr	r2, [r7, #0]
   327b8:	687b      	ldr	r3, [r7, #4]
   327ba:	0011      	movs	r1, r2
   327bc:	0018      	movs	r0, r3
   327be:	4b03      	ldr	r3, [pc, #12]	; (327cc <mqtt_socket_resolve_handler+0x20>)
   327c0:	4798      	blx	r3
}
   327c2:	46c0      	nop			; (mov r8, r8)
   327c4:	46bd      	mov	sp, r7
   327c6:	b002      	add	sp, #8
   327c8:	bd80      	pop	{r7, pc}
   327ca:	46c0      	nop			; (mov r8, r8)
   327cc:	000321a5 	.word	0x000321a5

000327d0 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   327d0:	b590      	push	{r4, r7, lr}
   327d2:	b085      	sub	sp, #20
   327d4:	af00      	add	r7, sp, #0
   327d6:	6078      	str	r0, [r7, #4]
   327d8:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   327da:	687b      	ldr	r3, [r7, #4]
   327dc:	3320      	adds	r3, #32
   327de:	0018      	movs	r0, r3
   327e0:	687b      	ldr	r3, [r7, #4]
   327e2:	889b      	ldrh	r3, [r3, #4]
   327e4:	001a      	movs	r2, r3
   327e6:	687b      	ldr	r3, [r7, #4]
   327e8:	799b      	ldrb	r3, [r3, #6]
   327ea:	6839      	ldr	r1, [r7, #0]
   327ec:	4c09      	ldr	r4, [pc, #36]	; (32814 <mqtt_connect+0x44>)
   327ee:	47a0      	blx	r4
   327f0:	0003      	movs	r3, r0
   327f2:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   327f4:	687b      	ldr	r3, [r7, #4]
   327f6:	681b      	ldr	r3, [r3, #0]
   327f8:	2b00      	cmp	r3, #0
   327fa:	d006      	beq.n	3280a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   327fc:	687b      	ldr	r3, [r7, #4]
   327fe:	681b      	ldr	r3, [r3, #0]
   32800:	220c      	movs	r2, #12
   32802:	18ba      	adds	r2, r7, r2
   32804:	6878      	ldr	r0, [r7, #4]
   32806:	2100      	movs	r1, #0
   32808:	4798      	blx	r3
	return connResult.sock_connected.result;
   3280a:	68fb      	ldr	r3, [r7, #12]
}
   3280c:	0018      	movs	r0, r3
   3280e:	46bd      	mov	sp, r7
   32810:	b005      	add	sp, #20
   32812:	bd90      	pop	{r4, r7, pc}
   32814:	000324f1 	.word	0x000324f1

00032818 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   32818:	b580      	push	{r7, lr}
   3281a:	b09c      	sub	sp, #112	; 0x70
   3281c:	af00      	add	r7, sp, #0
   3281e:	60f8      	str	r0, [r7, #12]
   32820:	607a      	str	r2, [r7, #4]
   32822:	603b      	str	r3, [r7, #0]
   32824:	230b      	movs	r3, #11
   32826:	18fb      	adds	r3, r7, r3
   32828:	1c0a      	adds	r2, r1, #0
   3282a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   3282c:	2310      	movs	r3, #16
   3282e:	18fa      	adds	r2, r7, r3
   32830:	4b31      	ldr	r3, [pc, #196]	; (328f8 <mqtt_connect_broker+0xe0>)
   32832:	0010      	movs	r0, r2
   32834:	0019      	movs	r1, r3
   32836:	2358      	movs	r3, #88	; 0x58
   32838:	001a      	movs	r2, r3
   3283a:	4b30      	ldr	r3, [pc, #192]	; (328fc <mqtt_connect_broker+0xe4>)
   3283c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   3283e:	2310      	movs	r3, #16
   32840:	18fb      	adds	r3, r7, r3
   32842:	2204      	movs	r2, #4
   32844:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   32846:	2310      	movs	r3, #16
   32848:	18fb      	adds	r3, r7, r3
   3284a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   3284c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   3284e:	2310      	movs	r3, #16
   32850:	18fb      	adds	r3, r7, r3
   32852:	687a      	ldr	r2, [r7, #4]
   32854:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   32856:	2310      	movs	r3, #16
   32858:	18fb      	adds	r3, r7, r3
   3285a:	683a      	ldr	r2, [r7, #0]
   3285c:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   3285e:	2310      	movs	r3, #16
   32860:	18fb      	adds	r3, r7, r3
   32862:	220b      	movs	r2, #11
   32864:	18ba      	adds	r2, r7, r2
   32866:	7812      	ldrb	r2, [r2, #0]
   32868:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   3286a:	2310      	movs	r3, #16
   3286c:	18fb      	adds	r3, r7, r3
   3286e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   32870:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   32872:	2310      	movs	r3, #16
   32874:	18fb      	adds	r3, r7, r3
   32876:	2280      	movs	r2, #128	; 0x80
   32878:	18ba      	adds	r2, r7, r2
   3287a:	6812      	ldr	r2, [r2, #0]
   3287c:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   3287e:	2310      	movs	r3, #16
   32880:	18fb      	adds	r3, r7, r3
   32882:	228c      	movs	r2, #140	; 0x8c
   32884:	18ba      	adds	r2, r7, r2
   32886:	213c      	movs	r1, #60	; 0x3c
   32888:	7812      	ldrb	r2, [r2, #0]
   3288a:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   3288c:	2310      	movs	r3, #16
   3288e:	18fb      	adds	r3, r7, r3
   32890:	2288      	movs	r2, #136	; 0x88
   32892:	18ba      	adds	r2, r7, r2
   32894:	213d      	movs	r1, #61	; 0x3d
   32896:	7812      	ldrb	r2, [r2, #0]
   32898:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   3289a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   3289c:	2b00      	cmp	r3, #0
   3289e:	d008      	beq.n	328b2 <mqtt_connect_broker+0x9a>
   328a0:	2380      	movs	r3, #128	; 0x80
   328a2:	18fb      	adds	r3, r7, r3
   328a4:	681b      	ldr	r3, [r3, #0]
   328a6:	2b00      	cmp	r3, #0
   328a8:	d003      	beq.n	328b2 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   328aa:	2310      	movs	r3, #16
   328ac:	18fb      	adds	r3, r7, r3
   328ae:	2201      	movs	r2, #1
   328b0:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   328b2:	68fb      	ldr	r3, [r7, #12]
   328b4:	69db      	ldr	r3, [r3, #28]
   328b6:	2210      	movs	r2, #16
   328b8:	18ba      	adds	r2, r7, r2
   328ba:	0011      	movs	r1, r2
   328bc:	0018      	movs	r0, r3
   328be:	4b10      	ldr	r3, [pc, #64]	; (32900 <mqtt_connect_broker+0xe8>)
   328c0:	4798      	blx	r3
   328c2:	0003      	movs	r3, r0
   328c4:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   328c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   328c8:	b2da      	uxtb	r2, r3
   328ca:	2368      	movs	r3, #104	; 0x68
   328cc:	18fb      	adds	r3, r7, r3
   328ce:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   328d0:	68fb      	ldr	r3, [r7, #12]
   328d2:	681b      	ldr	r3, [r3, #0]
   328d4:	2b00      	cmp	r3, #0
   328d6:	d006      	beq.n	328e6 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   328d8:	68fb      	ldr	r3, [r7, #12]
   328da:	681b      	ldr	r3, [r3, #0]
   328dc:	2268      	movs	r2, #104	; 0x68
   328de:	18ba      	adds	r2, r7, r2
   328e0:	68f8      	ldr	r0, [r7, #12]
   328e2:	2101      	movs	r1, #1
   328e4:	4798      	blx	r3
	
	module->isConnected = true;
   328e6:	68fb      	ldr	r3, [r7, #12]
   328e8:	2234      	movs	r2, #52	; 0x34
   328ea:	2101      	movs	r1, #1
   328ec:	5499      	strb	r1, [r3, r2]
	return rc;
   328ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   328f0:	0018      	movs	r0, r3
   328f2:	46bd      	mov	sp, r7
   328f4:	b01c      	add	sp, #112	; 0x70
   328f6:	bd80      	pop	{r7, pc}
   328f8:	0003e1c8 	.word	0x0003e1c8
   328fc:	000384d1 	.word	0x000384d1
   32900:	00031c41 	.word	0x00031c41

00032904 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   32904:	b580      	push	{r7, lr}
   32906:	b084      	sub	sp, #16
   32908:	af00      	add	r7, sp, #0
   3290a:	6078      	str	r0, [r7, #4]
   3290c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   3290e:	687b      	ldr	r3, [r7, #4]
   32910:	69db      	ldr	r3, [r3, #28]
   32912:	0018      	movs	r0, r3
   32914:	4b0c      	ldr	r3, [pc, #48]	; (32948 <mqtt_disconnect+0x44>)
   32916:	4798      	blx	r3
   32918:	0003      	movs	r3, r0
   3291a:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   3291c:	68fb      	ldr	r3, [r7, #12]
   3291e:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   32920:	687b      	ldr	r3, [r7, #4]
   32922:	681b      	ldr	r3, [r3, #0]
   32924:	2b00      	cmp	r3, #0
   32926:	d006      	beq.n	32936 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   32928:	687b      	ldr	r3, [r7, #4]
   3292a:	681b      	ldr	r3, [r3, #0]
   3292c:	2208      	movs	r2, #8
   3292e:	18ba      	adds	r2, r7, r2
   32930:	6878      	ldr	r0, [r7, #4]
   32932:	2105      	movs	r1, #5
   32934:	4798      	blx	r3
	
	module->isConnected = false;
   32936:	687b      	ldr	r3, [r7, #4]
   32938:	2234      	movs	r2, #52	; 0x34
   3293a:	2100      	movs	r1, #0
   3293c:	5499      	strb	r1, [r3, r2]
	return rc;
   3293e:	68fb      	ldr	r3, [r7, #12]
}
   32940:	0018      	movs	r0, r3
   32942:	46bd      	mov	sp, r7
   32944:	b004      	add	sp, #16
   32946:	bd80      	pop	{r7, pc}
   32948:	000320cd 	.word	0x000320cd

0003294c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   3294c:	b580      	push	{r7, lr}
   3294e:	b08a      	sub	sp, #40	; 0x28
   32950:	af00      	add	r7, sp, #0
   32952:	60f8      	str	r0, [r7, #12]
   32954:	60b9      	str	r1, [r7, #8]
   32956:	607a      	str	r2, [r7, #4]
   32958:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   3295a:	2314      	movs	r3, #20
   3295c:	18fb      	adds	r3, r7, r3
   3295e:	2230      	movs	r2, #48	; 0x30
   32960:	18ba      	adds	r2, r7, r2
   32962:	7812      	ldrb	r2, [r2, #0]
   32964:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   32966:	2314      	movs	r3, #20
   32968:	18fb      	adds	r3, r7, r3
   3296a:	687a      	ldr	r2, [r7, #4]
   3296c:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   3296e:	2314      	movs	r3, #20
   32970:	18fb      	adds	r3, r7, r3
   32972:	683a      	ldr	r2, [r7, #0]
   32974:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   32976:	2314      	movs	r3, #20
   32978:	18fb      	adds	r3, r7, r3
   3297a:	2234      	movs	r2, #52	; 0x34
   3297c:	18ba      	adds	r2, r7, r2
   3297e:	7812      	ldrb	r2, [r2, #0]
   32980:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   32982:	68fb      	ldr	r3, [r7, #12]
   32984:	69db      	ldr	r3, [r3, #28]
   32986:	2214      	movs	r2, #20
   32988:	18ba      	adds	r2, r7, r2
   3298a:	68b9      	ldr	r1, [r7, #8]
   3298c:	0018      	movs	r0, r3
   3298e:	4b09      	ldr	r3, [pc, #36]	; (329b4 <mqtt_publish+0x68>)
   32990:	4798      	blx	r3
   32992:	0003      	movs	r3, r0
   32994:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   32996:	68fb      	ldr	r3, [r7, #12]
   32998:	681b      	ldr	r3, [r3, #0]
   3299a:	2b00      	cmp	r3, #0
   3299c:	d005      	beq.n	329aa <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   3299e:	68fb      	ldr	r3, [r7, #12]
   329a0:	681b      	ldr	r3, [r3, #0]
   329a2:	68f8      	ldr	r0, [r7, #12]
   329a4:	2200      	movs	r2, #0
   329a6:	2102      	movs	r1, #2
   329a8:	4798      	blx	r3
	
	return rc;
   329aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   329ac:	0018      	movs	r0, r3
   329ae:	46bd      	mov	sp, r7
   329b0:	b00a      	add	sp, #40	; 0x28
   329b2:	bd80      	pop	{r7, pc}
   329b4:	00031f0d 	.word	0x00031f0d

000329b8 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   329b8:	b590      	push	{r4, r7, lr}
   329ba:	b087      	sub	sp, #28
   329bc:	af00      	add	r7, sp, #0
   329be:	60f8      	str	r0, [r7, #12]
   329c0:	60b9      	str	r1, [r7, #8]
   329c2:	603b      	str	r3, [r7, #0]
   329c4:	1dfb      	adds	r3, r7, #7
   329c6:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   329c8:	68fb      	ldr	r3, [r7, #12]
   329ca:	69d8      	ldr	r0, [r3, #28]
   329cc:	683c      	ldr	r4, [r7, #0]
   329ce:	1dfb      	adds	r3, r7, #7
   329d0:	781a      	ldrb	r2, [r3, #0]
   329d2:	68b9      	ldr	r1, [r7, #8]
   329d4:	0023      	movs	r3, r4
   329d6:	4c09      	ldr	r4, [pc, #36]	; (329fc <mqtt_subscribe+0x44>)
   329d8:	47a0      	blx	r4
   329da:	0003      	movs	r3, r0
   329dc:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   329de:	68fb      	ldr	r3, [r7, #12]
   329e0:	681b      	ldr	r3, [r3, #0]
   329e2:	2b00      	cmp	r3, #0
   329e4:	d005      	beq.n	329f2 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   329e6:	68fb      	ldr	r3, [r7, #12]
   329e8:	681b      	ldr	r3, [r3, #0]
   329ea:	68f8      	ldr	r0, [r7, #12]
   329ec:	2200      	movs	r2, #0
   329ee:	2103      	movs	r1, #3
   329f0:	4798      	blx	r3
	
	return rc;
   329f2:	697b      	ldr	r3, [r7, #20]
}
   329f4:	0018      	movs	r0, r3
   329f6:	46bd      	mov	sp, r7
   329f8:	b007      	add	sp, #28
   329fa:	bd90      	pop	{r4, r7, pc}
   329fc:	00031d81 	.word	0x00031d81

00032a00 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   32a00:	b580      	push	{r7, lr}
   32a02:	b082      	sub	sp, #8
   32a04:	af00      	add	r7, sp, #0
   32a06:	6078      	str	r0, [r7, #4]
   32a08:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   32a0a:	687b      	ldr	r3, [r7, #4]
   32a0c:	69db      	ldr	r3, [r3, #28]
   32a0e:	683a      	ldr	r2, [r7, #0]
   32a10:	0011      	movs	r1, r2
   32a12:	0018      	movs	r0, r3
   32a14:	4b03      	ldr	r3, [pc, #12]	; (32a24 <mqtt_yield+0x24>)
   32a16:	4798      	blx	r3
   32a18:	0003      	movs	r3, r0
   32a1a:	0018      	movs	r0, r3
   32a1c:	46bd      	mov	sp, r7
   32a1e:	b002      	add	sp, #8
   32a20:	bd80      	pop	{r7, pc}
   32a22:	46c0      	nop			; (mov r8, r8)
   32a24:	00031b89 	.word	0x00031b89

00032a28 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   32a28:	b590      	push	{r4, r7, lr}
   32a2a:	b085      	sub	sp, #20
   32a2c:	af00      	add	r7, sp, #0
   32a2e:	6078      	str	r0, [r7, #4]
	int len = 0;
   32a30:	2300      	movs	r3, #0
   32a32:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   32a34:	687b      	ldr	r3, [r7, #4]
   32a36:	7a1b      	ldrb	r3, [r3, #8]
   32a38:	2b03      	cmp	r3, #3
   32a3a:	d102      	bne.n	32a42 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   32a3c:	230c      	movs	r3, #12
   32a3e:	60fb      	str	r3, [r7, #12]
   32a40:	e005      	b.n	32a4e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   32a42:	687b      	ldr	r3, [r7, #4]
   32a44:	7a1b      	ldrb	r3, [r3, #8]
   32a46:	2b04      	cmp	r3, #4
   32a48:	d101      	bne.n	32a4e <MQTTSerialize_connectLength+0x26>
		len = 10;
   32a4a:	230a      	movs	r3, #10
   32a4c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   32a4e:	687b      	ldr	r3, [r7, #4]
   32a50:	68d8      	ldr	r0, [r3, #12]
   32a52:	6919      	ldr	r1, [r3, #16]
   32a54:	695a      	ldr	r2, [r3, #20]
   32a56:	4b25      	ldr	r3, [pc, #148]	; (32aec <MQTTSerialize_connectLength+0xc4>)
   32a58:	4798      	blx	r3
   32a5a:	0003      	movs	r3, r0
   32a5c:	3302      	adds	r3, #2
   32a5e:	68fa      	ldr	r2, [r7, #12]
   32a60:	18d3      	adds	r3, r2, r3
   32a62:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   32a64:	687b      	ldr	r3, [r7, #4]
   32a66:	7edb      	ldrb	r3, [r3, #27]
   32a68:	2b00      	cmp	r3, #0
   32a6a:	d013      	beq.n	32a94 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   32a6c:	687b      	ldr	r3, [r7, #4]
   32a6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   32a70:	6a99      	ldr	r1, [r3, #40]	; 0x28
   32a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   32a74:	4b1d      	ldr	r3, [pc, #116]	; (32aec <MQTTSerialize_connectLength+0xc4>)
   32a76:	4798      	blx	r3
   32a78:	0003      	movs	r3, r0
   32a7a:	1c9c      	adds	r4, r3, #2
   32a7c:	687b      	ldr	r3, [r7, #4]
   32a7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
   32a80:	6b59      	ldr	r1, [r3, #52]	; 0x34
   32a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   32a84:	4b19      	ldr	r3, [pc, #100]	; (32aec <MQTTSerialize_connectLength+0xc4>)
   32a86:	4798      	blx	r3
   32a88:	0003      	movs	r3, r0
   32a8a:	18e3      	adds	r3, r4, r3
   32a8c:	3302      	adds	r3, #2
   32a8e:	68fa      	ldr	r2, [r7, #12]
   32a90:	18d3      	adds	r3, r2, r3
   32a92:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   32a94:	687b      	ldr	r3, [r7, #4]
   32a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   32a98:	2b00      	cmp	r3, #0
   32a9a:	d103      	bne.n	32aa4 <MQTTSerialize_connectLength+0x7c>
   32a9c:	687b      	ldr	r3, [r7, #4]
   32a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32aa0:	2b00      	cmp	r3, #0
   32aa2:	d00a      	beq.n	32aba <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   32aa4:	687b      	ldr	r3, [r7, #4]
   32aa6:	6c18      	ldr	r0, [r3, #64]	; 0x40
   32aa8:	6c59      	ldr	r1, [r3, #68]	; 0x44
   32aaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   32aac:	4b0f      	ldr	r3, [pc, #60]	; (32aec <MQTTSerialize_connectLength+0xc4>)
   32aae:	4798      	blx	r3
   32ab0:	0003      	movs	r3, r0
   32ab2:	3302      	adds	r3, #2
   32ab4:	68fa      	ldr	r2, [r7, #12]
   32ab6:	18d3      	adds	r3, r2, r3
   32ab8:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   32aba:	687b      	ldr	r3, [r7, #4]
   32abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32abe:	2b00      	cmp	r3, #0
   32ac0:	d103      	bne.n	32aca <MQTTSerialize_connectLength+0xa2>
   32ac2:	687b      	ldr	r3, [r7, #4]
   32ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   32ac6:	2b00      	cmp	r3, #0
   32ac8:	d00a      	beq.n	32ae0 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   32aca:	687b      	ldr	r3, [r7, #4]
   32acc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   32ace:	6d19      	ldr	r1, [r3, #80]	; 0x50
   32ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   32ad2:	4b06      	ldr	r3, [pc, #24]	; (32aec <MQTTSerialize_connectLength+0xc4>)
   32ad4:	4798      	blx	r3
   32ad6:	0003      	movs	r3, r0
   32ad8:	3302      	adds	r3, #2
   32ada:	68fa      	ldr	r2, [r7, #12]
   32adc:	18d3      	adds	r3, r2, r3
   32ade:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   32ae0:	68fb      	ldr	r3, [r7, #12]
}
   32ae2:	0018      	movs	r0, r3
   32ae4:	46bd      	mov	sp, r7
   32ae6:	b005      	add	sp, #20
   32ae8:	bd90      	pop	{r4, r7, pc}
   32aea:	46c0      	nop			; (mov r8, r8)
   32aec:	00033499 	.word	0x00033499

00032af0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   32af0:	b590      	push	{r4, r7, lr}
   32af2:	b08b      	sub	sp, #44	; 0x2c
   32af4:	af00      	add	r7, sp, #0
   32af6:	60f8      	str	r0, [r7, #12]
   32af8:	60b9      	str	r1, [r7, #8]
   32afa:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   32afc:	68fb      	ldr	r3, [r7, #12]
   32afe:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   32b00:	2300      	movs	r3, #0
   32b02:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   32b04:	2300      	movs	r3, #0
   32b06:	617b      	str	r3, [r7, #20]
	int len = 0;
   32b08:	2300      	movs	r3, #0
   32b0a:	623b      	str	r3, [r7, #32]
	int rc = -1;
   32b0c:	2301      	movs	r3, #1
   32b0e:	425b      	negs	r3, r3
   32b10:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   32b12:	687b      	ldr	r3, [r7, #4]
   32b14:	0018      	movs	r0, r3
   32b16:	4b8c      	ldr	r3, [pc, #560]	; (32d48 <MQTTSerialize_connect+0x258>)
   32b18:	4798      	blx	r3
   32b1a:	0003      	movs	r3, r0
   32b1c:	623b      	str	r3, [r7, #32]
   32b1e:	6a3b      	ldr	r3, [r7, #32]
   32b20:	0018      	movs	r0, r3
   32b22:	4b8a      	ldr	r3, [pc, #552]	; (32d4c <MQTTSerialize_connect+0x25c>)
   32b24:	4798      	blx	r3
   32b26:	0002      	movs	r2, r0
   32b28:	68bb      	ldr	r3, [r7, #8]
   32b2a:	429a      	cmp	r2, r3
   32b2c:	dd03      	ble.n	32b36 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32b2e:	2302      	movs	r3, #2
   32b30:	425b      	negs	r3, r3
   32b32:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   32b34:	e103      	b.n	32d3e <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   32b36:	2318      	movs	r3, #24
   32b38:	18fb      	adds	r3, r7, r3
   32b3a:	2200      	movs	r2, #0
   32b3c:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   32b3e:	2318      	movs	r3, #24
   32b40:	18fb      	adds	r3, r7, r3
   32b42:	781a      	ldrb	r2, [r3, #0]
   32b44:	210f      	movs	r1, #15
   32b46:	400a      	ands	r2, r1
   32b48:	1c11      	adds	r1, r2, #0
   32b4a:	2210      	movs	r2, #16
   32b4c:	430a      	orrs	r2, r1
   32b4e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32b50:	2318      	movs	r3, #24
   32b52:	18fb      	adds	r3, r7, r3
   32b54:	781a      	ldrb	r2, [r3, #0]
   32b56:	231c      	movs	r3, #28
   32b58:	18fb      	adds	r3, r7, r3
   32b5a:	0011      	movs	r1, r2
   32b5c:	0018      	movs	r0, r3
   32b5e:	4b7c      	ldr	r3, [pc, #496]	; (32d50 <MQTTSerialize_connect+0x260>)
   32b60:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   32b62:	69fb      	ldr	r3, [r7, #28]
   32b64:	6a3a      	ldr	r2, [r7, #32]
   32b66:	0011      	movs	r1, r2
   32b68:	0018      	movs	r0, r3
   32b6a:	4b7a      	ldr	r3, [pc, #488]	; (32d54 <MQTTSerialize_connect+0x264>)
   32b6c:	4798      	blx	r3
   32b6e:	0002      	movs	r2, r0
   32b70:	69fb      	ldr	r3, [r7, #28]
   32b72:	189b      	adds	r3, r3, r2
   32b74:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   32b76:	687b      	ldr	r3, [r7, #4]
   32b78:	7a1b      	ldrb	r3, [r3, #8]
   32b7a:	2b04      	cmp	r3, #4
   32b7c:	d10d      	bne.n	32b9a <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   32b7e:	4a76      	ldr	r2, [pc, #472]	; (32d58 <MQTTSerialize_connect+0x268>)
   32b80:	231c      	movs	r3, #28
   32b82:	18fb      	adds	r3, r7, r3
   32b84:	0011      	movs	r1, r2
   32b86:	0018      	movs	r0, r3
   32b88:	4b74      	ldr	r3, [pc, #464]	; (32d5c <MQTTSerialize_connect+0x26c>)
   32b8a:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   32b8c:	231c      	movs	r3, #28
   32b8e:	18fb      	adds	r3, r7, r3
   32b90:	2104      	movs	r1, #4
   32b92:	0018      	movs	r0, r3
   32b94:	4b6e      	ldr	r3, [pc, #440]	; (32d50 <MQTTSerialize_connect+0x260>)
   32b96:	4798      	blx	r3
   32b98:	e00c      	b.n	32bb4 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   32b9a:	4a71      	ldr	r2, [pc, #452]	; (32d60 <MQTTSerialize_connect+0x270>)
   32b9c:	231c      	movs	r3, #28
   32b9e:	18fb      	adds	r3, r7, r3
   32ba0:	0011      	movs	r1, r2
   32ba2:	0018      	movs	r0, r3
   32ba4:	4b6d      	ldr	r3, [pc, #436]	; (32d5c <MQTTSerialize_connect+0x26c>)
   32ba6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   32ba8:	231c      	movs	r3, #28
   32baa:	18fb      	adds	r3, r7, r3
   32bac:	2103      	movs	r1, #3
   32bae:	0018      	movs	r0, r3
   32bb0:	4b67      	ldr	r3, [pc, #412]	; (32d50 <MQTTSerialize_connect+0x260>)
   32bb2:	4798      	blx	r3
	}

	flags.all = 0;
   32bb4:	2314      	movs	r3, #20
   32bb6:	18fb      	adds	r3, r7, r3
   32bb8:	2200      	movs	r2, #0
   32bba:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   32bbc:	687b      	ldr	r3, [r7, #4]
   32bbe:	7e9b      	ldrb	r3, [r3, #26]
   32bc0:	1c1a      	adds	r2, r3, #0
   32bc2:	2301      	movs	r3, #1
   32bc4:	4013      	ands	r3, r2
   32bc6:	b2da      	uxtb	r2, r3
   32bc8:	2314      	movs	r3, #20
   32bca:	18fb      	adds	r3, r7, r3
   32bcc:	2101      	movs	r1, #1
   32bce:	400a      	ands	r2, r1
   32bd0:	1890      	adds	r0, r2, r2
   32bd2:	781a      	ldrb	r2, [r3, #0]
   32bd4:	2102      	movs	r1, #2
   32bd6:	438a      	bics	r2, r1
   32bd8:	1c11      	adds	r1, r2, #0
   32bda:	1c02      	adds	r2, r0, #0
   32bdc:	430a      	orrs	r2, r1
   32bde:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   32be0:	687b      	ldr	r3, [r7, #4]
   32be2:	7edb      	ldrb	r3, [r3, #27]
   32be4:	1e5a      	subs	r2, r3, #1
   32be6:	4193      	sbcs	r3, r2
   32be8:	b2da      	uxtb	r2, r3
   32bea:	2314      	movs	r3, #20
   32bec:	18fb      	adds	r3, r7, r3
   32bee:	2101      	movs	r1, #1
   32bf0:	400a      	ands	r2, r1
   32bf2:	0090      	lsls	r0, r2, #2
   32bf4:	781a      	ldrb	r2, [r3, #0]
   32bf6:	2104      	movs	r1, #4
   32bf8:	438a      	bics	r2, r1
   32bfa:	1c11      	adds	r1, r2, #0
   32bfc:	1c02      	adds	r2, r0, #0
   32bfe:	430a      	orrs	r2, r1
   32c00:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   32c02:	2314      	movs	r3, #20
   32c04:	18fb      	adds	r3, r7, r3
   32c06:	781b      	ldrb	r3, [r3, #0]
   32c08:	2204      	movs	r2, #4
   32c0a:	4013      	ands	r3, r2
   32c0c:	b2db      	uxtb	r3, r3
   32c0e:	2b00      	cmp	r3, #0
   32c10:	d025      	beq.n	32c5e <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   32c12:	687b      	ldr	r3, [r7, #4]
   32c14:	223d      	movs	r2, #61	; 0x3d
   32c16:	5c9b      	ldrb	r3, [r3, r2]
   32c18:	1c1a      	adds	r2, r3, #0
   32c1a:	2303      	movs	r3, #3
   32c1c:	4013      	ands	r3, r2
   32c1e:	b2da      	uxtb	r2, r3
   32c20:	2314      	movs	r3, #20
   32c22:	18fb      	adds	r3, r7, r3
   32c24:	2103      	movs	r1, #3
   32c26:	400a      	ands	r2, r1
   32c28:	00d0      	lsls	r0, r2, #3
   32c2a:	781a      	ldrb	r2, [r3, #0]
   32c2c:	2118      	movs	r1, #24
   32c2e:	438a      	bics	r2, r1
   32c30:	1c11      	adds	r1, r2, #0
   32c32:	1c02      	adds	r2, r0, #0
   32c34:	430a      	orrs	r2, r1
   32c36:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   32c38:	687b      	ldr	r3, [r7, #4]
   32c3a:	223c      	movs	r2, #60	; 0x3c
   32c3c:	5c9b      	ldrb	r3, [r3, r2]
   32c3e:	1c1a      	adds	r2, r3, #0
   32c40:	2301      	movs	r3, #1
   32c42:	4013      	ands	r3, r2
   32c44:	b2da      	uxtb	r2, r3
   32c46:	2314      	movs	r3, #20
   32c48:	18fb      	adds	r3, r7, r3
   32c4a:	2101      	movs	r1, #1
   32c4c:	400a      	ands	r2, r1
   32c4e:	0150      	lsls	r0, r2, #5
   32c50:	781a      	ldrb	r2, [r3, #0]
   32c52:	2120      	movs	r1, #32
   32c54:	438a      	bics	r2, r1
   32c56:	1c11      	adds	r1, r2, #0
   32c58:	1c02      	adds	r2, r0, #0
   32c5a:	430a      	orrs	r2, r1
   32c5c:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   32c5e:	687b      	ldr	r3, [r7, #4]
   32c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   32c62:	2b00      	cmp	r3, #0
   32c64:	d103      	bne.n	32c6e <MQTTSerialize_connect+0x17e>
   32c66:	687b      	ldr	r3, [r7, #4]
   32c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32c6a:	2b00      	cmp	r3, #0
   32c6c:	d006      	beq.n	32c7c <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   32c6e:	2314      	movs	r3, #20
   32c70:	18fb      	adds	r3, r7, r3
   32c72:	781a      	ldrb	r2, [r3, #0]
   32c74:	2180      	movs	r1, #128	; 0x80
   32c76:	4249      	negs	r1, r1
   32c78:	430a      	orrs	r2, r1
   32c7a:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   32c7c:	687b      	ldr	r3, [r7, #4]
   32c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32c80:	2b00      	cmp	r3, #0
   32c82:	d103      	bne.n	32c8c <MQTTSerialize_connect+0x19c>
   32c84:	687b      	ldr	r3, [r7, #4]
   32c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   32c88:	2b00      	cmp	r3, #0
   32c8a:	d005      	beq.n	32c98 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   32c8c:	2314      	movs	r3, #20
   32c8e:	18fb      	adds	r3, r7, r3
   32c90:	781a      	ldrb	r2, [r3, #0]
   32c92:	2140      	movs	r1, #64	; 0x40
   32c94:	430a      	orrs	r2, r1
   32c96:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   32c98:	2314      	movs	r3, #20
   32c9a:	18fb      	adds	r3, r7, r3
   32c9c:	781a      	ldrb	r2, [r3, #0]
   32c9e:	231c      	movs	r3, #28
   32ca0:	18fb      	adds	r3, r7, r3
   32ca2:	0011      	movs	r1, r2
   32ca4:	0018      	movs	r0, r3
   32ca6:	4b2a      	ldr	r3, [pc, #168]	; (32d50 <MQTTSerialize_connect+0x260>)
   32ca8:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   32caa:	687b      	ldr	r3, [r7, #4]
   32cac:	8b1b      	ldrh	r3, [r3, #24]
   32cae:	001a      	movs	r2, r3
   32cb0:	231c      	movs	r3, #28
   32cb2:	18fb      	adds	r3, r7, r3
   32cb4:	0011      	movs	r1, r2
   32cb6:	0018      	movs	r0, r3
   32cb8:	4b2a      	ldr	r3, [pc, #168]	; (32d64 <MQTTSerialize_connect+0x274>)
   32cba:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   32cbc:	687b      	ldr	r3, [r7, #4]
   32cbe:	221c      	movs	r2, #28
   32cc0:	18b8      	adds	r0, r7, r2
   32cc2:	68d9      	ldr	r1, [r3, #12]
   32cc4:	691a      	ldr	r2, [r3, #16]
   32cc6:	695b      	ldr	r3, [r3, #20]
   32cc8:	4c27      	ldr	r4, [pc, #156]	; (32d68 <MQTTSerialize_connect+0x278>)
   32cca:	47a0      	blx	r4
	if (options->willFlag)
   32ccc:	687b      	ldr	r3, [r7, #4]
   32cce:	7edb      	ldrb	r3, [r3, #27]
   32cd0:	2b00      	cmp	r3, #0
   32cd2:	d00f      	beq.n	32cf4 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   32cd4:	687b      	ldr	r3, [r7, #4]
   32cd6:	221c      	movs	r2, #28
   32cd8:	18b8      	adds	r0, r7, r2
   32cda:	6a59      	ldr	r1, [r3, #36]	; 0x24
   32cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   32cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   32ce0:	4c21      	ldr	r4, [pc, #132]	; (32d68 <MQTTSerialize_connect+0x278>)
   32ce2:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   32ce4:	687b      	ldr	r3, [r7, #4]
   32ce6:	221c      	movs	r2, #28
   32ce8:	18b8      	adds	r0, r7, r2
   32cea:	6b19      	ldr	r1, [r3, #48]	; 0x30
   32cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   32cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   32cf0:	4c1d      	ldr	r4, [pc, #116]	; (32d68 <MQTTSerialize_connect+0x278>)
   32cf2:	47a0      	blx	r4
	}
	if (flags.bits.username)
   32cf4:	2314      	movs	r3, #20
   32cf6:	18fb      	adds	r3, r7, r3
   32cf8:	781b      	ldrb	r3, [r3, #0]
   32cfa:	227f      	movs	r2, #127	; 0x7f
   32cfc:	4393      	bics	r3, r2
   32cfe:	b2db      	uxtb	r3, r3
   32d00:	2b00      	cmp	r3, #0
   32d02:	d007      	beq.n	32d14 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   32d04:	687b      	ldr	r3, [r7, #4]
   32d06:	221c      	movs	r2, #28
   32d08:	18b8      	adds	r0, r7, r2
   32d0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   32d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   32d10:	4c15      	ldr	r4, [pc, #84]	; (32d68 <MQTTSerialize_connect+0x278>)
   32d12:	47a0      	blx	r4
	if (flags.bits.password)
   32d14:	2314      	movs	r3, #20
   32d16:	18fb      	adds	r3, r7, r3
   32d18:	781b      	ldrb	r3, [r3, #0]
   32d1a:	2240      	movs	r2, #64	; 0x40
   32d1c:	4013      	ands	r3, r2
   32d1e:	b2db      	uxtb	r3, r3
   32d20:	2b00      	cmp	r3, #0
   32d22:	d007      	beq.n	32d34 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   32d24:	687b      	ldr	r3, [r7, #4]
   32d26:	221c      	movs	r2, #28
   32d28:	18b8      	adds	r0, r7, r2
   32d2a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   32d2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   32d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   32d30:	4c0d      	ldr	r4, [pc, #52]	; (32d68 <MQTTSerialize_connect+0x278>)
   32d32:	47a0      	blx	r4

	rc = ptr - buf;
   32d34:	69fb      	ldr	r3, [r7, #28]
   32d36:	001a      	movs	r2, r3
   32d38:	68fb      	ldr	r3, [r7, #12]
   32d3a:	1ad3      	subs	r3, r2, r3
   32d3c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   32d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32d40:	0018      	movs	r0, r3
   32d42:	46bd      	mov	sp, r7
   32d44:	b00b      	add	sp, #44	; 0x2c
   32d46:	bd90      	pop	{r4, r7, pc}
   32d48:	00032a29 	.word	0x00032a29
   32d4c:	000331bd 	.word	0x000331bd
   32d50:	000332df 	.word	0x000332df
   32d54:	000330c5 	.word	0x000330c5
   32d58:	0003e220 	.word	0x0003e220
   32d5c:	00033361 	.word	0x00033361
   32d60:	0003e228 	.word	0x0003e228
   32d64:	00033309 	.word	0x00033309
   32d68:	000333b1 	.word	0x000333b1

00032d6c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   32d6c:	b580      	push	{r7, lr}
   32d6e:	b08a      	sub	sp, #40	; 0x28
   32d70:	af00      	add	r7, sp, #0
   32d72:	60f8      	str	r0, [r7, #12]
   32d74:	60b9      	str	r1, [r7, #8]
   32d76:	607a      	str	r2, [r7, #4]
   32d78:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   32d7a:	2300      	movs	r3, #0
   32d7c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32d7e:	687b      	ldr	r3, [r7, #4]
   32d80:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32d82:	2300      	movs	r3, #0
   32d84:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32d86:	2300      	movs	r3, #0
   32d88:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   32d8a:	2300      	movs	r3, #0
   32d8c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   32d8e:	2318      	movs	r3, #24
   32d90:	18fb      	adds	r3, r7, r3
   32d92:	0018      	movs	r0, r3
   32d94:	4b25      	ldr	r3, [pc, #148]	; (32e2c <MQTTDeserialize_connack+0xc0>)
   32d96:	4798      	blx	r3
   32d98:	0003      	movs	r3, r0
   32d9a:	001a      	movs	r2, r3
   32d9c:	231c      	movs	r3, #28
   32d9e:	18fb      	adds	r3, r7, r3
   32da0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   32da2:	231c      	movs	r3, #28
   32da4:	18fb      	adds	r3, r7, r3
   32da6:	781b      	ldrb	r3, [r3, #0]
   32da8:	220f      	movs	r2, #15
   32daa:	4393      	bics	r3, r2
   32dac:	b2db      	uxtb	r3, r3
   32dae:	2b20      	cmp	r3, #32
   32db0:	d134      	bne.n	32e1c <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32db2:	69bb      	ldr	r3, [r7, #24]
   32db4:	2214      	movs	r2, #20
   32db6:	18ba      	adds	r2, r7, r2
   32db8:	0011      	movs	r1, r2
   32dba:	0018      	movs	r0, r3
   32dbc:	4b1c      	ldr	r3, [pc, #112]	; (32e30 <MQTTDeserialize_connack+0xc4>)
   32dbe:	4798      	blx	r3
   32dc0:	0003      	movs	r3, r0
   32dc2:	627b      	str	r3, [r7, #36]	; 0x24
   32dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32dc6:	69bb      	ldr	r3, [r7, #24]
   32dc8:	189b      	adds	r3, r3, r2
   32dca:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32dcc:	69bb      	ldr	r3, [r7, #24]
   32dce:	697a      	ldr	r2, [r7, #20]
   32dd0:	189b      	adds	r3, r3, r2
   32dd2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   32dd4:	6a3b      	ldr	r3, [r7, #32]
   32dd6:	69ba      	ldr	r2, [r7, #24]
   32dd8:	1a9b      	subs	r3, r3, r2
   32dda:	2b01      	cmp	r3, #1
   32ddc:	dd20      	ble.n	32e20 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   32dde:	2318      	movs	r3, #24
   32de0:	18fb      	adds	r3, r7, r3
   32de2:	0018      	movs	r0, r3
   32de4:	4b11      	ldr	r3, [pc, #68]	; (32e2c <MQTTDeserialize_connack+0xc0>)
   32de6:	4798      	blx	r3
   32de8:	0003      	movs	r3, r0
   32dea:	001a      	movs	r2, r3
   32dec:	2310      	movs	r3, #16
   32dee:	18fb      	adds	r3, r7, r3
   32df0:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   32df2:	2310      	movs	r3, #16
   32df4:	18fb      	adds	r3, r7, r3
   32df6:	781b      	ldrb	r3, [r3, #0]
   32df8:	061b      	lsls	r3, r3, #24
   32dfa:	0fdb      	lsrs	r3, r3, #31
   32dfc:	b2db      	uxtb	r3, r3
   32dfe:	001a      	movs	r2, r3
   32e00:	68fb      	ldr	r3, [r7, #12]
   32e02:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   32e04:	2318      	movs	r3, #24
   32e06:	18fb      	adds	r3, r7, r3
   32e08:	0018      	movs	r0, r3
   32e0a:	4b08      	ldr	r3, [pc, #32]	; (32e2c <MQTTDeserialize_connack+0xc0>)
   32e0c:	4798      	blx	r3
   32e0e:	0003      	movs	r3, r0
   32e10:	001a      	movs	r2, r3
   32e12:	68bb      	ldr	r3, [r7, #8]
   32e14:	701a      	strb	r2, [r3, #0]

	rc = 1;
   32e16:	2301      	movs	r3, #1
   32e18:	627b      	str	r3, [r7, #36]	; 0x24
   32e1a:	e002      	b.n	32e22 <MQTTDeserialize_connack+0xb6>
		goto exit;
   32e1c:	46c0      	nop			; (mov r8, r8)
   32e1e:	e000      	b.n	32e22 <MQTTDeserialize_connack+0xb6>
		goto exit;
   32e20:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32e24:	0018      	movs	r0, r3
   32e26:	46bd      	mov	sp, r7
   32e28:	b00a      	add	sp, #40	; 0x28
   32e2a:	bd80      	pop	{r7, pc}
   32e2c:	000332b3 	.word	0x000332b3
   32e30:	0003324d 	.word	0x0003324d

00032e34 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   32e34:	b580      	push	{r7, lr}
   32e36:	b088      	sub	sp, #32
   32e38:	af00      	add	r7, sp, #0
   32e3a:	60f8      	str	r0, [r7, #12]
   32e3c:	60b9      	str	r1, [r7, #8]
   32e3e:	1dfb      	adds	r3, r7, #7
   32e40:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   32e42:	2300      	movs	r3, #0
   32e44:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   32e46:	2301      	movs	r3, #1
   32e48:	425b      	negs	r3, r3
   32e4a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   32e4c:	68fb      	ldr	r3, [r7, #12]
   32e4e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   32e50:	68bb      	ldr	r3, [r7, #8]
   32e52:	2b01      	cmp	r3, #1
   32e54:	dc03      	bgt.n	32e5e <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   32e56:	2302      	movs	r3, #2
   32e58:	425b      	negs	r3, r3
   32e5a:	61fb      	str	r3, [r7, #28]
		goto exit;
   32e5c:	e029      	b.n	32eb2 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   32e5e:	2318      	movs	r3, #24
   32e60:	18fb      	adds	r3, r7, r3
   32e62:	2200      	movs	r2, #0
   32e64:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   32e66:	1dfb      	adds	r3, r7, #7
   32e68:	781b      	ldrb	r3, [r3, #0]
   32e6a:	220f      	movs	r2, #15
   32e6c:	4013      	ands	r3, r2
   32e6e:	b2da      	uxtb	r2, r3
   32e70:	2318      	movs	r3, #24
   32e72:	18fb      	adds	r3, r7, r3
   32e74:	0110      	lsls	r0, r2, #4
   32e76:	781a      	ldrb	r2, [r3, #0]
   32e78:	210f      	movs	r1, #15
   32e7a:	400a      	ands	r2, r1
   32e7c:	1c11      	adds	r1, r2, #0
   32e7e:	1c02      	adds	r2, r0, #0
   32e80:	430a      	orrs	r2, r1
   32e82:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   32e84:	2318      	movs	r3, #24
   32e86:	18fb      	adds	r3, r7, r3
   32e88:	781a      	ldrb	r2, [r3, #0]
   32e8a:	2314      	movs	r3, #20
   32e8c:	18fb      	adds	r3, r7, r3
   32e8e:	0011      	movs	r1, r2
   32e90:	0018      	movs	r0, r3
   32e92:	4b0a      	ldr	r3, [pc, #40]	; (32ebc <MQTTSerialize_zero+0x88>)
   32e94:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   32e96:	697b      	ldr	r3, [r7, #20]
   32e98:	2100      	movs	r1, #0
   32e9a:	0018      	movs	r0, r3
   32e9c:	4b08      	ldr	r3, [pc, #32]	; (32ec0 <MQTTSerialize_zero+0x8c>)
   32e9e:	4798      	blx	r3
   32ea0:	0002      	movs	r2, r0
   32ea2:	697b      	ldr	r3, [r7, #20]
   32ea4:	189b      	adds	r3, r3, r2
   32ea6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   32ea8:	697b      	ldr	r3, [r7, #20]
   32eaa:	001a      	movs	r2, r3
   32eac:	68fb      	ldr	r3, [r7, #12]
   32eae:	1ad3      	subs	r3, r2, r3
   32eb0:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32eb2:	69fb      	ldr	r3, [r7, #28]
}
   32eb4:	0018      	movs	r0, r3
   32eb6:	46bd      	mov	sp, r7
   32eb8:	b008      	add	sp, #32
   32eba:	bd80      	pop	{r7, pc}
   32ebc:	000332df 	.word	0x000332df
   32ec0:	000330c5 	.word	0x000330c5

00032ec4 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   32ec4:	b580      	push	{r7, lr}
   32ec6:	b082      	sub	sp, #8
   32ec8:	af00      	add	r7, sp, #0
   32eca:	6078      	str	r0, [r7, #4]
   32ecc:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   32ece:	6839      	ldr	r1, [r7, #0]
   32ed0:	687b      	ldr	r3, [r7, #4]
   32ed2:	220e      	movs	r2, #14
   32ed4:	0018      	movs	r0, r3
   32ed6:	4b03      	ldr	r3, [pc, #12]	; (32ee4 <MQTTSerialize_disconnect+0x20>)
   32ed8:	4798      	blx	r3
   32eda:	0003      	movs	r3, r0
}
   32edc:	0018      	movs	r0, r3
   32ede:	46bd      	mov	sp, r7
   32ee0:	b002      	add	sp, #8
   32ee2:	bd80      	pop	{r7, pc}
   32ee4:	00032e35 	.word	0x00032e35

00032ee8 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   32ee8:	b580      	push	{r7, lr}
   32eea:	b082      	sub	sp, #8
   32eec:	af00      	add	r7, sp, #0
   32eee:	6078      	str	r0, [r7, #4]
   32ef0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   32ef2:	6839      	ldr	r1, [r7, #0]
   32ef4:	687b      	ldr	r3, [r7, #4]
   32ef6:	220c      	movs	r2, #12
   32ef8:	0018      	movs	r0, r3
   32efa:	4b03      	ldr	r3, [pc, #12]	; (32f08 <MQTTSerialize_pingreq+0x20>)
   32efc:	4798      	blx	r3
   32efe:	0003      	movs	r3, r0
}
   32f00:	0018      	movs	r0, r3
   32f02:	46bd      	mov	sp, r7
   32f04:	b002      	add	sp, #8
   32f06:	bd80      	pop	{r7, pc}
   32f08:	00032e35 	.word	0x00032e35

00032f0c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   32f0c:	b580      	push	{r7, lr}
   32f0e:	b08a      	sub	sp, #40	; 0x28
   32f10:	af00      	add	r7, sp, #0
   32f12:	60f8      	str	r0, [r7, #12]
   32f14:	60b9      	str	r1, [r7, #8]
   32f16:	607a      	str	r2, [r7, #4]
   32f18:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   32f1a:	2300      	movs	r3, #0
   32f1c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   32f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   32f20:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   32f22:	2300      	movs	r3, #0
   32f24:	623b      	str	r3, [r7, #32]
	int rc = 0;
   32f26:	2300      	movs	r3, #0
   32f28:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   32f2a:	2300      	movs	r3, #0
   32f2c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   32f2e:	2318      	movs	r3, #24
   32f30:	18fb      	adds	r3, r7, r3
   32f32:	0018      	movs	r0, r3
   32f34:	4b32      	ldr	r3, [pc, #200]	; (33000 <MQTTDeserialize_publish+0xf4>)
   32f36:	4798      	blx	r3
   32f38:	0003      	movs	r3, r0
   32f3a:	001a      	movs	r2, r3
   32f3c:	231c      	movs	r3, #28
   32f3e:	18fb      	adds	r3, r7, r3
   32f40:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   32f42:	231c      	movs	r3, #28
   32f44:	18fb      	adds	r3, r7, r3
   32f46:	781b      	ldrb	r3, [r3, #0]
   32f48:	220f      	movs	r2, #15
   32f4a:	4393      	bics	r3, r2
   32f4c:	b2db      	uxtb	r3, r3
   32f4e:	2b30      	cmp	r3, #48	; 0x30
   32f50:	d150      	bne.n	32ff4 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   32f52:	231c      	movs	r3, #28
   32f54:	18fb      	adds	r3, r7, r3
   32f56:	781b      	ldrb	r3, [r3, #0]
   32f58:	071b      	lsls	r3, r3, #28
   32f5a:	0fdb      	lsrs	r3, r3, #31
   32f5c:	b2db      	uxtb	r3, r3
   32f5e:	001a      	movs	r2, r3
   32f60:	68fb      	ldr	r3, [r7, #12]
   32f62:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   32f64:	231c      	movs	r3, #28
   32f66:	18fb      	adds	r3, r7, r3
   32f68:	781b      	ldrb	r3, [r3, #0]
   32f6a:	075b      	lsls	r3, r3, #29
   32f6c:	0f9b      	lsrs	r3, r3, #30
   32f6e:	b2db      	uxtb	r3, r3
   32f70:	001a      	movs	r2, r3
   32f72:	68bb      	ldr	r3, [r7, #8]
   32f74:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   32f76:	231c      	movs	r3, #28
   32f78:	18fb      	adds	r3, r7, r3
   32f7a:	781b      	ldrb	r3, [r3, #0]
   32f7c:	07db      	lsls	r3, r3, #31
   32f7e:	0fdb      	lsrs	r3, r3, #31
   32f80:	b2db      	uxtb	r3, r3
   32f82:	001a      	movs	r2, r3
   32f84:	687b      	ldr	r3, [r7, #4]
   32f86:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   32f88:	69bb      	ldr	r3, [r7, #24]
   32f8a:	2214      	movs	r2, #20
   32f8c:	18ba      	adds	r2, r7, r2
   32f8e:	0011      	movs	r1, r2
   32f90:	0018      	movs	r0, r3
   32f92:	4b1c      	ldr	r3, [pc, #112]	; (33004 <MQTTDeserialize_publish+0xf8>)
   32f94:	4798      	blx	r3
   32f96:	0003      	movs	r3, r0
   32f98:	627b      	str	r3, [r7, #36]	; 0x24
   32f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32f9c:	69bb      	ldr	r3, [r7, #24]
   32f9e:	189b      	adds	r3, r3, r2
   32fa0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   32fa2:	69bb      	ldr	r3, [r7, #24]
   32fa4:	697a      	ldr	r2, [r7, #20]
   32fa6:	189b      	adds	r3, r3, r2
   32fa8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   32faa:	6a3a      	ldr	r2, [r7, #32]
   32fac:	2318      	movs	r3, #24
   32fae:	18f9      	adds	r1, r7, r3
   32fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   32fb2:	0018      	movs	r0, r3
   32fb4:	4b14      	ldr	r3, [pc, #80]	; (33008 <MQTTDeserialize_publish+0xfc>)
   32fb6:	4798      	blx	r3
   32fb8:	1e03      	subs	r3, r0, #0
   32fba:	d01c      	beq.n	32ff6 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   32fbc:	6a3b      	ldr	r3, [r7, #32]
   32fbe:	69ba      	ldr	r2, [r7, #24]
   32fc0:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   32fc2:	d418      	bmi.n	32ff6 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   32fc4:	68bb      	ldr	r3, [r7, #8]
   32fc6:	681b      	ldr	r3, [r3, #0]
   32fc8:	2b00      	cmp	r3, #0
   32fca:	dd08      	ble.n	32fde <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   32fcc:	2318      	movs	r3, #24
   32fce:	18fb      	adds	r3, r7, r3
   32fd0:	0018      	movs	r0, r3
   32fd2:	4b0e      	ldr	r3, [pc, #56]	; (3300c <MQTTDeserialize_publish+0x100>)
   32fd4:	4798      	blx	r3
   32fd6:	0003      	movs	r3, r0
   32fd8:	b29a      	uxth	r2, r3
   32fda:	683b      	ldr	r3, [r7, #0]
   32fdc:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   32fde:	6a3b      	ldr	r3, [r7, #32]
   32fe0:	69ba      	ldr	r2, [r7, #24]
   32fe2:	1a9a      	subs	r2, r3, r2
   32fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   32fe6:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   32fe8:	69ba      	ldr	r2, [r7, #24]
   32fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   32fec:	601a      	str	r2, [r3, #0]
	rc = 1;
   32fee:	2301      	movs	r3, #1
   32ff0:	627b      	str	r3, [r7, #36]	; 0x24
   32ff2:	e000      	b.n	32ff6 <MQTTDeserialize_publish+0xea>
		goto exit;
   32ff4:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   32ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   32ff8:	0018      	movs	r0, r3
   32ffa:	46bd      	mov	sp, r7
   32ffc:	b00a      	add	sp, #40	; 0x28
   32ffe:	bd80      	pop	{r7, pc}
   33000:	000332b3 	.word	0x000332b3
   33004:	0003324d 	.word	0x0003324d
   33008:	00033431 	.word	0x00033431
   3300c:	00033281 	.word	0x00033281

00033010 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   33010:	b580      	push	{r7, lr}
   33012:	b08a      	sub	sp, #40	; 0x28
   33014:	af00      	add	r7, sp, #0
   33016:	60f8      	str	r0, [r7, #12]
   33018:	60b9      	str	r1, [r7, #8]
   3301a:	607a      	str	r2, [r7, #4]
   3301c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3301e:	2300      	movs	r3, #0
   33020:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   33022:	683b      	ldr	r3, [r7, #0]
   33024:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   33026:	2300      	movs	r3, #0
   33028:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3302a:	2300      	movs	r3, #0
   3302c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3302e:	2318      	movs	r3, #24
   33030:	18fb      	adds	r3, r7, r3
   33032:	0018      	movs	r0, r3
   33034:	4b20      	ldr	r3, [pc, #128]	; (330b8 <MQTTDeserialize_ack+0xa8>)
   33036:	4798      	blx	r3
   33038:	0003      	movs	r3, r0
   3303a:	001a      	movs	r2, r3
   3303c:	231c      	movs	r3, #28
   3303e:	18fb      	adds	r3, r7, r3
   33040:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   33042:	231c      	movs	r3, #28
   33044:	18fb      	adds	r3, r7, r3
   33046:	781b      	ldrb	r3, [r3, #0]
   33048:	071b      	lsls	r3, r3, #28
   3304a:	0fdb      	lsrs	r3, r3, #31
   3304c:	b2db      	uxtb	r3, r3
   3304e:	001a      	movs	r2, r3
   33050:	68bb      	ldr	r3, [r7, #8]
   33052:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   33054:	231c      	movs	r3, #28
   33056:	18fb      	adds	r3, r7, r3
   33058:	781b      	ldrb	r3, [r3, #0]
   3305a:	061b      	lsls	r3, r3, #24
   3305c:	0f1b      	lsrs	r3, r3, #28
   3305e:	b2db      	uxtb	r3, r3
   33060:	001a      	movs	r2, r3
   33062:	68fb      	ldr	r3, [r7, #12]
   33064:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   33066:	69bb      	ldr	r3, [r7, #24]
   33068:	2214      	movs	r2, #20
   3306a:	18ba      	adds	r2, r7, r2
   3306c:	0011      	movs	r1, r2
   3306e:	0018      	movs	r0, r3
   33070:	4b12      	ldr	r3, [pc, #72]	; (330bc <MQTTDeserialize_ack+0xac>)
   33072:	4798      	blx	r3
   33074:	0003      	movs	r3, r0
   33076:	627b      	str	r3, [r7, #36]	; 0x24
   33078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3307a:	69bb      	ldr	r3, [r7, #24]
   3307c:	189b      	adds	r3, r3, r2
   3307e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   33080:	69bb      	ldr	r3, [r7, #24]
   33082:	697a      	ldr	r2, [r7, #20]
   33084:	189b      	adds	r3, r3, r2
   33086:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   33088:	6a3b      	ldr	r3, [r7, #32]
   3308a:	69ba      	ldr	r2, [r7, #24]
   3308c:	1a9b      	subs	r3, r3, r2
   3308e:	2b01      	cmp	r3, #1
   33090:	dd0b      	ble.n	330aa <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   33092:	2318      	movs	r3, #24
   33094:	18fb      	adds	r3, r7, r3
   33096:	0018      	movs	r0, r3
   33098:	4b09      	ldr	r3, [pc, #36]	; (330c0 <MQTTDeserialize_ack+0xb0>)
   3309a:	4798      	blx	r3
   3309c:	0003      	movs	r3, r0
   3309e:	b29a      	uxth	r2, r3
   330a0:	687b      	ldr	r3, [r7, #4]
   330a2:	801a      	strh	r2, [r3, #0]

	rc = 1;
   330a4:	2301      	movs	r3, #1
   330a6:	627b      	str	r3, [r7, #36]	; 0x24
   330a8:	e000      	b.n	330ac <MQTTDeserialize_ack+0x9c>
		goto exit;
   330aa:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   330ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   330ae:	0018      	movs	r0, r3
   330b0:	46bd      	mov	sp, r7
   330b2:	b00a      	add	sp, #40	; 0x28
   330b4:	bd80      	pop	{r7, pc}
   330b6:	46c0      	nop			; (mov r8, r8)
   330b8:	000332b3 	.word	0x000332b3
   330bc:	0003324d 	.word	0x0003324d
   330c0:	00033281 	.word	0x00033281

000330c4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   330c4:	b580      	push	{r7, lr}
   330c6:	b084      	sub	sp, #16
   330c8:	af00      	add	r7, sp, #0
   330ca:	6078      	str	r0, [r7, #4]
   330cc:	6039      	str	r1, [r7, #0]
	int rc = 0;
   330ce:	2300      	movs	r3, #0
   330d0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   330d2:	683b      	ldr	r3, [r7, #0]
   330d4:	4a17      	ldr	r2, [pc, #92]	; (33134 <MQTTPacket_encode+0x70>)
   330d6:	4013      	ands	r3, r2
   330d8:	d504      	bpl.n	330e4 <MQTTPacket_encode+0x20>
   330da:	3b01      	subs	r3, #1
   330dc:	2280      	movs	r2, #128	; 0x80
   330de:	4252      	negs	r2, r2
   330e0:	4313      	orrs	r3, r2
   330e2:	3301      	adds	r3, #1
   330e4:	001a      	movs	r2, r3
   330e6:	230b      	movs	r3, #11
   330e8:	18fb      	adds	r3, r7, r3
   330ea:	701a      	strb	r2, [r3, #0]
		length /= 128;
   330ec:	683b      	ldr	r3, [r7, #0]
   330ee:	2b00      	cmp	r3, #0
   330f0:	da00      	bge.n	330f4 <MQTTPacket_encode+0x30>
   330f2:	337f      	adds	r3, #127	; 0x7f
   330f4:	11db      	asrs	r3, r3, #7
   330f6:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   330f8:	683b      	ldr	r3, [r7, #0]
   330fa:	2b00      	cmp	r3, #0
   330fc:	dd08      	ble.n	33110 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   330fe:	230b      	movs	r3, #11
   33100:	18fb      	adds	r3, r7, r3
   33102:	220b      	movs	r2, #11
   33104:	18ba      	adds	r2, r7, r2
   33106:	7812      	ldrb	r2, [r2, #0]
   33108:	2180      	movs	r1, #128	; 0x80
   3310a:	4249      	negs	r1, r1
   3310c:	430a      	orrs	r2, r1
   3310e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   33110:	68fb      	ldr	r3, [r7, #12]
   33112:	1c5a      	adds	r2, r3, #1
   33114:	60fa      	str	r2, [r7, #12]
   33116:	001a      	movs	r2, r3
   33118:	687b      	ldr	r3, [r7, #4]
   3311a:	189b      	adds	r3, r3, r2
   3311c:	220b      	movs	r2, #11
   3311e:	18ba      	adds	r2, r7, r2
   33120:	7812      	ldrb	r2, [r2, #0]
   33122:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   33124:	683b      	ldr	r3, [r7, #0]
   33126:	2b00      	cmp	r3, #0
   33128:	dcd3      	bgt.n	330d2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   3312a:	68fb      	ldr	r3, [r7, #12]
}
   3312c:	0018      	movs	r0, r3
   3312e:	46bd      	mov	sp, r7
   33130:	b004      	add	sp, #16
   33132:	bd80      	pop	{r7, pc}
   33134:	8000007f 	.word	0x8000007f

00033138 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   33138:	b580      	push	{r7, lr}
   3313a:	b086      	sub	sp, #24
   3313c:	af00      	add	r7, sp, #0
   3313e:	6078      	str	r0, [r7, #4]
   33140:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   33142:	2301      	movs	r3, #1
   33144:	617b      	str	r3, [r7, #20]
	int len = 0;
   33146:	2300      	movs	r3, #0
   33148:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   3314a:	683b      	ldr	r3, [r7, #0]
   3314c:	2200      	movs	r2, #0
   3314e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   33150:	2301      	movs	r3, #1
   33152:	425b      	negs	r3, r3
   33154:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   33156:	693b      	ldr	r3, [r7, #16]
   33158:	3301      	adds	r3, #1
   3315a:	613b      	str	r3, [r7, #16]
   3315c:	693b      	ldr	r3, [r7, #16]
   3315e:	2b04      	cmp	r3, #4
   33160:	dd03      	ble.n	3316a <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   33162:	2301      	movs	r3, #1
   33164:	425b      	negs	r3, r3
   33166:	60fb      	str	r3, [r7, #12]
			goto exit;
   33168:	e022      	b.n	331b0 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   3316a:	230b      	movs	r3, #11
   3316c:	18fa      	adds	r2, r7, r3
   3316e:	687b      	ldr	r3, [r7, #4]
   33170:	2101      	movs	r1, #1
   33172:	0010      	movs	r0, r2
   33174:	4798      	blx	r3
   33176:	0003      	movs	r3, r0
   33178:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   3317a:	68fb      	ldr	r3, [r7, #12]
   3317c:	2b01      	cmp	r3, #1
   3317e:	d116      	bne.n	331ae <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   33180:	683b      	ldr	r3, [r7, #0]
   33182:	681a      	ldr	r2, [r3, #0]
   33184:	230b      	movs	r3, #11
   33186:	18fb      	adds	r3, r7, r3
   33188:	781b      	ldrb	r3, [r3, #0]
   3318a:	0019      	movs	r1, r3
   3318c:	237f      	movs	r3, #127	; 0x7f
   3318e:	400b      	ands	r3, r1
   33190:	6979      	ldr	r1, [r7, #20]
   33192:	434b      	muls	r3, r1
   33194:	18d2      	adds	r2, r2, r3
   33196:	683b      	ldr	r3, [r7, #0]
   33198:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   3319a:	697b      	ldr	r3, [r7, #20]
   3319c:	01db      	lsls	r3, r3, #7
   3319e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   331a0:	230b      	movs	r3, #11
   331a2:	18fb      	adds	r3, r7, r3
   331a4:	781b      	ldrb	r3, [r3, #0]
   331a6:	b25b      	sxtb	r3, r3
   331a8:	2b00      	cmp	r3, #0
   331aa:	dbd1      	blt.n	33150 <MQTTPacket_decode+0x18>
   331ac:	e000      	b.n	331b0 <MQTTPacket_decode+0x78>
			goto exit;
   331ae:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   331b0:	693b      	ldr	r3, [r7, #16]
}
   331b2:	0018      	movs	r0, r3
   331b4:	46bd      	mov	sp, r7
   331b6:	b006      	add	sp, #24
   331b8:	bd80      	pop	{r7, pc}
	...

000331bc <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   331bc:	b580      	push	{r7, lr}
   331be:	b082      	sub	sp, #8
   331c0:	af00      	add	r7, sp, #0
   331c2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   331c4:	687b      	ldr	r3, [r7, #4]
   331c6:	3301      	adds	r3, #1
   331c8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   331ca:	687b      	ldr	r3, [r7, #4]
   331cc:	2b7f      	cmp	r3, #127	; 0x7f
   331ce:	dc03      	bgt.n	331d8 <MQTTPacket_len+0x1c>
		rem_len += 1;
   331d0:	687b      	ldr	r3, [r7, #4]
   331d2:	3301      	adds	r3, #1
   331d4:	607b      	str	r3, [r7, #4]
   331d6:	e012      	b.n	331fe <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   331d8:	687b      	ldr	r3, [r7, #4]
   331da:	4a0b      	ldr	r2, [pc, #44]	; (33208 <MQTTPacket_len+0x4c>)
   331dc:	4293      	cmp	r3, r2
   331de:	dc03      	bgt.n	331e8 <MQTTPacket_len+0x2c>
		rem_len += 2;
   331e0:	687b      	ldr	r3, [r7, #4]
   331e2:	3302      	adds	r3, #2
   331e4:	607b      	str	r3, [r7, #4]
   331e6:	e00a      	b.n	331fe <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   331e8:	687b      	ldr	r3, [r7, #4]
   331ea:	4a08      	ldr	r2, [pc, #32]	; (3320c <MQTTPacket_len+0x50>)
   331ec:	4293      	cmp	r3, r2
   331ee:	dc03      	bgt.n	331f8 <MQTTPacket_len+0x3c>
		rem_len += 3;
   331f0:	687b      	ldr	r3, [r7, #4]
   331f2:	3303      	adds	r3, #3
   331f4:	607b      	str	r3, [r7, #4]
   331f6:	e002      	b.n	331fe <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   331f8:	687b      	ldr	r3, [r7, #4]
   331fa:	3304      	adds	r3, #4
   331fc:	607b      	str	r3, [r7, #4]
	return rem_len;
   331fe:	687b      	ldr	r3, [r7, #4]
}
   33200:	0018      	movs	r0, r3
   33202:	46bd      	mov	sp, r7
   33204:	b002      	add	sp, #8
   33206:	bd80      	pop	{r7, pc}
   33208:	00003fff 	.word	0x00003fff
   3320c:	001ffffe 	.word	0x001ffffe

00033210 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   33210:	b580      	push	{r7, lr}
   33212:	b084      	sub	sp, #16
   33214:	af00      	add	r7, sp, #0
   33216:	6078      	str	r0, [r7, #4]
   33218:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   3321a:	2300      	movs	r3, #0
   3321c:	60fb      	str	r3, [r7, #12]
   3321e:	e00a      	b.n	33236 <bufchar+0x26>
		*c = *bufptr++;
   33220:	4b09      	ldr	r3, [pc, #36]	; (33248 <bufchar+0x38>)
   33222:	681b      	ldr	r3, [r3, #0]
   33224:	1c59      	adds	r1, r3, #1
   33226:	4a08      	ldr	r2, [pc, #32]	; (33248 <bufchar+0x38>)
   33228:	6011      	str	r1, [r2, #0]
   3322a:	781a      	ldrb	r2, [r3, #0]
   3322c:	687b      	ldr	r3, [r7, #4]
   3322e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   33230:	68fb      	ldr	r3, [r7, #12]
   33232:	3301      	adds	r3, #1
   33234:	60fb      	str	r3, [r7, #12]
   33236:	68fa      	ldr	r2, [r7, #12]
   33238:	683b      	ldr	r3, [r7, #0]
   3323a:	429a      	cmp	r2, r3
   3323c:	dbf0      	blt.n	33220 <bufchar+0x10>
	return count;
   3323e:	683b      	ldr	r3, [r7, #0]
}
   33240:	0018      	movs	r0, r3
   33242:	46bd      	mov	sp, r7
   33244:	b004      	add	sp, #16
   33246:	bd80      	pop	{r7, pc}
   33248:	20004610 	.word	0x20004610

0003324c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   3324c:	b580      	push	{r7, lr}
   3324e:	b082      	sub	sp, #8
   33250:	af00      	add	r7, sp, #0
   33252:	6078      	str	r0, [r7, #4]
   33254:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   33256:	4b07      	ldr	r3, [pc, #28]	; (33274 <MQTTPacket_decodeBuf+0x28>)
   33258:	687a      	ldr	r2, [r7, #4]
   3325a:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   3325c:	683a      	ldr	r2, [r7, #0]
   3325e:	4b06      	ldr	r3, [pc, #24]	; (33278 <MQTTPacket_decodeBuf+0x2c>)
   33260:	0011      	movs	r1, r2
   33262:	0018      	movs	r0, r3
   33264:	4b05      	ldr	r3, [pc, #20]	; (3327c <MQTTPacket_decodeBuf+0x30>)
   33266:	4798      	blx	r3
   33268:	0003      	movs	r3, r0
}
   3326a:	0018      	movs	r0, r3
   3326c:	46bd      	mov	sp, r7
   3326e:	b002      	add	sp, #8
   33270:	bd80      	pop	{r7, pc}
   33272:	46c0      	nop			; (mov r8, r8)
   33274:	20004610 	.word	0x20004610
   33278:	00033211 	.word	0x00033211
   3327c:	00033139 	.word	0x00033139

00033280 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   33280:	b580      	push	{r7, lr}
   33282:	b084      	sub	sp, #16
   33284:	af00      	add	r7, sp, #0
   33286:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   33288:	687b      	ldr	r3, [r7, #4]
   3328a:	681b      	ldr	r3, [r3, #0]
   3328c:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   3328e:	68fb      	ldr	r3, [r7, #12]
   33290:	781b      	ldrb	r3, [r3, #0]
   33292:	021b      	lsls	r3, r3, #8
   33294:	68fa      	ldr	r2, [r7, #12]
   33296:	3201      	adds	r2, #1
   33298:	7812      	ldrb	r2, [r2, #0]
   3329a:	189b      	adds	r3, r3, r2
   3329c:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   3329e:	687b      	ldr	r3, [r7, #4]
   332a0:	681b      	ldr	r3, [r3, #0]
   332a2:	1c9a      	adds	r2, r3, #2
   332a4:	687b      	ldr	r3, [r7, #4]
   332a6:	601a      	str	r2, [r3, #0]
	return len;
   332a8:	68bb      	ldr	r3, [r7, #8]
}
   332aa:	0018      	movs	r0, r3
   332ac:	46bd      	mov	sp, r7
   332ae:	b004      	add	sp, #16
   332b0:	bd80      	pop	{r7, pc}

000332b2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   332b2:	b580      	push	{r7, lr}
   332b4:	b084      	sub	sp, #16
   332b6:	af00      	add	r7, sp, #0
   332b8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   332ba:	687b      	ldr	r3, [r7, #4]
   332bc:	681a      	ldr	r2, [r3, #0]
   332be:	230f      	movs	r3, #15
   332c0:	18fb      	adds	r3, r7, r3
   332c2:	7812      	ldrb	r2, [r2, #0]
   332c4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   332c6:	687b      	ldr	r3, [r7, #4]
   332c8:	681b      	ldr	r3, [r3, #0]
   332ca:	1c5a      	adds	r2, r3, #1
   332cc:	687b      	ldr	r3, [r7, #4]
   332ce:	601a      	str	r2, [r3, #0]
	return c;
   332d0:	230f      	movs	r3, #15
   332d2:	18fb      	adds	r3, r7, r3
   332d4:	781b      	ldrb	r3, [r3, #0]
}
   332d6:	0018      	movs	r0, r3
   332d8:	46bd      	mov	sp, r7
   332da:	b004      	add	sp, #16
   332dc:	bd80      	pop	{r7, pc}

000332de <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   332de:	b580      	push	{r7, lr}
   332e0:	b082      	sub	sp, #8
   332e2:	af00      	add	r7, sp, #0
   332e4:	6078      	str	r0, [r7, #4]
   332e6:	000a      	movs	r2, r1
   332e8:	1cfb      	adds	r3, r7, #3
   332ea:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   332ec:	687b      	ldr	r3, [r7, #4]
   332ee:	681b      	ldr	r3, [r3, #0]
   332f0:	1cfa      	adds	r2, r7, #3
   332f2:	7812      	ldrb	r2, [r2, #0]
   332f4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   332f6:	687b      	ldr	r3, [r7, #4]
   332f8:	681b      	ldr	r3, [r3, #0]
   332fa:	1c5a      	adds	r2, r3, #1
   332fc:	687b      	ldr	r3, [r7, #4]
   332fe:	601a      	str	r2, [r3, #0]
}
   33300:	46c0      	nop			; (mov r8, r8)
   33302:	46bd      	mov	sp, r7
   33304:	b002      	add	sp, #8
   33306:	bd80      	pop	{r7, pc}

00033308 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   33308:	b580      	push	{r7, lr}
   3330a:	b082      	sub	sp, #8
   3330c:	af00      	add	r7, sp, #0
   3330e:	6078      	str	r0, [r7, #4]
   33310:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   33312:	687b      	ldr	r3, [r7, #4]
   33314:	681a      	ldr	r2, [r3, #0]
   33316:	683b      	ldr	r3, [r7, #0]
   33318:	2b00      	cmp	r3, #0
   3331a:	da00      	bge.n	3331e <writeInt+0x16>
   3331c:	33ff      	adds	r3, #255	; 0xff
   3331e:	121b      	asrs	r3, r3, #8
   33320:	b2db      	uxtb	r3, r3
   33322:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   33324:	687b      	ldr	r3, [r7, #4]
   33326:	681b      	ldr	r3, [r3, #0]
   33328:	1c5a      	adds	r2, r3, #1
   3332a:	687b      	ldr	r3, [r7, #4]
   3332c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   3332e:	687b      	ldr	r3, [r7, #4]
   33330:	681a      	ldr	r2, [r3, #0]
   33332:	683b      	ldr	r3, [r7, #0]
   33334:	4908      	ldr	r1, [pc, #32]	; (33358 <writeInt+0x50>)
   33336:	400b      	ands	r3, r1
   33338:	d503      	bpl.n	33342 <writeInt+0x3a>
   3333a:	3b01      	subs	r3, #1
   3333c:	4907      	ldr	r1, [pc, #28]	; (3335c <writeInt+0x54>)
   3333e:	430b      	orrs	r3, r1
   33340:	3301      	adds	r3, #1
   33342:	b2db      	uxtb	r3, r3
   33344:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   33346:	687b      	ldr	r3, [r7, #4]
   33348:	681b      	ldr	r3, [r3, #0]
   3334a:	1c5a      	adds	r2, r3, #1
   3334c:	687b      	ldr	r3, [r7, #4]
   3334e:	601a      	str	r2, [r3, #0]
}
   33350:	46c0      	nop			; (mov r8, r8)
   33352:	46bd      	mov	sp, r7
   33354:	b002      	add	sp, #8
   33356:	bd80      	pop	{r7, pc}
   33358:	800000ff 	.word	0x800000ff
   3335c:	ffffff00 	.word	0xffffff00

00033360 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   33360:	b580      	push	{r7, lr}
   33362:	b084      	sub	sp, #16
   33364:	af00      	add	r7, sp, #0
   33366:	6078      	str	r0, [r7, #4]
   33368:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   3336a:	683b      	ldr	r3, [r7, #0]
   3336c:	0018      	movs	r0, r3
   3336e:	4b0d      	ldr	r3, [pc, #52]	; (333a4 <writeCString+0x44>)
   33370:	4798      	blx	r3
   33372:	0003      	movs	r3, r0
   33374:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   33376:	68fa      	ldr	r2, [r7, #12]
   33378:	687b      	ldr	r3, [r7, #4]
   3337a:	0011      	movs	r1, r2
   3337c:	0018      	movs	r0, r3
   3337e:	4b0a      	ldr	r3, [pc, #40]	; (333a8 <writeCString+0x48>)
   33380:	4798      	blx	r3
	memcpy(*pptr, string, len);
   33382:	687b      	ldr	r3, [r7, #4]
   33384:	681b      	ldr	r3, [r3, #0]
   33386:	68fa      	ldr	r2, [r7, #12]
   33388:	6839      	ldr	r1, [r7, #0]
   3338a:	0018      	movs	r0, r3
   3338c:	4b07      	ldr	r3, [pc, #28]	; (333ac <writeCString+0x4c>)
   3338e:	4798      	blx	r3
	*pptr += len;
   33390:	687b      	ldr	r3, [r7, #4]
   33392:	681a      	ldr	r2, [r3, #0]
   33394:	68fb      	ldr	r3, [r7, #12]
   33396:	18d2      	adds	r2, r2, r3
   33398:	687b      	ldr	r3, [r7, #4]
   3339a:	601a      	str	r2, [r3, #0]
}
   3339c:	46c0      	nop			; (mov r8, r8)
   3339e:	46bd      	mov	sp, r7
   333a0:	b004      	add	sp, #16
   333a2:	bd80      	pop	{r7, pc}
   333a4:	000388bf 	.word	0x000388bf
   333a8:	00033309 	.word	0x00033309
   333ac:	000384d1 	.word	0x000384d1

000333b0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   333b0:	b580      	push	{r7, lr}
   333b2:	b084      	sub	sp, #16
   333b4:	af00      	add	r7, sp, #0
   333b6:	60f8      	str	r0, [r7, #12]
   333b8:	0038      	movs	r0, r7
   333ba:	6001      	str	r1, [r0, #0]
   333bc:	6042      	str	r2, [r0, #4]
   333be:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   333c0:	003b      	movs	r3, r7
   333c2:	685b      	ldr	r3, [r3, #4]
   333c4:	2b00      	cmp	r3, #0
   333c6:	dd17      	ble.n	333f8 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   333c8:	003b      	movs	r3, r7
   333ca:	685a      	ldr	r2, [r3, #4]
   333cc:	68fb      	ldr	r3, [r7, #12]
   333ce:	0011      	movs	r1, r2
   333d0:	0018      	movs	r0, r3
   333d2:	4b14      	ldr	r3, [pc, #80]	; (33424 <writeMQTTString+0x74>)
   333d4:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   333d6:	68fb      	ldr	r3, [r7, #12]
   333d8:	6818      	ldr	r0, [r3, #0]
   333da:	003b      	movs	r3, r7
   333dc:	6899      	ldr	r1, [r3, #8]
   333de:	003b      	movs	r3, r7
   333e0:	685b      	ldr	r3, [r3, #4]
   333e2:	001a      	movs	r2, r3
   333e4:	4b10      	ldr	r3, [pc, #64]	; (33428 <writeMQTTString+0x78>)
   333e6:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   333e8:	68fb      	ldr	r3, [r7, #12]
   333ea:	681a      	ldr	r2, [r3, #0]
   333ec:	003b      	movs	r3, r7
   333ee:	685b      	ldr	r3, [r3, #4]
   333f0:	18d2      	adds	r2, r2, r3
   333f2:	68fb      	ldr	r3, [r7, #12]
   333f4:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   333f6:	e010      	b.n	3341a <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   333f8:	003b      	movs	r3, r7
   333fa:	681b      	ldr	r3, [r3, #0]
   333fc:	2b00      	cmp	r3, #0
   333fe:	d007      	beq.n	33410 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   33400:	003b      	movs	r3, r7
   33402:	681a      	ldr	r2, [r3, #0]
   33404:	68fb      	ldr	r3, [r7, #12]
   33406:	0011      	movs	r1, r2
   33408:	0018      	movs	r0, r3
   3340a:	4b08      	ldr	r3, [pc, #32]	; (3342c <writeMQTTString+0x7c>)
   3340c:	4798      	blx	r3
}
   3340e:	e004      	b.n	3341a <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   33410:	68fb      	ldr	r3, [r7, #12]
   33412:	2100      	movs	r1, #0
   33414:	0018      	movs	r0, r3
   33416:	4b03      	ldr	r3, [pc, #12]	; (33424 <writeMQTTString+0x74>)
   33418:	4798      	blx	r3
}
   3341a:	46c0      	nop			; (mov r8, r8)
   3341c:	46bd      	mov	sp, r7
   3341e:	b004      	add	sp, #16
   33420:	bd80      	pop	{r7, pc}
   33422:	46c0      	nop			; (mov r8, r8)
   33424:	00033309 	.word	0x00033309
   33428:	000384d1 	.word	0x000384d1
   3342c:	00033361 	.word	0x00033361

00033430 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   33430:	b580      	push	{r7, lr}
   33432:	b086      	sub	sp, #24
   33434:	af00      	add	r7, sp, #0
   33436:	60f8      	str	r0, [r7, #12]
   33438:	60b9      	str	r1, [r7, #8]
   3343a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   3343c:	2300      	movs	r3, #0
   3343e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   33440:	687a      	ldr	r2, [r7, #4]
   33442:	68bb      	ldr	r3, [r7, #8]
   33444:	681b      	ldr	r3, [r3, #0]
   33446:	1ad3      	subs	r3, r2, r3
   33448:	2b01      	cmp	r3, #1
   3344a:	dd1b      	ble.n	33484 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   3344c:	68bb      	ldr	r3, [r7, #8]
   3344e:	0018      	movs	r0, r3
   33450:	4b10      	ldr	r3, [pc, #64]	; (33494 <readMQTTLenString+0x64>)
   33452:	4798      	blx	r3
   33454:	0002      	movs	r2, r0
   33456:	68fb      	ldr	r3, [r7, #12]
   33458:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   3345a:	68bb      	ldr	r3, [r7, #8]
   3345c:	681a      	ldr	r2, [r3, #0]
   3345e:	68fb      	ldr	r3, [r7, #12]
   33460:	685b      	ldr	r3, [r3, #4]
   33462:	18d2      	adds	r2, r2, r3
   33464:	687b      	ldr	r3, [r7, #4]
   33466:	429a      	cmp	r2, r3
   33468:	d80c      	bhi.n	33484 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   3346a:	68bb      	ldr	r3, [r7, #8]
   3346c:	681a      	ldr	r2, [r3, #0]
   3346e:	68fb      	ldr	r3, [r7, #12]
   33470:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   33472:	68bb      	ldr	r3, [r7, #8]
   33474:	681a      	ldr	r2, [r3, #0]
   33476:	68fb      	ldr	r3, [r7, #12]
   33478:	685b      	ldr	r3, [r3, #4]
   3347a:	18d2      	adds	r2, r2, r3
   3347c:	68bb      	ldr	r3, [r7, #8]
   3347e:	601a      	str	r2, [r3, #0]
			rc = 1;
   33480:	2301      	movs	r3, #1
   33482:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   33484:	68fb      	ldr	r3, [r7, #12]
   33486:	2200      	movs	r2, #0
   33488:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   3348a:	697b      	ldr	r3, [r7, #20]
}
   3348c:	0018      	movs	r0, r3
   3348e:	46bd      	mov	sp, r7
   33490:	b006      	add	sp, #24
   33492:	bd80      	pop	{r7, pc}
   33494:	00033281 	.word	0x00033281

00033498 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   33498:	b580      	push	{r7, lr}
   3349a:	b086      	sub	sp, #24
   3349c:	af00      	add	r7, sp, #0
   3349e:	1d3b      	adds	r3, r7, #4
   334a0:	6018      	str	r0, [r3, #0]
   334a2:	6059      	str	r1, [r3, #4]
   334a4:	609a      	str	r2, [r3, #8]
	int rc = 0;
   334a6:	2300      	movs	r3, #0
   334a8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   334aa:	1d3b      	adds	r3, r7, #4
   334ac:	681b      	ldr	r3, [r3, #0]
   334ae:	2b00      	cmp	r3, #0
   334b0:	d007      	beq.n	334c2 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   334b2:	1d3b      	adds	r3, r7, #4
   334b4:	681b      	ldr	r3, [r3, #0]
   334b6:	0018      	movs	r0, r3
   334b8:	4b06      	ldr	r3, [pc, #24]	; (334d4 <MQTTstrlen+0x3c>)
   334ba:	4798      	blx	r3
   334bc:	0003      	movs	r3, r0
   334be:	617b      	str	r3, [r7, #20]
   334c0:	e002      	b.n	334c8 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   334c2:	1d3b      	adds	r3, r7, #4
   334c4:	685b      	ldr	r3, [r3, #4]
   334c6:	617b      	str	r3, [r7, #20]
	return rc;
   334c8:	697b      	ldr	r3, [r7, #20]
}
   334ca:	0018      	movs	r0, r3
   334cc:	46bd      	mov	sp, r7
   334ce:	b006      	add	sp, #24
   334d0:	bd80      	pop	{r7, pc}
   334d2:	46c0      	nop			; (mov r8, r8)
   334d4:	000388bf 	.word	0x000388bf

000334d8 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   334d8:	b580      	push	{r7, lr}
   334da:	b086      	sub	sp, #24
   334dc:	af00      	add	r7, sp, #0
   334de:	6078      	str	r0, [r7, #4]
   334e0:	6039      	str	r1, [r7, #0]
	int alen = 0,
   334e2:	2300      	movs	r3, #0
   334e4:	617b      	str	r3, [r7, #20]
		blen = 0;
   334e6:	2300      	movs	r3, #0
   334e8:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   334ea:	687b      	ldr	r3, [r7, #4]
   334ec:	681b      	ldr	r3, [r3, #0]
   334ee:	2b00      	cmp	r3, #0
   334f0:	d00a      	beq.n	33508 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   334f2:	687b      	ldr	r3, [r7, #4]
   334f4:	681b      	ldr	r3, [r3, #0]
   334f6:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   334f8:	687b      	ldr	r3, [r7, #4]
   334fa:	681b      	ldr	r3, [r3, #0]
   334fc:	0018      	movs	r0, r3
   334fe:	4b12      	ldr	r3, [pc, #72]	; (33548 <MQTTPacket_equals+0x70>)
   33500:	4798      	blx	r3
   33502:	0003      	movs	r3, r0
   33504:	617b      	str	r3, [r7, #20]
   33506:	e005      	b.n	33514 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   33508:	687b      	ldr	r3, [r7, #4]
   3350a:	689b      	ldr	r3, [r3, #8]
   3350c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   3350e:	687b      	ldr	r3, [r7, #4]
   33510:	685b      	ldr	r3, [r3, #4]
   33512:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   33514:	683b      	ldr	r3, [r7, #0]
   33516:	0018      	movs	r0, r3
   33518:	4b0b      	ldr	r3, [pc, #44]	; (33548 <MQTTPacket_equals+0x70>)
   3351a:	4798      	blx	r3
   3351c:	0003      	movs	r3, r0
   3351e:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   33520:	697a      	ldr	r2, [r7, #20]
   33522:	68fb      	ldr	r3, [r7, #12]
   33524:	429a      	cmp	r2, r3
   33526:	d109      	bne.n	3353c <MQTTPacket_equals+0x64>
   33528:	697a      	ldr	r2, [r7, #20]
   3352a:	6839      	ldr	r1, [r7, #0]
   3352c:	693b      	ldr	r3, [r7, #16]
   3352e:	0018      	movs	r0, r3
   33530:	4b06      	ldr	r3, [pc, #24]	; (3354c <MQTTPacket_equals+0x74>)
   33532:	4798      	blx	r3
   33534:	1e03      	subs	r3, r0, #0
   33536:	d101      	bne.n	3353c <MQTTPacket_equals+0x64>
   33538:	2301      	movs	r3, #1
   3353a:	e000      	b.n	3353e <MQTTPacket_equals+0x66>
   3353c:	2300      	movs	r3, #0
}
   3353e:	0018      	movs	r0, r3
   33540:	46bd      	mov	sp, r7
   33542:	b006      	add	sp, #24
   33544:	bd80      	pop	{r7, pc}
   33546:	46c0      	nop			; (mov r8, r8)
   33548:	000388bf 	.word	0x000388bf
   3354c:	000388cd 	.word	0x000388cd

00033550 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   33550:	b580      	push	{r7, lr}
   33552:	b086      	sub	sp, #24
   33554:	af00      	add	r7, sp, #0
   33556:	60f8      	str	r0, [r7, #12]
   33558:	0038      	movs	r0, r7
   3355a:	6001      	str	r1, [r0, #0]
   3355c:	6042      	str	r2, [r0, #4]
   3355e:	6083      	str	r3, [r0, #8]
	int len = 0;
   33560:	2300      	movs	r3, #0
   33562:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   33564:	003b      	movs	r3, r7
   33566:	6818      	ldr	r0, [r3, #0]
   33568:	6859      	ldr	r1, [r3, #4]
   3356a:	689a      	ldr	r2, [r3, #8]
   3356c:	4b09      	ldr	r3, [pc, #36]	; (33594 <MQTTSerialize_publishLength+0x44>)
   3356e:	4798      	blx	r3
   33570:	0003      	movs	r3, r0
   33572:	1c9a      	adds	r2, r3, #2
   33574:	6a3b      	ldr	r3, [r7, #32]
   33576:	18d3      	adds	r3, r2, r3
   33578:	697a      	ldr	r2, [r7, #20]
   3357a:	18d3      	adds	r3, r2, r3
   3357c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   3357e:	68fb      	ldr	r3, [r7, #12]
   33580:	2b00      	cmp	r3, #0
   33582:	dd02      	ble.n	3358a <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   33584:	697b      	ldr	r3, [r7, #20]
   33586:	3302      	adds	r3, #2
   33588:	617b      	str	r3, [r7, #20]
	return len;
   3358a:	697b      	ldr	r3, [r7, #20]
}
   3358c:	0018      	movs	r0, r3
   3358e:	46bd      	mov	sp, r7
   33590:	b006      	add	sp, #24
   33592:	bd80      	pop	{r7, pc}
   33594:	00033499 	.word	0x00033499

00033598 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   33598:	b590      	push	{r4, r7, lr}
   3359a:	b08b      	sub	sp, #44	; 0x2c
   3359c:	af02      	add	r7, sp, #8
   3359e:	60f8      	str	r0, [r7, #12]
   335a0:	60b9      	str	r1, [r7, #8]
   335a2:	603b      	str	r3, [r7, #0]
   335a4:	1dfb      	adds	r3, r7, #7
   335a6:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   335a8:	68fb      	ldr	r3, [r7, #12]
   335aa:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   335ac:	2300      	movs	r3, #0
   335ae:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   335b0:	2300      	movs	r3, #0
   335b2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   335b4:	2300      	movs	r3, #0
   335b6:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   335b8:	2308      	movs	r3, #8
   335ba:	2230      	movs	r2, #48	; 0x30
   335bc:	4694      	mov	ip, r2
   335be:	44bc      	add	ip, r7
   335c0:	4463      	add	r3, ip
   335c2:	6838      	ldr	r0, [r7, #0]
   335c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
   335c6:	9200      	str	r2, [sp, #0]
   335c8:	6819      	ldr	r1, [r3, #0]
   335ca:	685a      	ldr	r2, [r3, #4]
   335cc:	689b      	ldr	r3, [r3, #8]
   335ce:	4c46      	ldr	r4, [pc, #280]	; (336e8 <MQTTSerialize_publish+0x150>)
   335d0:	47a0      	blx	r4
   335d2:	0003      	movs	r3, r0
   335d4:	61bb      	str	r3, [r7, #24]
   335d6:	69bb      	ldr	r3, [r7, #24]
   335d8:	0018      	movs	r0, r3
   335da:	4b44      	ldr	r3, [pc, #272]	; (336ec <MQTTSerialize_publish+0x154>)
   335dc:	4798      	blx	r3
   335de:	0002      	movs	r2, r0
   335e0:	68bb      	ldr	r3, [r7, #8]
   335e2:	429a      	cmp	r2, r3
   335e4:	dd03      	ble.n	335ee <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   335e6:	2302      	movs	r3, #2
   335e8:	425b      	negs	r3, r3
   335ea:	61fb      	str	r3, [r7, #28]
		goto exit;
   335ec:	e077      	b.n	336de <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   335ee:	2310      	movs	r3, #16
   335f0:	18fb      	adds	r3, r7, r3
   335f2:	781a      	ldrb	r2, [r3, #0]
   335f4:	210f      	movs	r1, #15
   335f6:	400a      	ands	r2, r1
   335f8:	1c11      	adds	r1, r2, #0
   335fa:	2230      	movs	r2, #48	; 0x30
   335fc:	430a      	orrs	r2, r1
   335fe:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   33600:	1dfb      	adds	r3, r7, #7
   33602:	781b      	ldrb	r3, [r3, #0]
   33604:	2201      	movs	r2, #1
   33606:	4013      	ands	r3, r2
   33608:	b2da      	uxtb	r2, r3
   3360a:	2310      	movs	r3, #16
   3360c:	18fb      	adds	r3, r7, r3
   3360e:	2101      	movs	r1, #1
   33610:	400a      	ands	r2, r1
   33612:	00d0      	lsls	r0, r2, #3
   33614:	781a      	ldrb	r2, [r3, #0]
   33616:	2108      	movs	r1, #8
   33618:	438a      	bics	r2, r1
   3361a:	1c11      	adds	r1, r2, #0
   3361c:	1c02      	adds	r2, r0, #0
   3361e:	430a      	orrs	r2, r1
   33620:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   33622:	683b      	ldr	r3, [r7, #0]
   33624:	b2db      	uxtb	r3, r3
   33626:	1c1a      	adds	r2, r3, #0
   33628:	2303      	movs	r3, #3
   3362a:	4013      	ands	r3, r2
   3362c:	b2da      	uxtb	r2, r3
   3362e:	2310      	movs	r3, #16
   33630:	18fb      	adds	r3, r7, r3
   33632:	2103      	movs	r1, #3
   33634:	400a      	ands	r2, r1
   33636:	1890      	adds	r0, r2, r2
   33638:	781a      	ldrb	r2, [r3, #0]
   3363a:	2106      	movs	r1, #6
   3363c:	438a      	bics	r2, r1
   3363e:	1c11      	adds	r1, r2, #0
   33640:	1c02      	adds	r2, r0, #0
   33642:	430a      	orrs	r2, r1
   33644:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   33646:	2330      	movs	r3, #48	; 0x30
   33648:	18fb      	adds	r3, r7, r3
   3364a:	781b      	ldrb	r3, [r3, #0]
   3364c:	2201      	movs	r2, #1
   3364e:	4013      	ands	r3, r2
   33650:	b2da      	uxtb	r2, r3
   33652:	2310      	movs	r3, #16
   33654:	18fb      	adds	r3, r7, r3
   33656:	2101      	movs	r1, #1
   33658:	400a      	ands	r2, r1
   3365a:	0010      	movs	r0, r2
   3365c:	781a      	ldrb	r2, [r3, #0]
   3365e:	2101      	movs	r1, #1
   33660:	438a      	bics	r2, r1
   33662:	1c11      	adds	r1, r2, #0
   33664:	1c02      	adds	r2, r0, #0
   33666:	430a      	orrs	r2, r1
   33668:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3366a:	2310      	movs	r3, #16
   3366c:	18fb      	adds	r3, r7, r3
   3366e:	781a      	ldrb	r2, [r3, #0]
   33670:	2314      	movs	r3, #20
   33672:	18fb      	adds	r3, r7, r3
   33674:	0011      	movs	r1, r2
   33676:	0018      	movs	r0, r3
   33678:	4b1d      	ldr	r3, [pc, #116]	; (336f0 <MQTTSerialize_publish+0x158>)
   3367a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   3367c:	697b      	ldr	r3, [r7, #20]
   3367e:	69ba      	ldr	r2, [r7, #24]
   33680:	0011      	movs	r1, r2
   33682:	0018      	movs	r0, r3
   33684:	4b1b      	ldr	r3, [pc, #108]	; (336f4 <MQTTSerialize_publish+0x15c>)
   33686:	4798      	blx	r3
   33688:	0002      	movs	r2, r0
   3368a:	697b      	ldr	r3, [r7, #20]
   3368c:	189b      	adds	r3, r3, r2
   3368e:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   33690:	2308      	movs	r3, #8
   33692:	2230      	movs	r2, #48	; 0x30
   33694:	4694      	mov	ip, r2
   33696:	44bc      	add	ip, r7
   33698:	4463      	add	r3, ip
   3369a:	2214      	movs	r2, #20
   3369c:	18b8      	adds	r0, r7, r2
   3369e:	6819      	ldr	r1, [r3, #0]
   336a0:	685a      	ldr	r2, [r3, #4]
   336a2:	689b      	ldr	r3, [r3, #8]
   336a4:	4c14      	ldr	r4, [pc, #80]	; (336f8 <MQTTSerialize_publish+0x160>)
   336a6:	47a0      	blx	r4

	if (qos > 0)
   336a8:	683b      	ldr	r3, [r7, #0]
   336aa:	2b00      	cmp	r3, #0
   336ac:	dd08      	ble.n	336c0 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   336ae:	2334      	movs	r3, #52	; 0x34
   336b0:	18fb      	adds	r3, r7, r3
   336b2:	881a      	ldrh	r2, [r3, #0]
   336b4:	2314      	movs	r3, #20
   336b6:	18fb      	adds	r3, r7, r3
   336b8:	0011      	movs	r1, r2
   336ba:	0018      	movs	r0, r3
   336bc:	4b0f      	ldr	r3, [pc, #60]	; (336fc <MQTTSerialize_publish+0x164>)
   336be:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   336c0:	697b      	ldr	r3, [r7, #20]
   336c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
   336c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
   336c6:	0018      	movs	r0, r3
   336c8:	4b0d      	ldr	r3, [pc, #52]	; (33700 <MQTTSerialize_publish+0x168>)
   336ca:	4798      	blx	r3
	ptr += payloadlen;
   336cc:	697a      	ldr	r2, [r7, #20]
   336ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   336d0:	18d3      	adds	r3, r2, r3
   336d2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   336d4:	697b      	ldr	r3, [r7, #20]
   336d6:	001a      	movs	r2, r3
   336d8:	68fb      	ldr	r3, [r7, #12]
   336da:	1ad3      	subs	r3, r2, r3
   336dc:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   336de:	69fb      	ldr	r3, [r7, #28]
}
   336e0:	0018      	movs	r0, r3
   336e2:	46bd      	mov	sp, r7
   336e4:	b009      	add	sp, #36	; 0x24
   336e6:	bd90      	pop	{r4, r7, pc}
   336e8:	00033551 	.word	0x00033551
   336ec:	000331bd 	.word	0x000331bd
   336f0:	000332df 	.word	0x000332df
   336f4:	000330c5 	.word	0x000330c5
   336f8:	000333b1 	.word	0x000333b1
   336fc:	00033309 	.word	0x00033309
   33700:	000384d1 	.word	0x000384d1

00033704 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   33704:	b580      	push	{r7, lr}
   33706:	b088      	sub	sp, #32
   33708:	af00      	add	r7, sp, #0
   3370a:	60f8      	str	r0, [r7, #12]
   3370c:	60b9      	str	r1, [r7, #8]
   3370e:	0019      	movs	r1, r3
   33710:	1dfb      	adds	r3, r7, #7
   33712:	701a      	strb	r2, [r3, #0]
   33714:	1dbb      	adds	r3, r7, #6
   33716:	1c0a      	adds	r2, r1, #0
   33718:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   3371a:	2300      	movs	r3, #0
   3371c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3371e:	2300      	movs	r3, #0
   33720:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   33722:	68fb      	ldr	r3, [r7, #12]
   33724:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   33726:	68bb      	ldr	r3, [r7, #8]
   33728:	2b03      	cmp	r3, #3
   3372a:	dc03      	bgt.n	33734 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3372c:	2302      	movs	r3, #2
   3372e:	425b      	negs	r3, r3
   33730:	61fb      	str	r3, [r7, #28]
		goto exit;
   33732:	e055      	b.n	337e0 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   33734:	1dfb      	adds	r3, r7, #7
   33736:	781b      	ldrb	r3, [r3, #0]
   33738:	220f      	movs	r2, #15
   3373a:	4013      	ands	r3, r2
   3373c:	b2da      	uxtb	r2, r3
   3373e:	2318      	movs	r3, #24
   33740:	18fb      	adds	r3, r7, r3
   33742:	0110      	lsls	r0, r2, #4
   33744:	781a      	ldrb	r2, [r3, #0]
   33746:	210f      	movs	r1, #15
   33748:	400a      	ands	r2, r1
   3374a:	1c11      	adds	r1, r2, #0
   3374c:	1c02      	adds	r2, r0, #0
   3374e:	430a      	orrs	r2, r1
   33750:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   33752:	1dbb      	adds	r3, r7, #6
   33754:	781b      	ldrb	r3, [r3, #0]
   33756:	2201      	movs	r2, #1
   33758:	4013      	ands	r3, r2
   3375a:	b2da      	uxtb	r2, r3
   3375c:	2318      	movs	r3, #24
   3375e:	18fb      	adds	r3, r7, r3
   33760:	2101      	movs	r1, #1
   33762:	400a      	ands	r2, r1
   33764:	00d0      	lsls	r0, r2, #3
   33766:	781a      	ldrb	r2, [r3, #0]
   33768:	2108      	movs	r1, #8
   3376a:	438a      	bics	r2, r1
   3376c:	1c11      	adds	r1, r2, #0
   3376e:	1c02      	adds	r2, r0, #0
   33770:	430a      	orrs	r2, r1
   33772:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   33774:	1dfb      	adds	r3, r7, #7
   33776:	781b      	ldrb	r3, [r3, #0]
   33778:	3b06      	subs	r3, #6
   3377a:	425a      	negs	r2, r3
   3377c:	4153      	adcs	r3, r2
   3377e:	b2db      	uxtb	r3, r3
   33780:	1c1a      	adds	r2, r3, #0
   33782:	2303      	movs	r3, #3
   33784:	4013      	ands	r3, r2
   33786:	b2da      	uxtb	r2, r3
   33788:	2318      	movs	r3, #24
   3378a:	18fb      	adds	r3, r7, r3
   3378c:	2103      	movs	r1, #3
   3378e:	400a      	ands	r2, r1
   33790:	1890      	adds	r0, r2, r2
   33792:	781a      	ldrb	r2, [r3, #0]
   33794:	2106      	movs	r1, #6
   33796:	438a      	bics	r2, r1
   33798:	1c11      	adds	r1, r2, #0
   3379a:	1c02      	adds	r2, r0, #0
   3379c:	430a      	orrs	r2, r1
   3379e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   337a0:	2318      	movs	r3, #24
   337a2:	18fb      	adds	r3, r7, r3
   337a4:	781a      	ldrb	r2, [r3, #0]
   337a6:	2314      	movs	r3, #20
   337a8:	18fb      	adds	r3, r7, r3
   337aa:	0011      	movs	r1, r2
   337ac:	0018      	movs	r0, r3
   337ae:	4b0f      	ldr	r3, [pc, #60]	; (337ec <MQTTSerialize_ack+0xe8>)
   337b0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   337b2:	697b      	ldr	r3, [r7, #20]
   337b4:	2102      	movs	r1, #2
   337b6:	0018      	movs	r0, r3
   337b8:	4b0d      	ldr	r3, [pc, #52]	; (337f0 <MQTTSerialize_ack+0xec>)
   337ba:	4798      	blx	r3
   337bc:	0002      	movs	r2, r0
   337be:	697b      	ldr	r3, [r7, #20]
   337c0:	189b      	adds	r3, r3, r2
   337c2:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   337c4:	2328      	movs	r3, #40	; 0x28
   337c6:	18fb      	adds	r3, r7, r3
   337c8:	881a      	ldrh	r2, [r3, #0]
   337ca:	2314      	movs	r3, #20
   337cc:	18fb      	adds	r3, r7, r3
   337ce:	0011      	movs	r1, r2
   337d0:	0018      	movs	r0, r3
   337d2:	4b08      	ldr	r3, [pc, #32]	; (337f4 <MQTTSerialize_ack+0xf0>)
   337d4:	4798      	blx	r3
	rc = ptr - buf;
   337d6:	697b      	ldr	r3, [r7, #20]
   337d8:	001a      	movs	r2, r3
   337da:	68fb      	ldr	r3, [r7, #12]
   337dc:	1ad3      	subs	r3, r2, r3
   337de:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   337e0:	69fb      	ldr	r3, [r7, #28]
}
   337e2:	0018      	movs	r0, r3
   337e4:	46bd      	mov	sp, r7
   337e6:	b008      	add	sp, #32
   337e8:	bd80      	pop	{r7, pc}
   337ea:	46c0      	nop			; (mov r8, r8)
   337ec:	000332df 	.word	0x000332df
   337f0:	000330c5 	.word	0x000330c5
   337f4:	00033309 	.word	0x00033309

000337f8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   337f8:	b580      	push	{r7, lr}
   337fa:	b084      	sub	sp, #16
   337fc:	af00      	add	r7, sp, #0
   337fe:	6078      	str	r0, [r7, #4]
   33800:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   33802:	2302      	movs	r3, #2
   33804:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   33806:	2300      	movs	r3, #0
   33808:	60fb      	str	r3, [r7, #12]
   3380a:	e014      	b.n	33836 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   3380c:	68fa      	ldr	r2, [r7, #12]
   3380e:	0013      	movs	r3, r2
   33810:	005b      	lsls	r3, r3, #1
   33812:	189b      	adds	r3, r3, r2
   33814:	009b      	lsls	r3, r3, #2
   33816:	001a      	movs	r2, r3
   33818:	683b      	ldr	r3, [r7, #0]
   3381a:	189b      	adds	r3, r3, r2
   3381c:	6818      	ldr	r0, [r3, #0]
   3381e:	6859      	ldr	r1, [r3, #4]
   33820:	689a      	ldr	r2, [r3, #8]
   33822:	4b09      	ldr	r3, [pc, #36]	; (33848 <MQTTSerialize_subscribeLength+0x50>)
   33824:	4798      	blx	r3
   33826:	0003      	movs	r3, r0
   33828:	3303      	adds	r3, #3
   3382a:	68ba      	ldr	r2, [r7, #8]
   3382c:	18d3      	adds	r3, r2, r3
   3382e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   33830:	68fb      	ldr	r3, [r7, #12]
   33832:	3301      	adds	r3, #1
   33834:	60fb      	str	r3, [r7, #12]
   33836:	68fa      	ldr	r2, [r7, #12]
   33838:	687b      	ldr	r3, [r7, #4]
   3383a:	429a      	cmp	r2, r3
   3383c:	dbe6      	blt.n	3380c <MQTTSerialize_subscribeLength+0x14>
	return len;
   3383e:	68bb      	ldr	r3, [r7, #8]
}
   33840:	0018      	movs	r0, r3
   33842:	46bd      	mov	sp, r7
   33844:	b004      	add	sp, #16
   33846:	bd80      	pop	{r7, pc}
   33848:	00033499 	.word	0x00033499

0003384c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   3384c:	b590      	push	{r4, r7, lr}
   3384e:	b08b      	sub	sp, #44	; 0x2c
   33850:	af00      	add	r7, sp, #0
   33852:	60f8      	str	r0, [r7, #12]
   33854:	60b9      	str	r1, [r7, #8]
   33856:	0019      	movs	r1, r3
   33858:	1dfb      	adds	r3, r7, #7
   3385a:	701a      	strb	r2, [r3, #0]
   3385c:	1d3b      	adds	r3, r7, #4
   3385e:	1c0a      	adds	r2, r1, #0
   33860:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   33862:	68fb      	ldr	r3, [r7, #12]
   33864:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   33866:	2300      	movs	r3, #0
   33868:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   3386a:	2300      	movs	r3, #0
   3386c:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   3386e:	2300      	movs	r3, #0
   33870:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   33872:	2300      	movs	r3, #0
   33874:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   33876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   33878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3387a:	0011      	movs	r1, r2
   3387c:	0018      	movs	r0, r3
   3387e:	4b41      	ldr	r3, [pc, #260]	; (33984 <MQTTSerialize_subscribe+0x138>)
   33880:	4798      	blx	r3
   33882:	0003      	movs	r3, r0
   33884:	61fb      	str	r3, [r7, #28]
   33886:	69fb      	ldr	r3, [r7, #28]
   33888:	0018      	movs	r0, r3
   3388a:	4b3f      	ldr	r3, [pc, #252]	; (33988 <MQTTSerialize_subscribe+0x13c>)
   3388c:	4798      	blx	r3
   3388e:	0002      	movs	r2, r0
   33890:	68bb      	ldr	r3, [r7, #8]
   33892:	429a      	cmp	r2, r3
   33894:	dd03      	ble.n	3389e <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   33896:	2302      	movs	r3, #2
   33898:	425b      	negs	r3, r3
   3389a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   3389c:	e06c      	b.n	33978 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   3389e:	2314      	movs	r3, #20
   338a0:	18fb      	adds	r3, r7, r3
   338a2:	2200      	movs	r2, #0
   338a4:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   338a6:	2314      	movs	r3, #20
   338a8:	18fb      	adds	r3, r7, r3
   338aa:	781a      	ldrb	r2, [r3, #0]
   338ac:	210f      	movs	r1, #15
   338ae:	400a      	ands	r2, r1
   338b0:	1c11      	adds	r1, r2, #0
   338b2:	2280      	movs	r2, #128	; 0x80
   338b4:	4252      	negs	r2, r2
   338b6:	430a      	orrs	r2, r1
   338b8:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   338ba:	1dfb      	adds	r3, r7, #7
   338bc:	781b      	ldrb	r3, [r3, #0]
   338be:	2201      	movs	r2, #1
   338c0:	4013      	ands	r3, r2
   338c2:	b2da      	uxtb	r2, r3
   338c4:	2314      	movs	r3, #20
   338c6:	18fb      	adds	r3, r7, r3
   338c8:	2101      	movs	r1, #1
   338ca:	400a      	ands	r2, r1
   338cc:	00d0      	lsls	r0, r2, #3
   338ce:	781a      	ldrb	r2, [r3, #0]
   338d0:	2108      	movs	r1, #8
   338d2:	438a      	bics	r2, r1
   338d4:	1c11      	adds	r1, r2, #0
   338d6:	1c02      	adds	r2, r0, #0
   338d8:	430a      	orrs	r2, r1
   338da:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   338dc:	2314      	movs	r3, #20
   338de:	18fb      	adds	r3, r7, r3
   338e0:	781a      	ldrb	r2, [r3, #0]
   338e2:	2106      	movs	r1, #6
   338e4:	438a      	bics	r2, r1
   338e6:	1c11      	adds	r1, r2, #0
   338e8:	2202      	movs	r2, #2
   338ea:	430a      	orrs	r2, r1
   338ec:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   338ee:	2314      	movs	r3, #20
   338f0:	18fb      	adds	r3, r7, r3
   338f2:	781a      	ldrb	r2, [r3, #0]
   338f4:	2318      	movs	r3, #24
   338f6:	18fb      	adds	r3, r7, r3
   338f8:	0011      	movs	r1, r2
   338fa:	0018      	movs	r0, r3
   338fc:	4b23      	ldr	r3, [pc, #140]	; (3398c <MQTTSerialize_subscribe+0x140>)
   338fe:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   33900:	69bb      	ldr	r3, [r7, #24]
   33902:	69fa      	ldr	r2, [r7, #28]
   33904:	0011      	movs	r1, r2
   33906:	0018      	movs	r0, r3
   33908:	4b21      	ldr	r3, [pc, #132]	; (33990 <MQTTSerialize_subscribe+0x144>)
   3390a:	4798      	blx	r3
   3390c:	0002      	movs	r2, r0
   3390e:	69bb      	ldr	r3, [r7, #24]
   33910:	189b      	adds	r3, r3, r2
   33912:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   33914:	1d3b      	adds	r3, r7, #4
   33916:	881a      	ldrh	r2, [r3, #0]
   33918:	2318      	movs	r3, #24
   3391a:	18fb      	adds	r3, r7, r3
   3391c:	0011      	movs	r1, r2
   3391e:	0018      	movs	r0, r3
   33920:	4b1c      	ldr	r3, [pc, #112]	; (33994 <MQTTSerialize_subscribe+0x148>)
   33922:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   33924:	2300      	movs	r3, #0
   33926:	623b      	str	r3, [r7, #32]
   33928:	e01d      	b.n	33966 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   3392a:	6a3a      	ldr	r2, [r7, #32]
   3392c:	0013      	movs	r3, r2
   3392e:	005b      	lsls	r3, r3, #1
   33930:	189b      	adds	r3, r3, r2
   33932:	009b      	lsls	r3, r3, #2
   33934:	001a      	movs	r2, r3
   33936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   33938:	189b      	adds	r3, r3, r2
   3393a:	2218      	movs	r2, #24
   3393c:	18b8      	adds	r0, r7, r2
   3393e:	6819      	ldr	r1, [r3, #0]
   33940:	685a      	ldr	r2, [r3, #4]
   33942:	689b      	ldr	r3, [r3, #8]
   33944:	4c14      	ldr	r4, [pc, #80]	; (33998 <MQTTSerialize_subscribe+0x14c>)
   33946:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   33948:	6a3b      	ldr	r3, [r7, #32]
   3394a:	009b      	lsls	r3, r3, #2
   3394c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3394e:	18d3      	adds	r3, r2, r3
   33950:	681b      	ldr	r3, [r3, #0]
   33952:	b2da      	uxtb	r2, r3
   33954:	2318      	movs	r3, #24
   33956:	18fb      	adds	r3, r7, r3
   33958:	0011      	movs	r1, r2
   3395a:	0018      	movs	r0, r3
   3395c:	4b0b      	ldr	r3, [pc, #44]	; (3398c <MQTTSerialize_subscribe+0x140>)
   3395e:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   33960:	6a3b      	ldr	r3, [r7, #32]
   33962:	3301      	adds	r3, #1
   33964:	623b      	str	r3, [r7, #32]
   33966:	6a3a      	ldr	r2, [r7, #32]
   33968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3396a:	429a      	cmp	r2, r3
   3396c:	dbdd      	blt.n	3392a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   3396e:	69bb      	ldr	r3, [r7, #24]
   33970:	001a      	movs	r2, r3
   33972:	68fb      	ldr	r3, [r7, #12]
   33974:	1ad3      	subs	r3, r2, r3
   33976:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   33978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3397a:	0018      	movs	r0, r3
   3397c:	46bd      	mov	sp, r7
   3397e:	b00b      	add	sp, #44	; 0x2c
   33980:	bd90      	pop	{r4, r7, pc}
   33982:	46c0      	nop			; (mov r8, r8)
   33984:	000337f9 	.word	0x000337f9
   33988:	000331bd 	.word	0x000331bd
   3398c:	000332df 	.word	0x000332df
   33990:	000330c5 	.word	0x000330c5
   33994:	00033309 	.word	0x00033309
   33998:	000333b1 	.word	0x000333b1

0003399c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   3399c:	b590      	push	{r4, r7, lr}
   3399e:	b08b      	sub	sp, #44	; 0x2c
   339a0:	af00      	add	r7, sp, #0
   339a2:	60f8      	str	r0, [r7, #12]
   339a4:	60b9      	str	r1, [r7, #8]
   339a6:	607a      	str	r2, [r7, #4]
   339a8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   339aa:	2300      	movs	r3, #0
   339ac:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   339ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   339b0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   339b2:	2300      	movs	r3, #0
   339b4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   339b6:	2300      	movs	r3, #0
   339b8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   339ba:	2318      	movs	r3, #24
   339bc:	18fb      	adds	r3, r7, r3
   339be:	0018      	movs	r0, r3
   339c0:	4b2c      	ldr	r3, [pc, #176]	; (33a74 <MQTTDeserialize_suback+0xd8>)
   339c2:	4798      	blx	r3
   339c4:	0003      	movs	r3, r0
   339c6:	001a      	movs	r2, r3
   339c8:	231c      	movs	r3, #28
   339ca:	18fb      	adds	r3, r7, r3
   339cc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   339ce:	231c      	movs	r3, #28
   339d0:	18fb      	adds	r3, r7, r3
   339d2:	781b      	ldrb	r3, [r3, #0]
   339d4:	220f      	movs	r2, #15
   339d6:	4393      	bics	r3, r2
   339d8:	b2db      	uxtb	r3, r3
   339da:	2b90      	cmp	r3, #144	; 0x90
   339dc:	d142      	bne.n	33a64 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   339de:	69bb      	ldr	r3, [r7, #24]
   339e0:	2214      	movs	r2, #20
   339e2:	18ba      	adds	r2, r7, r2
   339e4:	0011      	movs	r1, r2
   339e6:	0018      	movs	r0, r3
   339e8:	4b23      	ldr	r3, [pc, #140]	; (33a78 <MQTTDeserialize_suback+0xdc>)
   339ea:	4798      	blx	r3
   339ec:	0003      	movs	r3, r0
   339ee:	627b      	str	r3, [r7, #36]	; 0x24
   339f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   339f2:	69bb      	ldr	r3, [r7, #24]
   339f4:	189b      	adds	r3, r3, r2
   339f6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   339f8:	69bb      	ldr	r3, [r7, #24]
   339fa:	697a      	ldr	r2, [r7, #20]
   339fc:	189b      	adds	r3, r3, r2
   339fe:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   33a00:	6a3b      	ldr	r3, [r7, #32]
   33a02:	69ba      	ldr	r2, [r7, #24]
   33a04:	1a9b      	subs	r3, r3, r2
   33a06:	2b01      	cmp	r3, #1
   33a08:	dd2e      	ble.n	33a68 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   33a0a:	2318      	movs	r3, #24
   33a0c:	18fb      	adds	r3, r7, r3
   33a0e:	0018      	movs	r0, r3
   33a10:	4b1a      	ldr	r3, [pc, #104]	; (33a7c <MQTTDeserialize_suback+0xe0>)
   33a12:	4798      	blx	r3
   33a14:	0003      	movs	r3, r0
   33a16:	b29a      	uxth	r2, r3
   33a18:	68fb      	ldr	r3, [r7, #12]
   33a1a:	801a      	strh	r2, [r3, #0]

	*count = 0;
   33a1c:	687b      	ldr	r3, [r7, #4]
   33a1e:	2200      	movs	r2, #0
   33a20:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   33a22:	e018      	b.n	33a56 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   33a24:	687b      	ldr	r3, [r7, #4]
   33a26:	681a      	ldr	r2, [r3, #0]
   33a28:	68bb      	ldr	r3, [r7, #8]
   33a2a:	429a      	cmp	r2, r3
   33a2c:	dd03      	ble.n	33a36 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   33a2e:	2301      	movs	r3, #1
   33a30:	425b      	negs	r3, r3
   33a32:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   33a34:	e019      	b.n	33a6a <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   33a36:	687b      	ldr	r3, [r7, #4]
   33a38:	681a      	ldr	r2, [r3, #0]
   33a3a:	1c51      	adds	r1, r2, #1
   33a3c:	687b      	ldr	r3, [r7, #4]
   33a3e:	6019      	str	r1, [r3, #0]
   33a40:	0013      	movs	r3, r2
   33a42:	009b      	lsls	r3, r3, #2
   33a44:	683a      	ldr	r2, [r7, #0]
   33a46:	18d4      	adds	r4, r2, r3
   33a48:	2318      	movs	r3, #24
   33a4a:	18fb      	adds	r3, r7, r3
   33a4c:	0018      	movs	r0, r3
   33a4e:	4b09      	ldr	r3, [pc, #36]	; (33a74 <MQTTDeserialize_suback+0xd8>)
   33a50:	4798      	blx	r3
   33a52:	0003      	movs	r3, r0
   33a54:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   33a56:	69ba      	ldr	r2, [r7, #24]
   33a58:	6a3b      	ldr	r3, [r7, #32]
   33a5a:	429a      	cmp	r2, r3
   33a5c:	d3e2      	bcc.n	33a24 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   33a5e:	2301      	movs	r3, #1
   33a60:	627b      	str	r3, [r7, #36]	; 0x24
   33a62:	e002      	b.n	33a6a <MQTTDeserialize_suback+0xce>
		goto exit;
   33a64:	46c0      	nop			; (mov r8, r8)
   33a66:	e000      	b.n	33a6a <MQTTDeserialize_suback+0xce>
		goto exit;
   33a68:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   33a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   33a6c:	0018      	movs	r0, r3
   33a6e:	46bd      	mov	sp, r7
   33a70:	b00b      	add	sp, #44	; 0x2c
   33a72:	bd90      	pop	{r4, r7, pc}
   33a74:	000332b3 	.word	0x000332b3
   33a78:	0003324d 	.word	0x0003324d
   33a7c:	00033281 	.word	0x00033281

00033a80 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   33a80:	b580      	push	{r7, lr}
   33a82:	b082      	sub	sp, #8
   33a84:	af00      	add	r7, sp, #0
   33a86:	6078      	str	r0, [r7, #4]
	config->port = 80;
   33a88:	687b      	ldr	r3, [r7, #4]
   33a8a:	2250      	movs	r2, #80	; 0x50
   33a8c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   33a8e:	687b      	ldr	r3, [r7, #4]
   33a90:	2200      	movs	r2, #0
   33a92:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   33a94:	687b      	ldr	r3, [r7, #4]
   33a96:	4a0b      	ldr	r2, [pc, #44]	; (33ac4 <http_client_get_config_defaults+0x44>)
   33a98:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   33a9a:	687b      	ldr	r3, [r7, #4]
   33a9c:	2200      	movs	r2, #0
   33a9e:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   33aa0:	687b      	ldr	r3, [r7, #4]
   33aa2:	2200      	movs	r2, #0
   33aa4:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   33aa6:	687b      	ldr	r3, [r7, #4]
   33aa8:	2280      	movs	r2, #128	; 0x80
   33aaa:	0052      	lsls	r2, r2, #1
   33aac:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   33aae:	687b      	ldr	r3, [r7, #4]
   33ab0:	2252      	movs	r2, #82	; 0x52
   33ab2:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   33ab4:	687b      	ldr	r3, [r7, #4]
   33ab6:	4a04      	ldr	r2, [pc, #16]	; (33ac8 <http_client_get_config_defaults+0x48>)
   33ab8:	619a      	str	r2, [r3, #24]
}
   33aba:	46c0      	nop			; (mov r8, r8)
   33abc:	46bd      	mov	sp, r7
   33abe:	b002      	add	sp, #8
   33ac0:	bd80      	pop	{r7, pc}
   33ac2:	46c0      	nop			; (mov r8, r8)
   33ac4:	00004e20 	.word	0x00004e20
   33ac8:	0003e230 	.word	0x0003e230

00033acc <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   33acc:	b590      	push	{r4, r7, lr}
   33ace:	b083      	sub	sp, #12
   33ad0:	af00      	add	r7, sp, #0
   33ad2:	6078      	str	r0, [r7, #4]
   33ad4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   33ad6:	687b      	ldr	r3, [r7, #4]
   33ad8:	2b00      	cmp	r3, #0
   33ada:	d002      	beq.n	33ae2 <http_client_init+0x16>
   33adc:	683b      	ldr	r3, [r7, #0]
   33ade:	2b00      	cmp	r3, #0
   33ae0:	d102      	bne.n	33ae8 <http_client_init+0x1c>
		return -EINVAL;
   33ae2:	2316      	movs	r3, #22
   33ae4:	425b      	negs	r3, r3
   33ae6:	e058      	b.n	33b9a <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   33ae8:	683b      	ldr	r3, [r7, #0]
   33aea:	691b      	ldr	r3, [r3, #16]
   33aec:	2b00      	cmp	r3, #0
   33aee:	d102      	bne.n	33af6 <http_client_init+0x2a>
		return -EINVAL;
   33af0:	2316      	movs	r3, #22
   33af2:	425b      	negs	r3, r3
   33af4:	e051      	b.n	33b9a <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   33af6:	683b      	ldr	r3, [r7, #0]
   33af8:	685b      	ldr	r3, [r3, #4]
   33afa:	2b00      	cmp	r3, #0
   33afc:	d102      	bne.n	33b04 <http_client_init+0x38>
		return -EINVAL;
   33afe:	2316      	movs	r3, #22
   33b00:	425b      	negs	r3, r3
   33b02:	e04a      	b.n	33b9a <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   33b04:	683b      	ldr	r3, [r7, #0]
   33b06:	695b      	ldr	r3, [r3, #20]
   33b08:	2b51      	cmp	r3, #81	; 0x51
   33b0a:	d802      	bhi.n	33b12 <http_client_init+0x46>
		return -EINVAL;
   33b0c:	2316      	movs	r3, #22
   33b0e:	425b      	negs	r3, r3
   33b10:	e043      	b.n	33b9a <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   33b12:	687b      	ldr	r3, [r7, #4]
   33b14:	22e8      	movs	r2, #232	; 0xe8
   33b16:	2100      	movs	r1, #0
   33b18:	0018      	movs	r0, r3
   33b1a:	4b22      	ldr	r3, [pc, #136]	; (33ba4 <http_client_init+0xd8>)
   33b1c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   33b1e:	687b      	ldr	r3, [r7, #4]
   33b20:	3350      	adds	r3, #80	; 0x50
   33b22:	6839      	ldr	r1, [r7, #0]
   33b24:	221c      	movs	r2, #28
   33b26:	0018      	movs	r0, r3
   33b28:	4b1f      	ldr	r3, [pc, #124]	; (33ba8 <http_client_init+0xdc>)
   33b2a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   33b2c:	687b      	ldr	r3, [r7, #4]
   33b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33b30:	2b00      	cmp	r3, #0
   33b32:	d115      	bne.n	33b60 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   33b34:	683b      	ldr	r3, [r7, #0]
   33b36:	691b      	ldr	r3, [r3, #16]
   33b38:	0018      	movs	r0, r3
   33b3a:	4b1c      	ldr	r3, [pc, #112]	; (33bac <http_client_init+0xe0>)
   33b3c:	4798      	blx	r3
   33b3e:	0003      	movs	r3, r0
   33b40:	001a      	movs	r2, r3
   33b42:	687b      	ldr	r3, [r7, #4]
   33b44:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   33b46:	687b      	ldr	r3, [r7, #4]
   33b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   33b4a:	2b00      	cmp	r3, #0
   33b4c:	d102      	bne.n	33b54 <http_client_init+0x88>
			return -ENOMEM;
   33b4e:	230c      	movs	r3, #12
   33b50:	425b      	negs	r3, r3
   33b52:	e022      	b.n	33b9a <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   33b54:	687b      	ldr	r3, [r7, #4]
   33b56:	2241      	movs	r2, #65	; 0x41
   33b58:	5c99      	ldrb	r1, [r3, r2]
   33b5a:	2004      	movs	r0, #4
   33b5c:	4301      	orrs	r1, r0
   33b5e:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   33b60:	683b      	ldr	r3, [r7, #0]
   33b62:	891b      	ldrh	r3, [r3, #8]
   33b64:	2b00      	cmp	r3, #0
   33b66:	d010      	beq.n	33b8a <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   33b68:	683b      	ldr	r3, [r7, #0]
   33b6a:	6858      	ldr	r0, [r3, #4]
   33b6c:	687a      	ldr	r2, [r7, #4]
   33b6e:	4910      	ldr	r1, [pc, #64]	; (33bb0 <http_client_init+0xe4>)
   33b70:	2300      	movs	r3, #0
   33b72:	4c10      	ldr	r4, [pc, #64]	; (33bb4 <http_client_init+0xe8>)
   33b74:	47a0      	blx	r4
   33b76:	0002      	movs	r2, r0
   33b78:	687b      	ldr	r3, [r7, #4]
   33b7a:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   33b7c:	687b      	ldr	r3, [r7, #4]
   33b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   33b80:	2b00      	cmp	r3, #0
   33b82:	da02      	bge.n	33b8a <http_client_init+0xbe>
			return -ENOSPC;
   33b84:	231c      	movs	r3, #28
   33b86:	425b      	negs	r3, r3
   33b88:	e007      	b.n	33b9a <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   33b8a:	687b      	ldr	r3, [r7, #4]
   33b8c:	2200      	movs	r2, #0
   33b8e:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   33b90:	687b      	ldr	r3, [r7, #4]
   33b92:	22d8      	movs	r2, #216	; 0xd8
   33b94:	2100      	movs	r1, #0
   33b96:	5099      	str	r1, [r3, r2]

	return 0;
   33b98:	2300      	movs	r3, #0
}
   33b9a:	0018      	movs	r0, r3
   33b9c:	46bd      	mov	sp, r7
   33b9e:	b003      	add	sp, #12
   33ba0:	bd90      	pop	{r4, r7, pc}
   33ba2:	46c0      	nop			; (mov r8, r8)
   33ba4:	00038507 	.word	0x00038507
   33ba8:	000384d1 	.word	0x000384d1
   33bac:	000384a9 	.word	0x000384a9
   33bb0:	00033e7d 	.word	0x00033e7d
   33bb4:	00035521 	.word	0x00035521

00033bb8 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   33bb8:	b580      	push	{r7, lr}
   33bba:	b082      	sub	sp, #8
   33bbc:	af00      	add	r7, sp, #0
   33bbe:	6078      	str	r0, [r7, #4]
   33bc0:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   33bc2:	687b      	ldr	r3, [r7, #4]
   33bc4:	2b00      	cmp	r3, #0
   33bc6:	d102      	bne.n	33bce <http_client_register_callback+0x16>
		return -EINVAL;
   33bc8:	2316      	movs	r3, #22
   33bca:	425b      	negs	r3, r3
   33bcc:	e003      	b.n	33bd6 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   33bce:	687b      	ldr	r3, [r7, #4]
   33bd0:	683a      	ldr	r2, [r7, #0]
   33bd2:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   33bd4:	2300      	movs	r3, #0
}
   33bd6:	0018      	movs	r0, r3
   33bd8:	46bd      	mov	sp, r7
   33bda:	b002      	add	sp, #8
   33bdc:	bd80      	pop	{r7, pc}
	...

00033be0 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   33be0:	b580      	push	{r7, lr}
   33be2:	b082      	sub	sp, #8
   33be4:	af00      	add	r7, sp, #0
   33be6:	6078      	str	r0, [r7, #4]
	switch (err) {
   33be8:	687b      	ldr	r3, [r7, #4]
   33bea:	330e      	adds	r3, #14
   33bec:	2b0e      	cmp	r3, #14
   33bee:	d825      	bhi.n	33c3c <_hwerr_to_stderr+0x5c>
   33bf0:	009a      	lsls	r2, r3, #2
   33bf2:	4b18      	ldr	r3, [pc, #96]	; (33c54 <_hwerr_to_stderr+0x74>)
   33bf4:	18d3      	adds	r3, r2, r3
   33bf6:	681b      	ldr	r3, [r3, #0]
   33bf8:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   33bfa:	2305      	movs	r3, #5
   33bfc:	425b      	negs	r3, r3
   33bfe:	e024      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   33c00:	2302      	movs	r3, #2
   33c02:	425b      	negs	r3, r3
   33c04:	e021      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   33c06:	2370      	movs	r3, #112	; 0x70
   33c08:	425b      	negs	r3, r3
   33c0a:	e01e      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   33c0c:	230c      	movs	r3, #12
   33c0e:	425b      	negs	r3, r3
   33c10:	e01b      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   33c12:	2316      	movs	r3, #22
   33c14:	425b      	negs	r3, r3
   33c16:	e018      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   33c18:	230c      	movs	r3, #12
   33c1a:	425b      	negs	r3, r3
   33c1c:	e015      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   33c1e:	2305      	movs	r3, #5
   33c20:	425b      	negs	r3, r3
   33c22:	e012      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   33c24:	2379      	movs	r3, #121	; 0x79
   33c26:	425b      	negs	r3, r3
   33c28:	e00f      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   33c2a:	2368      	movs	r3, #104	; 0x68
   33c2c:	425b      	negs	r3, r3
   33c2e:	e00c      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   33c30:	230b      	movs	r3, #11
   33c32:	425b      	negs	r3, r3
   33c34:	e009      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   33c36:	2310      	movs	r3, #16
   33c38:	425b      	negs	r3, r3
   33c3a:	e006      	b.n	33c4a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   33c3c:	687b      	ldr	r3, [r7, #4]
   33c3e:	2b00      	cmp	r3, #0
   33c40:	da02      	bge.n	33c48 <_hwerr_to_stderr+0x68>
				return -EIO;
   33c42:	2305      	movs	r3, #5
   33c44:	425b      	negs	r3, r3
   33c46:	e000      	b.n	33c4a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   33c48:	2300      	movs	r3, #0
	}
}
   33c4a:	0018      	movs	r0, r3
   33c4c:	46bd      	mov	sp, r7
   33c4e:	b002      	add	sp, #8
   33c50:	bd80      	pop	{r7, pc}
   33c52:	46c0      	nop			; (mov r8, r8)
   33c54:	0003e36c 	.word	0x0003e36c

00033c58 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   33c58:	b580      	push	{r7, lr}
   33c5a:	b08a      	sub	sp, #40	; 0x28
   33c5c:	af00      	add	r7, sp, #0
   33c5e:	603a      	str	r2, [r7, #0]
   33c60:	1dfb      	adds	r3, r7, #7
   33c62:	1c02      	adds	r2, r0, #0
   33c64:	701a      	strb	r2, [r3, #0]
   33c66:	1dbb      	adds	r3, r7, #6
   33c68:	1c0a      	adds	r2, r1, #0
   33c6a:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   33c6c:	1dfb      	adds	r3, r7, #7
   33c6e:	2200      	movs	r2, #0
   33c70:	569a      	ldrsb	r2, [r3, r2]
   33c72:	4b4b      	ldr	r3, [pc, #300]	; (33da0 <http_client_socket_event_handler+0x148>)
   33c74:	0092      	lsls	r2, r2, #2
   33c76:	58d3      	ldr	r3, [r2, r3]
   33c78:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   33c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33c7c:	2b00      	cmp	r3, #0
   33c7e:	d100      	bne.n	33c82 <http_client_socket_event_handler+0x2a>
   33c80:	e08a      	b.n	33d98 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   33c82:	1dbb      	adds	r3, r7, #6
   33c84:	781b      	ldrb	r3, [r3, #0]
   33c86:	2b06      	cmp	r3, #6
   33c88:	d040      	beq.n	33d0c <http_client_socket_event_handler+0xb4>
   33c8a:	2b07      	cmp	r3, #7
   33c8c:	d060      	beq.n	33d50 <http_client_socket_event_handler+0xf8>
   33c8e:	2b05      	cmp	r3, #5
   33c90:	d000      	beq.n	33c94 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   33c92:	e082      	b.n	33d9a <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   33c94:	683b      	ldr	r3, [r7, #0]
   33c96:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   33c98:	6a3b      	ldr	r3, [r7, #32]
   33c9a:	785b      	ldrb	r3, [r3, #1]
   33c9c:	b25b      	sxtb	r3, r3
   33c9e:	001a      	movs	r2, r3
   33ca0:	230c      	movs	r3, #12
   33ca2:	18fb      	adds	r3, r7, r3
   33ca4:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   33ca6:	6a3b      	ldr	r3, [r7, #32]
   33ca8:	785b      	ldrb	r3, [r3, #1]
   33caa:	b25b      	sxtb	r3, r3
   33cac:	2b00      	cmp	r3, #0
   33cae:	da0c      	bge.n	33cca <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   33cb0:	6a3b      	ldr	r3, [r7, #32]
   33cb2:	785b      	ldrb	r3, [r3, #1]
   33cb4:	b25b      	sxtb	r3, r3
   33cb6:	0018      	movs	r0, r3
   33cb8:	4b3a      	ldr	r3, [pc, #232]	; (33da4 <http_client_socket_event_handler+0x14c>)
   33cba:	4798      	blx	r3
   33cbc:	0002      	movs	r2, r0
   33cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33cc0:	0011      	movs	r1, r2
   33cc2:	0018      	movs	r0, r3
   33cc4:	4b38      	ldr	r3, [pc, #224]	; (33da8 <http_client_socket_event_handler+0x150>)
   33cc6:	4798      	blx	r3
    	break;
   33cc8:	e067      	b.n	33d9a <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   33cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33cce:	2b00      	cmp	r3, #0
   33cd0:	d006      	beq.n	33ce0 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   33cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33cd6:	220c      	movs	r2, #12
   33cd8:	18ba      	adds	r2, r7, r2
   33cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
   33cdc:	2100      	movs	r1, #0
   33cde:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   33ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33ce2:	2203      	movs	r2, #3
   33ce4:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   33ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33ce8:	6d58      	ldr	r0, [r3, #84]	; 0x54
   33cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33cec:	6c99      	ldr	r1, [r3, #72]	; 0x48
   33cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33cf0:	2258      	movs	r2, #88	; 0x58
   33cf2:	5a9b      	ldrh	r3, [r3, r2]
   33cf4:	001a      	movs	r2, r3
   33cf6:	4b2d      	ldr	r3, [pc, #180]	; (33dac <http_client_socket_event_handler+0x154>)
   33cf8:	4798      	blx	r3
    		_http_client_recv_packet(module);
   33cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33cfc:	0018      	movs	r0, r3
   33cfe:	4b2c      	ldr	r3, [pc, #176]	; (33db0 <http_client_socket_event_handler+0x158>)
   33d00:	4798      	blx	r3
			_http_client_request(module);
   33d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33d04:	0018      	movs	r0, r3
   33d06:	4b2b      	ldr	r3, [pc, #172]	; (33db4 <http_client_socket_event_handler+0x15c>)
   33d08:	4798      	blx	r3
    	break;
   33d0a:	e046      	b.n	33d9a <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   33d0c:	683b      	ldr	r3, [r7, #0]
   33d0e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   33d10:	69fb      	ldr	r3, [r7, #28]
   33d12:	2204      	movs	r2, #4
   33d14:	5e9b      	ldrsh	r3, [r3, r2]
   33d16:	2b00      	cmp	r3, #0
   33d18:	dd09      	ble.n	33d2e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   33d1a:	69fb      	ldr	r3, [r7, #28]
   33d1c:	2204      	movs	r2, #4
   33d1e:	5e9b      	ldrsh	r3, [r3, r2]
   33d20:	001a      	movs	r2, r3
   33d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33d24:	0011      	movs	r1, r2
   33d26:	0018      	movs	r0, r3
   33d28:	4b23      	ldr	r3, [pc, #140]	; (33db8 <http_client_socket_event_handler+0x160>)
   33d2a:	4798      	blx	r3
   33d2c:	e00b      	b.n	33d46 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   33d2e:	69fb      	ldr	r3, [r7, #28]
   33d30:	2204      	movs	r2, #4
   33d32:	5e9b      	ldrsh	r3, [r3, r2]
   33d34:	0018      	movs	r0, r3
   33d36:	4b1b      	ldr	r3, [pc, #108]	; (33da4 <http_client_socket_event_handler+0x14c>)
   33d38:	4798      	blx	r3
   33d3a:	0002      	movs	r2, r0
   33d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33d3e:	0011      	movs	r1, r2
   33d40:	0018      	movs	r0, r3
   33d42:	4b19      	ldr	r3, [pc, #100]	; (33da8 <http_client_socket_event_handler+0x150>)
   33d44:	4798      	blx	r3
		_http_client_recv_packet(module);
   33d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33d48:	0018      	movs	r0, r3
   33d4a:	4b19      	ldr	r3, [pc, #100]	; (33db0 <http_client_socket_event_handler+0x158>)
   33d4c:	4798      	blx	r3
		break;
   33d4e:	e024      	b.n	33d9a <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   33d50:	231a      	movs	r3, #26
   33d52:	18fb      	adds	r3, r7, r3
   33d54:	683a      	ldr	r2, [r7, #0]
   33d56:	8812      	ldrh	r2, [r2, #0]
   33d58:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   33d5a:	231a      	movs	r3, #26
   33d5c:	18fb      	adds	r3, r7, r3
   33d5e:	2200      	movs	r2, #0
   33d60:	5e9b      	ldrsh	r3, [r3, r2]
   33d62:	2b00      	cmp	r3, #0
   33d64:	da0d      	bge.n	33d82 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   33d66:	231a      	movs	r3, #26
   33d68:	18fb      	adds	r3, r7, r3
   33d6a:	2200      	movs	r2, #0
   33d6c:	5e9b      	ldrsh	r3, [r3, r2]
   33d6e:	0018      	movs	r0, r3
   33d70:	4b0c      	ldr	r3, [pc, #48]	; (33da4 <http_client_socket_event_handler+0x14c>)
   33d72:	4798      	blx	r3
   33d74:	0002      	movs	r2, r0
   33d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33d78:	0011      	movs	r1, r2
   33d7a:	0018      	movs	r0, r3
   33d7c:	4b0a      	ldr	r3, [pc, #40]	; (33da8 <http_client_socket_event_handler+0x150>)
   33d7e:	4798      	blx	r3
   33d80:	e003      	b.n	33d8a <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   33d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33d84:	0018      	movs	r0, r3
   33d86:	4b0b      	ldr	r3, [pc, #44]	; (33db4 <http_client_socket_event_handler+0x15c>)
   33d88:	4798      	blx	r3
		module->sending = 0;
   33d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   33d8c:	2241      	movs	r2, #65	; 0x41
   33d8e:	5c99      	ldrb	r1, [r3, r2]
   33d90:	2001      	movs	r0, #1
   33d92:	4381      	bics	r1, r0
   33d94:	5499      	strb	r1, [r3, r2]
    	break;
   33d96:	e000      	b.n	33d9a <http_client_socket_event_handler+0x142>
		return;
   33d98:	46c0      	nop			; (mov r8, r8)
	}

}
   33d9a:	46bd      	mov	sp, r7
   33d9c:	b00a      	add	sp, #40	; 0x28
   33d9e:	bd80      	pop	{r7, pc}
   33da0:	20004614 	.word	0x20004614
   33da4:	00033be1 	.word	0x00033be1
   33da8:	00034255 	.word	0x00034255
   33dac:	000355b1 	.word	0x000355b1
   33db0:	00034ae1 	.word	0x00034ae1
   33db4:	000343a9 	.word	0x000343a9
   33db8:	00034b45 	.word	0x00034b45

00033dbc <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   33dbc:	b580      	push	{r7, lr}
   33dbe:	b088      	sub	sp, #32
   33dc0:	af00      	add	r7, sp, #0
   33dc2:	6078      	str	r0, [r7, #4]
   33dc4:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   33dc6:	2300      	movs	r3, #0
   33dc8:	61fb      	str	r3, [r7, #28]
   33dca:	e048      	b.n	33e5e <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   33dcc:	4b27      	ldr	r3, [pc, #156]	; (33e6c <http_client_socket_resolve_handler+0xb0>)
   33dce:	69fa      	ldr	r2, [r7, #28]
   33dd0:	0092      	lsls	r2, r2, #2
   33dd2:	58d3      	ldr	r3, [r2, r3]
   33dd4:	2b00      	cmp	r3, #0
   33dd6:	d03f      	beq.n	33e58 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   33dd8:	4b24      	ldr	r3, [pc, #144]	; (33e6c <http_client_socket_resolve_handler+0xb0>)
   33dda:	69fa      	ldr	r2, [r7, #28]
   33ddc:	0092      	lsls	r2, r2, #2
   33dde:	58d3      	ldr	r3, [r2, r3]
   33de0:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   33de2:	69bb      	ldr	r3, [r7, #24]
   33de4:	1c5a      	adds	r2, r3, #1
   33de6:	687b      	ldr	r3, [r7, #4]
   33de8:	0011      	movs	r1, r2
   33dea:	0018      	movs	r0, r3
   33dec:	4b20      	ldr	r3, [pc, #128]	; (33e70 <http_client_socket_resolve_handler+0xb4>)
   33dee:	4798      	blx	r3
   33df0:	1e03      	subs	r3, r0, #0
   33df2:	d131      	bne.n	33e58 <http_client_socket_resolve_handler+0x9c>
   33df4:	69bb      	ldr	r3, [r7, #24]
   33df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33df8:	2b01      	cmp	r3, #1
   33dfa:	d12d      	bne.n	33e58 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   33dfc:	683b      	ldr	r3, [r7, #0]
   33dfe:	2b00      	cmp	r3, #0
   33e00:	d107      	bne.n	33e12 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   33e02:	2376      	movs	r3, #118	; 0x76
   33e04:	425a      	negs	r2, r3
   33e06:	69bb      	ldr	r3, [r7, #24]
   33e08:	0011      	movs	r1, r2
   33e0a:	0018      	movs	r0, r3
   33e0c:	4b19      	ldr	r3, [pc, #100]	; (33e74 <http_client_socket_resolve_handler+0xb8>)
   33e0e:	4798      	blx	r3
					return;
   33e10:	e028      	b.n	33e64 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   33e12:	2308      	movs	r3, #8
   33e14:	18fb      	adds	r3, r7, r3
   33e16:	2202      	movs	r2, #2
   33e18:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   33e1a:	69bb      	ldr	r3, [r7, #24]
   33e1c:	2250      	movs	r2, #80	; 0x50
   33e1e:	5a9b      	ldrh	r3, [r3, r2]
   33e20:	021b      	lsls	r3, r3, #8
   33e22:	b21a      	sxth	r2, r3
   33e24:	69bb      	ldr	r3, [r7, #24]
   33e26:	2150      	movs	r1, #80	; 0x50
   33e28:	5a5b      	ldrh	r3, [r3, r1]
   33e2a:	0a1b      	lsrs	r3, r3, #8
   33e2c:	b29b      	uxth	r3, r3
   33e2e:	b21b      	sxth	r3, r3
   33e30:	4313      	orrs	r3, r2
   33e32:	b21b      	sxth	r3, r3
   33e34:	b29a      	uxth	r2, r3
   33e36:	2308      	movs	r3, #8
   33e38:	18fb      	adds	r3, r7, r3
   33e3a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   33e3c:	2308      	movs	r3, #8
   33e3e:	18fb      	adds	r3, r7, r3
   33e40:	683a      	ldr	r2, [r7, #0]
   33e42:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   33e44:	69bb      	ldr	r3, [r7, #24]
   33e46:	781b      	ldrb	r3, [r3, #0]
   33e48:	b25b      	sxtb	r3, r3
   33e4a:	2208      	movs	r2, #8
   33e4c:	18b9      	adds	r1, r7, r2
   33e4e:	2210      	movs	r2, #16
   33e50:	0018      	movs	r0, r3
   33e52:	4b09      	ldr	r3, [pc, #36]	; (33e78 <http_client_socket_resolve_handler+0xbc>)
   33e54:	4798      	blx	r3
				return;
   33e56:	e005      	b.n	33e64 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   33e58:	69fb      	ldr	r3, [r7, #28]
   33e5a:	3301      	adds	r3, #1
   33e5c:	61fb      	str	r3, [r7, #28]
   33e5e:	69fb      	ldr	r3, [r7, #28]
   33e60:	2b06      	cmp	r3, #6
   33e62:	ddb3      	ble.n	33dcc <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   33e64:	46bd      	mov	sp, r7
   33e66:	b008      	add	sp, #32
   33e68:	bd80      	pop	{r7, pc}
   33e6a:	46c0      	nop			; (mov r8, r8)
   33e6c:	20004614 	.word	0x20004614
   33e70:	00038861 	.word	0x00038861
   33e74:	00034255 	.word	0x00034255
   33e78:	00028779 	.word	0x00028779

00033e7c <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   33e7c:	b580      	push	{r7, lr}
   33e7e:	b086      	sub	sp, #24
   33e80:	af00      	add	r7, sp, #0
   33e82:	60f8      	str	r0, [r7, #12]
   33e84:	60b9      	str	r1, [r7, #8]
   33e86:	607a      	str	r2, [r7, #4]
   33e88:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   33e8a:	687b      	ldr	r3, [r7, #4]
   33e8c:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   33e8e:	697b      	ldr	r3, [r7, #20]
   33e90:	2b00      	cmp	r3, #0
   33e92:	d007      	beq.n	33ea4 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   33e94:	233e      	movs	r3, #62	; 0x3e
   33e96:	425a      	negs	r2, r3
   33e98:	697b      	ldr	r3, [r7, #20]
   33e9a:	0011      	movs	r1, r2
   33e9c:	0018      	movs	r0, r3
   33e9e:	4b03      	ldr	r3, [pc, #12]	; (33eac <http_client_timer_callback+0x30>)
   33ea0:	4798      	blx	r3
   33ea2:	e000      	b.n	33ea6 <http_client_timer_callback+0x2a>
		return;
   33ea4:	46c0      	nop			; (mov r8, r8)
}
   33ea6:	46bd      	mov	sp, r7
   33ea8:	b006      	add	sp, #24
   33eaa:	bd80      	pop	{r7, pc}
   33eac:	00034255 	.word	0x00034255

00033eb0 <_is_ip>:

static int _is_ip(const char *host)
{
   33eb0:	b580      	push	{r7, lr}
   33eb2:	b084      	sub	sp, #16
   33eb4:	af00      	add	r7, sp, #0
   33eb6:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   33eb8:	2300      	movs	r3, #0
   33eba:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   33ebc:	e03a      	b.n	33f34 <_is_ip+0x84>
		ch = *host++;
   33ebe:	687b      	ldr	r3, [r7, #4]
   33ec0:	1c5a      	adds	r2, r3, #1
   33ec2:	607a      	str	r2, [r7, #4]
   33ec4:	220b      	movs	r2, #11
   33ec6:	18ba      	adds	r2, r7, r2
   33ec8:	781b      	ldrb	r3, [r3, #0]
   33eca:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   33ecc:	230b      	movs	r3, #11
   33ece:	18fb      	adds	r3, r7, r3
   33ed0:	781b      	ldrb	r3, [r3, #0]
   33ed2:	2b60      	cmp	r3, #96	; 0x60
   33ed4:	d904      	bls.n	33ee0 <_is_ip+0x30>
   33ed6:	230b      	movs	r3, #11
   33ed8:	18fb      	adds	r3, r7, r3
   33eda:	781b      	ldrb	r3, [r3, #0]
   33edc:	2b66      	cmp	r3, #102	; 0x66
   33ede:	d913      	bls.n	33f08 <_is_ip+0x58>
   33ee0:	230b      	movs	r3, #11
   33ee2:	18fb      	adds	r3, r7, r3
   33ee4:	781b      	ldrb	r3, [r3, #0]
   33ee6:	2b40      	cmp	r3, #64	; 0x40
   33ee8:	d904      	bls.n	33ef4 <_is_ip+0x44>
   33eea:	230b      	movs	r3, #11
   33eec:	18fb      	adds	r3, r7, r3
   33eee:	781b      	ldrb	r3, [r3, #0]
   33ef0:	2b46      	cmp	r3, #70	; 0x46
   33ef2:	d909      	bls.n	33f08 <_is_ip+0x58>
   33ef4:	230b      	movs	r3, #11
   33ef6:	18fb      	adds	r3, r7, r3
   33ef8:	781b      	ldrb	r3, [r3, #0]
   33efa:	2b3a      	cmp	r3, #58	; 0x3a
   33efc:	d004      	beq.n	33f08 <_is_ip+0x58>
   33efe:	230b      	movs	r3, #11
   33f00:	18fb      	adds	r3, r7, r3
   33f02:	781b      	ldrb	r3, [r3, #0]
   33f04:	2b2f      	cmp	r3, #47	; 0x2f
   33f06:	d102      	bne.n	33f0e <_is_ip+0x5e>
			isv6 = 1;
   33f08:	2301      	movs	r3, #1
   33f0a:	60fb      	str	r3, [r7, #12]
   33f0c:	e012      	b.n	33f34 <_is_ip+0x84>
		} else if (ch == '.') {
   33f0e:	230b      	movs	r3, #11
   33f10:	18fb      	adds	r3, r7, r3
   33f12:	781b      	ldrb	r3, [r3, #0]
   33f14:	2b2e      	cmp	r3, #46	; 0x2e
   33f16:	d104      	bne.n	33f22 <_is_ip+0x72>
			if (isv6) {
   33f18:	68fb      	ldr	r3, [r7, #12]
   33f1a:	2b00      	cmp	r3, #0
   33f1c:	d00a      	beq.n	33f34 <_is_ip+0x84>
				return 0;
   33f1e:	2300      	movs	r3, #0
   33f20:	e00d      	b.n	33f3e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   33f22:	230b      	movs	r3, #11
   33f24:	18fb      	adds	r3, r7, r3
   33f26:	781b      	ldrb	r3, [r3, #0]
   33f28:	2230      	movs	r2, #48	; 0x30
   33f2a:	4013      	ands	r3, r2
   33f2c:	2b30      	cmp	r3, #48	; 0x30
   33f2e:	d001      	beq.n	33f34 <_is_ip+0x84>
			return 0;
   33f30:	2300      	movs	r3, #0
   33f32:	e004      	b.n	33f3e <_is_ip+0x8e>
	while (*host != '\0') {
   33f34:	687b      	ldr	r3, [r7, #4]
   33f36:	781b      	ldrb	r3, [r3, #0]
   33f38:	2b00      	cmp	r3, #0
   33f3a:	d1c0      	bne.n	33ebe <_is_ip+0xe>
		}
	}
	return 1;
   33f3c:	2301      	movs	r3, #1
}
   33f3e:	0018      	movs	r0, r3
   33f40:	46bd      	mov	sp, r7
   33f42:	b004      	add	sp, #16
   33f44:	bd80      	pop	{r7, pc}
	...

00033f48 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   33f48:	b5b0      	push	{r4, r5, r7, lr}
   33f4a:	b08e      	sub	sp, #56	; 0x38
   33f4c:	af00      	add	r7, sp, #0
   33f4e:	60f8      	str	r0, [r7, #12]
   33f50:	60b9      	str	r1, [r7, #8]
   33f52:	603b      	str	r3, [r7, #0]
   33f54:	1dfb      	adds	r3, r7, #7
   33f56:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   33f58:	2337      	movs	r3, #55	; 0x37
   33f5a:	18fb      	adds	r3, r7, r3
   33f5c:	2200      	movs	r2, #0
   33f5e:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   33f60:	2300      	movs	r3, #0
   33f62:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   33f64:	2300      	movs	r3, #0
   33f66:	633b      	str	r3, [r7, #48]	; 0x30
   33f68:	2300      	movs	r3, #0
   33f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   33f6c:	2300      	movs	r3, #0
   33f6e:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   33f70:	68fb      	ldr	r3, [r7, #12]
   33f72:	2b00      	cmp	r3, #0
   33f74:	d102      	bne.n	33f7c <http_client_send_request+0x34>
		return -EINVAL;
   33f76:	2316      	movs	r3, #22
   33f78:	425b      	negs	r3, r3
   33f7a:	e145      	b.n	34208 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   33f7c:	68fb      	ldr	r3, [r7, #12]
   33f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   33f80:	2b02      	cmp	r3, #2
   33f82:	d902      	bls.n	33f8a <http_client_send_request+0x42>
		return -EBUSY;
   33f84:	2310      	movs	r3, #16
   33f86:	425b      	negs	r3, r3
   33f88:	e13e      	b.n	34208 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   33f8a:	49a1      	ldr	r1, [pc, #644]	; (34210 <http_client_send_request+0x2c8>)
   33f8c:	68bb      	ldr	r3, [r7, #8]
   33f8e:	2207      	movs	r2, #7
   33f90:	0018      	movs	r0, r3
   33f92:	4ba0      	ldr	r3, [pc, #640]	; (34214 <http_client_send_request+0x2cc>)
   33f94:	4798      	blx	r3
   33f96:	1e03      	subs	r3, r0, #0
   33f98:	d102      	bne.n	33fa0 <http_client_send_request+0x58>
		i = 7;
   33f9a:	2307      	movs	r3, #7
   33f9c:	633b      	str	r3, [r7, #48]	; 0x30
   33f9e:	e009      	b.n	33fb4 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   33fa0:	499d      	ldr	r1, [pc, #628]	; (34218 <http_client_send_request+0x2d0>)
   33fa2:	68bb      	ldr	r3, [r7, #8]
   33fa4:	2208      	movs	r2, #8
   33fa6:	0018      	movs	r0, r3
   33fa8:	4b9a      	ldr	r3, [pc, #616]	; (34214 <http_client_send_request+0x2cc>)
   33faa:	4798      	blx	r3
   33fac:	1e03      	subs	r3, r0, #0
   33fae:	d101      	bne.n	33fb4 <http_client_send_request+0x6c>
		i = 8;
   33fb0:	2308      	movs	r3, #8
   33fb2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   33fb4:	68fb      	ldr	r3, [r7, #12]
   33fb6:	1c5c      	adds	r4, r3, #1
   33fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33fba:	68ba      	ldr	r2, [r7, #8]
   33fbc:	18d5      	adds	r5, r2, r3
   33fbe:	68fb      	ldr	r3, [r7, #12]
   33fc0:	3301      	adds	r3, #1
   33fc2:	0018      	movs	r0, r3
   33fc4:	4b95      	ldr	r3, [pc, #596]	; (3421c <http_client_send_request+0x2d4>)
   33fc6:	4798      	blx	r3
   33fc8:	0003      	movs	r3, r0
   33fca:	001a      	movs	r2, r3
   33fcc:	0029      	movs	r1, r5
   33fce:	0020      	movs	r0, r4
   33fd0:	4b90      	ldr	r3, [pc, #576]	; (34214 <http_client_send_request+0x2cc>)
   33fd2:	4798      	blx	r3
   33fd4:	0003      	movs	r3, r0
   33fd6:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33fd8:	e00d      	b.n	33ff6 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   33fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   33fdc:	1c5a      	adds	r2, r3, #1
   33fde:	62fa      	str	r2, [r7, #44]	; 0x2c
   33fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   33fe2:	68b9      	ldr	r1, [r7, #8]
   33fe4:	188a      	adds	r2, r1, r2
   33fe6:	7811      	ldrb	r1, [r2, #0]
   33fe8:	68fa      	ldr	r2, [r7, #12]
   33fea:	18d3      	adds	r3, r2, r3
   33fec:	1c0a      	adds	r2, r1, #0
   33fee:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   33ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33ff2:	3301      	adds	r3, #1
   33ff4:	633b      	str	r3, [r7, #48]	; 0x30
   33ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   33ff8:	68ba      	ldr	r2, [r7, #8]
   33ffa:	18d3      	adds	r3, r2, r3
   33ffc:	781b      	ldrb	r3, [r3, #0]
   33ffe:	2b00      	cmp	r3, #0
   34000:	d005      	beq.n	3400e <http_client_send_request+0xc6>
   34002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   34004:	68ba      	ldr	r2, [r7, #8]
   34006:	18d3      	adds	r3, r2, r3
   34008:	781b      	ldrb	r3, [r3, #0]
   3400a:	2b2f      	cmp	r3, #47	; 0x2f
   3400c:	d1e5      	bne.n	33fda <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   3400e:	68fa      	ldr	r2, [r7, #12]
   34010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   34012:	18d3      	adds	r3, r2, r3
   34014:	3301      	adds	r3, #1
   34016:	2200      	movs	r2, #0
   34018:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   3401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3401c:	68ba      	ldr	r2, [r7, #8]
   3401e:	18d3      	adds	r3, r2, r3
   34020:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   34022:	68fb      	ldr	r3, [r7, #12]
   34024:	3301      	adds	r3, #1
   34026:	781b      	ldrb	r3, [r3, #0]
   34028:	2b00      	cmp	r3, #0
   3402a:	d102      	bne.n	34032 <http_client_send_request+0xea>
		return -EINVAL;
   3402c:	2316      	movs	r3, #22
   3402e:	425b      	negs	r3, r3
   34030:	e0ea      	b.n	34208 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   34032:	6abb      	ldr	r3, [r7, #40]	; 0x28
   34034:	0018      	movs	r0, r3
   34036:	4b79      	ldr	r3, [pc, #484]	; (3421c <http_client_send_request+0x2d4>)
   34038:	4798      	blx	r3
   3403a:	0003      	movs	r3, r0
   3403c:	2b3f      	cmp	r3, #63	; 0x3f
   3403e:	d902      	bls.n	34046 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   34040:	235b      	movs	r3, #91	; 0x5b
   34042:	425b      	negs	r3, r3
   34044:	e0e0      	b.n	34208 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   34046:	68fb      	ldr	r3, [r7, #12]
   34048:	22d4      	movs	r2, #212	; 0xd4
   3404a:	589b      	ldr	r3, [r3, r2]
   3404c:	2b00      	cmp	r3, #0
   3404e:	d005      	beq.n	3405c <http_client_send_request+0x114>
		free(module->req.ext_header);
   34050:	68fb      	ldr	r3, [r7, #12]
   34052:	22d4      	movs	r2, #212	; 0xd4
   34054:	589b      	ldr	r3, [r3, r2]
   34056:	0018      	movs	r0, r3
   34058:	4b71      	ldr	r3, [pc, #452]	; (34220 <http_client_send_request+0x2d8>)
   3405a:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   3405c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   3405e:	2b00      	cmp	r3, #0
   34060:	d010      	beq.n	34084 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   34062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   34064:	0018      	movs	r0, r3
   34066:	4b6f      	ldr	r3, [pc, #444]	; (34224 <http_client_send_request+0x2dc>)
   34068:	4798      	blx	r3
   3406a:	0003      	movs	r3, r0
   3406c:	0019      	movs	r1, r3
   3406e:	68fb      	ldr	r3, [r7, #12]
   34070:	22d4      	movs	r2, #212	; 0xd4
   34072:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   34074:	68fb      	ldr	r3, [r7, #12]
   34076:	22d4      	movs	r2, #212	; 0xd4
   34078:	589b      	ldr	r3, [r3, r2]
   3407a:	2b00      	cmp	r3, #0
   3407c:	d106      	bne.n	3408c <http_client_send_request+0x144>
			return -ENOMEM;
   3407e:	230c      	movs	r3, #12
   34080:	425b      	negs	r3, r3
   34082:	e0c1      	b.n	34208 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   34084:	68fb      	ldr	r3, [r7, #12]
   34086:	22d4      	movs	r2, #212	; 0xd4
   34088:	2100      	movs	r1, #0
   3408a:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   3408c:	68fb      	ldr	r3, [r7, #12]
   3408e:	2241      	movs	r2, #65	; 0x41
   34090:	5c99      	ldrb	r1, [r3, r2]
   34092:	2001      	movs	r0, #1
   34094:	4381      	bics	r1, r0
   34096:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   34098:	68fb      	ldr	r3, [r7, #12]
   3409a:	2200      	movs	r2, #0
   3409c:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   3409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   340a0:	781b      	ldrb	r3, [r3, #0]
   340a2:	2b2f      	cmp	r3, #47	; 0x2f
   340a4:	d107      	bne.n	340b6 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   340a6:	68fb      	ldr	r3, [r7, #12]
   340a8:	3370      	adds	r3, #112	; 0x70
   340aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   340ac:	0011      	movs	r1, r2
   340ae:	0018      	movs	r0, r3
   340b0:	4b5d      	ldr	r3, [pc, #372]	; (34228 <http_client_send_request+0x2e0>)
   340b2:	4798      	blx	r3
   340b4:	e00f      	b.n	340d6 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   340b6:	68fb      	ldr	r3, [r7, #12]
   340b8:	2270      	movs	r2, #112	; 0x70
   340ba:	212f      	movs	r1, #47	; 0x2f
   340bc:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   340be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   340c0:	781b      	ldrb	r3, [r3, #0]
   340c2:	2b00      	cmp	r3, #0
   340c4:	d007      	beq.n	340d6 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   340c6:	68fb      	ldr	r3, [r7, #12]
   340c8:	3370      	adds	r3, #112	; 0x70
   340ca:	3301      	adds	r3, #1
   340cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   340ce:	0011      	movs	r1, r2
   340d0:	0018      	movs	r0, r3
   340d2:	4b55      	ldr	r3, [pc, #340]	; (34228 <http_client_send_request+0x2e0>)
   340d4:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   340d6:	683b      	ldr	r3, [r7, #0]
   340d8:	2b00      	cmp	r3, #0
   340da:	d007      	beq.n	340ec <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   340dc:	68fb      	ldr	r3, [r7, #12]
   340de:	33b0      	adds	r3, #176	; 0xb0
   340e0:	6839      	ldr	r1, [r7, #0]
   340e2:	2218      	movs	r2, #24
   340e4:	0018      	movs	r0, r3
   340e6:	4b51      	ldr	r3, [pc, #324]	; (3422c <http_client_send_request+0x2e4>)
   340e8:	4798      	blx	r3
   340ea:	e006      	b.n	340fa <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   340ec:	68fb      	ldr	r3, [r7, #12]
   340ee:	33b0      	adds	r3, #176	; 0xb0
   340f0:	2218      	movs	r2, #24
   340f2:	2100      	movs	r1, #0
   340f4:	0018      	movs	r0, r3
   340f6:	4b4e      	ldr	r3, [pc, #312]	; (34230 <http_client_send_request+0x2e8>)
   340f8:	4798      	blx	r3
	}

	module->req.method = method;
   340fa:	68fb      	ldr	r3, [r7, #12]
   340fc:	1dfa      	adds	r2, r7, #7
   340fe:	21c8      	movs	r1, #200	; 0xc8
   34100:	7812      	ldrb	r2, [r2, #0]
   34102:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   34104:	68fb      	ldr	r3, [r7, #12]
   34106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   34108:	2b01      	cmp	r3, #1
   3410a:	d003      	beq.n	34114 <http_client_send_request+0x1cc>
   3410c:	d316      	bcc.n	3413c <http_client_send_request+0x1f4>
   3410e:	2b02      	cmp	r3, #2
   34110:	d004      	beq.n	3411c <http_client_send_request+0x1d4>
   34112:	e074      	b.n	341fe <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   34114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34116:	2b00      	cmp	r3, #0
   34118:	d100      	bne.n	3411c <http_client_send_request+0x1d4>
   3411a:	e073      	b.n	34204 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   3411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3411e:	2b00      	cmp	r3, #0
   34120:	d107      	bne.n	34132 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   34122:	68fb      	ldr	r3, [r7, #12]
   34124:	2203      	movs	r2, #3
   34126:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   34128:	68fb      	ldr	r3, [r7, #12]
   3412a:	0018      	movs	r0, r3
   3412c:	4b41      	ldr	r3, [pc, #260]	; (34234 <http_client_send_request+0x2ec>)
   3412e:	4798      	blx	r3
			break;
   34130:	e069      	b.n	34206 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   34132:	68fb      	ldr	r3, [r7, #12]
   34134:	2100      	movs	r1, #0
   34136:	0018      	movs	r0, r3
   34138:	4b3f      	ldr	r3, [pc, #252]	; (34238 <http_client_send_request+0x2f0>)
   3413a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   3413c:	68fb      	ldr	r3, [r7, #12]
   3413e:	2252      	movs	r2, #82	; 0x52
   34140:	5c9b      	ldrb	r3, [r3, r2]
   34142:	2b00      	cmp	r3, #0
   34144:	d007      	beq.n	34156 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   34146:	2337      	movs	r3, #55	; 0x37
   34148:	18fb      	adds	r3, r7, r3
   3414a:	2237      	movs	r2, #55	; 0x37
   3414c:	18ba      	adds	r2, r7, r2
   3414e:	7812      	ldrb	r2, [r2, #0]
   34150:	2101      	movs	r1, #1
   34152:	430a      	orrs	r2, r1
   34154:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   34156:	2337      	movs	r3, #55	; 0x37
   34158:	18fb      	adds	r3, r7, r3
   3415a:	781b      	ldrb	r3, [r3, #0]
   3415c:	001a      	movs	r2, r3
   3415e:	2101      	movs	r1, #1
   34160:	2002      	movs	r0, #2
   34162:	4b36      	ldr	r3, [pc, #216]	; (3423c <http_client_send_request+0x2f4>)
   34164:	4798      	blx	r3
   34166:	0003      	movs	r3, r0
   34168:	001a      	movs	r2, r3
   3416a:	68fb      	ldr	r3, [r7, #12]
   3416c:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   3416e:	68fb      	ldr	r3, [r7, #12]
   34170:	781b      	ldrb	r3, [r3, #0]
   34172:	b25b      	sxtb	r3, r3
   34174:	2b00      	cmp	r3, #0
   34176:	db3f      	blt.n	341f8 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   34178:	68fb      	ldr	r3, [r7, #12]
   3417a:	781b      	ldrb	r3, [r3, #0]
   3417c:	b25b      	sxtb	r3, r3
   3417e:	001a      	movs	r2, r3
   34180:	4b2f      	ldr	r3, [pc, #188]	; (34240 <http_client_send_request+0x2f8>)
   34182:	0092      	lsls	r2, r2, #2
   34184:	68f9      	ldr	r1, [r7, #12]
   34186:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   34188:	68fb      	ldr	r3, [r7, #12]
   3418a:	3301      	adds	r3, #1
   3418c:	0018      	movs	r0, r3
   3418e:	4b2d      	ldr	r3, [pc, #180]	; (34244 <http_client_send_request+0x2fc>)
   34190:	4798      	blx	r3
   34192:	1e03      	subs	r3, r0, #0
   34194:	d027      	beq.n	341e6 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   34196:	2314      	movs	r3, #20
   34198:	18fb      	adds	r3, r7, r3
   3419a:	2202      	movs	r2, #2
   3419c:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   3419e:	68fb      	ldr	r3, [r7, #12]
   341a0:	2250      	movs	r2, #80	; 0x50
   341a2:	5a9b      	ldrh	r3, [r3, r2]
   341a4:	021b      	lsls	r3, r3, #8
   341a6:	b21a      	sxth	r2, r3
   341a8:	68fb      	ldr	r3, [r7, #12]
   341aa:	2150      	movs	r1, #80	; 0x50
   341ac:	5a5b      	ldrh	r3, [r3, r1]
   341ae:	0a1b      	lsrs	r3, r3, #8
   341b0:	b29b      	uxth	r3, r3
   341b2:	b21b      	sxth	r3, r3
   341b4:	4313      	orrs	r3, r2
   341b6:	b21b      	sxth	r3, r3
   341b8:	b29a      	uxth	r2, r3
   341ba:	2314      	movs	r3, #20
   341bc:	18fb      	adds	r3, r7, r3
   341be:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   341c0:	68fb      	ldr	r3, [r7, #12]
   341c2:	3301      	adds	r3, #1
   341c4:	0018      	movs	r0, r3
   341c6:	4b20      	ldr	r3, [pc, #128]	; (34248 <http_client_send_request+0x300>)
   341c8:	4798      	blx	r3
   341ca:	0002      	movs	r2, r0
   341cc:	2314      	movs	r3, #20
   341ce:	18fb      	adds	r3, r7, r3
   341d0:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   341d2:	68fb      	ldr	r3, [r7, #12]
   341d4:	781b      	ldrb	r3, [r3, #0]
   341d6:	b25b      	sxtb	r3, r3
   341d8:	2214      	movs	r2, #20
   341da:	18b9      	adds	r1, r7, r2
   341dc:	2210      	movs	r2, #16
   341de:	0018      	movs	r0, r3
   341e0:	4b1a      	ldr	r3, [pc, #104]	; (3424c <http_client_send_request+0x304>)
   341e2:	4798      	blx	r3
   341e4:	e004      	b.n	341f0 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   341e6:	68fb      	ldr	r3, [r7, #12]
   341e8:	3301      	adds	r3, #1
   341ea:	0018      	movs	r0, r3
   341ec:	4b18      	ldr	r3, [pc, #96]	; (34250 <http_client_send_request+0x308>)
   341ee:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   341f0:	68fb      	ldr	r3, [r7, #12]
   341f2:	2201      	movs	r2, #1
   341f4:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   341f6:	e006      	b.n	34206 <http_client_send_request+0x2be>
			return -ENOSPC;
   341f8:	231c      	movs	r3, #28
   341fa:	425b      	negs	r3, r3
   341fc:	e004      	b.n	34208 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   341fe:	230b      	movs	r3, #11
   34200:	425b      	negs	r3, r3
   34202:	e001      	b.n	34208 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   34204:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   34206:	2300      	movs	r3, #0
}
   34208:	0018      	movs	r0, r3
   3420a:	46bd      	mov	sp, r7
   3420c:	b00e      	add	sp, #56	; 0x38
   3420e:	bdb0      	pop	{r4, r5, r7, pc}
   34210:	0003e23c 	.word	0x0003e23c
   34214:	000388cd 	.word	0x000388cd
   34218:	0003e244 	.word	0x0003e244
   3421c:	000388bf 	.word	0x000388bf
   34220:	000384bd 	.word	0x000384bd
   34224:	00038885 	.word	0x00038885
   34228:	00038875 	.word	0x00038875
   3422c:	000384d1 	.word	0x000384d1
   34230:	00038507 	.word	0x00038507
   34234:	000343a9 	.word	0x000343a9
   34238:	00034255 	.word	0x00034255
   3423c:	00028565 	.word	0x00028565
   34240:	20004614 	.word	0x20004614
   34244:	00033eb1 	.word	0x00033eb1
   34248:	00028cb1 	.word	0x00028cb1
   3424c:	00028779 	.word	0x00028779
   34250:	00028db9 	.word	0x00028db9

00034254 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   34254:	b580      	push	{r7, lr}
   34256:	b086      	sub	sp, #24
   34258:	af00      	add	r7, sp, #0
   3425a:	6078      	str	r0, [r7, #4]
   3425c:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   3425e:	687b      	ldr	r3, [r7, #4]
   34260:	22c0      	movs	r2, #192	; 0xc0
   34262:	589b      	ldr	r3, [r3, r2]
   34264:	2b00      	cmp	r3, #0
   34266:	d007      	beq.n	34278 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   34268:	687b      	ldr	r3, [r7, #4]
   3426a:	22c0      	movs	r2, #192	; 0xc0
   3426c:	589b      	ldr	r3, [r3, r2]
   3426e:	687a      	ldr	r2, [r7, #4]
   34270:	21c4      	movs	r1, #196	; 0xc4
   34272:	5852      	ldr	r2, [r2, r1]
   34274:	0010      	movs	r0, r2
   34276:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   34278:	687b      	ldr	r3, [r7, #4]
   3427a:	33b0      	adds	r3, #176	; 0xb0
   3427c:	2218      	movs	r2, #24
   3427e:	2100      	movs	r1, #0
   34280:	0018      	movs	r0, r3
   34282:	4b24      	ldr	r3, [pc, #144]	; (34314 <_http_client_clear_conn+0xc0>)
   34284:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   34286:	687b      	ldr	r3, [r7, #4]
   34288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3428a:	2b00      	cmp	r3, #0
   3428c:	d005      	beq.n	3429a <_http_client_clear_conn+0x46>
		close(module->sock);
   3428e:	687b      	ldr	r3, [r7, #4]
   34290:	781b      	ldrb	r3, [r3, #0]
   34292:	b25b      	sxtb	r3, r3
   34294:	0018      	movs	r0, r3
   34296:	4b20      	ldr	r3, [pc, #128]	; (34318 <_http_client_clear_conn+0xc4>)
   34298:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   3429a:	687b      	ldr	r3, [r7, #4]
   3429c:	781b      	ldrb	r3, [r3, #0]
   3429e:	b25b      	sxtb	r3, r3
   342a0:	001a      	movs	r2, r3
   342a2:	4b1e      	ldr	r3, [pc, #120]	; (3431c <_http_client_clear_conn+0xc8>)
   342a4:	0092      	lsls	r2, r2, #2
   342a6:	2100      	movs	r1, #0
   342a8:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   342aa:	687b      	ldr	r3, [r7, #4]
   342ac:	336c      	adds	r3, #108	; 0x6c
   342ae:	226c      	movs	r2, #108	; 0x6c
   342b0:	2100      	movs	r1, #0
   342b2:	0018      	movs	r0, r3
   342b4:	4b17      	ldr	r3, [pc, #92]	; (34314 <_http_client_clear_conn+0xc0>)
   342b6:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   342b8:	687b      	ldr	r3, [r7, #4]
   342ba:	33d8      	adds	r3, #216	; 0xd8
   342bc:	2210      	movs	r2, #16
   342be:	2100      	movs	r1, #0
   342c0:	0018      	movs	r0, r3
   342c2:	4b14      	ldr	r3, [pc, #80]	; (34314 <_http_client_clear_conn+0xc0>)
   342c4:	4798      	blx	r3
	module->req.state = STATE_INIT;
   342c6:	687b      	ldr	r3, [r7, #4]
   342c8:	2200      	movs	r2, #0
   342ca:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   342cc:	687b      	ldr	r3, [r7, #4]
   342ce:	22d8      	movs	r2, #216	; 0xd8
   342d0:	2100      	movs	r1, #0
   342d2:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   342d4:	687b      	ldr	r3, [r7, #4]
   342d6:	2241      	movs	r2, #65	; 0x41
   342d8:	5c99      	ldrb	r1, [r3, r2]
   342da:	2001      	movs	r0, #1
   342dc:	4381      	bics	r1, r0
   342de:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   342e0:	687b      	ldr	r3, [r7, #4]
   342e2:	2241      	movs	r2, #65	; 0x41
   342e4:	5c99      	ldrb	r1, [r3, r2]
   342e6:	2002      	movs	r0, #2
   342e8:	4381      	bics	r1, r0
   342ea:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   342ec:	230c      	movs	r3, #12
   342ee:	18fb      	adds	r3, r7, r3
   342f0:	683a      	ldr	r2, [r7, #0]
   342f2:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   342f4:	687b      	ldr	r3, [r7, #4]
   342f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   342f8:	2b00      	cmp	r3, #0
   342fa:	d006      	beq.n	3430a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   342fc:	687b      	ldr	r3, [r7, #4]
   342fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34300:	220c      	movs	r2, #12
   34302:	18ba      	adds	r2, r7, r2
   34304:	6878      	ldr	r0, [r7, #4]
   34306:	2104      	movs	r1, #4
   34308:	4798      	blx	r3
	}
}
   3430a:	46c0      	nop			; (mov r8, r8)
   3430c:	46bd      	mov	sp, r7
   3430e:	b006      	add	sp, #24
   34310:	bd80      	pop	{r7, pc}
   34312:	46c0      	nop			; (mov r8, r8)
   34314:	00038507 	.word	0x00038507
   34318:	00028b71 	.word	0x00028b71
   3431c:	20004614 	.word	0x20004614

00034320 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   34320:	b590      	push	{r4, r7, lr}
   34322:	b087      	sub	sp, #28
   34324:	af00      	add	r7, sp, #0
   34326:	60f8      	str	r0, [r7, #12]
   34328:	60b9      	str	r1, [r7, #8]
   3432a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   3432c:	68fb      	ldr	r3, [r7, #12]
   3432e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   34330:	697b      	ldr	r3, [r7, #20]
   34332:	2241      	movs	r2, #65	; 0x41
   34334:	5c99      	ldrb	r1, [r3, r2]
   34336:	2001      	movs	r0, #1
   34338:	4301      	orrs	r1, r0
   3433a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   3433c:	697b      	ldr	r3, [r7, #20]
   3433e:	2000      	movs	r0, #0
   34340:	5618      	ldrsb	r0, [r3, r0]
   34342:	687b      	ldr	r3, [r7, #4]
   34344:	b29a      	uxth	r2, r3
   34346:	68b9      	ldr	r1, [r7, #8]
   34348:	2300      	movs	r3, #0
   3434a:	4c14      	ldr	r4, [pc, #80]	; (3439c <_http_client_send_wait+0x7c>)
   3434c:	47a0      	blx	r4
   3434e:	0003      	movs	r3, r0
   34350:	613b      	str	r3, [r7, #16]
   34352:	693b      	ldr	r3, [r7, #16]
   34354:	2b00      	cmp	r3, #0
   34356:	da0f      	bge.n	34378 <_http_client_send_wait+0x58>
		module->sending = 0;
   34358:	697b      	ldr	r3, [r7, #20]
   3435a:	2241      	movs	r2, #65	; 0x41
   3435c:	5c99      	ldrb	r1, [r3, r2]
   3435e:	2001      	movs	r0, #1
   34360:	4381      	bics	r1, r0
   34362:	5499      	strb	r1, [r3, r2]
		return result;
   34364:	693b      	ldr	r3, [r7, #16]
   34366:	e014      	b.n	34392 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   34368:	2000      	movs	r0, #0
   3436a:	4b0d      	ldr	r3, [pc, #52]	; (343a0 <_http_client_send_wait+0x80>)
   3436c:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   3436e:	697b      	ldr	r3, [r7, #20]
   34370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   34372:	0018      	movs	r0, r3
   34374:	4b0b      	ldr	r3, [pc, #44]	; (343a4 <_http_client_send_wait+0x84>)
   34376:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   34378:	697b      	ldr	r3, [r7, #20]
   3437a:	2241      	movs	r2, #65	; 0x41
   3437c:	5c9b      	ldrb	r3, [r3, r2]
   3437e:	2201      	movs	r2, #1
   34380:	4013      	ands	r3, r2
   34382:	b2db      	uxtb	r3, r3
   34384:	2b00      	cmp	r3, #0
   34386:	d003      	beq.n	34390 <_http_client_send_wait+0x70>
   34388:	697b      	ldr	r3, [r7, #20]
   3438a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3438c:	2b02      	cmp	r3, #2
   3438e:	d8eb      	bhi.n	34368 <_http_client_send_wait+0x48>
	}

	return 0;
   34390:	2300      	movs	r3, #0
}
   34392:	0018      	movs	r0, r3
   34394:	46bd      	mov	sp, r7
   34396:	b007      	add	sp, #28
   34398:	bd90      	pop	{r4, r7, pc}
   3439a:	46c0      	nop			; (mov r8, r8)
   3439c:	0002888d 	.word	0x0002888d
   343a0:	00024f39 	.word	0x00024f39
   343a4:	0003562d 	.word	0x0003562d

000343a8 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   343a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   343aa:	46c6      	mov	lr, r8
   343ac:	b500      	push	{lr}
   343ae:	b0a0      	sub	sp, #128	; 0x80
   343b0:	af02      	add	r7, sp, #8
   343b2:	61f8      	str	r0, [r7, #28]
   343b4:	4668      	mov	r0, sp
   343b6:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   343b8:	2318      	movs	r3, #24
   343ba:	2218      	movs	r2, #24
   343bc:	18ba      	adds	r2, r7, r2
   343be:	18d0      	adds	r0, r2, r3
   343c0:	4bbd      	ldr	r3, [pc, #756]	; (346b8 <_http_client_request+0x310>)
   343c2:	469c      	mov	ip, r3
   343c4:	4663      	mov	r3, ip
   343c6:	cb16      	ldmia	r3!, {r1, r2, r4}
   343c8:	c016      	stmia	r0!, {r1, r2, r4}
   343ca:	469c      	mov	ip, r3
   343cc:	4663      	mov	r3, ip
   343ce:	681b      	ldr	r3, [r3, #0]
   343d0:	469c      	mov	ip, r3
   343d2:	4663      	mov	r3, ip
   343d4:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   343d6:	69f8      	ldr	r0, [r7, #28]
   343d8:	6e40      	ldr	r0, [r0, #100]	; 0x64
   343da:	4684      	mov	ip, r0
   343dc:	2301      	movs	r3, #1
   343de:	425b      	negs	r3, r3
   343e0:	4698      	mov	r8, r3
   343e2:	44c4      	add	ip, r8
   343e4:	4663      	mov	r3, ip
   343e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   343e8:	6038      	str	r0, [r7, #0]
   343ea:	2300      	movs	r3, #0
   343ec:	607b      	str	r3, [r7, #4]
   343ee:	6839      	ldr	r1, [r7, #0]
   343f0:	687a      	ldr	r2, [r7, #4]
   343f2:	000b      	movs	r3, r1
   343f4:	0f5b      	lsrs	r3, r3, #29
   343f6:	469c      	mov	ip, r3
   343f8:	0013      	movs	r3, r2
   343fa:	00db      	lsls	r3, r3, #3
   343fc:	617b      	str	r3, [r7, #20]
   343fe:	4663      	mov	r3, ip
   34400:	697c      	ldr	r4, [r7, #20]
   34402:	431c      	orrs	r4, r3
   34404:	617c      	str	r4, [r7, #20]
   34406:	000b      	movs	r3, r1
   34408:	00db      	lsls	r3, r3, #3
   3440a:	613b      	str	r3, [r7, #16]
   3440c:	0005      	movs	r5, r0
   3440e:	2200      	movs	r2, #0
   34410:	0016      	movs	r6, r2
   34412:	0f6a      	lsrs	r2, r5, #29
   34414:	00f3      	lsls	r3, r6, #3
   34416:	60fb      	str	r3, [r7, #12]
   34418:	68fb      	ldr	r3, [r7, #12]
   3441a:	4313      	orrs	r3, r2
   3441c:	60fb      	str	r3, [r7, #12]
   3441e:	00eb      	lsls	r3, r5, #3
   34420:	60bb      	str	r3, [r7, #8]
   34422:	1dc3      	adds	r3, r0, #7
   34424:	08db      	lsrs	r3, r3, #3
   34426:	00db      	lsls	r3, r3, #3
   34428:	466a      	mov	r2, sp
   3442a:	1ad3      	subs	r3, r2, r3
   3442c:	469d      	mov	sp, r3
   3442e:	ab02      	add	r3, sp, #8
   34430:	3300      	adds	r3, #0
   34432:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   34434:	69fb      	ldr	r3, [r7, #28]
   34436:	2b00      	cmp	r3, #0
   34438:	d100      	bne.n	3443c <_http_client_request+0x94>
   3443a:	e346      	b.n	34aca <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   3443c:	69fb      	ldr	r3, [r7, #28]
   3443e:	2241      	movs	r2, #65	; 0x41
   34440:	5c9b      	ldrb	r3, [r3, r2]
   34442:	2201      	movs	r2, #1
   34444:	4013      	ands	r3, r2
   34446:	b2db      	uxtb	r3, r3
   34448:	2b00      	cmp	r3, #0
   3444a:	d000      	beq.n	3444e <_http_client_request+0xa6>
   3444c:	e33f      	b.n	34ace <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   3444e:	69fb      	ldr	r3, [r7, #28]
   34450:	33b0      	adds	r3, #176	; 0xb0
   34452:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   34454:	69fb      	ldr	r3, [r7, #28]
   34456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   34458:	2b03      	cmp	r3, #3
   3445a:	d003      	beq.n	34464 <_http_client_request+0xbc>
   3445c:	2b04      	cmp	r3, #4
   3445e:	d100      	bne.n	34462 <_http_client_request+0xba>
   34460:	e1b3      	b.n	347ca <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   34462:	e32f      	b.n	34ac4 <_http_client_request+0x71c>
		module->req.content_length = 0;
   34464:	69fb      	ldr	r3, [r7, #28]
   34466:	22cc      	movs	r2, #204	; 0xcc
   34468:	2100      	movs	r1, #0
   3446a:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   3446c:	69fb      	ldr	r3, [r7, #28]
   3446e:	22d0      	movs	r2, #208	; 0xd0
   34470:	2100      	movs	r1, #0
   34472:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   34474:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   34476:	69fb      	ldr	r3, [r7, #28]
   34478:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   3447a:	4c90      	ldr	r4, [pc, #576]	; (346bc <_http_client_request+0x314>)
   3447c:	2334      	movs	r3, #52	; 0x34
   3447e:	2018      	movs	r0, #24
   34480:	1838      	adds	r0, r7, r0
   34482:	18c0      	adds	r0, r0, r3
   34484:	69fb      	ldr	r3, [r7, #28]
   34486:	9300      	str	r3, [sp, #0]
   34488:	0023      	movs	r3, r4
   3448a:	4c8d      	ldr	r4, [pc, #564]	; (346c0 <_http_client_request+0x318>)
   3448c:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   3448e:	69fb      	ldr	r3, [r7, #28]
   34490:	22c8      	movs	r2, #200	; 0xc8
   34492:	5c9b      	ldrb	r3, [r3, r2]
   34494:	2b01      	cmp	r3, #1
   34496:	d10a      	bne.n	344ae <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   34498:	498a      	ldr	r1, [pc, #552]	; (346c4 <_http_client_request+0x31c>)
   3449a:	2334      	movs	r3, #52	; 0x34
   3449c:	2218      	movs	r2, #24
   3449e:	4694      	mov	ip, r2
   344a0:	44bc      	add	ip, r7
   344a2:	4463      	add	r3, ip
   344a4:	2204      	movs	r2, #4
   344a6:	0018      	movs	r0, r3
   344a8:	4b87      	ldr	r3, [pc, #540]	; (346c8 <_http_client_request+0x320>)
   344aa:	4798      	blx	r3
   344ac:	e04e      	b.n	3454c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   344ae:	69fb      	ldr	r3, [r7, #28]
   344b0:	22c8      	movs	r2, #200	; 0xc8
   344b2:	5c9b      	ldrb	r3, [r3, r2]
   344b4:	2b02      	cmp	r3, #2
   344b6:	d10a      	bne.n	344ce <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   344b8:	4984      	ldr	r1, [pc, #528]	; (346cc <_http_client_request+0x324>)
   344ba:	2334      	movs	r3, #52	; 0x34
   344bc:	2218      	movs	r2, #24
   344be:	4694      	mov	ip, r2
   344c0:	44bc      	add	ip, r7
   344c2:	4463      	add	r3, ip
   344c4:	2205      	movs	r2, #5
   344c6:	0018      	movs	r0, r3
   344c8:	4b7f      	ldr	r3, [pc, #508]	; (346c8 <_http_client_request+0x320>)
   344ca:	4798      	blx	r3
   344cc:	e03e      	b.n	3454c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   344ce:	69fb      	ldr	r3, [r7, #28]
   344d0:	22c8      	movs	r2, #200	; 0xc8
   344d2:	5c9b      	ldrb	r3, [r3, r2]
   344d4:	2b03      	cmp	r3, #3
   344d6:	d10a      	bne.n	344ee <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   344d8:	497d      	ldr	r1, [pc, #500]	; (346d0 <_http_client_request+0x328>)
   344da:	2334      	movs	r3, #52	; 0x34
   344dc:	2218      	movs	r2, #24
   344de:	4694      	mov	ip, r2
   344e0:	44bc      	add	ip, r7
   344e2:	4463      	add	r3, ip
   344e4:	2207      	movs	r2, #7
   344e6:	0018      	movs	r0, r3
   344e8:	4b77      	ldr	r3, [pc, #476]	; (346c8 <_http_client_request+0x320>)
   344ea:	4798      	blx	r3
   344ec:	e02e      	b.n	3454c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   344ee:	69fb      	ldr	r3, [r7, #28]
   344f0:	22c8      	movs	r2, #200	; 0xc8
   344f2:	5c9b      	ldrb	r3, [r3, r2]
   344f4:	2b04      	cmp	r3, #4
   344f6:	d10a      	bne.n	3450e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   344f8:	4976      	ldr	r1, [pc, #472]	; (346d4 <_http_client_request+0x32c>)
   344fa:	2334      	movs	r3, #52	; 0x34
   344fc:	2218      	movs	r2, #24
   344fe:	4694      	mov	ip, r2
   34500:	44bc      	add	ip, r7
   34502:	4463      	add	r3, ip
   34504:	2204      	movs	r2, #4
   34506:	0018      	movs	r0, r3
   34508:	4b6f      	ldr	r3, [pc, #444]	; (346c8 <_http_client_request+0x320>)
   3450a:	4798      	blx	r3
   3450c:	e01e      	b.n	3454c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   3450e:	69fb      	ldr	r3, [r7, #28]
   34510:	22c8      	movs	r2, #200	; 0xc8
   34512:	5c9b      	ldrb	r3, [r3, r2]
   34514:	2b05      	cmp	r3, #5
   34516:	d10a      	bne.n	3452e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   34518:	496f      	ldr	r1, [pc, #444]	; (346d8 <_http_client_request+0x330>)
   3451a:	2334      	movs	r3, #52	; 0x34
   3451c:	2218      	movs	r2, #24
   3451e:	4694      	mov	ip, r2
   34520:	44bc      	add	ip, r7
   34522:	4463      	add	r3, ip
   34524:	2208      	movs	r2, #8
   34526:	0018      	movs	r0, r3
   34528:	4b67      	ldr	r3, [pc, #412]	; (346c8 <_http_client_request+0x320>)
   3452a:	4798      	blx	r3
   3452c:	e00e      	b.n	3454c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   3452e:	69fb      	ldr	r3, [r7, #28]
   34530:	22c8      	movs	r2, #200	; 0xc8
   34532:	5c9b      	ldrb	r3, [r3, r2]
   34534:	2b06      	cmp	r3, #6
   34536:	d109      	bne.n	3454c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   34538:	4968      	ldr	r1, [pc, #416]	; (346dc <_http_client_request+0x334>)
   3453a:	2334      	movs	r3, #52	; 0x34
   3453c:	2218      	movs	r2, #24
   3453e:	4694      	mov	ip, r2
   34540:	44bc      	add	ip, r7
   34542:	4463      	add	r3, ip
   34544:	2205      	movs	r2, #5
   34546:	0018      	movs	r0, r3
   34548:	4b5f      	ldr	r3, [pc, #380]	; (346c8 <_http_client_request+0x320>)
   3454a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   3454c:	69fb      	ldr	r3, [r7, #28]
   3454e:	3370      	adds	r3, #112	; 0x70
   34550:	001c      	movs	r4, r3
   34552:	69fb      	ldr	r3, [r7, #28]
   34554:	3370      	adds	r3, #112	; 0x70
   34556:	0018      	movs	r0, r3
   34558:	4b61      	ldr	r3, [pc, #388]	; (346e0 <_http_client_request+0x338>)
   3455a:	4798      	blx	r3
   3455c:	0002      	movs	r2, r0
   3455e:	2334      	movs	r3, #52	; 0x34
   34560:	2118      	movs	r1, #24
   34562:	468c      	mov	ip, r1
   34564:	44bc      	add	ip, r7
   34566:	4463      	add	r3, ip
   34568:	0021      	movs	r1, r4
   3456a:	0018      	movs	r0, r3
   3456c:	4b56      	ldr	r3, [pc, #344]	; (346c8 <_http_client_request+0x320>)
   3456e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   34570:	495c      	ldr	r1, [pc, #368]	; (346e4 <_http_client_request+0x33c>)
   34572:	2334      	movs	r3, #52	; 0x34
   34574:	2218      	movs	r2, #24
   34576:	4694      	mov	ip, r2
   34578:	44bc      	add	ip, r7
   3457a:	4463      	add	r3, ip
   3457c:	220b      	movs	r2, #11
   3457e:	0018      	movs	r0, r3
   34580:	4b51      	ldr	r3, [pc, #324]	; (346c8 <_http_client_request+0x320>)
   34582:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   34584:	4958      	ldr	r1, [pc, #352]	; (346e8 <_http_client_request+0x340>)
   34586:	2334      	movs	r3, #52	; 0x34
   34588:	2218      	movs	r2, #24
   3458a:	4694      	mov	ip, r2
   3458c:	44bc      	add	ip, r7
   3458e:	4463      	add	r3, ip
   34590:	220c      	movs	r2, #12
   34592:	0018      	movs	r0, r3
   34594:	4b4c      	ldr	r3, [pc, #304]	; (346c8 <_http_client_request+0x320>)
   34596:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   34598:	69fb      	ldr	r3, [r7, #28]
   3459a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   3459c:	69fb      	ldr	r3, [r7, #28]
   3459e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   345a0:	0018      	movs	r0, r3
   345a2:	4b4f      	ldr	r3, [pc, #316]	; (346e0 <_http_client_request+0x338>)
   345a4:	4798      	blx	r3
   345a6:	0002      	movs	r2, r0
   345a8:	2334      	movs	r3, #52	; 0x34
   345aa:	2118      	movs	r1, #24
   345ac:	468c      	mov	ip, r1
   345ae:	44bc      	add	ip, r7
   345b0:	4463      	add	r3, ip
   345b2:	0021      	movs	r1, r4
   345b4:	0018      	movs	r0, r3
   345b6:	4b44      	ldr	r3, [pc, #272]	; (346c8 <_http_client_request+0x320>)
   345b8:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   345ba:	494c      	ldr	r1, [pc, #304]	; (346ec <_http_client_request+0x344>)
   345bc:	2334      	movs	r3, #52	; 0x34
   345be:	2218      	movs	r2, #24
   345c0:	4694      	mov	ip, r2
   345c2:	44bc      	add	ip, r7
   345c4:	4463      	add	r3, ip
   345c6:	2202      	movs	r2, #2
   345c8:	0018      	movs	r0, r3
   345ca:	4b3f      	ldr	r3, [pc, #252]	; (346c8 <_http_client_request+0x320>)
   345cc:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   345ce:	4948      	ldr	r1, [pc, #288]	; (346f0 <_http_client_request+0x348>)
   345d0:	2334      	movs	r3, #52	; 0x34
   345d2:	2218      	movs	r2, #24
   345d4:	4694      	mov	ip, r2
   345d6:	44bc      	add	ip, r7
   345d8:	4463      	add	r3, ip
   345da:	2206      	movs	r2, #6
   345dc:	0018      	movs	r0, r3
   345de:	4b3a      	ldr	r3, [pc, #232]	; (346c8 <_http_client_request+0x320>)
   345e0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   345e2:	69fb      	ldr	r3, [r7, #28]
   345e4:	1c5c      	adds	r4, r3, #1
   345e6:	69fb      	ldr	r3, [r7, #28]
   345e8:	3301      	adds	r3, #1
   345ea:	0018      	movs	r0, r3
   345ec:	4b3c      	ldr	r3, [pc, #240]	; (346e0 <_http_client_request+0x338>)
   345ee:	4798      	blx	r3
   345f0:	0002      	movs	r2, r0
   345f2:	2334      	movs	r3, #52	; 0x34
   345f4:	2118      	movs	r1, #24
   345f6:	468c      	mov	ip, r1
   345f8:	44bc      	add	ip, r7
   345fa:	4463      	add	r3, ip
   345fc:	0021      	movs	r1, r4
   345fe:	0018      	movs	r0, r3
   34600:	4b31      	ldr	r3, [pc, #196]	; (346c8 <_http_client_request+0x320>)
   34602:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   34604:	4939      	ldr	r1, [pc, #228]	; (346ec <_http_client_request+0x344>)
   34606:	2334      	movs	r3, #52	; 0x34
   34608:	2218      	movs	r2, #24
   3460a:	4694      	mov	ip, r2
   3460c:	44bc      	add	ip, r7
   3460e:	4463      	add	r3, ip
   34610:	2202      	movs	r2, #2
   34612:	0018      	movs	r0, r3
   34614:	4b2c      	ldr	r3, [pc, #176]	; (346c8 <_http_client_request+0x320>)
   34616:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   34618:	4936      	ldr	r1, [pc, #216]	; (346f4 <_http_client_request+0x34c>)
   3461a:	2334      	movs	r3, #52	; 0x34
   3461c:	2218      	movs	r2, #24
   3461e:	4694      	mov	ip, r2
   34620:	44bc      	add	ip, r7
   34622:	4463      	add	r3, ip
   34624:	2218      	movs	r2, #24
   34626:	0018      	movs	r0, r3
   34628:	4b27      	ldr	r3, [pc, #156]	; (346c8 <_http_client_request+0x320>)
   3462a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   3462c:	4932      	ldr	r1, [pc, #200]	; (346f8 <_http_client_request+0x350>)
   3462e:	2334      	movs	r3, #52	; 0x34
   34630:	2218      	movs	r2, #24
   34632:	4694      	mov	ip, r2
   34634:	44bc      	add	ip, r7
   34636:	4463      	add	r3, ip
   34638:	2213      	movs	r2, #19
   3463a:	0018      	movs	r0, r3
   3463c:	4b22      	ldr	r3, [pc, #136]	; (346c8 <_http_client_request+0x320>)
   3463e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   34640:	492e      	ldr	r1, [pc, #184]	; (346fc <_http_client_request+0x354>)
   34642:	2334      	movs	r3, #52	; 0x34
   34644:	2218      	movs	r2, #24
   34646:	4694      	mov	ip, r2
   34648:	44bc      	add	ip, r7
   3464a:	4463      	add	r3, ip
   3464c:	2217      	movs	r2, #23
   3464e:	0018      	movs	r0, r3
   34650:	4b1d      	ldr	r3, [pc, #116]	; (346c8 <_http_client_request+0x320>)
   34652:	4798      	blx	r3
		if (entity->read != NULL) {
   34654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34656:	68db      	ldr	r3, [r3, #12]
   34658:	2b00      	cmp	r3, #0
   3465a:	d100      	bne.n	3465e <_http_client_request+0x2b6>
   3465c:	e088      	b.n	34770 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   3465e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34660:	781b      	ldrb	r3, [r3, #0]
   34662:	2b00      	cmp	r3, #0
   34664:	d00f      	beq.n	34686 <_http_client_request+0x2de>
				module->req.content_length = -1;
   34666:	69fb      	ldr	r3, [r7, #28]
   34668:	21cc      	movs	r1, #204	; 0xcc
   3466a:	2201      	movs	r2, #1
   3466c:	4252      	negs	r2, r2
   3466e:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   34670:	4923      	ldr	r1, [pc, #140]	; (34700 <_http_client_request+0x358>)
   34672:	2334      	movs	r3, #52	; 0x34
   34674:	2218      	movs	r2, #24
   34676:	4694      	mov	ip, r2
   34678:	44bc      	add	ip, r7
   3467a:	4463      	add	r3, ip
   3467c:	221c      	movs	r2, #28
   3467e:	0018      	movs	r0, r3
   34680:	4b11      	ldr	r3, [pc, #68]	; (346c8 <_http_client_request+0x320>)
   34682:	4798      	blx	r3
   34684:	e074      	b.n	34770 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   34686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34688:	689b      	ldr	r3, [r3, #8]
   3468a:	2b00      	cmp	r3, #0
   3468c:	d070      	beq.n	34770 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   3468e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34690:	689a      	ldr	r2, [r3, #8]
   34692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34694:	695b      	ldr	r3, [r3, #20]
   34696:	0018      	movs	r0, r3
   34698:	4790      	blx	r2
   3469a:	0001      	movs	r1, r0
   3469c:	69fb      	ldr	r3, [r7, #28]
   3469e:	22cc      	movs	r2, #204	; 0xcc
   346a0:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   346a2:	69fb      	ldr	r3, [r7, #28]
   346a4:	22cc      	movs	r2, #204	; 0xcc
   346a6:	589b      	ldr	r3, [r3, r2]
   346a8:	2b00      	cmp	r3, #0
   346aa:	da2b      	bge.n	34704 <_http_client_request+0x35c>
					module->req.content_length = 0;
   346ac:	69fb      	ldr	r3, [r7, #28]
   346ae:	22cc      	movs	r2, #204	; 0xcc
   346b0:	2100      	movs	r1, #0
   346b2:	5099      	str	r1, [r3, r2]
   346b4:	e05c      	b.n	34770 <_http_client_request+0x3c8>
   346b6:	46c0      	nop			; (mov r8, r8)
   346b8:	0003e32c 	.word	0x0003e32c
   346bc:	00034321 	.word	0x00034321
   346c0:	00035289 	.word	0x00035289
   346c4:	0003e250 	.word	0x0003e250
   346c8:	00035309 	.word	0x00035309
   346cc:	0003e258 	.word	0x0003e258
   346d0:	0003e260 	.word	0x0003e260
   346d4:	0003e268 	.word	0x0003e268
   346d8:	0003e270 	.word	0x0003e270
   346dc:	0003e27c 	.word	0x0003e27c
   346e0:	000388bf 	.word	0x000388bf
   346e4:	0003e284 	.word	0x0003e284
   346e8:	0003e290 	.word	0x0003e290
   346ec:	0003e2a0 	.word	0x0003e2a0
   346f0:	0003e2a4 	.word	0x0003e2a4
   346f4:	0003e2ac 	.word	0x0003e2ac
   346f8:	0003e2c8 	.word	0x0003e2c8
   346fc:	0003e2dc 	.word	0x0003e2dc
   34700:	0003e2f4 	.word	0x0003e2f4
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   34704:	69fb      	ldr	r3, [r7, #28]
   34706:	22cc      	movs	r2, #204	; 0xcc
   34708:	589b      	ldr	r3, [r3, r2]
   3470a:	001a      	movs	r2, r3
   3470c:	49e0      	ldr	r1, [pc, #896]	; (34a90 <_http_client_request+0x6e8>)
   3470e:	2328      	movs	r3, #40	; 0x28
   34710:	2018      	movs	r0, #24
   34712:	4684      	mov	ip, r0
   34714:	44bc      	add	ip, r7
   34716:	4463      	add	r3, ip
   34718:	0018      	movs	r0, r3
   3471a:	4bde      	ldr	r3, [pc, #888]	; (34a94 <_http_client_request+0x6ec>)
   3471c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   3471e:	49de      	ldr	r1, [pc, #888]	; (34a98 <_http_client_request+0x6f0>)
   34720:	2334      	movs	r3, #52	; 0x34
   34722:	2218      	movs	r2, #24
   34724:	4694      	mov	ip, r2
   34726:	44bc      	add	ip, r7
   34728:	4463      	add	r3, ip
   3472a:	2210      	movs	r2, #16
   3472c:	0018      	movs	r0, r3
   3472e:	4bdb      	ldr	r3, [pc, #876]	; (34a9c <_http_client_request+0x6f4>)
   34730:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   34732:	2328      	movs	r3, #40	; 0x28
   34734:	2218      	movs	r2, #24
   34736:	4694      	mov	ip, r2
   34738:	44bc      	add	ip, r7
   3473a:	4463      	add	r3, ip
   3473c:	0018      	movs	r0, r3
   3473e:	4bd8      	ldr	r3, [pc, #864]	; (34aa0 <_http_client_request+0x6f8>)
   34740:	4798      	blx	r3
   34742:	0002      	movs	r2, r0
   34744:	2328      	movs	r3, #40	; 0x28
   34746:	2118      	movs	r1, #24
   34748:	1879      	adds	r1, r7, r1
   3474a:	18c9      	adds	r1, r1, r3
   3474c:	2334      	movs	r3, #52	; 0x34
   3474e:	2018      	movs	r0, #24
   34750:	4684      	mov	ip, r0
   34752:	44bc      	add	ip, r7
   34754:	4463      	add	r3, ip
   34756:	0018      	movs	r0, r3
   34758:	4bd0      	ldr	r3, [pc, #832]	; (34a9c <_http_client_request+0x6f4>)
   3475a:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3475c:	49d1      	ldr	r1, [pc, #836]	; (34aa4 <_http_client_request+0x6fc>)
   3475e:	2334      	movs	r3, #52	; 0x34
   34760:	2218      	movs	r2, #24
   34762:	4694      	mov	ip, r2
   34764:	44bc      	add	ip, r7
   34766:	4463      	add	r3, ip
   34768:	2202      	movs	r2, #2
   3476a:	0018      	movs	r0, r3
   3476c:	4bcb      	ldr	r3, [pc, #812]	; (34a9c <_http_client_request+0x6f4>)
   3476e:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   34770:	69fb      	ldr	r3, [r7, #28]
   34772:	22d4      	movs	r2, #212	; 0xd4
   34774:	589b      	ldr	r3, [r3, r2]
   34776:	2b00      	cmp	r3, #0
   34778:	d012      	beq.n	347a0 <_http_client_request+0x3f8>
				module->req.ext_header,
   3477a:	69fb      	ldr	r3, [r7, #28]
   3477c:	22d4      	movs	r2, #212	; 0xd4
   3477e:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   34780:	69fb      	ldr	r3, [r7, #28]
   34782:	22d4      	movs	r2, #212	; 0xd4
   34784:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   34786:	0018      	movs	r0, r3
   34788:	4bc5      	ldr	r3, [pc, #788]	; (34aa0 <_http_client_request+0x6f8>)
   3478a:	4798      	blx	r3
   3478c:	0002      	movs	r2, r0
   3478e:	2334      	movs	r3, #52	; 0x34
   34790:	2118      	movs	r1, #24
   34792:	468c      	mov	ip, r1
   34794:	44bc      	add	ip, r7
   34796:	4463      	add	r3, ip
   34798:	0021      	movs	r1, r4
   3479a:	0018      	movs	r0, r3
   3479c:	4bbf      	ldr	r3, [pc, #764]	; (34a9c <_http_client_request+0x6f4>)
   3479e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   347a0:	49c0      	ldr	r1, [pc, #768]	; (34aa4 <_http_client_request+0x6fc>)
   347a2:	2334      	movs	r3, #52	; 0x34
   347a4:	2218      	movs	r2, #24
   347a6:	4694      	mov	ip, r2
   347a8:	44bc      	add	ip, r7
   347aa:	4463      	add	r3, ip
   347ac:	2202      	movs	r2, #2
   347ae:	0018      	movs	r0, r3
   347b0:	4bba      	ldr	r3, [pc, #744]	; (34a9c <_http_client_request+0x6f4>)
   347b2:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   347b4:	2334      	movs	r3, #52	; 0x34
   347b6:	2218      	movs	r2, #24
   347b8:	4694      	mov	ip, r2
   347ba:	44bc      	add	ip, r7
   347bc:	4463      	add	r3, ip
   347be:	0018      	movs	r0, r3
   347c0:	4bb9      	ldr	r3, [pc, #740]	; (34aa8 <_http_client_request+0x700>)
   347c2:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   347c4:	69fb      	ldr	r3, [r7, #28]
   347c6:	2204      	movs	r2, #4
   347c8:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   347ca:	69fb      	ldr	r3, [r7, #28]
   347cc:	22cc      	movs	r2, #204	; 0xcc
   347ce:	589b      	ldr	r3, [r3, r2]
   347d0:	2b00      	cmp	r3, #0
   347d2:	db00      	blt.n	347d6 <_http_client_request+0x42e>
   347d4:	e0c6      	b.n	34964 <_http_client_request+0x5bc>
   347d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   347d8:	68db      	ldr	r3, [r3, #12]
   347da:	2b00      	cmp	r3, #0
   347dc:	d100      	bne.n	347e0 <_http_client_request+0x438>
   347de:	e0c1      	b.n	34964 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   347e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   347e2:	68dc      	ldr	r4, [r3, #12]
   347e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   347e6:	6958      	ldr	r0, [r3, #20]
   347e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   347ea:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   347ec:	69fb      	ldr	r3, [r7, #28]
   347ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   347f0:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   347f2:	69fb      	ldr	r3, [r7, #28]
   347f4:	22d0      	movs	r2, #208	; 0xd0
   347f6:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   347f8:	002a      	movs	r2, r5
   347fa:	47a0      	blx	r4
   347fc:	0003      	movs	r3, r0
   347fe:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   34800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34802:	2b00      	cmp	r3, #0
   34804:	da01      	bge.n	3480a <_http_client_request+0x462>
				size = 0;
   34806:	2300      	movs	r3, #0
   34808:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   3480a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3480c:	220a      	movs	r2, #10
   3480e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   34810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   34812:	220d      	movs	r2, #13
   34814:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   34816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34818:	3305      	adds	r3, #5
   3481a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3481c:	210d      	movs	r1, #13
   3481e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   34820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34822:	3306      	adds	r3, #6
   34824:	6eba      	ldr	r2, [r7, #104]	; 0x68
   34826:	210a      	movs	r1, #10
   34828:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   3482a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3482c:	2b00      	cmp	r3, #0
   3482e:	db14      	blt.n	3485a <_http_client_request+0x4b2>
				ptr = buffer + 2;
   34830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   34832:	3302      	adds	r3, #2
   34834:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   34836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34838:	4a9c      	ldr	r2, [pc, #624]	; (34aac <_http_client_request+0x704>)
   3483a:	4013      	ands	r3, r2
   3483c:	d504      	bpl.n	34848 <_http_client_request+0x4a0>
   3483e:	3b01      	subs	r3, #1
   34840:	2210      	movs	r2, #16
   34842:	4252      	negs	r2, r2
   34844:	4313      	orrs	r3, r2
   34846:	3301      	adds	r3, #1
   34848:	001a      	movs	r2, r3
   3484a:	2318      	movs	r3, #24
   3484c:	2118      	movs	r1, #24
   3484e:	468c      	mov	ip, r1
   34850:	44bc      	add	ip, r7
   34852:	4463      	add	r3, ip
   34854:	5c9a      	ldrb	r2, [r3, r2]
   34856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   34858:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   3485a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3485c:	2b0f      	cmp	r3, #15
   3485e:	dd19      	ble.n	34894 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   34860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   34862:	3301      	adds	r3, #1
   34864:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   34866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34868:	2b00      	cmp	r3, #0
   3486a:	da00      	bge.n	3486e <_http_client_request+0x4c6>
   3486c:	330f      	adds	r3, #15
   3486e:	111b      	asrs	r3, r3, #4
   34870:	001a      	movs	r2, r3
   34872:	4b8e      	ldr	r3, [pc, #568]	; (34aac <_http_client_request+0x704>)
   34874:	4013      	ands	r3, r2
   34876:	d504      	bpl.n	34882 <_http_client_request+0x4da>
   34878:	3b01      	subs	r3, #1
   3487a:	2210      	movs	r2, #16
   3487c:	4252      	negs	r2, r2
   3487e:	4313      	orrs	r3, r2
   34880:	3301      	adds	r3, #1
   34882:	001a      	movs	r2, r3
   34884:	2318      	movs	r3, #24
   34886:	2118      	movs	r1, #24
   34888:	468c      	mov	ip, r1
   3488a:	44bc      	add	ip, r7
   3488c:	4463      	add	r3, ip
   3488e:	5c9a      	ldrb	r2, [r3, r2]
   34890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   34892:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   34894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34896:	2bff      	cmp	r3, #255	; 0xff
   34898:	dd18      	ble.n	348cc <_http_client_request+0x524>
				ptr = buffer;
   3489a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3489c:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   3489e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   348a0:	2b00      	cmp	r3, #0
   348a2:	da00      	bge.n	348a6 <_http_client_request+0x4fe>
   348a4:	33ff      	adds	r3, #255	; 0xff
   348a6:	121b      	asrs	r3, r3, #8
   348a8:	001a      	movs	r2, r3
   348aa:	4b80      	ldr	r3, [pc, #512]	; (34aac <_http_client_request+0x704>)
   348ac:	4013      	ands	r3, r2
   348ae:	d504      	bpl.n	348ba <_http_client_request+0x512>
   348b0:	3b01      	subs	r3, #1
   348b2:	2210      	movs	r2, #16
   348b4:	4252      	negs	r2, r2
   348b6:	4313      	orrs	r3, r2
   348b8:	3301      	adds	r3, #1
   348ba:	001a      	movs	r2, r3
   348bc:	2318      	movs	r3, #24
   348be:	2118      	movs	r1, #24
   348c0:	468c      	mov	ip, r1
   348c2:	44bc      	add	ip, r7
   348c4:	4463      	add	r3, ip
   348c6:	5c9a      	ldrb	r2, [r3, r2]
   348c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   348ca:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   348cc:	69fb      	ldr	r3, [r7, #28]
   348ce:	2000      	movs	r0, #0
   348d0:	5618      	ldrsb	r0, [r3, r0]
   348d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   348d4:	3303      	adds	r3, #3
   348d6:	001a      	movs	r2, r3
   348d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   348da:	1ad3      	subs	r3, r2, r3
   348dc:	b29a      	uxth	r2, r3
   348de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   348e0:	b29b      	uxth	r3, r3
   348e2:	18d3      	adds	r3, r2, r3
   348e4:	b29b      	uxth	r3, r3
   348e6:	3304      	adds	r3, #4
   348e8:	b29a      	uxth	r2, r3
   348ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
   348ec:	2300      	movs	r3, #0
   348ee:	4c70      	ldr	r4, [pc, #448]	; (34ab0 <_http_client_request+0x708>)
   348f0:	47a0      	blx	r4
   348f2:	0003      	movs	r3, r0
   348f4:	663b      	str	r3, [r7, #96]	; 0x60
   348f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   348f8:	2b00      	cmp	r3, #0
   348fa:	da07      	bge.n	3490c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   348fc:	2305      	movs	r3, #5
   348fe:	425a      	negs	r2, r3
   34900:	69fb      	ldr	r3, [r7, #28]
   34902:	0011      	movs	r1, r2
   34904:	0018      	movs	r0, r3
   34906:	4b6b      	ldr	r3, [pc, #428]	; (34ab4 <_http_client_request+0x70c>)
   34908:	4798      	blx	r3
				return;
   3490a:	e0e1      	b.n	34ad0 <_http_client_request+0x728>
			module->req.sent_length += size;
   3490c:	69fb      	ldr	r3, [r7, #28]
   3490e:	22d0      	movs	r2, #208	; 0xd0
   34910:	589a      	ldr	r2, [r3, r2]
   34912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34914:	18d2      	adds	r2, r2, r3
   34916:	69fb      	ldr	r3, [r7, #28]
   34918:	21d0      	movs	r1, #208	; 0xd0
   3491a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   3491c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3491e:	2b00      	cmp	r3, #0
   34920:	d000      	beq.n	34924 <_http_client_request+0x57c>
   34922:	e0c9      	b.n	34ab8 <_http_client_request+0x710>
				if (module->req.entity.close) {
   34924:	69fb      	ldr	r3, [r7, #28]
   34926:	22c0      	movs	r2, #192	; 0xc0
   34928:	589b      	ldr	r3, [r3, r2]
   3492a:	2b00      	cmp	r3, #0
   3492c:	d007      	beq.n	3493e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   3492e:	69fb      	ldr	r3, [r7, #28]
   34930:	22c0      	movs	r2, #192	; 0xc0
   34932:	589b      	ldr	r3, [r3, r2]
   34934:	69fa      	ldr	r2, [r7, #28]
   34936:	21c4      	movs	r1, #196	; 0xc4
   34938:	5852      	ldr	r2, [r2, r1]
   3493a:	0010      	movs	r0, r2
   3493c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3493e:	69fb      	ldr	r3, [r7, #28]
   34940:	2202      	movs	r2, #2
   34942:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   34944:	69fb      	ldr	r3, [r7, #28]
   34946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34948:	2b00      	cmp	r3, #0
   3494a:	d100      	bne.n	3494e <_http_client_request+0x5a6>
   3494c:	e0b5      	b.n	34aba <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3494e:	69fb      	ldr	r3, [r7, #28]
   34950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34952:	220c      	movs	r2, #12
   34954:	2118      	movs	r1, #24
   34956:	468c      	mov	ip, r1
   34958:	44bc      	add	ip, r7
   3495a:	4462      	add	r2, ip
   3495c:	69f8      	ldr	r0, [r7, #28]
   3495e:	2101      	movs	r1, #1
   34960:	4798      	blx	r3
				break;
   34962:	e0aa      	b.n	34aba <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   34964:	69fb      	ldr	r3, [r7, #28]
   34966:	22cc      	movs	r2, #204	; 0xcc
   34968:	589b      	ldr	r3, [r3, r2]
   3496a:	2b00      	cmp	r3, #0
   3496c:	dc00      	bgt.n	34970 <_http_client_request+0x5c8>
   3496e:	e07c      	b.n	34a6a <_http_client_request+0x6c2>
   34970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   34972:	68db      	ldr	r3, [r3, #12]
   34974:	2b00      	cmp	r3, #0
   34976:	d100      	bne.n	3497a <_http_client_request+0x5d2>
   34978:	e077      	b.n	34a6a <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   3497a:	69fb      	ldr	r3, [r7, #28]
   3497c:	22d0      	movs	r2, #208	; 0xd0
   3497e:	589a      	ldr	r2, [r3, r2]
   34980:	69fb      	ldr	r3, [r7, #28]
   34982:	21cc      	movs	r1, #204	; 0xcc
   34984:	585b      	ldr	r3, [r3, r1]
   34986:	429a      	cmp	r2, r3
   34988:	db1f      	blt.n	349ca <_http_client_request+0x622>
				if (module->req.entity.close) {
   3498a:	69fb      	ldr	r3, [r7, #28]
   3498c:	22c0      	movs	r2, #192	; 0xc0
   3498e:	589b      	ldr	r3, [r3, r2]
   34990:	2b00      	cmp	r3, #0
   34992:	d007      	beq.n	349a4 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   34994:	69fb      	ldr	r3, [r7, #28]
   34996:	22c0      	movs	r2, #192	; 0xc0
   34998:	589b      	ldr	r3, [r3, r2]
   3499a:	69fa      	ldr	r2, [r7, #28]
   3499c:	21c4      	movs	r1, #196	; 0xc4
   3499e:	5852      	ldr	r2, [r2, r1]
   349a0:	0010      	movs	r0, r2
   349a2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   349a4:	69fb      	ldr	r3, [r7, #28]
   349a6:	2202      	movs	r2, #2
   349a8:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   349aa:	69fb      	ldr	r3, [r7, #28]
   349ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   349ae:	2b00      	cmp	r3, #0
   349b0:	d100      	bne.n	349b4 <_http_client_request+0x60c>
   349b2:	e084      	b.n	34abe <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   349b4:	69fb      	ldr	r3, [r7, #28]
   349b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   349b8:	220c      	movs	r2, #12
   349ba:	2118      	movs	r1, #24
   349bc:	468c      	mov	ip, r1
   349be:	44bc      	add	ip, r7
   349c0:	4462      	add	r2, ip
   349c2:	69f8      	ldr	r0, [r7, #28]
   349c4:	2101      	movs	r1, #1
   349c6:	4798      	blx	r3
				break;
   349c8:	e079      	b.n	34abe <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   349ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   349cc:	68dc      	ldr	r4, [r3, #12]
   349ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   349d0:	6958      	ldr	r0, [r3, #20]
   349d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   349d4:	69fb      	ldr	r3, [r7, #28]
   349d6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   349d8:	69fb      	ldr	r3, [r7, #28]
   349da:	22d0      	movs	r2, #208	; 0xd0
   349dc:	589b      	ldr	r3, [r3, r2]
   349de:	002a      	movs	r2, r5
   349e0:	47a0      	blx	r4
   349e2:	0003      	movs	r3, r0
   349e4:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   349e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   349e8:	2b00      	cmp	r3, #0
   349ea:	da0d      	bge.n	34a08 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   349ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   349ee:	2b00      	cmp	r3, #0
   349f0:	d102      	bne.n	349f8 <_http_client_request+0x650>
   349f2:	234d      	movs	r3, #77	; 0x4d
   349f4:	425b      	negs	r3, r3
   349f6:	e001      	b.n	349fc <_http_client_request+0x654>
   349f8:	2305      	movs	r3, #5
   349fa:	425b      	negs	r3, r3
   349fc:	69fa      	ldr	r2, [r7, #28]
   349fe:	0019      	movs	r1, r3
   34a00:	0010      	movs	r0, r2
   34a02:	4b2c      	ldr	r3, [pc, #176]	; (34ab4 <_http_client_request+0x70c>)
   34a04:	4798      	blx	r3
			if (size < 0) {
   34a06:	e057      	b.n	34ab8 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   34a08:	69fb      	ldr	r3, [r7, #28]
   34a0a:	22cc      	movs	r2, #204	; 0xcc
   34a0c:	589a      	ldr	r2, [r3, r2]
   34a0e:	69fb      	ldr	r3, [r7, #28]
   34a10:	21d0      	movs	r1, #208	; 0xd0
   34a12:	585b      	ldr	r3, [r3, r1]
   34a14:	1ad2      	subs	r2, r2, r3
   34a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34a18:	429a      	cmp	r2, r3
   34a1a:	da07      	bge.n	34a2c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   34a1c:	69fb      	ldr	r3, [r7, #28]
   34a1e:	22cc      	movs	r2, #204	; 0xcc
   34a20:	589a      	ldr	r2, [r3, r2]
   34a22:	69fb      	ldr	r3, [r7, #28]
   34a24:	21d0      	movs	r1, #208	; 0xd0
   34a26:	585b      	ldr	r3, [r3, r1]
   34a28:	1ad3      	subs	r3, r2, r3
   34a2a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   34a2c:	69fb      	ldr	r3, [r7, #28]
   34a2e:	2000      	movs	r0, #0
   34a30:	5618      	ldrsb	r0, [r3, r0]
   34a32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   34a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34a36:	b29a      	uxth	r2, r3
   34a38:	2300      	movs	r3, #0
   34a3a:	4c1d      	ldr	r4, [pc, #116]	; (34ab0 <_http_client_request+0x708>)
   34a3c:	47a0      	blx	r4
   34a3e:	0003      	movs	r3, r0
   34a40:	663b      	str	r3, [r7, #96]	; 0x60
   34a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   34a44:	2b00      	cmp	r3, #0
   34a46:	da07      	bge.n	34a58 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   34a48:	2305      	movs	r3, #5
   34a4a:	425a      	negs	r2, r3
   34a4c:	69fb      	ldr	r3, [r7, #28]
   34a4e:	0011      	movs	r1, r2
   34a50:	0018      	movs	r0, r3
   34a52:	4b18      	ldr	r3, [pc, #96]	; (34ab4 <_http_client_request+0x70c>)
   34a54:	4798      	blx	r3
					return;
   34a56:	e03b      	b.n	34ad0 <_http_client_request+0x728>
				module->req.sent_length += size;
   34a58:	69fb      	ldr	r3, [r7, #28]
   34a5a:	22d0      	movs	r2, #208	; 0xd0
   34a5c:	589a      	ldr	r2, [r3, r2]
   34a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   34a60:	18d2      	adds	r2, r2, r3
   34a62:	69fb      	ldr	r3, [r7, #28]
   34a64:	21d0      	movs	r1, #208	; 0xd0
   34a66:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   34a68:	e026      	b.n	34ab8 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   34a6a:	69fb      	ldr	r3, [r7, #28]
   34a6c:	2202      	movs	r2, #2
   34a6e:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   34a70:	69fb      	ldr	r3, [r7, #28]
   34a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34a74:	2b00      	cmp	r3, #0
   34a76:	d024      	beq.n	34ac2 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   34a78:	69fb      	ldr	r3, [r7, #28]
   34a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34a7c:	220c      	movs	r2, #12
   34a7e:	2118      	movs	r1, #24
   34a80:	468c      	mov	ip, r1
   34a82:	44bc      	add	ip, r7
   34a84:	4462      	add	r2, ip
   34a86:	69f8      	ldr	r0, [r7, #28]
   34a88:	2101      	movs	r1, #1
   34a8a:	4798      	blx	r3
			break;
   34a8c:	e019      	b.n	34ac2 <_http_client_request+0x71a>
   34a8e:	46c0      	nop			; (mov r8, r8)
   34a90:	0003e314 	.word	0x0003e314
   34a94:	000387c5 	.word	0x000387c5
   34a98:	0003e318 	.word	0x0003e318
   34a9c:	00035309 	.word	0x00035309
   34aa0:	000388bf 	.word	0x000388bf
   34aa4:	0003e2a0 	.word	0x0003e2a0
   34aa8:	00035345 	.word	0x00035345
   34aac:	8000000f 	.word	0x8000000f
   34ab0:	0002888d 	.word	0x0002888d
   34ab4:	00034255 	.word	0x00034255
		break;
   34ab8:	e004      	b.n	34ac4 <_http_client_request+0x71c>
				break;
   34aba:	46c0      	nop			; (mov r8, r8)
   34abc:	e002      	b.n	34ac4 <_http_client_request+0x71c>
				break;
   34abe:	46c0      	nop			; (mov r8, r8)
   34ac0:	e000      	b.n	34ac4 <_http_client_request+0x71c>
			break;
   34ac2:	46c0      	nop			; (mov r8, r8)
   34ac4:	69bb      	ldr	r3, [r7, #24]
   34ac6:	469d      	mov	sp, r3
   34ac8:	e004      	b.n	34ad4 <_http_client_request+0x72c>
		return;
   34aca:	46c0      	nop			; (mov r8, r8)
   34acc:	e000      	b.n	34ad0 <_http_client_request+0x728>
		return;
   34ace:	46c0      	nop			; (mov r8, r8)
   34ad0:	69bb      	ldr	r3, [r7, #24]
   34ad2:	469d      	mov	sp, r3
	}
}
   34ad4:	46bd      	mov	sp, r7
   34ad6:	b01e      	add	sp, #120	; 0x78
   34ad8:	bc04      	pop	{r2}
   34ada:	4690      	mov	r8, r2
   34adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34ade:	46c0      	nop			; (mov r8, r8)

00034ae0 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   34ae0:	b590      	push	{r4, r7, lr}
   34ae2:	b083      	sub	sp, #12
   34ae4:	af00      	add	r7, sp, #0
   34ae6:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   34ae8:	687b      	ldr	r3, [r7, #4]
   34aea:	2b00      	cmp	r3, #0
   34aec:	d021      	beq.n	34b32 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   34aee:	687b      	ldr	r3, [r7, #4]
   34af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   34af2:	687b      	ldr	r3, [r7, #4]
   34af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34af6:	429a      	cmp	r2, r3
   34af8:	d307      	bcc.n	34b0a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   34afa:	238b      	movs	r3, #139	; 0x8b
   34afc:	425a      	negs	r2, r3
   34afe:	687b      	ldr	r3, [r7, #4]
   34b00:	0011      	movs	r1, r2
   34b02:	0018      	movs	r0, r3
   34b04:	4b0d      	ldr	r3, [pc, #52]	; (34b3c <_http_client_recv_packet+0x5c>)
   34b06:	4798      	blx	r3
		return;
   34b08:	e014      	b.n	34b34 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   34b0a:	687b      	ldr	r3, [r7, #4]
   34b0c:	2000      	movs	r0, #0
   34b0e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   34b10:	687b      	ldr	r3, [r7, #4]
   34b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   34b14:	687b      	ldr	r3, [r7, #4]
   34b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34b18:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   34b1a:	687b      	ldr	r3, [r7, #4]
   34b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   34b1e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   34b20:	687b      	ldr	r3, [r7, #4]
   34b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   34b24:	b29b      	uxth	r3, r3
   34b26:	1ad3      	subs	r3, r2, r3
   34b28:	b29a      	uxth	r2, r3
   34b2a:	2300      	movs	r3, #0
   34b2c:	4c04      	ldr	r4, [pc, #16]	; (34b40 <_http_client_recv_packet+0x60>)
   34b2e:	47a0      	blx	r4
   34b30:	e000      	b.n	34b34 <_http_client_recv_packet+0x54>
		return;
   34b32:	46c0      	nop			; (mov r8, r8)
}
   34b34:	46bd      	mov	sp, r7
   34b36:	b003      	add	sp, #12
   34b38:	bd90      	pop	{r4, r7, pc}
   34b3a:	46c0      	nop			; (mov r8, r8)
   34b3c:	00034255 	.word	0x00034255
   34b40:	000289f1 	.word	0x000289f1

00034b44 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   34b44:	b580      	push	{r7, lr}
   34b46:	b082      	sub	sp, #8
   34b48:	af00      	add	r7, sp, #0
   34b4a:	6078      	str	r0, [r7, #4]
   34b4c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   34b4e:	687b      	ldr	r3, [r7, #4]
   34b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   34b52:	683b      	ldr	r3, [r7, #0]
   34b54:	18d2      	adds	r2, r2, r3
   34b56:	687b      	ldr	r3, [r7, #4]
   34b58:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   34b5a:	687b      	ldr	r3, [r7, #4]
   34b5c:	2258      	movs	r2, #88	; 0x58
   34b5e:	5a9b      	ldrh	r3, [r3, r2]
   34b60:	2b00      	cmp	r3, #0
   34b62:	d007      	beq.n	34b74 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   34b64:	687b      	ldr	r3, [r7, #4]
   34b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   34b68:	687b      	ldr	r3, [r7, #4]
   34b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   34b6c:	0019      	movs	r1, r3
   34b6e:	0010      	movs	r0, r2
   34b70:	4b06      	ldr	r3, [pc, #24]	; (34b8c <_http_client_recved_packet+0x48>)
   34b72:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   34b74:	46c0      	nop			; (mov r8, r8)
   34b76:	687b      	ldr	r3, [r7, #4]
   34b78:	0018      	movs	r0, r3
   34b7a:	4b05      	ldr	r3, [pc, #20]	; (34b90 <_http_client_recved_packet+0x4c>)
   34b7c:	4798      	blx	r3
   34b7e:	1e03      	subs	r3, r0, #0
   34b80:	d1f9      	bne.n	34b76 <_http_client_recved_packet+0x32>
}
   34b82:	46c0      	nop			; (mov r8, r8)
   34b84:	46bd      	mov	sp, r7
   34b86:	b002      	add	sp, #8
   34b88:	bd80      	pop	{r7, pc}
   34b8a:	46c0      	nop			; (mov r8, r8)
   34b8c:	00035601 	.word	0x00035601
   34b90:	00034b95 	.word	0x00034b95

00034b94 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   34b94:	b580      	push	{r7, lr}
   34b96:	b082      	sub	sp, #8
   34b98:	af00      	add	r7, sp, #0
   34b9a:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   34b9c:	687b      	ldr	r3, [r7, #4]
   34b9e:	22d8      	movs	r2, #216	; 0xd8
   34ba0:	589b      	ldr	r3, [r3, r2]
   34ba2:	2b00      	cmp	r3, #0
   34ba4:	d002      	beq.n	34bac <_http_client_handle_response+0x18>
   34ba6:	2b01      	cmp	r3, #1
   34ba8:	d006      	beq.n	34bb8 <_http_client_handle_response+0x24>
   34baa:	e00b      	b.n	34bc4 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   34bac:	687b      	ldr	r3, [r7, #4]
   34bae:	0018      	movs	r0, r3
   34bb0:	4b07      	ldr	r3, [pc, #28]	; (34bd0 <_http_client_handle_response+0x3c>)
   34bb2:	4798      	blx	r3
   34bb4:	0003      	movs	r3, r0
   34bb6:	e006      	b.n	34bc6 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   34bb8:	687b      	ldr	r3, [r7, #4]
   34bba:	0018      	movs	r0, r3
   34bbc:	4b05      	ldr	r3, [pc, #20]	; (34bd4 <_http_client_handle_response+0x40>)
   34bbe:	4798      	blx	r3
   34bc0:	0003      	movs	r3, r0
   34bc2:	e000      	b.n	34bc6 <_http_client_handle_response+0x32>
	}
	return 0;
   34bc4:	2300      	movs	r3, #0
}
   34bc6:	0018      	movs	r0, r3
   34bc8:	46bd      	mov	sp, r7
   34bca:	b002      	add	sp, #8
   34bcc:	bd80      	pop	{r7, pc}
   34bce:	46c0      	nop			; (mov r8, r8)
   34bd0:	00034bd9 	.word	0x00034bd9
   34bd4:	00035091 	.word	0x00035091

00034bd8 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   34bd8:	b590      	push	{r4, r7, lr}
   34bda:	b08b      	sub	sp, #44	; 0x2c
   34bdc:	af00      	add	r7, sp, #0
   34bde:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   34be0:	687b      	ldr	r3, [r7, #4]
   34be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34be4:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   34be6:	4b9a      	ldr	r3, [pc, #616]	; (34e50 <_http_client_handle_header+0x278>)
   34be8:	681a      	ldr	r2, [r3, #0]
   34bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34bec:	0011      	movs	r1, r2
   34bee:	0018      	movs	r0, r3
   34bf0:	4b98      	ldr	r3, [pc, #608]	; (34e54 <_http_client_handle_header+0x27c>)
   34bf2:	4798      	blx	r3
   34bf4:	0003      	movs	r3, r0
   34bf6:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   34bf8:	69bb      	ldr	r3, [r7, #24]
   34bfa:	2b00      	cmp	r3, #0
   34bfc:	d007      	beq.n	34c0e <_http_client_handle_header+0x36>
   34bfe:	687b      	ldr	r3, [r7, #4]
   34c00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   34c02:	687b      	ldr	r3, [r7, #4]
   34c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34c06:	18d2      	adds	r2, r2, r3
   34c08:	69bb      	ldr	r3, [r7, #24]
   34c0a:	429a      	cmp	r2, r3
   34c0c:	d807      	bhi.n	34c1e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   34c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   34c10:	687b      	ldr	r3, [r7, #4]
   34c12:	0011      	movs	r1, r2
   34c14:	0018      	movs	r0, r3
   34c16:	4b90      	ldr	r3, [pc, #576]	; (34e58 <_http_client_handle_header+0x280>)
   34c18:	4798      	blx	r3
			return 0;
   34c1a:	2300      	movs	r3, #0
   34c1c:	e114      	b.n	34e48 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   34c1e:	4b8c      	ldr	r3, [pc, #560]	; (34e50 <_http_client_handle_header+0x278>)
   34c20:	681c      	ldr	r4, [r3, #0]
   34c22:	4b8b      	ldr	r3, [pc, #556]	; (34e50 <_http_client_handle_header+0x278>)
   34c24:	681b      	ldr	r3, [r3, #0]
   34c26:	0018      	movs	r0, r3
   34c28:	4b8c      	ldr	r3, [pc, #560]	; (34e5c <_http_client_handle_header+0x284>)
   34c2a:	4798      	blx	r3
   34c2c:	0002      	movs	r2, r0
   34c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34c30:	0021      	movs	r1, r4
   34c32:	0018      	movs	r0, r3
   34c34:	4b8a      	ldr	r3, [pc, #552]	; (34e60 <_http_client_handle_header+0x288>)
   34c36:	4798      	blx	r3
   34c38:	1e03      	subs	r3, r0, #0
   34c3a:	d15d      	bne.n	34cf8 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   34c3c:	4b84      	ldr	r3, [pc, #528]	; (34e50 <_http_client_handle_header+0x278>)
   34c3e:	681b      	ldr	r3, [r3, #0]
   34c40:	0018      	movs	r0, r3
   34c42:	4b86      	ldr	r3, [pc, #536]	; (34e5c <_http_client_handle_header+0x284>)
   34c44:	4798      	blx	r3
   34c46:	0002      	movs	r2, r0
   34c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34c4a:	189a      	adds	r2, r3, r2
   34c4c:	687b      	ldr	r3, [r7, #4]
   34c4e:	0011      	movs	r1, r2
   34c50:	0018      	movs	r0, r3
   34c52:	4b81      	ldr	r3, [pc, #516]	; (34e58 <_http_client_handle_header+0x280>)
   34c54:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   34c56:	687b      	ldr	r3, [r7, #4]
   34c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34c5a:	2b00      	cmp	r3, #0
   34c5c:	d046      	beq.n	34cec <_http_client_handle_header+0x114>
   34c5e:	687b      	ldr	r3, [r7, #4]
   34c60:	22e4      	movs	r2, #228	; 0xe4
   34c62:	5a9b      	ldrh	r3, [r3, r2]
   34c64:	2b00      	cmp	r3, #0
   34c66:	d041      	beq.n	34cec <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   34c68:	687b      	ldr	r3, [r7, #4]
   34c6a:	22dc      	movs	r2, #220	; 0xdc
   34c6c:	589b      	ldr	r3, [r3, r2]
   34c6e:	2b00      	cmp	r3, #0
   34c70:	da19      	bge.n	34ca6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   34c72:	687b      	ldr	r3, [r7, #4]
   34c74:	22e4      	movs	r2, #228	; 0xe4
   34c76:	5a9a      	ldrh	r2, [r3, r2]
   34c78:	230c      	movs	r3, #12
   34c7a:	18fb      	adds	r3, r7, r3
   34c7c:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   34c7e:	230c      	movs	r3, #12
   34c80:	18fb      	adds	r3, r7, r3
   34c82:	2201      	movs	r2, #1
   34c84:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   34c86:	687b      	ldr	r3, [r7, #4]
   34c88:	22e0      	movs	r2, #224	; 0xe0
   34c8a:	2100      	movs	r1, #0
   34c8c:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   34c8e:	230c      	movs	r3, #12
   34c90:	18fb      	adds	r3, r7, r3
   34c92:	2200      	movs	r2, #0
   34c94:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34c96:	687b      	ldr	r3, [r7, #4]
   34c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34c9a:	220c      	movs	r2, #12
   34c9c:	18ba      	adds	r2, r7, r2
   34c9e:	6878      	ldr	r0, [r7, #4]
   34ca0:	2102      	movs	r1, #2
   34ca2:	4798      	blx	r3
   34ca4:	e022      	b.n	34cec <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   34ca6:	687b      	ldr	r3, [r7, #4]
   34ca8:	22dc      	movs	r2, #220	; 0xdc
   34caa:	589a      	ldr	r2, [r3, r2]
   34cac:	687b      	ldr	r3, [r7, #4]
   34cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   34cb0:	429a      	cmp	r2, r3
   34cb2:	dd1b      	ble.n	34cec <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   34cb4:	687b      	ldr	r3, [r7, #4]
   34cb6:	22e4      	movs	r2, #228	; 0xe4
   34cb8:	5a9a      	ldrh	r2, [r3, r2]
   34cba:	230c      	movs	r3, #12
   34cbc:	18fb      	adds	r3, r7, r3
   34cbe:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   34cc0:	687b      	ldr	r3, [r7, #4]
   34cc2:	22dc      	movs	r2, #220	; 0xdc
   34cc4:	589b      	ldr	r3, [r3, r2]
   34cc6:	001a      	movs	r2, r3
   34cc8:	230c      	movs	r3, #12
   34cca:	18fb      	adds	r3, r7, r3
   34ccc:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   34cce:	230c      	movs	r3, #12
   34cd0:	18fb      	adds	r3, r7, r3
   34cd2:	2200      	movs	r2, #0
   34cd4:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   34cd6:	687b      	ldr	r3, [r7, #4]
   34cd8:	22e0      	movs	r2, #224	; 0xe0
   34cda:	2100      	movs	r1, #0
   34cdc:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   34cde:	687b      	ldr	r3, [r7, #4]
   34ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34ce2:	220c      	movs	r2, #12
   34ce4:	18ba      	adds	r2, r7, r2
   34ce6:	6878      	ldr	r0, [r7, #4]
   34ce8:	2102      	movs	r1, #2
   34cea:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   34cec:	687b      	ldr	r3, [r7, #4]
   34cee:	22d8      	movs	r2, #216	; 0xd8
   34cf0:	2101      	movs	r1, #1
   34cf2:	5099      	str	r1, [r3, r2]
			return 1;
   34cf4:	2301      	movs	r3, #1
   34cf6:	e0a7      	b.n	34e48 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   34cf8:	495a      	ldr	r1, [pc, #360]	; (34e64 <_http_client_handle_header+0x28c>)
   34cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34cfc:	2210      	movs	r2, #16
   34cfe:	0018      	movs	r0, r3
   34d00:	4b57      	ldr	r3, [pc, #348]	; (34e60 <_http_client_handle_header+0x288>)
   34d02:	4798      	blx	r3
   34d04:	1e03      	subs	r3, r0, #0
   34d06:	d109      	bne.n	34d1c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   34d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34d0a:	3310      	adds	r3, #16
   34d0c:	0018      	movs	r0, r3
   34d0e:	4b56      	ldr	r3, [pc, #344]	; (34e68 <_http_client_handle_header+0x290>)
   34d10:	4798      	blx	r3
   34d12:	0001      	movs	r1, r0
   34d14:	687b      	ldr	r3, [r7, #4]
   34d16:	22dc      	movs	r2, #220	; 0xdc
   34d18:	5099      	str	r1, [r3, r2]
   34d1a:	e08b      	b.n	34e34 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   34d1c:	4953      	ldr	r1, [pc, #332]	; (34e6c <_http_client_handle_header+0x294>)
   34d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34d20:	2213      	movs	r2, #19
   34d22:	0018      	movs	r0, r3
   34d24:	4b4e      	ldr	r3, [pc, #312]	; (34e60 <_http_client_handle_header+0x288>)
   34d26:	4798      	blx	r3
   34d28:	1e03      	subs	r3, r0, #0
   34d2a:	d127      	bne.n	34d7c <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   34d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34d2e:	3313      	adds	r3, #19
   34d30:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34d32:	e01e      	b.n	34d72 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   34d34:	6a3b      	ldr	r3, [r7, #32]
   34d36:	781b      	ldrb	r3, [r3, #0]
   34d38:	2b20      	cmp	r3, #32
   34d3a:	d103      	bne.n	34d44 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34d3c:	6a3b      	ldr	r3, [r7, #32]
   34d3e:	3301      	adds	r3, #1
   34d40:	623b      	str	r3, [r7, #32]
   34d42:	e016      	b.n	34d72 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   34d44:	6a3b      	ldr	r3, [r7, #32]
   34d46:	781b      	ldrb	r3, [r3, #0]
   34d48:	2b43      	cmp	r3, #67	; 0x43
   34d4a:	d003      	beq.n	34d54 <_http_client_handle_header+0x17c>
   34d4c:	6a3b      	ldr	r3, [r7, #32]
   34d4e:	781b      	ldrb	r3, [r3, #0]
   34d50:	2b63      	cmp	r3, #99	; 0x63
   34d52:	d105      	bne.n	34d60 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   34d54:	687b      	ldr	r3, [r7, #4]
   34d56:	21cc      	movs	r1, #204	; 0xcc
   34d58:	2201      	movs	r2, #1
   34d5a:	4252      	negs	r2, r2
   34d5c:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   34d5e:	e069      	b.n	34e34 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   34d60:	2386      	movs	r3, #134	; 0x86
   34d62:	425a      	negs	r2, r3
   34d64:	687b      	ldr	r3, [r7, #4]
   34d66:	0011      	movs	r1, r2
   34d68:	0018      	movs	r0, r3
   34d6a:	4b41      	ldr	r3, [pc, #260]	; (34e70 <_http_client_handle_header+0x298>)
   34d6c:	4798      	blx	r3
					return 0;
   34d6e:	2300      	movs	r3, #0
   34d70:	e06a      	b.n	34e48 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34d72:	69ba      	ldr	r2, [r7, #24]
   34d74:	6a3b      	ldr	r3, [r7, #32]
   34d76:	429a      	cmp	r2, r3
   34d78:	d8dc      	bhi.n	34d34 <_http_client_handle_header+0x15c>
   34d7a:	e05b      	b.n	34e34 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   34d7c:	493d      	ldr	r1, [pc, #244]	; (34e74 <_http_client_handle_header+0x29c>)
   34d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34d80:	220c      	movs	r2, #12
   34d82:	0018      	movs	r0, r3
   34d84:	4b36      	ldr	r3, [pc, #216]	; (34e60 <_http_client_handle_header+0x288>)
   34d86:	4798      	blx	r3
   34d88:	1e03      	subs	r3, r0, #0
   34d8a:	d126      	bne.n	34dda <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   34d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34d8e:	330c      	adds	r3, #12
   34d90:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34d92:	e01d      	b.n	34dd0 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   34d94:	69fb      	ldr	r3, [r7, #28]
   34d96:	781b      	ldrb	r3, [r3, #0]
   34d98:	2b20      	cmp	r3, #32
   34d9a:	d103      	bne.n	34da4 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34d9c:	69fb      	ldr	r3, [r7, #28]
   34d9e:	3301      	adds	r3, #1
   34da0:	61fb      	str	r3, [r7, #28]
   34da2:	e015      	b.n	34dd0 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   34da4:	69fb      	ldr	r3, [r7, #28]
   34da6:	781b      	ldrb	r3, [r3, #0]
   34da8:	2b4b      	cmp	r3, #75	; 0x4b
   34daa:	d003      	beq.n	34db4 <_http_client_handle_header+0x1dc>
   34dac:	69fb      	ldr	r3, [r7, #28]
   34dae:	781b      	ldrb	r3, [r3, #0]
   34db0:	2b6b      	cmp	r3, #107	; 0x6b
   34db2:	d106      	bne.n	34dc2 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   34db4:	687b      	ldr	r3, [r7, #4]
   34db6:	2241      	movs	r2, #65	; 0x41
   34db8:	5c99      	ldrb	r1, [r3, r2]
   34dba:	2002      	movs	r0, #2
   34dbc:	4301      	orrs	r1, r0
   34dbe:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   34dc0:	e038      	b.n	34e34 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   34dc2:	687b      	ldr	r3, [r7, #4]
   34dc4:	2241      	movs	r2, #65	; 0x41
   34dc6:	5c99      	ldrb	r1, [r3, r2]
   34dc8:	2002      	movs	r0, #2
   34dca:	4381      	bics	r1, r0
   34dcc:	5499      	strb	r1, [r3, r2]
				break;
   34dce:	e031      	b.n	34e34 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   34dd0:	69ba      	ldr	r2, [r7, #24]
   34dd2:	69fb      	ldr	r3, [r7, #28]
   34dd4:	429a      	cmp	r2, r3
   34dd6:	d8dd      	bhi.n	34d94 <_http_client_handle_header+0x1bc>
   34dd8:	e02c      	b.n	34e34 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   34dda:	4927      	ldr	r1, [pc, #156]	; (34e78 <_http_client_handle_header+0x2a0>)
   34ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34dde:	2205      	movs	r2, #5
   34de0:	0018      	movs	r0, r3
   34de2:	4b1f      	ldr	r3, [pc, #124]	; (34e60 <_http_client_handle_header+0x288>)
   34de4:	4798      	blx	r3
   34de6:	1e03      	subs	r3, r0, #0
   34de8:	d124      	bne.n	34e34 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   34dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34dec:	3309      	adds	r3, #9
   34dee:	0018      	movs	r0, r3
   34df0:	4b1d      	ldr	r3, [pc, #116]	; (34e68 <_http_client_handle_header+0x290>)
   34df2:	4798      	blx	r3
   34df4:	0003      	movs	r3, r0
   34df6:	b299      	uxth	r1, r3
   34df8:	687b      	ldr	r3, [r7, #4]
   34dfa:	22e4      	movs	r2, #228	; 0xe4
   34dfc:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   34dfe:	687b      	ldr	r3, [r7, #4]
   34e00:	22dc      	movs	r2, #220	; 0xdc
   34e02:	2100      	movs	r1, #0
   34e04:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   34e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34e08:	3305      	adds	r3, #5
   34e0a:	781b      	ldrb	r3, [r3, #0]
   34e0c:	2b31      	cmp	r3, #49	; 0x31
   34e0e:	d804      	bhi.n	34e1a <_http_client_handle_header+0x242>
   34e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   34e12:	3307      	adds	r3, #7
   34e14:	781b      	ldrb	r3, [r3, #0]
   34e16:	2b30      	cmp	r3, #48	; 0x30
   34e18:	d906      	bls.n	34e28 <_http_client_handle_header+0x250>
				module->permanent = 1;
   34e1a:	687b      	ldr	r3, [r7, #4]
   34e1c:	2241      	movs	r2, #65	; 0x41
   34e1e:	5c99      	ldrb	r1, [r3, r2]
   34e20:	2002      	movs	r0, #2
   34e22:	4301      	orrs	r1, r0
   34e24:	5499      	strb	r1, [r3, r2]
   34e26:	e005      	b.n	34e34 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   34e28:	687b      	ldr	r3, [r7, #4]
   34e2a:	2241      	movs	r2, #65	; 0x41
   34e2c:	5c99      	ldrb	r1, [r3, r2]
   34e2e:	2002      	movs	r0, #2
   34e30:	4381      	bics	r1, r0
   34e32:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   34e34:	4b06      	ldr	r3, [pc, #24]	; (34e50 <_http_client_handle_header+0x278>)
   34e36:	681b      	ldr	r3, [r3, #0]
   34e38:	0018      	movs	r0, r3
   34e3a:	4b08      	ldr	r3, [pc, #32]	; (34e5c <_http_client_handle_header+0x284>)
   34e3c:	4798      	blx	r3
   34e3e:	0002      	movs	r2, r0
   34e40:	69bb      	ldr	r3, [r7, #24]
   34e42:	189b      	adds	r3, r3, r2
   34e44:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   34e46:	e6ce      	b.n	34be6 <_http_client_handle_header+0xe>
	}
}
   34e48:	0018      	movs	r0, r3
   34e4a:	46bd      	mov	sp, r7
   34e4c:	b00b      	add	sp, #44	; 0x2c
   34e4e:	bd90      	pop	{r4, r7, pc}
   34e50:	200001a8 	.word	0x200001a8
   34e54:	0003893d 	.word	0x0003893d
   34e58:	0003523d 	.word	0x0003523d
   34e5c:	000388bf 	.word	0x000388bf
   34e60:	000388cd 	.word	0x000388cd
   34e64:	0003e318 	.word	0x0003e318
   34e68:	00038455 	.word	0x00038455
   34e6c:	0003e33c 	.word	0x0003e33c
   34e70:	00034255 	.word	0x00034255
   34e74:	0003e350 	.word	0x0003e350
   34e78:	0003e360 	.word	0x0003e360

00034e7c <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   34e7c:	b580      	push	{r7, lr}
   34e7e:	b088      	sub	sp, #32
   34e80:	af00      	add	r7, sp, #0
   34e82:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   34e84:	687b      	ldr	r3, [r7, #4]
   34e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34e88:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   34e8a:	2300      	movs	r3, #0
   34e8c:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   34e8e:	687b      	ldr	r3, [r7, #4]
   34e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34e92:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   34e94:	687b      	ldr	r3, [r7, #4]
   34e96:	22e0      	movs	r2, #224	; 0xe0
   34e98:	589b      	ldr	r3, [r3, r2]
   34e9a:	2b00      	cmp	r3, #0
   34e9c:	db71      	blt.n	34f82 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   34e9e:	687b      	ldr	r3, [r7, #4]
   34ea0:	22e0      	movs	r2, #224	; 0xe0
   34ea2:	589b      	ldr	r3, [r3, r2]
   34ea4:	2b00      	cmp	r3, #0
   34ea6:	d134      	bne.n	34f12 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   34ea8:	687b      	ldr	r3, [r7, #4]
   34eaa:	22d8      	movs	r2, #216	; 0xd8
   34eac:	2100      	movs	r1, #0
   34eae:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   34eb0:	687b      	ldr	r3, [r7, #4]
   34eb2:	22e4      	movs	r2, #228	; 0xe4
   34eb4:	2100      	movs	r1, #0
   34eb6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   34eb8:	2308      	movs	r3, #8
   34eba:	18fb      	adds	r3, r7, r3
   34ebc:	2201      	movs	r2, #1
   34ebe:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   34ec0:	2308      	movs	r3, #8
   34ec2:	18fb      	adds	r3, r7, r3
   34ec4:	2200      	movs	r2, #0
   34ec6:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   34ec8:	2308      	movs	r3, #8
   34eca:	18fb      	adds	r3, r7, r3
   34ecc:	2200      	movs	r2, #0
   34ece:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   34ed0:	687b      	ldr	r3, [r7, #4]
   34ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34ed4:	2b00      	cmp	r3, #0
   34ed6:	d006      	beq.n	34ee6 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34ed8:	687b      	ldr	r3, [r7, #4]
   34eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34edc:	2208      	movs	r2, #8
   34ede:	18ba      	adds	r2, r7, r2
   34ee0:	6878      	ldr	r0, [r7, #4]
   34ee2:	2103      	movs	r1, #3
   34ee4:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   34ee6:	687b      	ldr	r3, [r7, #4]
   34ee8:	2241      	movs	r2, #65	; 0x41
   34eea:	5c9b      	ldrb	r3, [r3, r2]
   34eec:	2202      	movs	r2, #2
   34eee:	4013      	ands	r3, r2
   34ef0:	b2db      	uxtb	r3, r3
   34ef2:	2b00      	cmp	r3, #0
   34ef4:	d105      	bne.n	34f02 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   34ef6:	687b      	ldr	r3, [r7, #4]
   34ef8:	2100      	movs	r1, #0
   34efa:	0018      	movs	r0, r3
   34efc:	4b62      	ldr	r3, [pc, #392]	; (35088 <_http_client_read_chuked_entity+0x20c>)
   34efe:	4798      	blx	r3
					return;
   34f00:	e0bf      	b.n	35082 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   34f02:	697b      	ldr	r3, [r7, #20]
   34f04:	1c9a      	adds	r2, r3, #2
   34f06:	687b      	ldr	r3, [r7, #4]
   34f08:	0011      	movs	r1, r2
   34f0a:	0018      	movs	r0, r3
   34f0c:	4b5f      	ldr	r3, [pc, #380]	; (3508c <_http_client_read_chuked_entity+0x210>)
   34f0e:	4798      	blx	r3
   34f10:	e0b2      	b.n	35078 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   34f12:	687b      	ldr	r3, [r7, #4]
   34f14:	22e0      	movs	r2, #224	; 0xe0
   34f16:	589a      	ldr	r2, [r3, r2]
   34f18:	69fb      	ldr	r3, [r7, #28]
   34f1a:	429a      	cmp	r2, r3
   34f1c:	dd00      	ble.n	34f20 <_http_client_read_chuked_entity+0xa4>
   34f1e:	e0ab      	b.n	35078 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   34f20:	687b      	ldr	r3, [r7, #4]
   34f22:	22e0      	movs	r2, #224	; 0xe0
   34f24:	589b      	ldr	r3, [r3, r2]
   34f26:	001a      	movs	r2, r3
   34f28:	2308      	movs	r3, #8
   34f2a:	18fb      	adds	r3, r7, r3
   34f2c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   34f2e:	2308      	movs	r3, #8
   34f30:	18fb      	adds	r3, r7, r3
   34f32:	697a      	ldr	r2, [r7, #20]
   34f34:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   34f36:	2308      	movs	r3, #8
   34f38:	18fb      	adds	r3, r7, r3
   34f3a:	2200      	movs	r2, #0
   34f3c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   34f3e:	687b      	ldr	r3, [r7, #4]
   34f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34f42:	2b00      	cmp	r3, #0
   34f44:	d006      	beq.n	34f54 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   34f46:	687b      	ldr	r3, [r7, #4]
   34f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   34f4a:	2208      	movs	r2, #8
   34f4c:	18ba      	adds	r2, r7, r2
   34f4e:	6878      	ldr	r0, [r7, #4]
   34f50:	2103      	movs	r1, #3
   34f52:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   34f54:	687b      	ldr	r3, [r7, #4]
   34f56:	22e0      	movs	r2, #224	; 0xe0
   34f58:	589b      	ldr	r3, [r3, r2]
   34f5a:	3302      	adds	r3, #2
   34f5c:	697a      	ldr	r2, [r7, #20]
   34f5e:	18d2      	adds	r2, r2, r3
   34f60:	687b      	ldr	r3, [r7, #4]
   34f62:	0011      	movs	r1, r2
   34f64:	0018      	movs	r0, r3
   34f66:	4b49      	ldr	r3, [pc, #292]	; (3508c <_http_client_read_chuked_entity+0x210>)
   34f68:	4798      	blx	r3
				length = (int)module->recved_size;
   34f6a:	687b      	ldr	r3, [r7, #4]
   34f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   34f6e:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   34f70:	687b      	ldr	r3, [r7, #4]
   34f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   34f74:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   34f76:	687b      	ldr	r3, [r7, #4]
   34f78:	21e0      	movs	r1, #224	; 0xe0
   34f7a:	2201      	movs	r2, #1
   34f7c:	4252      	negs	r2, r2
   34f7e:	505a      	str	r2, [r3, r1]
   34f80:	e07a      	b.n	35078 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   34f82:	687b      	ldr	r3, [r7, #4]
   34f84:	22e0      	movs	r2, #224	; 0xe0
   34f86:	2100      	movs	r1, #0
   34f88:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   34f8a:	e05a      	b.n	35042 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   34f8c:	697b      	ldr	r3, [r7, #20]
   34f8e:	781b      	ldrb	r3, [r3, #0]
   34f90:	2b0a      	cmp	r3, #10
   34f92:	d106      	bne.n	34fa2 <_http_client_read_chuked_entity+0x126>
					buffer++;
   34f94:	697b      	ldr	r3, [r7, #20]
   34f96:	3301      	adds	r3, #1
   34f98:	617b      	str	r3, [r7, #20]
					length--;
   34f9a:	69fb      	ldr	r3, [r7, #28]
   34f9c:	3b01      	subs	r3, #1
   34f9e:	61fb      	str	r3, [r7, #28]
					break;
   34fa0:	e052      	b.n	35048 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   34fa2:	69bb      	ldr	r3, [r7, #24]
   34fa4:	2b00      	cmp	r3, #0
   34fa6:	d145      	bne.n	35034 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   34fa8:	697b      	ldr	r3, [r7, #20]
   34faa:	781b      	ldrb	r3, [r3, #0]
   34fac:	2b2f      	cmp	r3, #47	; 0x2f
   34fae:	d910      	bls.n	34fd2 <_http_client_read_chuked_entity+0x156>
   34fb0:	697b      	ldr	r3, [r7, #20]
   34fb2:	781b      	ldrb	r3, [r3, #0]
   34fb4:	2b39      	cmp	r3, #57	; 0x39
   34fb6:	d80c      	bhi.n	34fd2 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   34fb8:	687b      	ldr	r3, [r7, #4]
   34fba:	22e0      	movs	r2, #224	; 0xe0
   34fbc:	589b      	ldr	r3, [r3, r2]
   34fbe:	011b      	lsls	r3, r3, #4
   34fc0:	697a      	ldr	r2, [r7, #20]
   34fc2:	7812      	ldrb	r2, [r2, #0]
   34fc4:	189b      	adds	r3, r3, r2
   34fc6:	3b30      	subs	r3, #48	; 0x30
   34fc8:	001a      	movs	r2, r3
   34fca:	687b      	ldr	r3, [r7, #4]
   34fcc:	21e0      	movs	r1, #224	; 0xe0
   34fce:	505a      	str	r2, [r3, r1]
   34fd0:	e031      	b.n	35036 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   34fd2:	697b      	ldr	r3, [r7, #20]
   34fd4:	781b      	ldrb	r3, [r3, #0]
   34fd6:	2b60      	cmp	r3, #96	; 0x60
   34fd8:	d910      	bls.n	34ffc <_http_client_read_chuked_entity+0x180>
   34fda:	697b      	ldr	r3, [r7, #20]
   34fdc:	781b      	ldrb	r3, [r3, #0]
   34fde:	2b66      	cmp	r3, #102	; 0x66
   34fe0:	d80c      	bhi.n	34ffc <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   34fe2:	687b      	ldr	r3, [r7, #4]
   34fe4:	22e0      	movs	r2, #224	; 0xe0
   34fe6:	589b      	ldr	r3, [r3, r2]
   34fe8:	011b      	lsls	r3, r3, #4
   34fea:	697a      	ldr	r2, [r7, #20]
   34fec:	7812      	ldrb	r2, [r2, #0]
   34fee:	189b      	adds	r3, r3, r2
   34ff0:	3b61      	subs	r3, #97	; 0x61
   34ff2:	001a      	movs	r2, r3
   34ff4:	687b      	ldr	r3, [r7, #4]
   34ff6:	21e0      	movs	r1, #224	; 0xe0
   34ff8:	505a      	str	r2, [r3, r1]
   34ffa:	e01c      	b.n	35036 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   34ffc:	697b      	ldr	r3, [r7, #20]
   34ffe:	781b      	ldrb	r3, [r3, #0]
   35000:	2b40      	cmp	r3, #64	; 0x40
   35002:	d910      	bls.n	35026 <_http_client_read_chuked_entity+0x1aa>
   35004:	697b      	ldr	r3, [r7, #20]
   35006:	781b      	ldrb	r3, [r3, #0]
   35008:	2b46      	cmp	r3, #70	; 0x46
   3500a:	d80c      	bhi.n	35026 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   3500c:	687b      	ldr	r3, [r7, #4]
   3500e:	22e0      	movs	r2, #224	; 0xe0
   35010:	589b      	ldr	r3, [r3, r2]
   35012:	011b      	lsls	r3, r3, #4
   35014:	697a      	ldr	r2, [r7, #20]
   35016:	7812      	ldrb	r2, [r2, #0]
   35018:	189b      	adds	r3, r3, r2
   3501a:	3b41      	subs	r3, #65	; 0x41
   3501c:	001a      	movs	r2, r3
   3501e:	687b      	ldr	r3, [r7, #4]
   35020:	21e0      	movs	r1, #224	; 0xe0
   35022:	505a      	str	r2, [r3, r1]
   35024:	e007      	b.n	35036 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   35026:	697b      	ldr	r3, [r7, #20]
   35028:	781b      	ldrb	r3, [r3, #0]
   3502a:	2b3b      	cmp	r3, #59	; 0x3b
   3502c:	d103      	bne.n	35036 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   3502e:	2301      	movs	r3, #1
   35030:	61bb      	str	r3, [r7, #24]
   35032:	e000      	b.n	35036 <_http_client_read_chuked_entity+0x1ba>
					continue;
   35034:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   35036:	697b      	ldr	r3, [r7, #20]
   35038:	3301      	adds	r3, #1
   3503a:	617b      	str	r3, [r7, #20]
   3503c:	69fb      	ldr	r3, [r7, #28]
   3503e:	3b01      	subs	r3, #1
   35040:	61fb      	str	r3, [r7, #28]
   35042:	69fb      	ldr	r3, [r7, #28]
   35044:	2b00      	cmp	r3, #0
   35046:	dca1      	bgt.n	34f8c <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   35048:	687b      	ldr	r3, [r7, #4]
   3504a:	22e0      	movs	r2, #224	; 0xe0
   3504c:	589a      	ldr	r2, [r3, r2]
   3504e:	687b      	ldr	r3, [r7, #4]
   35050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   35052:	429a      	cmp	r2, r3
   35054:	dd07      	ble.n	35066 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   35056:	238b      	movs	r3, #139	; 0x8b
   35058:	425a      	negs	r2, r3
   3505a:	687b      	ldr	r3, [r7, #4]
   3505c:	0011      	movs	r1, r2
   3505e:	0018      	movs	r0, r3
   35060:	4b09      	ldr	r3, [pc, #36]	; (35088 <_http_client_read_chuked_entity+0x20c>)
   35062:	4798      	blx	r3
				return;
   35064:	e00d      	b.n	35082 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   35066:	69fb      	ldr	r3, [r7, #28]
   35068:	2b00      	cmp	r3, #0
   3506a:	d105      	bne.n	35078 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   3506c:	687b      	ldr	r3, [r7, #4]
   3506e:	21e0      	movs	r1, #224	; 0xe0
   35070:	2201      	movs	r2, #1
   35072:	4252      	negs	r2, r2
   35074:	505a      	str	r2, [r3, r1]
				return;
   35076:	e004      	b.n	35082 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   35078:	687b      	ldr	r3, [r7, #4]
   3507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3507c:	2b00      	cmp	r3, #0
   3507e:	d000      	beq.n	35082 <_http_client_read_chuked_entity+0x206>
   35080:	e708      	b.n	34e94 <_http_client_read_chuked_entity+0x18>
}
   35082:	46bd      	mov	sp, r7
   35084:	b008      	add	sp, #32
   35086:	bd80      	pop	{r7, pc}
   35088:	00034255 	.word	0x00034255
   3508c:	0003523d 	.word	0x0003523d

00035090 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   35090:	b580      	push	{r7, lr}
   35092:	b086      	sub	sp, #24
   35094:	af00      	add	r7, sp, #0
   35096:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   35098:	687b      	ldr	r3, [r7, #4]
   3509a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3509c:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   3509e:	687b      	ldr	r3, [r7, #4]
   350a0:	22dc      	movs	r2, #220	; 0xdc
   350a2:	589b      	ldr	r3, [r3, r2]
   350a4:	2b00      	cmp	r3, #0
   350a6:	db58      	blt.n	3515a <_http_client_handle_entity+0xca>
   350a8:	687b      	ldr	r3, [r7, #4]
   350aa:	22dc      	movs	r2, #220	; 0xdc
   350ac:	589a      	ldr	r2, [r3, r2]
   350ae:	687b      	ldr	r3, [r7, #4]
   350b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   350b2:	429a      	cmp	r2, r3
   350b4:	dc51      	bgt.n	3515a <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   350b6:	687b      	ldr	r3, [r7, #4]
   350b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   350ba:	0019      	movs	r1, r3
   350bc:	687b      	ldr	r3, [r7, #4]
   350be:	22dc      	movs	r2, #220	; 0xdc
   350c0:	589b      	ldr	r3, [r3, r2]
   350c2:	4299      	cmp	r1, r3
   350c4:	da00      	bge.n	350c8 <_http_client_handle_entity+0x38>
   350c6:	e0a9      	b.n	3521c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   350c8:	687b      	ldr	r3, [r7, #4]
   350ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   350cc:	2b00      	cmp	r3, #0
   350ce:	d020      	beq.n	35112 <_http_client_handle_entity+0x82>
   350d0:	687b      	ldr	r3, [r7, #4]
   350d2:	22e4      	movs	r2, #228	; 0xe4
   350d4:	5a9b      	ldrh	r3, [r3, r2]
   350d6:	2b00      	cmp	r3, #0
   350d8:	d01b      	beq.n	35112 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   350da:	687b      	ldr	r3, [r7, #4]
   350dc:	22e4      	movs	r2, #228	; 0xe4
   350de:	5a9a      	ldrh	r2, [r3, r2]
   350e0:	2308      	movs	r3, #8
   350e2:	18fb      	adds	r3, r7, r3
   350e4:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   350e6:	2308      	movs	r3, #8
   350e8:	18fb      	adds	r3, r7, r3
   350ea:	2200      	movs	r2, #0
   350ec:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   350ee:	687b      	ldr	r3, [r7, #4]
   350f0:	22dc      	movs	r2, #220	; 0xdc
   350f2:	589b      	ldr	r3, [r3, r2]
   350f4:	001a      	movs	r2, r3
   350f6:	2308      	movs	r3, #8
   350f8:	18fb      	adds	r3, r7, r3
   350fa:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   350fc:	2308      	movs	r3, #8
   350fe:	18fb      	adds	r3, r7, r3
   35100:	697a      	ldr	r2, [r7, #20]
   35102:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   35104:	687b      	ldr	r3, [r7, #4]
   35106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   35108:	2208      	movs	r2, #8
   3510a:	18ba      	adds	r2, r7, r2
   3510c:	6878      	ldr	r0, [r7, #4]
   3510e:	2102      	movs	r1, #2
   35110:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   35112:	687b      	ldr	r3, [r7, #4]
   35114:	22d8      	movs	r2, #216	; 0xd8
   35116:	2100      	movs	r1, #0
   35118:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   3511a:	687b      	ldr	r3, [r7, #4]
   3511c:	22e4      	movs	r2, #228	; 0xe4
   3511e:	2100      	movs	r1, #0
   35120:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   35122:	687b      	ldr	r3, [r7, #4]
   35124:	2241      	movs	r2, #65	; 0x41
   35126:	5c9b      	ldrb	r3, [r3, r2]
   35128:	2202      	movs	r2, #2
   3512a:	4013      	ands	r3, r2
   3512c:	b2db      	uxtb	r3, r3
   3512e:	2b00      	cmp	r3, #0
   35130:	d105      	bne.n	3513e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   35132:	687b      	ldr	r3, [r7, #4]
   35134:	2100      	movs	r1, #0
   35136:	0018      	movs	r0, r3
   35138:	4b3b      	ldr	r3, [pc, #236]	; (35228 <_http_client_handle_entity+0x198>)
   3513a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   3513c:	e06e      	b.n	3521c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   3513e:	687b      	ldr	r3, [r7, #4]
   35140:	22dc      	movs	r2, #220	; 0xdc
   35142:	589b      	ldr	r3, [r3, r2]
   35144:	001a      	movs	r2, r3
   35146:	697b      	ldr	r3, [r7, #20]
   35148:	189a      	adds	r2, r3, r2
   3514a:	687b      	ldr	r3, [r7, #4]
   3514c:	0011      	movs	r1, r2
   3514e:	0018      	movs	r0, r3
   35150:	4b36      	ldr	r3, [pc, #216]	; (3522c <_http_client_handle_entity+0x19c>)
   35152:	4798      	blx	r3
				return module->recved_size;
   35154:	687b      	ldr	r3, [r7, #4]
   35156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   35158:	e061      	b.n	3521e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   3515a:	687b      	ldr	r3, [r7, #4]
   3515c:	22dc      	movs	r2, #220	; 0xdc
   3515e:	589b      	ldr	r3, [r3, r2]
   35160:	2b00      	cmp	r3, #0
   35162:	db57      	blt.n	35214 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   35164:	687b      	ldr	r3, [r7, #4]
   35166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   35168:	2308      	movs	r3, #8
   3516a:	18fb      	adds	r3, r7, r3
   3516c:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   3516e:	2308      	movs	r3, #8
   35170:	18fb      	adds	r3, r7, r3
   35172:	697a      	ldr	r2, [r7, #20]
   35174:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   35176:	687b      	ldr	r3, [r7, #4]
   35178:	22e0      	movs	r2, #224	; 0xe0
   3517a:	589a      	ldr	r2, [r3, r2]
   3517c:	687b      	ldr	r3, [r7, #4]
   3517e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   35180:	18d2      	adds	r2, r2, r3
   35182:	687b      	ldr	r3, [r7, #4]
   35184:	21e0      	movs	r1, #224	; 0xe0
   35186:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   35188:	687b      	ldr	r3, [r7, #4]
   3518a:	22dc      	movs	r2, #220	; 0xdc
   3518c:	589a      	ldr	r2, [r3, r2]
   3518e:	687b      	ldr	r3, [r7, #4]
   35190:	21e0      	movs	r1, #224	; 0xe0
   35192:	585b      	ldr	r3, [r3, r1]
   35194:	429a      	cmp	r2, r3
   35196:	dc0c      	bgt.n	351b2 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   35198:	687b      	ldr	r3, [r7, #4]
   3519a:	22d8      	movs	r2, #216	; 0xd8
   3519c:	2100      	movs	r1, #0
   3519e:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   351a0:	687b      	ldr	r3, [r7, #4]
   351a2:	22e4      	movs	r2, #228	; 0xe4
   351a4:	2100      	movs	r1, #0
   351a6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   351a8:	2308      	movs	r3, #8
   351aa:	18fb      	adds	r3, r7, r3
   351ac:	2201      	movs	r2, #1
   351ae:	721a      	strb	r2, [r3, #8]
   351b0:	e003      	b.n	351ba <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   351b2:	2308      	movs	r3, #8
   351b4:	18fb      	adds	r3, r7, r3
   351b6:	2200      	movs	r2, #0
   351b8:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   351ba:	687b      	ldr	r3, [r7, #4]
   351bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   351be:	2b00      	cmp	r3, #0
   351c0:	d006      	beq.n	351d0 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   351c2:	687b      	ldr	r3, [r7, #4]
   351c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   351c6:	2208      	movs	r2, #8
   351c8:	18ba      	adds	r2, r7, r2
   351ca:	6878      	ldr	r0, [r7, #4]
   351cc:	2103      	movs	r1, #3
   351ce:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   351d0:	2308      	movs	r3, #8
   351d2:	18fb      	adds	r3, r7, r3
   351d4:	7a1b      	ldrb	r3, [r3, #8]
   351d6:	2b01      	cmp	r3, #1
   351d8:	d112      	bne.n	35200 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   351da:	687b      	ldr	r3, [r7, #4]
   351dc:	2241      	movs	r2, #65	; 0x41
   351de:	5c9b      	ldrb	r3, [r3, r2]
   351e0:	2202      	movs	r2, #2
   351e2:	4013      	ands	r3, r2
   351e4:	b2db      	uxtb	r3, r3
   351e6:	2b00      	cmp	r3, #0
   351e8:	d10a      	bne.n	35200 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   351ea:	4b11      	ldr	r3, [pc, #68]	; (35230 <_http_client_handle_entity+0x1a0>)
   351ec:	0018      	movs	r0, r3
   351ee:	4b11      	ldr	r3, [pc, #68]	; (35234 <_http_client_handle_entity+0x1a4>)
   351f0:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   351f2:	687b      	ldr	r3, [r7, #4]
   351f4:	2100      	movs	r1, #0
   351f6:	0018      	movs	r0, r3
   351f8:	4b0b      	ldr	r3, [pc, #44]	; (35228 <_http_client_handle_entity+0x198>)
   351fa:	4798      	blx	r3
					return 0;
   351fc:	2300      	movs	r3, #0
   351fe:	e00e      	b.n	3521e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   35200:	687b      	ldr	r3, [r7, #4]
   35202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   35204:	697a      	ldr	r2, [r7, #20]
   35206:	18d2      	adds	r2, r2, r3
   35208:	687b      	ldr	r3, [r7, #4]
   3520a:	0011      	movs	r1, r2
   3520c:	0018      	movs	r0, r3
   3520e:	4b07      	ldr	r3, [pc, #28]	; (3522c <_http_client_handle_entity+0x19c>)
   35210:	4798      	blx	r3
   35212:	e003      	b.n	3521c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   35214:	687b      	ldr	r3, [r7, #4]
   35216:	0018      	movs	r0, r3
   35218:	4b07      	ldr	r3, [pc, #28]	; (35238 <_http_client_handle_entity+0x1a8>)
   3521a:	4798      	blx	r3
		}
	}

	return 0;
   3521c:	2300      	movs	r3, #0
}
   3521e:	0018      	movs	r0, r3
   35220:	46bd      	mov	sp, r7
   35222:	b006      	add	sp, #24
   35224:	bd80      	pop	{r7, pc}
   35226:	46c0      	nop			; (mov r8, r8)
   35228:	00034255 	.word	0x00034255
   3522c:	0003523d 	.word	0x0003523d
   35230:	0003e368 	.word	0x0003e368
   35234:	00038729 	.word	0x00038729
   35238:	00034e7d 	.word	0x00034e7d

0003523c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   3523c:	b580      	push	{r7, lr}
   3523e:	b084      	sub	sp, #16
   35240:	af00      	add	r7, sp, #0
   35242:	6078      	str	r0, [r7, #4]
   35244:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   35246:	687b      	ldr	r3, [r7, #4]
   35248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3524a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   3524c:	687b      	ldr	r3, [r7, #4]
   3524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   35250:	001a      	movs	r2, r3
   35252:	683b      	ldr	r3, [r7, #0]
   35254:	1ad2      	subs	r2, r2, r3
   35256:	68fb      	ldr	r3, [r7, #12]
   35258:	18d3      	adds	r3, r2, r3
   3525a:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   3525c:	68bb      	ldr	r3, [r7, #8]
   3525e:	2b00      	cmp	r3, #0
   35260:	dd09      	ble.n	35276 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   35262:	68ba      	ldr	r2, [r7, #8]
   35264:	6839      	ldr	r1, [r7, #0]
   35266:	68fb      	ldr	r3, [r7, #12]
   35268:	0018      	movs	r0, r3
   3526a:	4b06      	ldr	r3, [pc, #24]	; (35284 <_http_client_move_buffer+0x48>)
   3526c:	4798      	blx	r3
		module->recved_size = remain;
   3526e:	68ba      	ldr	r2, [r7, #8]
   35270:	687b      	ldr	r3, [r7, #4]
   35272:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   35274:	e002      	b.n	3527c <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   35276:	687b      	ldr	r3, [r7, #4]
   35278:	2200      	movs	r2, #0
   3527a:	645a      	str	r2, [r3, #68]	; 0x44
}
   3527c:	46c0      	nop			; (mov r8, r8)
   3527e:	46bd      	mov	sp, r7
   35280:	b004      	add	sp, #16
   35282:	bd80      	pop	{r7, pc}
   35284:	000384e3 	.word	0x000384e3

00035288 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   35288:	b580      	push	{r7, lr}
   3528a:	b084      	sub	sp, #16
   3528c:	af00      	add	r7, sp, #0
   3528e:	60f8      	str	r0, [r7, #12]
   35290:	60b9      	str	r1, [r7, #8]
   35292:	607a      	str	r2, [r7, #4]
   35294:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   35296:	68fb      	ldr	r3, [r7, #12]
   35298:	687a      	ldr	r2, [r7, #4]
   3529a:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   3529c:	68fb      	ldr	r3, [r7, #12]
   3529e:	68ba      	ldr	r2, [r7, #8]
   352a0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   352a2:	68fb      	ldr	r3, [r7, #12]
   352a4:	2200      	movs	r2, #0
   352a6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   352a8:	68fb      	ldr	r3, [r7, #12]
   352aa:	683a      	ldr	r2, [r7, #0]
   352ac:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   352ae:	68fb      	ldr	r3, [r7, #12]
   352b0:	69ba      	ldr	r2, [r7, #24]
   352b2:	60da      	str	r2, [r3, #12]
}
   352b4:	46c0      	nop			; (mov r8, r8)
   352b6:	46bd      	mov	sp, r7
   352b8:	b004      	add	sp, #16
   352ba:	bd80      	pop	{r7, pc}

000352bc <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   352bc:	b580      	push	{r7, lr}
   352be:	b084      	sub	sp, #16
   352c0:	af00      	add	r7, sp, #0
   352c2:	6078      	str	r0, [r7, #4]
   352c4:	000a      	movs	r2, r1
   352c6:	1cfb      	adds	r3, r7, #3
   352c8:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   352ca:	687b      	ldr	r3, [r7, #4]
   352cc:	681a      	ldr	r2, [r3, #0]
   352ce:	687b      	ldr	r3, [r7, #4]
   352d0:	685b      	ldr	r3, [r3, #4]
   352d2:	1ad3      	subs	r3, r2, r3
   352d4:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   352d6:	68fb      	ldr	r3, [r7, #12]
   352d8:	2b00      	cmp	r3, #0
   352da:	dc03      	bgt.n	352e4 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   352dc:	687b      	ldr	r3, [r7, #4]
   352de:	0018      	movs	r0, r3
   352e0:	4b08      	ldr	r3, [pc, #32]	; (35304 <stream_writer_send_8+0x48>)
   352e2:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   352e4:	687b      	ldr	r3, [r7, #4]
   352e6:	6919      	ldr	r1, [r3, #16]
   352e8:	687b      	ldr	r3, [r7, #4]
   352ea:	685b      	ldr	r3, [r3, #4]
   352ec:	1c58      	adds	r0, r3, #1
   352ee:	687a      	ldr	r2, [r7, #4]
   352f0:	6050      	str	r0, [r2, #4]
   352f2:	18cb      	adds	r3, r1, r3
   352f4:	1cfa      	adds	r2, r7, #3
   352f6:	7812      	ldrb	r2, [r2, #0]
   352f8:	701a      	strb	r2, [r3, #0]
}
   352fa:	46c0      	nop			; (mov r8, r8)
   352fc:	46bd      	mov	sp, r7
   352fe:	b004      	add	sp, #16
   35300:	bd80      	pop	{r7, pc}
   35302:	46c0      	nop			; (mov r8, r8)
   35304:	00035345 	.word	0x00035345

00035308 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   35308:	b580      	push	{r7, lr}
   3530a:	b084      	sub	sp, #16
   3530c:	af00      	add	r7, sp, #0
   3530e:	60f8      	str	r0, [r7, #12]
   35310:	60b9      	str	r1, [r7, #8]
   35312:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   35314:	e00d      	b.n	35332 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   35316:	68bb      	ldr	r3, [r7, #8]
   35318:	781b      	ldrb	r3, [r3, #0]
   3531a:	b25a      	sxtb	r2, r3
   3531c:	68fb      	ldr	r3, [r7, #12]
   3531e:	0011      	movs	r1, r2
   35320:	0018      	movs	r0, r3
   35322:	4b07      	ldr	r3, [pc, #28]	; (35340 <stream_writer_send_buffer+0x38>)
   35324:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   35326:	687b      	ldr	r3, [r7, #4]
   35328:	3b01      	subs	r3, #1
   3532a:	607b      	str	r3, [r7, #4]
   3532c:	68bb      	ldr	r3, [r7, #8]
   3532e:	3301      	adds	r3, #1
   35330:	60bb      	str	r3, [r7, #8]
   35332:	687b      	ldr	r3, [r7, #4]
   35334:	2b00      	cmp	r3, #0
   35336:	d1ee      	bne.n	35316 <stream_writer_send_buffer+0xe>
	}
}
   35338:	46c0      	nop			; (mov r8, r8)
   3533a:	46bd      	mov	sp, r7
   3533c:	b004      	add	sp, #16
   3533e:	bd80      	pop	{r7, pc}
   35340:	000352bd 	.word	0x000352bd

00035344 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   35344:	b590      	push	{r4, r7, lr}
   35346:	b083      	sub	sp, #12
   35348:	af00      	add	r7, sp, #0
   3534a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   3534c:	687b      	ldr	r3, [r7, #4]
   3534e:	685b      	ldr	r3, [r3, #4]
   35350:	2b00      	cmp	r3, #0
   35352:	d00c      	beq.n	3536e <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   35354:	687b      	ldr	r3, [r7, #4]
   35356:	689c      	ldr	r4, [r3, #8]
   35358:	687b      	ldr	r3, [r7, #4]
   3535a:	68d8      	ldr	r0, [r3, #12]
   3535c:	687b      	ldr	r3, [r7, #4]
   3535e:	6919      	ldr	r1, [r3, #16]
   35360:	687b      	ldr	r3, [r7, #4]
   35362:	685b      	ldr	r3, [r3, #4]
   35364:	001a      	movs	r2, r3
   35366:	47a0      	blx	r4
		writer->written = 0;
   35368:	687b      	ldr	r3, [r7, #4]
   3536a:	2200      	movs	r2, #0
   3536c:	605a      	str	r2, [r3, #4]
	}
}
   3536e:	46c0      	nop			; (mov r8, r8)
   35370:	46bd      	mov	sp, r7
   35372:	b003      	add	sp, #12
   35374:	bd90      	pop	{r4, r7, pc}
	...

00035378 <system_cpu_clock_get_hz>:
{
   35378:	b580      	push	{r7, lr}
   3537a:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   3537c:	2000      	movs	r0, #0
   3537e:	4b05      	ldr	r3, [pc, #20]	; (35394 <system_cpu_clock_get_hz+0x1c>)
   35380:	4798      	blx	r3
   35382:	0002      	movs	r2, r0
   35384:	4b04      	ldr	r3, [pc, #16]	; (35398 <system_cpu_clock_get_hz+0x20>)
   35386:	7a1b      	ldrb	r3, [r3, #8]
   35388:	b2db      	uxtb	r3, r3
   3538a:	40da      	lsrs	r2, r3
   3538c:	0013      	movs	r3, r2
}
   3538e:	0018      	movs	r0, r3
   35390:	46bd      	mov	sp, r7
   35392:	bd80      	pop	{r7, pc}
   35394:	0002cd59 	.word	0x0002cd59
   35398:	40000400 	.word	0x40000400

0003539c <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   3539c:	b580      	push	{r7, lr}
   3539e:	b084      	sub	sp, #16
   353a0:	af00      	add	r7, sp, #0
   353a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   353a4:	687b      	ldr	r3, [r7, #4]
   353a6:	681b      	ldr	r3, [r3, #0]
   353a8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   353aa:	46c0      	nop			; (mov r8, r8)
   353ac:	68fb      	ldr	r3, [r7, #12]
   353ae:	689b      	ldr	r3, [r3, #8]
   353b0:	2202      	movs	r2, #2
   353b2:	4013      	ands	r3, r2
   353b4:	d1fa      	bne.n	353ac <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   353b6:	68fb      	ldr	r3, [r7, #12]
   353b8:	681b      	ldr	r3, [r3, #0]
   353ba:	2202      	movs	r2, #2
   353bc:	431a      	orrs	r2, r3
   353be:	68fb      	ldr	r3, [r7, #12]
   353c0:	601a      	str	r2, [r3, #0]
}
   353c2:	46c0      	nop			; (mov r8, r8)
   353c4:	46bd      	mov	sp, r7
   353c6:	b004      	add	sp, #16
   353c8:	bd80      	pop	{r7, pc}
	...

000353cc <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   353cc:	b580      	push	{r7, lr}
   353ce:	b082      	sub	sp, #8
   353d0:	af00      	add	r7, sp, #0
   353d2:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   353d4:	4b04      	ldr	r3, [pc, #16]	; (353e8 <sw_timer_tcc_callback+0x1c>)
   353d6:	681b      	ldr	r3, [r3, #0]
   353d8:	1c5a      	adds	r2, r3, #1
   353da:	4b03      	ldr	r3, [pc, #12]	; (353e8 <sw_timer_tcc_callback+0x1c>)
   353dc:	601a      	str	r2, [r3, #0]
}
   353de:	46c0      	nop			; (mov r8, r8)
   353e0:	46bd      	mov	sp, r7
   353e2:	b002      	add	sp, #8
   353e4:	bd80      	pop	{r7, pc}
   353e6:	46c0      	nop			; (mov r8, r8)
   353e8:	20004630 	.word	0x20004630

000353ec <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   353ec:	b580      	push	{r7, lr}
   353ee:	b082      	sub	sp, #8
   353f0:	af00      	add	r7, sp, #0
   353f2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   353f4:	687b      	ldr	r3, [r7, #4]
   353f6:	2264      	movs	r2, #100	; 0x64
   353f8:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   353fa:	687b      	ldr	r3, [r7, #4]
   353fc:	2200      	movs	r2, #0
   353fe:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   35400:	687b      	ldr	r3, [r7, #4]
   35402:	2200      	movs	r2, #0
   35404:	705a      	strb	r2, [r3, #1]
}
   35406:	46c0      	nop			; (mov r8, r8)
   35408:	46bd      	mov	sp, r7
   3540a:	b002      	add	sp, #8
   3540c:	bd80      	pop	{r7, pc}
	...

00035410 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   35410:	b590      	push	{r4, r7, lr}
   35412:	b0b1      	sub	sp, #196	; 0xc4
   35414:	af00      	add	r7, sp, #0
   35416:	6078      	str	r0, [r7, #4]
   35418:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   3541a:	230c      	movs	r3, #12
   3541c:	18fb      	adds	r3, r7, r3
   3541e:	4a2e      	ldr	r2, [pc, #184]	; (354d8 <sw_timer_init+0xc8>)
   35420:	ca13      	ldmia	r2!, {r0, r1, r4}
   35422:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   35424:	683b      	ldr	r3, [r7, #0]
   35426:	885b      	ldrh	r3, [r3, #2]
   35428:	001a      	movs	r2, r3
   3542a:	687b      	ldr	r3, [r7, #4]
   3542c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3542e:	687b      	ldr	r3, [r7, #4]
   35430:	3314      	adds	r3, #20
   35432:	22bc      	movs	r2, #188	; 0xbc
   35434:	18ba      	adds	r2, r7, r2
   35436:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   35438:	683b      	ldr	r3, [r7, #0]
   3543a:	781b      	ldrb	r3, [r3, #0]
   3543c:	001a      	movs	r2, r3
   3543e:	230c      	movs	r3, #12
   35440:	18fb      	adds	r3, r7, r3
   35442:	0092      	lsls	r2, r2, #2
   35444:	58d2      	ldr	r2, [r2, r3]
   35446:	2318      	movs	r3, #24
   35448:	18fb      	adds	r3, r7, r3
   3544a:	0011      	movs	r1, r2
   3544c:	0018      	movs	r0, r3
   3544e:	4b23      	ldr	r3, [pc, #140]	; (354dc <sw_timer_init+0xcc>)
   35450:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   35452:	4b23      	ldr	r3, [pc, #140]	; (354e0 <sw_timer_init+0xd0>)
   35454:	4798      	blx	r3
   35456:	0004      	movs	r4, r0
   35458:	683b      	ldr	r3, [r7, #0]
   3545a:	885b      	ldrh	r3, [r3, #2]
   3545c:	001a      	movs	r2, r3
   3545e:	4b21      	ldr	r3, [pc, #132]	; (354e4 <sw_timer_init+0xd4>)
   35460:	0011      	movs	r1, r2
   35462:	22fa      	movs	r2, #250	; 0xfa
   35464:	0210      	lsls	r0, r2, #8
   35466:	4798      	blx	r3
   35468:	0003      	movs	r3, r0
   3546a:	001a      	movs	r2, r3
   3546c:	4b1e      	ldr	r3, [pc, #120]	; (354e8 <sw_timer_init+0xd8>)
   3546e:	0011      	movs	r1, r2
   35470:	0020      	movs	r0, r4
   35472:	4798      	blx	r3
   35474:	0003      	movs	r3, r0
   35476:	001a      	movs	r2, r3
   35478:	2318      	movs	r3, #24
   3547a:	18fb      	adds	r3, r7, r3
   3547c:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   3547e:	2318      	movs	r3, #24
   35480:	18fb      	adds	r3, r7, r3
   35482:	2205      	movs	r2, #5
   35484:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   35486:	683b      	ldr	r3, [r7, #0]
   35488:	781b      	ldrb	r3, [r3, #0]
   3548a:	001a      	movs	r2, r3
   3548c:	230c      	movs	r3, #12
   3548e:	18fb      	adds	r3, r7, r3
   35490:	0092      	lsls	r2, r2, #2
   35492:	58d1      	ldr	r1, [r2, r3]
   35494:	2318      	movs	r3, #24
   35496:	18fa      	adds	r2, r7, r3
   35498:	23bc      	movs	r3, #188	; 0xbc
   3549a:	18fb      	adds	r3, r7, r3
   3549c:	681b      	ldr	r3, [r3, #0]
   3549e:	0018      	movs	r0, r3
   354a0:	4b12      	ldr	r3, [pc, #72]	; (354ec <sw_timer_init+0xdc>)
   354a2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   354a4:	683b      	ldr	r3, [r7, #0]
   354a6:	785b      	ldrb	r3, [r3, #1]
   354a8:	3308      	adds	r3, #8
   354aa:	b2da      	uxtb	r2, r3
   354ac:	4910      	ldr	r1, [pc, #64]	; (354f0 <sw_timer_init+0xe0>)
   354ae:	23bc      	movs	r3, #188	; 0xbc
   354b0:	18fb      	adds	r3, r7, r3
   354b2:	681b      	ldr	r3, [r3, #0]
   354b4:	0018      	movs	r0, r3
   354b6:	4b0f      	ldr	r3, [pc, #60]	; (354f4 <sw_timer_init+0xe4>)
   354b8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   354ba:	683b      	ldr	r3, [r7, #0]
   354bc:	785b      	ldrb	r3, [r3, #1]
   354be:	3308      	adds	r3, #8
   354c0:	b2da      	uxtb	r2, r3
   354c2:	23bc      	movs	r3, #188	; 0xbc
   354c4:	18fb      	adds	r3, r7, r3
   354c6:	681b      	ldr	r3, [r3, #0]
   354c8:	0011      	movs	r1, r2
   354ca:	0018      	movs	r0, r3
   354cc:	4b0a      	ldr	r3, [pc, #40]	; (354f8 <sw_timer_init+0xe8>)
   354ce:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   354d0:	46c0      	nop			; (mov r8, r8)
   354d2:	46bd      	mov	sp, r7
   354d4:	b031      	add	sp, #196	; 0xc4
   354d6:	bd90      	pop	{r4, r7, pc}
   354d8:	0003e3a8 	.word	0x0003e3a8
   354dc:	0002d2f1 	.word	0x0002d2f1
   354e0:	00035379 	.word	0x00035379
   354e4:	00035b05 	.word	0x00035b05
   354e8:	000359f1 	.word	0x000359f1
   354ec:	0002d94d 	.word	0x0002d94d
   354f0:	000353cd 	.word	0x000353cd
   354f4:	0002dd65 	.word	0x0002dd65
   354f8:	0002dda5 	.word	0x0002dda5

000354fc <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   354fc:	b580      	push	{r7, lr}
   354fe:	b084      	sub	sp, #16
   35500:	af00      	add	r7, sp, #0
   35502:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   35504:	687b      	ldr	r3, [r7, #4]
   35506:	3314      	adds	r3, #20
   35508:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   3550a:	68fb      	ldr	r3, [r7, #12]
   3550c:	0018      	movs	r0, r3
   3550e:	4b03      	ldr	r3, [pc, #12]	; (3551c <sw_timer_enable+0x20>)
   35510:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   35512:	46c0      	nop			; (mov r8, r8)
   35514:	46bd      	mov	sp, r7
   35516:	b004      	add	sp, #16
   35518:	bd80      	pop	{r7, pc}
   3551a:	46c0      	nop			; (mov r8, r8)
   3551c:	0003539d 	.word	0x0003539d

00035520 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   35520:	b580      	push	{r7, lr}
   35522:	b086      	sub	sp, #24
   35524:	af00      	add	r7, sp, #0
   35526:	60f8      	str	r0, [r7, #12]
   35528:	60b9      	str	r1, [r7, #8]
   3552a:	607a      	str	r2, [r7, #4]
   3552c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3552e:	2300      	movs	r3, #0
   35530:	617b      	str	r3, [r7, #20]
   35532:	e032      	b.n	3559a <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   35534:	68f9      	ldr	r1, [r7, #12]
   35536:	697a      	ldr	r2, [r7, #20]
   35538:	0013      	movs	r3, r2
   3553a:	009b      	lsls	r3, r3, #2
   3553c:	189b      	adds	r3, r3, r2
   3553e:	009b      	lsls	r3, r3, #2
   35540:	5c5b      	ldrb	r3, [r3, r1]
   35542:	07db      	lsls	r3, r3, #31
   35544:	0fdb      	lsrs	r3, r3, #31
   35546:	b2db      	uxtb	r3, r3
   35548:	2b00      	cmp	r3, #0
   3554a:	d123      	bne.n	35594 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   3554c:	697a      	ldr	r2, [r7, #20]
   3554e:	0013      	movs	r3, r2
   35550:	009b      	lsls	r3, r3, #2
   35552:	189b      	adds	r3, r3, r2
   35554:	009b      	lsls	r3, r3, #2
   35556:	68fa      	ldr	r2, [r7, #12]
   35558:	18d3      	adds	r3, r2, r3
   3555a:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   3555c:	693b      	ldr	r3, [r7, #16]
   3555e:	68ba      	ldr	r2, [r7, #8]
   35560:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   35562:	693b      	ldr	r3, [r7, #16]
   35564:	781a      	ldrb	r2, [r3, #0]
   35566:	2102      	movs	r1, #2
   35568:	438a      	bics	r2, r1
   3556a:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   3556c:	693b      	ldr	r3, [r7, #16]
   3556e:	687a      	ldr	r2, [r7, #4]
   35570:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   35572:	68fb      	ldr	r3, [r7, #12]
   35574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   35576:	4b0d      	ldr	r3, [pc, #52]	; (355ac <sw_timer_register_callback+0x8c>)
   35578:	0011      	movs	r1, r2
   3557a:	6838      	ldr	r0, [r7, #0]
   3557c:	4798      	blx	r3
   3557e:	0003      	movs	r3, r0
   35580:	001a      	movs	r2, r3
   35582:	693b      	ldr	r3, [r7, #16]
   35584:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   35586:	693b      	ldr	r3, [r7, #16]
   35588:	781a      	ldrb	r2, [r3, #0]
   3558a:	2101      	movs	r1, #1
   3558c:	430a      	orrs	r2, r1
   3558e:	701a      	strb	r2, [r3, #0]
			return index;
   35590:	697b      	ldr	r3, [r7, #20]
   35592:	e007      	b.n	355a4 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   35594:	697b      	ldr	r3, [r7, #20]
   35596:	3301      	adds	r3, #1
   35598:	617b      	str	r3, [r7, #20]
   3559a:	697b      	ldr	r3, [r7, #20]
   3559c:	2b00      	cmp	r3, #0
   3559e:	ddc9      	ble.n	35534 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   355a0:	2301      	movs	r3, #1
   355a2:	425b      	negs	r3, r3
}
   355a4:	0018      	movs	r0, r3
   355a6:	46bd      	mov	sp, r7
   355a8:	b006      	add	sp, #24
   355aa:	bd80      	pop	{r7, pc}
   355ac:	000359f1 	.word	0x000359f1

000355b0 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   355b0:	b580      	push	{r7, lr}
   355b2:	b086      	sub	sp, #24
   355b4:	af00      	add	r7, sp, #0
   355b6:	60f8      	str	r0, [r7, #12]
   355b8:	60b9      	str	r1, [r7, #8]
   355ba:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   355bc:	68ba      	ldr	r2, [r7, #8]
   355be:	0013      	movs	r3, r2
   355c0:	009b      	lsls	r3, r3, #2
   355c2:	189b      	adds	r3, r3, r2
   355c4:	009b      	lsls	r3, r3, #2
   355c6:	68fa      	ldr	r2, [r7, #12]
   355c8:	18d3      	adds	r3, r2, r3
   355ca:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   355cc:	697b      	ldr	r3, [r7, #20]
   355ce:	781a      	ldrb	r2, [r3, #0]
   355d0:	2102      	movs	r1, #2
   355d2:	430a      	orrs	r2, r1
   355d4:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   355d6:	68fb      	ldr	r3, [r7, #12]
   355d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   355da:	4b07      	ldr	r3, [pc, #28]	; (355f8 <sw_timer_enable_callback+0x48>)
   355dc:	0011      	movs	r1, r2
   355de:	6878      	ldr	r0, [r7, #4]
   355e0:	4798      	blx	r3
   355e2:	0003      	movs	r3, r0
   355e4:	001a      	movs	r2, r3
   355e6:	4b05      	ldr	r3, [pc, #20]	; (355fc <sw_timer_enable_callback+0x4c>)
   355e8:	681b      	ldr	r3, [r3, #0]
   355ea:	18d2      	adds	r2, r2, r3
   355ec:	697b      	ldr	r3, [r7, #20]
   355ee:	611a      	str	r2, [r3, #16]
}
   355f0:	46c0      	nop			; (mov r8, r8)
   355f2:	46bd      	mov	sp, r7
   355f4:	b006      	add	sp, #24
   355f6:	bd80      	pop	{r7, pc}
   355f8:	000359f1 	.word	0x000359f1
   355fc:	20004630 	.word	0x20004630

00035600 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   35600:	b580      	push	{r7, lr}
   35602:	b084      	sub	sp, #16
   35604:	af00      	add	r7, sp, #0
   35606:	6078      	str	r0, [r7, #4]
   35608:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   3560a:	683a      	ldr	r2, [r7, #0]
   3560c:	0013      	movs	r3, r2
   3560e:	009b      	lsls	r3, r3, #2
   35610:	189b      	adds	r3, r3, r2
   35612:	009b      	lsls	r3, r3, #2
   35614:	687a      	ldr	r2, [r7, #4]
   35616:	18d3      	adds	r3, r2, r3
   35618:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   3561a:	68fb      	ldr	r3, [r7, #12]
   3561c:	781a      	ldrb	r2, [r3, #0]
   3561e:	2102      	movs	r1, #2
   35620:	438a      	bics	r2, r1
   35622:	701a      	strb	r2, [r3, #0]
}
   35624:	46c0      	nop			; (mov r8, r8)
   35626:	46bd      	mov	sp, r7
   35628:	b004      	add	sp, #16
   3562a:	bd80      	pop	{r7, pc}

0003562c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   3562c:	b590      	push	{r4, r7, lr}
   3562e:	b085      	sub	sp, #20
   35630:	af00      	add	r7, sp, #0
   35632:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   35634:	2300      	movs	r3, #0
   35636:	60fb      	str	r3, [r7, #12]
   35638:	e053      	b.n	356e2 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   3563a:	6879      	ldr	r1, [r7, #4]
   3563c:	68fa      	ldr	r2, [r7, #12]
   3563e:	0013      	movs	r3, r2
   35640:	009b      	lsls	r3, r3, #2
   35642:	189b      	adds	r3, r3, r2
   35644:	009b      	lsls	r3, r3, #2
   35646:	5c5b      	ldrb	r3, [r3, r1]
   35648:	07db      	lsls	r3, r3, #31
   3564a:	0fdb      	lsrs	r3, r3, #31
   3564c:	b2db      	uxtb	r3, r3
   3564e:	2b00      	cmp	r3, #0
   35650:	d044      	beq.n	356dc <sw_timer_task+0xb0>
   35652:	6879      	ldr	r1, [r7, #4]
   35654:	68fa      	ldr	r2, [r7, #12]
   35656:	0013      	movs	r3, r2
   35658:	009b      	lsls	r3, r3, #2
   3565a:	189b      	adds	r3, r3, r2
   3565c:	009b      	lsls	r3, r3, #2
   3565e:	5c5b      	ldrb	r3, [r3, r1]
   35660:	079b      	lsls	r3, r3, #30
   35662:	0fdb      	lsrs	r3, r3, #31
   35664:	b2db      	uxtb	r3, r3
   35666:	2b00      	cmp	r3, #0
   35668:	d038      	beq.n	356dc <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   3566a:	68fa      	ldr	r2, [r7, #12]
   3566c:	0013      	movs	r3, r2
   3566e:	009b      	lsls	r3, r3, #2
   35670:	189b      	adds	r3, r3, r2
   35672:	009b      	lsls	r3, r3, #2
   35674:	687a      	ldr	r2, [r7, #4]
   35676:	18d3      	adds	r3, r2, r3
   35678:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   3567a:	68bb      	ldr	r3, [r7, #8]
   3567c:	691a      	ldr	r2, [r3, #16]
   3567e:	4b1c      	ldr	r3, [pc, #112]	; (356f0 <sw_timer_task+0xc4>)
   35680:	681b      	ldr	r3, [r3, #0]
   35682:	1ad3      	subs	r3, r2, r3
   35684:	d52a      	bpl.n	356dc <sw_timer_task+0xb0>
   35686:	68bb      	ldr	r3, [r7, #8]
   35688:	781b      	ldrb	r3, [r3, #0]
   3568a:	2204      	movs	r2, #4
   3568c:	4013      	ands	r3, r2
   3568e:	b2db      	uxtb	r3, r3
   35690:	2b00      	cmp	r3, #0
   35692:	d123      	bne.n	356dc <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   35694:	68bb      	ldr	r3, [r7, #8]
   35696:	781a      	ldrb	r2, [r3, #0]
   35698:	2104      	movs	r1, #4
   3569a:	430a      	orrs	r2, r1
   3569c:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   3569e:	68bb      	ldr	r3, [r7, #8]
   356a0:	68db      	ldr	r3, [r3, #12]
   356a2:	2b00      	cmp	r3, #0
   356a4:	d007      	beq.n	356b6 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   356a6:	68bb      	ldr	r3, [r7, #8]
   356a8:	68da      	ldr	r2, [r3, #12]
   356aa:	4b11      	ldr	r3, [pc, #68]	; (356f0 <sw_timer_task+0xc4>)
   356ac:	681b      	ldr	r3, [r3, #0]
   356ae:	18d2      	adds	r2, r2, r3
   356b0:	68bb      	ldr	r3, [r7, #8]
   356b2:	611a      	str	r2, [r3, #16]
   356b4:	e004      	b.n	356c0 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   356b6:	68bb      	ldr	r3, [r7, #8]
   356b8:	781a      	ldrb	r2, [r3, #0]
   356ba:	2102      	movs	r1, #2
   356bc:	438a      	bics	r2, r1
   356be:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   356c0:	68bb      	ldr	r3, [r7, #8]
   356c2:	685c      	ldr	r4, [r3, #4]
   356c4:	68bb      	ldr	r3, [r7, #8]
   356c6:	689a      	ldr	r2, [r3, #8]
   356c8:	68bb      	ldr	r3, [r7, #8]
   356ca:	68db      	ldr	r3, [r3, #12]
   356cc:	68f9      	ldr	r1, [r7, #12]
   356ce:	6878      	ldr	r0, [r7, #4]
   356d0:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   356d2:	68bb      	ldr	r3, [r7, #8]
   356d4:	781a      	ldrb	r2, [r3, #0]
   356d6:	2104      	movs	r1, #4
   356d8:	438a      	bics	r2, r1
   356da:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   356dc:	68fb      	ldr	r3, [r7, #12]
   356de:	3301      	adds	r3, #1
   356e0:	60fb      	str	r3, [r7, #12]
   356e2:	68fb      	ldr	r3, [r7, #12]
   356e4:	2b00      	cmp	r3, #0
   356e6:	dda8      	ble.n	3563a <sw_timer_task+0xe>
			}
		}
	}
}
   356e8:	46c0      	nop			; (mov r8, r8)
   356ea:	46bd      	mov	sp, r7
   356ec:	b005      	add	sp, #20
   356ee:	bd90      	pop	{r4, r7, pc}
   356f0:	20004630 	.word	0x20004630

000356f4 <main>:
/**
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void){
   356f4:	b580      	push	{r7, lr}
   356f6:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   356f8:	4b06      	ldr	r3, [pc, #24]	; (35714 <main+0x20>)
   356fa:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   356fc:	4b06      	ldr	r3, [pc, #24]	; (35718 <main+0x24>)
   356fe:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   35700:	2001      	movs	r0, #1
   35702:	4b06      	ldr	r3, [pc, #24]	; (3571c <main+0x28>)
   35704:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   35706:	4b06      	ldr	r3, [pc, #24]	; (35720 <main+0x2c>)
   35708:	4798      	blx	r3

    return 0;  // Will not get here
   3570a:	2300      	movs	r3, #0
}
   3570c:	0018      	movs	r0, r3
   3570e:	46bd      	mov	sp, r7
   35710:	bd80      	pop	{r7, pc}
   35712:	46c0      	nop			; (mov r8, r8)
   35714:	0002d1e5 	.word	0x0002d1e5
   35718:	00020b55 	.word	0x00020b55
   3571c:	0001b225 	.word	0x0001b225
   35720:	0001f1ad 	.word	0x0001f1ad

00035724 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   35724:	b590      	push	{r4, r7, lr}
   35726:	b083      	sub	sp, #12
   35728:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   3572a:	4b3c      	ldr	r3, [pc, #240]	; (3581c <vApplicationDaemonTaskStartupHook+0xf8>)
   3572c:	0018      	movs	r0, r3
   3572e:	4b3c      	ldr	r3, [pc, #240]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   35730:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   35732:	4b3c      	ldr	r3, [pc, #240]	; (35824 <vApplicationDaemonTaskStartupHook+0x100>)
   35734:	0018      	movs	r0, r3
   35736:	4b3a      	ldr	r3, [pc, #232]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   35738:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   3573a:	4b3b      	ldr	r3, [pc, #236]	; (35828 <vApplicationDaemonTaskStartupHook+0x104>)
   3573c:	4798      	blx	r3
   3573e:	1e03      	subs	r3, r0, #0
   35740:	d004      	beq.n	3574c <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   35742:	4b3a      	ldr	r3, [pc, #232]	; (3582c <vApplicationDaemonTaskStartupHook+0x108>)
   35744:	0018      	movs	r0, r3
   35746:	4b36      	ldr	r3, [pc, #216]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   35748:	4798      	blx	r3
   3574a:	e003      	b.n	35754 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   3574c:	4b38      	ldr	r3, [pc, #224]	; (35830 <vApplicationDaemonTaskStartupHook+0x10c>)
   3574e:	0018      	movs	r0, r3
   35750:	4b33      	ldr	r3, [pc, #204]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   35752:	4798      	blx	r3
    }


	// init ACC
	/**/
	uint8_t whoamI_acc = 0;
   35754:	1cfb      	adds	r3, r7, #3
   35756:	2200      	movs	r2, #0
   35758:	701a      	strb	r2, [r3, #0]
	lis2dh12_device_id_get(GetAccStruct(), &whoamI_acc);
   3575a:	4b36      	ldr	r3, [pc, #216]	; (35834 <vApplicationDaemonTaskStartupHook+0x110>)
   3575c:	4798      	blx	r3
   3575e:	0002      	movs	r2, r0
   35760:	1cfb      	adds	r3, r7, #3
   35762:	0019      	movs	r1, r3
   35764:	0010      	movs	r0, r2
   35766:	4b34      	ldr	r3, [pc, #208]	; (35838 <vApplicationDaemonTaskStartupHook+0x114>)
   35768:	4798      	blx	r3
	
	if (whoamI_acc != LIS2DH12_ID) {
   3576a:	1cfb      	adds	r3, r7, #3
   3576c:	781b      	ldrb	r3, [r3, #0]
   3576e:	2b33      	cmp	r3, #51	; 0x33
   35770:	d004      	beq.n	3577c <vApplicationDaemonTaskStartupHook+0x58>
		SerialConsoleWriteString("Cannot find ACC!\r\n");
   35772:	4b32      	ldr	r3, [pc, #200]	; (3583c <vApplicationDaemonTaskStartupHook+0x118>)
   35774:	0018      	movs	r0, r3
   35776:	4b2a      	ldr	r3, [pc, #168]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   35778:	4798      	blx	r3
   3577a:	e00c      	b.n	35796 <vApplicationDaemonTaskStartupHook+0x72>
	} else {
		//SerialConsoleWriteString("ACC found!\r\n");
		if (init_LIS2DH12() == 0) {
   3577c:	4b30      	ldr	r3, [pc, #192]	; (35840 <vApplicationDaemonTaskStartupHook+0x11c>)
   3577e:	4798      	blx	r3
   35780:	1e03      	subs	r3, r0, #0
   35782:	d104      	bne.n	3578e <vApplicationDaemonTaskStartupHook+0x6a>
			SerialConsoleWriteString("ACC initialized!\r\n");
   35784:	4b2f      	ldr	r3, [pc, #188]	; (35844 <vApplicationDaemonTaskStartupHook+0x120>)
   35786:	0018      	movs	r0, r3
   35788:	4b25      	ldr	r3, [pc, #148]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   3578a:	4798      	blx	r3
   3578c:	e003      	b.n	35796 <vApplicationDaemonTaskStartupHook+0x72>
		} else {
			SerialConsoleWriteString("Could not initialize ACC\r\n");
   3578e:	4b2e      	ldr	r3, [pc, #184]	; (35848 <vApplicationDaemonTaskStartupHook+0x124>)
   35790:	0018      	movs	r0, r3
   35792:	4b23      	ldr	r3, [pc, #140]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   35794:	4798      	blx	r3
		}
	}
	
	
	// init max
	int error = max30102_init_f();
   35796:	4b2d      	ldr	r3, [pc, #180]	; (3584c <vApplicationDaemonTaskStartupHook+0x128>)
   35798:	4798      	blx	r3
   3579a:	0003      	movs	r3, r0
   3579c:	607b      	str	r3, [r7, #4]
	error = max30102_fifo_init();
   3579e:	4b2c      	ldr	r3, [pc, #176]	; (35850 <vApplicationDaemonTaskStartupHook+0x12c>)
   357a0:	4798      	blx	r3
   357a2:	0003      	movs	r3, r0
   357a4:	607b      	str	r3, [r7, #4]
	if (error != 0)
   357a6:	687b      	ldr	r3, [r7, #4]
   357a8:	2b00      	cmp	r3, #0
   357aa:	d004      	beq.n	357b6 <vApplicationDaemonTaskStartupHook+0x92>
	{
		SerialConsoleWriteString("Max initialized failed!\r\n");
   357ac:	4b29      	ldr	r3, [pc, #164]	; (35854 <vApplicationDaemonTaskStartupHook+0x130>)
   357ae:	0018      	movs	r0, r3
   357b0:	4b1b      	ldr	r3, [pc, #108]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   357b2:	4798      	blx	r3
   357b4:	e003      	b.n	357be <vApplicationDaemonTaskStartupHook+0x9a>
	} else {
		SerialConsoleWriteString("Max initialized!\r\n");
   357b6:	4b28      	ldr	r3, [pc, #160]	; (35858 <vApplicationDaemonTaskStartupHook+0x134>)
   357b8:	0018      	movs	r0, r3
   357ba:	4b19      	ldr	r3, [pc, #100]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   357bc:	4798      	blx	r3
	}
	
	
	// init lcd
	lcd_init();
   357be:	4b27      	ldr	r3, [pc, #156]	; (3585c <vApplicationDaemonTaskStartupHook+0x138>)
   357c0:	4798      	blx	r3
	SerialConsoleWriteString("LCD initialized! \n\r");
   357c2:	4b27      	ldr	r3, [pc, #156]	; (35860 <vApplicationDaemonTaskStartupHook+0x13c>)
   357c4:	0018      	movs	r0, r3
   357c6:	4b16      	ldr	r3, [pc, #88]	; (35820 <vApplicationDaemonTaskStartupHook+0xfc>)
   357c8:	4798      	blx	r3
	LCD_setScreen(BOOT_SCREEN_BG_COLOR);
   357ca:	2000      	movs	r0, #0
   357cc:	4b25      	ldr	r3, [pc, #148]	; (35864 <vApplicationDaemonTaskStartupHook+0x140>)
   357ce:	4798      	blx	r3
	draw_boot_screen_title("W e l c o m e !");
   357d0:	4b25      	ldr	r3, [pc, #148]	; (35868 <vApplicationDaemonTaskStartupHook+0x144>)
   357d2:	0018      	movs	r0, r3
   357d4:	4b25      	ldr	r3, [pc, #148]	; (3586c <vApplicationDaemonTaskStartupHook+0x148>)
   357d6:	4798      	blx	r3
	draw_boot_screen_subtitle("By ESE516 DarkMoon");
   357d8:	4b25      	ldr	r3, [pc, #148]	; (35870 <vApplicationDaemonTaskStartupHook+0x14c>)
   357da:	0018      	movs	r0, r3
   357dc:	4b25      	ldr	r3, [pc, #148]	; (35874 <vApplicationDaemonTaskStartupHook+0x150>)
   357de:	4798      	blx	r3
	LCD_setScreen(BG_COLOR);
   357e0:	2000      	movs	r0, #0
   357e2:	4b20      	ldr	r3, [pc, #128]	; (35864 <vApplicationDaemonTaskStartupHook+0x140>)
   357e4:	4798      	blx	r3
	draw_border(3, WHITE);
   357e6:	4b24      	ldr	r3, [pc, #144]	; (35878 <vApplicationDaemonTaskStartupHook+0x154>)
   357e8:	0019      	movs	r1, r3
   357ea:	2003      	movs	r0, #3
   357ec:	4b23      	ldr	r3, [pc, #140]	; (3587c <vApplicationDaemonTaskStartupHook+0x158>)
   357ee:	4798      	blx	r3
	draw_rotating_squares(SCREEN_WIDTH / 2 + 20, SCREEN_HEIGHT / 2 + 10, 10, 0x07FF);
   357f0:	4b23      	ldr	r3, [pc, #140]	; (35880 <vApplicationDaemonTaskStartupHook+0x15c>)
   357f2:	220a      	movs	r2, #10
   357f4:	214a      	movs	r1, #74	; 0x4a
   357f6:	2064      	movs	r0, #100	; 0x64
   357f8:	4c22      	ldr	r4, [pc, #136]	; (35884 <vApplicationDaemonTaskStartupHook+0x160>)
   357fa:	47a0      	blx	r4
	draw_moon_icon(SCREEN_WIDTH / 2 - 50, SCREEN_HEIGHT / 2 - 40, 40);
   357fc:	2228      	movs	r2, #40	; 0x28
   357fe:	2118      	movs	r1, #24
   35800:	201e      	movs	r0, #30
   35802:	4b21      	ldr	r3, [pc, #132]	; (35888 <vApplicationDaemonTaskStartupHook+0x164>)
   35804:	4798      	blx	r3

    StartTasks();
   35806:	4b21      	ldr	r3, [pc, #132]	; (3588c <vApplicationDaemonTaskStartupHook+0x168>)
   35808:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   3580a:	4b21      	ldr	r3, [pc, #132]	; (35890 <vApplicationDaemonTaskStartupHook+0x16c>)
   3580c:	681b      	ldr	r3, [r3, #0]
   3580e:	0018      	movs	r0, r3
   35810:	4b20      	ldr	r3, [pc, #128]	; (35894 <vApplicationDaemonTaskStartupHook+0x170>)
   35812:	4798      	blx	r3
}
   35814:	46c0      	nop			; (mov r8, r8)
   35816:	46bd      	mov	sp, r7
   35818:	b003      	add	sp, #12
   3581a:	bd90      	pop	{r4, r7, pc}
   3581c:	0003e3b4 	.word	0x0003e3b4
   35820:	00020bc5 	.word	0x00020bc5
   35824:	0003e3d8 	.word	0x0003e3d8
   35828:	00017d79 	.word	0x00017d79
   3582c:	0003e3f0 	.word	0x0003e3f0
   35830:	0003e414 	.word	0x0003e414
   35834:	00018915 	.word	0x00018915
   35838:	000187e9 	.word	0x000187e9
   3583c:	0003e430 	.word	0x0003e430
   35840:	00018925 	.word	0x00018925
   35844:	0003e444 	.word	0x0003e444
   35848:	0003e458 	.word	0x0003e458
   3584c:	000177ad 	.word	0x000177ad
   35850:	000173f5 	.word	0x000173f5
   35854:	0003e474 	.word	0x0003e474
   35858:	0003e490 	.word	0x0003e490
   3585c:	00012835 	.word	0x00012835
   35860:	0003e4a4 	.word	0x0003e4a4
   35864:	00012a71 	.word	0x00012a71
   35868:	0003e4b8 	.word	0x0003e4b8
   3586c:	00013495 	.word	0x00013495
   35870:	0003e4c8 	.word	0x0003e4c8
   35874:	00013521 	.word	0x00013521
   35878:	0000ffff 	.word	0x0000ffff
   3587c:	000132a1 	.word	0x000132a1
   35880:	000007ff 	.word	0x000007ff
   35884:	000135a9 	.word	0x000135a9
   35888:	00013425 	.word	0x00013425
   3588c:	00035899 	.word	0x00035899
   35890:	20004638 	.word	0x20004638
   35894:	0001f051 	.word	0x0001f051

00035898 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   35898:	b590      	push	{r4, r7, lr}
   3589a:	b083      	sub	sp, #12
   3589c:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   3589e:	4b31      	ldr	r3, [pc, #196]	; (35964 <StartTasks+0xcc>)
   358a0:	4798      	blx	r3
   358a2:	0003      	movs	r3, r0
   358a4:	4a30      	ldr	r2, [pc, #192]	; (35968 <StartTasks+0xd0>)
   358a6:	4831      	ldr	r0, [pc, #196]	; (3596c <StartTasks+0xd4>)
   358a8:	2140      	movs	r1, #64	; 0x40
   358aa:	4c31      	ldr	r4, [pc, #196]	; (35970 <StartTasks+0xd8>)
   358ac:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   358ae:	4b2f      	ldr	r3, [pc, #188]	; (3596c <StartTasks+0xd4>)
   358b0:	0018      	movs	r0, r3
   358b2:	4b30      	ldr	r3, [pc, #192]	; (35974 <StartTasks+0xdc>)
   358b4:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", 400, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   358b6:	23c8      	movs	r3, #200	; 0xc8
   358b8:	005a      	lsls	r2, r3, #1
   358ba:	492f      	ldr	r1, [pc, #188]	; (35978 <StartTasks+0xe0>)
   358bc:	482f      	ldr	r0, [pc, #188]	; (3597c <StartTasks+0xe4>)
   358be:	4b30      	ldr	r3, [pc, #192]	; (35980 <StartTasks+0xe8>)
   358c0:	9301      	str	r3, [sp, #4]
   358c2:	2304      	movs	r3, #4
   358c4:	9300      	str	r3, [sp, #0]
   358c6:	2300      	movs	r3, #0
   358c8:	4c2e      	ldr	r4, [pc, #184]	; (35984 <StartTasks+0xec>)
   358ca:	47a0      	blx	r4
   358cc:	0003      	movs	r3, r0
   358ce:	2b01      	cmp	r3, #1
   358d0:	d003      	beq.n	358da <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   358d2:	4b2d      	ldr	r3, [pc, #180]	; (35988 <StartTasks+0xf0>)
   358d4:	0018      	movs	r0, r3
   358d6:	4b27      	ldr	r3, [pc, #156]	; (35974 <StartTasks+0xdc>)
   358d8:	4798      	blx	r3
    }

    if (xTaskCreate(vWifiTask, "WIFI_TASK", 700, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   358da:	23af      	movs	r3, #175	; 0xaf
   358dc:	009a      	lsls	r2, r3, #2
   358de:	492b      	ldr	r1, [pc, #172]	; (3598c <StartTasks+0xf4>)
   358e0:	482b      	ldr	r0, [pc, #172]	; (35990 <StartTasks+0xf8>)
   358e2:	4b2c      	ldr	r3, [pc, #176]	; (35994 <StartTasks+0xfc>)
   358e4:	9301      	str	r3, [sp, #4]
   358e6:	2303      	movs	r3, #3
   358e8:	9300      	str	r3, [sp, #0]
   358ea:	2300      	movs	r3, #0
   358ec:	4c25      	ldr	r4, [pc, #148]	; (35984 <StartTasks+0xec>)
   358ee:	47a0      	blx	r4
   358f0:	0003      	movs	r3, r0
   358f2:	2b01      	cmp	r3, #1
   358f4:	d003      	beq.n	358fe <StartTasks+0x66>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   358f6:	4b28      	ldr	r3, [pc, #160]	; (35998 <StartTasks+0x100>)
   358f8:	0018      	movs	r0, r3
   358fa:	4b1e      	ldr	r3, [pc, #120]	; (35974 <StartTasks+0xdc>)
   358fc:	4798      	blx	r3
    }
	
	if (xTaskCreate(vAccTask, "Acc_TASK", 200, NULL, WIFI_PRIORITY - 1, &AccHandle) != pdPASS) {
   358fe:	4927      	ldr	r1, [pc, #156]	; (3599c <StartTasks+0x104>)
   35900:	4827      	ldr	r0, [pc, #156]	; (359a0 <StartTasks+0x108>)
   35902:	4b28      	ldr	r3, [pc, #160]	; (359a4 <StartTasks+0x10c>)
   35904:	9301      	str	r3, [sp, #4]
   35906:	2302      	movs	r3, #2
   35908:	9300      	str	r3, [sp, #0]
   3590a:	2300      	movs	r3, #0
   3590c:	22c8      	movs	r2, #200	; 0xc8
   3590e:	4c1d      	ldr	r4, [pc, #116]	; (35984 <StartTasks+0xec>)
   35910:	47a0      	blx	r4
   35912:	0003      	movs	r3, r0
   35914:	2b01      	cmp	r3, #1
   35916:	d003      	beq.n	35920 <StartTasks+0x88>
		SerialConsoleWriteString("ERR: Acc task could not be initialized!\r\n");
   35918:	4b23      	ldr	r3, [pc, #140]	; (359a8 <StartTasks+0x110>)
   3591a:	0018      	movs	r0, r3
   3591c:	4b15      	ldr	r3, [pc, #84]	; (35974 <StartTasks+0xdc>)
   3591e:	4798      	blx	r3
	}
	
    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   35920:	23af      	movs	r3, #175	; 0xaf
   35922:	009a      	lsls	r2, r3, #2
   35924:	4921      	ldr	r1, [pc, #132]	; (359ac <StartTasks+0x114>)
   35926:	4822      	ldr	r0, [pc, #136]	; (359b0 <StartTasks+0x118>)
   35928:	4b22      	ldr	r3, [pc, #136]	; (359b4 <StartTasks+0x11c>)
   3592a:	9301      	str	r3, [sp, #4]
   3592c:	2304      	movs	r3, #4
   3592e:	9300      	str	r3, [sp, #0]
   35930:	2300      	movs	r3, #0
   35932:	4c14      	ldr	r4, [pc, #80]	; (35984 <StartTasks+0xec>)
   35934:	47a0      	blx	r4
   35936:	0003      	movs	r3, r0
   35938:	2b01      	cmp	r3, #1
   3593a:	d003      	beq.n	35944 <StartTasks+0xac>
	    SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3593c:	4b1e      	ldr	r3, [pc, #120]	; (359b8 <StartTasks+0x120>)
   3593e:	0018      	movs	r0, r3
   35940:	4b0c      	ldr	r3, [pc, #48]	; (35974 <StartTasks+0xdc>)
   35942:	4798      	blx	r3
    }
	
	snprintf(bufferPrint, 64, "Heap after starting UI: %d\r\n", xPortGetFreeHeapSize());
   35944:	4b07      	ldr	r3, [pc, #28]	; (35964 <StartTasks+0xcc>)
   35946:	4798      	blx	r3
   35948:	0003      	movs	r3, r0
   3594a:	4a1c      	ldr	r2, [pc, #112]	; (359bc <StartTasks+0x124>)
   3594c:	4807      	ldr	r0, [pc, #28]	; (3596c <StartTasks+0xd4>)
   3594e:	2140      	movs	r1, #64	; 0x40
   35950:	4c07      	ldr	r4, [pc, #28]	; (35970 <StartTasks+0xd8>)
   35952:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   35954:	4b05      	ldr	r3, [pc, #20]	; (3596c <StartTasks+0xd4>)
   35956:	0018      	movs	r0, r3
   35958:	4b06      	ldr	r3, [pc, #24]	; (35974 <StartTasks+0xdc>)
   3595a:	4798      	blx	r3
}
   3595c:	46c0      	nop			; (mov r8, r8)
   3595e:	46bd      	mov	sp, r7
   35960:	b001      	add	sp, #4
   35962:	bd90      	pop	{r4, r7, pc}
   35964:	0001d191 	.word	0x0001d191
   35968:	0003e4dc 	.word	0x0003e4dc
   3596c:	20005c64 	.word	0x20005c64
   35970:	00038761 	.word	0x00038761
   35974:	00020bc5 	.word	0x00020bc5
   35978:	0003e500 	.word	0x0003e500
   3597c:	00014c8d 	.word	0x00014c8d
   35980:	20004634 	.word	0x20004634
   35984:	0001ebd5 	.word	0x0001ebd5
   35988:	0003e50c 	.word	0x0003e50c
   3598c:	0003e538 	.word	0x0003e538
   35990:	0001a005 	.word	0x0001a005
   35994:	2000463c 	.word	0x2000463c
   35998:	0003e544 	.word	0x0003e544
   3599c:	0003e570 	.word	0x0003e570
   359a0:	00018999 	.word	0x00018999
   359a4:	20004644 	.word	0x20004644
   359a8:	0003e57c 	.word	0x0003e57c
   359ac:	0003e5a8 	.word	0x0003e5a8
   359b0:	00013a69 	.word	0x00013a69
   359b4:	20004640 	.word	0x20004640
   359b8:	0003e5b0 	.word	0x0003e5b0
   359bc:	0003e5dc 	.word	0x0003e5dc

000359c0 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   359c0:	b580      	push	{r7, lr}
   359c2:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   359c4:	4b02      	ldr	r3, [pc, #8]	; (359d0 <vApplicationMallocFailedHook+0x10>)
   359c6:	0018      	movs	r0, r3
   359c8:	4b02      	ldr	r3, [pc, #8]	; (359d4 <vApplicationMallocFailedHook+0x14>)
   359ca:	4798      	blx	r3
    while (1)
   359cc:	e7fe      	b.n	359cc <vApplicationMallocFailedHook+0xc>
   359ce:	46c0      	nop			; (mov r8, r8)
   359d0:	0003e5fc 	.word	0x0003e5fc
   359d4:	00020bc5 	.word	0x00020bc5

000359d8 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   359d8:	b580      	push	{r7, lr}
   359da:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   359dc:	4b02      	ldr	r3, [pc, #8]	; (359e8 <vApplicationStackOverflowHook+0x10>)
   359de:	0018      	movs	r0, r3
   359e0:	4b02      	ldr	r3, [pc, #8]	; (359ec <vApplicationStackOverflowHook+0x14>)
   359e2:	4798      	blx	r3
    while (1)
   359e4:	e7fe      	b.n	359e4 <vApplicationStackOverflowHook+0xc>
   359e6:	46c0      	nop			; (mov r8, r8)
   359e8:	0003e628 	.word	0x0003e628
   359ec:	00020bc5 	.word	0x00020bc5

000359f0 <__udivsi3>:
   359f0:	2200      	movs	r2, #0
   359f2:	0843      	lsrs	r3, r0, #1
   359f4:	428b      	cmp	r3, r1
   359f6:	d374      	bcc.n	35ae2 <__udivsi3+0xf2>
   359f8:	0903      	lsrs	r3, r0, #4
   359fa:	428b      	cmp	r3, r1
   359fc:	d35f      	bcc.n	35abe <__udivsi3+0xce>
   359fe:	0a03      	lsrs	r3, r0, #8
   35a00:	428b      	cmp	r3, r1
   35a02:	d344      	bcc.n	35a8e <__udivsi3+0x9e>
   35a04:	0b03      	lsrs	r3, r0, #12
   35a06:	428b      	cmp	r3, r1
   35a08:	d328      	bcc.n	35a5c <__udivsi3+0x6c>
   35a0a:	0c03      	lsrs	r3, r0, #16
   35a0c:	428b      	cmp	r3, r1
   35a0e:	d30d      	bcc.n	35a2c <__udivsi3+0x3c>
   35a10:	22ff      	movs	r2, #255	; 0xff
   35a12:	0209      	lsls	r1, r1, #8
   35a14:	ba12      	rev	r2, r2
   35a16:	0c03      	lsrs	r3, r0, #16
   35a18:	428b      	cmp	r3, r1
   35a1a:	d302      	bcc.n	35a22 <__udivsi3+0x32>
   35a1c:	1212      	asrs	r2, r2, #8
   35a1e:	0209      	lsls	r1, r1, #8
   35a20:	d065      	beq.n	35aee <__udivsi3+0xfe>
   35a22:	0b03      	lsrs	r3, r0, #12
   35a24:	428b      	cmp	r3, r1
   35a26:	d319      	bcc.n	35a5c <__udivsi3+0x6c>
   35a28:	e000      	b.n	35a2c <__udivsi3+0x3c>
   35a2a:	0a09      	lsrs	r1, r1, #8
   35a2c:	0bc3      	lsrs	r3, r0, #15
   35a2e:	428b      	cmp	r3, r1
   35a30:	d301      	bcc.n	35a36 <__udivsi3+0x46>
   35a32:	03cb      	lsls	r3, r1, #15
   35a34:	1ac0      	subs	r0, r0, r3
   35a36:	4152      	adcs	r2, r2
   35a38:	0b83      	lsrs	r3, r0, #14
   35a3a:	428b      	cmp	r3, r1
   35a3c:	d301      	bcc.n	35a42 <__udivsi3+0x52>
   35a3e:	038b      	lsls	r3, r1, #14
   35a40:	1ac0      	subs	r0, r0, r3
   35a42:	4152      	adcs	r2, r2
   35a44:	0b43      	lsrs	r3, r0, #13
   35a46:	428b      	cmp	r3, r1
   35a48:	d301      	bcc.n	35a4e <__udivsi3+0x5e>
   35a4a:	034b      	lsls	r3, r1, #13
   35a4c:	1ac0      	subs	r0, r0, r3
   35a4e:	4152      	adcs	r2, r2
   35a50:	0b03      	lsrs	r3, r0, #12
   35a52:	428b      	cmp	r3, r1
   35a54:	d301      	bcc.n	35a5a <__udivsi3+0x6a>
   35a56:	030b      	lsls	r3, r1, #12
   35a58:	1ac0      	subs	r0, r0, r3
   35a5a:	4152      	adcs	r2, r2
   35a5c:	0ac3      	lsrs	r3, r0, #11
   35a5e:	428b      	cmp	r3, r1
   35a60:	d301      	bcc.n	35a66 <__udivsi3+0x76>
   35a62:	02cb      	lsls	r3, r1, #11
   35a64:	1ac0      	subs	r0, r0, r3
   35a66:	4152      	adcs	r2, r2
   35a68:	0a83      	lsrs	r3, r0, #10
   35a6a:	428b      	cmp	r3, r1
   35a6c:	d301      	bcc.n	35a72 <__udivsi3+0x82>
   35a6e:	028b      	lsls	r3, r1, #10
   35a70:	1ac0      	subs	r0, r0, r3
   35a72:	4152      	adcs	r2, r2
   35a74:	0a43      	lsrs	r3, r0, #9
   35a76:	428b      	cmp	r3, r1
   35a78:	d301      	bcc.n	35a7e <__udivsi3+0x8e>
   35a7a:	024b      	lsls	r3, r1, #9
   35a7c:	1ac0      	subs	r0, r0, r3
   35a7e:	4152      	adcs	r2, r2
   35a80:	0a03      	lsrs	r3, r0, #8
   35a82:	428b      	cmp	r3, r1
   35a84:	d301      	bcc.n	35a8a <__udivsi3+0x9a>
   35a86:	020b      	lsls	r3, r1, #8
   35a88:	1ac0      	subs	r0, r0, r3
   35a8a:	4152      	adcs	r2, r2
   35a8c:	d2cd      	bcs.n	35a2a <__udivsi3+0x3a>
   35a8e:	09c3      	lsrs	r3, r0, #7
   35a90:	428b      	cmp	r3, r1
   35a92:	d301      	bcc.n	35a98 <__udivsi3+0xa8>
   35a94:	01cb      	lsls	r3, r1, #7
   35a96:	1ac0      	subs	r0, r0, r3
   35a98:	4152      	adcs	r2, r2
   35a9a:	0983      	lsrs	r3, r0, #6
   35a9c:	428b      	cmp	r3, r1
   35a9e:	d301      	bcc.n	35aa4 <__udivsi3+0xb4>
   35aa0:	018b      	lsls	r3, r1, #6
   35aa2:	1ac0      	subs	r0, r0, r3
   35aa4:	4152      	adcs	r2, r2
   35aa6:	0943      	lsrs	r3, r0, #5
   35aa8:	428b      	cmp	r3, r1
   35aaa:	d301      	bcc.n	35ab0 <__udivsi3+0xc0>
   35aac:	014b      	lsls	r3, r1, #5
   35aae:	1ac0      	subs	r0, r0, r3
   35ab0:	4152      	adcs	r2, r2
   35ab2:	0903      	lsrs	r3, r0, #4
   35ab4:	428b      	cmp	r3, r1
   35ab6:	d301      	bcc.n	35abc <__udivsi3+0xcc>
   35ab8:	010b      	lsls	r3, r1, #4
   35aba:	1ac0      	subs	r0, r0, r3
   35abc:	4152      	adcs	r2, r2
   35abe:	08c3      	lsrs	r3, r0, #3
   35ac0:	428b      	cmp	r3, r1
   35ac2:	d301      	bcc.n	35ac8 <__udivsi3+0xd8>
   35ac4:	00cb      	lsls	r3, r1, #3
   35ac6:	1ac0      	subs	r0, r0, r3
   35ac8:	4152      	adcs	r2, r2
   35aca:	0883      	lsrs	r3, r0, #2
   35acc:	428b      	cmp	r3, r1
   35ace:	d301      	bcc.n	35ad4 <__udivsi3+0xe4>
   35ad0:	008b      	lsls	r3, r1, #2
   35ad2:	1ac0      	subs	r0, r0, r3
   35ad4:	4152      	adcs	r2, r2
   35ad6:	0843      	lsrs	r3, r0, #1
   35ad8:	428b      	cmp	r3, r1
   35ada:	d301      	bcc.n	35ae0 <__udivsi3+0xf0>
   35adc:	004b      	lsls	r3, r1, #1
   35ade:	1ac0      	subs	r0, r0, r3
   35ae0:	4152      	adcs	r2, r2
   35ae2:	1a41      	subs	r1, r0, r1
   35ae4:	d200      	bcs.n	35ae8 <__udivsi3+0xf8>
   35ae6:	4601      	mov	r1, r0
   35ae8:	4152      	adcs	r2, r2
   35aea:	4610      	mov	r0, r2
   35aec:	4770      	bx	lr
   35aee:	e7ff      	b.n	35af0 <__udivsi3+0x100>
   35af0:	b501      	push	{r0, lr}
   35af2:	2000      	movs	r0, #0
   35af4:	f000 f8f0 	bl	35cd8 <__aeabi_idiv0>
   35af8:	bd02      	pop	{r1, pc}
   35afa:	46c0      	nop			; (mov r8, r8)

00035afc <__aeabi_uidivmod>:
   35afc:	2900      	cmp	r1, #0
   35afe:	d0f7      	beq.n	35af0 <__udivsi3+0x100>
   35b00:	e776      	b.n	359f0 <__udivsi3>
   35b02:	4770      	bx	lr

00035b04 <__divsi3>:
   35b04:	4603      	mov	r3, r0
   35b06:	430b      	orrs	r3, r1
   35b08:	d47f      	bmi.n	35c0a <__divsi3+0x106>
   35b0a:	2200      	movs	r2, #0
   35b0c:	0843      	lsrs	r3, r0, #1
   35b0e:	428b      	cmp	r3, r1
   35b10:	d374      	bcc.n	35bfc <__divsi3+0xf8>
   35b12:	0903      	lsrs	r3, r0, #4
   35b14:	428b      	cmp	r3, r1
   35b16:	d35f      	bcc.n	35bd8 <__divsi3+0xd4>
   35b18:	0a03      	lsrs	r3, r0, #8
   35b1a:	428b      	cmp	r3, r1
   35b1c:	d344      	bcc.n	35ba8 <__divsi3+0xa4>
   35b1e:	0b03      	lsrs	r3, r0, #12
   35b20:	428b      	cmp	r3, r1
   35b22:	d328      	bcc.n	35b76 <__divsi3+0x72>
   35b24:	0c03      	lsrs	r3, r0, #16
   35b26:	428b      	cmp	r3, r1
   35b28:	d30d      	bcc.n	35b46 <__divsi3+0x42>
   35b2a:	22ff      	movs	r2, #255	; 0xff
   35b2c:	0209      	lsls	r1, r1, #8
   35b2e:	ba12      	rev	r2, r2
   35b30:	0c03      	lsrs	r3, r0, #16
   35b32:	428b      	cmp	r3, r1
   35b34:	d302      	bcc.n	35b3c <__divsi3+0x38>
   35b36:	1212      	asrs	r2, r2, #8
   35b38:	0209      	lsls	r1, r1, #8
   35b3a:	d065      	beq.n	35c08 <__divsi3+0x104>
   35b3c:	0b03      	lsrs	r3, r0, #12
   35b3e:	428b      	cmp	r3, r1
   35b40:	d319      	bcc.n	35b76 <__divsi3+0x72>
   35b42:	e000      	b.n	35b46 <__divsi3+0x42>
   35b44:	0a09      	lsrs	r1, r1, #8
   35b46:	0bc3      	lsrs	r3, r0, #15
   35b48:	428b      	cmp	r3, r1
   35b4a:	d301      	bcc.n	35b50 <__divsi3+0x4c>
   35b4c:	03cb      	lsls	r3, r1, #15
   35b4e:	1ac0      	subs	r0, r0, r3
   35b50:	4152      	adcs	r2, r2
   35b52:	0b83      	lsrs	r3, r0, #14
   35b54:	428b      	cmp	r3, r1
   35b56:	d301      	bcc.n	35b5c <__divsi3+0x58>
   35b58:	038b      	lsls	r3, r1, #14
   35b5a:	1ac0      	subs	r0, r0, r3
   35b5c:	4152      	adcs	r2, r2
   35b5e:	0b43      	lsrs	r3, r0, #13
   35b60:	428b      	cmp	r3, r1
   35b62:	d301      	bcc.n	35b68 <__divsi3+0x64>
   35b64:	034b      	lsls	r3, r1, #13
   35b66:	1ac0      	subs	r0, r0, r3
   35b68:	4152      	adcs	r2, r2
   35b6a:	0b03      	lsrs	r3, r0, #12
   35b6c:	428b      	cmp	r3, r1
   35b6e:	d301      	bcc.n	35b74 <__divsi3+0x70>
   35b70:	030b      	lsls	r3, r1, #12
   35b72:	1ac0      	subs	r0, r0, r3
   35b74:	4152      	adcs	r2, r2
   35b76:	0ac3      	lsrs	r3, r0, #11
   35b78:	428b      	cmp	r3, r1
   35b7a:	d301      	bcc.n	35b80 <__divsi3+0x7c>
   35b7c:	02cb      	lsls	r3, r1, #11
   35b7e:	1ac0      	subs	r0, r0, r3
   35b80:	4152      	adcs	r2, r2
   35b82:	0a83      	lsrs	r3, r0, #10
   35b84:	428b      	cmp	r3, r1
   35b86:	d301      	bcc.n	35b8c <__divsi3+0x88>
   35b88:	028b      	lsls	r3, r1, #10
   35b8a:	1ac0      	subs	r0, r0, r3
   35b8c:	4152      	adcs	r2, r2
   35b8e:	0a43      	lsrs	r3, r0, #9
   35b90:	428b      	cmp	r3, r1
   35b92:	d301      	bcc.n	35b98 <__divsi3+0x94>
   35b94:	024b      	lsls	r3, r1, #9
   35b96:	1ac0      	subs	r0, r0, r3
   35b98:	4152      	adcs	r2, r2
   35b9a:	0a03      	lsrs	r3, r0, #8
   35b9c:	428b      	cmp	r3, r1
   35b9e:	d301      	bcc.n	35ba4 <__divsi3+0xa0>
   35ba0:	020b      	lsls	r3, r1, #8
   35ba2:	1ac0      	subs	r0, r0, r3
   35ba4:	4152      	adcs	r2, r2
   35ba6:	d2cd      	bcs.n	35b44 <__divsi3+0x40>
   35ba8:	09c3      	lsrs	r3, r0, #7
   35baa:	428b      	cmp	r3, r1
   35bac:	d301      	bcc.n	35bb2 <__divsi3+0xae>
   35bae:	01cb      	lsls	r3, r1, #7
   35bb0:	1ac0      	subs	r0, r0, r3
   35bb2:	4152      	adcs	r2, r2
   35bb4:	0983      	lsrs	r3, r0, #6
   35bb6:	428b      	cmp	r3, r1
   35bb8:	d301      	bcc.n	35bbe <__divsi3+0xba>
   35bba:	018b      	lsls	r3, r1, #6
   35bbc:	1ac0      	subs	r0, r0, r3
   35bbe:	4152      	adcs	r2, r2
   35bc0:	0943      	lsrs	r3, r0, #5
   35bc2:	428b      	cmp	r3, r1
   35bc4:	d301      	bcc.n	35bca <__divsi3+0xc6>
   35bc6:	014b      	lsls	r3, r1, #5
   35bc8:	1ac0      	subs	r0, r0, r3
   35bca:	4152      	adcs	r2, r2
   35bcc:	0903      	lsrs	r3, r0, #4
   35bce:	428b      	cmp	r3, r1
   35bd0:	d301      	bcc.n	35bd6 <__divsi3+0xd2>
   35bd2:	010b      	lsls	r3, r1, #4
   35bd4:	1ac0      	subs	r0, r0, r3
   35bd6:	4152      	adcs	r2, r2
   35bd8:	08c3      	lsrs	r3, r0, #3
   35bda:	428b      	cmp	r3, r1
   35bdc:	d301      	bcc.n	35be2 <__divsi3+0xde>
   35bde:	00cb      	lsls	r3, r1, #3
   35be0:	1ac0      	subs	r0, r0, r3
   35be2:	4152      	adcs	r2, r2
   35be4:	0883      	lsrs	r3, r0, #2
   35be6:	428b      	cmp	r3, r1
   35be8:	d301      	bcc.n	35bee <__divsi3+0xea>
   35bea:	008b      	lsls	r3, r1, #2
   35bec:	1ac0      	subs	r0, r0, r3
   35bee:	4152      	adcs	r2, r2
   35bf0:	0843      	lsrs	r3, r0, #1
   35bf2:	428b      	cmp	r3, r1
   35bf4:	d301      	bcc.n	35bfa <__divsi3+0xf6>
   35bf6:	004b      	lsls	r3, r1, #1
   35bf8:	1ac0      	subs	r0, r0, r3
   35bfa:	4152      	adcs	r2, r2
   35bfc:	1a41      	subs	r1, r0, r1
   35bfe:	d200      	bcs.n	35c02 <__divsi3+0xfe>
   35c00:	4601      	mov	r1, r0
   35c02:	4152      	adcs	r2, r2
   35c04:	4610      	mov	r0, r2
   35c06:	4770      	bx	lr
   35c08:	e05d      	b.n	35cc6 <__divsi3+0x1c2>
   35c0a:	0fca      	lsrs	r2, r1, #31
   35c0c:	d000      	beq.n	35c10 <__divsi3+0x10c>
   35c0e:	4249      	negs	r1, r1
   35c10:	1003      	asrs	r3, r0, #32
   35c12:	d300      	bcc.n	35c16 <__divsi3+0x112>
   35c14:	4240      	negs	r0, r0
   35c16:	4053      	eors	r3, r2
   35c18:	2200      	movs	r2, #0
   35c1a:	469c      	mov	ip, r3
   35c1c:	0903      	lsrs	r3, r0, #4
   35c1e:	428b      	cmp	r3, r1
   35c20:	d32d      	bcc.n	35c7e <__divsi3+0x17a>
   35c22:	0a03      	lsrs	r3, r0, #8
   35c24:	428b      	cmp	r3, r1
   35c26:	d312      	bcc.n	35c4e <__divsi3+0x14a>
   35c28:	22fc      	movs	r2, #252	; 0xfc
   35c2a:	0189      	lsls	r1, r1, #6
   35c2c:	ba12      	rev	r2, r2
   35c2e:	0a03      	lsrs	r3, r0, #8
   35c30:	428b      	cmp	r3, r1
   35c32:	d30c      	bcc.n	35c4e <__divsi3+0x14a>
   35c34:	0189      	lsls	r1, r1, #6
   35c36:	1192      	asrs	r2, r2, #6
   35c38:	428b      	cmp	r3, r1
   35c3a:	d308      	bcc.n	35c4e <__divsi3+0x14a>
   35c3c:	0189      	lsls	r1, r1, #6
   35c3e:	1192      	asrs	r2, r2, #6
   35c40:	428b      	cmp	r3, r1
   35c42:	d304      	bcc.n	35c4e <__divsi3+0x14a>
   35c44:	0189      	lsls	r1, r1, #6
   35c46:	d03a      	beq.n	35cbe <__divsi3+0x1ba>
   35c48:	1192      	asrs	r2, r2, #6
   35c4a:	e000      	b.n	35c4e <__divsi3+0x14a>
   35c4c:	0989      	lsrs	r1, r1, #6
   35c4e:	09c3      	lsrs	r3, r0, #7
   35c50:	428b      	cmp	r3, r1
   35c52:	d301      	bcc.n	35c58 <__divsi3+0x154>
   35c54:	01cb      	lsls	r3, r1, #7
   35c56:	1ac0      	subs	r0, r0, r3
   35c58:	4152      	adcs	r2, r2
   35c5a:	0983      	lsrs	r3, r0, #6
   35c5c:	428b      	cmp	r3, r1
   35c5e:	d301      	bcc.n	35c64 <__divsi3+0x160>
   35c60:	018b      	lsls	r3, r1, #6
   35c62:	1ac0      	subs	r0, r0, r3
   35c64:	4152      	adcs	r2, r2
   35c66:	0943      	lsrs	r3, r0, #5
   35c68:	428b      	cmp	r3, r1
   35c6a:	d301      	bcc.n	35c70 <__divsi3+0x16c>
   35c6c:	014b      	lsls	r3, r1, #5
   35c6e:	1ac0      	subs	r0, r0, r3
   35c70:	4152      	adcs	r2, r2
   35c72:	0903      	lsrs	r3, r0, #4
   35c74:	428b      	cmp	r3, r1
   35c76:	d301      	bcc.n	35c7c <__divsi3+0x178>
   35c78:	010b      	lsls	r3, r1, #4
   35c7a:	1ac0      	subs	r0, r0, r3
   35c7c:	4152      	adcs	r2, r2
   35c7e:	08c3      	lsrs	r3, r0, #3
   35c80:	428b      	cmp	r3, r1
   35c82:	d301      	bcc.n	35c88 <__divsi3+0x184>
   35c84:	00cb      	lsls	r3, r1, #3
   35c86:	1ac0      	subs	r0, r0, r3
   35c88:	4152      	adcs	r2, r2
   35c8a:	0883      	lsrs	r3, r0, #2
   35c8c:	428b      	cmp	r3, r1
   35c8e:	d301      	bcc.n	35c94 <__divsi3+0x190>
   35c90:	008b      	lsls	r3, r1, #2
   35c92:	1ac0      	subs	r0, r0, r3
   35c94:	4152      	adcs	r2, r2
   35c96:	d2d9      	bcs.n	35c4c <__divsi3+0x148>
   35c98:	0843      	lsrs	r3, r0, #1
   35c9a:	428b      	cmp	r3, r1
   35c9c:	d301      	bcc.n	35ca2 <__divsi3+0x19e>
   35c9e:	004b      	lsls	r3, r1, #1
   35ca0:	1ac0      	subs	r0, r0, r3
   35ca2:	4152      	adcs	r2, r2
   35ca4:	1a41      	subs	r1, r0, r1
   35ca6:	d200      	bcs.n	35caa <__divsi3+0x1a6>
   35ca8:	4601      	mov	r1, r0
   35caa:	4663      	mov	r3, ip
   35cac:	4152      	adcs	r2, r2
   35cae:	105b      	asrs	r3, r3, #1
   35cb0:	4610      	mov	r0, r2
   35cb2:	d301      	bcc.n	35cb8 <__divsi3+0x1b4>
   35cb4:	4240      	negs	r0, r0
   35cb6:	2b00      	cmp	r3, #0
   35cb8:	d500      	bpl.n	35cbc <__divsi3+0x1b8>
   35cba:	4249      	negs	r1, r1
   35cbc:	4770      	bx	lr
   35cbe:	4663      	mov	r3, ip
   35cc0:	105b      	asrs	r3, r3, #1
   35cc2:	d300      	bcc.n	35cc6 <__divsi3+0x1c2>
   35cc4:	4240      	negs	r0, r0
   35cc6:	b501      	push	{r0, lr}
   35cc8:	2000      	movs	r0, #0
   35cca:	f000 f805 	bl	35cd8 <__aeabi_idiv0>
   35cce:	bd02      	pop	{r1, pc}

00035cd0 <__aeabi_idivmod>:
   35cd0:	2900      	cmp	r1, #0
   35cd2:	d0f8      	beq.n	35cc6 <__divsi3+0x1c2>
   35cd4:	e716      	b.n	35b04 <__divsi3>
   35cd6:	4770      	bx	lr

00035cd8 <__aeabi_idiv0>:
   35cd8:	4770      	bx	lr
   35cda:	46c0      	nop			; (mov r8, r8)

00035cdc <__aeabi_cfrcmple>:
   35cdc:	4684      	mov	ip, r0
   35cde:	1c08      	adds	r0, r1, #0
   35ce0:	4661      	mov	r1, ip
   35ce2:	e7ff      	b.n	35ce4 <__aeabi_cfcmpeq>

00035ce4 <__aeabi_cfcmpeq>:
   35ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   35ce6:	f000 fb9d 	bl	36424 <__lesf2>
   35cea:	2800      	cmp	r0, #0
   35cec:	d401      	bmi.n	35cf2 <__aeabi_cfcmpeq+0xe>
   35cee:	2100      	movs	r1, #0
   35cf0:	42c8      	cmn	r0, r1
   35cf2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00035cf4 <__aeabi_fcmpeq>:
   35cf4:	b510      	push	{r4, lr}
   35cf6:	f000 fb2f 	bl	36358 <__eqsf2>
   35cfa:	4240      	negs	r0, r0
   35cfc:	3001      	adds	r0, #1
   35cfe:	bd10      	pop	{r4, pc}

00035d00 <__aeabi_fcmplt>:
   35d00:	b510      	push	{r4, lr}
   35d02:	f000 fb8f 	bl	36424 <__lesf2>
   35d06:	2800      	cmp	r0, #0
   35d08:	db01      	blt.n	35d0e <__aeabi_fcmplt+0xe>
   35d0a:	2000      	movs	r0, #0
   35d0c:	bd10      	pop	{r4, pc}
   35d0e:	2001      	movs	r0, #1
   35d10:	bd10      	pop	{r4, pc}
   35d12:	46c0      	nop			; (mov r8, r8)

00035d14 <__aeabi_fcmple>:
   35d14:	b510      	push	{r4, lr}
   35d16:	f000 fb85 	bl	36424 <__lesf2>
   35d1a:	2800      	cmp	r0, #0
   35d1c:	dd01      	ble.n	35d22 <__aeabi_fcmple+0xe>
   35d1e:	2000      	movs	r0, #0
   35d20:	bd10      	pop	{r4, pc}
   35d22:	2001      	movs	r0, #1
   35d24:	bd10      	pop	{r4, pc}
   35d26:	46c0      	nop			; (mov r8, r8)

00035d28 <__aeabi_fcmpgt>:
   35d28:	b510      	push	{r4, lr}
   35d2a:	f000 fb3b 	bl	363a4 <__gesf2>
   35d2e:	2800      	cmp	r0, #0
   35d30:	dc01      	bgt.n	35d36 <__aeabi_fcmpgt+0xe>
   35d32:	2000      	movs	r0, #0
   35d34:	bd10      	pop	{r4, pc}
   35d36:	2001      	movs	r0, #1
   35d38:	bd10      	pop	{r4, pc}
   35d3a:	46c0      	nop			; (mov r8, r8)

00035d3c <__aeabi_fcmpge>:
   35d3c:	b510      	push	{r4, lr}
   35d3e:	f000 fb31 	bl	363a4 <__gesf2>
   35d42:	2800      	cmp	r0, #0
   35d44:	da01      	bge.n	35d4a <__aeabi_fcmpge+0xe>
   35d46:	2000      	movs	r0, #0
   35d48:	bd10      	pop	{r4, pc}
   35d4a:	2001      	movs	r0, #1
   35d4c:	bd10      	pop	{r4, pc}
   35d4e:	46c0      	nop			; (mov r8, r8)

00035d50 <__aeabi_lmul>:
   35d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   35d52:	46ce      	mov	lr, r9
   35d54:	4647      	mov	r7, r8
   35d56:	0415      	lsls	r5, r2, #16
   35d58:	0c2d      	lsrs	r5, r5, #16
   35d5a:	002e      	movs	r6, r5
   35d5c:	b580      	push	{r7, lr}
   35d5e:	0407      	lsls	r7, r0, #16
   35d60:	0c14      	lsrs	r4, r2, #16
   35d62:	0c3f      	lsrs	r7, r7, #16
   35d64:	4699      	mov	r9, r3
   35d66:	0c03      	lsrs	r3, r0, #16
   35d68:	437e      	muls	r6, r7
   35d6a:	435d      	muls	r5, r3
   35d6c:	4367      	muls	r7, r4
   35d6e:	4363      	muls	r3, r4
   35d70:	197f      	adds	r7, r7, r5
   35d72:	0c34      	lsrs	r4, r6, #16
   35d74:	19e4      	adds	r4, r4, r7
   35d76:	469c      	mov	ip, r3
   35d78:	42a5      	cmp	r5, r4
   35d7a:	d903      	bls.n	35d84 <__aeabi_lmul+0x34>
   35d7c:	2380      	movs	r3, #128	; 0x80
   35d7e:	025b      	lsls	r3, r3, #9
   35d80:	4698      	mov	r8, r3
   35d82:	44c4      	add	ip, r8
   35d84:	464b      	mov	r3, r9
   35d86:	4351      	muls	r1, r2
   35d88:	4343      	muls	r3, r0
   35d8a:	0436      	lsls	r6, r6, #16
   35d8c:	0c36      	lsrs	r6, r6, #16
   35d8e:	0c25      	lsrs	r5, r4, #16
   35d90:	0424      	lsls	r4, r4, #16
   35d92:	4465      	add	r5, ip
   35d94:	19a4      	adds	r4, r4, r6
   35d96:	1859      	adds	r1, r3, r1
   35d98:	1949      	adds	r1, r1, r5
   35d9a:	0020      	movs	r0, r4
   35d9c:	bc0c      	pop	{r2, r3}
   35d9e:	4690      	mov	r8, r2
   35da0:	4699      	mov	r9, r3
   35da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00035da4 <__aeabi_fadd>:
   35da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   35da6:	46c6      	mov	lr, r8
   35da8:	024e      	lsls	r6, r1, #9
   35daa:	0247      	lsls	r7, r0, #9
   35dac:	0a76      	lsrs	r6, r6, #9
   35dae:	0a7b      	lsrs	r3, r7, #9
   35db0:	0044      	lsls	r4, r0, #1
   35db2:	0fc5      	lsrs	r5, r0, #31
   35db4:	00f7      	lsls	r7, r6, #3
   35db6:	0048      	lsls	r0, r1, #1
   35db8:	4698      	mov	r8, r3
   35dba:	b500      	push	{lr}
   35dbc:	0e24      	lsrs	r4, r4, #24
   35dbe:	002a      	movs	r2, r5
   35dc0:	00db      	lsls	r3, r3, #3
   35dc2:	0e00      	lsrs	r0, r0, #24
   35dc4:	0fc9      	lsrs	r1, r1, #31
   35dc6:	46bc      	mov	ip, r7
   35dc8:	428d      	cmp	r5, r1
   35dca:	d067      	beq.n	35e9c <__aeabi_fadd+0xf8>
   35dcc:	1a22      	subs	r2, r4, r0
   35dce:	2a00      	cmp	r2, #0
   35dd0:	dc00      	bgt.n	35dd4 <__aeabi_fadd+0x30>
   35dd2:	e0a5      	b.n	35f20 <__aeabi_fadd+0x17c>
   35dd4:	2800      	cmp	r0, #0
   35dd6:	d13a      	bne.n	35e4e <__aeabi_fadd+0xaa>
   35dd8:	2f00      	cmp	r7, #0
   35dda:	d100      	bne.n	35dde <__aeabi_fadd+0x3a>
   35ddc:	e093      	b.n	35f06 <__aeabi_fadd+0x162>
   35dde:	1e51      	subs	r1, r2, #1
   35de0:	2900      	cmp	r1, #0
   35de2:	d000      	beq.n	35de6 <__aeabi_fadd+0x42>
   35de4:	e0bc      	b.n	35f60 <__aeabi_fadd+0x1bc>
   35de6:	2401      	movs	r4, #1
   35de8:	1bdb      	subs	r3, r3, r7
   35dea:	015a      	lsls	r2, r3, #5
   35dec:	d546      	bpl.n	35e7c <__aeabi_fadd+0xd8>
   35dee:	019b      	lsls	r3, r3, #6
   35df0:	099e      	lsrs	r6, r3, #6
   35df2:	0030      	movs	r0, r6
   35df4:	f002 fb10 	bl	38418 <__clzsi2>
   35df8:	3805      	subs	r0, #5
   35dfa:	4086      	lsls	r6, r0
   35dfc:	4284      	cmp	r4, r0
   35dfe:	dd00      	ble.n	35e02 <__aeabi_fadd+0x5e>
   35e00:	e09d      	b.n	35f3e <__aeabi_fadd+0x19a>
   35e02:	1b04      	subs	r4, r0, r4
   35e04:	0032      	movs	r2, r6
   35e06:	2020      	movs	r0, #32
   35e08:	3401      	adds	r4, #1
   35e0a:	40e2      	lsrs	r2, r4
   35e0c:	1b04      	subs	r4, r0, r4
   35e0e:	40a6      	lsls	r6, r4
   35e10:	0033      	movs	r3, r6
   35e12:	1e5e      	subs	r6, r3, #1
   35e14:	41b3      	sbcs	r3, r6
   35e16:	2400      	movs	r4, #0
   35e18:	4313      	orrs	r3, r2
   35e1a:	075a      	lsls	r2, r3, #29
   35e1c:	d004      	beq.n	35e28 <__aeabi_fadd+0x84>
   35e1e:	220f      	movs	r2, #15
   35e20:	401a      	ands	r2, r3
   35e22:	2a04      	cmp	r2, #4
   35e24:	d000      	beq.n	35e28 <__aeabi_fadd+0x84>
   35e26:	3304      	adds	r3, #4
   35e28:	015a      	lsls	r2, r3, #5
   35e2a:	d529      	bpl.n	35e80 <__aeabi_fadd+0xdc>
   35e2c:	3401      	adds	r4, #1
   35e2e:	2cff      	cmp	r4, #255	; 0xff
   35e30:	d100      	bne.n	35e34 <__aeabi_fadd+0x90>
   35e32:	e081      	b.n	35f38 <__aeabi_fadd+0x194>
   35e34:	002a      	movs	r2, r5
   35e36:	019b      	lsls	r3, r3, #6
   35e38:	0a5b      	lsrs	r3, r3, #9
   35e3a:	b2e4      	uxtb	r4, r4
   35e3c:	025b      	lsls	r3, r3, #9
   35e3e:	05e4      	lsls	r4, r4, #23
   35e40:	0a58      	lsrs	r0, r3, #9
   35e42:	07d2      	lsls	r2, r2, #31
   35e44:	4320      	orrs	r0, r4
   35e46:	4310      	orrs	r0, r2
   35e48:	bc04      	pop	{r2}
   35e4a:	4690      	mov	r8, r2
   35e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35e4e:	2cff      	cmp	r4, #255	; 0xff
   35e50:	d0e3      	beq.n	35e1a <__aeabi_fadd+0x76>
   35e52:	2180      	movs	r1, #128	; 0x80
   35e54:	0038      	movs	r0, r7
   35e56:	04c9      	lsls	r1, r1, #19
   35e58:	4308      	orrs	r0, r1
   35e5a:	4684      	mov	ip, r0
   35e5c:	2a1b      	cmp	r2, #27
   35e5e:	dd00      	ble.n	35e62 <__aeabi_fadd+0xbe>
   35e60:	e082      	b.n	35f68 <__aeabi_fadd+0x1c4>
   35e62:	2020      	movs	r0, #32
   35e64:	4661      	mov	r1, ip
   35e66:	40d1      	lsrs	r1, r2
   35e68:	1a82      	subs	r2, r0, r2
   35e6a:	4660      	mov	r0, ip
   35e6c:	4090      	lsls	r0, r2
   35e6e:	0002      	movs	r2, r0
   35e70:	1e50      	subs	r0, r2, #1
   35e72:	4182      	sbcs	r2, r0
   35e74:	430a      	orrs	r2, r1
   35e76:	1a9b      	subs	r3, r3, r2
   35e78:	015a      	lsls	r2, r3, #5
   35e7a:	d4b8      	bmi.n	35dee <__aeabi_fadd+0x4a>
   35e7c:	075a      	lsls	r2, r3, #29
   35e7e:	d1ce      	bne.n	35e1e <__aeabi_fadd+0x7a>
   35e80:	08de      	lsrs	r6, r3, #3
   35e82:	002a      	movs	r2, r5
   35e84:	2cff      	cmp	r4, #255	; 0xff
   35e86:	d13a      	bne.n	35efe <__aeabi_fadd+0x15a>
   35e88:	2e00      	cmp	r6, #0
   35e8a:	d100      	bne.n	35e8e <__aeabi_fadd+0xea>
   35e8c:	e0ae      	b.n	35fec <__aeabi_fadd+0x248>
   35e8e:	2380      	movs	r3, #128	; 0x80
   35e90:	03db      	lsls	r3, r3, #15
   35e92:	4333      	orrs	r3, r6
   35e94:	025b      	lsls	r3, r3, #9
   35e96:	0a5b      	lsrs	r3, r3, #9
   35e98:	24ff      	movs	r4, #255	; 0xff
   35e9a:	e7cf      	b.n	35e3c <__aeabi_fadd+0x98>
   35e9c:	1a21      	subs	r1, r4, r0
   35e9e:	2900      	cmp	r1, #0
   35ea0:	dd52      	ble.n	35f48 <__aeabi_fadd+0x1a4>
   35ea2:	2800      	cmp	r0, #0
   35ea4:	d031      	beq.n	35f0a <__aeabi_fadd+0x166>
   35ea6:	2cff      	cmp	r4, #255	; 0xff
   35ea8:	d0b7      	beq.n	35e1a <__aeabi_fadd+0x76>
   35eaa:	2080      	movs	r0, #128	; 0x80
   35eac:	003e      	movs	r6, r7
   35eae:	04c0      	lsls	r0, r0, #19
   35eb0:	4306      	orrs	r6, r0
   35eb2:	46b4      	mov	ip, r6
   35eb4:	291b      	cmp	r1, #27
   35eb6:	dd00      	ble.n	35eba <__aeabi_fadd+0x116>
   35eb8:	e0aa      	b.n	36010 <__aeabi_fadd+0x26c>
   35eba:	2620      	movs	r6, #32
   35ebc:	4660      	mov	r0, ip
   35ebe:	40c8      	lsrs	r0, r1
   35ec0:	1a71      	subs	r1, r6, r1
   35ec2:	4666      	mov	r6, ip
   35ec4:	408e      	lsls	r6, r1
   35ec6:	0031      	movs	r1, r6
   35ec8:	1e4e      	subs	r6, r1, #1
   35eca:	41b1      	sbcs	r1, r6
   35ecc:	4301      	orrs	r1, r0
   35ece:	185b      	adds	r3, r3, r1
   35ed0:	0159      	lsls	r1, r3, #5
   35ed2:	d5d3      	bpl.n	35e7c <__aeabi_fadd+0xd8>
   35ed4:	3401      	adds	r4, #1
   35ed6:	2cff      	cmp	r4, #255	; 0xff
   35ed8:	d100      	bne.n	35edc <__aeabi_fadd+0x138>
   35eda:	e087      	b.n	35fec <__aeabi_fadd+0x248>
   35edc:	2201      	movs	r2, #1
   35ede:	4978      	ldr	r1, [pc, #480]	; (360c0 <__aeabi_fadd+0x31c>)
   35ee0:	401a      	ands	r2, r3
   35ee2:	085b      	lsrs	r3, r3, #1
   35ee4:	400b      	ands	r3, r1
   35ee6:	4313      	orrs	r3, r2
   35ee8:	e797      	b.n	35e1a <__aeabi_fadd+0x76>
   35eea:	2c00      	cmp	r4, #0
   35eec:	d000      	beq.n	35ef0 <__aeabi_fadd+0x14c>
   35eee:	e0a7      	b.n	36040 <__aeabi_fadd+0x29c>
   35ef0:	2b00      	cmp	r3, #0
   35ef2:	d000      	beq.n	35ef6 <__aeabi_fadd+0x152>
   35ef4:	e0b6      	b.n	36064 <__aeabi_fadd+0x2c0>
   35ef6:	1e3b      	subs	r3, r7, #0
   35ef8:	d162      	bne.n	35fc0 <__aeabi_fadd+0x21c>
   35efa:	2600      	movs	r6, #0
   35efc:	2200      	movs	r2, #0
   35efe:	0273      	lsls	r3, r6, #9
   35f00:	0a5b      	lsrs	r3, r3, #9
   35f02:	b2e4      	uxtb	r4, r4
   35f04:	e79a      	b.n	35e3c <__aeabi_fadd+0x98>
   35f06:	0014      	movs	r4, r2
   35f08:	e787      	b.n	35e1a <__aeabi_fadd+0x76>
   35f0a:	2f00      	cmp	r7, #0
   35f0c:	d04d      	beq.n	35faa <__aeabi_fadd+0x206>
   35f0e:	1e48      	subs	r0, r1, #1
   35f10:	2800      	cmp	r0, #0
   35f12:	d157      	bne.n	35fc4 <__aeabi_fadd+0x220>
   35f14:	4463      	add	r3, ip
   35f16:	2401      	movs	r4, #1
   35f18:	015a      	lsls	r2, r3, #5
   35f1a:	d5af      	bpl.n	35e7c <__aeabi_fadd+0xd8>
   35f1c:	2402      	movs	r4, #2
   35f1e:	e7dd      	b.n	35edc <__aeabi_fadd+0x138>
   35f20:	2a00      	cmp	r2, #0
   35f22:	d124      	bne.n	35f6e <__aeabi_fadd+0x1ca>
   35f24:	1c62      	adds	r2, r4, #1
   35f26:	b2d2      	uxtb	r2, r2
   35f28:	2a01      	cmp	r2, #1
   35f2a:	ddde      	ble.n	35eea <__aeabi_fadd+0x146>
   35f2c:	1bde      	subs	r6, r3, r7
   35f2e:	0172      	lsls	r2, r6, #5
   35f30:	d535      	bpl.n	35f9e <__aeabi_fadd+0x1fa>
   35f32:	1afe      	subs	r6, r7, r3
   35f34:	000d      	movs	r5, r1
   35f36:	e75c      	b.n	35df2 <__aeabi_fadd+0x4e>
   35f38:	002a      	movs	r2, r5
   35f3a:	2300      	movs	r3, #0
   35f3c:	e77e      	b.n	35e3c <__aeabi_fadd+0x98>
   35f3e:	0033      	movs	r3, r6
   35f40:	4a60      	ldr	r2, [pc, #384]	; (360c4 <__aeabi_fadd+0x320>)
   35f42:	1a24      	subs	r4, r4, r0
   35f44:	4013      	ands	r3, r2
   35f46:	e768      	b.n	35e1a <__aeabi_fadd+0x76>
   35f48:	2900      	cmp	r1, #0
   35f4a:	d163      	bne.n	36014 <__aeabi_fadd+0x270>
   35f4c:	1c61      	adds	r1, r4, #1
   35f4e:	b2c8      	uxtb	r0, r1
   35f50:	2801      	cmp	r0, #1
   35f52:	dd4e      	ble.n	35ff2 <__aeabi_fadd+0x24e>
   35f54:	29ff      	cmp	r1, #255	; 0xff
   35f56:	d049      	beq.n	35fec <__aeabi_fadd+0x248>
   35f58:	4463      	add	r3, ip
   35f5a:	085b      	lsrs	r3, r3, #1
   35f5c:	000c      	movs	r4, r1
   35f5e:	e75c      	b.n	35e1a <__aeabi_fadd+0x76>
   35f60:	2aff      	cmp	r2, #255	; 0xff
   35f62:	d041      	beq.n	35fe8 <__aeabi_fadd+0x244>
   35f64:	000a      	movs	r2, r1
   35f66:	e779      	b.n	35e5c <__aeabi_fadd+0xb8>
   35f68:	2201      	movs	r2, #1
   35f6a:	1a9b      	subs	r3, r3, r2
   35f6c:	e784      	b.n	35e78 <__aeabi_fadd+0xd4>
   35f6e:	2c00      	cmp	r4, #0
   35f70:	d01d      	beq.n	35fae <__aeabi_fadd+0x20a>
   35f72:	28ff      	cmp	r0, #255	; 0xff
   35f74:	d022      	beq.n	35fbc <__aeabi_fadd+0x218>
   35f76:	2480      	movs	r4, #128	; 0x80
   35f78:	04e4      	lsls	r4, r4, #19
   35f7a:	4252      	negs	r2, r2
   35f7c:	4323      	orrs	r3, r4
   35f7e:	2a1b      	cmp	r2, #27
   35f80:	dd00      	ble.n	35f84 <__aeabi_fadd+0x1e0>
   35f82:	e08a      	b.n	3609a <__aeabi_fadd+0x2f6>
   35f84:	001c      	movs	r4, r3
   35f86:	2520      	movs	r5, #32
   35f88:	40d4      	lsrs	r4, r2
   35f8a:	1aaa      	subs	r2, r5, r2
   35f8c:	4093      	lsls	r3, r2
   35f8e:	1e5a      	subs	r2, r3, #1
   35f90:	4193      	sbcs	r3, r2
   35f92:	4323      	orrs	r3, r4
   35f94:	4662      	mov	r2, ip
   35f96:	0004      	movs	r4, r0
   35f98:	1ad3      	subs	r3, r2, r3
   35f9a:	000d      	movs	r5, r1
   35f9c:	e725      	b.n	35dea <__aeabi_fadd+0x46>
   35f9e:	2e00      	cmp	r6, #0
   35fa0:	d000      	beq.n	35fa4 <__aeabi_fadd+0x200>
   35fa2:	e726      	b.n	35df2 <__aeabi_fadd+0x4e>
   35fa4:	2200      	movs	r2, #0
   35fa6:	2400      	movs	r4, #0
   35fa8:	e7a9      	b.n	35efe <__aeabi_fadd+0x15a>
   35faa:	000c      	movs	r4, r1
   35fac:	e735      	b.n	35e1a <__aeabi_fadd+0x76>
   35fae:	2b00      	cmp	r3, #0
   35fb0:	d04d      	beq.n	3604e <__aeabi_fadd+0x2aa>
   35fb2:	43d2      	mvns	r2, r2
   35fb4:	2a00      	cmp	r2, #0
   35fb6:	d0ed      	beq.n	35f94 <__aeabi_fadd+0x1f0>
   35fb8:	28ff      	cmp	r0, #255	; 0xff
   35fba:	d1e0      	bne.n	35f7e <__aeabi_fadd+0x1da>
   35fbc:	4663      	mov	r3, ip
   35fbe:	24ff      	movs	r4, #255	; 0xff
   35fc0:	000d      	movs	r5, r1
   35fc2:	e72a      	b.n	35e1a <__aeabi_fadd+0x76>
   35fc4:	29ff      	cmp	r1, #255	; 0xff
   35fc6:	d00f      	beq.n	35fe8 <__aeabi_fadd+0x244>
   35fc8:	0001      	movs	r1, r0
   35fca:	e773      	b.n	35eb4 <__aeabi_fadd+0x110>
   35fcc:	2b00      	cmp	r3, #0
   35fce:	d061      	beq.n	36094 <__aeabi_fadd+0x2f0>
   35fd0:	24ff      	movs	r4, #255	; 0xff
   35fd2:	2f00      	cmp	r7, #0
   35fd4:	d100      	bne.n	35fd8 <__aeabi_fadd+0x234>
   35fd6:	e720      	b.n	35e1a <__aeabi_fadd+0x76>
   35fd8:	2280      	movs	r2, #128	; 0x80
   35fda:	4641      	mov	r1, r8
   35fdc:	03d2      	lsls	r2, r2, #15
   35fde:	4211      	tst	r1, r2
   35fe0:	d002      	beq.n	35fe8 <__aeabi_fadd+0x244>
   35fe2:	4216      	tst	r6, r2
   35fe4:	d100      	bne.n	35fe8 <__aeabi_fadd+0x244>
   35fe6:	003b      	movs	r3, r7
   35fe8:	24ff      	movs	r4, #255	; 0xff
   35fea:	e716      	b.n	35e1a <__aeabi_fadd+0x76>
   35fec:	24ff      	movs	r4, #255	; 0xff
   35fee:	2300      	movs	r3, #0
   35ff0:	e724      	b.n	35e3c <__aeabi_fadd+0x98>
   35ff2:	2c00      	cmp	r4, #0
   35ff4:	d1ea      	bne.n	35fcc <__aeabi_fadd+0x228>
   35ff6:	2b00      	cmp	r3, #0
   35ff8:	d058      	beq.n	360ac <__aeabi_fadd+0x308>
   35ffa:	2f00      	cmp	r7, #0
   35ffc:	d100      	bne.n	36000 <__aeabi_fadd+0x25c>
   35ffe:	e70c      	b.n	35e1a <__aeabi_fadd+0x76>
   36000:	4463      	add	r3, ip
   36002:	015a      	lsls	r2, r3, #5
   36004:	d400      	bmi.n	36008 <__aeabi_fadd+0x264>
   36006:	e739      	b.n	35e7c <__aeabi_fadd+0xd8>
   36008:	4a2e      	ldr	r2, [pc, #184]	; (360c4 <__aeabi_fadd+0x320>)
   3600a:	000c      	movs	r4, r1
   3600c:	4013      	ands	r3, r2
   3600e:	e704      	b.n	35e1a <__aeabi_fadd+0x76>
   36010:	2101      	movs	r1, #1
   36012:	e75c      	b.n	35ece <__aeabi_fadd+0x12a>
   36014:	2c00      	cmp	r4, #0
   36016:	d11e      	bne.n	36056 <__aeabi_fadd+0x2b2>
   36018:	2b00      	cmp	r3, #0
   3601a:	d040      	beq.n	3609e <__aeabi_fadd+0x2fa>
   3601c:	43c9      	mvns	r1, r1
   3601e:	2900      	cmp	r1, #0
   36020:	d00b      	beq.n	3603a <__aeabi_fadd+0x296>
   36022:	28ff      	cmp	r0, #255	; 0xff
   36024:	d036      	beq.n	36094 <__aeabi_fadd+0x2f0>
   36026:	291b      	cmp	r1, #27
   36028:	dc47      	bgt.n	360ba <__aeabi_fadd+0x316>
   3602a:	001c      	movs	r4, r3
   3602c:	2620      	movs	r6, #32
   3602e:	40cc      	lsrs	r4, r1
   36030:	1a71      	subs	r1, r6, r1
   36032:	408b      	lsls	r3, r1
   36034:	1e59      	subs	r1, r3, #1
   36036:	418b      	sbcs	r3, r1
   36038:	4323      	orrs	r3, r4
   3603a:	4463      	add	r3, ip
   3603c:	0004      	movs	r4, r0
   3603e:	e747      	b.n	35ed0 <__aeabi_fadd+0x12c>
   36040:	2b00      	cmp	r3, #0
   36042:	d118      	bne.n	36076 <__aeabi_fadd+0x2d2>
   36044:	1e3b      	subs	r3, r7, #0
   36046:	d02d      	beq.n	360a4 <__aeabi_fadd+0x300>
   36048:	000d      	movs	r5, r1
   3604a:	24ff      	movs	r4, #255	; 0xff
   3604c:	e6e5      	b.n	35e1a <__aeabi_fadd+0x76>
   3604e:	003b      	movs	r3, r7
   36050:	0004      	movs	r4, r0
   36052:	000d      	movs	r5, r1
   36054:	e6e1      	b.n	35e1a <__aeabi_fadd+0x76>
   36056:	28ff      	cmp	r0, #255	; 0xff
   36058:	d01c      	beq.n	36094 <__aeabi_fadd+0x2f0>
   3605a:	2480      	movs	r4, #128	; 0x80
   3605c:	04e4      	lsls	r4, r4, #19
   3605e:	4249      	negs	r1, r1
   36060:	4323      	orrs	r3, r4
   36062:	e7e0      	b.n	36026 <__aeabi_fadd+0x282>
   36064:	2f00      	cmp	r7, #0
   36066:	d100      	bne.n	3606a <__aeabi_fadd+0x2c6>
   36068:	e6d7      	b.n	35e1a <__aeabi_fadd+0x76>
   3606a:	1bde      	subs	r6, r3, r7
   3606c:	0172      	lsls	r2, r6, #5
   3606e:	d51f      	bpl.n	360b0 <__aeabi_fadd+0x30c>
   36070:	1afb      	subs	r3, r7, r3
   36072:	000d      	movs	r5, r1
   36074:	e6d1      	b.n	35e1a <__aeabi_fadd+0x76>
   36076:	24ff      	movs	r4, #255	; 0xff
   36078:	2f00      	cmp	r7, #0
   3607a:	d100      	bne.n	3607e <__aeabi_fadd+0x2da>
   3607c:	e6cd      	b.n	35e1a <__aeabi_fadd+0x76>
   3607e:	2280      	movs	r2, #128	; 0x80
   36080:	4640      	mov	r0, r8
   36082:	03d2      	lsls	r2, r2, #15
   36084:	4210      	tst	r0, r2
   36086:	d0af      	beq.n	35fe8 <__aeabi_fadd+0x244>
   36088:	4216      	tst	r6, r2
   3608a:	d1ad      	bne.n	35fe8 <__aeabi_fadd+0x244>
   3608c:	003b      	movs	r3, r7
   3608e:	000d      	movs	r5, r1
   36090:	24ff      	movs	r4, #255	; 0xff
   36092:	e6c2      	b.n	35e1a <__aeabi_fadd+0x76>
   36094:	4663      	mov	r3, ip
   36096:	24ff      	movs	r4, #255	; 0xff
   36098:	e6bf      	b.n	35e1a <__aeabi_fadd+0x76>
   3609a:	2301      	movs	r3, #1
   3609c:	e77a      	b.n	35f94 <__aeabi_fadd+0x1f0>
   3609e:	003b      	movs	r3, r7
   360a0:	0004      	movs	r4, r0
   360a2:	e6ba      	b.n	35e1a <__aeabi_fadd+0x76>
   360a4:	2680      	movs	r6, #128	; 0x80
   360a6:	2200      	movs	r2, #0
   360a8:	03f6      	lsls	r6, r6, #15
   360aa:	e6f0      	b.n	35e8e <__aeabi_fadd+0xea>
   360ac:	003b      	movs	r3, r7
   360ae:	e6b4      	b.n	35e1a <__aeabi_fadd+0x76>
   360b0:	1e33      	subs	r3, r6, #0
   360b2:	d000      	beq.n	360b6 <__aeabi_fadd+0x312>
   360b4:	e6e2      	b.n	35e7c <__aeabi_fadd+0xd8>
   360b6:	2200      	movs	r2, #0
   360b8:	e721      	b.n	35efe <__aeabi_fadd+0x15a>
   360ba:	2301      	movs	r3, #1
   360bc:	e7bd      	b.n	3603a <__aeabi_fadd+0x296>
   360be:	46c0      	nop			; (mov r8, r8)
   360c0:	7dffffff 	.word	0x7dffffff
   360c4:	fbffffff 	.word	0xfbffffff

000360c8 <__aeabi_fdiv>:
   360c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   360ca:	4657      	mov	r7, sl
   360cc:	464e      	mov	r6, r9
   360ce:	46de      	mov	lr, fp
   360d0:	4645      	mov	r5, r8
   360d2:	b5e0      	push	{r5, r6, r7, lr}
   360d4:	0244      	lsls	r4, r0, #9
   360d6:	0043      	lsls	r3, r0, #1
   360d8:	0fc6      	lsrs	r6, r0, #31
   360da:	b083      	sub	sp, #12
   360dc:	1c0f      	adds	r7, r1, #0
   360de:	0a64      	lsrs	r4, r4, #9
   360e0:	0e1b      	lsrs	r3, r3, #24
   360e2:	46b2      	mov	sl, r6
   360e4:	d053      	beq.n	3618e <__aeabi_fdiv+0xc6>
   360e6:	2bff      	cmp	r3, #255	; 0xff
   360e8:	d027      	beq.n	3613a <__aeabi_fdiv+0x72>
   360ea:	2280      	movs	r2, #128	; 0x80
   360ec:	00e4      	lsls	r4, r4, #3
   360ee:	04d2      	lsls	r2, r2, #19
   360f0:	4314      	orrs	r4, r2
   360f2:	227f      	movs	r2, #127	; 0x7f
   360f4:	4252      	negs	r2, r2
   360f6:	4690      	mov	r8, r2
   360f8:	4498      	add	r8, r3
   360fa:	2300      	movs	r3, #0
   360fc:	4699      	mov	r9, r3
   360fe:	469b      	mov	fp, r3
   36100:	027d      	lsls	r5, r7, #9
   36102:	0078      	lsls	r0, r7, #1
   36104:	0ffb      	lsrs	r3, r7, #31
   36106:	0a6d      	lsrs	r5, r5, #9
   36108:	0e00      	lsrs	r0, r0, #24
   3610a:	9300      	str	r3, [sp, #0]
   3610c:	d024      	beq.n	36158 <__aeabi_fdiv+0x90>
   3610e:	28ff      	cmp	r0, #255	; 0xff
   36110:	d046      	beq.n	361a0 <__aeabi_fdiv+0xd8>
   36112:	2380      	movs	r3, #128	; 0x80
   36114:	2100      	movs	r1, #0
   36116:	00ed      	lsls	r5, r5, #3
   36118:	04db      	lsls	r3, r3, #19
   3611a:	431d      	orrs	r5, r3
   3611c:	387f      	subs	r0, #127	; 0x7f
   3611e:	4647      	mov	r7, r8
   36120:	1a38      	subs	r0, r7, r0
   36122:	464f      	mov	r7, r9
   36124:	430f      	orrs	r7, r1
   36126:	00bf      	lsls	r7, r7, #2
   36128:	46b9      	mov	r9, r7
   3612a:	0033      	movs	r3, r6
   3612c:	9a00      	ldr	r2, [sp, #0]
   3612e:	4f87      	ldr	r7, [pc, #540]	; (3634c <__aeabi_fdiv+0x284>)
   36130:	4053      	eors	r3, r2
   36132:	464a      	mov	r2, r9
   36134:	58ba      	ldr	r2, [r7, r2]
   36136:	9301      	str	r3, [sp, #4]
   36138:	4697      	mov	pc, r2
   3613a:	2c00      	cmp	r4, #0
   3613c:	d14e      	bne.n	361dc <__aeabi_fdiv+0x114>
   3613e:	2308      	movs	r3, #8
   36140:	4699      	mov	r9, r3
   36142:	33f7      	adds	r3, #247	; 0xf7
   36144:	4698      	mov	r8, r3
   36146:	3bfd      	subs	r3, #253	; 0xfd
   36148:	469b      	mov	fp, r3
   3614a:	027d      	lsls	r5, r7, #9
   3614c:	0078      	lsls	r0, r7, #1
   3614e:	0ffb      	lsrs	r3, r7, #31
   36150:	0a6d      	lsrs	r5, r5, #9
   36152:	0e00      	lsrs	r0, r0, #24
   36154:	9300      	str	r3, [sp, #0]
   36156:	d1da      	bne.n	3610e <__aeabi_fdiv+0x46>
   36158:	2d00      	cmp	r5, #0
   3615a:	d126      	bne.n	361aa <__aeabi_fdiv+0xe2>
   3615c:	2000      	movs	r0, #0
   3615e:	2101      	movs	r1, #1
   36160:	0033      	movs	r3, r6
   36162:	9a00      	ldr	r2, [sp, #0]
   36164:	4f7a      	ldr	r7, [pc, #488]	; (36350 <__aeabi_fdiv+0x288>)
   36166:	4053      	eors	r3, r2
   36168:	4642      	mov	r2, r8
   3616a:	1a10      	subs	r0, r2, r0
   3616c:	464a      	mov	r2, r9
   3616e:	430a      	orrs	r2, r1
   36170:	0092      	lsls	r2, r2, #2
   36172:	58ba      	ldr	r2, [r7, r2]
   36174:	001d      	movs	r5, r3
   36176:	4697      	mov	pc, r2
   36178:	9b00      	ldr	r3, [sp, #0]
   3617a:	002c      	movs	r4, r5
   3617c:	469a      	mov	sl, r3
   3617e:	468b      	mov	fp, r1
   36180:	465b      	mov	r3, fp
   36182:	2b02      	cmp	r3, #2
   36184:	d131      	bne.n	361ea <__aeabi_fdiv+0x122>
   36186:	4653      	mov	r3, sl
   36188:	21ff      	movs	r1, #255	; 0xff
   3618a:	2400      	movs	r4, #0
   3618c:	e038      	b.n	36200 <__aeabi_fdiv+0x138>
   3618e:	2c00      	cmp	r4, #0
   36190:	d117      	bne.n	361c2 <__aeabi_fdiv+0xfa>
   36192:	2304      	movs	r3, #4
   36194:	4699      	mov	r9, r3
   36196:	2300      	movs	r3, #0
   36198:	4698      	mov	r8, r3
   3619a:	3301      	adds	r3, #1
   3619c:	469b      	mov	fp, r3
   3619e:	e7af      	b.n	36100 <__aeabi_fdiv+0x38>
   361a0:	20ff      	movs	r0, #255	; 0xff
   361a2:	2d00      	cmp	r5, #0
   361a4:	d10b      	bne.n	361be <__aeabi_fdiv+0xf6>
   361a6:	2102      	movs	r1, #2
   361a8:	e7da      	b.n	36160 <__aeabi_fdiv+0x98>
   361aa:	0028      	movs	r0, r5
   361ac:	f002 f934 	bl	38418 <__clzsi2>
   361b0:	1f43      	subs	r3, r0, #5
   361b2:	409d      	lsls	r5, r3
   361b4:	2376      	movs	r3, #118	; 0x76
   361b6:	425b      	negs	r3, r3
   361b8:	1a18      	subs	r0, r3, r0
   361ba:	2100      	movs	r1, #0
   361bc:	e7af      	b.n	3611e <__aeabi_fdiv+0x56>
   361be:	2103      	movs	r1, #3
   361c0:	e7ad      	b.n	3611e <__aeabi_fdiv+0x56>
   361c2:	0020      	movs	r0, r4
   361c4:	f002 f928 	bl	38418 <__clzsi2>
   361c8:	1f43      	subs	r3, r0, #5
   361ca:	409c      	lsls	r4, r3
   361cc:	2376      	movs	r3, #118	; 0x76
   361ce:	425b      	negs	r3, r3
   361d0:	1a1b      	subs	r3, r3, r0
   361d2:	4698      	mov	r8, r3
   361d4:	2300      	movs	r3, #0
   361d6:	4699      	mov	r9, r3
   361d8:	469b      	mov	fp, r3
   361da:	e791      	b.n	36100 <__aeabi_fdiv+0x38>
   361dc:	230c      	movs	r3, #12
   361de:	4699      	mov	r9, r3
   361e0:	33f3      	adds	r3, #243	; 0xf3
   361e2:	4698      	mov	r8, r3
   361e4:	3bfc      	subs	r3, #252	; 0xfc
   361e6:	469b      	mov	fp, r3
   361e8:	e78a      	b.n	36100 <__aeabi_fdiv+0x38>
   361ea:	2b03      	cmp	r3, #3
   361ec:	d100      	bne.n	361f0 <__aeabi_fdiv+0x128>
   361ee:	e0a5      	b.n	3633c <__aeabi_fdiv+0x274>
   361f0:	4655      	mov	r5, sl
   361f2:	2b01      	cmp	r3, #1
   361f4:	d000      	beq.n	361f8 <__aeabi_fdiv+0x130>
   361f6:	e081      	b.n	362fc <__aeabi_fdiv+0x234>
   361f8:	2301      	movs	r3, #1
   361fa:	2100      	movs	r1, #0
   361fc:	2400      	movs	r4, #0
   361fe:	402b      	ands	r3, r5
   36200:	0264      	lsls	r4, r4, #9
   36202:	05c9      	lsls	r1, r1, #23
   36204:	0a60      	lsrs	r0, r4, #9
   36206:	07db      	lsls	r3, r3, #31
   36208:	4308      	orrs	r0, r1
   3620a:	4318      	orrs	r0, r3
   3620c:	b003      	add	sp, #12
   3620e:	bc3c      	pop	{r2, r3, r4, r5}
   36210:	4690      	mov	r8, r2
   36212:	4699      	mov	r9, r3
   36214:	46a2      	mov	sl, r4
   36216:	46ab      	mov	fp, r5
   36218:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3621a:	2480      	movs	r4, #128	; 0x80
   3621c:	2300      	movs	r3, #0
   3621e:	03e4      	lsls	r4, r4, #15
   36220:	21ff      	movs	r1, #255	; 0xff
   36222:	e7ed      	b.n	36200 <__aeabi_fdiv+0x138>
   36224:	21ff      	movs	r1, #255	; 0xff
   36226:	2400      	movs	r4, #0
   36228:	e7ea      	b.n	36200 <__aeabi_fdiv+0x138>
   3622a:	2301      	movs	r3, #1
   3622c:	1a59      	subs	r1, r3, r1
   3622e:	291b      	cmp	r1, #27
   36230:	dd66      	ble.n	36300 <__aeabi_fdiv+0x238>
   36232:	9a01      	ldr	r2, [sp, #4]
   36234:	4013      	ands	r3, r2
   36236:	2100      	movs	r1, #0
   36238:	2400      	movs	r4, #0
   3623a:	e7e1      	b.n	36200 <__aeabi_fdiv+0x138>
   3623c:	2380      	movs	r3, #128	; 0x80
   3623e:	03db      	lsls	r3, r3, #15
   36240:	421c      	tst	r4, r3
   36242:	d038      	beq.n	362b6 <__aeabi_fdiv+0x1ee>
   36244:	421d      	tst	r5, r3
   36246:	d051      	beq.n	362ec <__aeabi_fdiv+0x224>
   36248:	431c      	orrs	r4, r3
   3624a:	0264      	lsls	r4, r4, #9
   3624c:	0a64      	lsrs	r4, r4, #9
   3624e:	0033      	movs	r3, r6
   36250:	21ff      	movs	r1, #255	; 0xff
   36252:	e7d5      	b.n	36200 <__aeabi_fdiv+0x138>
   36254:	0163      	lsls	r3, r4, #5
   36256:	016c      	lsls	r4, r5, #5
   36258:	42a3      	cmp	r3, r4
   3625a:	d23b      	bcs.n	362d4 <__aeabi_fdiv+0x20c>
   3625c:	261b      	movs	r6, #27
   3625e:	2100      	movs	r1, #0
   36260:	3801      	subs	r0, #1
   36262:	2501      	movs	r5, #1
   36264:	001f      	movs	r7, r3
   36266:	0049      	lsls	r1, r1, #1
   36268:	005b      	lsls	r3, r3, #1
   3626a:	2f00      	cmp	r7, #0
   3626c:	db01      	blt.n	36272 <__aeabi_fdiv+0x1aa>
   3626e:	429c      	cmp	r4, r3
   36270:	d801      	bhi.n	36276 <__aeabi_fdiv+0x1ae>
   36272:	1b1b      	subs	r3, r3, r4
   36274:	4329      	orrs	r1, r5
   36276:	3e01      	subs	r6, #1
   36278:	2e00      	cmp	r6, #0
   3627a:	d1f3      	bne.n	36264 <__aeabi_fdiv+0x19c>
   3627c:	001c      	movs	r4, r3
   3627e:	1e63      	subs	r3, r4, #1
   36280:	419c      	sbcs	r4, r3
   36282:	430c      	orrs	r4, r1
   36284:	0001      	movs	r1, r0
   36286:	317f      	adds	r1, #127	; 0x7f
   36288:	2900      	cmp	r1, #0
   3628a:	ddce      	ble.n	3622a <__aeabi_fdiv+0x162>
   3628c:	0763      	lsls	r3, r4, #29
   3628e:	d004      	beq.n	3629a <__aeabi_fdiv+0x1d2>
   36290:	230f      	movs	r3, #15
   36292:	4023      	ands	r3, r4
   36294:	2b04      	cmp	r3, #4
   36296:	d000      	beq.n	3629a <__aeabi_fdiv+0x1d2>
   36298:	3404      	adds	r4, #4
   3629a:	0123      	lsls	r3, r4, #4
   3629c:	d503      	bpl.n	362a6 <__aeabi_fdiv+0x1de>
   3629e:	0001      	movs	r1, r0
   362a0:	4b2c      	ldr	r3, [pc, #176]	; (36354 <__aeabi_fdiv+0x28c>)
   362a2:	3180      	adds	r1, #128	; 0x80
   362a4:	401c      	ands	r4, r3
   362a6:	29fe      	cmp	r1, #254	; 0xfe
   362a8:	dd0d      	ble.n	362c6 <__aeabi_fdiv+0x1fe>
   362aa:	2301      	movs	r3, #1
   362ac:	9a01      	ldr	r2, [sp, #4]
   362ae:	21ff      	movs	r1, #255	; 0xff
   362b0:	4013      	ands	r3, r2
   362b2:	2400      	movs	r4, #0
   362b4:	e7a4      	b.n	36200 <__aeabi_fdiv+0x138>
   362b6:	2380      	movs	r3, #128	; 0x80
   362b8:	03db      	lsls	r3, r3, #15
   362ba:	431c      	orrs	r4, r3
   362bc:	0264      	lsls	r4, r4, #9
   362be:	0a64      	lsrs	r4, r4, #9
   362c0:	0033      	movs	r3, r6
   362c2:	21ff      	movs	r1, #255	; 0xff
   362c4:	e79c      	b.n	36200 <__aeabi_fdiv+0x138>
   362c6:	2301      	movs	r3, #1
   362c8:	9a01      	ldr	r2, [sp, #4]
   362ca:	01a4      	lsls	r4, r4, #6
   362cc:	0a64      	lsrs	r4, r4, #9
   362ce:	b2c9      	uxtb	r1, r1
   362d0:	4013      	ands	r3, r2
   362d2:	e795      	b.n	36200 <__aeabi_fdiv+0x138>
   362d4:	1b1b      	subs	r3, r3, r4
   362d6:	261a      	movs	r6, #26
   362d8:	2101      	movs	r1, #1
   362da:	e7c2      	b.n	36262 <__aeabi_fdiv+0x19a>
   362dc:	9b00      	ldr	r3, [sp, #0]
   362de:	468b      	mov	fp, r1
   362e0:	469a      	mov	sl, r3
   362e2:	2400      	movs	r4, #0
   362e4:	e74c      	b.n	36180 <__aeabi_fdiv+0xb8>
   362e6:	0263      	lsls	r3, r4, #9
   362e8:	d5e5      	bpl.n	362b6 <__aeabi_fdiv+0x1ee>
   362ea:	2500      	movs	r5, #0
   362ec:	2480      	movs	r4, #128	; 0x80
   362ee:	03e4      	lsls	r4, r4, #15
   362f0:	432c      	orrs	r4, r5
   362f2:	0264      	lsls	r4, r4, #9
   362f4:	0a64      	lsrs	r4, r4, #9
   362f6:	9b00      	ldr	r3, [sp, #0]
   362f8:	21ff      	movs	r1, #255	; 0xff
   362fa:	e781      	b.n	36200 <__aeabi_fdiv+0x138>
   362fc:	9501      	str	r5, [sp, #4]
   362fe:	e7c1      	b.n	36284 <__aeabi_fdiv+0x1bc>
   36300:	0023      	movs	r3, r4
   36302:	2020      	movs	r0, #32
   36304:	40cb      	lsrs	r3, r1
   36306:	1a41      	subs	r1, r0, r1
   36308:	408c      	lsls	r4, r1
   3630a:	1e61      	subs	r1, r4, #1
   3630c:	418c      	sbcs	r4, r1
   3630e:	431c      	orrs	r4, r3
   36310:	0763      	lsls	r3, r4, #29
   36312:	d004      	beq.n	3631e <__aeabi_fdiv+0x256>
   36314:	230f      	movs	r3, #15
   36316:	4023      	ands	r3, r4
   36318:	2b04      	cmp	r3, #4
   3631a:	d000      	beq.n	3631e <__aeabi_fdiv+0x256>
   3631c:	3404      	adds	r4, #4
   3631e:	0163      	lsls	r3, r4, #5
   36320:	d505      	bpl.n	3632e <__aeabi_fdiv+0x266>
   36322:	2301      	movs	r3, #1
   36324:	9a01      	ldr	r2, [sp, #4]
   36326:	2101      	movs	r1, #1
   36328:	4013      	ands	r3, r2
   3632a:	2400      	movs	r4, #0
   3632c:	e768      	b.n	36200 <__aeabi_fdiv+0x138>
   3632e:	2301      	movs	r3, #1
   36330:	9a01      	ldr	r2, [sp, #4]
   36332:	01a4      	lsls	r4, r4, #6
   36334:	0a64      	lsrs	r4, r4, #9
   36336:	4013      	ands	r3, r2
   36338:	2100      	movs	r1, #0
   3633a:	e761      	b.n	36200 <__aeabi_fdiv+0x138>
   3633c:	2380      	movs	r3, #128	; 0x80
   3633e:	03db      	lsls	r3, r3, #15
   36340:	431c      	orrs	r4, r3
   36342:	0264      	lsls	r4, r4, #9
   36344:	0a64      	lsrs	r4, r4, #9
   36346:	4653      	mov	r3, sl
   36348:	21ff      	movs	r1, #255	; 0xff
   3634a:	e759      	b.n	36200 <__aeabi_fdiv+0x138>
   3634c:	0003e650 	.word	0x0003e650
   36350:	0003e690 	.word	0x0003e690
   36354:	f7ffffff 	.word	0xf7ffffff

00036358 <__eqsf2>:
   36358:	b570      	push	{r4, r5, r6, lr}
   3635a:	0042      	lsls	r2, r0, #1
   3635c:	0245      	lsls	r5, r0, #9
   3635e:	024e      	lsls	r6, r1, #9
   36360:	004c      	lsls	r4, r1, #1
   36362:	0fc3      	lsrs	r3, r0, #31
   36364:	0a6d      	lsrs	r5, r5, #9
   36366:	0e12      	lsrs	r2, r2, #24
   36368:	0a76      	lsrs	r6, r6, #9
   3636a:	0e24      	lsrs	r4, r4, #24
   3636c:	0fc9      	lsrs	r1, r1, #31
   3636e:	2001      	movs	r0, #1
   36370:	2aff      	cmp	r2, #255	; 0xff
   36372:	d006      	beq.n	36382 <__eqsf2+0x2a>
   36374:	2cff      	cmp	r4, #255	; 0xff
   36376:	d003      	beq.n	36380 <__eqsf2+0x28>
   36378:	42a2      	cmp	r2, r4
   3637a:	d101      	bne.n	36380 <__eqsf2+0x28>
   3637c:	42b5      	cmp	r5, r6
   3637e:	d006      	beq.n	3638e <__eqsf2+0x36>
   36380:	bd70      	pop	{r4, r5, r6, pc}
   36382:	2d00      	cmp	r5, #0
   36384:	d1fc      	bne.n	36380 <__eqsf2+0x28>
   36386:	2cff      	cmp	r4, #255	; 0xff
   36388:	d1fa      	bne.n	36380 <__eqsf2+0x28>
   3638a:	2e00      	cmp	r6, #0
   3638c:	d1f8      	bne.n	36380 <__eqsf2+0x28>
   3638e:	428b      	cmp	r3, r1
   36390:	d006      	beq.n	363a0 <__eqsf2+0x48>
   36392:	2001      	movs	r0, #1
   36394:	2a00      	cmp	r2, #0
   36396:	d1f3      	bne.n	36380 <__eqsf2+0x28>
   36398:	0028      	movs	r0, r5
   3639a:	1e45      	subs	r5, r0, #1
   3639c:	41a8      	sbcs	r0, r5
   3639e:	e7ef      	b.n	36380 <__eqsf2+0x28>
   363a0:	2000      	movs	r0, #0
   363a2:	e7ed      	b.n	36380 <__eqsf2+0x28>

000363a4 <__gesf2>:
   363a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   363a6:	0042      	lsls	r2, r0, #1
   363a8:	0245      	lsls	r5, r0, #9
   363aa:	024c      	lsls	r4, r1, #9
   363ac:	0fc3      	lsrs	r3, r0, #31
   363ae:	0048      	lsls	r0, r1, #1
   363b0:	0a6d      	lsrs	r5, r5, #9
   363b2:	0e12      	lsrs	r2, r2, #24
   363b4:	0a64      	lsrs	r4, r4, #9
   363b6:	0e00      	lsrs	r0, r0, #24
   363b8:	0fc9      	lsrs	r1, r1, #31
   363ba:	2aff      	cmp	r2, #255	; 0xff
   363bc:	d01e      	beq.n	363fc <__gesf2+0x58>
   363be:	28ff      	cmp	r0, #255	; 0xff
   363c0:	d021      	beq.n	36406 <__gesf2+0x62>
   363c2:	2a00      	cmp	r2, #0
   363c4:	d10a      	bne.n	363dc <__gesf2+0x38>
   363c6:	426e      	negs	r6, r5
   363c8:	416e      	adcs	r6, r5
   363ca:	b2f6      	uxtb	r6, r6
   363cc:	2800      	cmp	r0, #0
   363ce:	d10f      	bne.n	363f0 <__gesf2+0x4c>
   363d0:	2c00      	cmp	r4, #0
   363d2:	d10d      	bne.n	363f0 <__gesf2+0x4c>
   363d4:	2000      	movs	r0, #0
   363d6:	2d00      	cmp	r5, #0
   363d8:	d009      	beq.n	363ee <__gesf2+0x4a>
   363da:	e005      	b.n	363e8 <__gesf2+0x44>
   363dc:	2800      	cmp	r0, #0
   363de:	d101      	bne.n	363e4 <__gesf2+0x40>
   363e0:	2c00      	cmp	r4, #0
   363e2:	d001      	beq.n	363e8 <__gesf2+0x44>
   363e4:	428b      	cmp	r3, r1
   363e6:	d011      	beq.n	3640c <__gesf2+0x68>
   363e8:	2101      	movs	r1, #1
   363ea:	4258      	negs	r0, r3
   363ec:	4308      	orrs	r0, r1
   363ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   363f0:	2e00      	cmp	r6, #0
   363f2:	d0f7      	beq.n	363e4 <__gesf2+0x40>
   363f4:	2001      	movs	r0, #1
   363f6:	3901      	subs	r1, #1
   363f8:	4308      	orrs	r0, r1
   363fa:	e7f8      	b.n	363ee <__gesf2+0x4a>
   363fc:	2d00      	cmp	r5, #0
   363fe:	d0de      	beq.n	363be <__gesf2+0x1a>
   36400:	2002      	movs	r0, #2
   36402:	4240      	negs	r0, r0
   36404:	e7f3      	b.n	363ee <__gesf2+0x4a>
   36406:	2c00      	cmp	r4, #0
   36408:	d0db      	beq.n	363c2 <__gesf2+0x1e>
   3640a:	e7f9      	b.n	36400 <__gesf2+0x5c>
   3640c:	4282      	cmp	r2, r0
   3640e:	dceb      	bgt.n	363e8 <__gesf2+0x44>
   36410:	db04      	blt.n	3641c <__gesf2+0x78>
   36412:	42a5      	cmp	r5, r4
   36414:	d8e8      	bhi.n	363e8 <__gesf2+0x44>
   36416:	2000      	movs	r0, #0
   36418:	42a5      	cmp	r5, r4
   3641a:	d2e8      	bcs.n	363ee <__gesf2+0x4a>
   3641c:	2101      	movs	r1, #1
   3641e:	1e58      	subs	r0, r3, #1
   36420:	4308      	orrs	r0, r1
   36422:	e7e4      	b.n	363ee <__gesf2+0x4a>

00036424 <__lesf2>:
   36424:	b5f0      	push	{r4, r5, r6, r7, lr}
   36426:	0042      	lsls	r2, r0, #1
   36428:	024d      	lsls	r5, r1, #9
   3642a:	004c      	lsls	r4, r1, #1
   3642c:	0246      	lsls	r6, r0, #9
   3642e:	0a76      	lsrs	r6, r6, #9
   36430:	0e12      	lsrs	r2, r2, #24
   36432:	0fc3      	lsrs	r3, r0, #31
   36434:	0a6d      	lsrs	r5, r5, #9
   36436:	0e24      	lsrs	r4, r4, #24
   36438:	0fc9      	lsrs	r1, r1, #31
   3643a:	2aff      	cmp	r2, #255	; 0xff
   3643c:	d016      	beq.n	3646c <__lesf2+0x48>
   3643e:	2cff      	cmp	r4, #255	; 0xff
   36440:	d018      	beq.n	36474 <__lesf2+0x50>
   36442:	2a00      	cmp	r2, #0
   36444:	d10a      	bne.n	3645c <__lesf2+0x38>
   36446:	4270      	negs	r0, r6
   36448:	4170      	adcs	r0, r6
   3644a:	b2c0      	uxtb	r0, r0
   3644c:	2c00      	cmp	r4, #0
   3644e:	d015      	beq.n	3647c <__lesf2+0x58>
   36450:	2800      	cmp	r0, #0
   36452:	d005      	beq.n	36460 <__lesf2+0x3c>
   36454:	2001      	movs	r0, #1
   36456:	3901      	subs	r1, #1
   36458:	4308      	orrs	r0, r1
   3645a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3645c:	2c00      	cmp	r4, #0
   3645e:	d013      	beq.n	36488 <__lesf2+0x64>
   36460:	4299      	cmp	r1, r3
   36462:	d014      	beq.n	3648e <__lesf2+0x6a>
   36464:	2001      	movs	r0, #1
   36466:	425b      	negs	r3, r3
   36468:	4318      	orrs	r0, r3
   3646a:	e7f6      	b.n	3645a <__lesf2+0x36>
   3646c:	2002      	movs	r0, #2
   3646e:	2e00      	cmp	r6, #0
   36470:	d1f3      	bne.n	3645a <__lesf2+0x36>
   36472:	e7e4      	b.n	3643e <__lesf2+0x1a>
   36474:	2002      	movs	r0, #2
   36476:	2d00      	cmp	r5, #0
   36478:	d1ef      	bne.n	3645a <__lesf2+0x36>
   3647a:	e7e2      	b.n	36442 <__lesf2+0x1e>
   3647c:	2d00      	cmp	r5, #0
   3647e:	d1e7      	bne.n	36450 <__lesf2+0x2c>
   36480:	2000      	movs	r0, #0
   36482:	2e00      	cmp	r6, #0
   36484:	d0e9      	beq.n	3645a <__lesf2+0x36>
   36486:	e7ed      	b.n	36464 <__lesf2+0x40>
   36488:	2d00      	cmp	r5, #0
   3648a:	d1e9      	bne.n	36460 <__lesf2+0x3c>
   3648c:	e7ea      	b.n	36464 <__lesf2+0x40>
   3648e:	42a2      	cmp	r2, r4
   36490:	dc06      	bgt.n	364a0 <__lesf2+0x7c>
   36492:	dbdf      	blt.n	36454 <__lesf2+0x30>
   36494:	42ae      	cmp	r6, r5
   36496:	d803      	bhi.n	364a0 <__lesf2+0x7c>
   36498:	2000      	movs	r0, #0
   3649a:	42ae      	cmp	r6, r5
   3649c:	d3da      	bcc.n	36454 <__lesf2+0x30>
   3649e:	e7dc      	b.n	3645a <__lesf2+0x36>
   364a0:	2001      	movs	r0, #1
   364a2:	4249      	negs	r1, r1
   364a4:	4308      	orrs	r0, r1
   364a6:	e7d8      	b.n	3645a <__lesf2+0x36>

000364a8 <__aeabi_fmul>:
   364a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   364aa:	4657      	mov	r7, sl
   364ac:	464e      	mov	r6, r9
   364ae:	4645      	mov	r5, r8
   364b0:	46de      	mov	lr, fp
   364b2:	b5e0      	push	{r5, r6, r7, lr}
   364b4:	0247      	lsls	r7, r0, #9
   364b6:	0046      	lsls	r6, r0, #1
   364b8:	4688      	mov	r8, r1
   364ba:	0a7f      	lsrs	r7, r7, #9
   364bc:	0e36      	lsrs	r6, r6, #24
   364be:	0fc4      	lsrs	r4, r0, #31
   364c0:	2e00      	cmp	r6, #0
   364c2:	d047      	beq.n	36554 <__aeabi_fmul+0xac>
   364c4:	2eff      	cmp	r6, #255	; 0xff
   364c6:	d024      	beq.n	36512 <__aeabi_fmul+0x6a>
   364c8:	00fb      	lsls	r3, r7, #3
   364ca:	2780      	movs	r7, #128	; 0x80
   364cc:	04ff      	lsls	r7, r7, #19
   364ce:	431f      	orrs	r7, r3
   364d0:	2300      	movs	r3, #0
   364d2:	4699      	mov	r9, r3
   364d4:	469a      	mov	sl, r3
   364d6:	3e7f      	subs	r6, #127	; 0x7f
   364d8:	4643      	mov	r3, r8
   364da:	025d      	lsls	r5, r3, #9
   364dc:	0058      	lsls	r0, r3, #1
   364de:	0fdb      	lsrs	r3, r3, #31
   364e0:	0a6d      	lsrs	r5, r5, #9
   364e2:	0e00      	lsrs	r0, r0, #24
   364e4:	4698      	mov	r8, r3
   364e6:	d043      	beq.n	36570 <__aeabi_fmul+0xc8>
   364e8:	28ff      	cmp	r0, #255	; 0xff
   364ea:	d03b      	beq.n	36564 <__aeabi_fmul+0xbc>
   364ec:	00eb      	lsls	r3, r5, #3
   364ee:	2580      	movs	r5, #128	; 0x80
   364f0:	2200      	movs	r2, #0
   364f2:	04ed      	lsls	r5, r5, #19
   364f4:	431d      	orrs	r5, r3
   364f6:	387f      	subs	r0, #127	; 0x7f
   364f8:	1836      	adds	r6, r6, r0
   364fa:	1c73      	adds	r3, r6, #1
   364fc:	4641      	mov	r1, r8
   364fe:	469b      	mov	fp, r3
   36500:	464b      	mov	r3, r9
   36502:	4061      	eors	r1, r4
   36504:	4313      	orrs	r3, r2
   36506:	2b0f      	cmp	r3, #15
   36508:	d864      	bhi.n	365d4 <__aeabi_fmul+0x12c>
   3650a:	4875      	ldr	r0, [pc, #468]	; (366e0 <__aeabi_fmul+0x238>)
   3650c:	009b      	lsls	r3, r3, #2
   3650e:	58c3      	ldr	r3, [r0, r3]
   36510:	469f      	mov	pc, r3
   36512:	2f00      	cmp	r7, #0
   36514:	d142      	bne.n	3659c <__aeabi_fmul+0xf4>
   36516:	2308      	movs	r3, #8
   36518:	4699      	mov	r9, r3
   3651a:	3b06      	subs	r3, #6
   3651c:	26ff      	movs	r6, #255	; 0xff
   3651e:	469a      	mov	sl, r3
   36520:	e7da      	b.n	364d8 <__aeabi_fmul+0x30>
   36522:	4641      	mov	r1, r8
   36524:	2a02      	cmp	r2, #2
   36526:	d028      	beq.n	3657a <__aeabi_fmul+0xd2>
   36528:	2a03      	cmp	r2, #3
   3652a:	d100      	bne.n	3652e <__aeabi_fmul+0x86>
   3652c:	e0ce      	b.n	366cc <__aeabi_fmul+0x224>
   3652e:	2a01      	cmp	r2, #1
   36530:	d000      	beq.n	36534 <__aeabi_fmul+0x8c>
   36532:	e0ac      	b.n	3668e <__aeabi_fmul+0x1e6>
   36534:	4011      	ands	r1, r2
   36536:	2000      	movs	r0, #0
   36538:	2200      	movs	r2, #0
   3653a:	b2cc      	uxtb	r4, r1
   3653c:	0240      	lsls	r0, r0, #9
   3653e:	05d2      	lsls	r2, r2, #23
   36540:	0a40      	lsrs	r0, r0, #9
   36542:	07e4      	lsls	r4, r4, #31
   36544:	4310      	orrs	r0, r2
   36546:	4320      	orrs	r0, r4
   36548:	bc3c      	pop	{r2, r3, r4, r5}
   3654a:	4690      	mov	r8, r2
   3654c:	4699      	mov	r9, r3
   3654e:	46a2      	mov	sl, r4
   36550:	46ab      	mov	fp, r5
   36552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36554:	2f00      	cmp	r7, #0
   36556:	d115      	bne.n	36584 <__aeabi_fmul+0xdc>
   36558:	2304      	movs	r3, #4
   3655a:	4699      	mov	r9, r3
   3655c:	3b03      	subs	r3, #3
   3655e:	2600      	movs	r6, #0
   36560:	469a      	mov	sl, r3
   36562:	e7b9      	b.n	364d8 <__aeabi_fmul+0x30>
   36564:	20ff      	movs	r0, #255	; 0xff
   36566:	2202      	movs	r2, #2
   36568:	2d00      	cmp	r5, #0
   3656a:	d0c5      	beq.n	364f8 <__aeabi_fmul+0x50>
   3656c:	2203      	movs	r2, #3
   3656e:	e7c3      	b.n	364f8 <__aeabi_fmul+0x50>
   36570:	2d00      	cmp	r5, #0
   36572:	d119      	bne.n	365a8 <__aeabi_fmul+0x100>
   36574:	2000      	movs	r0, #0
   36576:	2201      	movs	r2, #1
   36578:	e7be      	b.n	364f8 <__aeabi_fmul+0x50>
   3657a:	2401      	movs	r4, #1
   3657c:	22ff      	movs	r2, #255	; 0xff
   3657e:	400c      	ands	r4, r1
   36580:	2000      	movs	r0, #0
   36582:	e7db      	b.n	3653c <__aeabi_fmul+0x94>
   36584:	0038      	movs	r0, r7
   36586:	f001 ff47 	bl	38418 <__clzsi2>
   3658a:	2676      	movs	r6, #118	; 0x76
   3658c:	1f43      	subs	r3, r0, #5
   3658e:	409f      	lsls	r7, r3
   36590:	2300      	movs	r3, #0
   36592:	4276      	negs	r6, r6
   36594:	1a36      	subs	r6, r6, r0
   36596:	4699      	mov	r9, r3
   36598:	469a      	mov	sl, r3
   3659a:	e79d      	b.n	364d8 <__aeabi_fmul+0x30>
   3659c:	230c      	movs	r3, #12
   3659e:	4699      	mov	r9, r3
   365a0:	3b09      	subs	r3, #9
   365a2:	26ff      	movs	r6, #255	; 0xff
   365a4:	469a      	mov	sl, r3
   365a6:	e797      	b.n	364d8 <__aeabi_fmul+0x30>
   365a8:	0028      	movs	r0, r5
   365aa:	f001 ff35 	bl	38418 <__clzsi2>
   365ae:	1f43      	subs	r3, r0, #5
   365b0:	409d      	lsls	r5, r3
   365b2:	2376      	movs	r3, #118	; 0x76
   365b4:	425b      	negs	r3, r3
   365b6:	1a18      	subs	r0, r3, r0
   365b8:	2200      	movs	r2, #0
   365ba:	e79d      	b.n	364f8 <__aeabi_fmul+0x50>
   365bc:	2080      	movs	r0, #128	; 0x80
   365be:	2400      	movs	r4, #0
   365c0:	03c0      	lsls	r0, r0, #15
   365c2:	22ff      	movs	r2, #255	; 0xff
   365c4:	e7ba      	b.n	3653c <__aeabi_fmul+0x94>
   365c6:	003d      	movs	r5, r7
   365c8:	4652      	mov	r2, sl
   365ca:	e7ab      	b.n	36524 <__aeabi_fmul+0x7c>
   365cc:	003d      	movs	r5, r7
   365ce:	0021      	movs	r1, r4
   365d0:	4652      	mov	r2, sl
   365d2:	e7a7      	b.n	36524 <__aeabi_fmul+0x7c>
   365d4:	0c3b      	lsrs	r3, r7, #16
   365d6:	469c      	mov	ip, r3
   365d8:	042a      	lsls	r2, r5, #16
   365da:	0c12      	lsrs	r2, r2, #16
   365dc:	0c2b      	lsrs	r3, r5, #16
   365de:	0014      	movs	r4, r2
   365e0:	4660      	mov	r0, ip
   365e2:	4665      	mov	r5, ip
   365e4:	043f      	lsls	r7, r7, #16
   365e6:	0c3f      	lsrs	r7, r7, #16
   365e8:	437c      	muls	r4, r7
   365ea:	4342      	muls	r2, r0
   365ec:	435d      	muls	r5, r3
   365ee:	437b      	muls	r3, r7
   365f0:	0c27      	lsrs	r7, r4, #16
   365f2:	189b      	adds	r3, r3, r2
   365f4:	18ff      	adds	r7, r7, r3
   365f6:	42ba      	cmp	r2, r7
   365f8:	d903      	bls.n	36602 <__aeabi_fmul+0x15a>
   365fa:	2380      	movs	r3, #128	; 0x80
   365fc:	025b      	lsls	r3, r3, #9
   365fe:	469c      	mov	ip, r3
   36600:	4465      	add	r5, ip
   36602:	0424      	lsls	r4, r4, #16
   36604:	043a      	lsls	r2, r7, #16
   36606:	0c24      	lsrs	r4, r4, #16
   36608:	1912      	adds	r2, r2, r4
   3660a:	0193      	lsls	r3, r2, #6
   3660c:	1e5c      	subs	r4, r3, #1
   3660e:	41a3      	sbcs	r3, r4
   36610:	0c3f      	lsrs	r7, r7, #16
   36612:	0e92      	lsrs	r2, r2, #26
   36614:	197d      	adds	r5, r7, r5
   36616:	431a      	orrs	r2, r3
   36618:	01ad      	lsls	r5, r5, #6
   3661a:	4315      	orrs	r5, r2
   3661c:	012b      	lsls	r3, r5, #4
   3661e:	d504      	bpl.n	3662a <__aeabi_fmul+0x182>
   36620:	2301      	movs	r3, #1
   36622:	465e      	mov	r6, fp
   36624:	086a      	lsrs	r2, r5, #1
   36626:	401d      	ands	r5, r3
   36628:	4315      	orrs	r5, r2
   3662a:	0032      	movs	r2, r6
   3662c:	327f      	adds	r2, #127	; 0x7f
   3662e:	2a00      	cmp	r2, #0
   36630:	dd25      	ble.n	3667e <__aeabi_fmul+0x1d6>
   36632:	076b      	lsls	r3, r5, #29
   36634:	d004      	beq.n	36640 <__aeabi_fmul+0x198>
   36636:	230f      	movs	r3, #15
   36638:	402b      	ands	r3, r5
   3663a:	2b04      	cmp	r3, #4
   3663c:	d000      	beq.n	36640 <__aeabi_fmul+0x198>
   3663e:	3504      	adds	r5, #4
   36640:	012b      	lsls	r3, r5, #4
   36642:	d503      	bpl.n	3664c <__aeabi_fmul+0x1a4>
   36644:	0032      	movs	r2, r6
   36646:	4b27      	ldr	r3, [pc, #156]	; (366e4 <__aeabi_fmul+0x23c>)
   36648:	3280      	adds	r2, #128	; 0x80
   3664a:	401d      	ands	r5, r3
   3664c:	2afe      	cmp	r2, #254	; 0xfe
   3664e:	dc94      	bgt.n	3657a <__aeabi_fmul+0xd2>
   36650:	2401      	movs	r4, #1
   36652:	01a8      	lsls	r0, r5, #6
   36654:	0a40      	lsrs	r0, r0, #9
   36656:	b2d2      	uxtb	r2, r2
   36658:	400c      	ands	r4, r1
   3665a:	e76f      	b.n	3653c <__aeabi_fmul+0x94>
   3665c:	2080      	movs	r0, #128	; 0x80
   3665e:	03c0      	lsls	r0, r0, #15
   36660:	4207      	tst	r7, r0
   36662:	d007      	beq.n	36674 <__aeabi_fmul+0x1cc>
   36664:	4205      	tst	r5, r0
   36666:	d105      	bne.n	36674 <__aeabi_fmul+0x1cc>
   36668:	4328      	orrs	r0, r5
   3666a:	0240      	lsls	r0, r0, #9
   3666c:	0a40      	lsrs	r0, r0, #9
   3666e:	4644      	mov	r4, r8
   36670:	22ff      	movs	r2, #255	; 0xff
   36672:	e763      	b.n	3653c <__aeabi_fmul+0x94>
   36674:	4338      	orrs	r0, r7
   36676:	0240      	lsls	r0, r0, #9
   36678:	0a40      	lsrs	r0, r0, #9
   3667a:	22ff      	movs	r2, #255	; 0xff
   3667c:	e75e      	b.n	3653c <__aeabi_fmul+0x94>
   3667e:	2401      	movs	r4, #1
   36680:	1aa3      	subs	r3, r4, r2
   36682:	2b1b      	cmp	r3, #27
   36684:	dd05      	ble.n	36692 <__aeabi_fmul+0x1ea>
   36686:	400c      	ands	r4, r1
   36688:	2200      	movs	r2, #0
   3668a:	2000      	movs	r0, #0
   3668c:	e756      	b.n	3653c <__aeabi_fmul+0x94>
   3668e:	465e      	mov	r6, fp
   36690:	e7cb      	b.n	3662a <__aeabi_fmul+0x182>
   36692:	002a      	movs	r2, r5
   36694:	2020      	movs	r0, #32
   36696:	40da      	lsrs	r2, r3
   36698:	1ac3      	subs	r3, r0, r3
   3669a:	409d      	lsls	r5, r3
   3669c:	002b      	movs	r3, r5
   3669e:	1e5d      	subs	r5, r3, #1
   366a0:	41ab      	sbcs	r3, r5
   366a2:	4313      	orrs	r3, r2
   366a4:	075a      	lsls	r2, r3, #29
   366a6:	d004      	beq.n	366b2 <__aeabi_fmul+0x20a>
   366a8:	220f      	movs	r2, #15
   366aa:	401a      	ands	r2, r3
   366ac:	2a04      	cmp	r2, #4
   366ae:	d000      	beq.n	366b2 <__aeabi_fmul+0x20a>
   366b0:	3304      	adds	r3, #4
   366b2:	015a      	lsls	r2, r3, #5
   366b4:	d504      	bpl.n	366c0 <__aeabi_fmul+0x218>
   366b6:	2401      	movs	r4, #1
   366b8:	2201      	movs	r2, #1
   366ba:	400c      	ands	r4, r1
   366bc:	2000      	movs	r0, #0
   366be:	e73d      	b.n	3653c <__aeabi_fmul+0x94>
   366c0:	2401      	movs	r4, #1
   366c2:	019b      	lsls	r3, r3, #6
   366c4:	0a58      	lsrs	r0, r3, #9
   366c6:	400c      	ands	r4, r1
   366c8:	2200      	movs	r2, #0
   366ca:	e737      	b.n	3653c <__aeabi_fmul+0x94>
   366cc:	2080      	movs	r0, #128	; 0x80
   366ce:	2401      	movs	r4, #1
   366d0:	03c0      	lsls	r0, r0, #15
   366d2:	4328      	orrs	r0, r5
   366d4:	0240      	lsls	r0, r0, #9
   366d6:	0a40      	lsrs	r0, r0, #9
   366d8:	400c      	ands	r4, r1
   366da:	22ff      	movs	r2, #255	; 0xff
   366dc:	e72e      	b.n	3653c <__aeabi_fmul+0x94>
   366de:	46c0      	nop			; (mov r8, r8)
   366e0:	0003e6d0 	.word	0x0003e6d0
   366e4:	f7ffffff 	.word	0xf7ffffff

000366e8 <__aeabi_fsub>:
   366e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   366ea:	464f      	mov	r7, r9
   366ec:	46d6      	mov	lr, sl
   366ee:	4646      	mov	r6, r8
   366f0:	0044      	lsls	r4, r0, #1
   366f2:	b5c0      	push	{r6, r7, lr}
   366f4:	0fc2      	lsrs	r2, r0, #31
   366f6:	0247      	lsls	r7, r0, #9
   366f8:	0248      	lsls	r0, r1, #9
   366fa:	0a40      	lsrs	r0, r0, #9
   366fc:	4684      	mov	ip, r0
   366fe:	4666      	mov	r6, ip
   36700:	0a7b      	lsrs	r3, r7, #9
   36702:	0048      	lsls	r0, r1, #1
   36704:	0fc9      	lsrs	r1, r1, #31
   36706:	469a      	mov	sl, r3
   36708:	0e24      	lsrs	r4, r4, #24
   3670a:	0015      	movs	r5, r2
   3670c:	00db      	lsls	r3, r3, #3
   3670e:	0e00      	lsrs	r0, r0, #24
   36710:	4689      	mov	r9, r1
   36712:	00f6      	lsls	r6, r6, #3
   36714:	28ff      	cmp	r0, #255	; 0xff
   36716:	d100      	bne.n	3671a <__aeabi_fsub+0x32>
   36718:	e08f      	b.n	3683a <__aeabi_fsub+0x152>
   3671a:	2101      	movs	r1, #1
   3671c:	464f      	mov	r7, r9
   3671e:	404f      	eors	r7, r1
   36720:	0039      	movs	r1, r7
   36722:	4291      	cmp	r1, r2
   36724:	d066      	beq.n	367f4 <__aeabi_fsub+0x10c>
   36726:	1a22      	subs	r2, r4, r0
   36728:	2a00      	cmp	r2, #0
   3672a:	dc00      	bgt.n	3672e <__aeabi_fsub+0x46>
   3672c:	e09d      	b.n	3686a <__aeabi_fsub+0x182>
   3672e:	2800      	cmp	r0, #0
   36730:	d13d      	bne.n	367ae <__aeabi_fsub+0xc6>
   36732:	2e00      	cmp	r6, #0
   36734:	d100      	bne.n	36738 <__aeabi_fsub+0x50>
   36736:	e08b      	b.n	36850 <__aeabi_fsub+0x168>
   36738:	1e51      	subs	r1, r2, #1
   3673a:	2900      	cmp	r1, #0
   3673c:	d000      	beq.n	36740 <__aeabi_fsub+0x58>
   3673e:	e0b5      	b.n	368ac <__aeabi_fsub+0x1c4>
   36740:	2401      	movs	r4, #1
   36742:	1b9b      	subs	r3, r3, r6
   36744:	015a      	lsls	r2, r3, #5
   36746:	d544      	bpl.n	367d2 <__aeabi_fsub+0xea>
   36748:	019b      	lsls	r3, r3, #6
   3674a:	099f      	lsrs	r7, r3, #6
   3674c:	0038      	movs	r0, r7
   3674e:	f001 fe63 	bl	38418 <__clzsi2>
   36752:	3805      	subs	r0, #5
   36754:	4087      	lsls	r7, r0
   36756:	4284      	cmp	r4, r0
   36758:	dd00      	ble.n	3675c <__aeabi_fsub+0x74>
   3675a:	e096      	b.n	3688a <__aeabi_fsub+0x1a2>
   3675c:	1b04      	subs	r4, r0, r4
   3675e:	003a      	movs	r2, r7
   36760:	2020      	movs	r0, #32
   36762:	3401      	adds	r4, #1
   36764:	40e2      	lsrs	r2, r4
   36766:	1b04      	subs	r4, r0, r4
   36768:	40a7      	lsls	r7, r4
   3676a:	003b      	movs	r3, r7
   3676c:	1e5f      	subs	r7, r3, #1
   3676e:	41bb      	sbcs	r3, r7
   36770:	2400      	movs	r4, #0
   36772:	4313      	orrs	r3, r2
   36774:	075a      	lsls	r2, r3, #29
   36776:	d004      	beq.n	36782 <__aeabi_fsub+0x9a>
   36778:	220f      	movs	r2, #15
   3677a:	401a      	ands	r2, r3
   3677c:	2a04      	cmp	r2, #4
   3677e:	d000      	beq.n	36782 <__aeabi_fsub+0x9a>
   36780:	3304      	adds	r3, #4
   36782:	015a      	lsls	r2, r3, #5
   36784:	d527      	bpl.n	367d6 <__aeabi_fsub+0xee>
   36786:	3401      	adds	r4, #1
   36788:	2cff      	cmp	r4, #255	; 0xff
   3678a:	d100      	bne.n	3678e <__aeabi_fsub+0xa6>
   3678c:	e079      	b.n	36882 <__aeabi_fsub+0x19a>
   3678e:	2201      	movs	r2, #1
   36790:	019b      	lsls	r3, r3, #6
   36792:	0a5b      	lsrs	r3, r3, #9
   36794:	b2e4      	uxtb	r4, r4
   36796:	402a      	ands	r2, r5
   36798:	025b      	lsls	r3, r3, #9
   3679a:	05e4      	lsls	r4, r4, #23
   3679c:	0a58      	lsrs	r0, r3, #9
   3679e:	07d2      	lsls	r2, r2, #31
   367a0:	4320      	orrs	r0, r4
   367a2:	4310      	orrs	r0, r2
   367a4:	bc1c      	pop	{r2, r3, r4}
   367a6:	4690      	mov	r8, r2
   367a8:	4699      	mov	r9, r3
   367aa:	46a2      	mov	sl, r4
   367ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   367ae:	2cff      	cmp	r4, #255	; 0xff
   367b0:	d0e0      	beq.n	36774 <__aeabi_fsub+0x8c>
   367b2:	2180      	movs	r1, #128	; 0x80
   367b4:	04c9      	lsls	r1, r1, #19
   367b6:	430e      	orrs	r6, r1
   367b8:	2a1b      	cmp	r2, #27
   367ba:	dc7b      	bgt.n	368b4 <__aeabi_fsub+0x1cc>
   367bc:	0031      	movs	r1, r6
   367be:	2020      	movs	r0, #32
   367c0:	40d1      	lsrs	r1, r2
   367c2:	1a82      	subs	r2, r0, r2
   367c4:	4096      	lsls	r6, r2
   367c6:	1e72      	subs	r2, r6, #1
   367c8:	4196      	sbcs	r6, r2
   367ca:	430e      	orrs	r6, r1
   367cc:	1b9b      	subs	r3, r3, r6
   367ce:	015a      	lsls	r2, r3, #5
   367d0:	d4ba      	bmi.n	36748 <__aeabi_fsub+0x60>
   367d2:	075a      	lsls	r2, r3, #29
   367d4:	d1d0      	bne.n	36778 <__aeabi_fsub+0x90>
   367d6:	2201      	movs	r2, #1
   367d8:	08df      	lsrs	r7, r3, #3
   367da:	402a      	ands	r2, r5
   367dc:	2cff      	cmp	r4, #255	; 0xff
   367de:	d133      	bne.n	36848 <__aeabi_fsub+0x160>
   367e0:	2f00      	cmp	r7, #0
   367e2:	d100      	bne.n	367e6 <__aeabi_fsub+0xfe>
   367e4:	e0a8      	b.n	36938 <__aeabi_fsub+0x250>
   367e6:	2380      	movs	r3, #128	; 0x80
   367e8:	03db      	lsls	r3, r3, #15
   367ea:	433b      	orrs	r3, r7
   367ec:	025b      	lsls	r3, r3, #9
   367ee:	0a5b      	lsrs	r3, r3, #9
   367f0:	24ff      	movs	r4, #255	; 0xff
   367f2:	e7d1      	b.n	36798 <__aeabi_fsub+0xb0>
   367f4:	1a21      	subs	r1, r4, r0
   367f6:	2900      	cmp	r1, #0
   367f8:	dd4c      	ble.n	36894 <__aeabi_fsub+0x1ac>
   367fa:	2800      	cmp	r0, #0
   367fc:	d02a      	beq.n	36854 <__aeabi_fsub+0x16c>
   367fe:	2cff      	cmp	r4, #255	; 0xff
   36800:	d0b8      	beq.n	36774 <__aeabi_fsub+0x8c>
   36802:	2080      	movs	r0, #128	; 0x80
   36804:	04c0      	lsls	r0, r0, #19
   36806:	4306      	orrs	r6, r0
   36808:	291b      	cmp	r1, #27
   3680a:	dd00      	ble.n	3680e <__aeabi_fsub+0x126>
   3680c:	e0af      	b.n	3696e <__aeabi_fsub+0x286>
   3680e:	0030      	movs	r0, r6
   36810:	2720      	movs	r7, #32
   36812:	40c8      	lsrs	r0, r1
   36814:	1a79      	subs	r1, r7, r1
   36816:	408e      	lsls	r6, r1
   36818:	1e71      	subs	r1, r6, #1
   3681a:	418e      	sbcs	r6, r1
   3681c:	4306      	orrs	r6, r0
   3681e:	199b      	adds	r3, r3, r6
   36820:	0159      	lsls	r1, r3, #5
   36822:	d5d6      	bpl.n	367d2 <__aeabi_fsub+0xea>
   36824:	3401      	adds	r4, #1
   36826:	2cff      	cmp	r4, #255	; 0xff
   36828:	d100      	bne.n	3682c <__aeabi_fsub+0x144>
   3682a:	e085      	b.n	36938 <__aeabi_fsub+0x250>
   3682c:	2201      	movs	r2, #1
   3682e:	497a      	ldr	r1, [pc, #488]	; (36a18 <__aeabi_fsub+0x330>)
   36830:	401a      	ands	r2, r3
   36832:	085b      	lsrs	r3, r3, #1
   36834:	400b      	ands	r3, r1
   36836:	4313      	orrs	r3, r2
   36838:	e79c      	b.n	36774 <__aeabi_fsub+0x8c>
   3683a:	2e00      	cmp	r6, #0
   3683c:	d000      	beq.n	36840 <__aeabi_fsub+0x158>
   3683e:	e770      	b.n	36722 <__aeabi_fsub+0x3a>
   36840:	e76b      	b.n	3671a <__aeabi_fsub+0x32>
   36842:	1e3b      	subs	r3, r7, #0
   36844:	d1c5      	bne.n	367d2 <__aeabi_fsub+0xea>
   36846:	2200      	movs	r2, #0
   36848:	027b      	lsls	r3, r7, #9
   3684a:	0a5b      	lsrs	r3, r3, #9
   3684c:	b2e4      	uxtb	r4, r4
   3684e:	e7a3      	b.n	36798 <__aeabi_fsub+0xb0>
   36850:	0014      	movs	r4, r2
   36852:	e78f      	b.n	36774 <__aeabi_fsub+0x8c>
   36854:	2e00      	cmp	r6, #0
   36856:	d04d      	beq.n	368f4 <__aeabi_fsub+0x20c>
   36858:	1e48      	subs	r0, r1, #1
   3685a:	2800      	cmp	r0, #0
   3685c:	d157      	bne.n	3690e <__aeabi_fsub+0x226>
   3685e:	199b      	adds	r3, r3, r6
   36860:	2401      	movs	r4, #1
   36862:	015a      	lsls	r2, r3, #5
   36864:	d5b5      	bpl.n	367d2 <__aeabi_fsub+0xea>
   36866:	2402      	movs	r4, #2
   36868:	e7e0      	b.n	3682c <__aeabi_fsub+0x144>
   3686a:	2a00      	cmp	r2, #0
   3686c:	d125      	bne.n	368ba <__aeabi_fsub+0x1d2>
   3686e:	1c62      	adds	r2, r4, #1
   36870:	b2d2      	uxtb	r2, r2
   36872:	2a01      	cmp	r2, #1
   36874:	dd72      	ble.n	3695c <__aeabi_fsub+0x274>
   36876:	1b9f      	subs	r7, r3, r6
   36878:	017a      	lsls	r2, r7, #5
   3687a:	d535      	bpl.n	368e8 <__aeabi_fsub+0x200>
   3687c:	1af7      	subs	r7, r6, r3
   3687e:	000d      	movs	r5, r1
   36880:	e764      	b.n	3674c <__aeabi_fsub+0x64>
   36882:	2201      	movs	r2, #1
   36884:	2300      	movs	r3, #0
   36886:	402a      	ands	r2, r5
   36888:	e786      	b.n	36798 <__aeabi_fsub+0xb0>
   3688a:	003b      	movs	r3, r7
   3688c:	4a63      	ldr	r2, [pc, #396]	; (36a1c <__aeabi_fsub+0x334>)
   3688e:	1a24      	subs	r4, r4, r0
   36890:	4013      	ands	r3, r2
   36892:	e76f      	b.n	36774 <__aeabi_fsub+0x8c>
   36894:	2900      	cmp	r1, #0
   36896:	d16c      	bne.n	36972 <__aeabi_fsub+0x28a>
   36898:	1c61      	adds	r1, r4, #1
   3689a:	b2c8      	uxtb	r0, r1
   3689c:	2801      	cmp	r0, #1
   3689e:	dd4e      	ble.n	3693e <__aeabi_fsub+0x256>
   368a0:	29ff      	cmp	r1, #255	; 0xff
   368a2:	d049      	beq.n	36938 <__aeabi_fsub+0x250>
   368a4:	199b      	adds	r3, r3, r6
   368a6:	085b      	lsrs	r3, r3, #1
   368a8:	000c      	movs	r4, r1
   368aa:	e763      	b.n	36774 <__aeabi_fsub+0x8c>
   368ac:	2aff      	cmp	r2, #255	; 0xff
   368ae:	d041      	beq.n	36934 <__aeabi_fsub+0x24c>
   368b0:	000a      	movs	r2, r1
   368b2:	e781      	b.n	367b8 <__aeabi_fsub+0xd0>
   368b4:	2601      	movs	r6, #1
   368b6:	1b9b      	subs	r3, r3, r6
   368b8:	e789      	b.n	367ce <__aeabi_fsub+0xe6>
   368ba:	2c00      	cmp	r4, #0
   368bc:	d01c      	beq.n	368f8 <__aeabi_fsub+0x210>
   368be:	28ff      	cmp	r0, #255	; 0xff
   368c0:	d021      	beq.n	36906 <__aeabi_fsub+0x21e>
   368c2:	2480      	movs	r4, #128	; 0x80
   368c4:	04e4      	lsls	r4, r4, #19
   368c6:	4252      	negs	r2, r2
   368c8:	4323      	orrs	r3, r4
   368ca:	2a1b      	cmp	r2, #27
   368cc:	dd00      	ble.n	368d0 <__aeabi_fsub+0x1e8>
   368ce:	e096      	b.n	369fe <__aeabi_fsub+0x316>
   368d0:	001c      	movs	r4, r3
   368d2:	2520      	movs	r5, #32
   368d4:	40d4      	lsrs	r4, r2
   368d6:	1aaa      	subs	r2, r5, r2
   368d8:	4093      	lsls	r3, r2
   368da:	1e5a      	subs	r2, r3, #1
   368dc:	4193      	sbcs	r3, r2
   368de:	4323      	orrs	r3, r4
   368e0:	1af3      	subs	r3, r6, r3
   368e2:	0004      	movs	r4, r0
   368e4:	000d      	movs	r5, r1
   368e6:	e72d      	b.n	36744 <__aeabi_fsub+0x5c>
   368e8:	2f00      	cmp	r7, #0
   368ea:	d000      	beq.n	368ee <__aeabi_fsub+0x206>
   368ec:	e72e      	b.n	3674c <__aeabi_fsub+0x64>
   368ee:	2200      	movs	r2, #0
   368f0:	2400      	movs	r4, #0
   368f2:	e7a9      	b.n	36848 <__aeabi_fsub+0x160>
   368f4:	000c      	movs	r4, r1
   368f6:	e73d      	b.n	36774 <__aeabi_fsub+0x8c>
   368f8:	2b00      	cmp	r3, #0
   368fa:	d058      	beq.n	369ae <__aeabi_fsub+0x2c6>
   368fc:	43d2      	mvns	r2, r2
   368fe:	2a00      	cmp	r2, #0
   36900:	d0ee      	beq.n	368e0 <__aeabi_fsub+0x1f8>
   36902:	28ff      	cmp	r0, #255	; 0xff
   36904:	d1e1      	bne.n	368ca <__aeabi_fsub+0x1e2>
   36906:	0033      	movs	r3, r6
   36908:	24ff      	movs	r4, #255	; 0xff
   3690a:	000d      	movs	r5, r1
   3690c:	e732      	b.n	36774 <__aeabi_fsub+0x8c>
   3690e:	29ff      	cmp	r1, #255	; 0xff
   36910:	d010      	beq.n	36934 <__aeabi_fsub+0x24c>
   36912:	0001      	movs	r1, r0
   36914:	e778      	b.n	36808 <__aeabi_fsub+0x120>
   36916:	2b00      	cmp	r3, #0
   36918:	d06e      	beq.n	369f8 <__aeabi_fsub+0x310>
   3691a:	24ff      	movs	r4, #255	; 0xff
   3691c:	2e00      	cmp	r6, #0
   3691e:	d100      	bne.n	36922 <__aeabi_fsub+0x23a>
   36920:	e728      	b.n	36774 <__aeabi_fsub+0x8c>
   36922:	2280      	movs	r2, #128	; 0x80
   36924:	4651      	mov	r1, sl
   36926:	03d2      	lsls	r2, r2, #15
   36928:	4211      	tst	r1, r2
   3692a:	d003      	beq.n	36934 <__aeabi_fsub+0x24c>
   3692c:	4661      	mov	r1, ip
   3692e:	4211      	tst	r1, r2
   36930:	d100      	bne.n	36934 <__aeabi_fsub+0x24c>
   36932:	0033      	movs	r3, r6
   36934:	24ff      	movs	r4, #255	; 0xff
   36936:	e71d      	b.n	36774 <__aeabi_fsub+0x8c>
   36938:	24ff      	movs	r4, #255	; 0xff
   3693a:	2300      	movs	r3, #0
   3693c:	e72c      	b.n	36798 <__aeabi_fsub+0xb0>
   3693e:	2c00      	cmp	r4, #0
   36940:	d1e9      	bne.n	36916 <__aeabi_fsub+0x22e>
   36942:	2b00      	cmp	r3, #0
   36944:	d063      	beq.n	36a0e <__aeabi_fsub+0x326>
   36946:	2e00      	cmp	r6, #0
   36948:	d100      	bne.n	3694c <__aeabi_fsub+0x264>
   3694a:	e713      	b.n	36774 <__aeabi_fsub+0x8c>
   3694c:	199b      	adds	r3, r3, r6
   3694e:	015a      	lsls	r2, r3, #5
   36950:	d400      	bmi.n	36954 <__aeabi_fsub+0x26c>
   36952:	e73e      	b.n	367d2 <__aeabi_fsub+0xea>
   36954:	4a31      	ldr	r2, [pc, #196]	; (36a1c <__aeabi_fsub+0x334>)
   36956:	000c      	movs	r4, r1
   36958:	4013      	ands	r3, r2
   3695a:	e70b      	b.n	36774 <__aeabi_fsub+0x8c>
   3695c:	2c00      	cmp	r4, #0
   3695e:	d11e      	bne.n	3699e <__aeabi_fsub+0x2b6>
   36960:	2b00      	cmp	r3, #0
   36962:	d12f      	bne.n	369c4 <__aeabi_fsub+0x2dc>
   36964:	2e00      	cmp	r6, #0
   36966:	d04f      	beq.n	36a08 <__aeabi_fsub+0x320>
   36968:	0033      	movs	r3, r6
   3696a:	000d      	movs	r5, r1
   3696c:	e702      	b.n	36774 <__aeabi_fsub+0x8c>
   3696e:	2601      	movs	r6, #1
   36970:	e755      	b.n	3681e <__aeabi_fsub+0x136>
   36972:	2c00      	cmp	r4, #0
   36974:	d11f      	bne.n	369b6 <__aeabi_fsub+0x2ce>
   36976:	2b00      	cmp	r3, #0
   36978:	d043      	beq.n	36a02 <__aeabi_fsub+0x31a>
   3697a:	43c9      	mvns	r1, r1
   3697c:	2900      	cmp	r1, #0
   3697e:	d00b      	beq.n	36998 <__aeabi_fsub+0x2b0>
   36980:	28ff      	cmp	r0, #255	; 0xff
   36982:	d039      	beq.n	369f8 <__aeabi_fsub+0x310>
   36984:	291b      	cmp	r1, #27
   36986:	dc44      	bgt.n	36a12 <__aeabi_fsub+0x32a>
   36988:	001c      	movs	r4, r3
   3698a:	2720      	movs	r7, #32
   3698c:	40cc      	lsrs	r4, r1
   3698e:	1a79      	subs	r1, r7, r1
   36990:	408b      	lsls	r3, r1
   36992:	1e59      	subs	r1, r3, #1
   36994:	418b      	sbcs	r3, r1
   36996:	4323      	orrs	r3, r4
   36998:	199b      	adds	r3, r3, r6
   3699a:	0004      	movs	r4, r0
   3699c:	e740      	b.n	36820 <__aeabi_fsub+0x138>
   3699e:	2b00      	cmp	r3, #0
   369a0:	d11a      	bne.n	369d8 <__aeabi_fsub+0x2f0>
   369a2:	2e00      	cmp	r6, #0
   369a4:	d124      	bne.n	369f0 <__aeabi_fsub+0x308>
   369a6:	2780      	movs	r7, #128	; 0x80
   369a8:	2200      	movs	r2, #0
   369aa:	03ff      	lsls	r7, r7, #15
   369ac:	e71b      	b.n	367e6 <__aeabi_fsub+0xfe>
   369ae:	0033      	movs	r3, r6
   369b0:	0004      	movs	r4, r0
   369b2:	000d      	movs	r5, r1
   369b4:	e6de      	b.n	36774 <__aeabi_fsub+0x8c>
   369b6:	28ff      	cmp	r0, #255	; 0xff
   369b8:	d01e      	beq.n	369f8 <__aeabi_fsub+0x310>
   369ba:	2480      	movs	r4, #128	; 0x80
   369bc:	04e4      	lsls	r4, r4, #19
   369be:	4249      	negs	r1, r1
   369c0:	4323      	orrs	r3, r4
   369c2:	e7df      	b.n	36984 <__aeabi_fsub+0x29c>
   369c4:	2e00      	cmp	r6, #0
   369c6:	d100      	bne.n	369ca <__aeabi_fsub+0x2e2>
   369c8:	e6d4      	b.n	36774 <__aeabi_fsub+0x8c>
   369ca:	1b9f      	subs	r7, r3, r6
   369cc:	017a      	lsls	r2, r7, #5
   369ce:	d400      	bmi.n	369d2 <__aeabi_fsub+0x2ea>
   369d0:	e737      	b.n	36842 <__aeabi_fsub+0x15a>
   369d2:	1af3      	subs	r3, r6, r3
   369d4:	000d      	movs	r5, r1
   369d6:	e6cd      	b.n	36774 <__aeabi_fsub+0x8c>
   369d8:	24ff      	movs	r4, #255	; 0xff
   369da:	2e00      	cmp	r6, #0
   369dc:	d100      	bne.n	369e0 <__aeabi_fsub+0x2f8>
   369de:	e6c9      	b.n	36774 <__aeabi_fsub+0x8c>
   369e0:	2280      	movs	r2, #128	; 0x80
   369e2:	4650      	mov	r0, sl
   369e4:	03d2      	lsls	r2, r2, #15
   369e6:	4210      	tst	r0, r2
   369e8:	d0a4      	beq.n	36934 <__aeabi_fsub+0x24c>
   369ea:	4660      	mov	r0, ip
   369ec:	4210      	tst	r0, r2
   369ee:	d1a1      	bne.n	36934 <__aeabi_fsub+0x24c>
   369f0:	0033      	movs	r3, r6
   369f2:	000d      	movs	r5, r1
   369f4:	24ff      	movs	r4, #255	; 0xff
   369f6:	e6bd      	b.n	36774 <__aeabi_fsub+0x8c>
   369f8:	0033      	movs	r3, r6
   369fa:	24ff      	movs	r4, #255	; 0xff
   369fc:	e6ba      	b.n	36774 <__aeabi_fsub+0x8c>
   369fe:	2301      	movs	r3, #1
   36a00:	e76e      	b.n	368e0 <__aeabi_fsub+0x1f8>
   36a02:	0033      	movs	r3, r6
   36a04:	0004      	movs	r4, r0
   36a06:	e6b5      	b.n	36774 <__aeabi_fsub+0x8c>
   36a08:	2700      	movs	r7, #0
   36a0a:	2200      	movs	r2, #0
   36a0c:	e71c      	b.n	36848 <__aeabi_fsub+0x160>
   36a0e:	0033      	movs	r3, r6
   36a10:	e6b0      	b.n	36774 <__aeabi_fsub+0x8c>
   36a12:	2301      	movs	r3, #1
   36a14:	e7c0      	b.n	36998 <__aeabi_fsub+0x2b0>
   36a16:	46c0      	nop			; (mov r8, r8)
   36a18:	7dffffff 	.word	0x7dffffff
   36a1c:	fbffffff 	.word	0xfbffffff

00036a20 <__aeabi_f2iz>:
   36a20:	0241      	lsls	r1, r0, #9
   36a22:	0043      	lsls	r3, r0, #1
   36a24:	0fc2      	lsrs	r2, r0, #31
   36a26:	0a49      	lsrs	r1, r1, #9
   36a28:	0e1b      	lsrs	r3, r3, #24
   36a2a:	2000      	movs	r0, #0
   36a2c:	2b7e      	cmp	r3, #126	; 0x7e
   36a2e:	dd0d      	ble.n	36a4c <__aeabi_f2iz+0x2c>
   36a30:	2b9d      	cmp	r3, #157	; 0x9d
   36a32:	dc0c      	bgt.n	36a4e <__aeabi_f2iz+0x2e>
   36a34:	2080      	movs	r0, #128	; 0x80
   36a36:	0400      	lsls	r0, r0, #16
   36a38:	4301      	orrs	r1, r0
   36a3a:	2b95      	cmp	r3, #149	; 0x95
   36a3c:	dc0a      	bgt.n	36a54 <__aeabi_f2iz+0x34>
   36a3e:	2096      	movs	r0, #150	; 0x96
   36a40:	1ac3      	subs	r3, r0, r3
   36a42:	40d9      	lsrs	r1, r3
   36a44:	4248      	negs	r0, r1
   36a46:	2a00      	cmp	r2, #0
   36a48:	d100      	bne.n	36a4c <__aeabi_f2iz+0x2c>
   36a4a:	0008      	movs	r0, r1
   36a4c:	4770      	bx	lr
   36a4e:	4b03      	ldr	r3, [pc, #12]	; (36a5c <__aeabi_f2iz+0x3c>)
   36a50:	18d0      	adds	r0, r2, r3
   36a52:	e7fb      	b.n	36a4c <__aeabi_f2iz+0x2c>
   36a54:	3b96      	subs	r3, #150	; 0x96
   36a56:	4099      	lsls	r1, r3
   36a58:	e7f4      	b.n	36a44 <__aeabi_f2iz+0x24>
   36a5a:	46c0      	nop			; (mov r8, r8)
   36a5c:	7fffffff 	.word	0x7fffffff

00036a60 <__aeabi_i2f>:
   36a60:	b570      	push	{r4, r5, r6, lr}
   36a62:	2800      	cmp	r0, #0
   36a64:	d030      	beq.n	36ac8 <__aeabi_i2f+0x68>
   36a66:	17c3      	asrs	r3, r0, #31
   36a68:	18c4      	adds	r4, r0, r3
   36a6a:	405c      	eors	r4, r3
   36a6c:	0fc5      	lsrs	r5, r0, #31
   36a6e:	0020      	movs	r0, r4
   36a70:	f001 fcd2 	bl	38418 <__clzsi2>
   36a74:	239e      	movs	r3, #158	; 0x9e
   36a76:	1a1b      	subs	r3, r3, r0
   36a78:	2b96      	cmp	r3, #150	; 0x96
   36a7a:	dc0d      	bgt.n	36a98 <__aeabi_i2f+0x38>
   36a7c:	2296      	movs	r2, #150	; 0x96
   36a7e:	1ad2      	subs	r2, r2, r3
   36a80:	4094      	lsls	r4, r2
   36a82:	002a      	movs	r2, r5
   36a84:	0264      	lsls	r4, r4, #9
   36a86:	0a64      	lsrs	r4, r4, #9
   36a88:	b2db      	uxtb	r3, r3
   36a8a:	0264      	lsls	r4, r4, #9
   36a8c:	05db      	lsls	r3, r3, #23
   36a8e:	0a60      	lsrs	r0, r4, #9
   36a90:	07d2      	lsls	r2, r2, #31
   36a92:	4318      	orrs	r0, r3
   36a94:	4310      	orrs	r0, r2
   36a96:	bd70      	pop	{r4, r5, r6, pc}
   36a98:	2b99      	cmp	r3, #153	; 0x99
   36a9a:	dc19      	bgt.n	36ad0 <__aeabi_i2f+0x70>
   36a9c:	2299      	movs	r2, #153	; 0x99
   36a9e:	1ad2      	subs	r2, r2, r3
   36aa0:	2a00      	cmp	r2, #0
   36aa2:	dd29      	ble.n	36af8 <__aeabi_i2f+0x98>
   36aa4:	4094      	lsls	r4, r2
   36aa6:	0022      	movs	r2, r4
   36aa8:	4c14      	ldr	r4, [pc, #80]	; (36afc <__aeabi_i2f+0x9c>)
   36aaa:	4014      	ands	r4, r2
   36aac:	0751      	lsls	r1, r2, #29
   36aae:	d004      	beq.n	36aba <__aeabi_i2f+0x5a>
   36ab0:	210f      	movs	r1, #15
   36ab2:	400a      	ands	r2, r1
   36ab4:	2a04      	cmp	r2, #4
   36ab6:	d000      	beq.n	36aba <__aeabi_i2f+0x5a>
   36ab8:	3404      	adds	r4, #4
   36aba:	0162      	lsls	r2, r4, #5
   36abc:	d413      	bmi.n	36ae6 <__aeabi_i2f+0x86>
   36abe:	01a4      	lsls	r4, r4, #6
   36ac0:	0a64      	lsrs	r4, r4, #9
   36ac2:	b2db      	uxtb	r3, r3
   36ac4:	002a      	movs	r2, r5
   36ac6:	e7e0      	b.n	36a8a <__aeabi_i2f+0x2a>
   36ac8:	2200      	movs	r2, #0
   36aca:	2300      	movs	r3, #0
   36acc:	2400      	movs	r4, #0
   36ace:	e7dc      	b.n	36a8a <__aeabi_i2f+0x2a>
   36ad0:	2205      	movs	r2, #5
   36ad2:	0021      	movs	r1, r4
   36ad4:	1a12      	subs	r2, r2, r0
   36ad6:	40d1      	lsrs	r1, r2
   36ad8:	22b9      	movs	r2, #185	; 0xb9
   36ada:	1ad2      	subs	r2, r2, r3
   36adc:	4094      	lsls	r4, r2
   36ade:	1e62      	subs	r2, r4, #1
   36ae0:	4194      	sbcs	r4, r2
   36ae2:	430c      	orrs	r4, r1
   36ae4:	e7da      	b.n	36a9c <__aeabi_i2f+0x3c>
   36ae6:	4b05      	ldr	r3, [pc, #20]	; (36afc <__aeabi_i2f+0x9c>)
   36ae8:	002a      	movs	r2, r5
   36aea:	401c      	ands	r4, r3
   36aec:	239f      	movs	r3, #159	; 0x9f
   36aee:	01a4      	lsls	r4, r4, #6
   36af0:	1a1b      	subs	r3, r3, r0
   36af2:	0a64      	lsrs	r4, r4, #9
   36af4:	b2db      	uxtb	r3, r3
   36af6:	e7c8      	b.n	36a8a <__aeabi_i2f+0x2a>
   36af8:	0022      	movs	r2, r4
   36afa:	e7d5      	b.n	36aa8 <__aeabi_i2f+0x48>
   36afc:	fbffffff 	.word	0xfbffffff

00036b00 <__aeabi_ui2f>:
   36b00:	b510      	push	{r4, lr}
   36b02:	1e04      	subs	r4, r0, #0
   36b04:	d027      	beq.n	36b56 <__aeabi_ui2f+0x56>
   36b06:	f001 fc87 	bl	38418 <__clzsi2>
   36b0a:	239e      	movs	r3, #158	; 0x9e
   36b0c:	1a1b      	subs	r3, r3, r0
   36b0e:	2b96      	cmp	r3, #150	; 0x96
   36b10:	dc0a      	bgt.n	36b28 <__aeabi_ui2f+0x28>
   36b12:	2296      	movs	r2, #150	; 0x96
   36b14:	1ad2      	subs	r2, r2, r3
   36b16:	4094      	lsls	r4, r2
   36b18:	0264      	lsls	r4, r4, #9
   36b1a:	0a64      	lsrs	r4, r4, #9
   36b1c:	b2db      	uxtb	r3, r3
   36b1e:	0264      	lsls	r4, r4, #9
   36b20:	05db      	lsls	r3, r3, #23
   36b22:	0a60      	lsrs	r0, r4, #9
   36b24:	4318      	orrs	r0, r3
   36b26:	bd10      	pop	{r4, pc}
   36b28:	2b99      	cmp	r3, #153	; 0x99
   36b2a:	dc17      	bgt.n	36b5c <__aeabi_ui2f+0x5c>
   36b2c:	2299      	movs	r2, #153	; 0x99
   36b2e:	1ad2      	subs	r2, r2, r3
   36b30:	2a00      	cmp	r2, #0
   36b32:	dd27      	ble.n	36b84 <__aeabi_ui2f+0x84>
   36b34:	4094      	lsls	r4, r2
   36b36:	0022      	movs	r2, r4
   36b38:	4c13      	ldr	r4, [pc, #76]	; (36b88 <__aeabi_ui2f+0x88>)
   36b3a:	4014      	ands	r4, r2
   36b3c:	0751      	lsls	r1, r2, #29
   36b3e:	d004      	beq.n	36b4a <__aeabi_ui2f+0x4a>
   36b40:	210f      	movs	r1, #15
   36b42:	400a      	ands	r2, r1
   36b44:	2a04      	cmp	r2, #4
   36b46:	d000      	beq.n	36b4a <__aeabi_ui2f+0x4a>
   36b48:	3404      	adds	r4, #4
   36b4a:	0162      	lsls	r2, r4, #5
   36b4c:	d412      	bmi.n	36b74 <__aeabi_ui2f+0x74>
   36b4e:	01a4      	lsls	r4, r4, #6
   36b50:	0a64      	lsrs	r4, r4, #9
   36b52:	b2db      	uxtb	r3, r3
   36b54:	e7e3      	b.n	36b1e <__aeabi_ui2f+0x1e>
   36b56:	2300      	movs	r3, #0
   36b58:	2400      	movs	r4, #0
   36b5a:	e7e0      	b.n	36b1e <__aeabi_ui2f+0x1e>
   36b5c:	22b9      	movs	r2, #185	; 0xb9
   36b5e:	0021      	movs	r1, r4
   36b60:	1ad2      	subs	r2, r2, r3
   36b62:	4091      	lsls	r1, r2
   36b64:	000a      	movs	r2, r1
   36b66:	1e51      	subs	r1, r2, #1
   36b68:	418a      	sbcs	r2, r1
   36b6a:	2105      	movs	r1, #5
   36b6c:	1a09      	subs	r1, r1, r0
   36b6e:	40cc      	lsrs	r4, r1
   36b70:	4314      	orrs	r4, r2
   36b72:	e7db      	b.n	36b2c <__aeabi_ui2f+0x2c>
   36b74:	4b04      	ldr	r3, [pc, #16]	; (36b88 <__aeabi_ui2f+0x88>)
   36b76:	401c      	ands	r4, r3
   36b78:	239f      	movs	r3, #159	; 0x9f
   36b7a:	01a4      	lsls	r4, r4, #6
   36b7c:	1a1b      	subs	r3, r3, r0
   36b7e:	0a64      	lsrs	r4, r4, #9
   36b80:	b2db      	uxtb	r3, r3
   36b82:	e7cc      	b.n	36b1e <__aeabi_ui2f+0x1e>
   36b84:	0022      	movs	r2, r4
   36b86:	e7d7      	b.n	36b38 <__aeabi_ui2f+0x38>
   36b88:	fbffffff 	.word	0xfbffffff

00036b8c <__aeabi_dadd>:
   36b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36b8e:	4645      	mov	r5, r8
   36b90:	46de      	mov	lr, fp
   36b92:	4657      	mov	r7, sl
   36b94:	464e      	mov	r6, r9
   36b96:	030c      	lsls	r4, r1, #12
   36b98:	b5e0      	push	{r5, r6, r7, lr}
   36b9a:	004e      	lsls	r6, r1, #1
   36b9c:	0fc9      	lsrs	r1, r1, #31
   36b9e:	4688      	mov	r8, r1
   36ba0:	000d      	movs	r5, r1
   36ba2:	0a61      	lsrs	r1, r4, #9
   36ba4:	0f44      	lsrs	r4, r0, #29
   36ba6:	430c      	orrs	r4, r1
   36ba8:	00c7      	lsls	r7, r0, #3
   36baa:	0319      	lsls	r1, r3, #12
   36bac:	0058      	lsls	r0, r3, #1
   36bae:	0fdb      	lsrs	r3, r3, #31
   36bb0:	469b      	mov	fp, r3
   36bb2:	0a4b      	lsrs	r3, r1, #9
   36bb4:	0f51      	lsrs	r1, r2, #29
   36bb6:	430b      	orrs	r3, r1
   36bb8:	0d76      	lsrs	r6, r6, #21
   36bba:	0d40      	lsrs	r0, r0, #21
   36bbc:	0019      	movs	r1, r3
   36bbe:	00d2      	lsls	r2, r2, #3
   36bc0:	45d8      	cmp	r8, fp
   36bc2:	d100      	bne.n	36bc6 <__aeabi_dadd+0x3a>
   36bc4:	e0ae      	b.n	36d24 <__aeabi_dadd+0x198>
   36bc6:	1a35      	subs	r5, r6, r0
   36bc8:	2d00      	cmp	r5, #0
   36bca:	dc00      	bgt.n	36bce <__aeabi_dadd+0x42>
   36bcc:	e0f6      	b.n	36dbc <__aeabi_dadd+0x230>
   36bce:	2800      	cmp	r0, #0
   36bd0:	d10f      	bne.n	36bf2 <__aeabi_dadd+0x66>
   36bd2:	4313      	orrs	r3, r2
   36bd4:	d100      	bne.n	36bd8 <__aeabi_dadd+0x4c>
   36bd6:	e0db      	b.n	36d90 <__aeabi_dadd+0x204>
   36bd8:	1e6b      	subs	r3, r5, #1
   36bda:	2b00      	cmp	r3, #0
   36bdc:	d000      	beq.n	36be0 <__aeabi_dadd+0x54>
   36bde:	e137      	b.n	36e50 <__aeabi_dadd+0x2c4>
   36be0:	1aba      	subs	r2, r7, r2
   36be2:	4297      	cmp	r7, r2
   36be4:	41bf      	sbcs	r7, r7
   36be6:	1a64      	subs	r4, r4, r1
   36be8:	427f      	negs	r7, r7
   36bea:	1be4      	subs	r4, r4, r7
   36bec:	2601      	movs	r6, #1
   36bee:	0017      	movs	r7, r2
   36bf0:	e024      	b.n	36c3c <__aeabi_dadd+0xb0>
   36bf2:	4bc6      	ldr	r3, [pc, #792]	; (36f0c <__aeabi_dadd+0x380>)
   36bf4:	429e      	cmp	r6, r3
   36bf6:	d04d      	beq.n	36c94 <__aeabi_dadd+0x108>
   36bf8:	2380      	movs	r3, #128	; 0x80
   36bfa:	041b      	lsls	r3, r3, #16
   36bfc:	4319      	orrs	r1, r3
   36bfe:	2d38      	cmp	r5, #56	; 0x38
   36c00:	dd00      	ble.n	36c04 <__aeabi_dadd+0x78>
   36c02:	e107      	b.n	36e14 <__aeabi_dadd+0x288>
   36c04:	2d1f      	cmp	r5, #31
   36c06:	dd00      	ble.n	36c0a <__aeabi_dadd+0x7e>
   36c08:	e138      	b.n	36e7c <__aeabi_dadd+0x2f0>
   36c0a:	2020      	movs	r0, #32
   36c0c:	1b43      	subs	r3, r0, r5
   36c0e:	469a      	mov	sl, r3
   36c10:	000b      	movs	r3, r1
   36c12:	4650      	mov	r0, sl
   36c14:	4083      	lsls	r3, r0
   36c16:	4699      	mov	r9, r3
   36c18:	0013      	movs	r3, r2
   36c1a:	4648      	mov	r0, r9
   36c1c:	40eb      	lsrs	r3, r5
   36c1e:	4318      	orrs	r0, r3
   36c20:	0003      	movs	r3, r0
   36c22:	4650      	mov	r0, sl
   36c24:	4082      	lsls	r2, r0
   36c26:	1e50      	subs	r0, r2, #1
   36c28:	4182      	sbcs	r2, r0
   36c2a:	40e9      	lsrs	r1, r5
   36c2c:	431a      	orrs	r2, r3
   36c2e:	1aba      	subs	r2, r7, r2
   36c30:	1a61      	subs	r1, r4, r1
   36c32:	4297      	cmp	r7, r2
   36c34:	41a4      	sbcs	r4, r4
   36c36:	0017      	movs	r7, r2
   36c38:	4264      	negs	r4, r4
   36c3a:	1b0c      	subs	r4, r1, r4
   36c3c:	0223      	lsls	r3, r4, #8
   36c3e:	d562      	bpl.n	36d06 <__aeabi_dadd+0x17a>
   36c40:	0264      	lsls	r4, r4, #9
   36c42:	0a65      	lsrs	r5, r4, #9
   36c44:	2d00      	cmp	r5, #0
   36c46:	d100      	bne.n	36c4a <__aeabi_dadd+0xbe>
   36c48:	e0df      	b.n	36e0a <__aeabi_dadd+0x27e>
   36c4a:	0028      	movs	r0, r5
   36c4c:	f001 fbe4 	bl	38418 <__clzsi2>
   36c50:	0003      	movs	r3, r0
   36c52:	3b08      	subs	r3, #8
   36c54:	2b1f      	cmp	r3, #31
   36c56:	dd00      	ble.n	36c5a <__aeabi_dadd+0xce>
   36c58:	e0d2      	b.n	36e00 <__aeabi_dadd+0x274>
   36c5a:	2220      	movs	r2, #32
   36c5c:	003c      	movs	r4, r7
   36c5e:	1ad2      	subs	r2, r2, r3
   36c60:	409d      	lsls	r5, r3
   36c62:	40d4      	lsrs	r4, r2
   36c64:	409f      	lsls	r7, r3
   36c66:	4325      	orrs	r5, r4
   36c68:	429e      	cmp	r6, r3
   36c6a:	dd00      	ble.n	36c6e <__aeabi_dadd+0xe2>
   36c6c:	e0c4      	b.n	36df8 <__aeabi_dadd+0x26c>
   36c6e:	1b9e      	subs	r6, r3, r6
   36c70:	1c73      	adds	r3, r6, #1
   36c72:	2b1f      	cmp	r3, #31
   36c74:	dd00      	ble.n	36c78 <__aeabi_dadd+0xec>
   36c76:	e0f1      	b.n	36e5c <__aeabi_dadd+0x2d0>
   36c78:	2220      	movs	r2, #32
   36c7a:	0038      	movs	r0, r7
   36c7c:	0029      	movs	r1, r5
   36c7e:	1ad2      	subs	r2, r2, r3
   36c80:	40d8      	lsrs	r0, r3
   36c82:	4091      	lsls	r1, r2
   36c84:	4097      	lsls	r7, r2
   36c86:	002c      	movs	r4, r5
   36c88:	4301      	orrs	r1, r0
   36c8a:	1e78      	subs	r0, r7, #1
   36c8c:	4187      	sbcs	r7, r0
   36c8e:	40dc      	lsrs	r4, r3
   36c90:	2600      	movs	r6, #0
   36c92:	430f      	orrs	r7, r1
   36c94:	077b      	lsls	r3, r7, #29
   36c96:	d009      	beq.n	36cac <__aeabi_dadd+0x120>
   36c98:	230f      	movs	r3, #15
   36c9a:	403b      	ands	r3, r7
   36c9c:	2b04      	cmp	r3, #4
   36c9e:	d005      	beq.n	36cac <__aeabi_dadd+0x120>
   36ca0:	1d3b      	adds	r3, r7, #4
   36ca2:	42bb      	cmp	r3, r7
   36ca4:	41bf      	sbcs	r7, r7
   36ca6:	427f      	negs	r7, r7
   36ca8:	19e4      	adds	r4, r4, r7
   36caa:	001f      	movs	r7, r3
   36cac:	0223      	lsls	r3, r4, #8
   36cae:	d52c      	bpl.n	36d0a <__aeabi_dadd+0x17e>
   36cb0:	4b96      	ldr	r3, [pc, #600]	; (36f0c <__aeabi_dadd+0x380>)
   36cb2:	3601      	adds	r6, #1
   36cb4:	429e      	cmp	r6, r3
   36cb6:	d100      	bne.n	36cba <__aeabi_dadd+0x12e>
   36cb8:	e09a      	b.n	36df0 <__aeabi_dadd+0x264>
   36cba:	4645      	mov	r5, r8
   36cbc:	4b94      	ldr	r3, [pc, #592]	; (36f10 <__aeabi_dadd+0x384>)
   36cbe:	08ff      	lsrs	r7, r7, #3
   36cc0:	401c      	ands	r4, r3
   36cc2:	0760      	lsls	r0, r4, #29
   36cc4:	0576      	lsls	r6, r6, #21
   36cc6:	0264      	lsls	r4, r4, #9
   36cc8:	4307      	orrs	r7, r0
   36cca:	0b24      	lsrs	r4, r4, #12
   36ccc:	0d76      	lsrs	r6, r6, #21
   36cce:	2100      	movs	r1, #0
   36cd0:	0324      	lsls	r4, r4, #12
   36cd2:	0b23      	lsrs	r3, r4, #12
   36cd4:	0d0c      	lsrs	r4, r1, #20
   36cd6:	4a8f      	ldr	r2, [pc, #572]	; (36f14 <__aeabi_dadd+0x388>)
   36cd8:	0524      	lsls	r4, r4, #20
   36cda:	431c      	orrs	r4, r3
   36cdc:	4014      	ands	r4, r2
   36cde:	0533      	lsls	r3, r6, #20
   36ce0:	4323      	orrs	r3, r4
   36ce2:	005b      	lsls	r3, r3, #1
   36ce4:	07ed      	lsls	r5, r5, #31
   36ce6:	085b      	lsrs	r3, r3, #1
   36ce8:	432b      	orrs	r3, r5
   36cea:	0038      	movs	r0, r7
   36cec:	0019      	movs	r1, r3
   36cee:	bc3c      	pop	{r2, r3, r4, r5}
   36cf0:	4690      	mov	r8, r2
   36cf2:	4699      	mov	r9, r3
   36cf4:	46a2      	mov	sl, r4
   36cf6:	46ab      	mov	fp, r5
   36cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36cfa:	4664      	mov	r4, ip
   36cfc:	4304      	orrs	r4, r0
   36cfe:	d100      	bne.n	36d02 <__aeabi_dadd+0x176>
   36d00:	e211      	b.n	37126 <__aeabi_dadd+0x59a>
   36d02:	0004      	movs	r4, r0
   36d04:	4667      	mov	r7, ip
   36d06:	077b      	lsls	r3, r7, #29
   36d08:	d1c6      	bne.n	36c98 <__aeabi_dadd+0x10c>
   36d0a:	4645      	mov	r5, r8
   36d0c:	0760      	lsls	r0, r4, #29
   36d0e:	08ff      	lsrs	r7, r7, #3
   36d10:	4307      	orrs	r7, r0
   36d12:	08e4      	lsrs	r4, r4, #3
   36d14:	4b7d      	ldr	r3, [pc, #500]	; (36f0c <__aeabi_dadd+0x380>)
   36d16:	429e      	cmp	r6, r3
   36d18:	d030      	beq.n	36d7c <__aeabi_dadd+0x1f0>
   36d1a:	0324      	lsls	r4, r4, #12
   36d1c:	0576      	lsls	r6, r6, #21
   36d1e:	0b24      	lsrs	r4, r4, #12
   36d20:	0d76      	lsrs	r6, r6, #21
   36d22:	e7d4      	b.n	36cce <__aeabi_dadd+0x142>
   36d24:	1a33      	subs	r3, r6, r0
   36d26:	469a      	mov	sl, r3
   36d28:	2b00      	cmp	r3, #0
   36d2a:	dd78      	ble.n	36e1e <__aeabi_dadd+0x292>
   36d2c:	2800      	cmp	r0, #0
   36d2e:	d031      	beq.n	36d94 <__aeabi_dadd+0x208>
   36d30:	4876      	ldr	r0, [pc, #472]	; (36f0c <__aeabi_dadd+0x380>)
   36d32:	4286      	cmp	r6, r0
   36d34:	d0ae      	beq.n	36c94 <__aeabi_dadd+0x108>
   36d36:	2080      	movs	r0, #128	; 0x80
   36d38:	0400      	lsls	r0, r0, #16
   36d3a:	4301      	orrs	r1, r0
   36d3c:	4653      	mov	r3, sl
   36d3e:	2b38      	cmp	r3, #56	; 0x38
   36d40:	dc00      	bgt.n	36d44 <__aeabi_dadd+0x1b8>
   36d42:	e0e9      	b.n	36f18 <__aeabi_dadd+0x38c>
   36d44:	430a      	orrs	r2, r1
   36d46:	1e51      	subs	r1, r2, #1
   36d48:	418a      	sbcs	r2, r1
   36d4a:	2100      	movs	r1, #0
   36d4c:	19d2      	adds	r2, r2, r7
   36d4e:	42ba      	cmp	r2, r7
   36d50:	41bf      	sbcs	r7, r7
   36d52:	1909      	adds	r1, r1, r4
   36d54:	427c      	negs	r4, r7
   36d56:	0017      	movs	r7, r2
   36d58:	190c      	adds	r4, r1, r4
   36d5a:	0223      	lsls	r3, r4, #8
   36d5c:	d5d3      	bpl.n	36d06 <__aeabi_dadd+0x17a>
   36d5e:	4b6b      	ldr	r3, [pc, #428]	; (36f0c <__aeabi_dadd+0x380>)
   36d60:	3601      	adds	r6, #1
   36d62:	429e      	cmp	r6, r3
   36d64:	d100      	bne.n	36d68 <__aeabi_dadd+0x1dc>
   36d66:	e13a      	b.n	36fde <__aeabi_dadd+0x452>
   36d68:	2001      	movs	r0, #1
   36d6a:	4b69      	ldr	r3, [pc, #420]	; (36f10 <__aeabi_dadd+0x384>)
   36d6c:	401c      	ands	r4, r3
   36d6e:	087b      	lsrs	r3, r7, #1
   36d70:	4007      	ands	r7, r0
   36d72:	431f      	orrs	r7, r3
   36d74:	07e0      	lsls	r0, r4, #31
   36d76:	4307      	orrs	r7, r0
   36d78:	0864      	lsrs	r4, r4, #1
   36d7a:	e78b      	b.n	36c94 <__aeabi_dadd+0x108>
   36d7c:	0023      	movs	r3, r4
   36d7e:	433b      	orrs	r3, r7
   36d80:	d100      	bne.n	36d84 <__aeabi_dadd+0x1f8>
   36d82:	e1cb      	b.n	3711c <__aeabi_dadd+0x590>
   36d84:	2280      	movs	r2, #128	; 0x80
   36d86:	0312      	lsls	r2, r2, #12
   36d88:	4314      	orrs	r4, r2
   36d8a:	0324      	lsls	r4, r4, #12
   36d8c:	0b24      	lsrs	r4, r4, #12
   36d8e:	e79e      	b.n	36cce <__aeabi_dadd+0x142>
   36d90:	002e      	movs	r6, r5
   36d92:	e77f      	b.n	36c94 <__aeabi_dadd+0x108>
   36d94:	0008      	movs	r0, r1
   36d96:	4310      	orrs	r0, r2
   36d98:	d100      	bne.n	36d9c <__aeabi_dadd+0x210>
   36d9a:	e0b4      	b.n	36f06 <__aeabi_dadd+0x37a>
   36d9c:	1e58      	subs	r0, r3, #1
   36d9e:	2800      	cmp	r0, #0
   36da0:	d000      	beq.n	36da4 <__aeabi_dadd+0x218>
   36da2:	e0de      	b.n	36f62 <__aeabi_dadd+0x3d6>
   36da4:	18ba      	adds	r2, r7, r2
   36da6:	42ba      	cmp	r2, r7
   36da8:	419b      	sbcs	r3, r3
   36daa:	1864      	adds	r4, r4, r1
   36dac:	425b      	negs	r3, r3
   36dae:	18e4      	adds	r4, r4, r3
   36db0:	0017      	movs	r7, r2
   36db2:	2601      	movs	r6, #1
   36db4:	0223      	lsls	r3, r4, #8
   36db6:	d5a6      	bpl.n	36d06 <__aeabi_dadd+0x17a>
   36db8:	2602      	movs	r6, #2
   36dba:	e7d5      	b.n	36d68 <__aeabi_dadd+0x1dc>
   36dbc:	2d00      	cmp	r5, #0
   36dbe:	d16e      	bne.n	36e9e <__aeabi_dadd+0x312>
   36dc0:	1c70      	adds	r0, r6, #1
   36dc2:	0540      	lsls	r0, r0, #21
   36dc4:	0d40      	lsrs	r0, r0, #21
   36dc6:	2801      	cmp	r0, #1
   36dc8:	dc00      	bgt.n	36dcc <__aeabi_dadd+0x240>
   36dca:	e0f9      	b.n	36fc0 <__aeabi_dadd+0x434>
   36dcc:	1ab8      	subs	r0, r7, r2
   36dce:	4684      	mov	ip, r0
   36dd0:	4287      	cmp	r7, r0
   36dd2:	4180      	sbcs	r0, r0
   36dd4:	1ae5      	subs	r5, r4, r3
   36dd6:	4240      	negs	r0, r0
   36dd8:	1a2d      	subs	r5, r5, r0
   36dda:	0228      	lsls	r0, r5, #8
   36ddc:	d400      	bmi.n	36de0 <__aeabi_dadd+0x254>
   36dde:	e089      	b.n	36ef4 <__aeabi_dadd+0x368>
   36de0:	1bd7      	subs	r7, r2, r7
   36de2:	42ba      	cmp	r2, r7
   36de4:	4192      	sbcs	r2, r2
   36de6:	1b1c      	subs	r4, r3, r4
   36de8:	4252      	negs	r2, r2
   36dea:	1aa5      	subs	r5, r4, r2
   36dec:	46d8      	mov	r8, fp
   36dee:	e729      	b.n	36c44 <__aeabi_dadd+0xb8>
   36df0:	4645      	mov	r5, r8
   36df2:	2400      	movs	r4, #0
   36df4:	2700      	movs	r7, #0
   36df6:	e76a      	b.n	36cce <__aeabi_dadd+0x142>
   36df8:	4c45      	ldr	r4, [pc, #276]	; (36f10 <__aeabi_dadd+0x384>)
   36dfa:	1af6      	subs	r6, r6, r3
   36dfc:	402c      	ands	r4, r5
   36dfe:	e749      	b.n	36c94 <__aeabi_dadd+0x108>
   36e00:	003d      	movs	r5, r7
   36e02:	3828      	subs	r0, #40	; 0x28
   36e04:	4085      	lsls	r5, r0
   36e06:	2700      	movs	r7, #0
   36e08:	e72e      	b.n	36c68 <__aeabi_dadd+0xdc>
   36e0a:	0038      	movs	r0, r7
   36e0c:	f001 fb04 	bl	38418 <__clzsi2>
   36e10:	3020      	adds	r0, #32
   36e12:	e71d      	b.n	36c50 <__aeabi_dadd+0xc4>
   36e14:	430a      	orrs	r2, r1
   36e16:	1e51      	subs	r1, r2, #1
   36e18:	418a      	sbcs	r2, r1
   36e1a:	2100      	movs	r1, #0
   36e1c:	e707      	b.n	36c2e <__aeabi_dadd+0xa2>
   36e1e:	2b00      	cmp	r3, #0
   36e20:	d000      	beq.n	36e24 <__aeabi_dadd+0x298>
   36e22:	e0f3      	b.n	3700c <__aeabi_dadd+0x480>
   36e24:	1c70      	adds	r0, r6, #1
   36e26:	0543      	lsls	r3, r0, #21
   36e28:	0d5b      	lsrs	r3, r3, #21
   36e2a:	2b01      	cmp	r3, #1
   36e2c:	dc00      	bgt.n	36e30 <__aeabi_dadd+0x2a4>
   36e2e:	e0ad      	b.n	36f8c <__aeabi_dadd+0x400>
   36e30:	4b36      	ldr	r3, [pc, #216]	; (36f0c <__aeabi_dadd+0x380>)
   36e32:	4298      	cmp	r0, r3
   36e34:	d100      	bne.n	36e38 <__aeabi_dadd+0x2ac>
   36e36:	e0d1      	b.n	36fdc <__aeabi_dadd+0x450>
   36e38:	18ba      	adds	r2, r7, r2
   36e3a:	42ba      	cmp	r2, r7
   36e3c:	41bf      	sbcs	r7, r7
   36e3e:	1864      	adds	r4, r4, r1
   36e40:	427f      	negs	r7, r7
   36e42:	19e4      	adds	r4, r4, r7
   36e44:	07e7      	lsls	r7, r4, #31
   36e46:	0852      	lsrs	r2, r2, #1
   36e48:	4317      	orrs	r7, r2
   36e4a:	0864      	lsrs	r4, r4, #1
   36e4c:	0006      	movs	r6, r0
   36e4e:	e721      	b.n	36c94 <__aeabi_dadd+0x108>
   36e50:	482e      	ldr	r0, [pc, #184]	; (36f0c <__aeabi_dadd+0x380>)
   36e52:	4285      	cmp	r5, r0
   36e54:	d100      	bne.n	36e58 <__aeabi_dadd+0x2cc>
   36e56:	e093      	b.n	36f80 <__aeabi_dadd+0x3f4>
   36e58:	001d      	movs	r5, r3
   36e5a:	e6d0      	b.n	36bfe <__aeabi_dadd+0x72>
   36e5c:	0029      	movs	r1, r5
   36e5e:	3e1f      	subs	r6, #31
   36e60:	40f1      	lsrs	r1, r6
   36e62:	2b20      	cmp	r3, #32
   36e64:	d100      	bne.n	36e68 <__aeabi_dadd+0x2dc>
   36e66:	e08d      	b.n	36f84 <__aeabi_dadd+0x3f8>
   36e68:	2240      	movs	r2, #64	; 0x40
   36e6a:	1ad3      	subs	r3, r2, r3
   36e6c:	409d      	lsls	r5, r3
   36e6e:	432f      	orrs	r7, r5
   36e70:	1e7d      	subs	r5, r7, #1
   36e72:	41af      	sbcs	r7, r5
   36e74:	2400      	movs	r4, #0
   36e76:	430f      	orrs	r7, r1
   36e78:	2600      	movs	r6, #0
   36e7a:	e744      	b.n	36d06 <__aeabi_dadd+0x17a>
   36e7c:	002b      	movs	r3, r5
   36e7e:	0008      	movs	r0, r1
   36e80:	3b20      	subs	r3, #32
   36e82:	40d8      	lsrs	r0, r3
   36e84:	0003      	movs	r3, r0
   36e86:	2d20      	cmp	r5, #32
   36e88:	d100      	bne.n	36e8c <__aeabi_dadd+0x300>
   36e8a:	e07d      	b.n	36f88 <__aeabi_dadd+0x3fc>
   36e8c:	2040      	movs	r0, #64	; 0x40
   36e8e:	1b45      	subs	r5, r0, r5
   36e90:	40a9      	lsls	r1, r5
   36e92:	430a      	orrs	r2, r1
   36e94:	1e51      	subs	r1, r2, #1
   36e96:	418a      	sbcs	r2, r1
   36e98:	2100      	movs	r1, #0
   36e9a:	431a      	orrs	r2, r3
   36e9c:	e6c7      	b.n	36c2e <__aeabi_dadd+0xa2>
   36e9e:	2e00      	cmp	r6, #0
   36ea0:	d050      	beq.n	36f44 <__aeabi_dadd+0x3b8>
   36ea2:	4e1a      	ldr	r6, [pc, #104]	; (36f0c <__aeabi_dadd+0x380>)
   36ea4:	42b0      	cmp	r0, r6
   36ea6:	d057      	beq.n	36f58 <__aeabi_dadd+0x3cc>
   36ea8:	2680      	movs	r6, #128	; 0x80
   36eaa:	426b      	negs	r3, r5
   36eac:	4699      	mov	r9, r3
   36eae:	0436      	lsls	r6, r6, #16
   36eb0:	4334      	orrs	r4, r6
   36eb2:	464b      	mov	r3, r9
   36eb4:	2b38      	cmp	r3, #56	; 0x38
   36eb6:	dd00      	ble.n	36eba <__aeabi_dadd+0x32e>
   36eb8:	e0d6      	b.n	37068 <__aeabi_dadd+0x4dc>
   36eba:	2b1f      	cmp	r3, #31
   36ebc:	dd00      	ble.n	36ec0 <__aeabi_dadd+0x334>
   36ebe:	e135      	b.n	3712c <__aeabi_dadd+0x5a0>
   36ec0:	2620      	movs	r6, #32
   36ec2:	1af5      	subs	r5, r6, r3
   36ec4:	0026      	movs	r6, r4
   36ec6:	40ae      	lsls	r6, r5
   36ec8:	46b2      	mov	sl, r6
   36eca:	003e      	movs	r6, r7
   36ecc:	40de      	lsrs	r6, r3
   36ece:	46ac      	mov	ip, r5
   36ed0:	0035      	movs	r5, r6
   36ed2:	4656      	mov	r6, sl
   36ed4:	432e      	orrs	r6, r5
   36ed6:	4665      	mov	r5, ip
   36ed8:	40af      	lsls	r7, r5
   36eda:	1e7d      	subs	r5, r7, #1
   36edc:	41af      	sbcs	r7, r5
   36ede:	40dc      	lsrs	r4, r3
   36ee0:	4337      	orrs	r7, r6
   36ee2:	1bd7      	subs	r7, r2, r7
   36ee4:	42ba      	cmp	r2, r7
   36ee6:	4192      	sbcs	r2, r2
   36ee8:	1b0c      	subs	r4, r1, r4
   36eea:	4252      	negs	r2, r2
   36eec:	1aa4      	subs	r4, r4, r2
   36eee:	0006      	movs	r6, r0
   36ef0:	46d8      	mov	r8, fp
   36ef2:	e6a3      	b.n	36c3c <__aeabi_dadd+0xb0>
   36ef4:	4664      	mov	r4, ip
   36ef6:	4667      	mov	r7, ip
   36ef8:	432c      	orrs	r4, r5
   36efa:	d000      	beq.n	36efe <__aeabi_dadd+0x372>
   36efc:	e6a2      	b.n	36c44 <__aeabi_dadd+0xb8>
   36efe:	2500      	movs	r5, #0
   36f00:	2600      	movs	r6, #0
   36f02:	2700      	movs	r7, #0
   36f04:	e706      	b.n	36d14 <__aeabi_dadd+0x188>
   36f06:	001e      	movs	r6, r3
   36f08:	e6c4      	b.n	36c94 <__aeabi_dadd+0x108>
   36f0a:	46c0      	nop			; (mov r8, r8)
   36f0c:	000007ff 	.word	0x000007ff
   36f10:	ff7fffff 	.word	0xff7fffff
   36f14:	800fffff 	.word	0x800fffff
   36f18:	2b1f      	cmp	r3, #31
   36f1a:	dc63      	bgt.n	36fe4 <__aeabi_dadd+0x458>
   36f1c:	2020      	movs	r0, #32
   36f1e:	1ac3      	subs	r3, r0, r3
   36f20:	0008      	movs	r0, r1
   36f22:	4098      	lsls	r0, r3
   36f24:	469c      	mov	ip, r3
   36f26:	4683      	mov	fp, r0
   36f28:	4653      	mov	r3, sl
   36f2a:	0010      	movs	r0, r2
   36f2c:	40d8      	lsrs	r0, r3
   36f2e:	0003      	movs	r3, r0
   36f30:	4658      	mov	r0, fp
   36f32:	4318      	orrs	r0, r3
   36f34:	4663      	mov	r3, ip
   36f36:	409a      	lsls	r2, r3
   36f38:	1e53      	subs	r3, r2, #1
   36f3a:	419a      	sbcs	r2, r3
   36f3c:	4653      	mov	r3, sl
   36f3e:	4302      	orrs	r2, r0
   36f40:	40d9      	lsrs	r1, r3
   36f42:	e703      	b.n	36d4c <__aeabi_dadd+0x1c0>
   36f44:	0026      	movs	r6, r4
   36f46:	433e      	orrs	r6, r7
   36f48:	d006      	beq.n	36f58 <__aeabi_dadd+0x3cc>
   36f4a:	43eb      	mvns	r3, r5
   36f4c:	4699      	mov	r9, r3
   36f4e:	2b00      	cmp	r3, #0
   36f50:	d0c7      	beq.n	36ee2 <__aeabi_dadd+0x356>
   36f52:	4e94      	ldr	r6, [pc, #592]	; (371a4 <__aeabi_dadd+0x618>)
   36f54:	42b0      	cmp	r0, r6
   36f56:	d1ac      	bne.n	36eb2 <__aeabi_dadd+0x326>
   36f58:	000c      	movs	r4, r1
   36f5a:	0017      	movs	r7, r2
   36f5c:	0006      	movs	r6, r0
   36f5e:	46d8      	mov	r8, fp
   36f60:	e698      	b.n	36c94 <__aeabi_dadd+0x108>
   36f62:	4b90      	ldr	r3, [pc, #576]	; (371a4 <__aeabi_dadd+0x618>)
   36f64:	459a      	cmp	sl, r3
   36f66:	d00b      	beq.n	36f80 <__aeabi_dadd+0x3f4>
   36f68:	4682      	mov	sl, r0
   36f6a:	e6e7      	b.n	36d3c <__aeabi_dadd+0x1b0>
   36f6c:	2800      	cmp	r0, #0
   36f6e:	d000      	beq.n	36f72 <__aeabi_dadd+0x3e6>
   36f70:	e09e      	b.n	370b0 <__aeabi_dadd+0x524>
   36f72:	0018      	movs	r0, r3
   36f74:	4310      	orrs	r0, r2
   36f76:	d100      	bne.n	36f7a <__aeabi_dadd+0x3ee>
   36f78:	e0e9      	b.n	3714e <__aeabi_dadd+0x5c2>
   36f7a:	001c      	movs	r4, r3
   36f7c:	0017      	movs	r7, r2
   36f7e:	46d8      	mov	r8, fp
   36f80:	4e88      	ldr	r6, [pc, #544]	; (371a4 <__aeabi_dadd+0x618>)
   36f82:	e687      	b.n	36c94 <__aeabi_dadd+0x108>
   36f84:	2500      	movs	r5, #0
   36f86:	e772      	b.n	36e6e <__aeabi_dadd+0x2e2>
   36f88:	2100      	movs	r1, #0
   36f8a:	e782      	b.n	36e92 <__aeabi_dadd+0x306>
   36f8c:	0023      	movs	r3, r4
   36f8e:	433b      	orrs	r3, r7
   36f90:	2e00      	cmp	r6, #0
   36f92:	d000      	beq.n	36f96 <__aeabi_dadd+0x40a>
   36f94:	e0ab      	b.n	370ee <__aeabi_dadd+0x562>
   36f96:	2b00      	cmp	r3, #0
   36f98:	d100      	bne.n	36f9c <__aeabi_dadd+0x410>
   36f9a:	e0e7      	b.n	3716c <__aeabi_dadd+0x5e0>
   36f9c:	000b      	movs	r3, r1
   36f9e:	4313      	orrs	r3, r2
   36fa0:	d100      	bne.n	36fa4 <__aeabi_dadd+0x418>
   36fa2:	e677      	b.n	36c94 <__aeabi_dadd+0x108>
   36fa4:	18ba      	adds	r2, r7, r2
   36fa6:	42ba      	cmp	r2, r7
   36fa8:	41bf      	sbcs	r7, r7
   36faa:	1864      	adds	r4, r4, r1
   36fac:	427f      	negs	r7, r7
   36fae:	19e4      	adds	r4, r4, r7
   36fb0:	0223      	lsls	r3, r4, #8
   36fb2:	d400      	bmi.n	36fb6 <__aeabi_dadd+0x42a>
   36fb4:	e0f2      	b.n	3719c <__aeabi_dadd+0x610>
   36fb6:	4b7c      	ldr	r3, [pc, #496]	; (371a8 <__aeabi_dadd+0x61c>)
   36fb8:	0017      	movs	r7, r2
   36fba:	401c      	ands	r4, r3
   36fbc:	0006      	movs	r6, r0
   36fbe:	e669      	b.n	36c94 <__aeabi_dadd+0x108>
   36fc0:	0020      	movs	r0, r4
   36fc2:	4338      	orrs	r0, r7
   36fc4:	2e00      	cmp	r6, #0
   36fc6:	d1d1      	bne.n	36f6c <__aeabi_dadd+0x3e0>
   36fc8:	2800      	cmp	r0, #0
   36fca:	d15b      	bne.n	37084 <__aeabi_dadd+0x4f8>
   36fcc:	001c      	movs	r4, r3
   36fce:	4314      	orrs	r4, r2
   36fd0:	d100      	bne.n	36fd4 <__aeabi_dadd+0x448>
   36fd2:	e0a8      	b.n	37126 <__aeabi_dadd+0x59a>
   36fd4:	001c      	movs	r4, r3
   36fd6:	0017      	movs	r7, r2
   36fd8:	46d8      	mov	r8, fp
   36fda:	e65b      	b.n	36c94 <__aeabi_dadd+0x108>
   36fdc:	0006      	movs	r6, r0
   36fde:	2400      	movs	r4, #0
   36fe0:	2700      	movs	r7, #0
   36fe2:	e697      	b.n	36d14 <__aeabi_dadd+0x188>
   36fe4:	4650      	mov	r0, sl
   36fe6:	000b      	movs	r3, r1
   36fe8:	3820      	subs	r0, #32
   36fea:	40c3      	lsrs	r3, r0
   36fec:	4699      	mov	r9, r3
   36fee:	4653      	mov	r3, sl
   36ff0:	2b20      	cmp	r3, #32
   36ff2:	d100      	bne.n	36ff6 <__aeabi_dadd+0x46a>
   36ff4:	e095      	b.n	37122 <__aeabi_dadd+0x596>
   36ff6:	2340      	movs	r3, #64	; 0x40
   36ff8:	4650      	mov	r0, sl
   36ffa:	1a1b      	subs	r3, r3, r0
   36ffc:	4099      	lsls	r1, r3
   36ffe:	430a      	orrs	r2, r1
   37000:	1e51      	subs	r1, r2, #1
   37002:	418a      	sbcs	r2, r1
   37004:	464b      	mov	r3, r9
   37006:	2100      	movs	r1, #0
   37008:	431a      	orrs	r2, r3
   3700a:	e69f      	b.n	36d4c <__aeabi_dadd+0x1c0>
   3700c:	2e00      	cmp	r6, #0
   3700e:	d130      	bne.n	37072 <__aeabi_dadd+0x4e6>
   37010:	0026      	movs	r6, r4
   37012:	433e      	orrs	r6, r7
   37014:	d067      	beq.n	370e6 <__aeabi_dadd+0x55a>
   37016:	43db      	mvns	r3, r3
   37018:	469a      	mov	sl, r3
   3701a:	2b00      	cmp	r3, #0
   3701c:	d01c      	beq.n	37058 <__aeabi_dadd+0x4cc>
   3701e:	4e61      	ldr	r6, [pc, #388]	; (371a4 <__aeabi_dadd+0x618>)
   37020:	42b0      	cmp	r0, r6
   37022:	d060      	beq.n	370e6 <__aeabi_dadd+0x55a>
   37024:	4653      	mov	r3, sl
   37026:	2b38      	cmp	r3, #56	; 0x38
   37028:	dd00      	ble.n	3702c <__aeabi_dadd+0x4a0>
   3702a:	e096      	b.n	3715a <__aeabi_dadd+0x5ce>
   3702c:	2b1f      	cmp	r3, #31
   3702e:	dd00      	ble.n	37032 <__aeabi_dadd+0x4a6>
   37030:	e09f      	b.n	37172 <__aeabi_dadd+0x5e6>
   37032:	2620      	movs	r6, #32
   37034:	1af3      	subs	r3, r6, r3
   37036:	0026      	movs	r6, r4
   37038:	409e      	lsls	r6, r3
   3703a:	469c      	mov	ip, r3
   3703c:	46b3      	mov	fp, r6
   3703e:	4653      	mov	r3, sl
   37040:	003e      	movs	r6, r7
   37042:	40de      	lsrs	r6, r3
   37044:	0033      	movs	r3, r6
   37046:	465e      	mov	r6, fp
   37048:	431e      	orrs	r6, r3
   3704a:	4663      	mov	r3, ip
   3704c:	409f      	lsls	r7, r3
   3704e:	1e7b      	subs	r3, r7, #1
   37050:	419f      	sbcs	r7, r3
   37052:	4653      	mov	r3, sl
   37054:	40dc      	lsrs	r4, r3
   37056:	4337      	orrs	r7, r6
   37058:	18bf      	adds	r7, r7, r2
   3705a:	4297      	cmp	r7, r2
   3705c:	4192      	sbcs	r2, r2
   3705e:	1864      	adds	r4, r4, r1
   37060:	4252      	negs	r2, r2
   37062:	18a4      	adds	r4, r4, r2
   37064:	0006      	movs	r6, r0
   37066:	e678      	b.n	36d5a <__aeabi_dadd+0x1ce>
   37068:	4327      	orrs	r7, r4
   3706a:	1e7c      	subs	r4, r7, #1
   3706c:	41a7      	sbcs	r7, r4
   3706e:	2400      	movs	r4, #0
   37070:	e737      	b.n	36ee2 <__aeabi_dadd+0x356>
   37072:	4e4c      	ldr	r6, [pc, #304]	; (371a4 <__aeabi_dadd+0x618>)
   37074:	42b0      	cmp	r0, r6
   37076:	d036      	beq.n	370e6 <__aeabi_dadd+0x55a>
   37078:	2680      	movs	r6, #128	; 0x80
   3707a:	425b      	negs	r3, r3
   3707c:	0436      	lsls	r6, r6, #16
   3707e:	469a      	mov	sl, r3
   37080:	4334      	orrs	r4, r6
   37082:	e7cf      	b.n	37024 <__aeabi_dadd+0x498>
   37084:	0018      	movs	r0, r3
   37086:	4310      	orrs	r0, r2
   37088:	d100      	bne.n	3708c <__aeabi_dadd+0x500>
   3708a:	e603      	b.n	36c94 <__aeabi_dadd+0x108>
   3708c:	1ab8      	subs	r0, r7, r2
   3708e:	4684      	mov	ip, r0
   37090:	4567      	cmp	r7, ip
   37092:	41ad      	sbcs	r5, r5
   37094:	1ae0      	subs	r0, r4, r3
   37096:	426d      	negs	r5, r5
   37098:	1b40      	subs	r0, r0, r5
   3709a:	0205      	lsls	r5, r0, #8
   3709c:	d400      	bmi.n	370a0 <__aeabi_dadd+0x514>
   3709e:	e62c      	b.n	36cfa <__aeabi_dadd+0x16e>
   370a0:	1bd7      	subs	r7, r2, r7
   370a2:	42ba      	cmp	r2, r7
   370a4:	4192      	sbcs	r2, r2
   370a6:	1b1c      	subs	r4, r3, r4
   370a8:	4252      	negs	r2, r2
   370aa:	1aa4      	subs	r4, r4, r2
   370ac:	46d8      	mov	r8, fp
   370ae:	e5f1      	b.n	36c94 <__aeabi_dadd+0x108>
   370b0:	0018      	movs	r0, r3
   370b2:	4310      	orrs	r0, r2
   370b4:	d100      	bne.n	370b8 <__aeabi_dadd+0x52c>
   370b6:	e763      	b.n	36f80 <__aeabi_dadd+0x3f4>
   370b8:	08f8      	lsrs	r0, r7, #3
   370ba:	0767      	lsls	r7, r4, #29
   370bc:	4307      	orrs	r7, r0
   370be:	2080      	movs	r0, #128	; 0x80
   370c0:	08e4      	lsrs	r4, r4, #3
   370c2:	0300      	lsls	r0, r0, #12
   370c4:	4204      	tst	r4, r0
   370c6:	d008      	beq.n	370da <__aeabi_dadd+0x54e>
   370c8:	08dd      	lsrs	r5, r3, #3
   370ca:	4205      	tst	r5, r0
   370cc:	d105      	bne.n	370da <__aeabi_dadd+0x54e>
   370ce:	08d2      	lsrs	r2, r2, #3
   370d0:	0759      	lsls	r1, r3, #29
   370d2:	4311      	orrs	r1, r2
   370d4:	000f      	movs	r7, r1
   370d6:	002c      	movs	r4, r5
   370d8:	46d8      	mov	r8, fp
   370da:	0f7b      	lsrs	r3, r7, #29
   370dc:	00e4      	lsls	r4, r4, #3
   370de:	431c      	orrs	r4, r3
   370e0:	00ff      	lsls	r7, r7, #3
   370e2:	4e30      	ldr	r6, [pc, #192]	; (371a4 <__aeabi_dadd+0x618>)
   370e4:	e5d6      	b.n	36c94 <__aeabi_dadd+0x108>
   370e6:	000c      	movs	r4, r1
   370e8:	0017      	movs	r7, r2
   370ea:	0006      	movs	r6, r0
   370ec:	e5d2      	b.n	36c94 <__aeabi_dadd+0x108>
   370ee:	2b00      	cmp	r3, #0
   370f0:	d038      	beq.n	37164 <__aeabi_dadd+0x5d8>
   370f2:	000b      	movs	r3, r1
   370f4:	4313      	orrs	r3, r2
   370f6:	d100      	bne.n	370fa <__aeabi_dadd+0x56e>
   370f8:	e742      	b.n	36f80 <__aeabi_dadd+0x3f4>
   370fa:	08f8      	lsrs	r0, r7, #3
   370fc:	0767      	lsls	r7, r4, #29
   370fe:	4307      	orrs	r7, r0
   37100:	2080      	movs	r0, #128	; 0x80
   37102:	08e4      	lsrs	r4, r4, #3
   37104:	0300      	lsls	r0, r0, #12
   37106:	4204      	tst	r4, r0
   37108:	d0e7      	beq.n	370da <__aeabi_dadd+0x54e>
   3710a:	08cb      	lsrs	r3, r1, #3
   3710c:	4203      	tst	r3, r0
   3710e:	d1e4      	bne.n	370da <__aeabi_dadd+0x54e>
   37110:	08d2      	lsrs	r2, r2, #3
   37112:	0749      	lsls	r1, r1, #29
   37114:	4311      	orrs	r1, r2
   37116:	000f      	movs	r7, r1
   37118:	001c      	movs	r4, r3
   3711a:	e7de      	b.n	370da <__aeabi_dadd+0x54e>
   3711c:	2700      	movs	r7, #0
   3711e:	2400      	movs	r4, #0
   37120:	e5d5      	b.n	36cce <__aeabi_dadd+0x142>
   37122:	2100      	movs	r1, #0
   37124:	e76b      	b.n	36ffe <__aeabi_dadd+0x472>
   37126:	2500      	movs	r5, #0
   37128:	2700      	movs	r7, #0
   3712a:	e5f3      	b.n	36d14 <__aeabi_dadd+0x188>
   3712c:	464e      	mov	r6, r9
   3712e:	0025      	movs	r5, r4
   37130:	3e20      	subs	r6, #32
   37132:	40f5      	lsrs	r5, r6
   37134:	464b      	mov	r3, r9
   37136:	002e      	movs	r6, r5
   37138:	2b20      	cmp	r3, #32
   3713a:	d02d      	beq.n	37198 <__aeabi_dadd+0x60c>
   3713c:	2540      	movs	r5, #64	; 0x40
   3713e:	1aed      	subs	r5, r5, r3
   37140:	40ac      	lsls	r4, r5
   37142:	4327      	orrs	r7, r4
   37144:	1e7c      	subs	r4, r7, #1
   37146:	41a7      	sbcs	r7, r4
   37148:	2400      	movs	r4, #0
   3714a:	4337      	orrs	r7, r6
   3714c:	e6c9      	b.n	36ee2 <__aeabi_dadd+0x356>
   3714e:	2480      	movs	r4, #128	; 0x80
   37150:	2500      	movs	r5, #0
   37152:	0324      	lsls	r4, r4, #12
   37154:	4e13      	ldr	r6, [pc, #76]	; (371a4 <__aeabi_dadd+0x618>)
   37156:	2700      	movs	r7, #0
   37158:	e5dc      	b.n	36d14 <__aeabi_dadd+0x188>
   3715a:	4327      	orrs	r7, r4
   3715c:	1e7c      	subs	r4, r7, #1
   3715e:	41a7      	sbcs	r7, r4
   37160:	2400      	movs	r4, #0
   37162:	e779      	b.n	37058 <__aeabi_dadd+0x4cc>
   37164:	000c      	movs	r4, r1
   37166:	0017      	movs	r7, r2
   37168:	4e0e      	ldr	r6, [pc, #56]	; (371a4 <__aeabi_dadd+0x618>)
   3716a:	e593      	b.n	36c94 <__aeabi_dadd+0x108>
   3716c:	000c      	movs	r4, r1
   3716e:	0017      	movs	r7, r2
   37170:	e590      	b.n	36c94 <__aeabi_dadd+0x108>
   37172:	4656      	mov	r6, sl
   37174:	0023      	movs	r3, r4
   37176:	3e20      	subs	r6, #32
   37178:	40f3      	lsrs	r3, r6
   3717a:	4699      	mov	r9, r3
   3717c:	4653      	mov	r3, sl
   3717e:	2b20      	cmp	r3, #32
   37180:	d00e      	beq.n	371a0 <__aeabi_dadd+0x614>
   37182:	2340      	movs	r3, #64	; 0x40
   37184:	4656      	mov	r6, sl
   37186:	1b9b      	subs	r3, r3, r6
   37188:	409c      	lsls	r4, r3
   3718a:	4327      	orrs	r7, r4
   3718c:	1e7c      	subs	r4, r7, #1
   3718e:	41a7      	sbcs	r7, r4
   37190:	464b      	mov	r3, r9
   37192:	2400      	movs	r4, #0
   37194:	431f      	orrs	r7, r3
   37196:	e75f      	b.n	37058 <__aeabi_dadd+0x4cc>
   37198:	2400      	movs	r4, #0
   3719a:	e7d2      	b.n	37142 <__aeabi_dadd+0x5b6>
   3719c:	0017      	movs	r7, r2
   3719e:	e5b2      	b.n	36d06 <__aeabi_dadd+0x17a>
   371a0:	2400      	movs	r4, #0
   371a2:	e7f2      	b.n	3718a <__aeabi_dadd+0x5fe>
   371a4:	000007ff 	.word	0x000007ff
   371a8:	ff7fffff 	.word	0xff7fffff

000371ac <__aeabi_ddiv>:
   371ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   371ae:	4657      	mov	r7, sl
   371b0:	4645      	mov	r5, r8
   371b2:	46de      	mov	lr, fp
   371b4:	464e      	mov	r6, r9
   371b6:	b5e0      	push	{r5, r6, r7, lr}
   371b8:	004c      	lsls	r4, r1, #1
   371ba:	030e      	lsls	r6, r1, #12
   371bc:	b087      	sub	sp, #28
   371be:	4683      	mov	fp, r0
   371c0:	4692      	mov	sl, r2
   371c2:	001d      	movs	r5, r3
   371c4:	4680      	mov	r8, r0
   371c6:	0b36      	lsrs	r6, r6, #12
   371c8:	0d64      	lsrs	r4, r4, #21
   371ca:	0fcf      	lsrs	r7, r1, #31
   371cc:	2c00      	cmp	r4, #0
   371ce:	d04f      	beq.n	37270 <__aeabi_ddiv+0xc4>
   371d0:	4b6f      	ldr	r3, [pc, #444]	; (37390 <__aeabi_ddiv+0x1e4>)
   371d2:	429c      	cmp	r4, r3
   371d4:	d035      	beq.n	37242 <__aeabi_ddiv+0x96>
   371d6:	2380      	movs	r3, #128	; 0x80
   371d8:	0f42      	lsrs	r2, r0, #29
   371da:	041b      	lsls	r3, r3, #16
   371dc:	00f6      	lsls	r6, r6, #3
   371de:	4313      	orrs	r3, r2
   371e0:	4333      	orrs	r3, r6
   371e2:	4699      	mov	r9, r3
   371e4:	00c3      	lsls	r3, r0, #3
   371e6:	4698      	mov	r8, r3
   371e8:	4b6a      	ldr	r3, [pc, #424]	; (37394 <__aeabi_ddiv+0x1e8>)
   371ea:	2600      	movs	r6, #0
   371ec:	469c      	mov	ip, r3
   371ee:	2300      	movs	r3, #0
   371f0:	4464      	add	r4, ip
   371f2:	9303      	str	r3, [sp, #12]
   371f4:	032b      	lsls	r3, r5, #12
   371f6:	0b1b      	lsrs	r3, r3, #12
   371f8:	469b      	mov	fp, r3
   371fa:	006b      	lsls	r3, r5, #1
   371fc:	0fed      	lsrs	r5, r5, #31
   371fe:	4650      	mov	r0, sl
   37200:	0d5b      	lsrs	r3, r3, #21
   37202:	9501      	str	r5, [sp, #4]
   37204:	d05e      	beq.n	372c4 <__aeabi_ddiv+0x118>
   37206:	4a62      	ldr	r2, [pc, #392]	; (37390 <__aeabi_ddiv+0x1e4>)
   37208:	4293      	cmp	r3, r2
   3720a:	d053      	beq.n	372b4 <__aeabi_ddiv+0x108>
   3720c:	465a      	mov	r2, fp
   3720e:	00d1      	lsls	r1, r2, #3
   37210:	2280      	movs	r2, #128	; 0x80
   37212:	0f40      	lsrs	r0, r0, #29
   37214:	0412      	lsls	r2, r2, #16
   37216:	4302      	orrs	r2, r0
   37218:	430a      	orrs	r2, r1
   3721a:	4693      	mov	fp, r2
   3721c:	4652      	mov	r2, sl
   3721e:	00d1      	lsls	r1, r2, #3
   37220:	4a5c      	ldr	r2, [pc, #368]	; (37394 <__aeabi_ddiv+0x1e8>)
   37222:	4694      	mov	ip, r2
   37224:	2200      	movs	r2, #0
   37226:	4463      	add	r3, ip
   37228:	0038      	movs	r0, r7
   3722a:	4068      	eors	r0, r5
   3722c:	4684      	mov	ip, r0
   3722e:	9002      	str	r0, [sp, #8]
   37230:	1ae4      	subs	r4, r4, r3
   37232:	4316      	orrs	r6, r2
   37234:	2e0f      	cmp	r6, #15
   37236:	d900      	bls.n	3723a <__aeabi_ddiv+0x8e>
   37238:	e0b4      	b.n	373a4 <__aeabi_ddiv+0x1f8>
   3723a:	4b57      	ldr	r3, [pc, #348]	; (37398 <__aeabi_ddiv+0x1ec>)
   3723c:	00b6      	lsls	r6, r6, #2
   3723e:	599b      	ldr	r3, [r3, r6]
   37240:	469f      	mov	pc, r3
   37242:	0003      	movs	r3, r0
   37244:	4333      	orrs	r3, r6
   37246:	4699      	mov	r9, r3
   37248:	d16c      	bne.n	37324 <__aeabi_ddiv+0x178>
   3724a:	2300      	movs	r3, #0
   3724c:	4698      	mov	r8, r3
   3724e:	3302      	adds	r3, #2
   37250:	2608      	movs	r6, #8
   37252:	9303      	str	r3, [sp, #12]
   37254:	e7ce      	b.n	371f4 <__aeabi_ddiv+0x48>
   37256:	46cb      	mov	fp, r9
   37258:	4641      	mov	r1, r8
   3725a:	9a03      	ldr	r2, [sp, #12]
   3725c:	9701      	str	r7, [sp, #4]
   3725e:	2a02      	cmp	r2, #2
   37260:	d165      	bne.n	3732e <__aeabi_ddiv+0x182>
   37262:	9b01      	ldr	r3, [sp, #4]
   37264:	4c4a      	ldr	r4, [pc, #296]	; (37390 <__aeabi_ddiv+0x1e4>)
   37266:	469c      	mov	ip, r3
   37268:	2300      	movs	r3, #0
   3726a:	2200      	movs	r2, #0
   3726c:	4698      	mov	r8, r3
   3726e:	e06b      	b.n	37348 <__aeabi_ddiv+0x19c>
   37270:	0003      	movs	r3, r0
   37272:	4333      	orrs	r3, r6
   37274:	4699      	mov	r9, r3
   37276:	d04e      	beq.n	37316 <__aeabi_ddiv+0x16a>
   37278:	2e00      	cmp	r6, #0
   3727a:	d100      	bne.n	3727e <__aeabi_ddiv+0xd2>
   3727c:	e1bc      	b.n	375f8 <__aeabi_ddiv+0x44c>
   3727e:	0030      	movs	r0, r6
   37280:	f001 f8ca 	bl	38418 <__clzsi2>
   37284:	0003      	movs	r3, r0
   37286:	3b0b      	subs	r3, #11
   37288:	2b1c      	cmp	r3, #28
   3728a:	dd00      	ble.n	3728e <__aeabi_ddiv+0xe2>
   3728c:	e1ac      	b.n	375e8 <__aeabi_ddiv+0x43c>
   3728e:	221d      	movs	r2, #29
   37290:	1ad3      	subs	r3, r2, r3
   37292:	465a      	mov	r2, fp
   37294:	0001      	movs	r1, r0
   37296:	40da      	lsrs	r2, r3
   37298:	3908      	subs	r1, #8
   3729a:	408e      	lsls	r6, r1
   3729c:	0013      	movs	r3, r2
   3729e:	4333      	orrs	r3, r6
   372a0:	4699      	mov	r9, r3
   372a2:	465b      	mov	r3, fp
   372a4:	408b      	lsls	r3, r1
   372a6:	4698      	mov	r8, r3
   372a8:	2300      	movs	r3, #0
   372aa:	4c3c      	ldr	r4, [pc, #240]	; (3739c <__aeabi_ddiv+0x1f0>)
   372ac:	2600      	movs	r6, #0
   372ae:	1a24      	subs	r4, r4, r0
   372b0:	9303      	str	r3, [sp, #12]
   372b2:	e79f      	b.n	371f4 <__aeabi_ddiv+0x48>
   372b4:	4651      	mov	r1, sl
   372b6:	465a      	mov	r2, fp
   372b8:	4311      	orrs	r1, r2
   372ba:	d129      	bne.n	37310 <__aeabi_ddiv+0x164>
   372bc:	2200      	movs	r2, #0
   372be:	4693      	mov	fp, r2
   372c0:	3202      	adds	r2, #2
   372c2:	e7b1      	b.n	37228 <__aeabi_ddiv+0x7c>
   372c4:	4659      	mov	r1, fp
   372c6:	4301      	orrs	r1, r0
   372c8:	d01e      	beq.n	37308 <__aeabi_ddiv+0x15c>
   372ca:	465b      	mov	r3, fp
   372cc:	2b00      	cmp	r3, #0
   372ce:	d100      	bne.n	372d2 <__aeabi_ddiv+0x126>
   372d0:	e19e      	b.n	37610 <__aeabi_ddiv+0x464>
   372d2:	4658      	mov	r0, fp
   372d4:	f001 f8a0 	bl	38418 <__clzsi2>
   372d8:	0003      	movs	r3, r0
   372da:	3b0b      	subs	r3, #11
   372dc:	2b1c      	cmp	r3, #28
   372de:	dd00      	ble.n	372e2 <__aeabi_ddiv+0x136>
   372e0:	e18f      	b.n	37602 <__aeabi_ddiv+0x456>
   372e2:	0002      	movs	r2, r0
   372e4:	4659      	mov	r1, fp
   372e6:	3a08      	subs	r2, #8
   372e8:	4091      	lsls	r1, r2
   372ea:	468b      	mov	fp, r1
   372ec:	211d      	movs	r1, #29
   372ee:	1acb      	subs	r3, r1, r3
   372f0:	4651      	mov	r1, sl
   372f2:	40d9      	lsrs	r1, r3
   372f4:	000b      	movs	r3, r1
   372f6:	4659      	mov	r1, fp
   372f8:	430b      	orrs	r3, r1
   372fa:	4651      	mov	r1, sl
   372fc:	469b      	mov	fp, r3
   372fe:	4091      	lsls	r1, r2
   37300:	4b26      	ldr	r3, [pc, #152]	; (3739c <__aeabi_ddiv+0x1f0>)
   37302:	2200      	movs	r2, #0
   37304:	1a1b      	subs	r3, r3, r0
   37306:	e78f      	b.n	37228 <__aeabi_ddiv+0x7c>
   37308:	2300      	movs	r3, #0
   3730a:	2201      	movs	r2, #1
   3730c:	469b      	mov	fp, r3
   3730e:	e78b      	b.n	37228 <__aeabi_ddiv+0x7c>
   37310:	4651      	mov	r1, sl
   37312:	2203      	movs	r2, #3
   37314:	e788      	b.n	37228 <__aeabi_ddiv+0x7c>
   37316:	2300      	movs	r3, #0
   37318:	4698      	mov	r8, r3
   3731a:	3301      	adds	r3, #1
   3731c:	2604      	movs	r6, #4
   3731e:	2400      	movs	r4, #0
   37320:	9303      	str	r3, [sp, #12]
   37322:	e767      	b.n	371f4 <__aeabi_ddiv+0x48>
   37324:	2303      	movs	r3, #3
   37326:	46b1      	mov	r9, r6
   37328:	9303      	str	r3, [sp, #12]
   3732a:	260c      	movs	r6, #12
   3732c:	e762      	b.n	371f4 <__aeabi_ddiv+0x48>
   3732e:	2a03      	cmp	r2, #3
   37330:	d100      	bne.n	37334 <__aeabi_ddiv+0x188>
   37332:	e25c      	b.n	377ee <__aeabi_ddiv+0x642>
   37334:	9b01      	ldr	r3, [sp, #4]
   37336:	2a01      	cmp	r2, #1
   37338:	d000      	beq.n	3733c <__aeabi_ddiv+0x190>
   3733a:	e1e4      	b.n	37706 <__aeabi_ddiv+0x55a>
   3733c:	4013      	ands	r3, r2
   3733e:	469c      	mov	ip, r3
   37340:	2300      	movs	r3, #0
   37342:	2400      	movs	r4, #0
   37344:	2200      	movs	r2, #0
   37346:	4698      	mov	r8, r3
   37348:	2100      	movs	r1, #0
   3734a:	0312      	lsls	r2, r2, #12
   3734c:	0b13      	lsrs	r3, r2, #12
   3734e:	0d0a      	lsrs	r2, r1, #20
   37350:	0512      	lsls	r2, r2, #20
   37352:	431a      	orrs	r2, r3
   37354:	0523      	lsls	r3, r4, #20
   37356:	4c12      	ldr	r4, [pc, #72]	; (373a0 <__aeabi_ddiv+0x1f4>)
   37358:	4640      	mov	r0, r8
   3735a:	4022      	ands	r2, r4
   3735c:	4313      	orrs	r3, r2
   3735e:	4662      	mov	r2, ip
   37360:	005b      	lsls	r3, r3, #1
   37362:	07d2      	lsls	r2, r2, #31
   37364:	085b      	lsrs	r3, r3, #1
   37366:	4313      	orrs	r3, r2
   37368:	0019      	movs	r1, r3
   3736a:	b007      	add	sp, #28
   3736c:	bc3c      	pop	{r2, r3, r4, r5}
   3736e:	4690      	mov	r8, r2
   37370:	4699      	mov	r9, r3
   37372:	46a2      	mov	sl, r4
   37374:	46ab      	mov	fp, r5
   37376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37378:	2300      	movs	r3, #0
   3737a:	2280      	movs	r2, #128	; 0x80
   3737c:	469c      	mov	ip, r3
   3737e:	0312      	lsls	r2, r2, #12
   37380:	4698      	mov	r8, r3
   37382:	4c03      	ldr	r4, [pc, #12]	; (37390 <__aeabi_ddiv+0x1e4>)
   37384:	e7e0      	b.n	37348 <__aeabi_ddiv+0x19c>
   37386:	2300      	movs	r3, #0
   37388:	4c01      	ldr	r4, [pc, #4]	; (37390 <__aeabi_ddiv+0x1e4>)
   3738a:	2200      	movs	r2, #0
   3738c:	4698      	mov	r8, r3
   3738e:	e7db      	b.n	37348 <__aeabi_ddiv+0x19c>
   37390:	000007ff 	.word	0x000007ff
   37394:	fffffc01 	.word	0xfffffc01
   37398:	0003e710 	.word	0x0003e710
   3739c:	fffffc0d 	.word	0xfffffc0d
   373a0:	800fffff 	.word	0x800fffff
   373a4:	45d9      	cmp	r9, fp
   373a6:	d900      	bls.n	373aa <__aeabi_ddiv+0x1fe>
   373a8:	e139      	b.n	3761e <__aeabi_ddiv+0x472>
   373aa:	d100      	bne.n	373ae <__aeabi_ddiv+0x202>
   373ac:	e134      	b.n	37618 <__aeabi_ddiv+0x46c>
   373ae:	2300      	movs	r3, #0
   373b0:	4646      	mov	r6, r8
   373b2:	464d      	mov	r5, r9
   373b4:	469a      	mov	sl, r3
   373b6:	3c01      	subs	r4, #1
   373b8:	465b      	mov	r3, fp
   373ba:	0e0a      	lsrs	r2, r1, #24
   373bc:	021b      	lsls	r3, r3, #8
   373be:	431a      	orrs	r2, r3
   373c0:	020b      	lsls	r3, r1, #8
   373c2:	0c17      	lsrs	r7, r2, #16
   373c4:	9303      	str	r3, [sp, #12]
   373c6:	0413      	lsls	r3, r2, #16
   373c8:	0c1b      	lsrs	r3, r3, #16
   373ca:	0039      	movs	r1, r7
   373cc:	0028      	movs	r0, r5
   373ce:	4690      	mov	r8, r2
   373d0:	9301      	str	r3, [sp, #4]
   373d2:	f7fe fb0d 	bl	359f0 <__udivsi3>
   373d6:	0002      	movs	r2, r0
   373d8:	9b01      	ldr	r3, [sp, #4]
   373da:	4683      	mov	fp, r0
   373dc:	435a      	muls	r2, r3
   373de:	0028      	movs	r0, r5
   373e0:	0039      	movs	r1, r7
   373e2:	4691      	mov	r9, r2
   373e4:	f7fe fb8a 	bl	35afc <__aeabi_uidivmod>
   373e8:	0c35      	lsrs	r5, r6, #16
   373ea:	0409      	lsls	r1, r1, #16
   373ec:	430d      	orrs	r5, r1
   373ee:	45a9      	cmp	r9, r5
   373f0:	d90d      	bls.n	3740e <__aeabi_ddiv+0x262>
   373f2:	465b      	mov	r3, fp
   373f4:	4445      	add	r5, r8
   373f6:	3b01      	subs	r3, #1
   373f8:	45a8      	cmp	r8, r5
   373fa:	d900      	bls.n	373fe <__aeabi_ddiv+0x252>
   373fc:	e13a      	b.n	37674 <__aeabi_ddiv+0x4c8>
   373fe:	45a9      	cmp	r9, r5
   37400:	d800      	bhi.n	37404 <__aeabi_ddiv+0x258>
   37402:	e137      	b.n	37674 <__aeabi_ddiv+0x4c8>
   37404:	2302      	movs	r3, #2
   37406:	425b      	negs	r3, r3
   37408:	469c      	mov	ip, r3
   3740a:	4445      	add	r5, r8
   3740c:	44e3      	add	fp, ip
   3740e:	464b      	mov	r3, r9
   37410:	1aeb      	subs	r3, r5, r3
   37412:	0039      	movs	r1, r7
   37414:	0018      	movs	r0, r3
   37416:	9304      	str	r3, [sp, #16]
   37418:	f7fe faea 	bl	359f0 <__udivsi3>
   3741c:	9b01      	ldr	r3, [sp, #4]
   3741e:	0005      	movs	r5, r0
   37420:	4343      	muls	r3, r0
   37422:	0039      	movs	r1, r7
   37424:	9804      	ldr	r0, [sp, #16]
   37426:	4699      	mov	r9, r3
   37428:	f7fe fb68 	bl	35afc <__aeabi_uidivmod>
   3742c:	0433      	lsls	r3, r6, #16
   3742e:	0409      	lsls	r1, r1, #16
   37430:	0c1b      	lsrs	r3, r3, #16
   37432:	430b      	orrs	r3, r1
   37434:	4599      	cmp	r9, r3
   37436:	d909      	bls.n	3744c <__aeabi_ddiv+0x2a0>
   37438:	4443      	add	r3, r8
   3743a:	1e6a      	subs	r2, r5, #1
   3743c:	4598      	cmp	r8, r3
   3743e:	d900      	bls.n	37442 <__aeabi_ddiv+0x296>
   37440:	e11a      	b.n	37678 <__aeabi_ddiv+0x4cc>
   37442:	4599      	cmp	r9, r3
   37444:	d800      	bhi.n	37448 <__aeabi_ddiv+0x29c>
   37446:	e117      	b.n	37678 <__aeabi_ddiv+0x4cc>
   37448:	3d02      	subs	r5, #2
   3744a:	4443      	add	r3, r8
   3744c:	464a      	mov	r2, r9
   3744e:	1a9b      	subs	r3, r3, r2
   37450:	465a      	mov	r2, fp
   37452:	0412      	lsls	r2, r2, #16
   37454:	432a      	orrs	r2, r5
   37456:	9903      	ldr	r1, [sp, #12]
   37458:	4693      	mov	fp, r2
   3745a:	0c10      	lsrs	r0, r2, #16
   3745c:	0c0a      	lsrs	r2, r1, #16
   3745e:	4691      	mov	r9, r2
   37460:	0409      	lsls	r1, r1, #16
   37462:	465a      	mov	r2, fp
   37464:	0c09      	lsrs	r1, r1, #16
   37466:	464e      	mov	r6, r9
   37468:	000d      	movs	r5, r1
   3746a:	0412      	lsls	r2, r2, #16
   3746c:	0c12      	lsrs	r2, r2, #16
   3746e:	4345      	muls	r5, r0
   37470:	9105      	str	r1, [sp, #20]
   37472:	4351      	muls	r1, r2
   37474:	4372      	muls	r2, r6
   37476:	4370      	muls	r0, r6
   37478:	1952      	adds	r2, r2, r5
   3747a:	0c0e      	lsrs	r6, r1, #16
   3747c:	18b2      	adds	r2, r6, r2
   3747e:	4295      	cmp	r5, r2
   37480:	d903      	bls.n	3748a <__aeabi_ddiv+0x2de>
   37482:	2580      	movs	r5, #128	; 0x80
   37484:	026d      	lsls	r5, r5, #9
   37486:	46ac      	mov	ip, r5
   37488:	4460      	add	r0, ip
   3748a:	0c15      	lsrs	r5, r2, #16
   3748c:	0409      	lsls	r1, r1, #16
   3748e:	0412      	lsls	r2, r2, #16
   37490:	0c09      	lsrs	r1, r1, #16
   37492:	1828      	adds	r0, r5, r0
   37494:	1852      	adds	r2, r2, r1
   37496:	4283      	cmp	r3, r0
   37498:	d200      	bcs.n	3749c <__aeabi_ddiv+0x2f0>
   3749a:	e0ce      	b.n	3763a <__aeabi_ddiv+0x48e>
   3749c:	d100      	bne.n	374a0 <__aeabi_ddiv+0x2f4>
   3749e:	e0c8      	b.n	37632 <__aeabi_ddiv+0x486>
   374a0:	1a1d      	subs	r5, r3, r0
   374a2:	4653      	mov	r3, sl
   374a4:	1a9e      	subs	r6, r3, r2
   374a6:	45b2      	cmp	sl, r6
   374a8:	4192      	sbcs	r2, r2
   374aa:	4252      	negs	r2, r2
   374ac:	1aab      	subs	r3, r5, r2
   374ae:	469a      	mov	sl, r3
   374b0:	4598      	cmp	r8, r3
   374b2:	d100      	bne.n	374b6 <__aeabi_ddiv+0x30a>
   374b4:	e117      	b.n	376e6 <__aeabi_ddiv+0x53a>
   374b6:	0039      	movs	r1, r7
   374b8:	0018      	movs	r0, r3
   374ba:	f7fe fa99 	bl	359f0 <__udivsi3>
   374be:	9b01      	ldr	r3, [sp, #4]
   374c0:	0005      	movs	r5, r0
   374c2:	4343      	muls	r3, r0
   374c4:	0039      	movs	r1, r7
   374c6:	4650      	mov	r0, sl
   374c8:	9304      	str	r3, [sp, #16]
   374ca:	f7fe fb17 	bl	35afc <__aeabi_uidivmod>
   374ce:	9804      	ldr	r0, [sp, #16]
   374d0:	040b      	lsls	r3, r1, #16
   374d2:	0c31      	lsrs	r1, r6, #16
   374d4:	4319      	orrs	r1, r3
   374d6:	4288      	cmp	r0, r1
   374d8:	d909      	bls.n	374ee <__aeabi_ddiv+0x342>
   374da:	4441      	add	r1, r8
   374dc:	1e6b      	subs	r3, r5, #1
   374de:	4588      	cmp	r8, r1
   374e0:	d900      	bls.n	374e4 <__aeabi_ddiv+0x338>
   374e2:	e107      	b.n	376f4 <__aeabi_ddiv+0x548>
   374e4:	4288      	cmp	r0, r1
   374e6:	d800      	bhi.n	374ea <__aeabi_ddiv+0x33e>
   374e8:	e104      	b.n	376f4 <__aeabi_ddiv+0x548>
   374ea:	3d02      	subs	r5, #2
   374ec:	4441      	add	r1, r8
   374ee:	9b04      	ldr	r3, [sp, #16]
   374f0:	1acb      	subs	r3, r1, r3
   374f2:	0018      	movs	r0, r3
   374f4:	0039      	movs	r1, r7
   374f6:	9304      	str	r3, [sp, #16]
   374f8:	f7fe fa7a 	bl	359f0 <__udivsi3>
   374fc:	9b01      	ldr	r3, [sp, #4]
   374fe:	4682      	mov	sl, r0
   37500:	4343      	muls	r3, r0
   37502:	0039      	movs	r1, r7
   37504:	9804      	ldr	r0, [sp, #16]
   37506:	9301      	str	r3, [sp, #4]
   37508:	f7fe faf8 	bl	35afc <__aeabi_uidivmod>
   3750c:	9801      	ldr	r0, [sp, #4]
   3750e:	040b      	lsls	r3, r1, #16
   37510:	0431      	lsls	r1, r6, #16
   37512:	0c09      	lsrs	r1, r1, #16
   37514:	4319      	orrs	r1, r3
   37516:	4288      	cmp	r0, r1
   37518:	d90d      	bls.n	37536 <__aeabi_ddiv+0x38a>
   3751a:	4653      	mov	r3, sl
   3751c:	4441      	add	r1, r8
   3751e:	3b01      	subs	r3, #1
   37520:	4588      	cmp	r8, r1
   37522:	d900      	bls.n	37526 <__aeabi_ddiv+0x37a>
   37524:	e0e8      	b.n	376f8 <__aeabi_ddiv+0x54c>
   37526:	4288      	cmp	r0, r1
   37528:	d800      	bhi.n	3752c <__aeabi_ddiv+0x380>
   3752a:	e0e5      	b.n	376f8 <__aeabi_ddiv+0x54c>
   3752c:	2302      	movs	r3, #2
   3752e:	425b      	negs	r3, r3
   37530:	469c      	mov	ip, r3
   37532:	4441      	add	r1, r8
   37534:	44e2      	add	sl, ip
   37536:	9b01      	ldr	r3, [sp, #4]
   37538:	042d      	lsls	r5, r5, #16
   3753a:	1ace      	subs	r6, r1, r3
   3753c:	4651      	mov	r1, sl
   3753e:	4329      	orrs	r1, r5
   37540:	9d05      	ldr	r5, [sp, #20]
   37542:	464f      	mov	r7, r9
   37544:	002a      	movs	r2, r5
   37546:	040b      	lsls	r3, r1, #16
   37548:	0c08      	lsrs	r0, r1, #16
   3754a:	0c1b      	lsrs	r3, r3, #16
   3754c:	435a      	muls	r2, r3
   3754e:	4345      	muls	r5, r0
   37550:	437b      	muls	r3, r7
   37552:	4378      	muls	r0, r7
   37554:	195b      	adds	r3, r3, r5
   37556:	0c17      	lsrs	r7, r2, #16
   37558:	18fb      	adds	r3, r7, r3
   3755a:	429d      	cmp	r5, r3
   3755c:	d903      	bls.n	37566 <__aeabi_ddiv+0x3ba>
   3755e:	2580      	movs	r5, #128	; 0x80
   37560:	026d      	lsls	r5, r5, #9
   37562:	46ac      	mov	ip, r5
   37564:	4460      	add	r0, ip
   37566:	0c1d      	lsrs	r5, r3, #16
   37568:	0412      	lsls	r2, r2, #16
   3756a:	041b      	lsls	r3, r3, #16
   3756c:	0c12      	lsrs	r2, r2, #16
   3756e:	1828      	adds	r0, r5, r0
   37570:	189b      	adds	r3, r3, r2
   37572:	4286      	cmp	r6, r0
   37574:	d200      	bcs.n	37578 <__aeabi_ddiv+0x3cc>
   37576:	e093      	b.n	376a0 <__aeabi_ddiv+0x4f4>
   37578:	d100      	bne.n	3757c <__aeabi_ddiv+0x3d0>
   3757a:	e08e      	b.n	3769a <__aeabi_ddiv+0x4ee>
   3757c:	2301      	movs	r3, #1
   3757e:	4319      	orrs	r1, r3
   37580:	4ba0      	ldr	r3, [pc, #640]	; (37804 <__aeabi_ddiv+0x658>)
   37582:	18e3      	adds	r3, r4, r3
   37584:	2b00      	cmp	r3, #0
   37586:	dc00      	bgt.n	3758a <__aeabi_ddiv+0x3de>
   37588:	e099      	b.n	376be <__aeabi_ddiv+0x512>
   3758a:	074a      	lsls	r2, r1, #29
   3758c:	d000      	beq.n	37590 <__aeabi_ddiv+0x3e4>
   3758e:	e09e      	b.n	376ce <__aeabi_ddiv+0x522>
   37590:	465a      	mov	r2, fp
   37592:	01d2      	lsls	r2, r2, #7
   37594:	d506      	bpl.n	375a4 <__aeabi_ddiv+0x3f8>
   37596:	465a      	mov	r2, fp
   37598:	4b9b      	ldr	r3, [pc, #620]	; (37808 <__aeabi_ddiv+0x65c>)
   3759a:	401a      	ands	r2, r3
   3759c:	2380      	movs	r3, #128	; 0x80
   3759e:	4693      	mov	fp, r2
   375a0:	00db      	lsls	r3, r3, #3
   375a2:	18e3      	adds	r3, r4, r3
   375a4:	4a99      	ldr	r2, [pc, #612]	; (3780c <__aeabi_ddiv+0x660>)
   375a6:	4293      	cmp	r3, r2
   375a8:	dd68      	ble.n	3767c <__aeabi_ddiv+0x4d0>
   375aa:	2301      	movs	r3, #1
   375ac:	9a02      	ldr	r2, [sp, #8]
   375ae:	4c98      	ldr	r4, [pc, #608]	; (37810 <__aeabi_ddiv+0x664>)
   375b0:	401a      	ands	r2, r3
   375b2:	2300      	movs	r3, #0
   375b4:	4694      	mov	ip, r2
   375b6:	4698      	mov	r8, r3
   375b8:	2200      	movs	r2, #0
   375ba:	e6c5      	b.n	37348 <__aeabi_ddiv+0x19c>
   375bc:	2280      	movs	r2, #128	; 0x80
   375be:	464b      	mov	r3, r9
   375c0:	0312      	lsls	r2, r2, #12
   375c2:	4213      	tst	r3, r2
   375c4:	d00a      	beq.n	375dc <__aeabi_ddiv+0x430>
   375c6:	465b      	mov	r3, fp
   375c8:	4213      	tst	r3, r2
   375ca:	d106      	bne.n	375da <__aeabi_ddiv+0x42e>
   375cc:	431a      	orrs	r2, r3
   375ce:	0312      	lsls	r2, r2, #12
   375d0:	0b12      	lsrs	r2, r2, #12
   375d2:	46ac      	mov	ip, r5
   375d4:	4688      	mov	r8, r1
   375d6:	4c8e      	ldr	r4, [pc, #568]	; (37810 <__aeabi_ddiv+0x664>)
   375d8:	e6b6      	b.n	37348 <__aeabi_ddiv+0x19c>
   375da:	464b      	mov	r3, r9
   375dc:	431a      	orrs	r2, r3
   375de:	0312      	lsls	r2, r2, #12
   375e0:	0b12      	lsrs	r2, r2, #12
   375e2:	46bc      	mov	ip, r7
   375e4:	4c8a      	ldr	r4, [pc, #552]	; (37810 <__aeabi_ddiv+0x664>)
   375e6:	e6af      	b.n	37348 <__aeabi_ddiv+0x19c>
   375e8:	0003      	movs	r3, r0
   375ea:	465a      	mov	r2, fp
   375ec:	3b28      	subs	r3, #40	; 0x28
   375ee:	409a      	lsls	r2, r3
   375f0:	2300      	movs	r3, #0
   375f2:	4691      	mov	r9, r2
   375f4:	4698      	mov	r8, r3
   375f6:	e657      	b.n	372a8 <__aeabi_ddiv+0xfc>
   375f8:	4658      	mov	r0, fp
   375fa:	f000 ff0d 	bl	38418 <__clzsi2>
   375fe:	3020      	adds	r0, #32
   37600:	e640      	b.n	37284 <__aeabi_ddiv+0xd8>
   37602:	0003      	movs	r3, r0
   37604:	4652      	mov	r2, sl
   37606:	3b28      	subs	r3, #40	; 0x28
   37608:	409a      	lsls	r2, r3
   3760a:	2100      	movs	r1, #0
   3760c:	4693      	mov	fp, r2
   3760e:	e677      	b.n	37300 <__aeabi_ddiv+0x154>
   37610:	f000 ff02 	bl	38418 <__clzsi2>
   37614:	3020      	adds	r0, #32
   37616:	e65f      	b.n	372d8 <__aeabi_ddiv+0x12c>
   37618:	4588      	cmp	r8, r1
   3761a:	d200      	bcs.n	3761e <__aeabi_ddiv+0x472>
   3761c:	e6c7      	b.n	373ae <__aeabi_ddiv+0x202>
   3761e:	464b      	mov	r3, r9
   37620:	07de      	lsls	r6, r3, #31
   37622:	085d      	lsrs	r5, r3, #1
   37624:	4643      	mov	r3, r8
   37626:	085b      	lsrs	r3, r3, #1
   37628:	431e      	orrs	r6, r3
   3762a:	4643      	mov	r3, r8
   3762c:	07db      	lsls	r3, r3, #31
   3762e:	469a      	mov	sl, r3
   37630:	e6c2      	b.n	373b8 <__aeabi_ddiv+0x20c>
   37632:	2500      	movs	r5, #0
   37634:	4592      	cmp	sl, r2
   37636:	d300      	bcc.n	3763a <__aeabi_ddiv+0x48e>
   37638:	e733      	b.n	374a2 <__aeabi_ddiv+0x2f6>
   3763a:	9e03      	ldr	r6, [sp, #12]
   3763c:	4659      	mov	r1, fp
   3763e:	46b4      	mov	ip, r6
   37640:	44e2      	add	sl, ip
   37642:	45b2      	cmp	sl, r6
   37644:	41ad      	sbcs	r5, r5
   37646:	426d      	negs	r5, r5
   37648:	4445      	add	r5, r8
   3764a:	18eb      	adds	r3, r5, r3
   3764c:	3901      	subs	r1, #1
   3764e:	4598      	cmp	r8, r3
   37650:	d207      	bcs.n	37662 <__aeabi_ddiv+0x4b6>
   37652:	4298      	cmp	r0, r3
   37654:	d900      	bls.n	37658 <__aeabi_ddiv+0x4ac>
   37656:	e07f      	b.n	37758 <__aeabi_ddiv+0x5ac>
   37658:	d100      	bne.n	3765c <__aeabi_ddiv+0x4b0>
   3765a:	e0bc      	b.n	377d6 <__aeabi_ddiv+0x62a>
   3765c:	1a1d      	subs	r5, r3, r0
   3765e:	468b      	mov	fp, r1
   37660:	e71f      	b.n	374a2 <__aeabi_ddiv+0x2f6>
   37662:	4598      	cmp	r8, r3
   37664:	d1fa      	bne.n	3765c <__aeabi_ddiv+0x4b0>
   37666:	9d03      	ldr	r5, [sp, #12]
   37668:	4555      	cmp	r5, sl
   3766a:	d9f2      	bls.n	37652 <__aeabi_ddiv+0x4a6>
   3766c:	4643      	mov	r3, r8
   3766e:	468b      	mov	fp, r1
   37670:	1a1d      	subs	r5, r3, r0
   37672:	e716      	b.n	374a2 <__aeabi_ddiv+0x2f6>
   37674:	469b      	mov	fp, r3
   37676:	e6ca      	b.n	3740e <__aeabi_ddiv+0x262>
   37678:	0015      	movs	r5, r2
   3767a:	e6e7      	b.n	3744c <__aeabi_ddiv+0x2a0>
   3767c:	465a      	mov	r2, fp
   3767e:	08c9      	lsrs	r1, r1, #3
   37680:	0752      	lsls	r2, r2, #29
   37682:	430a      	orrs	r2, r1
   37684:	055b      	lsls	r3, r3, #21
   37686:	4690      	mov	r8, r2
   37688:	0d5c      	lsrs	r4, r3, #21
   3768a:	465a      	mov	r2, fp
   3768c:	2301      	movs	r3, #1
   3768e:	9902      	ldr	r1, [sp, #8]
   37690:	0252      	lsls	r2, r2, #9
   37692:	4019      	ands	r1, r3
   37694:	0b12      	lsrs	r2, r2, #12
   37696:	468c      	mov	ip, r1
   37698:	e656      	b.n	37348 <__aeabi_ddiv+0x19c>
   3769a:	2b00      	cmp	r3, #0
   3769c:	d100      	bne.n	376a0 <__aeabi_ddiv+0x4f4>
   3769e:	e76f      	b.n	37580 <__aeabi_ddiv+0x3d4>
   376a0:	4446      	add	r6, r8
   376a2:	1e4a      	subs	r2, r1, #1
   376a4:	45b0      	cmp	r8, r6
   376a6:	d929      	bls.n	376fc <__aeabi_ddiv+0x550>
   376a8:	0011      	movs	r1, r2
   376aa:	4286      	cmp	r6, r0
   376ac:	d000      	beq.n	376b0 <__aeabi_ddiv+0x504>
   376ae:	e765      	b.n	3757c <__aeabi_ddiv+0x3d0>
   376b0:	9a03      	ldr	r2, [sp, #12]
   376b2:	4293      	cmp	r3, r2
   376b4:	d000      	beq.n	376b8 <__aeabi_ddiv+0x50c>
   376b6:	e761      	b.n	3757c <__aeabi_ddiv+0x3d0>
   376b8:	e762      	b.n	37580 <__aeabi_ddiv+0x3d4>
   376ba:	2101      	movs	r1, #1
   376bc:	4249      	negs	r1, r1
   376be:	2001      	movs	r0, #1
   376c0:	1ac2      	subs	r2, r0, r3
   376c2:	2a38      	cmp	r2, #56	; 0x38
   376c4:	dd21      	ble.n	3770a <__aeabi_ddiv+0x55e>
   376c6:	9b02      	ldr	r3, [sp, #8]
   376c8:	4003      	ands	r3, r0
   376ca:	469c      	mov	ip, r3
   376cc:	e638      	b.n	37340 <__aeabi_ddiv+0x194>
   376ce:	220f      	movs	r2, #15
   376d0:	400a      	ands	r2, r1
   376d2:	2a04      	cmp	r2, #4
   376d4:	d100      	bne.n	376d8 <__aeabi_ddiv+0x52c>
   376d6:	e75b      	b.n	37590 <__aeabi_ddiv+0x3e4>
   376d8:	000a      	movs	r2, r1
   376da:	1d11      	adds	r1, r2, #4
   376dc:	4291      	cmp	r1, r2
   376de:	4192      	sbcs	r2, r2
   376e0:	4252      	negs	r2, r2
   376e2:	4493      	add	fp, r2
   376e4:	e754      	b.n	37590 <__aeabi_ddiv+0x3e4>
   376e6:	4b47      	ldr	r3, [pc, #284]	; (37804 <__aeabi_ddiv+0x658>)
   376e8:	18e3      	adds	r3, r4, r3
   376ea:	2b00      	cmp	r3, #0
   376ec:	dde5      	ble.n	376ba <__aeabi_ddiv+0x50e>
   376ee:	2201      	movs	r2, #1
   376f0:	4252      	negs	r2, r2
   376f2:	e7f2      	b.n	376da <__aeabi_ddiv+0x52e>
   376f4:	001d      	movs	r5, r3
   376f6:	e6fa      	b.n	374ee <__aeabi_ddiv+0x342>
   376f8:	469a      	mov	sl, r3
   376fa:	e71c      	b.n	37536 <__aeabi_ddiv+0x38a>
   376fc:	42b0      	cmp	r0, r6
   376fe:	d839      	bhi.n	37774 <__aeabi_ddiv+0x5c8>
   37700:	d06e      	beq.n	377e0 <__aeabi_ddiv+0x634>
   37702:	0011      	movs	r1, r2
   37704:	e73a      	b.n	3757c <__aeabi_ddiv+0x3d0>
   37706:	9302      	str	r3, [sp, #8]
   37708:	e73a      	b.n	37580 <__aeabi_ddiv+0x3d4>
   3770a:	2a1f      	cmp	r2, #31
   3770c:	dc3c      	bgt.n	37788 <__aeabi_ddiv+0x5dc>
   3770e:	2320      	movs	r3, #32
   37710:	1a9b      	subs	r3, r3, r2
   37712:	000c      	movs	r4, r1
   37714:	4658      	mov	r0, fp
   37716:	4099      	lsls	r1, r3
   37718:	4098      	lsls	r0, r3
   3771a:	1e4b      	subs	r3, r1, #1
   3771c:	4199      	sbcs	r1, r3
   3771e:	465b      	mov	r3, fp
   37720:	40d4      	lsrs	r4, r2
   37722:	40d3      	lsrs	r3, r2
   37724:	4320      	orrs	r0, r4
   37726:	4308      	orrs	r0, r1
   37728:	001a      	movs	r2, r3
   3772a:	0743      	lsls	r3, r0, #29
   3772c:	d009      	beq.n	37742 <__aeabi_ddiv+0x596>
   3772e:	230f      	movs	r3, #15
   37730:	4003      	ands	r3, r0
   37732:	2b04      	cmp	r3, #4
   37734:	d005      	beq.n	37742 <__aeabi_ddiv+0x596>
   37736:	0001      	movs	r1, r0
   37738:	1d08      	adds	r0, r1, #4
   3773a:	4288      	cmp	r0, r1
   3773c:	419b      	sbcs	r3, r3
   3773e:	425b      	negs	r3, r3
   37740:	18d2      	adds	r2, r2, r3
   37742:	0213      	lsls	r3, r2, #8
   37744:	d53a      	bpl.n	377bc <__aeabi_ddiv+0x610>
   37746:	2301      	movs	r3, #1
   37748:	9a02      	ldr	r2, [sp, #8]
   3774a:	2401      	movs	r4, #1
   3774c:	401a      	ands	r2, r3
   3774e:	2300      	movs	r3, #0
   37750:	4694      	mov	ip, r2
   37752:	4698      	mov	r8, r3
   37754:	2200      	movs	r2, #0
   37756:	e5f7      	b.n	37348 <__aeabi_ddiv+0x19c>
   37758:	2102      	movs	r1, #2
   3775a:	4249      	negs	r1, r1
   3775c:	468c      	mov	ip, r1
   3775e:	9d03      	ldr	r5, [sp, #12]
   37760:	44e3      	add	fp, ip
   37762:	46ac      	mov	ip, r5
   37764:	44e2      	add	sl, ip
   37766:	45aa      	cmp	sl, r5
   37768:	41ad      	sbcs	r5, r5
   3776a:	426d      	negs	r5, r5
   3776c:	4445      	add	r5, r8
   3776e:	18ed      	adds	r5, r5, r3
   37770:	1a2d      	subs	r5, r5, r0
   37772:	e696      	b.n	374a2 <__aeabi_ddiv+0x2f6>
   37774:	1e8a      	subs	r2, r1, #2
   37776:	9903      	ldr	r1, [sp, #12]
   37778:	004d      	lsls	r5, r1, #1
   3777a:	428d      	cmp	r5, r1
   3777c:	4189      	sbcs	r1, r1
   3777e:	4249      	negs	r1, r1
   37780:	4441      	add	r1, r8
   37782:	1876      	adds	r6, r6, r1
   37784:	9503      	str	r5, [sp, #12]
   37786:	e78f      	b.n	376a8 <__aeabi_ddiv+0x4fc>
   37788:	201f      	movs	r0, #31
   3778a:	4240      	negs	r0, r0
   3778c:	1ac3      	subs	r3, r0, r3
   3778e:	4658      	mov	r0, fp
   37790:	40d8      	lsrs	r0, r3
   37792:	0003      	movs	r3, r0
   37794:	2a20      	cmp	r2, #32
   37796:	d028      	beq.n	377ea <__aeabi_ddiv+0x63e>
   37798:	2040      	movs	r0, #64	; 0x40
   3779a:	465d      	mov	r5, fp
   3779c:	1a82      	subs	r2, r0, r2
   3779e:	4095      	lsls	r5, r2
   377a0:	4329      	orrs	r1, r5
   377a2:	1e4a      	subs	r2, r1, #1
   377a4:	4191      	sbcs	r1, r2
   377a6:	4319      	orrs	r1, r3
   377a8:	2307      	movs	r3, #7
   377aa:	2200      	movs	r2, #0
   377ac:	400b      	ands	r3, r1
   377ae:	d009      	beq.n	377c4 <__aeabi_ddiv+0x618>
   377b0:	230f      	movs	r3, #15
   377b2:	2200      	movs	r2, #0
   377b4:	400b      	ands	r3, r1
   377b6:	0008      	movs	r0, r1
   377b8:	2b04      	cmp	r3, #4
   377ba:	d1bd      	bne.n	37738 <__aeabi_ddiv+0x58c>
   377bc:	0001      	movs	r1, r0
   377be:	0753      	lsls	r3, r2, #29
   377c0:	0252      	lsls	r2, r2, #9
   377c2:	0b12      	lsrs	r2, r2, #12
   377c4:	08c9      	lsrs	r1, r1, #3
   377c6:	4319      	orrs	r1, r3
   377c8:	2301      	movs	r3, #1
   377ca:	4688      	mov	r8, r1
   377cc:	9902      	ldr	r1, [sp, #8]
   377ce:	2400      	movs	r4, #0
   377d0:	4019      	ands	r1, r3
   377d2:	468c      	mov	ip, r1
   377d4:	e5b8      	b.n	37348 <__aeabi_ddiv+0x19c>
   377d6:	4552      	cmp	r2, sl
   377d8:	d8be      	bhi.n	37758 <__aeabi_ddiv+0x5ac>
   377da:	468b      	mov	fp, r1
   377dc:	2500      	movs	r5, #0
   377de:	e660      	b.n	374a2 <__aeabi_ddiv+0x2f6>
   377e0:	9d03      	ldr	r5, [sp, #12]
   377e2:	429d      	cmp	r5, r3
   377e4:	d3c6      	bcc.n	37774 <__aeabi_ddiv+0x5c8>
   377e6:	0011      	movs	r1, r2
   377e8:	e762      	b.n	376b0 <__aeabi_ddiv+0x504>
   377ea:	2500      	movs	r5, #0
   377ec:	e7d8      	b.n	377a0 <__aeabi_ddiv+0x5f4>
   377ee:	2280      	movs	r2, #128	; 0x80
   377f0:	465b      	mov	r3, fp
   377f2:	0312      	lsls	r2, r2, #12
   377f4:	431a      	orrs	r2, r3
   377f6:	9b01      	ldr	r3, [sp, #4]
   377f8:	0312      	lsls	r2, r2, #12
   377fa:	0b12      	lsrs	r2, r2, #12
   377fc:	469c      	mov	ip, r3
   377fe:	4688      	mov	r8, r1
   37800:	4c03      	ldr	r4, [pc, #12]	; (37810 <__aeabi_ddiv+0x664>)
   37802:	e5a1      	b.n	37348 <__aeabi_ddiv+0x19c>
   37804:	000003ff 	.word	0x000003ff
   37808:	feffffff 	.word	0xfeffffff
   3780c:	000007fe 	.word	0x000007fe
   37810:	000007ff 	.word	0x000007ff

00037814 <__aeabi_dmul>:
   37814:	b5f0      	push	{r4, r5, r6, r7, lr}
   37816:	4657      	mov	r7, sl
   37818:	4645      	mov	r5, r8
   3781a:	46de      	mov	lr, fp
   3781c:	464e      	mov	r6, r9
   3781e:	b5e0      	push	{r5, r6, r7, lr}
   37820:	030c      	lsls	r4, r1, #12
   37822:	4698      	mov	r8, r3
   37824:	004e      	lsls	r6, r1, #1
   37826:	0b23      	lsrs	r3, r4, #12
   37828:	b087      	sub	sp, #28
   3782a:	0007      	movs	r7, r0
   3782c:	4692      	mov	sl, r2
   3782e:	469b      	mov	fp, r3
   37830:	0d76      	lsrs	r6, r6, #21
   37832:	0fcd      	lsrs	r5, r1, #31
   37834:	2e00      	cmp	r6, #0
   37836:	d06b      	beq.n	37910 <__aeabi_dmul+0xfc>
   37838:	4b6d      	ldr	r3, [pc, #436]	; (379f0 <__aeabi_dmul+0x1dc>)
   3783a:	429e      	cmp	r6, r3
   3783c:	d035      	beq.n	378aa <__aeabi_dmul+0x96>
   3783e:	2480      	movs	r4, #128	; 0x80
   37840:	465b      	mov	r3, fp
   37842:	0f42      	lsrs	r2, r0, #29
   37844:	0424      	lsls	r4, r4, #16
   37846:	00db      	lsls	r3, r3, #3
   37848:	4314      	orrs	r4, r2
   3784a:	431c      	orrs	r4, r3
   3784c:	00c3      	lsls	r3, r0, #3
   3784e:	4699      	mov	r9, r3
   37850:	4b68      	ldr	r3, [pc, #416]	; (379f4 <__aeabi_dmul+0x1e0>)
   37852:	46a3      	mov	fp, r4
   37854:	469c      	mov	ip, r3
   37856:	2300      	movs	r3, #0
   37858:	2700      	movs	r7, #0
   3785a:	4466      	add	r6, ip
   3785c:	9302      	str	r3, [sp, #8]
   3785e:	4643      	mov	r3, r8
   37860:	031c      	lsls	r4, r3, #12
   37862:	005a      	lsls	r2, r3, #1
   37864:	0fdb      	lsrs	r3, r3, #31
   37866:	4650      	mov	r0, sl
   37868:	0b24      	lsrs	r4, r4, #12
   3786a:	0d52      	lsrs	r2, r2, #21
   3786c:	4698      	mov	r8, r3
   3786e:	d100      	bne.n	37872 <__aeabi_dmul+0x5e>
   37870:	e076      	b.n	37960 <__aeabi_dmul+0x14c>
   37872:	4b5f      	ldr	r3, [pc, #380]	; (379f0 <__aeabi_dmul+0x1dc>)
   37874:	429a      	cmp	r2, r3
   37876:	d06d      	beq.n	37954 <__aeabi_dmul+0x140>
   37878:	2380      	movs	r3, #128	; 0x80
   3787a:	0f41      	lsrs	r1, r0, #29
   3787c:	041b      	lsls	r3, r3, #16
   3787e:	430b      	orrs	r3, r1
   37880:	495c      	ldr	r1, [pc, #368]	; (379f4 <__aeabi_dmul+0x1e0>)
   37882:	00e4      	lsls	r4, r4, #3
   37884:	468c      	mov	ip, r1
   37886:	431c      	orrs	r4, r3
   37888:	00c3      	lsls	r3, r0, #3
   3788a:	2000      	movs	r0, #0
   3788c:	4462      	add	r2, ip
   3788e:	4641      	mov	r1, r8
   37890:	18b6      	adds	r6, r6, r2
   37892:	4069      	eors	r1, r5
   37894:	1c72      	adds	r2, r6, #1
   37896:	9101      	str	r1, [sp, #4]
   37898:	4694      	mov	ip, r2
   3789a:	4307      	orrs	r7, r0
   3789c:	2f0f      	cmp	r7, #15
   3789e:	d900      	bls.n	378a2 <__aeabi_dmul+0x8e>
   378a0:	e0b0      	b.n	37a04 <__aeabi_dmul+0x1f0>
   378a2:	4a55      	ldr	r2, [pc, #340]	; (379f8 <__aeabi_dmul+0x1e4>)
   378a4:	00bf      	lsls	r7, r7, #2
   378a6:	59d2      	ldr	r2, [r2, r7]
   378a8:	4697      	mov	pc, r2
   378aa:	465b      	mov	r3, fp
   378ac:	4303      	orrs	r3, r0
   378ae:	4699      	mov	r9, r3
   378b0:	d000      	beq.n	378b4 <__aeabi_dmul+0xa0>
   378b2:	e087      	b.n	379c4 <__aeabi_dmul+0x1b0>
   378b4:	2300      	movs	r3, #0
   378b6:	469b      	mov	fp, r3
   378b8:	3302      	adds	r3, #2
   378ba:	2708      	movs	r7, #8
   378bc:	9302      	str	r3, [sp, #8]
   378be:	e7ce      	b.n	3785e <__aeabi_dmul+0x4a>
   378c0:	4642      	mov	r2, r8
   378c2:	9201      	str	r2, [sp, #4]
   378c4:	2802      	cmp	r0, #2
   378c6:	d067      	beq.n	37998 <__aeabi_dmul+0x184>
   378c8:	2803      	cmp	r0, #3
   378ca:	d100      	bne.n	378ce <__aeabi_dmul+0xba>
   378cc:	e20e      	b.n	37cec <__aeabi_dmul+0x4d8>
   378ce:	2801      	cmp	r0, #1
   378d0:	d000      	beq.n	378d4 <__aeabi_dmul+0xc0>
   378d2:	e162      	b.n	37b9a <__aeabi_dmul+0x386>
   378d4:	2300      	movs	r3, #0
   378d6:	2400      	movs	r4, #0
   378d8:	2200      	movs	r2, #0
   378da:	4699      	mov	r9, r3
   378dc:	9901      	ldr	r1, [sp, #4]
   378de:	4001      	ands	r1, r0
   378e0:	b2cd      	uxtb	r5, r1
   378e2:	2100      	movs	r1, #0
   378e4:	0312      	lsls	r2, r2, #12
   378e6:	0d0b      	lsrs	r3, r1, #20
   378e8:	0b12      	lsrs	r2, r2, #12
   378ea:	051b      	lsls	r3, r3, #20
   378ec:	4313      	orrs	r3, r2
   378ee:	4a43      	ldr	r2, [pc, #268]	; (379fc <__aeabi_dmul+0x1e8>)
   378f0:	0524      	lsls	r4, r4, #20
   378f2:	4013      	ands	r3, r2
   378f4:	431c      	orrs	r4, r3
   378f6:	0064      	lsls	r4, r4, #1
   378f8:	07ed      	lsls	r5, r5, #31
   378fa:	0864      	lsrs	r4, r4, #1
   378fc:	432c      	orrs	r4, r5
   378fe:	4648      	mov	r0, r9
   37900:	0021      	movs	r1, r4
   37902:	b007      	add	sp, #28
   37904:	bc3c      	pop	{r2, r3, r4, r5}
   37906:	4690      	mov	r8, r2
   37908:	4699      	mov	r9, r3
   3790a:	46a2      	mov	sl, r4
   3790c:	46ab      	mov	fp, r5
   3790e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37910:	4303      	orrs	r3, r0
   37912:	4699      	mov	r9, r3
   37914:	d04f      	beq.n	379b6 <__aeabi_dmul+0x1a2>
   37916:	465b      	mov	r3, fp
   37918:	2b00      	cmp	r3, #0
   3791a:	d100      	bne.n	3791e <__aeabi_dmul+0x10a>
   3791c:	e189      	b.n	37c32 <__aeabi_dmul+0x41e>
   3791e:	4658      	mov	r0, fp
   37920:	f000 fd7a 	bl	38418 <__clzsi2>
   37924:	0003      	movs	r3, r0
   37926:	3b0b      	subs	r3, #11
   37928:	2b1c      	cmp	r3, #28
   3792a:	dd00      	ble.n	3792e <__aeabi_dmul+0x11a>
   3792c:	e17a      	b.n	37c24 <__aeabi_dmul+0x410>
   3792e:	221d      	movs	r2, #29
   37930:	1ad3      	subs	r3, r2, r3
   37932:	003a      	movs	r2, r7
   37934:	0001      	movs	r1, r0
   37936:	465c      	mov	r4, fp
   37938:	40da      	lsrs	r2, r3
   3793a:	3908      	subs	r1, #8
   3793c:	408c      	lsls	r4, r1
   3793e:	0013      	movs	r3, r2
   37940:	408f      	lsls	r7, r1
   37942:	4323      	orrs	r3, r4
   37944:	469b      	mov	fp, r3
   37946:	46b9      	mov	r9, r7
   37948:	2300      	movs	r3, #0
   3794a:	4e2d      	ldr	r6, [pc, #180]	; (37a00 <__aeabi_dmul+0x1ec>)
   3794c:	2700      	movs	r7, #0
   3794e:	1a36      	subs	r6, r6, r0
   37950:	9302      	str	r3, [sp, #8]
   37952:	e784      	b.n	3785e <__aeabi_dmul+0x4a>
   37954:	4653      	mov	r3, sl
   37956:	4323      	orrs	r3, r4
   37958:	d12a      	bne.n	379b0 <__aeabi_dmul+0x19c>
   3795a:	2400      	movs	r4, #0
   3795c:	2002      	movs	r0, #2
   3795e:	e796      	b.n	3788e <__aeabi_dmul+0x7a>
   37960:	4653      	mov	r3, sl
   37962:	4323      	orrs	r3, r4
   37964:	d020      	beq.n	379a8 <__aeabi_dmul+0x194>
   37966:	2c00      	cmp	r4, #0
   37968:	d100      	bne.n	3796c <__aeabi_dmul+0x158>
   3796a:	e157      	b.n	37c1c <__aeabi_dmul+0x408>
   3796c:	0020      	movs	r0, r4
   3796e:	f000 fd53 	bl	38418 <__clzsi2>
   37972:	0003      	movs	r3, r0
   37974:	3b0b      	subs	r3, #11
   37976:	2b1c      	cmp	r3, #28
   37978:	dd00      	ble.n	3797c <__aeabi_dmul+0x168>
   3797a:	e149      	b.n	37c10 <__aeabi_dmul+0x3fc>
   3797c:	211d      	movs	r1, #29
   3797e:	1acb      	subs	r3, r1, r3
   37980:	4651      	mov	r1, sl
   37982:	0002      	movs	r2, r0
   37984:	40d9      	lsrs	r1, r3
   37986:	4653      	mov	r3, sl
   37988:	3a08      	subs	r2, #8
   3798a:	4094      	lsls	r4, r2
   3798c:	4093      	lsls	r3, r2
   3798e:	430c      	orrs	r4, r1
   37990:	4a1b      	ldr	r2, [pc, #108]	; (37a00 <__aeabi_dmul+0x1ec>)
   37992:	1a12      	subs	r2, r2, r0
   37994:	2000      	movs	r0, #0
   37996:	e77a      	b.n	3788e <__aeabi_dmul+0x7a>
   37998:	2501      	movs	r5, #1
   3799a:	9b01      	ldr	r3, [sp, #4]
   3799c:	4c14      	ldr	r4, [pc, #80]	; (379f0 <__aeabi_dmul+0x1dc>)
   3799e:	401d      	ands	r5, r3
   379a0:	2300      	movs	r3, #0
   379a2:	2200      	movs	r2, #0
   379a4:	4699      	mov	r9, r3
   379a6:	e79c      	b.n	378e2 <__aeabi_dmul+0xce>
   379a8:	2400      	movs	r4, #0
   379aa:	2200      	movs	r2, #0
   379ac:	2001      	movs	r0, #1
   379ae:	e76e      	b.n	3788e <__aeabi_dmul+0x7a>
   379b0:	4653      	mov	r3, sl
   379b2:	2003      	movs	r0, #3
   379b4:	e76b      	b.n	3788e <__aeabi_dmul+0x7a>
   379b6:	2300      	movs	r3, #0
   379b8:	469b      	mov	fp, r3
   379ba:	3301      	adds	r3, #1
   379bc:	2704      	movs	r7, #4
   379be:	2600      	movs	r6, #0
   379c0:	9302      	str	r3, [sp, #8]
   379c2:	e74c      	b.n	3785e <__aeabi_dmul+0x4a>
   379c4:	2303      	movs	r3, #3
   379c6:	4681      	mov	r9, r0
   379c8:	270c      	movs	r7, #12
   379ca:	9302      	str	r3, [sp, #8]
   379cc:	e747      	b.n	3785e <__aeabi_dmul+0x4a>
   379ce:	2280      	movs	r2, #128	; 0x80
   379d0:	2300      	movs	r3, #0
   379d2:	2500      	movs	r5, #0
   379d4:	0312      	lsls	r2, r2, #12
   379d6:	4699      	mov	r9, r3
   379d8:	4c05      	ldr	r4, [pc, #20]	; (379f0 <__aeabi_dmul+0x1dc>)
   379da:	e782      	b.n	378e2 <__aeabi_dmul+0xce>
   379dc:	465c      	mov	r4, fp
   379de:	464b      	mov	r3, r9
   379e0:	9802      	ldr	r0, [sp, #8]
   379e2:	e76f      	b.n	378c4 <__aeabi_dmul+0xb0>
   379e4:	465c      	mov	r4, fp
   379e6:	464b      	mov	r3, r9
   379e8:	9501      	str	r5, [sp, #4]
   379ea:	9802      	ldr	r0, [sp, #8]
   379ec:	e76a      	b.n	378c4 <__aeabi_dmul+0xb0>
   379ee:	46c0      	nop			; (mov r8, r8)
   379f0:	000007ff 	.word	0x000007ff
   379f4:	fffffc01 	.word	0xfffffc01
   379f8:	0003e750 	.word	0x0003e750
   379fc:	800fffff 	.word	0x800fffff
   37a00:	fffffc0d 	.word	0xfffffc0d
   37a04:	464a      	mov	r2, r9
   37a06:	4649      	mov	r1, r9
   37a08:	0c17      	lsrs	r7, r2, #16
   37a0a:	0c1a      	lsrs	r2, r3, #16
   37a0c:	041b      	lsls	r3, r3, #16
   37a0e:	0c1b      	lsrs	r3, r3, #16
   37a10:	0408      	lsls	r0, r1, #16
   37a12:	0019      	movs	r1, r3
   37a14:	0c00      	lsrs	r0, r0, #16
   37a16:	4341      	muls	r1, r0
   37a18:	0015      	movs	r5, r2
   37a1a:	4688      	mov	r8, r1
   37a1c:	0019      	movs	r1, r3
   37a1e:	437d      	muls	r5, r7
   37a20:	4379      	muls	r1, r7
   37a22:	9503      	str	r5, [sp, #12]
   37a24:	4689      	mov	r9, r1
   37a26:	0029      	movs	r1, r5
   37a28:	0015      	movs	r5, r2
   37a2a:	4345      	muls	r5, r0
   37a2c:	444d      	add	r5, r9
   37a2e:	9502      	str	r5, [sp, #8]
   37a30:	4645      	mov	r5, r8
   37a32:	0c2d      	lsrs	r5, r5, #16
   37a34:	46aa      	mov	sl, r5
   37a36:	9d02      	ldr	r5, [sp, #8]
   37a38:	4455      	add	r5, sl
   37a3a:	45a9      	cmp	r9, r5
   37a3c:	d906      	bls.n	37a4c <__aeabi_dmul+0x238>
   37a3e:	468a      	mov	sl, r1
   37a40:	2180      	movs	r1, #128	; 0x80
   37a42:	0249      	lsls	r1, r1, #9
   37a44:	4689      	mov	r9, r1
   37a46:	44ca      	add	sl, r9
   37a48:	4651      	mov	r1, sl
   37a4a:	9103      	str	r1, [sp, #12]
   37a4c:	0c29      	lsrs	r1, r5, #16
   37a4e:	9104      	str	r1, [sp, #16]
   37a50:	4641      	mov	r1, r8
   37a52:	0409      	lsls	r1, r1, #16
   37a54:	042d      	lsls	r5, r5, #16
   37a56:	0c09      	lsrs	r1, r1, #16
   37a58:	4688      	mov	r8, r1
   37a5a:	0029      	movs	r1, r5
   37a5c:	0c25      	lsrs	r5, r4, #16
   37a5e:	0424      	lsls	r4, r4, #16
   37a60:	4441      	add	r1, r8
   37a62:	0c24      	lsrs	r4, r4, #16
   37a64:	9105      	str	r1, [sp, #20]
   37a66:	0021      	movs	r1, r4
   37a68:	4341      	muls	r1, r0
   37a6a:	4688      	mov	r8, r1
   37a6c:	0021      	movs	r1, r4
   37a6e:	4379      	muls	r1, r7
   37a70:	468a      	mov	sl, r1
   37a72:	4368      	muls	r0, r5
   37a74:	4641      	mov	r1, r8
   37a76:	4450      	add	r0, sl
   37a78:	4681      	mov	r9, r0
   37a7a:	0c08      	lsrs	r0, r1, #16
   37a7c:	4448      	add	r0, r9
   37a7e:	436f      	muls	r7, r5
   37a80:	4582      	cmp	sl, r0
   37a82:	d903      	bls.n	37a8c <__aeabi_dmul+0x278>
   37a84:	2180      	movs	r1, #128	; 0x80
   37a86:	0249      	lsls	r1, r1, #9
   37a88:	4689      	mov	r9, r1
   37a8a:	444f      	add	r7, r9
   37a8c:	0c01      	lsrs	r1, r0, #16
   37a8e:	4689      	mov	r9, r1
   37a90:	0039      	movs	r1, r7
   37a92:	4449      	add	r1, r9
   37a94:	9102      	str	r1, [sp, #8]
   37a96:	4641      	mov	r1, r8
   37a98:	040f      	lsls	r7, r1, #16
   37a9a:	9904      	ldr	r1, [sp, #16]
   37a9c:	0c3f      	lsrs	r7, r7, #16
   37a9e:	4688      	mov	r8, r1
   37aa0:	0400      	lsls	r0, r0, #16
   37aa2:	19c0      	adds	r0, r0, r7
   37aa4:	4480      	add	r8, r0
   37aa6:	4641      	mov	r1, r8
   37aa8:	9104      	str	r1, [sp, #16]
   37aaa:	4659      	mov	r1, fp
   37aac:	0c0f      	lsrs	r7, r1, #16
   37aae:	0409      	lsls	r1, r1, #16
   37ab0:	0c09      	lsrs	r1, r1, #16
   37ab2:	4688      	mov	r8, r1
   37ab4:	4359      	muls	r1, r3
   37ab6:	468a      	mov	sl, r1
   37ab8:	0039      	movs	r1, r7
   37aba:	4351      	muls	r1, r2
   37abc:	4689      	mov	r9, r1
   37abe:	4641      	mov	r1, r8
   37ac0:	434a      	muls	r2, r1
   37ac2:	4651      	mov	r1, sl
   37ac4:	0c09      	lsrs	r1, r1, #16
   37ac6:	468b      	mov	fp, r1
   37ac8:	437b      	muls	r3, r7
   37aca:	18d2      	adds	r2, r2, r3
   37acc:	445a      	add	r2, fp
   37ace:	4293      	cmp	r3, r2
   37ad0:	d903      	bls.n	37ada <__aeabi_dmul+0x2c6>
   37ad2:	2380      	movs	r3, #128	; 0x80
   37ad4:	025b      	lsls	r3, r3, #9
   37ad6:	469b      	mov	fp, r3
   37ad8:	44d9      	add	r9, fp
   37ada:	4651      	mov	r1, sl
   37adc:	0409      	lsls	r1, r1, #16
   37ade:	0c09      	lsrs	r1, r1, #16
   37ae0:	468a      	mov	sl, r1
   37ae2:	4641      	mov	r1, r8
   37ae4:	4361      	muls	r1, r4
   37ae6:	437c      	muls	r4, r7
   37ae8:	0c13      	lsrs	r3, r2, #16
   37aea:	0412      	lsls	r2, r2, #16
   37aec:	444b      	add	r3, r9
   37aee:	4452      	add	r2, sl
   37af0:	46a1      	mov	r9, r4
   37af2:	468a      	mov	sl, r1
   37af4:	003c      	movs	r4, r7
   37af6:	4641      	mov	r1, r8
   37af8:	436c      	muls	r4, r5
   37afa:	434d      	muls	r5, r1
   37afc:	4651      	mov	r1, sl
   37afe:	444d      	add	r5, r9
   37b00:	0c0f      	lsrs	r7, r1, #16
   37b02:	197d      	adds	r5, r7, r5
   37b04:	45a9      	cmp	r9, r5
   37b06:	d903      	bls.n	37b10 <__aeabi_dmul+0x2fc>
   37b08:	2180      	movs	r1, #128	; 0x80
   37b0a:	0249      	lsls	r1, r1, #9
   37b0c:	4688      	mov	r8, r1
   37b0e:	4444      	add	r4, r8
   37b10:	9f04      	ldr	r7, [sp, #16]
   37b12:	9903      	ldr	r1, [sp, #12]
   37b14:	46b8      	mov	r8, r7
   37b16:	4441      	add	r1, r8
   37b18:	468b      	mov	fp, r1
   37b1a:	4583      	cmp	fp, r0
   37b1c:	4180      	sbcs	r0, r0
   37b1e:	4241      	negs	r1, r0
   37b20:	4688      	mov	r8, r1
   37b22:	4651      	mov	r1, sl
   37b24:	0408      	lsls	r0, r1, #16
   37b26:	042f      	lsls	r7, r5, #16
   37b28:	0c00      	lsrs	r0, r0, #16
   37b2a:	183f      	adds	r7, r7, r0
   37b2c:	4658      	mov	r0, fp
   37b2e:	9902      	ldr	r1, [sp, #8]
   37b30:	1810      	adds	r0, r2, r0
   37b32:	4689      	mov	r9, r1
   37b34:	4290      	cmp	r0, r2
   37b36:	4192      	sbcs	r2, r2
   37b38:	444f      	add	r7, r9
   37b3a:	46ba      	mov	sl, r7
   37b3c:	4252      	negs	r2, r2
   37b3e:	4699      	mov	r9, r3
   37b40:	4693      	mov	fp, r2
   37b42:	44c2      	add	sl, r8
   37b44:	44d1      	add	r9, sl
   37b46:	44cb      	add	fp, r9
   37b48:	428f      	cmp	r7, r1
   37b4a:	41bf      	sbcs	r7, r7
   37b4c:	45c2      	cmp	sl, r8
   37b4e:	4189      	sbcs	r1, r1
   37b50:	4599      	cmp	r9, r3
   37b52:	419b      	sbcs	r3, r3
   37b54:	4593      	cmp	fp, r2
   37b56:	4192      	sbcs	r2, r2
   37b58:	427f      	negs	r7, r7
   37b5a:	4249      	negs	r1, r1
   37b5c:	0c2d      	lsrs	r5, r5, #16
   37b5e:	4252      	negs	r2, r2
   37b60:	430f      	orrs	r7, r1
   37b62:	425b      	negs	r3, r3
   37b64:	4313      	orrs	r3, r2
   37b66:	197f      	adds	r7, r7, r5
   37b68:	18ff      	adds	r7, r7, r3
   37b6a:	465b      	mov	r3, fp
   37b6c:	193c      	adds	r4, r7, r4
   37b6e:	0ddb      	lsrs	r3, r3, #23
   37b70:	9a05      	ldr	r2, [sp, #20]
   37b72:	0264      	lsls	r4, r4, #9
   37b74:	431c      	orrs	r4, r3
   37b76:	0243      	lsls	r3, r0, #9
   37b78:	4313      	orrs	r3, r2
   37b7a:	1e5d      	subs	r5, r3, #1
   37b7c:	41ab      	sbcs	r3, r5
   37b7e:	465a      	mov	r2, fp
   37b80:	0dc0      	lsrs	r0, r0, #23
   37b82:	4303      	orrs	r3, r0
   37b84:	0252      	lsls	r2, r2, #9
   37b86:	4313      	orrs	r3, r2
   37b88:	01e2      	lsls	r2, r4, #7
   37b8a:	d556      	bpl.n	37c3a <__aeabi_dmul+0x426>
   37b8c:	2001      	movs	r0, #1
   37b8e:	085a      	lsrs	r2, r3, #1
   37b90:	4003      	ands	r3, r0
   37b92:	4313      	orrs	r3, r2
   37b94:	07e2      	lsls	r2, r4, #31
   37b96:	4313      	orrs	r3, r2
   37b98:	0864      	lsrs	r4, r4, #1
   37b9a:	485a      	ldr	r0, [pc, #360]	; (37d04 <__aeabi_dmul+0x4f0>)
   37b9c:	4460      	add	r0, ip
   37b9e:	2800      	cmp	r0, #0
   37ba0:	dd4d      	ble.n	37c3e <__aeabi_dmul+0x42a>
   37ba2:	075a      	lsls	r2, r3, #29
   37ba4:	d009      	beq.n	37bba <__aeabi_dmul+0x3a6>
   37ba6:	220f      	movs	r2, #15
   37ba8:	401a      	ands	r2, r3
   37baa:	2a04      	cmp	r2, #4
   37bac:	d005      	beq.n	37bba <__aeabi_dmul+0x3a6>
   37bae:	1d1a      	adds	r2, r3, #4
   37bb0:	429a      	cmp	r2, r3
   37bb2:	419b      	sbcs	r3, r3
   37bb4:	425b      	negs	r3, r3
   37bb6:	18e4      	adds	r4, r4, r3
   37bb8:	0013      	movs	r3, r2
   37bba:	01e2      	lsls	r2, r4, #7
   37bbc:	d504      	bpl.n	37bc8 <__aeabi_dmul+0x3b4>
   37bbe:	2080      	movs	r0, #128	; 0x80
   37bc0:	4a51      	ldr	r2, [pc, #324]	; (37d08 <__aeabi_dmul+0x4f4>)
   37bc2:	00c0      	lsls	r0, r0, #3
   37bc4:	4014      	ands	r4, r2
   37bc6:	4460      	add	r0, ip
   37bc8:	4a50      	ldr	r2, [pc, #320]	; (37d0c <__aeabi_dmul+0x4f8>)
   37bca:	4290      	cmp	r0, r2
   37bcc:	dd00      	ble.n	37bd0 <__aeabi_dmul+0x3bc>
   37bce:	e6e3      	b.n	37998 <__aeabi_dmul+0x184>
   37bd0:	2501      	movs	r5, #1
   37bd2:	08db      	lsrs	r3, r3, #3
   37bd4:	0762      	lsls	r2, r4, #29
   37bd6:	431a      	orrs	r2, r3
   37bd8:	0264      	lsls	r4, r4, #9
   37bda:	9b01      	ldr	r3, [sp, #4]
   37bdc:	4691      	mov	r9, r2
   37bde:	0b22      	lsrs	r2, r4, #12
   37be0:	0544      	lsls	r4, r0, #21
   37be2:	0d64      	lsrs	r4, r4, #21
   37be4:	401d      	ands	r5, r3
   37be6:	e67c      	b.n	378e2 <__aeabi_dmul+0xce>
   37be8:	2280      	movs	r2, #128	; 0x80
   37bea:	4659      	mov	r1, fp
   37bec:	0312      	lsls	r2, r2, #12
   37bee:	4211      	tst	r1, r2
   37bf0:	d008      	beq.n	37c04 <__aeabi_dmul+0x3f0>
   37bf2:	4214      	tst	r4, r2
   37bf4:	d106      	bne.n	37c04 <__aeabi_dmul+0x3f0>
   37bf6:	4322      	orrs	r2, r4
   37bf8:	0312      	lsls	r2, r2, #12
   37bfa:	0b12      	lsrs	r2, r2, #12
   37bfc:	4645      	mov	r5, r8
   37bfe:	4699      	mov	r9, r3
   37c00:	4c43      	ldr	r4, [pc, #268]	; (37d10 <__aeabi_dmul+0x4fc>)
   37c02:	e66e      	b.n	378e2 <__aeabi_dmul+0xce>
   37c04:	465b      	mov	r3, fp
   37c06:	431a      	orrs	r2, r3
   37c08:	0312      	lsls	r2, r2, #12
   37c0a:	0b12      	lsrs	r2, r2, #12
   37c0c:	4c40      	ldr	r4, [pc, #256]	; (37d10 <__aeabi_dmul+0x4fc>)
   37c0e:	e668      	b.n	378e2 <__aeabi_dmul+0xce>
   37c10:	0003      	movs	r3, r0
   37c12:	4654      	mov	r4, sl
   37c14:	3b28      	subs	r3, #40	; 0x28
   37c16:	409c      	lsls	r4, r3
   37c18:	2300      	movs	r3, #0
   37c1a:	e6b9      	b.n	37990 <__aeabi_dmul+0x17c>
   37c1c:	f000 fbfc 	bl	38418 <__clzsi2>
   37c20:	3020      	adds	r0, #32
   37c22:	e6a6      	b.n	37972 <__aeabi_dmul+0x15e>
   37c24:	0003      	movs	r3, r0
   37c26:	3b28      	subs	r3, #40	; 0x28
   37c28:	409f      	lsls	r7, r3
   37c2a:	2300      	movs	r3, #0
   37c2c:	46bb      	mov	fp, r7
   37c2e:	4699      	mov	r9, r3
   37c30:	e68a      	b.n	37948 <__aeabi_dmul+0x134>
   37c32:	f000 fbf1 	bl	38418 <__clzsi2>
   37c36:	3020      	adds	r0, #32
   37c38:	e674      	b.n	37924 <__aeabi_dmul+0x110>
   37c3a:	46b4      	mov	ip, r6
   37c3c:	e7ad      	b.n	37b9a <__aeabi_dmul+0x386>
   37c3e:	2501      	movs	r5, #1
   37c40:	1a2a      	subs	r2, r5, r0
   37c42:	2a38      	cmp	r2, #56	; 0x38
   37c44:	dd06      	ble.n	37c54 <__aeabi_dmul+0x440>
   37c46:	9b01      	ldr	r3, [sp, #4]
   37c48:	2400      	movs	r4, #0
   37c4a:	401d      	ands	r5, r3
   37c4c:	2300      	movs	r3, #0
   37c4e:	2200      	movs	r2, #0
   37c50:	4699      	mov	r9, r3
   37c52:	e646      	b.n	378e2 <__aeabi_dmul+0xce>
   37c54:	2a1f      	cmp	r2, #31
   37c56:	dc21      	bgt.n	37c9c <__aeabi_dmul+0x488>
   37c58:	2520      	movs	r5, #32
   37c5a:	0020      	movs	r0, r4
   37c5c:	1aad      	subs	r5, r5, r2
   37c5e:	001e      	movs	r6, r3
   37c60:	40ab      	lsls	r3, r5
   37c62:	40a8      	lsls	r0, r5
   37c64:	40d6      	lsrs	r6, r2
   37c66:	1e5d      	subs	r5, r3, #1
   37c68:	41ab      	sbcs	r3, r5
   37c6a:	4330      	orrs	r0, r6
   37c6c:	4318      	orrs	r0, r3
   37c6e:	40d4      	lsrs	r4, r2
   37c70:	0743      	lsls	r3, r0, #29
   37c72:	d009      	beq.n	37c88 <__aeabi_dmul+0x474>
   37c74:	230f      	movs	r3, #15
   37c76:	4003      	ands	r3, r0
   37c78:	2b04      	cmp	r3, #4
   37c7a:	d005      	beq.n	37c88 <__aeabi_dmul+0x474>
   37c7c:	0003      	movs	r3, r0
   37c7e:	1d18      	adds	r0, r3, #4
   37c80:	4298      	cmp	r0, r3
   37c82:	419b      	sbcs	r3, r3
   37c84:	425b      	negs	r3, r3
   37c86:	18e4      	adds	r4, r4, r3
   37c88:	0223      	lsls	r3, r4, #8
   37c8a:	d521      	bpl.n	37cd0 <__aeabi_dmul+0x4bc>
   37c8c:	2501      	movs	r5, #1
   37c8e:	9b01      	ldr	r3, [sp, #4]
   37c90:	2401      	movs	r4, #1
   37c92:	401d      	ands	r5, r3
   37c94:	2300      	movs	r3, #0
   37c96:	2200      	movs	r2, #0
   37c98:	4699      	mov	r9, r3
   37c9a:	e622      	b.n	378e2 <__aeabi_dmul+0xce>
   37c9c:	251f      	movs	r5, #31
   37c9e:	0021      	movs	r1, r4
   37ca0:	426d      	negs	r5, r5
   37ca2:	1a28      	subs	r0, r5, r0
   37ca4:	40c1      	lsrs	r1, r0
   37ca6:	0008      	movs	r0, r1
   37ca8:	2a20      	cmp	r2, #32
   37caa:	d01d      	beq.n	37ce8 <__aeabi_dmul+0x4d4>
   37cac:	355f      	adds	r5, #95	; 0x5f
   37cae:	1aaa      	subs	r2, r5, r2
   37cb0:	4094      	lsls	r4, r2
   37cb2:	4323      	orrs	r3, r4
   37cb4:	1e5c      	subs	r4, r3, #1
   37cb6:	41a3      	sbcs	r3, r4
   37cb8:	2507      	movs	r5, #7
   37cba:	4303      	orrs	r3, r0
   37cbc:	401d      	ands	r5, r3
   37cbe:	2200      	movs	r2, #0
   37cc0:	2d00      	cmp	r5, #0
   37cc2:	d009      	beq.n	37cd8 <__aeabi_dmul+0x4c4>
   37cc4:	220f      	movs	r2, #15
   37cc6:	2400      	movs	r4, #0
   37cc8:	401a      	ands	r2, r3
   37cca:	0018      	movs	r0, r3
   37ccc:	2a04      	cmp	r2, #4
   37cce:	d1d6      	bne.n	37c7e <__aeabi_dmul+0x46a>
   37cd0:	0003      	movs	r3, r0
   37cd2:	0765      	lsls	r5, r4, #29
   37cd4:	0264      	lsls	r4, r4, #9
   37cd6:	0b22      	lsrs	r2, r4, #12
   37cd8:	08db      	lsrs	r3, r3, #3
   37cda:	432b      	orrs	r3, r5
   37cdc:	2501      	movs	r5, #1
   37cde:	4699      	mov	r9, r3
   37ce0:	9b01      	ldr	r3, [sp, #4]
   37ce2:	2400      	movs	r4, #0
   37ce4:	401d      	ands	r5, r3
   37ce6:	e5fc      	b.n	378e2 <__aeabi_dmul+0xce>
   37ce8:	2400      	movs	r4, #0
   37cea:	e7e2      	b.n	37cb2 <__aeabi_dmul+0x49e>
   37cec:	2280      	movs	r2, #128	; 0x80
   37cee:	2501      	movs	r5, #1
   37cf0:	0312      	lsls	r2, r2, #12
   37cf2:	4322      	orrs	r2, r4
   37cf4:	9901      	ldr	r1, [sp, #4]
   37cf6:	0312      	lsls	r2, r2, #12
   37cf8:	0b12      	lsrs	r2, r2, #12
   37cfa:	400d      	ands	r5, r1
   37cfc:	4699      	mov	r9, r3
   37cfe:	4c04      	ldr	r4, [pc, #16]	; (37d10 <__aeabi_dmul+0x4fc>)
   37d00:	e5ef      	b.n	378e2 <__aeabi_dmul+0xce>
   37d02:	46c0      	nop			; (mov r8, r8)
   37d04:	000003ff 	.word	0x000003ff
   37d08:	feffffff 	.word	0xfeffffff
   37d0c:	000007fe 	.word	0x000007fe
   37d10:	000007ff 	.word	0x000007ff

00037d14 <__aeabi_dsub>:
   37d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   37d16:	4646      	mov	r6, r8
   37d18:	46d6      	mov	lr, sl
   37d1a:	464f      	mov	r7, r9
   37d1c:	030c      	lsls	r4, r1, #12
   37d1e:	b5c0      	push	{r6, r7, lr}
   37d20:	0fcd      	lsrs	r5, r1, #31
   37d22:	004e      	lsls	r6, r1, #1
   37d24:	0a61      	lsrs	r1, r4, #9
   37d26:	0f44      	lsrs	r4, r0, #29
   37d28:	430c      	orrs	r4, r1
   37d2a:	00c1      	lsls	r1, r0, #3
   37d2c:	0058      	lsls	r0, r3, #1
   37d2e:	0d40      	lsrs	r0, r0, #21
   37d30:	4684      	mov	ip, r0
   37d32:	468a      	mov	sl, r1
   37d34:	000f      	movs	r7, r1
   37d36:	0319      	lsls	r1, r3, #12
   37d38:	0f50      	lsrs	r0, r2, #29
   37d3a:	0a49      	lsrs	r1, r1, #9
   37d3c:	4301      	orrs	r1, r0
   37d3e:	48c6      	ldr	r0, [pc, #792]	; (38058 <__aeabi_dsub+0x344>)
   37d40:	0d76      	lsrs	r6, r6, #21
   37d42:	46a8      	mov	r8, r5
   37d44:	0fdb      	lsrs	r3, r3, #31
   37d46:	00d2      	lsls	r2, r2, #3
   37d48:	4584      	cmp	ip, r0
   37d4a:	d100      	bne.n	37d4e <__aeabi_dsub+0x3a>
   37d4c:	e0d8      	b.n	37f00 <__aeabi_dsub+0x1ec>
   37d4e:	2001      	movs	r0, #1
   37d50:	4043      	eors	r3, r0
   37d52:	42ab      	cmp	r3, r5
   37d54:	d100      	bne.n	37d58 <__aeabi_dsub+0x44>
   37d56:	e0a6      	b.n	37ea6 <__aeabi_dsub+0x192>
   37d58:	4660      	mov	r0, ip
   37d5a:	1a35      	subs	r5, r6, r0
   37d5c:	2d00      	cmp	r5, #0
   37d5e:	dc00      	bgt.n	37d62 <__aeabi_dsub+0x4e>
   37d60:	e105      	b.n	37f6e <__aeabi_dsub+0x25a>
   37d62:	2800      	cmp	r0, #0
   37d64:	d110      	bne.n	37d88 <__aeabi_dsub+0x74>
   37d66:	000b      	movs	r3, r1
   37d68:	4313      	orrs	r3, r2
   37d6a:	d100      	bne.n	37d6e <__aeabi_dsub+0x5a>
   37d6c:	e0d7      	b.n	37f1e <__aeabi_dsub+0x20a>
   37d6e:	1e6b      	subs	r3, r5, #1
   37d70:	2b00      	cmp	r3, #0
   37d72:	d000      	beq.n	37d76 <__aeabi_dsub+0x62>
   37d74:	e14b      	b.n	3800e <__aeabi_dsub+0x2fa>
   37d76:	4653      	mov	r3, sl
   37d78:	1a9f      	subs	r7, r3, r2
   37d7a:	45ba      	cmp	sl, r7
   37d7c:	4180      	sbcs	r0, r0
   37d7e:	1a64      	subs	r4, r4, r1
   37d80:	4240      	negs	r0, r0
   37d82:	1a24      	subs	r4, r4, r0
   37d84:	2601      	movs	r6, #1
   37d86:	e01e      	b.n	37dc6 <__aeabi_dsub+0xb2>
   37d88:	4bb3      	ldr	r3, [pc, #716]	; (38058 <__aeabi_dsub+0x344>)
   37d8a:	429e      	cmp	r6, r3
   37d8c:	d048      	beq.n	37e20 <__aeabi_dsub+0x10c>
   37d8e:	2380      	movs	r3, #128	; 0x80
   37d90:	041b      	lsls	r3, r3, #16
   37d92:	4319      	orrs	r1, r3
   37d94:	2d38      	cmp	r5, #56	; 0x38
   37d96:	dd00      	ble.n	37d9a <__aeabi_dsub+0x86>
   37d98:	e119      	b.n	37fce <__aeabi_dsub+0x2ba>
   37d9a:	2d1f      	cmp	r5, #31
   37d9c:	dd00      	ble.n	37da0 <__aeabi_dsub+0x8c>
   37d9e:	e14c      	b.n	3803a <__aeabi_dsub+0x326>
   37da0:	2320      	movs	r3, #32
   37da2:	000f      	movs	r7, r1
   37da4:	1b5b      	subs	r3, r3, r5
   37da6:	0010      	movs	r0, r2
   37da8:	409a      	lsls	r2, r3
   37daa:	409f      	lsls	r7, r3
   37dac:	40e8      	lsrs	r0, r5
   37dae:	1e53      	subs	r3, r2, #1
   37db0:	419a      	sbcs	r2, r3
   37db2:	40e9      	lsrs	r1, r5
   37db4:	4307      	orrs	r7, r0
   37db6:	4317      	orrs	r7, r2
   37db8:	4653      	mov	r3, sl
   37dba:	1bdf      	subs	r7, r3, r7
   37dbc:	1a61      	subs	r1, r4, r1
   37dbe:	45ba      	cmp	sl, r7
   37dc0:	41a4      	sbcs	r4, r4
   37dc2:	4264      	negs	r4, r4
   37dc4:	1b0c      	subs	r4, r1, r4
   37dc6:	0223      	lsls	r3, r4, #8
   37dc8:	d400      	bmi.n	37dcc <__aeabi_dsub+0xb8>
   37dca:	e0c5      	b.n	37f58 <__aeabi_dsub+0x244>
   37dcc:	0264      	lsls	r4, r4, #9
   37dce:	0a65      	lsrs	r5, r4, #9
   37dd0:	2d00      	cmp	r5, #0
   37dd2:	d100      	bne.n	37dd6 <__aeabi_dsub+0xc2>
   37dd4:	e0f6      	b.n	37fc4 <__aeabi_dsub+0x2b0>
   37dd6:	0028      	movs	r0, r5
   37dd8:	f000 fb1e 	bl	38418 <__clzsi2>
   37ddc:	0003      	movs	r3, r0
   37dde:	3b08      	subs	r3, #8
   37de0:	2b1f      	cmp	r3, #31
   37de2:	dd00      	ble.n	37de6 <__aeabi_dsub+0xd2>
   37de4:	e0e9      	b.n	37fba <__aeabi_dsub+0x2a6>
   37de6:	2220      	movs	r2, #32
   37de8:	003c      	movs	r4, r7
   37dea:	1ad2      	subs	r2, r2, r3
   37dec:	409d      	lsls	r5, r3
   37dee:	40d4      	lsrs	r4, r2
   37df0:	409f      	lsls	r7, r3
   37df2:	4325      	orrs	r5, r4
   37df4:	429e      	cmp	r6, r3
   37df6:	dd00      	ble.n	37dfa <__aeabi_dsub+0xe6>
   37df8:	e0db      	b.n	37fb2 <__aeabi_dsub+0x29e>
   37dfa:	1b9e      	subs	r6, r3, r6
   37dfc:	1c73      	adds	r3, r6, #1
   37dfe:	2b1f      	cmp	r3, #31
   37e00:	dd00      	ble.n	37e04 <__aeabi_dsub+0xf0>
   37e02:	e10a      	b.n	3801a <__aeabi_dsub+0x306>
   37e04:	2220      	movs	r2, #32
   37e06:	0038      	movs	r0, r7
   37e08:	1ad2      	subs	r2, r2, r3
   37e0a:	0029      	movs	r1, r5
   37e0c:	4097      	lsls	r7, r2
   37e0e:	002c      	movs	r4, r5
   37e10:	4091      	lsls	r1, r2
   37e12:	40d8      	lsrs	r0, r3
   37e14:	1e7a      	subs	r2, r7, #1
   37e16:	4197      	sbcs	r7, r2
   37e18:	40dc      	lsrs	r4, r3
   37e1a:	2600      	movs	r6, #0
   37e1c:	4301      	orrs	r1, r0
   37e1e:	430f      	orrs	r7, r1
   37e20:	077b      	lsls	r3, r7, #29
   37e22:	d009      	beq.n	37e38 <__aeabi_dsub+0x124>
   37e24:	230f      	movs	r3, #15
   37e26:	403b      	ands	r3, r7
   37e28:	2b04      	cmp	r3, #4
   37e2a:	d005      	beq.n	37e38 <__aeabi_dsub+0x124>
   37e2c:	1d3b      	adds	r3, r7, #4
   37e2e:	42bb      	cmp	r3, r7
   37e30:	41bf      	sbcs	r7, r7
   37e32:	427f      	negs	r7, r7
   37e34:	19e4      	adds	r4, r4, r7
   37e36:	001f      	movs	r7, r3
   37e38:	0223      	lsls	r3, r4, #8
   37e3a:	d525      	bpl.n	37e88 <__aeabi_dsub+0x174>
   37e3c:	4b86      	ldr	r3, [pc, #536]	; (38058 <__aeabi_dsub+0x344>)
   37e3e:	3601      	adds	r6, #1
   37e40:	429e      	cmp	r6, r3
   37e42:	d100      	bne.n	37e46 <__aeabi_dsub+0x132>
   37e44:	e0af      	b.n	37fa6 <__aeabi_dsub+0x292>
   37e46:	4b85      	ldr	r3, [pc, #532]	; (3805c <__aeabi_dsub+0x348>)
   37e48:	2501      	movs	r5, #1
   37e4a:	401c      	ands	r4, r3
   37e4c:	4643      	mov	r3, r8
   37e4e:	0762      	lsls	r2, r4, #29
   37e50:	08ff      	lsrs	r7, r7, #3
   37e52:	0264      	lsls	r4, r4, #9
   37e54:	0576      	lsls	r6, r6, #21
   37e56:	4317      	orrs	r7, r2
   37e58:	0b24      	lsrs	r4, r4, #12
   37e5a:	0d76      	lsrs	r6, r6, #21
   37e5c:	401d      	ands	r5, r3
   37e5e:	2100      	movs	r1, #0
   37e60:	0324      	lsls	r4, r4, #12
   37e62:	0b23      	lsrs	r3, r4, #12
   37e64:	0d0c      	lsrs	r4, r1, #20
   37e66:	4a7e      	ldr	r2, [pc, #504]	; (38060 <__aeabi_dsub+0x34c>)
   37e68:	0524      	lsls	r4, r4, #20
   37e6a:	431c      	orrs	r4, r3
   37e6c:	4014      	ands	r4, r2
   37e6e:	0533      	lsls	r3, r6, #20
   37e70:	4323      	orrs	r3, r4
   37e72:	005b      	lsls	r3, r3, #1
   37e74:	07ed      	lsls	r5, r5, #31
   37e76:	085b      	lsrs	r3, r3, #1
   37e78:	432b      	orrs	r3, r5
   37e7a:	0038      	movs	r0, r7
   37e7c:	0019      	movs	r1, r3
   37e7e:	bc1c      	pop	{r2, r3, r4}
   37e80:	4690      	mov	r8, r2
   37e82:	4699      	mov	r9, r3
   37e84:	46a2      	mov	sl, r4
   37e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37e88:	2501      	movs	r5, #1
   37e8a:	4643      	mov	r3, r8
   37e8c:	0762      	lsls	r2, r4, #29
   37e8e:	08ff      	lsrs	r7, r7, #3
   37e90:	4317      	orrs	r7, r2
   37e92:	08e4      	lsrs	r4, r4, #3
   37e94:	401d      	ands	r5, r3
   37e96:	4b70      	ldr	r3, [pc, #448]	; (38058 <__aeabi_dsub+0x344>)
   37e98:	429e      	cmp	r6, r3
   37e9a:	d036      	beq.n	37f0a <__aeabi_dsub+0x1f6>
   37e9c:	0324      	lsls	r4, r4, #12
   37e9e:	0576      	lsls	r6, r6, #21
   37ea0:	0b24      	lsrs	r4, r4, #12
   37ea2:	0d76      	lsrs	r6, r6, #21
   37ea4:	e7db      	b.n	37e5e <__aeabi_dsub+0x14a>
   37ea6:	4663      	mov	r3, ip
   37ea8:	1af3      	subs	r3, r6, r3
   37eaa:	2b00      	cmp	r3, #0
   37eac:	dc00      	bgt.n	37eb0 <__aeabi_dsub+0x19c>
   37eae:	e094      	b.n	37fda <__aeabi_dsub+0x2c6>
   37eb0:	4660      	mov	r0, ip
   37eb2:	2800      	cmp	r0, #0
   37eb4:	d035      	beq.n	37f22 <__aeabi_dsub+0x20e>
   37eb6:	4868      	ldr	r0, [pc, #416]	; (38058 <__aeabi_dsub+0x344>)
   37eb8:	4286      	cmp	r6, r0
   37eba:	d0b1      	beq.n	37e20 <__aeabi_dsub+0x10c>
   37ebc:	2780      	movs	r7, #128	; 0x80
   37ebe:	043f      	lsls	r7, r7, #16
   37ec0:	4339      	orrs	r1, r7
   37ec2:	2b38      	cmp	r3, #56	; 0x38
   37ec4:	dc00      	bgt.n	37ec8 <__aeabi_dsub+0x1b4>
   37ec6:	e0fd      	b.n	380c4 <__aeabi_dsub+0x3b0>
   37ec8:	430a      	orrs	r2, r1
   37eca:	0017      	movs	r7, r2
   37ecc:	2100      	movs	r1, #0
   37ece:	1e7a      	subs	r2, r7, #1
   37ed0:	4197      	sbcs	r7, r2
   37ed2:	4457      	add	r7, sl
   37ed4:	4557      	cmp	r7, sl
   37ed6:	4180      	sbcs	r0, r0
   37ed8:	1909      	adds	r1, r1, r4
   37eda:	4244      	negs	r4, r0
   37edc:	190c      	adds	r4, r1, r4
   37ede:	0223      	lsls	r3, r4, #8
   37ee0:	d53a      	bpl.n	37f58 <__aeabi_dsub+0x244>
   37ee2:	4b5d      	ldr	r3, [pc, #372]	; (38058 <__aeabi_dsub+0x344>)
   37ee4:	3601      	adds	r6, #1
   37ee6:	429e      	cmp	r6, r3
   37ee8:	d100      	bne.n	37eec <__aeabi_dsub+0x1d8>
   37eea:	e14b      	b.n	38184 <__aeabi_dsub+0x470>
   37eec:	2201      	movs	r2, #1
   37eee:	4b5b      	ldr	r3, [pc, #364]	; (3805c <__aeabi_dsub+0x348>)
   37ef0:	401c      	ands	r4, r3
   37ef2:	087b      	lsrs	r3, r7, #1
   37ef4:	4017      	ands	r7, r2
   37ef6:	431f      	orrs	r7, r3
   37ef8:	07e2      	lsls	r2, r4, #31
   37efa:	4317      	orrs	r7, r2
   37efc:	0864      	lsrs	r4, r4, #1
   37efe:	e78f      	b.n	37e20 <__aeabi_dsub+0x10c>
   37f00:	0008      	movs	r0, r1
   37f02:	4310      	orrs	r0, r2
   37f04:	d000      	beq.n	37f08 <__aeabi_dsub+0x1f4>
   37f06:	e724      	b.n	37d52 <__aeabi_dsub+0x3e>
   37f08:	e721      	b.n	37d4e <__aeabi_dsub+0x3a>
   37f0a:	0023      	movs	r3, r4
   37f0c:	433b      	orrs	r3, r7
   37f0e:	d100      	bne.n	37f12 <__aeabi_dsub+0x1fe>
   37f10:	e1b9      	b.n	38286 <__aeabi_dsub+0x572>
   37f12:	2280      	movs	r2, #128	; 0x80
   37f14:	0312      	lsls	r2, r2, #12
   37f16:	4314      	orrs	r4, r2
   37f18:	0324      	lsls	r4, r4, #12
   37f1a:	0b24      	lsrs	r4, r4, #12
   37f1c:	e79f      	b.n	37e5e <__aeabi_dsub+0x14a>
   37f1e:	002e      	movs	r6, r5
   37f20:	e77e      	b.n	37e20 <__aeabi_dsub+0x10c>
   37f22:	0008      	movs	r0, r1
   37f24:	4310      	orrs	r0, r2
   37f26:	d100      	bne.n	37f2a <__aeabi_dsub+0x216>
   37f28:	e0ca      	b.n	380c0 <__aeabi_dsub+0x3ac>
   37f2a:	1e58      	subs	r0, r3, #1
   37f2c:	4684      	mov	ip, r0
   37f2e:	2800      	cmp	r0, #0
   37f30:	d000      	beq.n	37f34 <__aeabi_dsub+0x220>
   37f32:	e0e7      	b.n	38104 <__aeabi_dsub+0x3f0>
   37f34:	4452      	add	r2, sl
   37f36:	4552      	cmp	r2, sl
   37f38:	4180      	sbcs	r0, r0
   37f3a:	1864      	adds	r4, r4, r1
   37f3c:	4240      	negs	r0, r0
   37f3e:	1824      	adds	r4, r4, r0
   37f40:	0017      	movs	r7, r2
   37f42:	2601      	movs	r6, #1
   37f44:	0223      	lsls	r3, r4, #8
   37f46:	d507      	bpl.n	37f58 <__aeabi_dsub+0x244>
   37f48:	2602      	movs	r6, #2
   37f4a:	e7cf      	b.n	37eec <__aeabi_dsub+0x1d8>
   37f4c:	4664      	mov	r4, ip
   37f4e:	432c      	orrs	r4, r5
   37f50:	d100      	bne.n	37f54 <__aeabi_dsub+0x240>
   37f52:	e1b3      	b.n	382bc <__aeabi_dsub+0x5a8>
   37f54:	002c      	movs	r4, r5
   37f56:	4667      	mov	r7, ip
   37f58:	077b      	lsls	r3, r7, #29
   37f5a:	d000      	beq.n	37f5e <__aeabi_dsub+0x24a>
   37f5c:	e762      	b.n	37e24 <__aeabi_dsub+0x110>
   37f5e:	0763      	lsls	r3, r4, #29
   37f60:	08ff      	lsrs	r7, r7, #3
   37f62:	431f      	orrs	r7, r3
   37f64:	2501      	movs	r5, #1
   37f66:	4643      	mov	r3, r8
   37f68:	08e4      	lsrs	r4, r4, #3
   37f6a:	401d      	ands	r5, r3
   37f6c:	e793      	b.n	37e96 <__aeabi_dsub+0x182>
   37f6e:	2d00      	cmp	r5, #0
   37f70:	d178      	bne.n	38064 <__aeabi_dsub+0x350>
   37f72:	1c75      	adds	r5, r6, #1
   37f74:	056d      	lsls	r5, r5, #21
   37f76:	0d6d      	lsrs	r5, r5, #21
   37f78:	2d01      	cmp	r5, #1
   37f7a:	dc00      	bgt.n	37f7e <__aeabi_dsub+0x26a>
   37f7c:	e0f2      	b.n	38164 <__aeabi_dsub+0x450>
   37f7e:	4650      	mov	r0, sl
   37f80:	1a80      	subs	r0, r0, r2
   37f82:	4582      	cmp	sl, r0
   37f84:	41bf      	sbcs	r7, r7
   37f86:	1a65      	subs	r5, r4, r1
   37f88:	427f      	negs	r7, r7
   37f8a:	1bed      	subs	r5, r5, r7
   37f8c:	4684      	mov	ip, r0
   37f8e:	0228      	lsls	r0, r5, #8
   37f90:	d400      	bmi.n	37f94 <__aeabi_dsub+0x280>
   37f92:	e08c      	b.n	380ae <__aeabi_dsub+0x39a>
   37f94:	4650      	mov	r0, sl
   37f96:	1a17      	subs	r7, r2, r0
   37f98:	42ba      	cmp	r2, r7
   37f9a:	4192      	sbcs	r2, r2
   37f9c:	1b0c      	subs	r4, r1, r4
   37f9e:	4255      	negs	r5, r2
   37fa0:	1b65      	subs	r5, r4, r5
   37fa2:	4698      	mov	r8, r3
   37fa4:	e714      	b.n	37dd0 <__aeabi_dsub+0xbc>
   37fa6:	2501      	movs	r5, #1
   37fa8:	4643      	mov	r3, r8
   37faa:	2400      	movs	r4, #0
   37fac:	401d      	ands	r5, r3
   37fae:	2700      	movs	r7, #0
   37fb0:	e755      	b.n	37e5e <__aeabi_dsub+0x14a>
   37fb2:	4c2a      	ldr	r4, [pc, #168]	; (3805c <__aeabi_dsub+0x348>)
   37fb4:	1af6      	subs	r6, r6, r3
   37fb6:	402c      	ands	r4, r5
   37fb8:	e732      	b.n	37e20 <__aeabi_dsub+0x10c>
   37fba:	003d      	movs	r5, r7
   37fbc:	3828      	subs	r0, #40	; 0x28
   37fbe:	4085      	lsls	r5, r0
   37fc0:	2700      	movs	r7, #0
   37fc2:	e717      	b.n	37df4 <__aeabi_dsub+0xe0>
   37fc4:	0038      	movs	r0, r7
   37fc6:	f000 fa27 	bl	38418 <__clzsi2>
   37fca:	3020      	adds	r0, #32
   37fcc:	e706      	b.n	37ddc <__aeabi_dsub+0xc8>
   37fce:	430a      	orrs	r2, r1
   37fd0:	0017      	movs	r7, r2
   37fd2:	2100      	movs	r1, #0
   37fd4:	1e7a      	subs	r2, r7, #1
   37fd6:	4197      	sbcs	r7, r2
   37fd8:	e6ee      	b.n	37db8 <__aeabi_dsub+0xa4>
   37fda:	2b00      	cmp	r3, #0
   37fdc:	d000      	beq.n	37fe0 <__aeabi_dsub+0x2cc>
   37fde:	e0e5      	b.n	381ac <__aeabi_dsub+0x498>
   37fe0:	1c73      	adds	r3, r6, #1
   37fe2:	469c      	mov	ip, r3
   37fe4:	055b      	lsls	r3, r3, #21
   37fe6:	0d5b      	lsrs	r3, r3, #21
   37fe8:	2b01      	cmp	r3, #1
   37fea:	dc00      	bgt.n	37fee <__aeabi_dsub+0x2da>
   37fec:	e09f      	b.n	3812e <__aeabi_dsub+0x41a>
   37fee:	4b1a      	ldr	r3, [pc, #104]	; (38058 <__aeabi_dsub+0x344>)
   37ff0:	459c      	cmp	ip, r3
   37ff2:	d100      	bne.n	37ff6 <__aeabi_dsub+0x2e2>
   37ff4:	e0c5      	b.n	38182 <__aeabi_dsub+0x46e>
   37ff6:	4452      	add	r2, sl
   37ff8:	4552      	cmp	r2, sl
   37ffa:	4180      	sbcs	r0, r0
   37ffc:	1864      	adds	r4, r4, r1
   37ffe:	4240      	negs	r0, r0
   38000:	1824      	adds	r4, r4, r0
   38002:	07e7      	lsls	r7, r4, #31
   38004:	0852      	lsrs	r2, r2, #1
   38006:	4317      	orrs	r7, r2
   38008:	0864      	lsrs	r4, r4, #1
   3800a:	4666      	mov	r6, ip
   3800c:	e708      	b.n	37e20 <__aeabi_dsub+0x10c>
   3800e:	4812      	ldr	r0, [pc, #72]	; (38058 <__aeabi_dsub+0x344>)
   38010:	4285      	cmp	r5, r0
   38012:	d100      	bne.n	38016 <__aeabi_dsub+0x302>
   38014:	e085      	b.n	38122 <__aeabi_dsub+0x40e>
   38016:	001d      	movs	r5, r3
   38018:	e6bc      	b.n	37d94 <__aeabi_dsub+0x80>
   3801a:	0029      	movs	r1, r5
   3801c:	3e1f      	subs	r6, #31
   3801e:	40f1      	lsrs	r1, r6
   38020:	2b20      	cmp	r3, #32
   38022:	d100      	bne.n	38026 <__aeabi_dsub+0x312>
   38024:	e07f      	b.n	38126 <__aeabi_dsub+0x412>
   38026:	2240      	movs	r2, #64	; 0x40
   38028:	1ad3      	subs	r3, r2, r3
   3802a:	409d      	lsls	r5, r3
   3802c:	432f      	orrs	r7, r5
   3802e:	1e7d      	subs	r5, r7, #1
   38030:	41af      	sbcs	r7, r5
   38032:	2400      	movs	r4, #0
   38034:	430f      	orrs	r7, r1
   38036:	2600      	movs	r6, #0
   38038:	e78e      	b.n	37f58 <__aeabi_dsub+0x244>
   3803a:	002b      	movs	r3, r5
   3803c:	000f      	movs	r7, r1
   3803e:	3b20      	subs	r3, #32
   38040:	40df      	lsrs	r7, r3
   38042:	2d20      	cmp	r5, #32
   38044:	d071      	beq.n	3812a <__aeabi_dsub+0x416>
   38046:	2340      	movs	r3, #64	; 0x40
   38048:	1b5d      	subs	r5, r3, r5
   3804a:	40a9      	lsls	r1, r5
   3804c:	430a      	orrs	r2, r1
   3804e:	1e51      	subs	r1, r2, #1
   38050:	418a      	sbcs	r2, r1
   38052:	2100      	movs	r1, #0
   38054:	4317      	orrs	r7, r2
   38056:	e6af      	b.n	37db8 <__aeabi_dsub+0xa4>
   38058:	000007ff 	.word	0x000007ff
   3805c:	ff7fffff 	.word	0xff7fffff
   38060:	800fffff 	.word	0x800fffff
   38064:	2e00      	cmp	r6, #0
   38066:	d03e      	beq.n	380e6 <__aeabi_dsub+0x3d2>
   38068:	4eb3      	ldr	r6, [pc, #716]	; (38338 <__aeabi_dsub+0x624>)
   3806a:	45b4      	cmp	ip, r6
   3806c:	d045      	beq.n	380fa <__aeabi_dsub+0x3e6>
   3806e:	2680      	movs	r6, #128	; 0x80
   38070:	0436      	lsls	r6, r6, #16
   38072:	426d      	negs	r5, r5
   38074:	4334      	orrs	r4, r6
   38076:	2d38      	cmp	r5, #56	; 0x38
   38078:	dd00      	ble.n	3807c <__aeabi_dsub+0x368>
   3807a:	e0a8      	b.n	381ce <__aeabi_dsub+0x4ba>
   3807c:	2d1f      	cmp	r5, #31
   3807e:	dd00      	ble.n	38082 <__aeabi_dsub+0x36e>
   38080:	e11f      	b.n	382c2 <__aeabi_dsub+0x5ae>
   38082:	2620      	movs	r6, #32
   38084:	0027      	movs	r7, r4
   38086:	4650      	mov	r0, sl
   38088:	1b76      	subs	r6, r6, r5
   3808a:	40b7      	lsls	r7, r6
   3808c:	40e8      	lsrs	r0, r5
   3808e:	4307      	orrs	r7, r0
   38090:	4650      	mov	r0, sl
   38092:	40b0      	lsls	r0, r6
   38094:	1e46      	subs	r6, r0, #1
   38096:	41b0      	sbcs	r0, r6
   38098:	40ec      	lsrs	r4, r5
   3809a:	4338      	orrs	r0, r7
   3809c:	1a17      	subs	r7, r2, r0
   3809e:	42ba      	cmp	r2, r7
   380a0:	4192      	sbcs	r2, r2
   380a2:	1b0c      	subs	r4, r1, r4
   380a4:	4252      	negs	r2, r2
   380a6:	1aa4      	subs	r4, r4, r2
   380a8:	4666      	mov	r6, ip
   380aa:	4698      	mov	r8, r3
   380ac:	e68b      	b.n	37dc6 <__aeabi_dsub+0xb2>
   380ae:	4664      	mov	r4, ip
   380b0:	4667      	mov	r7, ip
   380b2:	432c      	orrs	r4, r5
   380b4:	d000      	beq.n	380b8 <__aeabi_dsub+0x3a4>
   380b6:	e68b      	b.n	37dd0 <__aeabi_dsub+0xbc>
   380b8:	2500      	movs	r5, #0
   380ba:	2600      	movs	r6, #0
   380bc:	2700      	movs	r7, #0
   380be:	e6ea      	b.n	37e96 <__aeabi_dsub+0x182>
   380c0:	001e      	movs	r6, r3
   380c2:	e6ad      	b.n	37e20 <__aeabi_dsub+0x10c>
   380c4:	2b1f      	cmp	r3, #31
   380c6:	dc60      	bgt.n	3818a <__aeabi_dsub+0x476>
   380c8:	2720      	movs	r7, #32
   380ca:	1af8      	subs	r0, r7, r3
   380cc:	000f      	movs	r7, r1
   380ce:	4684      	mov	ip, r0
   380d0:	4087      	lsls	r7, r0
   380d2:	0010      	movs	r0, r2
   380d4:	40d8      	lsrs	r0, r3
   380d6:	4307      	orrs	r7, r0
   380d8:	4660      	mov	r0, ip
   380da:	4082      	lsls	r2, r0
   380dc:	1e50      	subs	r0, r2, #1
   380de:	4182      	sbcs	r2, r0
   380e0:	40d9      	lsrs	r1, r3
   380e2:	4317      	orrs	r7, r2
   380e4:	e6f5      	b.n	37ed2 <__aeabi_dsub+0x1be>
   380e6:	0026      	movs	r6, r4
   380e8:	4650      	mov	r0, sl
   380ea:	4306      	orrs	r6, r0
   380ec:	d005      	beq.n	380fa <__aeabi_dsub+0x3e6>
   380ee:	43ed      	mvns	r5, r5
   380f0:	2d00      	cmp	r5, #0
   380f2:	d0d3      	beq.n	3809c <__aeabi_dsub+0x388>
   380f4:	4e90      	ldr	r6, [pc, #576]	; (38338 <__aeabi_dsub+0x624>)
   380f6:	45b4      	cmp	ip, r6
   380f8:	d1bd      	bne.n	38076 <__aeabi_dsub+0x362>
   380fa:	000c      	movs	r4, r1
   380fc:	0017      	movs	r7, r2
   380fe:	4666      	mov	r6, ip
   38100:	4698      	mov	r8, r3
   38102:	e68d      	b.n	37e20 <__aeabi_dsub+0x10c>
   38104:	488c      	ldr	r0, [pc, #560]	; (38338 <__aeabi_dsub+0x624>)
   38106:	4283      	cmp	r3, r0
   38108:	d00b      	beq.n	38122 <__aeabi_dsub+0x40e>
   3810a:	4663      	mov	r3, ip
   3810c:	e6d9      	b.n	37ec2 <__aeabi_dsub+0x1ae>
   3810e:	2d00      	cmp	r5, #0
   38110:	d000      	beq.n	38114 <__aeabi_dsub+0x400>
   38112:	e096      	b.n	38242 <__aeabi_dsub+0x52e>
   38114:	0008      	movs	r0, r1
   38116:	4310      	orrs	r0, r2
   38118:	d100      	bne.n	3811c <__aeabi_dsub+0x408>
   3811a:	e0e2      	b.n	382e2 <__aeabi_dsub+0x5ce>
   3811c:	000c      	movs	r4, r1
   3811e:	0017      	movs	r7, r2
   38120:	4698      	mov	r8, r3
   38122:	4e85      	ldr	r6, [pc, #532]	; (38338 <__aeabi_dsub+0x624>)
   38124:	e67c      	b.n	37e20 <__aeabi_dsub+0x10c>
   38126:	2500      	movs	r5, #0
   38128:	e780      	b.n	3802c <__aeabi_dsub+0x318>
   3812a:	2100      	movs	r1, #0
   3812c:	e78e      	b.n	3804c <__aeabi_dsub+0x338>
   3812e:	0023      	movs	r3, r4
   38130:	4650      	mov	r0, sl
   38132:	4303      	orrs	r3, r0
   38134:	2e00      	cmp	r6, #0
   38136:	d000      	beq.n	3813a <__aeabi_dsub+0x426>
   38138:	e0a8      	b.n	3828c <__aeabi_dsub+0x578>
   3813a:	2b00      	cmp	r3, #0
   3813c:	d100      	bne.n	38140 <__aeabi_dsub+0x42c>
   3813e:	e0de      	b.n	382fe <__aeabi_dsub+0x5ea>
   38140:	000b      	movs	r3, r1
   38142:	4313      	orrs	r3, r2
   38144:	d100      	bne.n	38148 <__aeabi_dsub+0x434>
   38146:	e66b      	b.n	37e20 <__aeabi_dsub+0x10c>
   38148:	4452      	add	r2, sl
   3814a:	4552      	cmp	r2, sl
   3814c:	4180      	sbcs	r0, r0
   3814e:	1864      	adds	r4, r4, r1
   38150:	4240      	negs	r0, r0
   38152:	1824      	adds	r4, r4, r0
   38154:	0017      	movs	r7, r2
   38156:	0223      	lsls	r3, r4, #8
   38158:	d400      	bmi.n	3815c <__aeabi_dsub+0x448>
   3815a:	e6fd      	b.n	37f58 <__aeabi_dsub+0x244>
   3815c:	4b77      	ldr	r3, [pc, #476]	; (3833c <__aeabi_dsub+0x628>)
   3815e:	4666      	mov	r6, ip
   38160:	401c      	ands	r4, r3
   38162:	e65d      	b.n	37e20 <__aeabi_dsub+0x10c>
   38164:	0025      	movs	r5, r4
   38166:	4650      	mov	r0, sl
   38168:	4305      	orrs	r5, r0
   3816a:	2e00      	cmp	r6, #0
   3816c:	d1cf      	bne.n	3810e <__aeabi_dsub+0x3fa>
   3816e:	2d00      	cmp	r5, #0
   38170:	d14f      	bne.n	38212 <__aeabi_dsub+0x4fe>
   38172:	000c      	movs	r4, r1
   38174:	4314      	orrs	r4, r2
   38176:	d100      	bne.n	3817a <__aeabi_dsub+0x466>
   38178:	e0a0      	b.n	382bc <__aeabi_dsub+0x5a8>
   3817a:	000c      	movs	r4, r1
   3817c:	0017      	movs	r7, r2
   3817e:	4698      	mov	r8, r3
   38180:	e64e      	b.n	37e20 <__aeabi_dsub+0x10c>
   38182:	4666      	mov	r6, ip
   38184:	2400      	movs	r4, #0
   38186:	2700      	movs	r7, #0
   38188:	e685      	b.n	37e96 <__aeabi_dsub+0x182>
   3818a:	001f      	movs	r7, r3
   3818c:	0008      	movs	r0, r1
   3818e:	3f20      	subs	r7, #32
   38190:	40f8      	lsrs	r0, r7
   38192:	0007      	movs	r7, r0
   38194:	2b20      	cmp	r3, #32
   38196:	d100      	bne.n	3819a <__aeabi_dsub+0x486>
   38198:	e08e      	b.n	382b8 <__aeabi_dsub+0x5a4>
   3819a:	2040      	movs	r0, #64	; 0x40
   3819c:	1ac3      	subs	r3, r0, r3
   3819e:	4099      	lsls	r1, r3
   381a0:	430a      	orrs	r2, r1
   381a2:	1e51      	subs	r1, r2, #1
   381a4:	418a      	sbcs	r2, r1
   381a6:	2100      	movs	r1, #0
   381a8:	4317      	orrs	r7, r2
   381aa:	e692      	b.n	37ed2 <__aeabi_dsub+0x1be>
   381ac:	2e00      	cmp	r6, #0
   381ae:	d114      	bne.n	381da <__aeabi_dsub+0x4c6>
   381b0:	0026      	movs	r6, r4
   381b2:	4650      	mov	r0, sl
   381b4:	4306      	orrs	r6, r0
   381b6:	d062      	beq.n	3827e <__aeabi_dsub+0x56a>
   381b8:	43db      	mvns	r3, r3
   381ba:	2b00      	cmp	r3, #0
   381bc:	d15c      	bne.n	38278 <__aeabi_dsub+0x564>
   381be:	1887      	adds	r7, r0, r2
   381c0:	4297      	cmp	r7, r2
   381c2:	4192      	sbcs	r2, r2
   381c4:	1864      	adds	r4, r4, r1
   381c6:	4252      	negs	r2, r2
   381c8:	18a4      	adds	r4, r4, r2
   381ca:	4666      	mov	r6, ip
   381cc:	e687      	b.n	37ede <__aeabi_dsub+0x1ca>
   381ce:	4650      	mov	r0, sl
   381d0:	4320      	orrs	r0, r4
   381d2:	1e44      	subs	r4, r0, #1
   381d4:	41a0      	sbcs	r0, r4
   381d6:	2400      	movs	r4, #0
   381d8:	e760      	b.n	3809c <__aeabi_dsub+0x388>
   381da:	4e57      	ldr	r6, [pc, #348]	; (38338 <__aeabi_dsub+0x624>)
   381dc:	45b4      	cmp	ip, r6
   381de:	d04e      	beq.n	3827e <__aeabi_dsub+0x56a>
   381e0:	2680      	movs	r6, #128	; 0x80
   381e2:	0436      	lsls	r6, r6, #16
   381e4:	425b      	negs	r3, r3
   381e6:	4334      	orrs	r4, r6
   381e8:	2b38      	cmp	r3, #56	; 0x38
   381ea:	dd00      	ble.n	381ee <__aeabi_dsub+0x4da>
   381ec:	e07f      	b.n	382ee <__aeabi_dsub+0x5da>
   381ee:	2b1f      	cmp	r3, #31
   381f0:	dd00      	ble.n	381f4 <__aeabi_dsub+0x4e0>
   381f2:	e08b      	b.n	3830c <__aeabi_dsub+0x5f8>
   381f4:	2620      	movs	r6, #32
   381f6:	0027      	movs	r7, r4
   381f8:	4650      	mov	r0, sl
   381fa:	1af6      	subs	r6, r6, r3
   381fc:	40b7      	lsls	r7, r6
   381fe:	40d8      	lsrs	r0, r3
   38200:	4307      	orrs	r7, r0
   38202:	4650      	mov	r0, sl
   38204:	40b0      	lsls	r0, r6
   38206:	1e46      	subs	r6, r0, #1
   38208:	41b0      	sbcs	r0, r6
   3820a:	4307      	orrs	r7, r0
   3820c:	40dc      	lsrs	r4, r3
   3820e:	18bf      	adds	r7, r7, r2
   38210:	e7d6      	b.n	381c0 <__aeabi_dsub+0x4ac>
   38212:	000d      	movs	r5, r1
   38214:	4315      	orrs	r5, r2
   38216:	d100      	bne.n	3821a <__aeabi_dsub+0x506>
   38218:	e602      	b.n	37e20 <__aeabi_dsub+0x10c>
   3821a:	4650      	mov	r0, sl
   3821c:	1a80      	subs	r0, r0, r2
   3821e:	4582      	cmp	sl, r0
   38220:	41bf      	sbcs	r7, r7
   38222:	1a65      	subs	r5, r4, r1
   38224:	427f      	negs	r7, r7
   38226:	1bed      	subs	r5, r5, r7
   38228:	4684      	mov	ip, r0
   3822a:	0228      	lsls	r0, r5, #8
   3822c:	d400      	bmi.n	38230 <__aeabi_dsub+0x51c>
   3822e:	e68d      	b.n	37f4c <__aeabi_dsub+0x238>
   38230:	4650      	mov	r0, sl
   38232:	1a17      	subs	r7, r2, r0
   38234:	42ba      	cmp	r2, r7
   38236:	4192      	sbcs	r2, r2
   38238:	1b0c      	subs	r4, r1, r4
   3823a:	4252      	negs	r2, r2
   3823c:	1aa4      	subs	r4, r4, r2
   3823e:	4698      	mov	r8, r3
   38240:	e5ee      	b.n	37e20 <__aeabi_dsub+0x10c>
   38242:	000d      	movs	r5, r1
   38244:	4315      	orrs	r5, r2
   38246:	d100      	bne.n	3824a <__aeabi_dsub+0x536>
   38248:	e76b      	b.n	38122 <__aeabi_dsub+0x40e>
   3824a:	4650      	mov	r0, sl
   3824c:	0767      	lsls	r7, r4, #29
   3824e:	08c0      	lsrs	r0, r0, #3
   38250:	4307      	orrs	r7, r0
   38252:	2080      	movs	r0, #128	; 0x80
   38254:	08e4      	lsrs	r4, r4, #3
   38256:	0300      	lsls	r0, r0, #12
   38258:	4204      	tst	r4, r0
   3825a:	d007      	beq.n	3826c <__aeabi_dsub+0x558>
   3825c:	08cd      	lsrs	r5, r1, #3
   3825e:	4205      	tst	r5, r0
   38260:	d104      	bne.n	3826c <__aeabi_dsub+0x558>
   38262:	002c      	movs	r4, r5
   38264:	4698      	mov	r8, r3
   38266:	08d7      	lsrs	r7, r2, #3
   38268:	0749      	lsls	r1, r1, #29
   3826a:	430f      	orrs	r7, r1
   3826c:	0f7b      	lsrs	r3, r7, #29
   3826e:	00e4      	lsls	r4, r4, #3
   38270:	431c      	orrs	r4, r3
   38272:	00ff      	lsls	r7, r7, #3
   38274:	4e30      	ldr	r6, [pc, #192]	; (38338 <__aeabi_dsub+0x624>)
   38276:	e5d3      	b.n	37e20 <__aeabi_dsub+0x10c>
   38278:	4e2f      	ldr	r6, [pc, #188]	; (38338 <__aeabi_dsub+0x624>)
   3827a:	45b4      	cmp	ip, r6
   3827c:	d1b4      	bne.n	381e8 <__aeabi_dsub+0x4d4>
   3827e:	000c      	movs	r4, r1
   38280:	0017      	movs	r7, r2
   38282:	4666      	mov	r6, ip
   38284:	e5cc      	b.n	37e20 <__aeabi_dsub+0x10c>
   38286:	2700      	movs	r7, #0
   38288:	2400      	movs	r4, #0
   3828a:	e5e8      	b.n	37e5e <__aeabi_dsub+0x14a>
   3828c:	2b00      	cmp	r3, #0
   3828e:	d039      	beq.n	38304 <__aeabi_dsub+0x5f0>
   38290:	000b      	movs	r3, r1
   38292:	4313      	orrs	r3, r2
   38294:	d100      	bne.n	38298 <__aeabi_dsub+0x584>
   38296:	e744      	b.n	38122 <__aeabi_dsub+0x40e>
   38298:	08c0      	lsrs	r0, r0, #3
   3829a:	0767      	lsls	r7, r4, #29
   3829c:	4307      	orrs	r7, r0
   3829e:	2080      	movs	r0, #128	; 0x80
   382a0:	08e4      	lsrs	r4, r4, #3
   382a2:	0300      	lsls	r0, r0, #12
   382a4:	4204      	tst	r4, r0
   382a6:	d0e1      	beq.n	3826c <__aeabi_dsub+0x558>
   382a8:	08cb      	lsrs	r3, r1, #3
   382aa:	4203      	tst	r3, r0
   382ac:	d1de      	bne.n	3826c <__aeabi_dsub+0x558>
   382ae:	08d7      	lsrs	r7, r2, #3
   382b0:	0749      	lsls	r1, r1, #29
   382b2:	430f      	orrs	r7, r1
   382b4:	001c      	movs	r4, r3
   382b6:	e7d9      	b.n	3826c <__aeabi_dsub+0x558>
   382b8:	2100      	movs	r1, #0
   382ba:	e771      	b.n	381a0 <__aeabi_dsub+0x48c>
   382bc:	2500      	movs	r5, #0
   382be:	2700      	movs	r7, #0
   382c0:	e5e9      	b.n	37e96 <__aeabi_dsub+0x182>
   382c2:	002e      	movs	r6, r5
   382c4:	0027      	movs	r7, r4
   382c6:	3e20      	subs	r6, #32
   382c8:	40f7      	lsrs	r7, r6
   382ca:	2d20      	cmp	r5, #32
   382cc:	d02f      	beq.n	3832e <__aeabi_dsub+0x61a>
   382ce:	2640      	movs	r6, #64	; 0x40
   382d0:	1b75      	subs	r5, r6, r5
   382d2:	40ac      	lsls	r4, r5
   382d4:	4650      	mov	r0, sl
   382d6:	4320      	orrs	r0, r4
   382d8:	1e44      	subs	r4, r0, #1
   382da:	41a0      	sbcs	r0, r4
   382dc:	2400      	movs	r4, #0
   382de:	4338      	orrs	r0, r7
   382e0:	e6dc      	b.n	3809c <__aeabi_dsub+0x388>
   382e2:	2480      	movs	r4, #128	; 0x80
   382e4:	2500      	movs	r5, #0
   382e6:	0324      	lsls	r4, r4, #12
   382e8:	4e13      	ldr	r6, [pc, #76]	; (38338 <__aeabi_dsub+0x624>)
   382ea:	2700      	movs	r7, #0
   382ec:	e5d3      	b.n	37e96 <__aeabi_dsub+0x182>
   382ee:	4650      	mov	r0, sl
   382f0:	4320      	orrs	r0, r4
   382f2:	0007      	movs	r7, r0
   382f4:	1e78      	subs	r0, r7, #1
   382f6:	4187      	sbcs	r7, r0
   382f8:	2400      	movs	r4, #0
   382fa:	18bf      	adds	r7, r7, r2
   382fc:	e760      	b.n	381c0 <__aeabi_dsub+0x4ac>
   382fe:	000c      	movs	r4, r1
   38300:	0017      	movs	r7, r2
   38302:	e58d      	b.n	37e20 <__aeabi_dsub+0x10c>
   38304:	000c      	movs	r4, r1
   38306:	0017      	movs	r7, r2
   38308:	4e0b      	ldr	r6, [pc, #44]	; (38338 <__aeabi_dsub+0x624>)
   3830a:	e589      	b.n	37e20 <__aeabi_dsub+0x10c>
   3830c:	001e      	movs	r6, r3
   3830e:	0027      	movs	r7, r4
   38310:	3e20      	subs	r6, #32
   38312:	40f7      	lsrs	r7, r6
   38314:	2b20      	cmp	r3, #32
   38316:	d00c      	beq.n	38332 <__aeabi_dsub+0x61e>
   38318:	2640      	movs	r6, #64	; 0x40
   3831a:	1af3      	subs	r3, r6, r3
   3831c:	409c      	lsls	r4, r3
   3831e:	4650      	mov	r0, sl
   38320:	4320      	orrs	r0, r4
   38322:	1e44      	subs	r4, r0, #1
   38324:	41a0      	sbcs	r0, r4
   38326:	4307      	orrs	r7, r0
   38328:	2400      	movs	r4, #0
   3832a:	18bf      	adds	r7, r7, r2
   3832c:	e748      	b.n	381c0 <__aeabi_dsub+0x4ac>
   3832e:	2400      	movs	r4, #0
   38330:	e7d0      	b.n	382d4 <__aeabi_dsub+0x5c0>
   38332:	2400      	movs	r4, #0
   38334:	e7f3      	b.n	3831e <__aeabi_dsub+0x60a>
   38336:	46c0      	nop			; (mov r8, r8)
   38338:	000007ff 	.word	0x000007ff
   3833c:	ff7fffff 	.word	0xff7fffff

00038340 <__aeabi_d2iz>:
   38340:	b530      	push	{r4, r5, lr}
   38342:	4d13      	ldr	r5, [pc, #76]	; (38390 <__aeabi_d2iz+0x50>)
   38344:	030a      	lsls	r2, r1, #12
   38346:	004b      	lsls	r3, r1, #1
   38348:	0b12      	lsrs	r2, r2, #12
   3834a:	0d5b      	lsrs	r3, r3, #21
   3834c:	0fc9      	lsrs	r1, r1, #31
   3834e:	2400      	movs	r4, #0
   38350:	42ab      	cmp	r3, r5
   38352:	dd10      	ble.n	38376 <__aeabi_d2iz+0x36>
   38354:	4c0f      	ldr	r4, [pc, #60]	; (38394 <__aeabi_d2iz+0x54>)
   38356:	42a3      	cmp	r3, r4
   38358:	dc0f      	bgt.n	3837a <__aeabi_d2iz+0x3a>
   3835a:	2480      	movs	r4, #128	; 0x80
   3835c:	4d0e      	ldr	r5, [pc, #56]	; (38398 <__aeabi_d2iz+0x58>)
   3835e:	0364      	lsls	r4, r4, #13
   38360:	4322      	orrs	r2, r4
   38362:	1aed      	subs	r5, r5, r3
   38364:	2d1f      	cmp	r5, #31
   38366:	dd0b      	ble.n	38380 <__aeabi_d2iz+0x40>
   38368:	480c      	ldr	r0, [pc, #48]	; (3839c <__aeabi_d2iz+0x5c>)
   3836a:	1ac3      	subs	r3, r0, r3
   3836c:	40da      	lsrs	r2, r3
   3836e:	4254      	negs	r4, r2
   38370:	2900      	cmp	r1, #0
   38372:	d100      	bne.n	38376 <__aeabi_d2iz+0x36>
   38374:	0014      	movs	r4, r2
   38376:	0020      	movs	r0, r4
   38378:	bd30      	pop	{r4, r5, pc}
   3837a:	4b09      	ldr	r3, [pc, #36]	; (383a0 <__aeabi_d2iz+0x60>)
   3837c:	18cc      	adds	r4, r1, r3
   3837e:	e7fa      	b.n	38376 <__aeabi_d2iz+0x36>
   38380:	4c08      	ldr	r4, [pc, #32]	; (383a4 <__aeabi_d2iz+0x64>)
   38382:	40e8      	lsrs	r0, r5
   38384:	46a4      	mov	ip, r4
   38386:	4463      	add	r3, ip
   38388:	409a      	lsls	r2, r3
   3838a:	4302      	orrs	r2, r0
   3838c:	e7ef      	b.n	3836e <__aeabi_d2iz+0x2e>
   3838e:	46c0      	nop			; (mov r8, r8)
   38390:	000003fe 	.word	0x000003fe
   38394:	0000041d 	.word	0x0000041d
   38398:	00000433 	.word	0x00000433
   3839c:	00000413 	.word	0x00000413
   383a0:	7fffffff 	.word	0x7fffffff
   383a4:	fffffbed 	.word	0xfffffbed

000383a8 <__aeabi_ui2d>:
   383a8:	b510      	push	{r4, lr}
   383aa:	1e04      	subs	r4, r0, #0
   383ac:	d028      	beq.n	38400 <__aeabi_ui2d+0x58>
   383ae:	f000 f833 	bl	38418 <__clzsi2>
   383b2:	4b15      	ldr	r3, [pc, #84]	; (38408 <__aeabi_ui2d+0x60>)
   383b4:	4a15      	ldr	r2, [pc, #84]	; (3840c <__aeabi_ui2d+0x64>)
   383b6:	1a1b      	subs	r3, r3, r0
   383b8:	1ad2      	subs	r2, r2, r3
   383ba:	2a1f      	cmp	r2, #31
   383bc:	dd15      	ble.n	383ea <__aeabi_ui2d+0x42>
   383be:	4a14      	ldr	r2, [pc, #80]	; (38410 <__aeabi_ui2d+0x68>)
   383c0:	1ad2      	subs	r2, r2, r3
   383c2:	4094      	lsls	r4, r2
   383c4:	2200      	movs	r2, #0
   383c6:	0324      	lsls	r4, r4, #12
   383c8:	055b      	lsls	r3, r3, #21
   383ca:	0b24      	lsrs	r4, r4, #12
   383cc:	0d5b      	lsrs	r3, r3, #21
   383ce:	2100      	movs	r1, #0
   383d0:	0010      	movs	r0, r2
   383d2:	0324      	lsls	r4, r4, #12
   383d4:	0d0a      	lsrs	r2, r1, #20
   383d6:	0b24      	lsrs	r4, r4, #12
   383d8:	0512      	lsls	r2, r2, #20
   383da:	4322      	orrs	r2, r4
   383dc:	4c0d      	ldr	r4, [pc, #52]	; (38414 <__aeabi_ui2d+0x6c>)
   383de:	051b      	lsls	r3, r3, #20
   383e0:	4022      	ands	r2, r4
   383e2:	4313      	orrs	r3, r2
   383e4:	005b      	lsls	r3, r3, #1
   383e6:	0859      	lsrs	r1, r3, #1
   383e8:	bd10      	pop	{r4, pc}
   383ea:	0021      	movs	r1, r4
   383ec:	4091      	lsls	r1, r2
   383ee:	000a      	movs	r2, r1
   383f0:	210b      	movs	r1, #11
   383f2:	1a08      	subs	r0, r1, r0
   383f4:	40c4      	lsrs	r4, r0
   383f6:	055b      	lsls	r3, r3, #21
   383f8:	0324      	lsls	r4, r4, #12
   383fa:	0b24      	lsrs	r4, r4, #12
   383fc:	0d5b      	lsrs	r3, r3, #21
   383fe:	e7e6      	b.n	383ce <__aeabi_ui2d+0x26>
   38400:	2300      	movs	r3, #0
   38402:	2400      	movs	r4, #0
   38404:	2200      	movs	r2, #0
   38406:	e7e2      	b.n	383ce <__aeabi_ui2d+0x26>
   38408:	0000041e 	.word	0x0000041e
   3840c:	00000433 	.word	0x00000433
   38410:	00000413 	.word	0x00000413
   38414:	800fffff 	.word	0x800fffff

00038418 <__clzsi2>:
   38418:	211c      	movs	r1, #28
   3841a:	2301      	movs	r3, #1
   3841c:	041b      	lsls	r3, r3, #16
   3841e:	4298      	cmp	r0, r3
   38420:	d301      	bcc.n	38426 <__clzsi2+0xe>
   38422:	0c00      	lsrs	r0, r0, #16
   38424:	3910      	subs	r1, #16
   38426:	0a1b      	lsrs	r3, r3, #8
   38428:	4298      	cmp	r0, r3
   3842a:	d301      	bcc.n	38430 <__clzsi2+0x18>
   3842c:	0a00      	lsrs	r0, r0, #8
   3842e:	3908      	subs	r1, #8
   38430:	091b      	lsrs	r3, r3, #4
   38432:	4298      	cmp	r0, r3
   38434:	d301      	bcc.n	3843a <__clzsi2+0x22>
   38436:	0900      	lsrs	r0, r0, #4
   38438:	3904      	subs	r1, #4
   3843a:	a202      	add	r2, pc, #8	; (adr r2, 38444 <__clzsi2+0x2c>)
   3843c:	5c10      	ldrb	r0, [r2, r0]
   3843e:	1840      	adds	r0, r0, r1
   38440:	4770      	bx	lr
   38442:	46c0      	nop			; (mov r8, r8)
   38444:	02020304 	.word	0x02020304
   38448:	01010101 	.word	0x01010101
	...

00038454 <atoi>:
   38454:	b510      	push	{r4, lr}
   38456:	220a      	movs	r2, #10
   38458:	2100      	movs	r1, #0
   3845a:	f000 fb0d 	bl	38a78 <strtol>
   3845e:	bd10      	pop	{r4, pc}

00038460 <__libc_init_array>:
   38460:	b570      	push	{r4, r5, r6, lr}
   38462:	2600      	movs	r6, #0
   38464:	4d0c      	ldr	r5, [pc, #48]	; (38498 <__libc_init_array+0x38>)
   38466:	4c0d      	ldr	r4, [pc, #52]	; (3849c <__libc_init_array+0x3c>)
   38468:	1b64      	subs	r4, r4, r5
   3846a:	10a4      	asrs	r4, r4, #2
   3846c:	42a6      	cmp	r6, r4
   3846e:	d109      	bne.n	38484 <__libc_init_array+0x24>
   38470:	2600      	movs	r6, #0
   38472:	f006 fa5f 	bl	3e934 <_init>
   38476:	4d0a      	ldr	r5, [pc, #40]	; (384a0 <__libc_init_array+0x40>)
   38478:	4c0a      	ldr	r4, [pc, #40]	; (384a4 <__libc_init_array+0x44>)
   3847a:	1b64      	subs	r4, r4, r5
   3847c:	10a4      	asrs	r4, r4, #2
   3847e:	42a6      	cmp	r6, r4
   38480:	d105      	bne.n	3848e <__libc_init_array+0x2e>
   38482:	bd70      	pop	{r4, r5, r6, pc}
   38484:	00b3      	lsls	r3, r6, #2
   38486:	58eb      	ldr	r3, [r5, r3]
   38488:	4798      	blx	r3
   3848a:	3601      	adds	r6, #1
   3848c:	e7ee      	b.n	3846c <__libc_init_array+0xc>
   3848e:	00b3      	lsls	r3, r6, #2
   38490:	58eb      	ldr	r3, [r5, r3]
   38492:	4798      	blx	r3
   38494:	3601      	adds	r6, #1
   38496:	e7f2      	b.n	3847e <__libc_init_array+0x1e>
   38498:	0003e940 	.word	0x0003e940
   3849c:	0003e940 	.word	0x0003e940
   384a0:	0003e940 	.word	0x0003e940
   384a4:	0003e944 	.word	0x0003e944

000384a8 <malloc>:
   384a8:	b510      	push	{r4, lr}
   384aa:	4b03      	ldr	r3, [pc, #12]	; (384b8 <malloc+0x10>)
   384ac:	0001      	movs	r1, r0
   384ae:	6818      	ldr	r0, [r3, #0]
   384b0:	f000 f87c 	bl	385ac <_malloc_r>
   384b4:	bd10      	pop	{r4, pc}
   384b6:	46c0      	nop			; (mov r8, r8)
   384b8:	200001ac 	.word	0x200001ac

000384bc <free>:
   384bc:	b510      	push	{r4, lr}
   384be:	4b03      	ldr	r3, [pc, #12]	; (384cc <free+0x10>)
   384c0:	0001      	movs	r1, r0
   384c2:	6818      	ldr	r0, [r3, #0]
   384c4:	f000 f828 	bl	38518 <_free_r>
   384c8:	bd10      	pop	{r4, pc}
   384ca:	46c0      	nop			; (mov r8, r8)
   384cc:	200001ac 	.word	0x200001ac

000384d0 <memcpy>:
   384d0:	2300      	movs	r3, #0
   384d2:	b510      	push	{r4, lr}
   384d4:	429a      	cmp	r2, r3
   384d6:	d100      	bne.n	384da <memcpy+0xa>
   384d8:	bd10      	pop	{r4, pc}
   384da:	5ccc      	ldrb	r4, [r1, r3]
   384dc:	54c4      	strb	r4, [r0, r3]
   384de:	3301      	adds	r3, #1
   384e0:	e7f8      	b.n	384d4 <memcpy+0x4>

000384e2 <memmove>:
   384e2:	b510      	push	{r4, lr}
   384e4:	4288      	cmp	r0, r1
   384e6:	d902      	bls.n	384ee <memmove+0xc>
   384e8:	188b      	adds	r3, r1, r2
   384ea:	4298      	cmp	r0, r3
   384ec:	d308      	bcc.n	38500 <memmove+0x1e>
   384ee:	2300      	movs	r3, #0
   384f0:	429a      	cmp	r2, r3
   384f2:	d007      	beq.n	38504 <memmove+0x22>
   384f4:	5ccc      	ldrb	r4, [r1, r3]
   384f6:	54c4      	strb	r4, [r0, r3]
   384f8:	3301      	adds	r3, #1
   384fa:	e7f9      	b.n	384f0 <memmove+0xe>
   384fc:	5c8b      	ldrb	r3, [r1, r2]
   384fe:	5483      	strb	r3, [r0, r2]
   38500:	3a01      	subs	r2, #1
   38502:	d2fb      	bcs.n	384fc <memmove+0x1a>
   38504:	bd10      	pop	{r4, pc}

00038506 <memset>:
   38506:	0003      	movs	r3, r0
   38508:	1882      	adds	r2, r0, r2
   3850a:	4293      	cmp	r3, r2
   3850c:	d100      	bne.n	38510 <memset+0xa>
   3850e:	4770      	bx	lr
   38510:	7019      	strb	r1, [r3, #0]
   38512:	3301      	adds	r3, #1
   38514:	e7f9      	b.n	3850a <memset+0x4>
	...

00038518 <_free_r>:
   38518:	b570      	push	{r4, r5, r6, lr}
   3851a:	0005      	movs	r5, r0
   3851c:	2900      	cmp	r1, #0
   3851e:	d010      	beq.n	38542 <_free_r+0x2a>
   38520:	1f0c      	subs	r4, r1, #4
   38522:	6823      	ldr	r3, [r4, #0]
   38524:	2b00      	cmp	r3, #0
   38526:	da00      	bge.n	3852a <_free_r+0x12>
   38528:	18e4      	adds	r4, r4, r3
   3852a:	0028      	movs	r0, r5
   3852c:	f000 fdd8 	bl	390e0 <__malloc_lock>
   38530:	4a1d      	ldr	r2, [pc, #116]	; (385a8 <_free_r+0x90>)
   38532:	6813      	ldr	r3, [r2, #0]
   38534:	2b00      	cmp	r3, #0
   38536:	d105      	bne.n	38544 <_free_r+0x2c>
   38538:	6063      	str	r3, [r4, #4]
   3853a:	6014      	str	r4, [r2, #0]
   3853c:	0028      	movs	r0, r5
   3853e:	f000 fdd0 	bl	390e2 <__malloc_unlock>
   38542:	bd70      	pop	{r4, r5, r6, pc}
   38544:	42a3      	cmp	r3, r4
   38546:	d909      	bls.n	3855c <_free_r+0x44>
   38548:	6821      	ldr	r1, [r4, #0]
   3854a:	1860      	adds	r0, r4, r1
   3854c:	4283      	cmp	r3, r0
   3854e:	d1f3      	bne.n	38538 <_free_r+0x20>
   38550:	6818      	ldr	r0, [r3, #0]
   38552:	685b      	ldr	r3, [r3, #4]
   38554:	1841      	adds	r1, r0, r1
   38556:	6021      	str	r1, [r4, #0]
   38558:	e7ee      	b.n	38538 <_free_r+0x20>
   3855a:	0013      	movs	r3, r2
   3855c:	685a      	ldr	r2, [r3, #4]
   3855e:	2a00      	cmp	r2, #0
   38560:	d001      	beq.n	38566 <_free_r+0x4e>
   38562:	42a2      	cmp	r2, r4
   38564:	d9f9      	bls.n	3855a <_free_r+0x42>
   38566:	6819      	ldr	r1, [r3, #0]
   38568:	1858      	adds	r0, r3, r1
   3856a:	42a0      	cmp	r0, r4
   3856c:	d10b      	bne.n	38586 <_free_r+0x6e>
   3856e:	6820      	ldr	r0, [r4, #0]
   38570:	1809      	adds	r1, r1, r0
   38572:	1858      	adds	r0, r3, r1
   38574:	6019      	str	r1, [r3, #0]
   38576:	4282      	cmp	r2, r0
   38578:	d1e0      	bne.n	3853c <_free_r+0x24>
   3857a:	6810      	ldr	r0, [r2, #0]
   3857c:	6852      	ldr	r2, [r2, #4]
   3857e:	1841      	adds	r1, r0, r1
   38580:	6019      	str	r1, [r3, #0]
   38582:	605a      	str	r2, [r3, #4]
   38584:	e7da      	b.n	3853c <_free_r+0x24>
   38586:	42a0      	cmp	r0, r4
   38588:	d902      	bls.n	38590 <_free_r+0x78>
   3858a:	230c      	movs	r3, #12
   3858c:	602b      	str	r3, [r5, #0]
   3858e:	e7d5      	b.n	3853c <_free_r+0x24>
   38590:	6821      	ldr	r1, [r4, #0]
   38592:	1860      	adds	r0, r4, r1
   38594:	4282      	cmp	r2, r0
   38596:	d103      	bne.n	385a0 <_free_r+0x88>
   38598:	6810      	ldr	r0, [r2, #0]
   3859a:	6852      	ldr	r2, [r2, #4]
   3859c:	1841      	adds	r1, r0, r1
   3859e:	6021      	str	r1, [r4, #0]
   385a0:	6062      	str	r2, [r4, #4]
   385a2:	605c      	str	r4, [r3, #4]
   385a4:	e7ca      	b.n	3853c <_free_r+0x24>
   385a6:	46c0      	nop			; (mov r8, r8)
   385a8:	20004648 	.word	0x20004648

000385ac <_malloc_r>:
   385ac:	2303      	movs	r3, #3
   385ae:	b570      	push	{r4, r5, r6, lr}
   385b0:	1ccd      	adds	r5, r1, #3
   385b2:	439d      	bics	r5, r3
   385b4:	3508      	adds	r5, #8
   385b6:	0006      	movs	r6, r0
   385b8:	2d0c      	cmp	r5, #12
   385ba:	d21e      	bcs.n	385fa <_malloc_r+0x4e>
   385bc:	250c      	movs	r5, #12
   385be:	42a9      	cmp	r1, r5
   385c0:	d81d      	bhi.n	385fe <_malloc_r+0x52>
   385c2:	0030      	movs	r0, r6
   385c4:	f000 fd8c 	bl	390e0 <__malloc_lock>
   385c8:	4a25      	ldr	r2, [pc, #148]	; (38660 <_malloc_r+0xb4>)
   385ca:	6814      	ldr	r4, [r2, #0]
   385cc:	0021      	movs	r1, r4
   385ce:	2900      	cmp	r1, #0
   385d0:	d119      	bne.n	38606 <_malloc_r+0x5a>
   385d2:	4c24      	ldr	r4, [pc, #144]	; (38664 <_malloc_r+0xb8>)
   385d4:	6823      	ldr	r3, [r4, #0]
   385d6:	2b00      	cmp	r3, #0
   385d8:	d103      	bne.n	385e2 <_malloc_r+0x36>
   385da:	0030      	movs	r0, r6
   385dc:	f000 f8ae 	bl	3873c <_sbrk_r>
   385e0:	6020      	str	r0, [r4, #0]
   385e2:	0029      	movs	r1, r5
   385e4:	0030      	movs	r0, r6
   385e6:	f000 f8a9 	bl	3873c <_sbrk_r>
   385ea:	1c43      	adds	r3, r0, #1
   385ec:	d12c      	bne.n	38648 <_malloc_r+0x9c>
   385ee:	230c      	movs	r3, #12
   385f0:	0030      	movs	r0, r6
   385f2:	6033      	str	r3, [r6, #0]
   385f4:	f000 fd75 	bl	390e2 <__malloc_unlock>
   385f8:	e003      	b.n	38602 <_malloc_r+0x56>
   385fa:	2d00      	cmp	r5, #0
   385fc:	dadf      	bge.n	385be <_malloc_r+0x12>
   385fe:	230c      	movs	r3, #12
   38600:	6033      	str	r3, [r6, #0]
   38602:	2000      	movs	r0, #0
   38604:	bd70      	pop	{r4, r5, r6, pc}
   38606:	680b      	ldr	r3, [r1, #0]
   38608:	1b5b      	subs	r3, r3, r5
   3860a:	d41a      	bmi.n	38642 <_malloc_r+0x96>
   3860c:	2b0b      	cmp	r3, #11
   3860e:	d903      	bls.n	38618 <_malloc_r+0x6c>
   38610:	600b      	str	r3, [r1, #0]
   38612:	18cc      	adds	r4, r1, r3
   38614:	6025      	str	r5, [r4, #0]
   38616:	e003      	b.n	38620 <_malloc_r+0x74>
   38618:	428c      	cmp	r4, r1
   3861a:	d10e      	bne.n	3863a <_malloc_r+0x8e>
   3861c:	6863      	ldr	r3, [r4, #4]
   3861e:	6013      	str	r3, [r2, #0]
   38620:	0030      	movs	r0, r6
   38622:	f000 fd5e 	bl	390e2 <__malloc_unlock>
   38626:	0020      	movs	r0, r4
   38628:	2207      	movs	r2, #7
   3862a:	300b      	adds	r0, #11
   3862c:	1d23      	adds	r3, r4, #4
   3862e:	4390      	bics	r0, r2
   38630:	1ac3      	subs	r3, r0, r3
   38632:	d0e7      	beq.n	38604 <_malloc_r+0x58>
   38634:	425a      	negs	r2, r3
   38636:	50e2      	str	r2, [r4, r3]
   38638:	e7e4      	b.n	38604 <_malloc_r+0x58>
   3863a:	684b      	ldr	r3, [r1, #4]
   3863c:	6063      	str	r3, [r4, #4]
   3863e:	000c      	movs	r4, r1
   38640:	e7ee      	b.n	38620 <_malloc_r+0x74>
   38642:	000c      	movs	r4, r1
   38644:	6849      	ldr	r1, [r1, #4]
   38646:	e7c2      	b.n	385ce <_malloc_r+0x22>
   38648:	2303      	movs	r3, #3
   3864a:	1cc4      	adds	r4, r0, #3
   3864c:	439c      	bics	r4, r3
   3864e:	42a0      	cmp	r0, r4
   38650:	d0e0      	beq.n	38614 <_malloc_r+0x68>
   38652:	1a21      	subs	r1, r4, r0
   38654:	0030      	movs	r0, r6
   38656:	f000 f871 	bl	3873c <_sbrk_r>
   3865a:	1c43      	adds	r3, r0, #1
   3865c:	d1da      	bne.n	38614 <_malloc_r+0x68>
   3865e:	e7c6      	b.n	385ee <_malloc_r+0x42>
   38660:	20004648 	.word	0x20004648
   38664:	2000464c 	.word	0x2000464c

00038668 <_puts_r>:
   38668:	b570      	push	{r4, r5, r6, lr}
   3866a:	0005      	movs	r5, r0
   3866c:	000e      	movs	r6, r1
   3866e:	2800      	cmp	r0, #0
   38670:	d004      	beq.n	3867c <_puts_r+0x14>
   38672:	6983      	ldr	r3, [r0, #24]
   38674:	2b00      	cmp	r3, #0
   38676:	d101      	bne.n	3867c <_puts_r+0x14>
   38678:	f000 fc0e 	bl	38e98 <__sinit>
   3867c:	69ab      	ldr	r3, [r5, #24]
   3867e:	68ac      	ldr	r4, [r5, #8]
   38680:	2b00      	cmp	r3, #0
   38682:	d102      	bne.n	3868a <_puts_r+0x22>
   38684:	0028      	movs	r0, r5
   38686:	f000 fc07 	bl	38e98 <__sinit>
   3868a:	4b24      	ldr	r3, [pc, #144]	; (3871c <_puts_r+0xb4>)
   3868c:	429c      	cmp	r4, r3
   3868e:	d10f      	bne.n	386b0 <_puts_r+0x48>
   38690:	686c      	ldr	r4, [r5, #4]
   38692:	89a3      	ldrh	r3, [r4, #12]
   38694:	071b      	lsls	r3, r3, #28
   38696:	d502      	bpl.n	3869e <_puts_r+0x36>
   38698:	6923      	ldr	r3, [r4, #16]
   3869a:	2b00      	cmp	r3, #0
   3869c:	d120      	bne.n	386e0 <_puts_r+0x78>
   3869e:	0021      	movs	r1, r4
   386a0:	0028      	movs	r0, r5
   386a2:	f000 fa8b 	bl	38bbc <__swsetup_r>
   386a6:	2800      	cmp	r0, #0
   386a8:	d01a      	beq.n	386e0 <_puts_r+0x78>
   386aa:	2001      	movs	r0, #1
   386ac:	4240      	negs	r0, r0
   386ae:	bd70      	pop	{r4, r5, r6, pc}
   386b0:	4b1b      	ldr	r3, [pc, #108]	; (38720 <_puts_r+0xb8>)
   386b2:	429c      	cmp	r4, r3
   386b4:	d101      	bne.n	386ba <_puts_r+0x52>
   386b6:	68ac      	ldr	r4, [r5, #8]
   386b8:	e7eb      	b.n	38692 <_puts_r+0x2a>
   386ba:	4b1a      	ldr	r3, [pc, #104]	; (38724 <_puts_r+0xbc>)
   386bc:	429c      	cmp	r4, r3
   386be:	d1e8      	bne.n	38692 <_puts_r+0x2a>
   386c0:	68ec      	ldr	r4, [r5, #12]
   386c2:	e7e6      	b.n	38692 <_puts_r+0x2a>
   386c4:	3b01      	subs	r3, #1
   386c6:	3601      	adds	r6, #1
   386c8:	60a3      	str	r3, [r4, #8]
   386ca:	2b00      	cmp	r3, #0
   386cc:	da04      	bge.n	386d8 <_puts_r+0x70>
   386ce:	69a2      	ldr	r2, [r4, #24]
   386d0:	4293      	cmp	r3, r2
   386d2:	db16      	blt.n	38702 <_puts_r+0x9a>
   386d4:	290a      	cmp	r1, #10
   386d6:	d014      	beq.n	38702 <_puts_r+0x9a>
   386d8:	6823      	ldr	r3, [r4, #0]
   386da:	1c5a      	adds	r2, r3, #1
   386dc:	6022      	str	r2, [r4, #0]
   386de:	7019      	strb	r1, [r3, #0]
   386e0:	7831      	ldrb	r1, [r6, #0]
   386e2:	68a3      	ldr	r3, [r4, #8]
   386e4:	2900      	cmp	r1, #0
   386e6:	d1ed      	bne.n	386c4 <_puts_r+0x5c>
   386e8:	3b01      	subs	r3, #1
   386ea:	60a3      	str	r3, [r4, #8]
   386ec:	2b00      	cmp	r3, #0
   386ee:	da0f      	bge.n	38710 <_puts_r+0xa8>
   386f0:	0022      	movs	r2, r4
   386f2:	310a      	adds	r1, #10
   386f4:	0028      	movs	r0, r5
   386f6:	f000 fa0b 	bl	38b10 <__swbuf_r>
   386fa:	1c43      	adds	r3, r0, #1
   386fc:	d0d5      	beq.n	386aa <_puts_r+0x42>
   386fe:	200a      	movs	r0, #10
   38700:	e7d5      	b.n	386ae <_puts_r+0x46>
   38702:	0022      	movs	r2, r4
   38704:	0028      	movs	r0, r5
   38706:	f000 fa03 	bl	38b10 <__swbuf_r>
   3870a:	1c43      	adds	r3, r0, #1
   3870c:	d1e8      	bne.n	386e0 <_puts_r+0x78>
   3870e:	e7cc      	b.n	386aa <_puts_r+0x42>
   38710:	200a      	movs	r0, #10
   38712:	6823      	ldr	r3, [r4, #0]
   38714:	1c5a      	adds	r2, r3, #1
   38716:	6022      	str	r2, [r4, #0]
   38718:	7018      	strb	r0, [r3, #0]
   3871a:	e7c8      	b.n	386ae <_puts_r+0x46>
   3871c:	0003e7b4 	.word	0x0003e7b4
   38720:	0003e7d4 	.word	0x0003e7d4
   38724:	0003e794 	.word	0x0003e794

00038728 <puts>:
   38728:	b510      	push	{r4, lr}
   3872a:	4b03      	ldr	r3, [pc, #12]	; (38738 <puts+0x10>)
   3872c:	0001      	movs	r1, r0
   3872e:	6818      	ldr	r0, [r3, #0]
   38730:	f7ff ff9a 	bl	38668 <_puts_r>
   38734:	bd10      	pop	{r4, pc}
   38736:	46c0      	nop			; (mov r8, r8)
   38738:	200001ac 	.word	0x200001ac

0003873c <_sbrk_r>:
   3873c:	2300      	movs	r3, #0
   3873e:	b570      	push	{r4, r5, r6, lr}
   38740:	4c06      	ldr	r4, [pc, #24]	; (3875c <_sbrk_r+0x20>)
   38742:	0005      	movs	r5, r0
   38744:	0008      	movs	r0, r1
   38746:	6023      	str	r3, [r4, #0]
   38748:	f7f5 fce8 	bl	2e11c <_sbrk>
   3874c:	1c43      	adds	r3, r0, #1
   3874e:	d103      	bne.n	38758 <_sbrk_r+0x1c>
   38750:	6823      	ldr	r3, [r4, #0]
   38752:	2b00      	cmp	r3, #0
   38754:	d000      	beq.n	38758 <_sbrk_r+0x1c>
   38756:	602b      	str	r3, [r5, #0]
   38758:	bd70      	pop	{r4, r5, r6, pc}
   3875a:	46c0      	nop			; (mov r8, r8)
   3875c:	20005ca4 	.word	0x20005ca4

00038760 <sniprintf>:
   38760:	b40c      	push	{r2, r3}
   38762:	b530      	push	{r4, r5, lr}
   38764:	4b16      	ldr	r3, [pc, #88]	; (387c0 <sniprintf+0x60>)
   38766:	b09d      	sub	sp, #116	; 0x74
   38768:	1e0c      	subs	r4, r1, #0
   3876a:	681d      	ldr	r5, [r3, #0]
   3876c:	da08      	bge.n	38780 <sniprintf+0x20>
   3876e:	238b      	movs	r3, #139	; 0x8b
   38770:	2001      	movs	r0, #1
   38772:	602b      	str	r3, [r5, #0]
   38774:	4240      	negs	r0, r0
   38776:	b01d      	add	sp, #116	; 0x74
   38778:	bc30      	pop	{r4, r5}
   3877a:	bc08      	pop	{r3}
   3877c:	b002      	add	sp, #8
   3877e:	4718      	bx	r3
   38780:	2382      	movs	r3, #130	; 0x82
   38782:	a902      	add	r1, sp, #8
   38784:	009b      	lsls	r3, r3, #2
   38786:	818b      	strh	r3, [r1, #12]
   38788:	2300      	movs	r3, #0
   3878a:	9002      	str	r0, [sp, #8]
   3878c:	6108      	str	r0, [r1, #16]
   3878e:	429c      	cmp	r4, r3
   38790:	d000      	beq.n	38794 <sniprintf+0x34>
   38792:	1e63      	subs	r3, r4, #1
   38794:	608b      	str	r3, [r1, #8]
   38796:	614b      	str	r3, [r1, #20]
   38798:	2301      	movs	r3, #1
   3879a:	425b      	negs	r3, r3
   3879c:	81cb      	strh	r3, [r1, #14]
   3879e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   387a0:	ab21      	add	r3, sp, #132	; 0x84
   387a2:	0028      	movs	r0, r5
   387a4:	9301      	str	r3, [sp, #4]
   387a6:	f000 fcff 	bl	391a8 <_svfiprintf_r>
   387aa:	1c43      	adds	r3, r0, #1
   387ac:	da01      	bge.n	387b2 <sniprintf+0x52>
   387ae:	238b      	movs	r3, #139	; 0x8b
   387b0:	602b      	str	r3, [r5, #0]
   387b2:	2c00      	cmp	r4, #0
   387b4:	d0df      	beq.n	38776 <sniprintf+0x16>
   387b6:	2300      	movs	r3, #0
   387b8:	9a02      	ldr	r2, [sp, #8]
   387ba:	7013      	strb	r3, [r2, #0]
   387bc:	e7db      	b.n	38776 <sniprintf+0x16>
   387be:	46c0      	nop			; (mov r8, r8)
   387c0:	200001ac 	.word	0x200001ac

000387c4 <siprintf>:
   387c4:	b40e      	push	{r1, r2, r3}
   387c6:	b510      	push	{r4, lr}
   387c8:	b09d      	sub	sp, #116	; 0x74
   387ca:	a902      	add	r1, sp, #8
   387cc:	9002      	str	r0, [sp, #8]
   387ce:	6108      	str	r0, [r1, #16]
   387d0:	480b      	ldr	r0, [pc, #44]	; (38800 <siprintf+0x3c>)
   387d2:	2482      	movs	r4, #130	; 0x82
   387d4:	6088      	str	r0, [r1, #8]
   387d6:	6148      	str	r0, [r1, #20]
   387d8:	2001      	movs	r0, #1
   387da:	4240      	negs	r0, r0
   387dc:	ab1f      	add	r3, sp, #124	; 0x7c
   387de:	81c8      	strh	r0, [r1, #14]
   387e0:	4808      	ldr	r0, [pc, #32]	; (38804 <siprintf+0x40>)
   387e2:	cb04      	ldmia	r3!, {r2}
   387e4:	00a4      	lsls	r4, r4, #2
   387e6:	6800      	ldr	r0, [r0, #0]
   387e8:	9301      	str	r3, [sp, #4]
   387ea:	818c      	strh	r4, [r1, #12]
   387ec:	f000 fcdc 	bl	391a8 <_svfiprintf_r>
   387f0:	2300      	movs	r3, #0
   387f2:	9a02      	ldr	r2, [sp, #8]
   387f4:	7013      	strb	r3, [r2, #0]
   387f6:	b01d      	add	sp, #116	; 0x74
   387f8:	bc10      	pop	{r4}
   387fa:	bc08      	pop	{r3}
   387fc:	b003      	add	sp, #12
   387fe:	4718      	bx	r3
   38800:	7fffffff 	.word	0x7fffffff
   38804:	200001ac 	.word	0x200001ac

00038808 <strcasecmp>:
   38808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3880a:	0007      	movs	r7, r0
   3880c:	000e      	movs	r6, r1
   3880e:	783c      	ldrb	r4, [r7, #0]
   38810:	f000 fbda 	bl	38fc8 <__locale_ctype_ptr>
   38814:	2203      	movs	r2, #3
   38816:	1900      	adds	r0, r0, r4
   38818:	7843      	ldrb	r3, [r0, #1]
   3881a:	4013      	ands	r3, r2
   3881c:	2b01      	cmp	r3, #1
   3881e:	d100      	bne.n	38822 <strcasecmp+0x1a>
   38820:	3420      	adds	r4, #32
   38822:	7835      	ldrb	r5, [r6, #0]
   38824:	f000 fbd0 	bl	38fc8 <__locale_ctype_ptr>
   38828:	2203      	movs	r2, #3
   3882a:	1940      	adds	r0, r0, r5
   3882c:	7843      	ldrb	r3, [r0, #1]
   3882e:	4013      	ands	r3, r2
   38830:	2b01      	cmp	r3, #1
   38832:	d100      	bne.n	38836 <strcasecmp+0x2e>
   38834:	3520      	adds	r5, #32
   38836:	1b60      	subs	r0, r4, r5
   38838:	d103      	bne.n	38842 <strcasecmp+0x3a>
   3883a:	3701      	adds	r7, #1
   3883c:	3601      	adds	r6, #1
   3883e:	2d00      	cmp	r5, #0
   38840:	d1e5      	bne.n	3880e <strcasecmp+0x6>
   38842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00038844 <strchr>:
   38844:	b2c9      	uxtb	r1, r1
   38846:	7803      	ldrb	r3, [r0, #0]
   38848:	2b00      	cmp	r3, #0
   3884a:	d004      	beq.n	38856 <strchr+0x12>
   3884c:	4299      	cmp	r1, r3
   3884e:	d100      	bne.n	38852 <strchr+0xe>
   38850:	4770      	bx	lr
   38852:	3001      	adds	r0, #1
   38854:	e7f7      	b.n	38846 <strchr+0x2>
   38856:	424b      	negs	r3, r1
   38858:	4159      	adcs	r1, r3
   3885a:	4249      	negs	r1, r1
   3885c:	4008      	ands	r0, r1
   3885e:	e7f7      	b.n	38850 <strchr+0xc>

00038860 <strcmp>:
   38860:	7802      	ldrb	r2, [r0, #0]
   38862:	780b      	ldrb	r3, [r1, #0]
   38864:	2a00      	cmp	r2, #0
   38866:	d003      	beq.n	38870 <strcmp+0x10>
   38868:	3001      	adds	r0, #1
   3886a:	3101      	adds	r1, #1
   3886c:	429a      	cmp	r2, r3
   3886e:	d0f7      	beq.n	38860 <strcmp>
   38870:	1ad0      	subs	r0, r2, r3
   38872:	4770      	bx	lr

00038874 <strcpy>:
   38874:	1c03      	adds	r3, r0, #0
   38876:	780a      	ldrb	r2, [r1, #0]
   38878:	3101      	adds	r1, #1
   3887a:	701a      	strb	r2, [r3, #0]
   3887c:	3301      	adds	r3, #1
   3887e:	2a00      	cmp	r2, #0
   38880:	d1f9      	bne.n	38876 <strcpy+0x2>
   38882:	4770      	bx	lr

00038884 <strdup>:
   38884:	b510      	push	{r4, lr}
   38886:	4b03      	ldr	r3, [pc, #12]	; (38894 <strdup+0x10>)
   38888:	0001      	movs	r1, r0
   3888a:	6818      	ldr	r0, [r3, #0]
   3888c:	f000 f804 	bl	38898 <_strdup_r>
   38890:	bd10      	pop	{r4, pc}
   38892:	46c0      	nop			; (mov r8, r8)
   38894:	200001ac 	.word	0x200001ac

00038898 <_strdup_r>:
   38898:	b570      	push	{r4, r5, r6, lr}
   3889a:	0005      	movs	r5, r0
   3889c:	0008      	movs	r0, r1
   3889e:	000e      	movs	r6, r1
   388a0:	f000 f80d 	bl	388be <strlen>
   388a4:	1c44      	adds	r4, r0, #1
   388a6:	0021      	movs	r1, r4
   388a8:	0028      	movs	r0, r5
   388aa:	f7ff fe7f 	bl	385ac <_malloc_r>
   388ae:	1e05      	subs	r5, r0, #0
   388b0:	d003      	beq.n	388ba <_strdup_r+0x22>
   388b2:	0022      	movs	r2, r4
   388b4:	0031      	movs	r1, r6
   388b6:	f7ff fe0b 	bl	384d0 <memcpy>
   388ba:	0028      	movs	r0, r5
   388bc:	bd70      	pop	{r4, r5, r6, pc}

000388be <strlen>:
   388be:	2300      	movs	r3, #0
   388c0:	5cc2      	ldrb	r2, [r0, r3]
   388c2:	3301      	adds	r3, #1
   388c4:	2a00      	cmp	r2, #0
   388c6:	d1fb      	bne.n	388c0 <strlen+0x2>
   388c8:	1e58      	subs	r0, r3, #1
   388ca:	4770      	bx	lr

000388cc <strncmp>:
   388cc:	2300      	movs	r3, #0
   388ce:	b530      	push	{r4, r5, lr}
   388d0:	429a      	cmp	r2, r3
   388d2:	d00a      	beq.n	388ea <strncmp+0x1e>
   388d4:	3a01      	subs	r2, #1
   388d6:	5cc4      	ldrb	r4, [r0, r3]
   388d8:	5ccd      	ldrb	r5, [r1, r3]
   388da:	42ac      	cmp	r4, r5
   388dc:	d104      	bne.n	388e8 <strncmp+0x1c>
   388de:	429a      	cmp	r2, r3
   388e0:	d002      	beq.n	388e8 <strncmp+0x1c>
   388e2:	3301      	adds	r3, #1
   388e4:	2c00      	cmp	r4, #0
   388e6:	d1f6      	bne.n	388d6 <strncmp+0xa>
   388e8:	1b63      	subs	r3, r4, r5
   388ea:	0018      	movs	r0, r3
   388ec:	bd30      	pop	{r4, r5, pc}

000388ee <strncpy>:
   388ee:	b570      	push	{r4, r5, r6, lr}
   388f0:	0004      	movs	r4, r0
   388f2:	2a00      	cmp	r2, #0
   388f4:	d100      	bne.n	388f8 <strncpy+0xa>
   388f6:	bd70      	pop	{r4, r5, r6, pc}
   388f8:	780d      	ldrb	r5, [r1, #0]
   388fa:	1e56      	subs	r6, r2, #1
   388fc:	1c63      	adds	r3, r4, #1
   388fe:	7025      	strb	r5, [r4, #0]
   38900:	3101      	adds	r1, #1
   38902:	2d00      	cmp	r5, #0
   38904:	d105      	bne.n	38912 <strncpy+0x24>
   38906:	18a4      	adds	r4, r4, r2
   38908:	429c      	cmp	r4, r3
   3890a:	d0f4      	beq.n	388f6 <strncpy+0x8>
   3890c:	701d      	strb	r5, [r3, #0]
   3890e:	3301      	adds	r3, #1
   38910:	e7fa      	b.n	38908 <strncpy+0x1a>
   38912:	001c      	movs	r4, r3
   38914:	0032      	movs	r2, r6
   38916:	e7ec      	b.n	388f2 <strncpy+0x4>

00038918 <strrchr>:
   38918:	b570      	push	{r4, r5, r6, lr}
   3891a:	000d      	movs	r5, r1
   3891c:	2400      	movs	r4, #0
   3891e:	2900      	cmp	r1, #0
   38920:	d105      	bne.n	3892e <strrchr+0x16>
   38922:	f7ff ff8f 	bl	38844 <strchr>
   38926:	0004      	movs	r4, r0
   38928:	e006      	b.n	38938 <strrchr+0x20>
   3892a:	001c      	movs	r4, r3
   3892c:	1c58      	adds	r0, r3, #1
   3892e:	0029      	movs	r1, r5
   38930:	f7ff ff88 	bl	38844 <strchr>
   38934:	1e03      	subs	r3, r0, #0
   38936:	d1f8      	bne.n	3892a <strrchr+0x12>
   38938:	0020      	movs	r0, r4
   3893a:	bd70      	pop	{r4, r5, r6, pc}

0003893c <strstr>:
   3893c:	b510      	push	{r4, lr}
   3893e:	0002      	movs	r2, r0
   38940:	7800      	ldrb	r0, [r0, #0]
   38942:	2800      	cmp	r0, #0
   38944:	d104      	bne.n	38950 <strstr+0x14>
   38946:	7809      	ldrb	r1, [r1, #0]
   38948:	2900      	cmp	r1, #0
   3894a:	d00d      	beq.n	38968 <strstr+0x2c>
   3894c:	bd10      	pop	{r4, pc}
   3894e:	3201      	adds	r2, #1
   38950:	7810      	ldrb	r0, [r2, #0]
   38952:	2800      	cmp	r0, #0
   38954:	d0fa      	beq.n	3894c <strstr+0x10>
   38956:	2300      	movs	r3, #0
   38958:	5cc8      	ldrb	r0, [r1, r3]
   3895a:	2800      	cmp	r0, #0
   3895c:	d004      	beq.n	38968 <strstr+0x2c>
   3895e:	5cd4      	ldrb	r4, [r2, r3]
   38960:	4284      	cmp	r4, r0
   38962:	d1f4      	bne.n	3894e <strstr+0x12>
   38964:	3301      	adds	r3, #1
   38966:	e7f7      	b.n	38958 <strstr+0x1c>
   38968:	0010      	movs	r0, r2
   3896a:	e7ef      	b.n	3894c <strstr+0x10>

0003896c <_strtol_l.isra.0>:
   3896c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3896e:	001f      	movs	r7, r3
   38970:	000e      	movs	r6, r1
   38972:	b087      	sub	sp, #28
   38974:	9005      	str	r0, [sp, #20]
   38976:	9103      	str	r1, [sp, #12]
   38978:	9202      	str	r2, [sp, #8]
   3897a:	980c      	ldr	r0, [sp, #48]	; 0x30
   3897c:	7834      	ldrb	r4, [r6, #0]
   3897e:	f000 fb20 	bl	38fc2 <__locale_ctype_ptr_l>
   38982:	2208      	movs	r2, #8
   38984:	1900      	adds	r0, r0, r4
   38986:	7843      	ldrb	r3, [r0, #1]
   38988:	1c75      	adds	r5, r6, #1
   3898a:	4013      	ands	r3, r2
   3898c:	d10c      	bne.n	389a8 <_strtol_l.isra.0+0x3c>
   3898e:	2c2d      	cmp	r4, #45	; 0x2d
   38990:	d10c      	bne.n	389ac <_strtol_l.isra.0+0x40>
   38992:	3301      	adds	r3, #1
   38994:	782c      	ldrb	r4, [r5, #0]
   38996:	9301      	str	r3, [sp, #4]
   38998:	1cb5      	adds	r5, r6, #2
   3899a:	2f00      	cmp	r7, #0
   3899c:	d00c      	beq.n	389b8 <_strtol_l.isra.0+0x4c>
   3899e:	2f10      	cmp	r7, #16
   389a0:	d114      	bne.n	389cc <_strtol_l.isra.0+0x60>
   389a2:	2c30      	cmp	r4, #48	; 0x30
   389a4:	d00a      	beq.n	389bc <_strtol_l.isra.0+0x50>
   389a6:	e011      	b.n	389cc <_strtol_l.isra.0+0x60>
   389a8:	002e      	movs	r6, r5
   389aa:	e7e6      	b.n	3897a <_strtol_l.isra.0+0xe>
   389ac:	9301      	str	r3, [sp, #4]
   389ae:	2c2b      	cmp	r4, #43	; 0x2b
   389b0:	d1f3      	bne.n	3899a <_strtol_l.isra.0+0x2e>
   389b2:	782c      	ldrb	r4, [r5, #0]
   389b4:	1cb5      	adds	r5, r6, #2
   389b6:	e7f0      	b.n	3899a <_strtol_l.isra.0+0x2e>
   389b8:	2c30      	cmp	r4, #48	; 0x30
   389ba:	d12f      	bne.n	38a1c <_strtol_l.isra.0+0xb0>
   389bc:	2220      	movs	r2, #32
   389be:	782b      	ldrb	r3, [r5, #0]
   389c0:	4393      	bics	r3, r2
   389c2:	2b58      	cmp	r3, #88	; 0x58
   389c4:	d151      	bne.n	38a6a <_strtol_l.isra.0+0xfe>
   389c6:	2710      	movs	r7, #16
   389c8:	786c      	ldrb	r4, [r5, #1]
   389ca:	3502      	adds	r5, #2
   389cc:	9b01      	ldr	r3, [sp, #4]
   389ce:	4a29      	ldr	r2, [pc, #164]	; (38a74 <_strtol_l.isra.0+0x108>)
   389d0:	0039      	movs	r1, r7
   389d2:	189e      	adds	r6, r3, r2
   389d4:	0030      	movs	r0, r6
   389d6:	f7fd f891 	bl	35afc <__aeabi_uidivmod>
   389da:	0030      	movs	r0, r6
   389dc:	9104      	str	r1, [sp, #16]
   389de:	0039      	movs	r1, r7
   389e0:	f7fd f806 	bl	359f0 <__udivsi3>
   389e4:	2101      	movs	r1, #1
   389e6:	2300      	movs	r3, #0
   389e8:	4249      	negs	r1, r1
   389ea:	0002      	movs	r2, r0
   389ec:	468c      	mov	ip, r1
   389ee:	0018      	movs	r0, r3
   389f0:	0021      	movs	r1, r4
   389f2:	3930      	subs	r1, #48	; 0x30
   389f4:	2909      	cmp	r1, #9
   389f6:	d813      	bhi.n	38a20 <_strtol_l.isra.0+0xb4>
   389f8:	000c      	movs	r4, r1
   389fa:	42a7      	cmp	r7, r4
   389fc:	dd1c      	ble.n	38a38 <_strtol_l.isra.0+0xcc>
   389fe:	1c59      	adds	r1, r3, #1
   38a00:	d009      	beq.n	38a16 <_strtol_l.isra.0+0xaa>
   38a02:	4663      	mov	r3, ip
   38a04:	4282      	cmp	r2, r0
   38a06:	d306      	bcc.n	38a16 <_strtol_l.isra.0+0xaa>
   38a08:	d102      	bne.n	38a10 <_strtol_l.isra.0+0xa4>
   38a0a:	9904      	ldr	r1, [sp, #16]
   38a0c:	42a1      	cmp	r1, r4
   38a0e:	db02      	blt.n	38a16 <_strtol_l.isra.0+0xaa>
   38a10:	2301      	movs	r3, #1
   38a12:	4378      	muls	r0, r7
   38a14:	1820      	adds	r0, r4, r0
   38a16:	782c      	ldrb	r4, [r5, #0]
   38a18:	3501      	adds	r5, #1
   38a1a:	e7e9      	b.n	389f0 <_strtol_l.isra.0+0x84>
   38a1c:	270a      	movs	r7, #10
   38a1e:	e7d5      	b.n	389cc <_strtol_l.isra.0+0x60>
   38a20:	0021      	movs	r1, r4
   38a22:	3941      	subs	r1, #65	; 0x41
   38a24:	2919      	cmp	r1, #25
   38a26:	d801      	bhi.n	38a2c <_strtol_l.isra.0+0xc0>
   38a28:	3c37      	subs	r4, #55	; 0x37
   38a2a:	e7e6      	b.n	389fa <_strtol_l.isra.0+0x8e>
   38a2c:	0021      	movs	r1, r4
   38a2e:	3961      	subs	r1, #97	; 0x61
   38a30:	2919      	cmp	r1, #25
   38a32:	d801      	bhi.n	38a38 <_strtol_l.isra.0+0xcc>
   38a34:	3c57      	subs	r4, #87	; 0x57
   38a36:	e7e0      	b.n	389fa <_strtol_l.isra.0+0x8e>
   38a38:	1c5a      	adds	r2, r3, #1
   38a3a:	d108      	bne.n	38a4e <_strtol_l.isra.0+0xe2>
   38a3c:	9a05      	ldr	r2, [sp, #20]
   38a3e:	3323      	adds	r3, #35	; 0x23
   38a40:	6013      	str	r3, [r2, #0]
   38a42:	9b02      	ldr	r3, [sp, #8]
   38a44:	0030      	movs	r0, r6
   38a46:	2b00      	cmp	r3, #0
   38a48:	d10b      	bne.n	38a62 <_strtol_l.isra.0+0xf6>
   38a4a:	b007      	add	sp, #28
   38a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   38a4e:	9a01      	ldr	r2, [sp, #4]
   38a50:	2a00      	cmp	r2, #0
   38a52:	d000      	beq.n	38a56 <_strtol_l.isra.0+0xea>
   38a54:	4240      	negs	r0, r0
   38a56:	9a02      	ldr	r2, [sp, #8]
   38a58:	2a00      	cmp	r2, #0
   38a5a:	d0f6      	beq.n	38a4a <_strtol_l.isra.0+0xde>
   38a5c:	9a03      	ldr	r2, [sp, #12]
   38a5e:	2b00      	cmp	r3, #0
   38a60:	d000      	beq.n	38a64 <_strtol_l.isra.0+0xf8>
   38a62:	1e6a      	subs	r2, r5, #1
   38a64:	9b02      	ldr	r3, [sp, #8]
   38a66:	601a      	str	r2, [r3, #0]
   38a68:	e7ef      	b.n	38a4a <_strtol_l.isra.0+0xde>
   38a6a:	2430      	movs	r4, #48	; 0x30
   38a6c:	2f00      	cmp	r7, #0
   38a6e:	d1ad      	bne.n	389cc <_strtol_l.isra.0+0x60>
   38a70:	3708      	adds	r7, #8
   38a72:	e7ab      	b.n	389cc <_strtol_l.isra.0+0x60>
   38a74:	7fffffff 	.word	0x7fffffff

00038a78 <strtol>:
   38a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   38a7a:	0013      	movs	r3, r2
   38a7c:	4a06      	ldr	r2, [pc, #24]	; (38a98 <strtol+0x20>)
   38a7e:	0005      	movs	r5, r0
   38a80:	6810      	ldr	r0, [r2, #0]
   38a82:	6a04      	ldr	r4, [r0, #32]
   38a84:	2c00      	cmp	r4, #0
   38a86:	d100      	bne.n	38a8a <strtol+0x12>
   38a88:	4c04      	ldr	r4, [pc, #16]	; (38a9c <strtol+0x24>)
   38a8a:	000a      	movs	r2, r1
   38a8c:	9400      	str	r4, [sp, #0]
   38a8e:	0029      	movs	r1, r5
   38a90:	f7ff ff6c 	bl	3896c <_strtol_l.isra.0>
   38a94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   38a96:	46c0      	nop			; (mov r8, r8)
   38a98:	200001ac 	.word	0x200001ac
   38a9c:	20000210 	.word	0x20000210

00038aa0 <_vsniprintf_r>:
   38aa0:	b530      	push	{r4, r5, lr}
   38aa2:	0014      	movs	r4, r2
   38aa4:	b09b      	sub	sp, #108	; 0x6c
   38aa6:	0005      	movs	r5, r0
   38aa8:	001a      	movs	r2, r3
   38aaa:	2c00      	cmp	r4, #0
   38aac:	da05      	bge.n	38aba <_vsniprintf_r+0x1a>
   38aae:	238b      	movs	r3, #139	; 0x8b
   38ab0:	6003      	str	r3, [r0, #0]
   38ab2:	2001      	movs	r0, #1
   38ab4:	4240      	negs	r0, r0
   38ab6:	b01b      	add	sp, #108	; 0x6c
   38ab8:	bd30      	pop	{r4, r5, pc}
   38aba:	2382      	movs	r3, #130	; 0x82
   38abc:	4668      	mov	r0, sp
   38abe:	009b      	lsls	r3, r3, #2
   38ac0:	8183      	strh	r3, [r0, #12]
   38ac2:	2300      	movs	r3, #0
   38ac4:	9100      	str	r1, [sp, #0]
   38ac6:	9104      	str	r1, [sp, #16]
   38ac8:	429c      	cmp	r4, r3
   38aca:	d000      	beq.n	38ace <_vsniprintf_r+0x2e>
   38acc:	1e63      	subs	r3, r4, #1
   38ace:	9302      	str	r3, [sp, #8]
   38ad0:	9305      	str	r3, [sp, #20]
   38ad2:	2301      	movs	r3, #1
   38ad4:	4669      	mov	r1, sp
   38ad6:	425b      	negs	r3, r3
   38ad8:	81cb      	strh	r3, [r1, #14]
   38ada:	0028      	movs	r0, r5
   38adc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   38ade:	f000 fb63 	bl	391a8 <_svfiprintf_r>
   38ae2:	1c43      	adds	r3, r0, #1
   38ae4:	da01      	bge.n	38aea <_vsniprintf_r+0x4a>
   38ae6:	238b      	movs	r3, #139	; 0x8b
   38ae8:	602b      	str	r3, [r5, #0]
   38aea:	2c00      	cmp	r4, #0
   38aec:	d0e3      	beq.n	38ab6 <_vsniprintf_r+0x16>
   38aee:	2300      	movs	r3, #0
   38af0:	9a00      	ldr	r2, [sp, #0]
   38af2:	7013      	strb	r3, [r2, #0]
   38af4:	e7df      	b.n	38ab6 <_vsniprintf_r+0x16>
	...

00038af8 <vsniprintf>:
   38af8:	b507      	push	{r0, r1, r2, lr}
   38afa:	9300      	str	r3, [sp, #0]
   38afc:	0013      	movs	r3, r2
   38afe:	000a      	movs	r2, r1
   38b00:	0001      	movs	r1, r0
   38b02:	4802      	ldr	r0, [pc, #8]	; (38b0c <vsniprintf+0x14>)
   38b04:	6800      	ldr	r0, [r0, #0]
   38b06:	f7ff ffcb 	bl	38aa0 <_vsniprintf_r>
   38b0a:	bd0e      	pop	{r1, r2, r3, pc}
   38b0c:	200001ac 	.word	0x200001ac

00038b10 <__swbuf_r>:
   38b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38b12:	0005      	movs	r5, r0
   38b14:	000e      	movs	r6, r1
   38b16:	0014      	movs	r4, r2
   38b18:	2800      	cmp	r0, #0
   38b1a:	d004      	beq.n	38b26 <__swbuf_r+0x16>
   38b1c:	6983      	ldr	r3, [r0, #24]
   38b1e:	2b00      	cmp	r3, #0
   38b20:	d101      	bne.n	38b26 <__swbuf_r+0x16>
   38b22:	f000 f9b9 	bl	38e98 <__sinit>
   38b26:	4b22      	ldr	r3, [pc, #136]	; (38bb0 <__swbuf_r+0xa0>)
   38b28:	429c      	cmp	r4, r3
   38b2a:	d12d      	bne.n	38b88 <__swbuf_r+0x78>
   38b2c:	686c      	ldr	r4, [r5, #4]
   38b2e:	69a3      	ldr	r3, [r4, #24]
   38b30:	60a3      	str	r3, [r4, #8]
   38b32:	89a3      	ldrh	r3, [r4, #12]
   38b34:	071b      	lsls	r3, r3, #28
   38b36:	d531      	bpl.n	38b9c <__swbuf_r+0x8c>
   38b38:	6923      	ldr	r3, [r4, #16]
   38b3a:	2b00      	cmp	r3, #0
   38b3c:	d02e      	beq.n	38b9c <__swbuf_r+0x8c>
   38b3e:	6823      	ldr	r3, [r4, #0]
   38b40:	6922      	ldr	r2, [r4, #16]
   38b42:	b2f7      	uxtb	r7, r6
   38b44:	1a98      	subs	r0, r3, r2
   38b46:	6963      	ldr	r3, [r4, #20]
   38b48:	b2f6      	uxtb	r6, r6
   38b4a:	4298      	cmp	r0, r3
   38b4c:	db05      	blt.n	38b5a <__swbuf_r+0x4a>
   38b4e:	0021      	movs	r1, r4
   38b50:	0028      	movs	r0, r5
   38b52:	f000 f933 	bl	38dbc <_fflush_r>
   38b56:	2800      	cmp	r0, #0
   38b58:	d126      	bne.n	38ba8 <__swbuf_r+0x98>
   38b5a:	68a3      	ldr	r3, [r4, #8]
   38b5c:	3001      	adds	r0, #1
   38b5e:	3b01      	subs	r3, #1
   38b60:	60a3      	str	r3, [r4, #8]
   38b62:	6823      	ldr	r3, [r4, #0]
   38b64:	1c5a      	adds	r2, r3, #1
   38b66:	6022      	str	r2, [r4, #0]
   38b68:	701f      	strb	r7, [r3, #0]
   38b6a:	6963      	ldr	r3, [r4, #20]
   38b6c:	4298      	cmp	r0, r3
   38b6e:	d004      	beq.n	38b7a <__swbuf_r+0x6a>
   38b70:	89a3      	ldrh	r3, [r4, #12]
   38b72:	07db      	lsls	r3, r3, #31
   38b74:	d51a      	bpl.n	38bac <__swbuf_r+0x9c>
   38b76:	2e0a      	cmp	r6, #10
   38b78:	d118      	bne.n	38bac <__swbuf_r+0x9c>
   38b7a:	0021      	movs	r1, r4
   38b7c:	0028      	movs	r0, r5
   38b7e:	f000 f91d 	bl	38dbc <_fflush_r>
   38b82:	2800      	cmp	r0, #0
   38b84:	d012      	beq.n	38bac <__swbuf_r+0x9c>
   38b86:	e00f      	b.n	38ba8 <__swbuf_r+0x98>
   38b88:	4b0a      	ldr	r3, [pc, #40]	; (38bb4 <__swbuf_r+0xa4>)
   38b8a:	429c      	cmp	r4, r3
   38b8c:	d101      	bne.n	38b92 <__swbuf_r+0x82>
   38b8e:	68ac      	ldr	r4, [r5, #8]
   38b90:	e7cd      	b.n	38b2e <__swbuf_r+0x1e>
   38b92:	4b09      	ldr	r3, [pc, #36]	; (38bb8 <__swbuf_r+0xa8>)
   38b94:	429c      	cmp	r4, r3
   38b96:	d1ca      	bne.n	38b2e <__swbuf_r+0x1e>
   38b98:	68ec      	ldr	r4, [r5, #12]
   38b9a:	e7c8      	b.n	38b2e <__swbuf_r+0x1e>
   38b9c:	0021      	movs	r1, r4
   38b9e:	0028      	movs	r0, r5
   38ba0:	f000 f80c 	bl	38bbc <__swsetup_r>
   38ba4:	2800      	cmp	r0, #0
   38ba6:	d0ca      	beq.n	38b3e <__swbuf_r+0x2e>
   38ba8:	2601      	movs	r6, #1
   38baa:	4276      	negs	r6, r6
   38bac:	0030      	movs	r0, r6
   38bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38bb0:	0003e7b4 	.word	0x0003e7b4
   38bb4:	0003e7d4 	.word	0x0003e7d4
   38bb8:	0003e794 	.word	0x0003e794

00038bbc <__swsetup_r>:
   38bbc:	4b36      	ldr	r3, [pc, #216]	; (38c98 <__swsetup_r+0xdc>)
   38bbe:	b570      	push	{r4, r5, r6, lr}
   38bc0:	681d      	ldr	r5, [r3, #0]
   38bc2:	0006      	movs	r6, r0
   38bc4:	000c      	movs	r4, r1
   38bc6:	2d00      	cmp	r5, #0
   38bc8:	d005      	beq.n	38bd6 <__swsetup_r+0x1a>
   38bca:	69ab      	ldr	r3, [r5, #24]
   38bcc:	2b00      	cmp	r3, #0
   38bce:	d102      	bne.n	38bd6 <__swsetup_r+0x1a>
   38bd0:	0028      	movs	r0, r5
   38bd2:	f000 f961 	bl	38e98 <__sinit>
   38bd6:	4b31      	ldr	r3, [pc, #196]	; (38c9c <__swsetup_r+0xe0>)
   38bd8:	429c      	cmp	r4, r3
   38bda:	d10f      	bne.n	38bfc <__swsetup_r+0x40>
   38bdc:	686c      	ldr	r4, [r5, #4]
   38bde:	230c      	movs	r3, #12
   38be0:	5ee2      	ldrsh	r2, [r4, r3]
   38be2:	b293      	uxth	r3, r2
   38be4:	0719      	lsls	r1, r3, #28
   38be6:	d42d      	bmi.n	38c44 <__swsetup_r+0x88>
   38be8:	06d9      	lsls	r1, r3, #27
   38bea:	d411      	bmi.n	38c10 <__swsetup_r+0x54>
   38bec:	2309      	movs	r3, #9
   38bee:	2001      	movs	r0, #1
   38bf0:	6033      	str	r3, [r6, #0]
   38bf2:	3337      	adds	r3, #55	; 0x37
   38bf4:	4313      	orrs	r3, r2
   38bf6:	81a3      	strh	r3, [r4, #12]
   38bf8:	4240      	negs	r0, r0
   38bfa:	bd70      	pop	{r4, r5, r6, pc}
   38bfc:	4b28      	ldr	r3, [pc, #160]	; (38ca0 <__swsetup_r+0xe4>)
   38bfe:	429c      	cmp	r4, r3
   38c00:	d101      	bne.n	38c06 <__swsetup_r+0x4a>
   38c02:	68ac      	ldr	r4, [r5, #8]
   38c04:	e7eb      	b.n	38bde <__swsetup_r+0x22>
   38c06:	4b27      	ldr	r3, [pc, #156]	; (38ca4 <__swsetup_r+0xe8>)
   38c08:	429c      	cmp	r4, r3
   38c0a:	d1e8      	bne.n	38bde <__swsetup_r+0x22>
   38c0c:	68ec      	ldr	r4, [r5, #12]
   38c0e:	e7e6      	b.n	38bde <__swsetup_r+0x22>
   38c10:	075b      	lsls	r3, r3, #29
   38c12:	d513      	bpl.n	38c3c <__swsetup_r+0x80>
   38c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
   38c16:	2900      	cmp	r1, #0
   38c18:	d008      	beq.n	38c2c <__swsetup_r+0x70>
   38c1a:	0023      	movs	r3, r4
   38c1c:	3344      	adds	r3, #68	; 0x44
   38c1e:	4299      	cmp	r1, r3
   38c20:	d002      	beq.n	38c28 <__swsetup_r+0x6c>
   38c22:	0030      	movs	r0, r6
   38c24:	f7ff fc78 	bl	38518 <_free_r>
   38c28:	2300      	movs	r3, #0
   38c2a:	6363      	str	r3, [r4, #52]	; 0x34
   38c2c:	2224      	movs	r2, #36	; 0x24
   38c2e:	89a3      	ldrh	r3, [r4, #12]
   38c30:	4393      	bics	r3, r2
   38c32:	81a3      	strh	r3, [r4, #12]
   38c34:	2300      	movs	r3, #0
   38c36:	6063      	str	r3, [r4, #4]
   38c38:	6923      	ldr	r3, [r4, #16]
   38c3a:	6023      	str	r3, [r4, #0]
   38c3c:	2308      	movs	r3, #8
   38c3e:	89a2      	ldrh	r2, [r4, #12]
   38c40:	4313      	orrs	r3, r2
   38c42:	81a3      	strh	r3, [r4, #12]
   38c44:	6923      	ldr	r3, [r4, #16]
   38c46:	2b00      	cmp	r3, #0
   38c48:	d10b      	bne.n	38c62 <__swsetup_r+0xa6>
   38c4a:	21a0      	movs	r1, #160	; 0xa0
   38c4c:	2280      	movs	r2, #128	; 0x80
   38c4e:	89a3      	ldrh	r3, [r4, #12]
   38c50:	0089      	lsls	r1, r1, #2
   38c52:	0092      	lsls	r2, r2, #2
   38c54:	400b      	ands	r3, r1
   38c56:	4293      	cmp	r3, r2
   38c58:	d003      	beq.n	38c62 <__swsetup_r+0xa6>
   38c5a:	0021      	movs	r1, r4
   38c5c:	0030      	movs	r0, r6
   38c5e:	f000 f9e9 	bl	39034 <__smakebuf_r>
   38c62:	2301      	movs	r3, #1
   38c64:	89a2      	ldrh	r2, [r4, #12]
   38c66:	4013      	ands	r3, r2
   38c68:	d011      	beq.n	38c8e <__swsetup_r+0xd2>
   38c6a:	2300      	movs	r3, #0
   38c6c:	60a3      	str	r3, [r4, #8]
   38c6e:	6963      	ldr	r3, [r4, #20]
   38c70:	425b      	negs	r3, r3
   38c72:	61a3      	str	r3, [r4, #24]
   38c74:	2000      	movs	r0, #0
   38c76:	6923      	ldr	r3, [r4, #16]
   38c78:	4283      	cmp	r3, r0
   38c7a:	d1be      	bne.n	38bfa <__swsetup_r+0x3e>
   38c7c:	230c      	movs	r3, #12
   38c7e:	5ee2      	ldrsh	r2, [r4, r3]
   38c80:	0613      	lsls	r3, r2, #24
   38c82:	d5ba      	bpl.n	38bfa <__swsetup_r+0x3e>
   38c84:	2340      	movs	r3, #64	; 0x40
   38c86:	4313      	orrs	r3, r2
   38c88:	81a3      	strh	r3, [r4, #12]
   38c8a:	3801      	subs	r0, #1
   38c8c:	e7b5      	b.n	38bfa <__swsetup_r+0x3e>
   38c8e:	0792      	lsls	r2, r2, #30
   38c90:	d400      	bmi.n	38c94 <__swsetup_r+0xd8>
   38c92:	6963      	ldr	r3, [r4, #20]
   38c94:	60a3      	str	r3, [r4, #8]
   38c96:	e7ed      	b.n	38c74 <__swsetup_r+0xb8>
   38c98:	200001ac 	.word	0x200001ac
   38c9c:	0003e7b4 	.word	0x0003e7b4
   38ca0:	0003e7d4 	.word	0x0003e7d4
   38ca4:	0003e794 	.word	0x0003e794

00038ca8 <__sflush_r>:
   38ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   38caa:	898a      	ldrh	r2, [r1, #12]
   38cac:	0005      	movs	r5, r0
   38cae:	000c      	movs	r4, r1
   38cb0:	0713      	lsls	r3, r2, #28
   38cb2:	d460      	bmi.n	38d76 <__sflush_r+0xce>
   38cb4:	684b      	ldr	r3, [r1, #4]
   38cb6:	2b00      	cmp	r3, #0
   38cb8:	dc04      	bgt.n	38cc4 <__sflush_r+0x1c>
   38cba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   38cbc:	2b00      	cmp	r3, #0
   38cbe:	dc01      	bgt.n	38cc4 <__sflush_r+0x1c>
   38cc0:	2000      	movs	r0, #0
   38cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   38cc4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   38cc6:	2f00      	cmp	r7, #0
   38cc8:	d0fa      	beq.n	38cc0 <__sflush_r+0x18>
   38cca:	2300      	movs	r3, #0
   38ccc:	682e      	ldr	r6, [r5, #0]
   38cce:	602b      	str	r3, [r5, #0]
   38cd0:	2380      	movs	r3, #128	; 0x80
   38cd2:	015b      	lsls	r3, r3, #5
   38cd4:	401a      	ands	r2, r3
   38cd6:	d034      	beq.n	38d42 <__sflush_r+0x9a>
   38cd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
   38cda:	89a3      	ldrh	r3, [r4, #12]
   38cdc:	075b      	lsls	r3, r3, #29
   38cde:	d506      	bpl.n	38cee <__sflush_r+0x46>
   38ce0:	6863      	ldr	r3, [r4, #4]
   38ce2:	1ac0      	subs	r0, r0, r3
   38ce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   38ce6:	2b00      	cmp	r3, #0
   38ce8:	d001      	beq.n	38cee <__sflush_r+0x46>
   38cea:	6c23      	ldr	r3, [r4, #64]	; 0x40
   38cec:	1ac0      	subs	r0, r0, r3
   38cee:	0002      	movs	r2, r0
   38cf0:	6a21      	ldr	r1, [r4, #32]
   38cf2:	2300      	movs	r3, #0
   38cf4:	0028      	movs	r0, r5
   38cf6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   38cf8:	47b8      	blx	r7
   38cfa:	89a1      	ldrh	r1, [r4, #12]
   38cfc:	1c43      	adds	r3, r0, #1
   38cfe:	d106      	bne.n	38d0e <__sflush_r+0x66>
   38d00:	682b      	ldr	r3, [r5, #0]
   38d02:	2b1d      	cmp	r3, #29
   38d04:	d831      	bhi.n	38d6a <__sflush_r+0xc2>
   38d06:	4a2c      	ldr	r2, [pc, #176]	; (38db8 <__sflush_r+0x110>)
   38d08:	40da      	lsrs	r2, r3
   38d0a:	07d3      	lsls	r3, r2, #31
   38d0c:	d52d      	bpl.n	38d6a <__sflush_r+0xc2>
   38d0e:	2300      	movs	r3, #0
   38d10:	6063      	str	r3, [r4, #4]
   38d12:	6923      	ldr	r3, [r4, #16]
   38d14:	6023      	str	r3, [r4, #0]
   38d16:	04cb      	lsls	r3, r1, #19
   38d18:	d505      	bpl.n	38d26 <__sflush_r+0x7e>
   38d1a:	1c43      	adds	r3, r0, #1
   38d1c:	d102      	bne.n	38d24 <__sflush_r+0x7c>
   38d1e:	682b      	ldr	r3, [r5, #0]
   38d20:	2b00      	cmp	r3, #0
   38d22:	d100      	bne.n	38d26 <__sflush_r+0x7e>
   38d24:	6560      	str	r0, [r4, #84]	; 0x54
   38d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
   38d28:	602e      	str	r6, [r5, #0]
   38d2a:	2900      	cmp	r1, #0
   38d2c:	d0c8      	beq.n	38cc0 <__sflush_r+0x18>
   38d2e:	0023      	movs	r3, r4
   38d30:	3344      	adds	r3, #68	; 0x44
   38d32:	4299      	cmp	r1, r3
   38d34:	d002      	beq.n	38d3c <__sflush_r+0x94>
   38d36:	0028      	movs	r0, r5
   38d38:	f7ff fbee 	bl	38518 <_free_r>
   38d3c:	2000      	movs	r0, #0
   38d3e:	6360      	str	r0, [r4, #52]	; 0x34
   38d40:	e7bf      	b.n	38cc2 <__sflush_r+0x1a>
   38d42:	2301      	movs	r3, #1
   38d44:	6a21      	ldr	r1, [r4, #32]
   38d46:	0028      	movs	r0, r5
   38d48:	47b8      	blx	r7
   38d4a:	1c43      	adds	r3, r0, #1
   38d4c:	d1c5      	bne.n	38cda <__sflush_r+0x32>
   38d4e:	682b      	ldr	r3, [r5, #0]
   38d50:	2b00      	cmp	r3, #0
   38d52:	d0c2      	beq.n	38cda <__sflush_r+0x32>
   38d54:	2b1d      	cmp	r3, #29
   38d56:	d001      	beq.n	38d5c <__sflush_r+0xb4>
   38d58:	2b16      	cmp	r3, #22
   38d5a:	d101      	bne.n	38d60 <__sflush_r+0xb8>
   38d5c:	602e      	str	r6, [r5, #0]
   38d5e:	e7af      	b.n	38cc0 <__sflush_r+0x18>
   38d60:	2340      	movs	r3, #64	; 0x40
   38d62:	89a2      	ldrh	r2, [r4, #12]
   38d64:	4313      	orrs	r3, r2
   38d66:	81a3      	strh	r3, [r4, #12]
   38d68:	e7ab      	b.n	38cc2 <__sflush_r+0x1a>
   38d6a:	2340      	movs	r3, #64	; 0x40
   38d6c:	430b      	orrs	r3, r1
   38d6e:	2001      	movs	r0, #1
   38d70:	81a3      	strh	r3, [r4, #12]
   38d72:	4240      	negs	r0, r0
   38d74:	e7a5      	b.n	38cc2 <__sflush_r+0x1a>
   38d76:	690f      	ldr	r7, [r1, #16]
   38d78:	2f00      	cmp	r7, #0
   38d7a:	d0a1      	beq.n	38cc0 <__sflush_r+0x18>
   38d7c:	680b      	ldr	r3, [r1, #0]
   38d7e:	600f      	str	r7, [r1, #0]
   38d80:	1bdb      	subs	r3, r3, r7
   38d82:	9301      	str	r3, [sp, #4]
   38d84:	2300      	movs	r3, #0
   38d86:	0792      	lsls	r2, r2, #30
   38d88:	d100      	bne.n	38d8c <__sflush_r+0xe4>
   38d8a:	694b      	ldr	r3, [r1, #20]
   38d8c:	60a3      	str	r3, [r4, #8]
   38d8e:	9b01      	ldr	r3, [sp, #4]
   38d90:	2b00      	cmp	r3, #0
   38d92:	dc00      	bgt.n	38d96 <__sflush_r+0xee>
   38d94:	e794      	b.n	38cc0 <__sflush_r+0x18>
   38d96:	9b01      	ldr	r3, [sp, #4]
   38d98:	003a      	movs	r2, r7
   38d9a:	6a21      	ldr	r1, [r4, #32]
   38d9c:	0028      	movs	r0, r5
   38d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   38da0:	47b0      	blx	r6
   38da2:	2800      	cmp	r0, #0
   38da4:	dc03      	bgt.n	38dae <__sflush_r+0x106>
   38da6:	2340      	movs	r3, #64	; 0x40
   38da8:	89a2      	ldrh	r2, [r4, #12]
   38daa:	4313      	orrs	r3, r2
   38dac:	e7df      	b.n	38d6e <__sflush_r+0xc6>
   38dae:	9b01      	ldr	r3, [sp, #4]
   38db0:	183f      	adds	r7, r7, r0
   38db2:	1a1b      	subs	r3, r3, r0
   38db4:	9301      	str	r3, [sp, #4]
   38db6:	e7ea      	b.n	38d8e <__sflush_r+0xe6>
   38db8:	20400001 	.word	0x20400001

00038dbc <_fflush_r>:
   38dbc:	690b      	ldr	r3, [r1, #16]
   38dbe:	b570      	push	{r4, r5, r6, lr}
   38dc0:	0005      	movs	r5, r0
   38dc2:	000c      	movs	r4, r1
   38dc4:	2b00      	cmp	r3, #0
   38dc6:	d101      	bne.n	38dcc <_fflush_r+0x10>
   38dc8:	2000      	movs	r0, #0
   38dca:	bd70      	pop	{r4, r5, r6, pc}
   38dcc:	2800      	cmp	r0, #0
   38dce:	d004      	beq.n	38dda <_fflush_r+0x1e>
   38dd0:	6983      	ldr	r3, [r0, #24]
   38dd2:	2b00      	cmp	r3, #0
   38dd4:	d101      	bne.n	38dda <_fflush_r+0x1e>
   38dd6:	f000 f85f 	bl	38e98 <__sinit>
   38dda:	4b0b      	ldr	r3, [pc, #44]	; (38e08 <_fflush_r+0x4c>)
   38ddc:	429c      	cmp	r4, r3
   38dde:	d109      	bne.n	38df4 <_fflush_r+0x38>
   38de0:	686c      	ldr	r4, [r5, #4]
   38de2:	220c      	movs	r2, #12
   38de4:	5ea3      	ldrsh	r3, [r4, r2]
   38de6:	2b00      	cmp	r3, #0
   38de8:	d0ee      	beq.n	38dc8 <_fflush_r+0xc>
   38dea:	0021      	movs	r1, r4
   38dec:	0028      	movs	r0, r5
   38dee:	f7ff ff5b 	bl	38ca8 <__sflush_r>
   38df2:	e7ea      	b.n	38dca <_fflush_r+0xe>
   38df4:	4b05      	ldr	r3, [pc, #20]	; (38e0c <_fflush_r+0x50>)
   38df6:	429c      	cmp	r4, r3
   38df8:	d101      	bne.n	38dfe <_fflush_r+0x42>
   38dfa:	68ac      	ldr	r4, [r5, #8]
   38dfc:	e7f1      	b.n	38de2 <_fflush_r+0x26>
   38dfe:	4b04      	ldr	r3, [pc, #16]	; (38e10 <_fflush_r+0x54>)
   38e00:	429c      	cmp	r4, r3
   38e02:	d1ee      	bne.n	38de2 <_fflush_r+0x26>
   38e04:	68ec      	ldr	r4, [r5, #12]
   38e06:	e7ec      	b.n	38de2 <_fflush_r+0x26>
   38e08:	0003e7b4 	.word	0x0003e7b4
   38e0c:	0003e7d4 	.word	0x0003e7d4
   38e10:	0003e794 	.word	0x0003e794

00038e14 <_cleanup_r>:
   38e14:	b510      	push	{r4, lr}
   38e16:	4902      	ldr	r1, [pc, #8]	; (38e20 <_cleanup_r+0xc>)
   38e18:	f000 f8b2 	bl	38f80 <_fwalk_reent>
   38e1c:	bd10      	pop	{r4, pc}
   38e1e:	46c0      	nop			; (mov r8, r8)
   38e20:	00038dbd 	.word	0x00038dbd

00038e24 <std.isra.0>:
   38e24:	2300      	movs	r3, #0
   38e26:	b510      	push	{r4, lr}
   38e28:	0004      	movs	r4, r0
   38e2a:	6003      	str	r3, [r0, #0]
   38e2c:	6043      	str	r3, [r0, #4]
   38e2e:	6083      	str	r3, [r0, #8]
   38e30:	8181      	strh	r1, [r0, #12]
   38e32:	6643      	str	r3, [r0, #100]	; 0x64
   38e34:	81c2      	strh	r2, [r0, #14]
   38e36:	6103      	str	r3, [r0, #16]
   38e38:	6143      	str	r3, [r0, #20]
   38e3a:	6183      	str	r3, [r0, #24]
   38e3c:	0019      	movs	r1, r3
   38e3e:	2208      	movs	r2, #8
   38e40:	305c      	adds	r0, #92	; 0x5c
   38e42:	f7ff fb60 	bl	38506 <memset>
   38e46:	4b05      	ldr	r3, [pc, #20]	; (38e5c <std.isra.0+0x38>)
   38e48:	6224      	str	r4, [r4, #32]
   38e4a:	6263      	str	r3, [r4, #36]	; 0x24
   38e4c:	4b04      	ldr	r3, [pc, #16]	; (38e60 <std.isra.0+0x3c>)
   38e4e:	62a3      	str	r3, [r4, #40]	; 0x28
   38e50:	4b04      	ldr	r3, [pc, #16]	; (38e64 <std.isra.0+0x40>)
   38e52:	62e3      	str	r3, [r4, #44]	; 0x2c
   38e54:	4b04      	ldr	r3, [pc, #16]	; (38e68 <std.isra.0+0x44>)
   38e56:	6323      	str	r3, [r4, #48]	; 0x30
   38e58:	bd10      	pop	{r4, pc}
   38e5a:	46c0      	nop			; (mov r8, r8)
   38e5c:	000396c1 	.word	0x000396c1
   38e60:	000396e9 	.word	0x000396e9
   38e64:	00039721 	.word	0x00039721
   38e68:	0003974d 	.word	0x0003974d

00038e6c <__sfmoreglue>:
   38e6c:	b570      	push	{r4, r5, r6, lr}
   38e6e:	2568      	movs	r5, #104	; 0x68
   38e70:	1e4a      	subs	r2, r1, #1
   38e72:	4355      	muls	r5, r2
   38e74:	000e      	movs	r6, r1
   38e76:	0029      	movs	r1, r5
   38e78:	3174      	adds	r1, #116	; 0x74
   38e7a:	f7ff fb97 	bl	385ac <_malloc_r>
   38e7e:	1e04      	subs	r4, r0, #0
   38e80:	d008      	beq.n	38e94 <__sfmoreglue+0x28>
   38e82:	2100      	movs	r1, #0
   38e84:	002a      	movs	r2, r5
   38e86:	6001      	str	r1, [r0, #0]
   38e88:	6046      	str	r6, [r0, #4]
   38e8a:	300c      	adds	r0, #12
   38e8c:	60a0      	str	r0, [r4, #8]
   38e8e:	3268      	adds	r2, #104	; 0x68
   38e90:	f7ff fb39 	bl	38506 <memset>
   38e94:	0020      	movs	r0, r4
   38e96:	bd70      	pop	{r4, r5, r6, pc}

00038e98 <__sinit>:
   38e98:	6983      	ldr	r3, [r0, #24]
   38e9a:	b513      	push	{r0, r1, r4, lr}
   38e9c:	0004      	movs	r4, r0
   38e9e:	2b00      	cmp	r3, #0
   38ea0:	d128      	bne.n	38ef4 <__sinit+0x5c>
   38ea2:	6483      	str	r3, [r0, #72]	; 0x48
   38ea4:	64c3      	str	r3, [r0, #76]	; 0x4c
   38ea6:	6503      	str	r3, [r0, #80]	; 0x50
   38ea8:	4b13      	ldr	r3, [pc, #76]	; (38ef8 <__sinit+0x60>)
   38eaa:	4a14      	ldr	r2, [pc, #80]	; (38efc <__sinit+0x64>)
   38eac:	681b      	ldr	r3, [r3, #0]
   38eae:	6282      	str	r2, [r0, #40]	; 0x28
   38eb0:	9301      	str	r3, [sp, #4]
   38eb2:	4298      	cmp	r0, r3
   38eb4:	d101      	bne.n	38eba <__sinit+0x22>
   38eb6:	2301      	movs	r3, #1
   38eb8:	6183      	str	r3, [r0, #24]
   38eba:	0020      	movs	r0, r4
   38ebc:	f000 f820 	bl	38f00 <__sfp>
   38ec0:	6060      	str	r0, [r4, #4]
   38ec2:	0020      	movs	r0, r4
   38ec4:	f000 f81c 	bl	38f00 <__sfp>
   38ec8:	60a0      	str	r0, [r4, #8]
   38eca:	0020      	movs	r0, r4
   38ecc:	f000 f818 	bl	38f00 <__sfp>
   38ed0:	2200      	movs	r2, #0
   38ed2:	60e0      	str	r0, [r4, #12]
   38ed4:	2104      	movs	r1, #4
   38ed6:	6860      	ldr	r0, [r4, #4]
   38ed8:	f7ff ffa4 	bl	38e24 <std.isra.0>
   38edc:	2201      	movs	r2, #1
   38ede:	2109      	movs	r1, #9
   38ee0:	68a0      	ldr	r0, [r4, #8]
   38ee2:	f7ff ff9f 	bl	38e24 <std.isra.0>
   38ee6:	2202      	movs	r2, #2
   38ee8:	2112      	movs	r1, #18
   38eea:	68e0      	ldr	r0, [r4, #12]
   38eec:	f7ff ff9a 	bl	38e24 <std.isra.0>
   38ef0:	2301      	movs	r3, #1
   38ef2:	61a3      	str	r3, [r4, #24]
   38ef4:	bd13      	pop	{r0, r1, r4, pc}
   38ef6:	46c0      	nop			; (mov r8, r8)
   38ef8:	0003e790 	.word	0x0003e790
   38efc:	00038e15 	.word	0x00038e15

00038f00 <__sfp>:
   38f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38f02:	4b1e      	ldr	r3, [pc, #120]	; (38f7c <__sfp+0x7c>)
   38f04:	0007      	movs	r7, r0
   38f06:	681e      	ldr	r6, [r3, #0]
   38f08:	69b3      	ldr	r3, [r6, #24]
   38f0a:	2b00      	cmp	r3, #0
   38f0c:	d102      	bne.n	38f14 <__sfp+0x14>
   38f0e:	0030      	movs	r0, r6
   38f10:	f7ff ffc2 	bl	38e98 <__sinit>
   38f14:	3648      	adds	r6, #72	; 0x48
   38f16:	68b4      	ldr	r4, [r6, #8]
   38f18:	6873      	ldr	r3, [r6, #4]
   38f1a:	3b01      	subs	r3, #1
   38f1c:	d504      	bpl.n	38f28 <__sfp+0x28>
   38f1e:	6833      	ldr	r3, [r6, #0]
   38f20:	2b00      	cmp	r3, #0
   38f22:	d007      	beq.n	38f34 <__sfp+0x34>
   38f24:	6836      	ldr	r6, [r6, #0]
   38f26:	e7f6      	b.n	38f16 <__sfp+0x16>
   38f28:	220c      	movs	r2, #12
   38f2a:	5ea5      	ldrsh	r5, [r4, r2]
   38f2c:	2d00      	cmp	r5, #0
   38f2e:	d00d      	beq.n	38f4c <__sfp+0x4c>
   38f30:	3468      	adds	r4, #104	; 0x68
   38f32:	e7f2      	b.n	38f1a <__sfp+0x1a>
   38f34:	2104      	movs	r1, #4
   38f36:	0038      	movs	r0, r7
   38f38:	f7ff ff98 	bl	38e6c <__sfmoreglue>
   38f3c:	6030      	str	r0, [r6, #0]
   38f3e:	2800      	cmp	r0, #0
   38f40:	d1f0      	bne.n	38f24 <__sfp+0x24>
   38f42:	230c      	movs	r3, #12
   38f44:	0004      	movs	r4, r0
   38f46:	603b      	str	r3, [r7, #0]
   38f48:	0020      	movs	r0, r4
   38f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38f4c:	2301      	movs	r3, #1
   38f4e:	0020      	movs	r0, r4
   38f50:	425b      	negs	r3, r3
   38f52:	81e3      	strh	r3, [r4, #14]
   38f54:	3302      	adds	r3, #2
   38f56:	81a3      	strh	r3, [r4, #12]
   38f58:	6665      	str	r5, [r4, #100]	; 0x64
   38f5a:	6025      	str	r5, [r4, #0]
   38f5c:	60a5      	str	r5, [r4, #8]
   38f5e:	6065      	str	r5, [r4, #4]
   38f60:	6125      	str	r5, [r4, #16]
   38f62:	6165      	str	r5, [r4, #20]
   38f64:	61a5      	str	r5, [r4, #24]
   38f66:	2208      	movs	r2, #8
   38f68:	0029      	movs	r1, r5
   38f6a:	305c      	adds	r0, #92	; 0x5c
   38f6c:	f7ff facb 	bl	38506 <memset>
   38f70:	6365      	str	r5, [r4, #52]	; 0x34
   38f72:	63a5      	str	r5, [r4, #56]	; 0x38
   38f74:	64a5      	str	r5, [r4, #72]	; 0x48
   38f76:	64e5      	str	r5, [r4, #76]	; 0x4c
   38f78:	e7e6      	b.n	38f48 <__sfp+0x48>
   38f7a:	46c0      	nop			; (mov r8, r8)
   38f7c:	0003e790 	.word	0x0003e790

00038f80 <_fwalk_reent>:
   38f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   38f82:	0004      	movs	r4, r0
   38f84:	0007      	movs	r7, r0
   38f86:	2600      	movs	r6, #0
   38f88:	9101      	str	r1, [sp, #4]
   38f8a:	3448      	adds	r4, #72	; 0x48
   38f8c:	2c00      	cmp	r4, #0
   38f8e:	d101      	bne.n	38f94 <_fwalk_reent+0x14>
   38f90:	0030      	movs	r0, r6
   38f92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   38f94:	6863      	ldr	r3, [r4, #4]
   38f96:	68a5      	ldr	r5, [r4, #8]
   38f98:	9300      	str	r3, [sp, #0]
   38f9a:	9b00      	ldr	r3, [sp, #0]
   38f9c:	3b01      	subs	r3, #1
   38f9e:	9300      	str	r3, [sp, #0]
   38fa0:	d501      	bpl.n	38fa6 <_fwalk_reent+0x26>
   38fa2:	6824      	ldr	r4, [r4, #0]
   38fa4:	e7f2      	b.n	38f8c <_fwalk_reent+0xc>
   38fa6:	89ab      	ldrh	r3, [r5, #12]
   38fa8:	2b01      	cmp	r3, #1
   38faa:	d908      	bls.n	38fbe <_fwalk_reent+0x3e>
   38fac:	220e      	movs	r2, #14
   38fae:	5eab      	ldrsh	r3, [r5, r2]
   38fb0:	3301      	adds	r3, #1
   38fb2:	d004      	beq.n	38fbe <_fwalk_reent+0x3e>
   38fb4:	0029      	movs	r1, r5
   38fb6:	0038      	movs	r0, r7
   38fb8:	9b01      	ldr	r3, [sp, #4]
   38fba:	4798      	blx	r3
   38fbc:	4306      	orrs	r6, r0
   38fbe:	3568      	adds	r5, #104	; 0x68
   38fc0:	e7eb      	b.n	38f9a <_fwalk_reent+0x1a>

00038fc2 <__locale_ctype_ptr_l>:
   38fc2:	30ec      	adds	r0, #236	; 0xec
   38fc4:	6800      	ldr	r0, [r0, #0]
   38fc6:	4770      	bx	lr

00038fc8 <__locale_ctype_ptr>:
   38fc8:	4b04      	ldr	r3, [pc, #16]	; (38fdc <__locale_ctype_ptr+0x14>)
   38fca:	681b      	ldr	r3, [r3, #0]
   38fcc:	6a1b      	ldr	r3, [r3, #32]
   38fce:	2b00      	cmp	r3, #0
   38fd0:	d100      	bne.n	38fd4 <__locale_ctype_ptr+0xc>
   38fd2:	4b03      	ldr	r3, [pc, #12]	; (38fe0 <__locale_ctype_ptr+0x18>)
   38fd4:	33ec      	adds	r3, #236	; 0xec
   38fd6:	6818      	ldr	r0, [r3, #0]
   38fd8:	4770      	bx	lr
   38fda:	46c0      	nop			; (mov r8, r8)
   38fdc:	200001ac 	.word	0x200001ac
   38fe0:	20000210 	.word	0x20000210

00038fe4 <__swhatbuf_r>:
   38fe4:	b570      	push	{r4, r5, r6, lr}
   38fe6:	000e      	movs	r6, r1
   38fe8:	001d      	movs	r5, r3
   38fea:	230e      	movs	r3, #14
   38fec:	5ec9      	ldrsh	r1, [r1, r3]
   38fee:	b090      	sub	sp, #64	; 0x40
   38ff0:	0014      	movs	r4, r2
   38ff2:	2900      	cmp	r1, #0
   38ff4:	da07      	bge.n	39006 <__swhatbuf_r+0x22>
   38ff6:	2300      	movs	r3, #0
   38ff8:	602b      	str	r3, [r5, #0]
   38ffa:	89b3      	ldrh	r3, [r6, #12]
   38ffc:	061b      	lsls	r3, r3, #24
   38ffe:	d411      	bmi.n	39024 <__swhatbuf_r+0x40>
   39000:	2380      	movs	r3, #128	; 0x80
   39002:	00db      	lsls	r3, r3, #3
   39004:	e00f      	b.n	39026 <__swhatbuf_r+0x42>
   39006:	aa01      	add	r2, sp, #4
   39008:	f000 fbd8 	bl	397bc <_fstat_r>
   3900c:	2800      	cmp	r0, #0
   3900e:	dbf2      	blt.n	38ff6 <__swhatbuf_r+0x12>
   39010:	22f0      	movs	r2, #240	; 0xf0
   39012:	9b02      	ldr	r3, [sp, #8]
   39014:	0212      	lsls	r2, r2, #8
   39016:	4013      	ands	r3, r2
   39018:	4a05      	ldr	r2, [pc, #20]	; (39030 <__swhatbuf_r+0x4c>)
   3901a:	189b      	adds	r3, r3, r2
   3901c:	425a      	negs	r2, r3
   3901e:	4153      	adcs	r3, r2
   39020:	602b      	str	r3, [r5, #0]
   39022:	e7ed      	b.n	39000 <__swhatbuf_r+0x1c>
   39024:	2340      	movs	r3, #64	; 0x40
   39026:	2000      	movs	r0, #0
   39028:	6023      	str	r3, [r4, #0]
   3902a:	b010      	add	sp, #64	; 0x40
   3902c:	bd70      	pop	{r4, r5, r6, pc}
   3902e:	46c0      	nop			; (mov r8, r8)
   39030:	ffffe000 	.word	0xffffe000

00039034 <__smakebuf_r>:
   39034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   39036:	2602      	movs	r6, #2
   39038:	898b      	ldrh	r3, [r1, #12]
   3903a:	0005      	movs	r5, r0
   3903c:	000c      	movs	r4, r1
   3903e:	4233      	tst	r3, r6
   39040:	d006      	beq.n	39050 <__smakebuf_r+0x1c>
   39042:	0023      	movs	r3, r4
   39044:	3347      	adds	r3, #71	; 0x47
   39046:	6023      	str	r3, [r4, #0]
   39048:	6123      	str	r3, [r4, #16]
   3904a:	2301      	movs	r3, #1
   3904c:	6163      	str	r3, [r4, #20]
   3904e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   39050:	ab01      	add	r3, sp, #4
   39052:	466a      	mov	r2, sp
   39054:	f7ff ffc6 	bl	38fe4 <__swhatbuf_r>
   39058:	9900      	ldr	r1, [sp, #0]
   3905a:	0007      	movs	r7, r0
   3905c:	0028      	movs	r0, r5
   3905e:	f7ff faa5 	bl	385ac <_malloc_r>
   39062:	2800      	cmp	r0, #0
   39064:	d108      	bne.n	39078 <__smakebuf_r+0x44>
   39066:	220c      	movs	r2, #12
   39068:	5ea3      	ldrsh	r3, [r4, r2]
   3906a:	059a      	lsls	r2, r3, #22
   3906c:	d4ef      	bmi.n	3904e <__smakebuf_r+0x1a>
   3906e:	2203      	movs	r2, #3
   39070:	4393      	bics	r3, r2
   39072:	431e      	orrs	r6, r3
   39074:	81a6      	strh	r6, [r4, #12]
   39076:	e7e4      	b.n	39042 <__smakebuf_r+0xe>
   39078:	4b0f      	ldr	r3, [pc, #60]	; (390b8 <__smakebuf_r+0x84>)
   3907a:	62ab      	str	r3, [r5, #40]	; 0x28
   3907c:	2380      	movs	r3, #128	; 0x80
   3907e:	89a2      	ldrh	r2, [r4, #12]
   39080:	6020      	str	r0, [r4, #0]
   39082:	4313      	orrs	r3, r2
   39084:	81a3      	strh	r3, [r4, #12]
   39086:	9b00      	ldr	r3, [sp, #0]
   39088:	6120      	str	r0, [r4, #16]
   3908a:	6163      	str	r3, [r4, #20]
   3908c:	9b01      	ldr	r3, [sp, #4]
   3908e:	2b00      	cmp	r3, #0
   39090:	d00d      	beq.n	390ae <__smakebuf_r+0x7a>
   39092:	230e      	movs	r3, #14
   39094:	5ee1      	ldrsh	r1, [r4, r3]
   39096:	0028      	movs	r0, r5
   39098:	f000 fba2 	bl	397e0 <_isatty_r>
   3909c:	2800      	cmp	r0, #0
   3909e:	d006      	beq.n	390ae <__smakebuf_r+0x7a>
   390a0:	2203      	movs	r2, #3
   390a2:	89a3      	ldrh	r3, [r4, #12]
   390a4:	4393      	bics	r3, r2
   390a6:	001a      	movs	r2, r3
   390a8:	2301      	movs	r3, #1
   390aa:	4313      	orrs	r3, r2
   390ac:	81a3      	strh	r3, [r4, #12]
   390ae:	89a0      	ldrh	r0, [r4, #12]
   390b0:	4338      	orrs	r0, r7
   390b2:	81a0      	strh	r0, [r4, #12]
   390b4:	e7cb      	b.n	3904e <__smakebuf_r+0x1a>
   390b6:	46c0      	nop			; (mov r8, r8)
   390b8:	00038e15 	.word	0x00038e15

000390bc <__ascii_mbtowc>:
   390bc:	b082      	sub	sp, #8
   390be:	2900      	cmp	r1, #0
   390c0:	d100      	bne.n	390c4 <__ascii_mbtowc+0x8>
   390c2:	a901      	add	r1, sp, #4
   390c4:	1e10      	subs	r0, r2, #0
   390c6:	d006      	beq.n	390d6 <__ascii_mbtowc+0x1a>
   390c8:	2b00      	cmp	r3, #0
   390ca:	d006      	beq.n	390da <__ascii_mbtowc+0x1e>
   390cc:	7813      	ldrb	r3, [r2, #0]
   390ce:	600b      	str	r3, [r1, #0]
   390d0:	7810      	ldrb	r0, [r2, #0]
   390d2:	1e43      	subs	r3, r0, #1
   390d4:	4198      	sbcs	r0, r3
   390d6:	b002      	add	sp, #8
   390d8:	4770      	bx	lr
   390da:	2002      	movs	r0, #2
   390dc:	4240      	negs	r0, r0
   390de:	e7fa      	b.n	390d6 <__ascii_mbtowc+0x1a>

000390e0 <__malloc_lock>:
   390e0:	4770      	bx	lr

000390e2 <__malloc_unlock>:
   390e2:	4770      	bx	lr

000390e4 <__ssputs_r>:
   390e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   390e6:	688e      	ldr	r6, [r1, #8]
   390e8:	b085      	sub	sp, #20
   390ea:	0007      	movs	r7, r0
   390ec:	000c      	movs	r4, r1
   390ee:	9203      	str	r2, [sp, #12]
   390f0:	9301      	str	r3, [sp, #4]
   390f2:	429e      	cmp	r6, r3
   390f4:	d839      	bhi.n	3916a <__ssputs_r+0x86>
   390f6:	2390      	movs	r3, #144	; 0x90
   390f8:	898a      	ldrh	r2, [r1, #12]
   390fa:	00db      	lsls	r3, r3, #3
   390fc:	421a      	tst	r2, r3
   390fe:	d034      	beq.n	3916a <__ssputs_r+0x86>
   39100:	2503      	movs	r5, #3
   39102:	6909      	ldr	r1, [r1, #16]
   39104:	6823      	ldr	r3, [r4, #0]
   39106:	1a5b      	subs	r3, r3, r1
   39108:	9302      	str	r3, [sp, #8]
   3910a:	6963      	ldr	r3, [r4, #20]
   3910c:	9802      	ldr	r0, [sp, #8]
   3910e:	435d      	muls	r5, r3
   39110:	0feb      	lsrs	r3, r5, #31
   39112:	195d      	adds	r5, r3, r5
   39114:	9b01      	ldr	r3, [sp, #4]
   39116:	106d      	asrs	r5, r5, #1
   39118:	3301      	adds	r3, #1
   3911a:	181b      	adds	r3, r3, r0
   3911c:	42ab      	cmp	r3, r5
   3911e:	d900      	bls.n	39122 <__ssputs_r+0x3e>
   39120:	001d      	movs	r5, r3
   39122:	0553      	lsls	r3, r2, #21
   39124:	d532      	bpl.n	3918c <__ssputs_r+0xa8>
   39126:	0029      	movs	r1, r5
   39128:	0038      	movs	r0, r7
   3912a:	f7ff fa3f 	bl	385ac <_malloc_r>
   3912e:	1e06      	subs	r6, r0, #0
   39130:	d109      	bne.n	39146 <__ssputs_r+0x62>
   39132:	230c      	movs	r3, #12
   39134:	603b      	str	r3, [r7, #0]
   39136:	2340      	movs	r3, #64	; 0x40
   39138:	2001      	movs	r0, #1
   3913a:	89a2      	ldrh	r2, [r4, #12]
   3913c:	4240      	negs	r0, r0
   3913e:	4313      	orrs	r3, r2
   39140:	81a3      	strh	r3, [r4, #12]
   39142:	b005      	add	sp, #20
   39144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39146:	9a02      	ldr	r2, [sp, #8]
   39148:	6921      	ldr	r1, [r4, #16]
   3914a:	f7ff f9c1 	bl	384d0 <memcpy>
   3914e:	89a3      	ldrh	r3, [r4, #12]
   39150:	4a14      	ldr	r2, [pc, #80]	; (391a4 <__ssputs_r+0xc0>)
   39152:	401a      	ands	r2, r3
   39154:	2380      	movs	r3, #128	; 0x80
   39156:	4313      	orrs	r3, r2
   39158:	81a3      	strh	r3, [r4, #12]
   3915a:	9b02      	ldr	r3, [sp, #8]
   3915c:	6126      	str	r6, [r4, #16]
   3915e:	18f6      	adds	r6, r6, r3
   39160:	6026      	str	r6, [r4, #0]
   39162:	6165      	str	r5, [r4, #20]
   39164:	9e01      	ldr	r6, [sp, #4]
   39166:	1aed      	subs	r5, r5, r3
   39168:	60a5      	str	r5, [r4, #8]
   3916a:	9b01      	ldr	r3, [sp, #4]
   3916c:	42b3      	cmp	r3, r6
   3916e:	d200      	bcs.n	39172 <__ssputs_r+0x8e>
   39170:	001e      	movs	r6, r3
   39172:	0032      	movs	r2, r6
   39174:	9903      	ldr	r1, [sp, #12]
   39176:	6820      	ldr	r0, [r4, #0]
   39178:	f7ff f9b3 	bl	384e2 <memmove>
   3917c:	68a3      	ldr	r3, [r4, #8]
   3917e:	2000      	movs	r0, #0
   39180:	1b9b      	subs	r3, r3, r6
   39182:	60a3      	str	r3, [r4, #8]
   39184:	6823      	ldr	r3, [r4, #0]
   39186:	199e      	adds	r6, r3, r6
   39188:	6026      	str	r6, [r4, #0]
   3918a:	e7da      	b.n	39142 <__ssputs_r+0x5e>
   3918c:	002a      	movs	r2, r5
   3918e:	0038      	movs	r0, r7
   39190:	f000 fb57 	bl	39842 <_realloc_r>
   39194:	1e06      	subs	r6, r0, #0
   39196:	d1e0      	bne.n	3915a <__ssputs_r+0x76>
   39198:	6921      	ldr	r1, [r4, #16]
   3919a:	0038      	movs	r0, r7
   3919c:	f7ff f9bc 	bl	38518 <_free_r>
   391a0:	e7c7      	b.n	39132 <__ssputs_r+0x4e>
   391a2:	46c0      	nop			; (mov r8, r8)
   391a4:	fffffb7f 	.word	0xfffffb7f

000391a8 <_svfiprintf_r>:
   391a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   391aa:	b09f      	sub	sp, #124	; 0x7c
   391ac:	9002      	str	r0, [sp, #8]
   391ae:	9305      	str	r3, [sp, #20]
   391b0:	898b      	ldrh	r3, [r1, #12]
   391b2:	000f      	movs	r7, r1
   391b4:	0016      	movs	r6, r2
   391b6:	061b      	lsls	r3, r3, #24
   391b8:	d511      	bpl.n	391de <_svfiprintf_r+0x36>
   391ba:	690b      	ldr	r3, [r1, #16]
   391bc:	2b00      	cmp	r3, #0
   391be:	d10e      	bne.n	391de <_svfiprintf_r+0x36>
   391c0:	2140      	movs	r1, #64	; 0x40
   391c2:	f7ff f9f3 	bl	385ac <_malloc_r>
   391c6:	6038      	str	r0, [r7, #0]
   391c8:	6138      	str	r0, [r7, #16]
   391ca:	2800      	cmp	r0, #0
   391cc:	d105      	bne.n	391da <_svfiprintf_r+0x32>
   391ce:	230c      	movs	r3, #12
   391d0:	9a02      	ldr	r2, [sp, #8]
   391d2:	3801      	subs	r0, #1
   391d4:	6013      	str	r3, [r2, #0]
   391d6:	b01f      	add	sp, #124	; 0x7c
   391d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   391da:	2340      	movs	r3, #64	; 0x40
   391dc:	617b      	str	r3, [r7, #20]
   391de:	2300      	movs	r3, #0
   391e0:	ad06      	add	r5, sp, #24
   391e2:	616b      	str	r3, [r5, #20]
   391e4:	3320      	adds	r3, #32
   391e6:	766b      	strb	r3, [r5, #25]
   391e8:	3310      	adds	r3, #16
   391ea:	76ab      	strb	r3, [r5, #26]
   391ec:	0034      	movs	r4, r6
   391ee:	7823      	ldrb	r3, [r4, #0]
   391f0:	2b00      	cmp	r3, #0
   391f2:	d147      	bne.n	39284 <_svfiprintf_r+0xdc>
   391f4:	1ba3      	subs	r3, r4, r6
   391f6:	9304      	str	r3, [sp, #16]
   391f8:	d00d      	beq.n	39216 <_svfiprintf_r+0x6e>
   391fa:	1ba3      	subs	r3, r4, r6
   391fc:	0032      	movs	r2, r6
   391fe:	0039      	movs	r1, r7
   39200:	9802      	ldr	r0, [sp, #8]
   39202:	f7ff ff6f 	bl	390e4 <__ssputs_r>
   39206:	1c43      	adds	r3, r0, #1
   39208:	d100      	bne.n	3920c <_svfiprintf_r+0x64>
   3920a:	e0b5      	b.n	39378 <_svfiprintf_r+0x1d0>
   3920c:	696a      	ldr	r2, [r5, #20]
   3920e:	9b04      	ldr	r3, [sp, #16]
   39210:	4694      	mov	ip, r2
   39212:	4463      	add	r3, ip
   39214:	616b      	str	r3, [r5, #20]
   39216:	7823      	ldrb	r3, [r4, #0]
   39218:	2b00      	cmp	r3, #0
   3921a:	d100      	bne.n	3921e <_svfiprintf_r+0x76>
   3921c:	e0ac      	b.n	39378 <_svfiprintf_r+0x1d0>
   3921e:	2201      	movs	r2, #1
   39220:	2300      	movs	r3, #0
   39222:	4252      	negs	r2, r2
   39224:	606a      	str	r2, [r5, #4]
   39226:	a902      	add	r1, sp, #8
   39228:	3254      	adds	r2, #84	; 0x54
   3922a:	1852      	adds	r2, r2, r1
   3922c:	3401      	adds	r4, #1
   3922e:	602b      	str	r3, [r5, #0]
   39230:	60eb      	str	r3, [r5, #12]
   39232:	60ab      	str	r3, [r5, #8]
   39234:	7013      	strb	r3, [r2, #0]
   39236:	65ab      	str	r3, [r5, #88]	; 0x58
   39238:	4e58      	ldr	r6, [pc, #352]	; (3939c <_svfiprintf_r+0x1f4>)
   3923a:	2205      	movs	r2, #5
   3923c:	7821      	ldrb	r1, [r4, #0]
   3923e:	0030      	movs	r0, r6
   39240:	f000 faf4 	bl	3982c <memchr>
   39244:	1c62      	adds	r2, r4, #1
   39246:	2800      	cmp	r0, #0
   39248:	d120      	bne.n	3928c <_svfiprintf_r+0xe4>
   3924a:	6829      	ldr	r1, [r5, #0]
   3924c:	06cb      	lsls	r3, r1, #27
   3924e:	d504      	bpl.n	3925a <_svfiprintf_r+0xb2>
   39250:	2353      	movs	r3, #83	; 0x53
   39252:	ae02      	add	r6, sp, #8
   39254:	3020      	adds	r0, #32
   39256:	199b      	adds	r3, r3, r6
   39258:	7018      	strb	r0, [r3, #0]
   3925a:	070b      	lsls	r3, r1, #28
   3925c:	d504      	bpl.n	39268 <_svfiprintf_r+0xc0>
   3925e:	2353      	movs	r3, #83	; 0x53
   39260:	202b      	movs	r0, #43	; 0x2b
   39262:	ae02      	add	r6, sp, #8
   39264:	199b      	adds	r3, r3, r6
   39266:	7018      	strb	r0, [r3, #0]
   39268:	7823      	ldrb	r3, [r4, #0]
   3926a:	2b2a      	cmp	r3, #42	; 0x2a
   3926c:	d016      	beq.n	3929c <_svfiprintf_r+0xf4>
   3926e:	2000      	movs	r0, #0
   39270:	210a      	movs	r1, #10
   39272:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39274:	7822      	ldrb	r2, [r4, #0]
   39276:	3a30      	subs	r2, #48	; 0x30
   39278:	2a09      	cmp	r2, #9
   3927a:	d955      	bls.n	39328 <_svfiprintf_r+0x180>
   3927c:	2800      	cmp	r0, #0
   3927e:	d015      	beq.n	392ac <_svfiprintf_r+0x104>
   39280:	9309      	str	r3, [sp, #36]	; 0x24
   39282:	e013      	b.n	392ac <_svfiprintf_r+0x104>
   39284:	2b25      	cmp	r3, #37	; 0x25
   39286:	d0b5      	beq.n	391f4 <_svfiprintf_r+0x4c>
   39288:	3401      	adds	r4, #1
   3928a:	e7b0      	b.n	391ee <_svfiprintf_r+0x46>
   3928c:	2301      	movs	r3, #1
   3928e:	1b80      	subs	r0, r0, r6
   39290:	4083      	lsls	r3, r0
   39292:	6829      	ldr	r1, [r5, #0]
   39294:	0014      	movs	r4, r2
   39296:	430b      	orrs	r3, r1
   39298:	602b      	str	r3, [r5, #0]
   3929a:	e7cd      	b.n	39238 <_svfiprintf_r+0x90>
   3929c:	9b05      	ldr	r3, [sp, #20]
   3929e:	1d18      	adds	r0, r3, #4
   392a0:	681b      	ldr	r3, [r3, #0]
   392a2:	9005      	str	r0, [sp, #20]
   392a4:	2b00      	cmp	r3, #0
   392a6:	db39      	blt.n	3931c <_svfiprintf_r+0x174>
   392a8:	9309      	str	r3, [sp, #36]	; 0x24
   392aa:	0014      	movs	r4, r2
   392ac:	7823      	ldrb	r3, [r4, #0]
   392ae:	2b2e      	cmp	r3, #46	; 0x2e
   392b0:	d10b      	bne.n	392ca <_svfiprintf_r+0x122>
   392b2:	7863      	ldrb	r3, [r4, #1]
   392b4:	1c62      	adds	r2, r4, #1
   392b6:	2b2a      	cmp	r3, #42	; 0x2a
   392b8:	d13e      	bne.n	39338 <_svfiprintf_r+0x190>
   392ba:	9b05      	ldr	r3, [sp, #20]
   392bc:	3402      	adds	r4, #2
   392be:	1d1a      	adds	r2, r3, #4
   392c0:	681b      	ldr	r3, [r3, #0]
   392c2:	9205      	str	r2, [sp, #20]
   392c4:	2b00      	cmp	r3, #0
   392c6:	db34      	blt.n	39332 <_svfiprintf_r+0x18a>
   392c8:	9307      	str	r3, [sp, #28]
   392ca:	4e35      	ldr	r6, [pc, #212]	; (393a0 <_svfiprintf_r+0x1f8>)
   392cc:	7821      	ldrb	r1, [r4, #0]
   392ce:	2203      	movs	r2, #3
   392d0:	0030      	movs	r0, r6
   392d2:	f000 faab 	bl	3982c <memchr>
   392d6:	2800      	cmp	r0, #0
   392d8:	d006      	beq.n	392e8 <_svfiprintf_r+0x140>
   392da:	2340      	movs	r3, #64	; 0x40
   392dc:	1b80      	subs	r0, r0, r6
   392de:	4083      	lsls	r3, r0
   392e0:	682a      	ldr	r2, [r5, #0]
   392e2:	3401      	adds	r4, #1
   392e4:	4313      	orrs	r3, r2
   392e6:	602b      	str	r3, [r5, #0]
   392e8:	7821      	ldrb	r1, [r4, #0]
   392ea:	2206      	movs	r2, #6
   392ec:	482d      	ldr	r0, [pc, #180]	; (393a4 <_svfiprintf_r+0x1fc>)
   392ee:	1c66      	adds	r6, r4, #1
   392f0:	7629      	strb	r1, [r5, #24]
   392f2:	f000 fa9b 	bl	3982c <memchr>
   392f6:	2800      	cmp	r0, #0
   392f8:	d046      	beq.n	39388 <_svfiprintf_r+0x1e0>
   392fa:	4b2b      	ldr	r3, [pc, #172]	; (393a8 <_svfiprintf_r+0x200>)
   392fc:	2b00      	cmp	r3, #0
   392fe:	d12f      	bne.n	39360 <_svfiprintf_r+0x1b8>
   39300:	6829      	ldr	r1, [r5, #0]
   39302:	9b05      	ldr	r3, [sp, #20]
   39304:	2207      	movs	r2, #7
   39306:	05c9      	lsls	r1, r1, #23
   39308:	d528      	bpl.n	3935c <_svfiprintf_r+0x1b4>
   3930a:	189b      	adds	r3, r3, r2
   3930c:	4393      	bics	r3, r2
   3930e:	3308      	adds	r3, #8
   39310:	9305      	str	r3, [sp, #20]
   39312:	696b      	ldr	r3, [r5, #20]
   39314:	9a03      	ldr	r2, [sp, #12]
   39316:	189b      	adds	r3, r3, r2
   39318:	616b      	str	r3, [r5, #20]
   3931a:	e767      	b.n	391ec <_svfiprintf_r+0x44>
   3931c:	425b      	negs	r3, r3
   3931e:	60eb      	str	r3, [r5, #12]
   39320:	2302      	movs	r3, #2
   39322:	430b      	orrs	r3, r1
   39324:	602b      	str	r3, [r5, #0]
   39326:	e7c0      	b.n	392aa <_svfiprintf_r+0x102>
   39328:	434b      	muls	r3, r1
   3932a:	3401      	adds	r4, #1
   3932c:	189b      	adds	r3, r3, r2
   3932e:	2001      	movs	r0, #1
   39330:	e7a0      	b.n	39274 <_svfiprintf_r+0xcc>
   39332:	2301      	movs	r3, #1
   39334:	425b      	negs	r3, r3
   39336:	e7c7      	b.n	392c8 <_svfiprintf_r+0x120>
   39338:	2300      	movs	r3, #0
   3933a:	0014      	movs	r4, r2
   3933c:	200a      	movs	r0, #10
   3933e:	001a      	movs	r2, r3
   39340:	606b      	str	r3, [r5, #4]
   39342:	7821      	ldrb	r1, [r4, #0]
   39344:	3930      	subs	r1, #48	; 0x30
   39346:	2909      	cmp	r1, #9
   39348:	d903      	bls.n	39352 <_svfiprintf_r+0x1aa>
   3934a:	2b00      	cmp	r3, #0
   3934c:	d0bd      	beq.n	392ca <_svfiprintf_r+0x122>
   3934e:	9207      	str	r2, [sp, #28]
   39350:	e7bb      	b.n	392ca <_svfiprintf_r+0x122>
   39352:	4342      	muls	r2, r0
   39354:	3401      	adds	r4, #1
   39356:	1852      	adds	r2, r2, r1
   39358:	2301      	movs	r3, #1
   3935a:	e7f2      	b.n	39342 <_svfiprintf_r+0x19a>
   3935c:	3307      	adds	r3, #7
   3935e:	e7d5      	b.n	3930c <_svfiprintf_r+0x164>
   39360:	ab05      	add	r3, sp, #20
   39362:	9300      	str	r3, [sp, #0]
   39364:	003a      	movs	r2, r7
   39366:	4b11      	ldr	r3, [pc, #68]	; (393ac <_svfiprintf_r+0x204>)
   39368:	0029      	movs	r1, r5
   3936a:	9802      	ldr	r0, [sp, #8]
   3936c:	e000      	b.n	39370 <_svfiprintf_r+0x1c8>
   3936e:	bf00      	nop
   39370:	9003      	str	r0, [sp, #12]
   39372:	9b03      	ldr	r3, [sp, #12]
   39374:	3301      	adds	r3, #1
   39376:	d1cc      	bne.n	39312 <_svfiprintf_r+0x16a>
   39378:	89bb      	ldrh	r3, [r7, #12]
   3937a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   3937c:	065b      	lsls	r3, r3, #25
   3937e:	d400      	bmi.n	39382 <_svfiprintf_r+0x1da>
   39380:	e729      	b.n	391d6 <_svfiprintf_r+0x2e>
   39382:	2001      	movs	r0, #1
   39384:	4240      	negs	r0, r0
   39386:	e726      	b.n	391d6 <_svfiprintf_r+0x2e>
   39388:	ab05      	add	r3, sp, #20
   3938a:	9300      	str	r3, [sp, #0]
   3938c:	003a      	movs	r2, r7
   3938e:	4b07      	ldr	r3, [pc, #28]	; (393ac <_svfiprintf_r+0x204>)
   39390:	0029      	movs	r1, r5
   39392:	9802      	ldr	r0, [sp, #8]
   39394:	f000 f87a 	bl	3948c <_printf_i>
   39398:	e7ea      	b.n	39370 <_svfiprintf_r+0x1c8>
   3939a:	46c0      	nop			; (mov r8, r8)
   3939c:	0003e7fe 	.word	0x0003e7fe
   393a0:	0003e804 	.word	0x0003e804
   393a4:	0003e808 	.word	0x0003e808
   393a8:	00000000 	.word	0x00000000
   393ac:	000390e5 	.word	0x000390e5

000393b0 <_printf_common>:
   393b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   393b2:	0015      	movs	r5, r2
   393b4:	9301      	str	r3, [sp, #4]
   393b6:	688a      	ldr	r2, [r1, #8]
   393b8:	690b      	ldr	r3, [r1, #16]
   393ba:	9000      	str	r0, [sp, #0]
   393bc:	000c      	movs	r4, r1
   393be:	4293      	cmp	r3, r2
   393c0:	da00      	bge.n	393c4 <_printf_common+0x14>
   393c2:	0013      	movs	r3, r2
   393c4:	0022      	movs	r2, r4
   393c6:	602b      	str	r3, [r5, #0]
   393c8:	3243      	adds	r2, #67	; 0x43
   393ca:	7812      	ldrb	r2, [r2, #0]
   393cc:	2a00      	cmp	r2, #0
   393ce:	d001      	beq.n	393d4 <_printf_common+0x24>
   393d0:	3301      	adds	r3, #1
   393d2:	602b      	str	r3, [r5, #0]
   393d4:	6823      	ldr	r3, [r4, #0]
   393d6:	069b      	lsls	r3, r3, #26
   393d8:	d502      	bpl.n	393e0 <_printf_common+0x30>
   393da:	682b      	ldr	r3, [r5, #0]
   393dc:	3302      	adds	r3, #2
   393de:	602b      	str	r3, [r5, #0]
   393e0:	2706      	movs	r7, #6
   393e2:	6823      	ldr	r3, [r4, #0]
   393e4:	401f      	ands	r7, r3
   393e6:	d027      	beq.n	39438 <_printf_common+0x88>
   393e8:	0023      	movs	r3, r4
   393ea:	3343      	adds	r3, #67	; 0x43
   393ec:	781b      	ldrb	r3, [r3, #0]
   393ee:	1e5a      	subs	r2, r3, #1
   393f0:	4193      	sbcs	r3, r2
   393f2:	6822      	ldr	r2, [r4, #0]
   393f4:	0692      	lsls	r2, r2, #26
   393f6:	d430      	bmi.n	3945a <_printf_common+0xaa>
   393f8:	0022      	movs	r2, r4
   393fa:	9901      	ldr	r1, [sp, #4]
   393fc:	3243      	adds	r2, #67	; 0x43
   393fe:	9800      	ldr	r0, [sp, #0]
   39400:	9e08      	ldr	r6, [sp, #32]
   39402:	47b0      	blx	r6
   39404:	1c43      	adds	r3, r0, #1
   39406:	d025      	beq.n	39454 <_printf_common+0xa4>
   39408:	2306      	movs	r3, #6
   3940a:	6820      	ldr	r0, [r4, #0]
   3940c:	682a      	ldr	r2, [r5, #0]
   3940e:	68e1      	ldr	r1, [r4, #12]
   39410:	4003      	ands	r3, r0
   39412:	2500      	movs	r5, #0
   39414:	2b04      	cmp	r3, #4
   39416:	d103      	bne.n	39420 <_printf_common+0x70>
   39418:	1a8d      	subs	r5, r1, r2
   3941a:	43eb      	mvns	r3, r5
   3941c:	17db      	asrs	r3, r3, #31
   3941e:	401d      	ands	r5, r3
   39420:	68a3      	ldr	r3, [r4, #8]
   39422:	6922      	ldr	r2, [r4, #16]
   39424:	4293      	cmp	r3, r2
   39426:	dd01      	ble.n	3942c <_printf_common+0x7c>
   39428:	1a9b      	subs	r3, r3, r2
   3942a:	18ed      	adds	r5, r5, r3
   3942c:	2700      	movs	r7, #0
   3942e:	42bd      	cmp	r5, r7
   39430:	d120      	bne.n	39474 <_printf_common+0xc4>
   39432:	2000      	movs	r0, #0
   39434:	e010      	b.n	39458 <_printf_common+0xa8>
   39436:	3701      	adds	r7, #1
   39438:	68e3      	ldr	r3, [r4, #12]
   3943a:	682a      	ldr	r2, [r5, #0]
   3943c:	1a9b      	subs	r3, r3, r2
   3943e:	429f      	cmp	r7, r3
   39440:	dad2      	bge.n	393e8 <_printf_common+0x38>
   39442:	0022      	movs	r2, r4
   39444:	2301      	movs	r3, #1
   39446:	3219      	adds	r2, #25
   39448:	9901      	ldr	r1, [sp, #4]
   3944a:	9800      	ldr	r0, [sp, #0]
   3944c:	9e08      	ldr	r6, [sp, #32]
   3944e:	47b0      	blx	r6
   39450:	1c43      	adds	r3, r0, #1
   39452:	d1f0      	bne.n	39436 <_printf_common+0x86>
   39454:	2001      	movs	r0, #1
   39456:	4240      	negs	r0, r0
   39458:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3945a:	2030      	movs	r0, #48	; 0x30
   3945c:	18e1      	adds	r1, r4, r3
   3945e:	3143      	adds	r1, #67	; 0x43
   39460:	7008      	strb	r0, [r1, #0]
   39462:	0021      	movs	r1, r4
   39464:	1c5a      	adds	r2, r3, #1
   39466:	3145      	adds	r1, #69	; 0x45
   39468:	7809      	ldrb	r1, [r1, #0]
   3946a:	18a2      	adds	r2, r4, r2
   3946c:	3243      	adds	r2, #67	; 0x43
   3946e:	3302      	adds	r3, #2
   39470:	7011      	strb	r1, [r2, #0]
   39472:	e7c1      	b.n	393f8 <_printf_common+0x48>
   39474:	0022      	movs	r2, r4
   39476:	2301      	movs	r3, #1
   39478:	321a      	adds	r2, #26
   3947a:	9901      	ldr	r1, [sp, #4]
   3947c:	9800      	ldr	r0, [sp, #0]
   3947e:	9e08      	ldr	r6, [sp, #32]
   39480:	47b0      	blx	r6
   39482:	1c43      	adds	r3, r0, #1
   39484:	d0e6      	beq.n	39454 <_printf_common+0xa4>
   39486:	3701      	adds	r7, #1
   39488:	e7d1      	b.n	3942e <_printf_common+0x7e>
	...

0003948c <_printf_i>:
   3948c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3948e:	b08b      	sub	sp, #44	; 0x2c
   39490:	9206      	str	r2, [sp, #24]
   39492:	000a      	movs	r2, r1
   39494:	3243      	adds	r2, #67	; 0x43
   39496:	9307      	str	r3, [sp, #28]
   39498:	9005      	str	r0, [sp, #20]
   3949a:	9204      	str	r2, [sp, #16]
   3949c:	7e0a      	ldrb	r2, [r1, #24]
   3949e:	000c      	movs	r4, r1
   394a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   394a2:	2a6e      	cmp	r2, #110	; 0x6e
   394a4:	d100      	bne.n	394a8 <_printf_i+0x1c>
   394a6:	e08f      	b.n	395c8 <_printf_i+0x13c>
   394a8:	d817      	bhi.n	394da <_printf_i+0x4e>
   394aa:	2a63      	cmp	r2, #99	; 0x63
   394ac:	d02c      	beq.n	39508 <_printf_i+0x7c>
   394ae:	d808      	bhi.n	394c2 <_printf_i+0x36>
   394b0:	2a00      	cmp	r2, #0
   394b2:	d100      	bne.n	394b6 <_printf_i+0x2a>
   394b4:	e099      	b.n	395ea <_printf_i+0x15e>
   394b6:	2a58      	cmp	r2, #88	; 0x58
   394b8:	d054      	beq.n	39564 <_printf_i+0xd8>
   394ba:	0026      	movs	r6, r4
   394bc:	3642      	adds	r6, #66	; 0x42
   394be:	7032      	strb	r2, [r6, #0]
   394c0:	e029      	b.n	39516 <_printf_i+0x8a>
   394c2:	2a64      	cmp	r2, #100	; 0x64
   394c4:	d001      	beq.n	394ca <_printf_i+0x3e>
   394c6:	2a69      	cmp	r2, #105	; 0x69
   394c8:	d1f7      	bne.n	394ba <_printf_i+0x2e>
   394ca:	6821      	ldr	r1, [r4, #0]
   394cc:	681a      	ldr	r2, [r3, #0]
   394ce:	0608      	lsls	r0, r1, #24
   394d0:	d523      	bpl.n	3951a <_printf_i+0x8e>
   394d2:	1d11      	adds	r1, r2, #4
   394d4:	6019      	str	r1, [r3, #0]
   394d6:	6815      	ldr	r5, [r2, #0]
   394d8:	e025      	b.n	39526 <_printf_i+0x9a>
   394da:	2a73      	cmp	r2, #115	; 0x73
   394dc:	d100      	bne.n	394e0 <_printf_i+0x54>
   394de:	e088      	b.n	395f2 <_printf_i+0x166>
   394e0:	d808      	bhi.n	394f4 <_printf_i+0x68>
   394e2:	2a6f      	cmp	r2, #111	; 0x6f
   394e4:	d029      	beq.n	3953a <_printf_i+0xae>
   394e6:	2a70      	cmp	r2, #112	; 0x70
   394e8:	d1e7      	bne.n	394ba <_printf_i+0x2e>
   394ea:	2220      	movs	r2, #32
   394ec:	6809      	ldr	r1, [r1, #0]
   394ee:	430a      	orrs	r2, r1
   394f0:	6022      	str	r2, [r4, #0]
   394f2:	e003      	b.n	394fc <_printf_i+0x70>
   394f4:	2a75      	cmp	r2, #117	; 0x75
   394f6:	d020      	beq.n	3953a <_printf_i+0xae>
   394f8:	2a78      	cmp	r2, #120	; 0x78
   394fa:	d1de      	bne.n	394ba <_printf_i+0x2e>
   394fc:	0022      	movs	r2, r4
   394fe:	2178      	movs	r1, #120	; 0x78
   39500:	3245      	adds	r2, #69	; 0x45
   39502:	7011      	strb	r1, [r2, #0]
   39504:	4a6c      	ldr	r2, [pc, #432]	; (396b8 <_printf_i+0x22c>)
   39506:	e030      	b.n	3956a <_printf_i+0xde>
   39508:	000e      	movs	r6, r1
   3950a:	681a      	ldr	r2, [r3, #0]
   3950c:	3642      	adds	r6, #66	; 0x42
   3950e:	1d11      	adds	r1, r2, #4
   39510:	6019      	str	r1, [r3, #0]
   39512:	6813      	ldr	r3, [r2, #0]
   39514:	7033      	strb	r3, [r6, #0]
   39516:	2301      	movs	r3, #1
   39518:	e079      	b.n	3960e <_printf_i+0x182>
   3951a:	0649      	lsls	r1, r1, #25
   3951c:	d5d9      	bpl.n	394d2 <_printf_i+0x46>
   3951e:	1d11      	adds	r1, r2, #4
   39520:	6019      	str	r1, [r3, #0]
   39522:	2300      	movs	r3, #0
   39524:	5ed5      	ldrsh	r5, [r2, r3]
   39526:	2d00      	cmp	r5, #0
   39528:	da03      	bge.n	39532 <_printf_i+0xa6>
   3952a:	232d      	movs	r3, #45	; 0x2d
   3952c:	9a04      	ldr	r2, [sp, #16]
   3952e:	426d      	negs	r5, r5
   39530:	7013      	strb	r3, [r2, #0]
   39532:	4b62      	ldr	r3, [pc, #392]	; (396bc <_printf_i+0x230>)
   39534:	270a      	movs	r7, #10
   39536:	9303      	str	r3, [sp, #12]
   39538:	e02f      	b.n	3959a <_printf_i+0x10e>
   3953a:	6820      	ldr	r0, [r4, #0]
   3953c:	6819      	ldr	r1, [r3, #0]
   3953e:	0605      	lsls	r5, r0, #24
   39540:	d503      	bpl.n	3954a <_printf_i+0xbe>
   39542:	1d08      	adds	r0, r1, #4
   39544:	6018      	str	r0, [r3, #0]
   39546:	680d      	ldr	r5, [r1, #0]
   39548:	e005      	b.n	39556 <_printf_i+0xca>
   3954a:	0640      	lsls	r0, r0, #25
   3954c:	d5f9      	bpl.n	39542 <_printf_i+0xb6>
   3954e:	680d      	ldr	r5, [r1, #0]
   39550:	1d08      	adds	r0, r1, #4
   39552:	6018      	str	r0, [r3, #0]
   39554:	b2ad      	uxth	r5, r5
   39556:	4b59      	ldr	r3, [pc, #356]	; (396bc <_printf_i+0x230>)
   39558:	2708      	movs	r7, #8
   3955a:	9303      	str	r3, [sp, #12]
   3955c:	2a6f      	cmp	r2, #111	; 0x6f
   3955e:	d018      	beq.n	39592 <_printf_i+0x106>
   39560:	270a      	movs	r7, #10
   39562:	e016      	b.n	39592 <_printf_i+0x106>
   39564:	3145      	adds	r1, #69	; 0x45
   39566:	700a      	strb	r2, [r1, #0]
   39568:	4a54      	ldr	r2, [pc, #336]	; (396bc <_printf_i+0x230>)
   3956a:	9203      	str	r2, [sp, #12]
   3956c:	681a      	ldr	r2, [r3, #0]
   3956e:	6821      	ldr	r1, [r4, #0]
   39570:	1d10      	adds	r0, r2, #4
   39572:	6018      	str	r0, [r3, #0]
   39574:	6815      	ldr	r5, [r2, #0]
   39576:	0608      	lsls	r0, r1, #24
   39578:	d522      	bpl.n	395c0 <_printf_i+0x134>
   3957a:	07cb      	lsls	r3, r1, #31
   3957c:	d502      	bpl.n	39584 <_printf_i+0xf8>
   3957e:	2320      	movs	r3, #32
   39580:	4319      	orrs	r1, r3
   39582:	6021      	str	r1, [r4, #0]
   39584:	2710      	movs	r7, #16
   39586:	2d00      	cmp	r5, #0
   39588:	d103      	bne.n	39592 <_printf_i+0x106>
   3958a:	2320      	movs	r3, #32
   3958c:	6822      	ldr	r2, [r4, #0]
   3958e:	439a      	bics	r2, r3
   39590:	6022      	str	r2, [r4, #0]
   39592:	0023      	movs	r3, r4
   39594:	2200      	movs	r2, #0
   39596:	3343      	adds	r3, #67	; 0x43
   39598:	701a      	strb	r2, [r3, #0]
   3959a:	6863      	ldr	r3, [r4, #4]
   3959c:	60a3      	str	r3, [r4, #8]
   3959e:	2b00      	cmp	r3, #0
   395a0:	db5c      	blt.n	3965c <_printf_i+0x1d0>
   395a2:	2204      	movs	r2, #4
   395a4:	6821      	ldr	r1, [r4, #0]
   395a6:	4391      	bics	r1, r2
   395a8:	6021      	str	r1, [r4, #0]
   395aa:	2d00      	cmp	r5, #0
   395ac:	d158      	bne.n	39660 <_printf_i+0x1d4>
   395ae:	9e04      	ldr	r6, [sp, #16]
   395b0:	2b00      	cmp	r3, #0
   395b2:	d064      	beq.n	3967e <_printf_i+0x1f2>
   395b4:	0026      	movs	r6, r4
   395b6:	9b03      	ldr	r3, [sp, #12]
   395b8:	3642      	adds	r6, #66	; 0x42
   395ba:	781b      	ldrb	r3, [r3, #0]
   395bc:	7033      	strb	r3, [r6, #0]
   395be:	e05e      	b.n	3967e <_printf_i+0x1f2>
   395c0:	0648      	lsls	r0, r1, #25
   395c2:	d5da      	bpl.n	3957a <_printf_i+0xee>
   395c4:	b2ad      	uxth	r5, r5
   395c6:	e7d8      	b.n	3957a <_printf_i+0xee>
   395c8:	6809      	ldr	r1, [r1, #0]
   395ca:	681a      	ldr	r2, [r3, #0]
   395cc:	0608      	lsls	r0, r1, #24
   395ce:	d505      	bpl.n	395dc <_printf_i+0x150>
   395d0:	1d11      	adds	r1, r2, #4
   395d2:	6019      	str	r1, [r3, #0]
   395d4:	6813      	ldr	r3, [r2, #0]
   395d6:	6962      	ldr	r2, [r4, #20]
   395d8:	601a      	str	r2, [r3, #0]
   395da:	e006      	b.n	395ea <_printf_i+0x15e>
   395dc:	0649      	lsls	r1, r1, #25
   395de:	d5f7      	bpl.n	395d0 <_printf_i+0x144>
   395e0:	1d11      	adds	r1, r2, #4
   395e2:	6019      	str	r1, [r3, #0]
   395e4:	6813      	ldr	r3, [r2, #0]
   395e6:	8aa2      	ldrh	r2, [r4, #20]
   395e8:	801a      	strh	r2, [r3, #0]
   395ea:	2300      	movs	r3, #0
   395ec:	9e04      	ldr	r6, [sp, #16]
   395ee:	6123      	str	r3, [r4, #16]
   395f0:	e054      	b.n	3969c <_printf_i+0x210>
   395f2:	681a      	ldr	r2, [r3, #0]
   395f4:	1d11      	adds	r1, r2, #4
   395f6:	6019      	str	r1, [r3, #0]
   395f8:	6816      	ldr	r6, [r2, #0]
   395fa:	2100      	movs	r1, #0
   395fc:	6862      	ldr	r2, [r4, #4]
   395fe:	0030      	movs	r0, r6
   39600:	f000 f914 	bl	3982c <memchr>
   39604:	2800      	cmp	r0, #0
   39606:	d001      	beq.n	3960c <_printf_i+0x180>
   39608:	1b80      	subs	r0, r0, r6
   3960a:	6060      	str	r0, [r4, #4]
   3960c:	6863      	ldr	r3, [r4, #4]
   3960e:	6123      	str	r3, [r4, #16]
   39610:	2300      	movs	r3, #0
   39612:	9a04      	ldr	r2, [sp, #16]
   39614:	7013      	strb	r3, [r2, #0]
   39616:	e041      	b.n	3969c <_printf_i+0x210>
   39618:	6923      	ldr	r3, [r4, #16]
   3961a:	0032      	movs	r2, r6
   3961c:	9906      	ldr	r1, [sp, #24]
   3961e:	9805      	ldr	r0, [sp, #20]
   39620:	9d07      	ldr	r5, [sp, #28]
   39622:	47a8      	blx	r5
   39624:	1c43      	adds	r3, r0, #1
   39626:	d043      	beq.n	396b0 <_printf_i+0x224>
   39628:	6823      	ldr	r3, [r4, #0]
   3962a:	2500      	movs	r5, #0
   3962c:	079b      	lsls	r3, r3, #30
   3962e:	d40f      	bmi.n	39650 <_printf_i+0x1c4>
   39630:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39632:	68e0      	ldr	r0, [r4, #12]
   39634:	4298      	cmp	r0, r3
   39636:	da3d      	bge.n	396b4 <_printf_i+0x228>
   39638:	0018      	movs	r0, r3
   3963a:	e03b      	b.n	396b4 <_printf_i+0x228>
   3963c:	0022      	movs	r2, r4
   3963e:	2301      	movs	r3, #1
   39640:	3219      	adds	r2, #25
   39642:	9906      	ldr	r1, [sp, #24]
   39644:	9805      	ldr	r0, [sp, #20]
   39646:	9e07      	ldr	r6, [sp, #28]
   39648:	47b0      	blx	r6
   3964a:	1c43      	adds	r3, r0, #1
   3964c:	d030      	beq.n	396b0 <_printf_i+0x224>
   3964e:	3501      	adds	r5, #1
   39650:	68e3      	ldr	r3, [r4, #12]
   39652:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39654:	1a9b      	subs	r3, r3, r2
   39656:	429d      	cmp	r5, r3
   39658:	dbf0      	blt.n	3963c <_printf_i+0x1b0>
   3965a:	e7e9      	b.n	39630 <_printf_i+0x1a4>
   3965c:	2d00      	cmp	r5, #0
   3965e:	d0a9      	beq.n	395b4 <_printf_i+0x128>
   39660:	9e04      	ldr	r6, [sp, #16]
   39662:	0028      	movs	r0, r5
   39664:	0039      	movs	r1, r7
   39666:	f7fc fa49 	bl	35afc <__aeabi_uidivmod>
   3966a:	9b03      	ldr	r3, [sp, #12]
   3966c:	3e01      	subs	r6, #1
   3966e:	5c5b      	ldrb	r3, [r3, r1]
   39670:	0028      	movs	r0, r5
   39672:	7033      	strb	r3, [r6, #0]
   39674:	0039      	movs	r1, r7
   39676:	f7fc f9bb 	bl	359f0 <__udivsi3>
   3967a:	1e05      	subs	r5, r0, #0
   3967c:	d1f1      	bne.n	39662 <_printf_i+0x1d6>
   3967e:	2f08      	cmp	r7, #8
   39680:	d109      	bne.n	39696 <_printf_i+0x20a>
   39682:	6823      	ldr	r3, [r4, #0]
   39684:	07db      	lsls	r3, r3, #31
   39686:	d506      	bpl.n	39696 <_printf_i+0x20a>
   39688:	6863      	ldr	r3, [r4, #4]
   3968a:	6922      	ldr	r2, [r4, #16]
   3968c:	4293      	cmp	r3, r2
   3968e:	dc02      	bgt.n	39696 <_printf_i+0x20a>
   39690:	2330      	movs	r3, #48	; 0x30
   39692:	3e01      	subs	r6, #1
   39694:	7033      	strb	r3, [r6, #0]
   39696:	9b04      	ldr	r3, [sp, #16]
   39698:	1b9b      	subs	r3, r3, r6
   3969a:	6123      	str	r3, [r4, #16]
   3969c:	9b07      	ldr	r3, [sp, #28]
   3969e:	aa09      	add	r2, sp, #36	; 0x24
   396a0:	9300      	str	r3, [sp, #0]
   396a2:	0021      	movs	r1, r4
   396a4:	9b06      	ldr	r3, [sp, #24]
   396a6:	9805      	ldr	r0, [sp, #20]
   396a8:	f7ff fe82 	bl	393b0 <_printf_common>
   396ac:	1c43      	adds	r3, r0, #1
   396ae:	d1b3      	bne.n	39618 <_printf_i+0x18c>
   396b0:	2001      	movs	r0, #1
   396b2:	4240      	negs	r0, r0
   396b4:	b00b      	add	sp, #44	; 0x2c
   396b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   396b8:	0003e820 	.word	0x0003e820
   396bc:	0003e80f 	.word	0x0003e80f

000396c0 <__sread>:
   396c0:	b570      	push	{r4, r5, r6, lr}
   396c2:	000c      	movs	r4, r1
   396c4:	250e      	movs	r5, #14
   396c6:	5f49      	ldrsh	r1, [r1, r5]
   396c8:	f000 f8e2 	bl	39890 <_read_r>
   396cc:	2800      	cmp	r0, #0
   396ce:	db03      	blt.n	396d8 <__sread+0x18>
   396d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   396d2:	181b      	adds	r3, r3, r0
   396d4:	6563      	str	r3, [r4, #84]	; 0x54
   396d6:	bd70      	pop	{r4, r5, r6, pc}
   396d8:	89a3      	ldrh	r3, [r4, #12]
   396da:	4a02      	ldr	r2, [pc, #8]	; (396e4 <__sread+0x24>)
   396dc:	4013      	ands	r3, r2
   396de:	81a3      	strh	r3, [r4, #12]
   396e0:	e7f9      	b.n	396d6 <__sread+0x16>
   396e2:	46c0      	nop			; (mov r8, r8)
   396e4:	ffffefff 	.word	0xffffefff

000396e8 <__swrite>:
   396e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   396ea:	001f      	movs	r7, r3
   396ec:	898b      	ldrh	r3, [r1, #12]
   396ee:	0005      	movs	r5, r0
   396f0:	000c      	movs	r4, r1
   396f2:	0016      	movs	r6, r2
   396f4:	05db      	lsls	r3, r3, #23
   396f6:	d505      	bpl.n	39704 <__swrite+0x1c>
   396f8:	230e      	movs	r3, #14
   396fa:	5ec9      	ldrsh	r1, [r1, r3]
   396fc:	2200      	movs	r2, #0
   396fe:	2302      	movs	r3, #2
   39700:	f000 f880 	bl	39804 <_lseek_r>
   39704:	89a3      	ldrh	r3, [r4, #12]
   39706:	4a05      	ldr	r2, [pc, #20]	; (3971c <__swrite+0x34>)
   39708:	0028      	movs	r0, r5
   3970a:	4013      	ands	r3, r2
   3970c:	81a3      	strh	r3, [r4, #12]
   3970e:	0032      	movs	r2, r6
   39710:	230e      	movs	r3, #14
   39712:	5ee1      	ldrsh	r1, [r4, r3]
   39714:	003b      	movs	r3, r7
   39716:	f000 f82b 	bl	39770 <_write_r>
   3971a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3971c:	ffffefff 	.word	0xffffefff

00039720 <__sseek>:
   39720:	b570      	push	{r4, r5, r6, lr}
   39722:	000c      	movs	r4, r1
   39724:	250e      	movs	r5, #14
   39726:	5f49      	ldrsh	r1, [r1, r5]
   39728:	f000 f86c 	bl	39804 <_lseek_r>
   3972c:	89a3      	ldrh	r3, [r4, #12]
   3972e:	1c42      	adds	r2, r0, #1
   39730:	d103      	bne.n	3973a <__sseek+0x1a>
   39732:	4a05      	ldr	r2, [pc, #20]	; (39748 <__sseek+0x28>)
   39734:	4013      	ands	r3, r2
   39736:	81a3      	strh	r3, [r4, #12]
   39738:	bd70      	pop	{r4, r5, r6, pc}
   3973a:	2280      	movs	r2, #128	; 0x80
   3973c:	0152      	lsls	r2, r2, #5
   3973e:	4313      	orrs	r3, r2
   39740:	81a3      	strh	r3, [r4, #12]
   39742:	6560      	str	r0, [r4, #84]	; 0x54
   39744:	e7f8      	b.n	39738 <__sseek+0x18>
   39746:	46c0      	nop			; (mov r8, r8)
   39748:	ffffefff 	.word	0xffffefff

0003974c <__sclose>:
   3974c:	b510      	push	{r4, lr}
   3974e:	230e      	movs	r3, #14
   39750:	5ec9      	ldrsh	r1, [r1, r3]
   39752:	f000 f821 	bl	39798 <_close_r>
   39756:	bd10      	pop	{r4, pc}

00039758 <__ascii_wctomb>:
   39758:	1e0b      	subs	r3, r1, #0
   3975a:	d004      	beq.n	39766 <__ascii_wctomb+0xe>
   3975c:	2aff      	cmp	r2, #255	; 0xff
   3975e:	d904      	bls.n	3976a <__ascii_wctomb+0x12>
   39760:	238a      	movs	r3, #138	; 0x8a
   39762:	6003      	str	r3, [r0, #0]
   39764:	3b8b      	subs	r3, #139	; 0x8b
   39766:	0018      	movs	r0, r3
   39768:	4770      	bx	lr
   3976a:	700a      	strb	r2, [r1, #0]
   3976c:	2301      	movs	r3, #1
   3976e:	e7fa      	b.n	39766 <__ascii_wctomb+0xe>

00039770 <_write_r>:
   39770:	b570      	push	{r4, r5, r6, lr}
   39772:	0005      	movs	r5, r0
   39774:	0008      	movs	r0, r1
   39776:	0011      	movs	r1, r2
   39778:	2200      	movs	r2, #0
   3977a:	4c06      	ldr	r4, [pc, #24]	; (39794 <_write_r+0x24>)
   3977c:	6022      	str	r2, [r4, #0]
   3977e:	001a      	movs	r2, r3
   39780:	f7f4 fc96 	bl	2e0b0 <_write>
   39784:	1c43      	adds	r3, r0, #1
   39786:	d103      	bne.n	39790 <_write_r+0x20>
   39788:	6823      	ldr	r3, [r4, #0]
   3978a:	2b00      	cmp	r3, #0
   3978c:	d000      	beq.n	39790 <_write_r+0x20>
   3978e:	602b      	str	r3, [r5, #0]
   39790:	bd70      	pop	{r4, r5, r6, pc}
   39792:	46c0      	nop			; (mov r8, r8)
   39794:	20005ca4 	.word	0x20005ca4

00039798 <_close_r>:
   39798:	2300      	movs	r3, #0
   3979a:	b570      	push	{r4, r5, r6, lr}
   3979c:	4c06      	ldr	r4, [pc, #24]	; (397b8 <_close_r+0x20>)
   3979e:	0005      	movs	r5, r0
   397a0:	0008      	movs	r0, r1
   397a2:	6023      	str	r3, [r4, #0]
   397a4:	f7f4 fcd8 	bl	2e158 <_close>
   397a8:	1c43      	adds	r3, r0, #1
   397aa:	d103      	bne.n	397b4 <_close_r+0x1c>
   397ac:	6823      	ldr	r3, [r4, #0]
   397ae:	2b00      	cmp	r3, #0
   397b0:	d000      	beq.n	397b4 <_close_r+0x1c>
   397b2:	602b      	str	r3, [r5, #0]
   397b4:	bd70      	pop	{r4, r5, r6, pc}
   397b6:	46c0      	nop			; (mov r8, r8)
   397b8:	20005ca4 	.word	0x20005ca4

000397bc <_fstat_r>:
   397bc:	2300      	movs	r3, #0
   397be:	b570      	push	{r4, r5, r6, lr}
   397c0:	4c06      	ldr	r4, [pc, #24]	; (397dc <_fstat_r+0x20>)
   397c2:	0005      	movs	r5, r0
   397c4:	0008      	movs	r0, r1
   397c6:	0011      	movs	r1, r2
   397c8:	6023      	str	r3, [r4, #0]
   397ca:	f7f4 fccf 	bl	2e16c <_fstat>
   397ce:	1c43      	adds	r3, r0, #1
   397d0:	d103      	bne.n	397da <_fstat_r+0x1e>
   397d2:	6823      	ldr	r3, [r4, #0]
   397d4:	2b00      	cmp	r3, #0
   397d6:	d000      	beq.n	397da <_fstat_r+0x1e>
   397d8:	602b      	str	r3, [r5, #0]
   397da:	bd70      	pop	{r4, r5, r6, pc}
   397dc:	20005ca4 	.word	0x20005ca4

000397e0 <_isatty_r>:
   397e0:	2300      	movs	r3, #0
   397e2:	b570      	push	{r4, r5, r6, lr}
   397e4:	4c06      	ldr	r4, [pc, #24]	; (39800 <_isatty_r+0x20>)
   397e6:	0005      	movs	r5, r0
   397e8:	0008      	movs	r0, r1
   397ea:	6023      	str	r3, [r4, #0]
   397ec:	f7f4 fccc 	bl	2e188 <_isatty>
   397f0:	1c43      	adds	r3, r0, #1
   397f2:	d103      	bne.n	397fc <_isatty_r+0x1c>
   397f4:	6823      	ldr	r3, [r4, #0]
   397f6:	2b00      	cmp	r3, #0
   397f8:	d000      	beq.n	397fc <_isatty_r+0x1c>
   397fa:	602b      	str	r3, [r5, #0]
   397fc:	bd70      	pop	{r4, r5, r6, pc}
   397fe:	46c0      	nop			; (mov r8, r8)
   39800:	20005ca4 	.word	0x20005ca4

00039804 <_lseek_r>:
   39804:	b570      	push	{r4, r5, r6, lr}
   39806:	0005      	movs	r5, r0
   39808:	0008      	movs	r0, r1
   3980a:	0011      	movs	r1, r2
   3980c:	2200      	movs	r2, #0
   3980e:	4c06      	ldr	r4, [pc, #24]	; (39828 <_lseek_r+0x24>)
   39810:	6022      	str	r2, [r4, #0]
   39812:	001a      	movs	r2, r3
   39814:	f7f4 fcc1 	bl	2e19a <_lseek>
   39818:	1c43      	adds	r3, r0, #1
   3981a:	d103      	bne.n	39824 <_lseek_r+0x20>
   3981c:	6823      	ldr	r3, [r4, #0]
   3981e:	2b00      	cmp	r3, #0
   39820:	d000      	beq.n	39824 <_lseek_r+0x20>
   39822:	602b      	str	r3, [r5, #0]
   39824:	bd70      	pop	{r4, r5, r6, pc}
   39826:	46c0      	nop			; (mov r8, r8)
   39828:	20005ca4 	.word	0x20005ca4

0003982c <memchr>:
   3982c:	b2c9      	uxtb	r1, r1
   3982e:	1882      	adds	r2, r0, r2
   39830:	4290      	cmp	r0, r2
   39832:	d101      	bne.n	39838 <memchr+0xc>
   39834:	2000      	movs	r0, #0
   39836:	4770      	bx	lr
   39838:	7803      	ldrb	r3, [r0, #0]
   3983a:	428b      	cmp	r3, r1
   3983c:	d0fb      	beq.n	39836 <memchr+0xa>
   3983e:	3001      	adds	r0, #1
   39840:	e7f6      	b.n	39830 <memchr+0x4>

00039842 <_realloc_r>:
   39842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39844:	0007      	movs	r7, r0
   39846:	000d      	movs	r5, r1
   39848:	0016      	movs	r6, r2
   3984a:	2900      	cmp	r1, #0
   3984c:	d105      	bne.n	3985a <_realloc_r+0x18>
   3984e:	0011      	movs	r1, r2
   39850:	f7fe feac 	bl	385ac <_malloc_r>
   39854:	0004      	movs	r4, r0
   39856:	0020      	movs	r0, r4
   39858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3985a:	2a00      	cmp	r2, #0
   3985c:	d103      	bne.n	39866 <_realloc_r+0x24>
   3985e:	f7fe fe5b 	bl	38518 <_free_r>
   39862:	0034      	movs	r4, r6
   39864:	e7f7      	b.n	39856 <_realloc_r+0x14>
   39866:	f000 f827 	bl	398b8 <_malloc_usable_size_r>
   3986a:	002c      	movs	r4, r5
   3986c:	4286      	cmp	r6, r0
   3986e:	d9f2      	bls.n	39856 <_realloc_r+0x14>
   39870:	0031      	movs	r1, r6
   39872:	0038      	movs	r0, r7
   39874:	f7fe fe9a 	bl	385ac <_malloc_r>
   39878:	1e04      	subs	r4, r0, #0
   3987a:	d0ec      	beq.n	39856 <_realloc_r+0x14>
   3987c:	0029      	movs	r1, r5
   3987e:	0032      	movs	r2, r6
   39880:	f7fe fe26 	bl	384d0 <memcpy>
   39884:	0029      	movs	r1, r5
   39886:	0038      	movs	r0, r7
   39888:	f7fe fe46 	bl	38518 <_free_r>
   3988c:	e7e3      	b.n	39856 <_realloc_r+0x14>
	...

00039890 <_read_r>:
   39890:	b570      	push	{r4, r5, r6, lr}
   39892:	0005      	movs	r5, r0
   39894:	0008      	movs	r0, r1
   39896:	0011      	movs	r1, r2
   39898:	2200      	movs	r2, #0
   3989a:	4c06      	ldr	r4, [pc, #24]	; (398b4 <_read_r+0x24>)
   3989c:	6022      	str	r2, [r4, #0]
   3989e:	001a      	movs	r2, r3
   398a0:	f7f4 fbdc 	bl	2e05c <_read>
   398a4:	1c43      	adds	r3, r0, #1
   398a6:	d103      	bne.n	398b0 <_read_r+0x20>
   398a8:	6823      	ldr	r3, [r4, #0]
   398aa:	2b00      	cmp	r3, #0
   398ac:	d000      	beq.n	398b0 <_read_r+0x20>
   398ae:	602b      	str	r3, [r5, #0]
   398b0:	bd70      	pop	{r4, r5, r6, pc}
   398b2:	46c0      	nop			; (mov r8, r8)
   398b4:	20005ca4 	.word	0x20005ca4

000398b8 <_malloc_usable_size_r>:
   398b8:	1f0b      	subs	r3, r1, #4
   398ba:	681b      	ldr	r3, [r3, #0]
   398bc:	1f18      	subs	r0, r3, #4
   398be:	2b00      	cmp	r3, #0
   398c0:	da01      	bge.n	398c6 <_malloc_usable_size_r+0xe>
   398c2:	580b      	ldr	r3, [r1, r0]
   398c4:	18c0      	adds	r0, r0, r3
   398c6:	4770      	bx	lr

000398c8 <ASCII>:
   398c8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   398d8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   398e8:	2255 0050 0305 0000 1c00 4122 0000 2241     U"P......."A..A"
   398f8:	001c 0814 083e 0814 3e08 0808 5000 0030     ....>....>...P0.
   39908:	0800 0808 0808 6000 0060 2000 0810 0204     .......``.. ....
   39918:	513e 4549 003e 7f42 0040 6142 4951 2146     >QIE>.B.@.BaQIF!
   39928:	4541 314b 1418 7f12 2710 4545 3945 4a3c     AEK1.....'EEE9<J
   39938:	4949 0130 0971 0305 4936 4949 0636 4949     II0.q...6III6.II
   39948:	1e29 3600 0036 0000 3656 0000 1408 4122     )..66...V6...."A
   39958:	1400 1414 1414 4100 1422 0208 5101 0609     .......A"....Q..
   39968:	4932 4179 7e3e 1111 7e11 497f 4949 3e36     2IyA>~...~.III6>
   39978:	4141 2241 417f 2241 7f1c 4949 4149 097f     AAA".AA"..IIIA..
   39988:	0909 3e01 4941 7a49 087f 0808 007f 7f41     ...>AIIz......A.
   39998:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   399a8:	7f40 0c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   399b8:	097f 0909 3e06 5141 5e21 097f 2919 4646     .....>AQ!^...)FF
   399c8:	4949 3149 0101 017f 3f01 4040 3f40 201f     III1.....?@@@?. 
   399d8:	2040 3f1f 3840 3f40 1463 1408 0763 7008     @ .?@8@?c...c..p
   399e8:	0708 5161 4549 0043 417f 0041 0402 1008     ..aQIEC..AA.....
   399f8:	0020 4141 007f 0204 0201 4004 4040 4040      .AA.......@@@@@
   39a08:	0100 0402 2000 5454 7854 487f 4444 3838     ..... TTTx.HDD88
   39a18:	4444 2044 4438 4844 387f 5454 1854 7e08     DDD 8DDH.8TTT..~
   39a28:	0109 0c02 5252 3e52 087f 0404 0078 7d44     ....RRR>....x.D}
   39a38:	0040 4020 3d44 7f00 2810 0044 4100 407f     @. @D=...(D..A.@
   39a48:	7c00 1804 7804 087c 0404 3878 4444 3844     .|...x|...x8DDD8
   39a58:	147c 1414 0808 1414 7c18 087c 0404 4808     |........||....H
   39a68:	5454 2054 3f04 4044 3c20 4040 7c20 201c     TTT .?D@ <@@ |. 
   39a78:	2040 3c1c 3040 3c40 2844 2810 0c44 5050     @ .<@0@<D(.(D.PP
   39a88:	3c50 6444 4c54 0044 3608 0041 0000 007f     P<DdTLD..6A.....
   39a98:	0000 3641 0008 0810 1008 0008 0906 0609     ..A6............
   39aa8:	4f49 2054 6157 6374 2068 3156 302e 0000     IOT Watch V1.0..
   39ab8:	204d 2053 2047 003a 2054 2049 204d 2045     M S G :.T I M E 
   39ac8:	003a 0000 4955 5420 7361 206b 7453 7261     :...UI Task Star
   39ad8:	6574 2164 0000 0000 6554 706d 7265 7461     ted!....Temperat
   39ae8:	7275 2065 6f4d 6564 0d21 000a 6548 7261     ure Mode!...Hear
   39af8:	2074 6152 6574 4d20 646f 2165 0a0d 0000     t Rate Mode!....
   39b08:	2048 2045 2041 2052 2054 5220 4120 5420     H E A R T  R A T
   39b18:	4520 0000 6e45 6574 6972 676e 2e20 2e2e      E..Entering ...
   39b28:	2e20 2e2e 0000 0000 7550 2074 6e6f 7920      .......Put on y
   39b38:	756f 2072 6966 676e 7265 202c 6c70 007a     our finger, plz.
   39b48:	7453 7261 6974 676e 2e20 2e2e 2e20 2e2e     Starting ... ...
   39b58:	2020 2020 2020 0020 4820 5220 3a20 2020            . H R :  
   39b68:	2020 2020 4620 4941 454c 2044 2121 2020          FAILED !!  
   39b78:	0000 0000 4820 5220 3a20 2020 2020 2020     .... H R :      
   39b88:	2520 2f64 696d 206e 2020 2020 0000 0000      %d/min     ....
   39b98:	5320 5020 4f20 3220 3a20 2020 2520 2064      S P O 2 :   %d 
   39ba8:	2020 2020 2020 2020 0000 0000 2054 2045             ....T E 
   39bb8:	204d 2050 2045 2052 2041 2054 2055 2052     M P E R A T U R 
   39bc8:	0045 0000 6554 706d 7265 7461 7275 3a65     E...Temperature:
   39bd8:	2520 2064 6564 4367 0000 0000 2054 2045      %d degC....T E 
   39be8:	204d 3a50 2020 6425 4420 6765 0043 0000     M P:  %d DegC...

00039bf8 <pcWelcomeMessage>:
   39bf8:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   39c08:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   39c18:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   39c28:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   39c38:	000a 0000 6361 0063 6361 3a63 5220 7465     ....acc.acc: Ret
   39c48:	7275 736e 7420 6568 7620 6c61 6575 6620     urns the value f
   39c58:	6f72 206d 6341 6563 656c 6f72 656d 6574     rom Acceleromete
   39c68:	2872 494c 3253 4844 3231 0d29 000a 0000     r(LIS2DH12).....
   39c78:	616d 0078 616d 3a78 5220 7465 7275 736e     max.max: Returns
   39c88:	7420 6568 7620 6c61 6575 6620 6f72 206d      the value from 
   39c98:	6548 7261 2074 6172 6574 6320 696c 6b63     Heart rate click
   39ca8:	6d28 7861 3033 3031 2932 0a0d 0000 0000     (max30102)......
   39cb8:	696c 7473 706d 0000 696c 7473 706d 203a     listmp..listmp: 
   39cc8:	6552 7574 6e72 2073 6874 2065 6574 706d     Returns the temp
   39cd8:	7265 7461 7275 2065 7266 6d6f 4120 6363     erature from Acc
   39ce8:	6c65 7265 6d6f 7465 7265 4c28 5349 4432     elerometer(LIS2D
   39cf8:	3148 2932 0a0d 0000 7766 0000 7766 203a     H12)....fw..fw: 
   39d08:	6f44 6e77 6f6c 6461 6120 6620 6c69 2065     Download a file 
   39d18:	6e61 2064 6570 6672 726f 206d 6e61 4620     and perform an F
   39d28:	2057 7075 6164 6574 0a0d 0000 6572 6573     W update....rese
   39d38:	0074 0000 6572 6573 3a74 5220 7365 7465     t...reset: Reset
   39d48:	2073 6874 2065 6564 6976 6563 0a0d 0000     s the device....
   39d58:	3269 0063 3269 3a63 5320 6163 736e 4920     i2c.i2c: Scans I
   39d68:	4332 6220 7375 0a0d 0000 0000 6c63 0073     2C bus......cls.
   39d78:	6c63 3a73 4320 656c 7261 2073 6874 2065     cls: Clears the 
   39d88:	6574 6d72 6e69 6c61 7320 7263 6565 0d6e     terminal screen.
   39d98:	000a 0000 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   39da8:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   39db8:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   39dc8:	0d4b 003e 2008 0008 6341 6563 656c 6172     K.>.. ..Accelera
   39dd8:	6974 6e6f 5b20 676d 3a5d 2058 6425 5909     tion [mg]:X %d.Y
   39de8:	2520 0964 205a 6425 0a0d 0000 6341 6563      %d.Z %d....Acce
   39df8:	656c 6172 6974 6e6f 6420 7461 2061 7075     leration data up
   39e08:	6164 6574 6620 6961 656c 2164 4e20 206f     date failed! No 
   39e18:	6164 6174 7320 6e65 2e74 0000 6f4e 6420     data sent...No d
   39e28:	7461 2061 6572 6461 2e79 0000 6554 706d     ata ready...Temp
   39e38:	7265 7461 7275 2065 645b 6765 5d43 253a     erature [degC]:%
   39e48:	0d64 000a 6325 325b 004a 0000 2030 3120     d...%c[2J...0  1
   39e58:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   39e68:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   39e78:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   39e88:	3025 7832 203a 0000 3025 7832 0020 0000     %02x: ..%02x ...

00039e98 <xImuAccCommand>:
   39e98:	9c3c 0003 9c40 0003 500d 0001 0000 0000     <...@....P......

00039ea8 <xMaxCommand>:
   39ea8:	9c78 0003 9c7c 0003 5261 0001 0000 0000     x...|...aR......

00039eb8 <xImuListmpCommand>:
   39eb8:	9cb8 0003 9cc0 0003 5181 0001 0000 0000     .........Q......

00039ec8 <xOTAUCommand>:
   39ec8:	9d00 0003 9d04 0003 52fd 0001 0000 0000     .........R......

00039ed8 <xResetCommand>:
   39ed8:	9d34 0003 9d3c 0003 531d 0001 0000 0000     4...<....S......

00039ee8 <xI2cScan>:
   39ee8:	9d58 0003 9d5c 0003 533d 0001 0000 0000     X...\...=S......

00039ef8 <xClearScreen>:
   39ef8:	9d74 0003 9d78 0003 52b5 0001 0000 0000     t...x....R......
   39f08:	616d 3378 3130 3230 203a 6969 2063 6e69     max30102: iic in
   39f18:	7469 6620 6961 656c 2e64 000a 616d 3378     it failed...max3
   39f28:	3130 3230 203a 6572 6461 7020 7261 2074     0102: read part 
   39f38:	6469 6620 6961 656c 2e64 000a 616d 3378     id failed...max3
   39f48:	3130 3230 203a 6469 6920 2073 6e69 6176     0102: id is inva
   39f58:	696c 2e64 000a 0000 616d 3378 3130 3230     lid.....max30102
   39f68:	203a 6572 6461 6d20 646f 2065 6f63 666e     : read mode conf
   39f78:	6769 6620 6961 656c 2e64 000a 616d 3378     ig failed...max3
   39f88:	3130 3230 203a 7277 7469 2065 6f6d 6564     0102: write mode
   39f98:	6320 6e6f 6966 2067 6166 6c69 6465 0a2e      config failed..
   39fa8:	0000 0000 616d 3378 3130 3230 203a 6572     ....max30102: re
   39fb8:	6573 2074 6166 6c69 6465 0a2e 0000 0000     set failed......
   39fc8:	616d 3378 3130 3230 203a 7277 7469 2065     max30102: write 
   39fd8:	6966 6f66 7220 6165 2064 6f70 6e69 6574     fifo read pointe
   39fe8:	2072 6166 6c69 6465 0a2e 0000 616d 3378     r failed....max3
   39ff8:	3130 3230 203a 7277 7469 2065 6966 6f66     0102: write fifo
   3a008:	7720 6972 6574 7020 696f 746e 7265 6620      write pointer f
   3a018:	6961 656c 2e64 000a 616d 3378 3130 3230     ailed...max30102
   3a028:	203a 7277 7469 2065 766f 7265 6c66 776f     : write overflow
   3a038:	6320 756f 746e 7265 6620 6961 656c 2e64      counter failed.
   3a048:	000a 0000 616d 3378 3130 3230 203a 6969     ....max30102: ii
   3a058:	2063 6564 6e69 7469 6620 6961 656c 2e64     c deinit failed.
   3a068:	000a 0000 616d 3378 3130 3230 203a 6572     ....max30102: re
   3a078:	6461 6920 746e 7265 7572 7470 7320 6174     ad interrupt sta
   3a088:	7574 3173 6620 6961 656c 2e64 000a 0000     tus1 failed.....
   3a098:	616d 3378 3130 3230 203a 6572 6461 6920     max30102: read i
   3a0a8:	746e 7265 7572 7470 7320 6174 7574 3273     nterrupt status2
   3a0b8:	6620 6961 656c 2e64 000a 0000 616d 3378      failed.....max3
   3a0c8:	3130 3230 203a 6572 6461 6420 6569 7420     0102: read die t
   3a0d8:	6d65 2070 6e69 6574 6567 2072 6166 6c69     emp integer fail
   3a0e8:	6465 0a2e 0000 0000 616d 3378 3130 3230     ed......max30102
   3a0f8:	203a 6572 6461 6420 6569 7420 6d65 2070     : read die temp 
   3a108:	7266 6361 6974 6e6f 6620 6961 656c 2e64     fraction failed.
   3a118:	000a 0000 616d 3378 3130 3230 203a 6572     ....max30102: re
   3a128:	6461 6f20 6576 6672 6f6c 2077 6f63 6e75     ad overflow coun
   3a138:	6574 2072 6166 6c69 6465 0a2e 0000 0000     ter failed......
   3a148:	616d 3378 3130 3230 203a 6572 6461 6620     max30102: read f
   3a158:	6669 206f 6572 6461 7020 696f 746e 6620     ifo read point f
   3a168:	6961 656c 2e64 000a 616d 3378 3130 3230     ailed...max30102
   3a178:	203a 6572 6461 6620 6669 206f 7277 7469     : read fifo writ
   3a188:	2065 6f70 6e69 2074 6166 6c69 6465 0a2e     e point failed..
   3a198:	0000 0000 616d 3378 3130 3530 203a 6f6d     ....max30105: mo
   3a1a8:	6564 6920 2073 6e69 6176 696c 2e64 000a     de is invalid...
   3a1b8:	616d 3378 3130 3230 203a 6572 6461 7320     max30102: read s
   3a1c8:	6f70 2032 6f63 666e 6769 6620 6961 656c     po2 config faile
   3a1d8:	2e64 000a 6c50 6165 6573 7020 7475 7920     d...Please put y
   3a1e8:	756f 2072 6966 676e 7265 6f20 206e 6874     our finger on th
   3a1f8:	2065 6573 736e 726f 000a 0000 6946 676e     e sensor....Fing
   3a208:	7265 6420 7465 6365 6574 2164 4420 206f     er detected! Do 
   3a218:	6f6e 2074 6572 6f6d 6576 7920 756f 2072     not remove your 
   3a228:	6966 676e 7265 002e 6157 7469 6e69 2067     finger..Waiting 
   3a238:	6973 6e67 6c61 2073 6f74 6220 2065 7473     signals to be st
   3a248:	6261 656c 2e2e 202e 000a 0000 616d 3378     able... ....max3
   3a258:	3130 3230 203a 6572 6461 6620 6669 206f     0102: read fifo 
   3a268:	6164 6174 7220 6765 7369 6574 2072 6166     data register fa
   3a278:	6c69 6465 0a2e 0000 654d 7361 7275 6e69     iled....Measurin
   3a288:	0067 0000 6425 0000 6e55 7473 6261 656c     g...%d..Unstable
   3a298:	7320 6769 616e 2e6c 5020 656c 7361 2065      signal. Please 
   3a2a8:	7274 2079 6761 6961 2e6e 0000 6e49 6f66     try again...Info
   3a2b8:	6d72 7461 6f69 206e 6f6e 2074 6573 746e     rmation not sent
   3a2c8:	002e 0000 6548 7261 2074 6152 6574 203a     ....Heart Rate: 
   3a2d8:	6425 000d 7053 326f 203a 6425 2025 000d     %d..Spo2: %d% ..
   3a2e8:	616d 3378 3130 3230 203a 6572 6461 6920     max30102: read i
   3a2f8:	746e 7265 7572 7470 6520 616e 6c62 3265     nterrupt enable2
   3a308:	6620 6961 656c 2e64 000a 0000 616d 3378      failed.....max3
   3a318:	3130 3230 203a 7277 7469 2065 6e69 6574     0102: write inte
   3a328:	7272 7075 2074 6e65 6261 656c 2032 6166     rrupt enable2 fa
   3a338:	6c69 6465 0a2e 0000 616d 3378 3130 3230     iled....max30102
   3a348:	203a 6572 6461 6420 6569 7420 6d65 2070     : read die temp 
   3a358:	6f63 666e 6769 6620 6961 656c 2e64 000a     config failed...
   3a368:	616d 3378 3130 3230 203a 7277 7469 2065     max30102: write 
   3a378:	6964 2065 6574 706d 6320 6e6f 6966 2067     die temp config 
   3a388:	6166 6c69 6465 0a2e 0000 0000 616d 3378     failed......max3
   3a398:	3130 3230 203a 6572 6461 7420 6d69 6f65     0102: read timeo
   3a3a8:	7475 0a2e 0000 0000 616d 3378 3130 3230     ut......max30102
   3a3b8:	203a 6572 6461 6920 746e 7265 7572 7470     : read interrupt
   3a3c8:	6520 616e 6c62 3165 6620 6961 656c 2e64      enable1 failed.
   3a3d8:	000a 0000 616d 3378 3130 3230 203a 7277     ....max30102: wr
   3a3e8:	7469 2065 6e69 6574 7272 7075 2074 6e65     ite interrupt en
   3a3f8:	6261 656c 2031 6166 6c69 6465 0a2e 0000     able1 failed....
   3a408:	616d 3378 3130 3230 203a 6f70 6e69 6574     max30102: pointe
   3a418:	2072 6163 276e 2074 6562 6f20 6576 2072     r can't be over 
   3a428:	7830 4631 0a2e 0000 616d 3378 3130 3230     0x1F....max30102
   3a438:	203a 6572 6461 6620 6669 206f 7277 7469     : read fifo writ
   3a448:	2065 6f70 6e69 6574 2072 6166 6c69 6465     e pointer failed
   3a458:	0a2e 0000 616d 3378 3130 3230 203a 6f63     ....max30102: co
   3a468:	6e75 6574 2072 6163 276e 2074 6562 6f20     unter can't be o
   3a478:	6576 2072 7830 4631 0a2e 0000 616d 3378     ver 0x1F....max3
   3a488:	3130 3230 203a 6573 2074 6966 6f66 6f20     0102: set fifo o
   3a498:	6576 6672 6f6c 2077 6f63 6e75 6574 2072     verflow counter 
   3a4a8:	6166 6c69 6465 0a2e 0000 0000 616d 3378     failed......max3
   3a4b8:	3130 3230 203a 6567 2074 6966 6f66 6f20     0102: get fifo o
   3a4c8:	6576 6672 6f6c 2077 6f63 6e75 6574 2072     verflow counter 
   3a4d8:	6166 6c69 6465 0a2e 0000 0000 616d 3378     failed......max3
   3a4e8:	3130 3230 203a 6572 6461 6620 6669 206f     0102: read fifo 
   3a4f8:	6572 6461 7020 696f 746e 7265 6620 6961     read pointer fai
   3a508:	656c 2e64 000a 0000 616d 3378 3130 3230     led.....max30102
   3a518:	203a 7277 7469 2065 6966 6f66 6420 7461     : write fifo dat
   3a528:	2061 6572 6967 7473 7265 6620 6961 656c     a register faile
   3a538:	2e64 000a 616d 3378 3130 3230 203a 6572     d...max30102: re
   3a548:	6461 6620 6669 206f 6f63 666e 6769 6620     ad fifo config f
   3a558:	6961 656c 2e64 000a 616d 3378 3130 3230     ailed...max30102
   3a568:	203a 7277 7469 2065 6966 6f66 6320 6e6f     : write fifo con
   3a578:	6966 2067 6166 6c69 6465 0a2e 0000 0000     fig failed......
   3a588:	616d 3378 3130 3230 203a 6176 756c 2065     max30102: value 
   3a598:	6163 276e 2074 6562 6f20 6576 2072 7830     can't be over 0x
   3a5a8:	2e46 000a 616d 3378 3130 3230 203a 7277     F...max30102: wr
   3a5b8:	7469 2065 7073 326f 6320 6e6f 6966 2067     ite spo2 config 
   3a5c8:	6166 6c69 6465 0a2e 0000 0000 616d 3378     failed......max3
   3a5d8:	3130 3230 203a 7277 7469 2065 656c 2064     0102: write led 
   3a5e8:	7570 736c 2065 2031 6166 6c69 6465 0a2e     pulse 1 failed..
   3a5f8:	0000 0000 616d 3378 3130 3230 203a 6572     ....max30102: re
   3a608:	6461 6c20 6465 7020 6c75 6573 3120 6620     ad led pulse 1 f
   3a618:	6961 656c 2e64 000a 616d 3378 3130 3230     ailed...max30102
   3a628:	203a 7277 7469 2065 656c 2064 7570 736c     : write led puls
   3a638:	2065 2032 6166 6c69 6465 0a2e 0000 0000     e 2 failed......
   3a648:	616d 3378 3130 3230 203a 6572 6461 6c20     max30102: read l
   3a658:	6465 7020 6c75 6573 3220 6620 6961 656c     ed pulse 2 faile
   3a668:	2e64 000a 616d 3378 3130 3230 203a 6572     d...max30102: re
   3a678:	6461 6c20 6465 7320 6f6c 2074 6166 6c69     ad led slot fail
   3a688:	6465 0a2e 0000 0000 616d 3378 3130 3230     ed......max30102
   3a698:	203a 7277 7469 2065 656c 2064 6c73 746f     : write led slot
   3a6a8:	6620 6961 656c 2e64 000a 0000 616d 3378      failed.....max3
   3a6b8:	3130 3230 203a 6c73 746f 6920 2073 6e69     0102: slot is in
   3a6c8:	6176 696c 2e64 000a 616d 3378 3130 3230     valid...max30102
   3a6d8:	203a 6572 6461 7220 7665 7369 6f69 206e     : read revision 
   3a6e8:	6469 6620 6961 656c 2e64 000a 614d 6978     id failed...Maxi
   3a6f8:	206d 6e49 6574 7267 7461 6465 4d20 5841     m Integrated MAX
   3a708:	3033 3031 0032 0000 614d 6978 206d 6e49     30102...Maxim In
   3a718:	6574 7267 7461 6465 0000 0000 4949 0043     tegrated....IIC.
   3a728:	616d 3378 3130 3230 203a 6573 2074 6873     max30102: set sh
   3a738:	7475 6f64 6e77 6620 6961 656c 2e64 000a     utdown failed...
   3a748:	616d 3378 3130 3230 203a 6573 2074 6966     max30102: set fi
   3a758:	6f66 7320 6d61 6c70 2065 7661 7265 6761     fo sample averag
   3a768:	6e69 2067 6166 6c69 6465 0a2e 0000 0000     ing failed......
   3a778:	616d 3378 3130 3230 203a 6573 2074 6966     max30102: set fi
   3a788:	6f66 7220 6c6f 206c 6166 6c69 6465 0a2e     fo roll failed..
   3a798:	0000 0000 616d 3378 3130 3230 203a 6573     ....max30102: se
   3a7a8:	2074 6966 6f66 6120 6d6c 736f 2074 7566     t fifo almost fu
   3a7b8:	6c6c 6620 6961 656c 2e64 000a 616d 3378     ll failed...max3
   3a7c8:	3130 3230 203a 6573 2074 6f6d 6564 6620     0102: set mode f
   3a7d8:	6961 656c 2e64 000a 616d 3378 3130 3230     ailed...max30102
   3a7e8:	203a 6573 2074 7073 326f 6120 6364 7220     : set spo2 adc r
   3a7f8:	6e61 6567 6620 6961 656c 2e64 000a 0000     ange failed.....
   3a808:	616d 3378 3130 3230 203a 6573 2074 7073     max30102: set sp
   3a818:	326f 7320 6d61 6c70 2065 6172 6574 6620     o2 sample rate f
   3a828:	6961 656c 2e64 000a 616d 3378 3130 3230     ailed...max30102
   3a838:	203a 6573 2074 6461 2063 6572 6f73 756c     : set adc resolu
   3a848:	6974 6e6f 6620 6961 656c 2e64 000a 0000     tion failed.....
   3a858:	616d 3378 3130 3230 203a 6573 2074 656c     max30102: set le
   3a868:	2064 6572 2064 7570 736c 2065 6d61 6c70     d red pulse ampl
   3a878:	7469 6475 2065 6166 6c69 6465 0a2e 0000     itude failed....
   3a888:	616d 3378 3130 3230 203a 6573 2074 656c     max30102: set le
   3a898:	2064 7269 7020 6c75 6573 6120 706d 696c     d ir pulse ampli
   3a8a8:	7574 6564 6620 6961 656c 2e64 000a 0000     tude failed.....
   3a8b8:	616d 3378 3130 3230 203a 6573 2074 6e69     max30102: set in
   3a8c8:	6574 7272 7075 2074 6166 6c69 6465 0a2e     terrupt failed..
   3a8d8:	0000 0000 616d 3378 3130 3230 203a 6567     ....max30102: ge
   3a8e8:	2074 6e69 6574 7272 7075 2074 7473 7461     t interrupt stat
   3a8f8:	7375 6620 6961 656c 2e64 000a 0a0d 0000     us failed.......
   3a908:	616d 3378 3130 3230 203a 7269 2071 6966     max30102: irq fi
   3a918:	6f66 6620 6c75 2e6c 000a 0000 616d 3378     fo full.....max3
   3a928:	3130 3230 203a 7269 2071 7070 2067 6472     0102: irq ppg rd
   3a938:	2e79 000a 616d 3378 3130 3230 203a 7269     y...max30102: ir
   3a948:	2071 6c61 2063 766f 2e66 000a 616d 3378     q alc ovf...max3
   3a958:	3130 3230 203a 7269 2071 7770 2072 6472     0102: irq pwr rd
   3a968:	2e79 000a 616d 3378 3130 3230 203a 7269     y...max30102: ir
   3a978:	2071 6964 2065 6574 706d 7220 7964 0a2e     q die temp rdy..
   3a988:	0000 0000 616d 3378 3130 3230 203a 6e75     ....max30102: un
   3a998:	6e6b 776f 206e 6f63 6564 0a2e 0000 0000     known code......
   3a9a8:	6853 6b61 6465 0d21 000a 0000               Shaked!.....

0003a9b4 <main_mqtt_broker>:
   3a9b4:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   3a9c4:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   3a9d4:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   3a9e4:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   3a9f4:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   3aa04:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   3aa14:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   3aa24:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   3aa34:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   3aa44:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   3aa54:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   3aa64:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   3aa74:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   3aa84:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   3aa94:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   3aaa4:	2e2e 0d2e 000a 0000 7468 7074 2f3a 312f     ........http://1
   3aab4:	3237 312e 3337 322e 3535 312e 3332 462f     72.173.255.123/F
   3aac4:	2e57 6962 006e 0000 7473 726f 5f65 6966     W.bin...store_fi
   3aad4:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   3aae4:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   3aaf4:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   3ab04:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   3ab14:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   3ab24:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   3ab34:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   3ab44:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   3ab54:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   3ab64:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   3ab74:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   3ab84:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   3ab94:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   3aba4:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   3abb4:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   3abc4:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   3abd4:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   3abe4:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   3abf4:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   3ac04:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   3ac14:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   3ac24:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   3ac34:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   3ac44:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   3ac54:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   3ac64:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   3ac74:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   3ac84:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   3ac94:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   3aca4:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   3acb4:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   3acc4:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   3acd4:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   3ace4:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   3acf4:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   3ad04:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   3ad14:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   3ad24:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   3ad34:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   3ad44:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   3ad54:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   3ad64:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   3ad74:	787a 7663 6e62 616d 0000 0000 6152 6e69     zxcvbnma....Rain
   3ad84:	0000 0000 6977 6966 635f 3a62 4920 2050     ....wifi_cb: IP 
   3ad94:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   3ada4:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   3adb4:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   3adc4:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   3add4:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   3ade4:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   3adf4:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   3ae04:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   3ae14:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   3ae24:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   3ae34:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   3ae44:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   3ae54:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   3ae64:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   3ae74:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   3ae84:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   3ae94:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   3aea4:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   3aeb4:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   3aec4:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   3aed4:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   3aee4:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   3aef4:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   3af04:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   3af14:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   3af24:	0000 0000 0a0d 2520 2a2e 0073 6772 2862     ...... %.*s.rgb(
   3af34:	0000 0000 0a0d 4752 2042 6425 2520 2064     ......RGB %d %d 
   3af44:	6425 0a0d 0000 0000 0a0d 4820 6165 7472     %d........ Heart
   3af54:	6172 6574 202c 7073 326f 6420 7461 2061     rate, spo2 data 
   3af64:	6572 6563 7669 6465 0d21 000a 0a0d 4120     received!..... A
   3af74:	6363 6c65 7265 6d6f 7465 7265 6420 7461     ccelerometer dat
   3af84:	2061 6572 6563 7669 6465 0d21 000a 0000     a received!.....
   3af94:	0a0d 6944 7473 6e61 6563 7420 706f 6369     ..Distance topic
   3afa4:	7220 6365 6965 6576 2164 0a0d 0000 0000      received!......
   3afb4:	0a0d 4d20 4753 7220 6365 6965 6576 2164     .. MSG received!
   3afc4:	0a0d 0000 2520 2a2e 0d73 000a 3e20 203e     .... %.*s... >> 
   3afd4:	0000 0000 2e25 732a 0000 0000 3150 4c5f     ....%.*s....P1_L
   3afe4:	4445 455f 4553 3135 5f36 3054 0000 0000     ED_ESE516_T0....
   3aff4:	6166 736c 0065 0000 7274 6575 0000 0000     false...true....
   3b004:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   3b014:	7242 6b6f 7265 2e2e 002e 0000 6948 6576     Broker......Hive
   3b024:	3331 3432 3536 3837 0000 0000 6177 7374     13246578....wats
   3b034:	6d6f 0000 514d 5454 2020 7245 6f72 2072     om..MQTT  Error 
   3b044:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   3b054:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   3b064:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   3b074:	6b6f 7265 0a0d 0000 6f43 6e6e 6365 2074     oker....Connect 
   3b084:	6166 6c69 7420 206f 6573 7672 7265 2528     fail to server(%
   3b094:	2973 2021 6572 7274 2079 7469 6120 7475     s)! retry it aut
   3b0a4:	6d6f 7461 6369 6c61 796c 0d2e 000a 0000     omatically......
   3b0b4:	6548 7261 7274 7461 0065 0000 6341 6563     Heartrate...Acce
   3b0c4:	656c 6f72 656d 6574 0072 0000 6157 6374     lerometer...Watc
   3b0d4:	0068 0000 514d 5454 4320 6e6f 656e 7463     h...MQTT Connect
   3b0e4:	6465 0a0d 0000 0000 514d 5454 6220 6f72     ed......MQTT bro
   3b0f4:	656b 2072 6564 6c63 6e69 2065 6f79 7275     ker decline your
   3b104:	6120 6363 7365 2173 6520 7272 726f 6320      access! error c
   3b114:	646f 2065 6425 0a0d 0000 0000 514d 5454     ode %d......MQTT
   3b124:	6420 7369 6f63 6e6e 6365 6574 0d64 000a      disconnected...
   3b134:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
   3b144:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
   3b154:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
   3b164:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
   3b174:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
   3b184:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
   3b194:	2820 6425 0d29 000a 227b 2264 7b3a 7422      (%d)...{"d":{"t
   3b1a4:	6d65 2270 253a 7d64 007d 0000 465b 4941     emp":%d}}...[FAI
   3b1b4:	5d4c 7220 7365 2520 0d64 000a 6c46 6761     L] res %d...Flag
   3b1c4:	2e41 7874 2074 6461 6564 2164 0a0d 0000     A.txt added!....
   3b1d4:	3a30 6c46 6761 2e41 7874 0074 6f43 6e6e     0:FlagA.txt.Conn
   3b1e4:	6365 6574 2064 6f74 4d20 5451 2054 7242     ected to MQTT Br
   3b1f4:	6b6f 7265 0d21 000a 227b 2278 253a 2c64     oker!...{"x":%d,
   3b204:	2220 2279 203a 6425 202c 7a22 3a22 2520      "y": %d, "z": %
   3b214:	2c64 2220 6c61 7261 226d 203a 6425 222c     d, "alarm": %d,"
   3b224:	6574 706d 3a22 2520 7d64 0000 227b 7268     temp": %d}..{"hr
   3b234:	3a22 6425 202c 7322 6f70 2232 203a 6425     ":%d, "spo2": %d
   3b244:	007d 0000 5245 4f52 2052 6e49 7469 6169     }...ERROR Initia
   3b254:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   3b264:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   3b274:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   3b284:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   3b294:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   3b2a4:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   3b2b4:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   3b2c4:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   3b2d4:	7325 2e2e 0d2e 000a 3150 545f 4d45 4550     %s......P1_TEMPE
   3b2e4:	4152 5554 4552 455f 4553 3135 5f36 3054     RATURE_ESE516_T0
   3b2f4:	0000 0000 514d 5454 7320 6e65 2064 7325     ....MQTT send %s
   3b304:	0a0d 0000 9330 0001 933c 0001 934e 0001     ....0...<...N...
   3b314:	93a4 0001 93c4 0001 6568 706c 0000 0000     ........help....
   3b324:	0a0d 6568 706c 0d3a 200a 694c 7473 2073     ..help:.. Lists 
   3b334:	6c61 206c 6874 2065 6572 6967 7473 7265     all the register
   3b344:	6465 6320 6d6f 616d 646e 0d73 0d0a 000a     ed commands.....
   3b354:	6e49 6f63 7272 6365 2074 6f63 6d6d 6e61     Incorrect comman
   3b364:	2064 6170 6172 656d 6574 2872 2973 202e     d parameter(s). 
   3b374:	4520 746e 7265 2220 6568 706c 2022 6f74      Enter "help" to
   3b384:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   3b394:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   3b3a4:	7364 0d2e 0d0a 000a 6f43 6d6d 6e61 2064     ds......Command 
   3b3b4:	6f6e 2074 6572 6f63 6e67 7369 6465 202e     not recognised. 
   3b3c4:	4520 746e 7265 2720 6568 706c 2027 6f74      Enter 'help' to
   3b3d4:	7620 6569 2077 2061 696c 7473 6f20 2066      view a list of 
   3b3e4:	7661 6961 616c 6c62 2065 6f63 6d6d 6e61     available comman
   3b3f4:	7364 0d2e 0d0a 000a                         ds......

0003b3fc <xHelpCommand>:
   3b3fc:	b31c 0003 b324 0003 ae39 0001 0000 0000     ....$...9.......
   3b40c:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   3b41c:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   3b42c:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   3b43c:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   3b44c:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   3b45c:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   3b46c:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   3b47c:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   3b48c:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   3b49c:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   3b4ac:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   3b4bc:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   3b4cc:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   3b4dc:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   3b4ec:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   3b4fc:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   3b50c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   3b51c:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   3b52c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3b53c:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   3b54c:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   3b55c:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   3b56c:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   3b57c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3b58c:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   3b59c:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   3b5ac:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   3b5bc:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   3b5cc:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   3b5dc:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   3b5ec:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   3b5fc:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   3b60c:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   3b61c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3b62c:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   3b63c:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   3b64c:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   3b65c:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   3b66c:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   3b67c:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   3b68c:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   3b69c:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   3b6ac:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   3b6bc:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   3b6cc:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   3b6dc:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   3b6ec:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   3b6fc:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   3b70c:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   3b71c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3b72c:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   3b73c:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   3b74c:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   3b75c:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   3b76c:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   3b77c:	6365 6374 616c 7373 0021 0000 b55e 0001     ectclass!...^...
   3b78c:	b556 0001 b55a 0001 b54e 0001 b552 0001     V...Z...N...R...
   3b79c:	b562 0001 b566 0001 b56a 0001 b56e 0001     b...f...j...n...
   3b7ac:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3b7bc:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3b7cc:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   3b7dc:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   3b7ec:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   3b7fc:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3b80c:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3b81c:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   3b82c:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   3b83c:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   3b84c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3b85c:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   3b86c:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   3b87c:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   3b88c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3b89c:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   3b8ac:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   3b8bc:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   3b8cc:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   3b8dc:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   3b8ec:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3b8fc:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3b90c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3b91c:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   3b92c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3b93c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3b94c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3b95c:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   3b96c:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   3b97c:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   3b98c:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   3b99c:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   3b9ac:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   3b9bc:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   3b9cc:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   3b9dc:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   3b9ec:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   3b9fc:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   3ba0c:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   3ba1c:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   3ba2c:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   3ba3c:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   3ba4c:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   3ba5c:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   3ba6c:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   3ba7c:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   3ba8c:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   3ba9c:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   3baac:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   3babc:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   3bacc:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   3badc:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   3baec:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   3bafc:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   3bb0c:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   3bb1c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   3bb2c:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   3bb3c:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   3bb4c:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   3bb5c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3bb6c:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   3bb7c:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   3bb8c:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   3bb9c:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   3bbac:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   3bbbc:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   3bbcc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3bbdc:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   3bbec:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   3bbfc:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   3bc0c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3bc1c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3bc2c:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   3bc3c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3bc4c:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   3bc5c:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   3bc6c:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   3bc7c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   3bc8c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3bc9c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3bcac:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   3bcbc:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   3bccc:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   3bcdc:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   3bcec:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   3bcfc:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   3bd0c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3bd1c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3bd2c:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   3bd3c:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   3bd4c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3bd5c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3bd6c:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   3bd7c:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   3bd8c:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   3bd9c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3bdac:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   3bdbc:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   3bdcc:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   3bddc:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   3bdec:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   3bdfc:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   3be0c:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   3be1c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3be2c:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   3be3c:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   3be4c:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   3be5c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3be6c:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   3be7c:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   3be8c:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   3be9c:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   3beac:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   3bebc:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   3becc:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   3bedc:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   3beec:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3befc:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   3bf0c:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   3bf1c:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   3bf2c:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   3bf3c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   3bf4c:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   3bf5c:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   3bf6c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   3bf7c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   3bf8c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3bf9c:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   3bfac:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   3bfbc:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3bfcc:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   3bfdc:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   3bfec:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   3bffc:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   3c00c:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   3c01c:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   3c02c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c03c:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   3c04c:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   3c05c:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   3c06c:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   3c07c:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   3c08c:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   3c09c:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   3c0ac:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   3c0bc:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   3c0cc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c0dc:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   3c0ec:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   3c0fc:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   3c10c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c11c:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   3c12c:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   3c13c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   3c14c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   3c15c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3c16c:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   3c17c:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   3c18c:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   3c19c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3c1ac:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   3c1bc:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   3c1cc:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   3c1dc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c1ec:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   3c1fc:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3c20c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   3c21c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3c22c:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   3c23c:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   3c24c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   3c25c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c26c:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   3c27c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3c28c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   3c29c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3c2ac:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   3c2bc:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   3c2cc:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   3c2dc:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   3c2ec:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   3c2fc:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   3c30c:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   3c31c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   3c32c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3c33c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3c34c:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   3c35c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   3c36c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3c37c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3c38c:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   3c39c:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   3c3ac:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   3c3bc:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   3c3cc:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   3c3dc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c3ec:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   3c3fc:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   3c40c:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   3c41c:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   3c42c:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   3c43c:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   3c44c:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   3c45c:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   3c46c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c47c:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   3c48c:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   3c49c:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   3c4ac:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   3c4bc:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   3c4cc:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   3c4dc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3c4ec:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   3c4fc:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   3c50c:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   3c51c:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   3c52c:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   3c53c:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   3c54c:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   3c55c:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   3c56c:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   3c57c:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   3c58c:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   3c59c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   3c5ac:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   3c5bc:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   3c5cc:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   3c5dc:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   3c5ec:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   3c5fc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c60c:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   3c61c:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   3c62c:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   3c63c:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   3c64c:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   3c65c:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   3c66c:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   3c67c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3c68c:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   3c69c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3c6ac:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   3c6bc:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   3c6cc:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   3c6dc:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   3c6ec:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   3c6fc:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   3c70c:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   3c71c:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   3c72c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3c73c:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   3c74c:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   3c75c:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   3c76c:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   3c77c:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   3c78c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   3c79c:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   3c7ac:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   3c7bc:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   3c7cc:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3c7dc:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   3c7ec:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   3c7fc:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3c80c:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   3c81c:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   3c82c:	0000 0000 6d54 2072 7653 0063 05f8 0002     ....Tmr Svc.....
   3c83c:	05f8 0002 05f8 0002 0686 0002 0650 0002     ............P...
   3c84c:	067a 0002 05f8 0002 05f8 0002 0686 0002     z...............
   3c85c:	0650 0002 6d22 7365 6173 6567 3a22 0022     P..."message":".
   3c86c:	7422 6d69 7365 6174 706d 3a22 0022 0000     "timestamp":"...

0003c87c <sd_mmc_trans_units>:
   3c87c:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0003c898 <sd_trans_multipliers>:
   3c898:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3c8a8:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   3c8b8:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   3c8c8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0003c8d8 <mmc_trans_multipliers>:
   3c8d8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3c8e8:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   3c8f8:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   3c908:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   3c918:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3c928:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   3c938:	746c 6320 646d 000a 000d 0000               lt cmd......

0003c944 <__FUNCTION__.17103>:
   3c944:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   3c954:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   3c964:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   3c974:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3c984:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   3c994:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   3c9a4:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   3c9b4:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   3c9c4:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   3c9d4:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   3c9e4:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   3c9f4:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   3ca04:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   3ca14:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   3ca24:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   3ca34:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   3ca44:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   3ca54:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   3ca64:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   3ca74:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   3ca84:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   3ca94:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   3caa4:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   3cab4:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   3cac4:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   3cad4:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   3cae4:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   3caf4:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   3cb04:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   3cb14:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   3cb24:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   3cb34:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   3cb44:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   3cb54:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   3cb64:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   3cb74:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   3cb84:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   3cb94:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   3cba4:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   3cbb4:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   3cbc4:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   3cbd4:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   3cbe4:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   3cbf4:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   3cc04:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   3cc14:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   3cc24:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   3cc34:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   3cc44:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   3cc54:	203f 6425 000a 0000 4930 0002 4900 0002     ? %d....0I...I..
   3cc64:	48f8 0002 4910 0002 4908 0002 4928 0002     .H...I...I..(I..
   3cc74:	4918 0002 4920 0002                         .I.. I..

0003cc7c <__FUNCTION__.17971>:
   3cc7c:	6968 5f66 6573 646e 0000 0000               hif_send....

0003cc88 <__FUNCTION__.17981>:
   3cc88:	6968 5f66 7369 0072                         hif_isr.

0003cc90 <__FUNCTION__.17990>:
   3cc90:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0003cca0 <__FUNCTION__.18002>:
   3cca0:	6968 5f66 6572 6563 7669 0065               hif_receive.

0003ccac <__FUNCTION__.18018>:
   3ccac:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   3ccbc:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   3cccc:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   3ccdc:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   3ccec:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3ccfc:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   3cd0c:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   3cd1c:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   3cd2c:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   3cd3c:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   3cd4c:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   3cd5c:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   3cd6c:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   3cd7c:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   3cd8c:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   3cd9c:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   3cdac:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   3cdbc:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   3cdcc:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   3cddc:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   3cdec:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   3cdfc:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   3ce0c:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   3ce1c:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   3ce2c:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   3ce3c:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   3ce4c:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   3ce5c:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   3ce6c:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   3ce7c:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   3ce8c:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   3ce9c:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   3ceac:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   3cebc:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   3cecc:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   3cedc:	000a 0000 3030 313a 3a34 3634 0000 0000     ....00:14:46....
   3ceec:	614d 2079 3620 3220 3230 0033 7244 7669     May  6 2023.Driv
   3cefc:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   3cf0c:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   3cf1c:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   3cf2c:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   3cf3c:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   3cf4c:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   3cf5c:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   3cf6c:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   3cf7c:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   3cf8c:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   3cf9c:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   3cfac:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   3cfbc:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   3cfcc:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   3cfdc:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   3cfec:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   3cffc:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   3d00c:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   3d01c:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   3d02c:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   3d03c:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   3d04c:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   3d05c:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   3d06c:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   3d07c:	4220 6675 6566 0a72 0000 0000                Buffer.....

0003d088 <__FUNCTION__.17953>:
   3d088:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0003d094 <__FUNCTION__.17982>:
   3d094:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0003d0a4 <__FUNCTION__.18013>:
   3d0a4:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   3d0b4:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   3d0c4:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   3d0d4:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   3d0e4:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   3d0f4:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   3d104:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   3d114:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   3d124:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   3d134:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

0003d144 <__FUNCTION__.17810>:
   3d144:	6863 7069 775f 6b61 0065 0000               chip_wake...

0003d150 <__FUNCTION__.17859>:
   3d150:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   3d160:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   3d170:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   3d180:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   3d190:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   3d1a0:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   3d1b0:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   3d1c0:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   3d1d0:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   3d1e0:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   3d1f0:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   3d200:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   3d210:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   3d220:	6920 696e 2074 7562 0a73 0000                init bus...

0003d22c <__FUNCTION__.17857>:
   3d22c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0003d238 <__FUNCTION__.17864>:
   3d238:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

0003d248 <crc7_syndrome_table>:
   3d248:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   3d258:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   3d268:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   3d278:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   3d288:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   3d298:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   3d2a8:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   3d2b8:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   3d2c8:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   3d2d8:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   3d2e8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   3d2f8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   3d308:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   3d318:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   3d328:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   3d338:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   3d348:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3d358:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   3d368:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   3d378:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   3d388:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3d398:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   3d3a8:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3d3b8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3d3c8:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   3d3d8:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   3d3e8:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   3d3f8:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   3d408:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   3d418:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   3d428:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   3d438:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   3d448:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   3d458:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   3d468:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   3d478:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3d488:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   3d498:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   3d4a8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3d4b8:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   3d4c8:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   3d4d8:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   3d4e8:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3d4f8:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   3d508:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3d518:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3d528:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3d538:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3d548:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3d558:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3d568:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3d578:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3d588:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3d598:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3d5a8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3d5b8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3d5c8:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   3d5d8:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   3d5e8:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   3d5f8:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   3d608:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3d618:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3d628:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3d638:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3d648:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3d658:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3d668:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3d678:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3d688:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3d698:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3d6a8:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3d6b8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3d6c8:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3d6d8:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3d6e8:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3d6f8:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3d708:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3d718:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3d728:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3d738:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3d748:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3d758:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3d768:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3d778:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3d788:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3d798:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3d7a8:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3d7b8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3d7c8:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3d7d8:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3d7e8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3d7f8:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3d808:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3d818:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3d828:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3d838:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3d848:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3d858:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3d868:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3d878:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3d888:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3d898:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3d8a8:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3d8b8:	2e2e 0a2e 0000 0000 6558 0002 6558 0002     ........Xe..Xe..
   3d8c8:	65e8 0002 64ac 0002 64f2 0002 6514 0002     .e...d...d...e..
   3d8d8:	659a 0002 659a 0002 6654 0002 6480 0002     .e...e..Tf...d..
   3d8e8:	66ae 0002 66ae 0002 66ae 0002 66ae 0002     .f...f...f...f..
   3d8f8:	6536 0002 6ab8 0002 6ab8 0002 6b40 0002     6e...j...j..@k..
   3d908:	6a1c 0002 6a5e 0002 6a7c 0002 6af6 0002     .j..^j..|j...j..
   3d918:	6af6 0002 6ba2 0002 69f4 0002 6bf2 0002     .j...k...i...k..
   3d928:	6bf2 0002 6bf2 0002 6bf2 0002 6a9a 0002     .k...k...k...j..

0003d938 <__FUNCTION__.17132>:
   3d938:	7073 5f69 6d63 0064                         spi_cmd.

0003d940 <__FUNCTION__.17139>:
   3d940:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003d950 <__FUNCTION__.17148>:
   3d950:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003d95c <__FUNCTION__.17181>:
   3d95c:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3d96c:	0000 0000                                   ....

0003d970 <__FUNCTION__.17227>:
   3d970:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003d980 <__FUNCTION__.17239>:
   3d980:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003d990 <__FUNCTION__.17250>:
   3d990:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003d9a0 <__FUNCTION__.17262>:
   3d9a0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003d9b0 <__FUNCTION__.17273>:
   3d9b0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003d9bc <__FUNCTION__.17294>:
   3d9bc:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3d9cc:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3d9dc:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3d9ec:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3d9fc:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3da0c:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3da1c:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3da2c:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3da3c:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3da4c:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3da5c:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3da6c:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3da7c:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3da8c:	2074 2230 0000 0000                         t 0"....

0003da94 <lun_desc>:
   3da94:	2151 0002 21a9 0002 21f5 0002 2241 0002     Q!...!...!..A"..
   3daa4:	2271 0002 22f5 0002 2385 0002 da7c 0003     q"..."...#..|...
   3dab4:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3dac4:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3dad4:	c4d6 0002 c550 0002 c550 0002 c4f4 0002     ....P...P.......
   3dae4:	c4ee 0002 c4fa 0002 c4dc 0002 c500 0002     ................
   3daf4:	c536 0002 c738 0002 c788 0002 c788 0002     6...8...........
   3db04:	c784 0002 c72a 0002 c74a 0002 c71a 0002     ....*...J.......
   3db14:	c75c 0002 c76e 0002 c7d6 0002 c804 0002     \...n...........
   3db24:	c804 0002 c800 0002 c7d0 0002 c7dc 0002     ................
   3db34:	c7ca 0002 c7e2 0002 c7e8 0002               ............

0003db40 <tcc_modules>:
   3db40:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003db4c <_tcc_gclk_ids>:
   3db4c:	1a1a 001b                                   ....

0003db50 <_tcc_apbcmasks>:
   3db50:	0100 0000 0200 0000 0400 0000               ............

0003db5c <_tcc_maxs>:
   3db5c:	ffff 00ff ffff 00ff ffff 0000               ............

0003db68 <_tcc_cc_nums>:
   3db68:	0204 0002                                   ....

0003db6c <_tcc_ow_nums>:
   3db6c:	0408 0002                                   ....

0003db70 <_tcc_intflag>:
   3db70:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3db80:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3db90:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003dba0 <LfnOfs>:
   3dba0:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3dbb0:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3dbc0:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3dbd0:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3dbe0:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3dbf0:	5441 2020 2020 0020                         AT     .

0003dbf8 <excvt.4558>:
   3dbf8:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3dc08:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3dc18:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3dc28:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3dc38:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3dc48:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3dc58:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3dc68:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003dc78 <Tbl>:
   3dc78:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3dc88:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3dc98:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3dca8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3dcb8:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3dcc8:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3dcd8:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3dce8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3dcf8:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3dd08:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3dd18:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3dd28:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3dd38:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3dd48:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3dd58:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3dd68:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003dd78 <tbl_lower.4308>:
   3dd78:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3dd88:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3dd98:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3dda8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3ddb8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3ddc8:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3ddd8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3dde8:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3ddf8:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3de08:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3de18:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3de28:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3de38:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3de48:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3de58:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3de68:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3de78:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3de88:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3de98:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3dea8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3deb8:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3dec8:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3ded8:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3dee8:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3def8:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3df08:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3df18:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3df28:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3df38:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3df48:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003df58 <tbl_upper.4309>:
   3df58:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3df68:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3df78:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3df88:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3df98:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3dfa8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3dfb8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3dfc8:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3dfd8:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3dfe8:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3dff8:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3e008:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3e018:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3e028:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3e038:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3e048:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3e058:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3e068:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3e078:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3e088:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3e098:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3e0a8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3e0b8:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3e0c8:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3e0d8:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3e0e8:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3e0f8:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3e108:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3e118:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3e128:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3e138:	1b42 0003 1b42 0003 1b42 0003 19d0 0003     B...B...B.......
   3e148:	1b42 0003 1aba 0003 1b42 0003 1b42 0003     B.......B...B...
   3e158:	1b42 0003 1b42 0003 1b42 0003 1b42 0003     B...B...B...B...
   3e168:	1b42 0003 1b34 0003 514d 4354 0000 0000     B...4...MQTC....
   3e178:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3e188:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3e1c8:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3e1e0:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3e220:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3e230:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3e240:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3e250:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3e260:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3e270:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3e280:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3e290:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3e2a0:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3e2b0:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3e2c0:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3e2d0:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3e2e0:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3e2f0:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3e300:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3e310:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3e320:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3e330:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3e340:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3e350:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3e360:	5448 5054 002f 0000 0d31 0000 3c36 0003     HTTP/...1...6<..
   3e370:	3c30 0003 3c2a 0003 3c24 0003 3c3c 0003     0<..*<..$<..<<..
   3e380:	3c1e 0003 3c3c 0003 3c18 0003 3c12 0003     .<..<<...<...<..
   3e390:	3c3c 0003 3c0c 0003 3c0c 0003 3c06 0003     <<...<...<...<..
   3e3a0:	3c00 0003 3bfa 0003 2000 4200 2400 4200     .<...;... .B.$.B
   3e3b0:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3e3c0:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3e3d0:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3e3e0:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3e3f0:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3e400:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3e410:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3e420:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3e430:	6143 6e6e 746f 6620 6e69 2064 4341 2143     Cannot find ACC!
   3e440:	0a0d 0000 4341 2043 6e69 7469 6169 696c     ....ACC initiali
   3e450:	657a 2164 0a0d 0000 6f43 6c75 2064 6f6e     zed!....Could no
   3e460:	2074 6e69 7469 6169 696c 657a 4120 4343     t initialize ACC
   3e470:	0a0d 0000 614d 2078 6e69 7469 6169 696c     ....Max initiali
   3e480:	657a 2064 6166 6c69 6465 0d21 000a 0000     zed failed!.....
   3e490:	614d 2078 6e69 7469 6169 696c 657a 2164     Max initialized!
   3e4a0:	0a0d 0000 434c 2044 6e69 7469 6169 696c     ....LCD initiali
   3e4b0:	657a 2164 0a20 000d 2057 2065 206c 2063     zed! ...W e l c 
   3e4c0:	206f 206d 2065 0021 7942 4520 4553 3135     o m e !.By ESE51
   3e4d0:	2036 6144 6b72 6f4d 6e6f 0000 6548 7061     6 DarkMoon..Heap
   3e4e0:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3e4f0:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3e500:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3e510:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3e520:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3e530:	6465 0d21 000a 0000 4957 4946 545f 5341     ed!.....WIFI_TAS
   3e540:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3e550:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3e560:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3e570:	6341 5f63 4154 4b53 0000 0000 5245 3a52     Acc_TASK....ERR:
   3e580:	4120 6363 7420 7361 206b 6f63 6c75 2064      Acc task could 
   3e590:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3e5a0:	6465 0d21 000a 0000 4955 5420 7361 006b     ed!.....UI Task.
   3e5b0:	5245 3a52 5520 2049 6174 6b73 6320 756f     ERR: UI task cou
   3e5c0:	646c 6e20 746f 6220 2065 6e69 7469 6169     ld not be initia
   3e5d0:	696c 657a 2164 0a0d 0000 0000 6548 7061     lized!......Heap
   3e5e0:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   3e5f0:	4955 203a 6425 0a0d 0000 0000 7245 6f72     UI: %d......Erro
   3e600:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   3e610:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   3e620:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   3e630:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   3e640:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   3e650:	6254 0003 6224 0003 6236 0003 6178 0003     Tb..$b..6b..xa..
   3e660:	6236 0003 621a 0003 6236 0003 6178 0003     6b...b..6b..xa..
   3e670:	6224 0003 6224 0003 621a 0003 6178 0003     $b..$b...b..xa..
   3e680:	6180 0003 6180 0003 6180 0003 623c 0003     .a...a...a..<b..
   3e690:	6224 0003 6224 0003 61f8 0003 62dc 0003     $b..$b...a...b..
   3e6a0:	61f8 0003 621a 0003 61f8 0003 62dc 0003     .a...b...a...b..
   3e6b0:	6224 0003 6224 0003 621a 0003 62dc 0003     $b..$b...b...b..
   3e6c0:	6180 0003 6180 0003 6180 0003 62e6 0003     .a...a...a...b..
   3e6d0:	65d4 0003 6524 0003 6524 0003 6522 0003     .e..$e..$e.."e..
   3e6e0:	65c6 0003 65c6 0003 65bc 0003 6522 0003     .e...e...e.."e..
   3e6f0:	65c6 0003 65bc 0003 65c6 0003 6522 0003     .e...e...e.."e..
   3e700:	65cc 0003 65cc 0003 65cc 0003 665c 0003     .e...e...e..\f..
   3e710:	73a4 0003 7386 0003 7340 0003 725e 0003     .s...s..@s..^r..
   3e720:	7340 0003 7378 0003 7340 0003 725e 0003     @s..xs..@s..^r..
   3e730:	7386 0003 7386 0003 7378 0003 725e 0003     .s...s..xs..^r..
   3e740:	7256 0003 7256 0003 7256 0003 75bc 0003     Vr..Vr..Vr...u..
   3e750:	7a04 0003 78c4 0003 78c4 0003 78c0 0003     .z...x...x...x..
   3e760:	79dc 0003 79dc 0003 79ce 0003 78c0 0003     .y...y...y...x..
   3e770:	79dc 0003 79ce 0003 79dc 0003 78c0 0003     .y...y...y...x..
   3e780:	79e4 0003 79e4 0003 79e4 0003 7be8 0003     .y...y...y...{..

0003e790 <_global_impure_ptr>:
   3e790:	01b0 2000                                   ... 

0003e794 <__sf_fake_stderr>:
	...

0003e7b4 <__sf_fake_stdin>:
	...

0003e7d4 <__sf_fake_stdout>:
	...
   3e7f4:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3e804:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3e814:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3e824:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003e831 <_ctype_>:
   3e831:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3e841:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3e851:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3e861:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3e871:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3e881:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3e891:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3e8a1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3e8b1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003e934 <_init>:
   3e934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e936:	46c0      	nop			; (mov r8, r8)
   3e938:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3e93a:	bc08      	pop	{r3}
   3e93c:	469e      	mov	lr, r3
   3e93e:	4770      	bx	lr

0003e940 <__init_array_start>:
   3e940:	000120dd 	.word	0x000120dd

0003e944 <_fini>:
   3e944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e946:	46c0      	nop			; (mov r8, r8)
   3e948:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3e94a:	bc08      	pop	{r3}
   3e94c:	469e      	mov	lr, r3
   3e94e:	4770      	bx	lr

0003e950 <__fini_array_start>:
   3e950:	000120b5 	.word	0x000120b5
