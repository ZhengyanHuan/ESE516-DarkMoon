
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cfa4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000a8  20000000  0000cfa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c40  200000a8  0000d04c  000200a8  2**2
                  ALLOC
  3 .stack        00002000  20000ce8  0000dc8c  000200a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004d92f  00000000  00000000  00020129  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006277  00000000  00000000  0006da58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005b5d  00000000  00000000  00073ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010b8  00000000  00000000  0007982c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e88  00000000  00000000  0007a8e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000218fb  00000000  00000000  0007b76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019324  00000000  00000000  0009d067  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093d95  00000000  00000000  000b638b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003d4c  00000000  00000000  0014a120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 2c 00 20 45 6e 00 00 3d 6f 00 00 3d 6f 00 00     .,. En..=o..=o..
	...
      2c:	3d 6f 00 00 00 00 00 00 00 00 00 00 3d 6f 00 00     =o..........=o..
      3c:	e5 01 00 00 3d 6f 00 00 3d 6f 00 00 3d 6f 00 00     ....=o..=o..=o..
      4c:	3d 6f 00 00 3d 6f 00 00 3d 6f 00 00 3d 6f 00 00     =o..=o..=o..=o..
      5c:	3d 6f 00 00 3d 6f 00 00 d1 40 00 00 e9 40 00 00     =o..=o...@...@..
      6c:	01 41 00 00 19 41 00 00 31 41 00 00 49 41 00 00     .A...A..1A..IA..
      7c:	3d 6f 00 00 3d 6f 00 00 3d 6f 00 00 3d 6f 00 00     =o..=o..=o..=o..
      8c:	3d 6f 00 00 3d 6f 00 00 00 00 00 00 00 00 00 00     =o..=o..........
      9c:	3d 6f 00 00 3d 6f 00 00 3d 6f 00 00 3d 6f 00 00     =o..=o..=o..=o..
      ac:	3d 6f 00 00 00 00 00 00                             =o......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000a8 	.word	0x200000a8
      d4:	00000000 	.word	0x00000000
      d8:	0000cfa4 	.word	0x0000cfa4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000ac 	.word	0x200000ac
     108:	0000cfa4 	.word	0x0000cfa4
     10c:	0000cfa4 	.word	0x0000cfa4
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	000069f9 	.word	0x000069f9
     190:	20000000 	.word	0x20000000
     194:	0000b789 	.word	0x0000b789
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000c4 	.word	0x200000c4

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000c4 	.word	0x200000c4

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <system_board_init+0x44>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <system_board_init+0x48>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <system_board_init+0x4c>)
     31c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     324:	1d3b      	adds	r3, r7, #4
     326:	2201      	movs	r2, #1
     328:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     32a:	1d3b      	adds	r3, r7, #4
     32c:	0019      	movs	r1, r3
     32e:	2037      	movs	r0, #55	; 0x37
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <system_board_init+0x48>)
     332:	4798      	blx	r3
}
     334:	46c0      	nop			; (mov r8, r8)
     336:	46bd      	mov	sp, r7
     338:	b002      	add	sp, #8
     33a:	bd80      	pop	{r7, pc}
     33c:	00000281 	.word	0x00000281
     340:	00003501 	.word	0x00003501
     344:	000002a5 	.word	0x000002a5

00000348 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
     348:	b580      	push	{r7, lr}
     34a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
     34c:	4b04      	ldr	r3, [pc, #16]	; (360 <system_interrupt_enable_global+0x18>)
     34e:	2201      	movs	r2, #1
     350:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     352:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     356:	b662      	cpsie	i
}
     358:	46c0      	nop			; (mov r8, r8)
     35a:	46bd      	mov	sp, r7
     35c:	bd80      	pop	{r7, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	20000009 	.word	0x20000009

00000364 <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
     364:	b580      	push	{r7, lr}
     366:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     368:	b672      	cpsid	i
     36a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     36e:	4b03      	ldr	r3, [pc, #12]	; (37c <system_interrupt_disable_global+0x18>)
     370:	2200      	movs	r2, #0
     372:	701a      	strb	r2, [r3, #0]
}
     374:	46c0      	nop			; (mov r8, r8)
     376:	46bd      	mov	sp, r7
     378:	bd80      	pop	{r7, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	20000009 	.word	0x20000009

00000380 <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     380:	b580      	push	{r7, lr}
     382:	b084      	sub	sp, #16
     384:	af00      	add	r7, sp, #0
     386:	60f8      	str	r0, [r7, #12]
     388:	60b9      	str	r1, [r7, #8]
     38a:	607a      	str	r2, [r7, #4]
	if (addr & 0x00000003) {
     38c:	68fb      	ldr	r3, [r7, #12]
     38e:	2203      	movs	r2, #3
     390:	4013      	ands	r3, r2
     392:	d001      	beq.n	398 <dsu_crc32_cal+0x18>
		return STATUS_ERR_BAD_ADDRESS;
     394:	2318      	movs	r3, #24
     396:	e040      	b.n	41a <dsu_crc32_cal+0x9a>
	}

	system_interrupt_disable_global();
     398:	4b22      	ldr	r3, [pc, #136]	; (424 <dsu_crc32_cal+0xa4>)
     39a:	4798      	blx	r3
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     39c:	2322      	movs	r3, #34	; 0x22
     39e:	425b      	negs	r3, r3
     3a0:	0019      	movs	r1, r3
     3a2:	2021      	movs	r0, #33	; 0x21
     3a4:	4b20      	ldr	r3, [pc, #128]	; (428 <dsu_crc32_cal+0xa8>)
     3a6:	4798      	blx	r3

	DSU->DATA.reg = *pcrc32;
     3a8:	4a20      	ldr	r2, [pc, #128]	; (42c <dsu_crc32_cal+0xac>)
     3aa:	687b      	ldr	r3, [r7, #4]
     3ac:	681b      	ldr	r3, [r3, #0]
     3ae:	60d3      	str	r3, [r2, #12]
	DSU->ADDR.reg = addr;
     3b0:	4b1e      	ldr	r3, [pc, #120]	; (42c <dsu_crc32_cal+0xac>)
     3b2:	68fa      	ldr	r2, [r7, #12]
     3b4:	605a      	str	r2, [r3, #4]
	DSU->LENGTH.reg = len;
     3b6:	4b1d      	ldr	r3, [pc, #116]	; (42c <dsu_crc32_cal+0xac>)
     3b8:	68ba      	ldr	r2, [r7, #8]
     3ba:	609a      	str	r2, [r3, #8]

	DSU->CTRL.bit.CRC = 1;
     3bc:	4a1b      	ldr	r2, [pc, #108]	; (42c <dsu_crc32_cal+0xac>)
     3be:	7813      	ldrb	r3, [r2, #0]
     3c0:	2104      	movs	r1, #4
     3c2:	430b      	orrs	r3, r1
     3c4:	7013      	strb	r3, [r2, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	4b18      	ldr	r3, [pc, #96]	; (42c <dsu_crc32_cal+0xac>)
     3ca:	785b      	ldrb	r3, [r3, #1]
     3cc:	b2db      	uxtb	r3, r3
     3ce:	001a      	movs	r2, r3
     3d0:	2301      	movs	r3, #1
     3d2:	4013      	ands	r3, r2
     3d4:	2b01      	cmp	r3, #1
     3d6:	d1f7      	bne.n	3c8 <dsu_crc32_cal+0x48>
	}

	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     3d8:	4b14      	ldr	r3, [pc, #80]	; (42c <dsu_crc32_cal+0xac>)
     3da:	785b      	ldrb	r3, [r3, #1]
     3dc:	b2db      	uxtb	r3, r3
     3de:	001a      	movs	r2, r3
     3e0:	2304      	movs	r3, #4
     3e2:	4013      	ands	r3, r2
     3e4:	d009      	beq.n	3fa <dsu_crc32_cal+0x7a>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     3e6:	2322      	movs	r3, #34	; 0x22
     3e8:	425b      	negs	r3, r3
     3ea:	0019      	movs	r1, r3
     3ec:	2021      	movs	r0, #33	; 0x21
     3ee:	4b10      	ldr	r3, [pc, #64]	; (430 <dsu_crc32_cal+0xb0>)
     3f0:	4798      	blx	r3
		system_interrupt_enable_global();
     3f2:	4b10      	ldr	r3, [pc, #64]	; (434 <dsu_crc32_cal+0xb4>)
     3f4:	4798      	blx	r3
		return STATUS_ERR_IO;
     3f6:	2310      	movs	r3, #16
     3f8:	e00f      	b.n	41a <dsu_crc32_cal+0x9a>
	}

	*pcrc32 = DSU->DATA.reg;
     3fa:	4b0c      	ldr	r3, [pc, #48]	; (42c <dsu_crc32_cal+0xac>)
     3fc:	68da      	ldr	r2, [r3, #12]
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	601a      	str	r2, [r3, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     402:	4b0a      	ldr	r3, [pc, #40]	; (42c <dsu_crc32_cal+0xac>)
     404:	2201      	movs	r2, #1
     406:	705a      	strb	r2, [r3, #1]

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     408:	2322      	movs	r3, #34	; 0x22
     40a:	425b      	negs	r3, r3
     40c:	0019      	movs	r1, r3
     40e:	2021      	movs	r0, #33	; 0x21
     410:	4b07      	ldr	r3, [pc, #28]	; (430 <dsu_crc32_cal+0xb0>)
     412:	4798      	blx	r3
	system_interrupt_enable_global();
     414:	4b07      	ldr	r3, [pc, #28]	; (434 <dsu_crc32_cal+0xb4>)
     416:	4798      	blx	r3
	return STATUS_OK;
     418:	2300      	movs	r3, #0
     41a:	0018      	movs	r0, r3
     41c:	46bd      	mov	sp, r7
     41e:	b004      	add	sp, #16
     420:	bd80      	pop	{r7, pc}
     422:	46c0      	nop			; (mov r8, r8)
     424:	00000365 	.word	0x00000365
     428:	00000995 	.word	0x00000995
     42c:	41002000 	.word	0x41002000
     430:	000008fd 	.word	0x000008fd
     434:	00000349 	.word	0x00000349

00000438 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <nvm_is_ready+0x24>)
     440:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     442:	687b      	ldr	r3, [r7, #4]
     444:	7d1b      	ldrb	r3, [r3, #20]
     446:	b2db      	uxtb	r3, r3
     448:	001a      	movs	r2, r3
     44a:	2301      	movs	r3, #1
     44c:	4013      	ands	r3, r2
     44e:	1e5a      	subs	r2, r3, #1
     450:	4193      	sbcs	r3, r2
     452:	b2db      	uxtb	r3, r3
}
     454:	0018      	movs	r0, r3
     456:	46bd      	mov	sp, r7
     458:	b002      	add	sp, #8
     45a:	bd80      	pop	{r7, pc}
     45c:	41004000 	.word	0x41004000

00000460 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af00      	add	r7, sp, #0
     466:	0002      	movs	r2, r0
     468:	6039      	str	r1, [r7, #0]
     46a:	1dfb      	adds	r3, r7, #7
     46c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     46e:	1dfb      	adds	r3, r7, #7
     470:	781b      	ldrb	r3, [r3, #0]
     472:	2b01      	cmp	r3, #1
     474:	d00a      	beq.n	48c <system_apb_clock_set_mask+0x2c>
     476:	2b02      	cmp	r3, #2
     478:	d00f      	beq.n	49a <system_apb_clock_set_mask+0x3a>
     47a:	2b00      	cmp	r3, #0
     47c:	d114      	bne.n	4a8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     47e:	4b0e      	ldr	r3, [pc, #56]	; (4b8 <system_apb_clock_set_mask+0x58>)
     480:	4a0d      	ldr	r2, [pc, #52]	; (4b8 <system_apb_clock_set_mask+0x58>)
     482:	6991      	ldr	r1, [r2, #24]
     484:	683a      	ldr	r2, [r7, #0]
     486:	430a      	orrs	r2, r1
     488:	619a      	str	r2, [r3, #24]
			break;
     48a:	e00f      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     48c:	4b0a      	ldr	r3, [pc, #40]	; (4b8 <system_apb_clock_set_mask+0x58>)
     48e:	4a0a      	ldr	r2, [pc, #40]	; (4b8 <system_apb_clock_set_mask+0x58>)
     490:	69d1      	ldr	r1, [r2, #28]
     492:	683a      	ldr	r2, [r7, #0]
     494:	430a      	orrs	r2, r1
     496:	61da      	str	r2, [r3, #28]
			break;
     498:	e008      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     49a:	4b07      	ldr	r3, [pc, #28]	; (4b8 <system_apb_clock_set_mask+0x58>)
     49c:	4a06      	ldr	r2, [pc, #24]	; (4b8 <system_apb_clock_set_mask+0x58>)
     49e:	6a11      	ldr	r1, [r2, #32]
     4a0:	683a      	ldr	r2, [r7, #0]
     4a2:	430a      	orrs	r2, r1
     4a4:	621a      	str	r2, [r3, #32]
			break;
     4a6:	e001      	b.n	4ac <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     4a8:	2317      	movs	r3, #23
     4aa:	e000      	b.n	4ae <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     4ac:	2300      	movs	r3, #0
}
     4ae:	0018      	movs	r0, r3
     4b0:	46bd      	mov	sp, r7
     4b2:	b002      	add	sp, #8
     4b4:	bd80      	pop	{r7, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	40000400 	.word	0x40000400

000004bc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     4bc:	b580      	push	{r7, lr}
     4be:	b084      	sub	sp, #16
     4c0:	af00      	add	r7, sp, #0
     4c2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     4c4:	4b2f      	ldr	r3, [pc, #188]	; (584 <nvm_set_config+0xc8>)
     4c6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     4c8:	2104      	movs	r1, #4
     4ca:	2001      	movs	r0, #1
     4cc:	4b2e      	ldr	r3, [pc, #184]	; (588 <nvm_set_config+0xcc>)
     4ce:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     4d0:	68fb      	ldr	r3, [r7, #12]
     4d2:	2220      	movs	r2, #32
     4d4:	32ff      	adds	r2, #255	; 0xff
     4d6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     4d8:	4b2c      	ldr	r3, [pc, #176]	; (58c <nvm_set_config+0xd0>)
     4da:	4798      	blx	r3
     4dc:	0003      	movs	r3, r0
     4de:	001a      	movs	r2, r3
     4e0:	2301      	movs	r3, #1
     4e2:	4053      	eors	r3, r2
     4e4:	b2db      	uxtb	r3, r3
     4e6:	2b00      	cmp	r3, #0
     4e8:	d001      	beq.n	4ee <nvm_set_config+0x32>
		return STATUS_BUSY;
     4ea:	2305      	movs	r3, #5
     4ec:	e045      	b.n	57a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     4ee:	687b      	ldr	r3, [r7, #4]
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	021b      	lsls	r3, r3, #8
     4f4:	001a      	movs	r2, r3
     4f6:	23c0      	movs	r3, #192	; 0xc0
     4f8:	009b      	lsls	r3, r3, #2
     4fa:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     4fc:	687b      	ldr	r3, [r7, #4]
     4fe:	785b      	ldrb	r3, [r3, #1]
     500:	01db      	lsls	r3, r3, #7
     502:	0019      	movs	r1, r3
     504:	23ff      	movs	r3, #255	; 0xff
     506:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     508:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	789b      	ldrb	r3, [r3, #2]
     50e:	005b      	lsls	r3, r3, #1
     510:	0019      	movs	r1, r3
     512:	231e      	movs	r3, #30
     514:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     516:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     518:	687b      	ldr	r3, [r7, #4]
     51a:	78db      	ldrb	r3, [r3, #3]
     51c:	049b      	lsls	r3, r3, #18
     51e:	0019      	movs	r1, r3
     520:	2380      	movs	r3, #128	; 0x80
     522:	02db      	lsls	r3, r3, #11
     524:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     526:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     528:	687b      	ldr	r3, [r7, #4]
     52a:	791b      	ldrb	r3, [r3, #4]
     52c:	041b      	lsls	r3, r3, #16
     52e:	0019      	movs	r1, r3
     530:	23c0      	movs	r3, #192	; 0xc0
     532:	029b      	lsls	r3, r3, #10
     534:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     536:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     538:	68fb      	ldr	r3, [r7, #12]
     53a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     53c:	68fb      	ldr	r3, [r7, #12]
     53e:	689b      	ldr	r3, [r3, #8]
     540:	035b      	lsls	r3, r3, #13
     542:	0f5b      	lsrs	r3, r3, #29
     544:	b2db      	uxtb	r3, r3
     546:	001a      	movs	r2, r3
     548:	2308      	movs	r3, #8
     54a:	4093      	lsls	r3, r2
     54c:	b29a      	uxth	r2, r3
     54e:	4b10      	ldr	r3, [pc, #64]	; (590 <nvm_set_config+0xd4>)
     550:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     552:	68fb      	ldr	r3, [r7, #12]
     554:	689b      	ldr	r3, [r3, #8]
     556:	b29a      	uxth	r2, r3
     558:	4b0d      	ldr	r3, [pc, #52]	; (590 <nvm_set_config+0xd4>)
     55a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     55c:	687b      	ldr	r3, [r7, #4]
     55e:	785a      	ldrb	r2, [r3, #1]
     560:	4b0b      	ldr	r3, [pc, #44]	; (590 <nvm_set_config+0xd4>)
     562:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     564:	68fb      	ldr	r3, [r7, #12]
     566:	8b1b      	ldrh	r3, [r3, #24]
     568:	b29b      	uxth	r3, r3
     56a:	001a      	movs	r2, r3
     56c:	2380      	movs	r3, #128	; 0x80
     56e:	005b      	lsls	r3, r3, #1
     570:	4013      	ands	r3, r2
     572:	d001      	beq.n	578 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     574:	2310      	movs	r3, #16
     576:	e000      	b.n	57a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     578:	2300      	movs	r3, #0
}
     57a:	0018      	movs	r0, r3
     57c:	46bd      	mov	sp, r7
     57e:	b004      	add	sp, #16
     580:	bd80      	pop	{r7, pc}
     582:	46c0      	nop			; (mov r8, r8)
     584:	41004000 	.word	0x41004000
     588:	00000461 	.word	0x00000461
     58c:	00000439 	.word	0x00000439
     590:	200000c8 	.word	0x200000c8

00000594 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     594:	b580      	push	{r7, lr}
     596:	b086      	sub	sp, #24
     598:	af00      	add	r7, sp, #0
     59a:	60b9      	str	r1, [r7, #8]
     59c:	607a      	str	r2, [r7, #4]
     59e:	230f      	movs	r3, #15
     5a0:	18fb      	adds	r3, r7, r3
     5a2:	1c02      	adds	r2, r0, #0
     5a4:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     5a6:	4b3a      	ldr	r3, [pc, #232]	; (690 <nvm_execute_command+0xfc>)
     5a8:	881b      	ldrh	r3, [r3, #0]
     5aa:	001a      	movs	r2, r3
     5ac:	4b38      	ldr	r3, [pc, #224]	; (690 <nvm_execute_command+0xfc>)
     5ae:	885b      	ldrh	r3, [r3, #2]
     5b0:	435a      	muls	r2, r3
     5b2:	68bb      	ldr	r3, [r7, #8]
     5b4:	429a      	cmp	r2, r3
     5b6:	d209      	bcs.n	5cc <nvm_execute_command+0x38>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     5b8:	68bb      	ldr	r3, [r7, #8]
     5ba:	4a36      	ldr	r2, [pc, #216]	; (694 <nvm_execute_command+0x100>)
     5bc:	4293      	cmp	r3, r2
     5be:	d903      	bls.n	5c8 <nvm_execute_command+0x34>
     5c0:	68bb      	ldr	r3, [r7, #8]
     5c2:	4a35      	ldr	r2, [pc, #212]	; (698 <nvm_execute_command+0x104>)
     5c4:	4293      	cmp	r3, r2
     5c6:	d901      	bls.n	5cc <nvm_execute_command+0x38>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     5c8:	2318      	movs	r3, #24
     5ca:	e05c      	b.n	686 <nvm_execute_command+0xf2>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     5cc:	4b33      	ldr	r3, [pc, #204]	; (69c <nvm_execute_command+0x108>)
     5ce:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     5d0:	697b      	ldr	r3, [r7, #20]
     5d2:	685b      	ldr	r3, [r3, #4]
     5d4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     5d6:	693b      	ldr	r3, [r7, #16]
     5d8:	2280      	movs	r2, #128	; 0x80
     5da:	02d2      	lsls	r2, r2, #11
     5dc:	431a      	orrs	r2, r3
     5de:	697b      	ldr	r3, [r7, #20]
     5e0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     5e2:	697b      	ldr	r3, [r7, #20]
     5e4:	2220      	movs	r2, #32
     5e6:	32ff      	adds	r2, #255	; 0xff
     5e8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     5ea:	4b2d      	ldr	r3, [pc, #180]	; (6a0 <nvm_execute_command+0x10c>)
     5ec:	4798      	blx	r3
     5ee:	0003      	movs	r3, r0
     5f0:	001a      	movs	r2, r3
     5f2:	2301      	movs	r3, #1
     5f4:	4053      	eors	r3, r2
     5f6:	b2db      	uxtb	r3, r3
     5f8:	2b00      	cmp	r3, #0
     5fa:	d004      	beq.n	606 <nvm_execute_command+0x72>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     5fc:	697b      	ldr	r3, [r7, #20]
     5fe:	693a      	ldr	r2, [r7, #16]
     600:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
     602:	2305      	movs	r3, #5
     604:	e03f      	b.n	686 <nvm_execute_command+0xf2>
	}

	switch (command) {
     606:	230f      	movs	r3, #15
     608:	18fb      	adds	r3, r7, r3
     60a:	781b      	ldrb	r3, [r3, #0]
     60c:	2b45      	cmp	r3, #69	; 0x45
     60e:	d81d      	bhi.n	64c <nvm_execute_command+0xb8>
     610:	009a      	lsls	r2, r3, #2
     612:	4b24      	ldr	r3, [pc, #144]	; (6a4 <nvm_execute_command+0x110>)
     614:	18d3      	adds	r3, r2, r3
     616:	681b      	ldr	r3, [r3, #0]
     618:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     61a:	697b      	ldr	r3, [r7, #20]
     61c:	8b1b      	ldrh	r3, [r3, #24]
     61e:	b29b      	uxth	r3, r3
     620:	001a      	movs	r2, r3
     622:	2380      	movs	r3, #128	; 0x80
     624:	005b      	lsls	r3, r3, #1
     626:	4013      	ands	r3, r2
     628:	d004      	beq.n	634 <nvm_execute_command+0xa0>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
     62a:	697b      	ldr	r3, [r7, #20]
     62c:	693a      	ldr	r2, [r7, #16]
     62e:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
     630:	2310      	movs	r3, #16
     632:	e028      	b.n	686 <nvm_execute_command+0xf2>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     634:	68bb      	ldr	r3, [r7, #8]
     636:	089b      	lsrs	r3, r3, #2
     638:	005a      	lsls	r2, r3, #1
     63a:	697b      	ldr	r3, [r7, #20]
     63c:	61da      	str	r2, [r3, #28]
			break;
     63e:	e00b      	b.n	658 <nvm_execute_command+0xc4>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     640:	68bb      	ldr	r3, [r7, #8]
     642:	089b      	lsrs	r3, r3, #2
     644:	005a      	lsls	r2, r3, #1
     646:	697b      	ldr	r3, [r7, #20]
     648:	61da      	str	r2, [r3, #28]
			break;
     64a:	e005      	b.n	658 <nvm_execute_command+0xc4>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
     64c:	697b      	ldr	r3, [r7, #20]
     64e:	693a      	ldr	r2, [r7, #16]
     650:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     652:	2317      	movs	r3, #23
     654:	e017      	b.n	686 <nvm_execute_command+0xf2>
			break;
     656:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     658:	230f      	movs	r3, #15
     65a:	18fb      	adds	r3, r7, r3
     65c:	781b      	ldrb	r3, [r3, #0]
     65e:	b29b      	uxth	r3, r3
     660:	4a11      	ldr	r2, [pc, #68]	; (6a8 <nvm_execute_command+0x114>)
     662:	4313      	orrs	r3, r2
     664:	b29a      	uxth	r2, r3
     666:	697b      	ldr	r3, [r7, #20]
     668:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	4b0c      	ldr	r3, [pc, #48]	; (6a0 <nvm_execute_command+0x10c>)
     66e:	4798      	blx	r3
     670:	0003      	movs	r3, r0
     672:	001a      	movs	r2, r3
     674:	2301      	movs	r3, #1
     676:	4053      	eors	r3, r2
     678:	b2db      	uxtb	r3, r3
     67a:	2b00      	cmp	r3, #0
     67c:	d1f6      	bne.n	66c <nvm_execute_command+0xd8>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
     67e:	697b      	ldr	r3, [r7, #20]
     680:	693a      	ldr	r2, [r7, #16]
     682:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
     684:	2300      	movs	r3, #0
}
     686:	0018      	movs	r0, r3
     688:	46bd      	mov	sp, r7
     68a:	b006      	add	sp, #24
     68c:	bd80      	pop	{r7, pc}
     68e:	46c0      	nop			; (mov r8, r8)
     690:	200000c8 	.word	0x200000c8
     694:	00803fff 	.word	0x00803fff
     698:	00806000 	.word	0x00806000
     69c:	41004000 	.word	0x41004000
     6a0:	00000439 	.word	0x00000439
     6a4:	0000c300 	.word	0x0000c300
     6a8:	ffffa500 	.word	0xffffa500

000006ac <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     6ac:	b580      	push	{r7, lr}
     6ae:	b088      	sub	sp, #32
     6b0:	af00      	add	r7, sp, #0
     6b2:	60f8      	str	r0, [r7, #12]
     6b4:	60b9      	str	r1, [r7, #8]
     6b6:	1dbb      	adds	r3, r7, #6
     6b8:	801a      	strh	r2, [r3, #0]
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     6ba:	4b4a      	ldr	r3, [pc, #296]	; (7e4 <nvm_write_buffer+0x138>)
     6bc:	881b      	ldrh	r3, [r3, #0]
     6be:	001a      	movs	r2, r3
     6c0:	4b48      	ldr	r3, [pc, #288]	; (7e4 <nvm_write_buffer+0x138>)
     6c2:	885b      	ldrh	r3, [r3, #2]
     6c4:	435a      	muls	r2, r3
	if (destination_address >
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	429a      	cmp	r2, r3
     6ca:	d201      	bcs.n	6d0 <nvm_write_buffer+0x24>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     6cc:	2318      	movs	r3, #24
     6ce:	e084      	b.n	7da <nvm_write_buffer+0x12e>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     6d0:	4b44      	ldr	r3, [pc, #272]	; (7e4 <nvm_write_buffer+0x138>)
     6d2:	881b      	ldrh	r3, [r3, #0]
     6d4:	3b01      	subs	r3, #1
     6d6:	001a      	movs	r2, r3
     6d8:	68fb      	ldr	r3, [r7, #12]
     6da:	4013      	ands	r3, r2
     6dc:	d001      	beq.n	6e2 <nvm_write_buffer+0x36>
		return STATUS_ERR_BAD_ADDRESS;
     6de:	2318      	movs	r3, #24
     6e0:	e07b      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
     6e2:	4b40      	ldr	r3, [pc, #256]	; (7e4 <nvm_write_buffer+0x138>)
     6e4:	881b      	ldrh	r3, [r3, #0]
     6e6:	1dba      	adds	r2, r7, #6
     6e8:	8812      	ldrh	r2, [r2, #0]
     6ea:	429a      	cmp	r2, r3
     6ec:	d901      	bls.n	6f2 <nvm_write_buffer+0x46>
		return STATUS_ERR_INVALID_ARG;
     6ee:	2317      	movs	r3, #23
     6f0:	e073      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     6f2:	4b3d      	ldr	r3, [pc, #244]	; (7e8 <nvm_write_buffer+0x13c>)
     6f4:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     6f6:	4b3d      	ldr	r3, [pc, #244]	; (7ec <nvm_write_buffer+0x140>)
     6f8:	4798      	blx	r3
     6fa:	0003      	movs	r3, r0
     6fc:	001a      	movs	r2, r3
     6fe:	2301      	movs	r3, #1
     700:	4053      	eors	r3, r2
     702:	b2db      	uxtb	r3, r3
     704:	2b00      	cmp	r3, #0
     706:	d001      	beq.n	70c <nvm_write_buffer+0x60>
		return STATUS_BUSY;
     708:	2305      	movs	r3, #5
     70a:	e066      	b.n	7da <nvm_write_buffer+0x12e>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     70c:	697b      	ldr	r3, [r7, #20]
     70e:	4a38      	ldr	r2, [pc, #224]	; (7f0 <nvm_write_buffer+0x144>)
     710:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
     712:	46c0      	nop			; (mov r8, r8)
     714:	4b35      	ldr	r3, [pc, #212]	; (7ec <nvm_write_buffer+0x140>)
     716:	4798      	blx	r3
     718:	0003      	movs	r3, r0
     71a:	001a      	movs	r2, r3
     71c:	2301      	movs	r3, #1
     71e:	4053      	eors	r3, r2
     720:	b2db      	uxtb	r3, r3
     722:	2b00      	cmp	r3, #0
     724:	d1f6      	bne.n	714 <nvm_write_buffer+0x68>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     726:	697b      	ldr	r3, [r7, #20]
     728:	2220      	movs	r2, #32
     72a:	32ff      	adds	r2, #255	; 0xff
     72c:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
     72e:	68fb      	ldr	r3, [r7, #12]
     730:	085b      	lsrs	r3, r3, #1
     732:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
     734:	231a      	movs	r3, #26
     736:	18fb      	adds	r3, r7, r3
     738:	2200      	movs	r2, #0
     73a:	801a      	strh	r2, [r3, #0]
     73c:	e032      	b.n	7a4 <nvm_write_buffer+0xf8>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
     73e:	231a      	movs	r3, #26
     740:	18fb      	adds	r3, r7, r3
     742:	881b      	ldrh	r3, [r3, #0]
     744:	68ba      	ldr	r2, [r7, #8]
     746:	18d3      	adds	r3, r2, r3
     748:	781a      	ldrb	r2, [r3, #0]
     74a:	2318      	movs	r3, #24
     74c:	18fb      	adds	r3, r7, r3
     74e:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
     750:	231a      	movs	r3, #26
     752:	18fb      	adds	r3, r7, r3
     754:	881a      	ldrh	r2, [r3, #0]
     756:	1dbb      	adds	r3, r7, #6
     758:	881b      	ldrh	r3, [r3, #0]
     75a:	3b01      	subs	r3, #1
     75c:	429a      	cmp	r2, r3
     75e:	da11      	bge.n	784 <nvm_write_buffer+0xd8>
			data |= (buffer[i + 1] << 8);
     760:	231a      	movs	r3, #26
     762:	18fb      	adds	r3, r7, r3
     764:	881b      	ldrh	r3, [r3, #0]
     766:	3301      	adds	r3, #1
     768:	68ba      	ldr	r2, [r7, #8]
     76a:	18d3      	adds	r3, r2, r3
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	021b      	lsls	r3, r3, #8
     770:	b21a      	sxth	r2, r3
     772:	2318      	movs	r3, #24
     774:	18fb      	adds	r3, r7, r3
     776:	2100      	movs	r1, #0
     778:	5e5b      	ldrsh	r3, [r3, r1]
     77a:	4313      	orrs	r3, r2
     77c:	b21a      	sxth	r2, r3
     77e:	2318      	movs	r3, #24
     780:	18fb      	adds	r3, r7, r3
     782:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
     784:	69fb      	ldr	r3, [r7, #28]
     786:	1c5a      	adds	r2, r3, #1
     788:	61fa      	str	r2, [r7, #28]
     78a:	005b      	lsls	r3, r3, #1
     78c:	001a      	movs	r2, r3
     78e:	2318      	movs	r3, #24
     790:	18fb      	adds	r3, r7, r3
     792:	881b      	ldrh	r3, [r3, #0]
     794:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     796:	231a      	movs	r3, #26
     798:	18fb      	adds	r3, r7, r3
     79a:	221a      	movs	r2, #26
     79c:	18ba      	adds	r2, r7, r2
     79e:	8812      	ldrh	r2, [r2, #0]
     7a0:	3202      	adds	r2, #2
     7a2:	801a      	strh	r2, [r3, #0]
     7a4:	231a      	movs	r3, #26
     7a6:	18fa      	adds	r2, r7, r3
     7a8:	1dbb      	adds	r3, r7, #6
     7aa:	8812      	ldrh	r2, [r2, #0]
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	429a      	cmp	r2, r3
     7b0:	d3c5      	bcc.n	73e <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     7b2:	4b0c      	ldr	r3, [pc, #48]	; (7e4 <nvm_write_buffer+0x138>)
     7b4:	791b      	ldrb	r3, [r3, #4]
     7b6:	2201      	movs	r2, #1
     7b8:	4053      	eors	r3, r2
     7ba:	b2db      	uxtb	r3, r3
     7bc:	2b00      	cmp	r3, #0
     7be:	d00b      	beq.n	7d8 <nvm_write_buffer+0x12c>
     7c0:	1dbb      	adds	r3, r7, #6
     7c2:	881b      	ldrh	r3, [r3, #0]
     7c4:	2b3f      	cmp	r3, #63	; 0x3f
     7c6:	d807      	bhi.n	7d8 <nvm_write_buffer+0x12c>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     7c8:	68fb      	ldr	r3, [r7, #12]
     7ca:	2200      	movs	r2, #0
     7cc:	0019      	movs	r1, r3
     7ce:	2004      	movs	r0, #4
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <nvm_write_buffer+0x148>)
     7d2:	4798      	blx	r3
     7d4:	0003      	movs	r3, r0
     7d6:	e000      	b.n	7da <nvm_write_buffer+0x12e>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
     7d8:	2300      	movs	r3, #0
}
     7da:	0018      	movs	r0, r3
     7dc:	46bd      	mov	sp, r7
     7de:	b008      	add	sp, #32
     7e0:	bd80      	pop	{r7, pc}
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	200000c8 	.word	0x200000c8
     7e8:	41004000 	.word	0x41004000
     7ec:	00000439 	.word	0x00000439
     7f0:	ffffa544 	.word	0xffffa544
     7f4:	00000595 	.word	0x00000595

000007f8 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     800:	4b23      	ldr	r3, [pc, #140]	; (890 <nvm_erase_row+0x98>)
     802:	881b      	ldrh	r3, [r3, #0]
     804:	001a      	movs	r2, r3
     806:	4b22      	ldr	r3, [pc, #136]	; (890 <nvm_erase_row+0x98>)
     808:	885b      	ldrh	r3, [r3, #2]
     80a:	435a      	muls	r2, r3
	if (row_address >
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	429a      	cmp	r2, r3
     810:	d201      	bcs.n	816 <nvm_erase_row+0x1e>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     812:	2318      	movs	r3, #24
     814:	e037      	b.n	886 <nvm_erase_row+0x8e>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     816:	4b1e      	ldr	r3, [pc, #120]	; (890 <nvm_erase_row+0x98>)
     818:	881b      	ldrh	r3, [r3, #0]
     81a:	009b      	lsls	r3, r3, #2
     81c:	3b01      	subs	r3, #1
     81e:	001a      	movs	r2, r3
     820:	687b      	ldr	r3, [r7, #4]
     822:	4013      	ands	r3, r2
     824:	d001      	beq.n	82a <nvm_erase_row+0x32>
		return STATUS_ERR_BAD_ADDRESS;
     826:	2318      	movs	r3, #24
     828:	e02d      	b.n	886 <nvm_erase_row+0x8e>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     82a:	4b1a      	ldr	r3, [pc, #104]	; (894 <nvm_erase_row+0x9c>)
     82c:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     82e:	4b1a      	ldr	r3, [pc, #104]	; (898 <nvm_erase_row+0xa0>)
     830:	4798      	blx	r3
     832:	0003      	movs	r3, r0
     834:	001a      	movs	r2, r3
     836:	2301      	movs	r3, #1
     838:	4053      	eors	r3, r2
     83a:	b2db      	uxtb	r3, r3
     83c:	2b00      	cmp	r3, #0
     83e:	d001      	beq.n	844 <nvm_erase_row+0x4c>
		return STATUS_BUSY;
     840:	2305      	movs	r3, #5
     842:	e020      	b.n	886 <nvm_erase_row+0x8e>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     844:	68fb      	ldr	r3, [r7, #12]
     846:	2220      	movs	r2, #32
     848:	32ff      	adds	r2, #255	; 0xff
     84a:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     84c:	687b      	ldr	r3, [r7, #4]
     84e:	089b      	lsrs	r3, r3, #2
     850:	005a      	lsls	r2, r3, #1
     852:	68fb      	ldr	r3, [r7, #12]
     854:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     856:	68fb      	ldr	r3, [r7, #12]
     858:	4a10      	ldr	r2, [pc, #64]	; (89c <nvm_erase_row+0xa4>)
     85a:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
     85c:	46c0      	nop			; (mov r8, r8)
     85e:	4b0e      	ldr	r3, [pc, #56]	; (898 <nvm_erase_row+0xa0>)
     860:	4798      	blx	r3
     862:	0003      	movs	r3, r0
     864:	001a      	movs	r2, r3
     866:	2301      	movs	r3, #1
     868:	4053      	eors	r3, r2
     86a:	b2db      	uxtb	r3, r3
     86c:	2b00      	cmp	r3, #0
     86e:	d1f6      	bne.n	85e <nvm_erase_row+0x66>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     870:	68fb      	ldr	r3, [r7, #12]
     872:	8b1b      	ldrh	r3, [r3, #24]
     874:	b29b      	uxth	r3, r3
     876:	b2db      	uxtb	r3, r3
     878:	001a      	movs	r2, r3
     87a:	231c      	movs	r3, #28
     87c:	4013      	ands	r3, r2
     87e:	d001      	beq.n	884 <nvm_erase_row+0x8c>
		return STATUS_ABORTED;
     880:	2304      	movs	r3, #4
     882:	e000      	b.n	886 <nvm_erase_row+0x8e>
	}

	return STATUS_OK;
     884:	2300      	movs	r3, #0
}
     886:	0018      	movs	r0, r3
     888:	46bd      	mov	sp, r7
     88a:	b004      	add	sp, #16
     88c:	bd80      	pop	{r7, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	200000c8 	.word	0x200000c8
     894:	41004000 	.word	0x41004000
     898:	00000439 	.word	0x00000439
     89c:	ffffa502 	.word	0xffffa502

000008a0 <system_apb_clock_set_mask>:
{
     8a0:	b580      	push	{r7, lr}
     8a2:	b082      	sub	sp, #8
     8a4:	af00      	add	r7, sp, #0
     8a6:	0002      	movs	r2, r0
     8a8:	6039      	str	r1, [r7, #0]
     8aa:	1dfb      	adds	r3, r7, #7
     8ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     8ae:	1dfb      	adds	r3, r7, #7
     8b0:	781b      	ldrb	r3, [r3, #0]
     8b2:	2b01      	cmp	r3, #1
     8b4:	d00a      	beq.n	8cc <system_apb_clock_set_mask+0x2c>
     8b6:	2b02      	cmp	r3, #2
     8b8:	d00f      	beq.n	8da <system_apb_clock_set_mask+0x3a>
     8ba:	2b00      	cmp	r3, #0
     8bc:	d114      	bne.n	8e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
     8be:	4b0e      	ldr	r3, [pc, #56]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8c0:	4a0d      	ldr	r2, [pc, #52]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8c2:	6991      	ldr	r1, [r2, #24]
     8c4:	683a      	ldr	r2, [r7, #0]
     8c6:	430a      	orrs	r2, r1
     8c8:	619a      	str	r2, [r3, #24]
			break;
     8ca:	e00f      	b.n	8ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
     8cc:	4b0a      	ldr	r3, [pc, #40]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8ce:	4a0a      	ldr	r2, [pc, #40]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8d0:	69d1      	ldr	r1, [r2, #28]
     8d2:	683a      	ldr	r2, [r7, #0]
     8d4:	430a      	orrs	r2, r1
     8d6:	61da      	str	r2, [r3, #28]
			break;
     8d8:	e008      	b.n	8ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
     8da:	4b07      	ldr	r3, [pc, #28]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8dc:	4a06      	ldr	r2, [pc, #24]	; (8f8 <system_apb_clock_set_mask+0x58>)
     8de:	6a11      	ldr	r1, [r2, #32]
     8e0:	683a      	ldr	r2, [r7, #0]
     8e2:	430a      	orrs	r2, r1
     8e4:	621a      	str	r2, [r3, #32]
			break;
     8e6:	e001      	b.n	8ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
     8e8:	2317      	movs	r3, #23
     8ea:	e000      	b.n	8ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
     8ec:	2300      	movs	r3, #0
}
     8ee:	0018      	movs	r0, r3
     8f0:	46bd      	mov	sp, r7
     8f2:	b002      	add	sp, #8
     8f4:	bd80      	pop	{r7, pc}
     8f6:	46c0      	nop			; (mov r8, r8)
     8f8:	40000400 	.word	0x40000400

000008fc <system_peripheral_lock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_lock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     8fc:	b580      	push	{r7, lr}
     8fe:	b084      	sub	sp, #16
     900:	af00      	add	r7, sp, #0
     902:	6078      	str	r0, [r7, #4]
     904:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     906:	687b      	ldr	r3, [r7, #4]
     908:	b2da      	uxtb	r2, r3
     90a:	230f      	movs	r3, #15
     90c:	18fb      	adds	r3, r7, r3
     90e:	211f      	movs	r1, #31
     910:	400a      	ands	r2, r1
     912:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     914:	687b      	ldr	r3, [r7, #4]
     916:	095a      	lsrs	r2, r3, #5
     918:	230e      	movs	r3, #14
     91a:	18fb      	adds	r3, r7, r3
     91c:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     91e:	687b      	ldr	r3, [r7, #4]
     920:	43da      	mvns	r2, r3
     922:	683b      	ldr	r3, [r7, #0]
     924:	429a      	cmp	r2, r3
     926:	d001      	beq.n	92c <system_peripheral_lock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     928:	2317      	movs	r3, #23
     92a:	e02d      	b.n	988 <system_peripheral_lock+0x8c>
	}

	switch (register_pos) {
     92c:	230e      	movs	r3, #14
     92e:	18fb      	adds	r3, r7, r3
     930:	781b      	ldrb	r3, [r3, #0]
     932:	2b01      	cmp	r3, #1
     934:	d00d      	beq.n	952 <system_peripheral_lock+0x56>
     936:	2b02      	cmp	r3, #2
     938:	d015      	beq.n	966 <system_peripheral_lock+0x6a>
     93a:	2b00      	cmp	r3, #0
     93c:	d121      	bne.n	982 <system_peripheral_lock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPSET.reg = (1 << register_bit_pos);
     93e:	2380      	movs	r3, #128	; 0x80
     940:	05db      	lsls	r3, r3, #23
     942:	220f      	movs	r2, #15
     944:	18ba      	adds	r2, r7, r2
     946:	7812      	ldrb	r2, [r2, #0]
     948:	2101      	movs	r1, #1
     94a:	4091      	lsls	r1, r2
     94c:	000a      	movs	r2, r1
     94e:	605a      	str	r2, [r3, #4]
			break;
     950:	e019      	b.n	986 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPSET.reg = (1 << register_bit_pos);
     952:	2382      	movs	r3, #130	; 0x82
     954:	05db      	lsls	r3, r3, #23
     956:	220f      	movs	r2, #15
     958:	18ba      	adds	r2, r7, r2
     95a:	7812      	ldrb	r2, [r2, #0]
     95c:	2101      	movs	r1, #1
     95e:	4091      	lsls	r1, r2
     960:	000a      	movs	r2, r1
     962:	605a      	str	r2, [r3, #4]
			break;
     964:	e00f      	b.n	986 <system_peripheral_lock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     966:	2101      	movs	r1, #1
     968:	2002      	movs	r0, #2
     96a:	4b09      	ldr	r3, [pc, #36]	; (990 <system_peripheral_lock+0x94>)
     96c:	4798      	blx	r3
			PAC2->WPSET.reg = (1 << register_bit_pos);
     96e:	2384      	movs	r3, #132	; 0x84
     970:	05db      	lsls	r3, r3, #23
     972:	220f      	movs	r2, #15
     974:	18ba      	adds	r2, r7, r2
     976:	7812      	ldrb	r2, [r2, #0]
     978:	2101      	movs	r1, #1
     97a:	4091      	lsls	r1, r2
     97c:	000a      	movs	r2, r1
     97e:	605a      	str	r2, [r3, #4]
			break;
     980:	e001      	b.n	986 <system_peripheral_lock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     982:	2317      	movs	r3, #23
     984:	e000      	b.n	988 <system_peripheral_lock+0x8c>
	}

	return STATUS_OK;
     986:	2300      	movs	r3, #0
}
     988:	0018      	movs	r0, r3
     98a:	46bd      	mov	sp, r7
     98c:	b004      	add	sp, #16
     98e:	bd80      	pop	{r7, pc}
     990:	000008a1 	.word	0x000008a1

00000994 <system_peripheral_unlock>:
 * \retval STATUS_ERR_INVALID_ARG	If invalid argument(s) were supplied.
 */
__no_inline enum status_code system_peripheral_unlock(
		const uint32_t peripheral_id,
		const uint32_t key)
{
     994:	b580      	push	{r7, lr}
     996:	b084      	sub	sp, #16
     998:	af00      	add	r7, sp, #0
     99a:	6078      	str	r0, [r7, #4]
     99c:	6039      	str	r1, [r7, #0]
	/* Bit to be set in desired register is given by bit 5:0 */
	uint8_t register_bit_pos = peripheral_id % 32;
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	b2da      	uxtb	r2, r3
     9a2:	230f      	movs	r3, #15
     9a4:	18fb      	adds	r3, r7, r3
     9a6:	211f      	movs	r1, #31
     9a8:	400a      	ands	r2, r1
     9aa:	701a      	strb	r2, [r3, #0]
	UNUSED(register_bit_pos);

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;
     9ac:	687b      	ldr	r3, [r7, #4]
     9ae:	095a      	lsrs	r2, r3, #5
     9b0:	230e      	movs	r3, #14
     9b2:	18fb      	adds	r3, r7, r3
     9b4:	701a      	strb	r2, [r3, #0]

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	43da      	mvns	r2, r3
     9ba:	683b      	ldr	r3, [r7, #0]
     9bc:	429a      	cmp	r2, r3
     9be:	d001      	beq.n	9c4 <system_peripheral_unlock+0x30>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     9c0:	2317      	movs	r3, #23
     9c2:	e02d      	b.n	a20 <system_peripheral_unlock+0x8c>
	}

	switch (register_pos) {
     9c4:	230e      	movs	r3, #14
     9c6:	18fb      	adds	r3, r7, r3
     9c8:	781b      	ldrb	r3, [r3, #0]
     9ca:	2b01      	cmp	r3, #1
     9cc:	d00d      	beq.n	9ea <system_peripheral_unlock+0x56>
     9ce:	2b02      	cmp	r3, #2
     9d0:	d015      	beq.n	9fe <system_peripheral_unlock+0x6a>
     9d2:	2b00      	cmp	r3, #0
     9d4:	d121      	bne.n	a1a <system_peripheral_unlock+0x86>
#ifdef PAC0
		case 0:
			PAC0->WPCLR.reg = (1 << register_bit_pos);
     9d6:	2380      	movs	r3, #128	; 0x80
     9d8:	05db      	lsls	r3, r3, #23
     9da:	220f      	movs	r2, #15
     9dc:	18ba      	adds	r2, r7, r2
     9de:	7812      	ldrb	r2, [r2, #0]
     9e0:	2101      	movs	r1, #1
     9e2:	4091      	lsls	r1, r2
     9e4:	000a      	movs	r2, r1
     9e6:	601a      	str	r2, [r3, #0]
			break;
     9e8:	e019      	b.n	a1e <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC1
		case 1:
			PAC1->WPCLR.reg = (1 << register_bit_pos);
     9ea:	2382      	movs	r3, #130	; 0x82
     9ec:	05db      	lsls	r3, r3, #23
     9ee:	220f      	movs	r2, #15
     9f0:	18ba      	adds	r2, r7, r2
     9f2:	7812      	ldrb	r2, [r2, #0]
     9f4:	2101      	movs	r1, #1
     9f6:	4091      	lsls	r1, r2
     9f8:	000a      	movs	r2, r1
     9fa:	601a      	str	r2, [r3, #0]
			break;
     9fc:	e00f      	b.n	a1e <system_peripheral_unlock+0x8a>
#endif
#ifdef PAC2
		case 2:
			/* Turn on the digital interface clock */
			system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_PAC2);
     9fe:	2101      	movs	r1, #1
     a00:	2002      	movs	r0, #2
     a02:	4b09      	ldr	r3, [pc, #36]	; (a28 <system_peripheral_unlock+0x94>)
     a04:	4798      	blx	r3
			PAC2->WPCLR.reg = (1 << register_bit_pos);
     a06:	2384      	movs	r3, #132	; 0x84
     a08:	05db      	lsls	r3, r3, #23
     a0a:	220f      	movs	r2, #15
     a0c:	18ba      	adds	r2, r7, r2
     a0e:	7812      	ldrb	r2, [r2, #0]
     a10:	2101      	movs	r1, #1
     a12:	4091      	lsls	r1, r2
     a14:	000a      	movs	r2, r1
     a16:	601a      	str	r2, [r3, #0]
			break;
     a18:	e001      	b.n	a1e <system_peripheral_unlock+0x8a>
#endif
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     a1a:	2317      	movs	r3, #23
     a1c:	e000      	b.n	a20 <system_peripheral_unlock+0x8c>
	}

	return STATUS_OK;
     a1e:	2300      	movs	r3, #0
}
     a20:	0018      	movs	r0, r3
     a22:	46bd      	mov	sp, r7
     a24:	b004      	add	sp, #16
     a26:	bd80      	pop	{r7, pc}
     a28:	000008a1 	.word	0x000008a1

00000a2c <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     a2c:	b590      	push	{r4, r7, lr}
     a2e:	b083      	sub	sp, #12
     a30:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     a32:	4b16      	ldr	r3, [pc, #88]	; (a8c <SdCard_Initiate+0x60>)
     a34:	4798      	blx	r3
     a36:	0003      	movs	r3, r0
     a38:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     a3a:	1dfc      	adds	r4, r7, #7
     a3c:	2000      	movs	r0, #0
     a3e:	4b14      	ldr	r3, [pc, #80]	; (a90 <SdCard_Initiate+0x64>)
     a40:	4798      	blx	r3
     a42:	0003      	movs	r3, r0
     a44:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     a46:	1dfb      	adds	r3, r7, #7
     a48:	781b      	ldrb	r3, [r3, #0]
     a4a:	2b01      	cmp	r3, #1
     a4c:	d106      	bne.n	a5c <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	2000      	movs	r0, #0
     a52:	4b10      	ldr	r3, [pc, #64]	; (a94 <SdCard_Initiate+0x68>)
     a54:	4798      	blx	r3
     a56:	0003      	movs	r3, r0
     a58:	2b02      	cmp	r3, #2
     a5a:	d1f9      	bne.n	a50 <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     a5c:	4b0b      	ldr	r3, [pc, #44]	; (a8c <SdCard_Initiate+0x60>)
     a5e:	4798      	blx	r3
     a60:	0002      	movs	r2, r0
     a62:	683b      	ldr	r3, [r7, #0]
     a64:	1ad2      	subs	r2, r2, r3
     a66:	23fa      	movs	r3, #250	; 0xfa
     a68:	005b      	lsls	r3, r3, #1
     a6a:	429a      	cmp	r2, r3
     a6c:	d903      	bls.n	a76 <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     a6e:	1dfb      	adds	r3, r7, #7
     a70:	2201      	movs	r2, #1
     a72:	701a      	strb	r2, [r3, #0]
		break;
     a74:	e003      	b.n	a7e <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     a76:	1dfb      	adds	r3, r7, #7
     a78:	781b      	ldrb	r3, [r3, #0]
     a7a:	2b00      	cmp	r3, #0
     a7c:	d1dd      	bne.n	a3a <SdCard_Initiate+0xe>

return status;
     a7e:	1dfb      	adds	r3, r7, #7
     a80:	781b      	ldrb	r3, [r3, #0]
}
     a82:	0018      	movs	r0, r3
     a84:	46bd      	mov	sp, r7
     a86:	b003      	add	sp, #12
     a88:	bd90      	pop	{r4, r7, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	000001d1 	.word	0x000001d1
     a90:	00002335 	.word	0x00002335
     a94:	00001ea9 	.word	0x00001ea9

00000a98 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     a98:	b580      	push	{r7, lr}
     a9a:	b082      	sub	sp, #8
     a9c:	af00      	add	r7, sp, #0
     a9e:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     aa0:	687b      	ldr	r3, [r7, #4]
     aa2:	7c1b      	ldrb	r3, [r3, #16]
     aa4:	2b00      	cmp	r3, #0
     aa6:	d00b      	beq.n	ac0 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     aa8:	687b      	ldr	r3, [r7, #4]
     aaa:	689b      	ldr	r3, [r3, #8]
     aac:	1c5a      	adds	r2, r3, #1
     aae:	687b      	ldr	r3, [r7, #4]
     ab0:	68d9      	ldr	r1, [r3, #12]
     ab2:	4b10      	ldr	r3, [pc, #64]	; (af4 <advance_pointer+0x5c>)
     ab4:	0010      	movs	r0, r2
     ab6:	4798      	blx	r3
     ab8:	000b      	movs	r3, r1
     aba:	001a      	movs	r2, r3
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	685b      	ldr	r3, [r3, #4]
     ac4:	1c5a      	adds	r2, r3, #1
     ac6:	687b      	ldr	r3, [r7, #4]
     ac8:	68d9      	ldr	r1, [r3, #12]
     aca:	4b0a      	ldr	r3, [pc, #40]	; (af4 <advance_pointer+0x5c>)
     acc:	0010      	movs	r0, r2
     ace:	4798      	blx	r3
     ad0:	000b      	movs	r3, r1
     ad2:	001a      	movs	r2, r3
     ad4:	687b      	ldr	r3, [r7, #4]
     ad6:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	685a      	ldr	r2, [r3, #4]
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	689b      	ldr	r3, [r3, #8]
     ae0:	1ad3      	subs	r3, r2, r3
     ae2:	425a      	negs	r2, r3
     ae4:	4153      	adcs	r3, r2
     ae6:	b2da      	uxtb	r2, r3
     ae8:	687b      	ldr	r3, [r7, #4]
     aea:	741a      	strb	r2, [r3, #16]
 }
     aec:	46c0      	nop			; (mov r8, r8)
     aee:	46bd      	mov	sp, r7
     af0:	b002      	add	sp, #8
     af2:	bd80      	pop	{r7, pc}
     af4:	0000b895 	.word	0x0000b895

00000af8 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     af8:	b580      	push	{r7, lr}
     afa:	b082      	sub	sp, #8
     afc:	af00      	add	r7, sp, #0
     afe:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     b00:	687b      	ldr	r3, [r7, #4]
     b02:	2200      	movs	r2, #0
     b04:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     b06:	687b      	ldr	r3, [r7, #4]
     b08:	689b      	ldr	r3, [r3, #8]
     b0a:	1c5a      	adds	r2, r3, #1
     b0c:	687b      	ldr	r3, [r7, #4]
     b0e:	68d9      	ldr	r1, [r3, #12]
     b10:	4b05      	ldr	r3, [pc, #20]	; (b28 <retreat_pointer+0x30>)
     b12:	0010      	movs	r0, r2
     b14:	4798      	blx	r3
     b16:	000b      	movs	r3, r1
     b18:	001a      	movs	r2, r3
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	609a      	str	r2, [r3, #8]
 }
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	46bd      	mov	sp, r7
     b22:	b002      	add	sp, #8
     b24:	bd80      	pop	{r7, pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	0000b895 	.word	0x0000b895

00000b2c <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     b2c:	b580      	push	{r7, lr}
     b2e:	b084      	sub	sp, #16
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
     b34:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     b36:	2014      	movs	r0, #20
     b38:	4b09      	ldr	r3, [pc, #36]	; (b60 <circular_buf_init+0x34>)
     b3a:	4798      	blx	r3
     b3c:	0003      	movs	r3, r0
     b3e:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     b40:	68fb      	ldr	r3, [r7, #12]
     b42:	687a      	ldr	r2, [r7, #4]
     b44:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	683a      	ldr	r2, [r7, #0]
     b4a:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     b4c:	68fb      	ldr	r3, [r7, #12]
     b4e:	0018      	movs	r0, r3
     b50:	4b04      	ldr	r3, [pc, #16]	; (b64 <circular_buf_init+0x38>)
     b52:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     b54:	68fb      	ldr	r3, [r7, #12]
 }
     b56:	0018      	movs	r0, r3
     b58:	46bd      	mov	sp, r7
     b5a:	b004      	add	sp, #16
     b5c:	bd80      	pop	{r7, pc}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	0000bb11 	.word	0x0000bb11
     b64:	00000b69 	.word	0x00000b69

00000b68 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     b68:	b580      	push	{r7, lr}
     b6a:	b082      	sub	sp, #8
     b6c:	af00      	add	r7, sp, #0
     b6e:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     b70:	687b      	ldr	r3, [r7, #4]
     b72:	2200      	movs	r2, #0
     b74:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     b76:	687b      	ldr	r3, [r7, #4]
     b78:	2200      	movs	r2, #0
     b7a:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     b7c:	687b      	ldr	r3, [r7, #4]
     b7e:	2200      	movs	r2, #0
     b80:	741a      	strb	r2, [r3, #16]
 }
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	46bd      	mov	sp, r7
     b86:	b002      	add	sp, #8
     b88:	bd80      	pop	{r7, pc}
	...

00000b8c <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     b8c:	b580      	push	{r7, lr}
     b8e:	b082      	sub	sp, #8
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
     b94:	000a      	movs	r2, r1
     b96:	1cfb      	adds	r3, r7, #3
     b98:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     b9a:	687b      	ldr	r3, [r7, #4]
     b9c:	681a      	ldr	r2, [r3, #0]
     b9e:	687b      	ldr	r3, [r7, #4]
     ba0:	685b      	ldr	r3, [r3, #4]
     ba2:	18d3      	adds	r3, r2, r3
     ba4:	1cfa      	adds	r2, r7, #3
     ba6:	7812      	ldrb	r2, [r2, #0]
     ba8:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     baa:	687b      	ldr	r3, [r7, #4]
     bac:	0018      	movs	r0, r3
     bae:	4b03      	ldr	r3, [pc, #12]	; (bbc <circular_buf_put+0x30>)
     bb0:	4798      	blx	r3
 }
     bb2:	46c0      	nop			; (mov r8, r8)
     bb4:	46bd      	mov	sp, r7
     bb6:	b002      	add	sp, #8
     bb8:	bd80      	pop	{r7, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	00000a99 	.word	0x00000a99

00000bc0 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     bc0:	b580      	push	{r7, lr}
     bc2:	b084      	sub	sp, #16
     bc4:	af00      	add	r7, sp, #0
     bc6:	6078      	str	r0, [r7, #4]
     bc8:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     bca:	2301      	movs	r3, #1
     bcc:	425b      	negs	r3, r3
     bce:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     bd0:	687b      	ldr	r3, [r7, #4]
     bd2:	0018      	movs	r0, r3
     bd4:	4b0d      	ldr	r3, [pc, #52]	; (c0c <circular_buf_get+0x4c>)
     bd6:	4798      	blx	r3
     bd8:	0003      	movs	r3, r0
     bda:	001a      	movs	r2, r3
     bdc:	2301      	movs	r3, #1
     bde:	4053      	eors	r3, r2
     be0:	b2db      	uxtb	r3, r3
     be2:	2b00      	cmp	r3, #0
     be4:	d00d      	beq.n	c02 <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     be6:	687b      	ldr	r3, [r7, #4]
     be8:	681a      	ldr	r2, [r3, #0]
     bea:	687b      	ldr	r3, [r7, #4]
     bec:	689b      	ldr	r3, [r3, #8]
     bee:	18d3      	adds	r3, r2, r3
     bf0:	781a      	ldrb	r2, [r3, #0]
     bf2:	683b      	ldr	r3, [r7, #0]
     bf4:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	0018      	movs	r0, r3
     bfa:	4b05      	ldr	r3, [pc, #20]	; (c10 <circular_buf_get+0x50>)
     bfc:	4798      	blx	r3

		 r = 0;
     bfe:	2300      	movs	r3, #0
     c00:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     c02:	68fb      	ldr	r3, [r7, #12]
 }
     c04:	0018      	movs	r0, r3
     c06:	46bd      	mov	sp, r7
     c08:	b004      	add	sp, #16
     c0a:	bd80      	pop	{r7, pc}
     c0c:	00000c15 	.word	0x00000c15
     c10:	00000af9 	.word	0x00000af9

00000c14 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     c14:	b580      	push	{r7, lr}
     c16:	b082      	sub	sp, #8
     c18:	af00      	add	r7, sp, #0
     c1a:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     c1c:	687b      	ldr	r3, [r7, #4]
     c1e:	7c1b      	ldrb	r3, [r3, #16]
     c20:	2201      	movs	r2, #1
     c22:	4053      	eors	r3, r2
     c24:	b2db      	uxtb	r3, r3
     c26:	2b00      	cmp	r3, #0
     c28:	d007      	beq.n	c3a <circular_buf_empty+0x26>
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	685a      	ldr	r2, [r3, #4]
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	689b      	ldr	r3, [r3, #8]
     c32:	429a      	cmp	r2, r3
     c34:	d101      	bne.n	c3a <circular_buf_empty+0x26>
     c36:	2301      	movs	r3, #1
     c38:	e000      	b.n	c3c <circular_buf_empty+0x28>
     c3a:	2300      	movs	r3, #0
     c3c:	1c1a      	adds	r2, r3, #0
     c3e:	2301      	movs	r3, #1
     c40:	4013      	ands	r3, r2
     c42:	b2db      	uxtb	r3, r3
 }
     c44:	0018      	movs	r0, r3
     c46:	46bd      	mov	sp, r7
     c48:	b002      	add	sp, #8
     c4a:	bd80      	pop	{r7, pc}

00000c4c <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     c4c:	b580      	push	{r7, lr}
     c4e:	b082      	sub	sp, #8
     c50:	af00      	add	r7, sp, #0
     c52:	0002      	movs	r2, r0
     c54:	1dfb      	adds	r3, r7, #7
     c56:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c58:	4b06      	ldr	r3, [pc, #24]	; (c74 <system_interrupt_enable+0x28>)
     c5a:	1dfa      	adds	r2, r7, #7
     c5c:	7812      	ldrb	r2, [r2, #0]
     c5e:	0011      	movs	r1, r2
     c60:	221f      	movs	r2, #31
     c62:	400a      	ands	r2, r1
     c64:	2101      	movs	r1, #1
     c66:	4091      	lsls	r1, r2
     c68:	000a      	movs	r2, r1
     c6a:	601a      	str	r2, [r3, #0]
}
     c6c:	46c0      	nop			; (mov r8, r8)
     c6e:	46bd      	mov	sp, r7
     c70:	b002      	add	sp, #8
     c72:	bd80      	pop	{r7, pc}
     c74:	e000e100 	.word	0xe000e100

00000c78 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     c78:	b580      	push	{r7, lr}
     c7a:	b082      	sub	sp, #8
     c7c:	af00      	add	r7, sp, #0
     c7e:	0002      	movs	r2, r0
     c80:	1dfb      	adds	r3, r7, #7
     c82:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     c84:	4a07      	ldr	r2, [pc, #28]	; (ca4 <system_interrupt_disable+0x2c>)
     c86:	1dfb      	adds	r3, r7, #7
     c88:	781b      	ldrb	r3, [r3, #0]
     c8a:	0019      	movs	r1, r3
     c8c:	231f      	movs	r3, #31
     c8e:	400b      	ands	r3, r1
     c90:	2101      	movs	r1, #1
     c92:	4099      	lsls	r1, r3
     c94:	000b      	movs	r3, r1
     c96:	0019      	movs	r1, r3
     c98:	2380      	movs	r3, #128	; 0x80
     c9a:	50d1      	str	r1, [r2, r3]
}
     c9c:	46c0      	nop			; (mov r8, r8)
     c9e:	46bd      	mov	sp, r7
     ca0:	b002      	add	sp, #8
     ca2:	bd80      	pop	{r7, pc}
     ca4:	e000e100 	.word	0xe000e100

00000ca8 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     ca8:	b580      	push	{r7, lr}
     caa:	b084      	sub	sp, #16
     cac:	af00      	add	r7, sp, #0
     cae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     cb0:	687b      	ldr	r3, [r7, #4]
     cb2:	681b      	ldr	r3, [r3, #0]
     cb4:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cb6:	68fb      	ldr	r3, [r7, #12]
     cb8:	69db      	ldr	r3, [r3, #28]
     cba:	1e5a      	subs	r2, r3, #1
     cbc:	4193      	sbcs	r3, r2
     cbe:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     cc0:	0018      	movs	r0, r3
     cc2:	46bd      	mov	sp, r7
     cc4:	b004      	add	sp, #16
     cc6:	bd80      	pop	{r7, pc}

00000cc8 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     cc8:	b580      	push	{r7, lr}
     cca:	b082      	sub	sp, #8
     ccc:	af00      	add	r7, sp, #0
     cce:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     cd0:	46c0      	nop			; (mov r8, r8)
     cd2:	687b      	ldr	r3, [r7, #4]
     cd4:	0018      	movs	r0, r3
     cd6:	4b04      	ldr	r3, [pc, #16]	; (ce8 <_usart_wait_for_sync+0x20>)
     cd8:	4798      	blx	r3
     cda:	1e03      	subs	r3, r0, #0
     cdc:	d1f9      	bne.n	cd2 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	46bd      	mov	sp, r7
     ce2:	b002      	add	sp, #8
     ce4:	bd80      	pop	{r7, pc}
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	00000ca9 	.word	0x00000ca9

00000cec <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     cec:	b580      	push	{r7, lr}
     cee:	b082      	sub	sp, #8
     cf0:	af00      	add	r7, sp, #0
     cf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     cf4:	687b      	ldr	r3, [r7, #4]
     cf6:	2280      	movs	r2, #128	; 0x80
     cf8:	05d2      	lsls	r2, r2, #23
     cfa:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	2200      	movs	r2, #0
     d00:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     d02:	687b      	ldr	r3, [r7, #4]
     d04:	22ff      	movs	r2, #255	; 0xff
     d06:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	2200      	movs	r2, #0
     d0c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     d0e:	687b      	ldr	r3, [r7, #4]
     d10:	2200      	movs	r2, #0
     d12:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	2296      	movs	r2, #150	; 0x96
     d18:	0192      	lsls	r2, r2, #6
     d1a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	2224      	movs	r2, #36	; 0x24
     d20:	2101      	movs	r1, #1
     d22:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	2225      	movs	r2, #37	; 0x25
     d28:	2101      	movs	r1, #1
     d2a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     d2c:	687b      	ldr	r3, [r7, #4]
     d2e:	2226      	movs	r2, #38	; 0x26
     d30:	2100      	movs	r1, #0
     d32:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     d34:	687b      	ldr	r3, [r7, #4]
     d36:	2227      	movs	r2, #39	; 0x27
     d38:	2100      	movs	r1, #0
     d3a:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     d3c:	687b      	ldr	r3, [r7, #4]
     d3e:	2200      	movs	r2, #0
     d40:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     d42:	687b      	ldr	r3, [r7, #4]
     d44:	2288      	movs	r2, #136	; 0x88
     d46:	0352      	lsls	r2, r2, #13
     d48:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     d4a:	687b      	ldr	r3, [r7, #4]
     d4c:	222c      	movs	r2, #44	; 0x2c
     d4e:	2100      	movs	r1, #0
     d50:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     d52:	687b      	ldr	r3, [r7, #4]
     d54:	222d      	movs	r2, #45	; 0x2d
     d56:	2100      	movs	r1, #0
     d58:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     d5a:	687b      	ldr	r3, [r7, #4]
     d5c:	2200      	movs	r2, #0
     d5e:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     d60:	687b      	ldr	r3, [r7, #4]
     d62:	2200      	movs	r2, #0
     d64:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     d66:	687b      	ldr	r3, [r7, #4]
     d68:	2200      	movs	r2, #0
     d6a:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     d6c:	687b      	ldr	r3, [r7, #4]
     d6e:	2200      	movs	r2, #0
     d70:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	2200      	movs	r2, #0
     d76:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     d78:	687b      	ldr	r3, [r7, #4]
     d7a:	2200      	movs	r2, #0
     d7c:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     d7e:	687b      	ldr	r3, [r7, #4]
     d80:	2200      	movs	r2, #0
     d82:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	2200      	movs	r2, #0
     d88:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	2200      	movs	r2, #0
     d8e:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	2200      	movs	r2, #0
     d94:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	2213      	movs	r2, #19
     d9a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     d9c:	687b      	ldr	r3, [r7, #4]
     d9e:	2200      	movs	r2, #0
     da0:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	46bd      	mov	sp, r7
     da6:	b002      	add	sp, #8
     da8:	bd80      	pop	{r7, pc}
	...

00000dac <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     dac:	b580      	push	{r7, lr}
     dae:	b084      	sub	sp, #16
     db0:	af00      	add	r7, sp, #0
     db2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	681b      	ldr	r3, [r3, #0]
     db8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     dba:	687b      	ldr	r3, [r7, #4]
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	0018      	movs	r0, r3
     dc0:	4b09      	ldr	r3, [pc, #36]	; (de8 <usart_enable+0x3c>)
     dc2:	4798      	blx	r3
     dc4:	0003      	movs	r3, r0
     dc6:	0018      	movs	r0, r3
     dc8:	4b08      	ldr	r3, [pc, #32]	; (dec <usart_enable+0x40>)
     dca:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     dcc:	687b      	ldr	r3, [r7, #4]
     dce:	0018      	movs	r0, r3
     dd0:	4b07      	ldr	r3, [pc, #28]	; (df0 <usart_enable+0x44>)
     dd2:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     dd4:	68fb      	ldr	r3, [r7, #12]
     dd6:	681b      	ldr	r3, [r3, #0]
     dd8:	2202      	movs	r2, #2
     dda:	431a      	orrs	r2, r3
     ddc:	68fb      	ldr	r3, [r7, #12]
     dde:	601a      	str	r2, [r3, #0]
}
     de0:	46c0      	nop			; (mov r8, r8)
     de2:	46bd      	mov	sp, r7
     de4:	b004      	add	sp, #16
     de6:	bd80      	pop	{r7, pc}
     de8:	0000408d 	.word	0x0000408d
     dec:	00000c4d 	.word	0x00000c4d
     df0:	00000cc9 	.word	0x00000cc9

00000df4 <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     df4:	b580      	push	{r7, lr}
     df6:	b084      	sub	sp, #16
     df8:	af00      	add	r7, sp, #0
     dfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dfc:	687b      	ldr	r3, [r7, #4]
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     e02:	687b      	ldr	r3, [r7, #4]
     e04:	681b      	ldr	r3, [r3, #0]
     e06:	0018      	movs	r0, r3
     e08:	4b0a      	ldr	r3, [pc, #40]	; (e34 <usart_disable+0x40>)
     e0a:	4798      	blx	r3
     e0c:	0003      	movs	r3, r0
     e0e:	0018      	movs	r0, r3
     e10:	4b09      	ldr	r3, [pc, #36]	; (e38 <usart_disable+0x44>)
     e12:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	0018      	movs	r0, r3
     e18:	4b08      	ldr	r3, [pc, #32]	; (e3c <usart_disable+0x48>)
     e1a:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     e1c:	68fb      	ldr	r3, [r7, #12]
     e1e:	681b      	ldr	r3, [r3, #0]
     e20:	2202      	movs	r2, #2
     e22:	4393      	bics	r3, r2
     e24:	001a      	movs	r2, r3
     e26:	68fb      	ldr	r3, [r7, #12]
     e28:	601a      	str	r2, [r3, #0]
}
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	46bd      	mov	sp, r7
     e2e:	b004      	add	sp, #16
     e30:	bd80      	pop	{r7, pc}
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	0000408d 	.word	0x0000408d
     e38:	00000c79 	.word	0x00000c79
     e3c:	00000cc9 	.word	0x00000cc9

00000e40 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     e40:	b580      	push	{r7, lr}
     e42:	b082      	sub	sp, #8
     e44:	af00      	add	r7, sp, #0
     e46:	6078      	str	r0, [r7, #4]
     e48:	000a      	movs	r2, r1
     e4a:	1cfb      	adds	r3, r7, #3
     e4c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	2231      	movs	r2, #49	; 0x31
     e52:	5c9b      	ldrb	r3, [r3, r2]
     e54:	b25a      	sxtb	r2, r3
     e56:	1cfb      	adds	r3, r7, #3
     e58:	781b      	ldrb	r3, [r3, #0]
     e5a:	2101      	movs	r1, #1
     e5c:	4099      	lsls	r1, r3
     e5e:	000b      	movs	r3, r1
     e60:	b25b      	sxtb	r3, r3
     e62:	4313      	orrs	r3, r2
     e64:	b25b      	sxtb	r3, r3
     e66:	b2d9      	uxtb	r1, r3
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	2231      	movs	r2, #49	; 0x31
     e6c:	5499      	strb	r1, [r3, r2]

}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	46bd      	mov	sp, r7
     e72:	b002      	add	sp, #8
     e74:	bd80      	pop	{r7, pc}
	...

00000e78 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     e78:	b580      	push	{r7, lr}
     e7a:	b082      	sub	sp, #8
     e7c:	af00      	add	r7, sp, #0
     e7e:	6078      	str	r0, [r7, #4]
     e80:	000a      	movs	r2, r1
     e82:	1cfb      	adds	r3, r7, #3
     e84:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	1cfb      	adds	r3, r7, #3
     e8a:	781b      	ldrb	r3, [r3, #0]
     e8c:	b29a      	uxth	r2, r3
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	0011      	movs	r1, r2
     e92:	0018      	movs	r0, r3
     e94:	4b04      	ldr	r3, [pc, #16]	; (ea8 <usart_serial_putchar+0x30>)
     e96:	4798      	blx	r3
     e98:	1e03      	subs	r3, r0, #0
     e9a:	d1f5      	bne.n	e88 <usart_serial_putchar+0x10>

	return STATUS_OK;
     e9c:	2300      	movs	r3, #0
}
     e9e:	0018      	movs	r0, r3
     ea0:	46bd      	mov	sp, r7
     ea2:	b002      	add	sp, #8
     ea4:	bd80      	pop	{r7, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	000057a5 	.word	0x000057a5

00000eac <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     eac:	b580      	push	{r7, lr}
     eae:	b084      	sub	sp, #16
     eb0:	af00      	add	r7, sp, #0
     eb2:	6078      	str	r0, [r7, #4]
     eb4:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     eb6:	230e      	movs	r3, #14
     eb8:	18fb      	adds	r3, r7, r3
     eba:	2200      	movs	r2, #0
     ebc:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	230e      	movs	r3, #14
     ec2:	18fa      	adds	r2, r7, r3
     ec4:	687b      	ldr	r3, [r7, #4]
     ec6:	0011      	movs	r1, r2
     ec8:	0018      	movs	r0, r3
     eca:	4b07      	ldr	r3, [pc, #28]	; (ee8 <usart_serial_getchar+0x3c>)
     ecc:	4798      	blx	r3
     ece:	1e03      	subs	r3, r0, #0
     ed0:	d1f6      	bne.n	ec0 <usart_serial_getchar+0x14>

	*c = temp;
     ed2:	230e      	movs	r3, #14
     ed4:	18fb      	adds	r3, r7, r3
     ed6:	881b      	ldrh	r3, [r3, #0]
     ed8:	b2da      	uxtb	r2, r3
     eda:	683b      	ldr	r3, [r7, #0]
     edc:	701a      	strb	r2, [r3, #0]
}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	46bd      	mov	sp, r7
     ee2:	b004      	add	sp, #16
     ee4:	bd80      	pop	{r7, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	00005809 	.word	0x00005809

00000eec <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     eec:	b580      	push	{r7, lr}
     eee:	b084      	sub	sp, #16
     ef0:	af00      	add	r7, sp, #0
     ef2:	60f8      	str	r0, [r7, #12]
     ef4:	60b9      	str	r1, [r7, #8]
     ef6:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     ef8:	4b0d      	ldr	r3, [pc, #52]	; (f30 <stdio_serial_init+0x44>)
     efa:	68fa      	ldr	r2, [r7, #12]
     efc:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     efe:	4b0d      	ldr	r3, [pc, #52]	; (f34 <stdio_serial_init+0x48>)
     f00:	4a0d      	ldr	r2, [pc, #52]	; (f38 <stdio_serial_init+0x4c>)
     f02:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     f04:	4b0d      	ldr	r3, [pc, #52]	; (f3c <stdio_serial_init+0x50>)
     f06:	4a0e      	ldr	r2, [pc, #56]	; (f40 <stdio_serial_init+0x54>)
     f08:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     f0a:	4b0e      	ldr	r3, [pc, #56]	; (f44 <stdio_serial_init+0x58>)
     f0c:	681b      	ldr	r3, [r3, #0]
     f0e:	689b      	ldr	r3, [r3, #8]
     f10:	2100      	movs	r1, #0
     f12:	0018      	movs	r0, r3
     f14:	4b0c      	ldr	r3, [pc, #48]	; (f48 <stdio_serial_init+0x5c>)
     f16:	4798      	blx	r3
	setbuf(stdin, NULL);
     f18:	4b0a      	ldr	r3, [pc, #40]	; (f44 <stdio_serial_init+0x58>)
     f1a:	681b      	ldr	r3, [r3, #0]
     f1c:	685b      	ldr	r3, [r3, #4]
     f1e:	2100      	movs	r1, #0
     f20:	0018      	movs	r0, r3
     f22:	4b09      	ldr	r3, [pc, #36]	; (f48 <stdio_serial_init+0x5c>)
     f24:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     f26:	46c0      	nop			; (mov r8, r8)
     f28:	46bd      	mov	sp, r7
     f2a:	b004      	add	sp, #16
     f2c:	bd80      	pop	{r7, pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	20000a2c 	.word	0x20000a2c
     f34:	20000a28 	.word	0x20000a28
     f38:	00000e79 	.word	0x00000e79
     f3c:	20000a24 	.word	0x20000a24
     f40:	00000ead 	.word	0x00000ead
     f44:	20000044 	.word	0x20000044
     f48:	0000bcbd 	.word	0x0000bcbd

00000f4c <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole()
{
     f4c:	b580      	push	{r7, lr}
     f4e:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     f50:	2380      	movs	r3, #128	; 0x80
     f52:	00da      	lsls	r2, r3, #3
     f54:	4b0f      	ldr	r3, [pc, #60]	; (f94 <InitializeSerialConsole+0x48>)
     f56:	0011      	movs	r1, r2
     f58:	0018      	movs	r0, r3
     f5a:	4b0f      	ldr	r3, [pc, #60]	; (f98 <InitializeSerialConsole+0x4c>)
     f5c:	4798      	blx	r3
     f5e:	0002      	movs	r2, r0
     f60:	4b0e      	ldr	r3, [pc, #56]	; (f9c <InitializeSerialConsole+0x50>)
     f62:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
     f64:	2380      	movs	r3, #128	; 0x80
     f66:	00da      	lsls	r2, r3, #3
     f68:	4b0d      	ldr	r3, [pc, #52]	; (fa0 <InitializeSerialConsole+0x54>)
     f6a:	0011      	movs	r1, r2
     f6c:	0018      	movs	r0, r3
     f6e:	4b0a      	ldr	r3, [pc, #40]	; (f98 <InitializeSerialConsole+0x4c>)
     f70:	4798      	blx	r3
     f72:	0002      	movs	r2, r0
     f74:	4b0b      	ldr	r3, [pc, #44]	; (fa4 <InitializeSerialConsole+0x58>)
     f76:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
     f78:	4b0b      	ldr	r3, [pc, #44]	; (fa8 <InitializeSerialConsole+0x5c>)
     f7a:	4798      	blx	r3
	configure_usart_callbacks();
     f7c:	4b0b      	ldr	r3, [pc, #44]	; (fac <InitializeSerialConsole+0x60>)
     f7e:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     f80:	490b      	ldr	r1, [pc, #44]	; (fb0 <InitializeSerialConsole+0x64>)
     f82:	4b0c      	ldr	r3, [pc, #48]	; (fb4 <InitializeSerialConsole+0x68>)
     f84:	2201      	movs	r2, #1
     f86:	0018      	movs	r0, r3
     f88:	4b0b      	ldr	r3, [pc, #44]	; (fb8 <InitializeSerialConsole+0x6c>)
     f8a:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
     f8c:	46c0      	nop			; (mov r8, r8)
     f8e:	46bd      	mov	sp, r7
     f90:	bd80      	pop	{r7, pc}
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	200005fc 	.word	0x200005fc
     f98:	00000b2d 	.word	0x00000b2d
     f9c:	200001f4 	.word	0x200001f4
     fa0:	200001fc 	.word	0x200001fc
     fa4:	20000a00 	.word	0x20000a00
     fa8:	00001081 	.word	0x00001081
     fac:	00001109 	.word	0x00001109
     fb0:	200001f8 	.word	0x200001f8
     fb4:	200001c0 	.word	0x200001c0
     fb8:	00005ac5 	.word	0x00005ac5

00000fbc <DeinitializeSerialConsole>:


void DeinitializeSerialConsole()
{
     fbc:	b580      	push	{r7, lr}
     fbe:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);
     fc0:	4b03      	ldr	r3, [pc, #12]	; (fd0 <DeinitializeSerialConsole+0x14>)
     fc2:	0018      	movs	r0, r3
     fc4:	4b03      	ldr	r3, [pc, #12]	; (fd4 <DeinitializeSerialConsole+0x18>)
     fc6:	4798      	blx	r3
}
     fc8:	46c0      	nop			; (mov r8, r8)
     fca:	46bd      	mov	sp, r7
     fcc:	bd80      	pop	{r7, pc}
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	200001c0 	.word	0x200001c0
     fd4:	00000df5 	.word	0x00000df5

00000fd8 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
     fd8:	b580      	push	{r7, lr}
     fda:	b084      	sub	sp, #16
     fdc:	af00      	add	r7, sp, #0
     fde:	6078      	str	r0, [r7, #4]
	if(string != NULL)
     fe0:	687b      	ldr	r3, [r7, #4]
     fe2:	2b00      	cmp	r3, #0
     fe4:	d02a      	beq.n	103c <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
     fe6:	2300      	movs	r3, #0
     fe8:	60fb      	str	r3, [r7, #12]
     fea:	e00b      	b.n	1004 <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
     fec:	4b15      	ldr	r3, [pc, #84]	; (1044 <SerialConsoleWriteString+0x6c>)
     fee:	6818      	ldr	r0, [r3, #0]
     ff0:	687a      	ldr	r2, [r7, #4]
     ff2:	68fb      	ldr	r3, [r7, #12]
     ff4:	18d3      	adds	r3, r2, r3
     ff6:	781b      	ldrb	r3, [r3, #0]
     ff8:	0019      	movs	r1, r3
     ffa:	4b13      	ldr	r3, [pc, #76]	; (1048 <SerialConsoleWriteString+0x70>)
     ffc:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
     ffe:	68fb      	ldr	r3, [r7, #12]
    1000:	3301      	adds	r3, #1
    1002:	60fb      	str	r3, [r7, #12]
    1004:	687b      	ldr	r3, [r7, #4]
    1006:	0018      	movs	r0, r3
    1008:	4b10      	ldr	r3, [pc, #64]	; (104c <SerialConsoleWriteString+0x74>)
    100a:	4798      	blx	r3
    100c:	0002      	movs	r2, r0
    100e:	68fb      	ldr	r3, [r7, #12]
    1010:	429a      	cmp	r2, r3
    1012:	d8eb      	bhi.n	fec <SerialConsoleWriteString+0x14>
		}
		
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    1014:	4b0e      	ldr	r3, [pc, #56]	; (1050 <SerialConsoleWriteString+0x78>)
    1016:	2101      	movs	r1, #1
    1018:	0018      	movs	r0, r3
    101a:	4b0e      	ldr	r3, [pc, #56]	; (1054 <SerialConsoleWriteString+0x7c>)
    101c:	4798      	blx	r3
    101e:	1e03      	subs	r3, r0, #0
    1020:	d10c      	bne.n	103c <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    1022:	4b08      	ldr	r3, [pc, #32]	; (1044 <SerialConsoleWriteString+0x6c>)
    1024:	681b      	ldr	r3, [r3, #0]
    1026:	4a0c      	ldr	r2, [pc, #48]	; (1058 <SerialConsoleWriteString+0x80>)
    1028:	0011      	movs	r1, r2
    102a:	0018      	movs	r0, r3
    102c:	4b0b      	ldr	r3, [pc, #44]	; (105c <SerialConsoleWriteString+0x84>)
    102e:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    1030:	4909      	ldr	r1, [pc, #36]	; (1058 <SerialConsoleWriteString+0x80>)
    1032:	4b07      	ldr	r3, [pc, #28]	; (1050 <SerialConsoleWriteString+0x78>)
    1034:	2201      	movs	r2, #1
    1036:	0018      	movs	r0, r3
    1038:	4b09      	ldr	r3, [pc, #36]	; (1060 <SerialConsoleWriteString+0x88>)
    103a:	4798      	blx	r3
		}
	}
}
    103c:	46c0      	nop			; (mov r8, r8)
    103e:	46bd      	mov	sp, r7
    1040:	b004      	add	sp, #16
    1042:	bd80      	pop	{r7, pc}
    1044:	20000a00 	.word	0x20000a00
    1048:	00000b8d 	.word	0x00000b8d
    104c:	0000be29 	.word	0x0000be29
    1050:	200001c0 	.word	0x200001c0
    1054:	00005b0d 	.word	0x00005b0d
    1058:	200009fc 	.word	0x200009fc
    105c:	00000bc1 	.word	0x00000bc1
    1060:	00005a7d 	.word	0x00005a7d

00001064 <LogMessage>:
* @fn			LogMessage (Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
    1064:	b40e      	push	{r1, r2, r3}
    1066:	b580      	push	{r7, lr}
    1068:	b083      	sub	sp, #12
    106a:	af00      	add	r7, sp, #0
    106c:	0002      	movs	r2, r0
    106e:	1dfb      	adds	r3, r7, #7
    1070:	701a      	strb	r2, [r3, #0]


};
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	46bd      	mov	sp, r7
    1076:	b003      	add	sp, #12
    1078:	bc80      	pop	{r7}
    107a:	bc08      	pop	{r3}
    107c:	b003      	add	sp, #12
    107e:	4718      	bx	r3

00001080 <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
    1080:	b580      	push	{r7, lr}
    1082:	b090      	sub	sp, #64	; 0x40
    1084:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
    1086:	003b      	movs	r3, r7
    1088:	0018      	movs	r0, r3
    108a:	4b17      	ldr	r3, [pc, #92]	; (10e8 <configure_usart+0x68>)
    108c:	4798      	blx	r3

	config_usart.baudrate    = 115200;
    108e:	003b      	movs	r3, r7
    1090:	22e1      	movs	r2, #225	; 0xe1
    1092:	0252      	lsls	r2, r2, #9
    1094:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1096:	003b      	movs	r3, r7
    1098:	22c4      	movs	r2, #196	; 0xc4
    109a:	0392      	lsls	r2, r2, #14
    109c:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    109e:	003b      	movs	r3, r7
    10a0:	2201      	movs	r2, #1
    10a2:	4252      	negs	r2, r2
    10a4:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    10a6:	003b      	movs	r3, r7
    10a8:	2201      	movs	r2, #1
    10aa:	4252      	negs	r2, r2
    10ac:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    10ae:	003b      	movs	r3, r7
    10b0:	4a0e      	ldr	r2, [pc, #56]	; (10ec <configure_usart+0x6c>)
    10b2:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    10b4:	003b      	movs	r3, r7
    10b6:	4a0e      	ldr	r2, [pc, #56]	; (10f0 <configure_usart+0x70>)
    10b8:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	003a      	movs	r2, r7
    10be:	490d      	ldr	r1, [pc, #52]	; (10f4 <configure_usart+0x74>)
    10c0:	4b0d      	ldr	r3, [pc, #52]	; (10f8 <configure_usart+0x78>)
    10c2:	0018      	movs	r0, r3
    10c4:	4b0d      	ldr	r3, [pc, #52]	; (10fc <configure_usart+0x7c>)
    10c6:	4798      	blx	r3
    10c8:	1e03      	subs	r3, r0, #0
    10ca:	d1f7      	bne.n	10bc <configure_usart+0x3c>
					  EDBG_CDC_MODULE, 
					  &config_usart) != STATUS_OK) 
	{

	}
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
    10cc:	003a      	movs	r2, r7
    10ce:	4909      	ldr	r1, [pc, #36]	; (10f4 <configure_usart+0x74>)
    10d0:	4b09      	ldr	r3, [pc, #36]	; (10f8 <configure_usart+0x78>)
    10d2:	0018      	movs	r0, r3
    10d4:	4b0a      	ldr	r3, [pc, #40]	; (1100 <configure_usart+0x80>)
    10d6:	4798      	blx	r3
	usart_enable(&usart_instance);
    10d8:	4b07      	ldr	r3, [pc, #28]	; (10f8 <configure_usart+0x78>)
    10da:	0018      	movs	r0, r3
    10dc:	4b09      	ldr	r3, [pc, #36]	; (1104 <configure_usart+0x84>)
    10de:	4798      	blx	r3
}
    10e0:	46c0      	nop			; (mov r8, r8)
    10e2:	46bd      	mov	sp, r7
    10e4:	b010      	add	sp, #64	; 0x40
    10e6:	bd80      	pop	{r7, pc}
    10e8:	00000ced 	.word	0x00000ced
    10ec:	002a0003 	.word	0x002a0003
    10f0:	002b0003 	.word	0x002b0003
    10f4:	42001800 	.word	0x42001800
    10f8:	200001c0 	.word	0x200001c0
    10fc:	00005531 	.word	0x00005531
    1100:	00000eed 	.word	0x00000eed
    1104:	00000dad 	.word	0x00000dad

00001108 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
    1108:	b580      	push	{r7, lr}
    110a:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
    110c:	490c      	ldr	r1, [pc, #48]	; (1140 <configure_usart_callbacks+0x38>)
    110e:	4b0d      	ldr	r3, [pc, #52]	; (1144 <configure_usart_callbacks+0x3c>)
    1110:	2200      	movs	r2, #0
    1112:	0018      	movs	r0, r3
    1114:	4b0c      	ldr	r3, [pc, #48]	; (1148 <configure_usart_callbacks+0x40>)
    1116:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    1118:	490c      	ldr	r1, [pc, #48]	; (114c <configure_usart_callbacks+0x44>)
    111a:	4b0a      	ldr	r3, [pc, #40]	; (1144 <configure_usart_callbacks+0x3c>)
    111c:	2201      	movs	r2, #1
    111e:	0018      	movs	r0, r3
    1120:	4b09      	ldr	r3, [pc, #36]	; (1148 <configure_usart_callbacks+0x40>)
    1122:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
    1124:	4b07      	ldr	r3, [pc, #28]	; (1144 <configure_usart_callbacks+0x3c>)
    1126:	2100      	movs	r1, #0
    1128:	0018      	movs	r0, r3
    112a:	4b09      	ldr	r3, [pc, #36]	; (1150 <configure_usart_callbacks+0x48>)
    112c:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <configure_usart_callbacks+0x3c>)
    1130:	2101      	movs	r1, #1
    1132:	0018      	movs	r0, r3
    1134:	4b06      	ldr	r3, [pc, #24]	; (1150 <configure_usart_callbacks+0x48>)
    1136:	4798      	blx	r3
}
    1138:	46c0      	nop			; (mov r8, r8)
    113a:	46bd      	mov	sp, r7
    113c:	bd80      	pop	{r7, pc}
    113e:	46c0      	nop			; (mov r8, r8)
    1140:	000011c5 	.word	0x000011c5
    1144:	200001c0 	.word	0x200001c0
    1148:	00005a35 	.word	0x00005a35
    114c:	00001155 	.word	0x00001155
    1150:	00000e41 	.word	0x00000e41

00001154 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
    1154:	b580      	push	{r7, lr}
    1156:	b084      	sub	sp, #16
    1158:	af00      	add	r7, sp, #0
    115a:	6078      	str	r0, [r7, #4]
	//Order Echo
	SerialConsoleWriteString(&latestRx);
    115c:	4b13      	ldr	r3, [pc, #76]	; (11ac <usart_read_callback+0x58>)
    115e:	0018      	movs	r0, r3
    1160:	4b13      	ldr	r3, [pc, #76]	; (11b0 <usart_read_callback+0x5c>)
    1162:	4798      	blx	r3
	if(latestRx == 0x08)
    1164:	4b11      	ldr	r3, [pc, #68]	; (11ac <usart_read_callback+0x58>)
    1166:	781b      	ldrb	r3, [r3, #0]
    1168:	2b08      	cmp	r3, #8
    116a:	d10c      	bne.n	1186 <usart_read_callback+0x32>
	{
	char a[3];
	a[0] = 0x20;
    116c:	230c      	movs	r3, #12
    116e:	18fb      	adds	r3, r7, r3
    1170:	2220      	movs	r2, #32
    1172:	701a      	strb	r2, [r3, #0]
	a[1]= 0x08;
    1174:	230c      	movs	r3, #12
    1176:	18fb      	adds	r3, r7, r3
    1178:	2208      	movs	r2, #8
    117a:	705a      	strb	r2, [r3, #1]
	SerialConsoleWriteString(&a);
    117c:	230c      	movs	r3, #12
    117e:	18fb      	adds	r3, r7, r3
    1180:	0018      	movs	r0, r3
    1182:	4b0b      	ldr	r3, [pc, #44]	; (11b0 <usart_read_callback+0x5c>)
    1184:	4798      	blx	r3
	}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    1186:	4b0b      	ldr	r3, [pc, #44]	; (11b4 <usart_read_callback+0x60>)
    1188:	681a      	ldr	r2, [r3, #0]
    118a:	4b08      	ldr	r3, [pc, #32]	; (11ac <usart_read_callback+0x58>)
    118c:	781b      	ldrb	r3, [r3, #0]
    118e:	0019      	movs	r1, r3
    1190:	0010      	movs	r0, r2
    1192:	4b09      	ldr	r3, [pc, #36]	; (11b8 <usart_read_callback+0x64>)
    1194:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    1196:	4905      	ldr	r1, [pc, #20]	; (11ac <usart_read_callback+0x58>)
    1198:	4b08      	ldr	r3, [pc, #32]	; (11bc <usart_read_callback+0x68>)
    119a:	2201      	movs	r2, #1
    119c:	0018      	movs	r0, r3
    119e:	4b08      	ldr	r3, [pc, #32]	; (11c0 <usart_read_callback+0x6c>)
    11a0:	4798      	blx	r3
}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	46bd      	mov	sp, r7
    11a6:	b004      	add	sp, #16
    11a8:	bd80      	pop	{r7, pc}
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	200001f8 	.word	0x200001f8
    11b0:	00000fd9 	.word	0x00000fd9
    11b4:	200001f4 	.word	0x200001f4
    11b8:	00000b8d 	.word	0x00000b8d
    11bc:	200001c0 	.word	0x200001c0
    11c0:	00005ac5 	.word	0x00005ac5

000011c4 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b082      	sub	sp, #8
    11c8:	af00      	add	r7, sp, #0
    11ca:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    11cc:	4b09      	ldr	r3, [pc, #36]	; (11f4 <usart_write_callback+0x30>)
    11ce:	681b      	ldr	r3, [r3, #0]
    11d0:	4a09      	ldr	r2, [pc, #36]	; (11f8 <usart_write_callback+0x34>)
    11d2:	0011      	movs	r1, r2
    11d4:	0018      	movs	r0, r3
    11d6:	4b09      	ldr	r3, [pc, #36]	; (11fc <usart_write_callback+0x38>)
    11d8:	4798      	blx	r3
    11da:	0003      	movs	r3, r0
    11dc:	3301      	adds	r3, #1
    11de:	d005      	beq.n	11ec <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    11e0:	4905      	ldr	r1, [pc, #20]	; (11f8 <usart_write_callback+0x34>)
    11e2:	4b07      	ldr	r3, [pc, #28]	; (1200 <usart_write_callback+0x3c>)
    11e4:	2201      	movs	r2, #1
    11e6:	0018      	movs	r0, r3
    11e8:	4b06      	ldr	r3, [pc, #24]	; (1204 <usart_write_callback+0x40>)
    11ea:	4798      	blx	r3
	}
	
}
    11ec:	46c0      	nop			; (mov r8, r8)
    11ee:	46bd      	mov	sp, r7
    11f0:	b002      	add	sp, #8
    11f2:	bd80      	pop	{r7, pc}
    11f4:	20000a00 	.word	0x20000a00
    11f8:	200009fc 	.word	0x200009fc
    11fc:	00000bc1 	.word	0x00000bc1
    1200:	200001c0 	.word	0x200001c0
    1204:	00005a7d 	.word	0x00005a7d

00001208 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
    1208:	b590      	push	{r4, r7, lr}
    120a:	b087      	sub	sp, #28
    120c:	af00      	add	r7, sp, #0
    120e:	60f8      	str	r0, [r7, #12]
    1210:	000c      	movs	r4, r1
    1212:	0010      	movs	r0, r2
    1214:	0019      	movs	r1, r3
    1216:	230a      	movs	r3, #10
    1218:	18fb      	adds	r3, r7, r3
    121a:	1c22      	adds	r2, r4, #0
    121c:	801a      	strh	r2, [r3, #0]
    121e:	2308      	movs	r3, #8
    1220:	18fb      	adds	r3, r7, r3
    1222:	1c02      	adds	r2, r0, #0
    1224:	801a      	strh	r2, [r3, #0]
    1226:	1dfb      	adds	r3, r7, #7
    1228:	1c0a      	adds	r2, r1, #0
    122a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    122c:	230a      	movs	r3, #10
    122e:	18fb      	adds	r3, r7, r3
    1230:	881a      	ldrh	r2, [r3, #0]
    1232:	2308      	movs	r3, #8
    1234:	18fb      	adds	r3, r7, r3
    1236:	881b      	ldrh	r3, [r3, #0]
    1238:	1ad3      	subs	r3, r2, r3
    123a:	3307      	adds	r3, #7
    123c:	2b00      	cmp	r3, #0
    123e:	da00      	bge.n	1242 <SDMMC_UNSTUFF_BITS+0x3a>
    1240:	3307      	adds	r3, #7
    1242:	10db      	asrs	r3, r3, #3
    1244:	3b01      	subs	r3, #1
    1246:	68fa      	ldr	r2, [r7, #12]
    1248:	18d3      	adds	r3, r2, r3
    124a:	781b      	ldrb	r3, [r3, #0]
    124c:	0019      	movs	r1, r3
    124e:	2308      	movs	r3, #8
    1250:	18fb      	adds	r3, r7, r3
    1252:	881b      	ldrh	r3, [r3, #0]
    1254:	2207      	movs	r2, #7
    1256:	4013      	ands	r3, r2
    1258:	4119      	asrs	r1, r3
    125a:	000b      	movs	r3, r1
    125c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
    125e:	2308      	movs	r3, #8
    1260:	18fb      	adds	r3, r7, r3
    1262:	881b      	ldrh	r3, [r3, #0]
    1264:	2207      	movs	r2, #7
    1266:	401a      	ands	r2, r3
    1268:	1dfb      	adds	r3, r7, #7
    126a:	781b      	ldrb	r3, [r3, #0]
    126c:	18d3      	adds	r3, r2, r3
    126e:	2b08      	cmp	r3, #8
    1270:	dd1c      	ble.n	12ac <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    1272:	230a      	movs	r3, #10
    1274:	18fb      	adds	r3, r7, r3
    1276:	881a      	ldrh	r2, [r3, #0]
    1278:	2308      	movs	r3, #8
    127a:	18fb      	adds	r3, r7, r3
    127c:	881b      	ldrh	r3, [r3, #0]
    127e:	1ad3      	subs	r3, r2, r3
    1280:	3307      	adds	r3, #7
    1282:	2b00      	cmp	r3, #0
    1284:	da00      	bge.n	1288 <SDMMC_UNSTUFF_BITS+0x80>
    1286:	3307      	adds	r3, #7
    1288:	10db      	asrs	r3, r3, #3
    128a:	3b02      	subs	r3, #2
    128c:	68fa      	ldr	r2, [r7, #12]
    128e:	18d3      	adds	r3, r2, r3
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	0019      	movs	r1, r3
    1294:	2308      	movs	r3, #8
    1296:	18fb      	adds	r3, r7, r3
    1298:	881b      	ldrh	r3, [r3, #0]
    129a:	2207      	movs	r2, #7
    129c:	4013      	ands	r3, r2
    129e:	2208      	movs	r2, #8
    12a0:	1ad3      	subs	r3, r2, r3
    12a2:	4099      	lsls	r1, r3
    12a4:	000b      	movs	r3, r1
    12a6:	697a      	ldr	r2, [r7, #20]
    12a8:	4313      	orrs	r3, r2
    12aa:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    12ac:	2308      	movs	r3, #8
    12ae:	18fb      	adds	r3, r7, r3
    12b0:	881b      	ldrh	r3, [r3, #0]
    12b2:	2207      	movs	r2, #7
    12b4:	401a      	ands	r2, r3
    12b6:	1dfb      	adds	r3, r7, #7
    12b8:	781b      	ldrb	r3, [r3, #0]
    12ba:	18d3      	adds	r3, r2, r3
    12bc:	2b10      	cmp	r3, #16
    12be:	dd1c      	ble.n	12fa <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    12c0:	230a      	movs	r3, #10
    12c2:	18fb      	adds	r3, r7, r3
    12c4:	881a      	ldrh	r2, [r3, #0]
    12c6:	2308      	movs	r3, #8
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	881b      	ldrh	r3, [r3, #0]
    12cc:	1ad3      	subs	r3, r2, r3
    12ce:	3307      	adds	r3, #7
    12d0:	2b00      	cmp	r3, #0
    12d2:	da00      	bge.n	12d6 <SDMMC_UNSTUFF_BITS+0xce>
    12d4:	3307      	adds	r3, #7
    12d6:	10db      	asrs	r3, r3, #3
    12d8:	3b03      	subs	r3, #3
    12da:	68fa      	ldr	r2, [r7, #12]
    12dc:	18d3      	adds	r3, r2, r3
    12de:	781b      	ldrb	r3, [r3, #0]
    12e0:	0019      	movs	r1, r3
    12e2:	2308      	movs	r3, #8
    12e4:	18fb      	adds	r3, r7, r3
    12e6:	881b      	ldrh	r3, [r3, #0]
    12e8:	2207      	movs	r2, #7
    12ea:	4013      	ands	r3, r2
    12ec:	2210      	movs	r2, #16
    12ee:	1ad3      	subs	r3, r2, r3
    12f0:	4099      	lsls	r1, r3
    12f2:	000b      	movs	r3, r1
    12f4:	697a      	ldr	r2, [r7, #20]
    12f6:	4313      	orrs	r3, r2
    12f8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
    12fa:	2308      	movs	r3, #8
    12fc:	18fb      	adds	r3, r7, r3
    12fe:	881b      	ldrh	r3, [r3, #0]
    1300:	2207      	movs	r2, #7
    1302:	401a      	ands	r2, r3
    1304:	1dfb      	adds	r3, r7, #7
    1306:	781b      	ldrb	r3, [r3, #0]
    1308:	18d3      	adds	r3, r2, r3
    130a:	2b10      	cmp	r3, #16
    130c:	dd1c      	ble.n	1348 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    130e:	230a      	movs	r3, #10
    1310:	18fb      	adds	r3, r7, r3
    1312:	881a      	ldrh	r2, [r3, #0]
    1314:	2308      	movs	r3, #8
    1316:	18fb      	adds	r3, r7, r3
    1318:	881b      	ldrh	r3, [r3, #0]
    131a:	1ad3      	subs	r3, r2, r3
    131c:	3307      	adds	r3, #7
    131e:	2b00      	cmp	r3, #0
    1320:	da00      	bge.n	1324 <SDMMC_UNSTUFF_BITS+0x11c>
    1322:	3307      	adds	r3, #7
    1324:	10db      	asrs	r3, r3, #3
    1326:	3b03      	subs	r3, #3
    1328:	68fa      	ldr	r2, [r7, #12]
    132a:	18d3      	adds	r3, r2, r3
    132c:	781b      	ldrb	r3, [r3, #0]
    132e:	0019      	movs	r1, r3
    1330:	2308      	movs	r3, #8
    1332:	18fb      	adds	r3, r7, r3
    1334:	881b      	ldrh	r3, [r3, #0]
    1336:	2207      	movs	r2, #7
    1338:	4013      	ands	r3, r2
    133a:	2210      	movs	r2, #16
    133c:	1ad3      	subs	r3, r2, r3
    133e:	4099      	lsls	r1, r3
    1340:	000b      	movs	r3, r1
    1342:	697a      	ldr	r2, [r7, #20]
    1344:	4313      	orrs	r3, r2
    1346:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
    1348:	1dfb      	adds	r3, r7, #7
    134a:	781b      	ldrb	r3, [r3, #0]
    134c:	2201      	movs	r2, #1
    134e:	409a      	lsls	r2, r3
    1350:	0013      	movs	r3, r2
    1352:	1e5a      	subs	r2, r3, #1
    1354:	697b      	ldr	r3, [r7, #20]
    1356:	4013      	ands	r3, r2
    1358:	617b      	str	r3, [r7, #20]
	return value;
    135a:	697b      	ldr	r3, [r7, #20]
}
    135c:	0018      	movs	r0, r3
    135e:	46bd      	mov	sp, r7
    1360:	b007      	add	sp, #28
    1362:	bd90      	pop	{r4, r7, pc}

00001364 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
    1364:	b580      	push	{r7, lr}
    1366:	b082      	sub	sp, #8
    1368:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    136a:	4b23      	ldr	r3, [pc, #140]	; (13f8 <mmc_spi_op_cond+0x94>)
    136c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    136e:	4b23      	ldr	r3, [pc, #140]	; (13fc <mmc_spi_op_cond+0x98>)
    1370:	2100      	movs	r1, #0
    1372:	0018      	movs	r0, r3
    1374:	4b22      	ldr	r3, [pc, #136]	; (1400 <mmc_spi_op_cond+0x9c>)
    1376:	4798      	blx	r3
    1378:	0003      	movs	r3, r0
    137a:	001a      	movs	r2, r3
    137c:	2301      	movs	r3, #1
    137e:	4053      	eors	r3, r2
    1380:	b2db      	uxtb	r3, r3
    1382:	2b00      	cmp	r3, #0
    1384:	d001      	beq.n	138a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
    1386:	2300      	movs	r3, #0
    1388:	e031      	b.n	13ee <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
    138a:	4b1e      	ldr	r3, [pc, #120]	; (1404 <mmc_spi_op_cond+0xa0>)
    138c:	4798      	blx	r3
    138e:	0003      	movs	r3, r0
    1390:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
    1392:	683b      	ldr	r3, [r7, #0]
    1394:	2201      	movs	r2, #1
    1396:	4013      	ands	r3, r2
    1398:	d006      	beq.n	13a8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
    139a:	687b      	ldr	r3, [r7, #4]
    139c:	1e5a      	subs	r2, r3, #1
    139e:	607a      	str	r2, [r7, #4]
    13a0:	2b00      	cmp	r3, #0
    13a2:	d1e4      	bne.n	136e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
    13a4:	2300      	movs	r3, #0
    13a6:	e022      	b.n	13ee <mmc_spi_op_cond+0x8a>
			break;
    13a8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    13aa:	4b17      	ldr	r3, [pc, #92]	; (1408 <mmc_spi_op_cond+0xa4>)
    13ac:	2100      	movs	r1, #0
    13ae:	0018      	movs	r0, r3
    13b0:	4b13      	ldr	r3, [pc, #76]	; (1400 <mmc_spi_op_cond+0x9c>)
    13b2:	4798      	blx	r3
    13b4:	0003      	movs	r3, r0
    13b6:	001a      	movs	r2, r3
    13b8:	2301      	movs	r3, #1
    13ba:	4053      	eors	r3, r2
    13bc:	b2db      	uxtb	r3, r3
    13be:	2b00      	cmp	r3, #0
    13c0:	d001      	beq.n	13c6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    13c2:	2300      	movs	r3, #0
    13c4:	e013      	b.n	13ee <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    13c6:	4b0f      	ldr	r3, [pc, #60]	; (1404 <mmc_spi_op_cond+0xa0>)
    13c8:	4798      	blx	r3
    13ca:	0002      	movs	r2, r0
    13cc:	23c0      	movs	r3, #192	; 0xc0
    13ce:	05db      	lsls	r3, r3, #23
    13d0:	401a      	ands	r2, r3
    13d2:	2380      	movs	r3, #128	; 0x80
    13d4:	05db      	lsls	r3, r3, #23
    13d6:	429a      	cmp	r2, r3
    13d8:	d108      	bne.n	13ec <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
    13da:	4b0c      	ldr	r3, [pc, #48]	; (140c <mmc_spi_op_cond+0xa8>)
    13dc:	681a      	ldr	r2, [r3, #0]
    13de:	4b0b      	ldr	r3, [pc, #44]	; (140c <mmc_spi_op_cond+0xa8>)
    13e0:	681b      	ldr	r3, [r3, #0]
    13e2:	7adb      	ldrb	r3, [r3, #11]
    13e4:	2108      	movs	r1, #8
    13e6:	430b      	orrs	r3, r1
    13e8:	b2db      	uxtb	r3, r3
    13ea:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    13ec:	2301      	movs	r3, #1
}
    13ee:	0018      	movs	r0, r3
    13f0:	46bd      	mov	sp, r7
    13f2:	b002      	add	sp, #8
    13f4:	bd80      	pop	{r7, pc}
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	00001bee 	.word	0x00001bee
    13fc:	00001101 	.word	0x00001101
    1400:	00002dfd 	.word	0x00002dfd
    1404:	0000303d 	.word	0x0000303d
    1408:	0000053a 	.word	0x0000053a
    140c:	200000f4 	.word	0x200000f4

00001410 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
    1410:	b580      	push	{r7, lr}
    1412:	b086      	sub	sp, #24
    1414:	af00      	add	r7, sp, #0
    1416:	0002      	movs	r2, r0
    1418:	1dfb      	adds	r3, r7, #7
    141a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
    141c:	4b2e      	ldr	r3, [pc, #184]	; (14d8 <sd_spi_op_cond+0xc8>)
    141e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    1420:	4b2e      	ldr	r3, [pc, #184]	; (14dc <sd_spi_op_cond+0xcc>)
    1422:	2100      	movs	r1, #0
    1424:	0018      	movs	r0, r3
    1426:	4b2e      	ldr	r3, [pc, #184]	; (14e0 <sd_spi_op_cond+0xd0>)
    1428:	4798      	blx	r3
    142a:	0003      	movs	r3, r0
    142c:	001a      	movs	r2, r3
    142e:	2301      	movs	r3, #1
    1430:	4053      	eors	r3, r2
    1432:	b2db      	uxtb	r3, r3
    1434:	2b00      	cmp	r3, #0
    1436:	d001      	beq.n	143c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
    1438:	2300      	movs	r3, #0
    143a:	e048      	b.n	14ce <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
    143c:	2300      	movs	r3, #0
    143e:	617b      	str	r3, [r7, #20]
		if (v2) {
    1440:	1dfb      	adds	r3, r7, #7
    1442:	781b      	ldrb	r3, [r3, #0]
    1444:	2b00      	cmp	r3, #0
    1446:	d004      	beq.n	1452 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
    1448:	697b      	ldr	r3, [r7, #20]
    144a:	2280      	movs	r2, #128	; 0x80
    144c:	05d2      	lsls	r2, r2, #23
    144e:	4313      	orrs	r3, r2
    1450:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    1452:	697b      	ldr	r3, [r7, #20]
    1454:	4a23      	ldr	r2, [pc, #140]	; (14e4 <sd_spi_op_cond+0xd4>)
    1456:	0019      	movs	r1, r3
    1458:	0010      	movs	r0, r2
    145a:	4b21      	ldr	r3, [pc, #132]	; (14e0 <sd_spi_op_cond+0xd0>)
    145c:	4798      	blx	r3
    145e:	0003      	movs	r3, r0
    1460:	001a      	movs	r2, r3
    1462:	2301      	movs	r3, #1
    1464:	4053      	eors	r3, r2
    1466:	b2db      	uxtb	r3, r3
    1468:	2b00      	cmp	r3, #0
    146a:	d001      	beq.n	1470 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
    146c:	2300      	movs	r3, #0
    146e:	e02e      	b.n	14ce <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
    1470:	4b1d      	ldr	r3, [pc, #116]	; (14e8 <sd_spi_op_cond+0xd8>)
    1472:	4798      	blx	r3
    1474:	0003      	movs	r3, r0
    1476:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
    1478:	68fb      	ldr	r3, [r7, #12]
    147a:	2201      	movs	r2, #1
    147c:	4013      	ands	r3, r2
    147e:	d006      	beq.n	148e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
    1480:	693b      	ldr	r3, [r7, #16]
    1482:	1e5a      	subs	r2, r3, #1
    1484:	613a      	str	r2, [r7, #16]
    1486:	2b00      	cmp	r3, #0
    1488:	d1ca      	bne.n	1420 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
    148a:	2300      	movs	r3, #0
    148c:	e01f      	b.n	14ce <sd_spi_op_cond+0xbe>
			break;
    148e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    1490:	4b16      	ldr	r3, [pc, #88]	; (14ec <sd_spi_op_cond+0xdc>)
    1492:	2100      	movs	r1, #0
    1494:	0018      	movs	r0, r3
    1496:	4b12      	ldr	r3, [pc, #72]	; (14e0 <sd_spi_op_cond+0xd0>)
    1498:	4798      	blx	r3
    149a:	0003      	movs	r3, r0
    149c:	001a      	movs	r2, r3
    149e:	2301      	movs	r3, #1
    14a0:	4053      	eors	r3, r2
    14a2:	b2db      	uxtb	r3, r3
    14a4:	2b00      	cmp	r3, #0
    14a6:	d001      	beq.n	14ac <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
    14a8:	2300      	movs	r3, #0
    14aa:	e010      	b.n	14ce <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
    14ac:	4b0e      	ldr	r3, [pc, #56]	; (14e8 <sd_spi_op_cond+0xd8>)
    14ae:	4798      	blx	r3
    14b0:	0002      	movs	r2, r0
    14b2:	2380      	movs	r3, #128	; 0x80
    14b4:	05db      	lsls	r3, r3, #23
    14b6:	4013      	ands	r3, r2
    14b8:	d008      	beq.n	14cc <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
    14ba:	4b0d      	ldr	r3, [pc, #52]	; (14f0 <sd_spi_op_cond+0xe0>)
    14bc:	681a      	ldr	r2, [r3, #0]
    14be:	4b0c      	ldr	r3, [pc, #48]	; (14f0 <sd_spi_op_cond+0xe0>)
    14c0:	681b      	ldr	r3, [r3, #0]
    14c2:	7adb      	ldrb	r3, [r3, #11]
    14c4:	2108      	movs	r1, #8
    14c6:	430b      	orrs	r3, r1
    14c8:	b2db      	uxtb	r3, r3
    14ca:	72d3      	strb	r3, [r2, #11]
	}
	return true;
    14cc:	2301      	movs	r3, #1
}
    14ce:	0018      	movs	r0, r3
    14d0:	46bd      	mov	sp, r7
    14d2:	b006      	add	sp, #24
    14d4:	bd80      	pop	{r7, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	00001bee 	.word	0x00001bee
    14dc:	00001137 	.word	0x00001137
    14e0:	00002dfd 	.word	0x00002dfd
    14e4:	00001129 	.word	0x00001129
    14e8:	0000303d 	.word	0x0000303d
    14ec:	0000053a 	.word	0x0000053a
    14f0:	200000f4 	.word	0x200000f4

000014f4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
    14f4:	b580      	push	{r7, lr}
    14f6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
    14f8:	2301      	movs	r3, #1
}
    14fa:	0018      	movs	r0, r3
    14fc:	46bd      	mov	sp, r7
    14fe:	bd80      	pop	{r7, pc}

00001500 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
    1500:	b580      	push	{r7, lr}
    1502:	b084      	sub	sp, #16
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	2200      	movs	r2, #0
    150c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    150e:	23d5      	movs	r3, #213	; 0xd5
    1510:	005b      	lsls	r3, r3, #1
    1512:	4a14      	ldr	r2, [pc, #80]	; (1564 <sd_cmd8+0x64>)
    1514:	0019      	movs	r1, r3
    1516:	0010      	movs	r0, r2
    1518:	4b13      	ldr	r3, [pc, #76]	; (1568 <sd_cmd8+0x68>)
    151a:	4798      	blx	r3
    151c:	0003      	movs	r3, r0
    151e:	001a      	movs	r2, r3
    1520:	2301      	movs	r3, #1
    1522:	4053      	eors	r3, r2
    1524:	b2db      	uxtb	r3, r3
    1526:	2b00      	cmp	r3, #0
    1528:	d001      	beq.n	152e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
    152a:	2301      	movs	r3, #1
    152c:	e015      	b.n	155a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
    152e:	4b0f      	ldr	r3, [pc, #60]	; (156c <sd_cmd8+0x6c>)
    1530:	4798      	blx	r3
    1532:	0003      	movs	r3, r0
    1534:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
    1536:	68fb      	ldr	r3, [r7, #12]
    1538:	3301      	adds	r3, #1
    153a:	d101      	bne.n	1540 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
    153c:	2301      	movs	r3, #1
    153e:	e00c      	b.n	155a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    1540:	68fb      	ldr	r3, [r7, #12]
    1542:	051b      	lsls	r3, r3, #20
    1544:	0d1a      	lsrs	r2, r3, #20
    1546:	23d5      	movs	r3, #213	; 0xd5
    1548:	005b      	lsls	r3, r3, #1
    154a:	429a      	cmp	r2, r3
    154c:	d001      	beq.n	1552 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
    154e:	2300      	movs	r3, #0
    1550:	e003      	b.n	155a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	2201      	movs	r2, #1
    1556:	701a      	strb	r2, [r3, #0]
	return true;
    1558:	2301      	movs	r3, #1
}
    155a:	0018      	movs	r0, r3
    155c:	46bd      	mov	sp, r7
    155e:	b004      	add	sp, #16
    1560:	bd80      	pop	{r7, pc}
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	00005508 	.word	0x00005508
    1568:	00002dfd 	.word	0x00002dfd
    156c:	0000303d 	.word	0x0000303d

00001570 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
    1570:	b590      	push	{r4, r7, lr}
    1572:	b089      	sub	sp, #36	; 0x24
    1574:	af02      	add	r7, sp, #8
    1576:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    1578:	2380      	movs	r3, #128	; 0x80
    157a:	009a      	lsls	r2, r3, #2
    157c:	4841      	ldr	r0, [pc, #260]	; (1684 <mmc_cmd8+0x114>)
    157e:	2300      	movs	r3, #0
    1580:	9300      	str	r3, [sp, #0]
    1582:	2301      	movs	r3, #1
    1584:	2100      	movs	r1, #0
    1586:	4c40      	ldr	r4, [pc, #256]	; (1688 <mmc_cmd8+0x118>)
    1588:	47a0      	blx	r4
    158a:	0003      	movs	r3, r0
    158c:	001a      	movs	r2, r3
    158e:	2301      	movs	r3, #1
    1590:	4053      	eors	r3, r2
    1592:	b2db      	uxtb	r3, r3
    1594:	2b00      	cmp	r3, #0
    1596:	d001      	beq.n	159c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    1598:	2300      	movs	r3, #0
    159a:	e06e      	b.n	167a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    159c:	2316      	movs	r3, #22
    159e:	18fb      	adds	r3, r7, r3
    15a0:	2200      	movs	r2, #0
    15a2:	801a      	strh	r2, [r3, #0]
    15a4:	e014      	b.n	15d0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    15a6:	2310      	movs	r3, #16
    15a8:	18fb      	adds	r3, r7, r3
    15aa:	0018      	movs	r0, r3
    15ac:	4b37      	ldr	r3, [pc, #220]	; (168c <mmc_cmd8+0x11c>)
    15ae:	4798      	blx	r3
    15b0:	0003      	movs	r3, r0
    15b2:	001a      	movs	r2, r3
    15b4:	2301      	movs	r3, #1
    15b6:	4053      	eors	r3, r2
    15b8:	b2db      	uxtb	r3, r3
    15ba:	2b00      	cmp	r3, #0
    15bc:	d001      	beq.n	15c2 <mmc_cmd8+0x52>
			return false;
    15be:	2300      	movs	r3, #0
    15c0:	e05b      	b.n	167a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    15c2:	2316      	movs	r3, #22
    15c4:	18fb      	adds	r3, r7, r3
    15c6:	881a      	ldrh	r2, [r3, #0]
    15c8:	2316      	movs	r3, #22
    15ca:	18fb      	adds	r3, r7, r3
    15cc:	3201      	adds	r2, #1
    15ce:	801a      	strh	r2, [r3, #0]
    15d0:	2316      	movs	r3, #22
    15d2:	18fb      	adds	r3, r7, r3
    15d4:	881b      	ldrh	r3, [r3, #0]
    15d6:	2b31      	cmp	r3, #49	; 0x31
    15d8:	d9e5      	bls.n	15a6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    15da:	693b      	ldr	r3, [r7, #16]
    15dc:	b2db      	uxtb	r3, r3
    15de:	2202      	movs	r2, #2
    15e0:	4013      	ands	r3, r2
    15e2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    15e8:	4b29      	ldr	r3, [pc, #164]	; (1690 <mmc_cmd8+0x120>)
    15ea:	681b      	ldr	r3, [r3, #0]
    15ec:	330e      	adds	r3, #14
    15ee:	0018      	movs	r0, r3
    15f0:	230c      	movs	r3, #12
    15f2:	223e      	movs	r2, #62	; 0x3e
    15f4:	2180      	movs	r1, #128	; 0x80
    15f6:	4c27      	ldr	r4, [pc, #156]	; (1694 <mmc_cmd8+0x124>)
    15f8:	47a0      	blx	r4
    15fa:	0002      	movs	r2, r0
    15fc:	4b26      	ldr	r3, [pc, #152]	; (1698 <mmc_cmd8+0x128>)
    15fe:	429a      	cmp	r2, r3
    1600:	d135      	bne.n	166e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1602:	e014      	b.n	162e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    1604:	230c      	movs	r3, #12
    1606:	18fb      	adds	r3, r7, r3
    1608:	0018      	movs	r0, r3
    160a:	4b20      	ldr	r3, [pc, #128]	; (168c <mmc_cmd8+0x11c>)
    160c:	4798      	blx	r3
    160e:	0003      	movs	r3, r0
    1610:	001a      	movs	r2, r3
    1612:	2301      	movs	r3, #1
    1614:	4053      	eors	r3, r2
    1616:	b2db      	uxtb	r3, r3
    1618:	2b00      	cmp	r3, #0
    161a:	d001      	beq.n	1620 <mmc_cmd8+0xb0>
				return false;
    161c:	2300      	movs	r3, #0
    161e:	e02c      	b.n	167a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1620:	2316      	movs	r3, #22
    1622:	18fb      	adds	r3, r7, r3
    1624:	881a      	ldrh	r2, [r3, #0]
    1626:	2316      	movs	r3, #22
    1628:	18fb      	adds	r3, r7, r3
    162a:	3201      	adds	r2, #1
    162c:	801a      	strh	r2, [r3, #0]
    162e:	2316      	movs	r3, #22
    1630:	18fb      	adds	r3, r7, r3
    1632:	881b      	ldrh	r3, [r3, #0]
    1634:	2b35      	cmp	r3, #53	; 0x35
    1636:	d9e5      	bls.n	1604 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    1638:	4b15      	ldr	r3, [pc, #84]	; (1690 <mmc_cmd8+0x120>)
    163a:	681b      	ldr	r3, [r3, #0]
    163c:	68fa      	ldr	r2, [r7, #12]
    163e:	0852      	lsrs	r2, r2, #1
    1640:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1642:	e014      	b.n	166e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    1644:	230c      	movs	r3, #12
    1646:	18fb      	adds	r3, r7, r3
    1648:	0018      	movs	r0, r3
    164a:	4b10      	ldr	r3, [pc, #64]	; (168c <mmc_cmd8+0x11c>)
    164c:	4798      	blx	r3
    164e:	0003      	movs	r3, r0
    1650:	001a      	movs	r2, r3
    1652:	2301      	movs	r3, #1
    1654:	4053      	eors	r3, r2
    1656:	b2db      	uxtb	r3, r3
    1658:	2b00      	cmp	r3, #0
    165a:	d001      	beq.n	1660 <mmc_cmd8+0xf0>
			return false;
    165c:	2300      	movs	r3, #0
    165e:	e00c      	b.n	167a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    1660:	2316      	movs	r3, #22
    1662:	18fb      	adds	r3, r7, r3
    1664:	881a      	ldrh	r2, [r3, #0]
    1666:	2316      	movs	r3, #22
    1668:	18fb      	adds	r3, r7, r3
    166a:	3201      	adds	r2, #1
    166c:	801a      	strh	r2, [r3, #0]
    166e:	2316      	movs	r3, #22
    1670:	18fb      	adds	r3, r7, r3
    1672:	881b      	ldrh	r3, [r3, #0]
    1674:	2b7f      	cmp	r3, #127	; 0x7f
    1676:	d9e5      	bls.n	1644 <mmc_cmd8+0xd4>
		}
	}
	return true;
    1678:	2301      	movs	r3, #1
}
    167a:	0018      	movs	r0, r3
    167c:	46bd      	mov	sp, r7
    167e:	b007      	add	sp, #28
    1680:	bd90      	pop	{r4, r7, pc}
    1682:	46c0      	nop			; (mov r8, r8)
    1684:	00081108 	.word	0x00081108
    1688:	00002e25 	.word	0x00002e25
    168c:	00003051 	.word	0x00003051
    1690:	200000f4 	.word	0x200000f4
    1694:	00001209 	.word	0x00001209
    1698:	00000fff 	.word	0x00000fff

0000169c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    169c:	b590      	push	{r4, r7, lr}
    169e:	b083      	sub	sp, #12
    16a0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    16a2:	4b15      	ldr	r3, [pc, #84]	; (16f8 <sd_mmc_cmd9_spi+0x5c>)
    16a4:	681b      	ldr	r3, [r3, #0]
    16a6:	891b      	ldrh	r3, [r3, #8]
    16a8:	0419      	lsls	r1, r3, #16
    16aa:	4814      	ldr	r0, [pc, #80]	; (16fc <sd_mmc_cmd9_spi+0x60>)
    16ac:	2301      	movs	r3, #1
    16ae:	9300      	str	r3, [sp, #0]
    16b0:	2301      	movs	r3, #1
    16b2:	2210      	movs	r2, #16
    16b4:	4c12      	ldr	r4, [pc, #72]	; (1700 <sd_mmc_cmd9_spi+0x64>)
    16b6:	47a0      	blx	r4
    16b8:	0003      	movs	r3, r0
    16ba:	001a      	movs	r2, r3
    16bc:	2301      	movs	r3, #1
    16be:	4053      	eors	r3, r2
    16c0:	b2db      	uxtb	r3, r3
    16c2:	2b00      	cmp	r3, #0
    16c4:	d001      	beq.n	16ca <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    16c6:	2300      	movs	r3, #0
    16c8:	e012      	b.n	16f0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    16ca:	4b0b      	ldr	r3, [pc, #44]	; (16f8 <sd_mmc_cmd9_spi+0x5c>)
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	330e      	adds	r3, #14
    16d0:	2101      	movs	r1, #1
    16d2:	0018      	movs	r0, r3
    16d4:	4b0b      	ldr	r3, [pc, #44]	; (1704 <sd_mmc_cmd9_spi+0x68>)
    16d6:	4798      	blx	r3
    16d8:	0003      	movs	r3, r0
    16da:	001a      	movs	r2, r3
    16dc:	2301      	movs	r3, #1
    16de:	4053      	eors	r3, r2
    16e0:	b2db      	uxtb	r3, r3
    16e2:	2b00      	cmp	r3, #0
    16e4:	d001      	beq.n	16ea <sd_mmc_cmd9_spi+0x4e>
		return false;
    16e6:	2300      	movs	r3, #0
    16e8:	e002      	b.n	16f0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    16ea:	4b07      	ldr	r3, [pc, #28]	; (1708 <sd_mmc_cmd9_spi+0x6c>)
    16ec:	4798      	blx	r3
    16ee:	0003      	movs	r3, r0
}
    16f0:	0018      	movs	r0, r3
    16f2:	46bd      	mov	sp, r7
    16f4:	b001      	add	sp, #4
    16f6:	bd90      	pop	{r4, r7, pc}
    16f8:	200000f4 	.word	0x200000f4
    16fc:	00081109 	.word	0x00081109
    1700:	00002e25 	.word	0x00002e25
    1704:	000030f5 	.word	0x000030f5
    1708:	00003199 	.word	0x00003199

0000170c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    170c:	b5b0      	push	{r4, r5, r7, lr}
    170e:	b084      	sub	sp, #16
    1710:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    1712:	4b45      	ldr	r3, [pc, #276]	; (1828 <mmc_decode_csd+0x11c>)
    1714:	681b      	ldr	r3, [r3, #0]
    1716:	330e      	adds	r3, #14
    1718:	0018      	movs	r0, r3
    171a:	2304      	movs	r3, #4
    171c:	227a      	movs	r2, #122	; 0x7a
    171e:	2180      	movs	r1, #128	; 0x80
    1720:	4c42      	ldr	r4, [pc, #264]	; (182c <mmc_decode_csd+0x120>)
    1722:	47a0      	blx	r4
    1724:	0003      	movs	r3, r0
    1726:	2b02      	cmp	r3, #2
    1728:	d011      	beq.n	174e <mmc_decode_csd+0x42>
    172a:	d802      	bhi.n	1732 <mmc_decode_csd+0x26>
    172c:	2b01      	cmp	r3, #1
    172e:	d009      	beq.n	1744 <mmc_decode_csd+0x38>
    1730:	e003      	b.n	173a <mmc_decode_csd+0x2e>
    1732:	2b03      	cmp	r3, #3
    1734:	d010      	beq.n	1758 <mmc_decode_csd+0x4c>
    1736:	2b04      	cmp	r3, #4
    1738:	d013      	beq.n	1762 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    173a:	4b3b      	ldr	r3, [pc, #236]	; (1828 <mmc_decode_csd+0x11c>)
    173c:	681b      	ldr	r3, [r3, #0]
    173e:	2212      	movs	r2, #18
    1740:	731a      	strb	r2, [r3, #12]
		break;
    1742:	e013      	b.n	176c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    1744:	4b38      	ldr	r3, [pc, #224]	; (1828 <mmc_decode_csd+0x11c>)
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	2214      	movs	r2, #20
    174a:	731a      	strb	r2, [r3, #12]
		break;
    174c:	e00e      	b.n	176c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    174e:	4b36      	ldr	r3, [pc, #216]	; (1828 <mmc_decode_csd+0x11c>)
    1750:	681b      	ldr	r3, [r3, #0]
    1752:	2222      	movs	r2, #34	; 0x22
    1754:	731a      	strb	r2, [r3, #12]
		break;
    1756:	e009      	b.n	176c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    1758:	4b33      	ldr	r3, [pc, #204]	; (1828 <mmc_decode_csd+0x11c>)
    175a:	681b      	ldr	r3, [r3, #0]
    175c:	2230      	movs	r2, #48	; 0x30
    175e:	731a      	strb	r2, [r3, #12]
		break;
    1760:	e004      	b.n	176c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    1762:	4b31      	ldr	r3, [pc, #196]	; (1828 <mmc_decode_csd+0x11c>)
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	2240      	movs	r2, #64	; 0x40
    1768:	731a      	strb	r2, [r3, #12]
		break;
    176a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    176c:	4b2e      	ldr	r3, [pc, #184]	; (1828 <mmc_decode_csd+0x11c>)
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	330e      	adds	r3, #14
    1772:	0018      	movs	r0, r3
    1774:	2308      	movs	r3, #8
    1776:	2260      	movs	r2, #96	; 0x60
    1778:	2180      	movs	r1, #128	; 0x80
    177a:	4c2c      	ldr	r4, [pc, #176]	; (182c <mmc_decode_csd+0x120>)
    177c:	47a0      	blx	r4
    177e:	0003      	movs	r3, r0
    1780:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	2207      	movs	r2, #7
    1786:	401a      	ands	r2, r3
    1788:	4b29      	ldr	r3, [pc, #164]	; (1830 <mmc_decode_csd+0x124>)
    178a:	0092      	lsls	r2, r2, #2
    178c:	58d3      	ldr	r3, [r2, r3]
    178e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	08db      	lsrs	r3, r3, #3
    1794:	220f      	movs	r2, #15
    1796:	401a      	ands	r2, r3
    1798:	4b26      	ldr	r3, [pc, #152]	; (1834 <mmc_decode_csd+0x128>)
    179a:	0092      	lsls	r2, r2, #2
    179c:	58d3      	ldr	r3, [r2, r3]
    179e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    17a0:	4b21      	ldr	r3, [pc, #132]	; (1828 <mmc_decode_csd+0x11c>)
    17a2:	681b      	ldr	r3, [r3, #0]
    17a4:	68ba      	ldr	r2, [r7, #8]
    17a6:	6879      	ldr	r1, [r7, #4]
    17a8:	434a      	muls	r2, r1
    17aa:	21fa      	movs	r1, #250	; 0xfa
    17ac:	0089      	lsls	r1, r1, #2
    17ae:	434a      	muls	r2, r1
    17b0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    17b2:	4b1d      	ldr	r3, [pc, #116]	; (1828 <mmc_decode_csd+0x11c>)
    17b4:	681b      	ldr	r3, [r3, #0]
    17b6:	330e      	adds	r3, #14
    17b8:	0018      	movs	r0, r3
    17ba:	230c      	movs	r3, #12
    17bc:	223e      	movs	r2, #62	; 0x3e
    17be:	2180      	movs	r1, #128	; 0x80
    17c0:	4c1a      	ldr	r4, [pc, #104]	; (182c <mmc_decode_csd+0x120>)
    17c2:	47a0      	blx	r4
    17c4:	0002      	movs	r2, r0
    17c6:	4b1c      	ldr	r3, [pc, #112]	; (1838 <mmc_decode_csd+0x12c>)
    17c8:	429a      	cmp	r2, r3
    17ca:	d028      	beq.n	181e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    17cc:	4b16      	ldr	r3, [pc, #88]	; (1828 <mmc_decode_csd+0x11c>)
    17ce:	681b      	ldr	r3, [r3, #0]
    17d0:	330e      	adds	r3, #14
    17d2:	0018      	movs	r0, r3
    17d4:	230c      	movs	r3, #12
    17d6:	223e      	movs	r2, #62	; 0x3e
    17d8:	2180      	movs	r1, #128	; 0x80
    17da:	4c14      	ldr	r4, [pc, #80]	; (182c <mmc_decode_csd+0x120>)
    17dc:	47a0      	blx	r4
    17de:	0003      	movs	r3, r0
    17e0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    17e2:	4b11      	ldr	r3, [pc, #68]	; (1828 <mmc_decode_csd+0x11c>)
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	330e      	adds	r3, #14
    17e8:	0018      	movs	r0, r3
    17ea:	2303      	movs	r3, #3
    17ec:	222f      	movs	r2, #47	; 0x2f
    17ee:	2180      	movs	r1, #128	; 0x80
    17f0:	4d0e      	ldr	r5, [pc, #56]	; (182c <mmc_decode_csd+0x120>)
    17f2:	47a8      	blx	r5
    17f4:	0003      	movs	r3, r0
    17f6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    17f8:	409c      	lsls	r4, r3
    17fa:	0023      	movs	r3, r4
    17fc:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    17fe:	4b0a      	ldr	r3, [pc, #40]	; (1828 <mmc_decode_csd+0x11c>)
    1800:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1802:	4b09      	ldr	r3, [pc, #36]	; (1828 <mmc_decode_csd+0x11c>)
    1804:	681b      	ldr	r3, [r3, #0]
    1806:	330e      	adds	r3, #14
    1808:	0018      	movs	r0, r3
    180a:	2304      	movs	r3, #4
    180c:	2250      	movs	r2, #80	; 0x50
    180e:	2180      	movs	r1, #128	; 0x80
    1810:	4d06      	ldr	r5, [pc, #24]	; (182c <mmc_decode_csd+0x120>)
    1812:	47a8      	blx	r5
    1814:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1816:	683b      	ldr	r3, [r7, #0]
    1818:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    181a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    181c:	6063      	str	r3, [r4, #4]
	}
}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	46bd      	mov	sp, r7
    1822:	b004      	add	sp, #16
    1824:	bdb0      	pop	{r4, r5, r7, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	200000f4 	.word	0x200000f4
    182c:	00001209 	.word	0x00001209
    1830:	0000c418 	.word	0x0000c418
    1834:	0000c474 	.word	0x0000c474
    1838:	00000fff 	.word	0x00000fff

0000183c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    183c:	b5b0      	push	{r4, r5, r7, lr}
    183e:	b084      	sub	sp, #16
    1840:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    1842:	4b35      	ldr	r3, [pc, #212]	; (1918 <sd_decode_csd+0xdc>)
    1844:	681b      	ldr	r3, [r3, #0]
    1846:	330e      	adds	r3, #14
    1848:	0018      	movs	r0, r3
    184a:	2308      	movs	r3, #8
    184c:	2260      	movs	r2, #96	; 0x60
    184e:	2180      	movs	r1, #128	; 0x80
    1850:	4c32      	ldr	r4, [pc, #200]	; (191c <sd_decode_csd+0xe0>)
    1852:	47a0      	blx	r4
    1854:	0003      	movs	r3, r0
    1856:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    1858:	68fb      	ldr	r3, [r7, #12]
    185a:	2207      	movs	r2, #7
    185c:	401a      	ands	r2, r3
    185e:	4b30      	ldr	r3, [pc, #192]	; (1920 <sd_decode_csd+0xe4>)
    1860:	0092      	lsls	r2, r2, #2
    1862:	58d3      	ldr	r3, [r2, r3]
    1864:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    1866:	68fb      	ldr	r3, [r7, #12]
    1868:	08db      	lsrs	r3, r3, #3
    186a:	220f      	movs	r2, #15
    186c:	401a      	ands	r2, r3
    186e:	4b2d      	ldr	r3, [pc, #180]	; (1924 <sd_decode_csd+0xe8>)
    1870:	0092      	lsls	r2, r2, #2
    1872:	58d3      	ldr	r3, [r2, r3]
    1874:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    1876:	4b28      	ldr	r3, [pc, #160]	; (1918 <sd_decode_csd+0xdc>)
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	68ba      	ldr	r2, [r7, #8]
    187c:	6879      	ldr	r1, [r7, #4]
    187e:	434a      	muls	r2, r1
    1880:	21fa      	movs	r1, #250	; 0xfa
    1882:	0089      	lsls	r1, r1, #2
    1884:	434a      	muls	r2, r1
    1886:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    1888:	4b23      	ldr	r3, [pc, #140]	; (1918 <sd_decode_csd+0xdc>)
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	330e      	adds	r3, #14
    188e:	0018      	movs	r0, r3
    1890:	2302      	movs	r3, #2
    1892:	227e      	movs	r2, #126	; 0x7e
    1894:	2180      	movs	r1, #128	; 0x80
    1896:	4c21      	ldr	r4, [pc, #132]	; (191c <sd_decode_csd+0xe0>)
    1898:	47a0      	blx	r4
    189a:	1e03      	subs	r3, r0, #0
    189c:	d00f      	beq.n	18be <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    189e:	4b1e      	ldr	r3, [pc, #120]	; (1918 <sd_decode_csd+0xdc>)
    18a0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    18a2:	4b1d      	ldr	r3, [pc, #116]	; (1918 <sd_decode_csd+0xdc>)
    18a4:	681b      	ldr	r3, [r3, #0]
    18a6:	330e      	adds	r3, #14
    18a8:	0018      	movs	r0, r3
    18aa:	2316      	movs	r3, #22
    18ac:	2230      	movs	r2, #48	; 0x30
    18ae:	2180      	movs	r1, #128	; 0x80
    18b0:	4d1a      	ldr	r5, [pc, #104]	; (191c <sd_decode_csd+0xe0>)
    18b2:	47a8      	blx	r5
    18b4:	0003      	movs	r3, r0
				* 512;
    18b6:	3301      	adds	r3, #1
    18b8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    18ba:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    18bc:	e028      	b.n	1910 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    18be:	4b16      	ldr	r3, [pc, #88]	; (1918 <sd_decode_csd+0xdc>)
    18c0:	681b      	ldr	r3, [r3, #0]
    18c2:	330e      	adds	r3, #14
    18c4:	0018      	movs	r0, r3
    18c6:	230c      	movs	r3, #12
    18c8:	223e      	movs	r2, #62	; 0x3e
    18ca:	2180      	movs	r1, #128	; 0x80
    18cc:	4c13      	ldr	r4, [pc, #76]	; (191c <sd_decode_csd+0xe0>)
    18ce:	47a0      	blx	r4
    18d0:	0003      	movs	r3, r0
    18d2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    18d4:	4b10      	ldr	r3, [pc, #64]	; (1918 <sd_decode_csd+0xdc>)
    18d6:	681b      	ldr	r3, [r3, #0]
    18d8:	330e      	adds	r3, #14
    18da:	0018      	movs	r0, r3
    18dc:	2303      	movs	r3, #3
    18de:	222f      	movs	r2, #47	; 0x2f
    18e0:	2180      	movs	r1, #128	; 0x80
    18e2:	4d0e      	ldr	r5, [pc, #56]	; (191c <sd_decode_csd+0xe0>)
    18e4:	47a8      	blx	r5
    18e6:	0003      	movs	r3, r0
    18e8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    18ea:	409c      	lsls	r4, r3
    18ec:	0023      	movs	r3, r4
    18ee:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    18f0:	4b09      	ldr	r3, [pc, #36]	; (1918 <sd_decode_csd+0xdc>)
    18f2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    18f4:	4b08      	ldr	r3, [pc, #32]	; (1918 <sd_decode_csd+0xdc>)
    18f6:	681b      	ldr	r3, [r3, #0]
    18f8:	330e      	adds	r3, #14
    18fa:	0018      	movs	r0, r3
    18fc:	2304      	movs	r3, #4
    18fe:	2250      	movs	r2, #80	; 0x50
    1900:	2180      	movs	r1, #128	; 0x80
    1902:	4d06      	ldr	r5, [pc, #24]	; (191c <sd_decode_csd+0xe0>)
    1904:	47a8      	blx	r5
    1906:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1908:	683b      	ldr	r3, [r7, #0]
    190a:	4093      	lsls	r3, r2
				/ 1024;
    190c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    190e:	6063      	str	r3, [r4, #4]
}
    1910:	46c0      	nop			; (mov r8, r8)
    1912:	46bd      	mov	sp, r7
    1914:	b004      	add	sp, #16
    1916:	bdb0      	pop	{r4, r5, r7, pc}
    1918:	200000f4 	.word	0x200000f4
    191c:	00001209 	.word	0x00001209
    1920:	0000c418 	.word	0x0000c418
    1924:	0000c434 	.word	0x0000c434

00001928 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    1928:	b580      	push	{r7, lr}
    192a:	b082      	sub	sp, #8
    192c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    192e:	4b11      	ldr	r3, [pc, #68]	; (1974 <sd_mmc_cmd13+0x4c>)
    1930:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    1932:	4b11      	ldr	r3, [pc, #68]	; (1978 <sd_mmc_cmd13+0x50>)
    1934:	2100      	movs	r1, #0
    1936:	0018      	movs	r0, r3
    1938:	4b10      	ldr	r3, [pc, #64]	; (197c <sd_mmc_cmd13+0x54>)
    193a:	4798      	blx	r3
    193c:	0003      	movs	r3, r0
    193e:	001a      	movs	r2, r3
    1940:	2301      	movs	r3, #1
    1942:	4053      	eors	r3, r2
    1944:	b2db      	uxtb	r3, r3
    1946:	2b00      	cmp	r3, #0
    1948:	d001      	beq.n	194e <sd_mmc_cmd13+0x26>
				return false;
    194a:	2300      	movs	r3, #0
    194c:	e00e      	b.n	196c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    194e:	4b0c      	ldr	r3, [pc, #48]	; (1980 <sd_mmc_cmd13+0x58>)
    1950:	4798      	blx	r3
    1952:	0002      	movs	r2, r0
    1954:	23ff      	movs	r3, #255	; 0xff
    1956:	4013      	ands	r3, r2
    1958:	d006      	beq.n	1968 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    195a:	687b      	ldr	r3, [r7, #4]
    195c:	1e5a      	subs	r2, r3, #1
    195e:	607a      	str	r2, [r7, #4]
    1960:	2b00      	cmp	r3, #0
    1962:	d1e6      	bne.n	1932 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    1964:	2300      	movs	r3, #0
    1966:	e001      	b.n	196c <sd_mmc_cmd13+0x44>
				break;
    1968:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    196a:	2301      	movs	r3, #1
}
    196c:	0018      	movs	r0, r3
    196e:	46bd      	mov	sp, r7
    1970:	b002      	add	sp, #8
    1972:	bd80      	pop	{r7, pc}
    1974:	00030d40 	.word	0x00030d40
    1978:	00001b0d 	.word	0x00001b0d
    197c:	00002dfd 	.word	0x00002dfd
    1980:	0000303d 	.word	0x0000303d

00001984 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    1984:	b590      	push	{r4, r7, lr}
    1986:	b085      	sub	sp, #20
    1988:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    198a:	4b38      	ldr	r3, [pc, #224]	; (1a6c <sd_acmd51+0xe8>)
    198c:	681b      	ldr	r3, [r3, #0]
    198e:	891b      	ldrh	r3, [r3, #8]
    1990:	041b      	lsls	r3, r3, #16
    1992:	4a37      	ldr	r2, [pc, #220]	; (1a70 <sd_acmd51+0xec>)
    1994:	0019      	movs	r1, r3
    1996:	0010      	movs	r0, r2
    1998:	4b36      	ldr	r3, [pc, #216]	; (1a74 <sd_acmd51+0xf0>)
    199a:	4798      	blx	r3
    199c:	0003      	movs	r3, r0
    199e:	001a      	movs	r2, r3
    19a0:	2301      	movs	r3, #1
    19a2:	4053      	eors	r3, r2
    19a4:	b2db      	uxtb	r3, r3
    19a6:	2b00      	cmp	r3, #0
    19a8:	d001      	beq.n	19ae <sd_acmd51+0x2a>
		return false;
    19aa:	2300      	movs	r3, #0
    19ac:	e059      	b.n	1a62 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    19ae:	4832      	ldr	r0, [pc, #200]	; (1a78 <sd_acmd51+0xf4>)
    19b0:	2301      	movs	r3, #1
    19b2:	9300      	str	r3, [sp, #0]
    19b4:	2301      	movs	r3, #1
    19b6:	2208      	movs	r2, #8
    19b8:	2100      	movs	r1, #0
    19ba:	4c30      	ldr	r4, [pc, #192]	; (1a7c <sd_acmd51+0xf8>)
    19bc:	47a0      	blx	r4
    19be:	0003      	movs	r3, r0
    19c0:	001a      	movs	r2, r3
    19c2:	2301      	movs	r3, #1
    19c4:	4053      	eors	r3, r2
    19c6:	b2db      	uxtb	r3, r3
    19c8:	2b00      	cmp	r3, #0
    19ca:	d001      	beq.n	19d0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    19cc:	2300      	movs	r3, #0
    19ce:	e048      	b.n	1a62 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    19d0:	003b      	movs	r3, r7
    19d2:	2101      	movs	r1, #1
    19d4:	0018      	movs	r0, r3
    19d6:	4b2a      	ldr	r3, [pc, #168]	; (1a80 <sd_acmd51+0xfc>)
    19d8:	4798      	blx	r3
    19da:	0003      	movs	r3, r0
    19dc:	001a      	movs	r2, r3
    19de:	2301      	movs	r3, #1
    19e0:	4053      	eors	r3, r2
    19e2:	b2db      	uxtb	r3, r3
    19e4:	2b00      	cmp	r3, #0
    19e6:	d001      	beq.n	19ec <sd_acmd51+0x68>
		return false;
    19e8:	2300      	movs	r3, #0
    19ea:	e03a      	b.n	1a62 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    19ec:	4b25      	ldr	r3, [pc, #148]	; (1a84 <sd_acmd51+0x100>)
    19ee:	4798      	blx	r3
    19f0:	0003      	movs	r3, r0
    19f2:	001a      	movs	r2, r3
    19f4:	2301      	movs	r3, #1
    19f6:	4053      	eors	r3, r2
    19f8:	b2db      	uxtb	r3, r3
    19fa:	2b00      	cmp	r3, #0
    19fc:	d001      	beq.n	1a02 <sd_acmd51+0x7e>
		return false;
    19fe:	2300      	movs	r3, #0
    1a00:	e02f      	b.n	1a62 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    1a02:	0038      	movs	r0, r7
    1a04:	2304      	movs	r3, #4
    1a06:	2238      	movs	r2, #56	; 0x38
    1a08:	2140      	movs	r1, #64	; 0x40
    1a0a:	4c1f      	ldr	r4, [pc, #124]	; (1a88 <sd_acmd51+0x104>)
    1a0c:	47a0      	blx	r4
    1a0e:	0003      	movs	r3, r0
    1a10:	2b01      	cmp	r3, #1
    1a12:	d008      	beq.n	1a26 <sd_acmd51+0xa2>
    1a14:	d302      	bcc.n	1a1c <sd_acmd51+0x98>
    1a16:	2b02      	cmp	r3, #2
    1a18:	d00a      	beq.n	1a30 <sd_acmd51+0xac>
    1a1a:	e01c      	b.n	1a56 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1a1c:	4b13      	ldr	r3, [pc, #76]	; (1a6c <sd_acmd51+0xe8>)
    1a1e:	681b      	ldr	r3, [r3, #0]
    1a20:	2210      	movs	r2, #16
    1a22:	731a      	strb	r2, [r3, #12]
		break;
    1a24:	e01c      	b.n	1a60 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    1a26:	4b11      	ldr	r3, [pc, #68]	; (1a6c <sd_acmd51+0xe8>)
    1a28:	681b      	ldr	r3, [r3, #0]
    1a2a:	221a      	movs	r2, #26
    1a2c:	731a      	strb	r2, [r3, #12]
		break;
    1a2e:	e017      	b.n	1a60 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    1a30:	0038      	movs	r0, r7
    1a32:	2301      	movs	r3, #1
    1a34:	222f      	movs	r2, #47	; 0x2f
    1a36:	2140      	movs	r1, #64	; 0x40
    1a38:	4c13      	ldr	r4, [pc, #76]	; (1a88 <sd_acmd51+0x104>)
    1a3a:	47a0      	blx	r4
    1a3c:	0003      	movs	r3, r0
    1a3e:	2b01      	cmp	r3, #1
    1a40:	d104      	bne.n	1a4c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    1a42:	4b0a      	ldr	r3, [pc, #40]	; (1a6c <sd_acmd51+0xe8>)
    1a44:	681b      	ldr	r3, [r3, #0]
    1a46:	2230      	movs	r2, #48	; 0x30
    1a48:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    1a4a:	e009      	b.n	1a60 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    1a4c:	4b07      	ldr	r3, [pc, #28]	; (1a6c <sd_acmd51+0xe8>)
    1a4e:	681b      	ldr	r3, [r3, #0]
    1a50:	2220      	movs	r2, #32
    1a52:	731a      	strb	r2, [r3, #12]
		break;
    1a54:	e004      	b.n	1a60 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1a56:	4b05      	ldr	r3, [pc, #20]	; (1a6c <sd_acmd51+0xe8>)
    1a58:	681b      	ldr	r3, [r3, #0]
    1a5a:	2210      	movs	r2, #16
    1a5c:	731a      	strb	r2, [r3, #12]
		break;
    1a5e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    1a60:	2301      	movs	r3, #1
}
    1a62:	0018      	movs	r0, r3
    1a64:	46bd      	mov	sp, r7
    1a66:	b003      	add	sp, #12
    1a68:	bd90      	pop	{r4, r7, pc}
    1a6a:	46c0      	nop			; (mov r8, r8)
    1a6c:	200000f4 	.word	0x200000f4
    1a70:	00001137 	.word	0x00001137
    1a74:	00002dfd 	.word	0x00002dfd
    1a78:	00081133 	.word	0x00081133
    1a7c:	00002e25 	.word	0x00002e25
    1a80:	000030f5 	.word	0x000030f5
    1a84:	00003199 	.word	0x00003199
    1a88:	00001209 	.word	0x00001209

00001a8c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    1a8c:	b580      	push	{r7, lr}
    1a8e:	b082      	sub	sp, #8
    1a90:	af00      	add	r7, sp, #0
    1a92:	0002      	movs	r2, r0
    1a94:	1dfb      	adds	r3, r7, #7
    1a96:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    1a98:	1dfb      	adds	r3, r7, #7
    1a9a:	781b      	ldrb	r3, [r3, #0]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d001      	beq.n	1aa4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    1aa0:	2304      	movs	r3, #4
    1aa2:	e047      	b.n	1b34 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    1aa4:	1dfb      	adds	r3, r7, #7
    1aa6:	781b      	ldrb	r3, [r3, #0]
    1aa8:	4a24      	ldr	r2, [pc, #144]	; (1b3c <sd_mmc_select_slot+0xb0>)
    1aaa:	015b      	lsls	r3, r3, #5
    1aac:	18d3      	adds	r3, r2, r3
    1aae:	330a      	adds	r3, #10
    1ab0:	781b      	ldrb	r3, [r3, #0]
    1ab2:	2b04      	cmp	r3, #4
    1ab4:	d008      	beq.n	1ac8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    1ab6:	1dfb      	adds	r3, r7, #7
    1ab8:	781b      	ldrb	r3, [r3, #0]
    1aba:	4a20      	ldr	r2, [pc, #128]	; (1b3c <sd_mmc_select_slot+0xb0>)
    1abc:	015b      	lsls	r3, r3, #5
    1abe:	18d3      	adds	r3, r2, r3
    1ac0:	330a      	adds	r3, #10
    1ac2:	781b      	ldrb	r3, [r3, #0]
    1ac4:	2b03      	cmp	r3, #3
    1ac6:	d11d      	bne.n	1b04 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    1ac8:	1dfb      	adds	r3, r7, #7
    1aca:	781b      	ldrb	r3, [r3, #0]
    1acc:	4a1b      	ldr	r2, [pc, #108]	; (1b3c <sd_mmc_select_slot+0xb0>)
    1ace:	015b      	lsls	r3, r3, #5
    1ad0:	18d3      	adds	r3, r2, r3
    1ad2:	330a      	adds	r3, #10
    1ad4:	2202      	movs	r2, #2
    1ad6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1ad8:	1dfb      	adds	r3, r7, #7
    1ada:	781a      	ldrb	r2, [r3, #0]
    1adc:	4b17      	ldr	r3, [pc, #92]	; (1b3c <sd_mmc_select_slot+0xb0>)
    1ade:	0152      	lsls	r2, r2, #5
    1ae0:	4917      	ldr	r1, [pc, #92]	; (1b40 <sd_mmc_select_slot+0xb4>)
    1ae2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    1ae4:	1dfb      	adds	r3, r7, #7
    1ae6:	781b      	ldrb	r3, [r3, #0]
    1ae8:	4a14      	ldr	r2, [pc, #80]	; (1b3c <sd_mmc_select_slot+0xb0>)
    1aea:	015b      	lsls	r3, r3, #5
    1aec:	18d3      	adds	r3, r2, r3
    1aee:	330d      	adds	r3, #13
    1af0:	2201      	movs	r2, #1
    1af2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    1af4:	1dfb      	adds	r3, r7, #7
    1af6:	781b      	ldrb	r3, [r3, #0]
    1af8:	4a10      	ldr	r2, [pc, #64]	; (1b3c <sd_mmc_select_slot+0xb0>)
    1afa:	015b      	lsls	r3, r3, #5
    1afc:	18d3      	adds	r3, r2, r3
    1afe:	331e      	adds	r3, #30
    1b00:	2200      	movs	r2, #0
    1b02:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    1b04:	4b0f      	ldr	r3, [pc, #60]	; (1b44 <sd_mmc_select_slot+0xb8>)
    1b06:	1dfa      	adds	r2, r7, #7
    1b08:	7812      	ldrb	r2, [r2, #0]
    1b0a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1b0c:	1dfb      	adds	r3, r7, #7
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	015a      	lsls	r2, r3, #5
    1b12:	4b0a      	ldr	r3, [pc, #40]	; (1b3c <sd_mmc_select_slot+0xb0>)
    1b14:	18d2      	adds	r2, r2, r3
    1b16:	4b0c      	ldr	r3, [pc, #48]	; (1b48 <sd_mmc_select_slot+0xbc>)
    1b18:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    1b1a:	4b0c      	ldr	r3, [pc, #48]	; (1b4c <sd_mmc_select_slot+0xc0>)
    1b1c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1b1e:	1dfb      	adds	r3, r7, #7
    1b20:	781b      	ldrb	r3, [r3, #0]
    1b22:	4a06      	ldr	r2, [pc, #24]	; (1b3c <sd_mmc_select_slot+0xb0>)
    1b24:	015b      	lsls	r3, r3, #5
    1b26:	18d3      	adds	r3, r2, r3
    1b28:	330a      	adds	r3, #10
    1b2a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    1b2c:	3b02      	subs	r3, #2
    1b2e:	425a      	negs	r2, r3
    1b30:	4153      	adcs	r3, r2
    1b32:	b2db      	uxtb	r3, r3
}
    1b34:	0018      	movs	r0, r3
    1b36:	46bd      	mov	sp, r7
    1b38:	b002      	add	sp, #8
    1b3a:	bd80      	pop	{r7, pc}
    1b3c:	200000d0 	.word	0x200000d0
    1b40:	00061a80 	.word	0x00061a80
    1b44:	200000f0 	.word	0x200000f0
    1b48:	200000f4 	.word	0x200000f4
    1b4c:	00001b51 	.word	0x00001b51

00001b50 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    1b50:	b5b0      	push	{r4, r5, r7, lr}
    1b52:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1b54:	4b09      	ldr	r3, [pc, #36]	; (1b7c <sd_mmc_configure_slot+0x2c>)
    1b56:	7818      	ldrb	r0, [r3, #0]
    1b58:	4b09      	ldr	r3, [pc, #36]	; (1b80 <sd_mmc_configure_slot+0x30>)
    1b5a:	681b      	ldr	r3, [r3, #0]
    1b5c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1b5e:	4b08      	ldr	r3, [pc, #32]	; (1b80 <sd_mmc_configure_slot+0x30>)
    1b60:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1b62:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    1b64:	4b06      	ldr	r3, [pc, #24]	; (1b80 <sd_mmc_configure_slot+0x30>)
    1b66:	681b      	ldr	r3, [r3, #0]
    1b68:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    1b6a:	1e5c      	subs	r4, r3, #1
    1b6c:	41a3      	sbcs	r3, r4
    1b6e:	b2db      	uxtb	r3, r3
    1b70:	4c04      	ldr	r4, [pc, #16]	; (1b84 <sd_mmc_configure_slot+0x34>)
    1b72:	47a0      	blx	r4
}
    1b74:	46c0      	nop			; (mov r8, r8)
    1b76:	46bd      	mov	sp, r7
    1b78:	bdb0      	pop	{r4, r5, r7, pc}
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	200000f0 	.word	0x200000f0
    1b80:	200000f4 	.word	0x200000f4
    1b84:	00002ce5 	.word	0x00002ce5

00001b88 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    1b88:	b580      	push	{r7, lr}
    1b8a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1b8c:	4b05      	ldr	r3, [pc, #20]	; (1ba4 <sd_mmc_deselect_slot+0x1c>)
    1b8e:	781b      	ldrb	r3, [r3, #0]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d104      	bne.n	1b9e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    1b94:	4b03      	ldr	r3, [pc, #12]	; (1ba4 <sd_mmc_deselect_slot+0x1c>)
    1b96:	781b      	ldrb	r3, [r3, #0]
    1b98:	0018      	movs	r0, r3
    1b9a:	4b03      	ldr	r3, [pc, #12]	; (1ba8 <sd_mmc_deselect_slot+0x20>)
    1b9c:	4798      	blx	r3
	}
}
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	46bd      	mov	sp, r7
    1ba2:	bd80      	pop	{r7, pc}
    1ba4:	200000f0 	.word	0x200000f0
    1ba8:	00002d6d 	.word	0x00002d6d

00001bac <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	b082      	sub	sp, #8
    1bb0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    1bb2:	1dfb      	adds	r3, r7, #7
    1bb4:	2200      	movs	r2, #0
    1bb6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    1bb8:	4b59      	ldr	r3, [pc, #356]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1bba:	681b      	ldr	r3, [r3, #0]
    1bbc:	2201      	movs	r2, #1
    1bbe:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    1bc0:	4b57      	ldr	r3, [pc, #348]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1bc2:	681b      	ldr	r3, [r3, #0]
    1bc4:	2200      	movs	r2, #0
    1bc6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    1bc8:	4b55      	ldr	r3, [pc, #340]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	2200      	movs	r2, #0
    1bce:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1bd0:	4b54      	ldr	r3, [pc, #336]	; (1d24 <sd_mmc_spi_card_init+0x178>)
    1bd2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1bd4:	2388      	movs	r3, #136	; 0x88
    1bd6:	015b      	lsls	r3, r3, #5
    1bd8:	2100      	movs	r1, #0
    1bda:	0018      	movs	r0, r3
    1bdc:	4b52      	ldr	r3, [pc, #328]	; (1d28 <sd_mmc_spi_card_init+0x17c>)
    1bde:	4798      	blx	r3
    1be0:	0003      	movs	r3, r0
    1be2:	001a      	movs	r2, r3
    1be4:	2301      	movs	r3, #1
    1be6:	4053      	eors	r3, r2
    1be8:	b2db      	uxtb	r3, r3
    1bea:	2b00      	cmp	r3, #0
    1bec:	d001      	beq.n	1bf2 <sd_mmc_spi_card_init+0x46>
		return false;
    1bee:	2300      	movs	r3, #0
    1bf0:	e092      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    1bf2:	1dfb      	adds	r3, r7, #7
    1bf4:	0018      	movs	r0, r3
    1bf6:	4b4d      	ldr	r3, [pc, #308]	; (1d2c <sd_mmc_spi_card_init+0x180>)
    1bf8:	4798      	blx	r3
    1bfa:	0003      	movs	r3, r0
    1bfc:	001a      	movs	r2, r3
    1bfe:	2301      	movs	r3, #1
    1c00:	4053      	eors	r3, r2
    1c02:	b2db      	uxtb	r3, r3
    1c04:	2b00      	cmp	r3, #0
    1c06:	d001      	beq.n	1c0c <sd_mmc_spi_card_init+0x60>
		return false;
    1c08:	2300      	movs	r3, #0
    1c0a:	e085      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1c0c:	4b48      	ldr	r3, [pc, #288]	; (1d30 <sd_mmc_spi_card_init+0x184>)
    1c0e:	4798      	blx	r3
    1c10:	0003      	movs	r3, r0
    1c12:	001a      	movs	r2, r3
    1c14:	2301      	movs	r3, #1
    1c16:	4053      	eors	r3, r2
    1c18:	b2db      	uxtb	r3, r3
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	d001      	beq.n	1c22 <sd_mmc_spi_card_init+0x76>
		return false;
    1c1e:	2300      	movs	r3, #0
    1c20:	e07a      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1c22:	4b3f      	ldr	r3, [pc, #252]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1c24:	681b      	ldr	r3, [r3, #0]
    1c26:	7adb      	ldrb	r3, [r3, #11]
    1c28:	001a      	movs	r2, r3
    1c2a:	2301      	movs	r3, #1
    1c2c:	4013      	ands	r3, r2
    1c2e:	d021      	beq.n	1c74 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    1c30:	1dfb      	adds	r3, r7, #7
    1c32:	781b      	ldrb	r3, [r3, #0]
    1c34:	0018      	movs	r0, r3
    1c36:	4b3f      	ldr	r3, [pc, #252]	; (1d34 <sd_mmc_spi_card_init+0x188>)
    1c38:	4798      	blx	r3
    1c3a:	0003      	movs	r3, r0
    1c3c:	001a      	movs	r2, r3
    1c3e:	2301      	movs	r3, #1
    1c40:	4053      	eors	r3, r2
    1c42:	b2db      	uxtb	r3, r3
    1c44:	2b00      	cmp	r3, #0
    1c46:	d007      	beq.n	1c58 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    1c48:	4b35      	ldr	r3, [pc, #212]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1c4a:	681b      	ldr	r3, [r3, #0]
    1c4c:	2202      	movs	r2, #2
    1c4e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    1c50:	4b39      	ldr	r3, [pc, #228]	; (1d38 <sd_mmc_spi_card_init+0x18c>)
    1c52:	4798      	blx	r3
    1c54:	0003      	movs	r3, r0
    1c56:	e05f      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1c58:	4b38      	ldr	r3, [pc, #224]	; (1d3c <sd_mmc_spi_card_init+0x190>)
    1c5a:	2100      	movs	r1, #0
    1c5c:	0018      	movs	r0, r3
    1c5e:	4b32      	ldr	r3, [pc, #200]	; (1d28 <sd_mmc_spi_card_init+0x17c>)
    1c60:	4798      	blx	r3
    1c62:	0003      	movs	r3, r0
    1c64:	001a      	movs	r2, r3
    1c66:	2301      	movs	r3, #1
    1c68:	4053      	eors	r3, r2
    1c6a:	b2db      	uxtb	r3, r3
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	d001      	beq.n	1c74 <sd_mmc_spi_card_init+0xc8>
			return false;
    1c70:	2300      	movs	r3, #0
    1c72:	e051      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1c74:	4b2a      	ldr	r3, [pc, #168]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1c76:	681b      	ldr	r3, [r3, #0]
    1c78:	7adb      	ldrb	r3, [r3, #11]
    1c7a:	001a      	movs	r2, r3
    1c7c:	2301      	movs	r3, #1
    1c7e:	4013      	ands	r3, r2
    1c80:	d017      	beq.n	1cb2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    1c82:	4b2f      	ldr	r3, [pc, #188]	; (1d40 <sd_mmc_spi_card_init+0x194>)
    1c84:	4798      	blx	r3
    1c86:	0003      	movs	r3, r0
    1c88:	001a      	movs	r2, r3
    1c8a:	2301      	movs	r3, #1
    1c8c:	4053      	eors	r3, r2
    1c8e:	b2db      	uxtb	r3, r3
    1c90:	2b00      	cmp	r3, #0
    1c92:	d001      	beq.n	1c98 <sd_mmc_spi_card_init+0xec>
			return false;
    1c94:	2300      	movs	r3, #0
    1c96:	e03f      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    1c98:	4b2a      	ldr	r3, [pc, #168]	; (1d44 <sd_mmc_spi_card_init+0x198>)
    1c9a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    1c9c:	4b2a      	ldr	r3, [pc, #168]	; (1d48 <sd_mmc_spi_card_init+0x19c>)
    1c9e:	4798      	blx	r3
    1ca0:	0003      	movs	r3, r0
    1ca2:	001a      	movs	r2, r3
    1ca4:	2301      	movs	r3, #1
    1ca6:	4053      	eors	r3, r2
    1ca8:	b2db      	uxtb	r3, r3
    1caa:	2b00      	cmp	r3, #0
    1cac:	d001      	beq.n	1cb2 <sd_mmc_spi_card_init+0x106>
			return false;
    1cae:	2300      	movs	r3, #0
    1cb0:	e032      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1cb2:	4b1b      	ldr	r3, [pc, #108]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	7adb      	ldrb	r3, [r3, #11]
    1cb8:	001a      	movs	r2, r3
    1cba:	2301      	movs	r3, #1
    1cbc:	4013      	ands	r3, r2
    1cbe:	d016      	beq.n	1cee <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1cc0:	4b17      	ldr	r3, [pc, #92]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1cc2:	681b      	ldr	r3, [r3, #0]
    1cc4:	7adb      	ldrb	r3, [r3, #11]
    1cc6:	001a      	movs	r2, r3
    1cc8:	2308      	movs	r3, #8
    1cca:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1ccc:	d10f      	bne.n	1cee <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1cce:	2380      	movs	r3, #128	; 0x80
    1cd0:	009b      	lsls	r3, r3, #2
    1cd2:	4a1e      	ldr	r2, [pc, #120]	; (1d4c <sd_mmc_spi_card_init+0x1a0>)
    1cd4:	0019      	movs	r1, r3
    1cd6:	0010      	movs	r0, r2
    1cd8:	4b13      	ldr	r3, [pc, #76]	; (1d28 <sd_mmc_spi_card_init+0x17c>)
    1cda:	4798      	blx	r3
    1cdc:	0003      	movs	r3, r0
    1cde:	001a      	movs	r2, r3
    1ce0:	2301      	movs	r3, #1
    1ce2:	4053      	eors	r3, r2
    1ce4:	b2db      	uxtb	r3, r3
    1ce6:	2b00      	cmp	r3, #0
    1ce8:	d001      	beq.n	1cee <sd_mmc_spi_card_init+0x142>
			return false;
    1cea:	2300      	movs	r3, #0
    1cec:	e014      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1cee:	4b0c      	ldr	r3, [pc, #48]	; (1d20 <sd_mmc_spi_card_init+0x174>)
    1cf0:	681b      	ldr	r3, [r3, #0]
    1cf2:	7adb      	ldrb	r3, [r3, #11]
    1cf4:	001a      	movs	r2, r3
    1cf6:	2301      	movs	r3, #1
    1cf8:	4013      	ands	r3, r2
    1cfa:	d00a      	beq.n	1d12 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1cfc:	4b14      	ldr	r3, [pc, #80]	; (1d50 <sd_mmc_spi_card_init+0x1a4>)
    1cfe:	4798      	blx	r3
    1d00:	0003      	movs	r3, r0
    1d02:	001a      	movs	r2, r3
    1d04:	2301      	movs	r3, #1
    1d06:	4053      	eors	r3, r2
    1d08:	b2db      	uxtb	r3, r3
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d001      	beq.n	1d12 <sd_mmc_spi_card_init+0x166>
			return false;
    1d0e:	2300      	movs	r3, #0
    1d10:	e002      	b.n	1d18 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1d12:	4b10      	ldr	r3, [pc, #64]	; (1d54 <sd_mmc_spi_card_init+0x1a8>)
    1d14:	4798      	blx	r3
	return true;
    1d16:	2301      	movs	r3, #1
}
    1d18:	0018      	movs	r0, r3
    1d1a:	46bd      	mov	sp, r7
    1d1c:	b002      	add	sp, #8
    1d1e:	bd80      	pop	{r7, pc}
    1d20:	200000f4 	.word	0x200000f4
    1d24:	00002db1 	.word	0x00002db1
    1d28:	00002dfd 	.word	0x00002dfd
    1d2c:	00001501 	.word	0x00001501
    1d30:	000014f5 	.word	0x000014f5
    1d34:	00001411 	.word	0x00001411
    1d38:	00001d59 	.word	0x00001d59
    1d3c:	0000113b 	.word	0x0000113b
    1d40:	0000169d 	.word	0x0000169d
    1d44:	0000183d 	.word	0x0000183d
    1d48:	00001985 	.word	0x00001985
    1d4c:	00001110 	.word	0x00001110
    1d50:	00001929 	.word	0x00001929
    1d54:	00001b51 	.word	0x00001b51

00001d58 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	b082      	sub	sp, #8
    1d5c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    1d5e:	2388      	movs	r3, #136	; 0x88
    1d60:	015b      	lsls	r3, r3, #5
    1d62:	2100      	movs	r1, #0
    1d64:	0018      	movs	r0, r3
    1d66:	4b32      	ldr	r3, [pc, #200]	; (1e30 <sd_mmc_spi_install_mmc+0xd8>)
    1d68:	4798      	blx	r3
    1d6a:	0003      	movs	r3, r0
    1d6c:	001a      	movs	r2, r3
    1d6e:	2301      	movs	r3, #1
    1d70:	4053      	eors	r3, r2
    1d72:	b2db      	uxtb	r3, r3
    1d74:	2b00      	cmp	r3, #0
    1d76:	d001      	beq.n	1d7c <sd_mmc_spi_install_mmc+0x24>
		return false;
    1d78:	2300      	movs	r3, #0
    1d7a:	e055      	b.n	1e28 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    1d7c:	4b2d      	ldr	r3, [pc, #180]	; (1e34 <sd_mmc_spi_install_mmc+0xdc>)
    1d7e:	4798      	blx	r3
    1d80:	0003      	movs	r3, r0
    1d82:	001a      	movs	r2, r3
    1d84:	2301      	movs	r3, #1
    1d86:	4053      	eors	r3, r2
    1d88:	b2db      	uxtb	r3, r3
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d001      	beq.n	1d92 <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1d8e:	2300      	movs	r3, #0
    1d90:	e04a      	b.n	1e28 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    1d92:	4b29      	ldr	r3, [pc, #164]	; (1e38 <sd_mmc_spi_install_mmc+0xe0>)
    1d94:	2100      	movs	r1, #0
    1d96:	0018      	movs	r0, r3
    1d98:	4b25      	ldr	r3, [pc, #148]	; (1e30 <sd_mmc_spi_install_mmc+0xd8>)
    1d9a:	4798      	blx	r3
    1d9c:	0003      	movs	r3, r0
    1d9e:	001a      	movs	r2, r3
    1da0:	2301      	movs	r3, #1
    1da2:	4053      	eors	r3, r2
    1da4:	b2db      	uxtb	r3, r3
    1da6:	2b00      	cmp	r3, #0
    1da8:	d001      	beq.n	1dae <sd_mmc_spi_install_mmc+0x56>
		return false;
    1daa:	2300      	movs	r3, #0
    1dac:	e03c      	b.n	1e28 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1dae:	4b23      	ldr	r3, [pc, #140]	; (1e3c <sd_mmc_spi_install_mmc+0xe4>)
    1db0:	4798      	blx	r3
    1db2:	0003      	movs	r3, r0
    1db4:	001a      	movs	r2, r3
    1db6:	2301      	movs	r3, #1
    1db8:	4053      	eors	r3, r2
    1dba:	b2db      	uxtb	r3, r3
    1dbc:	2b00      	cmp	r3, #0
    1dbe:	d001      	beq.n	1dc4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1dc0:	2300      	movs	r3, #0
    1dc2:	e031      	b.n	1e28 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    1dc4:	4b1e      	ldr	r3, [pc, #120]	; (1e40 <sd_mmc_spi_install_mmc+0xe8>)
    1dc6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1dc8:	4b1e      	ldr	r3, [pc, #120]	; (1e44 <sd_mmc_spi_install_mmc+0xec>)
    1dca:	681b      	ldr	r3, [r3, #0]
    1dcc:	7b1b      	ldrb	r3, [r3, #12]
    1dce:	2b3f      	cmp	r3, #63	; 0x3f
    1dd0:	d90c      	bls.n	1dec <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    1dd2:	1dfb      	adds	r3, r7, #7
    1dd4:	0018      	movs	r0, r3
    1dd6:	4b1c      	ldr	r3, [pc, #112]	; (1e48 <sd_mmc_spi_install_mmc+0xf0>)
    1dd8:	4798      	blx	r3
    1dda:	0003      	movs	r3, r0
    1ddc:	001a      	movs	r2, r3
    1dde:	2301      	movs	r3, #1
    1de0:	4053      	eors	r3, r2
    1de2:	b2db      	uxtb	r3, r3
    1de4:	2b00      	cmp	r3, #0
    1de6:	d001      	beq.n	1dec <sd_mmc_spi_install_mmc+0x94>
			return false;
    1de8:	2300      	movs	r3, #0
    1dea:	e01d      	b.n	1e28 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1dec:	2380      	movs	r3, #128	; 0x80
    1dee:	009b      	lsls	r3, r3, #2
    1df0:	4a16      	ldr	r2, [pc, #88]	; (1e4c <sd_mmc_spi_install_mmc+0xf4>)
    1df2:	0019      	movs	r1, r3
    1df4:	0010      	movs	r0, r2
    1df6:	4b0e      	ldr	r3, [pc, #56]	; (1e30 <sd_mmc_spi_install_mmc+0xd8>)
    1df8:	4798      	blx	r3
    1dfa:	0003      	movs	r3, r0
    1dfc:	001a      	movs	r2, r3
    1dfe:	2301      	movs	r3, #1
    1e00:	4053      	eors	r3, r2
    1e02:	b2db      	uxtb	r3, r3
    1e04:	2b00      	cmp	r3, #0
    1e06:	d001      	beq.n	1e0c <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1e08:	2300      	movs	r3, #0
    1e0a:	e00d      	b.n	1e28 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1e0c:	4b10      	ldr	r3, [pc, #64]	; (1e50 <sd_mmc_spi_install_mmc+0xf8>)
    1e0e:	4798      	blx	r3
    1e10:	0003      	movs	r3, r0
    1e12:	001a      	movs	r2, r3
    1e14:	2301      	movs	r3, #1
    1e16:	4053      	eors	r3, r2
    1e18:	b2db      	uxtb	r3, r3
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d001      	beq.n	1e22 <sd_mmc_spi_install_mmc+0xca>
		return false;
    1e1e:	2300      	movs	r3, #0
    1e20:	e002      	b.n	1e28 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    1e22:	4b0c      	ldr	r3, [pc, #48]	; (1e54 <sd_mmc_spi_install_mmc+0xfc>)
    1e24:	4798      	blx	r3
	return true;
    1e26:	2301      	movs	r3, #1
}
    1e28:	0018      	movs	r0, r3
    1e2a:	46bd      	mov	sp, r7
    1e2c:	b002      	add	sp, #8
    1e2e:	bd80      	pop	{r7, pc}
    1e30:	00002dfd 	.word	0x00002dfd
    1e34:	00001365 	.word	0x00001365
    1e38:	0000113b 	.word	0x0000113b
    1e3c:	0000169d 	.word	0x0000169d
    1e40:	0000170d 	.word	0x0000170d
    1e44:	200000f4 	.word	0x200000f4
    1e48:	00001571 	.word	0x00001571
    1e4c:	00001110 	.word	0x00001110
    1e50:	00001929 	.word	0x00001929
    1e54:	00001b51 	.word	0x00001b51

00001e58 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    1e58:	b580      	push	{r7, lr}
    1e5a:	b082      	sub	sp, #8
    1e5c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1e5e:	1dfb      	adds	r3, r7, #7
    1e60:	2200      	movs	r2, #0
    1e62:	701a      	strb	r2, [r3, #0]
    1e64:	e00c      	b.n	1e80 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    1e66:	1dfb      	adds	r3, r7, #7
    1e68:	781b      	ldrb	r3, [r3, #0]
    1e6a:	4a0c      	ldr	r2, [pc, #48]	; (1e9c <sd_mmc_init+0x44>)
    1e6c:	015b      	lsls	r3, r3, #5
    1e6e:	18d3      	adds	r3, r2, r3
    1e70:	330a      	adds	r3, #10
    1e72:	2204      	movs	r2, #4
    1e74:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    1e76:	1dfb      	adds	r3, r7, #7
    1e78:	781a      	ldrb	r2, [r3, #0]
    1e7a:	1dfb      	adds	r3, r7, #7
    1e7c:	3201      	adds	r2, #1
    1e7e:	701a      	strb	r2, [r3, #0]
    1e80:	1dfb      	adds	r3, r7, #7
    1e82:	781b      	ldrb	r3, [r3, #0]
    1e84:	2b00      	cmp	r3, #0
    1e86:	d0ee      	beq.n	1e66 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1e88:	4b05      	ldr	r3, [pc, #20]	; (1ea0 <sd_mmc_init+0x48>)
    1e8a:	22ff      	movs	r2, #255	; 0xff
    1e8c:	701a      	strb	r2, [r3, #0]
	driver_init();
    1e8e:	4b05      	ldr	r3, [pc, #20]	; (1ea4 <sd_mmc_init+0x4c>)
    1e90:	4798      	blx	r3
}
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	46bd      	mov	sp, r7
    1e96:	b002      	add	sp, #8
    1e98:	bd80      	pop	{r7, pc}
    1e9a:	46c0      	nop			; (mov r8, r8)
    1e9c:	200000d0 	.word	0x200000d0
    1ea0:	200000f0 	.word	0x200000f0
    1ea4:	00002c1d 	.word	0x00002c1d

00001ea8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1ea8:	b590      	push	{r4, r7, lr}
    1eaa:	b085      	sub	sp, #20
    1eac:	af00      	add	r7, sp, #0
    1eae:	0002      	movs	r2, r0
    1eb0:	1dfb      	adds	r3, r7, #7
    1eb2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1eb4:	230f      	movs	r3, #15
    1eb6:	18fc      	adds	r4, r7, r3
    1eb8:	1dfb      	adds	r3, r7, #7
    1eba:	781b      	ldrb	r3, [r3, #0]
    1ebc:	0018      	movs	r0, r3
    1ebe:	4b13      	ldr	r3, [pc, #76]	; (1f0c <sd_mmc_check+0x64>)
    1ec0:	4798      	blx	r3
    1ec2:	0003      	movs	r3, r0
    1ec4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    1ec6:	230f      	movs	r3, #15
    1ec8:	18fb      	adds	r3, r7, r3
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	2b01      	cmp	r3, #1
    1ece:	d005      	beq.n	1edc <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1ed0:	4b0f      	ldr	r3, [pc, #60]	; (1f10 <sd_mmc_check+0x68>)
    1ed2:	4798      	blx	r3
		return sd_mmc_err;
    1ed4:	230f      	movs	r3, #15
    1ed6:	18fb      	adds	r3, r7, r3
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	e012      	b.n	1f02 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1edc:	4b0d      	ldr	r3, [pc, #52]	; (1f14 <sd_mmc_check+0x6c>)
    1ede:	4798      	blx	r3
    1ee0:	1e03      	subs	r3, r0, #0
    1ee2:	d007      	beq.n	1ef4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    1ee4:	4b0c      	ldr	r3, [pc, #48]	; (1f18 <sd_mmc_check+0x70>)
    1ee6:	681b      	ldr	r3, [r3, #0]
    1ee8:	2200      	movs	r2, #0
    1eea:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1eec:	4b08      	ldr	r3, [pc, #32]	; (1f10 <sd_mmc_check+0x68>)
    1eee:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1ef0:	2301      	movs	r3, #1
    1ef2:	e006      	b.n	1f02 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1ef4:	4b08      	ldr	r3, [pc, #32]	; (1f18 <sd_mmc_check+0x70>)
    1ef6:	681b      	ldr	r3, [r3, #0]
    1ef8:	2203      	movs	r2, #3
    1efa:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1efc:	4b04      	ldr	r3, [pc, #16]	; (1f10 <sd_mmc_check+0x68>)
    1efe:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1f00:	2303      	movs	r3, #3
}
    1f02:	0018      	movs	r0, r3
    1f04:	46bd      	mov	sp, r7
    1f06:	b005      	add	sp, #20
    1f08:	bd90      	pop	{r4, r7, pc}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	00001a8d 	.word	0x00001a8d
    1f10:	00001b89 	.word	0x00001b89
    1f14:	00001bad 	.word	0x00001bad
    1f18:	200000f4 	.word	0x200000f4

00001f1c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1f1c:	b580      	push	{r7, lr}
    1f1e:	b082      	sub	sp, #8
    1f20:	af00      	add	r7, sp, #0
    1f22:	0002      	movs	r2, r0
    1f24:	1dfb      	adds	r3, r7, #7
    1f26:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1f28:	1dfb      	adds	r3, r7, #7
    1f2a:	781b      	ldrb	r3, [r3, #0]
    1f2c:	0018      	movs	r0, r3
    1f2e:	4b07      	ldr	r3, [pc, #28]	; (1f4c <sd_mmc_get_type+0x30>)
    1f30:	4798      	blx	r3
    1f32:	1e03      	subs	r3, r0, #0
    1f34:	d001      	beq.n	1f3a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    1f36:	2300      	movs	r3, #0
    1f38:	e004      	b.n	1f44 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    1f3a:	4b05      	ldr	r3, [pc, #20]	; (1f50 <sd_mmc_get_type+0x34>)
    1f3c:	4798      	blx	r3
	return sd_mmc_card->type;
    1f3e:	4b05      	ldr	r3, [pc, #20]	; (1f54 <sd_mmc_get_type+0x38>)
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	7adb      	ldrb	r3, [r3, #11]
}
    1f44:	0018      	movs	r0, r3
    1f46:	46bd      	mov	sp, r7
    1f48:	b002      	add	sp, #8
    1f4a:	bd80      	pop	{r7, pc}
    1f4c:	00001a8d 	.word	0x00001a8d
    1f50:	00001b89 	.word	0x00001b89
    1f54:	200000f4 	.word	0x200000f4

00001f58 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    1f58:	b580      	push	{r7, lr}
    1f5a:	b082      	sub	sp, #8
    1f5c:	af00      	add	r7, sp, #0
    1f5e:	0002      	movs	r2, r0
    1f60:	1dfb      	adds	r3, r7, #7
    1f62:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    1f64:	1dfb      	adds	r3, r7, #7
    1f66:	781b      	ldrb	r3, [r3, #0]
    1f68:	0018      	movs	r0, r3
    1f6a:	4b07      	ldr	r3, [pc, #28]	; (1f88 <sd_mmc_get_capacity+0x30>)
    1f6c:	4798      	blx	r3
    1f6e:	1e03      	subs	r3, r0, #0
    1f70:	d001      	beq.n	1f76 <sd_mmc_get_capacity+0x1e>
		return 0;
    1f72:	2300      	movs	r3, #0
    1f74:	e004      	b.n	1f80 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    1f76:	4b05      	ldr	r3, [pc, #20]	; (1f8c <sd_mmc_get_capacity+0x34>)
    1f78:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1f7a:	4b05      	ldr	r3, [pc, #20]	; (1f90 <sd_mmc_get_capacity+0x38>)
    1f7c:	681b      	ldr	r3, [r3, #0]
    1f7e:	685b      	ldr	r3, [r3, #4]
}
    1f80:	0018      	movs	r0, r3
    1f82:	46bd      	mov	sp, r7
    1f84:	b002      	add	sp, #8
    1f86:	bd80      	pop	{r7, pc}
    1f88:	00001a8d 	.word	0x00001a8d
    1f8c:	00001b89 	.word	0x00001b89
    1f90:	200000f4 	.word	0x200000f4

00001f94 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1f94:	b580      	push	{r7, lr}
    1f96:	b082      	sub	sp, #8
    1f98:	af00      	add	r7, sp, #0
    1f9a:	0002      	movs	r2, r0
    1f9c:	1dfb      	adds	r3, r7, #7
    1f9e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    1fa0:	2300      	movs	r3, #0
}
    1fa2:	0018      	movs	r0, r3
    1fa4:	46bd      	mov	sp, r7
    1fa6:	b002      	add	sp, #8
    1fa8:	bd80      	pop	{r7, pc}
	...

00001fac <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1fac:	b590      	push	{r4, r7, lr}
    1fae:	b089      	sub	sp, #36	; 0x24
    1fb0:	af02      	add	r7, sp, #8
    1fb2:	6039      	str	r1, [r7, #0]
    1fb4:	0011      	movs	r1, r2
    1fb6:	1dfb      	adds	r3, r7, #7
    1fb8:	1c02      	adds	r2, r0, #0
    1fba:	701a      	strb	r2, [r3, #0]
    1fbc:	1d3b      	adds	r3, r7, #4
    1fbe:	1c0a      	adds	r2, r1, #0
    1fc0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1fc2:	230f      	movs	r3, #15
    1fc4:	18fc      	adds	r4, r7, r3
    1fc6:	1dfb      	adds	r3, r7, #7
    1fc8:	781b      	ldrb	r3, [r3, #0]
    1fca:	0018      	movs	r0, r3
    1fcc:	4b29      	ldr	r3, [pc, #164]	; (2074 <STACK_SIZE+0x74>)
    1fce:	4798      	blx	r3
    1fd0:	0003      	movs	r3, r0
    1fd2:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1fd4:	230f      	movs	r3, #15
    1fd6:	18fb      	adds	r3, r7, r3
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d003      	beq.n	1fe6 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    1fde:	230f      	movs	r3, #15
    1fe0:	18fb      	adds	r3, r7, r3
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	e041      	b.n	206a <STACK_SIZE+0x6a>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1fe6:	4b24      	ldr	r3, [pc, #144]	; (2078 <STACK_SIZE+0x78>)
    1fe8:	4798      	blx	r3
    1fea:	0003      	movs	r3, r0
    1fec:	001a      	movs	r2, r3
    1fee:	2301      	movs	r3, #1
    1ff0:	4053      	eors	r3, r2
    1ff2:	b2db      	uxtb	r3, r3
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d003      	beq.n	2000 <STACK_SIZE>
		sd_mmc_deselect_slot();
    1ff8:	4b20      	ldr	r3, [pc, #128]	; (207c <STACK_SIZE+0x7c>)
    1ffa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1ffc:	2305      	movs	r3, #5
    1ffe:	e034      	b.n	206a <STACK_SIZE+0x6a>
	}

	if (nb_block > 1) {
    2000:	1d3b      	adds	r3, r7, #4
    2002:	881b      	ldrh	r3, [r3, #0]
    2004:	2b01      	cmp	r3, #1
    2006:	d902      	bls.n	200e <STACK_SIZE+0xe>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    2008:	4b1d      	ldr	r3, [pc, #116]	; (2080 <STACK_SIZE+0x80>)
    200a:	617b      	str	r3, [r7, #20]
    200c:	e001      	b.n	2012 <STACK_SIZE+0x12>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    200e:	4b1d      	ldr	r3, [pc, #116]	; (2084 <STACK_SIZE+0x84>)
    2010:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    2012:	4b1d      	ldr	r3, [pc, #116]	; (2088 <STACK_SIZE+0x88>)
    2014:	681b      	ldr	r3, [r3, #0]
    2016:	7adb      	ldrb	r3, [r3, #11]
    2018:	001a      	movs	r2, r3
    201a:	2308      	movs	r3, #8
    201c:	4013      	ands	r3, r2
    201e:	d002      	beq.n	2026 <STACK_SIZE+0x26>
		arg = start;
    2020:	683b      	ldr	r3, [r7, #0]
    2022:	613b      	str	r3, [r7, #16]
    2024:	e002      	b.n	202c <STACK_SIZE+0x2c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    2026:	683b      	ldr	r3, [r7, #0]
    2028:	025b      	lsls	r3, r3, #9
    202a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    202c:	1d3b      	adds	r3, r7, #4
    202e:	881c      	ldrh	r4, [r3, #0]
    2030:	2380      	movs	r3, #128	; 0x80
    2032:	009a      	lsls	r2, r3, #2
    2034:	6939      	ldr	r1, [r7, #16]
    2036:	6978      	ldr	r0, [r7, #20]
    2038:	2301      	movs	r3, #1
    203a:	9300      	str	r3, [sp, #0]
    203c:	0023      	movs	r3, r4
    203e:	4c13      	ldr	r4, [pc, #76]	; (208c <STACK_SIZE+0x8c>)
    2040:	47a0      	blx	r4
    2042:	0003      	movs	r3, r0
    2044:	001a      	movs	r2, r3
    2046:	2301      	movs	r3, #1
    2048:	4053      	eors	r3, r2
    204a:	b2db      	uxtb	r3, r3
    204c:	2b00      	cmp	r3, #0
    204e:	d003      	beq.n	2058 <STACK_SIZE+0x58>
		sd_mmc_deselect_slot();
    2050:	4b0a      	ldr	r3, [pc, #40]	; (207c <STACK_SIZE+0x7c>)
    2052:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    2054:	2305      	movs	r3, #5
    2056:	e008      	b.n	206a <STACK_SIZE+0x6a>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    2058:	4b0d      	ldr	r3, [pc, #52]	; (2090 <STACK_SIZE+0x90>)
    205a:	1d3a      	adds	r2, r7, #4
    205c:	8812      	ldrh	r2, [r2, #0]
    205e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    2060:	4b0c      	ldr	r3, [pc, #48]	; (2094 <STACK_SIZE+0x94>)
    2062:	1d3a      	adds	r2, r7, #4
    2064:	8812      	ldrh	r2, [r2, #0]
    2066:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2068:	2300      	movs	r3, #0
}
    206a:	0018      	movs	r0, r3
    206c:	46bd      	mov	sp, r7
    206e:	b007      	add	sp, #28
    2070:	bd90      	pop	{r4, r7, pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	00001a8d 	.word	0x00001a8d
    2078:	00001929 	.word	0x00001929
    207c:	00001b89 	.word	0x00001b89
    2080:	00101112 	.word	0x00101112
    2084:	00081111 	.word	0x00081111
    2088:	200000f4 	.word	0x200000f4
    208c:	00002e25 	.word	0x00002e25
    2090:	200000fa 	.word	0x200000fa
    2094:	200000f8 	.word	0x200000f8

00002098 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    2098:	b580      	push	{r7, lr}
    209a:	b082      	sub	sp, #8
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
    20a0:	000a      	movs	r2, r1
    20a2:	1cbb      	adds	r3, r7, #2
    20a4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    20a6:	1cbb      	adds	r3, r7, #2
    20a8:	881a      	ldrh	r2, [r3, #0]
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	0011      	movs	r1, r2
    20ae:	0018      	movs	r0, r3
    20b0:	4b0d      	ldr	r3, [pc, #52]	; (20e8 <sd_mmc_start_read_blocks+0x50>)
    20b2:	4798      	blx	r3
    20b4:	0003      	movs	r3, r0
    20b6:	001a      	movs	r2, r3
    20b8:	2301      	movs	r3, #1
    20ba:	4053      	eors	r3, r2
    20bc:	b2db      	uxtb	r3, r3
    20be:	2b00      	cmp	r3, #0
    20c0:	d004      	beq.n	20cc <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    20c2:	4b0a      	ldr	r3, [pc, #40]	; (20ec <sd_mmc_start_read_blocks+0x54>)
    20c4:	2200      	movs	r2, #0
    20c6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    20c8:	2305      	movs	r3, #5
    20ca:	e008      	b.n	20de <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    20cc:	4b07      	ldr	r3, [pc, #28]	; (20ec <sd_mmc_start_read_blocks+0x54>)
    20ce:	881a      	ldrh	r2, [r3, #0]
    20d0:	1cbb      	adds	r3, r7, #2
    20d2:	881b      	ldrh	r3, [r3, #0]
    20d4:	1ad3      	subs	r3, r2, r3
    20d6:	b29a      	uxth	r2, r3
    20d8:	4b04      	ldr	r3, [pc, #16]	; (20ec <sd_mmc_start_read_blocks+0x54>)
    20da:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    20dc:	2300      	movs	r3, #0
}
    20de:	0018      	movs	r0, r3
    20e0:	46bd      	mov	sp, r7
    20e2:	b002      	add	sp, #8
    20e4:	bd80      	pop	{r7, pc}
    20e6:	46c0      	nop			; (mov r8, r8)
    20e8:	000030f5 	.word	0x000030f5
    20ec:	200000fa 	.word	0x200000fa

000020f0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    20f0:	b580      	push	{r7, lr}
    20f2:	b082      	sub	sp, #8
    20f4:	af00      	add	r7, sp, #0
    20f6:	0002      	movs	r2, r0
    20f8:	1dfb      	adds	r3, r7, #7
    20fa:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    20fc:	4b1c      	ldr	r3, [pc, #112]	; (2170 <sd_mmc_wait_end_of_read_blocks+0x80>)
    20fe:	4798      	blx	r3
    2100:	0003      	movs	r3, r0
    2102:	001a      	movs	r2, r3
    2104:	2301      	movs	r3, #1
    2106:	4053      	eors	r3, r2
    2108:	b2db      	uxtb	r3, r3
    210a:	2b00      	cmp	r3, #0
    210c:	d001      	beq.n	2112 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    210e:	2305      	movs	r3, #5
    2110:	e029      	b.n	2166 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    2112:	1dfb      	adds	r3, r7, #7
    2114:	781b      	ldrb	r3, [r3, #0]
    2116:	2b00      	cmp	r3, #0
    2118:	d003      	beq.n	2122 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    211a:	4b16      	ldr	r3, [pc, #88]	; (2174 <sd_mmc_wait_end_of_read_blocks+0x84>)
    211c:	2200      	movs	r2, #0
    211e:	801a      	strh	r2, [r3, #0]
    2120:	e005      	b.n	212e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    2122:	4b14      	ldr	r3, [pc, #80]	; (2174 <sd_mmc_wait_end_of_read_blocks+0x84>)
    2124:	881b      	ldrh	r3, [r3, #0]
    2126:	2b00      	cmp	r3, #0
    2128:	d001      	beq.n	212e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    212a:	2300      	movs	r3, #0
    212c:	e01b      	b.n	2166 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    212e:	4b12      	ldr	r3, [pc, #72]	; (2178 <sd_mmc_wait_end_of_read_blocks+0x88>)
    2130:	881b      	ldrh	r3, [r3, #0]
    2132:	2b01      	cmp	r3, #1
    2134:	d103      	bne.n	213e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    2136:	4b11      	ldr	r3, [pc, #68]	; (217c <sd_mmc_wait_end_of_read_blocks+0x8c>)
    2138:	4798      	blx	r3
		return SD_MMC_OK;
    213a:	2300      	movs	r3, #0
    213c:	e013      	b.n	2166 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    213e:	4b10      	ldr	r3, [pc, #64]	; (2180 <sd_mmc_wait_end_of_read_blocks+0x90>)
    2140:	2100      	movs	r1, #0
    2142:	0018      	movs	r0, r3
    2144:	4b0f      	ldr	r3, [pc, #60]	; (2184 <sd_mmc_wait_end_of_read_blocks+0x94>)
    2146:	4798      	blx	r3
    2148:	0003      	movs	r3, r0
    214a:	001a      	movs	r2, r3
    214c:	2301      	movs	r3, #1
    214e:	4053      	eors	r3, r2
    2150:	b2db      	uxtb	r3, r3
    2152:	2b00      	cmp	r3, #0
    2154:	d004      	beq.n	2160 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    2156:	4b0a      	ldr	r3, [pc, #40]	; (2180 <sd_mmc_wait_end_of_read_blocks+0x90>)
    2158:	2100      	movs	r1, #0
    215a:	0018      	movs	r0, r3
    215c:	4b09      	ldr	r3, [pc, #36]	; (2184 <sd_mmc_wait_end_of_read_blocks+0x94>)
    215e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    2160:	4b06      	ldr	r3, [pc, #24]	; (217c <sd_mmc_wait_end_of_read_blocks+0x8c>)
    2162:	4798      	blx	r3
	return SD_MMC_OK;
    2164:	2300      	movs	r3, #0
}
    2166:	0018      	movs	r0, r3
    2168:	46bd      	mov	sp, r7
    216a:	b002      	add	sp, #8
    216c:	bd80      	pop	{r7, pc}
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	00003199 	.word	0x00003199
    2174:	200000fa 	.word	0x200000fa
    2178:	200000f8 	.word	0x200000f8
    217c:	00001b89 	.word	0x00001b89
    2180:	0000310c 	.word	0x0000310c
    2184:	00002dfd 	.word	0x00002dfd

00002188 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    2188:	b590      	push	{r4, r7, lr}
    218a:	b089      	sub	sp, #36	; 0x24
    218c:	af02      	add	r7, sp, #8
    218e:	6039      	str	r1, [r7, #0]
    2190:	0011      	movs	r1, r2
    2192:	1dfb      	adds	r3, r7, #7
    2194:	1c02      	adds	r2, r0, #0
    2196:	701a      	strb	r2, [r3, #0]
    2198:	1d3b      	adds	r3, r7, #4
    219a:	1c0a      	adds	r2, r1, #0
    219c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    219e:	230f      	movs	r3, #15
    21a0:	18fc      	adds	r4, r7, r3
    21a2:	1dfb      	adds	r3, r7, #7
    21a4:	781b      	ldrb	r3, [r3, #0]
    21a6:	0018      	movs	r0, r3
    21a8:	4b28      	ldr	r3, [pc, #160]	; (224c <sd_mmc_init_write_blocks+0xc4>)
    21aa:	4798      	blx	r3
    21ac:	0003      	movs	r3, r0
    21ae:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    21b0:	230f      	movs	r3, #15
    21b2:	18fb      	adds	r3, r7, r3
    21b4:	781b      	ldrb	r3, [r3, #0]
    21b6:	2b00      	cmp	r3, #0
    21b8:	d003      	beq.n	21c2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    21ba:	230f      	movs	r3, #15
    21bc:	18fb      	adds	r3, r7, r3
    21be:	781b      	ldrb	r3, [r3, #0]
    21c0:	e03f      	b.n	2242 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    21c2:	1dfb      	adds	r3, r7, #7
    21c4:	781b      	ldrb	r3, [r3, #0]
    21c6:	0018      	movs	r0, r3
    21c8:	4b21      	ldr	r3, [pc, #132]	; (2250 <sd_mmc_init_write_blocks+0xc8>)
    21ca:	4798      	blx	r3
    21cc:	1e03      	subs	r3, r0, #0
    21ce:	d003      	beq.n	21d8 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    21d0:	4b20      	ldr	r3, [pc, #128]	; (2254 <sd_mmc_init_write_blocks+0xcc>)
    21d2:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    21d4:	2307      	movs	r3, #7
    21d6:	e034      	b.n	2242 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    21d8:	1d3b      	adds	r3, r7, #4
    21da:	881b      	ldrh	r3, [r3, #0]
    21dc:	2b01      	cmp	r3, #1
    21de:	d902      	bls.n	21e6 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    21e0:	4b1d      	ldr	r3, [pc, #116]	; (2258 <sd_mmc_init_write_blocks+0xd0>)
    21e2:	617b      	str	r3, [r7, #20]
    21e4:	e001      	b.n	21ea <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    21e6:	4b1d      	ldr	r3, [pc, #116]	; (225c <sd_mmc_init_write_blocks+0xd4>)
    21e8:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    21ea:	4b1d      	ldr	r3, [pc, #116]	; (2260 <sd_mmc_init_write_blocks+0xd8>)
    21ec:	681b      	ldr	r3, [r3, #0]
    21ee:	7adb      	ldrb	r3, [r3, #11]
    21f0:	001a      	movs	r2, r3
    21f2:	2308      	movs	r3, #8
    21f4:	4013      	ands	r3, r2
    21f6:	d002      	beq.n	21fe <sd_mmc_init_write_blocks+0x76>
		arg = start;
    21f8:	683b      	ldr	r3, [r7, #0]
    21fa:	613b      	str	r3, [r7, #16]
    21fc:	e002      	b.n	2204 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    21fe:	683b      	ldr	r3, [r7, #0]
    2200:	025b      	lsls	r3, r3, #9
    2202:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    2204:	1d3b      	adds	r3, r7, #4
    2206:	881c      	ldrh	r4, [r3, #0]
    2208:	2380      	movs	r3, #128	; 0x80
    220a:	009a      	lsls	r2, r3, #2
    220c:	6939      	ldr	r1, [r7, #16]
    220e:	6978      	ldr	r0, [r7, #20]
    2210:	2301      	movs	r3, #1
    2212:	9300      	str	r3, [sp, #0]
    2214:	0023      	movs	r3, r4
    2216:	4c13      	ldr	r4, [pc, #76]	; (2264 <sd_mmc_init_write_blocks+0xdc>)
    2218:	47a0      	blx	r4
    221a:	0003      	movs	r3, r0
    221c:	001a      	movs	r2, r3
    221e:	2301      	movs	r3, #1
    2220:	4053      	eors	r3, r2
    2222:	b2db      	uxtb	r3, r3
    2224:	2b00      	cmp	r3, #0
    2226:	d003      	beq.n	2230 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    2228:	4b0a      	ldr	r3, [pc, #40]	; (2254 <sd_mmc_init_write_blocks+0xcc>)
    222a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    222c:	2305      	movs	r3, #5
    222e:	e008      	b.n	2242 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    2230:	4b0d      	ldr	r3, [pc, #52]	; (2268 <sd_mmc_init_write_blocks+0xe0>)
    2232:	1d3a      	adds	r2, r7, #4
    2234:	8812      	ldrh	r2, [r2, #0]
    2236:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    2238:	4b0c      	ldr	r3, [pc, #48]	; (226c <sd_mmc_init_write_blocks+0xe4>)
    223a:	1d3a      	adds	r2, r7, #4
    223c:	8812      	ldrh	r2, [r2, #0]
    223e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    2240:	2300      	movs	r3, #0
}
    2242:	0018      	movs	r0, r3
    2244:	46bd      	mov	sp, r7
    2246:	b007      	add	sp, #28
    2248:	bd90      	pop	{r4, r7, pc}
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	00001a8d 	.word	0x00001a8d
    2250:	00001f95 	.word	0x00001f95
    2254:	00001b89 	.word	0x00001b89
    2258:	00109119 	.word	0x00109119
    225c:	00089118 	.word	0x00089118
    2260:	200000f4 	.word	0x200000f4
    2264:	00002e25 	.word	0x00002e25
    2268:	200000fa 	.word	0x200000fa
    226c:	200000f8 	.word	0x200000f8

00002270 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    2270:	b580      	push	{r7, lr}
    2272:	b082      	sub	sp, #8
    2274:	af00      	add	r7, sp, #0
    2276:	6078      	str	r0, [r7, #4]
    2278:	000a      	movs	r2, r1
    227a:	1cbb      	adds	r3, r7, #2
    227c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    227e:	1cbb      	adds	r3, r7, #2
    2280:	881a      	ldrh	r2, [r3, #0]
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	0011      	movs	r1, r2
    2286:	0018      	movs	r0, r3
    2288:	4b0d      	ldr	r3, [pc, #52]	; (22c0 <sd_mmc_start_write_blocks+0x50>)
    228a:	4798      	blx	r3
    228c:	0003      	movs	r3, r0
    228e:	001a      	movs	r2, r3
    2290:	2301      	movs	r3, #1
    2292:	4053      	eors	r3, r2
    2294:	b2db      	uxtb	r3, r3
    2296:	2b00      	cmp	r3, #0
    2298:	d004      	beq.n	22a4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    229a:	4b0a      	ldr	r3, [pc, #40]	; (22c4 <sd_mmc_start_write_blocks+0x54>)
    229c:	2200      	movs	r2, #0
    229e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    22a0:	2305      	movs	r3, #5
    22a2:	e008      	b.n	22b6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    22a4:	4b07      	ldr	r3, [pc, #28]	; (22c4 <sd_mmc_start_write_blocks+0x54>)
    22a6:	881a      	ldrh	r2, [r3, #0]
    22a8:	1cbb      	adds	r3, r7, #2
    22aa:	881b      	ldrh	r3, [r3, #0]
    22ac:	1ad3      	subs	r3, r2, r3
    22ae:	b29a      	uxth	r2, r3
    22b0:	4b04      	ldr	r3, [pc, #16]	; (22c4 <sd_mmc_start_write_blocks+0x54>)
    22b2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    22b4:	2300      	movs	r3, #0
}
    22b6:	0018      	movs	r0, r3
    22b8:	46bd      	mov	sp, r7
    22ba:	b002      	add	sp, #8
    22bc:	bd80      	pop	{r7, pc}
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	000031a5 	.word	0x000031a5
    22c4:	200000fa 	.word	0x200000fa

000022c8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    22c8:	b580      	push	{r7, lr}
    22ca:	b082      	sub	sp, #8
    22cc:	af00      	add	r7, sp, #0
    22ce:	0002      	movs	r2, r0
    22d0:	1dfb      	adds	r3, r7, #7
    22d2:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    22d4:	4b13      	ldr	r3, [pc, #76]	; (2324 <sd_mmc_wait_end_of_write_blocks+0x5c>)
    22d6:	4798      	blx	r3
    22d8:	0003      	movs	r3, r0
    22da:	001a      	movs	r2, r3
    22dc:	2301      	movs	r3, #1
    22de:	4053      	eors	r3, r2
    22e0:	b2db      	uxtb	r3, r3
    22e2:	2b00      	cmp	r3, #0
    22e4:	d001      	beq.n	22ea <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    22e6:	2305      	movs	r3, #5
    22e8:	e018      	b.n	231c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    22ea:	1dfb      	adds	r3, r7, #7
    22ec:	781b      	ldrb	r3, [r3, #0]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d003      	beq.n	22fa <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    22f2:	4b0d      	ldr	r3, [pc, #52]	; (2328 <sd_mmc_wait_end_of_write_blocks+0x60>)
    22f4:	2200      	movs	r2, #0
    22f6:	801a      	strh	r2, [r3, #0]
    22f8:	e005      	b.n	2306 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    22fa:	4b0b      	ldr	r3, [pc, #44]	; (2328 <sd_mmc_wait_end_of_write_blocks+0x60>)
    22fc:	881b      	ldrh	r3, [r3, #0]
    22fe:	2b00      	cmp	r3, #0
    2300:	d001      	beq.n	2306 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    2302:	2300      	movs	r3, #0
    2304:	e00a      	b.n	231c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    2306:	4b09      	ldr	r3, [pc, #36]	; (232c <sd_mmc_wait_end_of_write_blocks+0x64>)
    2308:	881b      	ldrh	r3, [r3, #0]
    230a:	2b01      	cmp	r3, #1
    230c:	d103      	bne.n	2316 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    230e:	4b08      	ldr	r3, [pc, #32]	; (2330 <sd_mmc_wait_end_of_write_blocks+0x68>)
    2310:	4798      	blx	r3
		return SD_MMC_OK;
    2312:	2300      	movs	r3, #0
    2314:	e002      	b.n	231c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    2316:	4b06      	ldr	r3, [pc, #24]	; (2330 <sd_mmc_wait_end_of_write_blocks+0x68>)
    2318:	4798      	blx	r3
	return SD_MMC_OK;
    231a:	2300      	movs	r3, #0
}
    231c:	0018      	movs	r0, r3
    231e:	46bd      	mov	sp, r7
    2320:	b002      	add	sp, #8
    2322:	bd80      	pop	{r7, pc}
    2324:	00003265 	.word	0x00003265
    2328:	200000fa 	.word	0x200000fa
    232c:	200000f8 	.word	0x200000f8
    2330:	00001b89 	.word	0x00001b89

00002334 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    2334:	b580      	push	{r7, lr}
    2336:	b082      	sub	sp, #8
    2338:	af00      	add	r7, sp, #0
    233a:	0002      	movs	r2, r0
    233c:	1dfb      	adds	r3, r7, #7
    233e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    2340:	1dfb      	adds	r3, r7, #7
    2342:	781b      	ldrb	r3, [r3, #0]
    2344:	0018      	movs	r0, r3
    2346:	4b16      	ldr	r3, [pc, #88]	; (23a0 <sd_mmc_test_unit_ready+0x6c>)
    2348:	4798      	blx	r3
    234a:	0003      	movs	r3, r0
    234c:	2b01      	cmp	r3, #1
    234e:	d019      	beq.n	2384 <sd_mmc_test_unit_ready+0x50>
    2350:	2b02      	cmp	r3, #2
    2352:	d019      	beq.n	2388 <sd_mmc_test_unit_ready+0x54>
    2354:	2b00      	cmp	r3, #0
    2356:	d11e      	bne.n	2396 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    2358:	1dfb      	adds	r3, r7, #7
    235a:	781b      	ldrb	r3, [r3, #0]
    235c:	4a11      	ldr	r2, [pc, #68]	; (23a4 <sd_mmc_test_unit_ready+0x70>)
    235e:	5cd3      	ldrb	r3, [r2, r3]
    2360:	2b00      	cmp	r3, #0
    2362:	d001      	beq.n	2368 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    2364:	2302      	movs	r3, #2
    2366:	e017      	b.n	2398 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    2368:	1dfb      	adds	r3, r7, #7
    236a:	781b      	ldrb	r3, [r3, #0]
    236c:	0018      	movs	r0, r3
    236e:	4b0e      	ldr	r3, [pc, #56]	; (23a8 <sd_mmc_test_unit_ready+0x74>)
    2370:	4798      	blx	r3
    2372:	0003      	movs	r3, r0
    2374:	001a      	movs	r2, r3
    2376:	2303      	movs	r3, #3
    2378:	4013      	ands	r3, r2
    237a:	d001      	beq.n	2380 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    237c:	2300      	movs	r3, #0
    237e:	e00b      	b.n	2398 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    2380:	2302      	movs	r3, #2
    2382:	e009      	b.n	2398 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    2384:	2303      	movs	r3, #3
    2386:	e007      	b.n	2398 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    2388:	1dfb      	adds	r3, r7, #7
    238a:	781b      	ldrb	r3, [r3, #0]
    238c:	4a05      	ldr	r2, [pc, #20]	; (23a4 <sd_mmc_test_unit_ready+0x70>)
    238e:	2100      	movs	r1, #0
    2390:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    2392:	2302      	movs	r3, #2
    2394:	e000      	b.n	2398 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    2396:	2301      	movs	r3, #1
	}
}
    2398:	0018      	movs	r0, r3
    239a:	46bd      	mov	sp, r7
    239c:	b002      	add	sp, #8
    239e:	bd80      	pop	{r7, pc}
    23a0:	00001ea9 	.word	0x00001ea9
    23a4:	200000fc 	.word	0x200000fc
    23a8:	00001f1d 	.word	0x00001f1d

000023ac <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    23ac:	b580      	push	{r7, lr}
    23ae:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    23b0:	2000      	movs	r0, #0
    23b2:	4b03      	ldr	r3, [pc, #12]	; (23c0 <sd_mmc_test_unit_ready_0+0x14>)
    23b4:	4798      	blx	r3
    23b6:	0003      	movs	r3, r0
}
    23b8:	0018      	movs	r0, r3
    23ba:	46bd      	mov	sp, r7
    23bc:	bd80      	pop	{r7, pc}
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	00002335 	.word	0x00002335

000023c4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	af00      	add	r7, sp, #0
    23ca:	0002      	movs	r2, r0
    23cc:	6039      	str	r1, [r7, #0]
    23ce:	1dfb      	adds	r3, r7, #7
    23d0:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    23d2:	1dfb      	adds	r3, r7, #7
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	0018      	movs	r0, r3
    23d8:	4b08      	ldr	r3, [pc, #32]	; (23fc <sd_mmc_read_capacity+0x38>)
    23da:	4798      	blx	r3
    23dc:	0003      	movs	r3, r0
    23de:	005b      	lsls	r3, r3, #1
    23e0:	1e5a      	subs	r2, r3, #1
    23e2:	683b      	ldr	r3, [r7, #0]
    23e4:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    23e6:	1dfb      	adds	r3, r7, #7
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	0018      	movs	r0, r3
    23ec:	4b04      	ldr	r3, [pc, #16]	; (2400 <sd_mmc_read_capacity+0x3c>)
    23ee:	4798      	blx	r3
    23f0:	0003      	movs	r3, r0
}
    23f2:	0018      	movs	r0, r3
    23f4:	46bd      	mov	sp, r7
    23f6:	b002      	add	sp, #8
    23f8:	bd80      	pop	{r7, pc}
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	00001f59 	.word	0x00001f59
    2400:	00002335 	.word	0x00002335

00002404 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    2404:	b580      	push	{r7, lr}
    2406:	b082      	sub	sp, #8
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	0019      	movs	r1, r3
    2410:	2000      	movs	r0, #0
    2412:	4b03      	ldr	r3, [pc, #12]	; (2420 <sd_mmc_read_capacity_0+0x1c>)
    2414:	4798      	blx	r3
    2416:	0003      	movs	r3, r0
}
    2418:	0018      	movs	r0, r3
    241a:	46bd      	mov	sp, r7
    241c:	b002      	add	sp, #8
    241e:	bd80      	pop	{r7, pc}
    2420:	000023c5 	.word	0x000023c5

00002424 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    2424:	b580      	push	{r7, lr}
    2426:	b082      	sub	sp, #8
    2428:	af00      	add	r7, sp, #0
    242a:	0002      	movs	r2, r0
    242c:	1dfb      	adds	r3, r7, #7
    242e:	701a      	strb	r2, [r3, #0]
    2430:	1dbb      	adds	r3, r7, #6
    2432:	1c0a      	adds	r2, r1, #0
    2434:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    2436:	1dfb      	adds	r3, r7, #7
    2438:	781b      	ldrb	r3, [r3, #0]
    243a:	4a04      	ldr	r2, [pc, #16]	; (244c <sd_mmc_unload+0x28>)
    243c:	1db9      	adds	r1, r7, #6
    243e:	7809      	ldrb	r1, [r1, #0]
    2440:	54d1      	strb	r1, [r2, r3]
	return true;
    2442:	2301      	movs	r3, #1
}
    2444:	0018      	movs	r0, r3
    2446:	46bd      	mov	sp, r7
    2448:	b002      	add	sp, #8
    244a:	bd80      	pop	{r7, pc}
    244c:	200000fc 	.word	0x200000fc

00002450 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    2450:	b580      	push	{r7, lr}
    2452:	b082      	sub	sp, #8
    2454:	af00      	add	r7, sp, #0
    2456:	0002      	movs	r2, r0
    2458:	1dfb      	adds	r3, r7, #7
    245a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    245c:	1dfb      	adds	r3, r7, #7
    245e:	781b      	ldrb	r3, [r3, #0]
    2460:	0019      	movs	r1, r3
    2462:	2000      	movs	r0, #0
    2464:	4b03      	ldr	r3, [pc, #12]	; (2474 <sd_mmc_unload_0+0x24>)
    2466:	4798      	blx	r3
    2468:	0003      	movs	r3, r0
}
    246a:	0018      	movs	r0, r3
    246c:	46bd      	mov	sp, r7
    246e:	b002      	add	sp, #8
    2470:	bd80      	pop	{r7, pc}
    2472:	46c0      	nop			; (mov r8, r8)
    2474:	00002425 	.word	0x00002425

00002478 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    2478:	b580      	push	{r7, lr}
    247a:	b082      	sub	sp, #8
    247c:	af00      	add	r7, sp, #0
    247e:	0002      	movs	r2, r0
    2480:	1dfb      	adds	r3, r7, #7
    2482:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    2484:	1dfb      	adds	r3, r7, #7
    2486:	781b      	ldrb	r3, [r3, #0]
    2488:	0018      	movs	r0, r3
    248a:	4b03      	ldr	r3, [pc, #12]	; (2498 <sd_mmc_wr_protect+0x20>)
    248c:	4798      	blx	r3
    248e:	0003      	movs	r3, r0
}
    2490:	0018      	movs	r0, r3
    2492:	46bd      	mov	sp, r7
    2494:	b002      	add	sp, #8
    2496:	bd80      	pop	{r7, pc}
    2498:	00001f95 	.word	0x00001f95

0000249c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    249c:	b580      	push	{r7, lr}
    249e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    24a0:	2000      	movs	r0, #0
    24a2:	4b03      	ldr	r3, [pc, #12]	; (24b0 <sd_mmc_wr_protect_0+0x14>)
    24a4:	4798      	blx	r3
    24a6:	0003      	movs	r3, r0
}
    24a8:	0018      	movs	r0, r3
    24aa:	46bd      	mov	sp, r7
    24ac:	bd80      	pop	{r7, pc}
    24ae:	46c0      	nop			; (mov r8, r8)
    24b0:	00002479 	.word	0x00002479

000024b4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    24b4:	b580      	push	{r7, lr}
    24b6:	b082      	sub	sp, #8
    24b8:	af00      	add	r7, sp, #0
    24ba:	0002      	movs	r2, r0
    24bc:	1dfb      	adds	r3, r7, #7
    24be:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    24c0:	2301      	movs	r3, #1
}
    24c2:	0018      	movs	r0, r3
    24c4:	46bd      	mov	sp, r7
    24c6:	b002      	add	sp, #8
    24c8:	bd80      	pop	{r7, pc}
	...

000024cc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    24d0:	2000      	movs	r0, #0
    24d2:	4b03      	ldr	r3, [pc, #12]	; (24e0 <sd_mmc_removal_0+0x14>)
    24d4:	4798      	blx	r3
    24d6:	0003      	movs	r3, r0
}
    24d8:	0018      	movs	r0, r3
    24da:	46bd      	mov	sp, r7
    24dc:	bd80      	pop	{r7, pc}
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	000024b5 	.word	0x000024b5

000024e4 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    24e4:	b580      	push	{r7, lr}
    24e6:	b084      	sub	sp, #16
    24e8:	af00      	add	r7, sp, #0
    24ea:	60b9      	str	r1, [r7, #8]
    24ec:	607a      	str	r2, [r7, #4]
    24ee:	230f      	movs	r3, #15
    24f0:	18fb      	adds	r3, r7, r3
    24f2:	1c02      	adds	r2, r0, #0
    24f4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    24f6:	68b9      	ldr	r1, [r7, #8]
    24f8:	230f      	movs	r3, #15
    24fa:	18fb      	adds	r3, r7, r3
    24fc:	781b      	ldrb	r3, [r3, #0]
    24fe:	2201      	movs	r2, #1
    2500:	0018      	movs	r0, r3
    2502:	4b10      	ldr	r3, [pc, #64]	; (2544 <sd_mmc_mem_2_ram+0x60>)
    2504:	4798      	blx	r3
    2506:	1e03      	subs	r3, r0, #0
    2508:	d005      	beq.n	2516 <sd_mmc_mem_2_ram+0x32>
    250a:	2b02      	cmp	r3, #2
    250c:	d101      	bne.n	2512 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    250e:	2302      	movs	r3, #2
    2510:	e013      	b.n	253a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    2512:	2301      	movs	r3, #1
    2514:	e011      	b.n	253a <sd_mmc_mem_2_ram+0x56>
		break;
    2516:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    2518:	687b      	ldr	r3, [r7, #4]
    251a:	2101      	movs	r1, #1
    251c:	0018      	movs	r0, r3
    251e:	4b0a      	ldr	r3, [pc, #40]	; (2548 <sd_mmc_mem_2_ram+0x64>)
    2520:	4798      	blx	r3
    2522:	1e03      	subs	r3, r0, #0
    2524:	d001      	beq.n	252a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    2526:	2301      	movs	r3, #1
    2528:	e007      	b.n	253a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    252a:	2000      	movs	r0, #0
    252c:	4b07      	ldr	r3, [pc, #28]	; (254c <sd_mmc_mem_2_ram+0x68>)
    252e:	4798      	blx	r3
    2530:	1e03      	subs	r3, r0, #0
    2532:	d001      	beq.n	2538 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    2534:	2301      	movs	r3, #1
    2536:	e000      	b.n	253a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    2538:	2300      	movs	r3, #0
}
    253a:	0018      	movs	r0, r3
    253c:	46bd      	mov	sp, r7
    253e:	b004      	add	sp, #16
    2540:	bd80      	pop	{r7, pc}
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	00001fad 	.word	0x00001fad
    2548:	00002099 	.word	0x00002099
    254c:	000020f1 	.word	0x000020f1

00002550 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    2550:	b580      	push	{r7, lr}
    2552:	b082      	sub	sp, #8
    2554:	af00      	add	r7, sp, #0
    2556:	6078      	str	r0, [r7, #4]
    2558:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    255a:	683a      	ldr	r2, [r7, #0]
    255c:	687b      	ldr	r3, [r7, #4]
    255e:	0019      	movs	r1, r3
    2560:	2000      	movs	r0, #0
    2562:	4b03      	ldr	r3, [pc, #12]	; (2570 <sd_mmc_mem_2_ram_0+0x20>)
    2564:	4798      	blx	r3
    2566:	0003      	movs	r3, r0
}
    2568:	0018      	movs	r0, r3
    256a:	46bd      	mov	sp, r7
    256c:	b002      	add	sp, #8
    256e:	bd80      	pop	{r7, pc}
    2570:	000024e5 	.word	0x000024e5

00002574 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    2574:	b580      	push	{r7, lr}
    2576:	b084      	sub	sp, #16
    2578:	af00      	add	r7, sp, #0
    257a:	60b9      	str	r1, [r7, #8]
    257c:	607a      	str	r2, [r7, #4]
    257e:	230f      	movs	r3, #15
    2580:	18fb      	adds	r3, r7, r3
    2582:	1c02      	adds	r2, r0, #0
    2584:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    2586:	68b9      	ldr	r1, [r7, #8]
    2588:	230f      	movs	r3, #15
    258a:	18fb      	adds	r3, r7, r3
    258c:	781b      	ldrb	r3, [r3, #0]
    258e:	2201      	movs	r2, #1
    2590:	0018      	movs	r0, r3
    2592:	4b10      	ldr	r3, [pc, #64]	; (25d4 <sd_mmc_ram_2_mem+0x60>)
    2594:	4798      	blx	r3
    2596:	1e03      	subs	r3, r0, #0
    2598:	d005      	beq.n	25a6 <sd_mmc_ram_2_mem+0x32>
    259a:	2b02      	cmp	r3, #2
    259c:	d101      	bne.n	25a2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    259e:	2302      	movs	r3, #2
    25a0:	e013      	b.n	25ca <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
    25a2:	2301      	movs	r3, #1
    25a4:	e011      	b.n	25ca <sd_mmc_ram_2_mem+0x56>
		break;
    25a6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    25a8:	687b      	ldr	r3, [r7, #4]
    25aa:	2101      	movs	r1, #1
    25ac:	0018      	movs	r0, r3
    25ae:	4b0a      	ldr	r3, [pc, #40]	; (25d8 <sd_mmc_ram_2_mem+0x64>)
    25b0:	4798      	blx	r3
    25b2:	1e03      	subs	r3, r0, #0
    25b4:	d001      	beq.n	25ba <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
    25b6:	2301      	movs	r3, #1
    25b8:	e007      	b.n	25ca <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    25ba:	2000      	movs	r0, #0
    25bc:	4b07      	ldr	r3, [pc, #28]	; (25dc <sd_mmc_ram_2_mem+0x68>)
    25be:	4798      	blx	r3
    25c0:	1e03      	subs	r3, r0, #0
    25c2:	d001      	beq.n	25c8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
    25c4:	2301      	movs	r3, #1
    25c6:	e000      	b.n	25ca <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
    25c8:	2300      	movs	r3, #0
}
    25ca:	0018      	movs	r0, r3
    25cc:	46bd      	mov	sp, r7
    25ce:	b004      	add	sp, #16
    25d0:	bd80      	pop	{r7, pc}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	00002189 	.word	0x00002189
    25d8:	00002271 	.word	0x00002271
    25dc:	000022c9 	.word	0x000022c9

000025e0 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    25e0:	b580      	push	{r7, lr}
    25e2:	b082      	sub	sp, #8
    25e4:	af00      	add	r7, sp, #0
    25e6:	6078      	str	r0, [r7, #4]
    25e8:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    25ea:	683a      	ldr	r2, [r7, #0]
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	0019      	movs	r1, r3
    25f0:	2000      	movs	r0, #0
    25f2:	4b03      	ldr	r3, [pc, #12]	; (2600 <sd_mmc_ram_2_mem_0+0x20>)
    25f4:	4798      	blx	r3
    25f6:	0003      	movs	r3, r0
}
    25f8:	0018      	movs	r0, r3
    25fa:	46bd      	mov	sp, r7
    25fc:	b002      	add	sp, #8
    25fe:	bd80      	pop	{r7, pc}
    2600:	00002575 	.word	0x00002575

00002604 <system_pinmux_get_group_from_gpio_pin>:
{
    2604:	b580      	push	{r7, lr}
    2606:	b084      	sub	sp, #16
    2608:	af00      	add	r7, sp, #0
    260a:	0002      	movs	r2, r0
    260c:	1dfb      	adds	r3, r7, #7
    260e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2610:	230f      	movs	r3, #15
    2612:	18fb      	adds	r3, r7, r3
    2614:	1dfa      	adds	r2, r7, #7
    2616:	7812      	ldrb	r2, [r2, #0]
    2618:	09d2      	lsrs	r2, r2, #7
    261a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    261c:	230e      	movs	r3, #14
    261e:	18fb      	adds	r3, r7, r3
    2620:	1dfa      	adds	r2, r7, #7
    2622:	7812      	ldrb	r2, [r2, #0]
    2624:	0952      	lsrs	r2, r2, #5
    2626:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2628:	4b0d      	ldr	r3, [pc, #52]	; (2660 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    262a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    262c:	230f      	movs	r3, #15
    262e:	18fb      	adds	r3, r7, r3
    2630:	781b      	ldrb	r3, [r3, #0]
    2632:	2b00      	cmp	r3, #0
    2634:	d10f      	bne.n	2656 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2636:	230f      	movs	r3, #15
    2638:	18fb      	adds	r3, r7, r3
    263a:	781b      	ldrb	r3, [r3, #0]
    263c:	009b      	lsls	r3, r3, #2
    263e:	2210      	movs	r2, #16
    2640:	4694      	mov	ip, r2
    2642:	44bc      	add	ip, r7
    2644:	4463      	add	r3, ip
    2646:	3b08      	subs	r3, #8
    2648:	681a      	ldr	r2, [r3, #0]
    264a:	230e      	movs	r3, #14
    264c:	18fb      	adds	r3, r7, r3
    264e:	781b      	ldrb	r3, [r3, #0]
    2650:	01db      	lsls	r3, r3, #7
    2652:	18d3      	adds	r3, r2, r3
    2654:	e000      	b.n	2658 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2656:	2300      	movs	r3, #0
}
    2658:	0018      	movs	r0, r3
    265a:	46bd      	mov	sp, r7
    265c:	b004      	add	sp, #16
    265e:	bd80      	pop	{r7, pc}
    2660:	41004400 	.word	0x41004400

00002664 <port_get_group_from_gpio_pin>:
{
    2664:	b580      	push	{r7, lr}
    2666:	b082      	sub	sp, #8
    2668:	af00      	add	r7, sp, #0
    266a:	0002      	movs	r2, r0
    266c:	1dfb      	adds	r3, r7, #7
    266e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2670:	1dfb      	adds	r3, r7, #7
    2672:	781b      	ldrb	r3, [r3, #0]
    2674:	0018      	movs	r0, r3
    2676:	4b03      	ldr	r3, [pc, #12]	; (2684 <port_get_group_from_gpio_pin+0x20>)
    2678:	4798      	blx	r3
    267a:	0003      	movs	r3, r0
}
    267c:	0018      	movs	r0, r3
    267e:	46bd      	mov	sp, r7
    2680:	b002      	add	sp, #8
    2682:	bd80      	pop	{r7, pc}
    2684:	00002605 	.word	0x00002605

00002688 <port_get_config_defaults>:
{
    2688:	b580      	push	{r7, lr}
    268a:	b082      	sub	sp, #8
    268c:	af00      	add	r7, sp, #0
    268e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	2200      	movs	r2, #0
    2694:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2696:	687b      	ldr	r3, [r7, #4]
    2698:	2201      	movs	r2, #1
    269a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    269c:	687b      	ldr	r3, [r7, #4]
    269e:	2200      	movs	r2, #0
    26a0:	709a      	strb	r2, [r3, #2]
}
    26a2:	46c0      	nop			; (mov r8, r8)
    26a4:	46bd      	mov	sp, r7
    26a6:	b002      	add	sp, #8
    26a8:	bd80      	pop	{r7, pc}
	...

000026ac <port_pin_set_output_level>:
{
    26ac:	b580      	push	{r7, lr}
    26ae:	b084      	sub	sp, #16
    26b0:	af00      	add	r7, sp, #0
    26b2:	0002      	movs	r2, r0
    26b4:	1dfb      	adds	r3, r7, #7
    26b6:	701a      	strb	r2, [r3, #0]
    26b8:	1dbb      	adds	r3, r7, #6
    26ba:	1c0a      	adds	r2, r1, #0
    26bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    26be:	1dfb      	adds	r3, r7, #7
    26c0:	781b      	ldrb	r3, [r3, #0]
    26c2:	0018      	movs	r0, r3
    26c4:	4b0d      	ldr	r3, [pc, #52]	; (26fc <port_pin_set_output_level+0x50>)
    26c6:	4798      	blx	r3
    26c8:	0003      	movs	r3, r0
    26ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    26cc:	1dfb      	adds	r3, r7, #7
    26ce:	781b      	ldrb	r3, [r3, #0]
    26d0:	221f      	movs	r2, #31
    26d2:	4013      	ands	r3, r2
    26d4:	2201      	movs	r2, #1
    26d6:	409a      	lsls	r2, r3
    26d8:	0013      	movs	r3, r2
    26da:	60bb      	str	r3, [r7, #8]
	if (level) {
    26dc:	1dbb      	adds	r3, r7, #6
    26de:	781b      	ldrb	r3, [r3, #0]
    26e0:	2b00      	cmp	r3, #0
    26e2:	d003      	beq.n	26ec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    26e4:	68fb      	ldr	r3, [r7, #12]
    26e6:	68ba      	ldr	r2, [r7, #8]
    26e8:	619a      	str	r2, [r3, #24]
}
    26ea:	e002      	b.n	26f2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	68ba      	ldr	r2, [r7, #8]
    26f0:	615a      	str	r2, [r3, #20]
}
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	46bd      	mov	sp, r7
    26f6:	b004      	add	sp, #16
    26f8:	bd80      	pop	{r7, pc}
    26fa:	46c0      	nop			; (mov r8, r8)
    26fc:	00002665 	.word	0x00002665

00002700 <system_interrupt_enable>:
{
    2700:	b580      	push	{r7, lr}
    2702:	b082      	sub	sp, #8
    2704:	af00      	add	r7, sp, #0
    2706:	0002      	movs	r2, r0
    2708:	1dfb      	adds	r3, r7, #7
    270a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    270c:	4b06      	ldr	r3, [pc, #24]	; (2728 <system_interrupt_enable+0x28>)
    270e:	1dfa      	adds	r2, r7, #7
    2710:	7812      	ldrb	r2, [r2, #0]
    2712:	0011      	movs	r1, r2
    2714:	221f      	movs	r2, #31
    2716:	400a      	ands	r2, r1
    2718:	2101      	movs	r1, #1
    271a:	4091      	lsls	r1, r2
    271c:	000a      	movs	r2, r1
    271e:	601a      	str	r2, [r3, #0]
}
    2720:	46c0      	nop			; (mov r8, r8)
    2722:	46bd      	mov	sp, r7
    2724:	b002      	add	sp, #8
    2726:	bd80      	pop	{r7, pc}
    2728:	e000e100 	.word	0xe000e100

0000272c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    272c:	b580      	push	{r7, lr}
    272e:	b084      	sub	sp, #16
    2730:	af00      	add	r7, sp, #0
    2732:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2734:	687b      	ldr	r3, [r7, #4]
    2736:	681b      	ldr	r3, [r3, #0]
    2738:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    273a:	68fb      	ldr	r3, [r7, #12]
    273c:	69db      	ldr	r3, [r3, #28]
    273e:	1e5a      	subs	r2, r3, #1
    2740:	4193      	sbcs	r3, r2
    2742:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2744:	0018      	movs	r0, r3
    2746:	46bd      	mov	sp, r7
    2748:	b004      	add	sp, #16
    274a:	bd80      	pop	{r7, pc}

0000274c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    274c:	b580      	push	{r7, lr}
    274e:	b082      	sub	sp, #8
    2750:	af00      	add	r7, sp, #0
    2752:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2754:	687b      	ldr	r3, [r7, #4]
    2756:	2201      	movs	r2, #1
    2758:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	2200      	movs	r2, #0
    275e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2760:	687b      	ldr	r3, [r7, #4]
    2762:	2200      	movs	r2, #0
    2764:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	22c0      	movs	r2, #192	; 0xc0
    276a:	0392      	lsls	r2, r2, #14
    276c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    276e:	687b      	ldr	r3, [r7, #4]
    2770:	2200      	movs	r2, #0
    2772:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	2200      	movs	r2, #0
    2778:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	2201      	movs	r2, #1
    277e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	2201      	movs	r2, #1
    2784:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    2786:	687b      	ldr	r3, [r7, #4]
    2788:	2200      	movs	r2, #0
    278a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	2224      	movs	r2, #36	; 0x24
    2790:	2100      	movs	r1, #0
    2792:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2794:	687b      	ldr	r3, [r7, #4]
    2796:	3318      	adds	r3, #24
    2798:	220c      	movs	r2, #12
    279a:	2100      	movs	r1, #0
    279c:	0018      	movs	r0, r3
    279e:	4b0a      	ldr	r3, [pc, #40]	; (27c8 <spi_get_config_defaults+0x7c>)
    27a0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    27a2:	687b      	ldr	r3, [r7, #4]
    27a4:	4a09      	ldr	r2, [pc, #36]	; (27cc <spi_get_config_defaults+0x80>)
    27a6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    27a8:	687b      	ldr	r3, [r7, #4]
    27aa:	2200      	movs	r2, #0
    27ac:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	2200      	movs	r2, #0
    27b2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    27b4:	687b      	ldr	r3, [r7, #4]
    27b6:	2200      	movs	r2, #0
    27b8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    27ba:	687b      	ldr	r3, [r7, #4]
    27bc:	2200      	movs	r2, #0
    27be:	635a      	str	r2, [r3, #52]	; 0x34

};
    27c0:	46c0      	nop			; (mov r8, r8)
    27c2:	46bd      	mov	sp, r7
    27c4:	b002      	add	sp, #8
    27c6:	bd80      	pop	{r7, pc}
    27c8:	0000bb37 	.word	0x0000bb37
    27cc:	000186a0 	.word	0x000186a0

000027d0 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    27d0:	b580      	push	{r7, lr}
    27d2:	b082      	sub	sp, #8
    27d4:	af00      	add	r7, sp, #0
    27d6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	220a      	movs	r2, #10
    27dc:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    27de:	687b      	ldr	r3, [r7, #4]
    27e0:	2200      	movs	r2, #0
    27e2:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	2200      	movs	r2, #0
    27e8:	709a      	strb	r2, [r3, #2]
}
    27ea:	46c0      	nop			; (mov r8, r8)
    27ec:	46bd      	mov	sp, r7
    27ee:	b002      	add	sp, #8
    27f0:	bd80      	pop	{r7, pc}
	...

000027f4 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    27f4:	b580      	push	{r7, lr}
    27f6:	b084      	sub	sp, #16
    27f8:	af00      	add	r7, sp, #0
    27fa:	6078      	str	r0, [r7, #4]
    27fc:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    27fe:	683b      	ldr	r3, [r7, #0]
    2800:	781a      	ldrb	r2, [r3, #0]
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2806:	683b      	ldr	r3, [r7, #0]
    2808:	785a      	ldrb	r2, [r3, #1]
    280a:	687b      	ldr	r3, [r7, #4]
    280c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    280e:	683b      	ldr	r3, [r7, #0]
    2810:	789a      	ldrb	r2, [r3, #2]
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2816:	230c      	movs	r3, #12
    2818:	18fb      	adds	r3, r7, r3
    281a:	0018      	movs	r0, r3
    281c:	4b0b      	ldr	r3, [pc, #44]	; (284c <spi_attach_slave+0x58>)
    281e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2820:	230c      	movs	r3, #12
    2822:	18fb      	adds	r3, r7, r3
    2824:	2201      	movs	r2, #1
    2826:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	781b      	ldrb	r3, [r3, #0]
    282c:	220c      	movs	r2, #12
    282e:	18ba      	adds	r2, r7, r2
    2830:	0011      	movs	r1, r2
    2832:	0018      	movs	r0, r3
    2834:	4b06      	ldr	r3, [pc, #24]	; (2850 <spi_attach_slave+0x5c>)
    2836:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2838:	687b      	ldr	r3, [r7, #4]
    283a:	781b      	ldrb	r3, [r3, #0]
    283c:	2101      	movs	r1, #1
    283e:	0018      	movs	r0, r3
    2840:	4b04      	ldr	r3, [pc, #16]	; (2854 <spi_attach_slave+0x60>)
    2842:	4798      	blx	r3
}
    2844:	46c0      	nop			; (mov r8, r8)
    2846:	46bd      	mov	sp, r7
    2848:	b004      	add	sp, #16
    284a:	bd80      	pop	{r7, pc}
    284c:	00002689 	.word	0x00002689
    2850:	00003501 	.word	0x00003501
    2854:	000026ad 	.word	0x000026ad

00002858 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2858:	b580      	push	{r7, lr}
    285a:	b084      	sub	sp, #16
    285c:	af00      	add	r7, sp, #0
    285e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2860:	687b      	ldr	r3, [r7, #4]
    2862:	681b      	ldr	r3, [r3, #0]
    2864:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2866:	687b      	ldr	r3, [r7, #4]
    2868:	681b      	ldr	r3, [r3, #0]
    286a:	0018      	movs	r0, r3
    286c:	4b0b      	ldr	r3, [pc, #44]	; (289c <spi_enable+0x44>)
    286e:	4798      	blx	r3
    2870:	0003      	movs	r3, r0
    2872:	0018      	movs	r0, r3
    2874:	4b0a      	ldr	r3, [pc, #40]	; (28a0 <spi_enable+0x48>)
    2876:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2878:	46c0      	nop			; (mov r8, r8)
    287a:	687b      	ldr	r3, [r7, #4]
    287c:	0018      	movs	r0, r3
    287e:	4b09      	ldr	r3, [pc, #36]	; (28a4 <spi_enable+0x4c>)
    2880:	4798      	blx	r3
    2882:	1e03      	subs	r3, r0, #0
    2884:	d1f9      	bne.n	287a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2886:	68fb      	ldr	r3, [r7, #12]
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	2202      	movs	r2, #2
    288c:	431a      	orrs	r2, r3
    288e:	68fb      	ldr	r3, [r7, #12]
    2890:	601a      	str	r2, [r3, #0]
}
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	46bd      	mov	sp, r7
    2896:	b004      	add	sp, #16
    2898:	bd80      	pop	{r7, pc}
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	0000408d 	.word	0x0000408d
    28a0:	00002701 	.word	0x00002701
    28a4:	0000272d 	.word	0x0000272d

000028a8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    28a8:	b580      	push	{r7, lr}
    28aa:	b084      	sub	sp, #16
    28ac:	af00      	add	r7, sp, #0
    28ae:	6078      	str	r0, [r7, #4]
    28b0:	000a      	movs	r2, r1
    28b2:	1cfb      	adds	r3, r7, #3
    28b4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    28b6:	230f      	movs	r3, #15
    28b8:	18fb      	adds	r3, r7, r3
    28ba:	2200      	movs	r2, #0
    28bc:	701a      	strb	r2, [r3, #0]
	while (size--) {
    28be:	e038      	b.n	2932 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	1c5a      	adds	r2, r3, #1
    28c4:	607a      	str	r2, [r7, #4]
    28c6:	220e      	movs	r2, #14
    28c8:	18ba      	adds	r2, r7, r2
    28ca:	781b      	ldrb	r3, [r3, #0]
    28cc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    28ce:	230d      	movs	r3, #13
    28d0:	18fb      	adds	r3, r7, r3
    28d2:	2200      	movs	r2, #0
    28d4:	701a      	strb	r2, [r3, #0]
    28d6:	e027      	b.n	2928 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    28d8:	230f      	movs	r3, #15
    28da:	18fa      	adds	r2, r7, r3
    28dc:	230f      	movs	r3, #15
    28de:	18fb      	adds	r3, r7, r3
    28e0:	781b      	ldrb	r3, [r3, #0]
    28e2:	18db      	adds	r3, r3, r3
    28e4:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    28e6:	230e      	movs	r3, #14
    28e8:	18fa      	adds	r2, r7, r3
    28ea:	230f      	movs	r3, #15
    28ec:	18fb      	adds	r3, r7, r3
    28ee:	7812      	ldrb	r2, [r2, #0]
    28f0:	781b      	ldrb	r3, [r3, #0]
    28f2:	4053      	eors	r3, r2
    28f4:	b2db      	uxtb	r3, r3
    28f6:	b25b      	sxtb	r3, r3
    28f8:	2b00      	cmp	r3, #0
    28fa:	da07      	bge.n	290c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    28fc:	230f      	movs	r3, #15
    28fe:	18fb      	adds	r3, r7, r3
    2900:	220f      	movs	r2, #15
    2902:	18ba      	adds	r2, r7, r2
    2904:	7812      	ldrb	r2, [r2, #0]
    2906:	2109      	movs	r1, #9
    2908:	404a      	eors	r2, r1
    290a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    290c:	230e      	movs	r3, #14
    290e:	18fa      	adds	r2, r7, r3
    2910:	230e      	movs	r3, #14
    2912:	18fb      	adds	r3, r7, r3
    2914:	781b      	ldrb	r3, [r3, #0]
    2916:	18db      	adds	r3, r3, r3
    2918:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    291a:	230d      	movs	r3, #13
    291c:	18fb      	adds	r3, r7, r3
    291e:	781a      	ldrb	r2, [r3, #0]
    2920:	230d      	movs	r3, #13
    2922:	18fb      	adds	r3, r7, r3
    2924:	3201      	adds	r2, #1
    2926:	701a      	strb	r2, [r3, #0]
    2928:	230d      	movs	r3, #13
    292a:	18fb      	adds	r3, r7, r3
    292c:	781b      	ldrb	r3, [r3, #0]
    292e:	2b07      	cmp	r3, #7
    2930:	d9d2      	bls.n	28d8 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    2932:	1cfb      	adds	r3, r7, #3
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	1cfa      	adds	r2, r7, #3
    2938:	1e59      	subs	r1, r3, #1
    293a:	7011      	strb	r1, [r2, #0]
    293c:	2b00      	cmp	r3, #0
    293e:	d1bf      	bne.n	28c0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    2940:	230f      	movs	r3, #15
    2942:	18fb      	adds	r3, r7, r3
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	005b      	lsls	r3, r3, #1
    2948:	b25b      	sxtb	r3, r3
    294a:	2201      	movs	r2, #1
    294c:	4313      	orrs	r3, r2
    294e:	b25a      	sxtb	r2, r3
    2950:	230f      	movs	r3, #15
    2952:	18fb      	adds	r3, r7, r3
    2954:	701a      	strb	r2, [r3, #0]
	return crc;
    2956:	230f      	movs	r3, #15
    2958:	18fb      	adds	r3, r7, r3
    295a:	781b      	ldrb	r3, [r3, #0]
}
    295c:	0018      	movs	r0, r3
    295e:	46bd      	mov	sp, r7
    2960:	b004      	add	sp, #16
    2962:	bd80      	pop	{r7, pc}

00002964 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    2964:	b590      	push	{r4, r7, lr}
    2966:	b083      	sub	sp, #12
    2968:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    296a:	1c7b      	adds	r3, r7, #1
    296c:	22ff      	movs	r2, #255	; 0xff
    296e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    2970:	1cbb      	adds	r3, r7, #2
    2972:	22ff      	movs	r2, #255	; 0xff
    2974:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2976:	1cbb      	adds	r3, r7, #2
    2978:	881b      	ldrh	r3, [r3, #0]
    297a:	1c79      	adds	r1, r7, #1
    297c:	4811      	ldr	r0, [pc, #68]	; (29c4 <sd_mmc_spi_wait_busy+0x60>)
    297e:	2201      	movs	r2, #1
    2980:	4c11      	ldr	r4, [pc, #68]	; (29c8 <sd_mmc_spi_wait_busy+0x64>)
    2982:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    2984:	4b11      	ldr	r3, [pc, #68]	; (29cc <sd_mmc_spi_wait_busy+0x68>)
    2986:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2988:	1cbb      	adds	r3, r7, #2
    298a:	881b      	ldrh	r3, [r3, #0]
    298c:	1c79      	adds	r1, r7, #1
    298e:	480d      	ldr	r0, [pc, #52]	; (29c4 <sd_mmc_spi_wait_busy+0x60>)
    2990:	2201      	movs	r2, #1
    2992:	4c0d      	ldr	r4, [pc, #52]	; (29c8 <sd_mmc_spi_wait_busy+0x64>)
    2994:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2996:	1cbb      	adds	r3, r7, #2
    2998:	881b      	ldrh	r3, [r3, #0]
    299a:	1c79      	adds	r1, r7, #1
    299c:	4809      	ldr	r0, [pc, #36]	; (29c4 <sd_mmc_spi_wait_busy+0x60>)
    299e:	2201      	movs	r2, #1
    29a0:	4c09      	ldr	r4, [pc, #36]	; (29c8 <sd_mmc_spi_wait_busy+0x64>)
    29a2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    29a4:	687b      	ldr	r3, [r7, #4]
    29a6:	1e5a      	subs	r2, r3, #1
    29a8:	607a      	str	r2, [r7, #4]
    29aa:	2b00      	cmp	r3, #0
    29ac:	d101      	bne.n	29b2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
    29ae:	2300      	movs	r3, #0
    29b0:	e004      	b.n	29bc <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    29b2:	1c7b      	adds	r3, r7, #1
    29b4:	781b      	ldrb	r3, [r3, #0]
    29b6:	2bff      	cmp	r3, #255	; 0xff
    29b8:	d1ed      	bne.n	2996 <sd_mmc_spi_wait_busy+0x32>
	return true;
    29ba:	2301      	movs	r3, #1
}
    29bc:	0018      	movs	r0, r3
    29be:	46bd      	mov	sp, r7
    29c0:	b003      	add	sp, #12
    29c2:	bd90      	pop	{r4, r7, pc}
    29c4:	20000100 	.word	0x20000100
    29c8:	00004a0d 	.word	0x00004a0d
    29cc:	00030d40 	.word	0x00030d40

000029d0 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    29d0:	b590      	push	{r4, r7, lr}
    29d2:	b083      	sub	sp, #12
    29d4:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    29d6:	1cbb      	adds	r3, r7, #2
    29d8:	22ff      	movs	r2, #255	; 0xff
    29da:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    29dc:	1c7b      	adds	r3, r7, #1
    29de:	2200      	movs	r2, #0
    29e0:	701a      	strb	r2, [r3, #0]
	i = 500000;
    29e2:	4b18      	ldr	r3, [pc, #96]	; (2a44 <sd_mmc_spi_start_read_block+0x74>)
    29e4:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	1e5a      	subs	r2, r3, #1
    29ea:	607a      	str	r2, [r7, #4]
    29ec:	2b00      	cmp	r3, #0
    29ee:	d104      	bne.n	29fa <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    29f0:	4b15      	ldr	r3, [pc, #84]	; (2a48 <sd_mmc_spi_start_read_block+0x78>)
    29f2:	2204      	movs	r2, #4
    29f4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    29f6:	2300      	movs	r3, #0
    29f8:	e020      	b.n	2a3c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    29fa:	1cbb      	adds	r3, r7, #2
    29fc:	881b      	ldrh	r3, [r3, #0]
    29fe:	1c79      	adds	r1, r7, #1
    2a00:	4812      	ldr	r0, [pc, #72]	; (2a4c <sd_mmc_spi_start_read_block+0x7c>)
    2a02:	2201      	movs	r2, #1
    2a04:	4c12      	ldr	r4, [pc, #72]	; (2a50 <sd_mmc_spi_start_read_block+0x80>)
    2a06:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    2a08:	1c7b      	adds	r3, r7, #1
    2a0a:	781b      	ldrb	r3, [r3, #0]
    2a0c:	001a      	movs	r2, r3
    2a0e:	23f0      	movs	r3, #240	; 0xf0
    2a10:	4013      	ands	r3, r2
    2a12:	d10e      	bne.n	2a32 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    2a14:	1c7b      	adds	r3, r7, #1
    2a16:	781b      	ldrb	r3, [r3, #0]
    2a18:	001a      	movs	r2, r3
    2a1a:	2307      	movs	r3, #7
    2a1c:	4013      	ands	r3, r2
    2a1e:	d003      	beq.n	2a28 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2a20:	4b09      	ldr	r3, [pc, #36]	; (2a48 <sd_mmc_spi_start_read_block+0x78>)
    2a22:	2207      	movs	r2, #7
    2a24:	701a      	strb	r2, [r3, #0]
    2a26:	e002      	b.n	2a2e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    2a28:	4b07      	ldr	r3, [pc, #28]	; (2a48 <sd_mmc_spi_start_read_block+0x78>)
    2a2a:	220b      	movs	r2, #11
    2a2c:	701a      	strb	r2, [r3, #0]
			}
			return false;
    2a2e:	2300      	movs	r3, #0
    2a30:	e004      	b.n	2a3c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    2a32:	1c7b      	adds	r3, r7, #1
    2a34:	781b      	ldrb	r3, [r3, #0]
    2a36:	2bfe      	cmp	r3, #254	; 0xfe
    2a38:	d1d5      	bne.n	29e6 <sd_mmc_spi_start_read_block+0x16>

	return true;
    2a3a:	2301      	movs	r3, #1
}
    2a3c:	0018      	movs	r0, r3
    2a3e:	46bd      	mov	sp, r7
    2a40:	b003      	add	sp, #12
    2a42:	bd90      	pop	{r4, r7, pc}
    2a44:	0007a120 	.word	0x0007a120
    2a48:	20000143 	.word	0x20000143
    2a4c:	20000100 	.word	0x20000100
    2a50:	00004a0d 	.word	0x00004a0d

00002a54 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    2a54:	b590      	push	{r4, r7, lr}
    2a56:	b083      	sub	sp, #12
    2a58:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    2a5a:	1dbb      	adds	r3, r7, #6
    2a5c:	22ff      	movs	r2, #255	; 0xff
    2a5e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    2a60:	1dbb      	adds	r3, r7, #6
    2a62:	881b      	ldrh	r3, [r3, #0]
    2a64:	1d39      	adds	r1, r7, #4
    2a66:	4804      	ldr	r0, [pc, #16]	; (2a78 <sd_mmc_spi_stop_read_block+0x24>)
    2a68:	2202      	movs	r2, #2
    2a6a:	4c04      	ldr	r4, [pc, #16]	; (2a7c <sd_mmc_spi_stop_read_block+0x28>)
    2a6c:	47a0      	blx	r4
			dummy);
}
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	46bd      	mov	sp, r7
    2a72:	b003      	add	sp, #12
    2a74:	bd90      	pop	{r4, r7, pc}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	20000100 	.word	0x20000100
    2a7c:	00004a0d 	.word	0x00004a0d

00002a80 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    2a80:	b580      	push	{r7, lr}
    2a82:	b082      	sub	sp, #8
    2a84:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    2a86:	1dfb      	adds	r3, r7, #7
    2a88:	22ff      	movs	r2, #255	; 0xff
    2a8a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    2a8c:	1df9      	adds	r1, r7, #7
    2a8e:	4b0d      	ldr	r3, [pc, #52]	; (2ac4 <sd_mmc_spi_start_write_block+0x44>)
    2a90:	2201      	movs	r2, #1
    2a92:	0018      	movs	r0, r3
    2a94:	4b0c      	ldr	r3, [pc, #48]	; (2ac8 <sd_mmc_spi_start_write_block+0x48>)
    2a96:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    2a98:	4b0c      	ldr	r3, [pc, #48]	; (2acc <sd_mmc_spi_start_write_block+0x4c>)
    2a9a:	881b      	ldrh	r3, [r3, #0]
    2a9c:	2b01      	cmp	r3, #1
    2a9e:	d103      	bne.n	2aa8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    2aa0:	1dbb      	adds	r3, r7, #6
    2aa2:	22fe      	movs	r2, #254	; 0xfe
    2aa4:	701a      	strb	r2, [r3, #0]
    2aa6:	e002      	b.n	2aae <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    2aa8:	1dbb      	adds	r3, r7, #6
    2aaa:	22fc      	movs	r2, #252	; 0xfc
    2aac:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    2aae:	1db9      	adds	r1, r7, #6
    2ab0:	4b04      	ldr	r3, [pc, #16]	; (2ac4 <sd_mmc_spi_start_write_block+0x44>)
    2ab2:	2201      	movs	r2, #1
    2ab4:	0018      	movs	r0, r3
    2ab6:	4b04      	ldr	r3, [pc, #16]	; (2ac8 <sd_mmc_spi_start_write_block+0x48>)
    2ab8:	4798      	blx	r3
}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	46bd      	mov	sp, r7
    2abe:	b002      	add	sp, #8
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	20000100 	.word	0x20000100
    2ac8:	00004c31 	.word	0x00004c31
    2acc:	2000014e 	.word	0x2000014e

00002ad0 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2ad0:	b590      	push	{r4, r7, lr}
    2ad2:	b083      	sub	sp, #12
    2ad4:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    2ad6:	1dbb      	adds	r3, r7, #6
    2ad8:	22ff      	movs	r2, #255	; 0xff
    2ada:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2adc:	1cbb      	adds	r3, r7, #2
    2ade:	2201      	movs	r2, #1
    2ae0:	4252      	negs	r2, r2
    2ae2:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    2ae4:	1cb9      	adds	r1, r7, #2
    2ae6:	4b1b      	ldr	r3, [pc, #108]	; (2b54 <sd_mmc_spi_stop_write_block+0x84>)
    2ae8:	2202      	movs	r2, #2
    2aea:	0018      	movs	r0, r3
    2aec:	4b1a      	ldr	r3, [pc, #104]	; (2b58 <sd_mmc_spi_stop_write_block+0x88>)
    2aee:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2af0:	1dbb      	adds	r3, r7, #6
    2af2:	881b      	ldrh	r3, [r3, #0]
    2af4:	1d79      	adds	r1, r7, #5
    2af6:	4817      	ldr	r0, [pc, #92]	; (2b54 <sd_mmc_spi_stop_write_block+0x84>)
    2af8:	2201      	movs	r2, #1
    2afa:	4c18      	ldr	r4, [pc, #96]	; (2b5c <sd_mmc_spi_stop_write_block+0x8c>)
    2afc:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2afe:	1d7b      	adds	r3, r7, #5
    2b00:	781b      	ldrb	r3, [r3, #0]
    2b02:	001a      	movs	r2, r3
    2b04:	2310      	movs	r3, #16
    2b06:	4013      	ands	r3, r2
    2b08:	d105      	bne.n	2b16 <sd_mmc_spi_stop_write_block+0x46>
    2b0a:	1d7b      	adds	r3, r7, #5
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	001a      	movs	r2, r3
    2b10:	2301      	movs	r3, #1
    2b12:	4013      	ands	r3, r2
    2b14:	d104      	bne.n	2b20 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2b16:	4b12      	ldr	r3, [pc, #72]	; (2b60 <sd_mmc_spi_stop_write_block+0x90>)
    2b18:	2201      	movs	r2, #1
    2b1a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2b1c:	2300      	movs	r3, #0
    2b1e:	e014      	b.n	2b4a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2b20:	1d7b      	adds	r3, r7, #5
    2b22:	781b      	ldrb	r3, [r3, #0]
    2b24:	001a      	movs	r2, r3
    2b26:	231e      	movs	r3, #30
    2b28:	4013      	ands	r3, r2
    2b2a:	2b04      	cmp	r3, #4
    2b2c:	d00b      	beq.n	2b46 <sd_mmc_spi_stop_write_block+0x76>
    2b2e:	2b0a      	cmp	r3, #10
    2b30:	d104      	bne.n	2b3c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    2b32:	4b0b      	ldr	r3, [pc, #44]	; (2b60 <sd_mmc_spi_stop_write_block+0x90>)
    2b34:	2208      	movs	r2, #8
    2b36:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2b38:	2300      	movs	r3, #0
    2b3a:	e006      	b.n	2b4a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    2b3c:	4b08      	ldr	r3, [pc, #32]	; (2b60 <sd_mmc_spi_stop_write_block+0x90>)
    2b3e:	220a      	movs	r2, #10
    2b40:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    2b42:	2300      	movs	r3, #0
    2b44:	e001      	b.n	2b4a <sd_mmc_spi_stop_write_block+0x7a>
		break;
    2b46:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    2b48:	2301      	movs	r3, #1
}
    2b4a:	0018      	movs	r0, r3
    2b4c:	46bd      	mov	sp, r7
    2b4e:	b003      	add	sp, #12
    2b50:	bd90      	pop	{r4, r7, pc}
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	20000100 	.word	0x20000100
    2b58:	00004c31 	.word	0x00004c31
    2b5c:	00004a0d 	.word	0x00004a0d
    2b60:	20000143 	.word	0x20000143

00002b64 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    2b64:	b590      	push	{r4, r7, lr}
    2b66:	b083      	sub	sp, #12
    2b68:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    2b6a:	4b1d      	ldr	r3, [pc, #116]	; (2be0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2b6c:	881b      	ldrh	r3, [r3, #0]
    2b6e:	2b01      	cmp	r3, #1
    2b70:	d101      	bne.n	2b76 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    2b72:	2301      	movs	r3, #1
    2b74:	e030      	b.n	2bd8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    2b76:	4b1a      	ldr	r3, [pc, #104]	; (2be0 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    2b78:	881b      	ldrh	r3, [r3, #0]
    2b7a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    2b7c:	4b19      	ldr	r3, [pc, #100]	; (2be4 <sd_mmc_spi_stop_multiwrite_block+0x80>)
    2b7e:	681a      	ldr	r2, [r3, #0]
    2b80:	4b19      	ldr	r3, [pc, #100]	; (2be8 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    2b82:	881b      	ldrh	r3, [r3, #0]
    2b84:	0019      	movs	r1, r3
    2b86:	4b19      	ldr	r3, [pc, #100]	; (2bec <sd_mmc_spi_stop_multiwrite_block+0x88>)
    2b88:	0010      	movs	r0, r2
    2b8a:	4798      	blx	r3
    2b8c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    2b8e:	429c      	cmp	r4, r3
    2b90:	d901      	bls.n	2b96 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    2b92:	2301      	movs	r3, #1
    2b94:	e020      	b.n	2bd8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    2b96:	1dfb      	adds	r3, r7, #7
    2b98:	22ff      	movs	r2, #255	; 0xff
    2b9a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2b9c:	1df9      	adds	r1, r7, #7
    2b9e:	4b14      	ldr	r3, [pc, #80]	; (2bf0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2ba0:	2201      	movs	r2, #1
    2ba2:	0018      	movs	r0, r3
    2ba4:	4b13      	ldr	r3, [pc, #76]	; (2bf4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2ba6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    2ba8:	1dfb      	adds	r3, r7, #7
    2baa:	22fd      	movs	r2, #253	; 0xfd
    2bac:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2bae:	1df9      	adds	r1, r7, #7
    2bb0:	4b0f      	ldr	r3, [pc, #60]	; (2bf0 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2bb2:	2201      	movs	r2, #1
    2bb4:	0018      	movs	r0, r3
    2bb6:	4b0f      	ldr	r3, [pc, #60]	; (2bf4 <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2bb8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    2bba:	4b0f      	ldr	r3, [pc, #60]	; (2bf8 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    2bbc:	4798      	blx	r3
    2bbe:	0003      	movs	r3, r0
    2bc0:	001a      	movs	r2, r3
    2bc2:	2301      	movs	r3, #1
    2bc4:	4053      	eors	r3, r2
    2bc6:	b2db      	uxtb	r3, r3
    2bc8:	2b00      	cmp	r3, #0
    2bca:	d004      	beq.n	2bd6 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2bcc:	4b0b      	ldr	r3, [pc, #44]	; (2bfc <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2bce:	2205      	movs	r2, #5
    2bd0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    2bd2:	2300      	movs	r3, #0
    2bd4:	e000      	b.n	2bd8 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    2bd6:	2301      	movs	r3, #1
}
    2bd8:	0018      	movs	r0, r3
    2bda:	46bd      	mov	sp, r7
    2bdc:	b003      	add	sp, #12
    2bde:	bd90      	pop	{r4, r7, pc}
    2be0:	2000014e 	.word	0x2000014e
    2be4:	20000148 	.word	0x20000148
    2be8:	2000014c 	.word	0x2000014c
    2bec:	0000b789 	.word	0x0000b789
    2bf0:	20000100 	.word	0x20000100
    2bf4:	00004c31 	.word	0x00004c31
    2bf8:	00002965 	.word	0x00002965
    2bfc:	20000143 	.word	0x20000143

00002c00 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2c00:	b580      	push	{r7, lr}
    2c02:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    2c04:	4b03      	ldr	r3, [pc, #12]	; (2c14 <sd_mmc_deinit+0x14>)
    2c06:	0018      	movs	r0, r3
    2c08:	4b03      	ldr	r3, [pc, #12]	; (2c18 <sd_mmc_deinit+0x18>)
    2c0a:	4798      	blx	r3
}
    2c0c:	46c0      	nop			; (mov r8, r8)
    2c0e:	46bd      	mov	sp, r7
    2c10:	bd80      	pop	{r7, pc}
    2c12:	46c0      	nop			; (mov r8, r8)
    2c14:	20000100 	.word	0x20000100
    2c18:	00004565 	.word	0x00004565

00002c1c <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2c1c:	b580      	push	{r7, lr}
    2c1e:	b090      	sub	sp, #64	; 0x40
    2c20:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2c22:	4b1f      	ldr	r3, [pc, #124]	; (2ca0 <sd_mmc_spi_init+0x84>)
    2c24:	2200      	movs	r2, #0
    2c26:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2c28:	233c      	movs	r3, #60	; 0x3c
    2c2a:	18fb      	adds	r3, r7, r3
    2c2c:	0018      	movs	r0, r3
    2c2e:	4b1d      	ldr	r3, [pc, #116]	; (2ca4 <sd_mmc_spi_init+0x88>)
    2c30:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    2c32:	1d3b      	adds	r3, r7, #4
    2c34:	0018      	movs	r0, r3
    2c36:	4b1c      	ldr	r3, [pc, #112]	; (2ca8 <sd_mmc_spi_init+0x8c>)
    2c38:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    2c3a:	1d3b      	adds	r3, r7, #4
    2c3c:	2280      	movs	r2, #128	; 0x80
    2c3e:	0252      	lsls	r2, r2, #9
    2c40:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    2c42:	1d3b      	adds	r3, r7, #4
    2c44:	4a19      	ldr	r2, [pc, #100]	; (2cac <sd_mmc_spi_init+0x90>)
    2c46:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    2c48:	1d3b      	adds	r3, r7, #4
    2c4a:	4a19      	ldr	r2, [pc, #100]	; (2cb0 <sd_mmc_spi_init+0x94>)
    2c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    2c4e:	1d3b      	adds	r3, r7, #4
    2c50:	4a18      	ldr	r2, [pc, #96]	; (2cb4 <sd_mmc_spi_init+0x98>)
    2c52:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    2c54:	1d3b      	adds	r3, r7, #4
    2c56:	4a18      	ldr	r2, [pc, #96]	; (2cb8 <sd_mmc_spi_init+0x9c>)
    2c58:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    2c5a:	1d3b      	adds	r3, r7, #4
    2c5c:	2224      	movs	r2, #36	; 0x24
    2c5e:	2100      	movs	r1, #0
    2c60:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    2c62:	1d3b      	adds	r3, r7, #4
    2c64:	4a15      	ldr	r2, [pc, #84]	; (2cbc <sd_mmc_spi_init+0xa0>)
    2c66:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    2c68:	1d3a      	adds	r2, r7, #4
    2c6a:	4915      	ldr	r1, [pc, #84]	; (2cc0 <sd_mmc_spi_init+0xa4>)
    2c6c:	4b15      	ldr	r3, [pc, #84]	; (2cc4 <sd_mmc_spi_init+0xa8>)
    2c6e:	0018      	movs	r0, r3
    2c70:	4b15      	ldr	r3, [pc, #84]	; (2cc8 <sd_mmc_spi_init+0xac>)
    2c72:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    2c74:	4b13      	ldr	r3, [pc, #76]	; (2cc4 <sd_mmc_spi_init+0xa8>)
    2c76:	0018      	movs	r0, r3
    2c78:	4b14      	ldr	r3, [pc, #80]	; (2ccc <sd_mmc_spi_init+0xb0>)
    2c7a:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    2c7c:	4b14      	ldr	r3, [pc, #80]	; (2cd0 <sd_mmc_spi_init+0xb4>)
    2c7e:	0018      	movs	r0, r3
    2c80:	4b14      	ldr	r3, [pc, #80]	; (2cd4 <sd_mmc_spi_init+0xb8>)
    2c82:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    2c84:	4b14      	ldr	r3, [pc, #80]	; (2cd8 <sd_mmc_spi_init+0xbc>)
    2c86:	781a      	ldrb	r2, [r3, #0]
    2c88:	4b11      	ldr	r3, [pc, #68]	; (2cd0 <sd_mmc_spi_init+0xb4>)
    2c8a:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    2c8c:	4a10      	ldr	r2, [pc, #64]	; (2cd0 <sd_mmc_spi_init+0xb4>)
    2c8e:	4b13      	ldr	r3, [pc, #76]	; (2cdc <sd_mmc_spi_init+0xc0>)
    2c90:	0011      	movs	r1, r2
    2c92:	0018      	movs	r0, r3
    2c94:	4b12      	ldr	r3, [pc, #72]	; (2ce0 <sd_mmc_spi_init+0xc4>)
    2c96:	4798      	blx	r3
}
    2c98:	46c0      	nop			; (mov r8, r8)
    2c9a:	46bd      	mov	sp, r7
    2c9c:	b010      	add	sp, #64	; 0x40
    2c9e:	bd80      	pop	{r7, pc}
    2ca0:	20000143 	.word	0x20000143
    2ca4:	00002689 	.word	0x00002689
    2ca8:	0000274d 	.word	0x0000274d
    2cac:	00100002 	.word	0x00100002
    2cb0:	00110002 	.word	0x00110002
    2cb4:	00120002 	.word	0x00120002
    2cb8:	00130002 	.word	0x00130002
    2cbc:	00061a80 	.word	0x00061a80
    2cc0:	42000c00 	.word	0x42000c00
    2cc4:	20000100 	.word	0x20000100
    2cc8:	0000487d 	.word	0x0000487d
    2ccc:	00002859 	.word	0x00002859
    2cd0:	20000140 	.word	0x20000140
    2cd4:	000027d1 	.word	0x000027d1
    2cd8:	20000008 	.word	0x20000008
    2cdc:	2000013c 	.word	0x2000013c
    2ce0:	000027f5 	.word	0x000027f5

00002ce4 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    2ce4:	b590      	push	{r4, r7, lr}
    2ce6:	b083      	sub	sp, #12
    2ce8:	af00      	add	r7, sp, #0
    2cea:	0004      	movs	r4, r0
    2cec:	6039      	str	r1, [r7, #0]
    2cee:	0010      	movs	r0, r2
    2cf0:	0019      	movs	r1, r3
    2cf2:	1dfb      	adds	r3, r7, #7
    2cf4:	1c22      	adds	r2, r4, #0
    2cf6:	701a      	strb	r2, [r3, #0]
    2cf8:	1dbb      	adds	r3, r7, #6
    2cfa:	1c02      	adds	r2, r0, #0
    2cfc:	701a      	strb	r2, [r3, #0]
    2cfe:	1d7b      	adds	r3, r7, #5
    2d00:	1c0a      	adds	r2, r1, #0
    2d02:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2d04:	4b13      	ldr	r3, [pc, #76]	; (2d54 <sd_mmc_spi_select_device+0x70>)
    2d06:	2200      	movs	r2, #0
    2d08:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2d0a:	683b      	ldr	r3, [r7, #0]
    2d0c:	4a12      	ldr	r2, [pc, #72]	; (2d58 <sd_mmc_spi_select_device+0x74>)
    2d0e:	4293      	cmp	r3, r2
    2d10:	d907      	bls.n	2d22 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    2d12:	4b11      	ldr	r3, [pc, #68]	; (2d58 <sd_mmc_spi_select_device+0x74>)
    2d14:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2d16:	e004      	b.n	2d22 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2d18:	683b      	ldr	r3, [r7, #0]
    2d1a:	08db      	lsrs	r3, r3, #3
    2d1c:	683a      	ldr	r2, [r7, #0]
    2d1e:	1ad3      	subs	r3, r2, r3
    2d20:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    2d22:	683a      	ldr	r2, [r7, #0]
    2d24:	4b0d      	ldr	r3, [pc, #52]	; (2d5c <sd_mmc_spi_select_device+0x78>)
    2d26:	0011      	movs	r1, r2
    2d28:	0018      	movs	r0, r3
    2d2a:	4b0d      	ldr	r3, [pc, #52]	; (2d60 <sd_mmc_spi_select_device+0x7c>)
    2d2c:	4798      	blx	r3
    2d2e:	0003      	movs	r3, r0
    2d30:	2b17      	cmp	r3, #23
    2d32:	d0f1      	beq.n	2d18 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    2d34:	1dfb      	adds	r3, r7, #7
    2d36:	781a      	ldrb	r2, [r3, #0]
    2d38:	0013      	movs	r3, r2
    2d3a:	005b      	lsls	r3, r3, #1
    2d3c:	189b      	adds	r3, r3, r2
    2d3e:	4a09      	ldr	r2, [pc, #36]	; (2d64 <sd_mmc_spi_select_device+0x80>)
    2d40:	1899      	adds	r1, r3, r2
    2d42:	4b06      	ldr	r3, [pc, #24]	; (2d5c <sd_mmc_spi_select_device+0x78>)
    2d44:	2201      	movs	r2, #1
    2d46:	0018      	movs	r0, r3
    2d48:	4b07      	ldr	r3, [pc, #28]	; (2d68 <sd_mmc_spi_select_device+0x84>)
    2d4a:	4798      	blx	r3
}
    2d4c:	46c0      	nop			; (mov r8, r8)
    2d4e:	46bd      	mov	sp, r7
    2d50:	b003      	add	sp, #12
    2d52:	bd90      	pop	{r4, r7, pc}
    2d54:	20000143 	.word	0x20000143
    2d58:	00989680 	.word	0x00989680
    2d5c:	20000100 	.word	0x20000100
    2d60:	000045a5 	.word	0x000045a5
    2d64:	2000013c 	.word	0x2000013c
    2d68:	00004b41 	.word	0x00004b41

00002d6c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b082      	sub	sp, #8
    2d70:	af00      	add	r7, sp, #0
    2d72:	0002      	movs	r2, r0
    2d74:	1dfb      	adds	r3, r7, #7
    2d76:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2d78:	4b09      	ldr	r3, [pc, #36]	; (2da0 <sd_mmc_spi_deselect_device+0x34>)
    2d7a:	2200      	movs	r2, #0
    2d7c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    2d7e:	1dfb      	adds	r3, r7, #7
    2d80:	781a      	ldrb	r2, [r3, #0]
    2d82:	0013      	movs	r3, r2
    2d84:	005b      	lsls	r3, r3, #1
    2d86:	189b      	adds	r3, r3, r2
    2d88:	4a06      	ldr	r2, [pc, #24]	; (2da4 <sd_mmc_spi_deselect_device+0x38>)
    2d8a:	1899      	adds	r1, r3, r2
    2d8c:	4b06      	ldr	r3, [pc, #24]	; (2da8 <sd_mmc_spi_deselect_device+0x3c>)
    2d8e:	2200      	movs	r2, #0
    2d90:	0018      	movs	r0, r3
    2d92:	4b06      	ldr	r3, [pc, #24]	; (2dac <sd_mmc_spi_deselect_device+0x40>)
    2d94:	4798      	blx	r3
}
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	46bd      	mov	sp, r7
    2d9a:	b002      	add	sp, #8
    2d9c:	bd80      	pop	{r7, pc}
    2d9e:	46c0      	nop			; (mov r8, r8)
    2da0:	20000143 	.word	0x20000143
    2da4:	2000013c 	.word	0x2000013c
    2da8:	20000100 	.word	0x20000100
    2dac:	00004b41 	.word	0x00004b41

00002db0 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2db0:	b580      	push	{r7, lr}
    2db2:	b082      	sub	sp, #8
    2db4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    2db6:	1dbb      	adds	r3, r7, #6
    2db8:	22ff      	movs	r2, #255	; 0xff
    2dba:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2dbc:	4b0c      	ldr	r3, [pc, #48]	; (2df0 <sd_mmc_spi_send_clock+0x40>)
    2dbe:	2200      	movs	r2, #0
    2dc0:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    2dc2:	1dfb      	adds	r3, r7, #7
    2dc4:	2200      	movs	r2, #0
    2dc6:	701a      	strb	r2, [r3, #0]
    2dc8:	e00a      	b.n	2de0 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2dca:	1db9      	adds	r1, r7, #6
    2dcc:	4b09      	ldr	r3, [pc, #36]	; (2df4 <sd_mmc_spi_send_clock+0x44>)
    2dce:	2201      	movs	r2, #1
    2dd0:	0018      	movs	r0, r3
    2dd2:	4b09      	ldr	r3, [pc, #36]	; (2df8 <sd_mmc_spi_send_clock+0x48>)
    2dd4:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    2dd6:	1dfb      	adds	r3, r7, #7
    2dd8:	781a      	ldrb	r2, [r3, #0]
    2dda:	1dfb      	adds	r3, r7, #7
    2ddc:	3201      	adds	r2, #1
    2dde:	701a      	strb	r2, [r3, #0]
    2de0:	1dfb      	adds	r3, r7, #7
    2de2:	781b      	ldrb	r3, [r3, #0]
    2de4:	2b09      	cmp	r3, #9
    2de6:	d9f0      	bls.n	2dca <sd_mmc_spi_send_clock+0x1a>
	}
}
    2de8:	46c0      	nop			; (mov r8, r8)
    2dea:	46bd      	mov	sp, r7
    2dec:	b002      	add	sp, #8
    2dee:	bd80      	pop	{r7, pc}
    2df0:	20000143 	.word	0x20000143
    2df4:	20000100 	.word	0x20000100
    2df8:	00004c31 	.word	0x00004c31

00002dfc <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2dfc:	b590      	push	{r4, r7, lr}
    2dfe:	b085      	sub	sp, #20
    2e00:	af02      	add	r7, sp, #8
    2e02:	6078      	str	r0, [r7, #4]
    2e04:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    2e06:	6839      	ldr	r1, [r7, #0]
    2e08:	6878      	ldr	r0, [r7, #4]
    2e0a:	2300      	movs	r3, #0
    2e0c:	9300      	str	r3, [sp, #0]
    2e0e:	2300      	movs	r3, #0
    2e10:	2200      	movs	r2, #0
    2e12:	4c03      	ldr	r4, [pc, #12]	; (2e20 <sd_mmc_spi_send_cmd+0x24>)
    2e14:	47a0      	blx	r4
    2e16:	0003      	movs	r3, r0
}
    2e18:	0018      	movs	r0, r3
    2e1a:	46bd      	mov	sp, r7
    2e1c:	b003      	add	sp, #12
    2e1e:	bd90      	pop	{r4, r7, pc}
    2e20:	00002e25 	.word	0x00002e25

00002e24 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    2e24:	b590      	push	{r4, r7, lr}
    2e26:	b089      	sub	sp, #36	; 0x24
    2e28:	af00      	add	r7, sp, #0
    2e2a:	60f8      	str	r0, [r7, #12]
    2e2c:	60b9      	str	r1, [r7, #8]
    2e2e:	0019      	movs	r1, r3
    2e30:	1dbb      	adds	r3, r7, #6
    2e32:	801a      	strh	r2, [r3, #0]
    2e34:	1d3b      	adds	r3, r7, #4
    2e36:	1c0a      	adds	r2, r1, #0
    2e38:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    2e3a:	231b      	movs	r3, #27
    2e3c:	18fb      	adds	r3, r7, r3
    2e3e:	22ff      	movs	r2, #255	; 0xff
    2e40:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    2e42:	231c      	movs	r3, #28
    2e44:	18fb      	adds	r3, r7, r3
    2e46:	22ff      	movs	r2, #255	; 0xff
    2e48:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2e4a:	4b72      	ldr	r3, [pc, #456]	; (3014 <sd_mmc_spi_adtc_start+0x1f0>)
    2e4c:	2200      	movs	r2, #0
    2e4e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    2e50:	68fb      	ldr	r3, [r7, #12]
    2e52:	b2db      	uxtb	r3, r3
    2e54:	223f      	movs	r2, #63	; 0x3f
    2e56:	4013      	ands	r3, r2
    2e58:	b2db      	uxtb	r3, r3
    2e5a:	2240      	movs	r2, #64	; 0x40
    2e5c:	4313      	orrs	r3, r2
    2e5e:	b2da      	uxtb	r2, r3
    2e60:	2314      	movs	r3, #20
    2e62:	18fb      	adds	r3, r7, r3
    2e64:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    2e66:	68bb      	ldr	r3, [r7, #8]
    2e68:	0e1b      	lsrs	r3, r3, #24
    2e6a:	b2da      	uxtb	r2, r3
    2e6c:	2314      	movs	r3, #20
    2e6e:	18fb      	adds	r3, r7, r3
    2e70:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    2e72:	68bb      	ldr	r3, [r7, #8]
    2e74:	0c1b      	lsrs	r3, r3, #16
    2e76:	b2da      	uxtb	r2, r3
    2e78:	2314      	movs	r3, #20
    2e7a:	18fb      	adds	r3, r7, r3
    2e7c:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    2e7e:	68bb      	ldr	r3, [r7, #8]
    2e80:	0a1b      	lsrs	r3, r3, #8
    2e82:	b2da      	uxtb	r2, r3
    2e84:	2314      	movs	r3, #20
    2e86:	18fb      	adds	r3, r7, r3
    2e88:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2e8a:	68bb      	ldr	r3, [r7, #8]
    2e8c:	b2da      	uxtb	r2, r3
    2e8e:	2314      	movs	r3, #20
    2e90:	18fb      	adds	r3, r7, r3
    2e92:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    2e94:	2314      	movs	r3, #20
    2e96:	18fb      	adds	r3, r7, r3
    2e98:	2105      	movs	r1, #5
    2e9a:	0018      	movs	r0, r3
    2e9c:	4b5e      	ldr	r3, [pc, #376]	; (3018 <sd_mmc_spi_adtc_start+0x1f4>)
    2e9e:	4798      	blx	r3
    2ea0:	0003      	movs	r3, r0
    2ea2:	001a      	movs	r2, r3
    2ea4:	2314      	movs	r3, #20
    2ea6:	18fb      	adds	r3, r7, r3
    2ea8:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2eaa:	231b      	movs	r3, #27
    2eac:	18f9      	adds	r1, r7, r3
    2eae:	4b5b      	ldr	r3, [pc, #364]	; (301c <sd_mmc_spi_adtc_start+0x1f8>)
    2eb0:	2201      	movs	r2, #1
    2eb2:	0018      	movs	r0, r3
    2eb4:	4b5a      	ldr	r3, [pc, #360]	; (3020 <sd_mmc_spi_adtc_start+0x1fc>)
    2eb6:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2eb8:	2314      	movs	r3, #20
    2eba:	18f9      	adds	r1, r7, r3
    2ebc:	4b57      	ldr	r3, [pc, #348]	; (301c <sd_mmc_spi_adtc_start+0x1f8>)
    2ebe:	2206      	movs	r2, #6
    2ec0:	0018      	movs	r0, r3
    2ec2:	4b57      	ldr	r3, [pc, #348]	; (3020 <sd_mmc_spi_adtc_start+0x1fc>)
    2ec4:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    2ec6:	2313      	movs	r3, #19
    2ec8:	18fb      	adds	r3, r7, r3
    2eca:	22ff      	movs	r2, #255	; 0xff
    2ecc:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2ece:	231c      	movs	r3, #28
    2ed0:	18fb      	adds	r3, r7, r3
    2ed2:	881b      	ldrh	r3, [r3, #0]
    2ed4:	2213      	movs	r2, #19
    2ed6:	18b9      	adds	r1, r7, r2
    2ed8:	4850      	ldr	r0, [pc, #320]	; (301c <sd_mmc_spi_adtc_start+0x1f8>)
    2eda:	2201      	movs	r2, #1
    2edc:	4c51      	ldr	r4, [pc, #324]	; (3024 <sd_mmc_spi_adtc_start+0x200>)
    2ede:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2ee0:	231f      	movs	r3, #31
    2ee2:	18fb      	adds	r3, r7, r3
    2ee4:	2207      	movs	r2, #7
    2ee6:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2ee8:	231c      	movs	r3, #28
    2eea:	18fb      	adds	r3, r7, r3
    2eec:	881b      	ldrh	r3, [r3, #0]
    2eee:	2213      	movs	r2, #19
    2ef0:	18b9      	adds	r1, r7, r2
    2ef2:	484a      	ldr	r0, [pc, #296]	; (301c <sd_mmc_spi_adtc_start+0x1f8>)
    2ef4:	2201      	movs	r2, #1
    2ef6:	4c4b      	ldr	r4, [pc, #300]	; (3024 <sd_mmc_spi_adtc_start+0x200>)
    2ef8:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2efa:	2313      	movs	r3, #19
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	781b      	ldrb	r3, [r3, #0]
    2f00:	b25b      	sxtb	r3, r3
    2f02:	2b00      	cmp	r3, #0
    2f04:	da10      	bge.n	2f28 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    2f06:	231f      	movs	r3, #31
    2f08:	18fb      	adds	r3, r7, r3
    2f0a:	221f      	movs	r2, #31
    2f0c:	18ba      	adds	r2, r7, r2
    2f0e:	7812      	ldrb	r2, [r2, #0]
    2f10:	3a01      	subs	r2, #1
    2f12:	701a      	strb	r2, [r3, #0]
    2f14:	231f      	movs	r3, #31
    2f16:	18fb      	adds	r3, r7, r3
    2f18:	781b      	ldrb	r3, [r3, #0]
    2f1a:	2b00      	cmp	r3, #0
    2f1c:	d1e4      	bne.n	2ee8 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2f1e:	4b3d      	ldr	r3, [pc, #244]	; (3014 <sd_mmc_spi_adtc_start+0x1f0>)
    2f20:	2202      	movs	r2, #2
    2f22:	701a      	strb	r2, [r3, #0]
			return false;
    2f24:	2300      	movs	r3, #0
    2f26:	e070      	b.n	300a <sd_mmc_spi_adtc_start+0x1e6>
			break;
    2f28:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    2f2a:	2313      	movs	r3, #19
    2f2c:	18fb      	adds	r3, r7, r3
    2f2e:	781b      	ldrb	r3, [r3, #0]
    2f30:	001a      	movs	r2, r3
    2f32:	4b3d      	ldr	r3, [pc, #244]	; (3028 <sd_mmc_spi_adtc_start+0x204>)
    2f34:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    2f36:	2313      	movs	r3, #19
    2f38:	18fb      	adds	r3, r7, r3
    2f3a:	781b      	ldrb	r3, [r3, #0]
    2f3c:	001a      	movs	r2, r3
    2f3e:	2308      	movs	r3, #8
    2f40:	4013      	ands	r3, r2
    2f42:	d004      	beq.n	2f4e <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    2f44:	4b33      	ldr	r3, [pc, #204]	; (3014 <sd_mmc_spi_adtc_start+0x1f0>)
    2f46:	2206      	movs	r2, #6
    2f48:	701a      	strb	r2, [r3, #0]
		return false;
    2f4a:	2300      	movs	r3, #0
    2f4c:	e05d      	b.n	300a <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    2f4e:	2313      	movs	r3, #19
    2f50:	18fb      	adds	r3, r7, r3
    2f52:	781b      	ldrb	r3, [r3, #0]
    2f54:	001a      	movs	r2, r3
    2f56:	2304      	movs	r3, #4
    2f58:	4013      	ands	r3, r2
    2f5a:	d004      	beq.n	2f66 <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    2f5c:	4b2d      	ldr	r3, [pc, #180]	; (3014 <sd_mmc_spi_adtc_start+0x1f0>)
    2f5e:	2209      	movs	r2, #9
    2f60:	701a      	strb	r2, [r3, #0]
		return false;
    2f62:	2300      	movs	r3, #0
    2f64:	e051      	b.n	300a <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    2f66:	2313      	movs	r3, #19
    2f68:	18fb      	adds	r3, r7, r3
    2f6a:	781b      	ldrb	r3, [r3, #0]
    2f6c:	001a      	movs	r2, r3
    2f6e:	2301      	movs	r3, #1
    2f70:	439a      	bics	r2, r3
    2f72:	1e13      	subs	r3, r2, #0
    2f74:	d004      	beq.n	2f80 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    2f76:	4b27      	ldr	r3, [pc, #156]	; (3014 <sd_mmc_spi_adtc_start+0x1f0>)
    2f78:	2201      	movs	r2, #1
    2f7a:	701a      	strb	r2, [r3, #0]
		return false;
    2f7c:	2300      	movs	r3, #0
    2f7e:	e044      	b.n	300a <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    2f80:	68fa      	ldr	r2, [r7, #12]
    2f82:	2380      	movs	r3, #128	; 0x80
    2f84:	019b      	lsls	r3, r3, #6
    2f86:	4013      	ands	r3, r2
    2f88:	d00d      	beq.n	2fa6 <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2f8a:	4b28      	ldr	r3, [pc, #160]	; (302c <sd_mmc_spi_adtc_start+0x208>)
    2f8c:	4798      	blx	r3
    2f8e:	0003      	movs	r3, r0
    2f90:	001a      	movs	r2, r3
    2f92:	2301      	movs	r3, #1
    2f94:	4053      	eors	r3, r2
    2f96:	b2db      	uxtb	r3, r3
    2f98:	2b00      	cmp	r3, #0
    2f9a:	d004      	beq.n	2fa6 <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    2f9c:	4b1d      	ldr	r3, [pc, #116]	; (3014 <sd_mmc_spi_adtc_start+0x1f0>)
    2f9e:	2203      	movs	r2, #3
    2fa0:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    2fa2:	2300      	movs	r3, #0
    2fa4:	e031      	b.n	300a <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    2fa6:	68fa      	ldr	r2, [r7, #12]
    2fa8:	2380      	movs	r3, #128	; 0x80
    2faa:	009b      	lsls	r3, r3, #2
    2fac:	4013      	ands	r3, r2
    2fae:	d00e      	beq.n	2fce <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    2fb0:	4b1d      	ldr	r3, [pc, #116]	; (3028 <sd_mmc_spi_adtc_start+0x204>)
    2fb2:	2200      	movs	r2, #0
    2fb4:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    2fb6:	231c      	movs	r3, #28
    2fb8:	18fb      	adds	r3, r7, r3
    2fba:	881b      	ldrh	r3, [r3, #0]
    2fbc:	491a      	ldr	r1, [pc, #104]	; (3028 <sd_mmc_spi_adtc_start+0x204>)
    2fbe:	4817      	ldr	r0, [pc, #92]	; (301c <sd_mmc_spi_adtc_start+0x1f8>)
    2fc0:	2201      	movs	r2, #1
    2fc2:	4c18      	ldr	r4, [pc, #96]	; (3024 <sd_mmc_spi_adtc_start+0x200>)
    2fc4:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    2fc6:	4b18      	ldr	r3, [pc, #96]	; (3028 <sd_mmc_spi_adtc_start+0x204>)
    2fc8:	681a      	ldr	r2, [r3, #0]
    2fca:	4b17      	ldr	r3, [pc, #92]	; (3028 <sd_mmc_spi_adtc_start+0x204>)
    2fcc:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    2fce:	68fa      	ldr	r2, [r7, #12]
    2fd0:	2380      	movs	r3, #128	; 0x80
    2fd2:	00db      	lsls	r3, r3, #3
    2fd4:	4013      	ands	r3, r2
    2fd6:	d00c      	beq.n	2ff2 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    2fd8:	231c      	movs	r3, #28
    2fda:	18fb      	adds	r3, r7, r3
    2fdc:	881b      	ldrh	r3, [r3, #0]
    2fde:	4912      	ldr	r1, [pc, #72]	; (3028 <sd_mmc_spi_adtc_start+0x204>)
    2fe0:	480e      	ldr	r0, [pc, #56]	; (301c <sd_mmc_spi_adtc_start+0x1f8>)
    2fe2:	2204      	movs	r2, #4
    2fe4:	4c0f      	ldr	r4, [pc, #60]	; (3024 <sd_mmc_spi_adtc_start+0x200>)
    2fe6:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2fe8:	4b0f      	ldr	r3, [pc, #60]	; (3028 <sd_mmc_spi_adtc_start+0x204>)
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	ba1a      	rev	r2, r3
    2fee:	4b0e      	ldr	r3, [pc, #56]	; (3028 <sd_mmc_spi_adtc_start+0x204>)
    2ff0:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2ff2:	4b0f      	ldr	r3, [pc, #60]	; (3030 <sd_mmc_spi_adtc_start+0x20c>)
    2ff4:	1dba      	adds	r2, r7, #6
    2ff6:	8812      	ldrh	r2, [r2, #0]
    2ff8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2ffa:	4b0e      	ldr	r3, [pc, #56]	; (3034 <sd_mmc_spi_adtc_start+0x210>)
    2ffc:	1d3a      	adds	r2, r7, #4
    2ffe:	8812      	ldrh	r2, [r2, #0]
    3000:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    3002:	4b0d      	ldr	r3, [pc, #52]	; (3038 <sd_mmc_spi_adtc_start+0x214>)
    3004:	2200      	movs	r2, #0
    3006:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    3008:	2301      	movs	r3, #1
}
    300a:	0018      	movs	r0, r3
    300c:	46bd      	mov	sp, r7
    300e:	b009      	add	sp, #36	; 0x24
    3010:	bd90      	pop	{r4, r7, pc}
    3012:	46c0      	nop			; (mov r8, r8)
    3014:	20000143 	.word	0x20000143
    3018:	000028a9 	.word	0x000028a9
    301c:	20000100 	.word	0x20000100
    3020:	00004c31 	.word	0x00004c31
    3024:	00004a0d 	.word	0x00004a0d
    3028:	20000144 	.word	0x20000144
    302c:	00002965 	.word	0x00002965
    3030:	2000014c 	.word	0x2000014c
    3034:	2000014e 	.word	0x2000014e
    3038:	20000148 	.word	0x20000148

0000303c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    303c:	b580      	push	{r7, lr}
    303e:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    3040:	4b02      	ldr	r3, [pc, #8]	; (304c <sd_mmc_spi_get_response+0x10>)
    3042:	681b      	ldr	r3, [r3, #0]
}
    3044:	0018      	movs	r0, r3
    3046:	46bd      	mov	sp, r7
    3048:	bd80      	pop	{r7, pc}
    304a:	46c0      	nop			; (mov r8, r8)
    304c:	20000144 	.word	0x20000144

00003050 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    3050:	b590      	push	{r4, r7, lr}
    3052:	b085      	sub	sp, #20
    3054:	af00      	add	r7, sp, #0
    3056:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    3058:	230e      	movs	r3, #14
    305a:	18fb      	adds	r3, r7, r3
    305c:	22ff      	movs	r2, #255	; 0xff
    305e:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3060:	4b1c      	ldr	r3, [pc, #112]	; (30d4 <sd_mmc_spi_read_word+0x84>)
    3062:	2200      	movs	r2, #0
    3064:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3066:	4b1c      	ldr	r3, [pc, #112]	; (30d8 <sd_mmc_spi_read_word+0x88>)
    3068:	681a      	ldr	r2, [r3, #0]
    306a:	4b1c      	ldr	r3, [pc, #112]	; (30dc <sd_mmc_spi_read_word+0x8c>)
    306c:	881b      	ldrh	r3, [r3, #0]
    306e:	0019      	movs	r1, r3
    3070:	4b1b      	ldr	r3, [pc, #108]	; (30e0 <sd_mmc_spi_read_word+0x90>)
    3072:	0010      	movs	r0, r2
    3074:	4798      	blx	r3
    3076:	1e0b      	subs	r3, r1, #0
    3078:	d10a      	bne.n	3090 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    307a:	4b1a      	ldr	r3, [pc, #104]	; (30e4 <sd_mmc_spi_read_word+0x94>)
    307c:	4798      	blx	r3
    307e:	0003      	movs	r3, r0
    3080:	001a      	movs	r2, r3
    3082:	2301      	movs	r3, #1
    3084:	4053      	eors	r3, r2
    3086:	b2db      	uxtb	r3, r3
    3088:	2b00      	cmp	r3, #0
    308a:	d001      	beq.n	3090 <sd_mmc_spi_read_word+0x40>
			return false;
    308c:	2300      	movs	r3, #0
    308e:	e01d      	b.n	30cc <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    3090:	230e      	movs	r3, #14
    3092:	18fb      	adds	r3, r7, r3
    3094:	881b      	ldrh	r3, [r3, #0]
    3096:	1d39      	adds	r1, r7, #4
    3098:	4813      	ldr	r0, [pc, #76]	; (30e8 <sd_mmc_spi_read_word+0x98>)
    309a:	2204      	movs	r2, #4
    309c:	4c13      	ldr	r4, [pc, #76]	; (30ec <sd_mmc_spi_read_word+0x9c>)
    309e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	687a      	ldr	r2, [r7, #4]
    30a4:	6812      	ldr	r2, [r2, #0]
    30a6:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    30a8:	4b0b      	ldr	r3, [pc, #44]	; (30d8 <sd_mmc_spi_read_word+0x88>)
    30aa:	681b      	ldr	r3, [r3, #0]
    30ac:	1d1a      	adds	r2, r3, #4
    30ae:	4b0a      	ldr	r3, [pc, #40]	; (30d8 <sd_mmc_spi_read_word+0x88>)
    30b0:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    30b2:	4b09      	ldr	r3, [pc, #36]	; (30d8 <sd_mmc_spi_read_word+0x88>)
    30b4:	681a      	ldr	r2, [r3, #0]
    30b6:	4b09      	ldr	r3, [pc, #36]	; (30dc <sd_mmc_spi_read_word+0x8c>)
    30b8:	881b      	ldrh	r3, [r3, #0]
    30ba:	0019      	movs	r1, r3
    30bc:	4b08      	ldr	r3, [pc, #32]	; (30e0 <sd_mmc_spi_read_word+0x90>)
    30be:	0010      	movs	r0, r2
    30c0:	4798      	blx	r3
    30c2:	1e0b      	subs	r3, r1, #0
    30c4:	d101      	bne.n	30ca <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    30c6:	4b0a      	ldr	r3, [pc, #40]	; (30f0 <sd_mmc_spi_read_word+0xa0>)
    30c8:	4798      	blx	r3
	}
	return true;
    30ca:	2301      	movs	r3, #1
}
    30cc:	0018      	movs	r0, r3
    30ce:	46bd      	mov	sp, r7
    30d0:	b005      	add	sp, #20
    30d2:	bd90      	pop	{r4, r7, pc}
    30d4:	20000143 	.word	0x20000143
    30d8:	20000148 	.word	0x20000148
    30dc:	2000014c 	.word	0x2000014c
    30e0:	0000b895 	.word	0x0000b895
    30e4:	000029d1 	.word	0x000029d1
    30e8:	20000100 	.word	0x20000100
    30ec:	00004a0d 	.word	0x00004a0d
    30f0:	00002a55 	.word	0x00002a55

000030f4 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    30f4:	b590      	push	{r4, r7, lr}
    30f6:	b085      	sub	sp, #20
    30f8:	af00      	add	r7, sp, #0
    30fa:	6078      	str	r0, [r7, #4]
    30fc:	000a      	movs	r2, r1
    30fe:	1cbb      	adds	r3, r7, #2
    3100:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    3102:	230a      	movs	r3, #10
    3104:	18fb      	adds	r3, r7, r3
    3106:	22ff      	movs	r2, #255	; 0xff
    3108:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    310a:	4b1c      	ldr	r3, [pc, #112]	; (317c <sd_mmc_spi_start_read_blocks+0x88>)
    310c:	2200      	movs	r2, #0
    310e:	701a      	strb	r2, [r3, #0]
	pos = 0;
    3110:	2300      	movs	r3, #0
    3112:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    3114:	e025      	b.n	3162 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    3116:	4b1a      	ldr	r3, [pc, #104]	; (3180 <sd_mmc_spi_start_read_blocks+0x8c>)
    3118:	4798      	blx	r3
    311a:	0003      	movs	r3, r0
    311c:	001a      	movs	r2, r3
    311e:	2301      	movs	r3, #1
    3120:	4053      	eors	r3, r2
    3122:	b2db      	uxtb	r3, r3
    3124:	2b00      	cmp	r3, #0
    3126:	d001      	beq.n	312c <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    3128:	2300      	movs	r3, #0
    312a:	e022      	b.n	3172 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    312c:	687a      	ldr	r2, [r7, #4]
    312e:	68fb      	ldr	r3, [r7, #12]
    3130:	18d1      	adds	r1, r2, r3
    3132:	4b14      	ldr	r3, [pc, #80]	; (3184 <sd_mmc_spi_start_read_blocks+0x90>)
    3134:	881a      	ldrh	r2, [r3, #0]
    3136:	230a      	movs	r3, #10
    3138:	18fb      	adds	r3, r7, r3
    313a:	881b      	ldrh	r3, [r3, #0]
    313c:	4812      	ldr	r0, [pc, #72]	; (3188 <sd_mmc_spi_start_read_blocks+0x94>)
    313e:	4c13      	ldr	r4, [pc, #76]	; (318c <sd_mmc_spi_start_read_blocks+0x98>)
    3140:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    3142:	4b10      	ldr	r3, [pc, #64]	; (3184 <sd_mmc_spi_start_read_blocks+0x90>)
    3144:	881b      	ldrh	r3, [r3, #0]
    3146:	001a      	movs	r2, r3
    3148:	68fb      	ldr	r3, [r7, #12]
    314a:	189b      	adds	r3, r3, r2
    314c:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    314e:	4b0d      	ldr	r3, [pc, #52]	; (3184 <sd_mmc_spi_start_read_blocks+0x90>)
    3150:	881b      	ldrh	r3, [r3, #0]
    3152:	001a      	movs	r2, r3
    3154:	4b0e      	ldr	r3, [pc, #56]	; (3190 <sd_mmc_spi_start_read_blocks+0x9c>)
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	18d2      	adds	r2, r2, r3
    315a:	4b0d      	ldr	r3, [pc, #52]	; (3190 <sd_mmc_spi_start_read_blocks+0x9c>)
    315c:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    315e:	4b0d      	ldr	r3, [pc, #52]	; (3194 <sd_mmc_spi_start_read_blocks+0xa0>)
    3160:	4798      	blx	r3
	while (nb_block--) {
    3162:	1cbb      	adds	r3, r7, #2
    3164:	881b      	ldrh	r3, [r3, #0]
    3166:	1cba      	adds	r2, r7, #2
    3168:	1e59      	subs	r1, r3, #1
    316a:	8011      	strh	r1, [r2, #0]
    316c:	2b00      	cmp	r3, #0
    316e:	d1d2      	bne.n	3116 <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    3170:	2301      	movs	r3, #1
}
    3172:	0018      	movs	r0, r3
    3174:	46bd      	mov	sp, r7
    3176:	b005      	add	sp, #20
    3178:	bd90      	pop	{r4, r7, pc}
    317a:	46c0      	nop			; (mov r8, r8)
    317c:	20000143 	.word	0x20000143
    3180:	000029d1 	.word	0x000029d1
    3184:	2000014c 	.word	0x2000014c
    3188:	20000100 	.word	0x20000100
    318c:	00004a0d 	.word	0x00004a0d
    3190:	20000148 	.word	0x20000148
    3194:	00002a55 	.word	0x00002a55

00003198 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    3198:	b580      	push	{r7, lr}
    319a:	af00      	add	r7, sp, #0
	return true;
    319c:	2301      	movs	r3, #1
}
    319e:	0018      	movs	r0, r3
    31a0:	46bd      	mov	sp, r7
    31a2:	bd80      	pop	{r7, pc}

000031a4 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    31a4:	b580      	push	{r7, lr}
    31a6:	b084      	sub	sp, #16
    31a8:	af00      	add	r7, sp, #0
    31aa:	6078      	str	r0, [r7, #4]
    31ac:	000a      	movs	r2, r1
    31ae:	1cbb      	adds	r3, r7, #2
    31b0:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    31b2:	4b24      	ldr	r3, [pc, #144]	; (3244 <sd_mmc_spi_start_write_blocks+0xa0>)
    31b4:	2200      	movs	r2, #0
    31b6:	701a      	strb	r2, [r3, #0]
	pos = 0;
    31b8:	2300      	movs	r3, #0
    31ba:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    31bc:	e035      	b.n	322a <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    31be:	4b22      	ldr	r3, [pc, #136]	; (3248 <sd_mmc_spi_start_write_blocks+0xa4>)
    31c0:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    31c2:	687a      	ldr	r2, [r7, #4]
    31c4:	68fb      	ldr	r3, [r7, #12]
    31c6:	18d1      	adds	r1, r2, r3
    31c8:	4b20      	ldr	r3, [pc, #128]	; (324c <sd_mmc_spi_start_write_blocks+0xa8>)
    31ca:	881a      	ldrh	r2, [r3, #0]
    31cc:	4b20      	ldr	r3, [pc, #128]	; (3250 <sd_mmc_spi_start_write_blocks+0xac>)
    31ce:	0018      	movs	r0, r3
    31d0:	4b20      	ldr	r3, [pc, #128]	; (3254 <sd_mmc_spi_start_write_blocks+0xb0>)
    31d2:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    31d4:	4b1d      	ldr	r3, [pc, #116]	; (324c <sd_mmc_spi_start_write_blocks+0xa8>)
    31d6:	881b      	ldrh	r3, [r3, #0]
    31d8:	001a      	movs	r2, r3
    31da:	68fb      	ldr	r3, [r7, #12]
    31dc:	189b      	adds	r3, r3, r2
    31de:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    31e0:	4b1a      	ldr	r3, [pc, #104]	; (324c <sd_mmc_spi_start_write_blocks+0xa8>)
    31e2:	881b      	ldrh	r3, [r3, #0]
    31e4:	001a      	movs	r2, r3
    31e6:	4b1c      	ldr	r3, [pc, #112]	; (3258 <sd_mmc_spi_start_write_blocks+0xb4>)
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	18d2      	adds	r2, r2, r3
    31ec:	4b1a      	ldr	r3, [pc, #104]	; (3258 <sd_mmc_spi_start_write_blocks+0xb4>)
    31ee:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    31f0:	4b1a      	ldr	r3, [pc, #104]	; (325c <sd_mmc_spi_start_write_blocks+0xb8>)
    31f2:	4798      	blx	r3
    31f4:	0003      	movs	r3, r0
    31f6:	001a      	movs	r2, r3
    31f8:	2301      	movs	r3, #1
    31fa:	4053      	eors	r3, r2
    31fc:	b2db      	uxtb	r3, r3
    31fe:	2b00      	cmp	r3, #0
    3200:	d001      	beq.n	3206 <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    3202:	2300      	movs	r3, #0
    3204:	e019      	b.n	323a <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    3206:	1cbb      	adds	r3, r7, #2
    3208:	881b      	ldrh	r3, [r3, #0]
    320a:	2b00      	cmp	r3, #0
    320c:	d00d      	beq.n	322a <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    320e:	4b14      	ldr	r3, [pc, #80]	; (3260 <sd_mmc_spi_start_write_blocks+0xbc>)
    3210:	4798      	blx	r3
    3212:	0003      	movs	r3, r0
    3214:	001a      	movs	r2, r3
    3216:	2301      	movs	r3, #1
    3218:	4053      	eors	r3, r2
    321a:	b2db      	uxtb	r3, r3
    321c:	2b00      	cmp	r3, #0
    321e:	d004      	beq.n	322a <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    3220:	4b08      	ldr	r3, [pc, #32]	; (3244 <sd_mmc_spi_start_write_blocks+0xa0>)
    3222:	2205      	movs	r2, #5
    3224:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    3226:	2300      	movs	r3, #0
    3228:	e007      	b.n	323a <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    322a:	1cbb      	adds	r3, r7, #2
    322c:	881b      	ldrh	r3, [r3, #0]
    322e:	1cba      	adds	r2, r7, #2
    3230:	1e59      	subs	r1, r3, #1
    3232:	8011      	strh	r1, [r2, #0]
    3234:	2b00      	cmp	r3, #0
    3236:	d1c2      	bne.n	31be <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    3238:	2301      	movs	r3, #1
}
    323a:	0018      	movs	r0, r3
    323c:	46bd      	mov	sp, r7
    323e:	b004      	add	sp, #16
    3240:	bd80      	pop	{r7, pc}
    3242:	46c0      	nop			; (mov r8, r8)
    3244:	20000143 	.word	0x20000143
    3248:	00002a81 	.word	0x00002a81
    324c:	2000014c 	.word	0x2000014c
    3250:	20000100 	.word	0x20000100
    3254:	00004c31 	.word	0x00004c31
    3258:	20000148 	.word	0x20000148
    325c:	00002ad1 	.word	0x00002ad1
    3260:	00002965 	.word	0x00002965

00003264 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    3264:	b580      	push	{r7, lr}
    3266:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    3268:	4b09      	ldr	r3, [pc, #36]	; (3290 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    326a:	4798      	blx	r3
    326c:	0003      	movs	r3, r0
    326e:	001a      	movs	r2, r3
    3270:	2301      	movs	r3, #1
    3272:	4053      	eors	r3, r2
    3274:	b2db      	uxtb	r3, r3
    3276:	2b00      	cmp	r3, #0
    3278:	d004      	beq.n	3284 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    327a:	4b06      	ldr	r3, [pc, #24]	; (3294 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    327c:	2205      	movs	r2, #5
    327e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    3280:	2300      	movs	r3, #0
    3282:	e002      	b.n	328a <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    3284:	4b04      	ldr	r3, [pc, #16]	; (3298 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    3286:	4798      	blx	r3
    3288:	0003      	movs	r3, r0
}
    328a:	0018      	movs	r0, r3
    328c:	46bd      	mov	sp, r7
    328e:	bd80      	pop	{r7, pc}
    3290:	00002965 	.word	0x00002965
    3294:	20000143 	.word	0x20000143
    3298:	00002b65 	.word	0x00002b65

0000329c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    329c:	b580      	push	{r7, lr}
    329e:	b084      	sub	sp, #16
    32a0:	af00      	add	r7, sp, #0
    32a2:	0002      	movs	r2, r0
    32a4:	1dfb      	adds	r3, r7, #7
    32a6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    32a8:	1dfb      	adds	r3, r7, #7
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	2b00      	cmp	r3, #0
    32ae:	d108      	bne.n	32c2 <mem_test_unit_ready+0x26>
    32b0:	1dfb      	adds	r3, r7, #7
    32b2:	781a      	ldrb	r2, [r3, #0]
    32b4:	4b08      	ldr	r3, [pc, #32]	; (32d8 <mem_test_unit_ready+0x3c>)
    32b6:	0152      	lsls	r2, r2, #5
    32b8:	58d3      	ldr	r3, [r2, r3]
    32ba:	4798      	blx	r3
    32bc:	0003      	movs	r3, r0
    32be:	001a      	movs	r2, r3
    32c0:	e000      	b.n	32c4 <mem_test_unit_ready+0x28>
    32c2:	2201      	movs	r2, #1
  status =
    32c4:	230f      	movs	r3, #15
    32c6:	18fb      	adds	r3, r7, r3
    32c8:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    32ca:	230f      	movs	r3, #15
    32cc:	18fb      	adds	r3, r7, r3
    32ce:	781b      	ldrb	r3, [r3, #0]
}
    32d0:	0018      	movs	r0, r3
    32d2:	46bd      	mov	sp, r7
    32d4:	b004      	add	sp, #16
    32d6:	bd80      	pop	{r7, pc}
    32d8:	0000c4cc 	.word	0x0000c4cc

000032dc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b084      	sub	sp, #16
    32e0:	af00      	add	r7, sp, #0
    32e2:	0002      	movs	r2, r0
    32e4:	6039      	str	r1, [r7, #0]
    32e6:	1dfb      	adds	r3, r7, #7
    32e8:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    32ea:	1dfb      	adds	r3, r7, #7
    32ec:	781b      	ldrb	r3, [r3, #0]
    32ee:	2b00      	cmp	r3, #0
    32f0:	d10c      	bne.n	330c <mem_read_capacity+0x30>
    32f2:	1dfb      	adds	r3, r7, #7
    32f4:	781b      	ldrb	r3, [r3, #0]
    32f6:	4a0b      	ldr	r2, [pc, #44]	; (3324 <mem_read_capacity+0x48>)
    32f8:	015b      	lsls	r3, r3, #5
    32fa:	18d3      	adds	r3, r2, r3
    32fc:	3304      	adds	r3, #4
    32fe:	681b      	ldr	r3, [r3, #0]
    3300:	683a      	ldr	r2, [r7, #0]
    3302:	0010      	movs	r0, r2
    3304:	4798      	blx	r3
    3306:	0003      	movs	r3, r0
    3308:	001a      	movs	r2, r3
    330a:	e000      	b.n	330e <mem_read_capacity+0x32>
    330c:	2201      	movs	r2, #1
  status =
    330e:	230f      	movs	r3, #15
    3310:	18fb      	adds	r3, r7, r3
    3312:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    3314:	230f      	movs	r3, #15
    3316:	18fb      	adds	r3, r7, r3
    3318:	781b      	ldrb	r3, [r3, #0]
}
    331a:	0018      	movs	r0, r3
    331c:	46bd      	mov	sp, r7
    331e:	b004      	add	sp, #16
    3320:	bd80      	pop	{r7, pc}
    3322:	46c0      	nop			; (mov r8, r8)
    3324:	0000c4cc 	.word	0x0000c4cc

00003328 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    3328:	b580      	push	{r7, lr}
    332a:	b084      	sub	sp, #16
    332c:	af00      	add	r7, sp, #0
    332e:	0002      	movs	r2, r0
    3330:	1dfb      	adds	r3, r7, #7
    3332:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    3334:	1dfb      	adds	r3, r7, #7
    3336:	781b      	ldrb	r3, [r3, #0]
    3338:	425a      	negs	r2, r3
    333a:	4153      	adcs	r3, r2
    333c:	b2da      	uxtb	r2, r3
  sector_size =
    333e:	230f      	movs	r3, #15
    3340:	18fb      	adds	r3, r7, r3
    3342:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    3344:	230f      	movs	r3, #15
    3346:	18fb      	adds	r3, r7, r3
    3348:	781b      	ldrb	r3, [r3, #0]
}
    334a:	0018      	movs	r0, r3
    334c:	46bd      	mov	sp, r7
    334e:	b004      	add	sp, #16
    3350:	bd80      	pop	{r7, pc}
	...

00003354 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    3354:	b580      	push	{r7, lr}
    3356:	b084      	sub	sp, #16
    3358:	af00      	add	r7, sp, #0
    335a:	0002      	movs	r2, r0
    335c:	1dfb      	adds	r3, r7, #7
    335e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    3360:	1dfb      	adds	r3, r7, #7
    3362:	781b      	ldrb	r3, [r3, #0]
    3364:	2b00      	cmp	r3, #0
    3366:	d109      	bne.n	337c <mem_wr_protect+0x28>
    3368:	1dfb      	adds	r3, r7, #7
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	4a0a      	ldr	r2, [pc, #40]	; (3398 <mem_wr_protect+0x44>)
    336e:	015b      	lsls	r3, r3, #5
    3370:	18d3      	adds	r3, r2, r3
    3372:	330c      	adds	r3, #12
    3374:	681b      	ldr	r3, [r3, #0]
    3376:	4798      	blx	r3
    3378:	1e03      	subs	r3, r0, #0
    337a:	d001      	beq.n	3380 <mem_wr_protect+0x2c>
    337c:	2201      	movs	r2, #1
    337e:	e000      	b.n	3382 <mem_wr_protect+0x2e>
    3380:	2200      	movs	r2, #0
  wr_protect =
    3382:	230f      	movs	r3, #15
    3384:	18fb      	adds	r3, r7, r3
    3386:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    3388:	230f      	movs	r3, #15
    338a:	18fb      	adds	r3, r7, r3
    338c:	781b      	ldrb	r3, [r3, #0]
}
    338e:	0018      	movs	r0, r3
    3390:	46bd      	mov	sp, r7
    3392:	b004      	add	sp, #16
    3394:	bd80      	pop	{r7, pc}
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	0000c4cc 	.word	0x0000c4cc

0000339c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    339c:	b580      	push	{r7, lr}
    339e:	b086      	sub	sp, #24
    33a0:	af00      	add	r7, sp, #0
    33a2:	60b9      	str	r1, [r7, #8]
    33a4:	607a      	str	r2, [r7, #4]
    33a6:	230f      	movs	r3, #15
    33a8:	18fb      	adds	r3, r7, r3
    33aa:	1c02      	adds	r2, r0, #0
    33ac:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    33ae:	230f      	movs	r3, #15
    33b0:	18fb      	adds	r3, r7, r3
    33b2:	781b      	ldrb	r3, [r3, #0]
    33b4:	2b00      	cmp	r3, #0
    33b6:	d10e      	bne.n	33d6 <memory_2_ram+0x3a>
    33b8:	230f      	movs	r3, #15
    33ba:	18fb      	adds	r3, r7, r3
    33bc:	781b      	ldrb	r3, [r3, #0]
    33be:	4a0b      	ldr	r2, [pc, #44]	; (33ec <memory_2_ram+0x50>)
    33c0:	015b      	lsls	r3, r3, #5
    33c2:	18d3      	adds	r3, r2, r3
    33c4:	3314      	adds	r3, #20
    33c6:	681b      	ldr	r3, [r3, #0]
    33c8:	6879      	ldr	r1, [r7, #4]
    33ca:	68ba      	ldr	r2, [r7, #8]
    33cc:	0010      	movs	r0, r2
    33ce:	4798      	blx	r3
    33d0:	0003      	movs	r3, r0
    33d2:	001a      	movs	r2, r3
    33d4:	e000      	b.n	33d8 <memory_2_ram+0x3c>
    33d6:	2201      	movs	r2, #1
  status =
    33d8:	2317      	movs	r3, #23
    33da:	18fb      	adds	r3, r7, r3
    33dc:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    33de:	2317      	movs	r3, #23
    33e0:	18fb      	adds	r3, r7, r3
    33e2:	781b      	ldrb	r3, [r3, #0]
}
    33e4:	0018      	movs	r0, r3
    33e6:	46bd      	mov	sp, r7
    33e8:	b006      	add	sp, #24
    33ea:	bd80      	pop	{r7, pc}
    33ec:	0000c4cc 	.word	0x0000c4cc

000033f0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    33f0:	b580      	push	{r7, lr}
    33f2:	b086      	sub	sp, #24
    33f4:	af00      	add	r7, sp, #0
    33f6:	60b9      	str	r1, [r7, #8]
    33f8:	607a      	str	r2, [r7, #4]
    33fa:	230f      	movs	r3, #15
    33fc:	18fb      	adds	r3, r7, r3
    33fe:	1c02      	adds	r2, r0, #0
    3400:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    3402:	230f      	movs	r3, #15
    3404:	18fb      	adds	r3, r7, r3
    3406:	781b      	ldrb	r3, [r3, #0]
    3408:	2b00      	cmp	r3, #0
    340a:	d10e      	bne.n	342a <ram_2_memory+0x3a>
    340c:	230f      	movs	r3, #15
    340e:	18fb      	adds	r3, r7, r3
    3410:	781b      	ldrb	r3, [r3, #0]
    3412:	4a0b      	ldr	r2, [pc, #44]	; (3440 <ram_2_memory+0x50>)
    3414:	015b      	lsls	r3, r3, #5
    3416:	18d3      	adds	r3, r2, r3
    3418:	3318      	adds	r3, #24
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	6879      	ldr	r1, [r7, #4]
    341e:	68ba      	ldr	r2, [r7, #8]
    3420:	0010      	movs	r0, r2
    3422:	4798      	blx	r3
    3424:	0003      	movs	r3, r0
    3426:	001a      	movs	r2, r3
    3428:	e000      	b.n	342c <ram_2_memory+0x3c>
    342a:	2201      	movs	r2, #1
  status =
    342c:	2317      	movs	r3, #23
    342e:	18fb      	adds	r3, r7, r3
    3430:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    3432:	2317      	movs	r3, #23
    3434:	18fb      	adds	r3, r7, r3
    3436:	781b      	ldrb	r3, [r3, #0]
}
    3438:	0018      	movs	r0, r3
    343a:	46bd      	mov	sp, r7
    343c:	b006      	add	sp, #24
    343e:	bd80      	pop	{r7, pc}
    3440:	0000c4cc 	.word	0x0000c4cc

00003444 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3444:	b580      	push	{r7, lr}
    3446:	b082      	sub	sp, #8
    3448:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    344a:	4b10      	ldr	r3, [pc, #64]	; (348c <cpu_irq_enter_critical+0x48>)
    344c:	681b      	ldr	r3, [r3, #0]
    344e:	2b00      	cmp	r3, #0
    3450:	d112      	bne.n	3478 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3452:	f3ef 8310 	mrs	r3, PRIMASK
    3456:	607b      	str	r3, [r7, #4]
  return(result);
    3458:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    345a:	2b00      	cmp	r3, #0
    345c:	d109      	bne.n	3472 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    345e:	b672      	cpsid	i
    3460:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3464:	4b0a      	ldr	r3, [pc, #40]	; (3490 <cpu_irq_enter_critical+0x4c>)
    3466:	2200      	movs	r2, #0
    3468:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    346a:	4b0a      	ldr	r3, [pc, #40]	; (3494 <cpu_irq_enter_critical+0x50>)
    346c:	2201      	movs	r2, #1
    346e:	701a      	strb	r2, [r3, #0]
    3470:	e002      	b.n	3478 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3472:	4b08      	ldr	r3, [pc, #32]	; (3494 <cpu_irq_enter_critical+0x50>)
    3474:	2200      	movs	r2, #0
    3476:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3478:	4b04      	ldr	r3, [pc, #16]	; (348c <cpu_irq_enter_critical+0x48>)
    347a:	681b      	ldr	r3, [r3, #0]
    347c:	1c5a      	adds	r2, r3, #1
    347e:	4b03      	ldr	r3, [pc, #12]	; (348c <cpu_irq_enter_critical+0x48>)
    3480:	601a      	str	r2, [r3, #0]
}
    3482:	46c0      	nop			; (mov r8, r8)
    3484:	46bd      	mov	sp, r7
    3486:	b002      	add	sp, #8
    3488:	bd80      	pop	{r7, pc}
    348a:	46c0      	nop			; (mov r8, r8)
    348c:	20000150 	.word	0x20000150
    3490:	20000009 	.word	0x20000009
    3494:	20000154 	.word	0x20000154

00003498 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3498:	b580      	push	{r7, lr}
    349a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    349c:	4b0b      	ldr	r3, [pc, #44]	; (34cc <cpu_irq_leave_critical+0x34>)
    349e:	681b      	ldr	r3, [r3, #0]
    34a0:	1e5a      	subs	r2, r3, #1
    34a2:	4b0a      	ldr	r3, [pc, #40]	; (34cc <cpu_irq_leave_critical+0x34>)
    34a4:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    34a6:	4b09      	ldr	r3, [pc, #36]	; (34cc <cpu_irq_leave_critical+0x34>)
    34a8:	681b      	ldr	r3, [r3, #0]
    34aa:	2b00      	cmp	r3, #0
    34ac:	d10a      	bne.n	34c4 <cpu_irq_leave_critical+0x2c>
    34ae:	4b08      	ldr	r3, [pc, #32]	; (34d0 <cpu_irq_leave_critical+0x38>)
    34b0:	781b      	ldrb	r3, [r3, #0]
    34b2:	b2db      	uxtb	r3, r3
    34b4:	2b00      	cmp	r3, #0
    34b6:	d005      	beq.n	34c4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    34b8:	4b06      	ldr	r3, [pc, #24]	; (34d4 <cpu_irq_leave_critical+0x3c>)
    34ba:	2201      	movs	r2, #1
    34bc:	701a      	strb	r2, [r3, #0]
    34be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    34c2:	b662      	cpsie	i
	}
}
    34c4:	46c0      	nop			; (mov r8, r8)
    34c6:	46bd      	mov	sp, r7
    34c8:	bd80      	pop	{r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	20000150 	.word	0x20000150
    34d0:	20000154 	.word	0x20000154
    34d4:	20000009 	.word	0x20000009

000034d8 <system_pinmux_get_config_defaults>:
{
    34d8:	b580      	push	{r7, lr}
    34da:	b082      	sub	sp, #8
    34dc:	af00      	add	r7, sp, #0
    34de:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	2280      	movs	r2, #128	; 0x80
    34e4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	2200      	movs	r2, #0
    34ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	2201      	movs	r2, #1
    34f0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    34f2:	687b      	ldr	r3, [r7, #4]
    34f4:	2200      	movs	r2, #0
    34f6:	70da      	strb	r2, [r3, #3]
}
    34f8:	46c0      	nop			; (mov r8, r8)
    34fa:	46bd      	mov	sp, r7
    34fc:	b002      	add	sp, #8
    34fe:	bd80      	pop	{r7, pc}

00003500 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3500:	b580      	push	{r7, lr}
    3502:	b084      	sub	sp, #16
    3504:	af00      	add	r7, sp, #0
    3506:	0002      	movs	r2, r0
    3508:	6039      	str	r1, [r7, #0]
    350a:	1dfb      	adds	r3, r7, #7
    350c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    350e:	230c      	movs	r3, #12
    3510:	18fb      	adds	r3, r7, r3
    3512:	0018      	movs	r0, r3
    3514:	4b10      	ldr	r3, [pc, #64]	; (3558 <port_pin_set_config+0x58>)
    3516:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3518:	230c      	movs	r3, #12
    351a:	18fb      	adds	r3, r7, r3
    351c:	2280      	movs	r2, #128	; 0x80
    351e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3520:	683b      	ldr	r3, [r7, #0]
    3522:	781a      	ldrb	r2, [r3, #0]
    3524:	230c      	movs	r3, #12
    3526:	18fb      	adds	r3, r7, r3
    3528:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    352a:	683b      	ldr	r3, [r7, #0]
    352c:	785a      	ldrb	r2, [r3, #1]
    352e:	230c      	movs	r3, #12
    3530:	18fb      	adds	r3, r7, r3
    3532:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3534:	683b      	ldr	r3, [r7, #0]
    3536:	789a      	ldrb	r2, [r3, #2]
    3538:	230c      	movs	r3, #12
    353a:	18fb      	adds	r3, r7, r3
    353c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    353e:	230c      	movs	r3, #12
    3540:	18fa      	adds	r2, r7, r3
    3542:	1dfb      	adds	r3, r7, #7
    3544:	781b      	ldrb	r3, [r3, #0]
    3546:	0011      	movs	r1, r2
    3548:	0018      	movs	r0, r3
    354a:	4b04      	ldr	r3, [pc, #16]	; (355c <port_pin_set_config+0x5c>)
    354c:	4798      	blx	r3
}
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	46bd      	mov	sp, r7
    3552:	b004      	add	sp, #16
    3554:	bd80      	pop	{r7, pc}
    3556:	46c0      	nop			; (mov r8, r8)
    3558:	000034d9 	.word	0x000034d9
    355c:	00006dbd 	.word	0x00006dbd

00003560 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3560:	b580      	push	{r7, lr}
    3562:	b082      	sub	sp, #8
    3564:	af00      	add	r7, sp, #0
    3566:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3568:	687b      	ldr	r3, [r7, #4]
    356a:	2200      	movs	r2, #0
    356c:	701a      	strb	r2, [r3, #0]
}
    356e:	46c0      	nop			; (mov r8, r8)
    3570:	46bd      	mov	sp, r7
    3572:	b002      	add	sp, #8
    3574:	bd80      	pop	{r7, pc}
	...

00003578 <system_apb_clock_set_mask>:
{
    3578:	b580      	push	{r7, lr}
    357a:	b082      	sub	sp, #8
    357c:	af00      	add	r7, sp, #0
    357e:	0002      	movs	r2, r0
    3580:	6039      	str	r1, [r7, #0]
    3582:	1dfb      	adds	r3, r7, #7
    3584:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3586:	1dfb      	adds	r3, r7, #7
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	2b01      	cmp	r3, #1
    358c:	d00a      	beq.n	35a4 <system_apb_clock_set_mask+0x2c>
    358e:	2b02      	cmp	r3, #2
    3590:	d00f      	beq.n	35b2 <system_apb_clock_set_mask+0x3a>
    3592:	2b00      	cmp	r3, #0
    3594:	d114      	bne.n	35c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3596:	4b0e      	ldr	r3, [pc, #56]	; (35d0 <system_apb_clock_set_mask+0x58>)
    3598:	4a0d      	ldr	r2, [pc, #52]	; (35d0 <system_apb_clock_set_mask+0x58>)
    359a:	6991      	ldr	r1, [r2, #24]
    359c:	683a      	ldr	r2, [r7, #0]
    359e:	430a      	orrs	r2, r1
    35a0:	619a      	str	r2, [r3, #24]
			break;
    35a2:	e00f      	b.n	35c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    35a4:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <system_apb_clock_set_mask+0x58>)
    35a6:	4a0a      	ldr	r2, [pc, #40]	; (35d0 <system_apb_clock_set_mask+0x58>)
    35a8:	69d1      	ldr	r1, [r2, #28]
    35aa:	683a      	ldr	r2, [r7, #0]
    35ac:	430a      	orrs	r2, r1
    35ae:	61da      	str	r2, [r3, #28]
			break;
    35b0:	e008      	b.n	35c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    35b2:	4b07      	ldr	r3, [pc, #28]	; (35d0 <system_apb_clock_set_mask+0x58>)
    35b4:	4a06      	ldr	r2, [pc, #24]	; (35d0 <system_apb_clock_set_mask+0x58>)
    35b6:	6a11      	ldr	r1, [r2, #32]
    35b8:	683a      	ldr	r2, [r7, #0]
    35ba:	430a      	orrs	r2, r1
    35bc:	621a      	str	r2, [r3, #32]
			break;
    35be:	e001      	b.n	35c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    35c0:	2317      	movs	r3, #23
    35c2:	e000      	b.n	35c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    35c4:	2300      	movs	r3, #0
}
    35c6:	0018      	movs	r0, r3
    35c8:	46bd      	mov	sp, r7
    35ca:	b002      	add	sp, #8
    35cc:	bd80      	pop	{r7, pc}
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	40000400 	.word	0x40000400

000035d4 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    35d4:	b580      	push	{r7, lr}
    35d6:	b084      	sub	sp, #16
    35d8:	af00      	add	r7, sp, #0
    35da:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	681b      	ldr	r3, [r3, #0]
    35e0:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    35e2:	68fb      	ldr	r3, [r7, #12]
    35e4:	7a9b      	ldrb	r3, [r3, #10]
    35e6:	b2db      	uxtb	r3, r3
    35e8:	b25b      	sxtb	r3, r3
    35ea:	2b00      	cmp	r3, #0
    35ec:	da01      	bge.n	35f2 <rtc_calendar_is_syncing+0x1e>
                return true;
    35ee:	2301      	movs	r3, #1
    35f0:	e000      	b.n	35f4 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    35f2:	2300      	movs	r3, #0
}
    35f4:	0018      	movs	r0, r3
    35f6:	46bd      	mov	sp, r7
    35f8:	b004      	add	sp, #16
    35fa:	bd80      	pop	{r7, pc}

000035fc <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    35fc:	b580      	push	{r7, lr}
    35fe:	b084      	sub	sp, #16
    3600:	af00      	add	r7, sp, #0
    3602:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3604:	687b      	ldr	r3, [r7, #4]
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	687b      	ldr	r3, [r7, #4]
    360e:	0018      	movs	r0, r3
    3610:	4b07      	ldr	r3, [pc, #28]	; (3630 <rtc_calendar_enable+0x34>)
    3612:	4798      	blx	r3
    3614:	1e03      	subs	r3, r0, #0
    3616:	d1f9      	bne.n	360c <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    3618:	68fb      	ldr	r3, [r7, #12]
    361a:	881b      	ldrh	r3, [r3, #0]
    361c:	b29b      	uxth	r3, r3
    361e:	2202      	movs	r2, #2
    3620:	4313      	orrs	r3, r2
    3622:	b29a      	uxth	r2, r3
    3624:	68fb      	ldr	r3, [r7, #12]
    3626:	801a      	strh	r2, [r3, #0]
}
    3628:	46c0      	nop			; (mov r8, r8)
    362a:	46bd      	mov	sp, r7
    362c:	b004      	add	sp, #16
    362e:	bd80      	pop	{r7, pc}
    3630:	000035d5 	.word	0x000035d5

00003634 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    3634:	b580      	push	{r7, lr}
    3636:	b084      	sub	sp, #16
    3638:	af00      	add	r7, sp, #0
    363a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    363c:	687b      	ldr	r3, [r7, #4]
    363e:	681b      	ldr	r3, [r3, #0]
    3640:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	687b      	ldr	r3, [r7, #4]
    3646:	0018      	movs	r0, r3
    3648:	4b0a      	ldr	r3, [pc, #40]	; (3674 <rtc_calendar_disable+0x40>)
    364a:	4798      	blx	r3
    364c:	1e03      	subs	r3, r0, #0
    364e:	d1f9      	bne.n	3644 <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    3650:	68fb      	ldr	r3, [r7, #12]
    3652:	22c1      	movs	r2, #193	; 0xc1
    3654:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    3656:	68fb      	ldr	r3, [r7, #12]
    3658:	22c1      	movs	r2, #193	; 0xc1
    365a:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    365c:	68fb      	ldr	r3, [r7, #12]
    365e:	881b      	ldrh	r3, [r3, #0]
    3660:	b29b      	uxth	r3, r3
    3662:	2202      	movs	r2, #2
    3664:	4393      	bics	r3, r2
    3666:	b29a      	uxth	r2, r3
    3668:	68fb      	ldr	r3, [r7, #12]
    366a:	801a      	strh	r2, [r3, #0]
}
    366c:	46c0      	nop			; (mov r8, r8)
    366e:	46bd      	mov	sp, r7
    3670:	b004      	add	sp, #16
    3672:	bd80      	pop	{r7, pc}
    3674:	000035d5 	.word	0x000035d5

00003678 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    3678:	b580      	push	{r7, lr}
    367a:	b084      	sub	sp, #16
    367c:	af00      	add	r7, sp, #0
    367e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	681b      	ldr	r3, [r3, #0]
    3684:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    3686:	687b      	ldr	r3, [r7, #4]
    3688:	0018      	movs	r0, r3
    368a:	4b0a      	ldr	r3, [pc, #40]	; (36b4 <rtc_calendar_reset+0x3c>)
    368c:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    368e:	46c0      	nop			; (mov r8, r8)
    3690:	687b      	ldr	r3, [r7, #4]
    3692:	0018      	movs	r0, r3
    3694:	4b08      	ldr	r3, [pc, #32]	; (36b8 <rtc_calendar_reset+0x40>)
    3696:	4798      	blx	r3
    3698:	1e03      	subs	r3, r0, #0
    369a:	d1f9      	bne.n	3690 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    369c:	68fb      	ldr	r3, [r7, #12]
    369e:	881b      	ldrh	r3, [r3, #0]
    36a0:	b29b      	uxth	r3, r3
    36a2:	2201      	movs	r2, #1
    36a4:	4313      	orrs	r3, r2
    36a6:	b29a      	uxth	r2, r3
    36a8:	68fb      	ldr	r3, [r7, #12]
    36aa:	801a      	strh	r2, [r3, #0]
}
    36ac:	46c0      	nop			; (mov r8, r8)
    36ae:	46bd      	mov	sp, r7
    36b0:	b004      	add	sp, #16
    36b2:	bd80      	pop	{r7, pc}
    36b4:	00003635 	.word	0x00003635
    36b8:	000035d5 	.word	0x000035d5

000036bc <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    36bc:	b580      	push	{r7, lr}
    36be:	b084      	sub	sp, #16
    36c0:	af00      	add	r7, sp, #0
    36c2:	6078      	str	r0, [r7, #4]
    36c4:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    36c6:	683b      	ldr	r3, [r7, #0]
    36c8:	88db      	ldrh	r3, [r3, #6]
    36ca:	001a      	movs	r2, r3
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	88db      	ldrh	r3, [r3, #6]
    36d0:	1ad3      	subs	r3, r2, r3
    36d2:	069b      	lsls	r3, r3, #26
    36d4:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    36d6:	683b      	ldr	r3, [r7, #0]
    36d8:	795b      	ldrb	r3, [r3, #5]
    36da:	059b      	lsls	r3, r3, #22
    36dc:	001a      	movs	r2, r3
    36de:	68fb      	ldr	r3, [r7, #12]
    36e0:	4313      	orrs	r3, r2
    36e2:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    36e4:	683b      	ldr	r3, [r7, #0]
    36e6:	791b      	ldrb	r3, [r3, #4]
    36e8:	045b      	lsls	r3, r3, #17
    36ea:	001a      	movs	r2, r3
    36ec:	68fb      	ldr	r3, [r7, #12]
    36ee:	4313      	orrs	r3, r2
    36f0:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    36f2:	683b      	ldr	r3, [r7, #0]
    36f4:	789b      	ldrb	r3, [r3, #2]
    36f6:	031b      	lsls	r3, r3, #12
    36f8:	001a      	movs	r2, r3
    36fa:	68fb      	ldr	r3, [r7, #12]
    36fc:	4313      	orrs	r3, r2
    36fe:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    3700:	687b      	ldr	r3, [r7, #4]
    3702:	791b      	ldrb	r3, [r3, #4]
    3704:	2201      	movs	r2, #1
    3706:	4053      	eors	r3, r2
    3708:	b2db      	uxtb	r3, r3
    370a:	2b00      	cmp	r3, #0
    370c:	d008      	beq.n	3720 <rtc_calendar_time_to_register_value+0x64>
    370e:	683b      	ldr	r3, [r7, #0]
    3710:	78db      	ldrb	r3, [r3, #3]
    3712:	2b00      	cmp	r3, #0
    3714:	d004      	beq.n	3720 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    3716:	68fb      	ldr	r3, [r7, #12]
    3718:	2280      	movs	r2, #128	; 0x80
    371a:	0252      	lsls	r2, r2, #9
    371c:	4313      	orrs	r3, r2
    371e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    3720:	683b      	ldr	r3, [r7, #0]
    3722:	785b      	ldrb	r3, [r3, #1]
    3724:	019b      	lsls	r3, r3, #6
    3726:	001a      	movs	r2, r3
    3728:	68fb      	ldr	r3, [r7, #12]
    372a:	4313      	orrs	r3, r2
    372c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    372e:	683b      	ldr	r3, [r7, #0]
    3730:	781b      	ldrb	r3, [r3, #0]
    3732:	001a      	movs	r2, r3
    3734:	68fb      	ldr	r3, [r7, #12]
    3736:	4313      	orrs	r3, r2
    3738:	60fb      	str	r3, [r7, #12]

	return register_value;
    373a:	68fb      	ldr	r3, [r7, #12]
}
    373c:	0018      	movs	r0, r3
    373e:	46bd      	mov	sp, r7
    3740:	b004      	add	sp, #16
    3742:	bd80      	pop	{r7, pc}

00003744 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    3744:	b580      	push	{r7, lr}
    3746:	b084      	sub	sp, #16
    3748:	af00      	add	r7, sp, #0
    374a:	60f8      	str	r0, [r7, #12]
    374c:	60b9      	str	r1, [r7, #8]
    374e:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    3750:	68bb      	ldr	r3, [r7, #8]
    3752:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    3754:	b29a      	uxth	r2, r3
    3756:	68fb      	ldr	r3, [r7, #12]
    3758:	88db      	ldrh	r3, [r3, #6]
    375a:	18d3      	adds	r3, r2, r3
    375c:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    375e:	687b      	ldr	r3, [r7, #4]
    3760:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    3762:	68bb      	ldr	r3, [r7, #8]
    3764:	0d9b      	lsrs	r3, r3, #22
    3766:	b2db      	uxtb	r3, r3
    3768:	220f      	movs	r2, #15
    376a:	4013      	ands	r3, r2
    376c:	b2da      	uxtb	r2, r3
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    3772:	68bb      	ldr	r3, [r7, #8]
    3774:	0c5b      	lsrs	r3, r3, #17
    3776:	b2db      	uxtb	r3, r3
    3778:	221f      	movs	r2, #31
    377a:	4013      	ands	r3, r2
    377c:	b2da      	uxtb	r2, r3
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    3782:	68fb      	ldr	r3, [r7, #12]
    3784:	791b      	ldrb	r3, [r3, #4]
    3786:	2b00      	cmp	r3, #0
    3788:	d008      	beq.n	379c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    378a:	68bb      	ldr	r3, [r7, #8]
    378c:	0b1b      	lsrs	r3, r3, #12
    378e:	b2db      	uxtb	r3, r3
    3790:	221f      	movs	r2, #31
    3792:	4013      	ands	r3, r2
    3794:	b2da      	uxtb	r2, r3
    3796:	687b      	ldr	r3, [r7, #4]
    3798:	709a      	strb	r2, [r3, #2]
    379a:	e010      	b.n	37be <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    379c:	68bb      	ldr	r3, [r7, #8]
    379e:	0b1b      	lsrs	r3, r3, #12
    37a0:	b2db      	uxtb	r3, r3
    37a2:	220f      	movs	r2, #15
    37a4:	4013      	ands	r3, r2
    37a6:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    37a8:	687b      	ldr	r3, [r7, #4]
    37aa:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    37ac:	68ba      	ldr	r2, [r7, #8]
    37ae:	2380      	movs	r3, #128	; 0x80
    37b0:	025b      	lsls	r3, r3, #9
    37b2:	4013      	ands	r3, r2
    37b4:	1e5a      	subs	r2, r3, #1
    37b6:	4193      	sbcs	r3, r2
    37b8:	b2da      	uxtb	r2, r3
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    37be:	68bb      	ldr	r3, [r7, #8]
    37c0:	099b      	lsrs	r3, r3, #6
    37c2:	b2db      	uxtb	r3, r3
    37c4:	223f      	movs	r2, #63	; 0x3f
    37c6:	4013      	ands	r3, r2
    37c8:	b2da      	uxtb	r2, r3
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    37ce:	68bb      	ldr	r3, [r7, #8]
    37d0:	b2db      	uxtb	r3, r3
    37d2:	223f      	movs	r2, #63	; 0x3f
    37d4:	4013      	ands	r3, r2
    37d6:	b2da      	uxtb	r2, r3
    37d8:	687b      	ldr	r3, [r7, #4]
    37da:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    37dc:	46c0      	nop			; (mov r8, r8)
    37de:	46bd      	mov	sp, r7
    37e0:	b004      	add	sp, #16
    37e2:	bd80      	pop	{r7, pc}

000037e4 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    37e4:	b580      	push	{r7, lr}
    37e6:	b084      	sub	sp, #16
    37e8:	af00      	add	r7, sp, #0
    37ea:	6078      	str	r0, [r7, #4]
    37ec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    37ee:	687b      	ldr	r3, [r7, #4]
    37f0:	681b      	ldr	r3, [r3, #0]
    37f2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    37f4:	683b      	ldr	r3, [r7, #0]
    37f6:	881a      	ldrh	r2, [r3, #0]
    37f8:	230e      	movs	r3, #14
    37fa:	18fb      	adds	r3, r7, r3
    37fc:	2108      	movs	r1, #8
    37fe:	430a      	orrs	r2, r1
    3800:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    3802:	683b      	ldr	r3, [r7, #0]
    3804:	791b      	ldrb	r3, [r3, #4]
    3806:	2201      	movs	r2, #1
    3808:	4053      	eors	r3, r2
    380a:	b2db      	uxtb	r3, r3
    380c:	2b00      	cmp	r3, #0
    380e:	d007      	beq.n	3820 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    3810:	230e      	movs	r3, #14
    3812:	18fb      	adds	r3, r7, r3
    3814:	220e      	movs	r2, #14
    3816:	18ba      	adds	r2, r7, r2
    3818:	8812      	ldrh	r2, [r2, #0]
    381a:	2140      	movs	r1, #64	; 0x40
    381c:	430a      	orrs	r2, r1
    381e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    3820:	683b      	ldr	r3, [r7, #0]
    3822:	789b      	ldrb	r3, [r3, #2]
    3824:	2b00      	cmp	r3, #0
    3826:	d007      	beq.n	3838 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    3828:	230e      	movs	r3, #14
    382a:	18fb      	adds	r3, r7, r3
    382c:	220e      	movs	r2, #14
    382e:	18ba      	adds	r2, r7, r2
    3830:	8812      	ldrh	r2, [r2, #0]
    3832:	2180      	movs	r1, #128	; 0x80
    3834:	430a      	orrs	r2, r1
    3836:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    3838:	68bb      	ldr	r3, [r7, #8]
    383a:	220e      	movs	r2, #14
    383c:	18ba      	adds	r2, r7, r2
    383e:	8812      	ldrh	r2, [r2, #0]
    3840:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    3842:	683b      	ldr	r3, [r7, #0]
    3844:	78db      	ldrb	r3, [r3, #3]
    3846:	2b00      	cmp	r3, #0
    3848:	d008      	beq.n	385c <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    384a:	68bb      	ldr	r3, [r7, #8]
    384c:	885b      	ldrh	r3, [r3, #2]
    384e:	b29b      	uxth	r3, r3
    3850:	2280      	movs	r2, #128	; 0x80
    3852:	01d2      	lsls	r2, r2, #7
    3854:	4313      	orrs	r3, r2
    3856:	b29a      	uxth	r2, r3
    3858:	68bb      	ldr	r3, [r7, #8]
    385a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    385c:	230d      	movs	r3, #13
    385e:	18fb      	adds	r3, r7, r3
    3860:	2200      	movs	r2, #0
    3862:	701a      	strb	r2, [r3, #0]
    3864:	e017      	b.n	3896 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    3866:	230d      	movs	r3, #13
    3868:	18fb      	adds	r3, r7, r3
    386a:	781a      	ldrb	r2, [r3, #0]
    386c:	0013      	movs	r3, r2
    386e:	009b      	lsls	r3, r3, #2
    3870:	189b      	adds	r3, r3, r2
    3872:	005b      	lsls	r3, r3, #1
    3874:	3308      	adds	r3, #8
    3876:	683a      	ldr	r2, [r7, #0]
    3878:	18d1      	adds	r1, r2, r3
    387a:	230d      	movs	r3, #13
    387c:	18fb      	adds	r3, r7, r3
    387e:	781a      	ldrb	r2, [r3, #0]
    3880:	687b      	ldr	r3, [r7, #4]
    3882:	0018      	movs	r0, r3
    3884:	4b08      	ldr	r3, [pc, #32]	; (38a8 <_rtc_calendar_set_config+0xc4>)
    3886:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3888:	230d      	movs	r3, #13
    388a:	18fb      	adds	r3, r7, r3
    388c:	781a      	ldrb	r2, [r3, #0]
    388e:	230d      	movs	r3, #13
    3890:	18fb      	adds	r3, r7, r3
    3892:	3201      	adds	r2, #1
    3894:	701a      	strb	r2, [r3, #0]
    3896:	230d      	movs	r3, #13
    3898:	18fb      	adds	r3, r7, r3
    389a:	781b      	ldrb	r3, [r3, #0]
    389c:	2b00      	cmp	r3, #0
    389e:	d0e2      	beq.n	3866 <_rtc_calendar_set_config+0x82>
	}
}
    38a0:	46c0      	nop			; (mov r8, r8)
    38a2:	46bd      	mov	sp, r7
    38a4:	b004      	add	sp, #16
    38a6:	bd80      	pop	{r7, pc}
    38a8:	000039cd 	.word	0x000039cd

000038ac <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    38ac:	b580      	push	{r7, lr}
    38ae:	b086      	sub	sp, #24
    38b0:	af00      	add	r7, sp, #0
    38b2:	60f8      	str	r0, [r7, #12]
    38b4:	60b9      	str	r1, [r7, #8]
    38b6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    38b8:	68fb      	ldr	r3, [r7, #12]
    38ba:	68ba      	ldr	r2, [r7, #8]
    38bc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    38be:	2120      	movs	r1, #32
    38c0:	2000      	movs	r0, #0
    38c2:	4b18      	ldr	r3, [pc, #96]	; (3924 <rtc_calendar_init+0x78>)
    38c4:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    38c6:	2314      	movs	r3, #20
    38c8:	18fb      	adds	r3, r7, r3
    38ca:	0018      	movs	r0, r3
    38cc:	4b16      	ldr	r3, [pc, #88]	; (3928 <rtc_calendar_init+0x7c>)
    38ce:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    38d0:	2314      	movs	r3, #20
    38d2:	18fb      	adds	r3, r7, r3
    38d4:	2202      	movs	r2, #2
    38d6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    38d8:	2314      	movs	r3, #20
    38da:	18fb      	adds	r3, r7, r3
    38dc:	0019      	movs	r1, r3
    38de:	2004      	movs	r0, #4
    38e0:	4b12      	ldr	r3, [pc, #72]	; (392c <rtc_calendar_init+0x80>)
    38e2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    38e4:	2004      	movs	r0, #4
    38e6:	4b12      	ldr	r3, [pc, #72]	; (3930 <rtc_calendar_init+0x84>)
    38e8:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    38ea:	68fb      	ldr	r3, [r7, #12]
    38ec:	0018      	movs	r0, r3
    38ee:	4b11      	ldr	r3, [pc, #68]	; (3934 <rtc_calendar_init+0x88>)
    38f0:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    38f2:	687b      	ldr	r3, [r7, #4]
    38f4:	791a      	ldrb	r2, [r3, #4]
    38f6:	68fb      	ldr	r3, [r7, #12]
    38f8:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    38fa:	687b      	ldr	r3, [r7, #4]
    38fc:	78da      	ldrb	r2, [r3, #3]
    38fe:	68fb      	ldr	r3, [r7, #12]
    3900:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    3902:	687b      	ldr	r3, [r7, #4]
    3904:	88da      	ldrh	r2, [r3, #6]
    3906:	68fb      	ldr	r3, [r7, #12]
    3908:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    390a:	4b0b      	ldr	r3, [pc, #44]	; (3938 <rtc_calendar_init+0x8c>)
    390c:	68fa      	ldr	r2, [r7, #12]
    390e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    3910:	687a      	ldr	r2, [r7, #4]
    3912:	68fb      	ldr	r3, [r7, #12]
    3914:	0011      	movs	r1, r2
    3916:	0018      	movs	r0, r3
    3918:	4b08      	ldr	r3, [pc, #32]	; (393c <rtc_calendar_init+0x90>)
    391a:	4798      	blx	r3
}
    391c:	46c0      	nop			; (mov r8, r8)
    391e:	46bd      	mov	sp, r7
    3920:	b006      	add	sp, #24
    3922:	bd80      	pop	{r7, pc}
    3924:	00003579 	.word	0x00003579
    3928:	00003561 	.word	0x00003561
    392c:	00006ad1 	.word	0x00006ad1
    3930:	00006b15 	.word	0x00006b15
    3934:	00003679 	.word	0x00003679
    3938:	20000a04 	.word	0x20000a04
    393c:	000037e5 	.word	0x000037e5

00003940 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    3940:	b580      	push	{r7, lr}
    3942:	b084      	sub	sp, #16
    3944:	af00      	add	r7, sp, #0
    3946:	6078      	str	r0, [r7, #4]
    3948:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    394a:	687b      	ldr	r3, [r7, #4]
    394c:	681b      	ldr	r3, [r3, #0]
    394e:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    3950:	687b      	ldr	r3, [r7, #4]
    3952:	795b      	ldrb	r3, [r3, #5]
    3954:	2201      	movs	r2, #1
    3956:	4053      	eors	r3, r2
    3958:	b2db      	uxtb	r3, r3
    395a:	2b00      	cmp	r3, #0
    395c:	d00a      	beq.n	3974 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    395e:	68fb      	ldr	r3, [r7, #12]
    3960:	4a16      	ldr	r2, [pc, #88]	; (39bc <rtc_calendar_get_time+0x7c>)
    3962:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    3964:	46c0      	nop			; (mov r8, r8)
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	0018      	movs	r0, r3
    396a:	4b15      	ldr	r3, [pc, #84]	; (39c0 <rtc_calendar_get_time+0x80>)
    396c:	4798      	blx	r3
    396e:	1e03      	subs	r3, r0, #0
    3970:	d1f9      	bne.n	3966 <rtc_calendar_get_time+0x26>
    3972:	e016      	b.n	39a2 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    3974:	68fb      	ldr	r3, [r7, #12]
    3976:	885b      	ldrh	r3, [r3, #2]
    3978:	b29b      	uxth	r3, r3
    397a:	001a      	movs	r2, r3
    397c:	2380      	movs	r3, #128	; 0x80
    397e:	01db      	lsls	r3, r3, #7
    3980:	4013      	ands	r3, r2
    3982:	d10e      	bne.n	39a2 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    3984:	68fb      	ldr	r3, [r7, #12]
    3986:	885b      	ldrh	r3, [r3, #2]
    3988:	b29b      	uxth	r3, r3
    398a:	4a0e      	ldr	r2, [pc, #56]	; (39c4 <rtc_calendar_get_time+0x84>)
    398c:	4313      	orrs	r3, r2
    398e:	b29a      	uxth	r2, r3
    3990:	68fb      	ldr	r3, [r7, #12]
    3992:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    3994:	46c0      	nop			; (mov r8, r8)
    3996:	687b      	ldr	r3, [r7, #4]
    3998:	0018      	movs	r0, r3
    399a:	4b09      	ldr	r3, [pc, #36]	; (39c0 <rtc_calendar_get_time+0x80>)
    399c:	4798      	blx	r3
    399e:	1e03      	subs	r3, r0, #0
    39a0:	d1f9      	bne.n	3996 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    39a2:	68fb      	ldr	r3, [r7, #12]
    39a4:	691b      	ldr	r3, [r3, #16]
    39a6:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    39a8:	683a      	ldr	r2, [r7, #0]
    39aa:	68b9      	ldr	r1, [r7, #8]
    39ac:	687b      	ldr	r3, [r7, #4]
    39ae:	0018      	movs	r0, r3
    39b0:	4b05      	ldr	r3, [pc, #20]	; (39c8 <rtc_calendar_get_time+0x88>)
    39b2:	4798      	blx	r3
}
    39b4:	46c0      	nop			; (mov r8, r8)
    39b6:	46bd      	mov	sp, r7
    39b8:	b004      	add	sp, #16
    39ba:	bd80      	pop	{r7, pc}
    39bc:	ffff8000 	.word	0xffff8000
    39c0:	000035d5 	.word	0x000035d5
    39c4:	ffffc000 	.word	0xffffc000
    39c8:	00003745 	.word	0x00003745

000039cc <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    39cc:	b580      	push	{r7, lr}
    39ce:	b086      	sub	sp, #24
    39d0:	af00      	add	r7, sp, #0
    39d2:	60f8      	str	r0, [r7, #12]
    39d4:	60b9      	str	r1, [r7, #8]
    39d6:	1dfb      	adds	r3, r7, #7
    39d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    39da:	68fb      	ldr	r3, [r7, #12]
    39dc:	681b      	ldr	r3, [r3, #0]
    39de:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    39e0:	1dfb      	adds	r3, r7, #7
    39e2:	781b      	ldrb	r3, [r3, #0]
    39e4:	2b01      	cmp	r3, #1
    39e6:	d901      	bls.n	39ec <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    39e8:	2317      	movs	r3, #23
    39ea:	e021      	b.n	3a30 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    39ec:	68ba      	ldr	r2, [r7, #8]
    39ee:	68fb      	ldr	r3, [r7, #12]
    39f0:	0011      	movs	r1, r2
    39f2:	0018      	movs	r0, r3
    39f4:	4b10      	ldr	r3, [pc, #64]	; (3a38 <rtc_calendar_set_alarm+0x6c>)
    39f6:	4798      	blx	r3
    39f8:	0003      	movs	r3, r0
    39fa:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    39fc:	46c0      	nop			; (mov r8, r8)
    39fe:	68fb      	ldr	r3, [r7, #12]
    3a00:	0018      	movs	r0, r3
    3a02:	4b0e      	ldr	r3, [pc, #56]	; (3a3c <rtc_calendar_set_alarm+0x70>)
    3a04:	4798      	blx	r3
    3a06:	1e03      	subs	r3, r0, #0
    3a08:	d1f9      	bne.n	39fe <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    3a0a:	1dfb      	adds	r3, r7, #7
    3a0c:	781a      	ldrb	r2, [r3, #0]
    3a0e:	697b      	ldr	r3, [r7, #20]
    3a10:	3203      	adds	r2, #3
    3a12:	00d2      	lsls	r2, r2, #3
    3a14:	6939      	ldr	r1, [r7, #16]
    3a16:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    3a18:	1dfb      	adds	r3, r7, #7
    3a1a:	781b      	ldrb	r3, [r3, #0]
    3a1c:	68ba      	ldr	r2, [r7, #8]
    3a1e:	7a11      	ldrb	r1, [r2, #8]
    3a20:	697a      	ldr	r2, [r7, #20]
    3a22:	3303      	adds	r3, #3
    3a24:	00db      	lsls	r3, r3, #3
    3a26:	18d3      	adds	r3, r2, r3
    3a28:	3304      	adds	r3, #4
    3a2a:	1c0a      	adds	r2, r1, #0
    3a2c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3a2e:	2300      	movs	r3, #0
}
    3a30:	0018      	movs	r0, r3
    3a32:	46bd      	mov	sp, r7
    3a34:	b006      	add	sp, #24
    3a36:	bd80      	pop	{r7, pc}
    3a38:	000036bd 	.word	0x000036bd
    3a3c:	000035d5 	.word	0x000035d5

00003a40 <system_gclk_chan_get_config_defaults>:
{
    3a40:	b580      	push	{r7, lr}
    3a42:	b082      	sub	sp, #8
    3a44:	af00      	add	r7, sp, #0
    3a46:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	2200      	movs	r2, #0
    3a4c:	701a      	strb	r2, [r3, #0]
}
    3a4e:	46c0      	nop			; (mov r8, r8)
    3a50:	46bd      	mov	sp, r7
    3a52:	b002      	add	sp, #8
    3a54:	bd80      	pop	{r7, pc}

00003a56 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3a56:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a58:	b08d      	sub	sp, #52	; 0x34
    3a5a:	af00      	add	r7, sp, #0
    3a5c:	60b8      	str	r0, [r7, #8]
    3a5e:	60f9      	str	r1, [r7, #12]
    3a60:	603a      	str	r2, [r7, #0]
    3a62:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3a64:	2300      	movs	r3, #0
    3a66:	2400      	movs	r4, #0
    3a68:	623b      	str	r3, [r7, #32]
    3a6a:	627c      	str	r4, [r7, #36]	; 0x24
    3a6c:	2300      	movs	r3, #0
    3a6e:	2400      	movs	r4, #0
    3a70:	61bb      	str	r3, [r7, #24]
    3a72:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    3a74:	233f      	movs	r3, #63	; 0x3f
    3a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    3a78:	e053      	b.n	3b22 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    3a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a7c:	3b20      	subs	r3, #32
    3a7e:	2b00      	cmp	r3, #0
    3a80:	db04      	blt.n	3a8c <long_division+0x36>
    3a82:	2201      	movs	r2, #1
    3a84:	409a      	lsls	r2, r3
    3a86:	0013      	movs	r3, r2
    3a88:	617b      	str	r3, [r7, #20]
    3a8a:	e00b      	b.n	3aa4 <long_division+0x4e>
    3a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a8e:	2220      	movs	r2, #32
    3a90:	1ad3      	subs	r3, r2, r3
    3a92:	2201      	movs	r2, #1
    3a94:	40da      	lsrs	r2, r3
    3a96:	0013      	movs	r3, r2
    3a98:	2100      	movs	r1, #0
    3a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3a9c:	4091      	lsls	r1, r2
    3a9e:	000a      	movs	r2, r1
    3aa0:	4313      	orrs	r3, r2
    3aa2:	617b      	str	r3, [r7, #20]
    3aa4:	2201      	movs	r2, #1
    3aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3aa8:	409a      	lsls	r2, r3
    3aaa:	0013      	movs	r3, r2
    3aac:	613b      	str	r3, [r7, #16]

		r = r << 1;
    3aae:	69bb      	ldr	r3, [r7, #24]
    3ab0:	69fc      	ldr	r4, [r7, #28]
    3ab2:	18db      	adds	r3, r3, r3
    3ab4:	4164      	adcs	r4, r4
    3ab6:	61bb      	str	r3, [r7, #24]
    3ab8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    3aba:	68bb      	ldr	r3, [r7, #8]
    3abc:	693a      	ldr	r2, [r7, #16]
    3abe:	401a      	ands	r2, r3
    3ac0:	0015      	movs	r5, r2
    3ac2:	68fb      	ldr	r3, [r7, #12]
    3ac4:	697a      	ldr	r2, [r7, #20]
    3ac6:	401a      	ands	r2, r3
    3ac8:	0016      	movs	r6, r2
    3aca:	002b      	movs	r3, r5
    3acc:	4333      	orrs	r3, r6
    3ace:	d007      	beq.n	3ae0 <long_division+0x8a>
			r |= 0x01;
    3ad0:	69bb      	ldr	r3, [r7, #24]
    3ad2:	2201      	movs	r2, #1
    3ad4:	4313      	orrs	r3, r2
    3ad6:	61bb      	str	r3, [r7, #24]
    3ad8:	69fb      	ldr	r3, [r7, #28]
    3ada:	2200      	movs	r2, #0
    3adc:	4313      	orrs	r3, r2
    3ade:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3ae0:	687a      	ldr	r2, [r7, #4]
    3ae2:	69fb      	ldr	r3, [r7, #28]
    3ae4:	429a      	cmp	r2, r3
    3ae6:	d819      	bhi.n	3b1c <long_division+0xc6>
    3ae8:	687a      	ldr	r2, [r7, #4]
    3aea:	69fb      	ldr	r3, [r7, #28]
    3aec:	429a      	cmp	r2, r3
    3aee:	d103      	bne.n	3af8 <long_division+0xa2>
    3af0:	683a      	ldr	r2, [r7, #0]
    3af2:	69bb      	ldr	r3, [r7, #24]
    3af4:	429a      	cmp	r2, r3
    3af6:	d811      	bhi.n	3b1c <long_division+0xc6>
			r = r - d;
    3af8:	69b9      	ldr	r1, [r7, #24]
    3afa:	69fa      	ldr	r2, [r7, #28]
    3afc:	683b      	ldr	r3, [r7, #0]
    3afe:	687c      	ldr	r4, [r7, #4]
    3b00:	1ac9      	subs	r1, r1, r3
    3b02:	41a2      	sbcs	r2, r4
    3b04:	000b      	movs	r3, r1
    3b06:	0014      	movs	r4, r2
    3b08:	61bb      	str	r3, [r7, #24]
    3b0a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3b0c:	6a3a      	ldr	r2, [r7, #32]
    3b0e:	693b      	ldr	r3, [r7, #16]
    3b10:	4313      	orrs	r3, r2
    3b12:	623b      	str	r3, [r7, #32]
    3b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3b16:	697b      	ldr	r3, [r7, #20]
    3b18:	4313      	orrs	r3, r2
    3b1a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b1e:	3b01      	subs	r3, #1
    3b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    3b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b24:	2b00      	cmp	r3, #0
    3b26:	daa8      	bge.n	3a7a <long_division+0x24>
		}
	}

	return q;
    3b28:	6a3b      	ldr	r3, [r7, #32]
    3b2a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    3b2c:	0018      	movs	r0, r3
    3b2e:	0021      	movs	r1, r4
    3b30:	46bd      	mov	sp, r7
    3b32:	b00d      	add	sp, #52	; 0x34
    3b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003b36 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3b36:	b580      	push	{r7, lr}
    3b38:	b086      	sub	sp, #24
    3b3a:	af00      	add	r7, sp, #0
    3b3c:	60f8      	str	r0, [r7, #12]
    3b3e:	60b9      	str	r1, [r7, #8]
    3b40:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    3b42:	2316      	movs	r3, #22
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	2200      	movs	r2, #0
    3b48:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    3b4a:	68bb      	ldr	r3, [r7, #8]
    3b4c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3b4e:	68bb      	ldr	r3, [r7, #8]
    3b50:	085a      	lsrs	r2, r3, #1
    3b52:	68fb      	ldr	r3, [r7, #12]
    3b54:	429a      	cmp	r2, r3
    3b56:	d201      	bcs.n	3b5c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b58:	2340      	movs	r3, #64	; 0x40
    3b5a:	e026      	b.n	3baa <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    3b5c:	68bb      	ldr	r3, [r7, #8]
    3b5e:	085b      	lsrs	r3, r3, #1
    3b60:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    3b62:	e00a      	b.n	3b7a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    3b64:	693a      	ldr	r2, [r7, #16]
    3b66:	68fb      	ldr	r3, [r7, #12]
    3b68:	1ad3      	subs	r3, r2, r3
    3b6a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    3b6c:	2316      	movs	r3, #22
    3b6e:	18fb      	adds	r3, r7, r3
    3b70:	881a      	ldrh	r2, [r3, #0]
    3b72:	2316      	movs	r3, #22
    3b74:	18fb      	adds	r3, r7, r3
    3b76:	3201      	adds	r2, #1
    3b78:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    3b7a:	693a      	ldr	r2, [r7, #16]
    3b7c:	68fb      	ldr	r3, [r7, #12]
    3b7e:	429a      	cmp	r2, r3
    3b80:	d2f0      	bcs.n	3b64 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    3b82:	2316      	movs	r3, #22
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	2216      	movs	r2, #22
    3b88:	18ba      	adds	r2, r7, r2
    3b8a:	8812      	ldrh	r2, [r2, #0]
    3b8c:	3a01      	subs	r2, #1
    3b8e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3b90:	2316      	movs	r3, #22
    3b92:	18fb      	adds	r3, r7, r3
    3b94:	881b      	ldrh	r3, [r3, #0]
    3b96:	2bff      	cmp	r3, #255	; 0xff
    3b98:	d901      	bls.n	3b9e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b9a:	2340      	movs	r3, #64	; 0x40
    3b9c:	e005      	b.n	3baa <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3b9e:	687b      	ldr	r3, [r7, #4]
    3ba0:	2216      	movs	r2, #22
    3ba2:	18ba      	adds	r2, r7, r2
    3ba4:	8812      	ldrh	r2, [r2, #0]
    3ba6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3ba8:	2300      	movs	r3, #0
	}
}
    3baa:	0018      	movs	r0, r3
    3bac:	46bd      	mov	sp, r7
    3bae:	b006      	add	sp, #24
    3bb0:	bd80      	pop	{r7, pc}
	...

00003bb4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bb6:	b0a1      	sub	sp, #132	; 0x84
    3bb8:	af00      	add	r7, sp, #0
    3bba:	64f8      	str	r0, [r7, #76]	; 0x4c
    3bbc:	64b9      	str	r1, [r7, #72]	; 0x48
    3bbe:	647a      	str	r2, [r7, #68]	; 0x44
    3bc0:	2243      	movs	r2, #67	; 0x43
    3bc2:	18ba      	adds	r2, r7, r2
    3bc4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    3bc6:	2300      	movs	r3, #0
    3bc8:	2400      	movs	r4, #0
    3bca:	673b      	str	r3, [r7, #112]	; 0x70
    3bcc:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3bce:	2300      	movs	r3, #0
    3bd0:	2400      	movs	r4, #0
    3bd2:	66bb      	str	r3, [r7, #104]	; 0x68
    3bd4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    3bd6:	2300      	movs	r3, #0
    3bd8:	2400      	movs	r4, #0
    3bda:	67bb      	str	r3, [r7, #120]	; 0x78
    3bdc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3bde:	2300      	movs	r3, #0
    3be0:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3be2:	2358      	movs	r3, #88	; 0x58
    3be4:	2240      	movs	r2, #64	; 0x40
    3be6:	4694      	mov	ip, r2
    3be8:	44bc      	add	ip, r7
    3bea:	4463      	add	r3, ip
    3bec:	781a      	ldrb	r2, [r3, #0]
    3bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3bf0:	435a      	muls	r2, r3
    3bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3bf4:	429a      	cmp	r2, r3
    3bf6:	d901      	bls.n	3bfc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3bf8:	2340      	movs	r3, #64	; 0x40
    3bfa:	e0b3      	b.n	3d64 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3bfc:	2343      	movs	r3, #67	; 0x43
    3bfe:	18fb      	adds	r3, r7, r3
    3c00:	781b      	ldrb	r3, [r3, #0]
    3c02:	2b00      	cmp	r3, #0
    3c04:	d13d      	bne.n	3c82 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3c06:	2358      	movs	r3, #88	; 0x58
    3c08:	2240      	movs	r2, #64	; 0x40
    3c0a:	4694      	mov	ip, r2
    3c0c:	44bc      	add	ip, r7
    3c0e:	4463      	add	r3, ip
    3c10:	781b      	ldrb	r3, [r3, #0]
    3c12:	b2db      	uxtb	r3, r3
    3c14:	613b      	str	r3, [r7, #16]
    3c16:	2300      	movs	r3, #0
    3c18:	617b      	str	r3, [r7, #20]
    3c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c1c:	60bb      	str	r3, [r7, #8]
    3c1e:	2300      	movs	r3, #0
    3c20:	60fb      	str	r3, [r7, #12]
    3c22:	4c52      	ldr	r4, [pc, #328]	; (3d6c <_sercom_get_async_baud_val+0x1b8>)
    3c24:	68ba      	ldr	r2, [r7, #8]
    3c26:	68fb      	ldr	r3, [r7, #12]
    3c28:	6938      	ldr	r0, [r7, #16]
    3c2a:	6979      	ldr	r1, [r7, #20]
    3c2c:	47a0      	blx	r4
    3c2e:	0003      	movs	r3, r0
    3c30:	000c      	movs	r4, r1
    3c32:	001b      	movs	r3, r3
    3c34:	65fb      	str	r3, [r7, #92]	; 0x5c
    3c36:	2300      	movs	r3, #0
    3c38:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    3c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c3c:	603b      	str	r3, [r7, #0]
    3c3e:	2300      	movs	r3, #0
    3c40:	607b      	str	r3, [r7, #4]
    3c42:	6db8      	ldr	r0, [r7, #88]	; 0x58
    3c44:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3c46:	683a      	ldr	r2, [r7, #0]
    3c48:	687b      	ldr	r3, [r7, #4]
    3c4a:	4c49      	ldr	r4, [pc, #292]	; (3d70 <_sercom_get_async_baud_val+0x1bc>)
    3c4c:	47a0      	blx	r4
    3c4e:	0003      	movs	r3, r0
    3c50:	000c      	movs	r4, r1
    3c52:	673b      	str	r3, [r7, #112]	; 0x70
    3c54:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3c56:	2100      	movs	r1, #0
    3c58:	2201      	movs	r2, #1
    3c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3c5c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    3c5e:	1ac9      	subs	r1, r1, r3
    3c60:	41a2      	sbcs	r2, r4
    3c62:	000b      	movs	r3, r1
    3c64:	0014      	movs	r4, r2
    3c66:	66bb      	str	r3, [r7, #104]	; 0x68
    3c68:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    3c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3c6c:	0c1b      	lsrs	r3, r3, #16
    3c6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    3c70:	0416      	lsls	r6, r2, #16
    3c72:	431e      	orrs	r6, r3
    3c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3c76:	041d      	lsls	r5, r3, #16
    3c78:	0033      	movs	r3, r6
    3c7a:	67bb      	str	r3, [r7, #120]	; 0x78
    3c7c:	2300      	movs	r3, #0
    3c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    3c80:	e06a      	b.n	3d58 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3c82:	2343      	movs	r3, #67	; 0x43
    3c84:	18fb      	adds	r3, r7, r3
    3c86:	781b      	ldrb	r3, [r3, #0]
    3c88:	2b01      	cmp	r3, #1
    3c8a:	d165      	bne.n	3d58 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c8e:	633b      	str	r3, [r7, #48]	; 0x30
    3c90:	2300      	movs	r3, #0
    3c92:	637b      	str	r3, [r7, #52]	; 0x34
    3c94:	2358      	movs	r3, #88	; 0x58
    3c96:	2240      	movs	r2, #64	; 0x40
    3c98:	4694      	mov	ip, r2
    3c9a:	44bc      	add	ip, r7
    3c9c:	4463      	add	r3, ip
    3c9e:	781b      	ldrb	r3, [r3, #0]
    3ca0:	b2db      	uxtb	r3, r3
    3ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    3ca4:	2300      	movs	r3, #0
    3ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    3ca8:	4c30      	ldr	r4, [pc, #192]	; (3d6c <_sercom_get_async_baud_val+0x1b8>)
    3caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3cb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
    3cb2:	47a0      	blx	r4
    3cb4:	0003      	movs	r3, r0
    3cb6:	000c      	movs	r4, r1
    3cb8:	65bb      	str	r3, [r7, #88]	; 0x58
    3cba:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3cbe:	623b      	str	r3, [r7, #32]
    3cc0:	2300      	movs	r3, #0
    3cc2:	627b      	str	r3, [r7, #36]	; 0x24
    3cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3cc6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3cc8:	001a      	movs	r2, r3
    3cca:	0023      	movs	r3, r4
    3ccc:	6a38      	ldr	r0, [r7, #32]
    3cce:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3cd0:	4c27      	ldr	r4, [pc, #156]	; (3d70 <_sercom_get_async_baud_val+0x1bc>)
    3cd2:	47a0      	blx	r4
    3cd4:	0003      	movs	r3, r0
    3cd6:	000c      	movs	r4, r1
    3cd8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3cda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3cdc:	2380      	movs	r3, #128	; 0x80
    3cde:	019b      	lsls	r3, r3, #6
    3ce0:	429a      	cmp	r2, r3
    3ce2:	d901      	bls.n	3ce8 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3ce4:	2340      	movs	r3, #64	; 0x40
    3ce6:	e03d      	b.n	3d64 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3cea:	61bb      	str	r3, [r7, #24]
    3cec:	2300      	movs	r3, #0
    3cee:	61fb      	str	r3, [r7, #28]
    3cf0:	69b9      	ldr	r1, [r7, #24]
    3cf2:	69fa      	ldr	r2, [r7, #28]
    3cf4:	000b      	movs	r3, r1
    3cf6:	0f5b      	lsrs	r3, r3, #29
    3cf8:	0010      	movs	r0, r2
    3cfa:	00c0      	lsls	r0, r0, #3
    3cfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    3cfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3d00:	4318      	orrs	r0, r3
    3d02:	63f8      	str	r0, [r7, #60]	; 0x3c
    3d04:	000b      	movs	r3, r1
    3d06:	00db      	lsls	r3, r3, #3
    3d08:	63bb      	str	r3, [r7, #56]	; 0x38
    3d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d0c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3d0e:	001a      	movs	r2, r3
    3d10:	0023      	movs	r3, r4
    3d12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    3d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    3d16:	4c16      	ldr	r4, [pc, #88]	; (3d70 <_sercom_get_async_baud_val+0x1bc>)
    3d18:	47a0      	blx	r4
    3d1a:	0003      	movs	r3, r0
    3d1c:	000c      	movs	r4, r1
    3d1e:	65bb      	str	r3, [r7, #88]	; 0x58
    3d20:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    3d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3d24:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3d26:	b2d9      	uxtb	r1, r3
    3d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3d2a:	b2db      	uxtb	r3, r3
    3d2c:	00db      	lsls	r3, r3, #3
    3d2e:	b2da      	uxtb	r2, r3
    3d30:	2317      	movs	r3, #23
    3d32:	2040      	movs	r0, #64	; 0x40
    3d34:	4684      	mov	ip, r0
    3d36:	44bc      	add	ip, r7
    3d38:	4463      	add	r3, ip
    3d3a:	1a8a      	subs	r2, r1, r2
    3d3c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    3d3e:	2317      	movs	r3, #23
    3d40:	2240      	movs	r2, #64	; 0x40
    3d42:	4694      	mov	ip, r2
    3d44:	44bc      	add	ip, r7
    3d46:	4463      	add	r3, ip
    3d48:	781b      	ldrb	r3, [r3, #0]
    3d4a:	035b      	lsls	r3, r3, #13
    3d4c:	001a      	movs	r2, r3
    3d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3d50:	4313      	orrs	r3, r2
    3d52:	67bb      	str	r3, [r7, #120]	; 0x78
    3d54:	2300      	movs	r3, #0
    3d56:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    3d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3d5a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    3d5c:	b29a      	uxth	r2, r3
    3d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3d60:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    3d62:	2300      	movs	r3, #0
}
    3d64:	0018      	movs	r0, r3
    3d66:	46bd      	mov	sp, r7
    3d68:	b021      	add	sp, #132	; 0x84
    3d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d6c:	0000ba75 	.word	0x0000ba75
    3d70:	00003a57 	.word	0x00003a57

00003d74 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3d74:	b580      	push	{r7, lr}
    3d76:	b084      	sub	sp, #16
    3d78:	af00      	add	r7, sp, #0
    3d7a:	0002      	movs	r2, r0
    3d7c:	1dfb      	adds	r3, r7, #7
    3d7e:	701a      	strb	r2, [r3, #0]
    3d80:	1dbb      	adds	r3, r7, #6
    3d82:	1c0a      	adds	r2, r1, #0
    3d84:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3d86:	4b1a      	ldr	r3, [pc, #104]	; (3df0 <sercom_set_gclk_generator+0x7c>)
    3d88:	781b      	ldrb	r3, [r3, #0]
    3d8a:	2201      	movs	r2, #1
    3d8c:	4053      	eors	r3, r2
    3d8e:	b2db      	uxtb	r3, r3
    3d90:	2b00      	cmp	r3, #0
    3d92:	d103      	bne.n	3d9c <sercom_set_gclk_generator+0x28>
    3d94:	1dbb      	adds	r3, r7, #6
    3d96:	781b      	ldrb	r3, [r3, #0]
    3d98:	2b00      	cmp	r3, #0
    3d9a:	d01b      	beq.n	3dd4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3d9c:	230c      	movs	r3, #12
    3d9e:	18fb      	adds	r3, r7, r3
    3da0:	0018      	movs	r0, r3
    3da2:	4b14      	ldr	r3, [pc, #80]	; (3df4 <sercom_set_gclk_generator+0x80>)
    3da4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    3da6:	230c      	movs	r3, #12
    3da8:	18fb      	adds	r3, r7, r3
    3daa:	1dfa      	adds	r2, r7, #7
    3dac:	7812      	ldrb	r2, [r2, #0]
    3dae:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3db0:	230c      	movs	r3, #12
    3db2:	18fb      	adds	r3, r7, r3
    3db4:	0019      	movs	r1, r3
    3db6:	2013      	movs	r0, #19
    3db8:	4b0f      	ldr	r3, [pc, #60]	; (3df8 <sercom_set_gclk_generator+0x84>)
    3dba:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3dbc:	2013      	movs	r0, #19
    3dbe:	4b0f      	ldr	r3, [pc, #60]	; (3dfc <sercom_set_gclk_generator+0x88>)
    3dc0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    3dc2:	4b0b      	ldr	r3, [pc, #44]	; (3df0 <sercom_set_gclk_generator+0x7c>)
    3dc4:	1dfa      	adds	r2, r7, #7
    3dc6:	7812      	ldrb	r2, [r2, #0]
    3dc8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3dca:	4b09      	ldr	r3, [pc, #36]	; (3df0 <sercom_set_gclk_generator+0x7c>)
    3dcc:	2201      	movs	r2, #1
    3dce:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3dd0:	2300      	movs	r3, #0
    3dd2:	e008      	b.n	3de6 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    3dd4:	4b06      	ldr	r3, [pc, #24]	; (3df0 <sercom_set_gclk_generator+0x7c>)
    3dd6:	785b      	ldrb	r3, [r3, #1]
    3dd8:	1dfa      	adds	r2, r7, #7
    3dda:	7812      	ldrb	r2, [r2, #0]
    3ddc:	429a      	cmp	r2, r3
    3dde:	d101      	bne.n	3de4 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3de0:	2300      	movs	r3, #0
    3de2:	e000      	b.n	3de6 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3de4:	231d      	movs	r3, #29
}
    3de6:	0018      	movs	r0, r3
    3de8:	46bd      	mov	sp, r7
    3dea:	b004      	add	sp, #16
    3dec:	bd80      	pop	{r7, pc}
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	20000158 	.word	0x20000158
    3df4:	00003a41 	.word	0x00003a41
    3df8:	00006ad1 	.word	0x00006ad1
    3dfc:	00006b15 	.word	0x00006b15

00003e00 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3e00:	b580      	push	{r7, lr}
    3e02:	b082      	sub	sp, #8
    3e04:	af00      	add	r7, sp, #0
    3e06:	6078      	str	r0, [r7, #4]
    3e08:	000a      	movs	r2, r1
    3e0a:	1cfb      	adds	r3, r7, #3
    3e0c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3e0e:	687b      	ldr	r3, [r7, #4]
    3e10:	4a4d      	ldr	r2, [pc, #308]	; (3f48 <_sercom_get_default_pad+0x148>)
    3e12:	4293      	cmp	r3, r2
    3e14:	d03f      	beq.n	3e96 <_sercom_get_default_pad+0x96>
    3e16:	4a4c      	ldr	r2, [pc, #304]	; (3f48 <_sercom_get_default_pad+0x148>)
    3e18:	4293      	cmp	r3, r2
    3e1a:	d806      	bhi.n	3e2a <_sercom_get_default_pad+0x2a>
    3e1c:	4a4b      	ldr	r2, [pc, #300]	; (3f4c <_sercom_get_default_pad+0x14c>)
    3e1e:	4293      	cmp	r3, r2
    3e20:	d00f      	beq.n	3e42 <_sercom_get_default_pad+0x42>
    3e22:	4a4b      	ldr	r2, [pc, #300]	; (3f50 <_sercom_get_default_pad+0x150>)
    3e24:	4293      	cmp	r3, r2
    3e26:	d021      	beq.n	3e6c <_sercom_get_default_pad+0x6c>
    3e28:	e089      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3e2a:	4a4a      	ldr	r2, [pc, #296]	; (3f54 <_sercom_get_default_pad+0x154>)
    3e2c:	4293      	cmp	r3, r2
    3e2e:	d100      	bne.n	3e32 <_sercom_get_default_pad+0x32>
    3e30:	e05b      	b.n	3eea <_sercom_get_default_pad+0xea>
    3e32:	4a49      	ldr	r2, [pc, #292]	; (3f58 <_sercom_get_default_pad+0x158>)
    3e34:	4293      	cmp	r3, r2
    3e36:	d100      	bne.n	3e3a <_sercom_get_default_pad+0x3a>
    3e38:	e06c      	b.n	3f14 <_sercom_get_default_pad+0x114>
    3e3a:	4a48      	ldr	r2, [pc, #288]	; (3f5c <_sercom_get_default_pad+0x15c>)
    3e3c:	4293      	cmp	r3, r2
    3e3e:	d03f      	beq.n	3ec0 <_sercom_get_default_pad+0xc0>
    3e40:	e07d      	b.n	3f3e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3e42:	1cfb      	adds	r3, r7, #3
    3e44:	781b      	ldrb	r3, [r3, #0]
    3e46:	2b01      	cmp	r3, #1
    3e48:	d00a      	beq.n	3e60 <_sercom_get_default_pad+0x60>
    3e4a:	dc02      	bgt.n	3e52 <_sercom_get_default_pad+0x52>
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	d005      	beq.n	3e5c <_sercom_get_default_pad+0x5c>
    3e50:	e075      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3e52:	2b02      	cmp	r3, #2
    3e54:	d006      	beq.n	3e64 <_sercom_get_default_pad+0x64>
    3e56:	2b03      	cmp	r3, #3
    3e58:	d006      	beq.n	3e68 <_sercom_get_default_pad+0x68>
    3e5a:	e070      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3e5c:	4b40      	ldr	r3, [pc, #256]	; (3f60 <_sercom_get_default_pad+0x160>)
    3e5e:	e06f      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3e60:	4b40      	ldr	r3, [pc, #256]	; (3f64 <_sercom_get_default_pad+0x164>)
    3e62:	e06d      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3e64:	4b40      	ldr	r3, [pc, #256]	; (3f68 <_sercom_get_default_pad+0x168>)
    3e66:	e06b      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3e68:	4b40      	ldr	r3, [pc, #256]	; (3f6c <_sercom_get_default_pad+0x16c>)
    3e6a:	e069      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3e6c:	1cfb      	adds	r3, r7, #3
    3e6e:	781b      	ldrb	r3, [r3, #0]
    3e70:	2b01      	cmp	r3, #1
    3e72:	d00a      	beq.n	3e8a <_sercom_get_default_pad+0x8a>
    3e74:	dc02      	bgt.n	3e7c <_sercom_get_default_pad+0x7c>
    3e76:	2b00      	cmp	r3, #0
    3e78:	d005      	beq.n	3e86 <_sercom_get_default_pad+0x86>
    3e7a:	e060      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3e7c:	2b02      	cmp	r3, #2
    3e7e:	d006      	beq.n	3e8e <_sercom_get_default_pad+0x8e>
    3e80:	2b03      	cmp	r3, #3
    3e82:	d006      	beq.n	3e92 <_sercom_get_default_pad+0x92>
    3e84:	e05b      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3e86:	2303      	movs	r3, #3
    3e88:	e05a      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3e8a:	4b39      	ldr	r3, [pc, #228]	; (3f70 <_sercom_get_default_pad+0x170>)
    3e8c:	e058      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3e8e:	4b39      	ldr	r3, [pc, #228]	; (3f74 <_sercom_get_default_pad+0x174>)
    3e90:	e056      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3e92:	4b39      	ldr	r3, [pc, #228]	; (3f78 <_sercom_get_default_pad+0x178>)
    3e94:	e054      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3e96:	1cfb      	adds	r3, r7, #3
    3e98:	781b      	ldrb	r3, [r3, #0]
    3e9a:	2b01      	cmp	r3, #1
    3e9c:	d00a      	beq.n	3eb4 <_sercom_get_default_pad+0xb4>
    3e9e:	dc02      	bgt.n	3ea6 <_sercom_get_default_pad+0xa6>
    3ea0:	2b00      	cmp	r3, #0
    3ea2:	d005      	beq.n	3eb0 <_sercom_get_default_pad+0xb0>
    3ea4:	e04b      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3ea6:	2b02      	cmp	r3, #2
    3ea8:	d006      	beq.n	3eb8 <_sercom_get_default_pad+0xb8>
    3eaa:	2b03      	cmp	r3, #3
    3eac:	d006      	beq.n	3ebc <_sercom_get_default_pad+0xbc>
    3eae:	e046      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3eb0:	4b32      	ldr	r3, [pc, #200]	; (3f7c <_sercom_get_default_pad+0x17c>)
    3eb2:	e045      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3eb4:	4b32      	ldr	r3, [pc, #200]	; (3f80 <_sercom_get_default_pad+0x180>)
    3eb6:	e043      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3eb8:	4b32      	ldr	r3, [pc, #200]	; (3f84 <_sercom_get_default_pad+0x184>)
    3eba:	e041      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3ebc:	4b32      	ldr	r3, [pc, #200]	; (3f88 <_sercom_get_default_pad+0x188>)
    3ebe:	e03f      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3ec0:	1cfb      	adds	r3, r7, #3
    3ec2:	781b      	ldrb	r3, [r3, #0]
    3ec4:	2b01      	cmp	r3, #1
    3ec6:	d00a      	beq.n	3ede <_sercom_get_default_pad+0xde>
    3ec8:	dc02      	bgt.n	3ed0 <_sercom_get_default_pad+0xd0>
    3eca:	2b00      	cmp	r3, #0
    3ecc:	d005      	beq.n	3eda <_sercom_get_default_pad+0xda>
    3ece:	e036      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3ed0:	2b02      	cmp	r3, #2
    3ed2:	d006      	beq.n	3ee2 <_sercom_get_default_pad+0xe2>
    3ed4:	2b03      	cmp	r3, #3
    3ed6:	d006      	beq.n	3ee6 <_sercom_get_default_pad+0xe6>
    3ed8:	e031      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3eda:	4b2c      	ldr	r3, [pc, #176]	; (3f8c <_sercom_get_default_pad+0x18c>)
    3edc:	e030      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3ede:	4b2c      	ldr	r3, [pc, #176]	; (3f90 <_sercom_get_default_pad+0x190>)
    3ee0:	e02e      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3ee2:	4b2c      	ldr	r3, [pc, #176]	; (3f94 <_sercom_get_default_pad+0x194>)
    3ee4:	e02c      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3ee6:	4b2c      	ldr	r3, [pc, #176]	; (3f98 <_sercom_get_default_pad+0x198>)
    3ee8:	e02a      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3eea:	1cfb      	adds	r3, r7, #3
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	2b01      	cmp	r3, #1
    3ef0:	d00a      	beq.n	3f08 <_sercom_get_default_pad+0x108>
    3ef2:	dc02      	bgt.n	3efa <_sercom_get_default_pad+0xfa>
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d005      	beq.n	3f04 <_sercom_get_default_pad+0x104>
    3ef8:	e021      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3efa:	2b02      	cmp	r3, #2
    3efc:	d006      	beq.n	3f0c <_sercom_get_default_pad+0x10c>
    3efe:	2b03      	cmp	r3, #3
    3f00:	d006      	beq.n	3f10 <_sercom_get_default_pad+0x110>
    3f02:	e01c      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3f04:	4b25      	ldr	r3, [pc, #148]	; (3f9c <_sercom_get_default_pad+0x19c>)
    3f06:	e01b      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3f08:	4b25      	ldr	r3, [pc, #148]	; (3fa0 <_sercom_get_default_pad+0x1a0>)
    3f0a:	e019      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3f0c:	4b25      	ldr	r3, [pc, #148]	; (3fa4 <_sercom_get_default_pad+0x1a4>)
    3f0e:	e017      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3f10:	4b25      	ldr	r3, [pc, #148]	; (3fa8 <_sercom_get_default_pad+0x1a8>)
    3f12:	e015      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3f14:	1cfb      	adds	r3, r7, #3
    3f16:	781b      	ldrb	r3, [r3, #0]
    3f18:	2b01      	cmp	r3, #1
    3f1a:	d00a      	beq.n	3f32 <_sercom_get_default_pad+0x132>
    3f1c:	dc02      	bgt.n	3f24 <_sercom_get_default_pad+0x124>
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d005      	beq.n	3f2e <_sercom_get_default_pad+0x12e>
    3f22:	e00c      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3f24:	2b02      	cmp	r3, #2
    3f26:	d006      	beq.n	3f36 <_sercom_get_default_pad+0x136>
    3f28:	2b03      	cmp	r3, #3
    3f2a:	d006      	beq.n	3f3a <_sercom_get_default_pad+0x13a>
    3f2c:	e007      	b.n	3f3e <_sercom_get_default_pad+0x13e>
    3f2e:	4b1f      	ldr	r3, [pc, #124]	; (3fac <_sercom_get_default_pad+0x1ac>)
    3f30:	e006      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3f32:	4b1f      	ldr	r3, [pc, #124]	; (3fb0 <_sercom_get_default_pad+0x1b0>)
    3f34:	e004      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3f36:	4b1f      	ldr	r3, [pc, #124]	; (3fb4 <_sercom_get_default_pad+0x1b4>)
    3f38:	e002      	b.n	3f40 <_sercom_get_default_pad+0x140>
    3f3a:	4b1f      	ldr	r3, [pc, #124]	; (3fb8 <_sercom_get_default_pad+0x1b8>)
    3f3c:	e000      	b.n	3f40 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    3f3e:	2300      	movs	r3, #0
}
    3f40:	0018      	movs	r0, r3
    3f42:	46bd      	mov	sp, r7
    3f44:	b002      	add	sp, #8
    3f46:	bd80      	pop	{r7, pc}
    3f48:	42001000 	.word	0x42001000
    3f4c:	42000800 	.word	0x42000800
    3f50:	42000c00 	.word	0x42000c00
    3f54:	42001800 	.word	0x42001800
    3f58:	42001c00 	.word	0x42001c00
    3f5c:	42001400 	.word	0x42001400
    3f60:	00040003 	.word	0x00040003
    3f64:	00050003 	.word	0x00050003
    3f68:	00060003 	.word	0x00060003
    3f6c:	00070003 	.word	0x00070003
    3f70:	00010003 	.word	0x00010003
    3f74:	001e0003 	.word	0x001e0003
    3f78:	001f0003 	.word	0x001f0003
    3f7c:	00080003 	.word	0x00080003
    3f80:	00090003 	.word	0x00090003
    3f84:	000a0003 	.word	0x000a0003
    3f88:	000b0003 	.word	0x000b0003
    3f8c:	00100003 	.word	0x00100003
    3f90:	00110003 	.word	0x00110003
    3f94:	00120003 	.word	0x00120003
    3f98:	00130003 	.word	0x00130003
    3f9c:	000c0003 	.word	0x000c0003
    3fa0:	000d0003 	.word	0x000d0003
    3fa4:	000e0003 	.word	0x000e0003
    3fa8:	000f0003 	.word	0x000f0003
    3fac:	00160003 	.word	0x00160003
    3fb0:	00170003 	.word	0x00170003
    3fb4:	00180003 	.word	0x00180003
    3fb8:	00190003 	.word	0x00190003

00003fbc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3fbc:	b590      	push	{r4, r7, lr}
    3fbe:	b08b      	sub	sp, #44	; 0x2c
    3fc0:	af00      	add	r7, sp, #0
    3fc2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3fc4:	230c      	movs	r3, #12
    3fc6:	18fb      	adds	r3, r7, r3
    3fc8:	4a0f      	ldr	r2, [pc, #60]	; (4008 <_sercom_get_sercom_inst_index+0x4c>)
    3fca:	ca13      	ldmia	r2!, {r0, r1, r4}
    3fcc:	c313      	stmia	r3!, {r0, r1, r4}
    3fce:	ca13      	ldmia	r2!, {r0, r1, r4}
    3fd0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3fd2:	2300      	movs	r3, #0
    3fd4:	627b      	str	r3, [r7, #36]	; 0x24
    3fd6:	e00e      	b.n	3ff6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3fd8:	230c      	movs	r3, #12
    3fda:	18fb      	adds	r3, r7, r3
    3fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3fde:	0092      	lsls	r2, r2, #2
    3fe0:	58d3      	ldr	r3, [r2, r3]
    3fe2:	001a      	movs	r2, r3
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	429a      	cmp	r2, r3
    3fe8:	d102      	bne.n	3ff0 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fec:	b2db      	uxtb	r3, r3
    3fee:	e006      	b.n	3ffe <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ff2:	3301      	adds	r3, #1
    3ff4:	627b      	str	r3, [r7, #36]	; 0x24
    3ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ff8:	2b05      	cmp	r3, #5
    3ffa:	d9ed      	bls.n	3fd8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3ffc:	2300      	movs	r3, #0
}
    3ffe:	0018      	movs	r0, r3
    4000:	46bd      	mov	sp, r7
    4002:	b00b      	add	sp, #44	; 0x2c
    4004:	bd90      	pop	{r4, r7, pc}
    4006:	46c0      	nop			; (mov r8, r8)
    4008:	0000c4ec 	.word	0x0000c4ec

0000400c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    400c:	b580      	push	{r7, lr}
    400e:	b082      	sub	sp, #8
    4010:	af00      	add	r7, sp, #0
    4012:	0002      	movs	r2, r0
    4014:	1dfb      	adds	r3, r7, #7
    4016:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4018:	46c0      	nop			; (mov r8, r8)
    401a:	46bd      	mov	sp, r7
    401c:	b002      	add	sp, #8
    401e:	bd80      	pop	{r7, pc}

00004020 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4020:	b580      	push	{r7, lr}
    4022:	b084      	sub	sp, #16
    4024:	af00      	add	r7, sp, #0
    4026:	0002      	movs	r2, r0
    4028:	6039      	str	r1, [r7, #0]
    402a:	1dfb      	adds	r3, r7, #7
    402c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    402e:	4b13      	ldr	r3, [pc, #76]	; (407c <_sercom_set_handler+0x5c>)
    4030:	781b      	ldrb	r3, [r3, #0]
    4032:	2201      	movs	r2, #1
    4034:	4053      	eors	r3, r2
    4036:	b2db      	uxtb	r3, r3
    4038:	2b00      	cmp	r3, #0
    403a:	d015      	beq.n	4068 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    403c:	2300      	movs	r3, #0
    403e:	60fb      	str	r3, [r7, #12]
    4040:	e00c      	b.n	405c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4042:	4b0f      	ldr	r3, [pc, #60]	; (4080 <_sercom_set_handler+0x60>)
    4044:	68fa      	ldr	r2, [r7, #12]
    4046:	0092      	lsls	r2, r2, #2
    4048:	490e      	ldr	r1, [pc, #56]	; (4084 <_sercom_set_handler+0x64>)
    404a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    404c:	4b0e      	ldr	r3, [pc, #56]	; (4088 <_sercom_set_handler+0x68>)
    404e:	68fa      	ldr	r2, [r7, #12]
    4050:	0092      	lsls	r2, r2, #2
    4052:	2100      	movs	r1, #0
    4054:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4056:	68fb      	ldr	r3, [r7, #12]
    4058:	3301      	adds	r3, #1
    405a:	60fb      	str	r3, [r7, #12]
    405c:	68fb      	ldr	r3, [r7, #12]
    405e:	2b05      	cmp	r3, #5
    4060:	d9ef      	bls.n	4042 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    4062:	4b06      	ldr	r3, [pc, #24]	; (407c <_sercom_set_handler+0x5c>)
    4064:	2201      	movs	r2, #1
    4066:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4068:	1dfb      	adds	r3, r7, #7
    406a:	781a      	ldrb	r2, [r3, #0]
    406c:	4b04      	ldr	r3, [pc, #16]	; (4080 <_sercom_set_handler+0x60>)
    406e:	0092      	lsls	r2, r2, #2
    4070:	6839      	ldr	r1, [r7, #0]
    4072:	50d1      	str	r1, [r2, r3]
}
    4074:	46c0      	nop			; (mov r8, r8)
    4076:	46bd      	mov	sp, r7
    4078:	b004      	add	sp, #16
    407a:	bd80      	pop	{r7, pc}
    407c:	2000015a 	.word	0x2000015a
    4080:	2000015c 	.word	0x2000015c
    4084:	0000400d 	.word	0x0000400d
    4088:	20000a08 	.word	0x20000a08

0000408c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    408c:	b590      	push	{r4, r7, lr}
    408e:	b085      	sub	sp, #20
    4090:	af00      	add	r7, sp, #0
    4092:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4094:	2308      	movs	r3, #8
    4096:	18fb      	adds	r3, r7, r3
    4098:	4a0b      	ldr	r2, [pc, #44]	; (40c8 <_sercom_get_interrupt_vector+0x3c>)
    409a:	6811      	ldr	r1, [r2, #0]
    409c:	6019      	str	r1, [r3, #0]
    409e:	8892      	ldrh	r2, [r2, #4]
    40a0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    40a2:	230f      	movs	r3, #15
    40a4:	18fc      	adds	r4, r7, r3
    40a6:	687b      	ldr	r3, [r7, #4]
    40a8:	0018      	movs	r0, r3
    40aa:	4b08      	ldr	r3, [pc, #32]	; (40cc <_sercom_get_interrupt_vector+0x40>)
    40ac:	4798      	blx	r3
    40ae:	0003      	movs	r3, r0
    40b0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    40b2:	230f      	movs	r3, #15
    40b4:	18fb      	adds	r3, r7, r3
    40b6:	781b      	ldrb	r3, [r3, #0]
    40b8:	2208      	movs	r2, #8
    40ba:	18ba      	adds	r2, r7, r2
    40bc:	5cd3      	ldrb	r3, [r2, r3]
    40be:	b25b      	sxtb	r3, r3
}
    40c0:	0018      	movs	r0, r3
    40c2:	46bd      	mov	sp, r7
    40c4:	b005      	add	sp, #20
    40c6:	bd90      	pop	{r4, r7, pc}
    40c8:	0000c504 	.word	0x0000c504
    40cc:	00003fbd 	.word	0x00003fbd

000040d0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    40d0:	b580      	push	{r7, lr}
    40d2:	af00      	add	r7, sp, #0
    40d4:	4b03      	ldr	r3, [pc, #12]	; (40e4 <SERCOM0_Handler+0x14>)
    40d6:	681b      	ldr	r3, [r3, #0]
    40d8:	2000      	movs	r0, #0
    40da:	4798      	blx	r3
    40dc:	46c0      	nop			; (mov r8, r8)
    40de:	46bd      	mov	sp, r7
    40e0:	bd80      	pop	{r7, pc}
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	2000015c 	.word	0x2000015c

000040e8 <SERCOM1_Handler>:
    40e8:	b580      	push	{r7, lr}
    40ea:	af00      	add	r7, sp, #0
    40ec:	4b03      	ldr	r3, [pc, #12]	; (40fc <SERCOM1_Handler+0x14>)
    40ee:	685b      	ldr	r3, [r3, #4]
    40f0:	2001      	movs	r0, #1
    40f2:	4798      	blx	r3
    40f4:	46c0      	nop			; (mov r8, r8)
    40f6:	46bd      	mov	sp, r7
    40f8:	bd80      	pop	{r7, pc}
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	2000015c 	.word	0x2000015c

00004100 <SERCOM2_Handler>:
    4100:	b580      	push	{r7, lr}
    4102:	af00      	add	r7, sp, #0
    4104:	4b03      	ldr	r3, [pc, #12]	; (4114 <SERCOM2_Handler+0x14>)
    4106:	689b      	ldr	r3, [r3, #8]
    4108:	2002      	movs	r0, #2
    410a:	4798      	blx	r3
    410c:	46c0      	nop			; (mov r8, r8)
    410e:	46bd      	mov	sp, r7
    4110:	bd80      	pop	{r7, pc}
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	2000015c 	.word	0x2000015c

00004118 <SERCOM3_Handler>:
    4118:	b580      	push	{r7, lr}
    411a:	af00      	add	r7, sp, #0
    411c:	4b03      	ldr	r3, [pc, #12]	; (412c <SERCOM3_Handler+0x14>)
    411e:	68db      	ldr	r3, [r3, #12]
    4120:	2003      	movs	r0, #3
    4122:	4798      	blx	r3
    4124:	46c0      	nop			; (mov r8, r8)
    4126:	46bd      	mov	sp, r7
    4128:	bd80      	pop	{r7, pc}
    412a:	46c0      	nop			; (mov r8, r8)
    412c:	2000015c 	.word	0x2000015c

00004130 <SERCOM4_Handler>:
    4130:	b580      	push	{r7, lr}
    4132:	af00      	add	r7, sp, #0
    4134:	4b03      	ldr	r3, [pc, #12]	; (4144 <SERCOM4_Handler+0x14>)
    4136:	691b      	ldr	r3, [r3, #16]
    4138:	2004      	movs	r0, #4
    413a:	4798      	blx	r3
    413c:	46c0      	nop			; (mov r8, r8)
    413e:	46bd      	mov	sp, r7
    4140:	bd80      	pop	{r7, pc}
    4142:	46c0      	nop			; (mov r8, r8)
    4144:	2000015c 	.word	0x2000015c

00004148 <SERCOM5_Handler>:
    4148:	b580      	push	{r7, lr}
    414a:	af00      	add	r7, sp, #0
    414c:	4b03      	ldr	r3, [pc, #12]	; (415c <SERCOM5_Handler+0x14>)
    414e:	695b      	ldr	r3, [r3, #20]
    4150:	2005      	movs	r0, #5
    4152:	4798      	blx	r3
    4154:	46c0      	nop			; (mov r8, r8)
    4156:	46bd      	mov	sp, r7
    4158:	bd80      	pop	{r7, pc}
    415a:	46c0      	nop			; (mov r8, r8)
    415c:	2000015c 	.word	0x2000015c

00004160 <system_pinmux_get_config_defaults>:
{
    4160:	b580      	push	{r7, lr}
    4162:	b082      	sub	sp, #8
    4164:	af00      	add	r7, sp, #0
    4166:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4168:	687b      	ldr	r3, [r7, #4]
    416a:	2280      	movs	r2, #128	; 0x80
    416c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    416e:	687b      	ldr	r3, [r7, #4]
    4170:	2200      	movs	r2, #0
    4172:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	2201      	movs	r2, #1
    4178:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    417a:	687b      	ldr	r3, [r7, #4]
    417c:	2200      	movs	r2, #0
    417e:	70da      	strb	r2, [r3, #3]
}
    4180:	46c0      	nop			; (mov r8, r8)
    4182:	46bd      	mov	sp, r7
    4184:	b002      	add	sp, #8
    4186:	bd80      	pop	{r7, pc}

00004188 <system_pinmux_get_group_from_gpio_pin>:
{
    4188:	b580      	push	{r7, lr}
    418a:	b084      	sub	sp, #16
    418c:	af00      	add	r7, sp, #0
    418e:	0002      	movs	r2, r0
    4190:	1dfb      	adds	r3, r7, #7
    4192:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4194:	230f      	movs	r3, #15
    4196:	18fb      	adds	r3, r7, r3
    4198:	1dfa      	adds	r2, r7, #7
    419a:	7812      	ldrb	r2, [r2, #0]
    419c:	09d2      	lsrs	r2, r2, #7
    419e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    41a0:	230e      	movs	r3, #14
    41a2:	18fb      	adds	r3, r7, r3
    41a4:	1dfa      	adds	r2, r7, #7
    41a6:	7812      	ldrb	r2, [r2, #0]
    41a8:	0952      	lsrs	r2, r2, #5
    41aa:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    41ac:	4b0d      	ldr	r3, [pc, #52]	; (41e4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    41ae:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    41b0:	230f      	movs	r3, #15
    41b2:	18fb      	adds	r3, r7, r3
    41b4:	781b      	ldrb	r3, [r3, #0]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d10f      	bne.n	41da <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    41ba:	230f      	movs	r3, #15
    41bc:	18fb      	adds	r3, r7, r3
    41be:	781b      	ldrb	r3, [r3, #0]
    41c0:	009b      	lsls	r3, r3, #2
    41c2:	2210      	movs	r2, #16
    41c4:	4694      	mov	ip, r2
    41c6:	44bc      	add	ip, r7
    41c8:	4463      	add	r3, ip
    41ca:	3b08      	subs	r3, #8
    41cc:	681a      	ldr	r2, [r3, #0]
    41ce:	230e      	movs	r3, #14
    41d0:	18fb      	adds	r3, r7, r3
    41d2:	781b      	ldrb	r3, [r3, #0]
    41d4:	01db      	lsls	r3, r3, #7
    41d6:	18d3      	adds	r3, r2, r3
    41d8:	e000      	b.n	41dc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    41da:	2300      	movs	r3, #0
}
    41dc:	0018      	movs	r0, r3
    41de:	46bd      	mov	sp, r7
    41e0:	b004      	add	sp, #16
    41e2:	bd80      	pop	{r7, pc}
    41e4:	41004400 	.word	0x41004400

000041e8 <port_get_group_from_gpio_pin>:
{
    41e8:	b580      	push	{r7, lr}
    41ea:	b082      	sub	sp, #8
    41ec:	af00      	add	r7, sp, #0
    41ee:	0002      	movs	r2, r0
    41f0:	1dfb      	adds	r3, r7, #7
    41f2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    41f4:	1dfb      	adds	r3, r7, #7
    41f6:	781b      	ldrb	r3, [r3, #0]
    41f8:	0018      	movs	r0, r3
    41fa:	4b03      	ldr	r3, [pc, #12]	; (4208 <port_get_group_from_gpio_pin+0x20>)
    41fc:	4798      	blx	r3
    41fe:	0003      	movs	r3, r0
}
    4200:	0018      	movs	r0, r3
    4202:	46bd      	mov	sp, r7
    4204:	b002      	add	sp, #8
    4206:	bd80      	pop	{r7, pc}
    4208:	00004189 	.word	0x00004189

0000420c <port_pin_set_output_level>:
{
    420c:	b580      	push	{r7, lr}
    420e:	b084      	sub	sp, #16
    4210:	af00      	add	r7, sp, #0
    4212:	0002      	movs	r2, r0
    4214:	1dfb      	adds	r3, r7, #7
    4216:	701a      	strb	r2, [r3, #0]
    4218:	1dbb      	adds	r3, r7, #6
    421a:	1c0a      	adds	r2, r1, #0
    421c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    421e:	1dfb      	adds	r3, r7, #7
    4220:	781b      	ldrb	r3, [r3, #0]
    4222:	0018      	movs	r0, r3
    4224:	4b0d      	ldr	r3, [pc, #52]	; (425c <port_pin_set_output_level+0x50>)
    4226:	4798      	blx	r3
    4228:	0003      	movs	r3, r0
    422a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    422c:	1dfb      	adds	r3, r7, #7
    422e:	781b      	ldrb	r3, [r3, #0]
    4230:	221f      	movs	r2, #31
    4232:	4013      	ands	r3, r2
    4234:	2201      	movs	r2, #1
    4236:	409a      	lsls	r2, r3
    4238:	0013      	movs	r3, r2
    423a:	60bb      	str	r3, [r7, #8]
	if (level) {
    423c:	1dbb      	adds	r3, r7, #6
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	2b00      	cmp	r3, #0
    4242:	d003      	beq.n	424c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4244:	68fb      	ldr	r3, [r7, #12]
    4246:	68ba      	ldr	r2, [r7, #8]
    4248:	619a      	str	r2, [r3, #24]
}
    424a:	e002      	b.n	4252 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    424c:	68fb      	ldr	r3, [r7, #12]
    424e:	68ba      	ldr	r2, [r7, #8]
    4250:	615a      	str	r2, [r3, #20]
}
    4252:	46c0      	nop			; (mov r8, r8)
    4254:	46bd      	mov	sp, r7
    4256:	b004      	add	sp, #16
    4258:	bd80      	pop	{r7, pc}
    425a:	46c0      	nop			; (mov r8, r8)
    425c:	000041e9 	.word	0x000041e9

00004260 <system_gclk_chan_get_config_defaults>:
{
    4260:	b580      	push	{r7, lr}
    4262:	b082      	sub	sp, #8
    4264:	af00      	add	r7, sp, #0
    4266:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4268:	687b      	ldr	r3, [r7, #4]
    426a:	2200      	movs	r2, #0
    426c:	701a      	strb	r2, [r3, #0]
}
    426e:	46c0      	nop			; (mov r8, r8)
    4270:	46bd      	mov	sp, r7
    4272:	b002      	add	sp, #8
    4274:	bd80      	pop	{r7, pc}
	...

00004278 <system_apb_clock_set_mask>:
{
    4278:	b580      	push	{r7, lr}
    427a:	b082      	sub	sp, #8
    427c:	af00      	add	r7, sp, #0
    427e:	0002      	movs	r2, r0
    4280:	6039      	str	r1, [r7, #0]
    4282:	1dfb      	adds	r3, r7, #7
    4284:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4286:	1dfb      	adds	r3, r7, #7
    4288:	781b      	ldrb	r3, [r3, #0]
    428a:	2b01      	cmp	r3, #1
    428c:	d00a      	beq.n	42a4 <system_apb_clock_set_mask+0x2c>
    428e:	2b02      	cmp	r3, #2
    4290:	d00f      	beq.n	42b2 <system_apb_clock_set_mask+0x3a>
    4292:	2b00      	cmp	r3, #0
    4294:	d114      	bne.n	42c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4296:	4b0e      	ldr	r3, [pc, #56]	; (42d0 <system_apb_clock_set_mask+0x58>)
    4298:	4a0d      	ldr	r2, [pc, #52]	; (42d0 <system_apb_clock_set_mask+0x58>)
    429a:	6991      	ldr	r1, [r2, #24]
    429c:	683a      	ldr	r2, [r7, #0]
    429e:	430a      	orrs	r2, r1
    42a0:	619a      	str	r2, [r3, #24]
			break;
    42a2:	e00f      	b.n	42c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    42a4:	4b0a      	ldr	r3, [pc, #40]	; (42d0 <system_apb_clock_set_mask+0x58>)
    42a6:	4a0a      	ldr	r2, [pc, #40]	; (42d0 <system_apb_clock_set_mask+0x58>)
    42a8:	69d1      	ldr	r1, [r2, #28]
    42aa:	683a      	ldr	r2, [r7, #0]
    42ac:	430a      	orrs	r2, r1
    42ae:	61da      	str	r2, [r3, #28]
			break;
    42b0:	e008      	b.n	42c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    42b2:	4b07      	ldr	r3, [pc, #28]	; (42d0 <system_apb_clock_set_mask+0x58>)
    42b4:	4a06      	ldr	r2, [pc, #24]	; (42d0 <system_apb_clock_set_mask+0x58>)
    42b6:	6a11      	ldr	r1, [r2, #32]
    42b8:	683a      	ldr	r2, [r7, #0]
    42ba:	430a      	orrs	r2, r1
    42bc:	621a      	str	r2, [r3, #32]
			break;
    42be:	e001      	b.n	42c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    42c0:	2317      	movs	r3, #23
    42c2:	e000      	b.n	42c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    42c4:	2300      	movs	r3, #0
}
    42c6:	0018      	movs	r0, r3
    42c8:	46bd      	mov	sp, r7
    42ca:	b002      	add	sp, #8
    42cc:	bd80      	pop	{r7, pc}
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	40000400 	.word	0x40000400

000042d4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    42d4:	b580      	push	{r7, lr}
    42d6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    42d8:	4b05      	ldr	r3, [pc, #20]	; (42f0 <system_is_debugger_present+0x1c>)
    42da:	789b      	ldrb	r3, [r3, #2]
    42dc:	b2db      	uxtb	r3, r3
    42de:	001a      	movs	r2, r3
    42e0:	2302      	movs	r3, #2
    42e2:	4013      	ands	r3, r2
    42e4:	1e5a      	subs	r2, r3, #1
    42e6:	4193      	sbcs	r3, r2
    42e8:	b2db      	uxtb	r3, r3
}
    42ea:	0018      	movs	r0, r3
    42ec:	46bd      	mov	sp, r7
    42ee:	bd80      	pop	{r7, pc}
    42f0:	41002000 	.word	0x41002000

000042f4 <system_interrupt_enable>:
{
    42f4:	b580      	push	{r7, lr}
    42f6:	b082      	sub	sp, #8
    42f8:	af00      	add	r7, sp, #0
    42fa:	0002      	movs	r2, r0
    42fc:	1dfb      	adds	r3, r7, #7
    42fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4300:	4b06      	ldr	r3, [pc, #24]	; (431c <system_interrupt_enable+0x28>)
    4302:	1dfa      	adds	r2, r7, #7
    4304:	7812      	ldrb	r2, [r2, #0]
    4306:	0011      	movs	r1, r2
    4308:	221f      	movs	r2, #31
    430a:	400a      	ands	r2, r1
    430c:	2101      	movs	r1, #1
    430e:	4091      	lsls	r1, r2
    4310:	000a      	movs	r2, r1
    4312:	601a      	str	r2, [r3, #0]
}
    4314:	46c0      	nop			; (mov r8, r8)
    4316:	46bd      	mov	sp, r7
    4318:	b002      	add	sp, #8
    431a:	bd80      	pop	{r7, pc}
    431c:	e000e100 	.word	0xe000e100

00004320 <system_interrupt_disable>:
{
    4320:	b580      	push	{r7, lr}
    4322:	b082      	sub	sp, #8
    4324:	af00      	add	r7, sp, #0
    4326:	0002      	movs	r2, r0
    4328:	1dfb      	adds	r3, r7, #7
    432a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    432c:	4a07      	ldr	r2, [pc, #28]	; (434c <system_interrupt_disable+0x2c>)
    432e:	1dfb      	adds	r3, r7, #7
    4330:	781b      	ldrb	r3, [r3, #0]
    4332:	0019      	movs	r1, r3
    4334:	231f      	movs	r3, #31
    4336:	400b      	ands	r3, r1
    4338:	2101      	movs	r1, #1
    433a:	4099      	lsls	r1, r3
    433c:	000b      	movs	r3, r1
    433e:	0019      	movs	r1, r3
    4340:	2380      	movs	r3, #128	; 0x80
    4342:	50d1      	str	r1, [r2, r3]
}
    4344:	46c0      	nop			; (mov r8, r8)
    4346:	46bd      	mov	sp, r7
    4348:	b002      	add	sp, #8
    434a:	bd80      	pop	{r7, pc}
    434c:	e000e100 	.word	0xe000e100

00004350 <spi_is_syncing>:
{
    4350:	b580      	push	{r7, lr}
    4352:	b084      	sub	sp, #16
    4354:	af00      	add	r7, sp, #0
    4356:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    435e:	68fb      	ldr	r3, [r7, #12]
    4360:	69db      	ldr	r3, [r3, #28]
    4362:	1e5a      	subs	r2, r3, #1
    4364:	4193      	sbcs	r3, r2
    4366:	b2db      	uxtb	r3, r3
}
    4368:	0018      	movs	r0, r3
    436a:	46bd      	mov	sp, r7
    436c:	b004      	add	sp, #16
    436e:	bd80      	pop	{r7, pc}

00004370 <spi_enable>:
{
    4370:	b580      	push	{r7, lr}
    4372:	b084      	sub	sp, #16
    4374:	af00      	add	r7, sp, #0
    4376:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4378:	687b      	ldr	r3, [r7, #4]
    437a:	681b      	ldr	r3, [r3, #0]
    437c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	681b      	ldr	r3, [r3, #0]
    4382:	0018      	movs	r0, r3
    4384:	4b0b      	ldr	r3, [pc, #44]	; (43b4 <spi_enable+0x44>)
    4386:	4798      	blx	r3
    4388:	0003      	movs	r3, r0
    438a:	0018      	movs	r0, r3
    438c:	4b0a      	ldr	r3, [pc, #40]	; (43b8 <spi_enable+0x48>)
    438e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    4390:	46c0      	nop			; (mov r8, r8)
    4392:	687b      	ldr	r3, [r7, #4]
    4394:	0018      	movs	r0, r3
    4396:	4b09      	ldr	r3, [pc, #36]	; (43bc <spi_enable+0x4c>)
    4398:	4798      	blx	r3
    439a:	1e03      	subs	r3, r0, #0
    439c:	d1f9      	bne.n	4392 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    439e:	68fb      	ldr	r3, [r7, #12]
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	2202      	movs	r2, #2
    43a4:	431a      	orrs	r2, r3
    43a6:	68fb      	ldr	r3, [r7, #12]
    43a8:	601a      	str	r2, [r3, #0]
}
    43aa:	46c0      	nop			; (mov r8, r8)
    43ac:	46bd      	mov	sp, r7
    43ae:	b004      	add	sp, #16
    43b0:	bd80      	pop	{r7, pc}
    43b2:	46c0      	nop			; (mov r8, r8)
    43b4:	0000408d 	.word	0x0000408d
    43b8:	000042f5 	.word	0x000042f5
    43bc:	00004351 	.word	0x00004351

000043c0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    43c0:	b580      	push	{r7, lr}
    43c2:	b084      	sub	sp, #16
    43c4:	af00      	add	r7, sp, #0
    43c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	681b      	ldr	r3, [r3, #0]
    43cc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    43ce:	687b      	ldr	r3, [r7, #4]
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	0018      	movs	r0, r3
    43d4:	4b0e      	ldr	r3, [pc, #56]	; (4410 <spi_disable+0x50>)
    43d6:	4798      	blx	r3
    43d8:	0003      	movs	r3, r0
    43da:	0018      	movs	r0, r3
    43dc:	4b0d      	ldr	r3, [pc, #52]	; (4414 <spi_disable+0x54>)
    43de:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    43e0:	46c0      	nop			; (mov r8, r8)
    43e2:	687b      	ldr	r3, [r7, #4]
    43e4:	0018      	movs	r0, r3
    43e6:	4b0c      	ldr	r3, [pc, #48]	; (4418 <spi_disable+0x58>)
    43e8:	4798      	blx	r3
    43ea:	1e03      	subs	r3, r0, #0
    43ec:	d1f9      	bne.n	43e2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	228f      	movs	r2, #143	; 0x8f
    43f2:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	228f      	movs	r2, #143	; 0x8f
    43f8:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    43fa:	68fb      	ldr	r3, [r7, #12]
    43fc:	681b      	ldr	r3, [r3, #0]
    43fe:	2202      	movs	r2, #2
    4400:	4393      	bics	r3, r2
    4402:	001a      	movs	r2, r3
    4404:	68fb      	ldr	r3, [r7, #12]
    4406:	601a      	str	r2, [r3, #0]
}
    4408:	46c0      	nop			; (mov r8, r8)
    440a:	46bd      	mov	sp, r7
    440c:	b004      	add	sp, #16
    440e:	bd80      	pop	{r7, pc}
    4410:	0000408d 	.word	0x0000408d
    4414:	00004321 	.word	0x00004321
    4418:	00004351 	.word	0x00004351

0000441c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    441c:	b580      	push	{r7, lr}
    441e:	b084      	sub	sp, #16
    4420:	af00      	add	r7, sp, #0
    4422:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4424:	687b      	ldr	r3, [r7, #4]
    4426:	681b      	ldr	r3, [r3, #0]
    4428:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    442a:	68fb      	ldr	r3, [r7, #12]
    442c:	7e1b      	ldrb	r3, [r3, #24]
    442e:	b2db      	uxtb	r3, r3
    4430:	001a      	movs	r2, r3
    4432:	2302      	movs	r3, #2
    4434:	4013      	ands	r3, r2
    4436:	1e5a      	subs	r2, r3, #1
    4438:	4193      	sbcs	r3, r2
    443a:	b2db      	uxtb	r3, r3
}
    443c:	0018      	movs	r0, r3
    443e:	46bd      	mov	sp, r7
    4440:	b004      	add	sp, #16
    4442:	bd80      	pop	{r7, pc}

00004444 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    4444:	b580      	push	{r7, lr}
    4446:	b084      	sub	sp, #16
    4448:	af00      	add	r7, sp, #0
    444a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    444c:	687b      	ldr	r3, [r7, #4]
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4452:	68fb      	ldr	r3, [r7, #12]
    4454:	7e1b      	ldrb	r3, [r3, #24]
    4456:	b2db      	uxtb	r3, r3
    4458:	001a      	movs	r2, r3
    445a:	2301      	movs	r3, #1
    445c:	4013      	ands	r3, r2
    445e:	1e5a      	subs	r2, r3, #1
    4460:	4193      	sbcs	r3, r2
    4462:	b2db      	uxtb	r3, r3
}
    4464:	0018      	movs	r0, r3
    4466:	46bd      	mov	sp, r7
    4468:	b004      	add	sp, #16
    446a:	bd80      	pop	{r7, pc}

0000446c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    446c:	b580      	push	{r7, lr}
    446e:	b084      	sub	sp, #16
    4470:	af00      	add	r7, sp, #0
    4472:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4474:	687b      	ldr	r3, [r7, #4]
    4476:	681b      	ldr	r3, [r3, #0]
    4478:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    447a:	68fb      	ldr	r3, [r7, #12]
    447c:	7e1b      	ldrb	r3, [r3, #24]
    447e:	b2db      	uxtb	r3, r3
    4480:	001a      	movs	r2, r3
    4482:	2304      	movs	r3, #4
    4484:	4013      	ands	r3, r2
    4486:	1e5a      	subs	r2, r3, #1
    4488:	4193      	sbcs	r3, r2
    448a:	b2db      	uxtb	r3, r3
}
    448c:	0018      	movs	r0, r3
    448e:	46bd      	mov	sp, r7
    4490:	b004      	add	sp, #16
    4492:	bd80      	pop	{r7, pc}

00004494 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    4494:	b580      	push	{r7, lr}
    4496:	b084      	sub	sp, #16
    4498:	af00      	add	r7, sp, #0
    449a:	6078      	str	r0, [r7, #4]
    449c:	000a      	movs	r2, r1
    449e:	1cbb      	adds	r3, r7, #2
    44a0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44a2:	687b      	ldr	r3, [r7, #4]
    44a4:	681b      	ldr	r3, [r3, #0]
    44a6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    44a8:	687b      	ldr	r3, [r7, #4]
    44aa:	0018      	movs	r0, r3
    44ac:	4b0a      	ldr	r3, [pc, #40]	; (44d8 <spi_write+0x44>)
    44ae:	4798      	blx	r3
    44b0:	0003      	movs	r3, r0
    44b2:	001a      	movs	r2, r3
    44b4:	2301      	movs	r3, #1
    44b6:	4053      	eors	r3, r2
    44b8:	b2db      	uxtb	r3, r3
    44ba:	2b00      	cmp	r3, #0
    44bc:	d001      	beq.n	44c2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    44be:	2305      	movs	r3, #5
    44c0:	e006      	b.n	44d0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    44c2:	1cbb      	adds	r3, r7, #2
    44c4:	881b      	ldrh	r3, [r3, #0]
    44c6:	05db      	lsls	r3, r3, #23
    44c8:	0dda      	lsrs	r2, r3, #23
    44ca:	68fb      	ldr	r3, [r7, #12]
    44cc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    44ce:	2300      	movs	r3, #0
}
    44d0:	0018      	movs	r0, r3
    44d2:	46bd      	mov	sp, r7
    44d4:	b004      	add	sp, #16
    44d6:	bd80      	pop	{r7, pc}
    44d8:	00004445 	.word	0x00004445

000044dc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    44dc:	b580      	push	{r7, lr}
    44de:	b084      	sub	sp, #16
    44e0:	af00      	add	r7, sp, #0
    44e2:	6078      	str	r0, [r7, #4]
    44e4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44e6:	687b      	ldr	r3, [r7, #4]
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    44ec:	687b      	ldr	r3, [r7, #4]
    44ee:	0018      	movs	r0, r3
    44f0:	4b1b      	ldr	r3, [pc, #108]	; (4560 <spi_read+0x84>)
    44f2:	4798      	blx	r3
    44f4:	0003      	movs	r3, r0
    44f6:	001a      	movs	r2, r3
    44f8:	2301      	movs	r3, #1
    44fa:	4053      	eors	r3, r2
    44fc:	b2db      	uxtb	r3, r3
    44fe:	2b00      	cmp	r3, #0
    4500:	d001      	beq.n	4506 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    4502:	2310      	movs	r3, #16
    4504:	e027      	b.n	4556 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    4506:	230f      	movs	r3, #15
    4508:	18fb      	adds	r3, r7, r3
    450a:	2200      	movs	r2, #0
    450c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    450e:	68bb      	ldr	r3, [r7, #8]
    4510:	8b5b      	ldrh	r3, [r3, #26]
    4512:	b29b      	uxth	r3, r3
    4514:	001a      	movs	r2, r3
    4516:	2304      	movs	r3, #4
    4518:	4013      	ands	r3, r2
    451a:	d006      	beq.n	452a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    451c:	230f      	movs	r3, #15
    451e:	18fb      	adds	r3, r7, r3
    4520:	221e      	movs	r2, #30
    4522:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4524:	68bb      	ldr	r3, [r7, #8]
    4526:	2204      	movs	r2, #4
    4528:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    452a:	687b      	ldr	r3, [r7, #4]
    452c:	799b      	ldrb	r3, [r3, #6]
    452e:	2b01      	cmp	r3, #1
    4530:	d108      	bne.n	4544 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4532:	68bb      	ldr	r3, [r7, #8]
    4534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4536:	b29b      	uxth	r3, r3
    4538:	05db      	lsls	r3, r3, #23
    453a:	0ddb      	lsrs	r3, r3, #23
    453c:	b29a      	uxth	r2, r3
    453e:	683b      	ldr	r3, [r7, #0]
    4540:	801a      	strh	r2, [r3, #0]
    4542:	e005      	b.n	4550 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4544:	68bb      	ldr	r3, [r7, #8]
    4546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4548:	b2db      	uxtb	r3, r3
    454a:	b29a      	uxth	r2, r3
    454c:	683b      	ldr	r3, [r7, #0]
    454e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    4550:	230f      	movs	r3, #15
    4552:	18fb      	adds	r3, r7, r3
    4554:	781b      	ldrb	r3, [r3, #0]
}
    4556:	0018      	movs	r0, r3
    4558:	46bd      	mov	sp, r7
    455a:	b004      	add	sp, #16
    455c:	bd80      	pop	{r7, pc}
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	0000446d 	.word	0x0000446d

00004564 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    4564:	b580      	push	{r7, lr}
    4566:	b084      	sub	sp, #16
    4568:	af00      	add	r7, sp, #0
    456a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    456c:	687b      	ldr	r3, [r7, #4]
    456e:	681b      	ldr	r3, [r3, #0]
    4570:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    4572:	687b      	ldr	r3, [r7, #4]
    4574:	0018      	movs	r0, r3
    4576:	4b09      	ldr	r3, [pc, #36]	; (459c <spi_reset+0x38>)
    4578:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	0018      	movs	r0, r3
    4580:	4b07      	ldr	r3, [pc, #28]	; (45a0 <spi_reset+0x3c>)
    4582:	4798      	blx	r3
    4584:	1e03      	subs	r3, r0, #0
    4586:	d1f9      	bne.n	457c <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    4588:	68fb      	ldr	r3, [r7, #12]
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	2201      	movs	r2, #1
    458e:	431a      	orrs	r2, r3
    4590:	68fb      	ldr	r3, [r7, #12]
    4592:	601a      	str	r2, [r3, #0]
}
    4594:	46c0      	nop			; (mov r8, r8)
    4596:	46bd      	mov	sp, r7
    4598:	b004      	add	sp, #16
    459a:	bd80      	pop	{r7, pc}
    459c:	000043c1 	.word	0x000043c1
    45a0:	00004351 	.word	0x00004351

000045a4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    45a4:	b590      	push	{r4, r7, lr}
    45a6:	b089      	sub	sp, #36	; 0x24
    45a8:	af00      	add	r7, sp, #0
    45aa:	6078      	str	r0, [r7, #4]
    45ac:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    45ae:	230c      	movs	r3, #12
    45b0:	18fb      	adds	r3, r7, r3
    45b2:	2200      	movs	r2, #0
    45b4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	681b      	ldr	r3, [r3, #0]
    45ba:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    45bc:	687b      	ldr	r3, [r7, #4]
    45be:	0018      	movs	r0, r3
    45c0:	4b24      	ldr	r3, [pc, #144]	; (4654 <spi_set_baudrate+0xb0>)
    45c2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    45c4:	46c0      	nop			; (mov r8, r8)
    45c6:	687b      	ldr	r3, [r7, #4]
    45c8:	0018      	movs	r0, r3
    45ca:	4b23      	ldr	r3, [pc, #140]	; (4658 <spi_set_baudrate+0xb4>)
    45cc:	4798      	blx	r3
    45ce:	1e03      	subs	r3, r0, #0
    45d0:	d1f9      	bne.n	45c6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    45d2:	687b      	ldr	r3, [r7, #4]
    45d4:	681b      	ldr	r3, [r3, #0]
    45d6:	0018      	movs	r0, r3
    45d8:	4b20      	ldr	r3, [pc, #128]	; (465c <spi_set_baudrate+0xb8>)
    45da:	4798      	blx	r3
    45dc:	0003      	movs	r3, r0
    45de:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    45e0:	69bb      	ldr	r3, [r7, #24]
    45e2:	3314      	adds	r3, #20
    45e4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    45e6:	697b      	ldr	r3, [r7, #20]
    45e8:	b2db      	uxtb	r3, r3
    45ea:	0018      	movs	r0, r3
    45ec:	4b1c      	ldr	r3, [pc, #112]	; (4660 <spi_set_baudrate+0xbc>)
    45ee:	4798      	blx	r3
    45f0:	0003      	movs	r3, r0
    45f2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    45f4:	230f      	movs	r3, #15
    45f6:	18fc      	adds	r4, r7, r3
    45f8:	230c      	movs	r3, #12
    45fa:	18fa      	adds	r2, r7, r3
    45fc:	6939      	ldr	r1, [r7, #16]
    45fe:	683b      	ldr	r3, [r7, #0]
    4600:	0018      	movs	r0, r3
    4602:	4b18      	ldr	r3, [pc, #96]	; (4664 <spi_set_baudrate+0xc0>)
    4604:	4798      	blx	r3
    4606:	0003      	movs	r3, r0
    4608:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    460a:	230f      	movs	r3, #15
    460c:	18fb      	adds	r3, r7, r3
    460e:	781b      	ldrb	r3, [r3, #0]
    4610:	2b00      	cmp	r3, #0
    4612:	d001      	beq.n	4618 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4614:	2317      	movs	r3, #23
    4616:	e018      	b.n	464a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    4618:	230c      	movs	r3, #12
    461a:	18fb      	adds	r3, r7, r3
    461c:	881b      	ldrh	r3, [r3, #0]
    461e:	b2da      	uxtb	r2, r3
    4620:	69fb      	ldr	r3, [r7, #28]
    4622:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    4624:	46c0      	nop			; (mov r8, r8)
    4626:	687b      	ldr	r3, [r7, #4]
    4628:	0018      	movs	r0, r3
    462a:	4b0b      	ldr	r3, [pc, #44]	; (4658 <spi_set_baudrate+0xb4>)
    462c:	4798      	blx	r3
    462e:	1e03      	subs	r3, r0, #0
    4630:	d1f9      	bne.n	4626 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    4632:	687b      	ldr	r3, [r7, #4]
    4634:	0018      	movs	r0, r3
    4636:	4b0c      	ldr	r3, [pc, #48]	; (4668 <spi_set_baudrate+0xc4>)
    4638:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    463a:	46c0      	nop			; (mov r8, r8)
    463c:	687b      	ldr	r3, [r7, #4]
    463e:	0018      	movs	r0, r3
    4640:	4b05      	ldr	r3, [pc, #20]	; (4658 <spi_set_baudrate+0xb4>)
    4642:	4798      	blx	r3
    4644:	1e03      	subs	r3, r0, #0
    4646:	d1f9      	bne.n	463c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    4648:	2300      	movs	r3, #0
}
    464a:	0018      	movs	r0, r3
    464c:	46bd      	mov	sp, r7
    464e:	b009      	add	sp, #36	; 0x24
    4650:	bd90      	pop	{r4, r7, pc}
    4652:	46c0      	nop			; (mov r8, r8)
    4654:	000043c1 	.word	0x000043c1
    4658:	00004351 	.word	0x00004351
    465c:	00003fbd 	.word	0x00003fbd
    4660:	00006bf5 	.word	0x00006bf5
    4664:	00003b37 	.word	0x00003b37
    4668:	00004371 	.word	0x00004371

0000466c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    466c:	b590      	push	{r4, r7, lr}
    466e:	b093      	sub	sp, #76	; 0x4c
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
    4674:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4676:	687b      	ldr	r3, [r7, #4]
    4678:	681b      	ldr	r3, [r3, #0]
    467a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    467c:	687b      	ldr	r3, [r7, #4]
    467e:	681b      	ldr	r3, [r3, #0]
    4680:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    4682:	231c      	movs	r3, #28
    4684:	18fb      	adds	r3, r7, r3
    4686:	0018      	movs	r0, r3
    4688:	4b75      	ldr	r3, [pc, #468]	; (4860 <_spi_set_config+0x1f4>)
    468a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    468c:	231c      	movs	r3, #28
    468e:	18fb      	adds	r3, r7, r3
    4690:	2200      	movs	r2, #0
    4692:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    4694:	683b      	ldr	r3, [r7, #0]
    4696:	781b      	ldrb	r3, [r3, #0]
    4698:	2b00      	cmp	r3, #0
    469a:	d103      	bne.n	46a4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    469c:	231c      	movs	r3, #28
    469e:	18fb      	adds	r3, r7, r3
    46a0:	2200      	movs	r2, #0
    46a2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    46a4:	683b      	ldr	r3, [r7, #0]
    46a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    46a8:	230c      	movs	r3, #12
    46aa:	18fb      	adds	r3, r7, r3
    46ac:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    46ae:	683b      	ldr	r3, [r7, #0]
    46b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    46b2:	230c      	movs	r3, #12
    46b4:	18fb      	adds	r3, r7, r3
    46b6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    46b8:	683b      	ldr	r3, [r7, #0]
    46ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    46bc:	230c      	movs	r3, #12
    46be:	18fb      	adds	r3, r7, r3
    46c0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    46c2:	683b      	ldr	r3, [r7, #0]
    46c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    46c6:	230c      	movs	r3, #12
    46c8:	18fb      	adds	r3, r7, r3
    46ca:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    46cc:	2347      	movs	r3, #71	; 0x47
    46ce:	18fb      	adds	r3, r7, r3
    46d0:	2200      	movs	r2, #0
    46d2:	701a      	strb	r2, [r3, #0]
    46d4:	e02c      	b.n	4730 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    46d6:	2347      	movs	r3, #71	; 0x47
    46d8:	18fb      	adds	r3, r7, r3
    46da:	781a      	ldrb	r2, [r3, #0]
    46dc:	230c      	movs	r3, #12
    46de:	18fb      	adds	r3, r7, r3
    46e0:	0092      	lsls	r2, r2, #2
    46e2:	58d3      	ldr	r3, [r2, r3]
    46e4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    46e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    46e8:	2b00      	cmp	r3, #0
    46ea:	d109      	bne.n	4700 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    46ec:	2347      	movs	r3, #71	; 0x47
    46ee:	18fb      	adds	r3, r7, r3
    46f0:	781a      	ldrb	r2, [r3, #0]
    46f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    46f4:	0011      	movs	r1, r2
    46f6:	0018      	movs	r0, r3
    46f8:	4b5a      	ldr	r3, [pc, #360]	; (4864 <_spi_set_config+0x1f8>)
    46fa:	4798      	blx	r3
    46fc:	0003      	movs	r3, r0
    46fe:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4702:	3301      	adds	r3, #1
    4704:	d00d      	beq.n	4722 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4708:	b2da      	uxtb	r2, r3
    470a:	231c      	movs	r3, #28
    470c:	18fb      	adds	r3, r7, r3
    470e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4712:	0c1b      	lsrs	r3, r3, #16
    4714:	b2db      	uxtb	r3, r3
    4716:	221c      	movs	r2, #28
    4718:	18ba      	adds	r2, r7, r2
    471a:	0011      	movs	r1, r2
    471c:	0018      	movs	r0, r3
    471e:	4b52      	ldr	r3, [pc, #328]	; (4868 <_spi_set_config+0x1fc>)
    4720:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    4722:	2347      	movs	r3, #71	; 0x47
    4724:	18fb      	adds	r3, r7, r3
    4726:	781a      	ldrb	r2, [r3, #0]
    4728:	2347      	movs	r3, #71	; 0x47
    472a:	18fb      	adds	r3, r7, r3
    472c:	3201      	adds	r2, #1
    472e:	701a      	strb	r2, [r3, #0]
    4730:	2347      	movs	r3, #71	; 0x47
    4732:	18fb      	adds	r3, r7, r3
    4734:	781b      	ldrb	r3, [r3, #0]
    4736:	2b03      	cmp	r3, #3
    4738:	d9cd      	bls.n	46d6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    473a:	683b      	ldr	r3, [r7, #0]
    473c:	781a      	ldrb	r2, [r3, #0]
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    4742:	683b      	ldr	r3, [r7, #0]
    4744:	7c1a      	ldrb	r2, [r3, #16]
    4746:	687b      	ldr	r3, [r7, #4]
    4748:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    474a:	683b      	ldr	r3, [r7, #0]
    474c:	7c9a      	ldrb	r2, [r3, #18]
    474e:	687b      	ldr	r3, [r7, #4]
    4750:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    4752:	683b      	ldr	r3, [r7, #0]
    4754:	7d1a      	ldrb	r2, [r3, #20]
    4756:	687b      	ldr	r3, [r7, #4]
    4758:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    475a:	230a      	movs	r3, #10
    475c:	18fb      	adds	r3, r7, r3
    475e:	2200      	movs	r2, #0
    4760:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    4762:	2300      	movs	r3, #0
    4764:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    4766:	2300      	movs	r3, #0
    4768:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    476a:	683b      	ldr	r3, [r7, #0]
    476c:	781b      	ldrb	r3, [r3, #0]
    476e:	2b01      	cmp	r3, #1
    4770:	d129      	bne.n	47c6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	681b      	ldr	r3, [r3, #0]
    4776:	0018      	movs	r0, r3
    4778:	4b3c      	ldr	r3, [pc, #240]	; (486c <_spi_set_config+0x200>)
    477a:	4798      	blx	r3
    477c:	0003      	movs	r3, r0
    477e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4782:	3314      	adds	r3, #20
    4784:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4786:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4788:	b2db      	uxtb	r3, r3
    478a:	0018      	movs	r0, r3
    478c:	4b38      	ldr	r3, [pc, #224]	; (4870 <_spi_set_config+0x204>)
    478e:	4798      	blx	r3
    4790:	0003      	movs	r3, r0
    4792:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    4794:	683b      	ldr	r3, [r7, #0]
    4796:	699b      	ldr	r3, [r3, #24]
    4798:	2223      	movs	r2, #35	; 0x23
    479a:	18bc      	adds	r4, r7, r2
    479c:	220a      	movs	r2, #10
    479e:	18ba      	adds	r2, r7, r2
    47a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    47a2:	0018      	movs	r0, r3
    47a4:	4b33      	ldr	r3, [pc, #204]	; (4874 <_spi_set_config+0x208>)
    47a6:	4798      	blx	r3
    47a8:	0003      	movs	r3, r0
    47aa:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    47ac:	2323      	movs	r3, #35	; 0x23
    47ae:	18fb      	adds	r3, r7, r3
    47b0:	781b      	ldrb	r3, [r3, #0]
    47b2:	2b00      	cmp	r3, #0
    47b4:	d001      	beq.n	47ba <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    47b6:	2317      	movs	r3, #23
    47b8:	e04e      	b.n	4858 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    47ba:	230a      	movs	r3, #10
    47bc:	18fb      	adds	r3, r7, r3
    47be:	881b      	ldrh	r3, [r3, #0]
    47c0:	b2da      	uxtb	r2, r3
    47c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    47c4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    47c6:	683b      	ldr	r3, [r7, #0]
    47c8:	685b      	ldr	r3, [r3, #4]
    47ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    47cc:	4313      	orrs	r3, r2
    47ce:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    47d0:	683b      	ldr	r3, [r7, #0]
    47d2:	689b      	ldr	r3, [r3, #8]
    47d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    47d6:	4313      	orrs	r3, r2
    47d8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    47da:	683b      	ldr	r3, [r7, #0]
    47dc:	68db      	ldr	r3, [r3, #12]
    47de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    47e0:	4313      	orrs	r3, r2
    47e2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    47e4:	683b      	ldr	r3, [r7, #0]
    47e6:	7c1b      	ldrb	r3, [r3, #16]
    47e8:	001a      	movs	r2, r3
    47ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    47ec:	4313      	orrs	r3, r2
    47ee:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    47f0:	683b      	ldr	r3, [r7, #0]
    47f2:	7c5b      	ldrb	r3, [r3, #17]
    47f4:	2b00      	cmp	r3, #0
    47f6:	d103      	bne.n	4800 <_spi_set_config+0x194>
    47f8:	4b1f      	ldr	r3, [pc, #124]	; (4878 <_spi_set_config+0x20c>)
    47fa:	4798      	blx	r3
    47fc:	1e03      	subs	r3, r0, #0
    47fe:	d003      	beq.n	4808 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4802:	2280      	movs	r2, #128	; 0x80
    4804:	4313      	orrs	r3, r2
    4806:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4808:	683b      	ldr	r3, [r7, #0]
    480a:	7c9b      	ldrb	r3, [r3, #18]
    480c:	2b00      	cmp	r3, #0
    480e:	d004      	beq.n	481a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4812:	2280      	movs	r2, #128	; 0x80
    4814:	0292      	lsls	r2, r2, #10
    4816:	4313      	orrs	r3, r2
    4818:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    481a:	683b      	ldr	r3, [r7, #0]
    481c:	7cdb      	ldrb	r3, [r3, #19]
    481e:	2b00      	cmp	r3, #0
    4820:	d004      	beq.n	482c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4824:	2280      	movs	r2, #128	; 0x80
    4826:	0092      	lsls	r2, r2, #2
    4828:	4313      	orrs	r3, r2
    482a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    482c:	683b      	ldr	r3, [r7, #0]
    482e:	7d1b      	ldrb	r3, [r3, #20]
    4830:	2b00      	cmp	r3, #0
    4832:	d004      	beq.n	483e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4836:	2280      	movs	r2, #128	; 0x80
    4838:	0192      	lsls	r2, r2, #6
    483a:	4313      	orrs	r3, r2
    483c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4840:	681a      	ldr	r2, [r3, #0]
    4842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4844:	431a      	orrs	r2, r3
    4846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4848:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    484c:	685a      	ldr	r2, [r3, #4]
    484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4850:	431a      	orrs	r2, r3
    4852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4854:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    4856:	2300      	movs	r3, #0
}
    4858:	0018      	movs	r0, r3
    485a:	46bd      	mov	sp, r7
    485c:	b013      	add	sp, #76	; 0x4c
    485e:	bd90      	pop	{r4, r7, pc}
    4860:	00004161 	.word	0x00004161
    4864:	00003e01 	.word	0x00003e01
    4868:	00006dbd 	.word	0x00006dbd
    486c:	00003fbd 	.word	0x00003fbd
    4870:	00006bf5 	.word	0x00006bf5
    4874:	00003b37 	.word	0x00003b37
    4878:	000042d5 	.word	0x000042d5

0000487c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    487c:	b590      	push	{r4, r7, lr}
    487e:	b08b      	sub	sp, #44	; 0x2c
    4880:	af00      	add	r7, sp, #0
    4882:	60f8      	str	r0, [r7, #12]
    4884:	60b9      	str	r1, [r7, #8]
    4886:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4888:	68fb      	ldr	r3, [r7, #12]
    488a:	68ba      	ldr	r2, [r7, #8]
    488c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    488e:	68fb      	ldr	r3, [r7, #12]
    4890:	681b      	ldr	r3, [r3, #0]
    4892:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4894:	6a3b      	ldr	r3, [r7, #32]
    4896:	681b      	ldr	r3, [r3, #0]
    4898:	2202      	movs	r2, #2
    489a:	4013      	ands	r3, r2
    489c:	d001      	beq.n	48a2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    489e:	231c      	movs	r3, #28
    48a0:	e09c      	b.n	49dc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    48a2:	6a3b      	ldr	r3, [r7, #32]
    48a4:	681b      	ldr	r3, [r3, #0]
    48a6:	2201      	movs	r2, #1
    48a8:	4013      	ands	r3, r2
    48aa:	d001      	beq.n	48b0 <spi_init+0x34>
		return STATUS_BUSY;
    48ac:	2305      	movs	r3, #5
    48ae:	e095      	b.n	49dc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    48b0:	68fb      	ldr	r3, [r7, #12]
    48b2:	681b      	ldr	r3, [r3, #0]
    48b4:	0018      	movs	r0, r3
    48b6:	4b4b      	ldr	r3, [pc, #300]	; (49e4 <spi_init+0x168>)
    48b8:	4798      	blx	r3
    48ba:	0003      	movs	r3, r0
    48bc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    48be:	69fb      	ldr	r3, [r7, #28]
    48c0:	3302      	adds	r3, #2
    48c2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    48c4:	69fb      	ldr	r3, [r7, #28]
    48c6:	3314      	adds	r3, #20
    48c8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    48ca:	2201      	movs	r2, #1
    48cc:	69bb      	ldr	r3, [r7, #24]
    48ce:	409a      	lsls	r2, r3
    48d0:	0013      	movs	r3, r2
    48d2:	0019      	movs	r1, r3
    48d4:	2002      	movs	r0, #2
    48d6:	4b44      	ldr	r3, [pc, #272]	; (49e8 <spi_init+0x16c>)
    48d8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    48da:	2310      	movs	r3, #16
    48dc:	18fb      	adds	r3, r7, r3
    48de:	0018      	movs	r0, r3
    48e0:	4b42      	ldr	r3, [pc, #264]	; (49ec <spi_init+0x170>)
    48e2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    48e4:	687b      	ldr	r3, [r7, #4]
    48e6:	2224      	movs	r2, #36	; 0x24
    48e8:	5c9a      	ldrb	r2, [r3, r2]
    48ea:	2310      	movs	r3, #16
    48ec:	18fb      	adds	r3, r7, r3
    48ee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    48f0:	697b      	ldr	r3, [r7, #20]
    48f2:	b2db      	uxtb	r3, r3
    48f4:	2210      	movs	r2, #16
    48f6:	18ba      	adds	r2, r7, r2
    48f8:	0011      	movs	r1, r2
    48fa:	0018      	movs	r0, r3
    48fc:	4b3c      	ldr	r3, [pc, #240]	; (49f0 <spi_init+0x174>)
    48fe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4900:	697b      	ldr	r3, [r7, #20]
    4902:	b2db      	uxtb	r3, r3
    4904:	0018      	movs	r0, r3
    4906:	4b3b      	ldr	r3, [pc, #236]	; (49f4 <spi_init+0x178>)
    4908:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    490a:	687b      	ldr	r3, [r7, #4]
    490c:	2224      	movs	r2, #36	; 0x24
    490e:	5c9b      	ldrb	r3, [r3, r2]
    4910:	2100      	movs	r1, #0
    4912:	0018      	movs	r0, r3
    4914:	4b38      	ldr	r3, [pc, #224]	; (49f8 <spi_init+0x17c>)
    4916:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	781b      	ldrb	r3, [r3, #0]
    491c:	2b01      	cmp	r3, #1
    491e:	d105      	bne.n	492c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4920:	6a3b      	ldr	r3, [r7, #32]
    4922:	681b      	ldr	r3, [r3, #0]
    4924:	220c      	movs	r2, #12
    4926:	431a      	orrs	r2, r3
    4928:	6a3b      	ldr	r3, [r7, #32]
    492a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    492c:	2327      	movs	r3, #39	; 0x27
    492e:	18fb      	adds	r3, r7, r3
    4930:	2200      	movs	r2, #0
    4932:	701a      	strb	r2, [r3, #0]
    4934:	e010      	b.n	4958 <spi_init+0xdc>
		module->callback[i]        = NULL;
    4936:	2327      	movs	r3, #39	; 0x27
    4938:	18fb      	adds	r3, r7, r3
    493a:	781b      	ldrb	r3, [r3, #0]
    493c:	68fa      	ldr	r2, [r7, #12]
    493e:	3302      	adds	r3, #2
    4940:	009b      	lsls	r3, r3, #2
    4942:	18d3      	adds	r3, r2, r3
    4944:	3304      	adds	r3, #4
    4946:	2200      	movs	r2, #0
    4948:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    494a:	2327      	movs	r3, #39	; 0x27
    494c:	18fb      	adds	r3, r7, r3
    494e:	781a      	ldrb	r2, [r3, #0]
    4950:	2327      	movs	r3, #39	; 0x27
    4952:	18fb      	adds	r3, r7, r3
    4954:	3201      	adds	r2, #1
    4956:	701a      	strb	r2, [r3, #0]
    4958:	2327      	movs	r3, #39	; 0x27
    495a:	18fb      	adds	r3, r7, r3
    495c:	781b      	ldrb	r3, [r3, #0]
    495e:	2b06      	cmp	r3, #6
    4960:	d9e9      	bls.n	4936 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    4962:	68fb      	ldr	r3, [r7, #12]
    4964:	2200      	movs	r2, #0
    4966:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4968:	68fb      	ldr	r3, [r7, #12]
    496a:	2200      	movs	r2, #0
    496c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    496e:	68fb      	ldr	r3, [r7, #12]
    4970:	2200      	movs	r2, #0
    4972:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4974:	68fb      	ldr	r3, [r7, #12]
    4976:	2200      	movs	r2, #0
    4978:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    497a:	68fb      	ldr	r3, [r7, #12]
    497c:	2236      	movs	r2, #54	; 0x36
    497e:	2100      	movs	r1, #0
    4980:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    4982:	68fb      	ldr	r3, [r7, #12]
    4984:	2237      	movs	r2, #55	; 0x37
    4986:	2100      	movs	r1, #0
    4988:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    498a:	68fb      	ldr	r3, [r7, #12]
    498c:	2238      	movs	r2, #56	; 0x38
    498e:	2100      	movs	r1, #0
    4990:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    4992:	68fb      	ldr	r3, [r7, #12]
    4994:	2203      	movs	r2, #3
    4996:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    4998:	68fb      	ldr	r3, [r7, #12]
    499a:	2200      	movs	r2, #0
    499c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    499e:	68fb      	ldr	r3, [r7, #12]
    49a0:	681b      	ldr	r3, [r3, #0]
    49a2:	2213      	movs	r2, #19
    49a4:	18bc      	adds	r4, r7, r2
    49a6:	0018      	movs	r0, r3
    49a8:	4b0e      	ldr	r3, [pc, #56]	; (49e4 <spi_init+0x168>)
    49aa:	4798      	blx	r3
    49ac:	0003      	movs	r3, r0
    49ae:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    49b0:	4a12      	ldr	r2, [pc, #72]	; (49fc <spi_init+0x180>)
    49b2:	2313      	movs	r3, #19
    49b4:	18fb      	adds	r3, r7, r3
    49b6:	781b      	ldrb	r3, [r3, #0]
    49b8:	0011      	movs	r1, r2
    49ba:	0018      	movs	r0, r3
    49bc:	4b10      	ldr	r3, [pc, #64]	; (4a00 <spi_init+0x184>)
    49be:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    49c0:	2313      	movs	r3, #19
    49c2:	18fb      	adds	r3, r7, r3
    49c4:	781a      	ldrb	r2, [r3, #0]
    49c6:	4b0f      	ldr	r3, [pc, #60]	; (4a04 <spi_init+0x188>)
    49c8:	0092      	lsls	r2, r2, #2
    49ca:	68f9      	ldr	r1, [r7, #12]
    49cc:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    49ce:	687a      	ldr	r2, [r7, #4]
    49d0:	68fb      	ldr	r3, [r7, #12]
    49d2:	0011      	movs	r1, r2
    49d4:	0018      	movs	r0, r3
    49d6:	4b0c      	ldr	r3, [pc, #48]	; (4a08 <spi_init+0x18c>)
    49d8:	4798      	blx	r3
    49da:	0003      	movs	r3, r0
}
    49dc:	0018      	movs	r0, r3
    49de:	46bd      	mov	sp, r7
    49e0:	b00b      	add	sp, #44	; 0x2c
    49e2:	bd90      	pop	{r4, r7, pc}
    49e4:	00003fbd 	.word	0x00003fbd
    49e8:	00004279 	.word	0x00004279
    49ec:	00004261 	.word	0x00004261
    49f0:	00006ad1 	.word	0x00006ad1
    49f4:	00006b15 	.word	0x00006b15
    49f8:	00003d75 	.word	0x00003d75
    49fc:	00004ed5 	.word	0x00004ed5
    4a00:	00004021 	.word	0x00004021
    4a04:	20000a08 	.word	0x20000a08
    4a08:	0000466d 	.word	0x0000466d

00004a0c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4a0c:	b590      	push	{r4, r7, lr}
    4a0e:	b087      	sub	sp, #28
    4a10:	af00      	add	r7, sp, #0
    4a12:	60f8      	str	r0, [r7, #12]
    4a14:	60b9      	str	r1, [r7, #8]
    4a16:	0019      	movs	r1, r3
    4a18:	1dbb      	adds	r3, r7, #6
    4a1a:	801a      	strh	r2, [r3, #0]
    4a1c:	1d3b      	adds	r3, r7, #4
    4a1e:	1c0a      	adds	r2, r1, #0
    4a20:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4a22:	68fb      	ldr	r3, [r7, #12]
    4a24:	2238      	movs	r2, #56	; 0x38
    4a26:	5c9b      	ldrb	r3, [r3, r2]
    4a28:	b2db      	uxtb	r3, r3
    4a2a:	2b05      	cmp	r3, #5
    4a2c:	d101      	bne.n	4a32 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4a2e:	2305      	movs	r3, #5
    4a30:	e07a      	b.n	4b28 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    4a32:	1dbb      	adds	r3, r7, #6
    4a34:	881b      	ldrh	r3, [r3, #0]
    4a36:	2b00      	cmp	r3, #0
    4a38:	d101      	bne.n	4a3e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    4a3a:	2317      	movs	r3, #23
    4a3c:	e074      	b.n	4b28 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    4a3e:	68fb      	ldr	r3, [r7, #12]
    4a40:	79db      	ldrb	r3, [r3, #7]
    4a42:	2201      	movs	r2, #1
    4a44:	4053      	eors	r3, r2
    4a46:	b2db      	uxtb	r3, r3
    4a48:	2b00      	cmp	r3, #0
    4a4a:	d001      	beq.n	4a50 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    4a4c:	231c      	movs	r3, #28
    4a4e:	e06b      	b.n	4b28 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    4a50:	2316      	movs	r3, #22
    4a52:	18fb      	adds	r3, r7, r3
    4a54:	2200      	movs	r2, #0
    4a56:	801a      	strh	r2, [r3, #0]

	while (length--) {
    4a58:	e05e      	b.n	4b18 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    4a5a:	68fb      	ldr	r3, [r7, #12]
    4a5c:	795b      	ldrb	r3, [r3, #5]
    4a5e:	2b01      	cmp	r3, #1
    4a60:	d112      	bne.n	4a88 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	68fb      	ldr	r3, [r7, #12]
    4a66:	0018      	movs	r0, r3
    4a68:	4b31      	ldr	r3, [pc, #196]	; (4b30 <spi_read_buffer_wait+0x124>)
    4a6a:	4798      	blx	r3
    4a6c:	0003      	movs	r3, r0
    4a6e:	001a      	movs	r2, r3
    4a70:	2301      	movs	r3, #1
    4a72:	4053      	eors	r3, r2
    4a74:	b2db      	uxtb	r3, r3
    4a76:	2b00      	cmp	r3, #0
    4a78:	d1f4      	bne.n	4a64 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    4a7a:	1d3b      	adds	r3, r7, #4
    4a7c:	881a      	ldrh	r2, [r3, #0]
    4a7e:	68fb      	ldr	r3, [r7, #12]
    4a80:	0011      	movs	r1, r2
    4a82:	0018      	movs	r0, r3
    4a84:	4b2b      	ldr	r3, [pc, #172]	; (4b34 <spi_read_buffer_wait+0x128>)
    4a86:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4a88:	46c0      	nop			; (mov r8, r8)
    4a8a:	68fb      	ldr	r3, [r7, #12]
    4a8c:	0018      	movs	r0, r3
    4a8e:	4b2a      	ldr	r3, [pc, #168]	; (4b38 <spi_read_buffer_wait+0x12c>)
    4a90:	4798      	blx	r3
    4a92:	0003      	movs	r3, r0
    4a94:	001a      	movs	r2, r3
    4a96:	2301      	movs	r3, #1
    4a98:	4053      	eors	r3, r2
    4a9a:	b2db      	uxtb	r3, r3
    4a9c:	2b00      	cmp	r3, #0
    4a9e:	d1f4      	bne.n	4a8a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    4aa0:	2312      	movs	r3, #18
    4aa2:	18fb      	adds	r3, r7, r3
    4aa4:	2200      	movs	r2, #0
    4aa6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    4aa8:	2315      	movs	r3, #21
    4aaa:	18fc      	adds	r4, r7, r3
    4aac:	2312      	movs	r3, #18
    4aae:	18fa      	adds	r2, r7, r3
    4ab0:	68fb      	ldr	r3, [r7, #12]
    4ab2:	0011      	movs	r1, r2
    4ab4:	0018      	movs	r0, r3
    4ab6:	4b21      	ldr	r3, [pc, #132]	; (4b3c <spi_read_buffer_wait+0x130>)
    4ab8:	4798      	blx	r3
    4aba:	0003      	movs	r3, r0
    4abc:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4abe:	2315      	movs	r3, #21
    4ac0:	18fb      	adds	r3, r7, r3
    4ac2:	781b      	ldrb	r3, [r3, #0]
    4ac4:	2b00      	cmp	r3, #0
    4ac6:	d003      	beq.n	4ad0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    4ac8:	2315      	movs	r3, #21
    4aca:	18fb      	adds	r3, r7, r3
    4acc:	781b      	ldrb	r3, [r3, #0]
    4ace:	e02b      	b.n	4b28 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4ad0:	2316      	movs	r3, #22
    4ad2:	18fb      	adds	r3, r7, r3
    4ad4:	881b      	ldrh	r3, [r3, #0]
    4ad6:	2216      	movs	r2, #22
    4ad8:	18ba      	adds	r2, r7, r2
    4ada:	1c59      	adds	r1, r3, #1
    4adc:	8011      	strh	r1, [r2, #0]
    4ade:	001a      	movs	r2, r3
    4ae0:	68bb      	ldr	r3, [r7, #8]
    4ae2:	189b      	adds	r3, r3, r2
    4ae4:	2212      	movs	r2, #18
    4ae6:	18ba      	adds	r2, r7, r2
    4ae8:	8812      	ldrh	r2, [r2, #0]
    4aea:	b2d2      	uxtb	r2, r2
    4aec:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	799b      	ldrb	r3, [r3, #6]
    4af2:	2b01      	cmp	r3, #1
    4af4:	d110      	bne.n	4b18 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    4af6:	2316      	movs	r3, #22
    4af8:	18fb      	adds	r3, r7, r3
    4afa:	881b      	ldrh	r3, [r3, #0]
    4afc:	2216      	movs	r2, #22
    4afe:	18ba      	adds	r2, r7, r2
    4b00:	1c59      	adds	r1, r3, #1
    4b02:	8011      	strh	r1, [r2, #0]
    4b04:	001a      	movs	r2, r3
    4b06:	68bb      	ldr	r3, [r7, #8]
    4b08:	189b      	adds	r3, r3, r2
    4b0a:	2212      	movs	r2, #18
    4b0c:	18ba      	adds	r2, r7, r2
    4b0e:	8812      	ldrh	r2, [r2, #0]
    4b10:	0a12      	lsrs	r2, r2, #8
    4b12:	b292      	uxth	r2, r2
    4b14:	b2d2      	uxtb	r2, r2
    4b16:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4b18:	1dbb      	adds	r3, r7, #6
    4b1a:	881b      	ldrh	r3, [r3, #0]
    4b1c:	1dba      	adds	r2, r7, #6
    4b1e:	1e59      	subs	r1, r3, #1
    4b20:	8011      	strh	r1, [r2, #0]
    4b22:	2b00      	cmp	r3, #0
    4b24:	d199      	bne.n	4a5a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    4b26:	2300      	movs	r3, #0
}
    4b28:	0018      	movs	r0, r3
    4b2a:	46bd      	mov	sp, r7
    4b2c:	b007      	add	sp, #28
    4b2e:	bd90      	pop	{r4, r7, pc}
    4b30:	00004445 	.word	0x00004445
    4b34:	00004495 	.word	0x00004495
    4b38:	0000446d 	.word	0x0000446d
    4b3c:	000044dd 	.word	0x000044dd

00004b40 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4b40:	b580      	push	{r7, lr}
    4b42:	b086      	sub	sp, #24
    4b44:	af00      	add	r7, sp, #0
    4b46:	60f8      	str	r0, [r7, #12]
    4b48:	60b9      	str	r1, [r7, #8]
    4b4a:	1dfb      	adds	r3, r7, #7
    4b4c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4b4e:	68fb      	ldr	r3, [r7, #12]
    4b50:	795b      	ldrb	r3, [r3, #5]
    4b52:	2b01      	cmp	r3, #1
    4b54:	d001      	beq.n	4b5a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    4b56:	2315      	movs	r3, #21
    4b58:	e05c      	b.n	4c14 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    4b5a:	68fb      	ldr	r3, [r7, #12]
    4b5c:	7a1b      	ldrb	r3, [r3, #8]
    4b5e:	2201      	movs	r2, #1
    4b60:	4053      	eors	r3, r2
    4b62:	b2db      	uxtb	r3, r3
    4b64:	2b00      	cmp	r3, #0
    4b66:	d054      	beq.n	4c12 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    4b68:	1dfb      	adds	r3, r7, #7
    4b6a:	781b      	ldrb	r3, [r3, #0]
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d04a      	beq.n	4c06 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    4b70:	68bb      	ldr	r3, [r7, #8]
    4b72:	785b      	ldrb	r3, [r3, #1]
    4b74:	2b00      	cmp	r3, #0
    4b76:	d03f      	beq.n	4bf8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    4b78:	68fb      	ldr	r3, [r7, #12]
    4b7a:	0018      	movs	r0, r3
    4b7c:	4b27      	ldr	r3, [pc, #156]	; (4c1c <spi_select_slave+0xdc>)
    4b7e:	4798      	blx	r3
    4b80:	0003      	movs	r3, r0
    4b82:	001a      	movs	r2, r3
    4b84:	2301      	movs	r3, #1
    4b86:	4053      	eors	r3, r2
    4b88:	b2db      	uxtb	r3, r3
    4b8a:	2b00      	cmp	r3, #0
    4b8c:	d007      	beq.n	4b9e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4b8e:	68bb      	ldr	r3, [r7, #8]
    4b90:	781b      	ldrb	r3, [r3, #0]
    4b92:	2101      	movs	r1, #1
    4b94:	0018      	movs	r0, r3
    4b96:	4b22      	ldr	r3, [pc, #136]	; (4c20 <spi_select_slave+0xe0>)
    4b98:	4798      	blx	r3
					return STATUS_BUSY;
    4b9a:	2305      	movs	r3, #5
    4b9c:	e03a      	b.n	4c14 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4b9e:	68bb      	ldr	r3, [r7, #8]
    4ba0:	781b      	ldrb	r3, [r3, #0]
    4ba2:	2100      	movs	r1, #0
    4ba4:	0018      	movs	r0, r3
    4ba6:	4b1e      	ldr	r3, [pc, #120]	; (4c20 <spi_select_slave+0xe0>)
    4ba8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4baa:	68bb      	ldr	r3, [r7, #8]
    4bac:	789b      	ldrb	r3, [r3, #2]
    4bae:	b29a      	uxth	r2, r3
    4bb0:	68fb      	ldr	r3, [r7, #12]
    4bb2:	0011      	movs	r1, r2
    4bb4:	0018      	movs	r0, r3
    4bb6:	4b1b      	ldr	r3, [pc, #108]	; (4c24 <spi_select_slave+0xe4>)
    4bb8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4bba:	68fb      	ldr	r3, [r7, #12]
    4bbc:	79db      	ldrb	r3, [r3, #7]
    4bbe:	2201      	movs	r2, #1
    4bc0:	4053      	eors	r3, r2
    4bc2:	b2db      	uxtb	r3, r3
    4bc4:	2b00      	cmp	r3, #0
    4bc6:	d024      	beq.n	4c12 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4bc8:	46c0      	nop			; (mov r8, r8)
    4bca:	68fb      	ldr	r3, [r7, #12]
    4bcc:	0018      	movs	r0, r3
    4bce:	4b16      	ldr	r3, [pc, #88]	; (4c28 <spi_select_slave+0xe8>)
    4bd0:	4798      	blx	r3
    4bd2:	0003      	movs	r3, r0
    4bd4:	001a      	movs	r2, r3
    4bd6:	2301      	movs	r3, #1
    4bd8:	4053      	eors	r3, r2
    4bda:	b2db      	uxtb	r3, r3
    4bdc:	2b00      	cmp	r3, #0
    4bde:	d1f4      	bne.n	4bca <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4be0:	2316      	movs	r3, #22
    4be2:	18fb      	adds	r3, r7, r3
    4be4:	2200      	movs	r2, #0
    4be6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4be8:	2316      	movs	r3, #22
    4bea:	18fa      	adds	r2, r7, r3
    4bec:	68fb      	ldr	r3, [r7, #12]
    4bee:	0011      	movs	r1, r2
    4bf0:	0018      	movs	r0, r3
    4bf2:	4b0e      	ldr	r3, [pc, #56]	; (4c2c <spi_select_slave+0xec>)
    4bf4:	4798      	blx	r3
    4bf6:	e00c      	b.n	4c12 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4bf8:	68bb      	ldr	r3, [r7, #8]
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	2100      	movs	r1, #0
    4bfe:	0018      	movs	r0, r3
    4c00:	4b07      	ldr	r3, [pc, #28]	; (4c20 <spi_select_slave+0xe0>)
    4c02:	4798      	blx	r3
    4c04:	e005      	b.n	4c12 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4c06:	68bb      	ldr	r3, [r7, #8]
    4c08:	781b      	ldrb	r3, [r3, #0]
    4c0a:	2101      	movs	r1, #1
    4c0c:	0018      	movs	r0, r3
    4c0e:	4b04      	ldr	r3, [pc, #16]	; (4c20 <spi_select_slave+0xe0>)
    4c10:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    4c12:	2300      	movs	r3, #0
}
    4c14:	0018      	movs	r0, r3
    4c16:	46bd      	mov	sp, r7
    4c18:	b006      	add	sp, #24
    4c1a:	bd80      	pop	{r7, pc}
    4c1c:	00004445 	.word	0x00004445
    4c20:	0000420d 	.word	0x0000420d
    4c24:	00004495 	.word	0x00004495
    4c28:	0000446d 	.word	0x0000446d
    4c2c:	000044dd 	.word	0x000044dd

00004c30 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    4c30:	b580      	push	{r7, lr}
    4c32:	b086      	sub	sp, #24
    4c34:	af00      	add	r7, sp, #0
    4c36:	60f8      	str	r0, [r7, #12]
    4c38:	60b9      	str	r1, [r7, #8]
    4c3a:	1dbb      	adds	r3, r7, #6
    4c3c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4c3e:	68fb      	ldr	r3, [r7, #12]
    4c40:	2238      	movs	r2, #56	; 0x38
    4c42:	5c9b      	ldrb	r3, [r3, r2]
    4c44:	b2db      	uxtb	r3, r3
    4c46:	2b05      	cmp	r3, #5
    4c48:	d101      	bne.n	4c4e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4c4a:	2305      	movs	r3, #5
    4c4c:	e087      	b.n	4d5e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    4c4e:	1dbb      	adds	r3, r7, #6
    4c50:	881b      	ldrh	r3, [r3, #0]
    4c52:	2b00      	cmp	r3, #0
    4c54:	d101      	bne.n	4c5a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    4c56:	2317      	movs	r3, #23
    4c58:	e081      	b.n	4d5e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    4c5a:	2316      	movs	r3, #22
    4c5c:	18fb      	adds	r3, r7, r3
    4c5e:	2200      	movs	r2, #0
    4c60:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    4c62:	2314      	movs	r3, #20
    4c64:	18fb      	adds	r3, r7, r3
    4c66:	1dba      	adds	r2, r7, #6
    4c68:	8812      	ldrh	r2, [r2, #0]
    4c6a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    4c6c:	e05f      	b.n	4d2e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    4c6e:	46c0      	nop			; (mov r8, r8)
    4c70:	68fb      	ldr	r3, [r7, #12]
    4c72:	0018      	movs	r0, r3
    4c74:	4b3c      	ldr	r3, [pc, #240]	; (4d68 <spi_write_buffer_wait+0x138>)
    4c76:	4798      	blx	r3
    4c78:	0003      	movs	r3, r0
    4c7a:	001a      	movs	r2, r3
    4c7c:	2301      	movs	r3, #1
    4c7e:	4053      	eors	r3, r2
    4c80:	b2db      	uxtb	r3, r3
    4c82:	2b00      	cmp	r3, #0
    4c84:	d1f4      	bne.n	4c70 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    4c86:	2316      	movs	r3, #22
    4c88:	18fb      	adds	r3, r7, r3
    4c8a:	881b      	ldrh	r3, [r3, #0]
    4c8c:	2216      	movs	r2, #22
    4c8e:	18ba      	adds	r2, r7, r2
    4c90:	1c59      	adds	r1, r3, #1
    4c92:	8011      	strh	r1, [r2, #0]
    4c94:	001a      	movs	r2, r3
    4c96:	68bb      	ldr	r3, [r7, #8]
    4c98:	189b      	adds	r3, r3, r2
    4c9a:	781a      	ldrb	r2, [r3, #0]
    4c9c:	2312      	movs	r3, #18
    4c9e:	18fb      	adds	r3, r7, r3
    4ca0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	799b      	ldrb	r3, [r3, #6]
    4ca6:	2b01      	cmp	r3, #1
    4ca8:	d115      	bne.n	4cd6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4caa:	2316      	movs	r3, #22
    4cac:	18fb      	adds	r3, r7, r3
    4cae:	881b      	ldrh	r3, [r3, #0]
    4cb0:	2216      	movs	r2, #22
    4cb2:	18ba      	adds	r2, r7, r2
    4cb4:	1c59      	adds	r1, r3, #1
    4cb6:	8011      	strh	r1, [r2, #0]
    4cb8:	001a      	movs	r2, r3
    4cba:	68bb      	ldr	r3, [r7, #8]
    4cbc:	189b      	adds	r3, r3, r2
    4cbe:	781b      	ldrb	r3, [r3, #0]
    4cc0:	021b      	lsls	r3, r3, #8
    4cc2:	b21a      	sxth	r2, r3
    4cc4:	2312      	movs	r3, #18
    4cc6:	18fb      	adds	r3, r7, r3
    4cc8:	2100      	movs	r1, #0
    4cca:	5e5b      	ldrsh	r3, [r3, r1]
    4ccc:	4313      	orrs	r3, r2
    4cce:	b21a      	sxth	r2, r3
    4cd0:	2312      	movs	r3, #18
    4cd2:	18fb      	adds	r3, r7, r3
    4cd4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    4cd6:	2312      	movs	r3, #18
    4cd8:	18fb      	adds	r3, r7, r3
    4cda:	881a      	ldrh	r2, [r3, #0]
    4cdc:	68fb      	ldr	r3, [r7, #12]
    4cde:	0011      	movs	r1, r2
    4ce0:	0018      	movs	r0, r3
    4ce2:	4b22      	ldr	r3, [pc, #136]	; (4d6c <spi_write_buffer_wait+0x13c>)
    4ce4:	4798      	blx	r3

		if (module->receiver_enabled) {
    4ce6:	68fb      	ldr	r3, [r7, #12]
    4ce8:	79db      	ldrb	r3, [r3, #7]
    4cea:	2214      	movs	r2, #20
    4cec:	18ba      	adds	r2, r7, r2
    4cee:	2114      	movs	r1, #20
    4cf0:	1879      	adds	r1, r7, r1
    4cf2:	8809      	ldrh	r1, [r1, #0]
    4cf4:	8011      	strh	r1, [r2, #0]
    4cf6:	2b00      	cmp	r3, #0
    4cf8:	d019      	beq.n	4d2e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4cfa:	46c0      	nop			; (mov r8, r8)
    4cfc:	68fb      	ldr	r3, [r7, #12]
    4cfe:	0018      	movs	r0, r3
    4d00:	4b1b      	ldr	r3, [pc, #108]	; (4d70 <spi_write_buffer_wait+0x140>)
    4d02:	4798      	blx	r3
    4d04:	0003      	movs	r3, r0
    4d06:	001a      	movs	r2, r3
    4d08:	2301      	movs	r3, #1
    4d0a:	4053      	eors	r3, r2
    4d0c:	b2db      	uxtb	r3, r3
    4d0e:	2b00      	cmp	r3, #0
    4d10:	d1f4      	bne.n	4cfc <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    4d12:	2310      	movs	r3, #16
    4d14:	18fa      	adds	r2, r7, r3
    4d16:	68fb      	ldr	r3, [r7, #12]
    4d18:	0011      	movs	r1, r2
    4d1a:	0018      	movs	r0, r3
    4d1c:	4b15      	ldr	r3, [pc, #84]	; (4d74 <spi_write_buffer_wait+0x144>)
    4d1e:	4798      	blx	r3
			flush_length--;
    4d20:	2314      	movs	r3, #20
    4d22:	18fb      	adds	r3, r7, r3
    4d24:	881a      	ldrh	r2, [r3, #0]
    4d26:	2314      	movs	r3, #20
    4d28:	18fb      	adds	r3, r7, r3
    4d2a:	3a01      	subs	r2, #1
    4d2c:	801a      	strh	r2, [r3, #0]
	while (length--) {
    4d2e:	1dbb      	adds	r3, r7, #6
    4d30:	881b      	ldrh	r3, [r3, #0]
    4d32:	1dba      	adds	r2, r7, #6
    4d34:	1e59      	subs	r1, r3, #1
    4d36:	8011      	strh	r1, [r2, #0]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d198      	bne.n	4c6e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    4d3c:	68fb      	ldr	r3, [r7, #12]
    4d3e:	795b      	ldrb	r3, [r3, #5]
    4d40:	2b01      	cmp	r3, #1
    4d42:	d10b      	bne.n	4d5c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    4d44:	46c0      	nop			; (mov r8, r8)
    4d46:	68fb      	ldr	r3, [r7, #12]
    4d48:	0018      	movs	r0, r3
    4d4a:	4b0b      	ldr	r3, [pc, #44]	; (4d78 <spi_write_buffer_wait+0x148>)
    4d4c:	4798      	blx	r3
    4d4e:	0003      	movs	r3, r0
    4d50:	001a      	movs	r2, r3
    4d52:	2301      	movs	r3, #1
    4d54:	4053      	eors	r3, r2
    4d56:	b2db      	uxtb	r3, r3
    4d58:	2b00      	cmp	r3, #0
    4d5a:	d1f4      	bne.n	4d46 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    4d5c:	2300      	movs	r3, #0
}
    4d5e:	0018      	movs	r0, r3
    4d60:	46bd      	mov	sp, r7
    4d62:	b006      	add	sp, #24
    4d64:	bd80      	pop	{r7, pc}
    4d66:	46c0      	nop			; (mov r8, r8)
    4d68:	00004445 	.word	0x00004445
    4d6c:	00004495 	.word	0x00004495
    4d70:	0000446d 	.word	0x0000446d
    4d74:	000044dd 	.word	0x000044dd
    4d78:	0000441d 	.word	0x0000441d

00004d7c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b084      	sub	sp, #16
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4d84:	687b      	ldr	r3, [r7, #4]
    4d86:	681b      	ldr	r3, [r3, #0]
    4d88:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d8e:	781b      	ldrb	r3, [r3, #0]
    4d90:	b2da      	uxtb	r2, r3
    4d92:	230e      	movs	r3, #14
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d9c:	1c5a      	adds	r2, r3, #1
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	799b      	ldrb	r3, [r3, #6]
    4da6:	2b01      	cmp	r3, #1
    4da8:	d113      	bne.n	4dd2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4daa:	687b      	ldr	r3, [r7, #4]
    4dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4dae:	781b      	ldrb	r3, [r3, #0]
    4db0:	b2db      	uxtb	r3, r3
    4db2:	021b      	lsls	r3, r3, #8
    4db4:	b21a      	sxth	r2, r3
    4db6:	230e      	movs	r3, #14
    4db8:	18fb      	adds	r3, r7, r3
    4dba:	2100      	movs	r1, #0
    4dbc:	5e5b      	ldrsh	r3, [r3, r1]
    4dbe:	4313      	orrs	r3, r2
    4dc0:	b21a      	sxth	r2, r3
    4dc2:	230e      	movs	r3, #14
    4dc4:	18fb      	adds	r3, r7, r3
    4dc6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4dcc:	1c5a      	adds	r2, r3, #1
    4dce:	687b      	ldr	r3, [r7, #4]
    4dd0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4dd2:	230e      	movs	r3, #14
    4dd4:	18fb      	adds	r3, r7, r3
    4dd6:	881b      	ldrh	r3, [r3, #0]
    4dd8:	05db      	lsls	r3, r3, #23
    4dda:	0dda      	lsrs	r2, r3, #23
    4ddc:	68bb      	ldr	r3, [r7, #8]
    4dde:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4de4:	b29b      	uxth	r3, r3
    4de6:	3b01      	subs	r3, #1
    4de8:	b29a      	uxth	r2, r3
    4dea:	687b      	ldr	r3, [r7, #4]
    4dec:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4dee:	46c0      	nop			; (mov r8, r8)
    4df0:	46bd      	mov	sp, r7
    4df2:	b004      	add	sp, #16
    4df4:	bd80      	pop	{r7, pc}
	...

00004df8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4df8:	b580      	push	{r7, lr}
    4dfa:	b084      	sub	sp, #16
    4dfc:	af00      	add	r7, sp, #0
    4dfe:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e00:	687b      	ldr	r3, [r7, #4]
    4e02:	681b      	ldr	r3, [r3, #0]
    4e04:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    4e06:	4b08      	ldr	r3, [pc, #32]	; (4e28 <_spi_write_dummy+0x30>)
    4e08:	881b      	ldrh	r3, [r3, #0]
    4e0a:	001a      	movs	r2, r3
    4e0c:	68fb      	ldr	r3, [r7, #12]
    4e0e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4e14:	b29b      	uxth	r3, r3
    4e16:	3b01      	subs	r3, #1
    4e18:	b29a      	uxth	r2, r3
    4e1a:	687b      	ldr	r3, [r7, #4]
    4e1c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4e1e:	46c0      	nop			; (mov r8, r8)
    4e20:	46bd      	mov	sp, r7
    4e22:	b004      	add	sp, #16
    4e24:	bd80      	pop	{r7, pc}
    4e26:	46c0      	nop			; (mov r8, r8)
    4e28:	20000a20 	.word	0x20000a20

00004e2c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b084      	sub	sp, #16
    4e30:	af00      	add	r7, sp, #0
    4e32:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e34:	687b      	ldr	r3, [r7, #4]
    4e36:	681b      	ldr	r3, [r3, #0]
    4e38:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    4e3a:	230a      	movs	r3, #10
    4e3c:	18fb      	adds	r3, r7, r3
    4e3e:	2200      	movs	r2, #0
    4e40:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4e42:	68fb      	ldr	r3, [r7, #12]
    4e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e46:	230a      	movs	r3, #10
    4e48:	18fb      	adds	r3, r7, r3
    4e4a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4e50:	b29b      	uxth	r3, r3
    4e52:	3b01      	subs	r3, #1
    4e54:	b29a      	uxth	r2, r3
    4e56:	687b      	ldr	r3, [r7, #4]
    4e58:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	46bd      	mov	sp, r7
    4e5e:	b004      	add	sp, #16
    4e60:	bd80      	pop	{r7, pc}

00004e62 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    4e62:	b580      	push	{r7, lr}
    4e64:	b084      	sub	sp, #16
    4e66:	af00      	add	r7, sp, #0
    4e68:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4e6a:	687b      	ldr	r3, [r7, #4]
    4e6c:	681b      	ldr	r3, [r3, #0]
    4e6e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4e70:	68fb      	ldr	r3, [r7, #12]
    4e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e74:	b29a      	uxth	r2, r3
    4e76:	230a      	movs	r3, #10
    4e78:	18fb      	adds	r3, r7, r3
    4e7a:	05d2      	lsls	r2, r2, #23
    4e7c:	0dd2      	lsrs	r2, r2, #23
    4e7e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4e80:	687b      	ldr	r3, [r7, #4]
    4e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e84:	220a      	movs	r2, #10
    4e86:	18ba      	adds	r2, r7, r2
    4e88:	8812      	ldrh	r2, [r2, #0]
    4e8a:	b2d2      	uxtb	r2, r2
    4e8c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4e8e:	687b      	ldr	r3, [r7, #4]
    4e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e92:	1c5a      	adds	r2, r3, #1
    4e94:	687b      	ldr	r3, [r7, #4]
    4e96:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	799b      	ldrb	r3, [r3, #6]
    4e9c:	2b01      	cmp	r3, #1
    4e9e:	d10d      	bne.n	4ebc <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4ea0:	687b      	ldr	r3, [r7, #4]
    4ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4ea4:	220a      	movs	r2, #10
    4ea6:	18ba      	adds	r2, r7, r2
    4ea8:	8812      	ldrh	r2, [r2, #0]
    4eaa:	0a12      	lsrs	r2, r2, #8
    4eac:	b292      	uxth	r2, r2
    4eae:	b2d2      	uxtb	r2, r2
    4eb0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    4eb2:	687b      	ldr	r3, [r7, #4]
    4eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4eb6:	1c5a      	adds	r2, r3, #1
    4eb8:	687b      	ldr	r3, [r7, #4]
    4eba:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4ec0:	b29b      	uxth	r3, r3
    4ec2:	3b01      	subs	r3, #1
    4ec4:	b29a      	uxth	r2, r3
    4ec6:	687b      	ldr	r3, [r7, #4]
    4ec8:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4eca:	46c0      	nop			; (mov r8, r8)
    4ecc:	46bd      	mov	sp, r7
    4ece:	b004      	add	sp, #16
    4ed0:	bd80      	pop	{r7, pc}
	...

00004ed4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    4ed4:	b580      	push	{r7, lr}
    4ed6:	b086      	sub	sp, #24
    4ed8:	af00      	add	r7, sp, #0
    4eda:	0002      	movs	r2, r0
    4edc:	1dfb      	adds	r3, r7, #7
    4ede:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4ee0:	1dfb      	adds	r3, r7, #7
    4ee2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    4ee4:	4b96      	ldr	r3, [pc, #600]	; (5140 <_spi_interrupt_handler+0x26c>)
    4ee6:	0092      	lsls	r2, r2, #2
    4ee8:	58d3      	ldr	r3, [r2, r3]
    4eea:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4eec:	697b      	ldr	r3, [r7, #20]
    4eee:	681b      	ldr	r3, [r3, #0]
    4ef0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4ef2:	697b      	ldr	r3, [r7, #20]
    4ef4:	2237      	movs	r2, #55	; 0x37
    4ef6:	5c9a      	ldrb	r2, [r3, r2]
    4ef8:	697b      	ldr	r3, [r7, #20]
    4efa:	2136      	movs	r1, #54	; 0x36
    4efc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4efe:	230f      	movs	r3, #15
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	400a      	ands	r2, r1
    4f04:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    4f06:	693b      	ldr	r3, [r7, #16]
    4f08:	7e1b      	ldrb	r3, [r3, #24]
    4f0a:	b2da      	uxtb	r2, r3
    4f0c:	230c      	movs	r3, #12
    4f0e:	18fb      	adds	r3, r7, r3
    4f10:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    4f12:	693b      	ldr	r3, [r7, #16]
    4f14:	7d9b      	ldrb	r3, [r3, #22]
    4f16:	b2db      	uxtb	r3, r3
    4f18:	b29a      	uxth	r2, r3
    4f1a:	230c      	movs	r3, #12
    4f1c:	18fb      	adds	r3, r7, r3
    4f1e:	210c      	movs	r1, #12
    4f20:	1879      	adds	r1, r7, r1
    4f22:	8809      	ldrh	r1, [r1, #0]
    4f24:	400a      	ands	r2, r1
    4f26:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    4f28:	230c      	movs	r3, #12
    4f2a:	18fb      	adds	r3, r7, r3
    4f2c:	881b      	ldrh	r3, [r3, #0]
    4f2e:	2201      	movs	r2, #1
    4f30:	4013      	ands	r3, r2
    4f32:	d038      	beq.n	4fa6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4f34:	697b      	ldr	r3, [r7, #20]
    4f36:	795b      	ldrb	r3, [r3, #5]
    4f38:	2b01      	cmp	r3, #1
    4f3a:	d110      	bne.n	4f5e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    4f3c:	697b      	ldr	r3, [r7, #20]
    4f3e:	7a5b      	ldrb	r3, [r3, #9]
    4f40:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4f42:	2b00      	cmp	r3, #0
    4f44:	d10b      	bne.n	4f5e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    4f46:	697b      	ldr	r3, [r7, #20]
    4f48:	0018      	movs	r0, r3
    4f4a:	4b7e      	ldr	r3, [pc, #504]	; (5144 <_spi_interrupt_handler+0x270>)
    4f4c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    4f4e:	697b      	ldr	r3, [r7, #20]
    4f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4f52:	b29b      	uxth	r3, r3
    4f54:	2b00      	cmp	r3, #0
    4f56:	d102      	bne.n	4f5e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4f58:	693b      	ldr	r3, [r7, #16]
    4f5a:	2201      	movs	r2, #1
    4f5c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    4f5e:	697b      	ldr	r3, [r7, #20]
    4f60:	795b      	ldrb	r3, [r3, #5]
		if (0
    4f62:	2b01      	cmp	r3, #1
    4f64:	d11f      	bne.n	4fa6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    4f66:	697b      	ldr	r3, [r7, #20]
    4f68:	7a5b      	ldrb	r3, [r3, #9]
    4f6a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    4f6c:	2b00      	cmp	r3, #0
    4f6e:	d01a      	beq.n	4fa6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    4f70:	697b      	ldr	r3, [r7, #20]
    4f72:	0018      	movs	r0, r3
    4f74:	4b74      	ldr	r3, [pc, #464]	; (5148 <_spi_interrupt_handler+0x274>)
    4f76:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    4f78:	697b      	ldr	r3, [r7, #20]
    4f7a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    4f7c:	b29b      	uxth	r3, r3
    4f7e:	2b00      	cmp	r3, #0
    4f80:	d111      	bne.n	4fa6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4f82:	693b      	ldr	r3, [r7, #16]
    4f84:	2201      	movs	r2, #1
    4f86:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4f88:	697b      	ldr	r3, [r7, #20]
    4f8a:	7a5b      	ldrb	r3, [r3, #9]
    4f8c:	b2db      	uxtb	r3, r3
    4f8e:	2b01      	cmp	r3, #1
    4f90:	d109      	bne.n	4fa6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4f92:	697b      	ldr	r3, [r7, #20]
    4f94:	79db      	ldrb	r3, [r3, #7]
    4f96:	2201      	movs	r2, #1
    4f98:	4053      	eors	r3, r2
    4f9a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d002      	beq.n	4fa6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4fa0:	693b      	ldr	r3, [r7, #16]
    4fa2:	2202      	movs	r2, #2
    4fa4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4fa6:	230c      	movs	r3, #12
    4fa8:	18fb      	adds	r3, r7, r3
    4faa:	881b      	ldrh	r3, [r3, #0]
    4fac:	2204      	movs	r2, #4
    4fae:	4013      	ands	r3, r2
    4fb0:	d100      	bne.n	4fb4 <_spi_interrupt_handler+0xe0>
    4fb2:	e07e      	b.n	50b2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4fb4:	693b      	ldr	r3, [r7, #16]
    4fb6:	8b5b      	ldrh	r3, [r3, #26]
    4fb8:	b29b      	uxth	r3, r3
    4fba:	001a      	movs	r2, r3
    4fbc:	2304      	movs	r3, #4
    4fbe:	4013      	ands	r3, r2
    4fc0:	d022      	beq.n	5008 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4fc2:	697b      	ldr	r3, [r7, #20]
    4fc4:	7a5b      	ldrb	r3, [r3, #9]
    4fc6:	b2db      	uxtb	r3, r3
    4fc8:	2b01      	cmp	r3, #1
    4fca:	d014      	beq.n	4ff6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4fcc:	697b      	ldr	r3, [r7, #20]
    4fce:	2238      	movs	r2, #56	; 0x38
    4fd0:	211e      	movs	r1, #30
    4fd2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4fd4:	697b      	ldr	r3, [r7, #20]
    4fd6:	2203      	movs	r2, #3
    4fd8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4fda:	693b      	ldr	r3, [r7, #16]
    4fdc:	2205      	movs	r2, #5
    4fde:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4fe0:	230f      	movs	r3, #15
    4fe2:	18fb      	adds	r3, r7, r3
    4fe4:	781b      	ldrb	r3, [r3, #0]
    4fe6:	2208      	movs	r2, #8
    4fe8:	4013      	ands	r3, r2
    4fea:	d004      	beq.n	4ff6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4fec:	697b      	ldr	r3, [r7, #20]
    4fee:	699b      	ldr	r3, [r3, #24]
    4ff0:	697a      	ldr	r2, [r7, #20]
    4ff2:	0010      	movs	r0, r2
    4ff4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4ff6:	693b      	ldr	r3, [r7, #16]
    4ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ffa:	230a      	movs	r3, #10
    4ffc:	18fb      	adds	r3, r7, r3
    4ffe:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5000:	693b      	ldr	r3, [r7, #16]
    5002:	2204      	movs	r2, #4
    5004:	835a      	strh	r2, [r3, #26]
    5006:	e054      	b.n	50b2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    5008:	697b      	ldr	r3, [r7, #20]
    500a:	7a5b      	ldrb	r3, [r3, #9]
    500c:	b2db      	uxtb	r3, r3
    500e:	2b01      	cmp	r3, #1
    5010:	d11e      	bne.n	5050 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    5012:	697b      	ldr	r3, [r7, #20]
    5014:	0018      	movs	r0, r3
    5016:	4b4d      	ldr	r3, [pc, #308]	; (514c <_spi_interrupt_handler+0x278>)
    5018:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    501a:	697b      	ldr	r3, [r7, #20]
    501c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    501e:	b29b      	uxth	r3, r3
    5020:	2b00      	cmp	r3, #0
    5022:	d146      	bne.n	50b2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5024:	693b      	ldr	r3, [r7, #16]
    5026:	2204      	movs	r2, #4
    5028:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    502a:	697b      	ldr	r3, [r7, #20]
    502c:	2238      	movs	r2, #56	; 0x38
    502e:	2100      	movs	r1, #0
    5030:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    5032:	697b      	ldr	r3, [r7, #20]
    5034:	2203      	movs	r2, #3
    5036:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    5038:	230f      	movs	r3, #15
    503a:	18fb      	adds	r3, r7, r3
    503c:	781b      	ldrb	r3, [r3, #0]
    503e:	2201      	movs	r2, #1
    5040:	4013      	ands	r3, r2
    5042:	d036      	beq.n	50b2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    5044:	697b      	ldr	r3, [r7, #20]
    5046:	68db      	ldr	r3, [r3, #12]
    5048:	697a      	ldr	r2, [r7, #20]
    504a:	0010      	movs	r0, r2
    504c:	4798      	blx	r3
    504e:	e030      	b.n	50b2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    5050:	697b      	ldr	r3, [r7, #20]
    5052:	0018      	movs	r0, r3
    5054:	4b3e      	ldr	r3, [pc, #248]	; (5150 <_spi_interrupt_handler+0x27c>)
    5056:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    5058:	697b      	ldr	r3, [r7, #20]
    505a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    505c:	b29b      	uxth	r3, r3
    505e:	2b00      	cmp	r3, #0
    5060:	d127      	bne.n	50b2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    5062:	697b      	ldr	r3, [r7, #20]
    5064:	2238      	movs	r2, #56	; 0x38
    5066:	2100      	movs	r1, #0
    5068:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    506a:	693b      	ldr	r3, [r7, #16]
    506c:	2204      	movs	r2, #4
    506e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5070:	697b      	ldr	r3, [r7, #20]
    5072:	7a5b      	ldrb	r3, [r3, #9]
    5074:	b2db      	uxtb	r3, r3
    5076:	2b02      	cmp	r3, #2
    5078:	d10b      	bne.n	5092 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    507a:	230f      	movs	r3, #15
    507c:	18fb      	adds	r3, r7, r3
    507e:	781b      	ldrb	r3, [r3, #0]
    5080:	2204      	movs	r2, #4
    5082:	4013      	ands	r3, r2
    5084:	d015      	beq.n	50b2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    5086:	697b      	ldr	r3, [r7, #20]
    5088:	695b      	ldr	r3, [r3, #20]
    508a:	697a      	ldr	r2, [r7, #20]
    508c:	0010      	movs	r0, r2
    508e:	4798      	blx	r3
    5090:	e00f      	b.n	50b2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    5092:	697b      	ldr	r3, [r7, #20]
    5094:	7a5b      	ldrb	r3, [r3, #9]
    5096:	b2db      	uxtb	r3, r3
    5098:	2b00      	cmp	r3, #0
    509a:	d10a      	bne.n	50b2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    509c:	230f      	movs	r3, #15
    509e:	18fb      	adds	r3, r7, r3
    50a0:	781b      	ldrb	r3, [r3, #0]
    50a2:	2202      	movs	r2, #2
    50a4:	4013      	ands	r3, r2
    50a6:	d004      	beq.n	50b2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    50a8:	697b      	ldr	r3, [r7, #20]
    50aa:	691b      	ldr	r3, [r3, #16]
    50ac:	697a      	ldr	r2, [r7, #20]
    50ae:	0010      	movs	r0, r2
    50b0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    50b2:	230c      	movs	r3, #12
    50b4:	18fb      	adds	r3, r7, r3
    50b6:	881b      	ldrh	r3, [r3, #0]
    50b8:	2202      	movs	r2, #2
    50ba:	4013      	ands	r3, r2
    50bc:	d024      	beq.n	5108 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    50be:	697b      	ldr	r3, [r7, #20]
    50c0:	795b      	ldrb	r3, [r3, #5]
    50c2:	2b01      	cmp	r3, #1
    50c4:	d120      	bne.n	5108 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    50c6:	697b      	ldr	r3, [r7, #20]
    50c8:	7a5b      	ldrb	r3, [r3, #9]
    50ca:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    50cc:	2b01      	cmp	r3, #1
    50ce:	d11b      	bne.n	5108 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    50d0:	697b      	ldr	r3, [r7, #20]
    50d2:	79db      	ldrb	r3, [r3, #7]
    50d4:	2201      	movs	r2, #1
    50d6:	4053      	eors	r3, r2
    50d8:	b2db      	uxtb	r3, r3
    50da:	2b00      	cmp	r3, #0
    50dc:	d014      	beq.n	5108 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    50de:	693b      	ldr	r3, [r7, #16]
    50e0:	2202      	movs	r2, #2
    50e2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    50e4:	697b      	ldr	r3, [r7, #20]
    50e6:	2203      	movs	r2, #3
    50e8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    50ea:	697b      	ldr	r3, [r7, #20]
    50ec:	2238      	movs	r2, #56	; 0x38
    50ee:	2100      	movs	r1, #0
    50f0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    50f2:	230f      	movs	r3, #15
    50f4:	18fb      	adds	r3, r7, r3
    50f6:	781b      	ldrb	r3, [r3, #0]
    50f8:	2201      	movs	r2, #1
    50fa:	4013      	ands	r3, r2
    50fc:	d004      	beq.n	5108 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    50fe:	697b      	ldr	r3, [r7, #20]
    5100:	68db      	ldr	r3, [r3, #12]
    5102:	697a      	ldr	r2, [r7, #20]
    5104:	0010      	movs	r0, r2
    5106:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    5108:	230c      	movs	r3, #12
    510a:	18fb      	adds	r3, r7, r3
    510c:	881b      	ldrh	r3, [r3, #0]
    510e:	2280      	movs	r2, #128	; 0x80
    5110:	4013      	ands	r3, r2
    5112:	d010      	beq.n	5136 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5114:	693b      	ldr	r3, [r7, #16]
    5116:	2280      	movs	r2, #128	; 0x80
    5118:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    511a:	693b      	ldr	r3, [r7, #16]
    511c:	2280      	movs	r2, #128	; 0x80
    511e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    5120:	230f      	movs	r3, #15
    5122:	18fb      	adds	r3, r7, r3
    5124:	781b      	ldrb	r3, [r3, #0]
    5126:	2240      	movs	r2, #64	; 0x40
    5128:	4013      	ands	r3, r2
    512a:	d004      	beq.n	5136 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    512c:	697b      	ldr	r3, [r7, #20]
    512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5130:	697a      	ldr	r2, [r7, #20]
    5132:	0010      	movs	r0, r2
    5134:	4798      	blx	r3
		}
	}
#  endif
}
    5136:	46c0      	nop			; (mov r8, r8)
    5138:	46bd      	mov	sp, r7
    513a:	b006      	add	sp, #24
    513c:	bd80      	pop	{r7, pc}
    513e:	46c0      	nop			; (mov r8, r8)
    5140:	20000a08 	.word	0x20000a08
    5144:	00004df9 	.word	0x00004df9
    5148:	00004d7d 	.word	0x00004d7d
    514c:	00004e2d 	.word	0x00004e2d
    5150:	00004e63 	.word	0x00004e63

00005154 <system_gclk_chan_get_config_defaults>:
{
    5154:	b580      	push	{r7, lr}
    5156:	b082      	sub	sp, #8
    5158:	af00      	add	r7, sp, #0
    515a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    515c:	687b      	ldr	r3, [r7, #4]
    515e:	2200      	movs	r2, #0
    5160:	701a      	strb	r2, [r3, #0]
}
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	46bd      	mov	sp, r7
    5166:	b002      	add	sp, #8
    5168:	bd80      	pop	{r7, pc}
	...

0000516c <system_apb_clock_set_mask>:
{
    516c:	b580      	push	{r7, lr}
    516e:	b082      	sub	sp, #8
    5170:	af00      	add	r7, sp, #0
    5172:	0002      	movs	r2, r0
    5174:	6039      	str	r1, [r7, #0]
    5176:	1dfb      	adds	r3, r7, #7
    5178:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    517a:	1dfb      	adds	r3, r7, #7
    517c:	781b      	ldrb	r3, [r3, #0]
    517e:	2b01      	cmp	r3, #1
    5180:	d00a      	beq.n	5198 <system_apb_clock_set_mask+0x2c>
    5182:	2b02      	cmp	r3, #2
    5184:	d00f      	beq.n	51a6 <system_apb_clock_set_mask+0x3a>
    5186:	2b00      	cmp	r3, #0
    5188:	d114      	bne.n	51b4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    518a:	4b0e      	ldr	r3, [pc, #56]	; (51c4 <system_apb_clock_set_mask+0x58>)
    518c:	4a0d      	ldr	r2, [pc, #52]	; (51c4 <system_apb_clock_set_mask+0x58>)
    518e:	6991      	ldr	r1, [r2, #24]
    5190:	683a      	ldr	r2, [r7, #0]
    5192:	430a      	orrs	r2, r1
    5194:	619a      	str	r2, [r3, #24]
			break;
    5196:	e00f      	b.n	51b8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5198:	4b0a      	ldr	r3, [pc, #40]	; (51c4 <system_apb_clock_set_mask+0x58>)
    519a:	4a0a      	ldr	r2, [pc, #40]	; (51c4 <system_apb_clock_set_mask+0x58>)
    519c:	69d1      	ldr	r1, [r2, #28]
    519e:	683a      	ldr	r2, [r7, #0]
    51a0:	430a      	orrs	r2, r1
    51a2:	61da      	str	r2, [r3, #28]
			break;
    51a4:	e008      	b.n	51b8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    51a6:	4b07      	ldr	r3, [pc, #28]	; (51c4 <system_apb_clock_set_mask+0x58>)
    51a8:	4a06      	ldr	r2, [pc, #24]	; (51c4 <system_apb_clock_set_mask+0x58>)
    51aa:	6a11      	ldr	r1, [r2, #32]
    51ac:	683a      	ldr	r2, [r7, #0]
    51ae:	430a      	orrs	r2, r1
    51b0:	621a      	str	r2, [r3, #32]
			break;
    51b2:	e001      	b.n	51b8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    51b4:	2317      	movs	r3, #23
    51b6:	e000      	b.n	51ba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    51b8:	2300      	movs	r3, #0
}
    51ba:	0018      	movs	r0, r3
    51bc:	46bd      	mov	sp, r7
    51be:	b002      	add	sp, #8
    51c0:	bd80      	pop	{r7, pc}
    51c2:	46c0      	nop			; (mov r8, r8)
    51c4:	40000400 	.word	0x40000400

000051c8 <system_pinmux_get_config_defaults>:
{
    51c8:	b580      	push	{r7, lr}
    51ca:	b082      	sub	sp, #8
    51cc:	af00      	add	r7, sp, #0
    51ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    51d0:	687b      	ldr	r3, [r7, #4]
    51d2:	2280      	movs	r2, #128	; 0x80
    51d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    51d6:	687b      	ldr	r3, [r7, #4]
    51d8:	2200      	movs	r2, #0
    51da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	2201      	movs	r2, #1
    51e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    51e2:	687b      	ldr	r3, [r7, #4]
    51e4:	2200      	movs	r2, #0
    51e6:	70da      	strb	r2, [r3, #3]
}
    51e8:	46c0      	nop			; (mov r8, r8)
    51ea:	46bd      	mov	sp, r7
    51ec:	b002      	add	sp, #8
    51ee:	bd80      	pop	{r7, pc}

000051f0 <system_is_debugger_present>:
{
    51f0:	b580      	push	{r7, lr}
    51f2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    51f4:	4b05      	ldr	r3, [pc, #20]	; (520c <system_is_debugger_present+0x1c>)
    51f6:	789b      	ldrb	r3, [r3, #2]
    51f8:	b2db      	uxtb	r3, r3
    51fa:	001a      	movs	r2, r3
    51fc:	2302      	movs	r3, #2
    51fe:	4013      	ands	r3, r2
    5200:	1e5a      	subs	r2, r3, #1
    5202:	4193      	sbcs	r3, r2
    5204:	b2db      	uxtb	r3, r3
}
    5206:	0018      	movs	r0, r3
    5208:	46bd      	mov	sp, r7
    520a:	bd80      	pop	{r7, pc}
    520c:	41002000 	.word	0x41002000

00005210 <usart_is_syncing>:
{
    5210:	b580      	push	{r7, lr}
    5212:	b084      	sub	sp, #16
    5214:	af00      	add	r7, sp, #0
    5216:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	681b      	ldr	r3, [r3, #0]
    521c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    521e:	68fb      	ldr	r3, [r7, #12]
    5220:	69db      	ldr	r3, [r3, #28]
    5222:	1e5a      	subs	r2, r3, #1
    5224:	4193      	sbcs	r3, r2
    5226:	b2db      	uxtb	r3, r3
}
    5228:	0018      	movs	r0, r3
    522a:	46bd      	mov	sp, r7
    522c:	b004      	add	sp, #16
    522e:	bd80      	pop	{r7, pc}

00005230 <_usart_wait_for_sync>:
{
    5230:	b580      	push	{r7, lr}
    5232:	b082      	sub	sp, #8
    5234:	af00      	add	r7, sp, #0
    5236:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5238:	46c0      	nop			; (mov r8, r8)
    523a:	687b      	ldr	r3, [r7, #4]
    523c:	0018      	movs	r0, r3
    523e:	4b04      	ldr	r3, [pc, #16]	; (5250 <_usart_wait_for_sync+0x20>)
    5240:	4798      	blx	r3
    5242:	1e03      	subs	r3, r0, #0
    5244:	d1f9      	bne.n	523a <_usart_wait_for_sync+0xa>
}
    5246:	46c0      	nop			; (mov r8, r8)
    5248:	46bd      	mov	sp, r7
    524a:	b002      	add	sp, #8
    524c:	bd80      	pop	{r7, pc}
    524e:	46c0      	nop			; (mov r8, r8)
    5250:	00005211 	.word	0x00005211

00005254 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    5254:	b5b0      	push	{r4, r5, r7, lr}
    5256:	b08c      	sub	sp, #48	; 0x30
    5258:	af02      	add	r7, sp, #8
    525a:	6078      	str	r0, [r7, #4]
    525c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    525e:	687b      	ldr	r3, [r7, #4]
    5260:	681b      	ldr	r3, [r3, #0]
    5262:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5264:	687b      	ldr	r3, [r7, #4]
    5266:	681b      	ldr	r3, [r3, #0]
    5268:	0018      	movs	r0, r3
    526a:	4bab      	ldr	r3, [pc, #684]	; (5518 <_usart_set_config+0x2c4>)
    526c:	4798      	blx	r3
    526e:	0003      	movs	r3, r0
    5270:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5272:	697b      	ldr	r3, [r7, #20]
    5274:	3314      	adds	r3, #20
    5276:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    5278:	2300      	movs	r3, #0
    527a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    527c:	2300      	movs	r3, #0
    527e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    5280:	230a      	movs	r3, #10
    5282:	18fb      	adds	r3, r7, r3
    5284:	2200      	movs	r2, #0
    5286:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5288:	231f      	movs	r3, #31
    528a:	18fb      	adds	r3, r7, r3
    528c:	2200      	movs	r2, #0
    528e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5290:	231e      	movs	r3, #30
    5292:	18fb      	adds	r3, r7, r3
    5294:	2210      	movs	r2, #16
    5296:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    5298:	683b      	ldr	r3, [r7, #0]
    529a:	8a1b      	ldrh	r3, [r3, #16]
    529c:	2280      	movs	r2, #128	; 0x80
    529e:	01d2      	lsls	r2, r2, #7
    52a0:	4293      	cmp	r3, r2
    52a2:	d01c      	beq.n	52de <_usart_set_config+0x8a>
    52a4:	2280      	movs	r2, #128	; 0x80
    52a6:	01d2      	lsls	r2, r2, #7
    52a8:	4293      	cmp	r3, r2
    52aa:	dc06      	bgt.n	52ba <_usart_set_config+0x66>
    52ac:	2b00      	cmp	r3, #0
    52ae:	d00d      	beq.n	52cc <_usart_set_config+0x78>
    52b0:	2280      	movs	r2, #128	; 0x80
    52b2:	0192      	lsls	r2, r2, #6
    52b4:	4293      	cmp	r3, r2
    52b6:	d024      	beq.n	5302 <_usart_set_config+0xae>
    52b8:	e035      	b.n	5326 <_usart_set_config+0xd2>
    52ba:	22c0      	movs	r2, #192	; 0xc0
    52bc:	01d2      	lsls	r2, r2, #7
    52be:	4293      	cmp	r3, r2
    52c0:	d028      	beq.n	5314 <_usart_set_config+0xc0>
    52c2:	2280      	movs	r2, #128	; 0x80
    52c4:	0212      	lsls	r2, r2, #8
    52c6:	4293      	cmp	r3, r2
    52c8:	d012      	beq.n	52f0 <_usart_set_config+0x9c>
    52ca:	e02c      	b.n	5326 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    52cc:	231f      	movs	r3, #31
    52ce:	18fb      	adds	r3, r7, r3
    52d0:	2200      	movs	r2, #0
    52d2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    52d4:	231e      	movs	r3, #30
    52d6:	18fb      	adds	r3, r7, r3
    52d8:	2210      	movs	r2, #16
    52da:	701a      	strb	r2, [r3, #0]
			break;
    52dc:	e023      	b.n	5326 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    52de:	231f      	movs	r3, #31
    52e0:	18fb      	adds	r3, r7, r3
    52e2:	2200      	movs	r2, #0
    52e4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    52e6:	231e      	movs	r3, #30
    52e8:	18fb      	adds	r3, r7, r3
    52ea:	2208      	movs	r2, #8
    52ec:	701a      	strb	r2, [r3, #0]
			break;
    52ee:	e01a      	b.n	5326 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    52f0:	231f      	movs	r3, #31
    52f2:	18fb      	adds	r3, r7, r3
    52f4:	2200      	movs	r2, #0
    52f6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    52f8:	231e      	movs	r3, #30
    52fa:	18fb      	adds	r3, r7, r3
    52fc:	2203      	movs	r2, #3
    52fe:	701a      	strb	r2, [r3, #0]
			break;
    5300:	e011      	b.n	5326 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5302:	231f      	movs	r3, #31
    5304:	18fb      	adds	r3, r7, r3
    5306:	2201      	movs	r2, #1
    5308:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    530a:	231e      	movs	r3, #30
    530c:	18fb      	adds	r3, r7, r3
    530e:	2210      	movs	r2, #16
    5310:	701a      	strb	r2, [r3, #0]
			break;
    5312:	e008      	b.n	5326 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5314:	231f      	movs	r3, #31
    5316:	18fb      	adds	r3, r7, r3
    5318:	2201      	movs	r2, #1
    531a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    531c:	231e      	movs	r3, #30
    531e:	18fb      	adds	r3, r7, r3
    5320:	2208      	movs	r2, #8
    5322:	701a      	strb	r2, [r3, #0]
			break;
    5324:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    5326:	683b      	ldr	r3, [r7, #0]
    5328:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    532a:	683b      	ldr	r3, [r7, #0]
    532c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    532e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    5330:	683b      	ldr	r3, [r7, #0]
    5332:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    5334:	4313      	orrs	r3, r2
		config->sample_rate |
    5336:	683a      	ldr	r2, [r7, #0]
    5338:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    533a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    533c:	683a      	ldr	r2, [r7, #0]
    533e:	7e12      	ldrb	r2, [r2, #24]
    5340:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    5342:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5344:	683a      	ldr	r2, [r7, #0]
    5346:	2126      	movs	r1, #38	; 0x26
    5348:	5c52      	ldrb	r2, [r2, r1]
    534a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    534c:	4313      	orrs	r3, r2
    534e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    5350:	231d      	movs	r3, #29
    5352:	18fb      	adds	r3, r7, r3
    5354:	2200      	movs	r2, #0
    5356:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    5358:	683b      	ldr	r3, [r7, #0]
    535a:	685b      	ldr	r3, [r3, #4]
    535c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    535e:	68fb      	ldr	r3, [r7, #12]
    5360:	2b00      	cmp	r3, #0
    5362:	d01e      	beq.n	53a2 <_usart_set_config+0x14e>
    5364:	2280      	movs	r2, #128	; 0x80
    5366:	0552      	lsls	r2, r2, #21
    5368:	4293      	cmp	r3, r2
    536a:	d14f      	bne.n	540c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    536c:	683b      	ldr	r3, [r7, #0]
    536e:	2227      	movs	r2, #39	; 0x27
    5370:	5c9b      	ldrb	r3, [r3, r2]
    5372:	2201      	movs	r2, #1
    5374:	4053      	eors	r3, r2
    5376:	b2db      	uxtb	r3, r3
    5378:	2b00      	cmp	r3, #0
    537a:	d046      	beq.n	540a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    537c:	683b      	ldr	r3, [r7, #0]
    537e:	6a1d      	ldr	r5, [r3, #32]
    5380:	693b      	ldr	r3, [r7, #16]
    5382:	b2db      	uxtb	r3, r3
    5384:	0018      	movs	r0, r3
    5386:	4b65      	ldr	r3, [pc, #404]	; (551c <_usart_set_config+0x2c8>)
    5388:	4798      	blx	r3
    538a:	0001      	movs	r1, r0
    538c:	231d      	movs	r3, #29
    538e:	18fc      	adds	r4, r7, r3
    5390:	230a      	movs	r3, #10
    5392:	18fb      	adds	r3, r7, r3
    5394:	001a      	movs	r2, r3
    5396:	0028      	movs	r0, r5
    5398:	4b61      	ldr	r3, [pc, #388]	; (5520 <_usart_set_config+0x2cc>)
    539a:	4798      	blx	r3
    539c:	0003      	movs	r3, r0
    539e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    53a0:	e033      	b.n	540a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    53a2:	683b      	ldr	r3, [r7, #0]
    53a4:	2227      	movs	r2, #39	; 0x27
    53a6:	5c9b      	ldrb	r3, [r3, r2]
    53a8:	2b00      	cmp	r3, #0
    53aa:	d014      	beq.n	53d6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    53ac:	683b      	ldr	r3, [r7, #0]
    53ae:	6a18      	ldr	r0, [r3, #32]
    53b0:	683b      	ldr	r3, [r7, #0]
    53b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    53b4:	231d      	movs	r3, #29
    53b6:	18fc      	adds	r4, r7, r3
    53b8:	231f      	movs	r3, #31
    53ba:	18fb      	adds	r3, r7, r3
    53bc:	781d      	ldrb	r5, [r3, #0]
    53be:	230a      	movs	r3, #10
    53c0:	18fa      	adds	r2, r7, r3
    53c2:	231e      	movs	r3, #30
    53c4:	18fb      	adds	r3, r7, r3
    53c6:	781b      	ldrb	r3, [r3, #0]
    53c8:	9300      	str	r3, [sp, #0]
    53ca:	002b      	movs	r3, r5
    53cc:	4d55      	ldr	r5, [pc, #340]	; (5524 <_usart_set_config+0x2d0>)
    53ce:	47a8      	blx	r5
    53d0:	0003      	movs	r3, r0
    53d2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    53d4:	e01a      	b.n	540c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    53d6:	683b      	ldr	r3, [r7, #0]
    53d8:	6a1d      	ldr	r5, [r3, #32]
    53da:	693b      	ldr	r3, [r7, #16]
    53dc:	b2db      	uxtb	r3, r3
    53de:	0018      	movs	r0, r3
    53e0:	4b4e      	ldr	r3, [pc, #312]	; (551c <_usart_set_config+0x2c8>)
    53e2:	4798      	blx	r3
				status_code =
    53e4:	231d      	movs	r3, #29
    53e6:	18fc      	adds	r4, r7, r3
    53e8:	231f      	movs	r3, #31
    53ea:	18fb      	adds	r3, r7, r3
    53ec:	7819      	ldrb	r1, [r3, #0]
    53ee:	230a      	movs	r3, #10
    53f0:	18fa      	adds	r2, r7, r3
    53f2:	231e      	movs	r3, #30
    53f4:	18fb      	adds	r3, r7, r3
    53f6:	781b      	ldrb	r3, [r3, #0]
    53f8:	9300      	str	r3, [sp, #0]
    53fa:	000b      	movs	r3, r1
    53fc:	0001      	movs	r1, r0
    53fe:	0028      	movs	r0, r5
    5400:	4d48      	ldr	r5, [pc, #288]	; (5524 <_usart_set_config+0x2d0>)
    5402:	47a8      	blx	r5
    5404:	0003      	movs	r3, r0
    5406:	7023      	strb	r3, [r4, #0]
			break;
    5408:	e000      	b.n	540c <_usart_set_config+0x1b8>
			break;
    540a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    540c:	231d      	movs	r3, #29
    540e:	18fb      	adds	r3, r7, r3
    5410:	781b      	ldrb	r3, [r3, #0]
    5412:	2b00      	cmp	r3, #0
    5414:	d003      	beq.n	541e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    5416:	231d      	movs	r3, #29
    5418:	18fb      	adds	r3, r7, r3
    541a:	781b      	ldrb	r3, [r3, #0]
    541c:	e077      	b.n	550e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    541e:	683b      	ldr	r3, [r7, #0]
    5420:	7e5b      	ldrb	r3, [r3, #25]
    5422:	2b00      	cmp	r3, #0
    5424:	d003      	beq.n	542e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    5426:	683b      	ldr	r3, [r7, #0]
    5428:	7e9a      	ldrb	r2, [r3, #26]
    542a:	69bb      	ldr	r3, [r7, #24]
    542c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	0018      	movs	r0, r3
    5432:	4b3d      	ldr	r3, [pc, #244]	; (5528 <_usart_set_config+0x2d4>)
    5434:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    5436:	230a      	movs	r3, #10
    5438:	18fb      	adds	r3, r7, r3
    543a:	881a      	ldrh	r2, [r3, #0]
    543c:	69bb      	ldr	r3, [r7, #24]
    543e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    5440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5442:	68fb      	ldr	r3, [r7, #12]
    5444:	4313      	orrs	r3, r2
    5446:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    5448:	683b      	ldr	r3, [r7, #0]
    544a:	2227      	movs	r2, #39	; 0x27
    544c:	5c9b      	ldrb	r3, [r3, r2]
    544e:	2201      	movs	r2, #1
    5450:	4053      	eors	r3, r2
    5452:	b2db      	uxtb	r3, r3
    5454:	2b00      	cmp	r3, #0
    5456:	d003      	beq.n	5460 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    545a:	2204      	movs	r2, #4
    545c:	4313      	orrs	r3, r2
    545e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5460:	683b      	ldr	r3, [r7, #0]
    5462:	7e5b      	ldrb	r3, [r3, #25]
    5464:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5466:	683b      	ldr	r3, [r7, #0]
    5468:	7f1b      	ldrb	r3, [r3, #28]
    546a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    546c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    546e:	683b      	ldr	r3, [r7, #0]
    5470:	7f5b      	ldrb	r3, [r3, #29]
    5472:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5474:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5476:	683b      	ldr	r3, [r7, #0]
    5478:	2124      	movs	r1, #36	; 0x24
    547a:	5c5b      	ldrb	r3, [r3, r1]
    547c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    547e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5480:	683b      	ldr	r3, [r7, #0]
    5482:	2125      	movs	r1, #37	; 0x25
    5484:	5c5b      	ldrb	r3, [r3, r1]
    5486:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5488:	4313      	orrs	r3, r2
	ctrlb =  
    548a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    548c:	683b      	ldr	r3, [r7, #0]
    548e:	7a9b      	ldrb	r3, [r3, #10]
    5490:	001a      	movs	r2, r3
    5492:	6a3b      	ldr	r3, [r7, #32]
    5494:	4313      	orrs	r3, r2
    5496:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    5498:	683b      	ldr	r3, [r7, #0]
    549a:	7adb      	ldrb	r3, [r3, #11]
    549c:	001a      	movs	r2, r3
    549e:	6a3b      	ldr	r3, [r7, #32]
    54a0:	4313      	orrs	r3, r2
    54a2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    54a4:	683b      	ldr	r3, [r7, #0]
    54a6:	891b      	ldrh	r3, [r3, #8]
    54a8:	2bff      	cmp	r3, #255	; 0xff
    54aa:	d00b      	beq.n	54c4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    54ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54ae:	2280      	movs	r2, #128	; 0x80
    54b0:	0452      	lsls	r2, r2, #17
    54b2:	4313      	orrs	r3, r2
    54b4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    54b6:	683b      	ldr	r3, [r7, #0]
    54b8:	891b      	ldrh	r3, [r3, #8]
    54ba:	001a      	movs	r2, r3
    54bc:	6a3b      	ldr	r3, [r7, #32]
    54be:	4313      	orrs	r3, r2
    54c0:	623b      	str	r3, [r7, #32]
    54c2:	e008      	b.n	54d6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    54c4:	683b      	ldr	r3, [r7, #0]
    54c6:	7edb      	ldrb	r3, [r3, #27]
    54c8:	2b00      	cmp	r3, #0
    54ca:	d004      	beq.n	54d6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    54cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54ce:	2280      	movs	r2, #128	; 0x80
    54d0:	04d2      	lsls	r2, r2, #19
    54d2:	4313      	orrs	r3, r2
    54d4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    54d6:	683b      	ldr	r3, [r7, #0]
    54d8:	222c      	movs	r2, #44	; 0x2c
    54da:	5c9b      	ldrb	r3, [r3, r2]
    54dc:	2b00      	cmp	r3, #0
    54de:	d103      	bne.n	54e8 <_usart_set_config+0x294>
    54e0:	4b12      	ldr	r3, [pc, #72]	; (552c <_usart_set_config+0x2d8>)
    54e2:	4798      	blx	r3
    54e4:	1e03      	subs	r3, r0, #0
    54e6:	d003      	beq.n	54f0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    54e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    54ea:	2280      	movs	r2, #128	; 0x80
    54ec:	4313      	orrs	r3, r2
    54ee:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	0018      	movs	r0, r3
    54f4:	4b0c      	ldr	r3, [pc, #48]	; (5528 <_usart_set_config+0x2d4>)
    54f6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    54f8:	69bb      	ldr	r3, [r7, #24]
    54fa:	6a3a      	ldr	r2, [r7, #32]
    54fc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	0018      	movs	r0, r3
    5502:	4b09      	ldr	r3, [pc, #36]	; (5528 <_usart_set_config+0x2d4>)
    5504:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    5506:	69bb      	ldr	r3, [r7, #24]
    5508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    550a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    550c:	2300      	movs	r3, #0
}
    550e:	0018      	movs	r0, r3
    5510:	46bd      	mov	sp, r7
    5512:	b00a      	add	sp, #40	; 0x28
    5514:	bdb0      	pop	{r4, r5, r7, pc}
    5516:	46c0      	nop			; (mov r8, r8)
    5518:	00003fbd 	.word	0x00003fbd
    551c:	00006bf5 	.word	0x00006bf5
    5520:	00003b37 	.word	0x00003b37
    5524:	00003bb5 	.word	0x00003bb5
    5528:	00005231 	.word	0x00005231
    552c:	000051f1 	.word	0x000051f1

00005530 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5530:	b590      	push	{r4, r7, lr}
    5532:	b093      	sub	sp, #76	; 0x4c
    5534:	af00      	add	r7, sp, #0
    5536:	60f8      	str	r0, [r7, #12]
    5538:	60b9      	str	r1, [r7, #8]
    553a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    553c:	233b      	movs	r3, #59	; 0x3b
    553e:	18fb      	adds	r3, r7, r3
    5540:	2200      	movs	r2, #0
    5542:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5544:	68fb      	ldr	r3, [r7, #12]
    5546:	68ba      	ldr	r2, [r7, #8]
    5548:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    554a:	68fb      	ldr	r3, [r7, #12]
    554c:	681b      	ldr	r3, [r3, #0]
    554e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5550:	68fb      	ldr	r3, [r7, #12]
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	0018      	movs	r0, r3
    5556:	4b86      	ldr	r3, [pc, #536]	; (5770 <usart_init+0x240>)
    5558:	4798      	blx	r3
    555a:	0003      	movs	r3, r0
    555c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5560:	3302      	adds	r3, #2
    5562:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5566:	3314      	adds	r3, #20
    5568:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    556c:	681b      	ldr	r3, [r3, #0]
    556e:	2201      	movs	r2, #1
    5570:	4013      	ands	r3, r2
    5572:	d001      	beq.n	5578 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5574:	2305      	movs	r3, #5
    5576:	e0f6      	b.n	5766 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	2202      	movs	r2, #2
    557e:	4013      	ands	r3, r2
    5580:	d001      	beq.n	5586 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    5582:	231c      	movs	r3, #28
    5584:	e0ef      	b.n	5766 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5586:	2201      	movs	r2, #1
    5588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    558a:	409a      	lsls	r2, r3
    558c:	0013      	movs	r3, r2
    558e:	0019      	movs	r1, r3
    5590:	2002      	movs	r0, #2
    5592:	4b78      	ldr	r3, [pc, #480]	; (5774 <usart_init+0x244>)
    5594:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5596:	2324      	movs	r3, #36	; 0x24
    5598:	18fb      	adds	r3, r7, r3
    559a:	0018      	movs	r0, r3
    559c:	4b76      	ldr	r3, [pc, #472]	; (5778 <usart_init+0x248>)
    559e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    55a0:	687b      	ldr	r3, [r7, #4]
    55a2:	222d      	movs	r2, #45	; 0x2d
    55a4:	5c9a      	ldrb	r2, [r3, r2]
    55a6:	2324      	movs	r3, #36	; 0x24
    55a8:	18fb      	adds	r3, r7, r3
    55aa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    55ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55ae:	b2db      	uxtb	r3, r3
    55b0:	2224      	movs	r2, #36	; 0x24
    55b2:	18ba      	adds	r2, r7, r2
    55b4:	0011      	movs	r1, r2
    55b6:	0018      	movs	r0, r3
    55b8:	4b70      	ldr	r3, [pc, #448]	; (577c <usart_init+0x24c>)
    55ba:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    55bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55be:	b2db      	uxtb	r3, r3
    55c0:	0018      	movs	r0, r3
    55c2:	4b6f      	ldr	r3, [pc, #444]	; (5780 <usart_init+0x250>)
    55c4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    55c6:	687b      	ldr	r3, [r7, #4]
    55c8:	222d      	movs	r2, #45	; 0x2d
    55ca:	5c9b      	ldrb	r3, [r3, r2]
    55cc:	2100      	movs	r1, #0
    55ce:	0018      	movs	r0, r3
    55d0:	4b6c      	ldr	r3, [pc, #432]	; (5784 <usart_init+0x254>)
    55d2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	7ada      	ldrb	r2, [r3, #11]
    55d8:	68fb      	ldr	r3, [r7, #12]
    55da:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	2224      	movs	r2, #36	; 0x24
    55e0:	5c9a      	ldrb	r2, [r3, r2]
    55e2:	68fb      	ldr	r3, [r7, #12]
    55e4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    55e6:	687b      	ldr	r3, [r7, #4]
    55e8:	2225      	movs	r2, #37	; 0x25
    55ea:	5c9a      	ldrb	r2, [r3, r2]
    55ec:	68fb      	ldr	r3, [r7, #12]
    55ee:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	7eda      	ldrb	r2, [r3, #27]
    55f4:	68fb      	ldr	r3, [r7, #12]
    55f6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    55f8:	687b      	ldr	r3, [r7, #4]
    55fa:	7f1a      	ldrb	r2, [r3, #28]
    55fc:	68fb      	ldr	r3, [r7, #12]
    55fe:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5600:	233b      	movs	r3, #59	; 0x3b
    5602:	18fc      	adds	r4, r7, r3
    5604:	687a      	ldr	r2, [r7, #4]
    5606:	68fb      	ldr	r3, [r7, #12]
    5608:	0011      	movs	r1, r2
    560a:	0018      	movs	r0, r3
    560c:	4b5e      	ldr	r3, [pc, #376]	; (5788 <usart_init+0x258>)
    560e:	4798      	blx	r3
    5610:	0003      	movs	r3, r0
    5612:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    5614:	233b      	movs	r3, #59	; 0x3b
    5616:	18fb      	adds	r3, r7, r3
    5618:	781b      	ldrb	r3, [r3, #0]
    561a:	2b00      	cmp	r3, #0
    561c:	d003      	beq.n	5626 <usart_init+0xf6>
		return status_code;
    561e:	233b      	movs	r3, #59	; 0x3b
    5620:	18fb      	adds	r3, r7, r3
    5622:	781b      	ldrb	r3, [r3, #0]
    5624:	e09f      	b.n	5766 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    5626:	2320      	movs	r3, #32
    5628:	18fb      	adds	r3, r7, r3
    562a:	0018      	movs	r0, r3
    562c:	4b57      	ldr	r3, [pc, #348]	; (578c <usart_init+0x25c>)
    562e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5630:	2320      	movs	r3, #32
    5632:	18fb      	adds	r3, r7, r3
    5634:	2200      	movs	r2, #0
    5636:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5638:	2320      	movs	r3, #32
    563a:	18fb      	adds	r3, r7, r3
    563c:	2200      	movs	r2, #0
    563e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    5640:	687b      	ldr	r3, [r7, #4]
    5642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    5644:	2310      	movs	r3, #16
    5646:	18fb      	adds	r3, r7, r3
    5648:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    564e:	2310      	movs	r3, #16
    5650:	18fb      	adds	r3, r7, r3
    5652:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    5654:	687b      	ldr	r3, [r7, #4]
    5656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    5658:	2310      	movs	r3, #16
    565a:	18fb      	adds	r3, r7, r3
    565c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    565e:	687b      	ldr	r3, [r7, #4]
    5660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    5662:	2310      	movs	r3, #16
    5664:	18fb      	adds	r3, r7, r3
    5666:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    5668:	2347      	movs	r3, #71	; 0x47
    566a:	18fb      	adds	r3, r7, r3
    566c:	2200      	movs	r2, #0
    566e:	701a      	strb	r2, [r3, #0]
    5670:	e02c      	b.n	56cc <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5672:	2347      	movs	r3, #71	; 0x47
    5674:	18fb      	adds	r3, r7, r3
    5676:	781a      	ldrb	r2, [r3, #0]
    5678:	2310      	movs	r3, #16
    567a:	18fb      	adds	r3, r7, r3
    567c:	0092      	lsls	r2, r2, #2
    567e:	58d3      	ldr	r3, [r2, r3]
    5680:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    5682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5684:	2b00      	cmp	r3, #0
    5686:	d109      	bne.n	569c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5688:	2347      	movs	r3, #71	; 0x47
    568a:	18fb      	adds	r3, r7, r3
    568c:	781a      	ldrb	r2, [r3, #0]
    568e:	68bb      	ldr	r3, [r7, #8]
    5690:	0011      	movs	r1, r2
    5692:	0018      	movs	r0, r3
    5694:	4b3e      	ldr	r3, [pc, #248]	; (5790 <usart_init+0x260>)
    5696:	4798      	blx	r3
    5698:	0003      	movs	r3, r0
    569a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    569c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    569e:	3301      	adds	r3, #1
    56a0:	d00d      	beq.n	56be <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    56a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    56a4:	b2da      	uxtb	r2, r3
    56a6:	2320      	movs	r3, #32
    56a8:	18fb      	adds	r3, r7, r3
    56aa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    56ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    56ae:	0c1b      	lsrs	r3, r3, #16
    56b0:	b2db      	uxtb	r3, r3
    56b2:	2220      	movs	r2, #32
    56b4:	18ba      	adds	r2, r7, r2
    56b6:	0011      	movs	r1, r2
    56b8:	0018      	movs	r0, r3
    56ba:	4b36      	ldr	r3, [pc, #216]	; (5794 <usart_init+0x264>)
    56bc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    56be:	2347      	movs	r3, #71	; 0x47
    56c0:	18fb      	adds	r3, r7, r3
    56c2:	781a      	ldrb	r2, [r3, #0]
    56c4:	2347      	movs	r3, #71	; 0x47
    56c6:	18fb      	adds	r3, r7, r3
    56c8:	3201      	adds	r2, #1
    56ca:	701a      	strb	r2, [r3, #0]
    56cc:	2347      	movs	r3, #71	; 0x47
    56ce:	18fb      	adds	r3, r7, r3
    56d0:	781b      	ldrb	r3, [r3, #0]
    56d2:	2b03      	cmp	r3, #3
    56d4:	d9cd      	bls.n	5672 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    56d6:	2300      	movs	r3, #0
    56d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    56da:	e00a      	b.n	56f2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    56dc:	68fa      	ldr	r2, [r7, #12]
    56de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    56e0:	3302      	adds	r3, #2
    56e2:	009b      	lsls	r3, r3, #2
    56e4:	18d3      	adds	r3, r2, r3
    56e6:	3304      	adds	r3, #4
    56e8:	2200      	movs	r2, #0
    56ea:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    56ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    56ee:	3301      	adds	r3, #1
    56f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    56f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    56f4:	2b05      	cmp	r3, #5
    56f6:	d9f1      	bls.n	56dc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    56f8:	68fb      	ldr	r3, [r7, #12]
    56fa:	2200      	movs	r2, #0
    56fc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    56fe:	68fb      	ldr	r3, [r7, #12]
    5700:	2200      	movs	r2, #0
    5702:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5704:	68fb      	ldr	r3, [r7, #12]
    5706:	2200      	movs	r2, #0
    5708:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    570a:	68fb      	ldr	r3, [r7, #12]
    570c:	2200      	movs	r2, #0
    570e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5710:	68fb      	ldr	r3, [r7, #12]
    5712:	2230      	movs	r2, #48	; 0x30
    5714:	2100      	movs	r1, #0
    5716:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5718:	68fb      	ldr	r3, [r7, #12]
    571a:	2231      	movs	r2, #49	; 0x31
    571c:	2100      	movs	r1, #0
    571e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5720:	68fb      	ldr	r3, [r7, #12]
    5722:	2232      	movs	r2, #50	; 0x32
    5724:	2100      	movs	r1, #0
    5726:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    5728:	68fb      	ldr	r3, [r7, #12]
    572a:	2233      	movs	r2, #51	; 0x33
    572c:	2100      	movs	r1, #0
    572e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5730:	68fb      	ldr	r3, [r7, #12]
    5732:	681b      	ldr	r3, [r3, #0]
    5734:	2227      	movs	r2, #39	; 0x27
    5736:	18bc      	adds	r4, r7, r2
    5738:	0018      	movs	r0, r3
    573a:	4b0d      	ldr	r3, [pc, #52]	; (5770 <usart_init+0x240>)
    573c:	4798      	blx	r3
    573e:	0003      	movs	r3, r0
    5740:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5742:	4a15      	ldr	r2, [pc, #84]	; (5798 <usart_init+0x268>)
    5744:	2327      	movs	r3, #39	; 0x27
    5746:	18fb      	adds	r3, r7, r3
    5748:	781b      	ldrb	r3, [r3, #0]
    574a:	0011      	movs	r1, r2
    574c:	0018      	movs	r0, r3
    574e:	4b13      	ldr	r3, [pc, #76]	; (579c <usart_init+0x26c>)
    5750:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5752:	2327      	movs	r3, #39	; 0x27
    5754:	18fb      	adds	r3, r7, r3
    5756:	781a      	ldrb	r2, [r3, #0]
    5758:	4b11      	ldr	r3, [pc, #68]	; (57a0 <usart_init+0x270>)
    575a:	0092      	lsls	r2, r2, #2
    575c:	68f9      	ldr	r1, [r7, #12]
    575e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    5760:	233b      	movs	r3, #59	; 0x3b
    5762:	18fb      	adds	r3, r7, r3
    5764:	781b      	ldrb	r3, [r3, #0]
}
    5766:	0018      	movs	r0, r3
    5768:	46bd      	mov	sp, r7
    576a:	b013      	add	sp, #76	; 0x4c
    576c:	bd90      	pop	{r4, r7, pc}
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	00003fbd 	.word	0x00003fbd
    5774:	0000516d 	.word	0x0000516d
    5778:	00005155 	.word	0x00005155
    577c:	00006ad1 	.word	0x00006ad1
    5780:	00006b15 	.word	0x00006b15
    5784:	00003d75 	.word	0x00003d75
    5788:	00005255 	.word	0x00005255
    578c:	000051c9 	.word	0x000051c9
    5790:	00003e01 	.word	0x00003e01
    5794:	00006dbd 	.word	0x00006dbd
    5798:	00005b5d 	.word	0x00005b5d
    579c:	00004021 	.word	0x00004021
    57a0:	20000a08 	.word	0x20000a08

000057a4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    57a4:	b580      	push	{r7, lr}
    57a6:	b084      	sub	sp, #16
    57a8:	af00      	add	r7, sp, #0
    57aa:	6078      	str	r0, [r7, #4]
    57ac:	000a      	movs	r2, r1
    57ae:	1cbb      	adds	r3, r7, #2
    57b0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    57b2:	687b      	ldr	r3, [r7, #4]
    57b4:	681b      	ldr	r3, [r3, #0]
    57b6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    57b8:	687b      	ldr	r3, [r7, #4]
    57ba:	79db      	ldrb	r3, [r3, #7]
    57bc:	2201      	movs	r2, #1
    57be:	4053      	eors	r3, r2
    57c0:	b2db      	uxtb	r3, r3
    57c2:	2b00      	cmp	r3, #0
    57c4:	d001      	beq.n	57ca <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    57c6:	231c      	movs	r3, #28
    57c8:	e017      	b.n	57fa <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    57ca:	687b      	ldr	r3, [r7, #4]
    57cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    57ce:	b29b      	uxth	r3, r3
    57d0:	2b00      	cmp	r3, #0
    57d2:	d001      	beq.n	57d8 <usart_write_wait+0x34>
		return STATUS_BUSY;
    57d4:	2305      	movs	r3, #5
    57d6:	e010      	b.n	57fa <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	0018      	movs	r0, r3
    57dc:	4b09      	ldr	r3, [pc, #36]	; (5804 <usart_write_wait+0x60>)
    57de:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    57e0:	68fb      	ldr	r3, [r7, #12]
    57e2:	1cba      	adds	r2, r7, #2
    57e4:	8812      	ldrh	r2, [r2, #0]
    57e6:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    57e8:	46c0      	nop			; (mov r8, r8)
    57ea:	68fb      	ldr	r3, [r7, #12]
    57ec:	7e1b      	ldrb	r3, [r3, #24]
    57ee:	b2db      	uxtb	r3, r3
    57f0:	001a      	movs	r2, r3
    57f2:	2302      	movs	r3, #2
    57f4:	4013      	ands	r3, r2
    57f6:	d0f8      	beq.n	57ea <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    57f8:	2300      	movs	r3, #0
}
    57fa:	0018      	movs	r0, r3
    57fc:	46bd      	mov	sp, r7
    57fe:	b004      	add	sp, #16
    5800:	bd80      	pop	{r7, pc}
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	00005231 	.word	0x00005231

00005808 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5808:	b580      	push	{r7, lr}
    580a:	b084      	sub	sp, #16
    580c:	af00      	add	r7, sp, #0
    580e:	6078      	str	r0, [r7, #4]
    5810:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5812:	687b      	ldr	r3, [r7, #4]
    5814:	681b      	ldr	r3, [r3, #0]
    5816:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5818:	687b      	ldr	r3, [r7, #4]
    581a:	799b      	ldrb	r3, [r3, #6]
    581c:	2201      	movs	r2, #1
    581e:	4053      	eors	r3, r2
    5820:	b2db      	uxtb	r3, r3
    5822:	2b00      	cmp	r3, #0
    5824:	d001      	beq.n	582a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    5826:	231c      	movs	r3, #28
    5828:	e05e      	b.n	58e8 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    582a:	687b      	ldr	r3, [r7, #4]
    582c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    582e:	b29b      	uxth	r3, r3
    5830:	2b00      	cmp	r3, #0
    5832:	d001      	beq.n	5838 <usart_read_wait+0x30>
		return STATUS_BUSY;
    5834:	2305      	movs	r3, #5
    5836:	e057      	b.n	58e8 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5838:	68fb      	ldr	r3, [r7, #12]
    583a:	7e1b      	ldrb	r3, [r3, #24]
    583c:	b2db      	uxtb	r3, r3
    583e:	001a      	movs	r2, r3
    5840:	2304      	movs	r3, #4
    5842:	4013      	ands	r3, r2
    5844:	d101      	bne.n	584a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    5846:	2305      	movs	r3, #5
    5848:	e04e      	b.n	58e8 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    584a:	687b      	ldr	r3, [r7, #4]
    584c:	0018      	movs	r0, r3
    584e:	4b28      	ldr	r3, [pc, #160]	; (58f0 <usart_read_wait+0xe8>)
    5850:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5852:	68fb      	ldr	r3, [r7, #12]
    5854:	8b5b      	ldrh	r3, [r3, #26]
    5856:	b29b      	uxth	r3, r3
    5858:	b2da      	uxtb	r2, r3
    585a:	230b      	movs	r3, #11
    585c:	18fb      	adds	r3, r7, r3
    585e:	213f      	movs	r1, #63	; 0x3f
    5860:	400a      	ands	r2, r1
    5862:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    5864:	230b      	movs	r3, #11
    5866:	18fb      	adds	r3, r7, r3
    5868:	781b      	ldrb	r3, [r3, #0]
    586a:	2b00      	cmp	r3, #0
    586c:	d036      	beq.n	58dc <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    586e:	230b      	movs	r3, #11
    5870:	18fb      	adds	r3, r7, r3
    5872:	781b      	ldrb	r3, [r3, #0]
    5874:	2202      	movs	r2, #2
    5876:	4013      	ands	r3, r2
    5878:	d004      	beq.n	5884 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    587a:	68fb      	ldr	r3, [r7, #12]
    587c:	2202      	movs	r2, #2
    587e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    5880:	231a      	movs	r3, #26
    5882:	e031      	b.n	58e8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5884:	230b      	movs	r3, #11
    5886:	18fb      	adds	r3, r7, r3
    5888:	781b      	ldrb	r3, [r3, #0]
    588a:	2204      	movs	r2, #4
    588c:	4013      	ands	r3, r2
    588e:	d004      	beq.n	589a <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5890:	68fb      	ldr	r3, [r7, #12]
    5892:	2204      	movs	r2, #4
    5894:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    5896:	231e      	movs	r3, #30
    5898:	e026      	b.n	58e8 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    589a:	230b      	movs	r3, #11
    589c:	18fb      	adds	r3, r7, r3
    589e:	781b      	ldrb	r3, [r3, #0]
    58a0:	2201      	movs	r2, #1
    58a2:	4013      	ands	r3, r2
    58a4:	d004      	beq.n	58b0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    58a6:	68fb      	ldr	r3, [r7, #12]
    58a8:	2201      	movs	r2, #1
    58aa:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    58ac:	2313      	movs	r3, #19
    58ae:	e01b      	b.n	58e8 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    58b0:	230b      	movs	r3, #11
    58b2:	18fb      	adds	r3, r7, r3
    58b4:	781b      	ldrb	r3, [r3, #0]
    58b6:	2210      	movs	r2, #16
    58b8:	4013      	ands	r3, r2
    58ba:	d004      	beq.n	58c6 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    58bc:	68fb      	ldr	r3, [r7, #12]
    58be:	2210      	movs	r2, #16
    58c0:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    58c2:	2342      	movs	r3, #66	; 0x42
    58c4:	e010      	b.n	58e8 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    58c6:	230b      	movs	r3, #11
    58c8:	18fb      	adds	r3, r7, r3
    58ca:	781b      	ldrb	r3, [r3, #0]
    58cc:	2220      	movs	r2, #32
    58ce:	4013      	ands	r3, r2
    58d0:	d004      	beq.n	58dc <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    58d2:	68fb      	ldr	r3, [r7, #12]
    58d4:	2220      	movs	r2, #32
    58d6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    58d8:	2341      	movs	r3, #65	; 0x41
    58da:	e005      	b.n	58e8 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    58dc:	68fb      	ldr	r3, [r7, #12]
    58de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    58e0:	b29a      	uxth	r2, r3
    58e2:	683b      	ldr	r3, [r7, #0]
    58e4:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    58e6:	2300      	movs	r3, #0
}
    58e8:	0018      	movs	r0, r3
    58ea:	46bd      	mov	sp, r7
    58ec:	b004      	add	sp, #16
    58ee:	bd80      	pop	{r7, pc}
    58f0:	00005231 	.word	0x00005231

000058f4 <system_interrupt_enter_critical_section>:
{
    58f4:	b580      	push	{r7, lr}
    58f6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    58f8:	4b02      	ldr	r3, [pc, #8]	; (5904 <system_interrupt_enter_critical_section+0x10>)
    58fa:	4798      	blx	r3
}
    58fc:	46c0      	nop			; (mov r8, r8)
    58fe:	46bd      	mov	sp, r7
    5900:	bd80      	pop	{r7, pc}
    5902:	46c0      	nop			; (mov r8, r8)
    5904:	00003445 	.word	0x00003445

00005908 <system_interrupt_leave_critical_section>:
{
    5908:	b580      	push	{r7, lr}
    590a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    590c:	4b02      	ldr	r3, [pc, #8]	; (5918 <system_interrupt_leave_critical_section+0x10>)
    590e:	4798      	blx	r3
}
    5910:	46c0      	nop			; (mov r8, r8)
    5912:	46bd      	mov	sp, r7
    5914:	bd80      	pop	{r7, pc}
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	00003499 	.word	0x00003499

0000591c <usart_is_syncing>:
{
    591c:	b580      	push	{r7, lr}
    591e:	b084      	sub	sp, #16
    5920:	af00      	add	r7, sp, #0
    5922:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5924:	687b      	ldr	r3, [r7, #4]
    5926:	681b      	ldr	r3, [r3, #0]
    5928:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    592a:	68fb      	ldr	r3, [r7, #12]
    592c:	69db      	ldr	r3, [r3, #28]
    592e:	1e5a      	subs	r2, r3, #1
    5930:	4193      	sbcs	r3, r2
    5932:	b2db      	uxtb	r3, r3
}
    5934:	0018      	movs	r0, r3
    5936:	46bd      	mov	sp, r7
    5938:	b004      	add	sp, #16
    593a:	bd80      	pop	{r7, pc}

0000593c <_usart_wait_for_sync>:
{
    593c:	b580      	push	{r7, lr}
    593e:	b082      	sub	sp, #8
    5940:	af00      	add	r7, sp, #0
    5942:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    5944:	46c0      	nop			; (mov r8, r8)
    5946:	687b      	ldr	r3, [r7, #4]
    5948:	0018      	movs	r0, r3
    594a:	4b04      	ldr	r3, [pc, #16]	; (595c <_usart_wait_for_sync+0x20>)
    594c:	4798      	blx	r3
    594e:	1e03      	subs	r3, r0, #0
    5950:	d1f9      	bne.n	5946 <_usart_wait_for_sync+0xa>
}
    5952:	46c0      	nop			; (mov r8, r8)
    5954:	46bd      	mov	sp, r7
    5956:	b002      	add	sp, #8
    5958:	bd80      	pop	{r7, pc}
    595a:	46c0      	nop			; (mov r8, r8)
    595c:	0000591d 	.word	0x0000591d

00005960 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5960:	b580      	push	{r7, lr}
    5962:	b086      	sub	sp, #24
    5964:	af00      	add	r7, sp, #0
    5966:	60f8      	str	r0, [r7, #12]
    5968:	60b9      	str	r1, [r7, #8]
    596a:	1dbb      	adds	r3, r7, #6
    596c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    596e:	68fb      	ldr	r3, [r7, #12]
    5970:	681b      	ldr	r3, [r3, #0]
    5972:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5974:	4b0f      	ldr	r3, [pc, #60]	; (59b4 <_usart_write_buffer+0x54>)
    5976:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    5978:	68fb      	ldr	r3, [r7, #12]
    597a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    597c:	b29b      	uxth	r3, r3
    597e:	2b00      	cmp	r3, #0
    5980:	d003      	beq.n	598a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5982:	4b0d      	ldr	r3, [pc, #52]	; (59b8 <_usart_write_buffer+0x58>)
    5984:	4798      	blx	r3
		return STATUS_BUSY;
    5986:	2305      	movs	r3, #5
    5988:	e010      	b.n	59ac <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    598a:	68fb      	ldr	r3, [r7, #12]
    598c:	1dba      	adds	r2, r7, #6
    598e:	8812      	ldrh	r2, [r2, #0]
    5990:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    5992:	4b09      	ldr	r3, [pc, #36]	; (59b8 <_usart_write_buffer+0x58>)
    5994:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    5996:	68fb      	ldr	r3, [r7, #12]
    5998:	68ba      	ldr	r2, [r7, #8]
    599a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    599c:	68fb      	ldr	r3, [r7, #12]
    599e:	2233      	movs	r2, #51	; 0x33
    59a0:	2105      	movs	r1, #5
    59a2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    59a4:	697b      	ldr	r3, [r7, #20]
    59a6:	2201      	movs	r2, #1
    59a8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    59aa:	2300      	movs	r3, #0
}
    59ac:	0018      	movs	r0, r3
    59ae:	46bd      	mov	sp, r7
    59b0:	b006      	add	sp, #24
    59b2:	bd80      	pop	{r7, pc}
    59b4:	000058f5 	.word	0x000058f5
    59b8:	00005909 	.word	0x00005909

000059bc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    59bc:	b580      	push	{r7, lr}
    59be:	b086      	sub	sp, #24
    59c0:	af00      	add	r7, sp, #0
    59c2:	60f8      	str	r0, [r7, #12]
    59c4:	60b9      	str	r1, [r7, #8]
    59c6:	1dbb      	adds	r3, r7, #6
    59c8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    59ca:	68fb      	ldr	r3, [r7, #12]
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    59d0:	4b16      	ldr	r3, [pc, #88]	; (5a2c <_usart_read_buffer+0x70>)
    59d2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    59d4:	68fb      	ldr	r3, [r7, #12]
    59d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    59d8:	b29b      	uxth	r3, r3
    59da:	2b00      	cmp	r3, #0
    59dc:	d003      	beq.n	59e6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    59de:	4b14      	ldr	r3, [pc, #80]	; (5a30 <_usart_read_buffer+0x74>)
    59e0:	4798      	blx	r3
		return STATUS_BUSY;
    59e2:	2305      	movs	r3, #5
    59e4:	e01e      	b.n	5a24 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    59e6:	68fb      	ldr	r3, [r7, #12]
    59e8:	1dba      	adds	r2, r7, #6
    59ea:	8812      	ldrh	r2, [r2, #0]
    59ec:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    59ee:	4b10      	ldr	r3, [pc, #64]	; (5a30 <_usart_read_buffer+0x74>)
    59f0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    59f2:	68fb      	ldr	r3, [r7, #12]
    59f4:	68ba      	ldr	r2, [r7, #8]
    59f6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    59f8:	68fb      	ldr	r3, [r7, #12]
    59fa:	2232      	movs	r2, #50	; 0x32
    59fc:	2105      	movs	r1, #5
    59fe:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5a00:	697b      	ldr	r3, [r7, #20]
    5a02:	2204      	movs	r2, #4
    5a04:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    5a06:	68fb      	ldr	r3, [r7, #12]
    5a08:	7a1b      	ldrb	r3, [r3, #8]
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d002      	beq.n	5a14 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5a0e:	697b      	ldr	r3, [r7, #20]
    5a10:	2220      	movs	r2, #32
    5a12:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    5a14:	68fb      	ldr	r3, [r7, #12]
    5a16:	7a5b      	ldrb	r3, [r3, #9]
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d002      	beq.n	5a22 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5a1c:	697b      	ldr	r3, [r7, #20]
    5a1e:	2208      	movs	r2, #8
    5a20:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    5a22:	2300      	movs	r3, #0
}
    5a24:	0018      	movs	r0, r3
    5a26:	46bd      	mov	sp, r7
    5a28:	b006      	add	sp, #24
    5a2a:	bd80      	pop	{r7, pc}
    5a2c:	000058f5 	.word	0x000058f5
    5a30:	00005909 	.word	0x00005909

00005a34 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    5a34:	b580      	push	{r7, lr}
    5a36:	b084      	sub	sp, #16
    5a38:	af00      	add	r7, sp, #0
    5a3a:	60f8      	str	r0, [r7, #12]
    5a3c:	60b9      	str	r1, [r7, #8]
    5a3e:	1dfb      	adds	r3, r7, #7
    5a40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5a42:	1dfb      	adds	r3, r7, #7
    5a44:	781b      	ldrb	r3, [r3, #0]
    5a46:	68fa      	ldr	r2, [r7, #12]
    5a48:	3302      	adds	r3, #2
    5a4a:	009b      	lsls	r3, r3, #2
    5a4c:	18d3      	adds	r3, r2, r3
    5a4e:	3304      	adds	r3, #4
    5a50:	68ba      	ldr	r2, [r7, #8]
    5a52:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    5a54:	68fb      	ldr	r3, [r7, #12]
    5a56:	2230      	movs	r2, #48	; 0x30
    5a58:	5c9b      	ldrb	r3, [r3, r2]
    5a5a:	b25a      	sxtb	r2, r3
    5a5c:	1dfb      	adds	r3, r7, #7
    5a5e:	781b      	ldrb	r3, [r3, #0]
    5a60:	2101      	movs	r1, #1
    5a62:	4099      	lsls	r1, r3
    5a64:	000b      	movs	r3, r1
    5a66:	b25b      	sxtb	r3, r3
    5a68:	4313      	orrs	r3, r2
    5a6a:	b25b      	sxtb	r3, r3
    5a6c:	b2d9      	uxtb	r1, r3
    5a6e:	68fb      	ldr	r3, [r7, #12]
    5a70:	2230      	movs	r2, #48	; 0x30
    5a72:	5499      	strb	r1, [r3, r2]
}
    5a74:	46c0      	nop			; (mov r8, r8)
    5a76:	46bd      	mov	sp, r7
    5a78:	b004      	add	sp, #16
    5a7a:	bd80      	pop	{r7, pc}

00005a7c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5a7c:	b580      	push	{r7, lr}
    5a7e:	b084      	sub	sp, #16
    5a80:	af00      	add	r7, sp, #0
    5a82:	60f8      	str	r0, [r7, #12]
    5a84:	60b9      	str	r1, [r7, #8]
    5a86:	1dbb      	adds	r3, r7, #6
    5a88:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5a8a:	1dbb      	adds	r3, r7, #6
    5a8c:	881b      	ldrh	r3, [r3, #0]
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d101      	bne.n	5a96 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5a92:	2317      	movs	r3, #23
    5a94:	e010      	b.n	5ab8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5a96:	68fb      	ldr	r3, [r7, #12]
    5a98:	79db      	ldrb	r3, [r3, #7]
    5a9a:	2201      	movs	r2, #1
    5a9c:	4053      	eors	r3, r2
    5a9e:	b2db      	uxtb	r3, r3
    5aa0:	2b00      	cmp	r3, #0
    5aa2:	d001      	beq.n	5aa8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5aa4:	231c      	movs	r3, #28
    5aa6:	e007      	b.n	5ab8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5aa8:	1dbb      	adds	r3, r7, #6
    5aaa:	881a      	ldrh	r2, [r3, #0]
    5aac:	68b9      	ldr	r1, [r7, #8]
    5aae:	68fb      	ldr	r3, [r7, #12]
    5ab0:	0018      	movs	r0, r3
    5ab2:	4b03      	ldr	r3, [pc, #12]	; (5ac0 <usart_write_buffer_job+0x44>)
    5ab4:	4798      	blx	r3
    5ab6:	0003      	movs	r3, r0
}
    5ab8:	0018      	movs	r0, r3
    5aba:	46bd      	mov	sp, r7
    5abc:	b004      	add	sp, #16
    5abe:	bd80      	pop	{r7, pc}
    5ac0:	00005961 	.word	0x00005961

00005ac4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5ac4:	b580      	push	{r7, lr}
    5ac6:	b084      	sub	sp, #16
    5ac8:	af00      	add	r7, sp, #0
    5aca:	60f8      	str	r0, [r7, #12]
    5acc:	60b9      	str	r1, [r7, #8]
    5ace:	1dbb      	adds	r3, r7, #6
    5ad0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    5ad2:	1dbb      	adds	r3, r7, #6
    5ad4:	881b      	ldrh	r3, [r3, #0]
    5ad6:	2b00      	cmp	r3, #0
    5ad8:	d101      	bne.n	5ade <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5ada:	2317      	movs	r3, #23
    5adc:	e010      	b.n	5b00 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5ade:	68fb      	ldr	r3, [r7, #12]
    5ae0:	799b      	ldrb	r3, [r3, #6]
    5ae2:	2201      	movs	r2, #1
    5ae4:	4053      	eors	r3, r2
    5ae6:	b2db      	uxtb	r3, r3
    5ae8:	2b00      	cmp	r3, #0
    5aea:	d001      	beq.n	5af0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5aec:	231c      	movs	r3, #28
    5aee:	e007      	b.n	5b00 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5af0:	1dbb      	adds	r3, r7, #6
    5af2:	881a      	ldrh	r2, [r3, #0]
    5af4:	68b9      	ldr	r1, [r7, #8]
    5af6:	68fb      	ldr	r3, [r7, #12]
    5af8:	0018      	movs	r0, r3
    5afa:	4b03      	ldr	r3, [pc, #12]	; (5b08 <usart_read_buffer_job+0x44>)
    5afc:	4798      	blx	r3
    5afe:	0003      	movs	r3, r0
}
    5b00:	0018      	movs	r0, r3
    5b02:	46bd      	mov	sp, r7
    5b04:	b004      	add	sp, #16
    5b06:	bd80      	pop	{r7, pc}
    5b08:	000059bd 	.word	0x000059bd

00005b0c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5b0c:	b580      	push	{r7, lr}
    5b0e:	b084      	sub	sp, #16
    5b10:	af00      	add	r7, sp, #0
    5b12:	6078      	str	r0, [r7, #4]
    5b14:	000a      	movs	r2, r1
    5b16:	1cfb      	adds	r3, r7, #3
    5b18:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    5b1a:	1cfb      	adds	r3, r7, #3
    5b1c:	781b      	ldrb	r3, [r3, #0]
    5b1e:	2b00      	cmp	r3, #0
    5b20:	d002      	beq.n	5b28 <usart_get_job_status+0x1c>
    5b22:	2b01      	cmp	r3, #1
    5b24:	d007      	beq.n	5b36 <usart_get_job_status+0x2a>
    5b26:	e00d      	b.n	5b44 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    5b28:	230f      	movs	r3, #15
    5b2a:	18fb      	adds	r3, r7, r3
    5b2c:	687a      	ldr	r2, [r7, #4]
    5b2e:	2132      	movs	r1, #50	; 0x32
    5b30:	5c52      	ldrb	r2, [r2, r1]
    5b32:	701a      	strb	r2, [r3, #0]
			break;
    5b34:	e00b      	b.n	5b4e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    5b36:	230f      	movs	r3, #15
    5b38:	18fb      	adds	r3, r7, r3
    5b3a:	687a      	ldr	r2, [r7, #4]
    5b3c:	2133      	movs	r1, #51	; 0x33
    5b3e:	5c52      	ldrb	r2, [r2, r1]
    5b40:	701a      	strb	r2, [r3, #0]
			break;
    5b42:	e004      	b.n	5b4e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    5b44:	230f      	movs	r3, #15
    5b46:	18fb      	adds	r3, r7, r3
    5b48:	2217      	movs	r2, #23
    5b4a:	701a      	strb	r2, [r3, #0]
			break;
    5b4c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    5b4e:	230f      	movs	r3, #15
    5b50:	18fb      	adds	r3, r7, r3
    5b52:	781b      	ldrb	r3, [r3, #0]
}
    5b54:	0018      	movs	r0, r3
    5b56:	46bd      	mov	sp, r7
    5b58:	b004      	add	sp, #16
    5b5a:	bd80      	pop	{r7, pc}

00005b5c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5b5c:	b580      	push	{r7, lr}
    5b5e:	b088      	sub	sp, #32
    5b60:	af00      	add	r7, sp, #0
    5b62:	0002      	movs	r2, r0
    5b64:	1dfb      	adds	r3, r7, #7
    5b66:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    5b68:	1dfb      	adds	r3, r7, #7
    5b6a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    5b6c:	4ba3      	ldr	r3, [pc, #652]	; (5dfc <_usart_interrupt_handler+0x2a0>)
    5b6e:	0092      	lsls	r2, r2, #2
    5b70:	58d3      	ldr	r3, [r2, r3]
    5b72:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5b74:	69bb      	ldr	r3, [r7, #24]
    5b76:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    5b78:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    5b7a:	69bb      	ldr	r3, [r7, #24]
    5b7c:	0018      	movs	r0, r3
    5b7e:	4ba0      	ldr	r3, [pc, #640]	; (5e00 <_usart_interrupt_handler+0x2a4>)
    5b80:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5b82:	697b      	ldr	r3, [r7, #20]
    5b84:	7e1b      	ldrb	r3, [r3, #24]
    5b86:	b2da      	uxtb	r2, r3
    5b88:	2312      	movs	r3, #18
    5b8a:	18fb      	adds	r3, r7, r3
    5b8c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5b8e:	697b      	ldr	r3, [r7, #20]
    5b90:	7d9b      	ldrb	r3, [r3, #22]
    5b92:	b2db      	uxtb	r3, r3
    5b94:	b29a      	uxth	r2, r3
    5b96:	2312      	movs	r3, #18
    5b98:	18fb      	adds	r3, r7, r3
    5b9a:	2112      	movs	r1, #18
    5b9c:	1879      	adds	r1, r7, r1
    5b9e:	8809      	ldrh	r1, [r1, #0]
    5ba0:	400a      	ands	r2, r1
    5ba2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    5ba4:	69bb      	ldr	r3, [r7, #24]
    5ba6:	2230      	movs	r2, #48	; 0x30
    5ba8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    5baa:	69ba      	ldr	r2, [r7, #24]
    5bac:	2131      	movs	r1, #49	; 0x31
    5bae:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5bb0:	4013      	ands	r3, r2
    5bb2:	b2da      	uxtb	r2, r3
    5bb4:	2310      	movs	r3, #16
    5bb6:	18fb      	adds	r3, r7, r3
    5bb8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5bba:	2312      	movs	r3, #18
    5bbc:	18fb      	adds	r3, r7, r3
    5bbe:	881b      	ldrh	r3, [r3, #0]
    5bc0:	2201      	movs	r2, #1
    5bc2:	4013      	ands	r3, r2
    5bc4:	d044      	beq.n	5c50 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    5bc6:	69bb      	ldr	r3, [r7, #24]
    5bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5bca:	b29b      	uxth	r3, r3
    5bcc:	2b00      	cmp	r3, #0
    5bce:	d03c      	beq.n	5c4a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5bd0:	69bb      	ldr	r3, [r7, #24]
    5bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bd4:	781b      	ldrb	r3, [r3, #0]
    5bd6:	b2da      	uxtb	r2, r3
    5bd8:	231c      	movs	r3, #28
    5bda:	18fb      	adds	r3, r7, r3
    5bdc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5bde:	69bb      	ldr	r3, [r7, #24]
    5be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5be2:	1c5a      	adds	r2, r3, #1
    5be4:	69bb      	ldr	r3, [r7, #24]
    5be6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5be8:	69bb      	ldr	r3, [r7, #24]
    5bea:	795b      	ldrb	r3, [r3, #5]
    5bec:	2b01      	cmp	r3, #1
    5bee:	d113      	bne.n	5c18 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5bf0:	69bb      	ldr	r3, [r7, #24]
    5bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5bf4:	781b      	ldrb	r3, [r3, #0]
    5bf6:	b2db      	uxtb	r3, r3
    5bf8:	021b      	lsls	r3, r3, #8
    5bfa:	b21a      	sxth	r2, r3
    5bfc:	231c      	movs	r3, #28
    5bfe:	18fb      	adds	r3, r7, r3
    5c00:	2100      	movs	r1, #0
    5c02:	5e5b      	ldrsh	r3, [r3, r1]
    5c04:	4313      	orrs	r3, r2
    5c06:	b21a      	sxth	r2, r3
    5c08:	231c      	movs	r3, #28
    5c0a:	18fb      	adds	r3, r7, r3
    5c0c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5c0e:	69bb      	ldr	r3, [r7, #24]
    5c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c12:	1c5a      	adds	r2, r3, #1
    5c14:	69bb      	ldr	r3, [r7, #24]
    5c16:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5c18:	231c      	movs	r3, #28
    5c1a:	18fb      	adds	r3, r7, r3
    5c1c:	881b      	ldrh	r3, [r3, #0]
    5c1e:	05db      	lsls	r3, r3, #23
    5c20:	0ddb      	lsrs	r3, r3, #23
    5c22:	b29a      	uxth	r2, r3
    5c24:	697b      	ldr	r3, [r7, #20]
    5c26:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5c28:	69bb      	ldr	r3, [r7, #24]
    5c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5c2c:	b29b      	uxth	r3, r3
    5c2e:	3b01      	subs	r3, #1
    5c30:	b29b      	uxth	r3, r3
    5c32:	69ba      	ldr	r2, [r7, #24]
    5c34:	1c19      	adds	r1, r3, #0
    5c36:	85d1      	strh	r1, [r2, #46]	; 0x2e
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d109      	bne.n	5c50 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5c3c:	697b      	ldr	r3, [r7, #20]
    5c3e:	2201      	movs	r2, #1
    5c40:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5c42:	697b      	ldr	r3, [r7, #20]
    5c44:	2202      	movs	r2, #2
    5c46:	759a      	strb	r2, [r3, #22]
    5c48:	e002      	b.n	5c50 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5c4a:	697b      	ldr	r3, [r7, #20]
    5c4c:	2201      	movs	r2, #1
    5c4e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5c50:	2312      	movs	r3, #18
    5c52:	18fb      	adds	r3, r7, r3
    5c54:	881b      	ldrh	r3, [r3, #0]
    5c56:	2202      	movs	r2, #2
    5c58:	4013      	ands	r3, r2
    5c5a:	d011      	beq.n	5c80 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    5c5c:	697b      	ldr	r3, [r7, #20]
    5c5e:	2202      	movs	r2, #2
    5c60:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    5c62:	69bb      	ldr	r3, [r7, #24]
    5c64:	2233      	movs	r2, #51	; 0x33
    5c66:	2100      	movs	r1, #0
    5c68:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5c6a:	2310      	movs	r3, #16
    5c6c:	18fb      	adds	r3, r7, r3
    5c6e:	881b      	ldrh	r3, [r3, #0]
    5c70:	2201      	movs	r2, #1
    5c72:	4013      	ands	r3, r2
    5c74:	d004      	beq.n	5c80 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5c76:	69bb      	ldr	r3, [r7, #24]
    5c78:	68db      	ldr	r3, [r3, #12]
    5c7a:	69ba      	ldr	r2, [r7, #24]
    5c7c:	0010      	movs	r0, r2
    5c7e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5c80:	2312      	movs	r3, #18
    5c82:	18fb      	adds	r3, r7, r3
    5c84:	881b      	ldrh	r3, [r3, #0]
    5c86:	2204      	movs	r2, #4
    5c88:	4013      	ands	r3, r2
    5c8a:	d100      	bne.n	5c8e <_usart_interrupt_handler+0x132>
    5c8c:	e0bd      	b.n	5e0a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5c8e:	69bb      	ldr	r3, [r7, #24]
    5c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5c92:	b29b      	uxth	r3, r3
    5c94:	2b00      	cmp	r3, #0
    5c96:	d100      	bne.n	5c9a <_usart_interrupt_handler+0x13e>
    5c98:	e0b4      	b.n	5e04 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5c9a:	697b      	ldr	r3, [r7, #20]
    5c9c:	8b5b      	ldrh	r3, [r3, #26]
    5c9e:	b29b      	uxth	r3, r3
    5ca0:	b2da      	uxtb	r2, r3
    5ca2:	231f      	movs	r3, #31
    5ca4:	18fb      	adds	r3, r7, r3
    5ca6:	213f      	movs	r1, #63	; 0x3f
    5ca8:	400a      	ands	r2, r1
    5caa:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5cac:	231f      	movs	r3, #31
    5cae:	18fb      	adds	r3, r7, r3
    5cb0:	781b      	ldrb	r3, [r3, #0]
    5cb2:	2208      	movs	r2, #8
    5cb4:	4013      	ands	r3, r2
    5cb6:	d007      	beq.n	5cc8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5cb8:	231f      	movs	r3, #31
    5cba:	18fb      	adds	r3, r7, r3
    5cbc:	221f      	movs	r2, #31
    5cbe:	18ba      	adds	r2, r7, r2
    5cc0:	7812      	ldrb	r2, [r2, #0]
    5cc2:	2108      	movs	r1, #8
    5cc4:	438a      	bics	r2, r1
    5cc6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5cc8:	231f      	movs	r3, #31
    5cca:	18fb      	adds	r3, r7, r3
    5ccc:	781b      	ldrb	r3, [r3, #0]
    5cce:	2b00      	cmp	r3, #0
    5cd0:	d050      	beq.n	5d74 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5cd2:	231f      	movs	r3, #31
    5cd4:	18fb      	adds	r3, r7, r3
    5cd6:	781b      	ldrb	r3, [r3, #0]
    5cd8:	2202      	movs	r2, #2
    5cda:	4013      	ands	r3, r2
    5cdc:	d007      	beq.n	5cee <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5cde:	69bb      	ldr	r3, [r7, #24]
    5ce0:	2232      	movs	r2, #50	; 0x32
    5ce2:	211a      	movs	r1, #26
    5ce4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5ce6:	697b      	ldr	r3, [r7, #20]
    5ce8:	2202      	movs	r2, #2
    5cea:	835a      	strh	r2, [r3, #26]
    5cec:	e036      	b.n	5d5c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5cee:	231f      	movs	r3, #31
    5cf0:	18fb      	adds	r3, r7, r3
    5cf2:	781b      	ldrb	r3, [r3, #0]
    5cf4:	2204      	movs	r2, #4
    5cf6:	4013      	ands	r3, r2
    5cf8:	d007      	beq.n	5d0a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5cfa:	69bb      	ldr	r3, [r7, #24]
    5cfc:	2232      	movs	r2, #50	; 0x32
    5cfe:	211e      	movs	r1, #30
    5d00:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5d02:	697b      	ldr	r3, [r7, #20]
    5d04:	2204      	movs	r2, #4
    5d06:	835a      	strh	r2, [r3, #26]
    5d08:	e028      	b.n	5d5c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5d0a:	231f      	movs	r3, #31
    5d0c:	18fb      	adds	r3, r7, r3
    5d0e:	781b      	ldrb	r3, [r3, #0]
    5d10:	2201      	movs	r2, #1
    5d12:	4013      	ands	r3, r2
    5d14:	d007      	beq.n	5d26 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    5d16:	69bb      	ldr	r3, [r7, #24]
    5d18:	2232      	movs	r2, #50	; 0x32
    5d1a:	2113      	movs	r1, #19
    5d1c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5d1e:	697b      	ldr	r3, [r7, #20]
    5d20:	2201      	movs	r2, #1
    5d22:	835a      	strh	r2, [r3, #26]
    5d24:	e01a      	b.n	5d5c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5d26:	231f      	movs	r3, #31
    5d28:	18fb      	adds	r3, r7, r3
    5d2a:	781b      	ldrb	r3, [r3, #0]
    5d2c:	2210      	movs	r2, #16
    5d2e:	4013      	ands	r3, r2
    5d30:	d007      	beq.n	5d42 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    5d32:	69bb      	ldr	r3, [r7, #24]
    5d34:	2232      	movs	r2, #50	; 0x32
    5d36:	2142      	movs	r1, #66	; 0x42
    5d38:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5d3a:	697b      	ldr	r3, [r7, #20]
    5d3c:	2210      	movs	r2, #16
    5d3e:	835a      	strh	r2, [r3, #26]
    5d40:	e00c      	b.n	5d5c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5d42:	231f      	movs	r3, #31
    5d44:	18fb      	adds	r3, r7, r3
    5d46:	781b      	ldrb	r3, [r3, #0]
    5d48:	2220      	movs	r2, #32
    5d4a:	4013      	ands	r3, r2
    5d4c:	d006      	beq.n	5d5c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5d4e:	69bb      	ldr	r3, [r7, #24]
    5d50:	2232      	movs	r2, #50	; 0x32
    5d52:	2141      	movs	r1, #65	; 0x41
    5d54:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5d56:	697b      	ldr	r3, [r7, #20]
    5d58:	2220      	movs	r2, #32
    5d5a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    5d5c:	2310      	movs	r3, #16
    5d5e:	18fb      	adds	r3, r7, r3
    5d60:	881b      	ldrh	r3, [r3, #0]
    5d62:	2204      	movs	r2, #4
    5d64:	4013      	ands	r3, r2
				if (callback_status
    5d66:	d050      	beq.n	5e0a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    5d68:	69bb      	ldr	r3, [r7, #24]
    5d6a:	695b      	ldr	r3, [r3, #20]
    5d6c:	69ba      	ldr	r2, [r7, #24]
    5d6e:	0010      	movs	r0, r2
    5d70:	4798      	blx	r3
    5d72:	e04a      	b.n	5e0a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5d74:	697b      	ldr	r3, [r7, #20]
    5d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5d78:	b29a      	uxth	r2, r3
    5d7a:	230e      	movs	r3, #14
    5d7c:	18fb      	adds	r3, r7, r3
    5d7e:	05d2      	lsls	r2, r2, #23
    5d80:	0dd2      	lsrs	r2, r2, #23
    5d82:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5d84:	69bb      	ldr	r3, [r7, #24]
    5d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d88:	220e      	movs	r2, #14
    5d8a:	18ba      	adds	r2, r7, r2
    5d8c:	8812      	ldrh	r2, [r2, #0]
    5d8e:	b2d2      	uxtb	r2, r2
    5d90:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    5d92:	69bb      	ldr	r3, [r7, #24]
    5d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5d96:	1c5a      	adds	r2, r3, #1
    5d98:	69bb      	ldr	r3, [r7, #24]
    5d9a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5d9c:	69bb      	ldr	r3, [r7, #24]
    5d9e:	795b      	ldrb	r3, [r3, #5]
    5da0:	2b01      	cmp	r3, #1
    5da2:	d10d      	bne.n	5dc0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5da4:	69bb      	ldr	r3, [r7, #24]
    5da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5da8:	220e      	movs	r2, #14
    5daa:	18ba      	adds	r2, r7, r2
    5dac:	8812      	ldrh	r2, [r2, #0]
    5dae:	0a12      	lsrs	r2, r2, #8
    5db0:	b292      	uxth	r2, r2
    5db2:	b2d2      	uxtb	r2, r2
    5db4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    5db6:	69bb      	ldr	r3, [r7, #24]
    5db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5dba:	1c5a      	adds	r2, r3, #1
    5dbc:	69bb      	ldr	r3, [r7, #24]
    5dbe:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5dc0:	69bb      	ldr	r3, [r7, #24]
    5dc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5dc4:	b29b      	uxth	r3, r3
    5dc6:	3b01      	subs	r3, #1
    5dc8:	b29b      	uxth	r3, r3
    5dca:	69ba      	ldr	r2, [r7, #24]
    5dcc:	1c19      	adds	r1, r3, #0
    5dce:	8591      	strh	r1, [r2, #44]	; 0x2c
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	d11a      	bne.n	5e0a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5dd4:	697b      	ldr	r3, [r7, #20]
    5dd6:	2204      	movs	r2, #4
    5dd8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5dda:	69bb      	ldr	r3, [r7, #24]
    5ddc:	2232      	movs	r2, #50	; 0x32
    5dde:	2100      	movs	r1, #0
    5de0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    5de2:	2310      	movs	r3, #16
    5de4:	18fb      	adds	r3, r7, r3
    5de6:	881b      	ldrh	r3, [r3, #0]
    5de8:	2202      	movs	r2, #2
    5dea:	4013      	ands	r3, r2
					if (callback_status
    5dec:	d00d      	beq.n	5e0a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5dee:	69bb      	ldr	r3, [r7, #24]
    5df0:	691b      	ldr	r3, [r3, #16]
    5df2:	69ba      	ldr	r2, [r7, #24]
    5df4:	0010      	movs	r0, r2
    5df6:	4798      	blx	r3
    5df8:	e007      	b.n	5e0a <_usart_interrupt_handler+0x2ae>
    5dfa:	46c0      	nop			; (mov r8, r8)
    5dfc:	20000a08 	.word	0x20000a08
    5e00:	0000593d 	.word	0x0000593d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5e04:	697b      	ldr	r3, [r7, #20]
    5e06:	2204      	movs	r2, #4
    5e08:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5e0a:	2312      	movs	r3, #18
    5e0c:	18fb      	adds	r3, r7, r3
    5e0e:	881b      	ldrh	r3, [r3, #0]
    5e10:	2210      	movs	r2, #16
    5e12:	4013      	ands	r3, r2
    5e14:	d010      	beq.n	5e38 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5e16:	697b      	ldr	r3, [r7, #20]
    5e18:	2210      	movs	r2, #16
    5e1a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5e1c:	697b      	ldr	r3, [r7, #20]
    5e1e:	2210      	movs	r2, #16
    5e20:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5e22:	2310      	movs	r3, #16
    5e24:	18fb      	adds	r3, r7, r3
    5e26:	881b      	ldrh	r3, [r3, #0]
    5e28:	2210      	movs	r2, #16
    5e2a:	4013      	ands	r3, r2
    5e2c:	d004      	beq.n	5e38 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5e2e:	69bb      	ldr	r3, [r7, #24]
    5e30:	69db      	ldr	r3, [r3, #28]
    5e32:	69ba      	ldr	r2, [r7, #24]
    5e34:	0010      	movs	r0, r2
    5e36:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5e38:	2312      	movs	r3, #18
    5e3a:	18fb      	adds	r3, r7, r3
    5e3c:	881b      	ldrh	r3, [r3, #0]
    5e3e:	2220      	movs	r2, #32
    5e40:	4013      	ands	r3, r2
    5e42:	d010      	beq.n	5e66 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    5e44:	697b      	ldr	r3, [r7, #20]
    5e46:	2220      	movs	r2, #32
    5e48:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5e4a:	697b      	ldr	r3, [r7, #20]
    5e4c:	2220      	movs	r2, #32
    5e4e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5e50:	2310      	movs	r3, #16
    5e52:	18fb      	adds	r3, r7, r3
    5e54:	881b      	ldrh	r3, [r3, #0]
    5e56:	2208      	movs	r2, #8
    5e58:	4013      	ands	r3, r2
    5e5a:	d004      	beq.n	5e66 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5e5c:	69bb      	ldr	r3, [r7, #24]
    5e5e:	699b      	ldr	r3, [r3, #24]
    5e60:	69ba      	ldr	r2, [r7, #24]
    5e62:	0010      	movs	r0, r2
    5e64:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5e66:	2312      	movs	r3, #18
    5e68:	18fb      	adds	r3, r7, r3
    5e6a:	881b      	ldrh	r3, [r3, #0]
    5e6c:	2208      	movs	r2, #8
    5e6e:	4013      	ands	r3, r2
    5e70:	d010      	beq.n	5e94 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5e72:	697b      	ldr	r3, [r7, #20]
    5e74:	2208      	movs	r2, #8
    5e76:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5e78:	697b      	ldr	r3, [r7, #20]
    5e7a:	2208      	movs	r2, #8
    5e7c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5e7e:	2310      	movs	r3, #16
    5e80:	18fb      	adds	r3, r7, r3
    5e82:	881b      	ldrh	r3, [r3, #0]
    5e84:	2220      	movs	r2, #32
    5e86:	4013      	ands	r3, r2
    5e88:	d004      	beq.n	5e94 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5e8a:	69bb      	ldr	r3, [r7, #24]
    5e8c:	6a1b      	ldr	r3, [r3, #32]
    5e8e:	69ba      	ldr	r2, [r7, #24]
    5e90:	0010      	movs	r0, r2
    5e92:	4798      	blx	r3
		}
	}
#endif
}
    5e94:	46c0      	nop			; (mov r8, r8)
    5e96:	46bd      	mov	sp, r7
    5e98:	b008      	add	sp, #32
    5e9a:	bd80      	pop	{r7, pc}

00005e9c <system_gclk_gen_get_config_defaults>:
{
    5e9c:	b580      	push	{r7, lr}
    5e9e:	b082      	sub	sp, #8
    5ea0:	af00      	add	r7, sp, #0
    5ea2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    5ea4:	687b      	ldr	r3, [r7, #4]
    5ea6:	2201      	movs	r2, #1
    5ea8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	2200      	movs	r2, #0
    5eae:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5eb0:	687b      	ldr	r3, [r7, #4]
    5eb2:	2206      	movs	r2, #6
    5eb4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    5eb6:	687b      	ldr	r3, [r7, #4]
    5eb8:	2200      	movs	r2, #0
    5eba:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5ebc:	687b      	ldr	r3, [r7, #4]
    5ebe:	2200      	movs	r2, #0
    5ec0:	725a      	strb	r2, [r3, #9]
}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	46bd      	mov	sp, r7
    5ec6:	b002      	add	sp, #8
    5ec8:	bd80      	pop	{r7, pc}

00005eca <system_gclk_chan_get_config_defaults>:
{
    5eca:	b580      	push	{r7, lr}
    5ecc:	b082      	sub	sp, #8
    5ece:	af00      	add	r7, sp, #0
    5ed0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5ed2:	687b      	ldr	r3, [r7, #4]
    5ed4:	2200      	movs	r2, #0
    5ed6:	701a      	strb	r2, [r3, #0]
}
    5ed8:	46c0      	nop			; (mov r8, r8)
    5eda:	46bd      	mov	sp, r7
    5edc:	b002      	add	sp, #8
    5ede:	bd80      	pop	{r7, pc}

00005ee0 <system_clock_source_xosc32k_get_config_defaults>:
{
    5ee0:	b580      	push	{r7, lr}
    5ee2:	b082      	sub	sp, #8
    5ee4:	af00      	add	r7, sp, #0
    5ee6:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5ee8:	687b      	ldr	r3, [r7, #4]
    5eea:	2200      	movs	r2, #0
    5eec:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	2204      	movs	r2, #4
    5ef2:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	2200      	movs	r2, #0
    5ef8:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	2280      	movs	r2, #128	; 0x80
    5efe:	0212      	lsls	r2, r2, #8
    5f00:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	2200      	movs	r2, #0
    5f06:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	2201      	movs	r2, #1
    5f0c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5f0e:	687b      	ldr	r3, [r7, #4]
    5f10:	2200      	movs	r2, #0
    5f12:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5f14:	687b      	ldr	r3, [r7, #4]
    5f16:	2201      	movs	r2, #1
    5f18:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5f1a:	687b      	ldr	r3, [r7, #4]
    5f1c:	2200      	movs	r2, #0
    5f1e:	739a      	strb	r2, [r3, #14]
}
    5f20:	46c0      	nop			; (mov r8, r8)
    5f22:	46bd      	mov	sp, r7
    5f24:	b002      	add	sp, #8
    5f26:	bd80      	pop	{r7, pc}

00005f28 <system_clock_source_osc8m_get_config_defaults>:
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	b082      	sub	sp, #8
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	2203      	movs	r2, #3
    5f34:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	2200      	movs	r2, #0
    5f3a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5f3c:	687b      	ldr	r3, [r7, #4]
    5f3e:	2201      	movs	r2, #1
    5f40:	709a      	strb	r2, [r3, #2]
}
    5f42:	46c0      	nop			; (mov r8, r8)
    5f44:	46bd      	mov	sp, r7
    5f46:	b002      	add	sp, #8
    5f48:	bd80      	pop	{r7, pc}

00005f4a <system_clock_source_dfll_get_config_defaults>:
{
    5f4a:	b580      	push	{r7, lr}
    5f4c:	b082      	sub	sp, #8
    5f4e:	af00      	add	r7, sp, #0
    5f50:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5f52:	687b      	ldr	r3, [r7, #4]
    5f54:	2200      	movs	r2, #0
    5f56:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5f58:	687b      	ldr	r3, [r7, #4]
    5f5a:	2200      	movs	r2, #0
    5f5c:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5f5e:	687b      	ldr	r3, [r7, #4]
    5f60:	2200      	movs	r2, #0
    5f62:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5f64:	687b      	ldr	r3, [r7, #4]
    5f66:	2200      	movs	r2, #0
    5f68:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5f6a:	687b      	ldr	r3, [r7, #4]
    5f6c:	2200      	movs	r2, #0
    5f6e:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5f70:	687b      	ldr	r3, [r7, #4]
    5f72:	2201      	movs	r2, #1
    5f74:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5f76:	687b      	ldr	r3, [r7, #4]
    5f78:	2207      	movs	r2, #7
    5f7a:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5f7c:	687b      	ldr	r3, [r7, #4]
    5f7e:	223f      	movs	r2, #63	; 0x3f
    5f80:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    5f82:	687b      	ldr	r3, [r7, #4]
    5f84:	2201      	movs	r2, #1
    5f86:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5f88:	687b      	ldr	r3, [r7, #4]
    5f8a:	2201      	movs	r2, #1
    5f8c:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5f8e:	687b      	ldr	r3, [r7, #4]
    5f90:	2206      	movs	r2, #6
    5f92:	821a      	strh	r2, [r3, #16]
}
    5f94:	46c0      	nop			; (mov r8, r8)
    5f96:	46bd      	mov	sp, r7
    5f98:	b002      	add	sp, #8
    5f9a:	bd80      	pop	{r7, pc}

00005f9c <system_cpu_clock_set_divider>:
{
    5f9c:	b580      	push	{r7, lr}
    5f9e:	b082      	sub	sp, #8
    5fa0:	af00      	add	r7, sp, #0
    5fa2:	0002      	movs	r2, r0
    5fa4:	1dfb      	adds	r3, r7, #7
    5fa6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5fa8:	4a03      	ldr	r2, [pc, #12]	; (5fb8 <system_cpu_clock_set_divider+0x1c>)
    5faa:	1dfb      	adds	r3, r7, #7
    5fac:	781b      	ldrb	r3, [r3, #0]
    5fae:	7213      	strb	r3, [r2, #8]
}
    5fb0:	46c0      	nop			; (mov r8, r8)
    5fb2:	46bd      	mov	sp, r7
    5fb4:	b002      	add	sp, #8
    5fb6:	bd80      	pop	{r7, pc}
    5fb8:	40000400 	.word	0x40000400

00005fbc <system_apb_clock_set_divider>:
{
    5fbc:	b580      	push	{r7, lr}
    5fbe:	b082      	sub	sp, #8
    5fc0:	af00      	add	r7, sp, #0
    5fc2:	0002      	movs	r2, r0
    5fc4:	1dfb      	adds	r3, r7, #7
    5fc6:	701a      	strb	r2, [r3, #0]
    5fc8:	1dbb      	adds	r3, r7, #6
    5fca:	1c0a      	adds	r2, r1, #0
    5fcc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5fce:	1dfb      	adds	r3, r7, #7
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	2b01      	cmp	r3, #1
    5fd4:	d008      	beq.n	5fe8 <system_apb_clock_set_divider+0x2c>
    5fd6:	2b02      	cmp	r3, #2
    5fd8:	d00b      	beq.n	5ff2 <system_apb_clock_set_divider+0x36>
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d10e      	bne.n	5ffc <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5fde:	4a0b      	ldr	r2, [pc, #44]	; (600c <system_apb_clock_set_divider+0x50>)
    5fe0:	1dbb      	adds	r3, r7, #6
    5fe2:	781b      	ldrb	r3, [r3, #0]
    5fe4:	7253      	strb	r3, [r2, #9]
			break;
    5fe6:	e00b      	b.n	6000 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5fe8:	4a08      	ldr	r2, [pc, #32]	; (600c <system_apb_clock_set_divider+0x50>)
    5fea:	1dbb      	adds	r3, r7, #6
    5fec:	781b      	ldrb	r3, [r3, #0]
    5fee:	7293      	strb	r3, [r2, #10]
			break;
    5ff0:	e006      	b.n	6000 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5ff2:	4a06      	ldr	r2, [pc, #24]	; (600c <system_apb_clock_set_divider+0x50>)
    5ff4:	1dbb      	adds	r3, r7, #6
    5ff6:	781b      	ldrb	r3, [r3, #0]
    5ff8:	72d3      	strb	r3, [r2, #11]
			break;
    5ffa:	e001      	b.n	6000 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5ffc:	2317      	movs	r3, #23
    5ffe:	e000      	b.n	6002 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    6000:	2300      	movs	r3, #0
}
    6002:	0018      	movs	r0, r3
    6004:	46bd      	mov	sp, r7
    6006:	b002      	add	sp, #8
    6008:	bd80      	pop	{r7, pc}
    600a:	46c0      	nop			; (mov r8, r8)
    600c:	40000400 	.word	0x40000400

00006010 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    6010:	b580      	push	{r7, lr}
    6012:	b082      	sub	sp, #8
    6014:	af00      	add	r7, sp, #0
    6016:	0002      	movs	r2, r0
    6018:	1dfb      	adds	r3, r7, #7
    601a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    601c:	4a08      	ldr	r2, [pc, #32]	; (6040 <system_flash_set_waitstates+0x30>)
    601e:	1dfb      	adds	r3, r7, #7
    6020:	781b      	ldrb	r3, [r3, #0]
    6022:	210f      	movs	r1, #15
    6024:	400b      	ands	r3, r1
    6026:	b2d9      	uxtb	r1, r3
    6028:	6853      	ldr	r3, [r2, #4]
    602a:	200f      	movs	r0, #15
    602c:	4001      	ands	r1, r0
    602e:	0049      	lsls	r1, r1, #1
    6030:	201e      	movs	r0, #30
    6032:	4383      	bics	r3, r0
    6034:	430b      	orrs	r3, r1
    6036:	6053      	str	r3, [r2, #4]
}
    6038:	46c0      	nop			; (mov r8, r8)
    603a:	46bd      	mov	sp, r7
    603c:	b002      	add	sp, #8
    603e:	bd80      	pop	{r7, pc}
    6040:	41004000 	.word	0x41004000

00006044 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    6044:	b580      	push	{r7, lr}
    6046:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    6048:	46c0      	nop			; (mov r8, r8)
    604a:	4b04      	ldr	r3, [pc, #16]	; (605c <_system_dfll_wait_for_sync+0x18>)
    604c:	68db      	ldr	r3, [r3, #12]
    604e:	2210      	movs	r2, #16
    6050:	4013      	ands	r3, r2
    6052:	d0fa      	beq.n	604a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    6054:	46c0      	nop			; (mov r8, r8)
    6056:	46bd      	mov	sp, r7
    6058:	bd80      	pop	{r7, pc}
    605a:	46c0      	nop			; (mov r8, r8)
    605c:	40000800 	.word	0x40000800

00006060 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    6060:	b580      	push	{r7, lr}
    6062:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    6064:	4b0c      	ldr	r3, [pc, #48]	; (6098 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6066:	2202      	movs	r2, #2
    6068:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    606a:	4b0c      	ldr	r3, [pc, #48]	; (609c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    606c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    606e:	4a0a      	ldr	r2, [pc, #40]	; (6098 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6070:	4b0b      	ldr	r3, [pc, #44]	; (60a0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    6072:	689b      	ldr	r3, [r3, #8]
    6074:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6076:	4a08      	ldr	r2, [pc, #32]	; (6098 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6078:	4b09      	ldr	r3, [pc, #36]	; (60a0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    607a:	685b      	ldr	r3, [r3, #4]
    607c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    607e:	4b06      	ldr	r3, [pc, #24]	; (6098 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    6080:	2200      	movs	r2, #0
    6082:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    6084:	4b05      	ldr	r3, [pc, #20]	; (609c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    6086:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6088:	4a03      	ldr	r2, [pc, #12]	; (6098 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    608a:	4b05      	ldr	r3, [pc, #20]	; (60a0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    608c:	681b      	ldr	r3, [r3, #0]
    608e:	b29b      	uxth	r3, r3
    6090:	8493      	strh	r3, [r2, #36]	; 0x24
}
    6092:	46c0      	nop			; (mov r8, r8)
    6094:	46bd      	mov	sp, r7
    6096:	bd80      	pop	{r7, pc}
    6098:	40000800 	.word	0x40000800
    609c:	00006045 	.word	0x00006045
    60a0:	20000174 	.word	0x20000174

000060a4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    60a4:	b580      	push	{r7, lr}
    60a6:	b082      	sub	sp, #8
    60a8:	af00      	add	r7, sp, #0
    60aa:	0002      	movs	r2, r0
    60ac:	1dfb      	adds	r3, r7, #7
    60ae:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    60b0:	1dfb      	adds	r3, r7, #7
    60b2:	781b      	ldrb	r3, [r3, #0]
    60b4:	2b08      	cmp	r3, #8
    60b6:	d841      	bhi.n	613c <system_clock_source_get_hz+0x98>
    60b8:	009a      	lsls	r2, r3, #2
    60ba:	4b23      	ldr	r3, [pc, #140]	; (6148 <system_clock_source_get_hz+0xa4>)
    60bc:	18d3      	adds	r3, r2, r3
    60be:	681b      	ldr	r3, [r3, #0]
    60c0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    60c2:	4b22      	ldr	r3, [pc, #136]	; (614c <system_clock_source_get_hz+0xa8>)
    60c4:	691b      	ldr	r3, [r3, #16]
    60c6:	e03a      	b.n	613e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    60c8:	4b21      	ldr	r3, [pc, #132]	; (6150 <system_clock_source_get_hz+0xac>)
    60ca:	6a1b      	ldr	r3, [r3, #32]
    60cc:	059b      	lsls	r3, r3, #22
    60ce:	0f9b      	lsrs	r3, r3, #30
    60d0:	b2db      	uxtb	r3, r3
    60d2:	001a      	movs	r2, r3
    60d4:	4b1f      	ldr	r3, [pc, #124]	; (6154 <system_clock_source_get_hz+0xb0>)
    60d6:	40d3      	lsrs	r3, r2
    60d8:	e031      	b.n	613e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    60da:	2380      	movs	r3, #128	; 0x80
    60dc:	021b      	lsls	r3, r3, #8
    60de:	e02e      	b.n	613e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    60e0:	2380      	movs	r3, #128	; 0x80
    60e2:	021b      	lsls	r3, r3, #8
    60e4:	e02b      	b.n	613e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    60e6:	4b19      	ldr	r3, [pc, #100]	; (614c <system_clock_source_get_hz+0xa8>)
    60e8:	695b      	ldr	r3, [r3, #20]
    60ea:	e028      	b.n	613e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    60ec:	4b17      	ldr	r3, [pc, #92]	; (614c <system_clock_source_get_hz+0xa8>)
    60ee:	681b      	ldr	r3, [r3, #0]
    60f0:	2202      	movs	r2, #2
    60f2:	4013      	ands	r3, r2
    60f4:	d101      	bne.n	60fa <system_clock_source_get_hz+0x56>
			return 0;
    60f6:	2300      	movs	r3, #0
    60f8:	e021      	b.n	613e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    60fa:	4b17      	ldr	r3, [pc, #92]	; (6158 <system_clock_source_get_hz+0xb4>)
    60fc:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    60fe:	4b13      	ldr	r3, [pc, #76]	; (614c <system_clock_source_get_hz+0xa8>)
    6100:	681b      	ldr	r3, [r3, #0]
    6102:	2224      	movs	r2, #36	; 0x24
    6104:	4013      	ands	r3, r2
    6106:	2b04      	cmp	r3, #4
    6108:	d109      	bne.n	611e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    610a:	2000      	movs	r0, #0
    610c:	4b13      	ldr	r3, [pc, #76]	; (615c <system_clock_source_get_hz+0xb8>)
    610e:	4798      	blx	r3
    6110:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    6112:	4b0e      	ldr	r3, [pc, #56]	; (614c <system_clock_source_get_hz+0xa8>)
    6114:	689b      	ldr	r3, [r3, #8]
    6116:	041b      	lsls	r3, r3, #16
    6118:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    611a:	4353      	muls	r3, r2
    611c:	e00f      	b.n	613e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    611e:	4b10      	ldr	r3, [pc, #64]	; (6160 <system_clock_source_get_hz+0xbc>)
    6120:	e00d      	b.n	613e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    6122:	4a0b      	ldr	r2, [pc, #44]	; (6150 <system_clock_source_get_hz+0xac>)
    6124:	2350      	movs	r3, #80	; 0x50
    6126:	5cd3      	ldrb	r3, [r2, r3]
    6128:	b2db      	uxtb	r3, r3
    612a:	001a      	movs	r2, r3
    612c:	2304      	movs	r3, #4
    612e:	4013      	ands	r3, r2
    6130:	d101      	bne.n	6136 <system_clock_source_get_hz+0x92>
			return 0;
    6132:	2300      	movs	r3, #0
    6134:	e003      	b.n	613e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    6136:	4b05      	ldr	r3, [pc, #20]	; (614c <system_clock_source_get_hz+0xa8>)
    6138:	68db      	ldr	r3, [r3, #12]
    613a:	e000      	b.n	613e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    613c:	2300      	movs	r3, #0
	}
}
    613e:	0018      	movs	r0, r3
    6140:	46bd      	mov	sp, r7
    6142:	b002      	add	sp, #8
    6144:	bd80      	pop	{r7, pc}
    6146:	46c0      	nop			; (mov r8, r8)
    6148:	0000c50c 	.word	0x0000c50c
    614c:	20000174 	.word	0x20000174
    6150:	40000800 	.word	0x40000800
    6154:	007a1200 	.word	0x007a1200
    6158:	00006045 	.word	0x00006045
    615c:	00006bf5 	.word	0x00006bf5
    6160:	02dc6c00 	.word	0x02dc6c00

00006164 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    6164:	b580      	push	{r7, lr}
    6166:	b084      	sub	sp, #16
    6168:	af00      	add	r7, sp, #0
    616a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    616c:	4b1a      	ldr	r3, [pc, #104]	; (61d8 <system_clock_source_osc8m_set_config+0x74>)
    616e:	6a1b      	ldr	r3, [r3, #32]
    6170:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    6172:	687b      	ldr	r3, [r7, #4]
    6174:	781b      	ldrb	r3, [r3, #0]
    6176:	1c1a      	adds	r2, r3, #0
    6178:	2303      	movs	r3, #3
    617a:	4013      	ands	r3, r2
    617c:	b2da      	uxtb	r2, r3
    617e:	230d      	movs	r3, #13
    6180:	18fb      	adds	r3, r7, r3
    6182:	2103      	movs	r1, #3
    6184:	400a      	ands	r2, r1
    6186:	0010      	movs	r0, r2
    6188:	781a      	ldrb	r2, [r3, #0]
    618a:	2103      	movs	r1, #3
    618c:	438a      	bics	r2, r1
    618e:	1c11      	adds	r1, r2, #0
    6190:	1c02      	adds	r2, r0, #0
    6192:	430a      	orrs	r2, r1
    6194:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    6196:	687b      	ldr	r3, [r7, #4]
    6198:	789a      	ldrb	r2, [r3, #2]
    619a:	230c      	movs	r3, #12
    619c:	18fb      	adds	r3, r7, r3
    619e:	01d0      	lsls	r0, r2, #7
    61a0:	781a      	ldrb	r2, [r3, #0]
    61a2:	217f      	movs	r1, #127	; 0x7f
    61a4:	400a      	ands	r2, r1
    61a6:	1c11      	adds	r1, r2, #0
    61a8:	1c02      	adds	r2, r0, #0
    61aa:	430a      	orrs	r2, r1
    61ac:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    61ae:	687b      	ldr	r3, [r7, #4]
    61b0:	785a      	ldrb	r2, [r3, #1]
    61b2:	230c      	movs	r3, #12
    61b4:	18fb      	adds	r3, r7, r3
    61b6:	2101      	movs	r1, #1
    61b8:	400a      	ands	r2, r1
    61ba:	0190      	lsls	r0, r2, #6
    61bc:	781a      	ldrb	r2, [r3, #0]
    61be:	2140      	movs	r1, #64	; 0x40
    61c0:	438a      	bics	r2, r1
    61c2:	1c11      	adds	r1, r2, #0
    61c4:	1c02      	adds	r2, r0, #0
    61c6:	430a      	orrs	r2, r1
    61c8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    61ca:	4b03      	ldr	r3, [pc, #12]	; (61d8 <system_clock_source_osc8m_set_config+0x74>)
    61cc:	68fa      	ldr	r2, [r7, #12]
    61ce:	621a      	str	r2, [r3, #32]
}
    61d0:	46c0      	nop			; (mov r8, r8)
    61d2:	46bd      	mov	sp, r7
    61d4:	b004      	add	sp, #16
    61d6:	bd80      	pop	{r7, pc}
    61d8:	40000800 	.word	0x40000800

000061dc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    61dc:	b580      	push	{r7, lr}
    61de:	b084      	sub	sp, #16
    61e0:	af00      	add	r7, sp, #0
    61e2:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    61e4:	4a43      	ldr	r2, [pc, #268]	; (62f4 <system_clock_source_xosc32k_set_config+0x118>)
    61e6:	230c      	movs	r3, #12
    61e8:	18fb      	adds	r3, r7, r3
    61ea:	8a92      	ldrh	r2, [r2, #20]
    61ec:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    61ee:	687b      	ldr	r3, [r7, #4]
    61f0:	785b      	ldrb	r3, [r3, #1]
    61f2:	1c1a      	adds	r2, r3, #0
    61f4:	2307      	movs	r3, #7
    61f6:	4013      	ands	r3, r2
    61f8:	b2da      	uxtb	r2, r3
    61fa:	230c      	movs	r3, #12
    61fc:	18fb      	adds	r3, r7, r3
    61fe:	2107      	movs	r1, #7
    6200:	400a      	ands	r2, r1
    6202:	0010      	movs	r0, r2
    6204:	785a      	ldrb	r2, [r3, #1]
    6206:	2107      	movs	r1, #7
    6208:	438a      	bics	r2, r1
    620a:	1c11      	adds	r1, r2, #0
    620c:	1c02      	adds	r2, r0, #0
    620e:	430a      	orrs	r2, r1
    6210:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6212:	687b      	ldr	r3, [r7, #4]
    6214:	781b      	ldrb	r3, [r3, #0]
    6216:	2b00      	cmp	r3, #0
    6218:	d106      	bne.n	6228 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    621a:	230c      	movs	r3, #12
    621c:	18fb      	adds	r3, r7, r3
    621e:	781a      	ldrb	r2, [r3, #0]
    6220:	2104      	movs	r1, #4
    6222:	430a      	orrs	r2, r1
    6224:	701a      	strb	r2, [r3, #0]
    6226:	e005      	b.n	6234 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    6228:	230c      	movs	r3, #12
    622a:	18fb      	adds	r3, r7, r3
    622c:	781a      	ldrb	r2, [r3, #0]
    622e:	2104      	movs	r1, #4
    6230:	438a      	bics	r2, r1
    6232:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    6234:	687b      	ldr	r3, [r7, #4]
    6236:	789a      	ldrb	r2, [r3, #2]
    6238:	230c      	movs	r3, #12
    623a:	18fb      	adds	r3, r7, r3
    623c:	2101      	movs	r1, #1
    623e:	400a      	ands	r2, r1
    6240:	0150      	lsls	r0, r2, #5
    6242:	781a      	ldrb	r2, [r3, #0]
    6244:	2120      	movs	r1, #32
    6246:	438a      	bics	r2, r1
    6248:	1c11      	adds	r1, r2, #0
    624a:	1c02      	adds	r2, r0, #0
    624c:	430a      	orrs	r2, r1
    624e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	78da      	ldrb	r2, [r3, #3]
    6254:	230c      	movs	r3, #12
    6256:	18fb      	adds	r3, r7, r3
    6258:	2101      	movs	r1, #1
    625a:	400a      	ands	r2, r1
    625c:	0110      	lsls	r0, r2, #4
    625e:	781a      	ldrb	r2, [r3, #0]
    6260:	2110      	movs	r1, #16
    6262:	438a      	bics	r2, r1
    6264:	1c11      	adds	r1, r2, #0
    6266:	1c02      	adds	r2, r0, #0
    6268:	430a      	orrs	r2, r1
    626a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    626c:	687b      	ldr	r3, [r7, #4]
    626e:	791a      	ldrb	r2, [r3, #4]
    6270:	230c      	movs	r3, #12
    6272:	18fb      	adds	r3, r7, r3
    6274:	2101      	movs	r1, #1
    6276:	400a      	ands	r2, r1
    6278:	00d0      	lsls	r0, r2, #3
    627a:	781a      	ldrb	r2, [r3, #0]
    627c:	2108      	movs	r1, #8
    627e:	438a      	bics	r2, r1
    6280:	1c11      	adds	r1, r2, #0
    6282:	1c02      	adds	r2, r0, #0
    6284:	430a      	orrs	r2, r1
    6286:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    6288:	687b      	ldr	r3, [r7, #4]
    628a:	7b5a      	ldrb	r2, [r3, #13]
    628c:	230c      	movs	r3, #12
    628e:	18fb      	adds	r3, r7, r3
    6290:	01d0      	lsls	r0, r2, #7
    6292:	781a      	ldrb	r2, [r3, #0]
    6294:	217f      	movs	r1, #127	; 0x7f
    6296:	400a      	ands	r2, r1
    6298:	1c11      	adds	r1, r2, #0
    629a:	1c02      	adds	r2, r0, #0
    629c:	430a      	orrs	r2, r1
    629e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    62a0:	687b      	ldr	r3, [r7, #4]
    62a2:	7b1a      	ldrb	r2, [r3, #12]
    62a4:	230c      	movs	r3, #12
    62a6:	18fb      	adds	r3, r7, r3
    62a8:	2101      	movs	r1, #1
    62aa:	400a      	ands	r2, r1
    62ac:	0190      	lsls	r0, r2, #6
    62ae:	781a      	ldrb	r2, [r3, #0]
    62b0:	2140      	movs	r1, #64	; 0x40
    62b2:	438a      	bics	r2, r1
    62b4:	1c11      	adds	r1, r2, #0
    62b6:	1c02      	adds	r2, r0, #0
    62b8:	430a      	orrs	r2, r1
    62ba:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	7b9a      	ldrb	r2, [r3, #14]
    62c0:	230c      	movs	r3, #12
    62c2:	18fb      	adds	r3, r7, r3
    62c4:	2101      	movs	r1, #1
    62c6:	400a      	ands	r2, r1
    62c8:	0110      	lsls	r0, r2, #4
    62ca:	785a      	ldrb	r2, [r3, #1]
    62cc:	2110      	movs	r1, #16
    62ce:	438a      	bics	r2, r1
    62d0:	1c11      	adds	r1, r2, #0
    62d2:	1c02      	adds	r2, r0, #0
    62d4:	430a      	orrs	r2, r1
    62d6:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    62d8:	687b      	ldr	r3, [r7, #4]
    62da:	689a      	ldr	r2, [r3, #8]
    62dc:	4b06      	ldr	r3, [pc, #24]	; (62f8 <system_clock_source_xosc32k_set_config+0x11c>)
    62de:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    62e0:	4a04      	ldr	r2, [pc, #16]	; (62f4 <system_clock_source_xosc32k_set_config+0x118>)
    62e2:	230c      	movs	r3, #12
    62e4:	18fb      	adds	r3, r7, r3
    62e6:	881b      	ldrh	r3, [r3, #0]
    62e8:	8293      	strh	r3, [r2, #20]
}
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	46bd      	mov	sp, r7
    62ee:	b004      	add	sp, #16
    62f0:	bd80      	pop	{r7, pc}
    62f2:	46c0      	nop			; (mov r8, r8)
    62f4:	40000800 	.word	0x40000800
    62f8:	20000174 	.word	0x20000174

000062fc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    62fc:	b580      	push	{r7, lr}
    62fe:	b082      	sub	sp, #8
    6300:	af00      	add	r7, sp, #0
    6302:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6304:	687b      	ldr	r3, [r7, #4]
    6306:	7a1b      	ldrb	r3, [r3, #8]
    6308:	029b      	lsls	r3, r3, #10
    630a:	041b      	lsls	r3, r3, #16
    630c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    630e:	687b      	ldr	r3, [r7, #4]
    6310:	895b      	ldrh	r3, [r3, #10]
    6312:	059b      	lsls	r3, r3, #22
    6314:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6316:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    6318:	4b2a      	ldr	r3, [pc, #168]	; (63c4 <system_clock_source_dfll_set_config+0xc8>)
    631a:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    631c:	687b      	ldr	r3, [r7, #4]
    631e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    6320:	687b      	ldr	r3, [r7, #4]
    6322:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    6324:	4313      	orrs	r3, r2
    6326:	b2db      	uxtb	r3, r3
    6328:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    632a:	687b      	ldr	r3, [r7, #4]
    632c:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    632e:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    6330:	687a      	ldr	r2, [r7, #4]
    6332:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    6334:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    6336:	687b      	ldr	r3, [r7, #4]
    6338:	785b      	ldrb	r3, [r3, #1]
    633a:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    633c:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    633e:	4b21      	ldr	r3, [pc, #132]	; (63c4 <system_clock_source_dfll_set_config+0xc8>)
    6340:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6342:	687b      	ldr	r3, [r7, #4]
    6344:	781b      	ldrb	r3, [r3, #0]
    6346:	2b04      	cmp	r3, #4
    6348:	d116      	bne.n	6378 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    634a:	687b      	ldr	r3, [r7, #4]
    634c:	7b1b      	ldrb	r3, [r3, #12]
    634e:	069b      	lsls	r3, r3, #26
    6350:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6352:	687b      	ldr	r3, [r7, #4]
    6354:	89db      	ldrh	r3, [r3, #14]
    6356:	041b      	lsls	r3, r3, #16
    6358:	0019      	movs	r1, r3
    635a:	4b1b      	ldr	r3, [pc, #108]	; (63c8 <system_clock_source_dfll_set_config+0xcc>)
    635c:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    635e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6360:	687a      	ldr	r2, [r7, #4]
    6362:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6364:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    6366:	4b17      	ldr	r3, [pc, #92]	; (63c4 <system_clock_source_dfll_set_config+0xc8>)
    6368:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    636a:	4b16      	ldr	r3, [pc, #88]	; (63c4 <system_clock_source_dfll_set_config+0xc8>)
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	687a      	ldr	r2, [r7, #4]
    6370:	7812      	ldrb	r2, [r2, #0]
    6372:	431a      	orrs	r2, r3
    6374:	4b13      	ldr	r3, [pc, #76]	; (63c4 <system_clock_source_dfll_set_config+0xc8>)
    6376:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6378:	687b      	ldr	r3, [r7, #4]
    637a:	781b      	ldrb	r3, [r3, #0]
    637c:	2b20      	cmp	r3, #32
    637e:	d11c      	bne.n	63ba <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6380:	687b      	ldr	r3, [r7, #4]
    6382:	7b1b      	ldrb	r3, [r3, #12]
    6384:	069b      	lsls	r3, r3, #26
    6386:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6388:	687b      	ldr	r3, [r7, #4]
    638a:	89db      	ldrh	r3, [r3, #14]
    638c:	041b      	lsls	r3, r3, #16
    638e:	0019      	movs	r1, r3
    6390:	4b0d      	ldr	r3, [pc, #52]	; (63c8 <system_clock_source_dfll_set_config+0xcc>)
    6392:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6394:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    6396:	687a      	ldr	r2, [r7, #4]
    6398:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    639a:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    639c:	4b09      	ldr	r3, [pc, #36]	; (63c4 <system_clock_source_dfll_set_config+0xc8>)
    639e:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    63a0:	4b08      	ldr	r3, [pc, #32]	; (63c4 <system_clock_source_dfll_set_config+0xc8>)
    63a2:	681b      	ldr	r3, [r3, #0]
    63a4:	687a      	ldr	r2, [r7, #4]
    63a6:	7812      	ldrb	r2, [r2, #0]
    63a8:	2104      	movs	r1, #4
    63aa:	430a      	orrs	r2, r1
    63ac:	b2d2      	uxtb	r2, r2
    63ae:	4313      	orrs	r3, r2
    63b0:	2280      	movs	r2, #128	; 0x80
    63b2:	00d2      	lsls	r2, r2, #3
    63b4:	431a      	orrs	r2, r3
    63b6:	4b03      	ldr	r3, [pc, #12]	; (63c4 <system_clock_source_dfll_set_config+0xc8>)
    63b8:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    63ba:	46c0      	nop			; (mov r8, r8)
    63bc:	46bd      	mov	sp, r7
    63be:	b002      	add	sp, #8
    63c0:	bd80      	pop	{r7, pc}
    63c2:	46c0      	nop			; (mov r8, r8)
    63c4:	20000174 	.word	0x20000174
    63c8:	03ff0000 	.word	0x03ff0000

000063cc <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    63cc:	b580      	push	{r7, lr}
    63ce:	b082      	sub	sp, #8
    63d0:	af00      	add	r7, sp, #0
    63d2:	0002      	movs	r2, r0
    63d4:	1dfb      	adds	r3, r7, #7
    63d6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    63d8:	1dfb      	adds	r3, r7, #7
    63da:	781b      	ldrb	r3, [r3, #0]
    63dc:	2b08      	cmp	r3, #8
    63de:	d83b      	bhi.n	6458 <system_clock_source_enable+0x8c>
    63e0:	009a      	lsls	r2, r3, #2
    63e2:	4b21      	ldr	r3, [pc, #132]	; (6468 <system_clock_source_enable+0x9c>)
    63e4:	18d3      	adds	r3, r2, r3
    63e6:	681b      	ldr	r3, [r3, #0]
    63e8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    63ea:	4b20      	ldr	r3, [pc, #128]	; (646c <system_clock_source_enable+0xa0>)
    63ec:	4a1f      	ldr	r2, [pc, #124]	; (646c <system_clock_source_enable+0xa0>)
    63ee:	6a12      	ldr	r2, [r2, #32]
    63f0:	2102      	movs	r1, #2
    63f2:	430a      	orrs	r2, r1
    63f4:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    63f6:	2300      	movs	r3, #0
    63f8:	e031      	b.n	645e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    63fa:	4b1c      	ldr	r3, [pc, #112]	; (646c <system_clock_source_enable+0xa0>)
    63fc:	4a1b      	ldr	r2, [pc, #108]	; (646c <system_clock_source_enable+0xa0>)
    63fe:	6992      	ldr	r2, [r2, #24]
    6400:	2102      	movs	r1, #2
    6402:	430a      	orrs	r2, r1
    6404:	619a      	str	r2, [r3, #24]
		break;
    6406:	e029      	b.n	645c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6408:	4a18      	ldr	r2, [pc, #96]	; (646c <system_clock_source_enable+0xa0>)
    640a:	4b18      	ldr	r3, [pc, #96]	; (646c <system_clock_source_enable+0xa0>)
    640c:	8a1b      	ldrh	r3, [r3, #16]
    640e:	b29b      	uxth	r3, r3
    6410:	2102      	movs	r1, #2
    6412:	430b      	orrs	r3, r1
    6414:	b29b      	uxth	r3, r3
    6416:	8213      	strh	r3, [r2, #16]
		break;
    6418:	e020      	b.n	645c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    641a:	4a14      	ldr	r2, [pc, #80]	; (646c <system_clock_source_enable+0xa0>)
    641c:	4b13      	ldr	r3, [pc, #76]	; (646c <system_clock_source_enable+0xa0>)
    641e:	8a9b      	ldrh	r3, [r3, #20]
    6420:	b29b      	uxth	r3, r3
    6422:	2102      	movs	r1, #2
    6424:	430b      	orrs	r3, r1
    6426:	b29b      	uxth	r3, r3
    6428:	8293      	strh	r3, [r2, #20]
		break;
    642a:	e017      	b.n	645c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    642c:	4b10      	ldr	r3, [pc, #64]	; (6470 <system_clock_source_enable+0xa4>)
    642e:	681b      	ldr	r3, [r3, #0]
    6430:	2202      	movs	r2, #2
    6432:	431a      	orrs	r2, r3
    6434:	4b0e      	ldr	r3, [pc, #56]	; (6470 <system_clock_source_enable+0xa4>)
    6436:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    6438:	4b0e      	ldr	r3, [pc, #56]	; (6474 <system_clock_source_enable+0xa8>)
    643a:	4798      	blx	r3
		break;
    643c:	e00e      	b.n	645c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    643e:	4a0b      	ldr	r2, [pc, #44]	; (646c <system_clock_source_enable+0xa0>)
    6440:	490a      	ldr	r1, [pc, #40]	; (646c <system_clock_source_enable+0xa0>)
    6442:	2344      	movs	r3, #68	; 0x44
    6444:	5ccb      	ldrb	r3, [r1, r3]
    6446:	b2db      	uxtb	r3, r3
    6448:	2102      	movs	r1, #2
    644a:	430b      	orrs	r3, r1
    644c:	b2d9      	uxtb	r1, r3
    644e:	2344      	movs	r3, #68	; 0x44
    6450:	54d1      	strb	r1, [r2, r3]
		break;
    6452:	e003      	b.n	645c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6454:	2300      	movs	r3, #0
    6456:	e002      	b.n	645e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6458:	2317      	movs	r3, #23
    645a:	e000      	b.n	645e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    645c:	2300      	movs	r3, #0
}
    645e:	0018      	movs	r0, r3
    6460:	46bd      	mov	sp, r7
    6462:	b002      	add	sp, #8
    6464:	bd80      	pop	{r7, pc}
    6466:	46c0      	nop			; (mov r8, r8)
    6468:	0000c530 	.word	0x0000c530
    646c:	40000800 	.word	0x40000800
    6470:	20000174 	.word	0x20000174
    6474:	00006061 	.word	0x00006061

00006478 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6478:	b580      	push	{r7, lr}
    647a:	b084      	sub	sp, #16
    647c:	af00      	add	r7, sp, #0
    647e:	0002      	movs	r2, r0
    6480:	1dfb      	adds	r3, r7, #7
    6482:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    6484:	2300      	movs	r3, #0
    6486:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6488:	1dfb      	adds	r3, r7, #7
    648a:	781b      	ldrb	r3, [r3, #0]
    648c:	2b08      	cmp	r3, #8
    648e:	d821      	bhi.n	64d4 <system_clock_source_is_ready+0x5c>
    6490:	009a      	lsls	r2, r3, #2
    6492:	4b18      	ldr	r3, [pc, #96]	; (64f4 <system_clock_source_is_ready+0x7c>)
    6494:	18d3      	adds	r3, r2, r3
    6496:	681b      	ldr	r3, [r3, #0]
    6498:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    649a:	2308      	movs	r3, #8
    649c:	60fb      	str	r3, [r7, #12]
		break;
    649e:	e01b      	b.n	64d8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    64a0:	2304      	movs	r3, #4
    64a2:	60fb      	str	r3, [r7, #12]
		break;
    64a4:	e018      	b.n	64d8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    64a6:	2301      	movs	r3, #1
    64a8:	60fb      	str	r3, [r7, #12]
		break;
    64aa:	e015      	b.n	64d8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    64ac:	2302      	movs	r3, #2
    64ae:	60fb      	str	r3, [r7, #12]
		break;
    64b0:	e012      	b.n	64d8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    64b2:	23d0      	movs	r3, #208	; 0xd0
    64b4:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    64b6:	e00f      	b.n	64d8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    64b8:	4a0f      	ldr	r2, [pc, #60]	; (64f8 <system_clock_source_is_ready+0x80>)
    64ba:	2350      	movs	r3, #80	; 0x50
    64bc:	5cd3      	ldrb	r3, [r2, r3]
    64be:	b2db      	uxtb	r3, r3
    64c0:	001a      	movs	r2, r3
    64c2:	2303      	movs	r3, #3
    64c4:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    64c6:	3b03      	subs	r3, #3
    64c8:	425a      	negs	r2, r3
    64ca:	4153      	adcs	r3, r2
    64cc:	b2db      	uxtb	r3, r3
    64ce:	e00c      	b.n	64ea <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    64d0:	2301      	movs	r3, #1
    64d2:	e00a      	b.n	64ea <system_clock_source_is_ready+0x72>

	default:
		return false;
    64d4:	2300      	movs	r3, #0
    64d6:	e008      	b.n	64ea <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    64d8:	4b07      	ldr	r3, [pc, #28]	; (64f8 <system_clock_source_is_ready+0x80>)
    64da:	68db      	ldr	r3, [r3, #12]
    64dc:	68fa      	ldr	r2, [r7, #12]
    64de:	401a      	ands	r2, r3
    64e0:	68fb      	ldr	r3, [r7, #12]
    64e2:	1ad3      	subs	r3, r2, r3
    64e4:	425a      	negs	r2, r3
    64e6:	4153      	adcs	r3, r2
    64e8:	b2db      	uxtb	r3, r3
}
    64ea:	0018      	movs	r0, r3
    64ec:	46bd      	mov	sp, r7
    64ee:	b004      	add	sp, #16
    64f0:	bd80      	pop	{r7, pc}
    64f2:	46c0      	nop			; (mov r8, r8)
    64f4:	0000c554 	.word	0x0000c554
    64f8:	40000800 	.word	0x40000800

000064fc <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    64fc:	b580      	push	{r7, lr}
    64fe:	b082      	sub	sp, #8
    6500:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    6502:	003b      	movs	r3, r7
    6504:	2202      	movs	r2, #2
    6506:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6508:	2300      	movs	r3, #0
    650a:	607b      	str	r3, [r7, #4]
    650c:	e009      	b.n	6522 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    650e:	687b      	ldr	r3, [r7, #4]
    6510:	b2db      	uxtb	r3, r3
    6512:	003a      	movs	r2, r7
    6514:	0011      	movs	r1, r2
    6516:	0018      	movs	r0, r3
    6518:	4b05      	ldr	r3, [pc, #20]	; (6530 <_switch_peripheral_gclk+0x34>)
    651a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    651c:	687b      	ldr	r3, [r7, #4]
    651e:	3301      	adds	r3, #1
    6520:	607b      	str	r3, [r7, #4]
    6522:	687b      	ldr	r3, [r7, #4]
    6524:	2b24      	cmp	r3, #36	; 0x24
    6526:	d9f2      	bls.n	650e <_switch_peripheral_gclk+0x12>
	}
}
    6528:	46c0      	nop			; (mov r8, r8)
    652a:	46bd      	mov	sp, r7
    652c:	b002      	add	sp, #8
    652e:	bd80      	pop	{r7, pc}
    6530:	00006ad1 	.word	0x00006ad1

00006534 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6534:	b580      	push	{r7, lr}
    6536:	b0aa      	sub	sp, #168	; 0xa8
    6538:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    653a:	4b85      	ldr	r3, [pc, #532]	; (6750 <system_clock_init+0x21c>)
    653c:	22c2      	movs	r2, #194	; 0xc2
    653e:	00d2      	lsls	r2, r2, #3
    6540:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    6542:	2002      	movs	r0, #2
    6544:	4b83      	ldr	r3, [pc, #524]	; (6754 <system_clock_init+0x220>)
    6546:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6548:	4b83      	ldr	r3, [pc, #524]	; (6758 <system_clock_init+0x224>)
    654a:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    654c:	2394      	movs	r3, #148	; 0x94
    654e:	18fb      	adds	r3, r7, r3
    6550:	0018      	movs	r0, r3
    6552:	4b82      	ldr	r3, [pc, #520]	; (675c <system_clock_init+0x228>)
    6554:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    6556:	2394      	movs	r3, #148	; 0x94
    6558:	18fb      	adds	r3, r7, r3
    655a:	2280      	movs	r2, #128	; 0x80
    655c:	0212      	lsls	r2, r2, #8
    655e:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    6560:	2394      	movs	r3, #148	; 0x94
    6562:	18fb      	adds	r3, r7, r3
    6564:	2200      	movs	r2, #0
    6566:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6568:	2394      	movs	r3, #148	; 0x94
    656a:	18fb      	adds	r3, r7, r3
    656c:	2206      	movs	r2, #6
    656e:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    6570:	2394      	movs	r3, #148	; 0x94
    6572:	18fb      	adds	r3, r7, r3
    6574:	2200      	movs	r2, #0
    6576:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    6578:	2394      	movs	r3, #148	; 0x94
    657a:	18fb      	adds	r3, r7, r3
    657c:	2200      	movs	r2, #0
    657e:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    6580:	2394      	movs	r3, #148	; 0x94
    6582:	18fb      	adds	r3, r7, r3
    6584:	2201      	movs	r2, #1
    6586:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6588:	2394      	movs	r3, #148	; 0x94
    658a:	18fb      	adds	r3, r7, r3
    658c:	2200      	movs	r2, #0
    658e:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    6590:	2394      	movs	r3, #148	; 0x94
    6592:	18fb      	adds	r3, r7, r3
    6594:	2201      	movs	r2, #1
    6596:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6598:	2394      	movs	r3, #148	; 0x94
    659a:	18fb      	adds	r3, r7, r3
    659c:	0018      	movs	r0, r3
    659e:	4b70      	ldr	r3, [pc, #448]	; (6760 <system_clock_init+0x22c>)
    65a0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    65a2:	2005      	movs	r0, #5
    65a4:	4b6f      	ldr	r3, [pc, #444]	; (6764 <system_clock_init+0x230>)
    65a6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    65a8:	46c0      	nop			; (mov r8, r8)
    65aa:	2005      	movs	r0, #5
    65ac:	4b6e      	ldr	r3, [pc, #440]	; (6768 <system_clock_init+0x234>)
    65ae:	4798      	blx	r3
    65b0:	0003      	movs	r3, r0
    65b2:	001a      	movs	r2, r3
    65b4:	2301      	movs	r3, #1
    65b6:	4053      	eors	r3, r2
    65b8:	b2db      	uxtb	r3, r3
    65ba:	2b00      	cmp	r3, #0
    65bc:	d1f5      	bne.n	65aa <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    65be:	2380      	movs	r3, #128	; 0x80
    65c0:	18fb      	adds	r3, r7, r3
    65c2:	0018      	movs	r0, r3
    65c4:	4b69      	ldr	r3, [pc, #420]	; (676c <system_clock_init+0x238>)
    65c6:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    65c8:	2380      	movs	r3, #128	; 0x80
    65ca:	18fb      	adds	r3, r7, r3
    65cc:	2204      	movs	r2, #4
    65ce:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    65d0:	2380      	movs	r3, #128	; 0x80
    65d2:	18fb      	adds	r3, r7, r3
    65d4:	2200      	movs	r2, #0
    65d6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    65d8:	4b65      	ldr	r3, [pc, #404]	; (6770 <system_clock_init+0x23c>)
    65da:	681b      	ldr	r3, [r3, #0]
    65dc:	0e9b      	lsrs	r3, r3, #26
    65de:	22a4      	movs	r2, #164	; 0xa4
    65e0:	18ba      	adds	r2, r7, r2
    65e2:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    65e4:	23a4      	movs	r3, #164	; 0xa4
    65e6:	18fb      	adds	r3, r7, r3
    65e8:	681b      	ldr	r3, [r3, #0]
    65ea:	2b3f      	cmp	r3, #63	; 0x3f
    65ec:	d103      	bne.n	65f6 <system_clock_init+0xc2>
		coarse = 0x1f;
    65ee:	231f      	movs	r3, #31
    65f0:	22a4      	movs	r2, #164	; 0xa4
    65f2:	18ba      	adds	r2, r7, r2
    65f4:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    65f6:	23a4      	movs	r3, #164	; 0xa4
    65f8:	18fb      	adds	r3, r7, r3
    65fa:	681b      	ldr	r3, [r3, #0]
    65fc:	b2da      	uxtb	r2, r3
    65fe:	2380      	movs	r3, #128	; 0x80
    6600:	18fb      	adds	r3, r7, r3
    6602:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6604:	2380      	movs	r3, #128	; 0x80
    6606:	18fb      	adds	r3, r7, r3
    6608:	2200      	movs	r2, #0
    660a:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    660c:	2380      	movs	r3, #128	; 0x80
    660e:	18fb      	adds	r3, r7, r3
    6610:	2200      	movs	r2, #0
    6612:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6614:	2380      	movs	r3, #128	; 0x80
    6616:	18fb      	adds	r3, r7, r3
    6618:	2200      	movs	r2, #0
    661a:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    661c:	2380      	movs	r3, #128	; 0x80
    661e:	18fb      	adds	r3, r7, r3
    6620:	2200      	movs	r2, #0
    6622:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6624:	2380      	movs	r3, #128	; 0x80
    6626:	18fb      	adds	r3, r7, r3
    6628:	22b7      	movs	r2, #183	; 0xb7
    662a:	00d2      	lsls	r2, r2, #3
    662c:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    662e:	2380      	movs	r3, #128	; 0x80
    6630:	18fb      	adds	r3, r7, r3
    6632:	2203      	movs	r2, #3
    6634:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6636:	2380      	movs	r3, #128	; 0x80
    6638:	18fb      	adds	r3, r7, r3
    663a:	221f      	movs	r2, #31
    663c:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    663e:	2380      	movs	r3, #128	; 0x80
    6640:	18fb      	adds	r3, r7, r3
    6642:	0018      	movs	r0, r3
    6644:	4b4b      	ldr	r3, [pc, #300]	; (6774 <system_clock_init+0x240>)
    6646:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    6648:	237c      	movs	r3, #124	; 0x7c
    664a:	18fb      	adds	r3, r7, r3
    664c:	0018      	movs	r0, r3
    664e:	4b4a      	ldr	r3, [pc, #296]	; (6778 <system_clock_init+0x244>)
    6650:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6652:	237c      	movs	r3, #124	; 0x7c
    6654:	18fb      	adds	r3, r7, r3
    6656:	2200      	movs	r2, #0
    6658:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    665a:	237c      	movs	r3, #124	; 0x7c
    665c:	18fb      	adds	r3, r7, r3
    665e:	2201      	movs	r2, #1
    6660:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6662:	237c      	movs	r3, #124	; 0x7c
    6664:	18fb      	adds	r3, r7, r3
    6666:	2201      	movs	r2, #1
    6668:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    666a:	237c      	movs	r3, #124	; 0x7c
    666c:	18fb      	adds	r3, r7, r3
    666e:	0018      	movs	r0, r3
    6670:	4b42      	ldr	r3, [pc, #264]	; (677c <system_clock_init+0x248>)
    6672:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6674:	2006      	movs	r0, #6
    6676:	4b3b      	ldr	r3, [pc, #236]	; (6764 <system_clock_init+0x230>)
    6678:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    667a:	4b41      	ldr	r3, [pc, #260]	; (6780 <system_clock_init+0x24c>)
    667c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    667e:	2364      	movs	r3, #100	; 0x64
    6680:	18fb      	adds	r3, r7, r3
    6682:	0018      	movs	r0, r3
    6684:	4b3f      	ldr	r3, [pc, #252]	; (6784 <system_clock_init+0x250>)
    6686:	4798      	blx	r3
    6688:	2364      	movs	r3, #100	; 0x64
    668a:	18fb      	adds	r3, r7, r3
    668c:	2205      	movs	r2, #5
    668e:	701a      	strb	r2, [r3, #0]
    6690:	2364      	movs	r3, #100	; 0x64
    6692:	18fb      	adds	r3, r7, r3
    6694:	2201      	movs	r2, #1
    6696:	605a      	str	r2, [r3, #4]
    6698:	2364      	movs	r3, #100	; 0x64
    669a:	18fb      	adds	r3, r7, r3
    669c:	2200      	movs	r2, #0
    669e:	721a      	strb	r2, [r3, #8]
    66a0:	2364      	movs	r3, #100	; 0x64
    66a2:	18fb      	adds	r3, r7, r3
    66a4:	2200      	movs	r2, #0
    66a6:	725a      	strb	r2, [r3, #9]
    66a8:	2364      	movs	r3, #100	; 0x64
    66aa:	18fb      	adds	r3, r7, r3
    66ac:	0019      	movs	r1, r3
    66ae:	2001      	movs	r0, #1
    66b0:	4b35      	ldr	r3, [pc, #212]	; (6788 <system_clock_init+0x254>)
    66b2:	4798      	blx	r3
    66b4:	2001      	movs	r0, #1
    66b6:	4b35      	ldr	r3, [pc, #212]	; (678c <system_clock_init+0x258>)
    66b8:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    66ba:	230c      	movs	r3, #12
    66bc:	18fb      	adds	r3, r7, r3
    66be:	0018      	movs	r0, r3
    66c0:	4b33      	ldr	r3, [pc, #204]	; (6790 <system_clock_init+0x25c>)
    66c2:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    66c4:	230c      	movs	r3, #12
    66c6:	18fb      	adds	r3, r7, r3
    66c8:	2201      	movs	r2, #1
    66ca:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    66cc:	230c      	movs	r3, #12
    66ce:	18fb      	adds	r3, r7, r3
    66d0:	0019      	movs	r1, r3
    66d2:	2000      	movs	r0, #0
    66d4:	4b2f      	ldr	r3, [pc, #188]	; (6794 <system_clock_init+0x260>)
    66d6:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    66d8:	2000      	movs	r0, #0
    66da:	4b2f      	ldr	r3, [pc, #188]	; (6798 <system_clock_init+0x264>)
    66dc:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    66de:	2007      	movs	r0, #7
    66e0:	4b20      	ldr	r3, [pc, #128]	; (6764 <system_clock_init+0x230>)
    66e2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    66e4:	46c0      	nop			; (mov r8, r8)
    66e6:	2007      	movs	r0, #7
    66e8:	4b1f      	ldr	r3, [pc, #124]	; (6768 <system_clock_init+0x234>)
    66ea:	4798      	blx	r3
    66ec:	0003      	movs	r3, r0
    66ee:	001a      	movs	r2, r3
    66f0:	2301      	movs	r3, #1
    66f2:	4053      	eors	r3, r2
    66f4:	b2db      	uxtb	r3, r3
    66f6:	2b00      	cmp	r3, #0
    66f8:	d1f5      	bne.n	66e6 <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    66fa:	2000      	movs	r0, #0
    66fc:	4b27      	ldr	r3, [pc, #156]	; (679c <system_clock_init+0x268>)
    66fe:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6700:	2100      	movs	r1, #0
    6702:	2000      	movs	r0, #0
    6704:	4b26      	ldr	r3, [pc, #152]	; (67a0 <system_clock_init+0x26c>)
    6706:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6708:	2100      	movs	r1, #0
    670a:	2001      	movs	r0, #1
    670c:	4b24      	ldr	r3, [pc, #144]	; (67a0 <system_clock_init+0x26c>)
    670e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6710:	2100      	movs	r1, #0
    6712:	2002      	movs	r0, #2
    6714:	4b22      	ldr	r3, [pc, #136]	; (67a0 <system_clock_init+0x26c>)
    6716:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6718:	003b      	movs	r3, r7
    671a:	0018      	movs	r0, r3
    671c:	4b19      	ldr	r3, [pc, #100]	; (6784 <system_clock_init+0x250>)
    671e:	4798      	blx	r3
    6720:	003b      	movs	r3, r7
    6722:	2207      	movs	r2, #7
    6724:	701a      	strb	r2, [r3, #0]
    6726:	003b      	movs	r3, r7
    6728:	2201      	movs	r2, #1
    672a:	605a      	str	r2, [r3, #4]
    672c:	003b      	movs	r3, r7
    672e:	2201      	movs	r2, #1
    6730:	721a      	strb	r2, [r3, #8]
    6732:	003b      	movs	r3, r7
    6734:	2200      	movs	r2, #0
    6736:	725a      	strb	r2, [r3, #9]
    6738:	003b      	movs	r3, r7
    673a:	0019      	movs	r1, r3
    673c:	2000      	movs	r0, #0
    673e:	4b12      	ldr	r3, [pc, #72]	; (6788 <system_clock_init+0x254>)
    6740:	4798      	blx	r3
    6742:	2000      	movs	r0, #0
    6744:	4b11      	ldr	r3, [pc, #68]	; (678c <system_clock_init+0x258>)
    6746:	4798      	blx	r3
#endif
}
    6748:	46c0      	nop			; (mov r8, r8)
    674a:	46bd      	mov	sp, r7
    674c:	b02a      	add	sp, #168	; 0xa8
    674e:	bd80      	pop	{r7, pc}
    6750:	40000800 	.word	0x40000800
    6754:	00006011 	.word	0x00006011
    6758:	000064fd 	.word	0x000064fd
    675c:	00005ee1 	.word	0x00005ee1
    6760:	000061dd 	.word	0x000061dd
    6764:	000063cd 	.word	0x000063cd
    6768:	00006479 	.word	0x00006479
    676c:	00005f4b 	.word	0x00005f4b
    6770:	00806024 	.word	0x00806024
    6774:	000062fd 	.word	0x000062fd
    6778:	00005f29 	.word	0x00005f29
    677c:	00006165 	.word	0x00006165
    6780:	00006849 	.word	0x00006849
    6784:	00005e9d 	.word	0x00005e9d
    6788:	00006879 	.word	0x00006879
    678c:	0000699d 	.word	0x0000699d
    6790:	00005ecb 	.word	0x00005ecb
    6794:	00006ad1 	.word	0x00006ad1
    6798:	00006b15 	.word	0x00006b15
    679c:	00005f9d 	.word	0x00005f9d
    67a0:	00005fbd 	.word	0x00005fbd

000067a4 <system_apb_clock_set_mask>:
{
    67a4:	b580      	push	{r7, lr}
    67a6:	b082      	sub	sp, #8
    67a8:	af00      	add	r7, sp, #0
    67aa:	0002      	movs	r2, r0
    67ac:	6039      	str	r1, [r7, #0]
    67ae:	1dfb      	adds	r3, r7, #7
    67b0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    67b2:	1dfb      	adds	r3, r7, #7
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	2b01      	cmp	r3, #1
    67b8:	d00a      	beq.n	67d0 <system_apb_clock_set_mask+0x2c>
    67ba:	2b02      	cmp	r3, #2
    67bc:	d00f      	beq.n	67de <system_apb_clock_set_mask+0x3a>
    67be:	2b00      	cmp	r3, #0
    67c0:	d114      	bne.n	67ec <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    67c2:	4b0e      	ldr	r3, [pc, #56]	; (67fc <system_apb_clock_set_mask+0x58>)
    67c4:	4a0d      	ldr	r2, [pc, #52]	; (67fc <system_apb_clock_set_mask+0x58>)
    67c6:	6991      	ldr	r1, [r2, #24]
    67c8:	683a      	ldr	r2, [r7, #0]
    67ca:	430a      	orrs	r2, r1
    67cc:	619a      	str	r2, [r3, #24]
			break;
    67ce:	e00f      	b.n	67f0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    67d0:	4b0a      	ldr	r3, [pc, #40]	; (67fc <system_apb_clock_set_mask+0x58>)
    67d2:	4a0a      	ldr	r2, [pc, #40]	; (67fc <system_apb_clock_set_mask+0x58>)
    67d4:	69d1      	ldr	r1, [r2, #28]
    67d6:	683a      	ldr	r2, [r7, #0]
    67d8:	430a      	orrs	r2, r1
    67da:	61da      	str	r2, [r3, #28]
			break;
    67dc:	e008      	b.n	67f0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    67de:	4b07      	ldr	r3, [pc, #28]	; (67fc <system_apb_clock_set_mask+0x58>)
    67e0:	4a06      	ldr	r2, [pc, #24]	; (67fc <system_apb_clock_set_mask+0x58>)
    67e2:	6a11      	ldr	r1, [r2, #32]
    67e4:	683a      	ldr	r2, [r7, #0]
    67e6:	430a      	orrs	r2, r1
    67e8:	621a      	str	r2, [r3, #32]
			break;
    67ea:	e001      	b.n	67f0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    67ec:	2317      	movs	r3, #23
    67ee:	e000      	b.n	67f2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    67f0:	2300      	movs	r3, #0
}
    67f2:	0018      	movs	r0, r3
    67f4:	46bd      	mov	sp, r7
    67f6:	b002      	add	sp, #8
    67f8:	bd80      	pop	{r7, pc}
    67fa:	46c0      	nop			; (mov r8, r8)
    67fc:	40000400 	.word	0x40000400

00006800 <system_interrupt_enter_critical_section>:
{
    6800:	b580      	push	{r7, lr}
    6802:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6804:	4b02      	ldr	r3, [pc, #8]	; (6810 <system_interrupt_enter_critical_section+0x10>)
    6806:	4798      	blx	r3
}
    6808:	46c0      	nop			; (mov r8, r8)
    680a:	46bd      	mov	sp, r7
    680c:	bd80      	pop	{r7, pc}
    680e:	46c0      	nop			; (mov r8, r8)
    6810:	00003445 	.word	0x00003445

00006814 <system_interrupt_leave_critical_section>:
{
    6814:	b580      	push	{r7, lr}
    6816:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6818:	4b02      	ldr	r3, [pc, #8]	; (6824 <system_interrupt_leave_critical_section+0x10>)
    681a:	4798      	blx	r3
}
    681c:	46c0      	nop			; (mov r8, r8)
    681e:	46bd      	mov	sp, r7
    6820:	bd80      	pop	{r7, pc}
    6822:	46c0      	nop			; (mov r8, r8)
    6824:	00003499 	.word	0x00003499

00006828 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    6828:	b580      	push	{r7, lr}
    682a:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    682c:	4b05      	ldr	r3, [pc, #20]	; (6844 <system_gclk_is_syncing+0x1c>)
    682e:	785b      	ldrb	r3, [r3, #1]
    6830:	b2db      	uxtb	r3, r3
    6832:	b25b      	sxtb	r3, r3
    6834:	2b00      	cmp	r3, #0
    6836:	da01      	bge.n	683c <system_gclk_is_syncing+0x14>
		return true;
    6838:	2301      	movs	r3, #1
    683a:	e000      	b.n	683e <system_gclk_is_syncing+0x16>
	}

	return false;
    683c:	2300      	movs	r3, #0
}
    683e:	0018      	movs	r0, r3
    6840:	46bd      	mov	sp, r7
    6842:	bd80      	pop	{r7, pc}
    6844:	40000c00 	.word	0x40000c00

00006848 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    6848:	b580      	push	{r7, lr}
    684a:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    684c:	2108      	movs	r1, #8
    684e:	2000      	movs	r0, #0
    6850:	4b07      	ldr	r3, [pc, #28]	; (6870 <system_gclk_init+0x28>)
    6852:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    6854:	4b07      	ldr	r3, [pc, #28]	; (6874 <system_gclk_init+0x2c>)
    6856:	2201      	movs	r2, #1
    6858:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    685a:	46c0      	nop			; (mov r8, r8)
    685c:	4b05      	ldr	r3, [pc, #20]	; (6874 <system_gclk_init+0x2c>)
    685e:	781b      	ldrb	r3, [r3, #0]
    6860:	b2db      	uxtb	r3, r3
    6862:	001a      	movs	r2, r3
    6864:	2301      	movs	r3, #1
    6866:	4013      	ands	r3, r2
    6868:	d1f8      	bne.n	685c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    686a:	46c0      	nop			; (mov r8, r8)
    686c:	46bd      	mov	sp, r7
    686e:	bd80      	pop	{r7, pc}
    6870:	000067a5 	.word	0x000067a5
    6874:	40000c00 	.word	0x40000c00

00006878 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    6878:	b580      	push	{r7, lr}
    687a:	b086      	sub	sp, #24
    687c:	af00      	add	r7, sp, #0
    687e:	0002      	movs	r2, r0
    6880:	6039      	str	r1, [r7, #0]
    6882:	1dfb      	adds	r3, r7, #7
    6884:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    6886:	1dfb      	adds	r3, r7, #7
    6888:	781b      	ldrb	r3, [r3, #0]
    688a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    688c:	1dfb      	adds	r3, r7, #7
    688e:	781b      	ldrb	r3, [r3, #0]
    6890:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    6892:	683b      	ldr	r3, [r7, #0]
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	021b      	lsls	r3, r3, #8
    6898:	001a      	movs	r2, r3
    689a:	697b      	ldr	r3, [r7, #20]
    689c:	4313      	orrs	r3, r2
    689e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    68a0:	683b      	ldr	r3, [r7, #0]
    68a2:	785b      	ldrb	r3, [r3, #1]
    68a4:	2b00      	cmp	r3, #0
    68a6:	d004      	beq.n	68b2 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    68a8:	697b      	ldr	r3, [r7, #20]
    68aa:	2280      	movs	r2, #128	; 0x80
    68ac:	02d2      	lsls	r2, r2, #11
    68ae:	4313      	orrs	r3, r2
    68b0:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    68b2:	683b      	ldr	r3, [r7, #0]
    68b4:	7a5b      	ldrb	r3, [r3, #9]
    68b6:	2b00      	cmp	r3, #0
    68b8:	d004      	beq.n	68c4 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    68ba:	697b      	ldr	r3, [r7, #20]
    68bc:	2280      	movs	r2, #128	; 0x80
    68be:	0312      	lsls	r2, r2, #12
    68c0:	4313      	orrs	r3, r2
    68c2:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    68c4:	683b      	ldr	r3, [r7, #0]
    68c6:	685b      	ldr	r3, [r3, #4]
    68c8:	2b01      	cmp	r3, #1
    68ca:	d92c      	bls.n	6926 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    68cc:	683b      	ldr	r3, [r7, #0]
    68ce:	685a      	ldr	r2, [r3, #4]
    68d0:	683b      	ldr	r3, [r7, #0]
    68d2:	685b      	ldr	r3, [r3, #4]
    68d4:	3b01      	subs	r3, #1
    68d6:	4013      	ands	r3, r2
    68d8:	d11a      	bne.n	6910 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    68da:	2300      	movs	r3, #0
    68dc:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    68de:	2302      	movs	r3, #2
    68e0:	60bb      	str	r3, [r7, #8]
    68e2:	e005      	b.n	68f0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    68e4:	68fb      	ldr	r3, [r7, #12]
    68e6:	3301      	adds	r3, #1
    68e8:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    68ea:	68bb      	ldr	r3, [r7, #8]
    68ec:	005b      	lsls	r3, r3, #1
    68ee:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    68f0:	683b      	ldr	r3, [r7, #0]
    68f2:	685a      	ldr	r2, [r3, #4]
    68f4:	68bb      	ldr	r3, [r7, #8]
    68f6:	429a      	cmp	r2, r3
    68f8:	d8f4      	bhi.n	68e4 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    68fa:	68fb      	ldr	r3, [r7, #12]
    68fc:	021b      	lsls	r3, r3, #8
    68fe:	693a      	ldr	r2, [r7, #16]
    6900:	4313      	orrs	r3, r2
    6902:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6904:	697b      	ldr	r3, [r7, #20]
    6906:	2280      	movs	r2, #128	; 0x80
    6908:	0352      	lsls	r2, r2, #13
    690a:	4313      	orrs	r3, r2
    690c:	617b      	str	r3, [r7, #20]
    690e:	e00a      	b.n	6926 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6910:	683b      	ldr	r3, [r7, #0]
    6912:	685b      	ldr	r3, [r3, #4]
    6914:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    6916:	693a      	ldr	r2, [r7, #16]
    6918:	4313      	orrs	r3, r2
    691a:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    691c:	697b      	ldr	r3, [r7, #20]
    691e:	2280      	movs	r2, #128	; 0x80
    6920:	0292      	lsls	r2, r2, #10
    6922:	4313      	orrs	r3, r2
    6924:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    6926:	683b      	ldr	r3, [r7, #0]
    6928:	7a1b      	ldrb	r3, [r3, #8]
    692a:	2b00      	cmp	r3, #0
    692c:	d004      	beq.n	6938 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    692e:	697b      	ldr	r3, [r7, #20]
    6930:	2280      	movs	r2, #128	; 0x80
    6932:	0392      	lsls	r2, r2, #14
    6934:	4313      	orrs	r3, r2
    6936:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    6938:	46c0      	nop			; (mov r8, r8)
    693a:	4b13      	ldr	r3, [pc, #76]	; (6988 <system_gclk_gen_set_config+0x110>)
    693c:	4798      	blx	r3
    693e:	1e03      	subs	r3, r0, #0
    6940:	d1fb      	bne.n	693a <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6942:	4b12      	ldr	r3, [pc, #72]	; (698c <system_gclk_gen_set_config+0x114>)
    6944:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6946:	4a12      	ldr	r2, [pc, #72]	; (6990 <system_gclk_gen_set_config+0x118>)
    6948:	1dfb      	adds	r3, r7, #7
    694a:	781b      	ldrb	r3, [r3, #0]
    694c:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    694e:	46c0      	nop			; (mov r8, r8)
    6950:	4b0d      	ldr	r3, [pc, #52]	; (6988 <system_gclk_gen_set_config+0x110>)
    6952:	4798      	blx	r3
    6954:	1e03      	subs	r3, r0, #0
    6956:	d1fb      	bne.n	6950 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    6958:	4b0e      	ldr	r3, [pc, #56]	; (6994 <system_gclk_gen_set_config+0x11c>)
    695a:	693a      	ldr	r2, [r7, #16]
    695c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    695e:	46c0      	nop			; (mov r8, r8)
    6960:	4b09      	ldr	r3, [pc, #36]	; (6988 <system_gclk_gen_set_config+0x110>)
    6962:	4798      	blx	r3
    6964:	1e03      	subs	r3, r0, #0
    6966:	d1fb      	bne.n	6960 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    6968:	4b0a      	ldr	r3, [pc, #40]	; (6994 <system_gclk_gen_set_config+0x11c>)
    696a:	4a0a      	ldr	r2, [pc, #40]	; (6994 <system_gclk_gen_set_config+0x11c>)
    696c:	6851      	ldr	r1, [r2, #4]
    696e:	2280      	movs	r2, #128	; 0x80
    6970:	0252      	lsls	r2, r2, #9
    6972:	4011      	ands	r1, r2
    6974:	697a      	ldr	r2, [r7, #20]
    6976:	430a      	orrs	r2, r1
    6978:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    697a:	4b07      	ldr	r3, [pc, #28]	; (6998 <system_gclk_gen_set_config+0x120>)
    697c:	4798      	blx	r3
}
    697e:	46c0      	nop			; (mov r8, r8)
    6980:	46bd      	mov	sp, r7
    6982:	b006      	add	sp, #24
    6984:	bd80      	pop	{r7, pc}
    6986:	46c0      	nop			; (mov r8, r8)
    6988:	00006829 	.word	0x00006829
    698c:	00006801 	.word	0x00006801
    6990:	40000c08 	.word	0x40000c08
    6994:	40000c00 	.word	0x40000c00
    6998:	00006815 	.word	0x00006815

0000699c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    699c:	b580      	push	{r7, lr}
    699e:	b082      	sub	sp, #8
    69a0:	af00      	add	r7, sp, #0
    69a2:	0002      	movs	r2, r0
    69a4:	1dfb      	adds	r3, r7, #7
    69a6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    69a8:	46c0      	nop			; (mov r8, r8)
    69aa:	4b0e      	ldr	r3, [pc, #56]	; (69e4 <system_gclk_gen_enable+0x48>)
    69ac:	4798      	blx	r3
    69ae:	1e03      	subs	r3, r0, #0
    69b0:	d1fb      	bne.n	69aa <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    69b2:	4b0d      	ldr	r3, [pc, #52]	; (69e8 <system_gclk_gen_enable+0x4c>)
    69b4:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    69b6:	4a0d      	ldr	r2, [pc, #52]	; (69ec <system_gclk_gen_enable+0x50>)
    69b8:	1dfb      	adds	r3, r7, #7
    69ba:	781b      	ldrb	r3, [r3, #0]
    69bc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    69be:	46c0      	nop			; (mov r8, r8)
    69c0:	4b08      	ldr	r3, [pc, #32]	; (69e4 <system_gclk_gen_enable+0x48>)
    69c2:	4798      	blx	r3
    69c4:	1e03      	subs	r3, r0, #0
    69c6:	d1fb      	bne.n	69c0 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    69c8:	4b09      	ldr	r3, [pc, #36]	; (69f0 <system_gclk_gen_enable+0x54>)
    69ca:	4a09      	ldr	r2, [pc, #36]	; (69f0 <system_gclk_gen_enable+0x54>)
    69cc:	6852      	ldr	r2, [r2, #4]
    69ce:	2180      	movs	r1, #128	; 0x80
    69d0:	0249      	lsls	r1, r1, #9
    69d2:	430a      	orrs	r2, r1
    69d4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    69d6:	4b07      	ldr	r3, [pc, #28]	; (69f4 <system_gclk_gen_enable+0x58>)
    69d8:	4798      	blx	r3
}
    69da:	46c0      	nop			; (mov r8, r8)
    69dc:	46bd      	mov	sp, r7
    69de:	b002      	add	sp, #8
    69e0:	bd80      	pop	{r7, pc}
    69e2:	46c0      	nop			; (mov r8, r8)
    69e4:	00006829 	.word	0x00006829
    69e8:	00006801 	.word	0x00006801
    69ec:	40000c04 	.word	0x40000c04
    69f0:	40000c00 	.word	0x40000c00
    69f4:	00006815 	.word	0x00006815

000069f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    69f8:	b580      	push	{r7, lr}
    69fa:	b086      	sub	sp, #24
    69fc:	af00      	add	r7, sp, #0
    69fe:	0002      	movs	r2, r0
    6a00:	1dfb      	adds	r3, r7, #7
    6a02:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6a04:	46c0      	nop			; (mov r8, r8)
    6a06:	4b2a      	ldr	r3, [pc, #168]	; (6ab0 <system_gclk_gen_get_hz+0xb8>)
    6a08:	4798      	blx	r3
    6a0a:	1e03      	subs	r3, r0, #0
    6a0c:	d1fb      	bne.n	6a06 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6a0e:	4b29      	ldr	r3, [pc, #164]	; (6ab4 <system_gclk_gen_get_hz+0xbc>)
    6a10:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6a12:	4a29      	ldr	r2, [pc, #164]	; (6ab8 <system_gclk_gen_get_hz+0xc0>)
    6a14:	1dfb      	adds	r3, r7, #7
    6a16:	781b      	ldrb	r3, [r3, #0]
    6a18:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6a1a:	46c0      	nop			; (mov r8, r8)
    6a1c:	4b24      	ldr	r3, [pc, #144]	; (6ab0 <system_gclk_gen_get_hz+0xb8>)
    6a1e:	4798      	blx	r3
    6a20:	1e03      	subs	r3, r0, #0
    6a22:	d1fb      	bne.n	6a1c <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6a24:	4b25      	ldr	r3, [pc, #148]	; (6abc <system_gclk_gen_get_hz+0xc4>)
    6a26:	685b      	ldr	r3, [r3, #4]
    6a28:	04db      	lsls	r3, r3, #19
    6a2a:	0edb      	lsrs	r3, r3, #27
    6a2c:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6a2e:	0018      	movs	r0, r3
    6a30:	4b23      	ldr	r3, [pc, #140]	; (6ac0 <system_gclk_gen_get_hz+0xc8>)
    6a32:	4798      	blx	r3
    6a34:	0003      	movs	r3, r0
    6a36:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6a38:	4a1f      	ldr	r2, [pc, #124]	; (6ab8 <system_gclk_gen_get_hz+0xc0>)
    6a3a:	1dfb      	adds	r3, r7, #7
    6a3c:	781b      	ldrb	r3, [r3, #0]
    6a3e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6a40:	4b1e      	ldr	r3, [pc, #120]	; (6abc <system_gclk_gen_get_hz+0xc4>)
    6a42:	685b      	ldr	r3, [r3, #4]
    6a44:	02db      	lsls	r3, r3, #11
    6a46:	0fdb      	lsrs	r3, r3, #31
    6a48:	b2da      	uxtb	r2, r3
    6a4a:	2313      	movs	r3, #19
    6a4c:	18fb      	adds	r3, r7, r3
    6a4e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    6a50:	4a1c      	ldr	r2, [pc, #112]	; (6ac4 <system_gclk_gen_get_hz+0xcc>)
    6a52:	1dfb      	adds	r3, r7, #7
    6a54:	781b      	ldrb	r3, [r3, #0]
    6a56:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6a58:	46c0      	nop			; (mov r8, r8)
    6a5a:	4b15      	ldr	r3, [pc, #84]	; (6ab0 <system_gclk_gen_get_hz+0xb8>)
    6a5c:	4798      	blx	r3
    6a5e:	1e03      	subs	r3, r0, #0
    6a60:	d1fb      	bne.n	6a5a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    6a62:	4b16      	ldr	r3, [pc, #88]	; (6abc <system_gclk_gen_get_hz+0xc4>)
    6a64:	689b      	ldr	r3, [r3, #8]
    6a66:	021b      	lsls	r3, r3, #8
    6a68:	0c1b      	lsrs	r3, r3, #16
    6a6a:	b29b      	uxth	r3, r3
    6a6c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    6a6e:	4b16      	ldr	r3, [pc, #88]	; (6ac8 <system_gclk_gen_get_hz+0xd0>)
    6a70:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    6a72:	2313      	movs	r3, #19
    6a74:	18fb      	adds	r3, r7, r3
    6a76:	781b      	ldrb	r3, [r3, #0]
    6a78:	2b00      	cmp	r3, #0
    6a7a:	d109      	bne.n	6a90 <system_gclk_gen_get_hz+0x98>
    6a7c:	68fb      	ldr	r3, [r7, #12]
    6a7e:	2b01      	cmp	r3, #1
    6a80:	d906      	bls.n	6a90 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    6a82:	4b12      	ldr	r3, [pc, #72]	; (6acc <system_gclk_gen_get_hz+0xd4>)
    6a84:	68f9      	ldr	r1, [r7, #12]
    6a86:	6978      	ldr	r0, [r7, #20]
    6a88:	4798      	blx	r3
    6a8a:	0003      	movs	r3, r0
    6a8c:	617b      	str	r3, [r7, #20]
    6a8e:	e00a      	b.n	6aa6 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6a90:	2313      	movs	r3, #19
    6a92:	18fb      	adds	r3, r7, r3
    6a94:	781b      	ldrb	r3, [r3, #0]
    6a96:	2b00      	cmp	r3, #0
    6a98:	d005      	beq.n	6aa6 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    6a9a:	68fb      	ldr	r3, [r7, #12]
    6a9c:	3301      	adds	r3, #1
    6a9e:	697a      	ldr	r2, [r7, #20]
    6aa0:	40da      	lsrs	r2, r3
    6aa2:	0013      	movs	r3, r2
    6aa4:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6aa6:	697b      	ldr	r3, [r7, #20]
}
    6aa8:	0018      	movs	r0, r3
    6aaa:	46bd      	mov	sp, r7
    6aac:	b006      	add	sp, #24
    6aae:	bd80      	pop	{r7, pc}
    6ab0:	00006829 	.word	0x00006829
    6ab4:	00006801 	.word	0x00006801
    6ab8:	40000c04 	.word	0x40000c04
    6abc:	40000c00 	.word	0x40000c00
    6ac0:	000060a5 	.word	0x000060a5
    6ac4:	40000c08 	.word	0x40000c08
    6ac8:	00006815 	.word	0x00006815
    6acc:	0000b789 	.word	0x0000b789

00006ad0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6ad0:	b580      	push	{r7, lr}
    6ad2:	b084      	sub	sp, #16
    6ad4:	af00      	add	r7, sp, #0
    6ad6:	0002      	movs	r2, r0
    6ad8:	6039      	str	r1, [r7, #0]
    6ada:	1dfb      	adds	r3, r7, #7
    6adc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6ade:	1dfb      	adds	r3, r7, #7
    6ae0:	781b      	ldrb	r3, [r3, #0]
    6ae2:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6ae4:	683b      	ldr	r3, [r7, #0]
    6ae6:	781b      	ldrb	r3, [r3, #0]
    6ae8:	021b      	lsls	r3, r3, #8
    6aea:	001a      	movs	r2, r3
    6aec:	68fb      	ldr	r3, [r7, #12]
    6aee:	4313      	orrs	r3, r2
    6af0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6af2:	1dfb      	adds	r3, r7, #7
    6af4:	781b      	ldrb	r3, [r3, #0]
    6af6:	0018      	movs	r0, r3
    6af8:	4b04      	ldr	r3, [pc, #16]	; (6b0c <system_gclk_chan_set_config+0x3c>)
    6afa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6afc:	4b04      	ldr	r3, [pc, #16]	; (6b10 <system_gclk_chan_set_config+0x40>)
    6afe:	68fa      	ldr	r2, [r7, #12]
    6b00:	b292      	uxth	r2, r2
    6b02:	805a      	strh	r2, [r3, #2]
}
    6b04:	46c0      	nop			; (mov r8, r8)
    6b06:	46bd      	mov	sp, r7
    6b08:	b004      	add	sp, #16
    6b0a:	bd80      	pop	{r7, pc}
    6b0c:	00006b5d 	.word	0x00006b5d
    6b10:	40000c00 	.word	0x40000c00

00006b14 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6b14:	b580      	push	{r7, lr}
    6b16:	b082      	sub	sp, #8
    6b18:	af00      	add	r7, sp, #0
    6b1a:	0002      	movs	r2, r0
    6b1c:	1dfb      	adds	r3, r7, #7
    6b1e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6b20:	4b0a      	ldr	r3, [pc, #40]	; (6b4c <system_gclk_chan_enable+0x38>)
    6b22:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6b24:	4a0a      	ldr	r2, [pc, #40]	; (6b50 <system_gclk_chan_enable+0x3c>)
    6b26:	1dfb      	adds	r3, r7, #7
    6b28:	781b      	ldrb	r3, [r3, #0]
    6b2a:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6b2c:	4909      	ldr	r1, [pc, #36]	; (6b54 <system_gclk_chan_enable+0x40>)
    6b2e:	4b09      	ldr	r3, [pc, #36]	; (6b54 <system_gclk_chan_enable+0x40>)
    6b30:	885b      	ldrh	r3, [r3, #2]
    6b32:	b29b      	uxth	r3, r3
    6b34:	2280      	movs	r2, #128	; 0x80
    6b36:	01d2      	lsls	r2, r2, #7
    6b38:	4313      	orrs	r3, r2
    6b3a:	b29b      	uxth	r3, r3
    6b3c:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6b3e:	4b06      	ldr	r3, [pc, #24]	; (6b58 <system_gclk_chan_enable+0x44>)
    6b40:	4798      	blx	r3
}
    6b42:	46c0      	nop			; (mov r8, r8)
    6b44:	46bd      	mov	sp, r7
    6b46:	b002      	add	sp, #8
    6b48:	bd80      	pop	{r7, pc}
    6b4a:	46c0      	nop			; (mov r8, r8)
    6b4c:	00006801 	.word	0x00006801
    6b50:	40000c02 	.word	0x40000c02
    6b54:	40000c00 	.word	0x40000c00
    6b58:	00006815 	.word	0x00006815

00006b5c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    6b5c:	b580      	push	{r7, lr}
    6b5e:	b084      	sub	sp, #16
    6b60:	af00      	add	r7, sp, #0
    6b62:	0002      	movs	r2, r0
    6b64:	1dfb      	adds	r3, r7, #7
    6b66:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6b68:	4b1c      	ldr	r3, [pc, #112]	; (6bdc <system_gclk_chan_disable+0x80>)
    6b6a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6b6c:	4a1c      	ldr	r2, [pc, #112]	; (6be0 <system_gclk_chan_disable+0x84>)
    6b6e:	1dfb      	adds	r3, r7, #7
    6b70:	781b      	ldrb	r3, [r3, #0]
    6b72:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    6b74:	4b1b      	ldr	r3, [pc, #108]	; (6be4 <system_gclk_chan_disable+0x88>)
    6b76:	885b      	ldrh	r3, [r3, #2]
    6b78:	051b      	lsls	r3, r3, #20
    6b7a:	0f1b      	lsrs	r3, r3, #28
    6b7c:	b2db      	uxtb	r3, r3
    6b7e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    6b80:	4a18      	ldr	r2, [pc, #96]	; (6be4 <system_gclk_chan_disable+0x88>)
    6b82:	8853      	ldrh	r3, [r2, #2]
    6b84:	4918      	ldr	r1, [pc, #96]	; (6be8 <system_gclk_chan_disable+0x8c>)
    6b86:	400b      	ands	r3, r1
    6b88:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6b8a:	4a16      	ldr	r2, [pc, #88]	; (6be4 <system_gclk_chan_disable+0x88>)
    6b8c:	4b15      	ldr	r3, [pc, #84]	; (6be4 <system_gclk_chan_disable+0x88>)
    6b8e:	885b      	ldrh	r3, [r3, #2]
    6b90:	b29b      	uxth	r3, r3
    6b92:	4916      	ldr	r1, [pc, #88]	; (6bec <system_gclk_chan_disable+0x90>)
    6b94:	400b      	ands	r3, r1
    6b96:	b29b      	uxth	r3, r3
    6b98:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6b9a:	46c0      	nop			; (mov r8, r8)
    6b9c:	4b11      	ldr	r3, [pc, #68]	; (6be4 <system_gclk_chan_disable+0x88>)
    6b9e:	885b      	ldrh	r3, [r3, #2]
    6ba0:	b29b      	uxth	r3, r3
    6ba2:	001a      	movs	r2, r3
    6ba4:	2380      	movs	r3, #128	; 0x80
    6ba6:	01db      	lsls	r3, r3, #7
    6ba8:	4013      	ands	r3, r2
    6baa:	d1f7      	bne.n	6b9c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6bac:	4a0d      	ldr	r2, [pc, #52]	; (6be4 <system_gclk_chan_disable+0x88>)
    6bae:	68fb      	ldr	r3, [r7, #12]
    6bb0:	b2db      	uxtb	r3, r3
    6bb2:	1c19      	adds	r1, r3, #0
    6bb4:	230f      	movs	r3, #15
    6bb6:	400b      	ands	r3, r1
    6bb8:	b2d9      	uxtb	r1, r3
    6bba:	8853      	ldrh	r3, [r2, #2]
    6bbc:	1c08      	adds	r0, r1, #0
    6bbe:	210f      	movs	r1, #15
    6bc0:	4001      	ands	r1, r0
    6bc2:	0208      	lsls	r0, r1, #8
    6bc4:	4908      	ldr	r1, [pc, #32]	; (6be8 <system_gclk_chan_disable+0x8c>)
    6bc6:	400b      	ands	r3, r1
    6bc8:	1c19      	adds	r1, r3, #0
    6bca:	1c03      	adds	r3, r0, #0
    6bcc:	430b      	orrs	r3, r1
    6bce:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6bd0:	4b07      	ldr	r3, [pc, #28]	; (6bf0 <system_gclk_chan_disable+0x94>)
    6bd2:	4798      	blx	r3
}
    6bd4:	46c0      	nop			; (mov r8, r8)
    6bd6:	46bd      	mov	sp, r7
    6bd8:	b004      	add	sp, #16
    6bda:	bd80      	pop	{r7, pc}
    6bdc:	00006801 	.word	0x00006801
    6be0:	40000c02 	.word	0x40000c02
    6be4:	40000c00 	.word	0x40000c00
    6be8:	fffff0ff 	.word	0xfffff0ff
    6bec:	ffffbfff 	.word	0xffffbfff
    6bf0:	00006815 	.word	0x00006815

00006bf4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6bf4:	b580      	push	{r7, lr}
    6bf6:	b084      	sub	sp, #16
    6bf8:	af00      	add	r7, sp, #0
    6bfa:	0002      	movs	r2, r0
    6bfc:	1dfb      	adds	r3, r7, #7
    6bfe:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6c00:	4b0d      	ldr	r3, [pc, #52]	; (6c38 <system_gclk_chan_get_hz+0x44>)
    6c02:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6c04:	4a0d      	ldr	r2, [pc, #52]	; (6c3c <system_gclk_chan_get_hz+0x48>)
    6c06:	1dfb      	adds	r3, r7, #7
    6c08:	781b      	ldrb	r3, [r3, #0]
    6c0a:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6c0c:	4b0c      	ldr	r3, [pc, #48]	; (6c40 <system_gclk_chan_get_hz+0x4c>)
    6c0e:	885b      	ldrh	r3, [r3, #2]
    6c10:	051b      	lsls	r3, r3, #20
    6c12:	0f1b      	lsrs	r3, r3, #28
    6c14:	b2da      	uxtb	r2, r3
    6c16:	230f      	movs	r3, #15
    6c18:	18fb      	adds	r3, r7, r3
    6c1a:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6c1c:	4b09      	ldr	r3, [pc, #36]	; (6c44 <system_gclk_chan_get_hz+0x50>)
    6c1e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6c20:	230f      	movs	r3, #15
    6c22:	18fb      	adds	r3, r7, r3
    6c24:	781b      	ldrb	r3, [r3, #0]
    6c26:	0018      	movs	r0, r3
    6c28:	4b07      	ldr	r3, [pc, #28]	; (6c48 <system_gclk_chan_get_hz+0x54>)
    6c2a:	4798      	blx	r3
    6c2c:	0003      	movs	r3, r0
}
    6c2e:	0018      	movs	r0, r3
    6c30:	46bd      	mov	sp, r7
    6c32:	b004      	add	sp, #16
    6c34:	bd80      	pop	{r7, pc}
    6c36:	46c0      	nop			; (mov r8, r8)
    6c38:	00006801 	.word	0x00006801
    6c3c:	40000c02 	.word	0x40000c02
    6c40:	40000c00 	.word	0x40000c00
    6c44:	00006815 	.word	0x00006815
    6c48:	000069f9 	.word	0x000069f9

00006c4c <system_pinmux_get_group_from_gpio_pin>:
{
    6c4c:	b580      	push	{r7, lr}
    6c4e:	b084      	sub	sp, #16
    6c50:	af00      	add	r7, sp, #0
    6c52:	0002      	movs	r2, r0
    6c54:	1dfb      	adds	r3, r7, #7
    6c56:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6c58:	230f      	movs	r3, #15
    6c5a:	18fb      	adds	r3, r7, r3
    6c5c:	1dfa      	adds	r2, r7, #7
    6c5e:	7812      	ldrb	r2, [r2, #0]
    6c60:	09d2      	lsrs	r2, r2, #7
    6c62:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6c64:	230e      	movs	r3, #14
    6c66:	18fb      	adds	r3, r7, r3
    6c68:	1dfa      	adds	r2, r7, #7
    6c6a:	7812      	ldrb	r2, [r2, #0]
    6c6c:	0952      	lsrs	r2, r2, #5
    6c6e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6c70:	4b0d      	ldr	r3, [pc, #52]	; (6ca8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6c72:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6c74:	230f      	movs	r3, #15
    6c76:	18fb      	adds	r3, r7, r3
    6c78:	781b      	ldrb	r3, [r3, #0]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d10f      	bne.n	6c9e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6c7e:	230f      	movs	r3, #15
    6c80:	18fb      	adds	r3, r7, r3
    6c82:	781b      	ldrb	r3, [r3, #0]
    6c84:	009b      	lsls	r3, r3, #2
    6c86:	2210      	movs	r2, #16
    6c88:	4694      	mov	ip, r2
    6c8a:	44bc      	add	ip, r7
    6c8c:	4463      	add	r3, ip
    6c8e:	3b08      	subs	r3, #8
    6c90:	681a      	ldr	r2, [r3, #0]
    6c92:	230e      	movs	r3, #14
    6c94:	18fb      	adds	r3, r7, r3
    6c96:	781b      	ldrb	r3, [r3, #0]
    6c98:	01db      	lsls	r3, r3, #7
    6c9a:	18d3      	adds	r3, r2, r3
    6c9c:	e000      	b.n	6ca0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6c9e:	2300      	movs	r3, #0
}
    6ca0:	0018      	movs	r0, r3
    6ca2:	46bd      	mov	sp, r7
    6ca4:	b004      	add	sp, #16
    6ca6:	bd80      	pop	{r7, pc}
    6ca8:	41004400 	.word	0x41004400

00006cac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6cac:	b580      	push	{r7, lr}
    6cae:	b088      	sub	sp, #32
    6cb0:	af00      	add	r7, sp, #0
    6cb2:	60f8      	str	r0, [r7, #12]
    6cb4:	60b9      	str	r1, [r7, #8]
    6cb6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6cb8:	2300      	movs	r3, #0
    6cba:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6cbc:	687b      	ldr	r3, [r7, #4]
    6cbe:	78db      	ldrb	r3, [r3, #3]
    6cc0:	2201      	movs	r2, #1
    6cc2:	4053      	eors	r3, r2
    6cc4:	b2db      	uxtb	r3, r3
    6cc6:	2b00      	cmp	r3, #0
    6cc8:	d035      	beq.n	6d36 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6cca:	687b      	ldr	r3, [r7, #4]
    6ccc:	781b      	ldrb	r3, [r3, #0]
    6cce:	2b80      	cmp	r3, #128	; 0x80
    6cd0:	d00b      	beq.n	6cea <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6cd2:	69fb      	ldr	r3, [r7, #28]
    6cd4:	2280      	movs	r2, #128	; 0x80
    6cd6:	0252      	lsls	r2, r2, #9
    6cd8:	4313      	orrs	r3, r2
    6cda:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6cdc:	687b      	ldr	r3, [r7, #4]
    6cde:	781b      	ldrb	r3, [r3, #0]
    6ce0:	061b      	lsls	r3, r3, #24
    6ce2:	001a      	movs	r2, r3
    6ce4:	69fb      	ldr	r3, [r7, #28]
    6ce6:	4313      	orrs	r3, r2
    6ce8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6cea:	687b      	ldr	r3, [r7, #4]
    6cec:	785b      	ldrb	r3, [r3, #1]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d003      	beq.n	6cfa <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6cf2:	687b      	ldr	r3, [r7, #4]
    6cf4:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6cf6:	2b02      	cmp	r3, #2
    6cf8:	d110      	bne.n	6d1c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6cfa:	69fb      	ldr	r3, [r7, #28]
    6cfc:	2280      	movs	r2, #128	; 0x80
    6cfe:	0292      	lsls	r2, r2, #10
    6d00:	4313      	orrs	r3, r2
    6d02:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6d04:	687b      	ldr	r3, [r7, #4]
    6d06:	789b      	ldrb	r3, [r3, #2]
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d004      	beq.n	6d16 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6d0c:	69fb      	ldr	r3, [r7, #28]
    6d0e:	2280      	movs	r2, #128	; 0x80
    6d10:	02d2      	lsls	r2, r2, #11
    6d12:	4313      	orrs	r3, r2
    6d14:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6d16:	68fb      	ldr	r3, [r7, #12]
    6d18:	68ba      	ldr	r2, [r7, #8]
    6d1a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d1c:	687b      	ldr	r3, [r7, #4]
    6d1e:	785b      	ldrb	r3, [r3, #1]
    6d20:	2b01      	cmp	r3, #1
    6d22:	d003      	beq.n	6d2c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6d24:	687b      	ldr	r3, [r7, #4]
    6d26:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d28:	2b02      	cmp	r3, #2
    6d2a:	d107      	bne.n	6d3c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6d2c:	69fb      	ldr	r3, [r7, #28]
    6d2e:	4a22      	ldr	r2, [pc, #136]	; (6db8 <_system_pinmux_config+0x10c>)
    6d30:	4013      	ands	r3, r2
    6d32:	61fb      	str	r3, [r7, #28]
    6d34:	e002      	b.n	6d3c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    6d36:	68fb      	ldr	r3, [r7, #12]
    6d38:	68ba      	ldr	r2, [r7, #8]
    6d3a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6d3c:	68bb      	ldr	r3, [r7, #8]
    6d3e:	041b      	lsls	r3, r3, #16
    6d40:	0c1b      	lsrs	r3, r3, #16
    6d42:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6d44:	68bb      	ldr	r3, [r7, #8]
    6d46:	0c1b      	lsrs	r3, r3, #16
    6d48:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6d4a:	69ba      	ldr	r2, [r7, #24]
    6d4c:	69fb      	ldr	r3, [r7, #28]
    6d4e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6d50:	22a0      	movs	r2, #160	; 0xa0
    6d52:	05d2      	lsls	r2, r2, #23
    6d54:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6d56:	68fb      	ldr	r3, [r7, #12]
    6d58:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6d5a:	697a      	ldr	r2, [r7, #20]
    6d5c:	69fb      	ldr	r3, [r7, #28]
    6d5e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6d60:	22d0      	movs	r2, #208	; 0xd0
    6d62:	0612      	lsls	r2, r2, #24
    6d64:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6d66:	68fb      	ldr	r3, [r7, #12]
    6d68:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    6d6a:	687b      	ldr	r3, [r7, #4]
    6d6c:	78db      	ldrb	r3, [r3, #3]
    6d6e:	2201      	movs	r2, #1
    6d70:	4053      	eors	r3, r2
    6d72:	b2db      	uxtb	r3, r3
    6d74:	2b00      	cmp	r3, #0
    6d76:	d01a      	beq.n	6dae <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6d78:	69fa      	ldr	r2, [r7, #28]
    6d7a:	2380      	movs	r3, #128	; 0x80
    6d7c:	02db      	lsls	r3, r3, #11
    6d7e:	4013      	ands	r3, r2
    6d80:	d00a      	beq.n	6d98 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6d82:	687b      	ldr	r3, [r7, #4]
    6d84:	789b      	ldrb	r3, [r3, #2]
    6d86:	2b01      	cmp	r3, #1
    6d88:	d103      	bne.n	6d92 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6d8a:	68fb      	ldr	r3, [r7, #12]
    6d8c:	68ba      	ldr	r2, [r7, #8]
    6d8e:	619a      	str	r2, [r3, #24]
    6d90:	e002      	b.n	6d98 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    6d92:	68fb      	ldr	r3, [r7, #12]
    6d94:	68ba      	ldr	r2, [r7, #8]
    6d96:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6d98:	687b      	ldr	r3, [r7, #4]
    6d9a:	785b      	ldrb	r3, [r3, #1]
    6d9c:	2b01      	cmp	r3, #1
    6d9e:	d003      	beq.n	6da8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6da0:	687b      	ldr	r3, [r7, #4]
    6da2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6da4:	2b02      	cmp	r3, #2
    6da6:	d102      	bne.n	6dae <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6da8:	68fb      	ldr	r3, [r7, #12]
    6daa:	68ba      	ldr	r2, [r7, #8]
    6dac:	609a      	str	r2, [r3, #8]
		}
	}
}
    6dae:	46c0      	nop			; (mov r8, r8)
    6db0:	46bd      	mov	sp, r7
    6db2:	b008      	add	sp, #32
    6db4:	bd80      	pop	{r7, pc}
    6db6:	46c0      	nop			; (mov r8, r8)
    6db8:	fffbffff 	.word	0xfffbffff

00006dbc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6dbc:	b580      	push	{r7, lr}
    6dbe:	b084      	sub	sp, #16
    6dc0:	af00      	add	r7, sp, #0
    6dc2:	0002      	movs	r2, r0
    6dc4:	6039      	str	r1, [r7, #0]
    6dc6:	1dfb      	adds	r3, r7, #7
    6dc8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6dca:	1dfb      	adds	r3, r7, #7
    6dcc:	781b      	ldrb	r3, [r3, #0]
    6dce:	0018      	movs	r0, r3
    6dd0:	4b0a      	ldr	r3, [pc, #40]	; (6dfc <system_pinmux_pin_set_config+0x40>)
    6dd2:	4798      	blx	r3
    6dd4:	0003      	movs	r3, r0
    6dd6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6dd8:	1dfb      	adds	r3, r7, #7
    6dda:	781b      	ldrb	r3, [r3, #0]
    6ddc:	221f      	movs	r2, #31
    6dde:	4013      	ands	r3, r2
    6de0:	2201      	movs	r2, #1
    6de2:	409a      	lsls	r2, r3
    6de4:	0013      	movs	r3, r2
    6de6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6de8:	683a      	ldr	r2, [r7, #0]
    6dea:	68b9      	ldr	r1, [r7, #8]
    6dec:	68fb      	ldr	r3, [r7, #12]
    6dee:	0018      	movs	r0, r3
    6df0:	4b03      	ldr	r3, [pc, #12]	; (6e00 <system_pinmux_pin_set_config+0x44>)
    6df2:	4798      	blx	r3
}
    6df4:	46c0      	nop			; (mov r8, r8)
    6df6:	46bd      	mov	sp, r7
    6df8:	b004      	add	sp, #16
    6dfa:	bd80      	pop	{r7, pc}
    6dfc:	00006c4d 	.word	0x00006c4d
    6e00:	00006cad 	.word	0x00006cad

00006e04 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6e04:	b580      	push	{r7, lr}
    6e06:	af00      	add	r7, sp, #0
	return;
    6e08:	46c0      	nop			; (mov r8, r8)
}
    6e0a:	46bd      	mov	sp, r7
    6e0c:	bd80      	pop	{r7, pc}
	...

00006e10 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6e10:	b580      	push	{r7, lr}
    6e12:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6e14:	4b06      	ldr	r3, [pc, #24]	; (6e30 <system_init+0x20>)
    6e16:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6e18:	4b06      	ldr	r3, [pc, #24]	; (6e34 <system_init+0x24>)
    6e1a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6e1c:	4b06      	ldr	r3, [pc, #24]	; (6e38 <system_init+0x28>)
    6e1e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6e20:	4b06      	ldr	r3, [pc, #24]	; (6e3c <system_init+0x2c>)
    6e22:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6e24:	4b06      	ldr	r3, [pc, #24]	; (6e40 <system_init+0x30>)
    6e26:	4798      	blx	r3
}
    6e28:	46c0      	nop			; (mov r8, r8)
    6e2a:	46bd      	mov	sp, r7
    6e2c:	bd80      	pop	{r7, pc}
    6e2e:	46c0      	nop			; (mov r8, r8)
    6e30:	00006535 	.word	0x00006535
    6e34:	000002f9 	.word	0x000002f9
    6e38:	00006e05 	.word	0x00006e05
    6e3c:	00006e05 	.word	0x00006e05
    6e40:	00006e05 	.word	0x00006e05

00006e44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6e44:	b580      	push	{r7, lr}
    6e46:	b082      	sub	sp, #8
    6e48:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6e4a:	4b2f      	ldr	r3, [pc, #188]	; (6f08 <Reset_Handler+0xc4>)
    6e4c:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6e4e:	4b2f      	ldr	r3, [pc, #188]	; (6f0c <Reset_Handler+0xc8>)
    6e50:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6e52:	687a      	ldr	r2, [r7, #4]
    6e54:	683b      	ldr	r3, [r7, #0]
    6e56:	429a      	cmp	r2, r3
    6e58:	d00c      	beq.n	6e74 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6e5a:	e007      	b.n	6e6c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6e5c:	683b      	ldr	r3, [r7, #0]
    6e5e:	1d1a      	adds	r2, r3, #4
    6e60:	603a      	str	r2, [r7, #0]
    6e62:	687a      	ldr	r2, [r7, #4]
    6e64:	1d11      	adds	r1, r2, #4
    6e66:	6079      	str	r1, [r7, #4]
    6e68:	6812      	ldr	r2, [r2, #0]
    6e6a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    6e6c:	683a      	ldr	r2, [r7, #0]
    6e6e:	4b28      	ldr	r3, [pc, #160]	; (6f10 <Reset_Handler+0xcc>)
    6e70:	429a      	cmp	r2, r3
    6e72:	d3f3      	bcc.n	6e5c <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6e74:	4b27      	ldr	r3, [pc, #156]	; (6f14 <Reset_Handler+0xd0>)
    6e76:	603b      	str	r3, [r7, #0]
    6e78:	e004      	b.n	6e84 <Reset_Handler+0x40>
                *pDest++ = 0;
    6e7a:	683b      	ldr	r3, [r7, #0]
    6e7c:	1d1a      	adds	r2, r3, #4
    6e7e:	603a      	str	r2, [r7, #0]
    6e80:	2200      	movs	r2, #0
    6e82:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    6e84:	683a      	ldr	r2, [r7, #0]
    6e86:	4b24      	ldr	r3, [pc, #144]	; (6f18 <Reset_Handler+0xd4>)
    6e88:	429a      	cmp	r2, r3
    6e8a:	d3f6      	bcc.n	6e7a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6e8c:	4b23      	ldr	r3, [pc, #140]	; (6f1c <Reset_Handler+0xd8>)
    6e8e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6e90:	4b23      	ldr	r3, [pc, #140]	; (6f20 <Reset_Handler+0xdc>)
    6e92:	687a      	ldr	r2, [r7, #4]
    6e94:	21ff      	movs	r1, #255	; 0xff
    6e96:	438a      	bics	r2, r1
    6e98:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6e9a:	4a22      	ldr	r2, [pc, #136]	; (6f24 <Reset_Handler+0xe0>)
    6e9c:	2390      	movs	r3, #144	; 0x90
    6e9e:	005b      	lsls	r3, r3, #1
    6ea0:	2102      	movs	r1, #2
    6ea2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6ea4:	4a20      	ldr	r2, [pc, #128]	; (6f28 <Reset_Handler+0xe4>)
    6ea6:	78d3      	ldrb	r3, [r2, #3]
    6ea8:	2103      	movs	r1, #3
    6eaa:	438b      	bics	r3, r1
    6eac:	1c19      	adds	r1, r3, #0
    6eae:	2302      	movs	r3, #2
    6eb0:	430b      	orrs	r3, r1
    6eb2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6eb4:	4a1c      	ldr	r2, [pc, #112]	; (6f28 <Reset_Handler+0xe4>)
    6eb6:	78d3      	ldrb	r3, [r2, #3]
    6eb8:	210c      	movs	r1, #12
    6eba:	438b      	bics	r3, r1
    6ebc:	1c19      	adds	r1, r3, #0
    6ebe:	2308      	movs	r3, #8
    6ec0:	430b      	orrs	r3, r1
    6ec2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6ec4:	4a19      	ldr	r2, [pc, #100]	; (6f2c <Reset_Handler+0xe8>)
    6ec6:	7b93      	ldrb	r3, [r2, #14]
    6ec8:	2130      	movs	r1, #48	; 0x30
    6eca:	438b      	bics	r3, r1
    6ecc:	1c19      	adds	r1, r3, #0
    6ece:	2320      	movs	r3, #32
    6ed0:	430b      	orrs	r3, r1
    6ed2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6ed4:	4a15      	ldr	r2, [pc, #84]	; (6f2c <Reset_Handler+0xe8>)
    6ed6:	7b93      	ldrb	r3, [r2, #14]
    6ed8:	210c      	movs	r1, #12
    6eda:	438b      	bics	r3, r1
    6edc:	1c19      	adds	r1, r3, #0
    6ede:	2308      	movs	r3, #8
    6ee0:	430b      	orrs	r3, r1
    6ee2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6ee4:	4a11      	ldr	r2, [pc, #68]	; (6f2c <Reset_Handler+0xe8>)
    6ee6:	7b93      	ldrb	r3, [r2, #14]
    6ee8:	2103      	movs	r1, #3
    6eea:	438b      	bics	r3, r1
    6eec:	1c19      	adds	r1, r3, #0
    6eee:	2302      	movs	r3, #2
    6ef0:	430b      	orrs	r3, r1
    6ef2:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6ef4:	4a0e      	ldr	r2, [pc, #56]	; (6f30 <Reset_Handler+0xec>)
    6ef6:	6853      	ldr	r3, [r2, #4]
    6ef8:	2180      	movs	r1, #128	; 0x80
    6efa:	430b      	orrs	r3, r1
    6efc:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6efe:	4b0d      	ldr	r3, [pc, #52]	; (6f34 <Reset_Handler+0xf0>)
    6f00:	4798      	blx	r3

        /* Branch to main function */
        main();
    6f02:	4b0d      	ldr	r3, [pc, #52]	; (6f38 <Reset_Handler+0xf4>)
    6f04:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6f06:	e7fe      	b.n	6f06 <Reset_Handler+0xc2>
    6f08:	0000cfa4 	.word	0x0000cfa4
    6f0c:	20000000 	.word	0x20000000
    6f10:	200000a8 	.word	0x200000a8
    6f14:	200000a8 	.word	0x200000a8
    6f18:	20000ce8 	.word	0x20000ce8
    6f1c:	00000000 	.word	0x00000000
    6f20:	e000ed00 	.word	0xe000ed00
    6f24:	41007000 	.word	0x41007000
    6f28:	41005000 	.word	0x41005000
    6f2c:	41004800 	.word	0x41004800
    6f30:	41004000 	.word	0x41004000
    6f34:	0000bac9 	.word	0x0000bac9
    6f38:	0000b01d 	.word	0x0000b01d

00006f3c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6f3c:	b580      	push	{r7, lr}
    6f3e:	af00      	add	r7, sp, #0
        while (1) {
    6f40:	e7fe      	b.n	6f40 <Dummy_Handler+0x4>
	...

00006f44 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6f44:	b580      	push	{r7, lr}
    6f46:	b086      	sub	sp, #24
    6f48:	af00      	add	r7, sp, #0
    6f4a:	60f8      	str	r0, [r7, #12]
    6f4c:	60b9      	str	r1, [r7, #8]
    6f4e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6f50:	2300      	movs	r3, #0
    6f52:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6f54:	68fb      	ldr	r3, [r7, #12]
    6f56:	2b00      	cmp	r3, #0
    6f58:	d012      	beq.n	6f80 <_read+0x3c>
		return -1;
    6f5a:	2301      	movs	r3, #1
    6f5c:	425b      	negs	r3, r3
    6f5e:	e013      	b.n	6f88 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6f60:	4b0b      	ldr	r3, [pc, #44]	; (6f90 <_read+0x4c>)
    6f62:	681a      	ldr	r2, [r3, #0]
    6f64:	4b0b      	ldr	r3, [pc, #44]	; (6f94 <_read+0x50>)
    6f66:	681b      	ldr	r3, [r3, #0]
    6f68:	68b9      	ldr	r1, [r7, #8]
    6f6a:	0018      	movs	r0, r3
    6f6c:	4790      	blx	r2
		ptr++;
    6f6e:	68bb      	ldr	r3, [r7, #8]
    6f70:	3301      	adds	r3, #1
    6f72:	60bb      	str	r3, [r7, #8]
		nChars++;
    6f74:	697b      	ldr	r3, [r7, #20]
    6f76:	3301      	adds	r3, #1
    6f78:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    6f7a:	687b      	ldr	r3, [r7, #4]
    6f7c:	3b01      	subs	r3, #1
    6f7e:	607b      	str	r3, [r7, #4]
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	2b00      	cmp	r3, #0
    6f84:	dcec      	bgt.n	6f60 <_read+0x1c>
	}
	return nChars;
    6f86:	697b      	ldr	r3, [r7, #20]
}
    6f88:	0018      	movs	r0, r3
    6f8a:	46bd      	mov	sp, r7
    6f8c:	b006      	add	sp, #24
    6f8e:	bd80      	pop	{r7, pc}
    6f90:	20000a24 	.word	0x20000a24
    6f94:	20000a2c 	.word	0x20000a2c

00006f98 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6f98:	b580      	push	{r7, lr}
    6f9a:	b086      	sub	sp, #24
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	60f8      	str	r0, [r7, #12]
    6fa0:	60b9      	str	r1, [r7, #8]
    6fa2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6fa4:	2300      	movs	r3, #0
    6fa6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6fa8:	68fb      	ldr	r3, [r7, #12]
    6faa:	2b01      	cmp	r3, #1
    6fac:	d01d      	beq.n	6fea <_write+0x52>
    6fae:	68fb      	ldr	r3, [r7, #12]
    6fb0:	2b02      	cmp	r3, #2
    6fb2:	d01a      	beq.n	6fea <_write+0x52>
    6fb4:	68fb      	ldr	r3, [r7, #12]
    6fb6:	2b03      	cmp	r3, #3
    6fb8:	d017      	beq.n	6fea <_write+0x52>
		return -1;
    6fba:	2301      	movs	r3, #1
    6fbc:	425b      	negs	r3, r3
    6fbe:	e018      	b.n	6ff2 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6fc0:	4b0e      	ldr	r3, [pc, #56]	; (6ffc <_write+0x64>)
    6fc2:	681a      	ldr	r2, [r3, #0]
    6fc4:	4b0e      	ldr	r3, [pc, #56]	; (7000 <_write+0x68>)
    6fc6:	6818      	ldr	r0, [r3, #0]
    6fc8:	68bb      	ldr	r3, [r7, #8]
    6fca:	1c59      	adds	r1, r3, #1
    6fcc:	60b9      	str	r1, [r7, #8]
    6fce:	781b      	ldrb	r3, [r3, #0]
    6fd0:	0019      	movs	r1, r3
    6fd2:	4790      	blx	r2
    6fd4:	1e03      	subs	r3, r0, #0
    6fd6:	da02      	bge.n	6fde <_write+0x46>
			return -1;
    6fd8:	2301      	movs	r3, #1
    6fda:	425b      	negs	r3, r3
    6fdc:	e009      	b.n	6ff2 <_write+0x5a>
		}
		++nChars;
    6fde:	697b      	ldr	r3, [r7, #20]
    6fe0:	3301      	adds	r3, #1
    6fe2:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6fe4:	687b      	ldr	r3, [r7, #4]
    6fe6:	3b01      	subs	r3, #1
    6fe8:	607b      	str	r3, [r7, #4]
    6fea:	687b      	ldr	r3, [r7, #4]
    6fec:	2b00      	cmp	r3, #0
    6fee:	d1e7      	bne.n	6fc0 <_write+0x28>
	}
	return nChars;
    6ff0:	697b      	ldr	r3, [r7, #20]
}
    6ff2:	0018      	movs	r0, r3
    6ff4:	46bd      	mov	sp, r7
    6ff6:	b006      	add	sp, #24
    6ff8:	bd80      	pop	{r7, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	20000a28 	.word	0x20000a28
    7000:	20000a2c 	.word	0x20000a2c

00007004 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    7004:	b580      	push	{r7, lr}
    7006:	b084      	sub	sp, #16
    7008:	af00      	add	r7, sp, #0
    700a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    700c:	4b0a      	ldr	r3, [pc, #40]	; (7038 <_sbrk+0x34>)
    700e:	681b      	ldr	r3, [r3, #0]
    7010:	2b00      	cmp	r3, #0
    7012:	d102      	bne.n	701a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    7014:	4b08      	ldr	r3, [pc, #32]	; (7038 <_sbrk+0x34>)
    7016:	4a09      	ldr	r2, [pc, #36]	; (703c <_sbrk+0x38>)
    7018:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    701a:	4b07      	ldr	r3, [pc, #28]	; (7038 <_sbrk+0x34>)
    701c:	681b      	ldr	r3, [r3, #0]
    701e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    7020:	4b05      	ldr	r3, [pc, #20]	; (7038 <_sbrk+0x34>)
    7022:	681a      	ldr	r2, [r3, #0]
    7024:	687b      	ldr	r3, [r7, #4]
    7026:	18d2      	adds	r2, r2, r3
    7028:	4b03      	ldr	r3, [pc, #12]	; (7038 <_sbrk+0x34>)
    702a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    702c:	68fb      	ldr	r3, [r7, #12]
}
    702e:	0018      	movs	r0, r3
    7030:	46bd      	mov	sp, r7
    7032:	b004      	add	sp, #16
    7034:	bd80      	pop	{r7, pc}
    7036:	46c0      	nop			; (mov r8, r8)
    7038:	2000018c 	.word	0x2000018c
    703c:	20002ce8 	.word	0x20002ce8

00007040 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    7040:	b580      	push	{r7, lr}
    7042:	b082      	sub	sp, #8
    7044:	af00      	add	r7, sp, #0
    7046:	6078      	str	r0, [r7, #4]
	return -1;
    7048:	2301      	movs	r3, #1
    704a:	425b      	negs	r3, r3
}
    704c:	0018      	movs	r0, r3
    704e:	46bd      	mov	sp, r7
    7050:	b002      	add	sp, #8
    7052:	bd80      	pop	{r7, pc}

00007054 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    7054:	b580      	push	{r7, lr}
    7056:	b082      	sub	sp, #8
    7058:	af00      	add	r7, sp, #0
    705a:	6078      	str	r0, [r7, #4]
    705c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    705e:	683b      	ldr	r3, [r7, #0]
    7060:	2280      	movs	r2, #128	; 0x80
    7062:	0192      	lsls	r2, r2, #6
    7064:	605a      	str	r2, [r3, #4]

	return 0;
    7066:	2300      	movs	r3, #0
}
    7068:	0018      	movs	r0, r3
    706a:	46bd      	mov	sp, r7
    706c:	b002      	add	sp, #8
    706e:	bd80      	pop	{r7, pc}

00007070 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    7070:	b580      	push	{r7, lr}
    7072:	b084      	sub	sp, #16
    7074:	af00      	add	r7, sp, #0
    7076:	60f8      	str	r0, [r7, #12]
    7078:	60b9      	str	r1, [r7, #8]
    707a:	607a      	str	r2, [r7, #4]
	return 0;
    707c:	2300      	movs	r3, #0
}
    707e:	0018      	movs	r0, r3
    7080:	46bd      	mov	sp, r7
    7082:	b004      	add	sp, #16
    7084:	bd80      	pop	{r7, pc}

00007086 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    7086:	b580      	push	{r7, lr}
    7088:	b082      	sub	sp, #8
    708a:	af00      	add	r7, sp, #0
    708c:	6078      	str	r0, [r7, #4]
	time->second = 0;
    708e:	687b      	ldr	r3, [r7, #4]
    7090:	2200      	movs	r2, #0
    7092:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	2200      	movs	r2, #0
    7098:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    709a:	687b      	ldr	r3, [r7, #4]
    709c:	2200      	movs	r2, #0
    709e:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    70a0:	687b      	ldr	r3, [r7, #4]
    70a2:	2200      	movs	r2, #0
    70a4:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    70a6:	687b      	ldr	r3, [r7, #4]
    70a8:	2201      	movs	r2, #1
    70aa:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    70ac:	687b      	ldr	r3, [r7, #4]
    70ae:	2201      	movs	r2, #1
    70b0:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    70b2:	687b      	ldr	r3, [r7, #4]
    70b4:	22fa      	movs	r2, #250	; 0xfa
    70b6:	00d2      	lsls	r2, r2, #3
    70b8:	80da      	strh	r2, [r3, #6]
}
    70ba:	46c0      	nop			; (mov r8, r8)
    70bc:	46bd      	mov	sp, r7
    70be:	b002      	add	sp, #8
    70c0:	bd80      	pop	{r7, pc}
	...

000070c4 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    70c4:	b580      	push	{r7, lr}
    70c6:	b086      	sub	sp, #24
    70c8:	af00      	add	r7, sp, #0
    70ca:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    70cc:	230c      	movs	r3, #12
    70ce:	18fb      	adds	r3, r7, r3
    70d0:	0018      	movs	r0, r3
    70d2:	4b23      	ldr	r3, [pc, #140]	; (7160 <rtc_calendar_get_config_defaults+0x9c>)
    70d4:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    70d6:	687b      	ldr	r3, [r7, #4]
    70d8:	22a0      	movs	r2, #160	; 0xa0
    70da:	0112      	lsls	r2, r2, #4
    70dc:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	2200      	movs	r2, #0
    70e2:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    70e4:	687b      	ldr	r3, [r7, #4]
    70e6:	2200      	movs	r2, #0
    70e8:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	2200      	movs	r2, #0
    70ee:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    70f0:	687b      	ldr	r3, [r7, #4]
    70f2:	22fa      	movs	r2, #250	; 0xfa
    70f4:	00d2      	lsls	r2, r2, #3
    70f6:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    70f8:	2317      	movs	r3, #23
    70fa:	18fb      	adds	r3, r7, r3
    70fc:	2200      	movs	r2, #0
    70fe:	701a      	strb	r2, [r3, #0]
    7100:	e025      	b.n	714e <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    7102:	2317      	movs	r3, #23
    7104:	18fb      	adds	r3, r7, r3
    7106:	781a      	ldrb	r2, [r3, #0]
    7108:	6879      	ldr	r1, [r7, #4]
    710a:	2008      	movs	r0, #8
    710c:	0013      	movs	r3, r2
    710e:	009b      	lsls	r3, r3, #2
    7110:	189b      	adds	r3, r3, r2
    7112:	005b      	lsls	r3, r3, #1
    7114:	18cb      	adds	r3, r1, r3
    7116:	181a      	adds	r2, r3, r0
    7118:	230c      	movs	r3, #12
    711a:	18fb      	adds	r3, r7, r3
    711c:	0010      	movs	r0, r2
    711e:	0019      	movs	r1, r3
    7120:	2308      	movs	r3, #8
    7122:	001a      	movs	r2, r3
    7124:	4b0f      	ldr	r3, [pc, #60]	; (7164 <rtc_calendar_get_config_defaults+0xa0>)
    7126:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    7128:	2317      	movs	r3, #23
    712a:	18fb      	adds	r3, r7, r3
    712c:	781a      	ldrb	r2, [r3, #0]
    712e:	6879      	ldr	r1, [r7, #4]
    7130:	0013      	movs	r3, r2
    7132:	009b      	lsls	r3, r3, #2
    7134:	189b      	adds	r3, r3, r2
    7136:	005b      	lsls	r3, r3, #1
    7138:	18cb      	adds	r3, r1, r3
    713a:	3310      	adds	r3, #16
    713c:	2206      	movs	r2, #6
    713e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    7140:	2317      	movs	r3, #23
    7142:	18fb      	adds	r3, r7, r3
    7144:	781a      	ldrb	r2, [r3, #0]
    7146:	2317      	movs	r3, #23
    7148:	18fb      	adds	r3, r7, r3
    714a:	3201      	adds	r2, #1
    714c:	701a      	strb	r2, [r3, #0]
    714e:	2317      	movs	r3, #23
    7150:	18fb      	adds	r3, r7, r3
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	2b00      	cmp	r3, #0
    7156:	d0d4      	beq.n	7102 <rtc_calendar_get_config_defaults+0x3e>
	}
}
    7158:	46c0      	nop			; (mov r8, r8)
    715a:	46bd      	mov	sp, r7
    715c:	b006      	add	sp, #24
    715e:	bd80      	pop	{r7, pc}
    7160:	00007087 	.word	0x00007087
    7164:	0000bb25 	.word	0x0000bb25

00007168 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    7168:	b580      	push	{r7, lr}
    716a:	b088      	sub	sp, #32
    716c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    716e:	230c      	movs	r3, #12
    7170:	18fb      	adds	r3, r7, r3
    7172:	0018      	movs	r0, r3
    7174:	4b1a      	ldr	r3, [pc, #104]	; (71e0 <configure_rtc_calendar+0x78>)
    7176:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    7178:	1d3b      	adds	r3, r7, #4
    717a:	0018      	movs	r0, r3
    717c:	4b19      	ldr	r3, [pc, #100]	; (71e4 <configure_rtc_calendar+0x7c>)
    717e:	4798      	blx	r3
	init_time.year   = 2014;
    7180:	1d3b      	adds	r3, r7, #4
    7182:	4a19      	ldr	r2, [pc, #100]	; (71e8 <configure_rtc_calendar+0x80>)
    7184:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    7186:	1d3b      	adds	r3, r7, #4
    7188:	2201      	movs	r2, #1
    718a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    718c:	1d3b      	adds	r3, r7, #4
    718e:	2201      	movs	r2, #1
    7190:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    7192:	1d3b      	adds	r3, r7, #4
    7194:	2200      	movs	r2, #0
    7196:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    7198:	1d3b      	adds	r3, r7, #4
    719a:	2200      	movs	r2, #0
    719c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    719e:	1d3b      	adds	r3, r7, #4
    71a0:	2204      	movs	r2, #4
    71a2:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    71a4:	230c      	movs	r3, #12
    71a6:	18fb      	adds	r3, r7, r3
    71a8:	2201      	movs	r2, #1
    71aa:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    71ac:	230c      	movs	r3, #12
    71ae:	18fb      	adds	r3, r7, r3
    71b0:	1d3a      	adds	r2, r7, #4
    71b2:	3308      	adds	r3, #8
    71b4:	ca03      	ldmia	r2!, {r0, r1}
    71b6:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    71b8:	230c      	movs	r3, #12
    71ba:	18fb      	adds	r3, r7, r3
    71bc:	2206      	movs	r2, #6
    71be:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    71c0:	230c      	movs	r3, #12
    71c2:	18fa      	adds	r2, r7, r3
    71c4:	4909      	ldr	r1, [pc, #36]	; (71ec <configure_rtc_calendar+0x84>)
    71c6:	4b0a      	ldr	r3, [pc, #40]	; (71f0 <configure_rtc_calendar+0x88>)
    71c8:	0018      	movs	r0, r3
    71ca:	4b0a      	ldr	r3, [pc, #40]	; (71f4 <configure_rtc_calendar+0x8c>)
    71cc:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    71ce:	4b08      	ldr	r3, [pc, #32]	; (71f0 <configure_rtc_calendar+0x88>)
    71d0:	0018      	movs	r0, r3
    71d2:	4b09      	ldr	r3, [pc, #36]	; (71f8 <configure_rtc_calendar+0x90>)
    71d4:	4798      	blx	r3
}
    71d6:	46c0      	nop			; (mov r8, r8)
    71d8:	46bd      	mov	sp, r7
    71da:	b008      	add	sp, #32
    71dc:	bd80      	pop	{r7, pc}
    71de:	46c0      	nop			; (mov r8, r8)
    71e0:	000070c5 	.word	0x000070c5
    71e4:	00007087 	.word	0x00007087
    71e8:	000007de 	.word	0x000007de
    71ec:	40001400 	.word	0x40001400
    71f0:	20000a30 	.word	0x20000a30
    71f4:	000038ad 	.word	0x000038ad
    71f8:	000035fd 	.word	0x000035fd

000071fc <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    71fc:	b590      	push	{r4, r7, lr}
    71fe:	b085      	sub	sp, #20
    7200:	af00      	add	r7, sp, #0
    7202:	0002      	movs	r2, r0
    7204:	1dfb      	adds	r3, r7, #7
    7206:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    7208:	4b1a      	ldr	r3, [pc, #104]	; (7274 <disk_initialize+0x78>)
    720a:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    720c:	1dfb      	adds	r3, r7, #7
    720e:	781b      	ldrb	r3, [r3, #0]
    7210:	2b01      	cmp	r3, #1
    7212:	d901      	bls.n	7218 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    7214:	2301      	movs	r3, #1
    7216:	e029      	b.n	726c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    7218:	2300      	movs	r3, #0
    721a:	60fb      	str	r3, [r7, #12]
    721c:	e010      	b.n	7240 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    721e:	230b      	movs	r3, #11
    7220:	18fc      	adds	r4, r7, r3
    7222:	1dfb      	adds	r3, r7, #7
    7224:	781b      	ldrb	r3, [r3, #0]
    7226:	0018      	movs	r0, r3
    7228:	4b13      	ldr	r3, [pc, #76]	; (7278 <disk_initialize+0x7c>)
    722a:	4798      	blx	r3
    722c:	0003      	movs	r3, r0
    722e:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    7230:	230b      	movs	r3, #11
    7232:	18fb      	adds	r3, r7, r3
    7234:	781b      	ldrb	r3, [r3, #0]
    7236:	2b03      	cmp	r3, #3
    7238:	d106      	bne.n	7248 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    723a:	68fb      	ldr	r3, [r7, #12]
    723c:	3301      	adds	r3, #1
    723e:	60fb      	str	r3, [r7, #12]
    7240:	68fb      	ldr	r3, [r7, #12]
    7242:	2b01      	cmp	r3, #1
    7244:	ddeb      	ble.n	721e <disk_initialize+0x22>
    7246:	e000      	b.n	724a <disk_initialize+0x4e>
			break;
    7248:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    724a:	230b      	movs	r3, #11
    724c:	18fb      	adds	r3, r7, r3
    724e:	781b      	ldrb	r3, [r3, #0]
    7250:	2b00      	cmp	r3, #0
    7252:	d001      	beq.n	7258 <disk_initialize+0x5c>
		return STA_NOINIT;
    7254:	2301      	movs	r3, #1
    7256:	e009      	b.n	726c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    7258:	1dfb      	adds	r3, r7, #7
    725a:	781b      	ldrb	r3, [r3, #0]
    725c:	0018      	movs	r0, r3
    725e:	4b07      	ldr	r3, [pc, #28]	; (727c <disk_initialize+0x80>)
    7260:	4798      	blx	r3
    7262:	1e03      	subs	r3, r0, #0
    7264:	d001      	beq.n	726a <disk_initialize+0x6e>
		return STA_PROTECT;
    7266:	2304      	movs	r3, #4
    7268:	e000      	b.n	726c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    726a:	2300      	movs	r3, #0
}
    726c:	0018      	movs	r0, r3
    726e:	46bd      	mov	sp, r7
    7270:	b005      	add	sp, #20
    7272:	bd90      	pop	{r4, r7, pc}
    7274:	00007169 	.word	0x00007169
    7278:	0000329d 	.word	0x0000329d
    727c:	00003355 	.word	0x00003355

00007280 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    7280:	b580      	push	{r7, lr}
    7282:	b082      	sub	sp, #8
    7284:	af00      	add	r7, sp, #0
    7286:	0002      	movs	r2, r0
    7288:	1dfb      	adds	r3, r7, #7
    728a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    728c:	1dfb      	adds	r3, r7, #7
    728e:	781b      	ldrb	r3, [r3, #0]
    7290:	0018      	movs	r0, r3
    7292:	4b08      	ldr	r3, [pc, #32]	; (72b4 <disk_status+0x34>)
    7294:	4798      	blx	r3
    7296:	1e03      	subs	r3, r0, #0
    7298:	d002      	beq.n	72a0 <disk_status+0x20>
    729a:	2b02      	cmp	r3, #2
    729c:	d002      	beq.n	72a4 <disk_status+0x24>
    729e:	e003      	b.n	72a8 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    72a0:	2300      	movs	r3, #0
    72a2:	e002      	b.n	72aa <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    72a4:	2303      	movs	r3, #3
    72a6:	e000      	b.n	72aa <disk_status+0x2a>
	default:
		return STA_NOINIT;
    72a8:	2301      	movs	r3, #1
	}
}
    72aa:	0018      	movs	r0, r3
    72ac:	46bd      	mov	sp, r7
    72ae:	b002      	add	sp, #8
    72b0:	bd80      	pop	{r7, pc}
    72b2:	46c0      	nop			; (mov r8, r8)
    72b4:	0000329d 	.word	0x0000329d

000072b8 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    72b8:	b590      	push	{r4, r7, lr}
    72ba:	b089      	sub	sp, #36	; 0x24
    72bc:	af00      	add	r7, sp, #0
    72be:	60b9      	str	r1, [r7, #8]
    72c0:	607a      	str	r2, [r7, #4]
    72c2:	0019      	movs	r1, r3
    72c4:	230f      	movs	r3, #15
    72c6:	18fb      	adds	r3, r7, r3
    72c8:	1c02      	adds	r2, r0, #0
    72ca:	701a      	strb	r2, [r3, #0]
    72cc:	230e      	movs	r3, #14
    72ce:	18fb      	adds	r3, r7, r3
    72d0:	1c0a      	adds	r2, r1, #0
    72d2:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    72d4:	231b      	movs	r3, #27
    72d6:	18fc      	adds	r4, r7, r3
    72d8:	230f      	movs	r3, #15
    72da:	18fb      	adds	r3, r7, r3
    72dc:	781b      	ldrb	r3, [r3, #0]
    72de:	0018      	movs	r0, r3
    72e0:	4b28      	ldr	r3, [pc, #160]	; (7384 <disk_read+0xcc>)
    72e2:	4798      	blx	r3
    72e4:	0003      	movs	r3, r0
    72e6:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    72e8:	231b      	movs	r3, #27
    72ea:	18fb      	adds	r3, r7, r3
    72ec:	781b      	ldrb	r3, [r3, #0]
    72ee:	2b00      	cmp	r3, #0
    72f0:	d101      	bne.n	72f6 <disk_read+0x3e>
		return RES_ERROR;
    72f2:	2301      	movs	r3, #1
    72f4:	e042      	b.n	737c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    72f6:	2314      	movs	r3, #20
    72f8:	18fa      	adds	r2, r7, r3
    72fa:	230f      	movs	r3, #15
    72fc:	18fb      	adds	r3, r7, r3
    72fe:	781b      	ldrb	r3, [r3, #0]
    7300:	0011      	movs	r1, r2
    7302:	0018      	movs	r0, r3
    7304:	4b20      	ldr	r3, [pc, #128]	; (7388 <disk_read+0xd0>)
    7306:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    7308:	230e      	movs	r3, #14
    730a:	18fb      	adds	r3, r7, r3
    730c:	781b      	ldrb	r3, [r3, #0]
    730e:	221b      	movs	r2, #27
    7310:	18ba      	adds	r2, r7, r2
    7312:	7812      	ldrb	r2, [r2, #0]
    7314:	4353      	muls	r3, r2
    7316:	001a      	movs	r2, r3
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    731c:	697b      	ldr	r3, [r7, #20]
    731e:	3301      	adds	r3, #1
    7320:	211b      	movs	r1, #27
    7322:	1879      	adds	r1, r7, r1
    7324:	7809      	ldrb	r1, [r1, #0]
    7326:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    7328:	429a      	cmp	r2, r3
    732a:	d901      	bls.n	7330 <disk_read+0x78>
		return RES_PARERR;
    732c:	2304      	movs	r3, #4
    732e:	e025      	b.n	737c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    7330:	2300      	movs	r3, #0
    7332:	61fb      	str	r3, [r7, #28]
    7334:	e01b      	b.n	736e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    7336:	231b      	movs	r3, #27
    7338:	18fb      	adds	r3, r7, r3
    733a:	781b      	ldrb	r3, [r3, #0]
    733c:	69fa      	ldr	r2, [r7, #28]
    733e:	435a      	muls	r2, r3
    7340:	687b      	ldr	r3, [r7, #4]
    7342:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    7344:	231b      	movs	r3, #27
    7346:	18fb      	adds	r3, r7, r3
    7348:	781b      	ldrb	r3, [r3, #0]
    734a:	69fa      	ldr	r2, [r7, #28]
    734c:	4353      	muls	r3, r2
    734e:	025b      	lsls	r3, r3, #9
    7350:	68ba      	ldr	r2, [r7, #8]
    7352:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    7354:	230f      	movs	r3, #15
    7356:	18fb      	adds	r3, r7, r3
    7358:	781b      	ldrb	r3, [r3, #0]
    735a:	0018      	movs	r0, r3
    735c:	4b0b      	ldr	r3, [pc, #44]	; (738c <disk_read+0xd4>)
    735e:	4798      	blx	r3
    7360:	1e03      	subs	r3, r0, #0
    7362:	d001      	beq.n	7368 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    7364:	2301      	movs	r3, #1
    7366:	e009      	b.n	737c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    7368:	69fb      	ldr	r3, [r7, #28]
    736a:	3301      	adds	r3, #1
    736c:	61fb      	str	r3, [r7, #28]
    736e:	230e      	movs	r3, #14
    7370:	18fb      	adds	r3, r7, r3
    7372:	781a      	ldrb	r2, [r3, #0]
    7374:	69fb      	ldr	r3, [r7, #28]
    7376:	429a      	cmp	r2, r3
    7378:	d8dd      	bhi.n	7336 <disk_read+0x7e>
		}
	}

	return RES_OK;
    737a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    737c:	0018      	movs	r0, r3
    737e:	46bd      	mov	sp, r7
    7380:	b009      	add	sp, #36	; 0x24
    7382:	bd90      	pop	{r4, r7, pc}
    7384:	00003329 	.word	0x00003329
    7388:	000032dd 	.word	0x000032dd
    738c:	0000339d 	.word	0x0000339d

00007390 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    7390:	b590      	push	{r4, r7, lr}
    7392:	b089      	sub	sp, #36	; 0x24
    7394:	af00      	add	r7, sp, #0
    7396:	60b9      	str	r1, [r7, #8]
    7398:	607a      	str	r2, [r7, #4]
    739a:	0019      	movs	r1, r3
    739c:	230f      	movs	r3, #15
    739e:	18fb      	adds	r3, r7, r3
    73a0:	1c02      	adds	r2, r0, #0
    73a2:	701a      	strb	r2, [r3, #0]
    73a4:	230e      	movs	r3, #14
    73a6:	18fb      	adds	r3, r7, r3
    73a8:	1c0a      	adds	r2, r1, #0
    73aa:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    73ac:	231b      	movs	r3, #27
    73ae:	18fc      	adds	r4, r7, r3
    73b0:	230f      	movs	r3, #15
    73b2:	18fb      	adds	r3, r7, r3
    73b4:	781b      	ldrb	r3, [r3, #0]
    73b6:	0018      	movs	r0, r3
    73b8:	4b28      	ldr	r3, [pc, #160]	; (745c <disk_write+0xcc>)
    73ba:	4798      	blx	r3
    73bc:	0003      	movs	r3, r0
    73be:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    73c0:	231b      	movs	r3, #27
    73c2:	18fb      	adds	r3, r7, r3
    73c4:	781b      	ldrb	r3, [r3, #0]
    73c6:	2b00      	cmp	r3, #0
    73c8:	d101      	bne.n	73ce <disk_write+0x3e>
		return RES_ERROR;
    73ca:	2301      	movs	r3, #1
    73cc:	e042      	b.n	7454 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    73ce:	2314      	movs	r3, #20
    73d0:	18fa      	adds	r2, r7, r3
    73d2:	230f      	movs	r3, #15
    73d4:	18fb      	adds	r3, r7, r3
    73d6:	781b      	ldrb	r3, [r3, #0]
    73d8:	0011      	movs	r1, r2
    73da:	0018      	movs	r0, r3
    73dc:	4b20      	ldr	r3, [pc, #128]	; (7460 <disk_write+0xd0>)
    73de:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    73e0:	230e      	movs	r3, #14
    73e2:	18fb      	adds	r3, r7, r3
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	221b      	movs	r2, #27
    73e8:	18ba      	adds	r2, r7, r2
    73ea:	7812      	ldrb	r2, [r2, #0]
    73ec:	4353      	muls	r3, r2
    73ee:	001a      	movs	r2, r3
    73f0:	687b      	ldr	r3, [r7, #4]
    73f2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    73f4:	697b      	ldr	r3, [r7, #20]
    73f6:	3301      	adds	r3, #1
    73f8:	211b      	movs	r1, #27
    73fa:	1879      	adds	r1, r7, r1
    73fc:	7809      	ldrb	r1, [r1, #0]
    73fe:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    7400:	429a      	cmp	r2, r3
    7402:	d901      	bls.n	7408 <disk_write+0x78>
		return RES_PARERR;
    7404:	2304      	movs	r3, #4
    7406:	e025      	b.n	7454 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    7408:	2300      	movs	r3, #0
    740a:	61fb      	str	r3, [r7, #28]
    740c:	e01b      	b.n	7446 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    740e:	231b      	movs	r3, #27
    7410:	18fb      	adds	r3, r7, r3
    7412:	781b      	ldrb	r3, [r3, #0]
    7414:	69fa      	ldr	r2, [r7, #28]
    7416:	435a      	muls	r2, r3
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    741c:	231b      	movs	r3, #27
    741e:	18fb      	adds	r3, r7, r3
    7420:	781b      	ldrb	r3, [r3, #0]
    7422:	69fa      	ldr	r2, [r7, #28]
    7424:	4353      	muls	r3, r2
    7426:	025b      	lsls	r3, r3, #9
    7428:	68ba      	ldr	r2, [r7, #8]
    742a:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    742c:	230f      	movs	r3, #15
    742e:	18fb      	adds	r3, r7, r3
    7430:	781b      	ldrb	r3, [r3, #0]
    7432:	0018      	movs	r0, r3
    7434:	4b0b      	ldr	r3, [pc, #44]	; (7464 <disk_write+0xd4>)
    7436:	4798      	blx	r3
    7438:	1e03      	subs	r3, r0, #0
    743a:	d001      	beq.n	7440 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    743c:	2301      	movs	r3, #1
    743e:	e009      	b.n	7454 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    7440:	69fb      	ldr	r3, [r7, #28]
    7442:	3301      	adds	r3, #1
    7444:	61fb      	str	r3, [r7, #28]
    7446:	230e      	movs	r3, #14
    7448:	18fb      	adds	r3, r7, r3
    744a:	781a      	ldrb	r2, [r3, #0]
    744c:	69fb      	ldr	r3, [r7, #28]
    744e:	429a      	cmp	r2, r3
    7450:	d8dd      	bhi.n	740e <disk_write+0x7e>
		}
	}

	return RES_OK;
    7452:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    7454:	0018      	movs	r0, r3
    7456:	46bd      	mov	sp, r7
    7458:	b009      	add	sp, #36	; 0x24
    745a:	bd90      	pop	{r4, r7, pc}
    745c:	00003329 	.word	0x00003329
    7460:	000032dd 	.word	0x000032dd
    7464:	000033f1 	.word	0x000033f1

00007468 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    7468:	b590      	push	{r4, r7, lr}
    746a:	b085      	sub	sp, #20
    746c:	af00      	add	r7, sp, #0
    746e:	603a      	str	r2, [r7, #0]
    7470:	1dfb      	adds	r3, r7, #7
    7472:	1c02      	adds	r2, r0, #0
    7474:	701a      	strb	r2, [r3, #0]
    7476:	1dbb      	adds	r3, r7, #6
    7478:	1c0a      	adds	r2, r1, #0
    747a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    747c:	230f      	movs	r3, #15
    747e:	18fb      	adds	r3, r7, r3
    7480:	2204      	movs	r2, #4
    7482:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    7484:	1dbb      	adds	r3, r7, #6
    7486:	781b      	ldrb	r3, [r3, #0]
    7488:	2b01      	cmp	r3, #1
    748a:	d00f      	beq.n	74ac <disk_ioctl+0x44>
    748c:	dc02      	bgt.n	7494 <disk_ioctl+0x2c>
    748e:	2b00      	cmp	r3, #0
    7490:	d044      	beq.n	751c <disk_ioctl+0xb4>
    7492:	e054      	b.n	753e <disk_ioctl+0xd6>
    7494:	2b02      	cmp	r3, #2
    7496:	d01a      	beq.n	74ce <disk_ioctl+0x66>
    7498:	2b03      	cmp	r3, #3
    749a:	d150      	bne.n	753e <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    749c:	683b      	ldr	r3, [r7, #0]
    749e:	2201      	movs	r2, #1
    74a0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    74a2:	230f      	movs	r3, #15
    74a4:	18fb      	adds	r3, r7, r3
    74a6:	2200      	movs	r2, #0
    74a8:	701a      	strb	r2, [r3, #0]
		break;
    74aa:	e04c      	b.n	7546 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    74ac:	2308      	movs	r3, #8
    74ae:	18fa      	adds	r2, r7, r3
    74b0:	1dfb      	adds	r3, r7, #7
    74b2:	781b      	ldrb	r3, [r3, #0]
    74b4:	0011      	movs	r1, r2
    74b6:	0018      	movs	r0, r3
    74b8:	4b26      	ldr	r3, [pc, #152]	; (7554 <disk_ioctl+0xec>)
    74ba:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    74bc:	68bb      	ldr	r3, [r7, #8]
    74be:	1c5a      	adds	r2, r3, #1
    74c0:	683b      	ldr	r3, [r7, #0]
    74c2:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    74c4:	230f      	movs	r3, #15
    74c6:	18fb      	adds	r3, r7, r3
    74c8:	2200      	movs	r2, #0
    74ca:	701a      	strb	r2, [r3, #0]
	}
	break;
    74cc:	e03b      	b.n	7546 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    74ce:	230e      	movs	r3, #14
    74d0:	18fc      	adds	r4, r7, r3
    74d2:	1dfb      	adds	r3, r7, #7
    74d4:	781b      	ldrb	r3, [r3, #0]
    74d6:	0018      	movs	r0, r3
    74d8:	4b1f      	ldr	r3, [pc, #124]	; (7558 <disk_ioctl+0xf0>)
    74da:	4798      	blx	r3
    74dc:	0003      	movs	r3, r0
    74de:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    74e0:	230e      	movs	r3, #14
    74e2:	18fb      	adds	r3, r7, r3
    74e4:	781b      	ldrb	r3, [r3, #0]
    74e6:	2b01      	cmp	r3, #1
    74e8:	d010      	beq.n	750c <disk_ioctl+0xa4>
    74ea:	230e      	movs	r3, #14
    74ec:	18fb      	adds	r3, r7, r3
    74ee:	781b      	ldrb	r3, [r3, #0]
    74f0:	2b02      	cmp	r3, #2
    74f2:	d00b      	beq.n	750c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    74f4:	230e      	movs	r3, #14
    74f6:	18fb      	adds	r3, r7, r3
    74f8:	781b      	ldrb	r3, [r3, #0]
    74fa:	2b04      	cmp	r3, #4
    74fc:	d006      	beq.n	750c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    74fe:	230e      	movs	r3, #14
    7500:	18fb      	adds	r3, r7, r3
    7502:	781b      	ldrb	r3, [r3, #0]
    7504:	2b08      	cmp	r3, #8
    7506:	d001      	beq.n	750c <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    7508:	2301      	movs	r3, #1
    750a:	e01f      	b.n	754c <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    750c:	683b      	ldr	r3, [r7, #0]
    750e:	2200      	movs	r2, #0
    7510:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    7512:	230f      	movs	r3, #15
    7514:	18fb      	adds	r3, r7, r3
    7516:	2200      	movs	r2, #0
    7518:	701a      	strb	r2, [r3, #0]
	}
	break;
    751a:	e014      	b.n	7546 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    751c:	1dfb      	adds	r3, r7, #7
    751e:	781b      	ldrb	r3, [r3, #0]
    7520:	0018      	movs	r0, r3
    7522:	4b0e      	ldr	r3, [pc, #56]	; (755c <disk_ioctl+0xf4>)
    7524:	4798      	blx	r3
    7526:	1e03      	subs	r3, r0, #0
    7528:	d104      	bne.n	7534 <disk_ioctl+0xcc>
			res = RES_OK;
    752a:	230f      	movs	r3, #15
    752c:	18fb      	adds	r3, r7, r3
    752e:	2200      	movs	r2, #0
    7530:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    7532:	e008      	b.n	7546 <disk_ioctl+0xde>
			res = RES_NOTRDY;
    7534:	230f      	movs	r3, #15
    7536:	18fb      	adds	r3, r7, r3
    7538:	2203      	movs	r2, #3
    753a:	701a      	strb	r2, [r3, #0]
		break;
    753c:	e003      	b.n	7546 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    753e:	230f      	movs	r3, #15
    7540:	18fb      	adds	r3, r7, r3
    7542:	2204      	movs	r2, #4
    7544:	701a      	strb	r2, [r3, #0]
	}

	return res;
    7546:	230f      	movs	r3, #15
    7548:	18fb      	adds	r3, r7, r3
    754a:	781b      	ldrb	r3, [r3, #0]
}
    754c:	0018      	movs	r0, r3
    754e:	46bd      	mov	sp, r7
    7550:	b005      	add	sp, #20
    7552:	bd90      	pop	{r4, r7, pc}
    7554:	000032dd 	.word	0x000032dd
    7558:	00003329 	.word	0x00003329
    755c:	0000329d 	.word	0x0000329d

00007560 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    7560:	b580      	push	{r7, lr}
    7562:	b084      	sub	sp, #16
    7564:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    7566:	1d3a      	adds	r2, r7, #4
    7568:	4b12      	ldr	r3, [pc, #72]	; (75b4 <get_fattime+0x54>)
    756a:	0011      	movs	r1, r2
    756c:	0018      	movs	r0, r3
    756e:	4b12      	ldr	r3, [pc, #72]	; (75b8 <get_fattime+0x58>)
    7570:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    7572:	1d3b      	adds	r3, r7, #4
    7574:	88db      	ldrh	r3, [r3, #6]
    7576:	4a11      	ldr	r2, [pc, #68]	; (75bc <get_fattime+0x5c>)
    7578:	4694      	mov	ip, r2
    757a:	4463      	add	r3, ip
    757c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    757e:	1d3b      	adds	r3, r7, #4
    7580:	795b      	ldrb	r3, [r3, #5]
    7582:	055b      	lsls	r3, r3, #21
    7584:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    7586:	1d3b      	adds	r3, r7, #4
    7588:	791b      	ldrb	r3, [r3, #4]
    758a:	041b      	lsls	r3, r3, #16
    758c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    758e:	1d3b      	adds	r3, r7, #4
    7590:	789b      	ldrb	r3, [r3, #2]
    7592:	02db      	lsls	r3, r3, #11
    7594:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    7596:	1d3b      	adds	r3, r7, #4
    7598:	785b      	ldrb	r3, [r3, #1]
    759a:	015b      	lsls	r3, r3, #5
    759c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    759e:	1d3a      	adds	r2, r7, #4
    75a0:	7812      	ldrb	r2, [r2, #0]
    75a2:	0852      	lsrs	r2, r2, #1
    75a4:	b2d2      	uxtb	r2, r2
    75a6:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    75a8:	60fb      	str	r3, [r7, #12]

	return ul_time;
    75aa:	68fb      	ldr	r3, [r7, #12]
}
    75ac:	0018      	movs	r0, r3
    75ae:	46bd      	mov	sp, r7
    75b0:	b004      	add	sp, #16
    75b2:	bd80      	pop	{r7, pc}
    75b4:	20000a30 	.word	0x20000a30
    75b8:	00003941 	.word	0x00003941
    75bc:	fffff844 	.word	0xfffff844

000075c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    75c0:	b580      	push	{r7, lr}
    75c2:	b086      	sub	sp, #24
    75c4:	af00      	add	r7, sp, #0
    75c6:	60f8      	str	r0, [r7, #12]
    75c8:	60b9      	str	r1, [r7, #8]
    75ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    75cc:	68fb      	ldr	r3, [r7, #12]
    75ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    75d0:	68bb      	ldr	r3, [r7, #8]
    75d2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    75d4:	e007      	b.n	75e6 <mem_cpy+0x26>
		*d++ = *s++;
    75d6:	697b      	ldr	r3, [r7, #20]
    75d8:	1c5a      	adds	r2, r3, #1
    75da:	617a      	str	r2, [r7, #20]
    75dc:	693a      	ldr	r2, [r7, #16]
    75de:	1c51      	adds	r1, r2, #1
    75e0:	6139      	str	r1, [r7, #16]
    75e2:	7812      	ldrb	r2, [r2, #0]
    75e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    75e6:	687b      	ldr	r3, [r7, #4]
    75e8:	1e5a      	subs	r2, r3, #1
    75ea:	607a      	str	r2, [r7, #4]
    75ec:	2b00      	cmp	r3, #0
    75ee:	d1f2      	bne.n	75d6 <mem_cpy+0x16>
}
    75f0:	46c0      	nop			; (mov r8, r8)
    75f2:	46bd      	mov	sp, r7
    75f4:	b006      	add	sp, #24
    75f6:	bd80      	pop	{r7, pc}

000075f8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    75f8:	b580      	push	{r7, lr}
    75fa:	b086      	sub	sp, #24
    75fc:	af00      	add	r7, sp, #0
    75fe:	60f8      	str	r0, [r7, #12]
    7600:	60b9      	str	r1, [r7, #8]
    7602:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7604:	68fb      	ldr	r3, [r7, #12]
    7606:	617b      	str	r3, [r7, #20]

	while (cnt--)
    7608:	e005      	b.n	7616 <mem_set+0x1e>
		*d++ = (BYTE)val;
    760a:	697b      	ldr	r3, [r7, #20]
    760c:	1c5a      	adds	r2, r3, #1
    760e:	617a      	str	r2, [r7, #20]
    7610:	68ba      	ldr	r2, [r7, #8]
    7612:	b2d2      	uxtb	r2, r2
    7614:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    7616:	687b      	ldr	r3, [r7, #4]
    7618:	1e5a      	subs	r2, r3, #1
    761a:	607a      	str	r2, [r7, #4]
    761c:	2b00      	cmp	r3, #0
    761e:	d1f4      	bne.n	760a <mem_set+0x12>
}
    7620:	46c0      	nop			; (mov r8, r8)
    7622:	46bd      	mov	sp, r7
    7624:	b006      	add	sp, #24
    7626:	bd80      	pop	{r7, pc}

00007628 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    7628:	b580      	push	{r7, lr}
    762a:	b088      	sub	sp, #32
    762c:	af00      	add	r7, sp, #0
    762e:	60f8      	str	r0, [r7, #12]
    7630:	60b9      	str	r1, [r7, #8]
    7632:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    7634:	68fb      	ldr	r3, [r7, #12]
    7636:	61fb      	str	r3, [r7, #28]
    7638:	68bb      	ldr	r3, [r7, #8]
    763a:	61bb      	str	r3, [r7, #24]
	int r = 0;
    763c:	2300      	movs	r3, #0
    763e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    7640:	46c0      	nop			; (mov r8, r8)
    7642:	687b      	ldr	r3, [r7, #4]
    7644:	1e5a      	subs	r2, r3, #1
    7646:	607a      	str	r2, [r7, #4]
    7648:	2b00      	cmp	r3, #0
    764a:	d00d      	beq.n	7668 <mem_cmp+0x40>
    764c:	69fb      	ldr	r3, [r7, #28]
    764e:	1c5a      	adds	r2, r3, #1
    7650:	61fa      	str	r2, [r7, #28]
    7652:	781b      	ldrb	r3, [r3, #0]
    7654:	0019      	movs	r1, r3
    7656:	69bb      	ldr	r3, [r7, #24]
    7658:	1c5a      	adds	r2, r3, #1
    765a:	61ba      	str	r2, [r7, #24]
    765c:	781b      	ldrb	r3, [r3, #0]
    765e:	1acb      	subs	r3, r1, r3
    7660:	617b      	str	r3, [r7, #20]
    7662:	697b      	ldr	r3, [r7, #20]
    7664:	2b00      	cmp	r3, #0
    7666:	d0ec      	beq.n	7642 <mem_cmp+0x1a>
	return r;
    7668:	697b      	ldr	r3, [r7, #20]
}
    766a:	0018      	movs	r0, r3
    766c:	46bd      	mov	sp, r7
    766e:	b008      	add	sp, #32
    7670:	bd80      	pop	{r7, pc}

00007672 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    7672:	b580      	push	{r7, lr}
    7674:	b082      	sub	sp, #8
    7676:	af00      	add	r7, sp, #0
    7678:	6078      	str	r0, [r7, #4]
    767a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    767c:	e002      	b.n	7684 <chk_chr+0x12>
    767e:	687b      	ldr	r3, [r7, #4]
    7680:	3301      	adds	r3, #1
    7682:	607b      	str	r3, [r7, #4]
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	781b      	ldrb	r3, [r3, #0]
    7688:	2b00      	cmp	r3, #0
    768a:	d005      	beq.n	7698 <chk_chr+0x26>
    768c:	687b      	ldr	r3, [r7, #4]
    768e:	781b      	ldrb	r3, [r3, #0]
    7690:	001a      	movs	r2, r3
    7692:	683b      	ldr	r3, [r7, #0]
    7694:	429a      	cmp	r2, r3
    7696:	d1f2      	bne.n	767e <chk_chr+0xc>
	return *str;
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	781b      	ldrb	r3, [r3, #0]
}
    769c:	0018      	movs	r0, r3
    769e:	46bd      	mov	sp, r7
    76a0:	b002      	add	sp, #8
    76a2:	bd80      	pop	{r7, pc}

000076a4 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    76a4:	b590      	push	{r4, r7, lr}
    76a6:	b085      	sub	sp, #20
    76a8:	af00      	add	r7, sp, #0
    76aa:	6078      	str	r0, [r7, #4]
    76ac:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    76b2:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    76b4:	68fa      	ldr	r2, [r7, #12]
    76b6:	683b      	ldr	r3, [r7, #0]
    76b8:	429a      	cmp	r2, r3
    76ba:	d04e      	beq.n	775a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    76bc:	687b      	ldr	r3, [r7, #4]
    76be:	791b      	ldrb	r3, [r3, #4]
    76c0:	2b00      	cmp	r3, #0
    76c2:	d037      	beq.n	7734 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    76c4:	687b      	ldr	r3, [r7, #4]
    76c6:	7858      	ldrb	r0, [r3, #1]
    76c8:	687b      	ldr	r3, [r7, #4]
    76ca:	3330      	adds	r3, #48	; 0x30
    76cc:	0019      	movs	r1, r3
    76ce:	68fa      	ldr	r2, [r7, #12]
    76d0:	2301      	movs	r3, #1
    76d2:	4c24      	ldr	r4, [pc, #144]	; (7764 <move_window+0xc0>)
    76d4:	47a0      	blx	r4
    76d6:	1e03      	subs	r3, r0, #0
    76d8:	d001      	beq.n	76de <move_window+0x3a>
				return FR_DISK_ERR;
    76da:	2301      	movs	r3, #1
    76dc:	e03e      	b.n	775c <move_window+0xb8>
			fs->wflag = 0;
    76de:	687b      	ldr	r3, [r7, #4]
    76e0:	2200      	movs	r2, #0
    76e2:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    76e4:	687b      	ldr	r3, [r7, #4]
    76e6:	6a1a      	ldr	r2, [r3, #32]
    76e8:	687b      	ldr	r3, [r7, #4]
    76ea:	69db      	ldr	r3, [r3, #28]
    76ec:	18d2      	adds	r2, r2, r3
    76ee:	68fb      	ldr	r3, [r7, #12]
    76f0:	429a      	cmp	r2, r3
    76f2:	d91f      	bls.n	7734 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    76f4:	230b      	movs	r3, #11
    76f6:	18fb      	adds	r3, r7, r3
    76f8:	687a      	ldr	r2, [r7, #4]
    76fa:	78d2      	ldrb	r2, [r2, #3]
    76fc:	701a      	strb	r2, [r3, #0]
    76fe:	e014      	b.n	772a <move_window+0x86>
					wsect += fs->fsize;
    7700:	687b      	ldr	r3, [r7, #4]
    7702:	69db      	ldr	r3, [r3, #28]
    7704:	68fa      	ldr	r2, [r7, #12]
    7706:	18d3      	adds	r3, r2, r3
    7708:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    770a:	687b      	ldr	r3, [r7, #4]
    770c:	7858      	ldrb	r0, [r3, #1]
    770e:	687b      	ldr	r3, [r7, #4]
    7710:	3330      	adds	r3, #48	; 0x30
    7712:	0019      	movs	r1, r3
    7714:	68fa      	ldr	r2, [r7, #12]
    7716:	2301      	movs	r3, #1
    7718:	4c12      	ldr	r4, [pc, #72]	; (7764 <move_window+0xc0>)
    771a:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    771c:	230b      	movs	r3, #11
    771e:	18fb      	adds	r3, r7, r3
    7720:	781a      	ldrb	r2, [r3, #0]
    7722:	230b      	movs	r3, #11
    7724:	18fb      	adds	r3, r7, r3
    7726:	3a01      	subs	r2, #1
    7728:	701a      	strb	r2, [r3, #0]
    772a:	230b      	movs	r3, #11
    772c:	18fb      	adds	r3, r7, r3
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	2b01      	cmp	r3, #1
    7732:	d8e5      	bhi.n	7700 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    7734:	683b      	ldr	r3, [r7, #0]
    7736:	2b00      	cmp	r3, #0
    7738:	d00f      	beq.n	775a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    773a:	687b      	ldr	r3, [r7, #4]
    773c:	7858      	ldrb	r0, [r3, #1]
    773e:	687b      	ldr	r3, [r7, #4]
    7740:	3330      	adds	r3, #48	; 0x30
    7742:	0019      	movs	r1, r3
    7744:	683a      	ldr	r2, [r7, #0]
    7746:	2301      	movs	r3, #1
    7748:	4c07      	ldr	r4, [pc, #28]	; (7768 <move_window+0xc4>)
    774a:	47a0      	blx	r4
    774c:	1e03      	subs	r3, r0, #0
    774e:	d001      	beq.n	7754 <move_window+0xb0>
				return FR_DISK_ERR;
    7750:	2301      	movs	r3, #1
    7752:	e003      	b.n	775c <move_window+0xb8>
			fs->winsect = sector;
    7754:	687b      	ldr	r3, [r7, #4]
    7756:	683a      	ldr	r2, [r7, #0]
    7758:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    775a:	2300      	movs	r3, #0
}
    775c:	0018      	movs	r0, r3
    775e:	46bd      	mov	sp, r7
    7760:	b005      	add	sp, #20
    7762:	bd90      	pop	{r4, r7, pc}
    7764:	00007391 	.word	0x00007391
    7768:	000072b9 	.word	0x000072b9

0000776c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    776c:	b590      	push	{r4, r7, lr}
    776e:	b085      	sub	sp, #20
    7770:	af00      	add	r7, sp, #0
    7772:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    7774:	230f      	movs	r3, #15
    7776:	18fc      	adds	r4, r7, r3
    7778:	687b      	ldr	r3, [r7, #4]
    777a:	2100      	movs	r1, #0
    777c:	0018      	movs	r0, r3
    777e:	4b52      	ldr	r3, [pc, #328]	; (78c8 <sync+0x15c>)
    7780:	4798      	blx	r3
    7782:	0003      	movs	r3, r0
    7784:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    7786:	230f      	movs	r3, #15
    7788:	18fb      	adds	r3, r7, r3
    778a:	781b      	ldrb	r3, [r3, #0]
    778c:	2b00      	cmp	r3, #0
    778e:	d000      	beq.n	7792 <sync+0x26>
    7790:	e093      	b.n	78ba <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7792:	687b      	ldr	r3, [r7, #4]
    7794:	781b      	ldrb	r3, [r3, #0]
    7796:	2b03      	cmp	r3, #3
    7798:	d000      	beq.n	779c <sync+0x30>
    779a:	e081      	b.n	78a0 <sync+0x134>
    779c:	687b      	ldr	r3, [r7, #4]
    779e:	795b      	ldrb	r3, [r3, #5]
    77a0:	2b00      	cmp	r3, #0
    77a2:	d07d      	beq.n	78a0 <sync+0x134>
			fs->winsect = 0;
    77a4:	687b      	ldr	r3, [r7, #4]
    77a6:	2200      	movs	r2, #0
    77a8:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    77aa:	687b      	ldr	r3, [r7, #4]
    77ac:	3330      	adds	r3, #48	; 0x30
    77ae:	0018      	movs	r0, r3
    77b0:	2380      	movs	r3, #128	; 0x80
    77b2:	009b      	lsls	r3, r3, #2
    77b4:	001a      	movs	r2, r3
    77b6:	2100      	movs	r1, #0
    77b8:	4b44      	ldr	r3, [pc, #272]	; (78cc <sync+0x160>)
    77ba:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    77bc:	687b      	ldr	r3, [r7, #4]
    77be:	4a44      	ldr	r2, [pc, #272]	; (78d0 <sync+0x164>)
    77c0:	2155      	movs	r1, #85	; 0x55
    77c2:	5499      	strb	r1, [r3, r2]
    77c4:	687b      	ldr	r3, [r7, #4]
    77c6:	4a43      	ldr	r2, [pc, #268]	; (78d4 <sync+0x168>)
    77c8:	21aa      	movs	r1, #170	; 0xaa
    77ca:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    77cc:	687b      	ldr	r3, [r7, #4]
    77ce:	2230      	movs	r2, #48	; 0x30
    77d0:	2152      	movs	r1, #82	; 0x52
    77d2:	5499      	strb	r1, [r3, r2]
    77d4:	687b      	ldr	r3, [r7, #4]
    77d6:	2231      	movs	r2, #49	; 0x31
    77d8:	2152      	movs	r1, #82	; 0x52
    77da:	5499      	strb	r1, [r3, r2]
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	2232      	movs	r2, #50	; 0x32
    77e0:	2161      	movs	r1, #97	; 0x61
    77e2:	5499      	strb	r1, [r3, r2]
    77e4:	687b      	ldr	r3, [r7, #4]
    77e6:	2233      	movs	r2, #51	; 0x33
    77e8:	2141      	movs	r1, #65	; 0x41
    77ea:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    77ec:	687a      	ldr	r2, [r7, #4]
    77ee:	2385      	movs	r3, #133	; 0x85
    77f0:	009b      	lsls	r3, r3, #2
    77f2:	2172      	movs	r1, #114	; 0x72
    77f4:	54d1      	strb	r1, [r2, r3]
    77f6:	687b      	ldr	r3, [r7, #4]
    77f8:	4a37      	ldr	r2, [pc, #220]	; (78d8 <sync+0x16c>)
    77fa:	2172      	movs	r1, #114	; 0x72
    77fc:	5499      	strb	r1, [r3, r2]
    77fe:	687b      	ldr	r3, [r7, #4]
    7800:	4a36      	ldr	r2, [pc, #216]	; (78dc <sync+0x170>)
    7802:	2141      	movs	r1, #65	; 0x41
    7804:	5499      	strb	r1, [r3, r2]
    7806:	687b      	ldr	r3, [r7, #4]
    7808:	4a35      	ldr	r2, [pc, #212]	; (78e0 <sync+0x174>)
    780a:	2161      	movs	r1, #97	; 0x61
    780c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    780e:	687b      	ldr	r3, [r7, #4]
    7810:	691b      	ldr	r3, [r3, #16]
    7812:	b2d9      	uxtb	r1, r3
    7814:	687a      	ldr	r2, [r7, #4]
    7816:	2386      	movs	r3, #134	; 0x86
    7818:	009b      	lsls	r3, r3, #2
    781a:	54d1      	strb	r1, [r2, r3]
    781c:	687b      	ldr	r3, [r7, #4]
    781e:	691b      	ldr	r3, [r3, #16]
    7820:	b29b      	uxth	r3, r3
    7822:	0a1b      	lsrs	r3, r3, #8
    7824:	b29b      	uxth	r3, r3
    7826:	b2d9      	uxtb	r1, r3
    7828:	687b      	ldr	r3, [r7, #4]
    782a:	4a2e      	ldr	r2, [pc, #184]	; (78e4 <sync+0x178>)
    782c:	5499      	strb	r1, [r3, r2]
    782e:	687b      	ldr	r3, [r7, #4]
    7830:	691b      	ldr	r3, [r3, #16]
    7832:	0c1b      	lsrs	r3, r3, #16
    7834:	b2d9      	uxtb	r1, r3
    7836:	687b      	ldr	r3, [r7, #4]
    7838:	4a2b      	ldr	r2, [pc, #172]	; (78e8 <sync+0x17c>)
    783a:	5499      	strb	r1, [r3, r2]
    783c:	687b      	ldr	r3, [r7, #4]
    783e:	691b      	ldr	r3, [r3, #16]
    7840:	0e1b      	lsrs	r3, r3, #24
    7842:	b2d9      	uxtb	r1, r3
    7844:	687b      	ldr	r3, [r7, #4]
    7846:	4a29      	ldr	r2, [pc, #164]	; (78ec <sync+0x180>)
    7848:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    784a:	687b      	ldr	r3, [r7, #4]
    784c:	68db      	ldr	r3, [r3, #12]
    784e:	b2d9      	uxtb	r1, r3
    7850:	687a      	ldr	r2, [r7, #4]
    7852:	2387      	movs	r3, #135	; 0x87
    7854:	009b      	lsls	r3, r3, #2
    7856:	54d1      	strb	r1, [r2, r3]
    7858:	687b      	ldr	r3, [r7, #4]
    785a:	68db      	ldr	r3, [r3, #12]
    785c:	b29b      	uxth	r3, r3
    785e:	0a1b      	lsrs	r3, r3, #8
    7860:	b29b      	uxth	r3, r3
    7862:	b2d9      	uxtb	r1, r3
    7864:	687b      	ldr	r3, [r7, #4]
    7866:	4a22      	ldr	r2, [pc, #136]	; (78f0 <sync+0x184>)
    7868:	5499      	strb	r1, [r3, r2]
    786a:	687b      	ldr	r3, [r7, #4]
    786c:	68db      	ldr	r3, [r3, #12]
    786e:	0c1b      	lsrs	r3, r3, #16
    7870:	b2d9      	uxtb	r1, r3
    7872:	687b      	ldr	r3, [r7, #4]
    7874:	4a1f      	ldr	r2, [pc, #124]	; (78f4 <sync+0x188>)
    7876:	5499      	strb	r1, [r3, r2]
    7878:	687b      	ldr	r3, [r7, #4]
    787a:	68db      	ldr	r3, [r3, #12]
    787c:	0e1b      	lsrs	r3, r3, #24
    787e:	b2d9      	uxtb	r1, r3
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	4a1d      	ldr	r2, [pc, #116]	; (78f8 <sync+0x18c>)
    7884:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	7858      	ldrb	r0, [r3, #1]
    788a:	687b      	ldr	r3, [r7, #4]
    788c:	3330      	adds	r3, #48	; 0x30
    788e:	0019      	movs	r1, r3
    7890:	687b      	ldr	r3, [r7, #4]
    7892:	695a      	ldr	r2, [r3, #20]
    7894:	2301      	movs	r3, #1
    7896:	4c19      	ldr	r4, [pc, #100]	; (78fc <sync+0x190>)
    7898:	47a0      	blx	r4
			fs->fsi_flag = 0;
    789a:	687b      	ldr	r3, [r7, #4]
    789c:	2200      	movs	r2, #0
    789e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    78a0:	687b      	ldr	r3, [r7, #4]
    78a2:	785b      	ldrb	r3, [r3, #1]
    78a4:	2200      	movs	r2, #0
    78a6:	2100      	movs	r1, #0
    78a8:	0018      	movs	r0, r3
    78aa:	4b15      	ldr	r3, [pc, #84]	; (7900 <sync+0x194>)
    78ac:	4798      	blx	r3
    78ae:	1e03      	subs	r3, r0, #0
    78b0:	d003      	beq.n	78ba <sync+0x14e>
			res = FR_DISK_ERR;
    78b2:	230f      	movs	r3, #15
    78b4:	18fb      	adds	r3, r7, r3
    78b6:	2201      	movs	r2, #1
    78b8:	701a      	strb	r2, [r3, #0]
	}

	return res;
    78ba:	230f      	movs	r3, #15
    78bc:	18fb      	adds	r3, r7, r3
    78be:	781b      	ldrb	r3, [r3, #0]
}
    78c0:	0018      	movs	r0, r3
    78c2:	46bd      	mov	sp, r7
    78c4:	b005      	add	sp, #20
    78c6:	bd90      	pop	{r4, r7, pc}
    78c8:	000076a5 	.word	0x000076a5
    78cc:	000075f9 	.word	0x000075f9
    78d0:	0000022e 	.word	0x0000022e
    78d4:	0000022f 	.word	0x0000022f
    78d8:	00000215 	.word	0x00000215
    78dc:	00000216 	.word	0x00000216
    78e0:	00000217 	.word	0x00000217
    78e4:	00000219 	.word	0x00000219
    78e8:	0000021a 	.word	0x0000021a
    78ec:	0000021b 	.word	0x0000021b
    78f0:	0000021d 	.word	0x0000021d
    78f4:	0000021e 	.word	0x0000021e
    78f8:	0000021f 	.word	0x0000021f
    78fc:	00007391 	.word	0x00007391
    7900:	00007469 	.word	0x00007469

00007904 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    7904:	b580      	push	{r7, lr}
    7906:	b082      	sub	sp, #8
    7908:	af00      	add	r7, sp, #0
    790a:	6078      	str	r0, [r7, #4]
    790c:	6039      	str	r1, [r7, #0]
	clst -= 2;
    790e:	683b      	ldr	r3, [r7, #0]
    7910:	3b02      	subs	r3, #2
    7912:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    7914:	687b      	ldr	r3, [r7, #4]
    7916:	699b      	ldr	r3, [r3, #24]
    7918:	1e9a      	subs	r2, r3, #2
    791a:	683b      	ldr	r3, [r7, #0]
    791c:	429a      	cmp	r2, r3
    791e:	d801      	bhi.n	7924 <clust2sect+0x20>
    7920:	2300      	movs	r3, #0
    7922:	e007      	b.n	7934 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    7924:	687b      	ldr	r3, [r7, #4]
    7926:	789b      	ldrb	r3, [r3, #2]
    7928:	001a      	movs	r2, r3
    792a:	683b      	ldr	r3, [r7, #0]
    792c:	435a      	muls	r2, r3
    792e:	687b      	ldr	r3, [r7, #4]
    7930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7932:	18d3      	adds	r3, r2, r3
}
    7934:	0018      	movs	r0, r3
    7936:	46bd      	mov	sp, r7
    7938:	b002      	add	sp, #8
    793a:	bd80      	pop	{r7, pc}

0000793c <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    793c:	b580      	push	{r7, lr}
    793e:	b086      	sub	sp, #24
    7940:	af00      	add	r7, sp, #0
    7942:	6078      	str	r0, [r7, #4]
    7944:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    7946:	683b      	ldr	r3, [r7, #0]
    7948:	2b01      	cmp	r3, #1
    794a:	d904      	bls.n	7956 <get_fat+0x1a>
    794c:	687b      	ldr	r3, [r7, #4]
    794e:	699a      	ldr	r2, [r3, #24]
    7950:	683b      	ldr	r3, [r7, #0]
    7952:	429a      	cmp	r2, r3
    7954:	d801      	bhi.n	795a <get_fat+0x1e>
		return 1;
    7956:	2301      	movs	r3, #1
    7958:	e09f      	b.n	7a9a <get_fat+0x15e>

	switch (fs->fs_type) {
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	781b      	ldrb	r3, [r3, #0]
    795e:	2b02      	cmp	r3, #2
    7960:	d048      	beq.n	79f4 <get_fat+0xb8>
    7962:	2b03      	cmp	r3, #3
    7964:	d067      	beq.n	7a36 <get_fat+0xfa>
    7966:	2b01      	cmp	r3, #1
    7968:	d000      	beq.n	796c <get_fat+0x30>
    796a:	e094      	b.n	7a96 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    796c:	683b      	ldr	r3, [r7, #0]
    796e:	617b      	str	r3, [r7, #20]
    7970:	697b      	ldr	r3, [r7, #20]
    7972:	085b      	lsrs	r3, r3, #1
    7974:	697a      	ldr	r2, [r7, #20]
    7976:	18d3      	adds	r3, r2, r3
    7978:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    797a:	687b      	ldr	r3, [r7, #4]
    797c:	6a1a      	ldr	r2, [r3, #32]
    797e:	697b      	ldr	r3, [r7, #20]
    7980:	0a5b      	lsrs	r3, r3, #9
    7982:	18d2      	adds	r2, r2, r3
    7984:	687b      	ldr	r3, [r7, #4]
    7986:	0011      	movs	r1, r2
    7988:	0018      	movs	r0, r3
    798a:	4b46      	ldr	r3, [pc, #280]	; (7aa4 <get_fat+0x168>)
    798c:	4798      	blx	r3
    798e:	1e03      	subs	r3, r0, #0
    7990:	d000      	beq.n	7994 <get_fat+0x58>
    7992:	e079      	b.n	7a88 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    7994:	697b      	ldr	r3, [r7, #20]
    7996:	05db      	lsls	r3, r3, #23
    7998:	0ddb      	lsrs	r3, r3, #23
    799a:	687a      	ldr	r2, [r7, #4]
    799c:	2130      	movs	r1, #48	; 0x30
    799e:	18d3      	adds	r3, r2, r3
    79a0:	185b      	adds	r3, r3, r1
    79a2:	781b      	ldrb	r3, [r3, #0]
    79a4:	613b      	str	r3, [r7, #16]
    79a6:	697b      	ldr	r3, [r7, #20]
    79a8:	3301      	adds	r3, #1
    79aa:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	6a1a      	ldr	r2, [r3, #32]
    79b0:	697b      	ldr	r3, [r7, #20]
    79b2:	0a5b      	lsrs	r3, r3, #9
    79b4:	18d2      	adds	r2, r2, r3
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	0011      	movs	r1, r2
    79ba:	0018      	movs	r0, r3
    79bc:	4b39      	ldr	r3, [pc, #228]	; (7aa4 <get_fat+0x168>)
    79be:	4798      	blx	r3
    79c0:	1e03      	subs	r3, r0, #0
    79c2:	d163      	bne.n	7a8c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    79c4:	697b      	ldr	r3, [r7, #20]
    79c6:	05db      	lsls	r3, r3, #23
    79c8:	0ddb      	lsrs	r3, r3, #23
    79ca:	687a      	ldr	r2, [r7, #4]
    79cc:	2130      	movs	r1, #48	; 0x30
    79ce:	18d3      	adds	r3, r2, r3
    79d0:	185b      	adds	r3, r3, r1
    79d2:	781b      	ldrb	r3, [r3, #0]
    79d4:	021b      	lsls	r3, r3, #8
    79d6:	001a      	movs	r2, r3
    79d8:	693b      	ldr	r3, [r7, #16]
    79da:	4313      	orrs	r3, r2
    79dc:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    79de:	683b      	ldr	r3, [r7, #0]
    79e0:	2201      	movs	r2, #1
    79e2:	4013      	ands	r3, r2
    79e4:	d002      	beq.n	79ec <get_fat+0xb0>
    79e6:	693b      	ldr	r3, [r7, #16]
    79e8:	091b      	lsrs	r3, r3, #4
    79ea:	e056      	b.n	7a9a <get_fat+0x15e>
    79ec:	693b      	ldr	r3, [r7, #16]
    79ee:	051b      	lsls	r3, r3, #20
    79f0:	0d1b      	lsrs	r3, r3, #20
    79f2:	e052      	b.n	7a9a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    79f4:	687b      	ldr	r3, [r7, #4]
    79f6:	6a1a      	ldr	r2, [r3, #32]
    79f8:	683b      	ldr	r3, [r7, #0]
    79fa:	0a1b      	lsrs	r3, r3, #8
    79fc:	18d2      	adds	r2, r2, r3
    79fe:	687b      	ldr	r3, [r7, #4]
    7a00:	0011      	movs	r1, r2
    7a02:	0018      	movs	r0, r3
    7a04:	4b27      	ldr	r3, [pc, #156]	; (7aa4 <get_fat+0x168>)
    7a06:	4798      	blx	r3
    7a08:	1e03      	subs	r3, r0, #0
    7a0a:	d141      	bne.n	7a90 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    7a0c:	683b      	ldr	r3, [r7, #0]
    7a0e:	005a      	lsls	r2, r3, #1
    7a10:	23ff      	movs	r3, #255	; 0xff
    7a12:	005b      	lsls	r3, r3, #1
    7a14:	4013      	ands	r3, r2
    7a16:	3330      	adds	r3, #48	; 0x30
    7a18:	687a      	ldr	r2, [r7, #4]
    7a1a:	18d3      	adds	r3, r2, r3
    7a1c:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    7a1e:	68fb      	ldr	r3, [r7, #12]
    7a20:	3301      	adds	r3, #1
    7a22:	781b      	ldrb	r3, [r3, #0]
    7a24:	021b      	lsls	r3, r3, #8
    7a26:	b21a      	sxth	r2, r3
    7a28:	68fb      	ldr	r3, [r7, #12]
    7a2a:	781b      	ldrb	r3, [r3, #0]
    7a2c:	b21b      	sxth	r3, r3
    7a2e:	4313      	orrs	r3, r2
    7a30:	b21b      	sxth	r3, r3
    7a32:	b29b      	uxth	r3, r3
    7a34:	e031      	b.n	7a9a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7a36:	687b      	ldr	r3, [r7, #4]
    7a38:	6a1a      	ldr	r2, [r3, #32]
    7a3a:	683b      	ldr	r3, [r7, #0]
    7a3c:	09db      	lsrs	r3, r3, #7
    7a3e:	18d2      	adds	r2, r2, r3
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	0011      	movs	r1, r2
    7a44:	0018      	movs	r0, r3
    7a46:	4b17      	ldr	r3, [pc, #92]	; (7aa4 <get_fat+0x168>)
    7a48:	4798      	blx	r3
    7a4a:	1e03      	subs	r3, r0, #0
    7a4c:	d122      	bne.n	7a94 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    7a4e:	683b      	ldr	r3, [r7, #0]
    7a50:	009a      	lsls	r2, r3, #2
    7a52:	23fe      	movs	r3, #254	; 0xfe
    7a54:	005b      	lsls	r3, r3, #1
    7a56:	4013      	ands	r3, r2
    7a58:	3330      	adds	r3, #48	; 0x30
    7a5a:	687a      	ldr	r2, [r7, #4]
    7a5c:	18d3      	adds	r3, r2, r3
    7a5e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    7a60:	68fb      	ldr	r3, [r7, #12]
    7a62:	3303      	adds	r3, #3
    7a64:	781b      	ldrb	r3, [r3, #0]
    7a66:	061a      	lsls	r2, r3, #24
    7a68:	68fb      	ldr	r3, [r7, #12]
    7a6a:	3302      	adds	r3, #2
    7a6c:	781b      	ldrb	r3, [r3, #0]
    7a6e:	041b      	lsls	r3, r3, #16
    7a70:	4313      	orrs	r3, r2
    7a72:	68fa      	ldr	r2, [r7, #12]
    7a74:	3201      	adds	r2, #1
    7a76:	7812      	ldrb	r2, [r2, #0]
    7a78:	0212      	lsls	r2, r2, #8
    7a7a:	4313      	orrs	r3, r2
    7a7c:	68fa      	ldr	r2, [r7, #12]
    7a7e:	7812      	ldrb	r2, [r2, #0]
    7a80:	4313      	orrs	r3, r2
    7a82:	011b      	lsls	r3, r3, #4
    7a84:	091b      	lsrs	r3, r3, #4
    7a86:	e008      	b.n	7a9a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a88:	46c0      	nop			; (mov r8, r8)
    7a8a:	e004      	b.n	7a96 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7a8c:	46c0      	nop			; (mov r8, r8)
    7a8e:	e002      	b.n	7a96 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7a90:	46c0      	nop			; (mov r8, r8)
    7a92:	e000      	b.n	7a96 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7a94:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7a96:	2301      	movs	r3, #1
    7a98:	425b      	negs	r3, r3
}
    7a9a:	0018      	movs	r0, r3
    7a9c:	46bd      	mov	sp, r7
    7a9e:	b006      	add	sp, #24
    7aa0:	bd80      	pop	{r7, pc}
    7aa2:	46c0      	nop			; (mov r8, r8)
    7aa4:	000076a5 	.word	0x000076a5

00007aa8 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7aa8:	b590      	push	{r4, r7, lr}
    7aaa:	b089      	sub	sp, #36	; 0x24
    7aac:	af00      	add	r7, sp, #0
    7aae:	60f8      	str	r0, [r7, #12]
    7ab0:	60b9      	str	r1, [r7, #8]
    7ab2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7ab4:	68bb      	ldr	r3, [r7, #8]
    7ab6:	2b01      	cmp	r3, #1
    7ab8:	d904      	bls.n	7ac4 <put_fat+0x1c>
    7aba:	68fb      	ldr	r3, [r7, #12]
    7abc:	699a      	ldr	r2, [r3, #24]
    7abe:	68bb      	ldr	r3, [r7, #8]
    7ac0:	429a      	cmp	r2, r3
    7ac2:	d804      	bhi.n	7ace <put_fat+0x26>
		res = FR_INT_ERR;
    7ac4:	231f      	movs	r3, #31
    7ac6:	18fb      	adds	r3, r7, r3
    7ac8:	2202      	movs	r2, #2
    7aca:	701a      	strb	r2, [r3, #0]
    7acc:	e100      	b.n	7cd0 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    7ace:	68fb      	ldr	r3, [r7, #12]
    7ad0:	781b      	ldrb	r3, [r3, #0]
    7ad2:	2b02      	cmp	r3, #2
    7ad4:	d100      	bne.n	7ad8 <put_fat+0x30>
    7ad6:	e078      	b.n	7bca <put_fat+0x122>
    7ad8:	2b03      	cmp	r3, #3
    7ada:	d100      	bne.n	7ade <put_fat+0x36>
    7adc:	e09e      	b.n	7c1c <put_fat+0x174>
    7ade:	2b01      	cmp	r3, #1
    7ae0:	d000      	beq.n	7ae4 <put_fat+0x3c>
    7ae2:	e0e6      	b.n	7cb2 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    7ae4:	68bb      	ldr	r3, [r7, #8]
    7ae6:	61bb      	str	r3, [r7, #24]
    7ae8:	69bb      	ldr	r3, [r7, #24]
    7aea:	085b      	lsrs	r3, r3, #1
    7aec:	69ba      	ldr	r2, [r7, #24]
    7aee:	18d3      	adds	r3, r2, r3
    7af0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7af2:	68fb      	ldr	r3, [r7, #12]
    7af4:	6a1a      	ldr	r2, [r3, #32]
    7af6:	69bb      	ldr	r3, [r7, #24]
    7af8:	0a5b      	lsrs	r3, r3, #9
    7afa:	18d2      	adds	r2, r2, r3
    7afc:	231f      	movs	r3, #31
    7afe:	18fc      	adds	r4, r7, r3
    7b00:	68fb      	ldr	r3, [r7, #12]
    7b02:	0011      	movs	r1, r2
    7b04:	0018      	movs	r0, r3
    7b06:	4b76      	ldr	r3, [pc, #472]	; (7ce0 <put_fat+0x238>)
    7b08:	4798      	blx	r3
    7b0a:	0003      	movs	r3, r0
    7b0c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7b0e:	231f      	movs	r3, #31
    7b10:	18fb      	adds	r3, r7, r3
    7b12:	781b      	ldrb	r3, [r3, #0]
    7b14:	2b00      	cmp	r3, #0
    7b16:	d000      	beq.n	7b1a <put_fat+0x72>
    7b18:	e0d0      	b.n	7cbc <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    7b1a:	69bb      	ldr	r3, [r7, #24]
    7b1c:	05db      	lsls	r3, r3, #23
    7b1e:	0ddb      	lsrs	r3, r3, #23
    7b20:	3330      	adds	r3, #48	; 0x30
    7b22:	68fa      	ldr	r2, [r7, #12]
    7b24:	18d3      	adds	r3, r2, r3
    7b26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7b28:	68bb      	ldr	r3, [r7, #8]
    7b2a:	2201      	movs	r2, #1
    7b2c:	4013      	ands	r3, r2
    7b2e:	d00d      	beq.n	7b4c <put_fat+0xa4>
    7b30:	697b      	ldr	r3, [r7, #20]
    7b32:	781b      	ldrb	r3, [r3, #0]
    7b34:	b25b      	sxtb	r3, r3
    7b36:	220f      	movs	r2, #15
    7b38:	4013      	ands	r3, r2
    7b3a:	b25a      	sxtb	r2, r3
    7b3c:	687b      	ldr	r3, [r7, #4]
    7b3e:	b2db      	uxtb	r3, r3
    7b40:	011b      	lsls	r3, r3, #4
    7b42:	b25b      	sxtb	r3, r3
    7b44:	4313      	orrs	r3, r2
    7b46:	b25b      	sxtb	r3, r3
    7b48:	b2db      	uxtb	r3, r3
    7b4a:	e001      	b.n	7b50 <put_fat+0xa8>
    7b4c:	687b      	ldr	r3, [r7, #4]
    7b4e:	b2db      	uxtb	r3, r3
    7b50:	697a      	ldr	r2, [r7, #20]
    7b52:	7013      	strb	r3, [r2, #0]
			bc++;
    7b54:	69bb      	ldr	r3, [r7, #24]
    7b56:	3301      	adds	r3, #1
    7b58:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    7b5a:	68fb      	ldr	r3, [r7, #12]
    7b5c:	2201      	movs	r2, #1
    7b5e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7b60:	68fb      	ldr	r3, [r7, #12]
    7b62:	6a1a      	ldr	r2, [r3, #32]
    7b64:	69bb      	ldr	r3, [r7, #24]
    7b66:	0a5b      	lsrs	r3, r3, #9
    7b68:	18d2      	adds	r2, r2, r3
    7b6a:	231f      	movs	r3, #31
    7b6c:	18fc      	adds	r4, r7, r3
    7b6e:	68fb      	ldr	r3, [r7, #12]
    7b70:	0011      	movs	r1, r2
    7b72:	0018      	movs	r0, r3
    7b74:	4b5a      	ldr	r3, [pc, #360]	; (7ce0 <put_fat+0x238>)
    7b76:	4798      	blx	r3
    7b78:	0003      	movs	r3, r0
    7b7a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7b7c:	231f      	movs	r3, #31
    7b7e:	18fb      	adds	r3, r7, r3
    7b80:	781b      	ldrb	r3, [r3, #0]
    7b82:	2b00      	cmp	r3, #0
    7b84:	d000      	beq.n	7b88 <put_fat+0xe0>
    7b86:	e09b      	b.n	7cc0 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    7b88:	69bb      	ldr	r3, [r7, #24]
    7b8a:	05db      	lsls	r3, r3, #23
    7b8c:	0ddb      	lsrs	r3, r3, #23
    7b8e:	3330      	adds	r3, #48	; 0x30
    7b90:	68fa      	ldr	r2, [r7, #12]
    7b92:	18d3      	adds	r3, r2, r3
    7b94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7b96:	68bb      	ldr	r3, [r7, #8]
    7b98:	2201      	movs	r2, #1
    7b9a:	4013      	ands	r3, r2
    7b9c:	d003      	beq.n	7ba6 <put_fat+0xfe>
    7b9e:	687b      	ldr	r3, [r7, #4]
    7ba0:	091b      	lsrs	r3, r3, #4
    7ba2:	b2db      	uxtb	r3, r3
    7ba4:	e00e      	b.n	7bc4 <put_fat+0x11c>
    7ba6:	697b      	ldr	r3, [r7, #20]
    7ba8:	781b      	ldrb	r3, [r3, #0]
    7baa:	b25b      	sxtb	r3, r3
    7bac:	220f      	movs	r2, #15
    7bae:	4393      	bics	r3, r2
    7bb0:	b25a      	sxtb	r2, r3
    7bb2:	687b      	ldr	r3, [r7, #4]
    7bb4:	0a1b      	lsrs	r3, r3, #8
    7bb6:	b25b      	sxtb	r3, r3
    7bb8:	210f      	movs	r1, #15
    7bba:	400b      	ands	r3, r1
    7bbc:	b25b      	sxtb	r3, r3
    7bbe:	4313      	orrs	r3, r2
    7bc0:	b25b      	sxtb	r3, r3
    7bc2:	b2db      	uxtb	r3, r3
    7bc4:	697a      	ldr	r2, [r7, #20]
    7bc6:	7013      	strb	r3, [r2, #0]
			break;
    7bc8:	e07f      	b.n	7cca <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7bca:	68fb      	ldr	r3, [r7, #12]
    7bcc:	6a1a      	ldr	r2, [r3, #32]
    7bce:	68bb      	ldr	r3, [r7, #8]
    7bd0:	0a1b      	lsrs	r3, r3, #8
    7bd2:	18d2      	adds	r2, r2, r3
    7bd4:	231f      	movs	r3, #31
    7bd6:	18fc      	adds	r4, r7, r3
    7bd8:	68fb      	ldr	r3, [r7, #12]
    7bda:	0011      	movs	r1, r2
    7bdc:	0018      	movs	r0, r3
    7bde:	4b40      	ldr	r3, [pc, #256]	; (7ce0 <put_fat+0x238>)
    7be0:	4798      	blx	r3
    7be2:	0003      	movs	r3, r0
    7be4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7be6:	231f      	movs	r3, #31
    7be8:	18fb      	adds	r3, r7, r3
    7bea:	781b      	ldrb	r3, [r3, #0]
    7bec:	2b00      	cmp	r3, #0
    7bee:	d169      	bne.n	7cc4 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7bf0:	68bb      	ldr	r3, [r7, #8]
    7bf2:	005a      	lsls	r2, r3, #1
    7bf4:	23ff      	movs	r3, #255	; 0xff
    7bf6:	005b      	lsls	r3, r3, #1
    7bf8:	4013      	ands	r3, r2
    7bfa:	3330      	adds	r3, #48	; 0x30
    7bfc:	68fa      	ldr	r2, [r7, #12]
    7bfe:	18d3      	adds	r3, r2, r3
    7c00:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    7c02:	687b      	ldr	r3, [r7, #4]
    7c04:	b2da      	uxtb	r2, r3
    7c06:	697b      	ldr	r3, [r7, #20]
    7c08:	701a      	strb	r2, [r3, #0]
    7c0a:	697b      	ldr	r3, [r7, #20]
    7c0c:	3301      	adds	r3, #1
    7c0e:	687a      	ldr	r2, [r7, #4]
    7c10:	b292      	uxth	r2, r2
    7c12:	0a12      	lsrs	r2, r2, #8
    7c14:	b292      	uxth	r2, r2
    7c16:	b2d2      	uxtb	r2, r2
    7c18:	701a      	strb	r2, [r3, #0]
			break;
    7c1a:	e056      	b.n	7cca <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7c1c:	68fb      	ldr	r3, [r7, #12]
    7c1e:	6a1a      	ldr	r2, [r3, #32]
    7c20:	68bb      	ldr	r3, [r7, #8]
    7c22:	09db      	lsrs	r3, r3, #7
    7c24:	18d2      	adds	r2, r2, r3
    7c26:	231f      	movs	r3, #31
    7c28:	18fc      	adds	r4, r7, r3
    7c2a:	68fb      	ldr	r3, [r7, #12]
    7c2c:	0011      	movs	r1, r2
    7c2e:	0018      	movs	r0, r3
    7c30:	4b2b      	ldr	r3, [pc, #172]	; (7ce0 <put_fat+0x238>)
    7c32:	4798      	blx	r3
    7c34:	0003      	movs	r3, r0
    7c36:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7c38:	231f      	movs	r3, #31
    7c3a:	18fb      	adds	r3, r7, r3
    7c3c:	781b      	ldrb	r3, [r3, #0]
    7c3e:	2b00      	cmp	r3, #0
    7c40:	d142      	bne.n	7cc8 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    7c42:	68bb      	ldr	r3, [r7, #8]
    7c44:	009a      	lsls	r2, r3, #2
    7c46:	23fe      	movs	r3, #254	; 0xfe
    7c48:	005b      	lsls	r3, r3, #1
    7c4a:	4013      	ands	r3, r2
    7c4c:	3330      	adds	r3, #48	; 0x30
    7c4e:	68fa      	ldr	r2, [r7, #12]
    7c50:	18d3      	adds	r3, r2, r3
    7c52:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    7c54:	697b      	ldr	r3, [r7, #20]
    7c56:	3303      	adds	r3, #3
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	061a      	lsls	r2, r3, #24
    7c5c:	697b      	ldr	r3, [r7, #20]
    7c5e:	3302      	adds	r3, #2
    7c60:	781b      	ldrb	r3, [r3, #0]
    7c62:	041b      	lsls	r3, r3, #16
    7c64:	4313      	orrs	r3, r2
    7c66:	697a      	ldr	r2, [r7, #20]
    7c68:	3201      	adds	r2, #1
    7c6a:	7812      	ldrb	r2, [r2, #0]
    7c6c:	0212      	lsls	r2, r2, #8
    7c6e:	4313      	orrs	r3, r2
    7c70:	697a      	ldr	r2, [r7, #20]
    7c72:	7812      	ldrb	r2, [r2, #0]
    7c74:	4313      	orrs	r3, r2
    7c76:	0f1b      	lsrs	r3, r3, #28
    7c78:	071b      	lsls	r3, r3, #28
    7c7a:	687a      	ldr	r2, [r7, #4]
    7c7c:	4313      	orrs	r3, r2
    7c7e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    7c80:	687b      	ldr	r3, [r7, #4]
    7c82:	b2da      	uxtb	r2, r3
    7c84:	697b      	ldr	r3, [r7, #20]
    7c86:	701a      	strb	r2, [r3, #0]
    7c88:	697b      	ldr	r3, [r7, #20]
    7c8a:	3301      	adds	r3, #1
    7c8c:	687a      	ldr	r2, [r7, #4]
    7c8e:	b292      	uxth	r2, r2
    7c90:	0a12      	lsrs	r2, r2, #8
    7c92:	b292      	uxth	r2, r2
    7c94:	b2d2      	uxtb	r2, r2
    7c96:	701a      	strb	r2, [r3, #0]
    7c98:	697b      	ldr	r3, [r7, #20]
    7c9a:	3302      	adds	r3, #2
    7c9c:	687a      	ldr	r2, [r7, #4]
    7c9e:	0c12      	lsrs	r2, r2, #16
    7ca0:	b2d2      	uxtb	r2, r2
    7ca2:	701a      	strb	r2, [r3, #0]
    7ca4:	697b      	ldr	r3, [r7, #20]
    7ca6:	3303      	adds	r3, #3
    7ca8:	687a      	ldr	r2, [r7, #4]
    7caa:	0e12      	lsrs	r2, r2, #24
    7cac:	b2d2      	uxtb	r2, r2
    7cae:	701a      	strb	r2, [r3, #0]
			break;
    7cb0:	e00b      	b.n	7cca <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    7cb2:	231f      	movs	r3, #31
    7cb4:	18fb      	adds	r3, r7, r3
    7cb6:	2202      	movs	r2, #2
    7cb8:	701a      	strb	r2, [r3, #0]
    7cba:	e006      	b.n	7cca <put_fat+0x222>
			if (res != FR_OK) break;
    7cbc:	46c0      	nop			; (mov r8, r8)
    7cbe:	e004      	b.n	7cca <put_fat+0x222>
			if (res != FR_OK) break;
    7cc0:	46c0      	nop			; (mov r8, r8)
    7cc2:	e002      	b.n	7cca <put_fat+0x222>
			if (res != FR_OK) break;
    7cc4:	46c0      	nop			; (mov r8, r8)
    7cc6:	e000      	b.n	7cca <put_fat+0x222>
			if (res != FR_OK) break;
    7cc8:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    7cca:	68fb      	ldr	r3, [r7, #12]
    7ccc:	2201      	movs	r2, #1
    7cce:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7cd0:	231f      	movs	r3, #31
    7cd2:	18fb      	adds	r3, r7, r3
    7cd4:	781b      	ldrb	r3, [r3, #0]
}
    7cd6:	0018      	movs	r0, r3
    7cd8:	46bd      	mov	sp, r7
    7cda:	b009      	add	sp, #36	; 0x24
    7cdc:	bd90      	pop	{r4, r7, pc}
    7cde:	46c0      	nop			; (mov r8, r8)
    7ce0:	000076a5 	.word	0x000076a5

00007ce4 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    7ce4:	b590      	push	{r4, r7, lr}
    7ce6:	b085      	sub	sp, #20
    7ce8:	af00      	add	r7, sp, #0
    7cea:	6078      	str	r0, [r7, #4]
    7cec:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7cee:	683b      	ldr	r3, [r7, #0]
    7cf0:	2b01      	cmp	r3, #1
    7cf2:	d904      	bls.n	7cfe <remove_chain+0x1a>
    7cf4:	687b      	ldr	r3, [r7, #4]
    7cf6:	699a      	ldr	r2, [r3, #24]
    7cf8:	683b      	ldr	r3, [r7, #0]
    7cfa:	429a      	cmp	r2, r3
    7cfc:	d804      	bhi.n	7d08 <remove_chain+0x24>
		res = FR_INT_ERR;
    7cfe:	230f      	movs	r3, #15
    7d00:	18fb      	adds	r3, r7, r3
    7d02:	2202      	movs	r2, #2
    7d04:	701a      	strb	r2, [r3, #0]
    7d06:	e045      	b.n	7d94 <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7d08:	230f      	movs	r3, #15
    7d0a:	18fb      	adds	r3, r7, r3
    7d0c:	2200      	movs	r2, #0
    7d0e:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7d10:	e037      	b.n	7d82 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7d12:	683a      	ldr	r2, [r7, #0]
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	0011      	movs	r1, r2
    7d18:	0018      	movs	r0, r3
    7d1a:	4b22      	ldr	r3, [pc, #136]	; (7da4 <remove_chain+0xc0>)
    7d1c:	4798      	blx	r3
    7d1e:	0003      	movs	r3, r0
    7d20:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    7d22:	68bb      	ldr	r3, [r7, #8]
    7d24:	2b00      	cmp	r3, #0
    7d26:	d032      	beq.n	7d8e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7d28:	68bb      	ldr	r3, [r7, #8]
    7d2a:	2b01      	cmp	r3, #1
    7d2c:	d104      	bne.n	7d38 <remove_chain+0x54>
    7d2e:	230f      	movs	r3, #15
    7d30:	18fb      	adds	r3, r7, r3
    7d32:	2202      	movs	r2, #2
    7d34:	701a      	strb	r2, [r3, #0]
    7d36:	e02d      	b.n	7d94 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7d38:	68bb      	ldr	r3, [r7, #8]
    7d3a:	3301      	adds	r3, #1
    7d3c:	d104      	bne.n	7d48 <remove_chain+0x64>
    7d3e:	230f      	movs	r3, #15
    7d40:	18fb      	adds	r3, r7, r3
    7d42:	2201      	movs	r2, #1
    7d44:	701a      	strb	r2, [r3, #0]
    7d46:	e025      	b.n	7d94 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7d48:	230f      	movs	r3, #15
    7d4a:	18fc      	adds	r4, r7, r3
    7d4c:	6839      	ldr	r1, [r7, #0]
    7d4e:	687b      	ldr	r3, [r7, #4]
    7d50:	2200      	movs	r2, #0
    7d52:	0018      	movs	r0, r3
    7d54:	4b14      	ldr	r3, [pc, #80]	; (7da8 <remove_chain+0xc4>)
    7d56:	4798      	blx	r3
    7d58:	0003      	movs	r3, r0
    7d5a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7d5c:	230f      	movs	r3, #15
    7d5e:	18fb      	adds	r3, r7, r3
    7d60:	781b      	ldrb	r3, [r3, #0]
    7d62:	2b00      	cmp	r3, #0
    7d64:	d115      	bne.n	7d92 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7d66:	687b      	ldr	r3, [r7, #4]
    7d68:	691b      	ldr	r3, [r3, #16]
    7d6a:	3301      	adds	r3, #1
    7d6c:	d007      	beq.n	7d7e <remove_chain+0x9a>
				fs->free_clust++;
    7d6e:	687b      	ldr	r3, [r7, #4]
    7d70:	691b      	ldr	r3, [r3, #16]
    7d72:	1c5a      	adds	r2, r3, #1
    7d74:	687b      	ldr	r3, [r7, #4]
    7d76:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    7d78:	687b      	ldr	r3, [r7, #4]
    7d7a:	2201      	movs	r2, #1
    7d7c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    7d7e:	68bb      	ldr	r3, [r7, #8]
    7d80:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7d82:	687b      	ldr	r3, [r7, #4]
    7d84:	699a      	ldr	r2, [r3, #24]
    7d86:	683b      	ldr	r3, [r7, #0]
    7d88:	429a      	cmp	r2, r3
    7d8a:	d8c2      	bhi.n	7d12 <remove_chain+0x2e>
    7d8c:	e002      	b.n	7d94 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7d8e:	46c0      	nop			; (mov r8, r8)
    7d90:	e000      	b.n	7d94 <remove_chain+0xb0>
			if (res != FR_OK) break;
    7d92:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    7d94:	230f      	movs	r3, #15
    7d96:	18fb      	adds	r3, r7, r3
    7d98:	781b      	ldrb	r3, [r3, #0]
}
    7d9a:	0018      	movs	r0, r3
    7d9c:	46bd      	mov	sp, r7
    7d9e:	b005      	add	sp, #20
    7da0:	bd90      	pop	{r4, r7, pc}
    7da2:	46c0      	nop			; (mov r8, r8)
    7da4:	0000793d 	.word	0x0000793d
    7da8:	00007aa9 	.word	0x00007aa9

00007dac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7dac:	b590      	push	{r4, r7, lr}
    7dae:	b087      	sub	sp, #28
    7db0:	af00      	add	r7, sp, #0
    7db2:	6078      	str	r0, [r7, #4]
    7db4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    7db6:	683b      	ldr	r3, [r7, #0]
    7db8:	2b00      	cmp	r3, #0
    7dba:	d10d      	bne.n	7dd8 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7dbc:	687b      	ldr	r3, [r7, #4]
    7dbe:	68db      	ldr	r3, [r3, #12]
    7dc0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7dc2:	693b      	ldr	r3, [r7, #16]
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	d004      	beq.n	7dd2 <create_chain+0x26>
    7dc8:	687b      	ldr	r3, [r7, #4]
    7dca:	699a      	ldr	r2, [r3, #24]
    7dcc:	693b      	ldr	r3, [r7, #16]
    7dce:	429a      	cmp	r2, r3
    7dd0:	d818      	bhi.n	7e04 <create_chain+0x58>
    7dd2:	2301      	movs	r3, #1
    7dd4:	613b      	str	r3, [r7, #16]
    7dd6:	e015      	b.n	7e04 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7dd8:	683a      	ldr	r2, [r7, #0]
    7dda:	687b      	ldr	r3, [r7, #4]
    7ddc:	0011      	movs	r1, r2
    7dde:	0018      	movs	r0, r3
    7de0:	4b3e      	ldr	r3, [pc, #248]	; (7edc <create_chain+0x130>)
    7de2:	4798      	blx	r3
    7de4:	0003      	movs	r3, r0
    7de6:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7de8:	68bb      	ldr	r3, [r7, #8]
    7dea:	2b01      	cmp	r3, #1
    7dec:	d801      	bhi.n	7df2 <create_chain+0x46>
    7dee:	2301      	movs	r3, #1
    7df0:	e070      	b.n	7ed4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7df2:	687b      	ldr	r3, [r7, #4]
    7df4:	699a      	ldr	r2, [r3, #24]
    7df6:	68bb      	ldr	r3, [r7, #8]
    7df8:	429a      	cmp	r2, r3
    7dfa:	d901      	bls.n	7e00 <create_chain+0x54>
    7dfc:	68bb      	ldr	r3, [r7, #8]
    7dfe:	e069      	b.n	7ed4 <create_chain+0x128>
		scl = clst;
    7e00:	683b      	ldr	r3, [r7, #0]
    7e02:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    7e04:	693b      	ldr	r3, [r7, #16]
    7e06:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7e08:	697b      	ldr	r3, [r7, #20]
    7e0a:	3301      	adds	r3, #1
    7e0c:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	699a      	ldr	r2, [r3, #24]
    7e12:	697b      	ldr	r3, [r7, #20]
    7e14:	429a      	cmp	r2, r3
    7e16:	d807      	bhi.n	7e28 <create_chain+0x7c>
			ncl = 2;
    7e18:	2302      	movs	r3, #2
    7e1a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7e1c:	697a      	ldr	r2, [r7, #20]
    7e1e:	693b      	ldr	r3, [r7, #16]
    7e20:	429a      	cmp	r2, r3
    7e22:	d901      	bls.n	7e28 <create_chain+0x7c>
    7e24:	2300      	movs	r3, #0
    7e26:	e055      	b.n	7ed4 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7e28:	697a      	ldr	r2, [r7, #20]
    7e2a:	687b      	ldr	r3, [r7, #4]
    7e2c:	0011      	movs	r1, r2
    7e2e:	0018      	movs	r0, r3
    7e30:	4b2a      	ldr	r3, [pc, #168]	; (7edc <create_chain+0x130>)
    7e32:	4798      	blx	r3
    7e34:	0003      	movs	r3, r0
    7e36:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    7e38:	68bb      	ldr	r3, [r7, #8]
    7e3a:	2b00      	cmp	r3, #0
    7e3c:	d00d      	beq.n	7e5a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7e3e:	68bb      	ldr	r3, [r7, #8]
    7e40:	3301      	adds	r3, #1
    7e42:	d002      	beq.n	7e4a <create_chain+0x9e>
    7e44:	68bb      	ldr	r3, [r7, #8]
    7e46:	2b01      	cmp	r3, #1
    7e48:	d101      	bne.n	7e4e <create_chain+0xa2>
			return cs;
    7e4a:	68bb      	ldr	r3, [r7, #8]
    7e4c:	e042      	b.n	7ed4 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    7e4e:	697a      	ldr	r2, [r7, #20]
    7e50:	693b      	ldr	r3, [r7, #16]
    7e52:	429a      	cmp	r2, r3
    7e54:	d1d8      	bne.n	7e08 <create_chain+0x5c>
    7e56:	2300      	movs	r3, #0
    7e58:	e03c      	b.n	7ed4 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    7e5a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7e5c:	230f      	movs	r3, #15
    7e5e:	18fc      	adds	r4, r7, r3
    7e60:	4a1f      	ldr	r2, [pc, #124]	; (7ee0 <create_chain+0x134>)
    7e62:	6979      	ldr	r1, [r7, #20]
    7e64:	687b      	ldr	r3, [r7, #4]
    7e66:	0018      	movs	r0, r3
    7e68:	4b1e      	ldr	r3, [pc, #120]	; (7ee4 <create_chain+0x138>)
    7e6a:	4798      	blx	r3
    7e6c:	0003      	movs	r3, r0
    7e6e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    7e70:	230f      	movs	r3, #15
    7e72:	18fb      	adds	r3, r7, r3
    7e74:	781b      	ldrb	r3, [r3, #0]
    7e76:	2b00      	cmp	r3, #0
    7e78:	d10c      	bne.n	7e94 <create_chain+0xe8>
    7e7a:	683b      	ldr	r3, [r7, #0]
    7e7c:	2b00      	cmp	r3, #0
    7e7e:	d009      	beq.n	7e94 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    7e80:	230f      	movs	r3, #15
    7e82:	18fc      	adds	r4, r7, r3
    7e84:	697a      	ldr	r2, [r7, #20]
    7e86:	6839      	ldr	r1, [r7, #0]
    7e88:	687b      	ldr	r3, [r7, #4]
    7e8a:	0018      	movs	r0, r3
    7e8c:	4b15      	ldr	r3, [pc, #84]	; (7ee4 <create_chain+0x138>)
    7e8e:	4798      	blx	r3
    7e90:	0003      	movs	r3, r0
    7e92:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    7e94:	230f      	movs	r3, #15
    7e96:	18fb      	adds	r3, r7, r3
    7e98:	781b      	ldrb	r3, [r3, #0]
    7e9a:	2b00      	cmp	r3, #0
    7e9c:	d10f      	bne.n	7ebe <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7e9e:	687b      	ldr	r3, [r7, #4]
    7ea0:	697a      	ldr	r2, [r7, #20]
    7ea2:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7ea4:	687b      	ldr	r3, [r7, #4]
    7ea6:	691b      	ldr	r3, [r3, #16]
    7ea8:	3301      	adds	r3, #1
    7eaa:	d012      	beq.n	7ed2 <create_chain+0x126>
			fs->free_clust--;
    7eac:	687b      	ldr	r3, [r7, #4]
    7eae:	691b      	ldr	r3, [r3, #16]
    7eb0:	1e5a      	subs	r2, r3, #1
    7eb2:	687b      	ldr	r3, [r7, #4]
    7eb4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    7eb6:	687b      	ldr	r3, [r7, #4]
    7eb8:	2201      	movs	r2, #1
    7eba:	715a      	strb	r2, [r3, #5]
    7ebc:	e009      	b.n	7ed2 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7ebe:	230f      	movs	r3, #15
    7ec0:	18fb      	adds	r3, r7, r3
    7ec2:	781b      	ldrb	r3, [r3, #0]
    7ec4:	2b01      	cmp	r3, #1
    7ec6:	d102      	bne.n	7ece <create_chain+0x122>
    7ec8:	2301      	movs	r3, #1
    7eca:	425b      	negs	r3, r3
    7ecc:	e000      	b.n	7ed0 <create_chain+0x124>
    7ece:	2301      	movs	r3, #1
    7ed0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    7ed2:	697b      	ldr	r3, [r7, #20]
}
    7ed4:	0018      	movs	r0, r3
    7ed6:	46bd      	mov	sp, r7
    7ed8:	b007      	add	sp, #28
    7eda:	bd90      	pop	{r4, r7, pc}
    7edc:	0000793d 	.word	0x0000793d
    7ee0:	0fffffff 	.word	0x0fffffff
    7ee4:	00007aa9 	.word	0x00007aa9

00007ee8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7ee8:	b580      	push	{r7, lr}
    7eea:	b084      	sub	sp, #16
    7eec:	af00      	add	r7, sp, #0
    7eee:	6078      	str	r0, [r7, #4]
    7ef0:	000a      	movs	r2, r1
    7ef2:	1cbb      	adds	r3, r7, #2
    7ef4:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    7ef6:	687b      	ldr	r3, [r7, #4]
    7ef8:	1cba      	adds	r2, r7, #2
    7efa:	8812      	ldrh	r2, [r2, #0]
    7efc:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7efe:	687b      	ldr	r3, [r7, #4]
    7f00:	689b      	ldr	r3, [r3, #8]
    7f02:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7f04:	68fb      	ldr	r3, [r7, #12]
    7f06:	2b01      	cmp	r3, #1
    7f08:	d005      	beq.n	7f16 <dir_sdi+0x2e>
    7f0a:	687b      	ldr	r3, [r7, #4]
    7f0c:	681b      	ldr	r3, [r3, #0]
    7f0e:	699a      	ldr	r2, [r3, #24]
    7f10:	68fb      	ldr	r3, [r7, #12]
    7f12:	429a      	cmp	r2, r3
    7f14:	d801      	bhi.n	7f1a <dir_sdi+0x32>
		return FR_INT_ERR;
    7f16:	2302      	movs	r3, #2
    7f18:	e075      	b.n	8006 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7f1a:	68fb      	ldr	r3, [r7, #12]
    7f1c:	2b00      	cmp	r3, #0
    7f1e:	d108      	bne.n	7f32 <dir_sdi+0x4a>
    7f20:	687b      	ldr	r3, [r7, #4]
    7f22:	681b      	ldr	r3, [r3, #0]
    7f24:	781b      	ldrb	r3, [r3, #0]
    7f26:	2b03      	cmp	r3, #3
    7f28:	d103      	bne.n	7f32 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    7f2a:	687b      	ldr	r3, [r7, #4]
    7f2c:	681b      	ldr	r3, [r3, #0]
    7f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f30:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7f32:	68fb      	ldr	r3, [r7, #12]
    7f34:	2b00      	cmp	r3, #0
    7f36:	d116      	bne.n	7f66 <dir_sdi+0x7e>
		dj->clust = clst;
    7f38:	687b      	ldr	r3, [r7, #4]
    7f3a:	68fa      	ldr	r2, [r7, #12]
    7f3c:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7f3e:	687b      	ldr	r3, [r7, #4]
    7f40:	681b      	ldr	r3, [r3, #0]
    7f42:	891b      	ldrh	r3, [r3, #8]
    7f44:	1cba      	adds	r2, r7, #2
    7f46:	8812      	ldrh	r2, [r2, #0]
    7f48:	429a      	cmp	r2, r3
    7f4a:	d301      	bcc.n	7f50 <dir_sdi+0x68>
			return FR_INT_ERR;
    7f4c:	2302      	movs	r3, #2
    7f4e:	e05a      	b.n	8006 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7f50:	687b      	ldr	r3, [r7, #4]
    7f52:	681b      	ldr	r3, [r3, #0]
    7f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f56:	1cba      	adds	r2, r7, #2
    7f58:	8812      	ldrh	r2, [r2, #0]
    7f5a:	0912      	lsrs	r2, r2, #4
    7f5c:	b292      	uxth	r2, r2
    7f5e:	189a      	adds	r2, r3, r2
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	611a      	str	r2, [r3, #16]
    7f64:	e042      	b.n	7fec <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7f66:	687b      	ldr	r3, [r7, #4]
    7f68:	681b      	ldr	r3, [r3, #0]
    7f6a:	789b      	ldrb	r3, [r3, #2]
    7f6c:	b29a      	uxth	r2, r3
    7f6e:	230a      	movs	r3, #10
    7f70:	18fb      	adds	r3, r7, r3
    7f72:	0112      	lsls	r2, r2, #4
    7f74:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7f76:	e020      	b.n	7fba <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7f78:	687b      	ldr	r3, [r7, #4]
    7f7a:	681b      	ldr	r3, [r3, #0]
    7f7c:	68fa      	ldr	r2, [r7, #12]
    7f7e:	0011      	movs	r1, r2
    7f80:	0018      	movs	r0, r3
    7f82:	4b23      	ldr	r3, [pc, #140]	; (8010 <dir_sdi+0x128>)
    7f84:	4798      	blx	r3
    7f86:	0003      	movs	r3, r0
    7f88:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7f8a:	68fb      	ldr	r3, [r7, #12]
    7f8c:	3301      	adds	r3, #1
    7f8e:	d101      	bne.n	7f94 <dir_sdi+0xac>
    7f90:	2301      	movs	r3, #1
    7f92:	e038      	b.n	8006 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7f94:	68fb      	ldr	r3, [r7, #12]
    7f96:	2b01      	cmp	r3, #1
    7f98:	d905      	bls.n	7fa6 <dir_sdi+0xbe>
    7f9a:	687b      	ldr	r3, [r7, #4]
    7f9c:	681b      	ldr	r3, [r3, #0]
    7f9e:	699a      	ldr	r2, [r3, #24]
    7fa0:	68fb      	ldr	r3, [r7, #12]
    7fa2:	429a      	cmp	r2, r3
    7fa4:	d801      	bhi.n	7faa <dir_sdi+0xc2>
				return FR_INT_ERR;
    7fa6:	2302      	movs	r3, #2
    7fa8:	e02d      	b.n	8006 <dir_sdi+0x11e>
			idx -= ic;
    7faa:	1cbb      	adds	r3, r7, #2
    7fac:	1cb9      	adds	r1, r7, #2
    7fae:	220a      	movs	r2, #10
    7fb0:	18ba      	adds	r2, r7, r2
    7fb2:	8809      	ldrh	r1, [r1, #0]
    7fb4:	8812      	ldrh	r2, [r2, #0]
    7fb6:	1a8a      	subs	r2, r1, r2
    7fb8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7fba:	1cba      	adds	r2, r7, #2
    7fbc:	230a      	movs	r3, #10
    7fbe:	18fb      	adds	r3, r7, r3
    7fc0:	8812      	ldrh	r2, [r2, #0]
    7fc2:	881b      	ldrh	r3, [r3, #0]
    7fc4:	429a      	cmp	r2, r3
    7fc6:	d2d7      	bcs.n	7f78 <dir_sdi+0x90>
		}
		dj->clust = clst;
    7fc8:	687b      	ldr	r3, [r7, #4]
    7fca:	68fa      	ldr	r2, [r7, #12]
    7fcc:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7fce:	687b      	ldr	r3, [r7, #4]
    7fd0:	681b      	ldr	r3, [r3, #0]
    7fd2:	68fa      	ldr	r2, [r7, #12]
    7fd4:	0011      	movs	r1, r2
    7fd6:	0018      	movs	r0, r3
    7fd8:	4b0e      	ldr	r3, [pc, #56]	; (8014 <dir_sdi+0x12c>)
    7fda:	4798      	blx	r3
    7fdc:	0002      	movs	r2, r0
    7fde:	1cbb      	adds	r3, r7, #2
    7fe0:	881b      	ldrh	r3, [r3, #0]
    7fe2:	091b      	lsrs	r3, r3, #4
    7fe4:	b29b      	uxth	r3, r3
    7fe6:	18d2      	adds	r2, r2, r3
    7fe8:	687b      	ldr	r3, [r7, #4]
    7fea:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7fec:	687b      	ldr	r3, [r7, #4]
    7fee:	681b      	ldr	r3, [r3, #0]
    7ff0:	3330      	adds	r3, #48	; 0x30
    7ff2:	001a      	movs	r2, r3
    7ff4:	1cbb      	adds	r3, r7, #2
    7ff6:	881b      	ldrh	r3, [r3, #0]
    7ff8:	210f      	movs	r1, #15
    7ffa:	400b      	ands	r3, r1
    7ffc:	015b      	lsls	r3, r3, #5
    7ffe:	18d2      	adds	r2, r2, r3
    8000:	687b      	ldr	r3, [r7, #4]
    8002:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    8004:	2300      	movs	r3, #0
}
    8006:	0018      	movs	r0, r3
    8008:	46bd      	mov	sp, r7
    800a:	b004      	add	sp, #16
    800c:	bd80      	pop	{r7, pc}
    800e:	46c0      	nop			; (mov r8, r8)
    8010:	0000793d 	.word	0x0000793d
    8014:	00007905 	.word	0x00007905

00008018 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    8018:	b590      	push	{r4, r7, lr}
    801a:	b085      	sub	sp, #20
    801c:	af00      	add	r7, sp, #0
    801e:	6078      	str	r0, [r7, #4]
    8020:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    8022:	687b      	ldr	r3, [r7, #4]
    8024:	88da      	ldrh	r2, [r3, #6]
    8026:	2308      	movs	r3, #8
    8028:	18fb      	adds	r3, r7, r3
    802a:	3201      	adds	r2, #1
    802c:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    802e:	2308      	movs	r3, #8
    8030:	18fb      	adds	r3, r7, r3
    8032:	881b      	ldrh	r3, [r3, #0]
    8034:	2b00      	cmp	r3, #0
    8036:	d003      	beq.n	8040 <dir_next+0x28>
    8038:	687b      	ldr	r3, [r7, #4]
    803a:	691b      	ldr	r3, [r3, #16]
    803c:	2b00      	cmp	r3, #0
    803e:	d101      	bne.n	8044 <dir_next+0x2c>
		return FR_NO_FILE;
    8040:	2304      	movs	r3, #4
    8042:	e0d2      	b.n	81ea <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    8044:	2308      	movs	r3, #8
    8046:	18fb      	adds	r3, r7, r3
    8048:	881b      	ldrh	r3, [r3, #0]
    804a:	220f      	movs	r2, #15
    804c:	4013      	ands	r3, r2
    804e:	b29b      	uxth	r3, r3
    8050:	2b00      	cmp	r3, #0
    8052:	d000      	beq.n	8056 <dir_next+0x3e>
    8054:	e0b6      	b.n	81c4 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    8056:	687b      	ldr	r3, [r7, #4]
    8058:	691b      	ldr	r3, [r3, #16]
    805a:	1c5a      	adds	r2, r3, #1
    805c:	687b      	ldr	r3, [r7, #4]
    805e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    8060:	687b      	ldr	r3, [r7, #4]
    8062:	68db      	ldr	r3, [r3, #12]
    8064:	2b00      	cmp	r3, #0
    8066:	d10a      	bne.n	807e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    8068:	687b      	ldr	r3, [r7, #4]
    806a:	681b      	ldr	r3, [r3, #0]
    806c:	891b      	ldrh	r3, [r3, #8]
    806e:	2208      	movs	r2, #8
    8070:	18ba      	adds	r2, r7, r2
    8072:	8812      	ldrh	r2, [r2, #0]
    8074:	429a      	cmp	r2, r3
    8076:	d200      	bcs.n	807a <dir_next+0x62>
    8078:	e0a4      	b.n	81c4 <dir_next+0x1ac>
				return FR_NO_FILE;
    807a:	2304      	movs	r3, #4
    807c:	e0b5      	b.n	81ea <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    807e:	2308      	movs	r3, #8
    8080:	18fb      	adds	r3, r7, r3
    8082:	881b      	ldrh	r3, [r3, #0]
    8084:	091b      	lsrs	r3, r3, #4
    8086:	b29b      	uxth	r3, r3
    8088:	001a      	movs	r2, r3
    808a:	687b      	ldr	r3, [r7, #4]
    808c:	681b      	ldr	r3, [r3, #0]
    808e:	789b      	ldrb	r3, [r3, #2]
    8090:	3b01      	subs	r3, #1
    8092:	4013      	ands	r3, r2
    8094:	d000      	beq.n	8098 <dir_next+0x80>
    8096:	e095      	b.n	81c4 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    8098:	687b      	ldr	r3, [r7, #4]
    809a:	681a      	ldr	r2, [r3, #0]
    809c:	687b      	ldr	r3, [r7, #4]
    809e:	68db      	ldr	r3, [r3, #12]
    80a0:	0019      	movs	r1, r3
    80a2:	0010      	movs	r0, r2
    80a4:	4b53      	ldr	r3, [pc, #332]	; (81f4 <dir_next+0x1dc>)
    80a6:	4798      	blx	r3
    80a8:	0003      	movs	r3, r0
    80aa:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    80ac:	68fb      	ldr	r3, [r7, #12]
    80ae:	2b01      	cmp	r3, #1
    80b0:	d801      	bhi.n	80b6 <dir_next+0x9e>
    80b2:	2302      	movs	r3, #2
    80b4:	e099      	b.n	81ea <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    80b6:	68fb      	ldr	r3, [r7, #12]
    80b8:	3301      	adds	r3, #1
    80ba:	d101      	bne.n	80c0 <dir_next+0xa8>
    80bc:	2301      	movs	r3, #1
    80be:	e094      	b.n	81ea <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    80c0:	687b      	ldr	r3, [r7, #4]
    80c2:	681b      	ldr	r3, [r3, #0]
    80c4:	699a      	ldr	r2, [r3, #24]
    80c6:	68fb      	ldr	r3, [r7, #12]
    80c8:	429a      	cmp	r2, r3
    80ca:	d900      	bls.n	80ce <dir_next+0xb6>
    80cc:	e06d      	b.n	81aa <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    80ce:	683b      	ldr	r3, [r7, #0]
    80d0:	2b00      	cmp	r3, #0
    80d2:	d101      	bne.n	80d8 <dir_next+0xc0>
    80d4:	2304      	movs	r3, #4
    80d6:	e088      	b.n	81ea <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    80d8:	687b      	ldr	r3, [r7, #4]
    80da:	681a      	ldr	r2, [r3, #0]
    80dc:	687b      	ldr	r3, [r7, #4]
    80de:	68db      	ldr	r3, [r3, #12]
    80e0:	0019      	movs	r1, r3
    80e2:	0010      	movs	r0, r2
    80e4:	4b44      	ldr	r3, [pc, #272]	; (81f8 <dir_next+0x1e0>)
    80e6:	4798      	blx	r3
    80e8:	0003      	movs	r3, r0
    80ea:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    80ec:	68fb      	ldr	r3, [r7, #12]
    80ee:	2b00      	cmp	r3, #0
    80f0:	d101      	bne.n	80f6 <dir_next+0xde>
    80f2:	2307      	movs	r3, #7
    80f4:	e079      	b.n	81ea <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    80f6:	68fb      	ldr	r3, [r7, #12]
    80f8:	2b01      	cmp	r3, #1
    80fa:	d101      	bne.n	8100 <dir_next+0xe8>
    80fc:	2302      	movs	r3, #2
    80fe:	e074      	b.n	81ea <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    8100:	68fb      	ldr	r3, [r7, #12]
    8102:	3301      	adds	r3, #1
    8104:	d101      	bne.n	810a <dir_next+0xf2>
    8106:	2301      	movs	r3, #1
    8108:	e06f      	b.n	81ea <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	681b      	ldr	r3, [r3, #0]
    810e:	2100      	movs	r1, #0
    8110:	0018      	movs	r0, r3
    8112:	4b3a      	ldr	r3, [pc, #232]	; (81fc <dir_next+0x1e4>)
    8114:	4798      	blx	r3
    8116:	1e03      	subs	r3, r0, #0
    8118:	d001      	beq.n	811e <dir_next+0x106>
    811a:	2301      	movs	r3, #1
    811c:	e065      	b.n	81ea <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    811e:	687b      	ldr	r3, [r7, #4]
    8120:	681b      	ldr	r3, [r3, #0]
    8122:	3330      	adds	r3, #48	; 0x30
    8124:	0018      	movs	r0, r3
    8126:	2380      	movs	r3, #128	; 0x80
    8128:	009b      	lsls	r3, r3, #2
    812a:	001a      	movs	r2, r3
    812c:	2100      	movs	r1, #0
    812e:	4b34      	ldr	r3, [pc, #208]	; (8200 <dir_next+0x1e8>)
    8130:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    8132:	687b      	ldr	r3, [r7, #4]
    8134:	681c      	ldr	r4, [r3, #0]
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	681b      	ldr	r3, [r3, #0]
    813a:	68fa      	ldr	r2, [r7, #12]
    813c:	0011      	movs	r1, r2
    813e:	0018      	movs	r0, r3
    8140:	4b30      	ldr	r3, [pc, #192]	; (8204 <dir_next+0x1ec>)
    8142:	4798      	blx	r3
    8144:	0003      	movs	r3, r0
    8146:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8148:	230b      	movs	r3, #11
    814a:	18fb      	adds	r3, r7, r3
    814c:	2200      	movs	r2, #0
    814e:	701a      	strb	r2, [r3, #0]
    8150:	e019      	b.n	8186 <dir_next+0x16e>
						dj->fs->wflag = 1;
    8152:	687b      	ldr	r3, [r7, #4]
    8154:	681b      	ldr	r3, [r3, #0]
    8156:	2201      	movs	r2, #1
    8158:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    815a:	687b      	ldr	r3, [r7, #4]
    815c:	681b      	ldr	r3, [r3, #0]
    815e:	2100      	movs	r1, #0
    8160:	0018      	movs	r0, r3
    8162:	4b26      	ldr	r3, [pc, #152]	; (81fc <dir_next+0x1e4>)
    8164:	4798      	blx	r3
    8166:	1e03      	subs	r3, r0, #0
    8168:	d001      	beq.n	816e <dir_next+0x156>
    816a:	2301      	movs	r3, #1
    816c:	e03d      	b.n	81ea <dir_next+0x1d2>
						dj->fs->winsect++;
    816e:	687b      	ldr	r3, [r7, #4]
    8170:	681b      	ldr	r3, [r3, #0]
    8172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8174:	3201      	adds	r2, #1
    8176:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    8178:	230b      	movs	r3, #11
    817a:	18fb      	adds	r3, r7, r3
    817c:	781a      	ldrb	r2, [r3, #0]
    817e:	230b      	movs	r3, #11
    8180:	18fb      	adds	r3, r7, r3
    8182:	3201      	adds	r2, #1
    8184:	701a      	strb	r2, [r3, #0]
    8186:	687b      	ldr	r3, [r7, #4]
    8188:	681b      	ldr	r3, [r3, #0]
    818a:	789b      	ldrb	r3, [r3, #2]
    818c:	220b      	movs	r2, #11
    818e:	18ba      	adds	r2, r7, r2
    8190:	7812      	ldrb	r2, [r2, #0]
    8192:	429a      	cmp	r2, r3
    8194:	d3dd      	bcc.n	8152 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    8196:	687b      	ldr	r3, [r7, #4]
    8198:	681b      	ldr	r3, [r3, #0]
    819a:	687a      	ldr	r2, [r7, #4]
    819c:	6812      	ldr	r2, [r2, #0]
    819e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    81a0:	220b      	movs	r2, #11
    81a2:	18ba      	adds	r2, r7, r2
    81a4:	7812      	ldrb	r2, [r2, #0]
    81a6:	1a8a      	subs	r2, r1, r2
    81a8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    81aa:	687b      	ldr	r3, [r7, #4]
    81ac:	68fa      	ldr	r2, [r7, #12]
    81ae:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    81b0:	687b      	ldr	r3, [r7, #4]
    81b2:	681b      	ldr	r3, [r3, #0]
    81b4:	68fa      	ldr	r2, [r7, #12]
    81b6:	0011      	movs	r1, r2
    81b8:	0018      	movs	r0, r3
    81ba:	4b12      	ldr	r3, [pc, #72]	; (8204 <dir_next+0x1ec>)
    81bc:	4798      	blx	r3
    81be:	0002      	movs	r2, r0
    81c0:	687b      	ldr	r3, [r7, #4]
    81c2:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    81c4:	687b      	ldr	r3, [r7, #4]
    81c6:	2208      	movs	r2, #8
    81c8:	18ba      	adds	r2, r7, r2
    81ca:	8812      	ldrh	r2, [r2, #0]
    81cc:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    81ce:	687b      	ldr	r3, [r7, #4]
    81d0:	681b      	ldr	r3, [r3, #0]
    81d2:	3330      	adds	r3, #48	; 0x30
    81d4:	001a      	movs	r2, r3
    81d6:	2308      	movs	r3, #8
    81d8:	18fb      	adds	r3, r7, r3
    81da:	881b      	ldrh	r3, [r3, #0]
    81dc:	210f      	movs	r1, #15
    81de:	400b      	ands	r3, r1
    81e0:	015b      	lsls	r3, r3, #5
    81e2:	18d2      	adds	r2, r2, r3
    81e4:	687b      	ldr	r3, [r7, #4]
    81e6:	615a      	str	r2, [r3, #20]

	return FR_OK;
    81e8:	2300      	movs	r3, #0
}
    81ea:	0018      	movs	r0, r3
    81ec:	46bd      	mov	sp, r7
    81ee:	b005      	add	sp, #20
    81f0:	bd90      	pop	{r4, r7, pc}
    81f2:	46c0      	nop			; (mov r8, r8)
    81f4:	0000793d 	.word	0x0000793d
    81f8:	00007dad 	.word	0x00007dad
    81fc:	000076a5 	.word	0x000076a5
    8200:	000075f9 	.word	0x000075f9
    8204:	00007905 	.word	0x00007905

00008208 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    8208:	b590      	push	{r4, r7, lr}
    820a:	b087      	sub	sp, #28
    820c:	af00      	add	r7, sp, #0
    820e:	6078      	str	r0, [r7, #4]
    8210:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    8212:	683b      	ldr	r3, [r7, #0]
    8214:	781b      	ldrb	r3, [r3, #0]
    8216:	001a      	movs	r2, r3
    8218:	2340      	movs	r3, #64	; 0x40
    821a:	439a      	bics	r2, r3
    821c:	0013      	movs	r3, r2
    821e:	1e5a      	subs	r2, r3, #1
    8220:	0013      	movs	r3, r2
    8222:	005b      	lsls	r3, r3, #1
    8224:	189b      	adds	r3, r3, r2
    8226:	009b      	lsls	r3, r3, #2
    8228:	189b      	adds	r3, r3, r2
    822a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    822c:	2300      	movs	r3, #0
    822e:	613b      	str	r3, [r7, #16]
    8230:	230e      	movs	r3, #14
    8232:	18fb      	adds	r3, r7, r3
    8234:	2201      	movs	r2, #1
    8236:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    8238:	4a31      	ldr	r2, [pc, #196]	; (8300 <cmp_lfn+0xf8>)
    823a:	693b      	ldr	r3, [r7, #16]
    823c:	18d3      	adds	r3, r2, r3
    823e:	781b      	ldrb	r3, [r3, #0]
    8240:	3301      	adds	r3, #1
    8242:	683a      	ldr	r2, [r7, #0]
    8244:	18d3      	adds	r3, r2, r3
    8246:	781b      	ldrb	r3, [r3, #0]
    8248:	021b      	lsls	r3, r3, #8
    824a:	b21a      	sxth	r2, r3
    824c:	492c      	ldr	r1, [pc, #176]	; (8300 <cmp_lfn+0xf8>)
    824e:	693b      	ldr	r3, [r7, #16]
    8250:	18cb      	adds	r3, r1, r3
    8252:	781b      	ldrb	r3, [r3, #0]
    8254:	0019      	movs	r1, r3
    8256:	683b      	ldr	r3, [r7, #0]
    8258:	185b      	adds	r3, r3, r1
    825a:	781b      	ldrb	r3, [r3, #0]
    825c:	b21b      	sxth	r3, r3
    825e:	4313      	orrs	r3, r2
    8260:	b21a      	sxth	r2, r3
    8262:	230c      	movs	r3, #12
    8264:	18fb      	adds	r3, r7, r3
    8266:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    8268:	230e      	movs	r3, #14
    826a:	18fb      	adds	r3, r7, r3
    826c:	881b      	ldrh	r3, [r3, #0]
    826e:	2b00      	cmp	r3, #0
    8270:	d01f      	beq.n	82b2 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    8272:	230e      	movs	r3, #14
    8274:	18fc      	adds	r4, r7, r3
    8276:	230c      	movs	r3, #12
    8278:	18fb      	adds	r3, r7, r3
    827a:	881b      	ldrh	r3, [r3, #0]
    827c:	0018      	movs	r0, r3
    827e:	4b21      	ldr	r3, [pc, #132]	; (8304 <cmp_lfn+0xfc>)
    8280:	4798      	blx	r3
    8282:	0003      	movs	r3, r0
    8284:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    8286:	697b      	ldr	r3, [r7, #20]
    8288:	2bfe      	cmp	r3, #254	; 0xfe
    828a:	d810      	bhi.n	82ae <cmp_lfn+0xa6>
    828c:	697b      	ldr	r3, [r7, #20]
    828e:	1c5a      	adds	r2, r3, #1
    8290:	617a      	str	r2, [r7, #20]
    8292:	005b      	lsls	r3, r3, #1
    8294:	687a      	ldr	r2, [r7, #4]
    8296:	18d3      	adds	r3, r2, r3
    8298:	881b      	ldrh	r3, [r3, #0]
    829a:	0018      	movs	r0, r3
    829c:	4b19      	ldr	r3, [pc, #100]	; (8304 <cmp_lfn+0xfc>)
    829e:	4798      	blx	r3
    82a0:	0003      	movs	r3, r0
    82a2:	001a      	movs	r2, r3
    82a4:	230e      	movs	r3, #14
    82a6:	18fb      	adds	r3, r7, r3
    82a8:	881b      	ldrh	r3, [r3, #0]
    82aa:	4293      	cmp	r3, r2
    82ac:	d009      	beq.n	82c2 <cmp_lfn+0xba>
				return 0;				/* Not matched */
    82ae:	2300      	movs	r3, #0
    82b0:	e022      	b.n	82f8 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    82b2:	230c      	movs	r3, #12
    82b4:	18fb      	adds	r3, r7, r3
    82b6:	881b      	ldrh	r3, [r3, #0]
    82b8:	4a13      	ldr	r2, [pc, #76]	; (8308 <cmp_lfn+0x100>)
    82ba:	4293      	cmp	r3, r2
    82bc:	d001      	beq.n	82c2 <cmp_lfn+0xba>
    82be:	2300      	movs	r3, #0
    82c0:	e01a      	b.n	82f8 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    82c2:	693b      	ldr	r3, [r7, #16]
    82c4:	3301      	adds	r3, #1
    82c6:	613b      	str	r3, [r7, #16]
    82c8:	693b      	ldr	r3, [r7, #16]
    82ca:	2b0c      	cmp	r3, #12
    82cc:	d9b4      	bls.n	8238 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    82ce:	683b      	ldr	r3, [r7, #0]
    82d0:	781b      	ldrb	r3, [r3, #0]
    82d2:	001a      	movs	r2, r3
    82d4:	2340      	movs	r3, #64	; 0x40
    82d6:	4013      	ands	r3, r2
    82d8:	d00d      	beq.n	82f6 <cmp_lfn+0xee>
    82da:	230e      	movs	r3, #14
    82dc:	18fb      	adds	r3, r7, r3
    82de:	881b      	ldrh	r3, [r3, #0]
    82e0:	2b00      	cmp	r3, #0
    82e2:	d008      	beq.n	82f6 <cmp_lfn+0xee>
    82e4:	697b      	ldr	r3, [r7, #20]
    82e6:	005b      	lsls	r3, r3, #1
    82e8:	687a      	ldr	r2, [r7, #4]
    82ea:	18d3      	adds	r3, r2, r3
    82ec:	881b      	ldrh	r3, [r3, #0]
    82ee:	2b00      	cmp	r3, #0
    82f0:	d001      	beq.n	82f6 <cmp_lfn+0xee>
		return 0;
    82f2:	2300      	movs	r3, #0
    82f4:	e000      	b.n	82f8 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    82f6:	2301      	movs	r3, #1
}
    82f8:	0018      	movs	r0, r3
    82fa:	46bd      	mov	sp, r7
    82fc:	b007      	add	sp, #28
    82fe:	bd90      	pop	{r4, r7, pc}
    8300:	0000c578 	.word	0x0000c578
    8304:	0000aec1 	.word	0x0000aec1
    8308:	0000ffff 	.word	0x0000ffff

0000830c <pick_lfn>:
static
int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
	BYTE *dir			/* Pointer to the directory entry */
)
{
    830c:	b580      	push	{r7, lr}
    830e:	b086      	sub	sp, #24
    8310:	af00      	add	r7, sp, #0
    8312:	6078      	str	r0, [r7, #4]
    8314:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
    8316:	683b      	ldr	r3, [r7, #0]
    8318:	781b      	ldrb	r3, [r3, #0]
    831a:	001a      	movs	r2, r3
    831c:	233f      	movs	r3, #63	; 0x3f
    831e:	4013      	ands	r3, r2
    8320:	1e5a      	subs	r2, r3, #1
    8322:	0013      	movs	r3, r2
    8324:	005b      	lsls	r3, r3, #1
    8326:	189b      	adds	r3, r3, r2
    8328:	009b      	lsls	r3, r3, #2
    832a:	189b      	adds	r3, r3, r2
    832c:	617b      	str	r3, [r7, #20]

	s = 0; wc = 1;
    832e:	2300      	movs	r3, #0
    8330:	613b      	str	r3, [r7, #16]
    8332:	230e      	movs	r3, #14
    8334:	18fb      	adds	r3, r7, r3
    8336:	2201      	movs	r2, #1
    8338:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
    833a:	4a2b      	ldr	r2, [pc, #172]	; (83e8 <pick_lfn+0xdc>)
    833c:	693b      	ldr	r3, [r7, #16]
    833e:	18d3      	adds	r3, r2, r3
    8340:	781b      	ldrb	r3, [r3, #0]
    8342:	3301      	adds	r3, #1
    8344:	683a      	ldr	r2, [r7, #0]
    8346:	18d3      	adds	r3, r2, r3
    8348:	781b      	ldrb	r3, [r3, #0]
    834a:	021b      	lsls	r3, r3, #8
    834c:	b21a      	sxth	r2, r3
    834e:	4926      	ldr	r1, [pc, #152]	; (83e8 <pick_lfn+0xdc>)
    8350:	693b      	ldr	r3, [r7, #16]
    8352:	18cb      	adds	r3, r1, r3
    8354:	781b      	ldrb	r3, [r3, #0]
    8356:	0019      	movs	r1, r3
    8358:	683b      	ldr	r3, [r7, #0]
    835a:	185b      	adds	r3, r3, r1
    835c:	781b      	ldrb	r3, [r3, #0]
    835e:	b21b      	sxth	r3, r3
    8360:	4313      	orrs	r3, r2
    8362:	b21a      	sxth	r2, r3
    8364:	230c      	movs	r3, #12
    8366:	18fb      	adds	r3, r7, r3
    8368:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    836a:	230e      	movs	r3, #14
    836c:	18fb      	adds	r3, r7, r3
    836e:	881b      	ldrh	r3, [r3, #0]
    8370:	2b00      	cmp	r3, #0
    8372:	d015      	beq.n	83a0 <pick_lfn+0x94>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
    8374:	697b      	ldr	r3, [r7, #20]
    8376:	2bfe      	cmp	r3, #254	; 0xfe
    8378:	d901      	bls.n	837e <pick_lfn+0x72>
    837a:	2300      	movs	r3, #0
    837c:	e030      	b.n	83e0 <pick_lfn+0xd4>
			lfnbuf[i++] = wc = uc;			/* Store it */
    837e:	697b      	ldr	r3, [r7, #20]
    8380:	1c5a      	adds	r2, r3, #1
    8382:	617a      	str	r2, [r7, #20]
    8384:	005b      	lsls	r3, r3, #1
    8386:	687a      	ldr	r2, [r7, #4]
    8388:	18d3      	adds	r3, r2, r3
    838a:	220e      	movs	r2, #14
    838c:	18ba      	adds	r2, r7, r2
    838e:	210c      	movs	r1, #12
    8390:	1879      	adds	r1, r7, r1
    8392:	8809      	ldrh	r1, [r1, #0]
    8394:	8011      	strh	r1, [r2, #0]
    8396:	220e      	movs	r2, #14
    8398:	18ba      	adds	r2, r7, r2
    839a:	8812      	ldrh	r2, [r2, #0]
    839c:	801a      	strh	r2, [r3, #0]
    839e:	e007      	b.n	83b0 <pick_lfn+0xa4>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
    83a0:	230c      	movs	r3, #12
    83a2:	18fb      	adds	r3, r7, r3
    83a4:	881b      	ldrh	r3, [r3, #0]
    83a6:	4a11      	ldr	r2, [pc, #68]	; (83ec <pick_lfn+0xe0>)
    83a8:	4293      	cmp	r3, r2
    83aa:	d001      	beq.n	83b0 <pick_lfn+0xa4>
    83ac:	2300      	movs	r3, #0
    83ae:	e017      	b.n	83e0 <pick_lfn+0xd4>
		}
	} while (++s < 13);						/* Read all character in the entry */
    83b0:	693b      	ldr	r3, [r7, #16]
    83b2:	3301      	adds	r3, #1
    83b4:	613b      	str	r3, [r7, #16]
    83b6:	693b      	ldr	r3, [r7, #16]
    83b8:	2b0c      	cmp	r3, #12
    83ba:	d9be      	bls.n	833a <pick_lfn+0x2e>

	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
    83bc:	683b      	ldr	r3, [r7, #0]
    83be:	781b      	ldrb	r3, [r3, #0]
    83c0:	001a      	movs	r2, r3
    83c2:	2340      	movs	r3, #64	; 0x40
    83c4:	4013      	ands	r3, r2
    83c6:	d00a      	beq.n	83de <pick_lfn+0xd2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
    83c8:	697b      	ldr	r3, [r7, #20]
    83ca:	2bfe      	cmp	r3, #254	; 0xfe
    83cc:	d901      	bls.n	83d2 <pick_lfn+0xc6>
    83ce:	2300      	movs	r3, #0
    83d0:	e006      	b.n	83e0 <pick_lfn+0xd4>
		lfnbuf[i] = 0;
    83d2:	697b      	ldr	r3, [r7, #20]
    83d4:	005b      	lsls	r3, r3, #1
    83d6:	687a      	ldr	r2, [r7, #4]
    83d8:	18d3      	adds	r3, r2, r3
    83da:	2200      	movs	r2, #0
    83dc:	801a      	strh	r2, [r3, #0]
	}

	return 1;
    83de:	2301      	movs	r3, #1
}
    83e0:	0018      	movs	r0, r3
    83e2:	46bd      	mov	sp, r7
    83e4:	b006      	add	sp, #24
    83e6:	bd80      	pop	{r7, pc}
    83e8:	0000c578 	.word	0x0000c578
    83ec:	0000ffff 	.word	0x0000ffff

000083f0 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    83f0:	b580      	push	{r7, lr}
    83f2:	b088      	sub	sp, #32
    83f4:	af00      	add	r7, sp, #0
    83f6:	60f8      	str	r0, [r7, #12]
    83f8:	60b9      	str	r1, [r7, #8]
    83fa:	0019      	movs	r1, r3
    83fc:	1dfb      	adds	r3, r7, #7
    83fe:	701a      	strb	r2, [r3, #0]
    8400:	1dbb      	adds	r3, r7, #6
    8402:	1c0a      	adds	r2, r1, #0
    8404:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    8406:	68bb      	ldr	r3, [r7, #8]
    8408:	330d      	adds	r3, #13
    840a:	1dba      	adds	r2, r7, #6
    840c:	7812      	ldrb	r2, [r2, #0]
    840e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    8410:	68bb      	ldr	r3, [r7, #8]
    8412:	330b      	adds	r3, #11
    8414:	220f      	movs	r2, #15
    8416:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    8418:	68bb      	ldr	r3, [r7, #8]
    841a:	330c      	adds	r3, #12
    841c:	2200      	movs	r2, #0
    841e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    8420:	68bb      	ldr	r3, [r7, #8]
    8422:	331a      	adds	r3, #26
    8424:	2200      	movs	r2, #0
    8426:	701a      	strb	r2, [r3, #0]
    8428:	68bb      	ldr	r3, [r7, #8]
    842a:	331b      	adds	r3, #27
    842c:	2200      	movs	r2, #0
    842e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    8430:	1dfb      	adds	r3, r7, #7
    8432:	781b      	ldrb	r3, [r3, #0]
    8434:	1e5a      	subs	r2, r3, #1
    8436:	0013      	movs	r3, r2
    8438:	005b      	lsls	r3, r3, #1
    843a:	189b      	adds	r3, r3, r2
    843c:	009b      	lsls	r3, r3, #2
    843e:	189b      	adds	r3, r3, r2
    8440:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    8442:	2316      	movs	r3, #22
    8444:	18fb      	adds	r3, r7, r3
    8446:	2200      	movs	r2, #0
    8448:	801a      	strh	r2, [r3, #0]
    844a:	2300      	movs	r3, #0
    844c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    844e:	2316      	movs	r3, #22
    8450:	18fb      	adds	r3, r7, r3
    8452:	881b      	ldrh	r3, [r3, #0]
    8454:	4a28      	ldr	r2, [pc, #160]	; (84f8 <fit_lfn+0x108>)
    8456:	4293      	cmp	r3, r2
    8458:	d009      	beq.n	846e <fit_lfn+0x7e>
    845a:	69fb      	ldr	r3, [r7, #28]
    845c:	1c5a      	adds	r2, r3, #1
    845e:	61fa      	str	r2, [r7, #28]
    8460:	005b      	lsls	r3, r3, #1
    8462:	68fa      	ldr	r2, [r7, #12]
    8464:	18d2      	adds	r2, r2, r3
    8466:	2316      	movs	r3, #22
    8468:	18fb      	adds	r3, r7, r3
    846a:	8812      	ldrh	r2, [r2, #0]
    846c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    846e:	4a23      	ldr	r2, [pc, #140]	; (84fc <fit_lfn+0x10c>)
    8470:	69bb      	ldr	r3, [r7, #24]
    8472:	18d3      	adds	r3, r2, r3
    8474:	781b      	ldrb	r3, [r3, #0]
    8476:	001a      	movs	r2, r3
    8478:	68bb      	ldr	r3, [r7, #8]
    847a:	189b      	adds	r3, r3, r2
    847c:	2216      	movs	r2, #22
    847e:	18ba      	adds	r2, r7, r2
    8480:	8812      	ldrh	r2, [r2, #0]
    8482:	b2d2      	uxtb	r2, r2
    8484:	701a      	strb	r2, [r3, #0]
    8486:	4a1d      	ldr	r2, [pc, #116]	; (84fc <fit_lfn+0x10c>)
    8488:	69bb      	ldr	r3, [r7, #24]
    848a:	18d3      	adds	r3, r2, r3
    848c:	781b      	ldrb	r3, [r3, #0]
    848e:	3301      	adds	r3, #1
    8490:	68ba      	ldr	r2, [r7, #8]
    8492:	18d3      	adds	r3, r2, r3
    8494:	2216      	movs	r2, #22
    8496:	18ba      	adds	r2, r7, r2
    8498:	8812      	ldrh	r2, [r2, #0]
    849a:	0a12      	lsrs	r2, r2, #8
    849c:	b292      	uxth	r2, r2
    849e:	b2d2      	uxtb	r2, r2
    84a0:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    84a2:	2316      	movs	r3, #22
    84a4:	18fb      	adds	r3, r7, r3
    84a6:	881b      	ldrh	r3, [r3, #0]
    84a8:	2b00      	cmp	r3, #0
    84aa:	d104      	bne.n	84b6 <fit_lfn+0xc6>
    84ac:	2316      	movs	r3, #22
    84ae:	18fb      	adds	r3, r7, r3
    84b0:	2201      	movs	r2, #1
    84b2:	4252      	negs	r2, r2
    84b4:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    84b6:	69bb      	ldr	r3, [r7, #24]
    84b8:	3301      	adds	r3, #1
    84ba:	61bb      	str	r3, [r7, #24]
    84bc:	69bb      	ldr	r3, [r7, #24]
    84be:	2b0c      	cmp	r3, #12
    84c0:	d9c5      	bls.n	844e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    84c2:	2316      	movs	r3, #22
    84c4:	18fb      	adds	r3, r7, r3
    84c6:	881b      	ldrh	r3, [r3, #0]
    84c8:	4a0b      	ldr	r2, [pc, #44]	; (84f8 <fit_lfn+0x108>)
    84ca:	4293      	cmp	r3, r2
    84cc:	d006      	beq.n	84dc <fit_lfn+0xec>
    84ce:	69fb      	ldr	r3, [r7, #28]
    84d0:	005b      	lsls	r3, r3, #1
    84d2:	68fa      	ldr	r2, [r7, #12]
    84d4:	18d3      	adds	r3, r2, r3
    84d6:	881b      	ldrh	r3, [r3, #0]
    84d8:	2b00      	cmp	r3, #0
    84da:	d105      	bne.n	84e8 <fit_lfn+0xf8>
    84dc:	1dfb      	adds	r3, r7, #7
    84de:	1dfa      	adds	r2, r7, #7
    84e0:	7812      	ldrb	r2, [r2, #0]
    84e2:	2140      	movs	r1, #64	; 0x40
    84e4:	430a      	orrs	r2, r1
    84e6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    84e8:	68bb      	ldr	r3, [r7, #8]
    84ea:	1dfa      	adds	r2, r7, #7
    84ec:	7812      	ldrb	r2, [r2, #0]
    84ee:	701a      	strb	r2, [r3, #0]
}
    84f0:	46c0      	nop			; (mov r8, r8)
    84f2:	46bd      	mov	sp, r7
    84f4:	b008      	add	sp, #32
    84f6:	bd80      	pop	{r7, pc}
    84f8:	0000ffff 	.word	0x0000ffff
    84fc:	0000c578 	.word	0x0000c578

00008500 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    8500:	b580      	push	{r7, lr}
    8502:	b08a      	sub	sp, #40	; 0x28
    8504:	af00      	add	r7, sp, #0
    8506:	60f8      	str	r0, [r7, #12]
    8508:	60b9      	str	r1, [r7, #8]
    850a:	607a      	str	r2, [r7, #4]
    850c:	001a      	movs	r2, r3
    850e:	1cbb      	adds	r3, r7, #2
    8510:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    8512:	68b9      	ldr	r1, [r7, #8]
    8514:	68fb      	ldr	r3, [r7, #12]
    8516:	220b      	movs	r2, #11
    8518:	0018      	movs	r0, r3
    851a:	4b38      	ldr	r3, [pc, #224]	; (85fc <gen_numname+0xfc>)
    851c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    851e:	1cbb      	adds	r3, r7, #2
    8520:	881b      	ldrh	r3, [r3, #0]
    8522:	2b05      	cmp	r3, #5
    8524:	d911      	bls.n	854a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    8526:	1cbb      	adds	r3, r7, #2
    8528:	881b      	ldrh	r3, [r3, #0]
    852a:	b29a      	uxth	r2, r3
    852c:	0852      	lsrs	r2, r2, #1
    852e:	03db      	lsls	r3, r3, #15
    8530:	4313      	orrs	r3, r2
    8532:	b299      	uxth	r1, r3
    8534:	687b      	ldr	r3, [r7, #4]
    8536:	1c9a      	adds	r2, r3, #2
    8538:	607a      	str	r2, [r7, #4]
    853a:	881a      	ldrh	r2, [r3, #0]
    853c:	1cbb      	adds	r3, r7, #2
    853e:	188a      	adds	r2, r1, r2
    8540:	801a      	strh	r2, [r3, #0]
    8542:	687b      	ldr	r3, [r7, #4]
    8544:	881b      	ldrh	r3, [r3, #0]
    8546:	2b00      	cmp	r3, #0
    8548:	d1ed      	bne.n	8526 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    854a:	2307      	movs	r3, #7
    854c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    854e:	1cbb      	adds	r3, r7, #2
    8550:	881b      	ldrh	r3, [r3, #0]
    8552:	b2db      	uxtb	r3, r3
    8554:	220f      	movs	r2, #15
    8556:	4013      	ands	r3, r2
    8558:	b2da      	uxtb	r2, r3
    855a:	2327      	movs	r3, #39	; 0x27
    855c:	18fb      	adds	r3, r7, r3
    855e:	3230      	adds	r2, #48	; 0x30
    8560:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    8562:	2327      	movs	r3, #39	; 0x27
    8564:	18fb      	adds	r3, r7, r3
    8566:	781b      	ldrb	r3, [r3, #0]
    8568:	2b39      	cmp	r3, #57	; 0x39
    856a:	d906      	bls.n	857a <gen_numname+0x7a>
    856c:	2327      	movs	r3, #39	; 0x27
    856e:	18fb      	adds	r3, r7, r3
    8570:	2227      	movs	r2, #39	; 0x27
    8572:	18ba      	adds	r2, r7, r2
    8574:	7812      	ldrb	r2, [r2, #0]
    8576:	3207      	adds	r2, #7
    8578:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    857a:	6a3b      	ldr	r3, [r7, #32]
    857c:	1e5a      	subs	r2, r3, #1
    857e:	623a      	str	r2, [r7, #32]
    8580:	2214      	movs	r2, #20
    8582:	18ba      	adds	r2, r7, r2
    8584:	2127      	movs	r1, #39	; 0x27
    8586:	1879      	adds	r1, r7, r1
    8588:	7809      	ldrb	r1, [r1, #0]
    858a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    858c:	1cbb      	adds	r3, r7, #2
    858e:	1cba      	adds	r2, r7, #2
    8590:	8812      	ldrh	r2, [r2, #0]
    8592:	0912      	lsrs	r2, r2, #4
    8594:	801a      	strh	r2, [r3, #0]
	} while (seq);
    8596:	1cbb      	adds	r3, r7, #2
    8598:	881b      	ldrh	r3, [r3, #0]
    859a:	2b00      	cmp	r3, #0
    859c:	d1d7      	bne.n	854e <gen_numname+0x4e>
	ns[i] = '~';
    859e:	2314      	movs	r3, #20
    85a0:	18fa      	adds	r2, r7, r3
    85a2:	6a3b      	ldr	r3, [r7, #32]
    85a4:	18d3      	adds	r3, r2, r3
    85a6:	227e      	movs	r2, #126	; 0x7e
    85a8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    85aa:	2300      	movs	r3, #0
    85ac:	61fb      	str	r3, [r7, #28]
    85ae:	e002      	b.n	85b6 <gen_numname+0xb6>
    85b0:	69fb      	ldr	r3, [r7, #28]
    85b2:	3301      	adds	r3, #1
    85b4:	61fb      	str	r3, [r7, #28]
    85b6:	69fa      	ldr	r2, [r7, #28]
    85b8:	6a3b      	ldr	r3, [r7, #32]
    85ba:	429a      	cmp	r2, r3
    85bc:	d205      	bcs.n	85ca <gen_numname+0xca>
    85be:	68fa      	ldr	r2, [r7, #12]
    85c0:	69fb      	ldr	r3, [r7, #28]
    85c2:	18d3      	adds	r3, r2, r3
    85c4:	781b      	ldrb	r3, [r3, #0]
    85c6:	2b20      	cmp	r3, #32
    85c8:	d1f2      	bne.n	85b0 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    85ca:	69fb      	ldr	r3, [r7, #28]
    85cc:	1c5a      	adds	r2, r3, #1
    85ce:	61fa      	str	r2, [r7, #28]
    85d0:	68fa      	ldr	r2, [r7, #12]
    85d2:	18d2      	adds	r2, r2, r3
    85d4:	6a3b      	ldr	r3, [r7, #32]
    85d6:	2b07      	cmp	r3, #7
    85d8:	d806      	bhi.n	85e8 <gen_numname+0xe8>
    85da:	6a3b      	ldr	r3, [r7, #32]
    85dc:	1c59      	adds	r1, r3, #1
    85de:	6239      	str	r1, [r7, #32]
    85e0:	2114      	movs	r1, #20
    85e2:	1879      	adds	r1, r7, r1
    85e4:	5ccb      	ldrb	r3, [r1, r3]
    85e6:	e000      	b.n	85ea <gen_numname+0xea>
    85e8:	2320      	movs	r3, #32
    85ea:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    85ec:	69fb      	ldr	r3, [r7, #28]
    85ee:	2b07      	cmp	r3, #7
    85f0:	d9eb      	bls.n	85ca <gen_numname+0xca>
}
    85f2:	46c0      	nop			; (mov r8, r8)
    85f4:	46bd      	mov	sp, r7
    85f6:	b00a      	add	sp, #40	; 0x28
    85f8:	bd80      	pop	{r7, pc}
    85fa:	46c0      	nop			; (mov r8, r8)
    85fc:	000075c1 	.word	0x000075c1

00008600 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    8600:	b580      	push	{r7, lr}
    8602:	b084      	sub	sp, #16
    8604:	af00      	add	r7, sp, #0
    8606:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    8608:	230f      	movs	r3, #15
    860a:	18fb      	adds	r3, r7, r3
    860c:	2200      	movs	r2, #0
    860e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    8610:	230b      	movs	r3, #11
    8612:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    8614:	230f      	movs	r3, #15
    8616:	18fb      	adds	r3, r7, r3
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	b2da      	uxtb	r2, r3
    861c:	0852      	lsrs	r2, r2, #1
    861e:	01db      	lsls	r3, r3, #7
    8620:	4313      	orrs	r3, r2
    8622:	b2d9      	uxtb	r1, r3
    8624:	687b      	ldr	r3, [r7, #4]
    8626:	1c5a      	adds	r2, r3, #1
    8628:	607a      	str	r2, [r7, #4]
    862a:	781a      	ldrb	r2, [r3, #0]
    862c:	230f      	movs	r3, #15
    862e:	18fb      	adds	r3, r7, r3
    8630:	188a      	adds	r2, r1, r2
    8632:	701a      	strb	r2, [r3, #0]
    8634:	68bb      	ldr	r3, [r7, #8]
    8636:	3b01      	subs	r3, #1
    8638:	60bb      	str	r3, [r7, #8]
    863a:	68bb      	ldr	r3, [r7, #8]
    863c:	2b00      	cmp	r3, #0
    863e:	d1e9      	bne.n	8614 <sum_sfn+0x14>
	return sum;
    8640:	230f      	movs	r3, #15
    8642:	18fb      	adds	r3, r7, r3
    8644:	781b      	ldrb	r3, [r3, #0]
}
    8646:	0018      	movs	r0, r3
    8648:	46bd      	mov	sp, r7
    864a:	b004      	add	sp, #16
    864c:	bd80      	pop	{r7, pc}
	...

00008650 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    8650:	b590      	push	{r4, r7, lr}
    8652:	b087      	sub	sp, #28
    8654:	af00      	add	r7, sp, #0
    8656:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    8658:	2317      	movs	r3, #23
    865a:	18fc      	adds	r4, r7, r3
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	2100      	movs	r1, #0
    8660:	0018      	movs	r0, r3
    8662:	4b74      	ldr	r3, [pc, #464]	; (8834 <dir_find+0x1e4>)
    8664:	4798      	blx	r3
    8666:	0003      	movs	r3, r0
    8668:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    866a:	2317      	movs	r3, #23
    866c:	18fb      	adds	r3, r7, r3
    866e:	781b      	ldrb	r3, [r3, #0]
    8670:	2b00      	cmp	r3, #0
    8672:	d003      	beq.n	867c <dir_find+0x2c>
    8674:	2317      	movs	r3, #23
    8676:	18fb      	adds	r3, r7, r3
    8678:	781b      	ldrb	r3, [r3, #0]
    867a:	e0d6      	b.n	882a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    867c:	2314      	movs	r3, #20
    867e:	18fb      	adds	r3, r7, r3
    8680:	22ff      	movs	r2, #255	; 0xff
    8682:	701a      	strb	r2, [r3, #0]
    8684:	2315      	movs	r3, #21
    8686:	18fb      	adds	r3, r7, r3
    8688:	2214      	movs	r2, #20
    868a:	18ba      	adds	r2, r7, r2
    868c:	7812      	ldrb	r2, [r2, #0]
    868e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8690:	687b      	ldr	r3, [r7, #4]
    8692:	681a      	ldr	r2, [r3, #0]
    8694:	687b      	ldr	r3, [r7, #4]
    8696:	691b      	ldr	r3, [r3, #16]
    8698:	2117      	movs	r1, #23
    869a:	187c      	adds	r4, r7, r1
    869c:	0019      	movs	r1, r3
    869e:	0010      	movs	r0, r2
    86a0:	4b65      	ldr	r3, [pc, #404]	; (8838 <dir_find+0x1e8>)
    86a2:	4798      	blx	r3
    86a4:	0003      	movs	r3, r0
    86a6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    86a8:	2317      	movs	r3, #23
    86aa:	18fb      	adds	r3, r7, r3
    86ac:	781b      	ldrb	r3, [r3, #0]
    86ae:	2b00      	cmp	r3, #0
    86b0:	d000      	beq.n	86b4 <dir_find+0x64>
    86b2:	e0b2      	b.n	881a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    86b4:	687b      	ldr	r3, [r7, #4]
    86b6:	695b      	ldr	r3, [r3, #20]
    86b8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    86ba:	2316      	movs	r3, #22
    86bc:	18fb      	adds	r3, r7, r3
    86be:	693a      	ldr	r2, [r7, #16]
    86c0:	7812      	ldrb	r2, [r2, #0]
    86c2:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    86c4:	2316      	movs	r3, #22
    86c6:	18fb      	adds	r3, r7, r3
    86c8:	781b      	ldrb	r3, [r3, #0]
    86ca:	2b00      	cmp	r3, #0
    86cc:	d104      	bne.n	86d8 <dir_find+0x88>
    86ce:	2317      	movs	r3, #23
    86d0:	18fb      	adds	r3, r7, r3
    86d2:	2204      	movs	r2, #4
    86d4:	701a      	strb	r2, [r3, #0]
    86d6:	e0a5      	b.n	8824 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    86d8:	693b      	ldr	r3, [r7, #16]
    86da:	330b      	adds	r3, #11
    86dc:	781a      	ldrb	r2, [r3, #0]
    86de:	230f      	movs	r3, #15
    86e0:	18fb      	adds	r3, r7, r3
    86e2:	213f      	movs	r1, #63	; 0x3f
    86e4:	400a      	ands	r2, r1
    86e6:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    86e8:	2316      	movs	r3, #22
    86ea:	18fb      	adds	r3, r7, r3
    86ec:	781b      	ldrb	r3, [r3, #0]
    86ee:	2be5      	cmp	r3, #229	; 0xe5
    86f0:	d00a      	beq.n	8708 <dir_find+0xb8>
    86f2:	230f      	movs	r3, #15
    86f4:	18fb      	adds	r3, r7, r3
    86f6:	781b      	ldrb	r3, [r3, #0]
    86f8:	2208      	movs	r2, #8
    86fa:	4013      	ands	r3, r2
    86fc:	d009      	beq.n	8712 <dir_find+0xc2>
    86fe:	230f      	movs	r3, #15
    8700:	18fb      	adds	r3, r7, r3
    8702:	781b      	ldrb	r3, [r3, #0]
    8704:	2b0f      	cmp	r3, #15
    8706:	d004      	beq.n	8712 <dir_find+0xc2>
			ord = 0xFF;
    8708:	2315      	movs	r3, #21
    870a:	18fb      	adds	r3, r7, r3
    870c:	22ff      	movs	r2, #255	; 0xff
    870e:	701a      	strb	r2, [r3, #0]
    8710:	e073      	b.n	87fa <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    8712:	230f      	movs	r3, #15
    8714:	18fb      	adds	r3, r7, r3
    8716:	781b      	ldrb	r3, [r3, #0]
    8718:	2b0f      	cmp	r3, #15
    871a:	d145      	bne.n	87a8 <dir_find+0x158>
				if (dj->lfn) {
    871c:	687b      	ldr	r3, [r7, #4]
    871e:	69db      	ldr	r3, [r3, #28]
    8720:	2b00      	cmp	r3, #0
    8722:	d100      	bne.n	8726 <dir_find+0xd6>
    8724:	e069      	b.n	87fa <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    8726:	2316      	movs	r3, #22
    8728:	18fb      	adds	r3, r7, r3
    872a:	781b      	ldrb	r3, [r3, #0]
    872c:	2240      	movs	r2, #64	; 0x40
    872e:	4013      	ands	r3, r2
    8730:	d016      	beq.n	8760 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    8732:	2314      	movs	r3, #20
    8734:	18fb      	adds	r3, r7, r3
    8736:	693a      	ldr	r2, [r7, #16]
    8738:	7b52      	ldrb	r2, [r2, #13]
    873a:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    873c:	2316      	movs	r3, #22
    873e:	18fb      	adds	r3, r7, r3
    8740:	2216      	movs	r2, #22
    8742:	18ba      	adds	r2, r7, r2
    8744:	7812      	ldrb	r2, [r2, #0]
    8746:	2140      	movs	r1, #64	; 0x40
    8748:	438a      	bics	r2, r1
    874a:	701a      	strb	r2, [r3, #0]
    874c:	2315      	movs	r3, #21
    874e:	18fb      	adds	r3, r7, r3
    8750:	2216      	movs	r2, #22
    8752:	18ba      	adds	r2, r7, r2
    8754:	7812      	ldrb	r2, [r2, #0]
    8756:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    8758:	687b      	ldr	r3, [r7, #4]
    875a:	88da      	ldrh	r2, [r3, #6]
    875c:	687b      	ldr	r3, [r7, #4]
    875e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    8760:	2316      	movs	r3, #22
    8762:	18fa      	adds	r2, r7, r3
    8764:	2315      	movs	r3, #21
    8766:	18fb      	adds	r3, r7, r3
    8768:	7812      	ldrb	r2, [r2, #0]
    876a:	781b      	ldrb	r3, [r3, #0]
    876c:	429a      	cmp	r2, r3
    876e:	d116      	bne.n	879e <dir_find+0x14e>
    8770:	693b      	ldr	r3, [r7, #16]
    8772:	330d      	adds	r3, #13
    8774:	781b      	ldrb	r3, [r3, #0]
    8776:	2214      	movs	r2, #20
    8778:	18ba      	adds	r2, r7, r2
    877a:	7812      	ldrb	r2, [r2, #0]
    877c:	429a      	cmp	r2, r3
    877e:	d10e      	bne.n	879e <dir_find+0x14e>
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	69db      	ldr	r3, [r3, #28]
    8784:	693a      	ldr	r2, [r7, #16]
    8786:	0011      	movs	r1, r2
    8788:	0018      	movs	r0, r3
    878a:	4b2c      	ldr	r3, [pc, #176]	; (883c <dir_find+0x1ec>)
    878c:	4798      	blx	r3
    878e:	1e03      	subs	r3, r0, #0
    8790:	d005      	beq.n	879e <dir_find+0x14e>
    8792:	2315      	movs	r3, #21
    8794:	18fb      	adds	r3, r7, r3
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	3b01      	subs	r3, #1
    879a:	b2da      	uxtb	r2, r3
    879c:	e000      	b.n	87a0 <dir_find+0x150>
    879e:	22ff      	movs	r2, #255	; 0xff
    87a0:	2315      	movs	r3, #21
    87a2:	18fb      	adds	r3, r7, r3
    87a4:	701a      	strb	r2, [r3, #0]
    87a6:	e028      	b.n	87fa <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    87a8:	2315      	movs	r3, #21
    87aa:	18fb      	adds	r3, r7, r3
    87ac:	781b      	ldrb	r3, [r3, #0]
    87ae:	2b00      	cmp	r3, #0
    87b0:	d10a      	bne.n	87c8 <dir_find+0x178>
    87b2:	693b      	ldr	r3, [r7, #16]
    87b4:	0018      	movs	r0, r3
    87b6:	4b22      	ldr	r3, [pc, #136]	; (8840 <dir_find+0x1f0>)
    87b8:	4798      	blx	r3
    87ba:	0003      	movs	r3, r0
    87bc:	001a      	movs	r2, r3
    87be:	2314      	movs	r3, #20
    87c0:	18fb      	adds	r3, r7, r3
    87c2:	781b      	ldrb	r3, [r3, #0]
    87c4:	4293      	cmp	r3, r2
    87c6:	d02a      	beq.n	881e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    87c8:	2315      	movs	r3, #21
    87ca:	18fb      	adds	r3, r7, r3
    87cc:	22ff      	movs	r2, #255	; 0xff
    87ce:	701a      	strb	r2, [r3, #0]
    87d0:	687b      	ldr	r3, [r7, #4]
    87d2:	2201      	movs	r2, #1
    87d4:	4252      	negs	r2, r2
    87d6:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	699b      	ldr	r3, [r3, #24]
    87dc:	330b      	adds	r3, #11
    87de:	781b      	ldrb	r3, [r3, #0]
    87e0:	001a      	movs	r2, r3
    87e2:	2301      	movs	r3, #1
    87e4:	4013      	ands	r3, r2
    87e6:	d108      	bne.n	87fa <dir_find+0x1aa>
    87e8:	687b      	ldr	r3, [r7, #4]
    87ea:	6999      	ldr	r1, [r3, #24]
    87ec:	693b      	ldr	r3, [r7, #16]
    87ee:	220b      	movs	r2, #11
    87f0:	0018      	movs	r0, r3
    87f2:	4b14      	ldr	r3, [pc, #80]	; (8844 <dir_find+0x1f4>)
    87f4:	4798      	blx	r3
    87f6:	1e03      	subs	r3, r0, #0
    87f8:	d013      	beq.n	8822 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    87fa:	2317      	movs	r3, #23
    87fc:	18fc      	adds	r4, r7, r3
    87fe:	687b      	ldr	r3, [r7, #4]
    8800:	2100      	movs	r1, #0
    8802:	0018      	movs	r0, r3
    8804:	4b10      	ldr	r3, [pc, #64]	; (8848 <dir_find+0x1f8>)
    8806:	4798      	blx	r3
    8808:	0003      	movs	r3, r0
    880a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    880c:	2317      	movs	r3, #23
    880e:	18fb      	adds	r3, r7, r3
    8810:	781b      	ldrb	r3, [r3, #0]
    8812:	2b00      	cmp	r3, #0
    8814:	d100      	bne.n	8818 <dir_find+0x1c8>
    8816:	e73b      	b.n	8690 <dir_find+0x40>
    8818:	e004      	b.n	8824 <dir_find+0x1d4>
		if (res != FR_OK) break;
    881a:	46c0      	nop			; (mov r8, r8)
    881c:	e002      	b.n	8824 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    881e:	46c0      	nop			; (mov r8, r8)
    8820:	e000      	b.n	8824 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    8822:	46c0      	nop			; (mov r8, r8)

	return res;
    8824:	2317      	movs	r3, #23
    8826:	18fb      	adds	r3, r7, r3
    8828:	781b      	ldrb	r3, [r3, #0]
}
    882a:	0018      	movs	r0, r3
    882c:	46bd      	mov	sp, r7
    882e:	b007      	add	sp, #28
    8830:	bd90      	pop	{r4, r7, pc}
    8832:	46c0      	nop			; (mov r8, r8)
    8834:	00007ee9 	.word	0x00007ee9
    8838:	000076a5 	.word	0x000076a5
    883c:	00008209 	.word	0x00008209
    8840:	00008601 	.word	0x00008601
    8844:	00007629 	.word	0x00007629
    8848:	00008019 	.word	0x00008019

0000884c <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    884c:	b590      	push	{r4, r7, lr}
    884e:	b087      	sub	sp, #28
    8850:	af00      	add	r7, sp, #0
    8852:	6078      	str	r0, [r7, #4]
	FRESULT res;
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
    8854:	2315      	movs	r3, #21
    8856:	18fb      	adds	r3, r7, r3
    8858:	22ff      	movs	r2, #255	; 0xff
    885a:	701a      	strb	r2, [r3, #0]
    885c:	2314      	movs	r3, #20
    885e:	18fb      	adds	r3, r7, r3
    8860:	22ff      	movs	r2, #255	; 0xff
    8862:	701a      	strb	r2, [r3, #0]
#endif

	res = FR_NO_FILE;
    8864:	2317      	movs	r3, #23
    8866:	18fb      	adds	r3, r7, r3
    8868:	2204      	movs	r2, #4
    886a:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    886c:	e0ae      	b.n	89cc <dir_read+0x180>
		res = move_window(dj->fs, dj->sect);
    886e:	687b      	ldr	r3, [r7, #4]
    8870:	681a      	ldr	r2, [r3, #0]
    8872:	687b      	ldr	r3, [r7, #4]
    8874:	691b      	ldr	r3, [r3, #16]
    8876:	2117      	movs	r1, #23
    8878:	187c      	adds	r4, r7, r1
    887a:	0019      	movs	r1, r3
    887c:	0010      	movs	r0, r2
    887e:	4b60      	ldr	r3, [pc, #384]	; (8a00 <dir_read+0x1b4>)
    8880:	4798      	blx	r3
    8882:	0003      	movs	r3, r0
    8884:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8886:	2317      	movs	r3, #23
    8888:	18fb      	adds	r3, r7, r3
    888a:	781b      	ldrb	r3, [r3, #0]
    888c:	2b00      	cmp	r3, #0
    888e:	d000      	beq.n	8892 <dir_read+0x46>
    8890:	e0a2      	b.n	89d8 <dir_read+0x18c>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8892:	687b      	ldr	r3, [r7, #4]
    8894:	695b      	ldr	r3, [r3, #20]
    8896:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    8898:	2316      	movs	r3, #22
    889a:	18fb      	adds	r3, r7, r3
    889c:	693a      	ldr	r2, [r7, #16]
    889e:	7812      	ldrb	r2, [r2, #0]
    88a0:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    88a2:	2316      	movs	r3, #22
    88a4:	18fb      	adds	r3, r7, r3
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	2b00      	cmp	r3, #0
    88aa:	d104      	bne.n	88b6 <dir_read+0x6a>
    88ac:	2317      	movs	r3, #23
    88ae:	18fb      	adds	r3, r7, r3
    88b0:	2204      	movs	r2, #4
    88b2:	701a      	strb	r2, [r3, #0]
    88b4:	e095      	b.n	89e2 <dir_read+0x196>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    88b6:	693b      	ldr	r3, [r7, #16]
    88b8:	330b      	adds	r3, #11
    88ba:	781a      	ldrb	r2, [r3, #0]
    88bc:	230f      	movs	r3, #15
    88be:	18fb      	adds	r3, r7, r3
    88c0:	213f      	movs	r1, #63	; 0x3f
    88c2:	400a      	ands	r2, r1
    88c4:	701a      	strb	r2, [r3, #0]
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    88c6:	2316      	movs	r3, #22
    88c8:	18fb      	adds	r3, r7, r3
    88ca:	781b      	ldrb	r3, [r3, #0]
    88cc:	2be5      	cmp	r3, #229	; 0xe5
    88ce:	d00f      	beq.n	88f0 <dir_read+0xa4>
    88d0:	2316      	movs	r3, #22
    88d2:	18fb      	adds	r3, r7, r3
    88d4:	781b      	ldrb	r3, [r3, #0]
    88d6:	2b2e      	cmp	r3, #46	; 0x2e
    88d8:	d00a      	beq.n	88f0 <dir_read+0xa4>
    88da:	230f      	movs	r3, #15
    88dc:	18fb      	adds	r3, r7, r3
    88de:	781b      	ldrb	r3, [r3, #0]
    88e0:	2208      	movs	r2, #8
    88e2:	4013      	ands	r3, r2
    88e4:	d009      	beq.n	88fa <dir_read+0xae>
    88e6:	230f      	movs	r3, #15
    88e8:	18fb      	adds	r3, r7, r3
    88ea:	781b      	ldrb	r3, [r3, #0]
    88ec:	2b0f      	cmp	r3, #15
    88ee:	d004      	beq.n	88fa <dir_read+0xae>
			ord = 0xFF;
    88f0:	2315      	movs	r3, #21
    88f2:	18fb      	adds	r3, r7, r3
    88f4:	22ff      	movs	r2, #255	; 0xff
    88f6:	701a      	strb	r2, [r3, #0]
    88f8:	e05a      	b.n	89b0 <dir_read+0x164>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    88fa:	230f      	movs	r3, #15
    88fc:	18fb      	adds	r3, r7, r3
    88fe:	781b      	ldrb	r3, [r3, #0]
    8900:	2b0f      	cmp	r3, #15
    8902:	d140      	bne.n	8986 <dir_read+0x13a>
				if (c & LLE) {			/* Is it start of LFN sequence? */
    8904:	2316      	movs	r3, #22
    8906:	18fb      	adds	r3, r7, r3
    8908:	781b      	ldrb	r3, [r3, #0]
    890a:	2240      	movs	r2, #64	; 0x40
    890c:	4013      	ands	r3, r2
    890e:	d016      	beq.n	893e <dir_read+0xf2>
					sum = dir[LDIR_Chksum];
    8910:	2314      	movs	r3, #20
    8912:	18fb      	adds	r3, r7, r3
    8914:	693a      	ldr	r2, [r7, #16]
    8916:	7b52      	ldrb	r2, [r2, #13]
    8918:	701a      	strb	r2, [r3, #0]
					c &= ~LLE; ord = c;
    891a:	2316      	movs	r3, #22
    891c:	18fb      	adds	r3, r7, r3
    891e:	2216      	movs	r2, #22
    8920:	18ba      	adds	r2, r7, r2
    8922:	7812      	ldrb	r2, [r2, #0]
    8924:	2140      	movs	r1, #64	; 0x40
    8926:	438a      	bics	r2, r1
    8928:	701a      	strb	r2, [r3, #0]
    892a:	2315      	movs	r3, #21
    892c:	18fb      	adds	r3, r7, r3
    892e:	2216      	movs	r2, #22
    8930:	18ba      	adds	r2, r7, r2
    8932:	7812      	ldrb	r2, [r2, #0]
    8934:	701a      	strb	r2, [r3, #0]
					dj->lfn_idx = dj->index;
    8936:	687b      	ldr	r3, [r7, #4]
    8938:	88da      	ldrh	r2, [r3, #6]
    893a:	687b      	ldr	r3, [r7, #4]
    893c:	841a      	strh	r2, [r3, #32]
				}
				/* Check LFN validity and capture it */
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    893e:	2316      	movs	r3, #22
    8940:	18fa      	adds	r2, r7, r3
    8942:	2315      	movs	r3, #21
    8944:	18fb      	adds	r3, r7, r3
    8946:	7812      	ldrb	r2, [r2, #0]
    8948:	781b      	ldrb	r3, [r3, #0]
    894a:	429a      	cmp	r2, r3
    894c:	d116      	bne.n	897c <dir_read+0x130>
    894e:	693b      	ldr	r3, [r7, #16]
    8950:	330d      	adds	r3, #13
    8952:	781b      	ldrb	r3, [r3, #0]
    8954:	2214      	movs	r2, #20
    8956:	18ba      	adds	r2, r7, r2
    8958:	7812      	ldrb	r2, [r2, #0]
    895a:	429a      	cmp	r2, r3
    895c:	d10e      	bne.n	897c <dir_read+0x130>
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	69db      	ldr	r3, [r3, #28]
    8962:	693a      	ldr	r2, [r7, #16]
    8964:	0011      	movs	r1, r2
    8966:	0018      	movs	r0, r3
    8968:	4b26      	ldr	r3, [pc, #152]	; (8a04 <dir_read+0x1b8>)
    896a:	4798      	blx	r3
    896c:	1e03      	subs	r3, r0, #0
    896e:	d005      	beq.n	897c <dir_read+0x130>
    8970:	2315      	movs	r3, #21
    8972:	18fb      	adds	r3, r7, r3
    8974:	781b      	ldrb	r3, [r3, #0]
    8976:	3b01      	subs	r3, #1
    8978:	b2da      	uxtb	r2, r3
    897a:	e000      	b.n	897e <dir_read+0x132>
    897c:	22ff      	movs	r2, #255	; 0xff
    897e:	2315      	movs	r3, #21
    8980:	18fb      	adds	r3, r7, r3
    8982:	701a      	strb	r2, [r3, #0]
    8984:	e014      	b.n	89b0 <dir_read+0x164>
			} else {					/* An SFN entry is found */
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
    8986:	2315      	movs	r3, #21
    8988:	18fb      	adds	r3, r7, r3
    898a:	781b      	ldrb	r3, [r3, #0]
    898c:	2b00      	cmp	r3, #0
    898e:	d10a      	bne.n	89a6 <dir_read+0x15a>
    8990:	693b      	ldr	r3, [r7, #16]
    8992:	0018      	movs	r0, r3
    8994:	4b1c      	ldr	r3, [pc, #112]	; (8a08 <dir_read+0x1bc>)
    8996:	4798      	blx	r3
    8998:	0003      	movs	r3, r0
    899a:	001a      	movs	r2, r3
    899c:	2314      	movs	r3, #20
    899e:	18fb      	adds	r3, r7, r3
    89a0:	781b      	ldrb	r3, [r3, #0]
    89a2:	4293      	cmp	r3, r2
    89a4:	d01a      	beq.n	89dc <dir_read+0x190>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
    89a6:	687b      	ldr	r3, [r7, #4]
    89a8:	2201      	movs	r2, #1
    89aa:	4252      	negs	r2, r2
    89ac:	841a      	strh	r2, [r3, #32]
				break;
    89ae:	e015      	b.n	89dc <dir_read+0x190>
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    89b0:	2317      	movs	r3, #23
    89b2:	18fc      	adds	r4, r7, r3
    89b4:	687b      	ldr	r3, [r7, #4]
    89b6:	2100      	movs	r1, #0
    89b8:	0018      	movs	r0, r3
    89ba:	4b14      	ldr	r3, [pc, #80]	; (8a0c <dir_read+0x1c0>)
    89bc:	4798      	blx	r3
    89be:	0003      	movs	r3, r0
    89c0:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    89c2:	2317      	movs	r3, #23
    89c4:	18fb      	adds	r3, r7, r3
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	2b00      	cmp	r3, #0
    89ca:	d109      	bne.n	89e0 <dir_read+0x194>
	while (dj->sect) {
    89cc:	687b      	ldr	r3, [r7, #4]
    89ce:	691b      	ldr	r3, [r3, #16]
    89d0:	2b00      	cmp	r3, #0
    89d2:	d000      	beq.n	89d6 <dir_read+0x18a>
    89d4:	e74b      	b.n	886e <dir_read+0x22>
    89d6:	e004      	b.n	89e2 <dir_read+0x196>
		if (res != FR_OK) break;
    89d8:	46c0      	nop			; (mov r8, r8)
    89da:	e002      	b.n	89e2 <dir_read+0x196>
				break;
    89dc:	46c0      	nop			; (mov r8, r8)
    89de:	e000      	b.n	89e2 <dir_read+0x196>
		if (res != FR_OK) break;
    89e0:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    89e2:	2317      	movs	r3, #23
    89e4:	18fb      	adds	r3, r7, r3
    89e6:	781b      	ldrb	r3, [r3, #0]
    89e8:	2b00      	cmp	r3, #0
    89ea:	d002      	beq.n	89f2 <dir_read+0x1a6>
    89ec:	687b      	ldr	r3, [r7, #4]
    89ee:	2200      	movs	r2, #0
    89f0:	611a      	str	r2, [r3, #16]

	return res;
    89f2:	2317      	movs	r3, #23
    89f4:	18fb      	adds	r3, r7, r3
    89f6:	781b      	ldrb	r3, [r3, #0]
}
    89f8:	0018      	movs	r0, r3
    89fa:	46bd      	mov	sp, r7
    89fc:	b007      	add	sp, #28
    89fe:	bd90      	pop	{r4, r7, pc}
    8a00:	000076a5 	.word	0x000076a5
    8a04:	0000830d 	.word	0x0000830d
    8a08:	00008601 	.word	0x00008601
    8a0c:	00008019 	.word	0x00008019

00008a10 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    8a10:	b590      	push	{r4, r7, lr}
    8a12:	b08d      	sub	sp, #52	; 0x34
    8a14:	af00      	add	r7, sp, #0
    8a16:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    8a18:	687b      	ldr	r3, [r7, #4]
    8a1a:	699b      	ldr	r3, [r3, #24]
    8a1c:	627b      	str	r3, [r7, #36]	; 0x24
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	69db      	ldr	r3, [r3, #28]
    8a22:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    8a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8a26:	230c      	movs	r3, #12
    8a28:	18fb      	adds	r3, r7, r3
    8a2a:	220c      	movs	r2, #12
    8a2c:	0018      	movs	r0, r3
    8a2e:	4bc8      	ldr	r3, [pc, #800]	; (8d50 <dir_register+0x340>)
    8a30:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    8a32:	230c      	movs	r3, #12
    8a34:	18fb      	adds	r3, r7, r3
    8a36:	7adb      	ldrb	r3, [r3, #11]
    8a38:	001a      	movs	r2, r3
    8a3a:	2301      	movs	r3, #1
    8a3c:	4013      	ands	r3, r2
    8a3e:	d048      	beq.n	8ad2 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    8a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a42:	330b      	adds	r3, #11
    8a44:	2200      	movs	r2, #0
    8a46:	701a      	strb	r2, [r3, #0]
    8a48:	687b      	ldr	r3, [r7, #4]
    8a4a:	2200      	movs	r2, #0
    8a4c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    8a4e:	232c      	movs	r3, #44	; 0x2c
    8a50:	18fb      	adds	r3, r7, r3
    8a52:	2201      	movs	r2, #1
    8a54:	801a      	strh	r2, [r3, #0]
    8a56:	e01c      	b.n	8a92 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    8a58:	232c      	movs	r3, #44	; 0x2c
    8a5a:	18fb      	adds	r3, r7, r3
    8a5c:	881b      	ldrh	r3, [r3, #0]
    8a5e:	6a3a      	ldr	r2, [r7, #32]
    8a60:	210c      	movs	r1, #12
    8a62:	1879      	adds	r1, r7, r1
    8a64:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8a66:	4cbb      	ldr	r4, [pc, #748]	; (8d54 <dir_register+0x344>)
    8a68:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    8a6a:	232f      	movs	r3, #47	; 0x2f
    8a6c:	18fc      	adds	r4, r7, r3
    8a6e:	687b      	ldr	r3, [r7, #4]
    8a70:	0018      	movs	r0, r3
    8a72:	4bb9      	ldr	r3, [pc, #740]	; (8d58 <dir_register+0x348>)
    8a74:	4798      	blx	r3
    8a76:	0003      	movs	r3, r0
    8a78:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8a7a:	232f      	movs	r3, #47	; 0x2f
    8a7c:	18fb      	adds	r3, r7, r3
    8a7e:	781b      	ldrb	r3, [r3, #0]
    8a80:	2b00      	cmp	r3, #0
    8a82:	d10c      	bne.n	8a9e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    8a84:	232c      	movs	r3, #44	; 0x2c
    8a86:	18fb      	adds	r3, r7, r3
    8a88:	881a      	ldrh	r2, [r3, #0]
    8a8a:	232c      	movs	r3, #44	; 0x2c
    8a8c:	18fb      	adds	r3, r7, r3
    8a8e:	3201      	adds	r2, #1
    8a90:	801a      	strh	r2, [r3, #0]
    8a92:	232c      	movs	r3, #44	; 0x2c
    8a94:	18fb      	adds	r3, r7, r3
    8a96:	881b      	ldrh	r3, [r3, #0]
    8a98:	2b63      	cmp	r3, #99	; 0x63
    8a9a:	d9dd      	bls.n	8a58 <dir_register+0x48>
    8a9c:	e000      	b.n	8aa0 <dir_register+0x90>
			if (res != FR_OK) break;
    8a9e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8aa0:	232c      	movs	r3, #44	; 0x2c
    8aa2:	18fb      	adds	r3, r7, r3
    8aa4:	881b      	ldrh	r3, [r3, #0]
    8aa6:	2b64      	cmp	r3, #100	; 0x64
    8aa8:	d101      	bne.n	8aae <dir_register+0x9e>
    8aaa:	2307      	movs	r3, #7
    8aac:	e14c      	b.n	8d48 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    8aae:	232f      	movs	r3, #47	; 0x2f
    8ab0:	18fb      	adds	r3, r7, r3
    8ab2:	781b      	ldrb	r3, [r3, #0]
    8ab4:	2b04      	cmp	r3, #4
    8ab6:	d003      	beq.n	8ac0 <dir_register+0xb0>
    8ab8:	232f      	movs	r3, #47	; 0x2f
    8aba:	18fb      	adds	r3, r7, r3
    8abc:	781b      	ldrb	r3, [r3, #0]
    8abe:	e143      	b.n	8d48 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    8ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ac2:	330b      	adds	r3, #11
    8ac4:	220c      	movs	r2, #12
    8ac6:	18ba      	adds	r2, r7, r2
    8ac8:	7ad2      	ldrb	r2, [r2, #11]
    8aca:	701a      	strb	r2, [r3, #0]
    8acc:	687b      	ldr	r3, [r7, #4]
    8ace:	6a3a      	ldr	r2, [r7, #32]
    8ad0:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    8ad2:	230c      	movs	r3, #12
    8ad4:	18fb      	adds	r3, r7, r3
    8ad6:	7adb      	ldrb	r3, [r3, #11]
    8ad8:	001a      	movs	r2, r3
    8ada:	2302      	movs	r3, #2
    8adc:	4013      	ands	r3, r2
    8ade:	d023      	beq.n	8b28 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    8ae0:	232a      	movs	r3, #42	; 0x2a
    8ae2:	18fb      	adds	r3, r7, r3
    8ae4:	2200      	movs	r2, #0
    8ae6:	801a      	strh	r2, [r3, #0]
    8ae8:	e006      	b.n	8af8 <dir_register+0xe8>
    8aea:	232a      	movs	r3, #42	; 0x2a
    8aec:	18fb      	adds	r3, r7, r3
    8aee:	881a      	ldrh	r2, [r3, #0]
    8af0:	232a      	movs	r3, #42	; 0x2a
    8af2:	18fb      	adds	r3, r7, r3
    8af4:	3201      	adds	r2, #1
    8af6:	801a      	strh	r2, [r3, #0]
    8af8:	232a      	movs	r3, #42	; 0x2a
    8afa:	18fb      	adds	r3, r7, r3
    8afc:	881b      	ldrh	r3, [r3, #0]
    8afe:	005b      	lsls	r3, r3, #1
    8b00:	6a3a      	ldr	r2, [r7, #32]
    8b02:	18d3      	adds	r3, r2, r3
    8b04:	881b      	ldrh	r3, [r3, #0]
    8b06:	2b00      	cmp	r3, #0
    8b08:	d1ef      	bne.n	8aea <dir_register+0xda>
		ne = (ne + 25) / 13;
    8b0a:	232a      	movs	r3, #42	; 0x2a
    8b0c:	18fb      	adds	r3, r7, r3
    8b0e:	881b      	ldrh	r3, [r3, #0]
    8b10:	3319      	adds	r3, #25
    8b12:	001a      	movs	r2, r3
    8b14:	4b91      	ldr	r3, [pc, #580]	; (8d5c <dir_register+0x34c>)
    8b16:	210d      	movs	r1, #13
    8b18:	0010      	movs	r0, r2
    8b1a:	4798      	blx	r3
    8b1c:	0003      	movs	r3, r0
    8b1e:	001a      	movs	r2, r3
    8b20:	232a      	movs	r3, #42	; 0x2a
    8b22:	18fb      	adds	r3, r7, r3
    8b24:	801a      	strh	r2, [r3, #0]
    8b26:	e003      	b.n	8b30 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    8b28:	232a      	movs	r3, #42	; 0x2a
    8b2a:	18fb      	adds	r3, r7, r3
    8b2c:	2201      	movs	r2, #1
    8b2e:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8b30:	232f      	movs	r3, #47	; 0x2f
    8b32:	18fc      	adds	r4, r7, r3
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	2100      	movs	r1, #0
    8b38:	0018      	movs	r0, r3
    8b3a:	4b89      	ldr	r3, [pc, #548]	; (8d60 <dir_register+0x350>)
    8b3c:	4798      	blx	r3
    8b3e:	0003      	movs	r3, r0
    8b40:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8b42:	232f      	movs	r3, #47	; 0x2f
    8b44:	18fb      	adds	r3, r7, r3
    8b46:	781b      	ldrb	r3, [r3, #0]
    8b48:	2b00      	cmp	r3, #0
    8b4a:	d003      	beq.n	8b54 <dir_register+0x144>
    8b4c:	232f      	movs	r3, #47	; 0x2f
    8b4e:	18fb      	adds	r3, r7, r3
    8b50:	781b      	ldrb	r3, [r3, #0]
    8b52:	e0f9      	b.n	8d48 <dir_register+0x338>
	n = is = 0;
    8b54:	2328      	movs	r3, #40	; 0x28
    8b56:	18fb      	adds	r3, r7, r3
    8b58:	2200      	movs	r2, #0
    8b5a:	801a      	strh	r2, [r3, #0]
    8b5c:	232c      	movs	r3, #44	; 0x2c
    8b5e:	18fb      	adds	r3, r7, r3
    8b60:	2228      	movs	r2, #40	; 0x28
    8b62:	18ba      	adds	r2, r7, r2
    8b64:	8812      	ldrh	r2, [r2, #0]
    8b66:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	681a      	ldr	r2, [r3, #0]
    8b6c:	687b      	ldr	r3, [r7, #4]
    8b6e:	691b      	ldr	r3, [r3, #16]
    8b70:	212f      	movs	r1, #47	; 0x2f
    8b72:	187c      	adds	r4, r7, r1
    8b74:	0019      	movs	r1, r3
    8b76:	0010      	movs	r0, r2
    8b78:	4b7a      	ldr	r3, [pc, #488]	; (8d64 <dir_register+0x354>)
    8b7a:	4798      	blx	r3
    8b7c:	0003      	movs	r3, r0
    8b7e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8b80:	232f      	movs	r3, #47	; 0x2f
    8b82:	18fb      	adds	r3, r7, r3
    8b84:	781b      	ldrb	r3, [r3, #0]
    8b86:	2b00      	cmp	r3, #0
    8b88:	d13c      	bne.n	8c04 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    8b8a:	687b      	ldr	r3, [r7, #4]
    8b8c:	695a      	ldr	r2, [r3, #20]
    8b8e:	231f      	movs	r3, #31
    8b90:	18fb      	adds	r3, r7, r3
    8b92:	7812      	ldrb	r2, [r2, #0]
    8b94:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    8b96:	231f      	movs	r3, #31
    8b98:	18fb      	adds	r3, r7, r3
    8b9a:	781b      	ldrb	r3, [r3, #0]
    8b9c:	2be5      	cmp	r3, #229	; 0xe5
    8b9e:	d004      	beq.n	8baa <dir_register+0x19a>
    8ba0:	231f      	movs	r3, #31
    8ba2:	18fb      	adds	r3, r7, r3
    8ba4:	781b      	ldrb	r3, [r3, #0]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d119      	bne.n	8bde <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    8baa:	232c      	movs	r3, #44	; 0x2c
    8bac:	18fb      	adds	r3, r7, r3
    8bae:	881b      	ldrh	r3, [r3, #0]
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d104      	bne.n	8bbe <dir_register+0x1ae>
    8bb4:	2328      	movs	r3, #40	; 0x28
    8bb6:	18fb      	adds	r3, r7, r3
    8bb8:	687a      	ldr	r2, [r7, #4]
    8bba:	88d2      	ldrh	r2, [r2, #6]
    8bbc:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    8bbe:	232c      	movs	r3, #44	; 0x2c
    8bc0:	18fb      	adds	r3, r7, r3
    8bc2:	222c      	movs	r2, #44	; 0x2c
    8bc4:	18ba      	adds	r2, r7, r2
    8bc6:	8812      	ldrh	r2, [r2, #0]
    8bc8:	3201      	adds	r2, #1
    8bca:	801a      	strh	r2, [r3, #0]
    8bcc:	232c      	movs	r3, #44	; 0x2c
    8bce:	18fa      	adds	r2, r7, r3
    8bd0:	232a      	movs	r3, #42	; 0x2a
    8bd2:	18fb      	adds	r3, r7, r3
    8bd4:	8812      	ldrh	r2, [r2, #0]
    8bd6:	881b      	ldrh	r3, [r3, #0]
    8bd8:	429a      	cmp	r2, r3
    8bda:	d104      	bne.n	8be6 <dir_register+0x1d6>
    8bdc:	e013      	b.n	8c06 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    8bde:	232c      	movs	r3, #44	; 0x2c
    8be0:	18fb      	adds	r3, r7, r3
    8be2:	2200      	movs	r2, #0
    8be4:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    8be6:	232f      	movs	r3, #47	; 0x2f
    8be8:	18fc      	adds	r4, r7, r3
    8bea:	687b      	ldr	r3, [r7, #4]
    8bec:	2101      	movs	r1, #1
    8bee:	0018      	movs	r0, r3
    8bf0:	4b5d      	ldr	r3, [pc, #372]	; (8d68 <dir_register+0x358>)
    8bf2:	4798      	blx	r3
    8bf4:	0003      	movs	r3, r0
    8bf6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    8bf8:	232f      	movs	r3, #47	; 0x2f
    8bfa:	18fb      	adds	r3, r7, r3
    8bfc:	781b      	ldrb	r3, [r3, #0]
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d0b2      	beq.n	8b68 <dir_register+0x158>
    8c02:	e000      	b.n	8c06 <dir_register+0x1f6>
		if (res != FR_OK) break;
    8c04:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    8c06:	232f      	movs	r3, #47	; 0x2f
    8c08:	18fb      	adds	r3, r7, r3
    8c0a:	781b      	ldrb	r3, [r3, #0]
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d163      	bne.n	8cd8 <dir_register+0x2c8>
    8c10:	232a      	movs	r3, #42	; 0x2a
    8c12:	18fb      	adds	r3, r7, r3
    8c14:	881b      	ldrh	r3, [r3, #0]
    8c16:	2b01      	cmp	r3, #1
    8c18:	d95e      	bls.n	8cd8 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    8c1a:	232f      	movs	r3, #47	; 0x2f
    8c1c:	18fc      	adds	r4, r7, r3
    8c1e:	2328      	movs	r3, #40	; 0x28
    8c20:	18fb      	adds	r3, r7, r3
    8c22:	881a      	ldrh	r2, [r3, #0]
    8c24:	687b      	ldr	r3, [r7, #4]
    8c26:	0011      	movs	r1, r2
    8c28:	0018      	movs	r0, r3
    8c2a:	4b4d      	ldr	r3, [pc, #308]	; (8d60 <dir_register+0x350>)
    8c2c:	4798      	blx	r3
    8c2e:	0003      	movs	r3, r0
    8c30:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8c32:	232f      	movs	r3, #47	; 0x2f
    8c34:	18fb      	adds	r3, r7, r3
    8c36:	781b      	ldrb	r3, [r3, #0]
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d14d      	bne.n	8cd8 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    8c3c:	687b      	ldr	r3, [r7, #4]
    8c3e:	699b      	ldr	r3, [r3, #24]
    8c40:	221e      	movs	r2, #30
    8c42:	18bc      	adds	r4, r7, r2
    8c44:	0018      	movs	r0, r3
    8c46:	4b49      	ldr	r3, [pc, #292]	; (8d6c <dir_register+0x35c>)
    8c48:	4798      	blx	r3
    8c4a:	0003      	movs	r3, r0
    8c4c:	7023      	strb	r3, [r4, #0]
			ne--;
    8c4e:	232a      	movs	r3, #42	; 0x2a
    8c50:	18fb      	adds	r3, r7, r3
    8c52:	881a      	ldrh	r2, [r3, #0]
    8c54:	232a      	movs	r3, #42	; 0x2a
    8c56:	18fb      	adds	r3, r7, r3
    8c58:	3a01      	subs	r2, #1
    8c5a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	681a      	ldr	r2, [r3, #0]
    8c60:	687b      	ldr	r3, [r7, #4]
    8c62:	691b      	ldr	r3, [r3, #16]
    8c64:	212f      	movs	r1, #47	; 0x2f
    8c66:	187c      	adds	r4, r7, r1
    8c68:	0019      	movs	r1, r3
    8c6a:	0010      	movs	r0, r2
    8c6c:	4b3d      	ldr	r3, [pc, #244]	; (8d64 <dir_register+0x354>)
    8c6e:	4798      	blx	r3
    8c70:	0003      	movs	r3, r0
    8c72:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    8c74:	232f      	movs	r3, #47	; 0x2f
    8c76:	18fb      	adds	r3, r7, r3
    8c78:	781b      	ldrb	r3, [r3, #0]
    8c7a:	2b00      	cmp	r3, #0
    8c7c:	d12b      	bne.n	8cd6 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    8c7e:	687b      	ldr	r3, [r7, #4]
    8c80:	69d8      	ldr	r0, [r3, #28]
    8c82:	687b      	ldr	r3, [r7, #4]
    8c84:	6959      	ldr	r1, [r3, #20]
    8c86:	232a      	movs	r3, #42	; 0x2a
    8c88:	18fb      	adds	r3, r7, r3
    8c8a:	881b      	ldrh	r3, [r3, #0]
    8c8c:	b2da      	uxtb	r2, r3
    8c8e:	231e      	movs	r3, #30
    8c90:	18fb      	adds	r3, r7, r3
    8c92:	781b      	ldrb	r3, [r3, #0]
    8c94:	4c36      	ldr	r4, [pc, #216]	; (8d70 <dir_register+0x360>)
    8c96:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8c98:	687b      	ldr	r3, [r7, #4]
    8c9a:	681b      	ldr	r3, [r3, #0]
    8c9c:	2201      	movs	r2, #1
    8c9e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8ca0:	232f      	movs	r3, #47	; 0x2f
    8ca2:	18fc      	adds	r4, r7, r3
    8ca4:	687b      	ldr	r3, [r7, #4]
    8ca6:	2100      	movs	r1, #0
    8ca8:	0018      	movs	r0, r3
    8caa:	4b2f      	ldr	r3, [pc, #188]	; (8d68 <dir_register+0x358>)
    8cac:	4798      	blx	r3
    8cae:	0003      	movs	r3, r0
    8cb0:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8cb2:	232f      	movs	r3, #47	; 0x2f
    8cb4:	18fb      	adds	r3, r7, r3
    8cb6:	781b      	ldrb	r3, [r3, #0]
    8cb8:	2b00      	cmp	r3, #0
    8cba:	d10d      	bne.n	8cd8 <dir_register+0x2c8>
    8cbc:	232a      	movs	r3, #42	; 0x2a
    8cbe:	18fb      	adds	r3, r7, r3
    8cc0:	222a      	movs	r2, #42	; 0x2a
    8cc2:	18ba      	adds	r2, r7, r2
    8cc4:	8812      	ldrh	r2, [r2, #0]
    8cc6:	3a01      	subs	r2, #1
    8cc8:	801a      	strh	r2, [r3, #0]
    8cca:	232a      	movs	r3, #42	; 0x2a
    8ccc:	18fb      	adds	r3, r7, r3
    8cce:	881b      	ldrh	r3, [r3, #0]
    8cd0:	2b00      	cmp	r3, #0
    8cd2:	d1c3      	bne.n	8c5c <dir_register+0x24c>
    8cd4:	e000      	b.n	8cd8 <dir_register+0x2c8>
				if (res != FR_OK) break;
    8cd6:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    8cd8:	232f      	movs	r3, #47	; 0x2f
    8cda:	18fb      	adds	r3, r7, r3
    8cdc:	781b      	ldrb	r3, [r3, #0]
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d12f      	bne.n	8d42 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    8ce2:	687b      	ldr	r3, [r7, #4]
    8ce4:	681a      	ldr	r2, [r3, #0]
    8ce6:	687b      	ldr	r3, [r7, #4]
    8ce8:	691b      	ldr	r3, [r3, #16]
    8cea:	212f      	movs	r1, #47	; 0x2f
    8cec:	187c      	adds	r4, r7, r1
    8cee:	0019      	movs	r1, r3
    8cf0:	0010      	movs	r0, r2
    8cf2:	4b1c      	ldr	r3, [pc, #112]	; (8d64 <dir_register+0x354>)
    8cf4:	4798      	blx	r3
    8cf6:	0003      	movs	r3, r0
    8cf8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8cfa:	232f      	movs	r3, #47	; 0x2f
    8cfc:	18fb      	adds	r3, r7, r3
    8cfe:	781b      	ldrb	r3, [r3, #0]
    8d00:	2b00      	cmp	r3, #0
    8d02:	d11e      	bne.n	8d42 <dir_register+0x332>
			dir = dj->dir;
    8d04:	687b      	ldr	r3, [r7, #4]
    8d06:	695b      	ldr	r3, [r3, #20]
    8d08:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    8d0a:	69bb      	ldr	r3, [r7, #24]
    8d0c:	2220      	movs	r2, #32
    8d0e:	2100      	movs	r1, #0
    8d10:	0018      	movs	r0, r3
    8d12:	4b18      	ldr	r3, [pc, #96]	; (8d74 <dir_register+0x364>)
    8d14:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    8d16:	687b      	ldr	r3, [r7, #4]
    8d18:	6999      	ldr	r1, [r3, #24]
    8d1a:	69bb      	ldr	r3, [r7, #24]
    8d1c:	220b      	movs	r2, #11
    8d1e:	0018      	movs	r0, r3
    8d20:	4b0b      	ldr	r3, [pc, #44]	; (8d50 <dir_register+0x340>)
    8d22:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    8d24:	69bb      	ldr	r3, [r7, #24]
    8d26:	330c      	adds	r3, #12
    8d28:	001a      	movs	r2, r3
    8d2a:	687b      	ldr	r3, [r7, #4]
    8d2c:	699b      	ldr	r3, [r3, #24]
    8d2e:	330b      	adds	r3, #11
    8d30:	781b      	ldrb	r3, [r3, #0]
    8d32:	2118      	movs	r1, #24
    8d34:	400b      	ands	r3, r1
    8d36:	b2db      	uxtb	r3, r3
    8d38:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    8d3a:	687b      	ldr	r3, [r7, #4]
    8d3c:	681b      	ldr	r3, [r3, #0]
    8d3e:	2201      	movs	r2, #1
    8d40:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8d42:	232f      	movs	r3, #47	; 0x2f
    8d44:	18fb      	adds	r3, r7, r3
    8d46:	781b      	ldrb	r3, [r3, #0]
}
    8d48:	0018      	movs	r0, r3
    8d4a:	46bd      	mov	sp, r7
    8d4c:	b00d      	add	sp, #52	; 0x34
    8d4e:	bd90      	pop	{r4, r7, pc}
    8d50:	000075c1 	.word	0x000075c1
    8d54:	00008501 	.word	0x00008501
    8d58:	00008651 	.word	0x00008651
    8d5c:	0000b89d 	.word	0x0000b89d
    8d60:	00007ee9 	.word	0x00007ee9
    8d64:	000076a5 	.word	0x000076a5
    8d68:	00008019 	.word	0x00008019
    8d6c:	00008601 	.word	0x00008601
    8d70:	000083f1 	.word	0x000083f1
    8d74:	000075f9 	.word	0x000075f9

00008d78 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    8d78:	b590      	push	{r4, r7, lr}
    8d7a:	b085      	sub	sp, #20
    8d7c:	af00      	add	r7, sp, #0
    8d7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
#if _USE_LFN	/* LFN configuration */
	WORD i;

	i = dj->index;	/* SFN index */
    8d80:	230c      	movs	r3, #12
    8d82:	18fb      	adds	r3, r7, r3
    8d84:	687a      	ldr	r2, [r7, #4]
    8d86:	88d2      	ldrh	r2, [r2, #6]
    8d88:	801a      	strh	r2, [r3, #0]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
    8d8a:	687b      	ldr	r3, [r7, #4]
    8d8c:	8c1b      	ldrh	r3, [r3, #32]
    8d8e:	4a2c      	ldr	r2, [pc, #176]	; (8e40 <dir_remove+0xc8>)
    8d90:	4293      	cmp	r3, r2
    8d92:	d002      	beq.n	8d9a <dir_remove+0x22>
    8d94:	687b      	ldr	r3, [r7, #4]
    8d96:	8c1b      	ldrh	r3, [r3, #32]
    8d98:	e002      	b.n	8da0 <dir_remove+0x28>
    8d9a:	230c      	movs	r3, #12
    8d9c:	18fb      	adds	r3, r7, r3
    8d9e:	881b      	ldrh	r3, [r3, #0]
    8da0:	220f      	movs	r2, #15
    8da2:	18bc      	adds	r4, r7, r2
    8da4:	687a      	ldr	r2, [r7, #4]
    8da6:	0019      	movs	r1, r3
    8da8:	0010      	movs	r0, r2
    8daa:	4b26      	ldr	r3, [pc, #152]	; (8e44 <dir_remove+0xcc>)
    8dac:	4798      	blx	r3
    8dae:	0003      	movs	r3, r0
    8db0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    8db2:	230f      	movs	r3, #15
    8db4:	18fb      	adds	r3, r7, r3
    8db6:	781b      	ldrb	r3, [r3, #0]
    8db8:	2b00      	cmp	r3, #0
    8dba:	d13a      	bne.n	8e32 <dir_remove+0xba>
		do {
			res = move_window(dj->fs, dj->sect);
    8dbc:	687b      	ldr	r3, [r7, #4]
    8dbe:	681a      	ldr	r2, [r3, #0]
    8dc0:	687b      	ldr	r3, [r7, #4]
    8dc2:	691b      	ldr	r3, [r3, #16]
    8dc4:	210f      	movs	r1, #15
    8dc6:	187c      	adds	r4, r7, r1
    8dc8:	0019      	movs	r1, r3
    8dca:	0010      	movs	r0, r2
    8dcc:	4b1e      	ldr	r3, [pc, #120]	; (8e48 <dir_remove+0xd0>)
    8dce:	4798      	blx	r3
    8dd0:	0003      	movs	r3, r0
    8dd2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    8dd4:	230f      	movs	r3, #15
    8dd6:	18fb      	adds	r3, r7, r3
    8dd8:	781b      	ldrb	r3, [r3, #0]
    8dda:	2b00      	cmp	r3, #0
    8ddc:	d11d      	bne.n	8e1a <dir_remove+0xa2>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    8dde:	687b      	ldr	r3, [r7, #4]
    8de0:	695b      	ldr	r3, [r3, #20]
    8de2:	22e5      	movs	r2, #229	; 0xe5
    8de4:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    8de6:	687b      	ldr	r3, [r7, #4]
    8de8:	681b      	ldr	r3, [r3, #0]
    8dea:	2201      	movs	r2, #1
    8dec:	711a      	strb	r2, [r3, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8dee:	687b      	ldr	r3, [r7, #4]
    8df0:	88db      	ldrh	r3, [r3, #6]
    8df2:	220c      	movs	r2, #12
    8df4:	18ba      	adds	r2, r7, r2
    8df6:	8812      	ldrh	r2, [r2, #0]
    8df8:	429a      	cmp	r2, r3
    8dfa:	d910      	bls.n	8e1e <dir_remove+0xa6>
			res = dir_next(dj, 0);		/* Next entry */
    8dfc:	230f      	movs	r3, #15
    8dfe:	18fc      	adds	r4, r7, r3
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	2100      	movs	r1, #0
    8e04:	0018      	movs	r0, r3
    8e06:	4b11      	ldr	r3, [pc, #68]	; (8e4c <dir_remove+0xd4>)
    8e08:	4798      	blx	r3
    8e0a:	0003      	movs	r3, r0
    8e0c:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    8e0e:	230f      	movs	r3, #15
    8e10:	18fb      	adds	r3, r7, r3
    8e12:	781b      	ldrb	r3, [r3, #0]
    8e14:	2b00      	cmp	r3, #0
    8e16:	d0d1      	beq.n	8dbc <dir_remove+0x44>
    8e18:	e002      	b.n	8e20 <dir_remove+0xa8>
			if (res != FR_OK) break;
    8e1a:	46c0      	nop			; (mov r8, r8)
    8e1c:	e000      	b.n	8e20 <dir_remove+0xa8>
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
    8e1e:	46c0      	nop			; (mov r8, r8)
		if (res == FR_NO_FILE) res = FR_INT_ERR;
    8e20:	230f      	movs	r3, #15
    8e22:	18fb      	adds	r3, r7, r3
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	2b04      	cmp	r3, #4
    8e28:	d103      	bne.n	8e32 <dir_remove+0xba>
    8e2a:	230f      	movs	r3, #15
    8e2c:	18fb      	adds	r3, r7, r3
    8e2e:	2202      	movs	r2, #2
    8e30:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
		}
	}
#endif

	return res;
    8e32:	230f      	movs	r3, #15
    8e34:	18fb      	adds	r3, r7, r3
    8e36:	781b      	ldrb	r3, [r3, #0]
}
    8e38:	0018      	movs	r0, r3
    8e3a:	46bd      	mov	sp, r7
    8e3c:	b005      	add	sp, #20
    8e3e:	bd90      	pop	{r4, r7, pc}
    8e40:	0000ffff 	.word	0x0000ffff
    8e44:	00007ee9 	.word	0x00007ee9
    8e48:	000076a5 	.word	0x000076a5
    8e4c:	00008019 	.word	0x00008019

00008e50 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8e50:	b590      	push	{r4, r7, lr}
    8e52:	b08b      	sub	sp, #44	; 0x2c
    8e54:	af00      	add	r7, sp, #0
    8e56:	6078      	str	r0, [r7, #4]
    8e58:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8e5a:	683b      	ldr	r3, [r7, #0]
    8e5c:	681b      	ldr	r3, [r3, #0]
    8e5e:	613b      	str	r3, [r7, #16]
    8e60:	e002      	b.n	8e68 <create_name+0x18>
    8e62:	693b      	ldr	r3, [r7, #16]
    8e64:	3301      	adds	r3, #1
    8e66:	613b      	str	r3, [r7, #16]
    8e68:	693b      	ldr	r3, [r7, #16]
    8e6a:	781b      	ldrb	r3, [r3, #0]
    8e6c:	2b2f      	cmp	r3, #47	; 0x2f
    8e6e:	d0f8      	beq.n	8e62 <create_name+0x12>
    8e70:	693b      	ldr	r3, [r7, #16]
    8e72:	781b      	ldrb	r3, [r3, #0]
    8e74:	2b5c      	cmp	r3, #92	; 0x5c
    8e76:	d0f4      	beq.n	8e62 <create_name+0x12>
	lfn = dj->lfn;
    8e78:	687b      	ldr	r3, [r7, #4]
    8e7a:	69db      	ldr	r3, [r3, #28]
    8e7c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8e7e:	2300      	movs	r3, #0
    8e80:	617b      	str	r3, [r7, #20]
    8e82:	697b      	ldr	r3, [r7, #20]
    8e84:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    8e86:	69bb      	ldr	r3, [r7, #24]
    8e88:	1c5a      	adds	r2, r3, #1
    8e8a:	61ba      	str	r2, [r7, #24]
    8e8c:	693a      	ldr	r2, [r7, #16]
    8e8e:	18d3      	adds	r3, r2, r3
    8e90:	781a      	ldrb	r2, [r3, #0]
    8e92:	2324      	movs	r3, #36	; 0x24
    8e94:	18fb      	adds	r3, r7, r3
    8e96:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8e98:	2324      	movs	r3, #36	; 0x24
    8e9a:	18fb      	adds	r3, r7, r3
    8e9c:	881b      	ldrh	r3, [r3, #0]
    8e9e:	2b1f      	cmp	r3, #31
    8ea0:	d944      	bls.n	8f2c <create_name+0xdc>
    8ea2:	2324      	movs	r3, #36	; 0x24
    8ea4:	18fb      	adds	r3, r7, r3
    8ea6:	881b      	ldrh	r3, [r3, #0]
    8ea8:	2b2f      	cmp	r3, #47	; 0x2f
    8eaa:	d03f      	beq.n	8f2c <create_name+0xdc>
    8eac:	2324      	movs	r3, #36	; 0x24
    8eae:	18fb      	adds	r3, r7, r3
    8eb0:	881b      	ldrh	r3, [r3, #0]
    8eb2:	2b5c      	cmp	r3, #92	; 0x5c
    8eb4:	d03a      	beq.n	8f2c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    8eb6:	697b      	ldr	r3, [r7, #20]
    8eb8:	2bfe      	cmp	r3, #254	; 0xfe
    8eba:	d901      	bls.n	8ec0 <create_name+0x70>
			return FR_INVALID_NAME;
    8ebc:	2306      	movs	r3, #6
    8ebe:	e1e7      	b.n	9290 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    8ec0:	2324      	movs	r3, #36	; 0x24
    8ec2:	18fb      	adds	r3, r7, r3
    8ec4:	2224      	movs	r2, #36	; 0x24
    8ec6:	18ba      	adds	r2, r7, r2
    8ec8:	8812      	ldrh	r2, [r2, #0]
    8eca:	21ff      	movs	r1, #255	; 0xff
    8ecc:	400a      	ands	r2, r1
    8ece:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    8ed0:	2324      	movs	r3, #36	; 0x24
    8ed2:	18fc      	adds	r4, r7, r3
    8ed4:	2324      	movs	r3, #36	; 0x24
    8ed6:	18fb      	adds	r3, r7, r3
    8ed8:	881b      	ldrh	r3, [r3, #0]
    8eda:	2101      	movs	r1, #1
    8edc:	0018      	movs	r0, r3
    8ede:	4bba      	ldr	r3, [pc, #744]	; (91c8 <create_name+0x378>)
    8ee0:	4798      	blx	r3
    8ee2:	0003      	movs	r3, r0
    8ee4:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    8ee6:	2324      	movs	r3, #36	; 0x24
    8ee8:	18fb      	adds	r3, r7, r3
    8eea:	881b      	ldrh	r3, [r3, #0]
    8eec:	2b00      	cmp	r3, #0
    8eee:	d101      	bne.n	8ef4 <create_name+0xa4>
    8ef0:	2306      	movs	r3, #6
    8ef2:	e1cd      	b.n	9290 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    8ef4:	2324      	movs	r3, #36	; 0x24
    8ef6:	18fb      	adds	r3, r7, r3
    8ef8:	881b      	ldrh	r3, [r3, #0]
    8efa:	2b7f      	cmp	r3, #127	; 0x7f
    8efc:	d80b      	bhi.n	8f16 <create_name+0xc6>
    8efe:	2324      	movs	r3, #36	; 0x24
    8f00:	18fb      	adds	r3, r7, r3
    8f02:	881a      	ldrh	r2, [r3, #0]
    8f04:	4bb1      	ldr	r3, [pc, #708]	; (91cc <create_name+0x37c>)
    8f06:	0011      	movs	r1, r2
    8f08:	0018      	movs	r0, r3
    8f0a:	4bb1      	ldr	r3, [pc, #708]	; (91d0 <create_name+0x380>)
    8f0c:	4798      	blx	r3
    8f0e:	1e03      	subs	r3, r0, #0
    8f10:	d001      	beq.n	8f16 <create_name+0xc6>
			return FR_INVALID_NAME;
    8f12:	2306      	movs	r3, #6
    8f14:	e1bc      	b.n	9290 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    8f16:	697b      	ldr	r3, [r7, #20]
    8f18:	1c5a      	adds	r2, r3, #1
    8f1a:	617a      	str	r2, [r7, #20]
    8f1c:	005b      	lsls	r3, r3, #1
    8f1e:	68fa      	ldr	r2, [r7, #12]
    8f20:	18d3      	adds	r3, r2, r3
    8f22:	2224      	movs	r2, #36	; 0x24
    8f24:	18ba      	adds	r2, r7, r2
    8f26:	8812      	ldrh	r2, [r2, #0]
    8f28:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8f2a:	e7ac      	b.n	8e86 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8f2c:	693a      	ldr	r2, [r7, #16]
    8f2e:	69bb      	ldr	r3, [r7, #24]
    8f30:	18d2      	adds	r2, r2, r3
    8f32:	683b      	ldr	r3, [r7, #0]
    8f34:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    8f36:	2324      	movs	r3, #36	; 0x24
    8f38:	18fb      	adds	r3, r7, r3
    8f3a:	881b      	ldrh	r3, [r3, #0]
    8f3c:	2b1f      	cmp	r3, #31
    8f3e:	d801      	bhi.n	8f44 <create_name+0xf4>
    8f40:	2204      	movs	r2, #4
    8f42:	e000      	b.n	8f46 <create_name+0xf6>
    8f44:	2200      	movs	r2, #0
    8f46:	2326      	movs	r3, #38	; 0x26
    8f48:	18fb      	adds	r3, r7, r3
    8f4a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8f4c:	e017      	b.n	8f7e <create_name+0x12e>
		w = lfn[di-1];
    8f4e:	697b      	ldr	r3, [r7, #20]
    8f50:	4aa0      	ldr	r2, [pc, #640]	; (91d4 <create_name+0x384>)
    8f52:	4694      	mov	ip, r2
    8f54:	4463      	add	r3, ip
    8f56:	005b      	lsls	r3, r3, #1
    8f58:	68fa      	ldr	r2, [r7, #12]
    8f5a:	18d2      	adds	r2, r2, r3
    8f5c:	2324      	movs	r3, #36	; 0x24
    8f5e:	18fb      	adds	r3, r7, r3
    8f60:	8812      	ldrh	r2, [r2, #0]
    8f62:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    8f64:	2324      	movs	r3, #36	; 0x24
    8f66:	18fb      	adds	r3, r7, r3
    8f68:	881b      	ldrh	r3, [r3, #0]
    8f6a:	2b20      	cmp	r3, #32
    8f6c:	d004      	beq.n	8f78 <create_name+0x128>
    8f6e:	2324      	movs	r3, #36	; 0x24
    8f70:	18fb      	adds	r3, r7, r3
    8f72:	881b      	ldrh	r3, [r3, #0]
    8f74:	2b2e      	cmp	r3, #46	; 0x2e
    8f76:	d106      	bne.n	8f86 <create_name+0x136>
		di--;
    8f78:	697b      	ldr	r3, [r7, #20]
    8f7a:	3b01      	subs	r3, #1
    8f7c:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8f7e:	697b      	ldr	r3, [r7, #20]
    8f80:	2b00      	cmp	r3, #0
    8f82:	d1e4      	bne.n	8f4e <create_name+0xfe>
    8f84:	e000      	b.n	8f88 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    8f86:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8f88:	697b      	ldr	r3, [r7, #20]
    8f8a:	2b00      	cmp	r3, #0
    8f8c:	d101      	bne.n	8f92 <create_name+0x142>
    8f8e:	2306      	movs	r3, #6
    8f90:	e17e      	b.n	9290 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    8f92:	697b      	ldr	r3, [r7, #20]
    8f94:	005b      	lsls	r3, r3, #1
    8f96:	68fa      	ldr	r2, [r7, #12]
    8f98:	18d3      	adds	r3, r2, r3
    8f9a:	2200      	movs	r2, #0
    8f9c:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8f9e:	687b      	ldr	r3, [r7, #4]
    8fa0:	699b      	ldr	r3, [r3, #24]
    8fa2:	220b      	movs	r2, #11
    8fa4:	2120      	movs	r1, #32
    8fa6:	0018      	movs	r0, r3
    8fa8:	4b8b      	ldr	r3, [pc, #556]	; (91d8 <create_name+0x388>)
    8faa:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    8fac:	2300      	movs	r3, #0
    8fae:	61bb      	str	r3, [r7, #24]
    8fb0:	e002      	b.n	8fb8 <create_name+0x168>
    8fb2:	69bb      	ldr	r3, [r7, #24]
    8fb4:	3301      	adds	r3, #1
    8fb6:	61bb      	str	r3, [r7, #24]
    8fb8:	69bb      	ldr	r3, [r7, #24]
    8fba:	005b      	lsls	r3, r3, #1
    8fbc:	68fa      	ldr	r2, [r7, #12]
    8fbe:	18d3      	adds	r3, r2, r3
    8fc0:	881b      	ldrh	r3, [r3, #0]
    8fc2:	2b20      	cmp	r3, #32
    8fc4:	d0f5      	beq.n	8fb2 <create_name+0x162>
    8fc6:	69bb      	ldr	r3, [r7, #24]
    8fc8:	005b      	lsls	r3, r3, #1
    8fca:	68fa      	ldr	r2, [r7, #12]
    8fcc:	18d3      	adds	r3, r2, r3
    8fce:	881b      	ldrh	r3, [r3, #0]
    8fd0:	2b2e      	cmp	r3, #46	; 0x2e
    8fd2:	d0ee      	beq.n	8fb2 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    8fd4:	69bb      	ldr	r3, [r7, #24]
    8fd6:	2b00      	cmp	r3, #0
    8fd8:	d00b      	beq.n	8ff2 <create_name+0x1a2>
    8fda:	2326      	movs	r3, #38	; 0x26
    8fdc:	18fb      	adds	r3, r7, r3
    8fde:	2226      	movs	r2, #38	; 0x26
    8fe0:	18ba      	adds	r2, r7, r2
    8fe2:	7812      	ldrb	r2, [r2, #0]
    8fe4:	2103      	movs	r1, #3
    8fe6:	430a      	orrs	r2, r1
    8fe8:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    8fea:	e002      	b.n	8ff2 <create_name+0x1a2>
    8fec:	697b      	ldr	r3, [r7, #20]
    8fee:	3b01      	subs	r3, #1
    8ff0:	617b      	str	r3, [r7, #20]
    8ff2:	697b      	ldr	r3, [r7, #20]
    8ff4:	2b00      	cmp	r3, #0
    8ff6:	d009      	beq.n	900c <create_name+0x1bc>
    8ff8:	697b      	ldr	r3, [r7, #20]
    8ffa:	4a76      	ldr	r2, [pc, #472]	; (91d4 <create_name+0x384>)
    8ffc:	4694      	mov	ip, r2
    8ffe:	4463      	add	r3, ip
    9000:	005b      	lsls	r3, r3, #1
    9002:	68fa      	ldr	r2, [r7, #12]
    9004:	18d3      	adds	r3, r2, r3
    9006:	881b      	ldrh	r3, [r3, #0]
    9008:	2b2e      	cmp	r3, #46	; 0x2e
    900a:	d1ef      	bne.n	8fec <create_name+0x19c>

	b = i = 0; ni = 8;
    900c:	2300      	movs	r3, #0
    900e:	623b      	str	r3, [r7, #32]
    9010:	2327      	movs	r3, #39	; 0x27
    9012:	18fb      	adds	r3, r7, r3
    9014:	2200      	movs	r2, #0
    9016:	701a      	strb	r2, [r3, #0]
    9018:	2308      	movs	r3, #8
    901a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    901c:	69bb      	ldr	r3, [r7, #24]
    901e:	1c5a      	adds	r2, r3, #1
    9020:	61ba      	str	r2, [r7, #24]
    9022:	005b      	lsls	r3, r3, #1
    9024:	68fa      	ldr	r2, [r7, #12]
    9026:	18d2      	adds	r2, r2, r3
    9028:	2324      	movs	r3, #36	; 0x24
    902a:	18fb      	adds	r3, r7, r3
    902c:	8812      	ldrh	r2, [r2, #0]
    902e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    9030:	2324      	movs	r3, #36	; 0x24
    9032:	18fb      	adds	r3, r7, r3
    9034:	881b      	ldrh	r3, [r3, #0]
    9036:	2b00      	cmp	r3, #0
    9038:	d100      	bne.n	903c <create_name+0x1ec>
    903a:	e0c3      	b.n	91c4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    903c:	2324      	movs	r3, #36	; 0x24
    903e:	18fb      	adds	r3, r7, r3
    9040:	881b      	ldrh	r3, [r3, #0]
    9042:	2b20      	cmp	r3, #32
    9044:	d008      	beq.n	9058 <create_name+0x208>
    9046:	2324      	movs	r3, #36	; 0x24
    9048:	18fb      	adds	r3, r7, r3
    904a:	881b      	ldrh	r3, [r3, #0]
    904c:	2b2e      	cmp	r3, #46	; 0x2e
    904e:	d10c      	bne.n	906a <create_name+0x21a>
    9050:	69ba      	ldr	r2, [r7, #24]
    9052:	697b      	ldr	r3, [r7, #20]
    9054:	429a      	cmp	r2, r3
    9056:	d008      	beq.n	906a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    9058:	2326      	movs	r3, #38	; 0x26
    905a:	18fb      	adds	r3, r7, r3
    905c:	2226      	movs	r2, #38	; 0x26
    905e:	18ba      	adds	r2, r7, r2
    9060:	7812      	ldrb	r2, [r2, #0]
    9062:	2103      	movs	r1, #3
    9064:	430a      	orrs	r2, r1
    9066:	701a      	strb	r2, [r3, #0]
    9068:	e0ab      	b.n	91c2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    906a:	6a3a      	ldr	r2, [r7, #32]
    906c:	69fb      	ldr	r3, [r7, #28]
    906e:	429a      	cmp	r2, r3
    9070:	d203      	bcs.n	907a <create_name+0x22a>
    9072:	69ba      	ldr	r2, [r7, #24]
    9074:	697b      	ldr	r3, [r7, #20]
    9076:	429a      	cmp	r2, r3
    9078:	d12a      	bne.n	90d0 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    907a:	69fb      	ldr	r3, [r7, #28]
    907c:	2b0b      	cmp	r3, #11
    907e:	d108      	bne.n	9092 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    9080:	2326      	movs	r3, #38	; 0x26
    9082:	18fb      	adds	r3, r7, r3
    9084:	2226      	movs	r2, #38	; 0x26
    9086:	18ba      	adds	r2, r7, r2
    9088:	7812      	ldrb	r2, [r2, #0]
    908a:	2103      	movs	r1, #3
    908c:	430a      	orrs	r2, r1
    908e:	701a      	strb	r2, [r3, #0]
    9090:	e0a9      	b.n	91e6 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    9092:	69ba      	ldr	r2, [r7, #24]
    9094:	697b      	ldr	r3, [r7, #20]
    9096:	429a      	cmp	r2, r3
    9098:	d007      	beq.n	90aa <create_name+0x25a>
    909a:	2326      	movs	r3, #38	; 0x26
    909c:	18fb      	adds	r3, r7, r3
    909e:	2226      	movs	r2, #38	; 0x26
    90a0:	18ba      	adds	r2, r7, r2
    90a2:	7812      	ldrb	r2, [r2, #0]
    90a4:	2103      	movs	r1, #3
    90a6:	430a      	orrs	r2, r1
    90a8:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    90aa:	69ba      	ldr	r2, [r7, #24]
    90ac:	697b      	ldr	r3, [r7, #20]
    90ae:	429a      	cmp	r2, r3
    90b0:	d900      	bls.n	90b4 <create_name+0x264>
    90b2:	e097      	b.n	91e4 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    90b4:	697b      	ldr	r3, [r7, #20]
    90b6:	61bb      	str	r3, [r7, #24]
    90b8:	2308      	movs	r3, #8
    90ba:	623b      	str	r3, [r7, #32]
    90bc:	230b      	movs	r3, #11
    90be:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    90c0:	2327      	movs	r3, #39	; 0x27
    90c2:	18fb      	adds	r3, r7, r3
    90c4:	2227      	movs	r2, #39	; 0x27
    90c6:	18ba      	adds	r2, r7, r2
    90c8:	7812      	ldrb	r2, [r2, #0]
    90ca:	0092      	lsls	r2, r2, #2
    90cc:	701a      	strb	r2, [r3, #0]
    90ce:	e078      	b.n	91c2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    90d0:	2324      	movs	r3, #36	; 0x24
    90d2:	18fb      	adds	r3, r7, r3
    90d4:	881b      	ldrh	r3, [r3, #0]
    90d6:	2b7f      	cmp	r3, #127	; 0x7f
    90d8:	d920      	bls.n	911c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    90da:	2324      	movs	r3, #36	; 0x24
    90dc:	18fc      	adds	r4, r7, r3
    90de:	2324      	movs	r3, #36	; 0x24
    90e0:	18fb      	adds	r3, r7, r3
    90e2:	881b      	ldrh	r3, [r3, #0]
    90e4:	2100      	movs	r1, #0
    90e6:	0018      	movs	r0, r3
    90e8:	4b37      	ldr	r3, [pc, #220]	; (91c8 <create_name+0x378>)
    90ea:	4798      	blx	r3
    90ec:	0003      	movs	r3, r0
    90ee:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    90f0:	2324      	movs	r3, #36	; 0x24
    90f2:	18fb      	adds	r3, r7, r3
    90f4:	881b      	ldrh	r3, [r3, #0]
    90f6:	2b00      	cmp	r3, #0
    90f8:	d008      	beq.n	910c <create_name+0x2bc>
    90fa:	2324      	movs	r3, #36	; 0x24
    90fc:	18fb      	adds	r3, r7, r3
    90fe:	881b      	ldrh	r3, [r3, #0]
    9100:	3b80      	subs	r3, #128	; 0x80
    9102:	4a36      	ldr	r2, [pc, #216]	; (91dc <create_name+0x38c>)
    9104:	5cd2      	ldrb	r2, [r2, r3]
    9106:	2324      	movs	r3, #36	; 0x24
    9108:	18fb      	adds	r3, r7, r3
    910a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    910c:	2326      	movs	r3, #38	; 0x26
    910e:	18fb      	adds	r3, r7, r3
    9110:	2226      	movs	r2, #38	; 0x26
    9112:	18ba      	adds	r2, r7, r2
    9114:	7812      	ldrb	r2, [r2, #0]
    9116:	2102      	movs	r1, #2
    9118:	430a      	orrs	r2, r1
    911a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    911c:	2324      	movs	r3, #36	; 0x24
    911e:	18fb      	adds	r3, r7, r3
    9120:	881b      	ldrh	r3, [r3, #0]
    9122:	2b00      	cmp	r3, #0
    9124:	d009      	beq.n	913a <create_name+0x2ea>
    9126:	2324      	movs	r3, #36	; 0x24
    9128:	18fb      	adds	r3, r7, r3
    912a:	881a      	ldrh	r2, [r3, #0]
    912c:	4b2c      	ldr	r3, [pc, #176]	; (91e0 <create_name+0x390>)
    912e:	0011      	movs	r1, r2
    9130:	0018      	movs	r0, r3
    9132:	4b27      	ldr	r3, [pc, #156]	; (91d0 <create_name+0x380>)
    9134:	4798      	blx	r3
    9136:	1e03      	subs	r3, r0, #0
    9138:	d00c      	beq.n	9154 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    913a:	2324      	movs	r3, #36	; 0x24
    913c:	18fb      	adds	r3, r7, r3
    913e:	225f      	movs	r2, #95	; 0x5f
    9140:	801a      	strh	r2, [r3, #0]
    9142:	2326      	movs	r3, #38	; 0x26
    9144:	18fb      	adds	r3, r7, r3
    9146:	2226      	movs	r2, #38	; 0x26
    9148:	18ba      	adds	r2, r7, r2
    914a:	7812      	ldrb	r2, [r2, #0]
    914c:	2103      	movs	r1, #3
    914e:	430a      	orrs	r2, r1
    9150:	701a      	strb	r2, [r3, #0]
    9152:	e02b      	b.n	91ac <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    9154:	2324      	movs	r3, #36	; 0x24
    9156:	18fb      	adds	r3, r7, r3
    9158:	881b      	ldrh	r3, [r3, #0]
    915a:	2b40      	cmp	r3, #64	; 0x40
    915c:	d90d      	bls.n	917a <create_name+0x32a>
    915e:	2324      	movs	r3, #36	; 0x24
    9160:	18fb      	adds	r3, r7, r3
    9162:	881b      	ldrh	r3, [r3, #0]
    9164:	2b5a      	cmp	r3, #90	; 0x5a
    9166:	d808      	bhi.n	917a <create_name+0x32a>
					b |= 2;
    9168:	2327      	movs	r3, #39	; 0x27
    916a:	18fb      	adds	r3, r7, r3
    916c:	2227      	movs	r2, #39	; 0x27
    916e:	18ba      	adds	r2, r7, r2
    9170:	7812      	ldrb	r2, [r2, #0]
    9172:	2102      	movs	r1, #2
    9174:	430a      	orrs	r2, r1
    9176:	701a      	strb	r2, [r3, #0]
    9178:	e018      	b.n	91ac <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    917a:	2324      	movs	r3, #36	; 0x24
    917c:	18fb      	adds	r3, r7, r3
    917e:	881b      	ldrh	r3, [r3, #0]
    9180:	2b60      	cmp	r3, #96	; 0x60
    9182:	d913      	bls.n	91ac <create_name+0x35c>
    9184:	2324      	movs	r3, #36	; 0x24
    9186:	18fb      	adds	r3, r7, r3
    9188:	881b      	ldrh	r3, [r3, #0]
    918a:	2b7a      	cmp	r3, #122	; 0x7a
    918c:	d80e      	bhi.n	91ac <create_name+0x35c>
						b |= 1; w -= 0x20;
    918e:	2327      	movs	r3, #39	; 0x27
    9190:	18fb      	adds	r3, r7, r3
    9192:	2227      	movs	r2, #39	; 0x27
    9194:	18ba      	adds	r2, r7, r2
    9196:	7812      	ldrb	r2, [r2, #0]
    9198:	2101      	movs	r1, #1
    919a:	430a      	orrs	r2, r1
    919c:	701a      	strb	r2, [r3, #0]
    919e:	2324      	movs	r3, #36	; 0x24
    91a0:	18fb      	adds	r3, r7, r3
    91a2:	2224      	movs	r2, #36	; 0x24
    91a4:	18ba      	adds	r2, r7, r2
    91a6:	8812      	ldrh	r2, [r2, #0]
    91a8:	3a20      	subs	r2, #32
    91aa:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	699a      	ldr	r2, [r3, #24]
    91b0:	6a3b      	ldr	r3, [r7, #32]
    91b2:	1c59      	adds	r1, r3, #1
    91b4:	6239      	str	r1, [r7, #32]
    91b6:	18d3      	adds	r3, r2, r3
    91b8:	2224      	movs	r2, #36	; 0x24
    91ba:	18ba      	adds	r2, r7, r2
    91bc:	8812      	ldrh	r2, [r2, #0]
    91be:	b2d2      	uxtb	r2, r2
    91c0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    91c2:	e72b      	b.n	901c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    91c4:	46c0      	nop			; (mov r8, r8)
    91c6:	e00e      	b.n	91e6 <create_name+0x396>
    91c8:	0000ae15 	.word	0x0000ae15
    91cc:	0000c588 	.word	0x0000c588
    91d0:	00007673 	.word	0x00007673
    91d4:	7fffffff 	.word	0x7fffffff
    91d8:	000075f9 	.word	0x000075f9
    91dc:	0000c5d0 	.word	0x0000c5d0
    91e0:	0000c594 	.word	0x0000c594
			if (si > di) break;			/* No extension */
    91e4:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    91e6:	687b      	ldr	r3, [r7, #4]
    91e8:	699b      	ldr	r3, [r3, #24]
    91ea:	781b      	ldrb	r3, [r3, #0]
    91ec:	2be5      	cmp	r3, #229	; 0xe5
    91ee:	d103      	bne.n	91f8 <create_name+0x3a8>
    91f0:	687b      	ldr	r3, [r7, #4]
    91f2:	699b      	ldr	r3, [r3, #24]
    91f4:	2205      	movs	r2, #5
    91f6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    91f8:	69fb      	ldr	r3, [r7, #28]
    91fa:	2b08      	cmp	r3, #8
    91fc:	d106      	bne.n	920c <create_name+0x3bc>
    91fe:	2327      	movs	r3, #39	; 0x27
    9200:	18fb      	adds	r3, r7, r3
    9202:	2227      	movs	r2, #39	; 0x27
    9204:	18ba      	adds	r2, r7, r2
    9206:	7812      	ldrb	r2, [r2, #0]
    9208:	0092      	lsls	r2, r2, #2
    920a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    920c:	2327      	movs	r3, #39	; 0x27
    920e:	18fb      	adds	r3, r7, r3
    9210:	781b      	ldrb	r3, [r3, #0]
    9212:	220c      	movs	r2, #12
    9214:	4013      	ands	r3, r2
    9216:	2b0c      	cmp	r3, #12
    9218:	d006      	beq.n	9228 <create_name+0x3d8>
    921a:	2327      	movs	r3, #39	; 0x27
    921c:	18fb      	adds	r3, r7, r3
    921e:	781b      	ldrb	r3, [r3, #0]
    9220:	2203      	movs	r2, #3
    9222:	4013      	ands	r3, r2
    9224:	2b03      	cmp	r3, #3
    9226:	d107      	bne.n	9238 <create_name+0x3e8>
		cf |= NS_LFN;
    9228:	2326      	movs	r3, #38	; 0x26
    922a:	18fb      	adds	r3, r7, r3
    922c:	2226      	movs	r2, #38	; 0x26
    922e:	18ba      	adds	r2, r7, r2
    9230:	7812      	ldrb	r2, [r2, #0]
    9232:	2102      	movs	r1, #2
    9234:	430a      	orrs	r2, r1
    9236:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    9238:	2326      	movs	r3, #38	; 0x26
    923a:	18fb      	adds	r3, r7, r3
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	2202      	movs	r2, #2
    9240:	4013      	ands	r3, r2
    9242:	d11d      	bne.n	9280 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    9244:	2327      	movs	r3, #39	; 0x27
    9246:	18fb      	adds	r3, r7, r3
    9248:	781b      	ldrb	r3, [r3, #0]
    924a:	2203      	movs	r2, #3
    924c:	4013      	ands	r3, r2
    924e:	2b01      	cmp	r3, #1
    9250:	d107      	bne.n	9262 <create_name+0x412>
    9252:	2326      	movs	r3, #38	; 0x26
    9254:	18fb      	adds	r3, r7, r3
    9256:	2226      	movs	r2, #38	; 0x26
    9258:	18ba      	adds	r2, r7, r2
    925a:	7812      	ldrb	r2, [r2, #0]
    925c:	2110      	movs	r1, #16
    925e:	430a      	orrs	r2, r1
    9260:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    9262:	2327      	movs	r3, #39	; 0x27
    9264:	18fb      	adds	r3, r7, r3
    9266:	781b      	ldrb	r3, [r3, #0]
    9268:	220c      	movs	r2, #12
    926a:	4013      	ands	r3, r2
    926c:	2b04      	cmp	r3, #4
    926e:	d107      	bne.n	9280 <create_name+0x430>
    9270:	2326      	movs	r3, #38	; 0x26
    9272:	18fb      	adds	r3, r7, r3
    9274:	2226      	movs	r2, #38	; 0x26
    9276:	18ba      	adds	r2, r7, r2
    9278:	7812      	ldrb	r2, [r2, #0]
    927a:	2108      	movs	r1, #8
    927c:	430a      	orrs	r2, r1
    927e:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    9280:	687b      	ldr	r3, [r7, #4]
    9282:	699b      	ldr	r3, [r3, #24]
    9284:	330b      	adds	r3, #11
    9286:	2226      	movs	r2, #38	; 0x26
    9288:	18ba      	adds	r2, r7, r2
    928a:	7812      	ldrb	r2, [r2, #0]
    928c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    928e:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    9290:	0018      	movs	r0, r3
    9292:	46bd      	mov	sp, r7
    9294:	b00b      	add	sp, #44	; 0x2c
    9296:	bd90      	pop	{r4, r7, pc}

00009298 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    9298:	b590      	push	{r4, r7, lr}
    929a:	b08b      	sub	sp, #44	; 0x2c
    929c:	af00      	add	r7, sp, #0
    929e:	6078      	str	r0, [r7, #4]
    92a0:	6039      	str	r1, [r7, #0]
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    92a2:	683b      	ldr	r3, [r7, #0]
    92a4:	3309      	adds	r3, #9
    92a6:	623b      	str	r3, [r7, #32]
	if (dj->sect) {
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	691b      	ldr	r3, [r3, #16]
    92ac:	2b00      	cmp	r3, #0
    92ae:	d100      	bne.n	92b2 <get_fileinfo+0x1a>
    92b0:	e0b8      	b.n	9424 <get_fileinfo+0x18c>
		dir = dj->dir;
    92b2:	687b      	ldr	r3, [r7, #4]
    92b4:	695b      	ldr	r3, [r3, #20]
    92b6:	617b      	str	r3, [r7, #20]
		nt = dir[DIR_NTres];		/* NT flag */
    92b8:	2313      	movs	r3, #19
    92ba:	18fb      	adds	r3, r7, r3
    92bc:	697a      	ldr	r2, [r7, #20]
    92be:	7b12      	ldrb	r2, [r2, #12]
    92c0:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    92c2:	2300      	movs	r3, #0
    92c4:	627b      	str	r3, [r7, #36]	; 0x24
    92c6:	e035      	b.n	9334 <get_fileinfo+0x9c>
			c = dir[i];
    92c8:	697a      	ldr	r2, [r7, #20]
    92ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92cc:	18d2      	adds	r2, r2, r3
    92ce:	231f      	movs	r3, #31
    92d0:	18fb      	adds	r3, r7, r3
    92d2:	7812      	ldrb	r2, [r2, #0]
    92d4:	701a      	strb	r2, [r3, #0]
			if (c == ' ') break;
    92d6:	231f      	movs	r3, #31
    92d8:	18fb      	adds	r3, r7, r3
    92da:	781b      	ldrb	r3, [r3, #0]
    92dc:	2b20      	cmp	r3, #32
    92de:	d02d      	beq.n	933c <get_fileinfo+0xa4>
			if (c == NDDE) c = (TCHAR)DDE;
    92e0:	231f      	movs	r3, #31
    92e2:	18fb      	adds	r3, r7, r3
    92e4:	781b      	ldrb	r3, [r3, #0]
    92e6:	2b05      	cmp	r3, #5
    92e8:	d103      	bne.n	92f2 <get_fileinfo+0x5a>
    92ea:	231f      	movs	r3, #31
    92ec:	18fb      	adds	r3, r7, r3
    92ee:	22e5      	movs	r2, #229	; 0xe5
    92f0:	701a      	strb	r2, [r3, #0]
			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
    92f2:	2313      	movs	r3, #19
    92f4:	18fb      	adds	r3, r7, r3
    92f6:	781b      	ldrb	r3, [r3, #0]
    92f8:	2208      	movs	r2, #8
    92fa:	4013      	ands	r3, r2
    92fc:	d010      	beq.n	9320 <get_fileinfo+0x88>
    92fe:	231f      	movs	r3, #31
    9300:	18fb      	adds	r3, r7, r3
    9302:	781b      	ldrb	r3, [r3, #0]
    9304:	2b40      	cmp	r3, #64	; 0x40
    9306:	d90b      	bls.n	9320 <get_fileinfo+0x88>
    9308:	231f      	movs	r3, #31
    930a:	18fb      	adds	r3, r7, r3
    930c:	781b      	ldrb	r3, [r3, #0]
    930e:	2b5a      	cmp	r3, #90	; 0x5a
    9310:	d806      	bhi.n	9320 <get_fileinfo+0x88>
    9312:	231f      	movs	r3, #31
    9314:	18fb      	adds	r3, r7, r3
    9316:	221f      	movs	r2, #31
    9318:	18ba      	adds	r2, r7, r2
    931a:	7812      	ldrb	r2, [r2, #0]
    931c:	3220      	adds	r2, #32
    931e:	701a      	strb	r2, [r3, #0]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    9320:	6a3b      	ldr	r3, [r7, #32]
    9322:	1c5a      	adds	r2, r3, #1
    9324:	623a      	str	r2, [r7, #32]
    9326:	221f      	movs	r2, #31
    9328:	18ba      	adds	r2, r7, r2
    932a:	7812      	ldrb	r2, [r2, #0]
    932c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9330:	3301      	adds	r3, #1
    9332:	627b      	str	r3, [r7, #36]	; 0x24
    9334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9336:	2b07      	cmp	r3, #7
    9338:	d9c6      	bls.n	92c8 <get_fileinfo+0x30>
    933a:	e000      	b.n	933e <get_fileinfo+0xa6>
			if (c == ' ') break;
    933c:	46c0      	nop			; (mov r8, r8)
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    933e:	697b      	ldr	r3, [r7, #20]
    9340:	3308      	adds	r3, #8
    9342:	781b      	ldrb	r3, [r3, #0]
    9344:	2b20      	cmp	r3, #32
    9346:	d039      	beq.n	93bc <get_fileinfo+0x124>
			*p++ = '.';
    9348:	6a3b      	ldr	r3, [r7, #32]
    934a:	1c5a      	adds	r2, r3, #1
    934c:	623a      	str	r2, [r7, #32]
    934e:	222e      	movs	r2, #46	; 0x2e
    9350:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    9352:	2308      	movs	r3, #8
    9354:	627b      	str	r3, [r7, #36]	; 0x24
    9356:	e02c      	b.n	93b2 <get_fileinfo+0x11a>
				c = dir[i];
    9358:	697a      	ldr	r2, [r7, #20]
    935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    935c:	18d2      	adds	r2, r2, r3
    935e:	231f      	movs	r3, #31
    9360:	18fb      	adds	r3, r7, r3
    9362:	7812      	ldrb	r2, [r2, #0]
    9364:	701a      	strb	r2, [r3, #0]
				if (c == ' ') break;
    9366:	231f      	movs	r3, #31
    9368:	18fb      	adds	r3, r7, r3
    936a:	781b      	ldrb	r3, [r3, #0]
    936c:	2b20      	cmp	r3, #32
    936e:	d024      	beq.n	93ba <get_fileinfo+0x122>
				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
    9370:	2313      	movs	r3, #19
    9372:	18fb      	adds	r3, r7, r3
    9374:	781b      	ldrb	r3, [r3, #0]
    9376:	2210      	movs	r2, #16
    9378:	4013      	ands	r3, r2
    937a:	d010      	beq.n	939e <get_fileinfo+0x106>
    937c:	231f      	movs	r3, #31
    937e:	18fb      	adds	r3, r7, r3
    9380:	781b      	ldrb	r3, [r3, #0]
    9382:	2b40      	cmp	r3, #64	; 0x40
    9384:	d90b      	bls.n	939e <get_fileinfo+0x106>
    9386:	231f      	movs	r3, #31
    9388:	18fb      	adds	r3, r7, r3
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	2b5a      	cmp	r3, #90	; 0x5a
    938e:	d806      	bhi.n	939e <get_fileinfo+0x106>
    9390:	231f      	movs	r3, #31
    9392:	18fb      	adds	r3, r7, r3
    9394:	221f      	movs	r2, #31
    9396:	18ba      	adds	r2, r7, r2
    9398:	7812      	ldrb	r2, [r2, #0]
    939a:	3220      	adds	r2, #32
    939c:	701a      	strb	r2, [r3, #0]
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    939e:	6a3b      	ldr	r3, [r7, #32]
    93a0:	1c5a      	adds	r2, r3, #1
    93a2:	623a      	str	r2, [r7, #32]
    93a4:	221f      	movs	r2, #31
    93a6:	18ba      	adds	r2, r7, r2
    93a8:	7812      	ldrb	r2, [r2, #0]
    93aa:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    93ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93ae:	3301      	adds	r3, #1
    93b0:	627b      	str	r3, [r7, #36]	; 0x24
    93b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93b4:	2b0a      	cmp	r3, #10
    93b6:	d9cf      	bls.n	9358 <get_fileinfo+0xc0>
    93b8:	e000      	b.n	93bc <get_fileinfo+0x124>
				if (c == ' ') break;
    93ba:	46c0      	nop			; (mov r8, r8)
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    93bc:	697b      	ldr	r3, [r7, #20]
    93be:	7ada      	ldrb	r2, [r3, #11]
    93c0:	683b      	ldr	r3, [r7, #0]
    93c2:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    93c4:	697b      	ldr	r3, [r7, #20]
    93c6:	331f      	adds	r3, #31
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	061a      	lsls	r2, r3, #24
    93cc:	697b      	ldr	r3, [r7, #20]
    93ce:	331e      	adds	r3, #30
    93d0:	781b      	ldrb	r3, [r3, #0]
    93d2:	041b      	lsls	r3, r3, #16
    93d4:	4313      	orrs	r3, r2
    93d6:	697a      	ldr	r2, [r7, #20]
    93d8:	321d      	adds	r2, #29
    93da:	7812      	ldrb	r2, [r2, #0]
    93dc:	0212      	lsls	r2, r2, #8
    93de:	4313      	orrs	r3, r2
    93e0:	697a      	ldr	r2, [r7, #20]
    93e2:	321c      	adds	r2, #28
    93e4:	7812      	ldrb	r2, [r2, #0]
    93e6:	431a      	orrs	r2, r3
    93e8:	683b      	ldr	r3, [r7, #0]
    93ea:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    93ec:	697b      	ldr	r3, [r7, #20]
    93ee:	3319      	adds	r3, #25
    93f0:	781b      	ldrb	r3, [r3, #0]
    93f2:	021b      	lsls	r3, r3, #8
    93f4:	b21a      	sxth	r2, r3
    93f6:	697b      	ldr	r3, [r7, #20]
    93f8:	3318      	adds	r3, #24
    93fa:	781b      	ldrb	r3, [r3, #0]
    93fc:	b21b      	sxth	r3, r3
    93fe:	4313      	orrs	r3, r2
    9400:	b21b      	sxth	r3, r3
    9402:	b29a      	uxth	r2, r3
    9404:	683b      	ldr	r3, [r7, #0]
    9406:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    9408:	697b      	ldr	r3, [r7, #20]
    940a:	3317      	adds	r3, #23
    940c:	781b      	ldrb	r3, [r3, #0]
    940e:	021b      	lsls	r3, r3, #8
    9410:	b21a      	sxth	r2, r3
    9412:	697b      	ldr	r3, [r7, #20]
    9414:	3316      	adds	r3, #22
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	b21b      	sxth	r3, r3
    941a:	4313      	orrs	r3, r2
    941c:	b21b      	sxth	r3, r3
    941e:	b29a      	uxth	r2, r3
    9420:	683b      	ldr	r3, [r7, #0]
    9422:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    9424:	6a3b      	ldr	r3, [r7, #32]
    9426:	2200      	movs	r2, #0
    9428:	701a      	strb	r2, [r3, #0]

#if _USE_LFN
	if (fno->lfname && fno->lfsize) {
    942a:	683b      	ldr	r3, [r7, #0]
    942c:	699b      	ldr	r3, [r3, #24]
    942e:	2b00      	cmp	r3, #0
    9430:	d04c      	beq.n	94cc <get_fileinfo+0x234>
    9432:	683b      	ldr	r3, [r7, #0]
    9434:	69db      	ldr	r3, [r3, #28]
    9436:	2b00      	cmp	r3, #0
    9438:	d048      	beq.n	94cc <get_fileinfo+0x234>
		TCHAR *tp = fno->lfname;
    943a:	683b      	ldr	r3, [r7, #0]
    943c:	699b      	ldr	r3, [r3, #24]
    943e:	60fb      	str	r3, [r7, #12]
		WCHAR w, *lfn;

		i = 0;
    9440:	2300      	movs	r3, #0
    9442:	627b      	str	r3, [r7, #36]	; 0x24
		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
    9444:	687b      	ldr	r3, [r7, #4]
    9446:	691b      	ldr	r3, [r3, #16]
    9448:	2b00      	cmp	r3, #0
    944a:	d03a      	beq.n	94c2 <get_fileinfo+0x22a>
    944c:	687b      	ldr	r3, [r7, #4]
    944e:	8c1b      	ldrh	r3, [r3, #32]
    9450:	4a20      	ldr	r2, [pc, #128]	; (94d4 <get_fileinfo+0x23c>)
    9452:	4293      	cmp	r3, r2
    9454:	d035      	beq.n	94c2 <get_fileinfo+0x22a>
			lfn = dj->lfn;
    9456:	687b      	ldr	r3, [r7, #4]
    9458:	69db      	ldr	r3, [r3, #28]
    945a:	61bb      	str	r3, [r7, #24]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    945c:	e025      	b.n	94aa <get_fileinfo+0x212>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
    945e:	230a      	movs	r3, #10
    9460:	18fc      	adds	r4, r7, r3
    9462:	230a      	movs	r3, #10
    9464:	18fb      	adds	r3, r7, r3
    9466:	881b      	ldrh	r3, [r3, #0]
    9468:	2100      	movs	r1, #0
    946a:	0018      	movs	r0, r3
    946c:	4b1a      	ldr	r3, [pc, #104]	; (94d8 <get_fileinfo+0x240>)
    946e:	4798      	blx	r3
    9470:	0003      	movs	r3, r0
    9472:	8023      	strh	r3, [r4, #0]
				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
    9474:	230a      	movs	r3, #10
    9476:	18fb      	adds	r3, r7, r3
    9478:	881b      	ldrh	r3, [r3, #0]
    947a:	2b00      	cmp	r3, #0
    947c:	d102      	bne.n	9484 <get_fileinfo+0x1ec>
    947e:	2300      	movs	r3, #0
    9480:	627b      	str	r3, [r7, #36]	; 0x24
    9482:	e01e      	b.n	94c2 <get_fileinfo+0x22a>
				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
					tp[i++] = (TCHAR)(w >> 8);
#endif
				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
    9484:	683b      	ldr	r3, [r7, #0]
    9486:	69db      	ldr	r3, [r3, #28]
    9488:	1e5a      	subs	r2, r3, #1
    948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    948c:	429a      	cmp	r2, r3
    948e:	d802      	bhi.n	9496 <get_fileinfo+0x1fe>
    9490:	2300      	movs	r3, #0
    9492:	627b      	str	r3, [r7, #36]	; 0x24
    9494:	e015      	b.n	94c2 <get_fileinfo+0x22a>
				tp[i++] = (TCHAR)w;
    9496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9498:	1c5a      	adds	r2, r3, #1
    949a:	627a      	str	r2, [r7, #36]	; 0x24
    949c:	68fa      	ldr	r2, [r7, #12]
    949e:	18d3      	adds	r3, r2, r3
    94a0:	220a      	movs	r2, #10
    94a2:	18ba      	adds	r2, r7, r2
    94a4:	8812      	ldrh	r2, [r2, #0]
    94a6:	b2d2      	uxtb	r2, r2
    94a8:	701a      	strb	r2, [r3, #0]
			while ((w = *lfn++) != 0) {			/* Get an LFN char */
    94aa:	69bb      	ldr	r3, [r7, #24]
    94ac:	1c9a      	adds	r2, r3, #2
    94ae:	61ba      	str	r2, [r7, #24]
    94b0:	220a      	movs	r2, #10
    94b2:	18ba      	adds	r2, r7, r2
    94b4:	881b      	ldrh	r3, [r3, #0]
    94b6:	8013      	strh	r3, [r2, #0]
    94b8:	230a      	movs	r3, #10
    94ba:	18fb      	adds	r3, r7, r3
    94bc:	881b      	ldrh	r3, [r3, #0]
    94be:	2b00      	cmp	r3, #0
    94c0:	d1cd      	bne.n	945e <get_fileinfo+0x1c6>
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
    94c2:	68fa      	ldr	r2, [r7, #12]
    94c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94c6:	18d3      	adds	r3, r2, r3
    94c8:	2200      	movs	r2, #0
    94ca:	701a      	strb	r2, [r3, #0]
	}
#endif
}
    94cc:	46c0      	nop			; (mov r8, r8)
    94ce:	46bd      	mov	sp, r7
    94d0:	b00b      	add	sp, #44	; 0x2c
    94d2:	bd90      	pop	{r4, r7, pc}
    94d4:	0000ffff 	.word	0x0000ffff
    94d8:	0000ae15 	.word	0x0000ae15

000094dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    94dc:	b590      	push	{r4, r7, lr}
    94de:	b085      	sub	sp, #20
    94e0:	af00      	add	r7, sp, #0
    94e2:	6078      	str	r0, [r7, #4]
    94e4:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    94e6:	683b      	ldr	r3, [r7, #0]
    94e8:	781b      	ldrb	r3, [r3, #0]
    94ea:	2b2f      	cmp	r3, #47	; 0x2f
    94ec:	d003      	beq.n	94f6 <follow_path+0x1a>
    94ee:	683b      	ldr	r3, [r7, #0]
    94f0:	781b      	ldrb	r3, [r3, #0]
    94f2:	2b5c      	cmp	r3, #92	; 0x5c
    94f4:	d102      	bne.n	94fc <follow_path+0x20>
		path++;
    94f6:	683b      	ldr	r3, [r7, #0]
    94f8:	3301      	adds	r3, #1
    94fa:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    94fc:	687b      	ldr	r3, [r7, #4]
    94fe:	2200      	movs	r2, #0
    9500:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    9502:	683b      	ldr	r3, [r7, #0]
    9504:	781b      	ldrb	r3, [r3, #0]
    9506:	2b1f      	cmp	r3, #31
    9508:	d80c      	bhi.n	9524 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    950a:	230f      	movs	r3, #15
    950c:	18fc      	adds	r4, r7, r3
    950e:	687b      	ldr	r3, [r7, #4]
    9510:	2100      	movs	r1, #0
    9512:	0018      	movs	r0, r3
    9514:	4b3c      	ldr	r3, [pc, #240]	; (9608 <follow_path+0x12c>)
    9516:	4798      	blx	r3
    9518:	0003      	movs	r3, r0
    951a:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	2200      	movs	r2, #0
    9520:	615a      	str	r2, [r3, #20]
    9522:	e06a      	b.n	95fa <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    9524:	230f      	movs	r3, #15
    9526:	18fc      	adds	r4, r7, r3
    9528:	003a      	movs	r2, r7
    952a:	687b      	ldr	r3, [r7, #4]
    952c:	0011      	movs	r1, r2
    952e:	0018      	movs	r0, r3
    9530:	4b36      	ldr	r3, [pc, #216]	; (960c <follow_path+0x130>)
    9532:	4798      	blx	r3
    9534:	0003      	movs	r3, r0
    9536:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    9538:	230f      	movs	r3, #15
    953a:	18fb      	adds	r3, r7, r3
    953c:	781b      	ldrb	r3, [r3, #0]
    953e:	2b00      	cmp	r3, #0
    9540:	d154      	bne.n	95ec <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    9542:	230f      	movs	r3, #15
    9544:	18fc      	adds	r4, r7, r3
    9546:	687b      	ldr	r3, [r7, #4]
    9548:	0018      	movs	r0, r3
    954a:	4b31      	ldr	r3, [pc, #196]	; (9610 <follow_path+0x134>)
    954c:	4798      	blx	r3
    954e:	0003      	movs	r3, r0
    9550:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    9552:	687b      	ldr	r3, [r7, #4]
    9554:	699a      	ldr	r2, [r3, #24]
    9556:	230e      	movs	r3, #14
    9558:	18fb      	adds	r3, r7, r3
    955a:	7ad2      	ldrb	r2, [r2, #11]
    955c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    955e:	230f      	movs	r3, #15
    9560:	18fb      	adds	r3, r7, r3
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	2b00      	cmp	r3, #0
    9566:	d00f      	beq.n	9588 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    9568:	230f      	movs	r3, #15
    956a:	18fb      	adds	r3, r7, r3
    956c:	781b      	ldrb	r3, [r3, #0]
    956e:	2b04      	cmp	r3, #4
    9570:	d13e      	bne.n	95f0 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    9572:	230e      	movs	r3, #14
    9574:	18fb      	adds	r3, r7, r3
    9576:	781b      	ldrb	r3, [r3, #0]
    9578:	2204      	movs	r2, #4
    957a:	4013      	ands	r3, r2
    957c:	d13a      	bne.n	95f4 <follow_path+0x118>
    957e:	230f      	movs	r3, #15
    9580:	18fb      	adds	r3, r7, r3
    9582:	2205      	movs	r2, #5
    9584:	701a      	strb	r2, [r3, #0]
				}
				break;
    9586:	e035      	b.n	95f4 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    9588:	230e      	movs	r3, #14
    958a:	18fb      	adds	r3, r7, r3
    958c:	781b      	ldrb	r3, [r3, #0]
    958e:	2204      	movs	r2, #4
    9590:	4013      	ands	r3, r2
    9592:	d131      	bne.n	95f8 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	695b      	ldr	r3, [r3, #20]
    9598:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    959a:	68bb      	ldr	r3, [r7, #8]
    959c:	330b      	adds	r3, #11
    959e:	781b      	ldrb	r3, [r3, #0]
    95a0:	001a      	movs	r2, r3
    95a2:	2310      	movs	r3, #16
    95a4:	4013      	ands	r3, r2
    95a6:	d104      	bne.n	95b2 <follow_path+0xd6>
				res = FR_NO_PATH; break;
    95a8:	230f      	movs	r3, #15
    95aa:	18fb      	adds	r3, r7, r3
    95ac:	2205      	movs	r2, #5
    95ae:	701a      	strb	r2, [r3, #0]
    95b0:	e023      	b.n	95fa <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    95b2:	68bb      	ldr	r3, [r7, #8]
    95b4:	3315      	adds	r3, #21
    95b6:	781b      	ldrb	r3, [r3, #0]
    95b8:	021b      	lsls	r3, r3, #8
    95ba:	b21a      	sxth	r2, r3
    95bc:	68bb      	ldr	r3, [r7, #8]
    95be:	3314      	adds	r3, #20
    95c0:	781b      	ldrb	r3, [r3, #0]
    95c2:	b21b      	sxth	r3, r3
    95c4:	4313      	orrs	r3, r2
    95c6:	b21b      	sxth	r3, r3
    95c8:	b29b      	uxth	r3, r3
    95ca:	041b      	lsls	r3, r3, #16
    95cc:	68ba      	ldr	r2, [r7, #8]
    95ce:	321b      	adds	r2, #27
    95d0:	7812      	ldrb	r2, [r2, #0]
    95d2:	0212      	lsls	r2, r2, #8
    95d4:	b211      	sxth	r1, r2
    95d6:	68ba      	ldr	r2, [r7, #8]
    95d8:	321a      	adds	r2, #26
    95da:	7812      	ldrb	r2, [r2, #0]
    95dc:	b212      	sxth	r2, r2
    95de:	430a      	orrs	r2, r1
    95e0:	b212      	sxth	r2, r2
    95e2:	b292      	uxth	r2, r2
    95e4:	431a      	orrs	r2, r3
    95e6:	687b      	ldr	r3, [r7, #4]
    95e8:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    95ea:	e79b      	b.n	9524 <follow_path+0x48>
			if (res != FR_OK) break;
    95ec:	46c0      	nop			; (mov r8, r8)
    95ee:	e004      	b.n	95fa <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    95f0:	46c0      	nop			; (mov r8, r8)
    95f2:	e002      	b.n	95fa <follow_path+0x11e>
				break;
    95f4:	46c0      	nop			; (mov r8, r8)
    95f6:	e000      	b.n	95fa <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    95f8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    95fa:	230f      	movs	r3, #15
    95fc:	18fb      	adds	r3, r7, r3
    95fe:	781b      	ldrb	r3, [r3, #0]
}
    9600:	0018      	movs	r0, r3
    9602:	46bd      	mov	sp, r7
    9604:	b005      	add	sp, #20
    9606:	bd90      	pop	{r4, r7, pc}
    9608:	00007ee9 	.word	0x00007ee9
    960c:	00008e51 	.word	0x00008e51
    9610:	00008651 	.word	0x00008651

00009614 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    9614:	b590      	push	{r4, r7, lr}
    9616:	b083      	sub	sp, #12
    9618:	af00      	add	r7, sp, #0
    961a:	6078      	str	r0, [r7, #4]
    961c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    961e:	687b      	ldr	r3, [r7, #4]
    9620:	7858      	ldrb	r0, [r3, #1]
    9622:	687b      	ldr	r3, [r7, #4]
    9624:	3330      	adds	r3, #48	; 0x30
    9626:	0019      	movs	r1, r3
    9628:	683a      	ldr	r2, [r7, #0]
    962a:	2301      	movs	r3, #1
    962c:	4c2a      	ldr	r4, [pc, #168]	; (96d8 <check_fs+0xc4>)
    962e:	47a0      	blx	r4
    9630:	1e03      	subs	r3, r0, #0
    9632:	d001      	beq.n	9638 <check_fs+0x24>
		return 3;
    9634:	2303      	movs	r3, #3
    9636:	e04b      	b.n	96d0 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    9638:	687b      	ldr	r3, [r7, #4]
    963a:	4a28      	ldr	r2, [pc, #160]	; (96dc <check_fs+0xc8>)
    963c:	4694      	mov	ip, r2
    963e:	4463      	add	r3, ip
    9640:	3301      	adds	r3, #1
    9642:	781b      	ldrb	r3, [r3, #0]
    9644:	021b      	lsls	r3, r3, #8
    9646:	b21a      	sxth	r2, r3
    9648:	687b      	ldr	r3, [r7, #4]
    964a:	4924      	ldr	r1, [pc, #144]	; (96dc <check_fs+0xc8>)
    964c:	5c5b      	ldrb	r3, [r3, r1]
    964e:	b21b      	sxth	r3, r3
    9650:	4313      	orrs	r3, r2
    9652:	b21b      	sxth	r3, r3
    9654:	4a22      	ldr	r2, [pc, #136]	; (96e0 <check_fs+0xcc>)
    9656:	4293      	cmp	r3, r2
    9658:	d001      	beq.n	965e <check_fs+0x4a>
		return 2;
    965a:	2302      	movs	r3, #2
    965c:	e038      	b.n	96d0 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    965e:	687b      	ldr	r3, [r7, #4]
    9660:	3366      	adds	r3, #102	; 0x66
    9662:	3303      	adds	r3, #3
    9664:	781b      	ldrb	r3, [r3, #0]
    9666:	061a      	lsls	r2, r3, #24
    9668:	687b      	ldr	r3, [r7, #4]
    966a:	3366      	adds	r3, #102	; 0x66
    966c:	3302      	adds	r3, #2
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	041b      	lsls	r3, r3, #16
    9672:	4313      	orrs	r3, r2
    9674:	687a      	ldr	r2, [r7, #4]
    9676:	3266      	adds	r2, #102	; 0x66
    9678:	3201      	adds	r2, #1
    967a:	7812      	ldrb	r2, [r2, #0]
    967c:	0212      	lsls	r2, r2, #8
    967e:	4313      	orrs	r3, r2
    9680:	687a      	ldr	r2, [r7, #4]
    9682:	2166      	movs	r1, #102	; 0x66
    9684:	5c52      	ldrb	r2, [r2, r1]
    9686:	4313      	orrs	r3, r2
    9688:	021b      	lsls	r3, r3, #8
    968a:	0a1b      	lsrs	r3, r3, #8
    968c:	4a15      	ldr	r2, [pc, #84]	; (96e4 <check_fs+0xd0>)
    968e:	4293      	cmp	r3, r2
    9690:	d101      	bne.n	9696 <check_fs+0x82>
		return 0;
    9692:	2300      	movs	r3, #0
    9694:	e01c      	b.n	96d0 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    9696:	687b      	ldr	r3, [r7, #4]
    9698:	3382      	adds	r3, #130	; 0x82
    969a:	3303      	adds	r3, #3
    969c:	781b      	ldrb	r3, [r3, #0]
    969e:	061a      	lsls	r2, r3, #24
    96a0:	687b      	ldr	r3, [r7, #4]
    96a2:	3382      	adds	r3, #130	; 0x82
    96a4:	3302      	adds	r3, #2
    96a6:	781b      	ldrb	r3, [r3, #0]
    96a8:	041b      	lsls	r3, r3, #16
    96aa:	4313      	orrs	r3, r2
    96ac:	687a      	ldr	r2, [r7, #4]
    96ae:	3282      	adds	r2, #130	; 0x82
    96b0:	3201      	adds	r2, #1
    96b2:	7812      	ldrb	r2, [r2, #0]
    96b4:	0212      	lsls	r2, r2, #8
    96b6:	4313      	orrs	r3, r2
    96b8:	687a      	ldr	r2, [r7, #4]
    96ba:	2182      	movs	r1, #130	; 0x82
    96bc:	5c52      	ldrb	r2, [r2, r1]
    96be:	4313      	orrs	r3, r2
    96c0:	021b      	lsls	r3, r3, #8
    96c2:	0a1b      	lsrs	r3, r3, #8
    96c4:	4a07      	ldr	r2, [pc, #28]	; (96e4 <check_fs+0xd0>)
    96c6:	4293      	cmp	r3, r2
    96c8:	d101      	bne.n	96ce <check_fs+0xba>
		return 0;
    96ca:	2300      	movs	r3, #0
    96cc:	e000      	b.n	96d0 <check_fs+0xbc>

	return 1;
    96ce:	2301      	movs	r3, #1
}
    96d0:	0018      	movs	r0, r3
    96d2:	46bd      	mov	sp, r7
    96d4:	b003      	add	sp, #12
    96d6:	bd90      	pop	{r4, r7, pc}
    96d8:	000072b9 	.word	0x000072b9
    96dc:	0000022e 	.word	0x0000022e
    96e0:	ffffaa55 	.word	0xffffaa55
    96e4:	00544146 	.word	0x00544146

000096e8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    96e8:	b590      	push	{r4, r7, lr}
    96ea:	b093      	sub	sp, #76	; 0x4c
    96ec:	af00      	add	r7, sp, #0
    96ee:	60f8      	str	r0, [r7, #12]
    96f0:	60b9      	str	r1, [r7, #8]
    96f2:	1dfb      	adds	r3, r7, #7
    96f4:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    96f6:	68fb      	ldr	r3, [r7, #12]
    96f8:	681b      	ldr	r3, [r3, #0]
    96fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    96fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    96fe:	781b      	ldrb	r3, [r3, #0]
    9700:	3b30      	subs	r3, #48	; 0x30
    9702:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    9704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9706:	2b09      	cmp	r3, #9
    9708:	d80b      	bhi.n	9722 <chk_mounted+0x3a>
    970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    970c:	3301      	adds	r3, #1
    970e:	781b      	ldrb	r3, [r3, #0]
    9710:	2b3a      	cmp	r3, #58	; 0x3a
    9712:	d106      	bne.n	9722 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    9714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9716:	3302      	adds	r3, #2
    9718:	62fb      	str	r3, [r7, #44]	; 0x2c
    971a:	68fb      	ldr	r3, [r7, #12]
    971c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    971e:	601a      	str	r2, [r3, #0]
    9720:	e001      	b.n	9726 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    9722:	2300      	movs	r3, #0
    9724:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    9726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9728:	2b00      	cmp	r3, #0
    972a:	d001      	beq.n	9730 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    972c:	230b      	movs	r3, #11
    972e:	e2af      	b.n	9c90 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    9730:	4bc5      	ldr	r3, [pc, #788]	; (9a48 <chk_mounted+0x360>)
    9732:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    9734:	0092      	lsls	r2, r2, #2
    9736:	58d3      	ldr	r3, [r2, r3]
    9738:	62bb      	str	r3, [r7, #40]	; 0x28
    973a:	68bb      	ldr	r3, [r7, #8]
    973c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    973e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    9740:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9742:	2b00      	cmp	r3, #0
    9744:	d101      	bne.n	974a <chk_mounted+0x62>
    9746:	230c      	movs	r3, #12
    9748:	e2a2      	b.n	9c90 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    974a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    974c:	781b      	ldrb	r3, [r3, #0]
    974e:	2b00      	cmp	r3, #0
    9750:	d01c      	beq.n	978c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    9752:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9754:	785b      	ldrb	r3, [r3, #1]
    9756:	2227      	movs	r2, #39	; 0x27
    9758:	18bc      	adds	r4, r7, r2
    975a:	0018      	movs	r0, r3
    975c:	4bbb      	ldr	r3, [pc, #748]	; (9a4c <chk_mounted+0x364>)
    975e:	4798      	blx	r3
    9760:	0003      	movs	r3, r0
    9762:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    9764:	2327      	movs	r3, #39	; 0x27
    9766:	18fb      	adds	r3, r7, r3
    9768:	781b      	ldrb	r3, [r3, #0]
    976a:	2201      	movs	r2, #1
    976c:	4013      	ands	r3, r2
    976e:	d10d      	bne.n	978c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    9770:	1dfb      	adds	r3, r7, #7
    9772:	781b      	ldrb	r3, [r3, #0]
    9774:	2b00      	cmp	r3, #0
    9776:	d007      	beq.n	9788 <chk_mounted+0xa0>
    9778:	2327      	movs	r3, #39	; 0x27
    977a:	18fb      	adds	r3, r7, r3
    977c:	781b      	ldrb	r3, [r3, #0]
    977e:	2204      	movs	r2, #4
    9780:	4013      	ands	r3, r2
    9782:	d001      	beq.n	9788 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    9784:	230a      	movs	r3, #10
    9786:	e283      	b.n	9c90 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    9788:	2300      	movs	r3, #0
    978a:	e281      	b.n	9c90 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    978e:	2200      	movs	r2, #0
    9790:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    9792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9794:	b2da      	uxtb	r2, r3
    9796:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9798:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    979c:	785b      	ldrb	r3, [r3, #1]
    979e:	2227      	movs	r2, #39	; 0x27
    97a0:	18bc      	adds	r4, r7, r2
    97a2:	0018      	movs	r0, r3
    97a4:	4baa      	ldr	r3, [pc, #680]	; (9a50 <chk_mounted+0x368>)
    97a6:	4798      	blx	r3
    97a8:	0003      	movs	r3, r0
    97aa:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    97ac:	2327      	movs	r3, #39	; 0x27
    97ae:	18fb      	adds	r3, r7, r3
    97b0:	781b      	ldrb	r3, [r3, #0]
    97b2:	2201      	movs	r2, #1
    97b4:	4013      	ands	r3, r2
    97b6:	d001      	beq.n	97bc <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    97b8:	2303      	movs	r3, #3
    97ba:	e269      	b.n	9c90 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    97bc:	1dfb      	adds	r3, r7, #7
    97be:	781b      	ldrb	r3, [r3, #0]
    97c0:	2b00      	cmp	r3, #0
    97c2:	d007      	beq.n	97d4 <chk_mounted+0xec>
    97c4:	2327      	movs	r3, #39	; 0x27
    97c6:	18fb      	adds	r3, r7, r3
    97c8:	781b      	ldrb	r3, [r3, #0]
    97ca:	2204      	movs	r2, #4
    97cc:	4013      	ands	r3, r2
    97ce:	d001      	beq.n	97d4 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    97d0:	230a      	movs	r3, #10
    97d2:	e25d      	b.n	9c90 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    97d4:	2300      	movs	r3, #0
    97d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    97d8:	2347      	movs	r3, #71	; 0x47
    97da:	18fc      	adds	r4, r7, r3
    97dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    97de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    97e0:	0011      	movs	r1, r2
    97e2:	0018      	movs	r0, r3
    97e4:	4b9b      	ldr	r3, [pc, #620]	; (9a54 <chk_mounted+0x36c>)
    97e6:	4798      	blx	r3
    97e8:	0003      	movs	r3, r0
    97ea:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    97ec:	2347      	movs	r3, #71	; 0x47
    97ee:	18fb      	adds	r3, r7, r3
    97f0:	781b      	ldrb	r3, [r3, #0]
    97f2:	2b01      	cmp	r3, #1
    97f4:	d13b      	bne.n	986e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    97f6:	2346      	movs	r3, #70	; 0x46
    97f8:	18fb      	adds	r3, r7, r3
    97fa:	2200      	movs	r2, #0
    97fc:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    97fe:	2346      	movs	r3, #70	; 0x46
    9800:	18fb      	adds	r3, r7, r3
    9802:	781b      	ldrb	r3, [r3, #0]
    9804:	2b00      	cmp	r3, #0
    9806:	d006      	beq.n	9816 <chk_mounted+0x12e>
    9808:	2346      	movs	r3, #70	; 0x46
    980a:	18fb      	adds	r3, r7, r3
    980c:	781a      	ldrb	r2, [r3, #0]
    980e:	2346      	movs	r3, #70	; 0x46
    9810:	18fb      	adds	r3, r7, r3
    9812:	3a01      	subs	r2, #1
    9814:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    9816:	2346      	movs	r3, #70	; 0x46
    9818:	18fb      	adds	r3, r7, r3
    981a:	781b      	ldrb	r3, [r3, #0]
    981c:	011b      	lsls	r3, r3, #4
    981e:	33bf      	adds	r3, #191	; 0xbf
    9820:	33ff      	adds	r3, #255	; 0xff
    9822:	3330      	adds	r3, #48	; 0x30
    9824:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9826:	18d3      	adds	r3, r2, r3
    9828:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    982a:	6a3b      	ldr	r3, [r7, #32]
    982c:	3304      	adds	r3, #4
    982e:	781b      	ldrb	r3, [r3, #0]
    9830:	2b00      	cmp	r3, #0
    9832:	d01c      	beq.n	986e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    9834:	6a3b      	ldr	r3, [r7, #32]
    9836:	330b      	adds	r3, #11
    9838:	781b      	ldrb	r3, [r3, #0]
    983a:	061a      	lsls	r2, r3, #24
    983c:	6a3b      	ldr	r3, [r7, #32]
    983e:	330a      	adds	r3, #10
    9840:	781b      	ldrb	r3, [r3, #0]
    9842:	041b      	lsls	r3, r3, #16
    9844:	4313      	orrs	r3, r2
    9846:	6a3a      	ldr	r2, [r7, #32]
    9848:	3209      	adds	r2, #9
    984a:	7812      	ldrb	r2, [r2, #0]
    984c:	0212      	lsls	r2, r2, #8
    984e:	4313      	orrs	r3, r2
    9850:	6a3a      	ldr	r2, [r7, #32]
    9852:	3208      	adds	r2, #8
    9854:	7812      	ldrb	r2, [r2, #0]
    9856:	4313      	orrs	r3, r2
    9858:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    985a:	2347      	movs	r3, #71	; 0x47
    985c:	18fc      	adds	r4, r7, r3
    985e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9860:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9862:	0011      	movs	r1, r2
    9864:	0018      	movs	r0, r3
    9866:	4b7b      	ldr	r3, [pc, #492]	; (9a54 <chk_mounted+0x36c>)
    9868:	4798      	blx	r3
    986a:	0003      	movs	r3, r0
    986c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    986e:	2347      	movs	r3, #71	; 0x47
    9870:	18fb      	adds	r3, r7, r3
    9872:	781b      	ldrb	r3, [r3, #0]
    9874:	2b03      	cmp	r3, #3
    9876:	d101      	bne.n	987c <chk_mounted+0x194>
    9878:	2301      	movs	r3, #1
    987a:	e209      	b.n	9c90 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    987c:	2347      	movs	r3, #71	; 0x47
    987e:	18fb      	adds	r3, r7, r3
    9880:	781b      	ldrb	r3, [r3, #0]
    9882:	2b00      	cmp	r3, #0
    9884:	d001      	beq.n	988a <chk_mounted+0x1a2>
    9886:	230d      	movs	r3, #13
    9888:	e202      	b.n	9c90 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    988c:	223c      	movs	r2, #60	; 0x3c
    988e:	5c9b      	ldrb	r3, [r3, r2]
    9890:	021b      	lsls	r3, r3, #8
    9892:	b21a      	sxth	r2, r3
    9894:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9896:	213b      	movs	r1, #59	; 0x3b
    9898:	5c5b      	ldrb	r3, [r3, r1]
    989a:	b21b      	sxth	r3, r3
    989c:	4313      	orrs	r3, r2
    989e:	b21a      	sxth	r2, r3
    98a0:	2380      	movs	r3, #128	; 0x80
    98a2:	009b      	lsls	r3, r3, #2
    98a4:	429a      	cmp	r2, r3
    98a6:	d001      	beq.n	98ac <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    98a8:	230d      	movs	r3, #13
    98aa:	e1f1      	b.n	9c90 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    98ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98ae:	2247      	movs	r2, #71	; 0x47
    98b0:	5c9b      	ldrb	r3, [r3, r2]
    98b2:	021b      	lsls	r3, r3, #8
    98b4:	b21a      	sxth	r2, r3
    98b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98b8:	2146      	movs	r1, #70	; 0x46
    98ba:	5c5b      	ldrb	r3, [r3, r1]
    98bc:	b21b      	sxth	r3, r3
    98be:	4313      	orrs	r3, r2
    98c0:	b21b      	sxth	r3, r3
    98c2:	b29b      	uxth	r3, r3
    98c4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    98c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    98c8:	2b00      	cmp	r3, #0
    98ca:	d112      	bne.n	98f2 <chk_mounted+0x20a>
    98cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98ce:	2257      	movs	r2, #87	; 0x57
    98d0:	5c9b      	ldrb	r3, [r3, r2]
    98d2:	061a      	lsls	r2, r3, #24
    98d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98d6:	2156      	movs	r1, #86	; 0x56
    98d8:	5c5b      	ldrb	r3, [r3, r1]
    98da:	041b      	lsls	r3, r3, #16
    98dc:	4313      	orrs	r3, r2
    98de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    98e0:	2155      	movs	r1, #85	; 0x55
    98e2:	5c52      	ldrb	r2, [r2, r1]
    98e4:	0212      	lsls	r2, r2, #8
    98e6:	4313      	orrs	r3, r2
    98e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    98ea:	2154      	movs	r1, #84	; 0x54
    98ec:	5c52      	ldrb	r2, [r2, r1]
    98ee:	4313      	orrs	r3, r2
    98f0:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    98f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    98f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    98f6:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    98f8:	231f      	movs	r3, #31
    98fa:	18fb      	adds	r3, r7, r3
    98fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    98fe:	2140      	movs	r1, #64	; 0x40
    9900:	5c52      	ldrb	r2, [r2, r1]
    9902:	701a      	strb	r2, [r3, #0]
    9904:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9906:	221f      	movs	r2, #31
    9908:	18ba      	adds	r2, r7, r2
    990a:	7812      	ldrb	r2, [r2, #0]
    990c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    990e:	231f      	movs	r3, #31
    9910:	18fb      	adds	r3, r7, r3
    9912:	781b      	ldrb	r3, [r3, #0]
    9914:	2b01      	cmp	r3, #1
    9916:	d006      	beq.n	9926 <chk_mounted+0x23e>
    9918:	231f      	movs	r3, #31
    991a:	18fb      	adds	r3, r7, r3
    991c:	781b      	ldrb	r3, [r3, #0]
    991e:	2b02      	cmp	r3, #2
    9920:	d001      	beq.n	9926 <chk_mounted+0x23e>
    9922:	230d      	movs	r3, #13
    9924:	e1b4      	b.n	9c90 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    9926:	231f      	movs	r3, #31
    9928:	18fb      	adds	r3, r7, r3
    992a:	781a      	ldrb	r2, [r3, #0]
    992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    992e:	4353      	muls	r3, r2
    9930:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    9932:	231f      	movs	r3, #31
    9934:	18fb      	adds	r3, r7, r3
    9936:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9938:	213d      	movs	r1, #61	; 0x3d
    993a:	5c52      	ldrb	r2, [r2, r1]
    993c:	701a      	strb	r2, [r3, #0]
    993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9940:	221f      	movs	r2, #31
    9942:	18ba      	adds	r2, r7, r2
    9944:	7812      	ldrb	r2, [r2, #0]
    9946:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    9948:	231f      	movs	r3, #31
    994a:	18fb      	adds	r3, r7, r3
    994c:	781b      	ldrb	r3, [r3, #0]
    994e:	2b00      	cmp	r3, #0
    9950:	d008      	beq.n	9964 <chk_mounted+0x27c>
    9952:	231f      	movs	r3, #31
    9954:	18fb      	adds	r3, r7, r3
    9956:	781b      	ldrb	r3, [r3, #0]
    9958:	221f      	movs	r2, #31
    995a:	18ba      	adds	r2, r7, r2
    995c:	7812      	ldrb	r2, [r2, #0]
    995e:	3a01      	subs	r2, #1
    9960:	4013      	ands	r3, r2
    9962:	d001      	beq.n	9968 <chk_mounted+0x280>
    9964:	230d      	movs	r3, #13
    9966:	e193      	b.n	9c90 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    9968:	6abb      	ldr	r3, [r7, #40]	; 0x28
    996a:	2242      	movs	r2, #66	; 0x42
    996c:	5c9b      	ldrb	r3, [r3, r2]
    996e:	021b      	lsls	r3, r3, #8
    9970:	b21a      	sxth	r2, r3
    9972:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9974:	2141      	movs	r1, #65	; 0x41
    9976:	5c5b      	ldrb	r3, [r3, r1]
    9978:	b21b      	sxth	r3, r3
    997a:	4313      	orrs	r3, r2
    997c:	b21b      	sxth	r3, r3
    997e:	b29a      	uxth	r2, r3
    9980:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9982:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    9984:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9986:	891b      	ldrh	r3, [r3, #8]
    9988:	220f      	movs	r2, #15
    998a:	4013      	ands	r3, r2
    998c:	b29b      	uxth	r3, r3
    998e:	2b00      	cmp	r3, #0
    9990:	d001      	beq.n	9996 <chk_mounted+0x2ae>
    9992:	230d      	movs	r3, #13
    9994:	e17c      	b.n	9c90 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    9996:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9998:	2244      	movs	r2, #68	; 0x44
    999a:	5c9b      	ldrb	r3, [r3, r2]
    999c:	021b      	lsls	r3, r3, #8
    999e:	b21a      	sxth	r2, r3
    99a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99a2:	2143      	movs	r1, #67	; 0x43
    99a4:	5c5b      	ldrb	r3, [r3, r1]
    99a6:	b21b      	sxth	r3, r3
    99a8:	4313      	orrs	r3, r2
    99aa:	b21b      	sxth	r3, r3
    99ac:	b29b      	uxth	r3, r3
    99ae:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    99b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    99b2:	2b00      	cmp	r3, #0
    99b4:	d112      	bne.n	99dc <chk_mounted+0x2f4>
    99b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99b8:	2253      	movs	r2, #83	; 0x53
    99ba:	5c9b      	ldrb	r3, [r3, r2]
    99bc:	061a      	lsls	r2, r3, #24
    99be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99c0:	2152      	movs	r1, #82	; 0x52
    99c2:	5c5b      	ldrb	r3, [r3, r1]
    99c4:	041b      	lsls	r3, r3, #16
    99c6:	4313      	orrs	r3, r2
    99c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    99ca:	2151      	movs	r1, #81	; 0x51
    99cc:	5c52      	ldrb	r2, [r2, r1]
    99ce:	0212      	lsls	r2, r2, #8
    99d0:	4313      	orrs	r3, r2
    99d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    99d4:	2150      	movs	r1, #80	; 0x50
    99d6:	5c52      	ldrb	r2, [r2, r1]
    99d8:	4313      	orrs	r3, r2
    99da:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    99dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99de:	223f      	movs	r2, #63	; 0x3f
    99e0:	5c9b      	ldrb	r3, [r3, r2]
    99e2:	021b      	lsls	r3, r3, #8
    99e4:	b21a      	sxth	r2, r3
    99e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    99e8:	213e      	movs	r1, #62	; 0x3e
    99ea:	5c5b      	ldrb	r3, [r3, r1]
    99ec:	b21b      	sxth	r3, r3
    99ee:	4313      	orrs	r3, r2
    99f0:	b21a      	sxth	r2, r3
    99f2:	231c      	movs	r3, #28
    99f4:	18fb      	adds	r3, r7, r3
    99f6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    99f8:	231c      	movs	r3, #28
    99fa:	18fb      	adds	r3, r7, r3
    99fc:	881b      	ldrh	r3, [r3, #0]
    99fe:	2b00      	cmp	r3, #0
    9a00:	d101      	bne.n	9a06 <chk_mounted+0x31e>
    9a02:	230d      	movs	r3, #13
    9a04:	e144      	b.n	9c90 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    9a06:	231c      	movs	r3, #28
    9a08:	18fb      	adds	r3, r7, r3
    9a0a:	881a      	ldrh	r2, [r3, #0]
    9a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9a0e:	18d3      	adds	r3, r2, r3
    9a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9a12:	8912      	ldrh	r2, [r2, #8]
    9a14:	0912      	lsrs	r2, r2, #4
    9a16:	b292      	uxth	r2, r2
    9a18:	189b      	adds	r3, r3, r2
    9a1a:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    9a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9a1e:	69bb      	ldr	r3, [r7, #24]
    9a20:	429a      	cmp	r2, r3
    9a22:	d201      	bcs.n	9a28 <chk_mounted+0x340>
    9a24:	230d      	movs	r3, #13
    9a26:	e133      	b.n	9c90 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    9a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9a2a:	69bb      	ldr	r3, [r7, #24]
    9a2c:	1ad2      	subs	r2, r2, r3
    9a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a30:	789b      	ldrb	r3, [r3, #2]
    9a32:	0019      	movs	r1, r3
    9a34:	4b08      	ldr	r3, [pc, #32]	; (9a58 <chk_mounted+0x370>)
    9a36:	0010      	movs	r0, r2
    9a38:	4798      	blx	r3
    9a3a:	0003      	movs	r3, r0
    9a3c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    9a3e:	697b      	ldr	r3, [r7, #20]
    9a40:	2b00      	cmp	r3, #0
    9a42:	d10b      	bne.n	9a5c <chk_mounted+0x374>
    9a44:	230d      	movs	r3, #13
    9a46:	e123      	b.n	9c90 <chk_mounted+0x5a8>
    9a48:	20000190 	.word	0x20000190
    9a4c:	00007281 	.word	0x00007281
    9a50:	000071fd 	.word	0x000071fd
    9a54:	00009615 	.word	0x00009615
    9a58:	0000b789 	.word	0x0000b789
	fmt = FS_FAT12;
    9a5c:	2347      	movs	r3, #71	; 0x47
    9a5e:	18fb      	adds	r3, r7, r3
    9a60:	2201      	movs	r2, #1
    9a62:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    9a64:	697b      	ldr	r3, [r7, #20]
    9a66:	4a8c      	ldr	r2, [pc, #560]	; (9c98 <chk_mounted+0x5b0>)
    9a68:	4293      	cmp	r3, r2
    9a6a:	d903      	bls.n	9a74 <chk_mounted+0x38c>
    9a6c:	2347      	movs	r3, #71	; 0x47
    9a6e:	18fb      	adds	r3, r7, r3
    9a70:	2202      	movs	r2, #2
    9a72:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    9a74:	697b      	ldr	r3, [r7, #20]
    9a76:	4a89      	ldr	r2, [pc, #548]	; (9c9c <chk_mounted+0x5b4>)
    9a78:	4293      	cmp	r3, r2
    9a7a:	d903      	bls.n	9a84 <chk_mounted+0x39c>
    9a7c:	2347      	movs	r3, #71	; 0x47
    9a7e:	18fb      	adds	r3, r7, r3
    9a80:	2203      	movs	r2, #3
    9a82:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    9a84:	697b      	ldr	r3, [r7, #20]
    9a86:	1c9a      	adds	r2, r3, #2
    9a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a8a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    9a8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9a8e:	69bb      	ldr	r3, [r7, #24]
    9a90:	18d2      	adds	r2, r2, r3
    9a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9a94:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    9a96:	231c      	movs	r3, #28
    9a98:	18fb      	adds	r3, r7, r3
    9a9a:	881a      	ldrh	r2, [r3, #0]
    9a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a9e:	18d2      	adds	r2, r2, r3
    9aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9aa2:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    9aa4:	2347      	movs	r3, #71	; 0x47
    9aa6:	18fb      	adds	r3, r7, r3
    9aa8:	781b      	ldrb	r3, [r3, #0]
    9aaa:	2b03      	cmp	r3, #3
    9aac:	d11e      	bne.n	9aec <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    9aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ab0:	891b      	ldrh	r3, [r3, #8]
    9ab2:	2b00      	cmp	r3, #0
    9ab4:	d001      	beq.n	9aba <chk_mounted+0x3d2>
    9ab6:	230d      	movs	r3, #13
    9ab8:	e0ea      	b.n	9c90 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    9aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9abc:	225f      	movs	r2, #95	; 0x5f
    9abe:	5c9b      	ldrb	r3, [r3, r2]
    9ac0:	061a      	lsls	r2, r3, #24
    9ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ac4:	215e      	movs	r1, #94	; 0x5e
    9ac6:	5c5b      	ldrb	r3, [r3, r1]
    9ac8:	041b      	lsls	r3, r3, #16
    9aca:	4313      	orrs	r3, r2
    9acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9ace:	215d      	movs	r1, #93	; 0x5d
    9ad0:	5c52      	ldrb	r2, [r2, r1]
    9ad2:	0212      	lsls	r2, r2, #8
    9ad4:	4313      	orrs	r3, r2
    9ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9ad8:	215c      	movs	r1, #92	; 0x5c
    9ada:	5c52      	ldrb	r2, [r2, r1]
    9adc:	431a      	orrs	r2, r3
    9ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ae0:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    9ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ae4:	699b      	ldr	r3, [r3, #24]
    9ae6:	009b      	lsls	r3, r3, #2
    9ae8:	633b      	str	r3, [r7, #48]	; 0x30
    9aea:	e020      	b.n	9b2e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    9aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9aee:	891b      	ldrh	r3, [r3, #8]
    9af0:	2b00      	cmp	r3, #0
    9af2:	d101      	bne.n	9af8 <chk_mounted+0x410>
    9af4:	230d      	movs	r3, #13
    9af6:	e0cb      	b.n	9c90 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    9af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9afa:	6a1a      	ldr	r2, [r3, #32]
    9afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9afe:	18d2      	adds	r2, r2, r3
    9b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b02:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    9b04:	2347      	movs	r3, #71	; 0x47
    9b06:	18fb      	adds	r3, r7, r3
    9b08:	781b      	ldrb	r3, [r3, #0]
    9b0a:	2b02      	cmp	r3, #2
    9b0c:	d103      	bne.n	9b16 <chk_mounted+0x42e>
    9b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b10:	699b      	ldr	r3, [r3, #24]
    9b12:	005b      	lsls	r3, r3, #1
    9b14:	e00a      	b.n	9b2c <chk_mounted+0x444>
    9b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b18:	699a      	ldr	r2, [r3, #24]
    9b1a:	0013      	movs	r3, r2
    9b1c:	005b      	lsls	r3, r3, #1
    9b1e:	189b      	adds	r3, r3, r2
    9b20:	085a      	lsrs	r2, r3, #1
    9b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b24:	699b      	ldr	r3, [r3, #24]
    9b26:	2101      	movs	r1, #1
    9b28:	400b      	ands	r3, r1
    9b2a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    9b2c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    9b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b30:	69da      	ldr	r2, [r3, #28]
    9b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9b34:	495a      	ldr	r1, [pc, #360]	; (9ca0 <chk_mounted+0x5b8>)
    9b36:	468c      	mov	ip, r1
    9b38:	4463      	add	r3, ip
    9b3a:	0a5b      	lsrs	r3, r3, #9
    9b3c:	429a      	cmp	r2, r3
    9b3e:	d201      	bcs.n	9b44 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    9b40:	230d      	movs	r3, #13
    9b42:	e0a5      	b.n	9c90 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    9b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b46:	2201      	movs	r2, #1
    9b48:	4252      	negs	r2, r2
    9b4a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    9b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b4e:	2200      	movs	r2, #0
    9b50:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    9b52:	2347      	movs	r3, #71	; 0x47
    9b54:	18fb      	adds	r3, r7, r3
    9b56:	781b      	ldrb	r3, [r3, #0]
    9b58:	2b03      	cmp	r3, #3
    9b5a:	d000      	beq.n	9b5e <chk_mounted+0x476>
    9b5c:	e082      	b.n	9c64 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    9b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b60:	2200      	movs	r2, #0
    9b62:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    9b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b66:	2261      	movs	r2, #97	; 0x61
    9b68:	5c9b      	ldrb	r3, [r3, r2]
    9b6a:	021b      	lsls	r3, r3, #8
    9b6c:	b21a      	sxth	r2, r3
    9b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b70:	2160      	movs	r1, #96	; 0x60
    9b72:	5c5b      	ldrb	r3, [r3, r1]
    9b74:	b21b      	sxth	r3, r3
    9b76:	4313      	orrs	r3, r2
    9b78:	b21b      	sxth	r3, r3
    9b7a:	b29b      	uxth	r3, r3
    9b7c:	001a      	movs	r2, r3
    9b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9b80:	18d2      	adds	r2, r2, r3
    9b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b84:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    9b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b88:	7858      	ldrb	r0, [r3, #1]
    9b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b8c:	3330      	adds	r3, #48	; 0x30
    9b8e:	0019      	movs	r1, r3
    9b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9b92:	695a      	ldr	r2, [r3, #20]
    9b94:	2301      	movs	r3, #1
    9b96:	4c43      	ldr	r4, [pc, #268]	; (9ca4 <chk_mounted+0x5bc>)
    9b98:	47a0      	blx	r4
    9b9a:	1e03      	subs	r3, r0, #0
    9b9c:	d162      	bne.n	9c64 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9ba0:	4a41      	ldr	r2, [pc, #260]	; (9ca8 <chk_mounted+0x5c0>)
    9ba2:	5c9b      	ldrb	r3, [r3, r2]
    9ba4:	021b      	lsls	r3, r3, #8
    9ba6:	b21a      	sxth	r2, r3
    9ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9baa:	4940      	ldr	r1, [pc, #256]	; (9cac <chk_mounted+0x5c4>)
    9bac:	5c5b      	ldrb	r3, [r3, r1]
    9bae:	b21b      	sxth	r3, r3
    9bb0:	4313      	orrs	r3, r2
    9bb2:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    9bb4:	4a3e      	ldr	r2, [pc, #248]	; (9cb0 <chk_mounted+0x5c8>)
    9bb6:	4293      	cmp	r3, r2
    9bb8:	d154      	bne.n	9c64 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9bbc:	2233      	movs	r2, #51	; 0x33
    9bbe:	5c9b      	ldrb	r3, [r3, r2]
    9bc0:	061a      	lsls	r2, r3, #24
    9bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9bc4:	2132      	movs	r1, #50	; 0x32
    9bc6:	5c5b      	ldrb	r3, [r3, r1]
    9bc8:	041b      	lsls	r3, r3, #16
    9bca:	4313      	orrs	r3, r2
    9bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9bce:	2131      	movs	r1, #49	; 0x31
    9bd0:	5c52      	ldrb	r2, [r2, r1]
    9bd2:	0212      	lsls	r2, r2, #8
    9bd4:	4313      	orrs	r3, r2
    9bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9bd8:	2130      	movs	r1, #48	; 0x30
    9bda:	5c52      	ldrb	r2, [r2, r1]
    9bdc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9bde:	4a35      	ldr	r2, [pc, #212]	; (9cb4 <chk_mounted+0x5cc>)
    9be0:	4293      	cmp	r3, r2
    9be2:	d13f      	bne.n	9c64 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9be6:	4a34      	ldr	r2, [pc, #208]	; (9cb8 <chk_mounted+0x5d0>)
    9be8:	5c9b      	ldrb	r3, [r3, r2]
    9bea:	061a      	lsls	r2, r3, #24
    9bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9bee:	4933      	ldr	r1, [pc, #204]	; (9cbc <chk_mounted+0x5d4>)
    9bf0:	5c5b      	ldrb	r3, [r3, r1]
    9bf2:	041b      	lsls	r3, r3, #16
    9bf4:	4313      	orrs	r3, r2
    9bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9bf8:	4931      	ldr	r1, [pc, #196]	; (9cc0 <chk_mounted+0x5d8>)
    9bfa:	5c52      	ldrb	r2, [r2, r1]
    9bfc:	0212      	lsls	r2, r2, #8
    9bfe:	4313      	orrs	r3, r2
    9c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9c02:	2285      	movs	r2, #133	; 0x85
    9c04:	0092      	lsls	r2, r2, #2
    9c06:	5c8a      	ldrb	r2, [r1, r2]
    9c08:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    9c0a:	4a2e      	ldr	r2, [pc, #184]	; (9cc4 <chk_mounted+0x5dc>)
    9c0c:	4293      	cmp	r3, r2
    9c0e:	d129      	bne.n	9c64 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    9c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c12:	4a2d      	ldr	r2, [pc, #180]	; (9cc8 <chk_mounted+0x5e0>)
    9c14:	5c9b      	ldrb	r3, [r3, r2]
    9c16:	061a      	lsls	r2, r3, #24
    9c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c1a:	492c      	ldr	r1, [pc, #176]	; (9ccc <chk_mounted+0x5e4>)
    9c1c:	5c5b      	ldrb	r3, [r3, r1]
    9c1e:	041b      	lsls	r3, r3, #16
    9c20:	4313      	orrs	r3, r2
    9c22:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9c24:	492a      	ldr	r1, [pc, #168]	; (9cd0 <chk_mounted+0x5e8>)
    9c26:	5c52      	ldrb	r2, [r2, r1]
    9c28:	0212      	lsls	r2, r2, #8
    9c2a:	4313      	orrs	r3, r2
    9c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9c2e:	2287      	movs	r2, #135	; 0x87
    9c30:	0092      	lsls	r2, r2, #2
    9c32:	5c8a      	ldrb	r2, [r1, r2]
    9c34:	431a      	orrs	r2, r3
    9c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c38:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    9c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c3c:	4a25      	ldr	r2, [pc, #148]	; (9cd4 <chk_mounted+0x5ec>)
    9c3e:	5c9b      	ldrb	r3, [r3, r2]
    9c40:	061a      	lsls	r2, r3, #24
    9c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c44:	4924      	ldr	r1, [pc, #144]	; (9cd8 <chk_mounted+0x5f0>)
    9c46:	5c5b      	ldrb	r3, [r3, r1]
    9c48:	041b      	lsls	r3, r3, #16
    9c4a:	4313      	orrs	r3, r2
    9c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9c4e:	4923      	ldr	r1, [pc, #140]	; (9cdc <chk_mounted+0x5f4>)
    9c50:	5c52      	ldrb	r2, [r2, r1]
    9c52:	0212      	lsls	r2, r2, #8
    9c54:	4313      	orrs	r3, r2
    9c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9c58:	2286      	movs	r2, #134	; 0x86
    9c5a:	0092      	lsls	r2, r2, #2
    9c5c:	5c8a      	ldrb	r2, [r1, r2]
    9c5e:	431a      	orrs	r2, r3
    9c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c62:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    9c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c66:	2247      	movs	r2, #71	; 0x47
    9c68:	18ba      	adds	r2, r7, r2
    9c6a:	7812      	ldrb	r2, [r2, #0]
    9c6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    9c6e:	4b1c      	ldr	r3, [pc, #112]	; (9ce0 <chk_mounted+0x5f8>)
    9c70:	881b      	ldrh	r3, [r3, #0]
    9c72:	3301      	adds	r3, #1
    9c74:	b29a      	uxth	r2, r3
    9c76:	4b1a      	ldr	r3, [pc, #104]	; (9ce0 <chk_mounted+0x5f8>)
    9c78:	801a      	strh	r2, [r3, #0]
    9c7a:	4b19      	ldr	r3, [pc, #100]	; (9ce0 <chk_mounted+0x5f8>)
    9c7c:	881a      	ldrh	r2, [r3, #0]
    9c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c80:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    9c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c84:	2200      	movs	r2, #0
    9c86:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    9c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9c8a:	2200      	movs	r2, #0
    9c8c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    9c8e:	2300      	movs	r3, #0
}
    9c90:	0018      	movs	r0, r3
    9c92:	46bd      	mov	sp, r7
    9c94:	b013      	add	sp, #76	; 0x4c
    9c96:	bd90      	pop	{r4, r7, pc}
    9c98:	00000ff5 	.word	0x00000ff5
    9c9c:	0000fff5 	.word	0x0000fff5
    9ca0:	000001ff 	.word	0x000001ff
    9ca4:	000072b9 	.word	0x000072b9
    9ca8:	0000022f 	.word	0x0000022f
    9cac:	0000022e 	.word	0x0000022e
    9cb0:	ffffaa55 	.word	0xffffaa55
    9cb4:	41615252 	.word	0x41615252
    9cb8:	00000217 	.word	0x00000217
    9cbc:	00000216 	.word	0x00000216
    9cc0:	00000215 	.word	0x00000215
    9cc4:	61417272 	.word	0x61417272
    9cc8:	0000021f 	.word	0x0000021f
    9ccc:	0000021e 	.word	0x0000021e
    9cd0:	0000021d 	.word	0x0000021d
    9cd4:	0000021b 	.word	0x0000021b
    9cd8:	0000021a 	.word	0x0000021a
    9cdc:	00000219 	.word	0x00000219
    9ce0:	20000194 	.word	0x20000194

00009ce4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    9ce4:	b580      	push	{r7, lr}
    9ce6:	b082      	sub	sp, #8
    9ce8:	af00      	add	r7, sp, #0
    9cea:	6078      	str	r0, [r7, #4]
    9cec:	000a      	movs	r2, r1
    9cee:	1cbb      	adds	r3, r7, #2
    9cf0:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    9cf2:	687b      	ldr	r3, [r7, #4]
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d009      	beq.n	9d0c <validate+0x28>
    9cf8:	687b      	ldr	r3, [r7, #4]
    9cfa:	781b      	ldrb	r3, [r3, #0]
    9cfc:	2b00      	cmp	r3, #0
    9cfe:	d005      	beq.n	9d0c <validate+0x28>
    9d00:	687b      	ldr	r3, [r7, #4]
    9d02:	88db      	ldrh	r3, [r3, #6]
    9d04:	1cba      	adds	r2, r7, #2
    9d06:	8812      	ldrh	r2, [r2, #0]
    9d08:	429a      	cmp	r2, r3
    9d0a:	d001      	beq.n	9d10 <validate+0x2c>
		return FR_INVALID_OBJECT;
    9d0c:	2309      	movs	r3, #9
    9d0e:	e00c      	b.n	9d2a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    9d10:	687b      	ldr	r3, [r7, #4]
    9d12:	785b      	ldrb	r3, [r3, #1]
    9d14:	0018      	movs	r0, r3
    9d16:	4b07      	ldr	r3, [pc, #28]	; (9d34 <validate+0x50>)
    9d18:	4798      	blx	r3
    9d1a:	0003      	movs	r3, r0
    9d1c:	001a      	movs	r2, r3
    9d1e:	2301      	movs	r3, #1
    9d20:	4013      	ands	r3, r2
    9d22:	d001      	beq.n	9d28 <validate+0x44>
		return FR_NOT_READY;
    9d24:	2303      	movs	r3, #3
    9d26:	e000      	b.n	9d2a <validate+0x46>

	return FR_OK;
    9d28:	2300      	movs	r3, #0
}
    9d2a:	0018      	movs	r0, r3
    9d2c:	46bd      	mov	sp, r7
    9d2e:	b002      	add	sp, #8
    9d30:	bd80      	pop	{r7, pc}
    9d32:	46c0      	nop			; (mov r8, r8)
    9d34:	00007281 	.word	0x00007281

00009d38 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    9d38:	b580      	push	{r7, lr}
    9d3a:	b084      	sub	sp, #16
    9d3c:	af00      	add	r7, sp, #0
    9d3e:	0002      	movs	r2, r0
    9d40:	6039      	str	r1, [r7, #0]
    9d42:	1dfb      	adds	r3, r7, #7
    9d44:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    9d46:	1dfb      	adds	r3, r7, #7
    9d48:	781b      	ldrb	r3, [r3, #0]
    9d4a:	2b00      	cmp	r3, #0
    9d4c:	d001      	beq.n	9d52 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    9d4e:	230b      	movs	r3, #11
    9d50:	e018      	b.n	9d84 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    9d52:	1dfb      	adds	r3, r7, #7
    9d54:	781a      	ldrb	r2, [r3, #0]
    9d56:	4b0d      	ldr	r3, [pc, #52]	; (9d8c <f_mount+0x54>)
    9d58:	0092      	lsls	r2, r2, #2
    9d5a:	58d3      	ldr	r3, [r2, r3]
    9d5c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    9d5e:	68fb      	ldr	r3, [r7, #12]
    9d60:	2b00      	cmp	r3, #0
    9d62:	d002      	beq.n	9d6a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9d64:	68fb      	ldr	r3, [r7, #12]
    9d66:	2200      	movs	r2, #0
    9d68:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    9d6a:	683b      	ldr	r3, [r7, #0]
    9d6c:	2b00      	cmp	r3, #0
    9d6e:	d002      	beq.n	9d76 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    9d70:	683b      	ldr	r3, [r7, #0]
    9d72:	2200      	movs	r2, #0
    9d74:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    9d76:	1dfb      	adds	r3, r7, #7
    9d78:	781a      	ldrb	r2, [r3, #0]
    9d7a:	4b04      	ldr	r3, [pc, #16]	; (9d8c <f_mount+0x54>)
    9d7c:	0092      	lsls	r2, r2, #2
    9d7e:	6839      	ldr	r1, [r7, #0]
    9d80:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    9d82:	2300      	movs	r3, #0
}
    9d84:	0018      	movs	r0, r3
    9d86:	46bd      	mov	sp, r7
    9d88:	b004      	add	sp, #16
    9d8a:	bd80      	pop	{r7, pc}
    9d8c:	20000190 	.word	0x20000190

00009d90 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9d90:	b590      	push	{r4, r7, lr}
    9d92:	4ce5      	ldr	r4, [pc, #916]	; (a128 <f_open+0x398>)
    9d94:	44a5      	add	sp, r4
    9d96:	af00      	add	r7, sp, #0
    9d98:	60f8      	str	r0, [r7, #12]
    9d9a:	60b9      	str	r1, [r7, #8]
    9d9c:	4be3      	ldr	r3, [pc, #908]	; (a12c <f_open+0x39c>)
    9d9e:	2194      	movs	r1, #148	; 0x94
    9da0:	0089      	lsls	r1, r1, #2
    9da2:	468c      	mov	ip, r1
    9da4:	44bc      	add	ip, r7
    9da6:	4463      	add	r3, ip
    9da8:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    9daa:	68fb      	ldr	r3, [r7, #12]
    9dac:	2200      	movs	r2, #0
    9dae:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    9db0:	4bde      	ldr	r3, [pc, #888]	; (a12c <f_open+0x39c>)
    9db2:	2294      	movs	r2, #148	; 0x94
    9db4:	0092      	lsls	r2, r2, #2
    9db6:	4694      	mov	ip, r2
    9db8:	44bc      	add	ip, r7
    9dba:	4463      	add	r3, ip
    9dbc:	4adb      	ldr	r2, [pc, #876]	; (a12c <f_open+0x39c>)
    9dbe:	2194      	movs	r1, #148	; 0x94
    9dc0:	0089      	lsls	r1, r1, #2
    9dc2:	468c      	mov	ip, r1
    9dc4:	44bc      	add	ip, r7
    9dc6:	4462      	add	r2, ip
    9dc8:	7812      	ldrb	r2, [r2, #0]
    9dca:	211f      	movs	r1, #31
    9dcc:	400a      	ands	r2, r1
    9dce:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    9dd0:	4bd6      	ldr	r3, [pc, #856]	; (a12c <f_open+0x39c>)
    9dd2:	2294      	movs	r2, #148	; 0x94
    9dd4:	0092      	lsls	r2, r2, #2
    9dd6:	4694      	mov	ip, r2
    9dd8:	44bc      	add	ip, r7
    9dda:	4463      	add	r3, ip
    9ddc:	781b      	ldrb	r3, [r3, #0]
    9dde:	2201      	movs	r2, #1
    9de0:	4393      	bics	r3, r2
    9de2:	b2da      	uxtb	r2, r3
    9de4:	4bd2      	ldr	r3, [pc, #840]	; (a130 <f_open+0x3a0>)
    9de6:	18fc      	adds	r4, r7, r3
    9de8:	2387      	movs	r3, #135	; 0x87
    9dea:	009b      	lsls	r3, r3, #2
    9dec:	18f9      	adds	r1, r7, r3
    9dee:	2308      	movs	r3, #8
    9df0:	18fb      	adds	r3, r7, r3
    9df2:	0018      	movs	r0, r3
    9df4:	4bcf      	ldr	r3, [pc, #828]	; (a134 <f_open+0x3a4>)
    9df6:	4798      	blx	r3
    9df8:	0003      	movs	r3, r0
    9dfa:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    9dfc:	2387      	movs	r3, #135	; 0x87
    9dfe:	009b      	lsls	r3, r3, #2
    9e00:	18fb      	adds	r3, r7, r3
    9e02:	2284      	movs	r2, #132	; 0x84
    9e04:	0092      	lsls	r2, r2, #2
    9e06:	18ba      	adds	r2, r7, r2
    9e08:	619a      	str	r2, [r3, #24]
    9e0a:	2387      	movs	r3, #135	; 0x87
    9e0c:	009b      	lsls	r3, r3, #2
    9e0e:	18fb      	adds	r3, r7, r3
    9e10:	2210      	movs	r2, #16
    9e12:	18ba      	adds	r2, r7, r2
    9e14:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    9e16:	4bc6      	ldr	r3, [pc, #792]	; (a130 <f_open+0x3a0>)
    9e18:	18fb      	adds	r3, r7, r3
    9e1a:	781b      	ldrb	r3, [r3, #0]
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	d10b      	bne.n	9e38 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    9e20:	68ba      	ldr	r2, [r7, #8]
    9e22:	4bc3      	ldr	r3, [pc, #780]	; (a130 <f_open+0x3a0>)
    9e24:	18fc      	adds	r4, r7, r3
    9e26:	2387      	movs	r3, #135	; 0x87
    9e28:	009b      	lsls	r3, r3, #2
    9e2a:	18fb      	adds	r3, r7, r3
    9e2c:	0011      	movs	r1, r2
    9e2e:	0018      	movs	r0, r3
    9e30:	4bc1      	ldr	r3, [pc, #772]	; (a138 <f_open+0x3a8>)
    9e32:	4798      	blx	r3
    9e34:	0003      	movs	r3, r0
    9e36:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    9e38:	2387      	movs	r3, #135	; 0x87
    9e3a:	009b      	lsls	r3, r3, #2
    9e3c:	18fb      	adds	r3, r7, r3
    9e3e:	695b      	ldr	r3, [r3, #20]
    9e40:	2292      	movs	r2, #146	; 0x92
    9e42:	0092      	lsls	r2, r2, #2
    9e44:	18ba      	adds	r2, r7, r2
    9e46:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    9e48:	4bb9      	ldr	r3, [pc, #740]	; (a130 <f_open+0x3a0>)
    9e4a:	18fb      	adds	r3, r7, r3
    9e4c:	781b      	ldrb	r3, [r3, #0]
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d109      	bne.n	9e66 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9e52:	2392      	movs	r3, #146	; 0x92
    9e54:	009b      	lsls	r3, r3, #2
    9e56:	18fb      	adds	r3, r7, r3
    9e58:	681b      	ldr	r3, [r3, #0]
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d103      	bne.n	9e66 <f_open+0xd6>
			res = FR_INVALID_NAME;
    9e5e:	4bb4      	ldr	r3, [pc, #720]	; (a130 <f_open+0x3a0>)
    9e60:	18fb      	adds	r3, r7, r3
    9e62:	2206      	movs	r2, #6
    9e64:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    9e66:	4bb1      	ldr	r3, [pc, #708]	; (a12c <f_open+0x39c>)
    9e68:	2294      	movs	r2, #148	; 0x94
    9e6a:	0092      	lsls	r2, r2, #2
    9e6c:	4694      	mov	ip, r2
    9e6e:	44bc      	add	ip, r7
    9e70:	4463      	add	r3, ip
    9e72:	781b      	ldrb	r3, [r3, #0]
    9e74:	221c      	movs	r2, #28
    9e76:	4013      	ands	r3, r2
    9e78:	d100      	bne.n	9e7c <f_open+0xec>
    9e7a:	e141      	b.n	a100 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9e7c:	4bac      	ldr	r3, [pc, #688]	; (a130 <f_open+0x3a0>)
    9e7e:	18fb      	adds	r3, r7, r3
    9e80:	781b      	ldrb	r3, [r3, #0]
    9e82:	2b00      	cmp	r3, #0
    9e84:	d027      	beq.n	9ed6 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    9e86:	4baa      	ldr	r3, [pc, #680]	; (a130 <f_open+0x3a0>)
    9e88:	18fb      	adds	r3, r7, r3
    9e8a:	781b      	ldrb	r3, [r3, #0]
    9e8c:	2b04      	cmp	r3, #4
    9e8e:	d109      	bne.n	9ea4 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9e90:	4ba7      	ldr	r3, [pc, #668]	; (a130 <f_open+0x3a0>)
    9e92:	18fc      	adds	r4, r7, r3
    9e94:	2387      	movs	r3, #135	; 0x87
    9e96:	009b      	lsls	r3, r3, #2
    9e98:	18fb      	adds	r3, r7, r3
    9e9a:	0018      	movs	r0, r3
    9e9c:	4ba7      	ldr	r3, [pc, #668]	; (a13c <f_open+0x3ac>)
    9e9e:	4798      	blx	r3
    9ea0:	0003      	movs	r3, r0
    9ea2:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9ea4:	4ba1      	ldr	r3, [pc, #644]	; (a12c <f_open+0x39c>)
    9ea6:	2294      	movs	r2, #148	; 0x94
    9ea8:	0092      	lsls	r2, r2, #2
    9eaa:	4694      	mov	ip, r2
    9eac:	44bc      	add	ip, r7
    9eae:	4463      	add	r3, ip
    9eb0:	4a9e      	ldr	r2, [pc, #632]	; (a12c <f_open+0x39c>)
    9eb2:	2194      	movs	r1, #148	; 0x94
    9eb4:	0089      	lsls	r1, r1, #2
    9eb6:	468c      	mov	ip, r1
    9eb8:	44bc      	add	ip, r7
    9eba:	4462      	add	r2, ip
    9ebc:	7812      	ldrb	r2, [r2, #0]
    9ebe:	2108      	movs	r1, #8
    9ec0:	430a      	orrs	r2, r1
    9ec2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    9ec4:	2387      	movs	r3, #135	; 0x87
    9ec6:	009b      	lsls	r3, r3, #2
    9ec8:	18fb      	adds	r3, r7, r3
    9eca:	695b      	ldr	r3, [r3, #20]
    9ecc:	2292      	movs	r2, #146	; 0x92
    9ece:	0092      	lsls	r2, r2, #2
    9ed0:	18ba      	adds	r2, r7, r2
    9ed2:	6013      	str	r3, [r2, #0]
    9ed4:	e01c      	b.n	9f10 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    9ed6:	2392      	movs	r3, #146	; 0x92
    9ed8:	009b      	lsls	r3, r3, #2
    9eda:	18fb      	adds	r3, r7, r3
    9edc:	681b      	ldr	r3, [r3, #0]
    9ede:	330b      	adds	r3, #11
    9ee0:	781b      	ldrb	r3, [r3, #0]
    9ee2:	001a      	movs	r2, r3
    9ee4:	2311      	movs	r3, #17
    9ee6:	4013      	ands	r3, r2
    9ee8:	d004      	beq.n	9ef4 <f_open+0x164>
				res = FR_DENIED;
    9eea:	4b91      	ldr	r3, [pc, #580]	; (a130 <f_open+0x3a0>)
    9eec:	18fb      	adds	r3, r7, r3
    9eee:	2207      	movs	r2, #7
    9ef0:	701a      	strb	r2, [r3, #0]
    9ef2:	e00d      	b.n	9f10 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    9ef4:	4b8d      	ldr	r3, [pc, #564]	; (a12c <f_open+0x39c>)
    9ef6:	2294      	movs	r2, #148	; 0x94
    9ef8:	0092      	lsls	r2, r2, #2
    9efa:	4694      	mov	ip, r2
    9efc:	44bc      	add	ip, r7
    9efe:	4463      	add	r3, ip
    9f00:	781b      	ldrb	r3, [r3, #0]
    9f02:	2204      	movs	r2, #4
    9f04:	4013      	ands	r3, r2
    9f06:	d003      	beq.n	9f10 <f_open+0x180>
					res = FR_EXIST;
    9f08:	4b89      	ldr	r3, [pc, #548]	; (a130 <f_open+0x3a0>)
    9f0a:	18fb      	adds	r3, r7, r3
    9f0c:	2208      	movs	r2, #8
    9f0e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    9f10:	4b87      	ldr	r3, [pc, #540]	; (a130 <f_open+0x3a0>)
    9f12:	18fb      	adds	r3, r7, r3
    9f14:	781b      	ldrb	r3, [r3, #0]
    9f16:	2b00      	cmp	r3, #0
    9f18:	d000      	beq.n	9f1c <f_open+0x18c>
    9f1a:	e12f      	b.n	a17c <f_open+0x3ec>
    9f1c:	4b83      	ldr	r3, [pc, #524]	; (a12c <f_open+0x39c>)
    9f1e:	2294      	movs	r2, #148	; 0x94
    9f20:	0092      	lsls	r2, r2, #2
    9f22:	4694      	mov	ip, r2
    9f24:	44bc      	add	ip, r7
    9f26:	4463      	add	r3, ip
    9f28:	781b      	ldrb	r3, [r3, #0]
    9f2a:	2208      	movs	r2, #8
    9f2c:	4013      	ands	r3, r2
    9f2e:	d100      	bne.n	9f32 <f_open+0x1a2>
    9f30:	e124      	b.n	a17c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    9f32:	4b83      	ldr	r3, [pc, #524]	; (a140 <f_open+0x3b0>)
    9f34:	4798      	blx	r3
    9f36:	0003      	movs	r3, r0
    9f38:	2291      	movs	r2, #145	; 0x91
    9f3a:	0092      	lsls	r2, r2, #2
    9f3c:	18ba      	adds	r2, r7, r2
    9f3e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    9f40:	2392      	movs	r3, #146	; 0x92
    9f42:	009b      	lsls	r3, r3, #2
    9f44:	18fb      	adds	r3, r7, r3
    9f46:	681b      	ldr	r3, [r3, #0]
    9f48:	330e      	adds	r3, #14
    9f4a:	2291      	movs	r2, #145	; 0x91
    9f4c:	0092      	lsls	r2, r2, #2
    9f4e:	18ba      	adds	r2, r7, r2
    9f50:	6812      	ldr	r2, [r2, #0]
    9f52:	b2d2      	uxtb	r2, r2
    9f54:	701a      	strb	r2, [r3, #0]
    9f56:	2392      	movs	r3, #146	; 0x92
    9f58:	009b      	lsls	r3, r3, #2
    9f5a:	18fb      	adds	r3, r7, r3
    9f5c:	681b      	ldr	r3, [r3, #0]
    9f5e:	330f      	adds	r3, #15
    9f60:	2291      	movs	r2, #145	; 0x91
    9f62:	0092      	lsls	r2, r2, #2
    9f64:	18ba      	adds	r2, r7, r2
    9f66:	6812      	ldr	r2, [r2, #0]
    9f68:	b292      	uxth	r2, r2
    9f6a:	0a12      	lsrs	r2, r2, #8
    9f6c:	b292      	uxth	r2, r2
    9f6e:	b2d2      	uxtb	r2, r2
    9f70:	701a      	strb	r2, [r3, #0]
    9f72:	2392      	movs	r3, #146	; 0x92
    9f74:	009b      	lsls	r3, r3, #2
    9f76:	18fb      	adds	r3, r7, r3
    9f78:	681b      	ldr	r3, [r3, #0]
    9f7a:	3310      	adds	r3, #16
    9f7c:	2291      	movs	r2, #145	; 0x91
    9f7e:	0092      	lsls	r2, r2, #2
    9f80:	18ba      	adds	r2, r7, r2
    9f82:	6812      	ldr	r2, [r2, #0]
    9f84:	0c12      	lsrs	r2, r2, #16
    9f86:	b2d2      	uxtb	r2, r2
    9f88:	701a      	strb	r2, [r3, #0]
    9f8a:	2392      	movs	r3, #146	; 0x92
    9f8c:	009b      	lsls	r3, r3, #2
    9f8e:	18fb      	adds	r3, r7, r3
    9f90:	681b      	ldr	r3, [r3, #0]
    9f92:	3311      	adds	r3, #17
    9f94:	2291      	movs	r2, #145	; 0x91
    9f96:	0092      	lsls	r2, r2, #2
    9f98:	18ba      	adds	r2, r7, r2
    9f9a:	6812      	ldr	r2, [r2, #0]
    9f9c:	0e12      	lsrs	r2, r2, #24
    9f9e:	b2d2      	uxtb	r2, r2
    9fa0:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9fa2:	2392      	movs	r3, #146	; 0x92
    9fa4:	009b      	lsls	r3, r3, #2
    9fa6:	18fb      	adds	r3, r7, r3
    9fa8:	681b      	ldr	r3, [r3, #0]
    9faa:	330b      	adds	r3, #11
    9fac:	2200      	movs	r2, #0
    9fae:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9fb0:	2392      	movs	r3, #146	; 0x92
    9fb2:	009b      	lsls	r3, r3, #2
    9fb4:	18fb      	adds	r3, r7, r3
    9fb6:	681b      	ldr	r3, [r3, #0]
    9fb8:	331c      	adds	r3, #28
    9fba:	2200      	movs	r2, #0
    9fbc:	701a      	strb	r2, [r3, #0]
    9fbe:	2392      	movs	r3, #146	; 0x92
    9fc0:	009b      	lsls	r3, r3, #2
    9fc2:	18fb      	adds	r3, r7, r3
    9fc4:	681b      	ldr	r3, [r3, #0]
    9fc6:	331d      	adds	r3, #29
    9fc8:	2200      	movs	r2, #0
    9fca:	701a      	strb	r2, [r3, #0]
    9fcc:	2392      	movs	r3, #146	; 0x92
    9fce:	009b      	lsls	r3, r3, #2
    9fd0:	18fb      	adds	r3, r7, r3
    9fd2:	681b      	ldr	r3, [r3, #0]
    9fd4:	331e      	adds	r3, #30
    9fd6:	2200      	movs	r2, #0
    9fd8:	701a      	strb	r2, [r3, #0]
    9fda:	2392      	movs	r3, #146	; 0x92
    9fdc:	009b      	lsls	r3, r3, #2
    9fde:	18fb      	adds	r3, r7, r3
    9fe0:	681b      	ldr	r3, [r3, #0]
    9fe2:	331f      	adds	r3, #31
    9fe4:	2200      	movs	r2, #0
    9fe6:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    9fe8:	2392      	movs	r3, #146	; 0x92
    9fea:	009b      	lsls	r3, r3, #2
    9fec:	18fb      	adds	r3, r7, r3
    9fee:	681b      	ldr	r3, [r3, #0]
    9ff0:	3315      	adds	r3, #21
    9ff2:	781b      	ldrb	r3, [r3, #0]
    9ff4:	021b      	lsls	r3, r3, #8
    9ff6:	b21a      	sxth	r2, r3
    9ff8:	2392      	movs	r3, #146	; 0x92
    9ffa:	009b      	lsls	r3, r3, #2
    9ffc:	18fb      	adds	r3, r7, r3
    9ffe:	681b      	ldr	r3, [r3, #0]
    a000:	3314      	adds	r3, #20
    a002:	781b      	ldrb	r3, [r3, #0]
    a004:	b21b      	sxth	r3, r3
    a006:	4313      	orrs	r3, r2
    a008:	b21b      	sxth	r3, r3
    a00a:	b29b      	uxth	r3, r3
    a00c:	041b      	lsls	r3, r3, #16
    a00e:	2292      	movs	r2, #146	; 0x92
    a010:	0092      	lsls	r2, r2, #2
    a012:	18ba      	adds	r2, r7, r2
    a014:	6812      	ldr	r2, [r2, #0]
    a016:	321b      	adds	r2, #27
    a018:	7812      	ldrb	r2, [r2, #0]
    a01a:	0212      	lsls	r2, r2, #8
    a01c:	b211      	sxth	r1, r2
    a01e:	2292      	movs	r2, #146	; 0x92
    a020:	0092      	lsls	r2, r2, #2
    a022:	18ba      	adds	r2, r7, r2
    a024:	6812      	ldr	r2, [r2, #0]
    a026:	321a      	adds	r2, #26
    a028:	7812      	ldrb	r2, [r2, #0]
    a02a:	b212      	sxth	r2, r2
    a02c:	430a      	orrs	r2, r1
    a02e:	b212      	sxth	r2, r2
    a030:	b292      	uxth	r2, r2
    a032:	4313      	orrs	r3, r2
    a034:	2290      	movs	r2, #144	; 0x90
    a036:	0092      	lsls	r2, r2, #2
    a038:	18ba      	adds	r2, r7, r2
    a03a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    a03c:	2392      	movs	r3, #146	; 0x92
    a03e:	009b      	lsls	r3, r3, #2
    a040:	18fb      	adds	r3, r7, r3
    a042:	681b      	ldr	r3, [r3, #0]
    a044:	331a      	adds	r3, #26
    a046:	2200      	movs	r2, #0
    a048:	701a      	strb	r2, [r3, #0]
    a04a:	2392      	movs	r3, #146	; 0x92
    a04c:	009b      	lsls	r3, r3, #2
    a04e:	18fb      	adds	r3, r7, r3
    a050:	681b      	ldr	r3, [r3, #0]
    a052:	331b      	adds	r3, #27
    a054:	2200      	movs	r2, #0
    a056:	701a      	strb	r2, [r3, #0]
    a058:	2392      	movs	r3, #146	; 0x92
    a05a:	009b      	lsls	r3, r3, #2
    a05c:	18fb      	adds	r3, r7, r3
    a05e:	681b      	ldr	r3, [r3, #0]
    a060:	3314      	adds	r3, #20
    a062:	2200      	movs	r2, #0
    a064:	701a      	strb	r2, [r3, #0]
    a066:	2392      	movs	r3, #146	; 0x92
    a068:	009b      	lsls	r3, r3, #2
    a06a:	18fb      	adds	r3, r7, r3
    a06c:	681b      	ldr	r3, [r3, #0]
    a06e:	3315      	adds	r3, #21
    a070:	2200      	movs	r2, #0
    a072:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    a074:	2387      	movs	r3, #135	; 0x87
    a076:	009b      	lsls	r3, r3, #2
    a078:	18fb      	adds	r3, r7, r3
    a07a:	681b      	ldr	r3, [r3, #0]
    a07c:	2201      	movs	r2, #1
    a07e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    a080:	2390      	movs	r3, #144	; 0x90
    a082:	009b      	lsls	r3, r3, #2
    a084:	18fb      	adds	r3, r7, r3
    a086:	681b      	ldr	r3, [r3, #0]
    a088:	2b00      	cmp	r3, #0
    a08a:	d100      	bne.n	a08e <f_open+0x2fe>
    a08c:	e076      	b.n	a17c <f_open+0x3ec>
				dw = dj.fs->winsect;
    a08e:	2387      	movs	r3, #135	; 0x87
    a090:	009b      	lsls	r3, r3, #2
    a092:	18fb      	adds	r3, r7, r3
    a094:	681b      	ldr	r3, [r3, #0]
    a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a098:	2291      	movs	r2, #145	; 0x91
    a09a:	0092      	lsls	r2, r2, #2
    a09c:	18ba      	adds	r2, r7, r2
    a09e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    a0a0:	2387      	movs	r3, #135	; 0x87
    a0a2:	009b      	lsls	r3, r3, #2
    a0a4:	18fb      	adds	r3, r7, r3
    a0a6:	681b      	ldr	r3, [r3, #0]
    a0a8:	4a21      	ldr	r2, [pc, #132]	; (a130 <f_open+0x3a0>)
    a0aa:	18bc      	adds	r4, r7, r2
    a0ac:	2290      	movs	r2, #144	; 0x90
    a0ae:	0092      	lsls	r2, r2, #2
    a0b0:	18ba      	adds	r2, r7, r2
    a0b2:	6812      	ldr	r2, [r2, #0]
    a0b4:	0011      	movs	r1, r2
    a0b6:	0018      	movs	r0, r3
    a0b8:	4b22      	ldr	r3, [pc, #136]	; (a144 <f_open+0x3b4>)
    a0ba:	4798      	blx	r3
    a0bc:	0003      	movs	r3, r0
    a0be:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    a0c0:	4b1b      	ldr	r3, [pc, #108]	; (a130 <f_open+0x3a0>)
    a0c2:	18fb      	adds	r3, r7, r3
    a0c4:	781b      	ldrb	r3, [r3, #0]
    a0c6:	2b00      	cmp	r3, #0
    a0c8:	d158      	bne.n	a17c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    a0ca:	2387      	movs	r3, #135	; 0x87
    a0cc:	009b      	lsls	r3, r3, #2
    a0ce:	18fb      	adds	r3, r7, r3
    a0d0:	681b      	ldr	r3, [r3, #0]
    a0d2:	2290      	movs	r2, #144	; 0x90
    a0d4:	0092      	lsls	r2, r2, #2
    a0d6:	18ba      	adds	r2, r7, r2
    a0d8:	6812      	ldr	r2, [r2, #0]
    a0da:	3a01      	subs	r2, #1
    a0dc:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    a0de:	2387      	movs	r3, #135	; 0x87
    a0e0:	009b      	lsls	r3, r3, #2
    a0e2:	18fb      	adds	r3, r7, r3
    a0e4:	681b      	ldr	r3, [r3, #0]
    a0e6:	4a12      	ldr	r2, [pc, #72]	; (a130 <f_open+0x3a0>)
    a0e8:	18bc      	adds	r4, r7, r2
    a0ea:	2291      	movs	r2, #145	; 0x91
    a0ec:	0092      	lsls	r2, r2, #2
    a0ee:	18ba      	adds	r2, r7, r2
    a0f0:	6812      	ldr	r2, [r2, #0]
    a0f2:	0011      	movs	r1, r2
    a0f4:	0018      	movs	r0, r3
    a0f6:	4b14      	ldr	r3, [pc, #80]	; (a148 <f_open+0x3b8>)
    a0f8:	4798      	blx	r3
    a0fa:	0003      	movs	r3, r0
    a0fc:	7023      	strb	r3, [r4, #0]
    a0fe:	e03d      	b.n	a17c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    a100:	4b0b      	ldr	r3, [pc, #44]	; (a130 <f_open+0x3a0>)
    a102:	18fb      	adds	r3, r7, r3
    a104:	781b      	ldrb	r3, [r3, #0]
    a106:	2b00      	cmp	r3, #0
    a108:	d138      	bne.n	a17c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    a10a:	2392      	movs	r3, #146	; 0x92
    a10c:	009b      	lsls	r3, r3, #2
    a10e:	18fb      	adds	r3, r7, r3
    a110:	681b      	ldr	r3, [r3, #0]
    a112:	330b      	adds	r3, #11
    a114:	781b      	ldrb	r3, [r3, #0]
    a116:	001a      	movs	r2, r3
    a118:	2310      	movs	r3, #16
    a11a:	4013      	ands	r3, r2
    a11c:	d016      	beq.n	a14c <f_open+0x3bc>
				res = FR_NO_FILE;
    a11e:	4b04      	ldr	r3, [pc, #16]	; (a130 <f_open+0x3a0>)
    a120:	18fb      	adds	r3, r7, r3
    a122:	2204      	movs	r2, #4
    a124:	701a      	strb	r2, [r3, #0]
    a126:	e029      	b.n	a17c <f_open+0x3ec>
    a128:	fffffdac 	.word	0xfffffdac
    a12c:	fffffdb7 	.word	0xfffffdb7
    a130:	0000024f 	.word	0x0000024f
    a134:	000096e9 	.word	0x000096e9
    a138:	000094dd 	.word	0x000094dd
    a13c:	00008a11 	.word	0x00008a11
    a140:	00007561 	.word	0x00007561
    a144:	00007ce5 	.word	0x00007ce5
    a148:	000076a5 	.word	0x000076a5
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    a14c:	4b5a      	ldr	r3, [pc, #360]	; (a2b8 <f_open+0x528>)
    a14e:	2294      	movs	r2, #148	; 0x94
    a150:	0092      	lsls	r2, r2, #2
    a152:	4694      	mov	ip, r2
    a154:	44bc      	add	ip, r7
    a156:	4463      	add	r3, ip
    a158:	781b      	ldrb	r3, [r3, #0]
    a15a:	2202      	movs	r2, #2
    a15c:	4013      	ands	r3, r2
    a15e:	d00d      	beq.n	a17c <f_open+0x3ec>
    a160:	2392      	movs	r3, #146	; 0x92
    a162:	009b      	lsls	r3, r3, #2
    a164:	18fb      	adds	r3, r7, r3
    a166:	681b      	ldr	r3, [r3, #0]
    a168:	330b      	adds	r3, #11
    a16a:	781b      	ldrb	r3, [r3, #0]
    a16c:	001a      	movs	r2, r3
    a16e:	2301      	movs	r3, #1
    a170:	4013      	ands	r3, r2
    a172:	d003      	beq.n	a17c <f_open+0x3ec>
					res = FR_DENIED;
    a174:	4b51      	ldr	r3, [pc, #324]	; (a2bc <f_open+0x52c>)
    a176:	18fb      	adds	r3, r7, r3
    a178:	2207      	movs	r2, #7
    a17a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    a17c:	4b4f      	ldr	r3, [pc, #316]	; (a2bc <f_open+0x52c>)
    a17e:	18fb      	adds	r3, r7, r3
    a180:	781b      	ldrb	r3, [r3, #0]
    a182:	2b00      	cmp	r3, #0
    a184:	d126      	bne.n	a1d4 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    a186:	4b4c      	ldr	r3, [pc, #304]	; (a2b8 <f_open+0x528>)
    a188:	2294      	movs	r2, #148	; 0x94
    a18a:	0092      	lsls	r2, r2, #2
    a18c:	4694      	mov	ip, r2
    a18e:	44bc      	add	ip, r7
    a190:	4463      	add	r3, ip
    a192:	781b      	ldrb	r3, [r3, #0]
    a194:	2208      	movs	r2, #8
    a196:	4013      	ands	r3, r2
    a198:	d00f      	beq.n	a1ba <f_open+0x42a>
			mode |= FA__WRITTEN;
    a19a:	4b47      	ldr	r3, [pc, #284]	; (a2b8 <f_open+0x528>)
    a19c:	2294      	movs	r2, #148	; 0x94
    a19e:	0092      	lsls	r2, r2, #2
    a1a0:	4694      	mov	ip, r2
    a1a2:	44bc      	add	ip, r7
    a1a4:	4463      	add	r3, ip
    a1a6:	4a44      	ldr	r2, [pc, #272]	; (a2b8 <f_open+0x528>)
    a1a8:	2194      	movs	r1, #148	; 0x94
    a1aa:	0089      	lsls	r1, r1, #2
    a1ac:	468c      	mov	ip, r1
    a1ae:	44bc      	add	ip, r7
    a1b0:	4462      	add	r2, ip
    a1b2:	7812      	ldrb	r2, [r2, #0]
    a1b4:	2120      	movs	r1, #32
    a1b6:	430a      	orrs	r2, r1
    a1b8:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    a1ba:	2387      	movs	r3, #135	; 0x87
    a1bc:	009b      	lsls	r3, r3, #2
    a1be:	18fb      	adds	r3, r7, r3
    a1c0:	681b      	ldr	r3, [r3, #0]
    a1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a1c4:	68fb      	ldr	r3, [r7, #12]
    a1c6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    a1c8:	68fb      	ldr	r3, [r7, #12]
    a1ca:	2292      	movs	r2, #146	; 0x92
    a1cc:	0092      	lsls	r2, r2, #2
    a1ce:	18ba      	adds	r2, r7, r2
    a1d0:	6812      	ldr	r2, [r2, #0]
    a1d2:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    a1d4:	4b39      	ldr	r3, [pc, #228]	; (a2bc <f_open+0x52c>)
    a1d6:	18fb      	adds	r3, r7, r3
    a1d8:	781b      	ldrb	r3, [r3, #0]
    a1da:	2b00      	cmp	r3, #0
    a1dc:	d163      	bne.n	a2a6 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    a1de:	68fb      	ldr	r3, [r7, #12]
    a1e0:	4a35      	ldr	r2, [pc, #212]	; (a2b8 <f_open+0x528>)
    a1e2:	2194      	movs	r1, #148	; 0x94
    a1e4:	0089      	lsls	r1, r1, #2
    a1e6:	468c      	mov	ip, r1
    a1e8:	44bc      	add	ip, r7
    a1ea:	4462      	add	r2, ip
    a1ec:	7812      	ldrb	r2, [r2, #0]
    a1ee:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    a1f0:	2392      	movs	r3, #146	; 0x92
    a1f2:	009b      	lsls	r3, r3, #2
    a1f4:	18fb      	adds	r3, r7, r3
    a1f6:	681b      	ldr	r3, [r3, #0]
    a1f8:	3315      	adds	r3, #21
    a1fa:	781b      	ldrb	r3, [r3, #0]
    a1fc:	021b      	lsls	r3, r3, #8
    a1fe:	b21a      	sxth	r2, r3
    a200:	2392      	movs	r3, #146	; 0x92
    a202:	009b      	lsls	r3, r3, #2
    a204:	18fb      	adds	r3, r7, r3
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	3314      	adds	r3, #20
    a20a:	781b      	ldrb	r3, [r3, #0]
    a20c:	b21b      	sxth	r3, r3
    a20e:	4313      	orrs	r3, r2
    a210:	b21b      	sxth	r3, r3
    a212:	b29b      	uxth	r3, r3
    a214:	041b      	lsls	r3, r3, #16
    a216:	2292      	movs	r2, #146	; 0x92
    a218:	0092      	lsls	r2, r2, #2
    a21a:	18ba      	adds	r2, r7, r2
    a21c:	6812      	ldr	r2, [r2, #0]
    a21e:	321b      	adds	r2, #27
    a220:	7812      	ldrb	r2, [r2, #0]
    a222:	0212      	lsls	r2, r2, #8
    a224:	b211      	sxth	r1, r2
    a226:	2292      	movs	r2, #146	; 0x92
    a228:	0092      	lsls	r2, r2, #2
    a22a:	18ba      	adds	r2, r7, r2
    a22c:	6812      	ldr	r2, [r2, #0]
    a22e:	321a      	adds	r2, #26
    a230:	7812      	ldrb	r2, [r2, #0]
    a232:	b212      	sxth	r2, r2
    a234:	430a      	orrs	r2, r1
    a236:	b212      	sxth	r2, r2
    a238:	b292      	uxth	r2, r2
    a23a:	431a      	orrs	r2, r3
    a23c:	68fb      	ldr	r3, [r7, #12]
    a23e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    a240:	2392      	movs	r3, #146	; 0x92
    a242:	009b      	lsls	r3, r3, #2
    a244:	18fb      	adds	r3, r7, r3
    a246:	681b      	ldr	r3, [r3, #0]
    a248:	331f      	adds	r3, #31
    a24a:	781b      	ldrb	r3, [r3, #0]
    a24c:	061a      	lsls	r2, r3, #24
    a24e:	2392      	movs	r3, #146	; 0x92
    a250:	009b      	lsls	r3, r3, #2
    a252:	18fb      	adds	r3, r7, r3
    a254:	681b      	ldr	r3, [r3, #0]
    a256:	331e      	adds	r3, #30
    a258:	781b      	ldrb	r3, [r3, #0]
    a25a:	041b      	lsls	r3, r3, #16
    a25c:	4313      	orrs	r3, r2
    a25e:	2292      	movs	r2, #146	; 0x92
    a260:	0092      	lsls	r2, r2, #2
    a262:	18ba      	adds	r2, r7, r2
    a264:	6812      	ldr	r2, [r2, #0]
    a266:	321d      	adds	r2, #29
    a268:	7812      	ldrb	r2, [r2, #0]
    a26a:	0212      	lsls	r2, r2, #8
    a26c:	4313      	orrs	r3, r2
    a26e:	2292      	movs	r2, #146	; 0x92
    a270:	0092      	lsls	r2, r2, #2
    a272:	18ba      	adds	r2, r7, r2
    a274:	6812      	ldr	r2, [r2, #0]
    a276:	321c      	adds	r2, #28
    a278:	7812      	ldrb	r2, [r2, #0]
    a27a:	431a      	orrs	r2, r3
    a27c:	68fb      	ldr	r3, [r7, #12]
    a27e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    a280:	68fb      	ldr	r3, [r7, #12]
    a282:	2200      	movs	r2, #0
    a284:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    a286:	68fb      	ldr	r3, [r7, #12]
    a288:	2200      	movs	r2, #0
    a28a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    a28c:	2387      	movs	r3, #135	; 0x87
    a28e:	009b      	lsls	r3, r3, #2
    a290:	18fb      	adds	r3, r7, r3
    a292:	681a      	ldr	r2, [r3, #0]
    a294:	68fb      	ldr	r3, [r7, #12]
    a296:	601a      	str	r2, [r3, #0]
    a298:	2387      	movs	r3, #135	; 0x87
    a29a:	009b      	lsls	r3, r3, #2
    a29c:	18fb      	adds	r3, r7, r3
    a29e:	681b      	ldr	r3, [r3, #0]
    a2a0:	88da      	ldrh	r2, [r3, #6]
    a2a2:	68fb      	ldr	r3, [r7, #12]
    a2a4:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    a2a6:	4b05      	ldr	r3, [pc, #20]	; (a2bc <f_open+0x52c>)
    a2a8:	18fb      	adds	r3, r7, r3
    a2aa:	781b      	ldrb	r3, [r3, #0]
}
    a2ac:	0018      	movs	r0, r3
    a2ae:	46bd      	mov	sp, r7
    a2b0:	2395      	movs	r3, #149	; 0x95
    a2b2:	009b      	lsls	r3, r3, #2
    a2b4:	449d      	add	sp, r3
    a2b6:	bd90      	pop	{r4, r7, pc}
    a2b8:	fffffdb7 	.word	0xfffffdb7
    a2bc:	0000024f 	.word	0x0000024f

0000a2c0 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    a2c0:	b590      	push	{r4, r7, lr}
    a2c2:	b08d      	sub	sp, #52	; 0x34
    a2c4:	af00      	add	r7, sp, #0
    a2c6:	60f8      	str	r0, [r7, #12]
    a2c8:	60b9      	str	r1, [r7, #8]
    a2ca:	607a      	str	r2, [r7, #4]
    a2cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
    a2ce:	68bb      	ldr	r3, [r7, #8]
    a2d0:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
    a2d2:	683b      	ldr	r3, [r7, #0]
    a2d4:	2200      	movs	r2, #0
    a2d6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    a2d8:	68fb      	ldr	r3, [r7, #12]
    a2da:	681a      	ldr	r2, [r3, #0]
    a2dc:	68fb      	ldr	r3, [r7, #12]
    a2de:	889b      	ldrh	r3, [r3, #4]
    a2e0:	211f      	movs	r1, #31
    a2e2:	187c      	adds	r4, r7, r1
    a2e4:	0019      	movs	r1, r3
    a2e6:	0010      	movs	r0, r2
    a2e8:	4b96      	ldr	r3, [pc, #600]	; (a544 <f_read+0x284>)
    a2ea:	4798      	blx	r3
    a2ec:	0003      	movs	r3, r0
    a2ee:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a2f0:	231f      	movs	r3, #31
    a2f2:	18fb      	adds	r3, r7, r3
    a2f4:	781b      	ldrb	r3, [r3, #0]
    a2f6:	2b00      	cmp	r3, #0
    a2f8:	d003      	beq.n	a302 <f_read+0x42>
    a2fa:	231f      	movs	r3, #31
    a2fc:	18fb      	adds	r3, r7, r3
    a2fe:	781b      	ldrb	r3, [r3, #0]
    a300:	e11b      	b.n	a53a <f_read+0x27a>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    a302:	68fb      	ldr	r3, [r7, #12]
    a304:	799b      	ldrb	r3, [r3, #6]
    a306:	b25b      	sxtb	r3, r3
    a308:	2b00      	cmp	r3, #0
    a30a:	da01      	bge.n	a310 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a30c:	2302      	movs	r3, #2
    a30e:	e114      	b.n	a53a <f_read+0x27a>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    a310:	68fb      	ldr	r3, [r7, #12]
    a312:	799b      	ldrb	r3, [r3, #6]
    a314:	001a      	movs	r2, r3
    a316:	2301      	movs	r3, #1
    a318:	4013      	ands	r3, r2
    a31a:	d101      	bne.n	a320 <f_read+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a31c:	2307      	movs	r3, #7
    a31e:	e10c      	b.n	a53a <f_read+0x27a>
	remain = fp->fsize - fp->fptr;
    a320:	68fb      	ldr	r3, [r7, #12]
    a322:	68da      	ldr	r2, [r3, #12]
    a324:	68fb      	ldr	r3, [r7, #12]
    a326:	689b      	ldr	r3, [r3, #8]
    a328:	1ad3      	subs	r3, r2, r3
    a32a:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    a32c:	687a      	ldr	r2, [r7, #4]
    a32e:	69bb      	ldr	r3, [r7, #24]
    a330:	429a      	cmp	r2, r3
    a332:	d800      	bhi.n	a336 <f_read+0x76>
    a334:	e0fc      	b.n	a530 <f_read+0x270>
    a336:	69bb      	ldr	r3, [r7, #24]
    a338:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
    a33a:	e0f9      	b.n	a530 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    a33c:	68fb      	ldr	r3, [r7, #12]
    a33e:	689b      	ldr	r3, [r3, #8]
    a340:	05db      	lsls	r3, r3, #23
    a342:	0ddb      	lsrs	r3, r3, #23
    a344:	d000      	beq.n	a348 <f_read+0x88>
    a346:	e0b0      	b.n	a4aa <f_read+0x1ea>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a348:	68fb      	ldr	r3, [r7, #12]
    a34a:	689b      	ldr	r3, [r3, #8]
    a34c:	0a5b      	lsrs	r3, r3, #9
    a34e:	b2da      	uxtb	r2, r3
    a350:	68fb      	ldr	r3, [r7, #12]
    a352:	681b      	ldr	r3, [r3, #0]
    a354:	789b      	ldrb	r3, [r3, #2]
    a356:	3b01      	subs	r3, #1
    a358:	b2d9      	uxtb	r1, r3
    a35a:	2317      	movs	r3, #23
    a35c:	18fb      	adds	r3, r7, r3
    a35e:	400a      	ands	r2, r1
    a360:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
    a362:	2317      	movs	r3, #23
    a364:	18fb      	adds	r3, r7, r3
    a366:	781b      	ldrb	r3, [r3, #0]
    a368:	2b00      	cmp	r3, #0
    a36a:	d12e      	bne.n	a3ca <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    a36c:	68fb      	ldr	r3, [r7, #12]
    a36e:	689b      	ldr	r3, [r3, #8]
    a370:	2b00      	cmp	r3, #0
    a372:	d103      	bne.n	a37c <f_read+0xbc>
					clst = fp->sclust;			/* Follow from the origin */
    a374:	68fb      	ldr	r3, [r7, #12]
    a376:	691b      	ldr	r3, [r3, #16]
    a378:	62fb      	str	r3, [r7, #44]	; 0x2c
    a37a:	e009      	b.n	a390 <f_read+0xd0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    a37c:	68fb      	ldr	r3, [r7, #12]
    a37e:	681a      	ldr	r2, [r3, #0]
    a380:	68fb      	ldr	r3, [r7, #12]
    a382:	695b      	ldr	r3, [r3, #20]
    a384:	0019      	movs	r1, r3
    a386:	0010      	movs	r0, r2
    a388:	4b6f      	ldr	r3, [pc, #444]	; (a548 <f_read+0x288>)
    a38a:	4798      	blx	r3
    a38c:	0003      	movs	r3, r0
    a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    a390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a392:	2b01      	cmp	r3, #1
    a394:	d809      	bhi.n	a3aa <f_read+0xea>
    a396:	68fb      	ldr	r3, [r7, #12]
    a398:	799b      	ldrb	r3, [r3, #6]
    a39a:	2280      	movs	r2, #128	; 0x80
    a39c:	4252      	negs	r2, r2
    a39e:	4313      	orrs	r3, r2
    a3a0:	b2da      	uxtb	r2, r3
    a3a2:	68fb      	ldr	r3, [r7, #12]
    a3a4:	719a      	strb	r2, [r3, #6]
    a3a6:	2302      	movs	r3, #2
    a3a8:	e0c7      	b.n	a53a <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a3ac:	3301      	adds	r3, #1
    a3ae:	d109      	bne.n	a3c4 <f_read+0x104>
    a3b0:	68fb      	ldr	r3, [r7, #12]
    a3b2:	799b      	ldrb	r3, [r3, #6]
    a3b4:	2280      	movs	r2, #128	; 0x80
    a3b6:	4252      	negs	r2, r2
    a3b8:	4313      	orrs	r3, r2
    a3ba:	b2da      	uxtb	r2, r3
    a3bc:	68fb      	ldr	r3, [r7, #12]
    a3be:	719a      	strb	r2, [r3, #6]
    a3c0:	2301      	movs	r3, #1
    a3c2:	e0ba      	b.n	a53a <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
    a3c4:	68fb      	ldr	r3, [r7, #12]
    a3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    a3c8:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a3ca:	68fb      	ldr	r3, [r7, #12]
    a3cc:	681a      	ldr	r2, [r3, #0]
    a3ce:	68fb      	ldr	r3, [r7, #12]
    a3d0:	695b      	ldr	r3, [r3, #20]
    a3d2:	0019      	movs	r1, r3
    a3d4:	0010      	movs	r0, r2
    a3d6:	4b5d      	ldr	r3, [pc, #372]	; (a54c <f_read+0x28c>)
    a3d8:	4798      	blx	r3
    a3da:	0003      	movs	r3, r0
    a3dc:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a3de:	693b      	ldr	r3, [r7, #16]
    a3e0:	2b00      	cmp	r3, #0
    a3e2:	d109      	bne.n	a3f8 <f_read+0x138>
    a3e4:	68fb      	ldr	r3, [r7, #12]
    a3e6:	799b      	ldrb	r3, [r3, #6]
    a3e8:	2280      	movs	r2, #128	; 0x80
    a3ea:	4252      	negs	r2, r2
    a3ec:	4313      	orrs	r3, r2
    a3ee:	b2da      	uxtb	r2, r3
    a3f0:	68fb      	ldr	r3, [r7, #12]
    a3f2:	719a      	strb	r2, [r3, #6]
    a3f4:	2302      	movs	r3, #2
    a3f6:	e0a0      	b.n	a53a <f_read+0x27a>
			sect += csect;
    a3f8:	2317      	movs	r3, #23
    a3fa:	18fb      	adds	r3, r7, r3
    a3fc:	781b      	ldrb	r3, [r3, #0]
    a3fe:	693a      	ldr	r2, [r7, #16]
    a400:	18d3      	adds	r3, r2, r3
    a402:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    a404:	687b      	ldr	r3, [r7, #4]
    a406:	0a5b      	lsrs	r3, r3, #9
    a408:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
    a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a40c:	2b00      	cmp	r3, #0
    a40e:	d049      	beq.n	a4a4 <f_read+0x1e4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a410:	2317      	movs	r3, #23
    a412:	18fb      	adds	r3, r7, r3
    a414:	781a      	ldrb	r2, [r3, #0]
    a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a418:	18d2      	adds	r2, r2, r3
    a41a:	68fb      	ldr	r3, [r7, #12]
    a41c:	681b      	ldr	r3, [r3, #0]
    a41e:	789b      	ldrb	r3, [r3, #2]
    a420:	429a      	cmp	r2, r3
    a422:	d908      	bls.n	a436 <f_read+0x176>
					cc = fp->fs->csize - csect;
    a424:	68fb      	ldr	r3, [r7, #12]
    a426:	681b      	ldr	r3, [r3, #0]
    a428:	789b      	ldrb	r3, [r3, #2]
    a42a:	001a      	movs	r2, r3
    a42c:	2317      	movs	r3, #23
    a42e:	18fb      	adds	r3, r7, r3
    a430:	781b      	ldrb	r3, [r3, #0]
    a432:	1ad3      	subs	r3, r2, r3
    a434:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    a436:	68fb      	ldr	r3, [r7, #12]
    a438:	681b      	ldr	r3, [r3, #0]
    a43a:	7858      	ldrb	r0, [r3, #1]
    a43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a43e:	b2db      	uxtb	r3, r3
    a440:	693a      	ldr	r2, [r7, #16]
    a442:	6a39      	ldr	r1, [r7, #32]
    a444:	4c42      	ldr	r4, [pc, #264]	; (a550 <f_read+0x290>)
    a446:	47a0      	blx	r4
    a448:	1e03      	subs	r3, r0, #0
    a44a:	d009      	beq.n	a460 <f_read+0x1a0>
					ABORT(fp->fs, FR_DISK_ERR);
    a44c:	68fb      	ldr	r3, [r7, #12]
    a44e:	799b      	ldrb	r3, [r3, #6]
    a450:	2280      	movs	r2, #128	; 0x80
    a452:	4252      	negs	r2, r2
    a454:	4313      	orrs	r3, r2
    a456:	b2da      	uxtb	r2, r3
    a458:	68fb      	ldr	r3, [r7, #12]
    a45a:	719a      	strb	r2, [r3, #6]
    a45c:	2301      	movs	r3, #1
    a45e:	e06c      	b.n	a53a <f_read+0x27a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    a460:	68fb      	ldr	r3, [r7, #12]
    a462:	681b      	ldr	r3, [r3, #0]
    a464:	791b      	ldrb	r3, [r3, #4]
    a466:	2b00      	cmp	r3, #0
    a468:	d018      	beq.n	a49c <f_read+0x1dc>
    a46a:	68fb      	ldr	r3, [r7, #12]
    a46c:	681b      	ldr	r3, [r3, #0]
    a46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a470:	693b      	ldr	r3, [r7, #16]
    a472:	1ad2      	subs	r2, r2, r3
    a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a476:	429a      	cmp	r2, r3
    a478:	d210      	bcs.n	a49c <f_read+0x1dc>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    a47a:	68fb      	ldr	r3, [r7, #12]
    a47c:	681b      	ldr	r3, [r3, #0]
    a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a480:	693b      	ldr	r3, [r7, #16]
    a482:	1ad3      	subs	r3, r2, r3
    a484:	025b      	lsls	r3, r3, #9
    a486:	6a3a      	ldr	r2, [r7, #32]
    a488:	18d0      	adds	r0, r2, r3
    a48a:	68fb      	ldr	r3, [r7, #12]
    a48c:	681b      	ldr	r3, [r3, #0]
    a48e:	3330      	adds	r3, #48	; 0x30
    a490:	0019      	movs	r1, r3
    a492:	2380      	movs	r3, #128	; 0x80
    a494:	009b      	lsls	r3, r3, #2
    a496:	001a      	movs	r2, r3
    a498:	4b2e      	ldr	r3, [pc, #184]	; (a554 <f_read+0x294>)
    a49a:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a49e:	025b      	lsls	r3, r3, #9
    a4a0:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
    a4a2:	e031      	b.n	a508 <f_read+0x248>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a4a4:	68fb      	ldr	r3, [r7, #12]
    a4a6:	693a      	ldr	r2, [r7, #16]
    a4a8:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    a4aa:	68fb      	ldr	r3, [r7, #12]
    a4ac:	689b      	ldr	r3, [r3, #8]
    a4ae:	05db      	lsls	r3, r3, #23
    a4b0:	0ddb      	lsrs	r3, r3, #23
    a4b2:	2280      	movs	r2, #128	; 0x80
    a4b4:	0092      	lsls	r2, r2, #2
    a4b6:	1ad3      	subs	r3, r2, r3
    a4b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
    a4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a4bc:	687b      	ldr	r3, [r7, #4]
    a4be:	429a      	cmp	r2, r3
    a4c0:	d901      	bls.n	a4c6 <f_read+0x206>
    a4c2:	687b      	ldr	r3, [r7, #4]
    a4c4:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    a4c6:	68fb      	ldr	r3, [r7, #12]
    a4c8:	681a      	ldr	r2, [r3, #0]
    a4ca:	68fb      	ldr	r3, [r7, #12]
    a4cc:	699b      	ldr	r3, [r3, #24]
    a4ce:	0019      	movs	r1, r3
    a4d0:	0010      	movs	r0, r2
    a4d2:	4b21      	ldr	r3, [pc, #132]	; (a558 <f_read+0x298>)
    a4d4:	4798      	blx	r3
    a4d6:	1e03      	subs	r3, r0, #0
    a4d8:	d009      	beq.n	a4ee <f_read+0x22e>
			ABORT(fp->fs, FR_DISK_ERR);
    a4da:	68fb      	ldr	r3, [r7, #12]
    a4dc:	799b      	ldrb	r3, [r3, #6]
    a4de:	2280      	movs	r2, #128	; 0x80
    a4e0:	4252      	negs	r2, r2
    a4e2:	4313      	orrs	r3, r2
    a4e4:	b2da      	uxtb	r2, r3
    a4e6:	68fb      	ldr	r3, [r7, #12]
    a4e8:	719a      	strb	r2, [r3, #6]
    a4ea:	2301      	movs	r3, #1
    a4ec:	e025      	b.n	a53a <f_read+0x27a>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    a4ee:	68fb      	ldr	r3, [r7, #12]
    a4f0:	681a      	ldr	r2, [r3, #0]
    a4f2:	68fb      	ldr	r3, [r7, #12]
    a4f4:	689b      	ldr	r3, [r3, #8]
    a4f6:	05db      	lsls	r3, r3, #23
    a4f8:	0ddb      	lsrs	r3, r3, #23
    a4fa:	3330      	adds	r3, #48	; 0x30
    a4fc:	18d1      	adds	r1, r2, r3
    a4fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a500:	6a3b      	ldr	r3, [r7, #32]
    a502:	0018      	movs	r0, r3
    a504:	4b13      	ldr	r3, [pc, #76]	; (a554 <f_read+0x294>)
    a506:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    a508:	6a3a      	ldr	r2, [r7, #32]
    a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a50c:	18d3      	adds	r3, r2, r3
    a50e:	623b      	str	r3, [r7, #32]
    a510:	68fb      	ldr	r3, [r7, #12]
    a512:	689a      	ldr	r2, [r3, #8]
    a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a516:	18d2      	adds	r2, r2, r3
    a518:	68fb      	ldr	r3, [r7, #12]
    a51a:	609a      	str	r2, [r3, #8]
    a51c:	683b      	ldr	r3, [r7, #0]
    a51e:	681a      	ldr	r2, [r3, #0]
    a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a522:	18d2      	adds	r2, r2, r3
    a524:	683b      	ldr	r3, [r7, #0]
    a526:	601a      	str	r2, [r3, #0]
    a528:	687a      	ldr	r2, [r7, #4]
    a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a52c:	1ad3      	subs	r3, r2, r3
    a52e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
    a530:	687b      	ldr	r3, [r7, #4]
    a532:	2b00      	cmp	r3, #0
    a534:	d000      	beq.n	a538 <f_read+0x278>
    a536:	e701      	b.n	a33c <f_read+0x7c>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
    a538:	2300      	movs	r3, #0
}
    a53a:	0018      	movs	r0, r3
    a53c:	46bd      	mov	sp, r7
    a53e:	b00d      	add	sp, #52	; 0x34
    a540:	bd90      	pop	{r4, r7, pc}
    a542:	46c0      	nop			; (mov r8, r8)
    a544:	00009ce5 	.word	0x00009ce5
    a548:	0000793d 	.word	0x0000793d
    a54c:	00007905 	.word	0x00007905
    a550:	000072b9 	.word	0x000072b9
    a554:	000075c1 	.word	0x000075c1
    a558:	000076a5 	.word	0x000076a5

0000a55c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    a55c:	b590      	push	{r4, r7, lr}
    a55e:	b08b      	sub	sp, #44	; 0x2c
    a560:	af00      	add	r7, sp, #0
    a562:	60f8      	str	r0, [r7, #12]
    a564:	60b9      	str	r1, [r7, #8]
    a566:	607a      	str	r2, [r7, #4]
    a568:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    a56a:	68bb      	ldr	r3, [r7, #8]
    a56c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    a56e:	683b      	ldr	r3, [r7, #0]
    a570:	2200      	movs	r2, #0
    a572:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    a574:	68fb      	ldr	r3, [r7, #12]
    a576:	681a      	ldr	r2, [r3, #0]
    a578:	68fb      	ldr	r3, [r7, #12]
    a57a:	889b      	ldrh	r3, [r3, #4]
    a57c:	2117      	movs	r1, #23
    a57e:	187c      	adds	r4, r7, r1
    a580:	0019      	movs	r1, r3
    a582:	0010      	movs	r0, r2
    a584:	4bc3      	ldr	r3, [pc, #780]	; (a894 <f_write+0x338>)
    a586:	4798      	blx	r3
    a588:	0003      	movs	r3, r0
    a58a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    a58c:	2317      	movs	r3, #23
    a58e:	18fb      	adds	r3, r7, r3
    a590:	781b      	ldrb	r3, [r3, #0]
    a592:	2b00      	cmp	r3, #0
    a594:	d003      	beq.n	a59e <f_write+0x42>
    a596:	2317      	movs	r3, #23
    a598:	18fb      	adds	r3, r7, r3
    a59a:	781b      	ldrb	r3, [r3, #0]
    a59c:	e176      	b.n	a88c <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    a59e:	68fb      	ldr	r3, [r7, #12]
    a5a0:	799b      	ldrb	r3, [r3, #6]
    a5a2:	b25b      	sxtb	r3, r3
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	da01      	bge.n	a5ac <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    a5a8:	2302      	movs	r3, #2
    a5aa:	e16f      	b.n	a88c <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    a5ac:	68fb      	ldr	r3, [r7, #12]
    a5ae:	799b      	ldrb	r3, [r3, #6]
    a5b0:	001a      	movs	r2, r3
    a5b2:	2302      	movs	r3, #2
    a5b4:	4013      	ands	r3, r2
    a5b6:	d101      	bne.n	a5bc <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    a5b8:	2307      	movs	r3, #7
    a5ba:	e167      	b.n	a88c <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    a5bc:	68fb      	ldr	r3, [r7, #12]
    a5be:	68da      	ldr	r2, [r3, #12]
    a5c0:	687b      	ldr	r3, [r7, #4]
    a5c2:	18d2      	adds	r2, r2, r3
    a5c4:	68fb      	ldr	r3, [r7, #12]
    a5c6:	68db      	ldr	r3, [r3, #12]
    a5c8:	429a      	cmp	r2, r3
    a5ca:	d300      	bcc.n	a5ce <f_write+0x72>
    a5cc:	e146      	b.n	a85c <f_write+0x300>
    a5ce:	2300      	movs	r3, #0
    a5d0:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    a5d2:	e143      	b.n	a85c <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    a5d4:	68fb      	ldr	r3, [r7, #12]
    a5d6:	689b      	ldr	r3, [r3, #8]
    a5d8:	05db      	lsls	r3, r3, #23
    a5da:	0ddb      	lsrs	r3, r3, #23
    a5dc:	d000      	beq.n	a5e0 <f_write+0x84>
    a5de:	e0f6      	b.n	a7ce <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    a5e0:	68fb      	ldr	r3, [r7, #12]
    a5e2:	689b      	ldr	r3, [r3, #8]
    a5e4:	0a5b      	lsrs	r3, r3, #9
    a5e6:	b2da      	uxtb	r2, r3
    a5e8:	68fb      	ldr	r3, [r7, #12]
    a5ea:	681b      	ldr	r3, [r3, #0]
    a5ec:	789b      	ldrb	r3, [r3, #2]
    a5ee:	3b01      	subs	r3, #1
    a5f0:	b2d9      	uxtb	r1, r3
    a5f2:	2316      	movs	r3, #22
    a5f4:	18fb      	adds	r3, r7, r3
    a5f6:	400a      	ands	r2, r1
    a5f8:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    a5fa:	2316      	movs	r3, #22
    a5fc:	18fb      	adds	r3, r7, r3
    a5fe:	781b      	ldrb	r3, [r3, #0]
    a600:	2b00      	cmp	r3, #0
    a602:	d140      	bne.n	a686 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    a604:	68fb      	ldr	r3, [r7, #12]
    a606:	689b      	ldr	r3, [r3, #8]
    a608:	2b00      	cmp	r3, #0
    a60a:	d111      	bne.n	a630 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    a60c:	68fb      	ldr	r3, [r7, #12]
    a60e:	691b      	ldr	r3, [r3, #16]
    a610:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a614:	2b00      	cmp	r3, #0
    a616:	d115      	bne.n	a644 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    a618:	68fb      	ldr	r3, [r7, #12]
    a61a:	681b      	ldr	r3, [r3, #0]
    a61c:	2100      	movs	r1, #0
    a61e:	0018      	movs	r0, r3
    a620:	4b9d      	ldr	r3, [pc, #628]	; (a898 <f_write+0x33c>)
    a622:	4798      	blx	r3
    a624:	0003      	movs	r3, r0
    a626:	627b      	str	r3, [r7, #36]	; 0x24
    a628:	68fb      	ldr	r3, [r7, #12]
    a62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a62c:	611a      	str	r2, [r3, #16]
    a62e:	e009      	b.n	a644 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    a630:	68fb      	ldr	r3, [r7, #12]
    a632:	681a      	ldr	r2, [r3, #0]
    a634:	68fb      	ldr	r3, [r7, #12]
    a636:	695b      	ldr	r3, [r3, #20]
    a638:	0019      	movs	r1, r3
    a63a:	0010      	movs	r0, r2
    a63c:	4b96      	ldr	r3, [pc, #600]	; (a898 <f_write+0x33c>)
    a63e:	4798      	blx	r3
    a640:	0003      	movs	r3, r0
    a642:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a646:	2b00      	cmp	r3, #0
    a648:	d100      	bne.n	a64c <f_write+0xf0>
    a64a:	e10c      	b.n	a866 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a64e:	2b01      	cmp	r3, #1
    a650:	d109      	bne.n	a666 <f_write+0x10a>
    a652:	68fb      	ldr	r3, [r7, #12]
    a654:	799b      	ldrb	r3, [r3, #6]
    a656:	2280      	movs	r2, #128	; 0x80
    a658:	4252      	negs	r2, r2
    a65a:	4313      	orrs	r3, r2
    a65c:	b2da      	uxtb	r2, r3
    a65e:	68fb      	ldr	r3, [r7, #12]
    a660:	719a      	strb	r2, [r3, #6]
    a662:	2302      	movs	r3, #2
    a664:	e112      	b.n	a88c <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a668:	3301      	adds	r3, #1
    a66a:	d109      	bne.n	a680 <f_write+0x124>
    a66c:	68fb      	ldr	r3, [r7, #12]
    a66e:	799b      	ldrb	r3, [r3, #6]
    a670:	2280      	movs	r2, #128	; 0x80
    a672:	4252      	negs	r2, r2
    a674:	4313      	orrs	r3, r2
    a676:	b2da      	uxtb	r2, r3
    a678:	68fb      	ldr	r3, [r7, #12]
    a67a:	719a      	strb	r2, [r3, #6]
    a67c:	2301      	movs	r3, #1
    a67e:	e105      	b.n	a88c <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    a680:	68fb      	ldr	r3, [r7, #12]
    a682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a684:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    a686:	68fb      	ldr	r3, [r7, #12]
    a688:	681b      	ldr	r3, [r3, #0]
    a68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a68c:	68fb      	ldr	r3, [r7, #12]
    a68e:	699b      	ldr	r3, [r3, #24]
    a690:	429a      	cmp	r2, r3
    a692:	d111      	bne.n	a6b8 <f_write+0x15c>
    a694:	68fb      	ldr	r3, [r7, #12]
    a696:	681b      	ldr	r3, [r3, #0]
    a698:	2100      	movs	r1, #0
    a69a:	0018      	movs	r0, r3
    a69c:	4b7f      	ldr	r3, [pc, #508]	; (a89c <f_write+0x340>)
    a69e:	4798      	blx	r3
    a6a0:	1e03      	subs	r3, r0, #0
    a6a2:	d009      	beq.n	a6b8 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    a6a4:	68fb      	ldr	r3, [r7, #12]
    a6a6:	799b      	ldrb	r3, [r3, #6]
    a6a8:	2280      	movs	r2, #128	; 0x80
    a6aa:	4252      	negs	r2, r2
    a6ac:	4313      	orrs	r3, r2
    a6ae:	b2da      	uxtb	r2, r3
    a6b0:	68fb      	ldr	r3, [r7, #12]
    a6b2:	719a      	strb	r2, [r3, #6]
    a6b4:	2301      	movs	r3, #1
    a6b6:	e0e9      	b.n	a88c <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    a6b8:	68fb      	ldr	r3, [r7, #12]
    a6ba:	681a      	ldr	r2, [r3, #0]
    a6bc:	68fb      	ldr	r3, [r7, #12]
    a6be:	695b      	ldr	r3, [r3, #20]
    a6c0:	0019      	movs	r1, r3
    a6c2:	0010      	movs	r0, r2
    a6c4:	4b76      	ldr	r3, [pc, #472]	; (a8a0 <f_write+0x344>)
    a6c6:	4798      	blx	r3
    a6c8:	0003      	movs	r3, r0
    a6ca:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    a6cc:	693b      	ldr	r3, [r7, #16]
    a6ce:	2b00      	cmp	r3, #0
    a6d0:	d109      	bne.n	a6e6 <f_write+0x18a>
    a6d2:	68fb      	ldr	r3, [r7, #12]
    a6d4:	799b      	ldrb	r3, [r3, #6]
    a6d6:	2280      	movs	r2, #128	; 0x80
    a6d8:	4252      	negs	r2, r2
    a6da:	4313      	orrs	r3, r2
    a6dc:	b2da      	uxtb	r2, r3
    a6de:	68fb      	ldr	r3, [r7, #12]
    a6e0:	719a      	strb	r2, [r3, #6]
    a6e2:	2302      	movs	r3, #2
    a6e4:	e0d2      	b.n	a88c <f_write+0x330>
			sect += csect;
    a6e6:	2316      	movs	r3, #22
    a6e8:	18fb      	adds	r3, r7, r3
    a6ea:	781b      	ldrb	r3, [r3, #0]
    a6ec:	693a      	ldr	r2, [r7, #16]
    a6ee:	18d3      	adds	r3, r2, r3
    a6f0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    a6f2:	687b      	ldr	r3, [r7, #4]
    a6f4:	0a5b      	lsrs	r3, r3, #9
    a6f6:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    a6f8:	69fb      	ldr	r3, [r7, #28]
    a6fa:	2b00      	cmp	r3, #0
    a6fc:	d048      	beq.n	a790 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    a6fe:	2316      	movs	r3, #22
    a700:	18fb      	adds	r3, r7, r3
    a702:	781a      	ldrb	r2, [r3, #0]
    a704:	69fb      	ldr	r3, [r7, #28]
    a706:	18d2      	adds	r2, r2, r3
    a708:	68fb      	ldr	r3, [r7, #12]
    a70a:	681b      	ldr	r3, [r3, #0]
    a70c:	789b      	ldrb	r3, [r3, #2]
    a70e:	429a      	cmp	r2, r3
    a710:	d908      	bls.n	a724 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    a712:	68fb      	ldr	r3, [r7, #12]
    a714:	681b      	ldr	r3, [r3, #0]
    a716:	789b      	ldrb	r3, [r3, #2]
    a718:	001a      	movs	r2, r3
    a71a:	2316      	movs	r3, #22
    a71c:	18fb      	adds	r3, r7, r3
    a71e:	781b      	ldrb	r3, [r3, #0]
    a720:	1ad3      	subs	r3, r2, r3
    a722:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    a724:	68fb      	ldr	r3, [r7, #12]
    a726:	681b      	ldr	r3, [r3, #0]
    a728:	7858      	ldrb	r0, [r3, #1]
    a72a:	69fb      	ldr	r3, [r7, #28]
    a72c:	b2db      	uxtb	r3, r3
    a72e:	693a      	ldr	r2, [r7, #16]
    a730:	69b9      	ldr	r1, [r7, #24]
    a732:	4c5c      	ldr	r4, [pc, #368]	; (a8a4 <f_write+0x348>)
    a734:	47a0      	blx	r4
    a736:	1e03      	subs	r3, r0, #0
    a738:	d009      	beq.n	a74e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    a73a:	68fb      	ldr	r3, [r7, #12]
    a73c:	799b      	ldrb	r3, [r3, #6]
    a73e:	2280      	movs	r2, #128	; 0x80
    a740:	4252      	negs	r2, r2
    a742:	4313      	orrs	r3, r2
    a744:	b2da      	uxtb	r2, r3
    a746:	68fb      	ldr	r3, [r7, #12]
    a748:	719a      	strb	r2, [r3, #6]
    a74a:	2301      	movs	r3, #1
    a74c:	e09e      	b.n	a88c <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    a74e:	68fb      	ldr	r3, [r7, #12]
    a750:	681b      	ldr	r3, [r3, #0]
    a752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a754:	693b      	ldr	r3, [r7, #16]
    a756:	1ad2      	subs	r2, r2, r3
    a758:	69fb      	ldr	r3, [r7, #28]
    a75a:	429a      	cmp	r2, r3
    a75c:	d214      	bcs.n	a788 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    a75e:	68fb      	ldr	r3, [r7, #12]
    a760:	681b      	ldr	r3, [r3, #0]
    a762:	3330      	adds	r3, #48	; 0x30
    a764:	0018      	movs	r0, r3
    a766:	68fb      	ldr	r3, [r7, #12]
    a768:	681b      	ldr	r3, [r3, #0]
    a76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a76c:	693b      	ldr	r3, [r7, #16]
    a76e:	1ad3      	subs	r3, r2, r3
    a770:	025b      	lsls	r3, r3, #9
    a772:	69ba      	ldr	r2, [r7, #24]
    a774:	18d1      	adds	r1, r2, r3
    a776:	2380      	movs	r3, #128	; 0x80
    a778:	009b      	lsls	r3, r3, #2
    a77a:	001a      	movs	r2, r3
    a77c:	4b4a      	ldr	r3, [pc, #296]	; (a8a8 <f_write+0x34c>)
    a77e:	4798      	blx	r3
					fp->fs->wflag = 0;
    a780:	68fb      	ldr	r3, [r7, #12]
    a782:	681b      	ldr	r3, [r3, #0]
    a784:	2200      	movs	r2, #0
    a786:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    a788:	69fb      	ldr	r3, [r7, #28]
    a78a:	025b      	lsls	r3, r3, #9
    a78c:	623b      	str	r3, [r7, #32]
				continue;
    a78e:	e051      	b.n	a834 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    a790:	68fb      	ldr	r3, [r7, #12]
    a792:	689a      	ldr	r2, [r3, #8]
    a794:	68fb      	ldr	r3, [r7, #12]
    a796:	68db      	ldr	r3, [r3, #12]
    a798:	429a      	cmp	r2, r3
    a79a:	d315      	bcc.n	a7c8 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    a79c:	68fb      	ldr	r3, [r7, #12]
    a79e:	681b      	ldr	r3, [r3, #0]
    a7a0:	2100      	movs	r1, #0
    a7a2:	0018      	movs	r0, r3
    a7a4:	4b3d      	ldr	r3, [pc, #244]	; (a89c <f_write+0x340>)
    a7a6:	4798      	blx	r3
    a7a8:	1e03      	subs	r3, r0, #0
    a7aa:	d009      	beq.n	a7c0 <f_write+0x264>
    a7ac:	68fb      	ldr	r3, [r7, #12]
    a7ae:	799b      	ldrb	r3, [r3, #6]
    a7b0:	2280      	movs	r2, #128	; 0x80
    a7b2:	4252      	negs	r2, r2
    a7b4:	4313      	orrs	r3, r2
    a7b6:	b2da      	uxtb	r2, r3
    a7b8:	68fb      	ldr	r3, [r7, #12]
    a7ba:	719a      	strb	r2, [r3, #6]
    a7bc:	2301      	movs	r3, #1
    a7be:	e065      	b.n	a88c <f_write+0x330>
				fp->fs->winsect = sect;
    a7c0:	68fb      	ldr	r3, [r7, #12]
    a7c2:	681b      	ldr	r3, [r3, #0]
    a7c4:	693a      	ldr	r2, [r7, #16]
    a7c6:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    a7c8:	68fb      	ldr	r3, [r7, #12]
    a7ca:	693a      	ldr	r2, [r7, #16]
    a7cc:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    a7ce:	68fb      	ldr	r3, [r7, #12]
    a7d0:	689b      	ldr	r3, [r3, #8]
    a7d2:	05db      	lsls	r3, r3, #23
    a7d4:	0ddb      	lsrs	r3, r3, #23
    a7d6:	2280      	movs	r2, #128	; 0x80
    a7d8:	0092      	lsls	r2, r2, #2
    a7da:	1ad3      	subs	r3, r2, r3
    a7dc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    a7de:	6a3a      	ldr	r2, [r7, #32]
    a7e0:	687b      	ldr	r3, [r7, #4]
    a7e2:	429a      	cmp	r2, r3
    a7e4:	d901      	bls.n	a7ea <f_write+0x28e>
    a7e6:	687b      	ldr	r3, [r7, #4]
    a7e8:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    a7ea:	68fb      	ldr	r3, [r7, #12]
    a7ec:	681a      	ldr	r2, [r3, #0]
    a7ee:	68fb      	ldr	r3, [r7, #12]
    a7f0:	699b      	ldr	r3, [r3, #24]
    a7f2:	0019      	movs	r1, r3
    a7f4:	0010      	movs	r0, r2
    a7f6:	4b29      	ldr	r3, [pc, #164]	; (a89c <f_write+0x340>)
    a7f8:	4798      	blx	r3
    a7fa:	1e03      	subs	r3, r0, #0
    a7fc:	d009      	beq.n	a812 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    a7fe:	68fb      	ldr	r3, [r7, #12]
    a800:	799b      	ldrb	r3, [r3, #6]
    a802:	2280      	movs	r2, #128	; 0x80
    a804:	4252      	negs	r2, r2
    a806:	4313      	orrs	r3, r2
    a808:	b2da      	uxtb	r2, r3
    a80a:	68fb      	ldr	r3, [r7, #12]
    a80c:	719a      	strb	r2, [r3, #6]
    a80e:	2301      	movs	r3, #1
    a810:	e03c      	b.n	a88c <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    a812:	68fb      	ldr	r3, [r7, #12]
    a814:	681a      	ldr	r2, [r3, #0]
    a816:	68fb      	ldr	r3, [r7, #12]
    a818:	689b      	ldr	r3, [r3, #8]
    a81a:	05db      	lsls	r3, r3, #23
    a81c:	0ddb      	lsrs	r3, r3, #23
    a81e:	3330      	adds	r3, #48	; 0x30
    a820:	18d3      	adds	r3, r2, r3
    a822:	6a3a      	ldr	r2, [r7, #32]
    a824:	69b9      	ldr	r1, [r7, #24]
    a826:	0018      	movs	r0, r3
    a828:	4b1f      	ldr	r3, [pc, #124]	; (a8a8 <f_write+0x34c>)
    a82a:	4798      	blx	r3
		fp->fs->wflag = 1;
    a82c:	68fb      	ldr	r3, [r7, #12]
    a82e:	681b      	ldr	r3, [r3, #0]
    a830:	2201      	movs	r2, #1
    a832:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    a834:	69ba      	ldr	r2, [r7, #24]
    a836:	6a3b      	ldr	r3, [r7, #32]
    a838:	18d3      	adds	r3, r2, r3
    a83a:	61bb      	str	r3, [r7, #24]
    a83c:	68fb      	ldr	r3, [r7, #12]
    a83e:	689a      	ldr	r2, [r3, #8]
    a840:	6a3b      	ldr	r3, [r7, #32]
    a842:	18d2      	adds	r2, r2, r3
    a844:	68fb      	ldr	r3, [r7, #12]
    a846:	609a      	str	r2, [r3, #8]
    a848:	683b      	ldr	r3, [r7, #0]
    a84a:	681a      	ldr	r2, [r3, #0]
    a84c:	6a3b      	ldr	r3, [r7, #32]
    a84e:	18d2      	adds	r2, r2, r3
    a850:	683b      	ldr	r3, [r7, #0]
    a852:	601a      	str	r2, [r3, #0]
    a854:	687a      	ldr	r2, [r7, #4]
    a856:	6a3b      	ldr	r3, [r7, #32]
    a858:	1ad3      	subs	r3, r2, r3
    a85a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    a85c:	687b      	ldr	r3, [r7, #4]
    a85e:	2b00      	cmp	r3, #0
    a860:	d000      	beq.n	a864 <f_write+0x308>
    a862:	e6b7      	b.n	a5d4 <f_write+0x78>
    a864:	e000      	b.n	a868 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    a866:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    a868:	68fb      	ldr	r3, [r7, #12]
    a86a:	689a      	ldr	r2, [r3, #8]
    a86c:	68fb      	ldr	r3, [r7, #12]
    a86e:	68db      	ldr	r3, [r3, #12]
    a870:	429a      	cmp	r2, r3
    a872:	d903      	bls.n	a87c <f_write+0x320>
    a874:	68fb      	ldr	r3, [r7, #12]
    a876:	689a      	ldr	r2, [r3, #8]
    a878:	68fb      	ldr	r3, [r7, #12]
    a87a:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    a87c:	68fb      	ldr	r3, [r7, #12]
    a87e:	799b      	ldrb	r3, [r3, #6]
    a880:	2220      	movs	r2, #32
    a882:	4313      	orrs	r3, r2
    a884:	b2da      	uxtb	r2, r3
    a886:	68fb      	ldr	r3, [r7, #12]
    a888:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    a88a:	2300      	movs	r3, #0
}
    a88c:	0018      	movs	r0, r3
    a88e:	46bd      	mov	sp, r7
    a890:	b00b      	add	sp, #44	; 0x2c
    a892:	bd90      	pop	{r4, r7, pc}
    a894:	00009ce5 	.word	0x00009ce5
    a898:	00007dad 	.word	0x00007dad
    a89c:	000076a5 	.word	0x000076a5
    a8a0:	00007905 	.word	0x00007905
    a8a4:	00007391 	.word	0x00007391
    a8a8:	000075c1 	.word	0x000075c1

0000a8ac <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    a8ac:	b590      	push	{r4, r7, lr}
    a8ae:	b087      	sub	sp, #28
    a8b0:	af00      	add	r7, sp, #0
    a8b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    a8b4:	687b      	ldr	r3, [r7, #4]
    a8b6:	681a      	ldr	r2, [r3, #0]
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	889b      	ldrh	r3, [r3, #4]
    a8bc:	2117      	movs	r1, #23
    a8be:	187c      	adds	r4, r7, r1
    a8c0:	0019      	movs	r1, r3
    a8c2:	0010      	movs	r0, r2
    a8c4:	4b55      	ldr	r3, [pc, #340]	; (aa1c <f_sync+0x170>)
    a8c6:	4798      	blx	r3
    a8c8:	0003      	movs	r3, r0
    a8ca:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    a8cc:	2317      	movs	r3, #23
    a8ce:	18fb      	adds	r3, r7, r3
    a8d0:	781b      	ldrb	r3, [r3, #0]
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d000      	beq.n	a8d8 <f_sync+0x2c>
    a8d6:	e09a      	b.n	aa0e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    a8d8:	687b      	ldr	r3, [r7, #4]
    a8da:	799b      	ldrb	r3, [r3, #6]
    a8dc:	001a      	movs	r2, r3
    a8de:	2320      	movs	r3, #32
    a8e0:	4013      	ands	r3, r2
    a8e2:	d100      	bne.n	a8e6 <f_sync+0x3a>
    a8e4:	e093      	b.n	aa0e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    a8e6:	687b      	ldr	r3, [r7, #4]
    a8e8:	681a      	ldr	r2, [r3, #0]
    a8ea:	687b      	ldr	r3, [r7, #4]
    a8ec:	69db      	ldr	r3, [r3, #28]
    a8ee:	2117      	movs	r1, #23
    a8f0:	187c      	adds	r4, r7, r1
    a8f2:	0019      	movs	r1, r3
    a8f4:	0010      	movs	r0, r2
    a8f6:	4b4a      	ldr	r3, [pc, #296]	; (aa20 <f_sync+0x174>)
    a8f8:	4798      	blx	r3
    a8fa:	0003      	movs	r3, r0
    a8fc:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    a8fe:	2317      	movs	r3, #23
    a900:	18fb      	adds	r3, r7, r3
    a902:	781b      	ldrb	r3, [r3, #0]
    a904:	2b00      	cmp	r3, #0
    a906:	d000      	beq.n	a90a <f_sync+0x5e>
    a908:	e081      	b.n	aa0e <f_sync+0x162>
				dir = fp->dir_ptr;
    a90a:	687b      	ldr	r3, [r7, #4]
    a90c:	6a1b      	ldr	r3, [r3, #32]
    a90e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    a910:	693b      	ldr	r3, [r7, #16]
    a912:	330b      	adds	r3, #11
    a914:	693a      	ldr	r2, [r7, #16]
    a916:	320b      	adds	r2, #11
    a918:	7812      	ldrb	r2, [r2, #0]
    a91a:	2120      	movs	r1, #32
    a91c:	430a      	orrs	r2, r1
    a91e:	b2d2      	uxtb	r2, r2
    a920:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    a922:	693b      	ldr	r3, [r7, #16]
    a924:	331c      	adds	r3, #28
    a926:	001a      	movs	r2, r3
    a928:	687b      	ldr	r3, [r7, #4]
    a92a:	68db      	ldr	r3, [r3, #12]
    a92c:	b2db      	uxtb	r3, r3
    a92e:	7013      	strb	r3, [r2, #0]
    a930:	693b      	ldr	r3, [r7, #16]
    a932:	331d      	adds	r3, #29
    a934:	001a      	movs	r2, r3
    a936:	687b      	ldr	r3, [r7, #4]
    a938:	68db      	ldr	r3, [r3, #12]
    a93a:	b29b      	uxth	r3, r3
    a93c:	0a1b      	lsrs	r3, r3, #8
    a93e:	b29b      	uxth	r3, r3
    a940:	b2db      	uxtb	r3, r3
    a942:	7013      	strb	r3, [r2, #0]
    a944:	693b      	ldr	r3, [r7, #16]
    a946:	331e      	adds	r3, #30
    a948:	001a      	movs	r2, r3
    a94a:	687b      	ldr	r3, [r7, #4]
    a94c:	68db      	ldr	r3, [r3, #12]
    a94e:	0c1b      	lsrs	r3, r3, #16
    a950:	b2db      	uxtb	r3, r3
    a952:	7013      	strb	r3, [r2, #0]
    a954:	693b      	ldr	r3, [r7, #16]
    a956:	331f      	adds	r3, #31
    a958:	001a      	movs	r2, r3
    a95a:	687b      	ldr	r3, [r7, #4]
    a95c:	68db      	ldr	r3, [r3, #12]
    a95e:	0e1b      	lsrs	r3, r3, #24
    a960:	b2db      	uxtb	r3, r3
    a962:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    a964:	693b      	ldr	r3, [r7, #16]
    a966:	331a      	adds	r3, #26
    a968:	001a      	movs	r2, r3
    a96a:	687b      	ldr	r3, [r7, #4]
    a96c:	691b      	ldr	r3, [r3, #16]
    a96e:	b2db      	uxtb	r3, r3
    a970:	7013      	strb	r3, [r2, #0]
    a972:	693b      	ldr	r3, [r7, #16]
    a974:	331b      	adds	r3, #27
    a976:	001a      	movs	r2, r3
    a978:	687b      	ldr	r3, [r7, #4]
    a97a:	691b      	ldr	r3, [r3, #16]
    a97c:	b29b      	uxth	r3, r3
    a97e:	0a1b      	lsrs	r3, r3, #8
    a980:	b29b      	uxth	r3, r3
    a982:	b2db      	uxtb	r3, r3
    a984:	7013      	strb	r3, [r2, #0]
    a986:	693b      	ldr	r3, [r7, #16]
    a988:	3314      	adds	r3, #20
    a98a:	001a      	movs	r2, r3
    a98c:	687b      	ldr	r3, [r7, #4]
    a98e:	691b      	ldr	r3, [r3, #16]
    a990:	0c1b      	lsrs	r3, r3, #16
    a992:	b2db      	uxtb	r3, r3
    a994:	7013      	strb	r3, [r2, #0]
    a996:	693b      	ldr	r3, [r7, #16]
    a998:	3315      	adds	r3, #21
    a99a:	001a      	movs	r2, r3
    a99c:	687b      	ldr	r3, [r7, #4]
    a99e:	691b      	ldr	r3, [r3, #16]
    a9a0:	0c1b      	lsrs	r3, r3, #16
    a9a2:	b29b      	uxth	r3, r3
    a9a4:	0a1b      	lsrs	r3, r3, #8
    a9a6:	b29b      	uxth	r3, r3
    a9a8:	b2db      	uxtb	r3, r3
    a9aa:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    a9ac:	4b1d      	ldr	r3, [pc, #116]	; (aa24 <f_sync+0x178>)
    a9ae:	4798      	blx	r3
    a9b0:	0003      	movs	r3, r0
    a9b2:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    a9b4:	693b      	ldr	r3, [r7, #16]
    a9b6:	3316      	adds	r3, #22
    a9b8:	68fa      	ldr	r2, [r7, #12]
    a9ba:	b2d2      	uxtb	r2, r2
    a9bc:	701a      	strb	r2, [r3, #0]
    a9be:	693b      	ldr	r3, [r7, #16]
    a9c0:	3317      	adds	r3, #23
    a9c2:	68fa      	ldr	r2, [r7, #12]
    a9c4:	b292      	uxth	r2, r2
    a9c6:	0a12      	lsrs	r2, r2, #8
    a9c8:	b292      	uxth	r2, r2
    a9ca:	b2d2      	uxtb	r2, r2
    a9cc:	701a      	strb	r2, [r3, #0]
    a9ce:	693b      	ldr	r3, [r7, #16]
    a9d0:	3318      	adds	r3, #24
    a9d2:	68fa      	ldr	r2, [r7, #12]
    a9d4:	0c12      	lsrs	r2, r2, #16
    a9d6:	b2d2      	uxtb	r2, r2
    a9d8:	701a      	strb	r2, [r3, #0]
    a9da:	693b      	ldr	r3, [r7, #16]
    a9dc:	3319      	adds	r3, #25
    a9de:	68fa      	ldr	r2, [r7, #12]
    a9e0:	0e12      	lsrs	r2, r2, #24
    a9e2:	b2d2      	uxtb	r2, r2
    a9e4:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    a9e6:	687b      	ldr	r3, [r7, #4]
    a9e8:	799b      	ldrb	r3, [r3, #6]
    a9ea:	2220      	movs	r2, #32
    a9ec:	4393      	bics	r3, r2
    a9ee:	b2da      	uxtb	r2, r3
    a9f0:	687b      	ldr	r3, [r7, #4]
    a9f2:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    a9f4:	687b      	ldr	r3, [r7, #4]
    a9f6:	681b      	ldr	r3, [r3, #0]
    a9f8:	2201      	movs	r2, #1
    a9fa:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    a9fc:	687b      	ldr	r3, [r7, #4]
    a9fe:	681b      	ldr	r3, [r3, #0]
    aa00:	2217      	movs	r2, #23
    aa02:	18bc      	adds	r4, r7, r2
    aa04:	0018      	movs	r0, r3
    aa06:	4b08      	ldr	r3, [pc, #32]	; (aa28 <f_sync+0x17c>)
    aa08:	4798      	blx	r3
    aa0a:	0003      	movs	r3, r0
    aa0c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    aa0e:	2317      	movs	r3, #23
    aa10:	18fb      	adds	r3, r7, r3
    aa12:	781b      	ldrb	r3, [r3, #0]
}
    aa14:	0018      	movs	r0, r3
    aa16:	46bd      	mov	sp, r7
    aa18:	b007      	add	sp, #28
    aa1a:	bd90      	pop	{r4, r7, pc}
    aa1c:	00009ce5 	.word	0x00009ce5
    aa20:	000076a5 	.word	0x000076a5
    aa24:	00007561 	.word	0x00007561
    aa28:	0000776d 	.word	0x0000776d

0000aa2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    aa2c:	b590      	push	{r4, r7, lr}
    aa2e:	b085      	sub	sp, #20
    aa30:	af00      	add	r7, sp, #0
    aa32:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    aa34:	230f      	movs	r3, #15
    aa36:	18fc      	adds	r4, r7, r3
    aa38:	687b      	ldr	r3, [r7, #4]
    aa3a:	0018      	movs	r0, r3
    aa3c:	4b09      	ldr	r3, [pc, #36]	; (aa64 <f_close+0x38>)
    aa3e:	4798      	blx	r3
    aa40:	0003      	movs	r3, r0
    aa42:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    aa44:	230f      	movs	r3, #15
    aa46:	18fb      	adds	r3, r7, r3
    aa48:	781b      	ldrb	r3, [r3, #0]
    aa4a:	2b00      	cmp	r3, #0
    aa4c:	d102      	bne.n	aa54 <f_close+0x28>
    aa4e:	687b      	ldr	r3, [r7, #4]
    aa50:	2200      	movs	r2, #0
    aa52:	601a      	str	r2, [r3, #0]
	return res;
    aa54:	230f      	movs	r3, #15
    aa56:	18fb      	adds	r3, r7, r3
    aa58:	781b      	ldrb	r3, [r3, #0]
#endif
}
    aa5a:	0018      	movs	r0, r3
    aa5c:	46bd      	mov	sp, r7
    aa5e:	b005      	add	sp, #20
    aa60:	bd90      	pop	{r4, r7, pc}
    aa62:	46c0      	nop			; (mov r8, r8)
    aa64:	0000a8ad 	.word	0x0000a8ad

0000aa68 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    aa68:	b590      	push	{r4, r7, lr}
    aa6a:	4c28      	ldr	r4, [pc, #160]	; (ab0c <f_stat+0xa4>)
    aa6c:	44a5      	add	sp, r4
    aa6e:	af00      	add	r7, sp, #0
    aa70:	6078      	str	r0, [r7, #4]
    aa72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    aa74:	4b26      	ldr	r3, [pc, #152]	; (ab10 <f_stat+0xa8>)
    aa76:	18fc      	adds	r4, r7, r3
    aa78:	2386      	movs	r3, #134	; 0x86
    aa7a:	009b      	lsls	r3, r3, #2
    aa7c:	18f9      	adds	r1, r7, r3
    aa7e:	1d3b      	adds	r3, r7, #4
    aa80:	2200      	movs	r2, #0
    aa82:	0018      	movs	r0, r3
    aa84:	4b23      	ldr	r3, [pc, #140]	; (ab14 <f_stat+0xac>)
    aa86:	4798      	blx	r3
    aa88:	0003      	movs	r3, r0
    aa8a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    aa8c:	4b20      	ldr	r3, [pc, #128]	; (ab10 <f_stat+0xa8>)
    aa8e:	18fb      	adds	r3, r7, r3
    aa90:	781b      	ldrb	r3, [r3, #0]
    aa92:	2b00      	cmp	r3, #0
    aa94:	d130      	bne.n	aaf8 <f_stat+0x90>
		INIT_BUF(dj);
    aa96:	2386      	movs	r3, #134	; 0x86
    aa98:	009b      	lsls	r3, r3, #2
    aa9a:	18fb      	adds	r3, r7, r3
    aa9c:	2283      	movs	r2, #131	; 0x83
    aa9e:	0092      	lsls	r2, r2, #2
    aaa0:	18ba      	adds	r2, r7, r2
    aaa2:	619a      	str	r2, [r3, #24]
    aaa4:	2386      	movs	r3, #134	; 0x86
    aaa6:	009b      	lsls	r3, r3, #2
    aaa8:	18fb      	adds	r3, r7, r3
    aaaa:	220c      	movs	r2, #12
    aaac:	18ba      	adds	r2, r7, r2
    aaae:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);	/* Follow the file path */
    aab0:	687a      	ldr	r2, [r7, #4]
    aab2:	4b17      	ldr	r3, [pc, #92]	; (ab10 <f_stat+0xa8>)
    aab4:	18fc      	adds	r4, r7, r3
    aab6:	2386      	movs	r3, #134	; 0x86
    aab8:	009b      	lsls	r3, r3, #2
    aaba:	18fb      	adds	r3, r7, r3
    aabc:	0011      	movs	r1, r2
    aabe:	0018      	movs	r0, r3
    aac0:	4b15      	ldr	r3, [pc, #84]	; (ab18 <f_stat+0xb0>)
    aac2:	4798      	blx	r3
    aac4:	0003      	movs	r3, r0
    aac6:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {				/* Follow completed */
    aac8:	4b11      	ldr	r3, [pc, #68]	; (ab10 <f_stat+0xa8>)
    aaca:	18fb      	adds	r3, r7, r3
    aacc:	781b      	ldrb	r3, [r3, #0]
    aace:	2b00      	cmp	r3, #0
    aad0:	d112      	bne.n	aaf8 <f_stat+0x90>
			if (dj.dir)		/* Found an object */
    aad2:	2386      	movs	r3, #134	; 0x86
    aad4:	009b      	lsls	r3, r3, #2
    aad6:	18fb      	adds	r3, r7, r3
    aad8:	695b      	ldr	r3, [r3, #20]
    aada:	2b00      	cmp	r3, #0
    aadc:	d008      	beq.n	aaf0 <f_stat+0x88>
				get_fileinfo(&dj, fno);
    aade:	683a      	ldr	r2, [r7, #0]
    aae0:	2386      	movs	r3, #134	; 0x86
    aae2:	009b      	lsls	r3, r3, #2
    aae4:	18fb      	adds	r3, r7, r3
    aae6:	0011      	movs	r1, r2
    aae8:	0018      	movs	r0, r3
    aaea:	4b0c      	ldr	r3, [pc, #48]	; (ab1c <f_stat+0xb4>)
    aaec:	4798      	blx	r3
    aaee:	e003      	b.n	aaf8 <f_stat+0x90>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
    aaf0:	4b07      	ldr	r3, [pc, #28]	; (ab10 <f_stat+0xa8>)
    aaf2:	18fb      	adds	r3, r7, r3
    aaf4:	2206      	movs	r2, #6
    aaf6:	701a      	strb	r2, [r3, #0]
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
    aaf8:	4b05      	ldr	r3, [pc, #20]	; (ab10 <f_stat+0xa8>)
    aafa:	18fb      	adds	r3, r7, r3
    aafc:	781b      	ldrb	r3, [r3, #0]
}
    aafe:	0018      	movs	r0, r3
    ab00:	46bd      	mov	sp, r7
    ab02:	2391      	movs	r3, #145	; 0x91
    ab04:	009b      	lsls	r3, r3, #2
    ab06:	449d      	add	sp, r3
    ab08:	bd90      	pop	{r4, r7, pc}
    ab0a:	46c0      	nop			; (mov r8, r8)
    ab0c:	fffffdbc 	.word	0xfffffdbc
    ab10:	0000023f 	.word	0x0000023f
    ab14:	000096e9 	.word	0x000096e9
    ab18:	000094dd 	.word	0x000094dd
    ab1c:	00009299 	.word	0x00009299

0000ab20 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    ab20:	b590      	push	{r4, r7, lr}
    ab22:	4c8d      	ldr	r4, [pc, #564]	; (ad58 <f_unlink+0x238>)
    ab24:	44a5      	add	sp, r4
    ab26:	af00      	add	r7, sp, #0
    ab28:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    ab2a:	4b8c      	ldr	r3, [pc, #560]	; (ad5c <f_unlink+0x23c>)
    ab2c:	18fc      	adds	r4, r7, r3
    ab2e:	238e      	movs	r3, #142	; 0x8e
    ab30:	009b      	lsls	r3, r3, #2
    ab32:	18f9      	adds	r1, r7, r3
    ab34:	1d3b      	adds	r3, r7, #4
    ab36:	2201      	movs	r2, #1
    ab38:	0018      	movs	r0, r3
    ab3a:	4b89      	ldr	r3, [pc, #548]	; (ad60 <f_unlink+0x240>)
    ab3c:	4798      	blx	r3
    ab3e:	0003      	movs	r3, r0
    ab40:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    ab42:	4b86      	ldr	r3, [pc, #536]	; (ad5c <f_unlink+0x23c>)
    ab44:	18fb      	adds	r3, r7, r3
    ab46:	781b      	ldrb	r3, [r3, #0]
    ab48:	2b00      	cmp	r3, #0
    ab4a:	d000      	beq.n	ab4e <f_unlink+0x2e>
    ab4c:	e0fb      	b.n	ad46 <f_unlink+0x226>
		INIT_BUF(dj);
    ab4e:	238e      	movs	r3, #142	; 0x8e
    ab50:	009b      	lsls	r3, r3, #2
    ab52:	18fb      	adds	r3, r7, r3
    ab54:	2282      	movs	r2, #130	; 0x82
    ab56:	0092      	lsls	r2, r2, #2
    ab58:	18ba      	adds	r2, r7, r2
    ab5a:	619a      	str	r2, [r3, #24]
    ab5c:	238e      	movs	r3, #142	; 0x8e
    ab5e:	009b      	lsls	r3, r3, #2
    ab60:	18fb      	adds	r3, r7, r3
    ab62:	2208      	movs	r2, #8
    ab64:	18ba      	adds	r2, r7, r2
    ab66:	61da      	str	r2, [r3, #28]
		res = follow_path(&dj, path);		/* Follow the file path */
    ab68:	687a      	ldr	r2, [r7, #4]
    ab6a:	4b7c      	ldr	r3, [pc, #496]	; (ad5c <f_unlink+0x23c>)
    ab6c:	18fc      	adds	r4, r7, r3
    ab6e:	238e      	movs	r3, #142	; 0x8e
    ab70:	009b      	lsls	r3, r3, #2
    ab72:	18fb      	adds	r3, r7, r3
    ab74:	0011      	movs	r1, r2
    ab76:	0018      	movs	r0, r3
    ab78:	4b7a      	ldr	r3, [pc, #488]	; (ad64 <f_unlink+0x244>)
    ab7a:	4798      	blx	r3
    ab7c:	0003      	movs	r3, r0
    ab7e:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    ab80:	4b76      	ldr	r3, [pc, #472]	; (ad5c <f_unlink+0x23c>)
    ab82:	18fb      	adds	r3, r7, r3
    ab84:	781b      	ldrb	r3, [r3, #0]
    ab86:	2b00      	cmp	r3, #0
    ab88:	d000      	beq.n	ab8c <f_unlink+0x6c>
    ab8a:	e0dc      	b.n	ad46 <f_unlink+0x226>
			dir = dj.dir;
    ab8c:	238e      	movs	r3, #142	; 0x8e
    ab8e:	009b      	lsls	r3, r3, #2
    ab90:	18fb      	adds	r3, r7, r3
    ab92:	695b      	ldr	r3, [r3, #20]
    ab94:	2298      	movs	r2, #152	; 0x98
    ab96:	0092      	lsls	r2, r2, #2
    ab98:	18ba      	adds	r2, r7, r2
    ab9a:	6013      	str	r3, [r2, #0]
			if (!dir) {
    ab9c:	2398      	movs	r3, #152	; 0x98
    ab9e:	009b      	lsls	r3, r3, #2
    aba0:	18fb      	adds	r3, r7, r3
    aba2:	681b      	ldr	r3, [r3, #0]
    aba4:	2b00      	cmp	r3, #0
    aba6:	d104      	bne.n	abb2 <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    aba8:	4b6c      	ldr	r3, [pc, #432]	; (ad5c <f_unlink+0x23c>)
    abaa:	18fb      	adds	r3, r7, r3
    abac:	2206      	movs	r2, #6
    abae:	701a      	strb	r2, [r3, #0]
    abb0:	e00d      	b.n	abce <f_unlink+0xae>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    abb2:	2398      	movs	r3, #152	; 0x98
    abb4:	009b      	lsls	r3, r3, #2
    abb6:	18fb      	adds	r3, r7, r3
    abb8:	681b      	ldr	r3, [r3, #0]
    abba:	330b      	adds	r3, #11
    abbc:	781b      	ldrb	r3, [r3, #0]
    abbe:	001a      	movs	r2, r3
    abc0:	2301      	movs	r3, #1
    abc2:	4013      	ands	r3, r2
    abc4:	d003      	beq.n	abce <f_unlink+0xae>
					res = FR_DENIED;		/* Cannot remove R/O object */
    abc6:	4b65      	ldr	r3, [pc, #404]	; (ad5c <f_unlink+0x23c>)
    abc8:	18fb      	adds	r3, r7, r3
    abca:	2207      	movs	r2, #7
    abcc:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
    abce:	2398      	movs	r3, #152	; 0x98
    abd0:	009b      	lsls	r3, r3, #2
    abd2:	18fb      	adds	r3, r7, r3
    abd4:	681b      	ldr	r3, [r3, #0]
    abd6:	3315      	adds	r3, #21
    abd8:	781b      	ldrb	r3, [r3, #0]
    abda:	021b      	lsls	r3, r3, #8
    abdc:	b21a      	sxth	r2, r3
    abde:	2398      	movs	r3, #152	; 0x98
    abe0:	009b      	lsls	r3, r3, #2
    abe2:	18fb      	adds	r3, r7, r3
    abe4:	681b      	ldr	r3, [r3, #0]
    abe6:	3314      	adds	r3, #20
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	b21b      	sxth	r3, r3
    abec:	4313      	orrs	r3, r2
    abee:	b21b      	sxth	r3, r3
    abf0:	b29b      	uxth	r3, r3
    abf2:	041b      	lsls	r3, r3, #16
    abf4:	2298      	movs	r2, #152	; 0x98
    abf6:	0092      	lsls	r2, r2, #2
    abf8:	18ba      	adds	r2, r7, r2
    abfa:	6812      	ldr	r2, [r2, #0]
    abfc:	321b      	adds	r2, #27
    abfe:	7812      	ldrb	r2, [r2, #0]
    ac00:	0212      	lsls	r2, r2, #8
    ac02:	b211      	sxth	r1, r2
    ac04:	2298      	movs	r2, #152	; 0x98
    ac06:	0092      	lsls	r2, r2, #2
    ac08:	18ba      	adds	r2, r7, r2
    ac0a:	6812      	ldr	r2, [r2, #0]
    ac0c:	321a      	adds	r2, #26
    ac0e:	7812      	ldrb	r2, [r2, #0]
    ac10:	b212      	sxth	r2, r2
    ac12:	430a      	orrs	r2, r1
    ac14:	b212      	sxth	r2, r2
    ac16:	b292      	uxth	r2, r2
    ac18:	4313      	orrs	r3, r2
    ac1a:	2297      	movs	r2, #151	; 0x97
    ac1c:	0092      	lsls	r2, r2, #2
    ac1e:	18ba      	adds	r2, r7, r2
    ac20:	6013      	str	r3, [r2, #0]
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    ac22:	4b4e      	ldr	r3, [pc, #312]	; (ad5c <f_unlink+0x23c>)
    ac24:	18fb      	adds	r3, r7, r3
    ac26:	781b      	ldrb	r3, [r3, #0]
    ac28:	2b00      	cmp	r3, #0
    ac2a:	d152      	bne.n	acd2 <f_unlink+0x1b2>
    ac2c:	2398      	movs	r3, #152	; 0x98
    ac2e:	009b      	lsls	r3, r3, #2
    ac30:	18fb      	adds	r3, r7, r3
    ac32:	681b      	ldr	r3, [r3, #0]
    ac34:	330b      	adds	r3, #11
    ac36:	781b      	ldrb	r3, [r3, #0]
    ac38:	001a      	movs	r2, r3
    ac3a:	2310      	movs	r3, #16
    ac3c:	4013      	ands	r3, r2
    ac3e:	d048      	beq.n	acd2 <f_unlink+0x1b2>
				if (dclst < 2) {
    ac40:	2397      	movs	r3, #151	; 0x97
    ac42:	009b      	lsls	r3, r3, #2
    ac44:	18fb      	adds	r3, r7, r3
    ac46:	681b      	ldr	r3, [r3, #0]
    ac48:	2b01      	cmp	r3, #1
    ac4a:	d804      	bhi.n	ac56 <f_unlink+0x136>
					res = FR_INT_ERR;
    ac4c:	4b43      	ldr	r3, [pc, #268]	; (ad5c <f_unlink+0x23c>)
    ac4e:	18fb      	adds	r3, r7, r3
    ac50:	2202      	movs	r2, #2
    ac52:	701a      	strb	r2, [r3, #0]
    ac54:	e03d      	b.n	acd2 <f_unlink+0x1b2>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    ac56:	238e      	movs	r3, #142	; 0x8e
    ac58:	009b      	lsls	r3, r3, #2
    ac5a:	18f9      	adds	r1, r7, r3
    ac5c:	2385      	movs	r3, #133	; 0x85
    ac5e:	009b      	lsls	r3, r3, #2
    ac60:	18fb      	adds	r3, r7, r3
    ac62:	2224      	movs	r2, #36	; 0x24
    ac64:	0018      	movs	r0, r3
    ac66:	4b40      	ldr	r3, [pc, #256]	; (ad68 <f_unlink+0x248>)
    ac68:	4798      	blx	r3
					sdj.sclust = dclst;
    ac6a:	2385      	movs	r3, #133	; 0x85
    ac6c:	009b      	lsls	r3, r3, #2
    ac6e:	18fb      	adds	r3, r7, r3
    ac70:	2297      	movs	r2, #151	; 0x97
    ac72:	0092      	lsls	r2, r2, #2
    ac74:	18ba      	adds	r2, r7, r2
    ac76:	6812      	ldr	r2, [r2, #0]
    ac78:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    ac7a:	4b38      	ldr	r3, [pc, #224]	; (ad5c <f_unlink+0x23c>)
    ac7c:	18fc      	adds	r4, r7, r3
    ac7e:	2385      	movs	r3, #133	; 0x85
    ac80:	009b      	lsls	r3, r3, #2
    ac82:	18fb      	adds	r3, r7, r3
    ac84:	2102      	movs	r1, #2
    ac86:	0018      	movs	r0, r3
    ac88:	4b38      	ldr	r3, [pc, #224]	; (ad6c <f_unlink+0x24c>)
    ac8a:	4798      	blx	r3
    ac8c:	0003      	movs	r3, r0
    ac8e:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
    ac90:	4b32      	ldr	r3, [pc, #200]	; (ad5c <f_unlink+0x23c>)
    ac92:	18fb      	adds	r3, r7, r3
    ac94:	781b      	ldrb	r3, [r3, #0]
    ac96:	2b00      	cmp	r3, #0
    ac98:	d11b      	bne.n	acd2 <f_unlink+0x1b2>
						res = dir_read(&sdj);
    ac9a:	4b30      	ldr	r3, [pc, #192]	; (ad5c <f_unlink+0x23c>)
    ac9c:	18fc      	adds	r4, r7, r3
    ac9e:	2385      	movs	r3, #133	; 0x85
    aca0:	009b      	lsls	r3, r3, #2
    aca2:	18fb      	adds	r3, r7, r3
    aca4:	0018      	movs	r0, r3
    aca6:	4b32      	ldr	r3, [pc, #200]	; (ad70 <f_unlink+0x250>)
    aca8:	4798      	blx	r3
    acaa:	0003      	movs	r3, r0
    acac:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
    acae:	4b2b      	ldr	r3, [pc, #172]	; (ad5c <f_unlink+0x23c>)
    acb0:	18fb      	adds	r3, r7, r3
    acb2:	781b      	ldrb	r3, [r3, #0]
    acb4:	2b00      	cmp	r3, #0
    acb6:	d103      	bne.n	acc0 <f_unlink+0x1a0>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
    acb8:	4b28      	ldr	r3, [pc, #160]	; (ad5c <f_unlink+0x23c>)
    acba:	18fb      	adds	r3, r7, r3
    acbc:	2207      	movs	r2, #7
    acbe:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    acc0:	4b26      	ldr	r3, [pc, #152]	; (ad5c <f_unlink+0x23c>)
    acc2:	18fb      	adds	r3, r7, r3
    acc4:	781b      	ldrb	r3, [r3, #0]
    acc6:	2b04      	cmp	r3, #4
    acc8:	d103      	bne.n	acd2 <f_unlink+0x1b2>
    acca:	4b24      	ldr	r3, [pc, #144]	; (ad5c <f_unlink+0x23c>)
    accc:	18fb      	adds	r3, r7, r3
    acce:	2200      	movs	r2, #0
    acd0:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
    acd2:	4b22      	ldr	r3, [pc, #136]	; (ad5c <f_unlink+0x23c>)
    acd4:	18fb      	adds	r3, r7, r3
    acd6:	781b      	ldrb	r3, [r3, #0]
    acd8:	2b00      	cmp	r3, #0
    acda:	d134      	bne.n	ad46 <f_unlink+0x226>
				res = dir_remove(&dj);		/* Remove the directory entry */
    acdc:	4b1f      	ldr	r3, [pc, #124]	; (ad5c <f_unlink+0x23c>)
    acde:	18fc      	adds	r4, r7, r3
    ace0:	238e      	movs	r3, #142	; 0x8e
    ace2:	009b      	lsls	r3, r3, #2
    ace4:	18fb      	adds	r3, r7, r3
    ace6:	0018      	movs	r0, r3
    ace8:	4b22      	ldr	r3, [pc, #136]	; (ad74 <f_unlink+0x254>)
    acea:	4798      	blx	r3
    acec:	0003      	movs	r3, r0
    acee:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    acf0:	4b1a      	ldr	r3, [pc, #104]	; (ad5c <f_unlink+0x23c>)
    acf2:	18fb      	adds	r3, r7, r3
    acf4:	781b      	ldrb	r3, [r3, #0]
    acf6:	2b00      	cmp	r3, #0
    acf8:	d125      	bne.n	ad46 <f_unlink+0x226>
					if (dclst)				/* Remove the cluster chain if exist */
    acfa:	2397      	movs	r3, #151	; 0x97
    acfc:	009b      	lsls	r3, r3, #2
    acfe:	18fb      	adds	r3, r7, r3
    ad00:	681b      	ldr	r3, [r3, #0]
    ad02:	2b00      	cmp	r3, #0
    ad04:	d00f      	beq.n	ad26 <f_unlink+0x206>
						res = remove_chain(dj.fs, dclst);
    ad06:	238e      	movs	r3, #142	; 0x8e
    ad08:	009b      	lsls	r3, r3, #2
    ad0a:	18fb      	adds	r3, r7, r3
    ad0c:	681b      	ldr	r3, [r3, #0]
    ad0e:	4a13      	ldr	r2, [pc, #76]	; (ad5c <f_unlink+0x23c>)
    ad10:	18bc      	adds	r4, r7, r2
    ad12:	2297      	movs	r2, #151	; 0x97
    ad14:	0092      	lsls	r2, r2, #2
    ad16:	18ba      	adds	r2, r7, r2
    ad18:	6812      	ldr	r2, [r2, #0]
    ad1a:	0011      	movs	r1, r2
    ad1c:	0018      	movs	r0, r3
    ad1e:	4b16      	ldr	r3, [pc, #88]	; (ad78 <f_unlink+0x258>)
    ad20:	4798      	blx	r3
    ad22:	0003      	movs	r3, r0
    ad24:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
    ad26:	4b0d      	ldr	r3, [pc, #52]	; (ad5c <f_unlink+0x23c>)
    ad28:	18fb      	adds	r3, r7, r3
    ad2a:	781b      	ldrb	r3, [r3, #0]
    ad2c:	2b00      	cmp	r3, #0
    ad2e:	d10a      	bne.n	ad46 <f_unlink+0x226>
    ad30:	238e      	movs	r3, #142	; 0x8e
    ad32:	009b      	lsls	r3, r3, #2
    ad34:	18fb      	adds	r3, r7, r3
    ad36:	681b      	ldr	r3, [r3, #0]
    ad38:	4a08      	ldr	r2, [pc, #32]	; (ad5c <f_unlink+0x23c>)
    ad3a:	18bc      	adds	r4, r7, r2
    ad3c:	0018      	movs	r0, r3
    ad3e:	4b0f      	ldr	r3, [pc, #60]	; (ad7c <f_unlink+0x25c>)
    ad40:	4798      	blx	r3
    ad42:	0003      	movs	r3, r0
    ad44:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
    ad46:	4b05      	ldr	r3, [pc, #20]	; (ad5c <f_unlink+0x23c>)
    ad48:	18fb      	adds	r3, r7, r3
    ad4a:	781b      	ldrb	r3, [r3, #0]
}
    ad4c:	0018      	movs	r0, r3
    ad4e:	46bd      	mov	sp, r7
    ad50:	239b      	movs	r3, #155	; 0x9b
    ad52:	009b      	lsls	r3, r3, #2
    ad54:	449d      	add	sp, r3
    ad56:	bd90      	pop	{r4, r7, pc}
    ad58:	fffffd94 	.word	0xfffffd94
    ad5c:	00000267 	.word	0x00000267
    ad60:	000096e9 	.word	0x000096e9
    ad64:	000094dd 	.word	0x000094dd
    ad68:	000075c1 	.word	0x000075c1
    ad6c:	00007ee9 	.word	0x00007ee9
    ad70:	0000884d 	.word	0x0000884d
    ad74:	00008d79 	.word	0x00008d79
    ad78:	00007ce5 	.word	0x00007ce5
    ad7c:	0000776d 	.word	0x0000776d

0000ad80 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    ad80:	b590      	push	{r4, r7, lr}
    ad82:	b087      	sub	sp, #28
    ad84:	af00      	add	r7, sp, #0
    ad86:	0002      	movs	r2, r0
    ad88:	6039      	str	r1, [r7, #0]
    ad8a:	1dfb      	adds	r3, r7, #7
    ad8c:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    ad8e:	230c      	movs	r3, #12
    ad90:	18fb      	adds	r3, r7, r3
    ad92:	1dfa      	adds	r2, r7, #7
    ad94:	7812      	ldrb	r2, [r2, #0]
    ad96:	701a      	strb	r2, [r3, #0]
	btw = 1;
    ad98:	2301      	movs	r3, #1
    ad9a:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    ad9c:	2310      	movs	r3, #16
    ad9e:	18fb      	adds	r3, r7, r3
    ada0:	697a      	ldr	r2, [r7, #20]
    ada2:	210c      	movs	r1, #12
    ada4:	1879      	adds	r1, r7, r1
    ada6:	6838      	ldr	r0, [r7, #0]
    ada8:	4c06      	ldr	r4, [pc, #24]	; (adc4 <f_putc+0x44>)
    adaa:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    adac:	693a      	ldr	r2, [r7, #16]
    adae:	697b      	ldr	r3, [r7, #20]
    adb0:	429a      	cmp	r2, r3
    adb2:	d101      	bne.n	adb8 <f_putc+0x38>
    adb4:	2301      	movs	r3, #1
    adb6:	e001      	b.n	adbc <f_putc+0x3c>
    adb8:	2301      	movs	r3, #1
    adba:	425b      	negs	r3, r3
}
    adbc:	0018      	movs	r0, r3
    adbe:	46bd      	mov	sp, r7
    adc0:	b007      	add	sp, #28
    adc2:	bd90      	pop	{r4, r7, pc}
    adc4:	0000a55d 	.word	0x0000a55d

0000adc8 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    adc8:	b580      	push	{r7, lr}
    adca:	b084      	sub	sp, #16
    adcc:	af00      	add	r7, sp, #0
    adce:	6078      	str	r0, [r7, #4]
    add0:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    add2:	2300      	movs	r3, #0
    add4:	60fb      	str	r3, [r7, #12]
    add6:	e012      	b.n	adfe <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    add8:	687b      	ldr	r3, [r7, #4]
    adda:	781b      	ldrb	r3, [r3, #0]
    addc:	683a      	ldr	r2, [r7, #0]
    adde:	0011      	movs	r1, r2
    ade0:	0018      	movs	r0, r3
    ade2:	4b0b      	ldr	r3, [pc, #44]	; (ae10 <f_puts+0x48>)
    ade4:	4798      	blx	r3
    ade6:	0003      	movs	r3, r0
    ade8:	3301      	adds	r3, #1
    adea:	d102      	bne.n	adf2 <f_puts+0x2a>
    adec:	2301      	movs	r3, #1
    adee:	425b      	negs	r3, r3
    adf0:	e00a      	b.n	ae08 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    adf2:	687b      	ldr	r3, [r7, #4]
    adf4:	3301      	adds	r3, #1
    adf6:	607b      	str	r3, [r7, #4]
    adf8:	68fb      	ldr	r3, [r7, #12]
    adfa:	3301      	adds	r3, #1
    adfc:	60fb      	str	r3, [r7, #12]
    adfe:	687b      	ldr	r3, [r7, #4]
    ae00:	781b      	ldrb	r3, [r3, #0]
    ae02:	2b00      	cmp	r3, #0
    ae04:	d1e8      	bne.n	add8 <f_puts+0x10>
	}
	return n;
    ae06:	68fb      	ldr	r3, [r7, #12]
}
    ae08:	0018      	movs	r0, r3
    ae0a:	46bd      	mov	sp, r7
    ae0c:	b004      	add	sp, #16
    ae0e:	bd80      	pop	{r7, pc}
    ae10:	0000ad81 	.word	0x0000ad81

0000ae14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    ae14:	b580      	push	{r7, lr}
    ae16:	b084      	sub	sp, #16
    ae18:	af00      	add	r7, sp, #0
    ae1a:	0002      	movs	r2, r0
    ae1c:	6039      	str	r1, [r7, #0]
    ae1e:	1dbb      	adds	r3, r7, #6
    ae20:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    ae22:	1dbb      	adds	r3, r7, #6
    ae24:	881b      	ldrh	r3, [r3, #0]
    ae26:	2b7f      	cmp	r3, #127	; 0x7f
    ae28:	d805      	bhi.n	ae36 <ff_convert+0x22>
		c = src;
    ae2a:	230e      	movs	r3, #14
    ae2c:	18fb      	adds	r3, r7, r3
    ae2e:	1dba      	adds	r2, r7, #6
    ae30:	8812      	ldrh	r2, [r2, #0]
    ae32:	801a      	strh	r2, [r3, #0]
    ae34:	e03a      	b.n	aeac <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    ae36:	683b      	ldr	r3, [r7, #0]
    ae38:	2b00      	cmp	r3, #0
    ae3a:	d010      	beq.n	ae5e <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    ae3c:	1dbb      	adds	r3, r7, #6
    ae3e:	881b      	ldrh	r3, [r3, #0]
    ae40:	2bff      	cmp	r3, #255	; 0xff
    ae42:	d807      	bhi.n	ae54 <ff_convert+0x40>
    ae44:	1dbb      	adds	r3, r7, #6
    ae46:	881b      	ldrh	r3, [r3, #0]
    ae48:	3b80      	subs	r3, #128	; 0x80
    ae4a:	001a      	movs	r2, r3
    ae4c:	4b1b      	ldr	r3, [pc, #108]	; (aebc <ff_convert+0xa8>)
    ae4e:	0052      	lsls	r2, r2, #1
    ae50:	5ad2      	ldrh	r2, [r2, r3]
    ae52:	e000      	b.n	ae56 <ff_convert+0x42>
    ae54:	2200      	movs	r2, #0
    ae56:	230e      	movs	r3, #14
    ae58:	18fb      	adds	r3, r7, r3
    ae5a:	801a      	strh	r2, [r3, #0]
    ae5c:	e026      	b.n	aeac <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    ae5e:	230e      	movs	r3, #14
    ae60:	18fb      	adds	r3, r7, r3
    ae62:	2200      	movs	r2, #0
    ae64:	801a      	strh	r2, [r3, #0]
    ae66:	e010      	b.n	ae8a <ff_convert+0x76>
				if (src == Tbl[c]) break;
    ae68:	230e      	movs	r3, #14
    ae6a:	18fb      	adds	r3, r7, r3
    ae6c:	881a      	ldrh	r2, [r3, #0]
    ae6e:	4b13      	ldr	r3, [pc, #76]	; (aebc <ff_convert+0xa8>)
    ae70:	0052      	lsls	r2, r2, #1
    ae72:	5ad3      	ldrh	r3, [r2, r3]
    ae74:	1dba      	adds	r2, r7, #6
    ae76:	8812      	ldrh	r2, [r2, #0]
    ae78:	429a      	cmp	r2, r3
    ae7a:	d00c      	beq.n	ae96 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    ae7c:	230e      	movs	r3, #14
    ae7e:	18fb      	adds	r3, r7, r3
    ae80:	881a      	ldrh	r2, [r3, #0]
    ae82:	230e      	movs	r3, #14
    ae84:	18fb      	adds	r3, r7, r3
    ae86:	3201      	adds	r2, #1
    ae88:	801a      	strh	r2, [r3, #0]
    ae8a:	230e      	movs	r3, #14
    ae8c:	18fb      	adds	r3, r7, r3
    ae8e:	881b      	ldrh	r3, [r3, #0]
    ae90:	2b7f      	cmp	r3, #127	; 0x7f
    ae92:	d9e9      	bls.n	ae68 <ff_convert+0x54>
    ae94:	e000      	b.n	ae98 <ff_convert+0x84>
				if (src == Tbl[c]) break;
    ae96:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    ae98:	230e      	movs	r3, #14
    ae9a:	18fb      	adds	r3, r7, r3
    ae9c:	881b      	ldrh	r3, [r3, #0]
    ae9e:	3380      	adds	r3, #128	; 0x80
    aea0:	b29a      	uxth	r2, r3
    aea2:	230e      	movs	r3, #14
    aea4:	18fb      	adds	r3, r7, r3
    aea6:	21ff      	movs	r1, #255	; 0xff
    aea8:	400a      	ands	r2, r1
    aeaa:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    aeac:	230e      	movs	r3, #14
    aeae:	18fb      	adds	r3, r7, r3
    aeb0:	881b      	ldrh	r3, [r3, #0]
}
    aeb2:	0018      	movs	r0, r3
    aeb4:	46bd      	mov	sp, r7
    aeb6:	b004      	add	sp, #16
    aeb8:	bd80      	pop	{r7, pc}
    aeba:	46c0      	nop			; (mov r8, r8)
    aebc:	0000c650 	.word	0x0000c650

0000aec0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    aec0:	b580      	push	{r7, lr}
    aec2:	b084      	sub	sp, #16
    aec4:	af00      	add	r7, sp, #0
    aec6:	0002      	movs	r2, r0
    aec8:	1dbb      	adds	r3, r7, #6
    aeca:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    aecc:	2300      	movs	r3, #0
    aece:	60fb      	str	r3, [r7, #12]
    aed0:	e002      	b.n	aed8 <ff_wtoupper+0x18>
    aed2:	68fb      	ldr	r3, [r7, #12]
    aed4:	3301      	adds	r3, #1
    aed6:	60fb      	str	r3, [r7, #12]
    aed8:	4b0f      	ldr	r3, [pc, #60]	; (af18 <ff_wtoupper+0x58>)
    aeda:	68fa      	ldr	r2, [r7, #12]
    aedc:	0052      	lsls	r2, r2, #1
    aede:	5ad3      	ldrh	r3, [r2, r3]
    aee0:	2b00      	cmp	r3, #0
    aee2:	d007      	beq.n	aef4 <ff_wtoupper+0x34>
    aee4:	4b0c      	ldr	r3, [pc, #48]	; (af18 <ff_wtoupper+0x58>)
    aee6:	68fa      	ldr	r2, [r7, #12]
    aee8:	0052      	lsls	r2, r2, #1
    aeea:	5ad3      	ldrh	r3, [r2, r3]
    aeec:	1dba      	adds	r2, r7, #6
    aeee:	8812      	ldrh	r2, [r2, #0]
    aef0:	429a      	cmp	r2, r3
    aef2:	d1ee      	bne.n	aed2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    aef4:	4b08      	ldr	r3, [pc, #32]	; (af18 <ff_wtoupper+0x58>)
    aef6:	68fa      	ldr	r2, [r7, #12]
    aef8:	0052      	lsls	r2, r2, #1
    aefa:	5ad3      	ldrh	r3, [r2, r3]
    aefc:	2b00      	cmp	r3, #0
    aefe:	d004      	beq.n	af0a <ff_wtoupper+0x4a>
    af00:	4b06      	ldr	r3, [pc, #24]	; (af1c <ff_wtoupper+0x5c>)
    af02:	68fa      	ldr	r2, [r7, #12]
    af04:	0052      	lsls	r2, r2, #1
    af06:	5ad3      	ldrh	r3, [r2, r3]
    af08:	e001      	b.n	af0e <ff_wtoupper+0x4e>
    af0a:	1dbb      	adds	r3, r7, #6
    af0c:	881b      	ldrh	r3, [r3, #0]
}
    af0e:	0018      	movs	r0, r3
    af10:	46bd      	mov	sp, r7
    af12:	b004      	add	sp, #16
    af14:	bd80      	pop	{r7, pc}
    af16:	46c0      	nop			; (mov r8, r8)
    af18:	0000c750 	.word	0x0000c750
    af1c:	0000c930 	.word	0x0000c930

0000af20 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    af20:	b580      	push	{r7, lr}
    af22:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    af24:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    af28:	4b02      	ldr	r3, [pc, #8]	; (af34 <NVIC_SystemReset+0x14>)
    af2a:	4a03      	ldr	r2, [pc, #12]	; (af38 <NVIC_SystemReset+0x18>)
    af2c:	60da      	str	r2, [r3, #12]
    af2e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    af32:	e7fe      	b.n	af32 <NVIC_SystemReset+0x12>
    af34:	e000ed00 	.word	0xe000ed00
    af38:	05fa0004 	.word	0x05fa0004

0000af3c <system_apb_clock_set_mask>:
{
    af3c:	b580      	push	{r7, lr}
    af3e:	b082      	sub	sp, #8
    af40:	af00      	add	r7, sp, #0
    af42:	0002      	movs	r2, r0
    af44:	6039      	str	r1, [r7, #0]
    af46:	1dfb      	adds	r3, r7, #7
    af48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    af4a:	1dfb      	adds	r3, r7, #7
    af4c:	781b      	ldrb	r3, [r3, #0]
    af4e:	2b01      	cmp	r3, #1
    af50:	d00a      	beq.n	af68 <system_apb_clock_set_mask+0x2c>
    af52:	2b02      	cmp	r3, #2
    af54:	d00f      	beq.n	af76 <system_apb_clock_set_mask+0x3a>
    af56:	2b00      	cmp	r3, #0
    af58:	d114      	bne.n	af84 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    af5a:	4b0e      	ldr	r3, [pc, #56]	; (af94 <system_apb_clock_set_mask+0x58>)
    af5c:	4a0d      	ldr	r2, [pc, #52]	; (af94 <system_apb_clock_set_mask+0x58>)
    af5e:	6991      	ldr	r1, [r2, #24]
    af60:	683a      	ldr	r2, [r7, #0]
    af62:	430a      	orrs	r2, r1
    af64:	619a      	str	r2, [r3, #24]
			break;
    af66:	e00f      	b.n	af88 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    af68:	4b0a      	ldr	r3, [pc, #40]	; (af94 <system_apb_clock_set_mask+0x58>)
    af6a:	4a0a      	ldr	r2, [pc, #40]	; (af94 <system_apb_clock_set_mask+0x58>)
    af6c:	69d1      	ldr	r1, [r2, #28]
    af6e:	683a      	ldr	r2, [r7, #0]
    af70:	430a      	orrs	r2, r1
    af72:	61da      	str	r2, [r3, #28]
			break;
    af74:	e008      	b.n	af88 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    af76:	4b07      	ldr	r3, [pc, #28]	; (af94 <system_apb_clock_set_mask+0x58>)
    af78:	4a06      	ldr	r2, [pc, #24]	; (af94 <system_apb_clock_set_mask+0x58>)
    af7a:	6a11      	ldr	r1, [r2, #32]
    af7c:	683a      	ldr	r2, [r7, #0]
    af7e:	430a      	orrs	r2, r1
    af80:	621a      	str	r2, [r3, #32]
			break;
    af82:	e001      	b.n	af88 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    af84:	2317      	movs	r3, #23
    af86:	e000      	b.n	af8a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    af88:	2300      	movs	r3, #0
}
    af8a:	0018      	movs	r0, r3
    af8c:	46bd      	mov	sp, r7
    af8e:	b002      	add	sp, #8
    af90:	bd80      	pop	{r7, pc}
    af92:	46c0      	nop			; (mov r8, r8)
    af94:	40000400 	.word	0x40000400

0000af98 <nvm_get_config_defaults>:
{
    af98:	b580      	push	{r7, lr}
    af9a:	b082      	sub	sp, #8
    af9c:	af00      	add	r7, sp, #0
    af9e:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    afa0:	687b      	ldr	r3, [r7, #4]
    afa2:	2200      	movs	r2, #0
    afa4:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    afa6:	687b      	ldr	r3, [r7, #4]
    afa8:	2201      	movs	r2, #1
    afaa:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    afac:	4b08      	ldr	r3, [pc, #32]	; (afd0 <nvm_get_config_defaults+0x38>)
    afae:	685b      	ldr	r3, [r3, #4]
    afb0:	06db      	lsls	r3, r3, #27
    afb2:	0f1b      	lsrs	r3, r3, #28
    afb4:	b2db      	uxtb	r3, r3
    afb6:	001a      	movs	r2, r3
    afb8:	687b      	ldr	r3, [r7, #4]
    afba:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    afbc:	687b      	ldr	r3, [r7, #4]
    afbe:	2200      	movs	r2, #0
    afc0:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    afc2:	687b      	ldr	r3, [r7, #4]
    afc4:	2200      	movs	r2, #0
    afc6:	711a      	strb	r2, [r3, #4]
}
    afc8:	46c0      	nop			; (mov r8, r8)
    afca:	46bd      	mov	sp, r7
    afcc:	b002      	add	sp, #8
    afce:	bd80      	pop	{r7, pc}
    afd0:	41004000 	.word	0x41004000

0000afd4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    afd4:	b580      	push	{r7, lr}
    afd6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    afd8:	4b02      	ldr	r3, [pc, #8]	; (afe4 <system_reset+0x10>)
    afda:	4798      	blx	r3
}
    afdc:	46c0      	nop			; (mov r8, r8)
    afde:	46bd      	mov	sp, r7
    afe0:	bd80      	pop	{r7, pc}
    afe2:	46c0      	nop			; (mov r8, r8)
    afe4:	0000af21 	.word	0x0000af21

0000afe8 <system_interrupt_enable_global>:
{
    afe8:	b580      	push	{r7, lr}
    afea:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    afec:	4b04      	ldr	r3, [pc, #16]	; (b000 <system_interrupt_enable_global+0x18>)
    afee:	2201      	movs	r2, #1
    aff0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    aff2:	f3bf 8f5f 	dmb	sy
    aff6:	b662      	cpsie	i
}
    aff8:	46c0      	nop			; (mov r8, r8)
    affa:	46bd      	mov	sp, r7
    affc:	bd80      	pop	{r7, pc}
    affe:	46c0      	nop			; (mov r8, r8)
    b000:	20000009 	.word	0x20000009

0000b004 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    b004:	b580      	push	{r7, lr}
    b006:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    b008:	2102      	movs	r1, #2
    b00a:	2001      	movs	r0, #1
    b00c:	4b02      	ldr	r3, [pc, #8]	; (b018 <dsu_crc32_init+0x14>)
    b00e:	4798      	blx	r3
#endif

}
    b010:	46c0      	nop			; (mov r8, r8)
    b012:	46bd      	mov	sp, r7
    b014:	bd80      	pop	{r7, pc}
    b016:	46c0      	nop			; (mov r8, r8)
    b018:	0000af3d 	.word	0x0000af3d

0000b01c <main>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void)
{
    b01c:	b580      	push	{r7, lr}
    b01e:	af00      	add	r7, sp, #0

	/*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
	system_init();
    b020:	4b55      	ldr	r3, [pc, #340]	; (b178 <main+0x15c>)
    b022:	4798      	blx	r3
	delay_init();
    b024:	4b55      	ldr	r3, [pc, #340]	; (b17c <main+0x160>)
    b026:	4798      	blx	r3
	InitializeSerialConsole();
    b028:	4b55      	ldr	r3, [pc, #340]	; (b180 <main+0x164>)
    b02a:	4798      	blx	r3
	system_interrupt_enable_global();
    b02c:	4b55      	ldr	r3, [pc, #340]	; (b184 <main+0x168>)
    b02e:	4798      	blx	r3
	/* Initialize SD MMC stack */
	sd_mmc_init();
    b030:	4b55      	ldr	r3, [pc, #340]	; (b188 <main+0x16c>)
    b032:	4798      	blx	r3

	//Initialize the NVM driver
	configure_nvm();
    b034:	4b55      	ldr	r3, [pc, #340]	; (b18c <main+0x170>)
    b036:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    b038:	4b55      	ldr	r3, [pc, #340]	; (b190 <main+0x174>)
    b03a:	2201      	movs	r2, #1
    b03c:	701a      	strb	r2, [r3, #0]
    b03e:	f3bf 8f5f 	dmb	sy
    b042:	b662      	cpsie	i

	//Configure CRC32
	dsu_crc32_init();
    b044:	4b53      	ldr	r3, [pc, #332]	; (b194 <main+0x178>)
    b046:	4798      	blx	r3

	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    b048:	4b53      	ldr	r3, [pc, #332]	; (b198 <main+0x17c>)
    b04a:	0018      	movs	r0, r3
    b04c:	4b53      	ldr	r3, [pc, #332]	; (b19c <main+0x180>)
    b04e:	4798      	blx	r3

	/*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

	//EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
	//See function inside to see how to open a file
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    b050:	4b53      	ldr	r3, [pc, #332]	; (b1a0 <main+0x184>)
    b052:	0018      	movs	r0, r3
    b054:	4b51      	ldr	r3, [pc, #324]	; (b19c <main+0x180>)
    b056:	4798      	blx	r3

	if(StartFilesystemAndTest() == false)
    b058:	4b52      	ldr	r3, [pc, #328]	; (b1a4 <main+0x188>)
    b05a:	4798      	blx	r3
    b05c:	0003      	movs	r3, r0
    b05e:	001a      	movs	r2, r3
    b060:	2301      	movs	r3, #1
    b062:	4053      	eors	r3, r2
    b064:	b2db      	uxtb	r3, r3
    b066:	2b00      	cmp	r3, #0
    b068:	d00a      	beq.n	b080 <main+0x64>
	{
		SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    b06a:	4b4f      	ldr	r3, [pc, #316]	; (b1a8 <main+0x18c>)
    b06c:	0018      	movs	r0, r3
    b06e:	4b4b      	ldr	r3, [pc, #300]	; (b19c <main+0x180>)
    b070:	4798      	blx	r3
		delay_cycles_ms(5000);
    b072:	4b4e      	ldr	r3, [pc, #312]	; (b1ac <main+0x190>)
    b074:	0018      	movs	r0, r3
    b076:	4b4e      	ldr	r3, [pc, #312]	; (b1b0 <main+0x194>)
    b078:	4798      	blx	r3
		system_reset();
    b07a:	4b4e      	ldr	r3, [pc, #312]	; (b1b4 <main+0x198>)
    b07c:	4798      	blx	r3
    b07e:	e003      	b.n	b088 <main+0x6c>
	}
	else
	{
		SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    b080:	4b4d      	ldr	r3, [pc, #308]	; (b1b8 <main+0x19c>)
    b082:	0018      	movs	r0, r3
    b084:	4b45      	ldr	r3, [pc, #276]	; (b19c <main+0x180>)
    b086:	4798      	blx	r3

	/*3.) STARTS BOOTLOADER HERE!*/
	/*********************************************************** BOOTLOADER START ******************************************************************/
	
	static FILINFO fno;
	if (f_stat(flag_A, &fno) == FR_OK){
    b088:	4a4c      	ldr	r2, [pc, #304]	; (b1bc <main+0x1a0>)
    b08a:	4b4d      	ldr	r3, [pc, #308]	; (b1c0 <main+0x1a4>)
    b08c:	0011      	movs	r1, r2
    b08e:	0018      	movs	r0, r3
    b090:	4b4c      	ldr	r3, [pc, #304]	; (b1c4 <main+0x1a8>)
    b092:	4798      	blx	r3
    b094:	1e03      	subs	r3, r0, #0
    b096:	d15d      	bne.n	b154 <main+0x138>
		SerialConsoleWriteString("Flag A found ! Updating in 3 seconds ! \r\n");
    b098:	4b4b      	ldr	r3, [pc, #300]	; (b1c8 <main+0x1ac>)
    b09a:	0018      	movs	r0, r3
    b09c:	4b3f      	ldr	r3, [pc, #252]	; (b19c <main+0x180>)
    b09e:	4798      	blx	r3
		free_fw_mem() ;// Calculate the number of rows to erase. Erase them and check each time erasing a row.
    b0a0:	4b4a      	ldr	r3, [pc, #296]	; (b1cc <main+0x1b0>)
    b0a2:	4798      	blx	r3
		load_bin(bin_file);// Read the binary file. Check CRC each time a chunk is read.
    b0a4:	4b4a      	ldr	r3, [pc, #296]	; (b1d0 <main+0x1b4>)
    b0a6:	0018      	movs	r0, r3
    b0a8:	4b4a      	ldr	r3, [pc, #296]	; (b1d4 <main+0x1b8>)
    b0aa:	4798      	blx	r3
		res = f_unlink("FlagA.txt");
    b0ac:	4b4a      	ldr	r3, [pc, #296]	; (b1d8 <main+0x1bc>)
    b0ae:	0018      	movs	r0, r3
    b0b0:	4b4a      	ldr	r3, [pc, #296]	; (b1dc <main+0x1c0>)
    b0b2:	4798      	blx	r3
    b0b4:	0003      	movs	r3, r0
    b0b6:	001a      	movs	r2, r3
    b0b8:	4b49      	ldr	r3, [pc, #292]	; (b1e0 <main+0x1c4>)
    b0ba:	701a      	strb	r2, [r3, #0]
		res = f_unlink("FW.bin");
    b0bc:	4b49      	ldr	r3, [pc, #292]	; (b1e4 <main+0x1c8>)
    b0be:	0018      	movs	r0, r3
    b0c0:	4b46      	ldr	r3, [pc, #280]	; (b1dc <main+0x1c0>)
    b0c2:	4798      	blx	r3
    b0c4:	0003      	movs	r3, r0
    b0c6:	001a      	movs	r2, r3
    b0c8:	4b45      	ldr	r3, [pc, #276]	; (b1e0 <main+0x1c4>)
    b0ca:	701a      	strb	r2, [r3, #0]
		if (res == FR_OK || res == FR_NO_FILE)
    b0cc:	4b44      	ldr	r3, [pc, #272]	; (b1e0 <main+0x1c4>)
    b0ce:	781b      	ldrb	r3, [r3, #0]
    b0d0:	2b00      	cmp	r3, #0
    b0d2:	d003      	beq.n	b0dc <main+0xc0>
    b0d4:	4b42      	ldr	r3, [pc, #264]	; (b1e0 <main+0x1c4>)
    b0d6:	781b      	ldrb	r3, [r3, #0]
    b0d8:	2b04      	cmp	r3, #4
    b0da:	d137      	bne.n	b14c <main+0x130>
		{SerialConsoleWriteString("Binary is deleted.\r\n");
    b0dc:	4b42      	ldr	r3, [pc, #264]	; (b1e8 <main+0x1cc>)
    b0de:	0018      	movs	r0, r3
    b0e0:	4b2e      	ldr	r3, [pc, #184]	; (b19c <main+0x180>)
    b0e2:	4798      	blx	r3
			SerialConsoleWriteString("System will reset in 5 seconds.\r\n");
    b0e4:	4b41      	ldr	r3, [pc, #260]	; (b1ec <main+0x1d0>)
    b0e6:	0018      	movs	r0, r3
    b0e8:	4b2c      	ldr	r3, [pc, #176]	; (b19c <main+0x180>)
    b0ea:	4798      	blx	r3
			SerialConsoleWriteString("5...\r\n");
    b0ec:	4b40      	ldr	r3, [pc, #256]	; (b1f0 <main+0x1d4>)
    b0ee:	0018      	movs	r0, r3
    b0f0:	4b2a      	ldr	r3, [pc, #168]	; (b19c <main+0x180>)
    b0f2:	4798      	blx	r3
			delay_cycles_ms(1000);
    b0f4:	23fa      	movs	r3, #250	; 0xfa
    b0f6:	009b      	lsls	r3, r3, #2
    b0f8:	0018      	movs	r0, r3
    b0fa:	4b2d      	ldr	r3, [pc, #180]	; (b1b0 <main+0x194>)
    b0fc:	4798      	blx	r3
			SerialConsoleWriteString("4...\r\n");
    b0fe:	4b3d      	ldr	r3, [pc, #244]	; (b1f4 <main+0x1d8>)
    b100:	0018      	movs	r0, r3
    b102:	4b26      	ldr	r3, [pc, #152]	; (b19c <main+0x180>)
    b104:	4798      	blx	r3
			delay_cycles_ms(1000);
    b106:	23fa      	movs	r3, #250	; 0xfa
    b108:	009b      	lsls	r3, r3, #2
    b10a:	0018      	movs	r0, r3
    b10c:	4b28      	ldr	r3, [pc, #160]	; (b1b0 <main+0x194>)
    b10e:	4798      	blx	r3
			SerialConsoleWriteString("3...\r\n");
    b110:	4b39      	ldr	r3, [pc, #228]	; (b1f8 <main+0x1dc>)
    b112:	0018      	movs	r0, r3
    b114:	4b21      	ldr	r3, [pc, #132]	; (b19c <main+0x180>)
    b116:	4798      	blx	r3
			delay_cycles_ms(1000);
    b118:	23fa      	movs	r3, #250	; 0xfa
    b11a:	009b      	lsls	r3, r3, #2
    b11c:	0018      	movs	r0, r3
    b11e:	4b24      	ldr	r3, [pc, #144]	; (b1b0 <main+0x194>)
    b120:	4798      	blx	r3
			SerialConsoleWriteString("2...\r\n");
    b122:	4b36      	ldr	r3, [pc, #216]	; (b1fc <main+0x1e0>)
    b124:	0018      	movs	r0, r3
    b126:	4b1d      	ldr	r3, [pc, #116]	; (b19c <main+0x180>)
    b128:	4798      	blx	r3
			delay_cycles_ms(1000);
    b12a:	23fa      	movs	r3, #250	; 0xfa
    b12c:	009b      	lsls	r3, r3, #2
    b12e:	0018      	movs	r0, r3
    b130:	4b1f      	ldr	r3, [pc, #124]	; (b1b0 <main+0x194>)
    b132:	4798      	blx	r3
			SerialConsoleWriteString("1...\r\n\n\n\n");
    b134:	4b32      	ldr	r3, [pc, #200]	; (b200 <main+0x1e4>)
    b136:	0018      	movs	r0, r3
    b138:	4b18      	ldr	r3, [pc, #96]	; (b19c <main+0x180>)
    b13a:	4798      	blx	r3
			delay_cycles_ms(1000);
    b13c:	23fa      	movs	r3, #250	; 0xfa
    b13e:	009b      	lsls	r3, r3, #2
    b140:	0018      	movs	r0, r3
    b142:	4b1b      	ldr	r3, [pc, #108]	; (b1b0 <main+0x194>)
    b144:	4798      	blx	r3
		system_reset();}
    b146:	4b1b      	ldr	r3, [pc, #108]	; (b1b4 <main+0x198>)
    b148:	4798      	blx	r3
    b14a:	e003      	b.n	b154 <main+0x138>
		else
		{SerialConsoleWriteString("Binary delete failed!\r\n");}
    b14c:	4b2d      	ldr	r3, [pc, #180]	; (b204 <main+0x1e8>)
    b14e:	0018      	movs	r0, r3
    b150:	4b12      	ldr	r3, [pc, #72]	; (b19c <main+0x180>)
    b152:	4798      	blx	r3
	/*********************************************************** BOOTLOADER END ********************************************************************/



	//4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    b154:	4b2c      	ldr	r3, [pc, #176]	; (b208 <main+0x1ec>)
    b156:	0018      	movs	r0, r3
    b158:	4b10      	ldr	r3, [pc, #64]	; (b19c <main+0x180>)
    b15a:	4798      	blx	r3
	delay_cycles_ms(100); //Delay to allow print
    b15c:	2064      	movs	r0, #100	; 0x64
    b15e:	4b14      	ldr	r3, [pc, #80]	; (b1b0 <main+0x194>)
    b160:	4798      	blx	r3
		
		//Deinitialize HW - deinitialize started HW here!
		DeinitializeSerialConsole(); //Deinitializes UART
    b162:	4b2a      	ldr	r3, [pc, #168]	; (b20c <main+0x1f0>)
    b164:	4798      	blx	r3
		sd_mmc_deinit(); //Deinitialize SD CARD
    b166:	4b2a      	ldr	r3, [pc, #168]	; (b210 <main+0x1f4>)
    b168:	4798      	blx	r3


		//Jump to application
		jumpToApplication();
    b16a:	4b2a      	ldr	r3, [pc, #168]	; (b214 <main+0x1f8>)
    b16c:	4798      	blx	r3
    b16e:	2300      	movs	r3, #0

		//Should not reach here! The device should have jumped to the main FW.
	
}
    b170:	0018      	movs	r0, r3
    b172:	46bd      	mov	sp, r7
    b174:	bd80      	pop	{r7, pc}
    b176:	46c0      	nop			; (mov r8, r8)
    b178:	00006e11 	.word	0x00006e11
    b17c:	00000149 	.word	0x00000149
    b180:	00000f4d 	.word	0x00000f4d
    b184:	0000afe9 	.word	0x0000afe9
    b188:	00001e59 	.word	0x00001e59
    b18c:	0000b4f9 	.word	0x0000b4f9
    b190:	20000009 	.word	0x20000009
    b194:	0000b005 	.word	0x0000b005
    b198:	0000cb10 	.word	0x0000cb10
    b19c:	00000fd9 	.word	0x00000fd9
    b1a0:	0000cb2c 	.word	0x0000cb2c
    b1a4:	0000b219 	.word	0x0000b219
    b1a8:	0000cb54 	.word	0x0000cb54
    b1ac:	00001388 	.word	0x00001388
    b1b0:	000001a1 	.word	0x000001a1
    b1b4:	0000afd5 	.word	0x0000afd5
    b1b8:	0000cba0 	.word	0x0000cba0
    b1bc:	20000198 	.word	0x20000198
    b1c0:	2000002c 	.word	0x2000002c
    b1c4:	0000aa69 	.word	0x0000aa69
    b1c8:	0000cbd4 	.word	0x0000cbd4
    b1cc:	0000b525 	.word	0x0000b525
    b1d0:	20000038 	.word	0x20000038
    b1d4:	0000b5d1 	.word	0x0000b5d1
    b1d8:	0000cc00 	.word	0x0000cc00
    b1dc:	0000ab21 	.word	0x0000ab21
    b1e0:	20000ce0 	.word	0x20000ce0
    b1e4:	0000cc0c 	.word	0x0000cc0c
    b1e8:	0000cc14 	.word	0x0000cc14
    b1ec:	0000cc2c 	.word	0x0000cc2c
    b1f0:	0000cc50 	.word	0x0000cc50
    b1f4:	0000cc58 	.word	0x0000cc58
    b1f8:	0000cc60 	.word	0x0000cc60
    b1fc:	0000cc68 	.word	0x0000cc68
    b200:	0000cc70 	.word	0x0000cc70
    b204:	0000cc7c 	.word	0x0000cc7c
    b208:	0000cc94 	.word	0x0000cc94
    b20c:	00000fbd 	.word	0x00000fbd
    b210:	00002c01 	.word	0x00002c01
    b214:	0000b4c1 	.word	0x0000b4c1

0000b218 <StartFilesystemAndTest>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       Returns true is SD card and file system test passed. False otherwise.
******************************************************************************/
static bool StartFilesystemAndTest(void)
{
    b218:	b590      	push	{r4, r7, lr}
    b21a:	b0c5      	sub	sp, #276	; 0x114
    b21c:	af00      	add	r7, sp, #0
	bool sdCardPass = true;
    b21e:	2310      	movs	r3, #16
    b220:	33ff      	adds	r3, #255	; 0xff
    b222:	18fb      	adds	r3, r7, r3
    b224:	2201      	movs	r2, #1
    b226:	701a      	strb	r2, [r3, #0]
	uint8_t binbuff[256];

	//Before we begin - fill buffer for binary write test
	//Fill binbuff with values 0x00 - 0xFF
	for(int i = 0; i < 256; i++)
    b228:	2300      	movs	r3, #0
    b22a:	2284      	movs	r2, #132	; 0x84
    b22c:	0052      	lsls	r2, r2, #1
    b22e:	18ba      	adds	r2, r7, r2
    b230:	6013      	str	r3, [r2, #0]
    b232:	e019      	b.n	b268 <StartFilesystemAndTest+0x50>
	{
		binbuff[i] = i;
    b234:	2384      	movs	r3, #132	; 0x84
    b236:	005b      	lsls	r3, r3, #1
    b238:	18fb      	adds	r3, r7, r3
    b23a:	681b      	ldr	r3, [r3, #0]
    b23c:	b2d9      	uxtb	r1, r3
    b23e:	4b84      	ldr	r3, [pc, #528]	; (b450 <StartFilesystemAndTest+0x238>)
    b240:	2288      	movs	r2, #136	; 0x88
    b242:	0052      	lsls	r2, r2, #1
    b244:	18ba      	adds	r2, r7, r2
    b246:	18d2      	adds	r2, r2, r3
    b248:	2384      	movs	r3, #132	; 0x84
    b24a:	005b      	lsls	r3, r3, #1
    b24c:	18fb      	adds	r3, r7, r3
    b24e:	681b      	ldr	r3, [r3, #0]
    b250:	18d3      	adds	r3, r2, r3
    b252:	1c0a      	adds	r2, r1, #0
    b254:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
    b256:	2384      	movs	r3, #132	; 0x84
    b258:	005b      	lsls	r3, r3, #1
    b25a:	18fb      	adds	r3, r7, r3
    b25c:	681b      	ldr	r3, [r3, #0]
    b25e:	3301      	adds	r3, #1
    b260:	2284      	movs	r2, #132	; 0x84
    b262:	0052      	lsls	r2, r2, #1
    b264:	18ba      	adds	r2, r7, r2
    b266:	6013      	str	r3, [r2, #0]
    b268:	2384      	movs	r3, #132	; 0x84
    b26a:	005b      	lsls	r3, r3, #1
    b26c:	18fb      	adds	r3, r7, r3
    b26e:	681b      	ldr	r3, [r3, #0]
    b270:	2bff      	cmp	r3, #255	; 0xff
    b272:	dddf      	ble.n	b234 <StartFilesystemAndTest+0x1c>
	}

	//MOUNT SD CARD
	Ctrl_status sdStatus= SdCard_Initiate();
    b274:	2308      	movs	r3, #8
    b276:	33ff      	adds	r3, #255	; 0xff
    b278:	18fc      	adds	r4, r7, r3
    b27a:	4b76      	ldr	r3, [pc, #472]	; (b454 <StartFilesystemAndTest+0x23c>)
    b27c:	4798      	blx	r3
    b27e:	0003      	movs	r3, r0
    b280:	7023      	strb	r3, [r4, #0]
	if(sdStatus == CTRL_GOOD) //If the SD card is good we continue mounting the system!
    b282:	2308      	movs	r3, #8
    b284:	33ff      	adds	r3, #255	; 0xff
    b286:	18fb      	adds	r3, r7, r3
    b288:	781b      	ldrb	r3, [r3, #0]
    b28a:	2b00      	cmp	r3, #0
    b28c:	d000      	beq.n	b290 <StartFilesystemAndTest+0x78>
    b28e:	e0ce      	b.n	b42e <StartFilesystemAndTest+0x216>
	{
		SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    b290:	4b71      	ldr	r3, [pc, #452]	; (b458 <StartFilesystemAndTest+0x240>)
    b292:	0018      	movs	r0, r3
    b294:	4b71      	ldr	r3, [pc, #452]	; (b45c <StartFilesystemAndTest+0x244>)
    b296:	4798      	blx	r3

		//Attempt to mount a FAT file system on the SD Card using FATFS
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    b298:	4b71      	ldr	r3, [pc, #452]	; (b460 <StartFilesystemAndTest+0x248>)
    b29a:	0018      	movs	r0, r3
    b29c:	4b6f      	ldr	r3, [pc, #444]	; (b45c <StartFilesystemAndTest+0x244>)
    b29e:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    b2a0:	238c      	movs	r3, #140	; 0x8c
    b2a2:	009a      	lsls	r2, r3, #2
    b2a4:	4b6f      	ldr	r3, [pc, #444]	; (b464 <StartFilesystemAndTest+0x24c>)
    b2a6:	2100      	movs	r1, #0
    b2a8:	0018      	movs	r0, r3
    b2aa:	4b6f      	ldr	r3, [pc, #444]	; (b468 <StartFilesystemAndTest+0x250>)
    b2ac:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs); //Order FATFS Mount
    b2ae:	4b6d      	ldr	r3, [pc, #436]	; (b464 <StartFilesystemAndTest+0x24c>)
    b2b0:	0019      	movs	r1, r3
    b2b2:	2000      	movs	r0, #0
    b2b4:	4b6d      	ldr	r3, [pc, #436]	; (b46c <StartFilesystemAndTest+0x254>)
    b2b6:	4798      	blx	r3
    b2b8:	0003      	movs	r3, r0
    b2ba:	001a      	movs	r2, r3
    b2bc:	4b6c      	ldr	r3, [pc, #432]	; (b470 <StartFilesystemAndTest+0x258>)
    b2be:	701a      	strb	r2, [r3, #0]
		if (FR_INVALID_DRIVE == res)
    b2c0:	4b6b      	ldr	r3, [pc, #428]	; (b470 <StartFilesystemAndTest+0x258>)
    b2c2:	781b      	ldrb	r3, [r3, #0]
    b2c4:	2b0b      	cmp	r3, #11
    b2c6:	d10d      	bne.n	b2e4 <StartFilesystemAndTest+0xcc>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    b2c8:	4b69      	ldr	r3, [pc, #420]	; (b470 <StartFilesystemAndTest+0x258>)
    b2ca:	781b      	ldrb	r3, [r3, #0]
    b2cc:	001a      	movs	r2, r3
    b2ce:	4b69      	ldr	r3, [pc, #420]	; (b474 <StartFilesystemAndTest+0x25c>)
    b2d0:	0019      	movs	r1, r3
    b2d2:	2000      	movs	r0, #0
    b2d4:	4b68      	ldr	r3, [pc, #416]	; (b478 <StartFilesystemAndTest+0x260>)
    b2d6:	4798      	blx	r3
			sdCardPass = false;
    b2d8:	2310      	movs	r3, #16
    b2da:	33ff      	adds	r3, #255	; 0xff
    b2dc:	18fb      	adds	r3, r7, r3
    b2de:	2200      	movs	r2, #0
    b2e0:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    b2e2:	e09f      	b.n	b424 <StartFilesystemAndTest+0x20c>
		}
		SerialConsoleWriteString("[OK]\r\n");
    b2e4:	4b65      	ldr	r3, [pc, #404]	; (b47c <StartFilesystemAndTest+0x264>)
    b2e6:	0018      	movs	r0, r3
    b2e8:	4b5c      	ldr	r3, [pc, #368]	; (b45c <StartFilesystemAndTest+0x244>)
    b2ea:	4798      	blx	r3

		//Create and open a file
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    b2ec:	4b64      	ldr	r3, [pc, #400]	; (b480 <StartFilesystemAndTest+0x268>)
    b2ee:	0018      	movs	r0, r3
    b2f0:	4b5a      	ldr	r3, [pc, #360]	; (b45c <StartFilesystemAndTest+0x244>)
    b2f2:	4798      	blx	r3

		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b2f4:	4b63      	ldr	r3, [pc, #396]	; (b484 <StartFilesystemAndTest+0x26c>)
    b2f6:	2230      	movs	r2, #48	; 0x30
    b2f8:	701a      	strb	r2, [r3, #0]
		res = f_open(&file_object,
    b2fa:	4962      	ldr	r1, [pc, #392]	; (b484 <StartFilesystemAndTest+0x26c>)
    b2fc:	4b62      	ldr	r3, [pc, #392]	; (b488 <StartFilesystemAndTest+0x270>)
    b2fe:	220a      	movs	r2, #10
    b300:	0018      	movs	r0, r3
    b302:	4b62      	ldr	r3, [pc, #392]	; (b48c <StartFilesystemAndTest+0x274>)
    b304:	4798      	blx	r3
    b306:	0003      	movs	r3, r0
    b308:	001a      	movs	r2, r3
    b30a:	4b59      	ldr	r3, [pc, #356]	; (b470 <StartFilesystemAndTest+0x258>)
    b30c:	701a      	strb	r2, [r3, #0]
		(char const *)test_file_name,
		FA_CREATE_ALWAYS | FA_WRITE);
		
		if (res != FR_OK)
    b30e:	4b58      	ldr	r3, [pc, #352]	; (b470 <StartFilesystemAndTest+0x258>)
    b310:	781b      	ldrb	r3, [r3, #0]
    b312:	2b00      	cmp	r3, #0
    b314:	d00d      	beq.n	b332 <StartFilesystemAndTest+0x11a>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    b316:	4b56      	ldr	r3, [pc, #344]	; (b470 <StartFilesystemAndTest+0x258>)
    b318:	781b      	ldrb	r3, [r3, #0]
    b31a:	001a      	movs	r2, r3
    b31c:	4b55      	ldr	r3, [pc, #340]	; (b474 <StartFilesystemAndTest+0x25c>)
    b31e:	0019      	movs	r1, r3
    b320:	2000      	movs	r0, #0
    b322:	4b55      	ldr	r3, [pc, #340]	; (b478 <StartFilesystemAndTest+0x260>)
    b324:	4798      	blx	r3
			sdCardPass = false;
    b326:	2310      	movs	r3, #16
    b328:	33ff      	adds	r3, #255	; 0xff
    b32a:	18fb      	adds	r3, r7, r3
    b32c:	2200      	movs	r2, #0
    b32e:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    b330:	e078      	b.n	b424 <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    b332:	4b52      	ldr	r3, [pc, #328]	; (b47c <StartFilesystemAndTest+0x264>)
    b334:	0018      	movs	r0, r3
    b336:	4b49      	ldr	r3, [pc, #292]	; (b45c <StartFilesystemAndTest+0x244>)
    b338:	4798      	blx	r3

		//Write to a file
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    b33a:	4b55      	ldr	r3, [pc, #340]	; (b490 <StartFilesystemAndTest+0x278>)
    b33c:	0018      	movs	r0, r3
    b33e:	4b47      	ldr	r3, [pc, #284]	; (b45c <StartFilesystemAndTest+0x244>)
    b340:	4798      	blx	r3

		if (0 == f_puts("Test SD/MMC stack\n", &file_object))
    b342:	4a51      	ldr	r2, [pc, #324]	; (b488 <StartFilesystemAndTest+0x270>)
    b344:	4b53      	ldr	r3, [pc, #332]	; (b494 <StartFilesystemAndTest+0x27c>)
    b346:	0011      	movs	r1, r2
    b348:	0018      	movs	r0, r3
    b34a:	4b53      	ldr	r3, [pc, #332]	; (b498 <StartFilesystemAndTest+0x280>)
    b34c:	4798      	blx	r3
    b34e:	1e03      	subs	r3, r0, #0
    b350:	d10e      	bne.n	b370 <StartFilesystemAndTest+0x158>
		{
			f_close(&file_object);
    b352:	4b4d      	ldr	r3, [pc, #308]	; (b488 <StartFilesystemAndTest+0x270>)
    b354:	0018      	movs	r0, r3
    b356:	4b51      	ldr	r3, [pc, #324]	; (b49c <StartFilesystemAndTest+0x284>)
    b358:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    b35a:	4b51      	ldr	r3, [pc, #324]	; (b4a0 <StartFilesystemAndTest+0x288>)
    b35c:	0019      	movs	r1, r3
    b35e:	2000      	movs	r0, #0
    b360:	4b45      	ldr	r3, [pc, #276]	; (b478 <StartFilesystemAndTest+0x260>)
    b362:	4798      	blx	r3
			sdCardPass = false;
    b364:	2310      	movs	r3, #16
    b366:	33ff      	adds	r3, #255	; 0xff
    b368:	18fb      	adds	r3, r7, r3
    b36a:	2200      	movs	r2, #0
    b36c:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    b36e:	e059      	b.n	b424 <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    b370:	4b42      	ldr	r3, [pc, #264]	; (b47c <StartFilesystemAndTest+0x264>)
    b372:	0018      	movs	r0, r3
    b374:	4b39      	ldr	r3, [pc, #228]	; (b45c <StartFilesystemAndTest+0x244>)
    b376:	4798      	blx	r3
		f_close(&file_object); //Close file
    b378:	4b43      	ldr	r3, [pc, #268]	; (b488 <StartFilesystemAndTest+0x270>)
    b37a:	0018      	movs	r0, r3
    b37c:	4b47      	ldr	r3, [pc, #284]	; (b49c <StartFilesystemAndTest+0x284>)
    b37e:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    b380:	4b48      	ldr	r3, [pc, #288]	; (b4a4 <StartFilesystemAndTest+0x28c>)
    b382:	0018      	movs	r0, r3
    b384:	4b35      	ldr	r3, [pc, #212]	; (b45c <StartFilesystemAndTest+0x244>)
    b386:	4798      	blx	r3


		//Write binary file
		//Read SD Card File
		test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b388:	4b47      	ldr	r3, [pc, #284]	; (b4a8 <StartFilesystemAndTest+0x290>)
    b38a:	2230      	movs	r2, #48	; 0x30
    b38c:	701a      	strb	r2, [r3, #0]
		res = f_open(&file_object, (char const *)test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    b38e:	4946      	ldr	r1, [pc, #280]	; (b4a8 <StartFilesystemAndTest+0x290>)
    b390:	4b3d      	ldr	r3, [pc, #244]	; (b488 <StartFilesystemAndTest+0x270>)
    b392:	220a      	movs	r2, #10
    b394:	0018      	movs	r0, r3
    b396:	4b3d      	ldr	r3, [pc, #244]	; (b48c <StartFilesystemAndTest+0x274>)
    b398:	4798      	blx	r3
    b39a:	0003      	movs	r3, r0
    b39c:	001a      	movs	r2, r3
    b39e:	4b34      	ldr	r3, [pc, #208]	; (b470 <StartFilesystemAndTest+0x258>)
    b3a0:	701a      	strb	r2, [r3, #0]
		
		if (res != FR_OK)
    b3a2:	4b33      	ldr	r3, [pc, #204]	; (b470 <StartFilesystemAndTest+0x258>)
    b3a4:	781b      	ldrb	r3, [r3, #0]
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d011      	beq.n	b3ce <StartFilesystemAndTest+0x1b6>
		{
			SerialConsoleWriteString("Could not open binary file!\r\n");
    b3aa:	4b40      	ldr	r3, [pc, #256]	; (b4ac <StartFilesystemAndTest+0x294>)
    b3ac:	0018      	movs	r0, r3
    b3ae:	4b2b      	ldr	r3, [pc, #172]	; (b45c <StartFilesystemAndTest+0x244>)
    b3b0:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    b3b2:	4b2f      	ldr	r3, [pc, #188]	; (b470 <StartFilesystemAndTest+0x258>)
    b3b4:	781b      	ldrb	r3, [r3, #0]
    b3b6:	001a      	movs	r2, r3
    b3b8:	4b2e      	ldr	r3, [pc, #184]	; (b474 <StartFilesystemAndTest+0x25c>)
    b3ba:	0019      	movs	r1, r3
    b3bc:	2000      	movs	r0, #0
    b3be:	4b2e      	ldr	r3, [pc, #184]	; (b478 <StartFilesystemAndTest+0x260>)
    b3c0:	4798      	blx	r3
			sdCardPass = false;
    b3c2:	2310      	movs	r3, #16
    b3c4:	33ff      	adds	r3, #255	; 0xff
    b3c6:	18fb      	adds	r3, r7, r3
    b3c8:	2200      	movs	r2, #0
    b3ca:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    b3cc:	e02a      	b.n	b424 <StartFilesystemAndTest+0x20c>
		}

		//Write to a binaryfile
		SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    b3ce:	4b38      	ldr	r3, [pc, #224]	; (b4b0 <StartFilesystemAndTest+0x298>)
    b3d0:	0018      	movs	r0, r3
    b3d2:	4b22      	ldr	r3, [pc, #136]	; (b45c <StartFilesystemAndTest+0x244>)
    b3d4:	4798      	blx	r3
		uint32_t varWrite = 0;
    b3d6:	2300      	movs	r3, #0
    b3d8:	603b      	str	r3, [r7, #0]
		if (0 != f_write(&file_object, binbuff,256, &varWrite))
    b3da:	003c      	movs	r4, r7
    b3dc:	2380      	movs	r3, #128	; 0x80
    b3de:	005a      	lsls	r2, r3, #1
    b3e0:	1d39      	adds	r1, r7, #4
    b3e2:	4829      	ldr	r0, [pc, #164]	; (b488 <StartFilesystemAndTest+0x270>)
    b3e4:	0023      	movs	r3, r4
    b3e6:	4c33      	ldr	r4, [pc, #204]	; (b4b4 <StartFilesystemAndTest+0x29c>)
    b3e8:	47a0      	blx	r4
    b3ea:	1e03      	subs	r3, r0, #0
    b3ec:	d00e      	beq.n	b40c <StartFilesystemAndTest+0x1f4>
		{
			f_close(&file_object);
    b3ee:	4b26      	ldr	r3, [pc, #152]	; (b488 <StartFilesystemAndTest+0x270>)
    b3f0:	0018      	movs	r0, r3
    b3f2:	4b2a      	ldr	r3, [pc, #168]	; (b49c <StartFilesystemAndTest+0x284>)
    b3f4:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    b3f6:	4b2a      	ldr	r3, [pc, #168]	; (b4a0 <StartFilesystemAndTest+0x288>)
    b3f8:	0019      	movs	r1, r3
    b3fa:	2000      	movs	r0, #0
    b3fc:	4b1e      	ldr	r3, [pc, #120]	; (b478 <StartFilesystemAndTest+0x260>)
    b3fe:	4798      	blx	r3
			sdCardPass = false;
    b400:	2310      	movs	r3, #16
    b402:	33ff      	adds	r3, #255	; 0xff
    b404:	18fb      	adds	r3, r7, r3
    b406:	2200      	movs	r2, #0
    b408:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    b40a:	e00b      	b.n	b424 <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    b40c:	4b1b      	ldr	r3, [pc, #108]	; (b47c <StartFilesystemAndTest+0x264>)
    b40e:	0018      	movs	r0, r3
    b410:	4b12      	ldr	r3, [pc, #72]	; (b45c <StartFilesystemAndTest+0x244>)
    b412:	4798      	blx	r3
		f_close(&file_object); //Close file
    b414:	4b1c      	ldr	r3, [pc, #112]	; (b488 <StartFilesystemAndTest+0x270>)
    b416:	0018      	movs	r0, r3
    b418:	4b20      	ldr	r3, [pc, #128]	; (b49c <StartFilesystemAndTest+0x284>)
    b41a:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    b41c:	4b21      	ldr	r3, [pc, #132]	; (b4a4 <StartFilesystemAndTest+0x28c>)
    b41e:	0018      	movs	r0, r3
    b420:	4b0e      	ldr	r3, [pc, #56]	; (b45c <StartFilesystemAndTest+0x244>)
    b422:	4798      	blx	r3
		
		main_end_of_test:
		SerialConsoleWriteString("End of Test.\n\r");
    b424:	4b24      	ldr	r3, [pc, #144]	; (b4b8 <StartFilesystemAndTest+0x2a0>)
    b426:	0018      	movs	r0, r3
    b428:	4b0c      	ldr	r3, [pc, #48]	; (b45c <StartFilesystemAndTest+0x244>)
    b42a:	4798      	blx	r3
    b42c:	e008      	b.n	b440 <StartFilesystemAndTest+0x228>
		//f_unlink("sd_binary.bin");

	}
	else
	{
		SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    b42e:	4b23      	ldr	r3, [pc, #140]	; (b4bc <StartFilesystemAndTest+0x2a4>)
    b430:	0018      	movs	r0, r3
    b432:	4b0a      	ldr	r3, [pc, #40]	; (b45c <StartFilesystemAndTest+0x244>)
    b434:	4798      	blx	r3
		sdCardPass = false;
    b436:	2310      	movs	r3, #16
    b438:	33ff      	adds	r3, #255	; 0xff
    b43a:	18fb      	adds	r3, r7, r3
    b43c:	2200      	movs	r2, #0
    b43e:	701a      	strb	r2, [r3, #0]
	}

	return sdCardPass;
    b440:	2310      	movs	r3, #16
    b442:	33ff      	adds	r3, #255	; 0xff
    b444:	18fb      	adds	r3, r7, r3
    b446:	781b      	ldrb	r3, [r3, #0]
}
    b448:	0018      	movs	r0, r3
    b44a:	46bd      	mov	sp, r7
    b44c:	b045      	add	sp, #276	; 0x114
    b44e:	bd90      	pop	{r4, r7, pc}
    b450:	fffffef4 	.word	0xfffffef4
    b454:	00000a2d 	.word	0x00000a2d
    b458:	0000ccb0 	.word	0x0000ccb0
    b45c:	00000fd9 	.word	0x00000fd9
    b460:	0000ccd0 	.word	0x0000ccd0
    b464:	20000a38 	.word	0x20000a38
    b468:	0000bb37 	.word	0x0000bb37
    b46c:	00009d39 	.word	0x00009d39
    b470:	20000ce0 	.word	0x20000ce0
    b474:	0000ccec 	.word	0x0000ccec
    b478:	00001065 	.word	0x00001065
    b47c:	0000ccfc 	.word	0x0000ccfc
    b480:	0000cd04 	.word	0x0000cd04
    b484:	2000000c 	.word	0x2000000c
    b488:	20000c68 	.word	0x20000c68
    b48c:	00009d91 	.word	0x00009d91
    b490:	0000cd20 	.word	0x0000cd20
    b494:	0000cd44 	.word	0x0000cd44
    b498:	0000adc9 	.word	0x0000adc9
    b49c:	0000aa2d 	.word	0x0000aa2d
    b4a0:	0000cd58 	.word	0x0000cd58
    b4a4:	0000cd64 	.word	0x0000cd64
    b4a8:	2000001c 	.word	0x2000001c
    b4ac:	0000cd7c 	.word	0x0000cd7c
    b4b0:	0000cd9c 	.word	0x0000cd9c
    b4b4:	0000a55d 	.word	0x0000a55d
    b4b8:	0000cdc0 	.word	0x0000cdc0
    b4bc:	0000cdd0 	.word	0x0000cdd0

0000b4c0 <jumpToApplication>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       
******************************************************************************/
static void jumpToApplication(void)
{
    b4c0:	b580      	push	{r7, lr}
    b4c2:	b082      	sub	sp, #8
    b4c4:	af00      	add	r7, sp, #0
// Function pointer to application section
void (*applicationCodeEntry)(void);

// Rebase stack pointer
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    b4c6:	2390      	movs	r3, #144	; 0x90
    b4c8:	025b      	lsls	r3, r3, #9
    b4ca:	681b      	ldr	r3, [r3, #0]
    b4cc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    b4ce:	683b      	ldr	r3, [r7, #0]
    b4d0:	f383 8808 	msr	MSP, r3

// Rebase vector table
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    b4d4:	4b06      	ldr	r3, [pc, #24]	; (b4f0 <jumpToApplication+0x30>)
    b4d6:	2290      	movs	r2, #144	; 0x90
    b4d8:	0252      	lsls	r2, r2, #9
    b4da:	609a      	str	r2, [r3, #8]

// Set pointer to application section
applicationCodeEntry =
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    b4dc:	4b05      	ldr	r3, [pc, #20]	; (b4f4 <jumpToApplication+0x34>)
    b4de:	681b      	ldr	r3, [r3, #0]
applicationCodeEntry =
    b4e0:	607b      	str	r3, [r7, #4]

// Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry, 
//which should be the start of the main FW.
applicationCodeEntry();
    b4e2:	687b      	ldr	r3, [r7, #4]
    b4e4:	4798      	blx	r3
}
    b4e6:	46c0      	nop			; (mov r8, r8)
    b4e8:	46bd      	mov	sp, r7
    b4ea:	b002      	add	sp, #8
    b4ec:	bd80      	pop	{r7, pc}
    b4ee:	46c0      	nop			; (mov r8, r8)
    b4f0:	e000ed00 	.word	0xe000ed00
    b4f4:	00012004 	.word	0x00012004

0000b4f8 <configure_nvm>:
* @brief        Configures the NVM driver
* @details      
* @return       
******************************************************************************/
static void configure_nvm(void)
{
    b4f8:	b580      	push	{r7, lr}
    b4fa:	b082      	sub	sp, #8
    b4fc:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    b4fe:	003b      	movs	r3, r7
    b500:	0018      	movs	r0, r3
    b502:	4b06      	ldr	r3, [pc, #24]	; (b51c <configure_nvm+0x24>)
    b504:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    b506:	003b      	movs	r3, r7
    b508:	2200      	movs	r2, #0
    b50a:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    b50c:	003b      	movs	r3, r7
    b50e:	0018      	movs	r0, r3
    b510:	4b03      	ldr	r3, [pc, #12]	; (b520 <configure_nvm+0x28>)
    b512:	4798      	blx	r3
}
    b514:	46c0      	nop			; (mov r8, r8)
    b516:	46bd      	mov	sp, r7
    b518:	b002      	add	sp, #8
    b51a:	bd80      	pop	{r7, pc}
    b51c:	0000af99 	.word	0x0000af99
    b520:	000004bd 	.word	0x000004bd

0000b524 <free_fw_mem>:
* @details		Calculate the number of rows which is available to erase and erase them. 
				Each a row is erased, check whether it is successful. If there is error, 
				return and tell the user.
* @return
******************************************************************************/
static void free_fw_mem(void){
    b524:	b590      	push	{r4, r7, lr}
    b526:	b089      	sub	sp, #36	; 0x24
    b528:	af00      	add	r7, sp, #0
	uint32_t current_address = APP_START_ADDRESS;
    b52a:	2390      	movs	r3, #144	; 0x90
    b52c:	025b      	lsls	r3, r3, #9
    b52e:	61fb      	str	r3, [r7, #28]
	enum status_code nvmError =  STATUS_OK;
    b530:	2313      	movs	r3, #19
    b532:	18fb      	adds	r3, r7, r3
    b534:	2200      	movs	r2, #0
    b536:	701a      	strb	r2, [r3, #0]
	
	//Calculate the rows to erase
	int row = (0x40000 - 0x12000) / 256;
    b538:	23b8      	movs	r3, #184	; 0xb8
    b53a:	009b      	lsls	r3, r3, #2
    b53c:	60fb      	str	r3, [r7, #12]
	
	//Erase the memory
	for (int i = 0; i < row; i++){
    b53e:	2300      	movs	r3, #0
    b540:	61bb      	str	r3, [r7, #24]
    b542:	e02f      	b.n	b5a4 <free_fw_mem+0x80>
		enum status_code nvmError = nvm_erase_row(current_address); // Erase the row starts from current address
    b544:	230b      	movs	r3, #11
    b546:	18fc      	adds	r4, r7, r3
    b548:	69fb      	ldr	r3, [r7, #28]
    b54a:	0018      	movs	r0, r3
    b54c:	4b1b      	ldr	r3, [pc, #108]	; (b5bc <free_fw_mem+0x98>)
    b54e:	4798      	blx	r3
    b550:	0003      	movs	r3, r0
    b552:	7023      	strb	r3, [r4, #0]
		if (nvmError != STATUS_OK){ SerialConsoleWriteString("Erase error!\r\n");}
    b554:	230b      	movs	r3, #11
    b556:	18fb      	adds	r3, r7, r3
    b558:	781b      	ldrb	r3, [r3, #0]
    b55a:	2b00      	cmp	r3, #0
    b55c:	d003      	beq.n	b566 <free_fw_mem+0x42>
    b55e:	4b18      	ldr	r3, [pc, #96]	; (b5c0 <free_fw_mem+0x9c>)
    b560:	0018      	movs	r0, r3
    b562:	4b18      	ldr	r3, [pc, #96]	; (b5c4 <free_fw_mem+0xa0>)
    b564:	4798      	blx	r3
		
		// Make sure it got erased
    	for(int iter = 0; iter < 256; iter++){
    b566:	2300      	movs	r3, #0
    b568:	617b      	str	r3, [r7, #20]
    b56a:	e011      	b.n	b590 <free_fw_mem+0x6c>
	    	char *a = (char *)(APP_START_ADDRESS + iter); //Pointer pointing to address APP_START_ADDRESS
    b56c:	697b      	ldr	r3, [r7, #20]
    b56e:	2290      	movs	r2, #144	; 0x90
    b570:	0252      	lsls	r2, r2, #9
    b572:	4694      	mov	ip, r2
    b574:	4463      	add	r3, ip
    b576:	607b      	str	r3, [r7, #4]
	    	if(*a != 0xFF){	SerialConsoleWriteString("Error - test page is not erased!");	return;}
    b578:	687b      	ldr	r3, [r7, #4]
    b57a:	781b      	ldrb	r3, [r3, #0]
    b57c:	2bff      	cmp	r3, #255	; 0xff
    b57e:	d004      	beq.n	b58a <free_fw_mem+0x66>
    b580:	4b11      	ldr	r3, [pc, #68]	; (b5c8 <free_fw_mem+0xa4>)
    b582:	0018      	movs	r0, r3
    b584:	4b0f      	ldr	r3, [pc, #60]	; (b5c4 <free_fw_mem+0xa0>)
    b586:	4798      	blx	r3
    b588:	e014      	b.n	b5b4 <free_fw_mem+0x90>
    	for(int iter = 0; iter < 256; iter++){
    b58a:	697b      	ldr	r3, [r7, #20]
    b58c:	3301      	adds	r3, #1
    b58e:	617b      	str	r3, [r7, #20]
    b590:	697b      	ldr	r3, [r7, #20]
    b592:	2bff      	cmp	r3, #255	; 0xff
    b594:	ddea      	ble.n	b56c <free_fw_mem+0x48>
		}
		current_address += 256;
    b596:	69fb      	ldr	r3, [r7, #28]
    b598:	3301      	adds	r3, #1
    b59a:	33ff      	adds	r3, #255	; 0xff
    b59c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < row; i++){
    b59e:	69bb      	ldr	r3, [r7, #24]
    b5a0:	3301      	adds	r3, #1
    b5a2:	61bb      	str	r3, [r7, #24]
    b5a4:	69ba      	ldr	r2, [r7, #24]
    b5a6:	68fb      	ldr	r3, [r7, #12]
    b5a8:	429a      	cmp	r2, r3
    b5aa:	dbcb      	blt.n	b544 <free_fw_mem+0x20>
	}
	
	// Report the result
	SerialConsoleWriteString("Data erased successfully! \r\n");
    b5ac:	4b07      	ldr	r3, [pc, #28]	; (b5cc <free_fw_mem+0xa8>)
    b5ae:	0018      	movs	r0, r3
    b5b0:	4b04      	ldr	r3, [pc, #16]	; (b5c4 <free_fw_mem+0xa0>)
    b5b2:	4798      	blx	r3
}
    b5b4:	46bd      	mov	sp, r7
    b5b6:	b009      	add	sp, #36	; 0x24
    b5b8:	bd90      	pop	{r4, r7, pc}
    b5ba:	46c0      	nop			; (mov r8, r8)
    b5bc:	000007f9 	.word	0x000007f9
    b5c0:	0000ce00 	.word	0x0000ce00
    b5c4:	00000fd9 	.word	0x00000fd9
    b5c8:	0000ce10 	.word	0x0000ce10
    b5cc:	0000ce34 	.word	0x0000ce34

0000b5d0 <load_bin>:
* @brief        Load the binary file.
* @details		Write data in chunks to load the opened file into MCU firmware region. Keep reading if there are bytes left.
				Check CRC for each chunk read. If CRC is different, break. Tell the user CRC status when finshed.
* @return
******************************************************************************/
static void load_bin(char* binfile){
    b5d0:	b590      	push	{r4, r7, lr}
    b5d2:	b09d      	sub	sp, #116	; 0x74
    b5d4:	af00      	add	r7, sp, #0
    b5d6:	6078      	str	r0, [r7, #4]
	
	if (f_stat(binfile, &fnoBin) != FR_OK){
    b5d8:	4a58      	ldr	r2, [pc, #352]	; (b73c <load_bin+0x16c>)
    b5da:	687b      	ldr	r3, [r7, #4]
    b5dc:	0011      	movs	r1, r2
    b5de:	0018      	movs	r0, r3
    b5e0:	4b57      	ldr	r3, [pc, #348]	; (b740 <load_bin+0x170>)
    b5e2:	4798      	blx	r3
    b5e4:	1e03      	subs	r3, r0, #0
    b5e6:	d00a      	beq.n	b5fe <load_bin+0x2e>
		SerialConsoleWriteString("Binary Missing!");
    b5e8:	4b56      	ldr	r3, [pc, #344]	; (b744 <load_bin+0x174>)
    b5ea:	0018      	movs	r0, r3
    b5ec:	4b56      	ldr	r3, [pc, #344]	; (b748 <load_bin+0x178>)
    b5ee:	4798      	blx	r3
		delay_cycles_ms(2000);
    b5f0:	23fa      	movs	r3, #250	; 0xfa
    b5f2:	00db      	lsls	r3, r3, #3
    b5f4:	0018      	movs	r0, r3
    b5f6:	4b55      	ldr	r3, [pc, #340]	; (b74c <load_bin+0x17c>)
    b5f8:	4798      	blx	r3
		system_reset();
    b5fa:	4b55      	ldr	r3, [pc, #340]	; (b750 <load_bin+0x180>)
    b5fc:	4798      	blx	r3
	}
	
	res = f_open(&file_object, (char const *)binfile, FA_READ);
    b5fe:	6879      	ldr	r1, [r7, #4]
    b600:	4b54      	ldr	r3, [pc, #336]	; (b754 <load_bin+0x184>)
    b602:	2201      	movs	r2, #1
    b604:	0018      	movs	r0, r3
    b606:	4b54      	ldr	r3, [pc, #336]	; (b758 <load_bin+0x188>)
    b608:	4798      	blx	r3
    b60a:	0003      	movs	r3, r0
    b60c:	001a      	movs	r2, r3
    b60e:	4b53      	ldr	r3, [pc, #332]	; (b75c <load_bin+0x18c>)
    b610:	701a      	strb	r2, [r3, #0]
	
	if (res != FR_OK)
    b612:	4b52      	ldr	r3, [pc, #328]	; (b75c <load_bin+0x18c>)
    b614:	781b      	ldrb	r3, [r3, #0]
    b616:	2b00      	cmp	r3, #0
    b618:	d003      	beq.n	b622 <load_bin+0x52>
	{
		SerialConsoleWriteString("Could not open Binary file!\r\n");
    b61a:	4b51      	ldr	r3, [pc, #324]	; (b760 <load_bin+0x190>)
    b61c:	0018      	movs	r0, r3
    b61e:	4b4a      	ldr	r3, [pc, #296]	; (b748 <load_bin+0x178>)
    b620:	4798      	blx	r3
	}
	
	#define BUFFER_SIZE 64
	int fileSize  = f_size(&file_object);
    b622:	4b4c      	ldr	r3, [pc, #304]	; (b754 <load_bin+0x184>)
    b624:	68db      	ldr	r3, [r3, #12]
    b626:	663b      	str	r3, [r7, #96]	; 0x60
	int numBytesLeft = fileSize;
    b628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    b62a:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t readBuffer[BUFFER_SIZE];
	
	
	uint32_t numBytesRead = 0;
    b62c:	2300      	movs	r3, #0
    b62e:	617b      	str	r3, [r7, #20]
	int numberBytesTotal = 0;
    b630:	2300      	movs	r3, #0
    b632:	66bb      	str	r3, [r7, #104]	; 0x68
	int pos = 0;
    b634:	2300      	movs	r3, #0
    b636:	667b      	str	r3, [r7, #100]	; 0x64
	while(numBytesLeft  > 0) 
    b638:	e068      	b.n	b70c <load_bin+0x13c>
	{	
		int chunkSize = (numBytesLeft > BUFFER_SIZE) ? BUFFER_SIZE : numBytesLeft;
    b63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    b63c:	2b40      	cmp	r3, #64	; 0x40
    b63e:	dd00      	ble.n	b642 <load_bin+0x72>
    b640:	2340      	movs	r3, #64	; 0x40
    b642:	65fb      	str	r3, [r7, #92]	; 0x5c
		
		res = f_read(&file_object, &readBuffer, chunkSize, &numBytesRead); //Question to students: What is numBytesRead? What are we doing here?
    b644:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b646:	2314      	movs	r3, #20
    b648:	18fb      	adds	r3, r7, r3
    b64a:	2118      	movs	r1, #24
    b64c:	1879      	adds	r1, r7, r1
    b64e:	4841      	ldr	r0, [pc, #260]	; (b754 <load_bin+0x184>)
    b650:	4c44      	ldr	r4, [pc, #272]	; (b764 <load_bin+0x194>)
    b652:	47a0      	blx	r4
    b654:	0003      	movs	r3, r0
    b656:	001a      	movs	r2, r3
    b658:	4b40      	ldr	r3, [pc, #256]	; (b75c <load_bin+0x18c>)
    b65a:	701a      	strb	r2, [r3, #0]
		//numBytesRead stores the actual number of bytes that were read from the file. 
		//This value can be used to determine the next readBuffer's start address and determine whether all the data are read.
		
		res = nvm_write_buffer (APP_START_ADDRESS + pos, &readBuffer[0], chunkSize);
    b65c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    b65e:	2290      	movs	r2, #144	; 0x90
    b660:	0252      	lsls	r2, r2, #9
    b662:	4694      	mov	ip, r2
    b664:	4463      	add	r3, ip
    b666:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    b668:	b292      	uxth	r2, r2
    b66a:	2118      	movs	r1, #24
    b66c:	1879      	adds	r1, r7, r1
    b66e:	0018      	movs	r0, r3
    b670:	4b3d      	ldr	r3, [pc, #244]	; (b768 <load_bin+0x198>)
    b672:	4798      	blx	r3
    b674:	0003      	movs	r3, r0
    b676:	001a      	movs	r2, r3
    b678:	4b38      	ldr	r3, [pc, #224]	; (b75c <load_bin+0x18c>)
    b67a:	701a      	strb	r2, [r3, #0]
		pos+=chunkSize;
    b67c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    b67e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b680:	18d3      	adds	r3, r2, r3
    b682:	667b      	str	r3, [r7, #100]	; 0x64
		if (res != FR_OK)
    b684:	4b35      	ldr	r3, [pc, #212]	; (b75c <load_bin+0x18c>)
    b686:	781b      	ldrb	r3, [r3, #0]
    b688:	2b00      	cmp	r3, #0
    b68a:	d004      	beq.n	b696 <load_bin+0xc6>
		{
			SerialConsoleWriteString("Binary File write to NVM failed!\r\n");
    b68c:	4b37      	ldr	r3, [pc, #220]	; (b76c <load_bin+0x19c>)
    b68e:	0018      	movs	r0, r3
    b690:	4b2d      	ldr	r3, [pc, #180]	; (b748 <load_bin+0x178>)
    b692:	4798      	blx	r3
    b694:	e03d      	b.n	b712 <load_bin+0x142>
			break;
		}
		
		numBytesLeft -= numBytesRead;
    b696:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    b698:	697b      	ldr	r3, [r7, #20]
    b69a:	1ad3      	subs	r3, r2, r3
    b69c:	66fb      	str	r3, [r7, #108]	; 0x6c
		numberBytesTotal += numBytesRead;
    b69e:	6eba      	ldr	r2, [r7, #104]	; 0x68
    b6a0:	697b      	ldr	r3, [r7, #20]
    b6a2:	18d3      	adds	r3, r2, r3
    b6a4:	66bb      	str	r3, [r7, #104]	; 0x68
		
		uint32_t resultCrcSd = 0;
    b6a6:	2300      	movs	r3, #0
    b6a8:	613b      	str	r3, [r7, #16]
		*((volatile unsigned int*) 0x41007058) &= ~0x30000UL;
    b6aa:	4b31      	ldr	r3, [pc, #196]	; (b770 <load_bin+0x1a0>)
    b6ac:	4a30      	ldr	r2, [pc, #192]	; (b770 <load_bin+0x1a0>)
    b6ae:	6812      	ldr	r2, [r2, #0]
    b6b0:	4930      	ldr	r1, [pc, #192]	; (b774 <load_bin+0x1a4>)
    b6b2:	400a      	ands	r2, r1
    b6b4:	601a      	str	r2, [r3, #0]

		//CRC of SD Card
		enum status_code crcres = dsu_crc32_cal	(readBuffer,numBytesRead, &resultCrcSd); //Instructor note: Was it the third parameter used for? Please check how you can use the third parameter to do the CRC of a long data stream in chunks - you will need it!
    b6b6:	2318      	movs	r3, #24
    b6b8:	18fb      	adds	r3, r7, r3
    b6ba:	6979      	ldr	r1, [r7, #20]
    b6bc:	225b      	movs	r2, #91	; 0x5b
    b6be:	18bc      	adds	r4, r7, r2
    b6c0:	2210      	movs	r2, #16
    b6c2:	18ba      	adds	r2, r7, r2
    b6c4:	0018      	movs	r0, r3
    b6c6:	4b2c      	ldr	r3, [pc, #176]	; (b778 <load_bin+0x1a8>)
    b6c8:	4798      	blx	r3
    b6ca:	0003      	movs	r3, r0
    b6cc:	7023      	strb	r3, [r4, #0]
		// It is a pointer to a uint32_t variable that will store the calculated CRC-32 value. The function will update the value of this variable.
		//In this function, we check every time the function reads data.
	
		//Errata Part 2 - To be done after RAM CRC
		*((volatile unsigned int*) 0x41007058) |= 0x20000UL;
    b6ce:	4b28      	ldr	r3, [pc, #160]	; (b770 <load_bin+0x1a0>)
    b6d0:	4a27      	ldr	r2, [pc, #156]	; (b770 <load_bin+0x1a0>)
    b6d2:	6812      	ldr	r2, [r2, #0]
    b6d4:	2180      	movs	r1, #128	; 0x80
    b6d6:	0289      	lsls	r1, r1, #10
    b6d8:	430a      	orrs	r2, r1
    b6da:	601a      	str	r2, [r3, #0]
	 
		//CRC of memory (NVM)
		uint32_t resultCrcNvm = 0;
    b6dc:	2300      	movs	r3, #0
    b6de:	60fb      	str	r3, [r7, #12]
		crcres |= dsu_crc32_cal	(APP_START_ADDRESS +pos - chunkSize	,numBytesRead, &resultCrcNvm);
    b6e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    b6e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    b6e4:	1ad3      	subs	r3, r2, r3
    b6e6:	2290      	movs	r2, #144	; 0x90
    b6e8:	0252      	lsls	r2, r2, #9
    b6ea:	4694      	mov	ip, r2
    b6ec:	4463      	add	r3, ip
    b6ee:	6979      	ldr	r1, [r7, #20]
    b6f0:	220c      	movs	r2, #12
    b6f2:	18ba      	adds	r2, r7, r2
    b6f4:	0018      	movs	r0, r3
    b6f6:	4b20      	ldr	r3, [pc, #128]	; (b778 <load_bin+0x1a8>)
    b6f8:	4798      	blx	r3
    b6fa:	0003      	movs	r3, r0
    b6fc:	0019      	movs	r1, r3
    b6fe:	235b      	movs	r3, #91	; 0x5b
    b700:	18fb      	adds	r3, r7, r3
    b702:	225b      	movs	r2, #91	; 0x5b
    b704:	18ba      	adds	r2, r7, r2
    b706:	7812      	ldrb	r2, [r2, #0]
    b708:	430a      	orrs	r2, r1
    b70a:	701a      	strb	r2, [r3, #0]
	while(numBytesLeft  > 0) 
    b70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    b70e:	2b00      	cmp	r3, #0
    b710:	dc93      	bgt.n	b63a <load_bin+0x6a>
			break;
		}
	}
	

		if (res != FR_OK)
    b712:	4b12      	ldr	r3, [pc, #72]	; (b75c <load_bin+0x18c>)
    b714:	781b      	ldrb	r3, [r3, #0]
    b716:	2b00      	cmp	r3, #0
    b718:	d004      	beq.n	b724 <load_bin+0x154>
		{
			SerialConsoleWriteString("Test write to NVM failed!\r\n");
    b71a:	4b18      	ldr	r3, [pc, #96]	; (b77c <load_bin+0x1ac>)
    b71c:	0018      	movs	r0, r3
    b71e:	4b0a      	ldr	r3, [pc, #40]	; (b748 <load_bin+0x178>)
    b720:	4798      	blx	r3
		{
			SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
			SerialConsoleWriteString("CRC check succeeded!\r\n");
		}

}
    b722:	e007      	b.n	b734 <load_bin+0x164>
			SerialConsoleWriteString("Test write to NVM succeeded!\r\n");
    b724:	4b16      	ldr	r3, [pc, #88]	; (b780 <load_bin+0x1b0>)
    b726:	0018      	movs	r0, r3
    b728:	4b07      	ldr	r3, [pc, #28]	; (b748 <load_bin+0x178>)
    b72a:	4798      	blx	r3
			SerialConsoleWriteString("CRC check succeeded!\r\n");
    b72c:	4b15      	ldr	r3, [pc, #84]	; (b784 <load_bin+0x1b4>)
    b72e:	0018      	movs	r0, r3
    b730:	4b05      	ldr	r3, [pc, #20]	; (b748 <load_bin+0x178>)
    b732:	4798      	blx	r3
}
    b734:	46c0      	nop			; (mov r8, r8)
    b736:	46bd      	mov	sp, r7
    b738:	b01d      	add	sp, #116	; 0x74
    b73a:	bd90      	pop	{r4, r7, pc}
    b73c:	20000cc0 	.word	0x20000cc0
    b740:	0000aa69 	.word	0x0000aa69
    b744:	0000ce78 	.word	0x0000ce78
    b748:	00000fd9 	.word	0x00000fd9
    b74c:	000001a1 	.word	0x000001a1
    b750:	0000afd5 	.word	0x0000afd5
    b754:	20000c68 	.word	0x20000c68
    b758:	00009d91 	.word	0x00009d91
    b75c:	20000ce0 	.word	0x20000ce0
    b760:	0000ce88 	.word	0x0000ce88
    b764:	0000a2c1 	.word	0x0000a2c1
    b768:	000006ad 	.word	0x000006ad
    b76c:	0000cea8 	.word	0x0000cea8
    b770:	41007058 	.word	0x41007058
    b774:	fffcffff 	.word	0xfffcffff
    b778:	00000381 	.word	0x00000381
    b77c:	0000cecc 	.word	0x0000cecc
    b780:	0000cee8 	.word	0x0000cee8
    b784:	0000cf08 	.word	0x0000cf08

0000b788 <__udivsi3>:
    b788:	2200      	movs	r2, #0
    b78a:	0843      	lsrs	r3, r0, #1
    b78c:	428b      	cmp	r3, r1
    b78e:	d374      	bcc.n	b87a <__udivsi3+0xf2>
    b790:	0903      	lsrs	r3, r0, #4
    b792:	428b      	cmp	r3, r1
    b794:	d35f      	bcc.n	b856 <__udivsi3+0xce>
    b796:	0a03      	lsrs	r3, r0, #8
    b798:	428b      	cmp	r3, r1
    b79a:	d344      	bcc.n	b826 <__udivsi3+0x9e>
    b79c:	0b03      	lsrs	r3, r0, #12
    b79e:	428b      	cmp	r3, r1
    b7a0:	d328      	bcc.n	b7f4 <__udivsi3+0x6c>
    b7a2:	0c03      	lsrs	r3, r0, #16
    b7a4:	428b      	cmp	r3, r1
    b7a6:	d30d      	bcc.n	b7c4 <__udivsi3+0x3c>
    b7a8:	22ff      	movs	r2, #255	; 0xff
    b7aa:	0209      	lsls	r1, r1, #8
    b7ac:	ba12      	rev	r2, r2
    b7ae:	0c03      	lsrs	r3, r0, #16
    b7b0:	428b      	cmp	r3, r1
    b7b2:	d302      	bcc.n	b7ba <__udivsi3+0x32>
    b7b4:	1212      	asrs	r2, r2, #8
    b7b6:	0209      	lsls	r1, r1, #8
    b7b8:	d065      	beq.n	b886 <__udivsi3+0xfe>
    b7ba:	0b03      	lsrs	r3, r0, #12
    b7bc:	428b      	cmp	r3, r1
    b7be:	d319      	bcc.n	b7f4 <__udivsi3+0x6c>
    b7c0:	e000      	b.n	b7c4 <__udivsi3+0x3c>
    b7c2:	0a09      	lsrs	r1, r1, #8
    b7c4:	0bc3      	lsrs	r3, r0, #15
    b7c6:	428b      	cmp	r3, r1
    b7c8:	d301      	bcc.n	b7ce <__udivsi3+0x46>
    b7ca:	03cb      	lsls	r3, r1, #15
    b7cc:	1ac0      	subs	r0, r0, r3
    b7ce:	4152      	adcs	r2, r2
    b7d0:	0b83      	lsrs	r3, r0, #14
    b7d2:	428b      	cmp	r3, r1
    b7d4:	d301      	bcc.n	b7da <__udivsi3+0x52>
    b7d6:	038b      	lsls	r3, r1, #14
    b7d8:	1ac0      	subs	r0, r0, r3
    b7da:	4152      	adcs	r2, r2
    b7dc:	0b43      	lsrs	r3, r0, #13
    b7de:	428b      	cmp	r3, r1
    b7e0:	d301      	bcc.n	b7e6 <__udivsi3+0x5e>
    b7e2:	034b      	lsls	r3, r1, #13
    b7e4:	1ac0      	subs	r0, r0, r3
    b7e6:	4152      	adcs	r2, r2
    b7e8:	0b03      	lsrs	r3, r0, #12
    b7ea:	428b      	cmp	r3, r1
    b7ec:	d301      	bcc.n	b7f2 <__udivsi3+0x6a>
    b7ee:	030b      	lsls	r3, r1, #12
    b7f0:	1ac0      	subs	r0, r0, r3
    b7f2:	4152      	adcs	r2, r2
    b7f4:	0ac3      	lsrs	r3, r0, #11
    b7f6:	428b      	cmp	r3, r1
    b7f8:	d301      	bcc.n	b7fe <__udivsi3+0x76>
    b7fa:	02cb      	lsls	r3, r1, #11
    b7fc:	1ac0      	subs	r0, r0, r3
    b7fe:	4152      	adcs	r2, r2
    b800:	0a83      	lsrs	r3, r0, #10
    b802:	428b      	cmp	r3, r1
    b804:	d301      	bcc.n	b80a <__udivsi3+0x82>
    b806:	028b      	lsls	r3, r1, #10
    b808:	1ac0      	subs	r0, r0, r3
    b80a:	4152      	adcs	r2, r2
    b80c:	0a43      	lsrs	r3, r0, #9
    b80e:	428b      	cmp	r3, r1
    b810:	d301      	bcc.n	b816 <__udivsi3+0x8e>
    b812:	024b      	lsls	r3, r1, #9
    b814:	1ac0      	subs	r0, r0, r3
    b816:	4152      	adcs	r2, r2
    b818:	0a03      	lsrs	r3, r0, #8
    b81a:	428b      	cmp	r3, r1
    b81c:	d301      	bcc.n	b822 <__udivsi3+0x9a>
    b81e:	020b      	lsls	r3, r1, #8
    b820:	1ac0      	subs	r0, r0, r3
    b822:	4152      	adcs	r2, r2
    b824:	d2cd      	bcs.n	b7c2 <__udivsi3+0x3a>
    b826:	09c3      	lsrs	r3, r0, #7
    b828:	428b      	cmp	r3, r1
    b82a:	d301      	bcc.n	b830 <__udivsi3+0xa8>
    b82c:	01cb      	lsls	r3, r1, #7
    b82e:	1ac0      	subs	r0, r0, r3
    b830:	4152      	adcs	r2, r2
    b832:	0983      	lsrs	r3, r0, #6
    b834:	428b      	cmp	r3, r1
    b836:	d301      	bcc.n	b83c <__udivsi3+0xb4>
    b838:	018b      	lsls	r3, r1, #6
    b83a:	1ac0      	subs	r0, r0, r3
    b83c:	4152      	adcs	r2, r2
    b83e:	0943      	lsrs	r3, r0, #5
    b840:	428b      	cmp	r3, r1
    b842:	d301      	bcc.n	b848 <__udivsi3+0xc0>
    b844:	014b      	lsls	r3, r1, #5
    b846:	1ac0      	subs	r0, r0, r3
    b848:	4152      	adcs	r2, r2
    b84a:	0903      	lsrs	r3, r0, #4
    b84c:	428b      	cmp	r3, r1
    b84e:	d301      	bcc.n	b854 <__udivsi3+0xcc>
    b850:	010b      	lsls	r3, r1, #4
    b852:	1ac0      	subs	r0, r0, r3
    b854:	4152      	adcs	r2, r2
    b856:	08c3      	lsrs	r3, r0, #3
    b858:	428b      	cmp	r3, r1
    b85a:	d301      	bcc.n	b860 <__udivsi3+0xd8>
    b85c:	00cb      	lsls	r3, r1, #3
    b85e:	1ac0      	subs	r0, r0, r3
    b860:	4152      	adcs	r2, r2
    b862:	0883      	lsrs	r3, r0, #2
    b864:	428b      	cmp	r3, r1
    b866:	d301      	bcc.n	b86c <__udivsi3+0xe4>
    b868:	008b      	lsls	r3, r1, #2
    b86a:	1ac0      	subs	r0, r0, r3
    b86c:	4152      	adcs	r2, r2
    b86e:	0843      	lsrs	r3, r0, #1
    b870:	428b      	cmp	r3, r1
    b872:	d301      	bcc.n	b878 <__udivsi3+0xf0>
    b874:	004b      	lsls	r3, r1, #1
    b876:	1ac0      	subs	r0, r0, r3
    b878:	4152      	adcs	r2, r2
    b87a:	1a41      	subs	r1, r0, r1
    b87c:	d200      	bcs.n	b880 <__udivsi3+0xf8>
    b87e:	4601      	mov	r1, r0
    b880:	4152      	adcs	r2, r2
    b882:	4610      	mov	r0, r2
    b884:	4770      	bx	lr
    b886:	e7ff      	b.n	b888 <__udivsi3+0x100>
    b888:	b501      	push	{r0, lr}
    b88a:	2000      	movs	r0, #0
    b88c:	f000 f8f0 	bl	ba70 <__aeabi_idiv0>
    b890:	bd02      	pop	{r1, pc}
    b892:	46c0      	nop			; (mov r8, r8)

0000b894 <__aeabi_uidivmod>:
    b894:	2900      	cmp	r1, #0
    b896:	d0f7      	beq.n	b888 <__udivsi3+0x100>
    b898:	e776      	b.n	b788 <__udivsi3>
    b89a:	4770      	bx	lr

0000b89c <__divsi3>:
    b89c:	4603      	mov	r3, r0
    b89e:	430b      	orrs	r3, r1
    b8a0:	d47f      	bmi.n	b9a2 <__divsi3+0x106>
    b8a2:	2200      	movs	r2, #0
    b8a4:	0843      	lsrs	r3, r0, #1
    b8a6:	428b      	cmp	r3, r1
    b8a8:	d374      	bcc.n	b994 <__divsi3+0xf8>
    b8aa:	0903      	lsrs	r3, r0, #4
    b8ac:	428b      	cmp	r3, r1
    b8ae:	d35f      	bcc.n	b970 <__divsi3+0xd4>
    b8b0:	0a03      	lsrs	r3, r0, #8
    b8b2:	428b      	cmp	r3, r1
    b8b4:	d344      	bcc.n	b940 <__divsi3+0xa4>
    b8b6:	0b03      	lsrs	r3, r0, #12
    b8b8:	428b      	cmp	r3, r1
    b8ba:	d328      	bcc.n	b90e <__divsi3+0x72>
    b8bc:	0c03      	lsrs	r3, r0, #16
    b8be:	428b      	cmp	r3, r1
    b8c0:	d30d      	bcc.n	b8de <__divsi3+0x42>
    b8c2:	22ff      	movs	r2, #255	; 0xff
    b8c4:	0209      	lsls	r1, r1, #8
    b8c6:	ba12      	rev	r2, r2
    b8c8:	0c03      	lsrs	r3, r0, #16
    b8ca:	428b      	cmp	r3, r1
    b8cc:	d302      	bcc.n	b8d4 <__divsi3+0x38>
    b8ce:	1212      	asrs	r2, r2, #8
    b8d0:	0209      	lsls	r1, r1, #8
    b8d2:	d065      	beq.n	b9a0 <__divsi3+0x104>
    b8d4:	0b03      	lsrs	r3, r0, #12
    b8d6:	428b      	cmp	r3, r1
    b8d8:	d319      	bcc.n	b90e <__divsi3+0x72>
    b8da:	e000      	b.n	b8de <__divsi3+0x42>
    b8dc:	0a09      	lsrs	r1, r1, #8
    b8de:	0bc3      	lsrs	r3, r0, #15
    b8e0:	428b      	cmp	r3, r1
    b8e2:	d301      	bcc.n	b8e8 <__divsi3+0x4c>
    b8e4:	03cb      	lsls	r3, r1, #15
    b8e6:	1ac0      	subs	r0, r0, r3
    b8e8:	4152      	adcs	r2, r2
    b8ea:	0b83      	lsrs	r3, r0, #14
    b8ec:	428b      	cmp	r3, r1
    b8ee:	d301      	bcc.n	b8f4 <__divsi3+0x58>
    b8f0:	038b      	lsls	r3, r1, #14
    b8f2:	1ac0      	subs	r0, r0, r3
    b8f4:	4152      	adcs	r2, r2
    b8f6:	0b43      	lsrs	r3, r0, #13
    b8f8:	428b      	cmp	r3, r1
    b8fa:	d301      	bcc.n	b900 <__divsi3+0x64>
    b8fc:	034b      	lsls	r3, r1, #13
    b8fe:	1ac0      	subs	r0, r0, r3
    b900:	4152      	adcs	r2, r2
    b902:	0b03      	lsrs	r3, r0, #12
    b904:	428b      	cmp	r3, r1
    b906:	d301      	bcc.n	b90c <__divsi3+0x70>
    b908:	030b      	lsls	r3, r1, #12
    b90a:	1ac0      	subs	r0, r0, r3
    b90c:	4152      	adcs	r2, r2
    b90e:	0ac3      	lsrs	r3, r0, #11
    b910:	428b      	cmp	r3, r1
    b912:	d301      	bcc.n	b918 <__divsi3+0x7c>
    b914:	02cb      	lsls	r3, r1, #11
    b916:	1ac0      	subs	r0, r0, r3
    b918:	4152      	adcs	r2, r2
    b91a:	0a83      	lsrs	r3, r0, #10
    b91c:	428b      	cmp	r3, r1
    b91e:	d301      	bcc.n	b924 <__divsi3+0x88>
    b920:	028b      	lsls	r3, r1, #10
    b922:	1ac0      	subs	r0, r0, r3
    b924:	4152      	adcs	r2, r2
    b926:	0a43      	lsrs	r3, r0, #9
    b928:	428b      	cmp	r3, r1
    b92a:	d301      	bcc.n	b930 <__divsi3+0x94>
    b92c:	024b      	lsls	r3, r1, #9
    b92e:	1ac0      	subs	r0, r0, r3
    b930:	4152      	adcs	r2, r2
    b932:	0a03      	lsrs	r3, r0, #8
    b934:	428b      	cmp	r3, r1
    b936:	d301      	bcc.n	b93c <__divsi3+0xa0>
    b938:	020b      	lsls	r3, r1, #8
    b93a:	1ac0      	subs	r0, r0, r3
    b93c:	4152      	adcs	r2, r2
    b93e:	d2cd      	bcs.n	b8dc <__divsi3+0x40>
    b940:	09c3      	lsrs	r3, r0, #7
    b942:	428b      	cmp	r3, r1
    b944:	d301      	bcc.n	b94a <__divsi3+0xae>
    b946:	01cb      	lsls	r3, r1, #7
    b948:	1ac0      	subs	r0, r0, r3
    b94a:	4152      	adcs	r2, r2
    b94c:	0983      	lsrs	r3, r0, #6
    b94e:	428b      	cmp	r3, r1
    b950:	d301      	bcc.n	b956 <__divsi3+0xba>
    b952:	018b      	lsls	r3, r1, #6
    b954:	1ac0      	subs	r0, r0, r3
    b956:	4152      	adcs	r2, r2
    b958:	0943      	lsrs	r3, r0, #5
    b95a:	428b      	cmp	r3, r1
    b95c:	d301      	bcc.n	b962 <__divsi3+0xc6>
    b95e:	014b      	lsls	r3, r1, #5
    b960:	1ac0      	subs	r0, r0, r3
    b962:	4152      	adcs	r2, r2
    b964:	0903      	lsrs	r3, r0, #4
    b966:	428b      	cmp	r3, r1
    b968:	d301      	bcc.n	b96e <__divsi3+0xd2>
    b96a:	010b      	lsls	r3, r1, #4
    b96c:	1ac0      	subs	r0, r0, r3
    b96e:	4152      	adcs	r2, r2
    b970:	08c3      	lsrs	r3, r0, #3
    b972:	428b      	cmp	r3, r1
    b974:	d301      	bcc.n	b97a <__divsi3+0xde>
    b976:	00cb      	lsls	r3, r1, #3
    b978:	1ac0      	subs	r0, r0, r3
    b97a:	4152      	adcs	r2, r2
    b97c:	0883      	lsrs	r3, r0, #2
    b97e:	428b      	cmp	r3, r1
    b980:	d301      	bcc.n	b986 <__divsi3+0xea>
    b982:	008b      	lsls	r3, r1, #2
    b984:	1ac0      	subs	r0, r0, r3
    b986:	4152      	adcs	r2, r2
    b988:	0843      	lsrs	r3, r0, #1
    b98a:	428b      	cmp	r3, r1
    b98c:	d301      	bcc.n	b992 <__divsi3+0xf6>
    b98e:	004b      	lsls	r3, r1, #1
    b990:	1ac0      	subs	r0, r0, r3
    b992:	4152      	adcs	r2, r2
    b994:	1a41      	subs	r1, r0, r1
    b996:	d200      	bcs.n	b99a <__divsi3+0xfe>
    b998:	4601      	mov	r1, r0
    b99a:	4152      	adcs	r2, r2
    b99c:	4610      	mov	r0, r2
    b99e:	4770      	bx	lr
    b9a0:	e05d      	b.n	ba5e <__divsi3+0x1c2>
    b9a2:	0fca      	lsrs	r2, r1, #31
    b9a4:	d000      	beq.n	b9a8 <__divsi3+0x10c>
    b9a6:	4249      	negs	r1, r1
    b9a8:	1003      	asrs	r3, r0, #32
    b9aa:	d300      	bcc.n	b9ae <__divsi3+0x112>
    b9ac:	4240      	negs	r0, r0
    b9ae:	4053      	eors	r3, r2
    b9b0:	2200      	movs	r2, #0
    b9b2:	469c      	mov	ip, r3
    b9b4:	0903      	lsrs	r3, r0, #4
    b9b6:	428b      	cmp	r3, r1
    b9b8:	d32d      	bcc.n	ba16 <__divsi3+0x17a>
    b9ba:	0a03      	lsrs	r3, r0, #8
    b9bc:	428b      	cmp	r3, r1
    b9be:	d312      	bcc.n	b9e6 <__divsi3+0x14a>
    b9c0:	22fc      	movs	r2, #252	; 0xfc
    b9c2:	0189      	lsls	r1, r1, #6
    b9c4:	ba12      	rev	r2, r2
    b9c6:	0a03      	lsrs	r3, r0, #8
    b9c8:	428b      	cmp	r3, r1
    b9ca:	d30c      	bcc.n	b9e6 <__divsi3+0x14a>
    b9cc:	0189      	lsls	r1, r1, #6
    b9ce:	1192      	asrs	r2, r2, #6
    b9d0:	428b      	cmp	r3, r1
    b9d2:	d308      	bcc.n	b9e6 <__divsi3+0x14a>
    b9d4:	0189      	lsls	r1, r1, #6
    b9d6:	1192      	asrs	r2, r2, #6
    b9d8:	428b      	cmp	r3, r1
    b9da:	d304      	bcc.n	b9e6 <__divsi3+0x14a>
    b9dc:	0189      	lsls	r1, r1, #6
    b9de:	d03a      	beq.n	ba56 <__divsi3+0x1ba>
    b9e0:	1192      	asrs	r2, r2, #6
    b9e2:	e000      	b.n	b9e6 <__divsi3+0x14a>
    b9e4:	0989      	lsrs	r1, r1, #6
    b9e6:	09c3      	lsrs	r3, r0, #7
    b9e8:	428b      	cmp	r3, r1
    b9ea:	d301      	bcc.n	b9f0 <__divsi3+0x154>
    b9ec:	01cb      	lsls	r3, r1, #7
    b9ee:	1ac0      	subs	r0, r0, r3
    b9f0:	4152      	adcs	r2, r2
    b9f2:	0983      	lsrs	r3, r0, #6
    b9f4:	428b      	cmp	r3, r1
    b9f6:	d301      	bcc.n	b9fc <__divsi3+0x160>
    b9f8:	018b      	lsls	r3, r1, #6
    b9fa:	1ac0      	subs	r0, r0, r3
    b9fc:	4152      	adcs	r2, r2
    b9fe:	0943      	lsrs	r3, r0, #5
    ba00:	428b      	cmp	r3, r1
    ba02:	d301      	bcc.n	ba08 <__divsi3+0x16c>
    ba04:	014b      	lsls	r3, r1, #5
    ba06:	1ac0      	subs	r0, r0, r3
    ba08:	4152      	adcs	r2, r2
    ba0a:	0903      	lsrs	r3, r0, #4
    ba0c:	428b      	cmp	r3, r1
    ba0e:	d301      	bcc.n	ba14 <__divsi3+0x178>
    ba10:	010b      	lsls	r3, r1, #4
    ba12:	1ac0      	subs	r0, r0, r3
    ba14:	4152      	adcs	r2, r2
    ba16:	08c3      	lsrs	r3, r0, #3
    ba18:	428b      	cmp	r3, r1
    ba1a:	d301      	bcc.n	ba20 <__divsi3+0x184>
    ba1c:	00cb      	lsls	r3, r1, #3
    ba1e:	1ac0      	subs	r0, r0, r3
    ba20:	4152      	adcs	r2, r2
    ba22:	0883      	lsrs	r3, r0, #2
    ba24:	428b      	cmp	r3, r1
    ba26:	d301      	bcc.n	ba2c <__divsi3+0x190>
    ba28:	008b      	lsls	r3, r1, #2
    ba2a:	1ac0      	subs	r0, r0, r3
    ba2c:	4152      	adcs	r2, r2
    ba2e:	d2d9      	bcs.n	b9e4 <__divsi3+0x148>
    ba30:	0843      	lsrs	r3, r0, #1
    ba32:	428b      	cmp	r3, r1
    ba34:	d301      	bcc.n	ba3a <__divsi3+0x19e>
    ba36:	004b      	lsls	r3, r1, #1
    ba38:	1ac0      	subs	r0, r0, r3
    ba3a:	4152      	adcs	r2, r2
    ba3c:	1a41      	subs	r1, r0, r1
    ba3e:	d200      	bcs.n	ba42 <__divsi3+0x1a6>
    ba40:	4601      	mov	r1, r0
    ba42:	4663      	mov	r3, ip
    ba44:	4152      	adcs	r2, r2
    ba46:	105b      	asrs	r3, r3, #1
    ba48:	4610      	mov	r0, r2
    ba4a:	d301      	bcc.n	ba50 <__divsi3+0x1b4>
    ba4c:	4240      	negs	r0, r0
    ba4e:	2b00      	cmp	r3, #0
    ba50:	d500      	bpl.n	ba54 <__divsi3+0x1b8>
    ba52:	4249      	negs	r1, r1
    ba54:	4770      	bx	lr
    ba56:	4663      	mov	r3, ip
    ba58:	105b      	asrs	r3, r3, #1
    ba5a:	d300      	bcc.n	ba5e <__divsi3+0x1c2>
    ba5c:	4240      	negs	r0, r0
    ba5e:	b501      	push	{r0, lr}
    ba60:	2000      	movs	r0, #0
    ba62:	f000 f805 	bl	ba70 <__aeabi_idiv0>
    ba66:	bd02      	pop	{r1, pc}

0000ba68 <__aeabi_idivmod>:
    ba68:	2900      	cmp	r1, #0
    ba6a:	d0f8      	beq.n	ba5e <__divsi3+0x1c2>
    ba6c:	e716      	b.n	b89c <__divsi3>
    ba6e:	4770      	bx	lr

0000ba70 <__aeabi_idiv0>:
    ba70:	4770      	bx	lr
    ba72:	46c0      	nop			; (mov r8, r8)

0000ba74 <__aeabi_lmul>:
    ba74:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba76:	46ce      	mov	lr, r9
    ba78:	4647      	mov	r7, r8
    ba7a:	0415      	lsls	r5, r2, #16
    ba7c:	0c2d      	lsrs	r5, r5, #16
    ba7e:	002e      	movs	r6, r5
    ba80:	b580      	push	{r7, lr}
    ba82:	0407      	lsls	r7, r0, #16
    ba84:	0c14      	lsrs	r4, r2, #16
    ba86:	0c3f      	lsrs	r7, r7, #16
    ba88:	4699      	mov	r9, r3
    ba8a:	0c03      	lsrs	r3, r0, #16
    ba8c:	437e      	muls	r6, r7
    ba8e:	435d      	muls	r5, r3
    ba90:	4367      	muls	r7, r4
    ba92:	4363      	muls	r3, r4
    ba94:	197f      	adds	r7, r7, r5
    ba96:	0c34      	lsrs	r4, r6, #16
    ba98:	19e4      	adds	r4, r4, r7
    ba9a:	469c      	mov	ip, r3
    ba9c:	42a5      	cmp	r5, r4
    ba9e:	d903      	bls.n	baa8 <__aeabi_lmul+0x34>
    baa0:	2380      	movs	r3, #128	; 0x80
    baa2:	025b      	lsls	r3, r3, #9
    baa4:	4698      	mov	r8, r3
    baa6:	44c4      	add	ip, r8
    baa8:	464b      	mov	r3, r9
    baaa:	4351      	muls	r1, r2
    baac:	4343      	muls	r3, r0
    baae:	0436      	lsls	r6, r6, #16
    bab0:	0c36      	lsrs	r6, r6, #16
    bab2:	0c25      	lsrs	r5, r4, #16
    bab4:	0424      	lsls	r4, r4, #16
    bab6:	4465      	add	r5, ip
    bab8:	19a4      	adds	r4, r4, r6
    baba:	1859      	adds	r1, r3, r1
    babc:	1949      	adds	r1, r1, r5
    babe:	0020      	movs	r0, r4
    bac0:	bc0c      	pop	{r2, r3}
    bac2:	4690      	mov	r8, r2
    bac4:	4699      	mov	r9, r3
    bac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bac8 <__libc_init_array>:
    bac8:	b570      	push	{r4, r5, r6, lr}
    baca:	2600      	movs	r6, #0
    bacc:	4d0c      	ldr	r5, [pc, #48]	; (bb00 <__libc_init_array+0x38>)
    bace:	4c0d      	ldr	r4, [pc, #52]	; (bb04 <__libc_init_array+0x3c>)
    bad0:	1b64      	subs	r4, r4, r5
    bad2:	10a4      	asrs	r4, r4, #2
    bad4:	42a6      	cmp	r6, r4
    bad6:	d109      	bne.n	baec <__libc_init_array+0x24>
    bad8:	2600      	movs	r6, #0
    bada:	f001 fa53 	bl	cf84 <_init>
    bade:	4d0a      	ldr	r5, [pc, #40]	; (bb08 <__libc_init_array+0x40>)
    bae0:	4c0a      	ldr	r4, [pc, #40]	; (bb0c <__libc_init_array+0x44>)
    bae2:	1b64      	subs	r4, r4, r5
    bae4:	10a4      	asrs	r4, r4, #2
    bae6:	42a6      	cmp	r6, r4
    bae8:	d105      	bne.n	baf6 <__libc_init_array+0x2e>
    baea:	bd70      	pop	{r4, r5, r6, pc}
    baec:	00b3      	lsls	r3, r6, #2
    baee:	58eb      	ldr	r3, [r5, r3]
    baf0:	4798      	blx	r3
    baf2:	3601      	adds	r6, #1
    baf4:	e7ee      	b.n	bad4 <__libc_init_array+0xc>
    baf6:	00b3      	lsls	r3, r6, #2
    baf8:	58eb      	ldr	r3, [r5, r3]
    bafa:	4798      	blx	r3
    bafc:	3601      	adds	r6, #1
    bafe:	e7f2      	b.n	bae6 <__libc_init_array+0x1e>
    bb00:	0000cf90 	.word	0x0000cf90
    bb04:	0000cf90 	.word	0x0000cf90
    bb08:	0000cf90 	.word	0x0000cf90
    bb0c:	0000cf94 	.word	0x0000cf94

0000bb10 <malloc>:
    bb10:	b510      	push	{r4, lr}
    bb12:	4b03      	ldr	r3, [pc, #12]	; (bb20 <malloc+0x10>)
    bb14:	0001      	movs	r1, r0
    bb16:	6818      	ldr	r0, [r3, #0]
    bb18:	f000 f860 	bl	bbdc <_malloc_r>
    bb1c:	bd10      	pop	{r4, pc}
    bb1e:	46c0      	nop			; (mov r8, r8)
    bb20:	20000044 	.word	0x20000044

0000bb24 <memcpy>:
    bb24:	2300      	movs	r3, #0
    bb26:	b510      	push	{r4, lr}
    bb28:	429a      	cmp	r2, r3
    bb2a:	d100      	bne.n	bb2e <memcpy+0xa>
    bb2c:	bd10      	pop	{r4, pc}
    bb2e:	5ccc      	ldrb	r4, [r1, r3]
    bb30:	54c4      	strb	r4, [r0, r3]
    bb32:	3301      	adds	r3, #1
    bb34:	e7f8      	b.n	bb28 <memcpy+0x4>

0000bb36 <memset>:
    bb36:	0003      	movs	r3, r0
    bb38:	1882      	adds	r2, r0, r2
    bb3a:	4293      	cmp	r3, r2
    bb3c:	d100      	bne.n	bb40 <memset+0xa>
    bb3e:	4770      	bx	lr
    bb40:	7019      	strb	r1, [r3, #0]
    bb42:	3301      	adds	r3, #1
    bb44:	e7f9      	b.n	bb3a <memset+0x4>
	...

0000bb48 <_free_r>:
    bb48:	b570      	push	{r4, r5, r6, lr}
    bb4a:	0005      	movs	r5, r0
    bb4c:	2900      	cmp	r1, #0
    bb4e:	d010      	beq.n	bb72 <_free_r+0x2a>
    bb50:	1f0c      	subs	r4, r1, #4
    bb52:	6823      	ldr	r3, [r4, #0]
    bb54:	2b00      	cmp	r3, #0
    bb56:	da00      	bge.n	bb5a <_free_r+0x12>
    bb58:	18e4      	adds	r4, r4, r3
    bb5a:	0028      	movs	r0, r5
    bb5c:	f000 fb22 	bl	c1a4 <__malloc_lock>
    bb60:	4a1d      	ldr	r2, [pc, #116]	; (bbd8 <_free_r+0x90>)
    bb62:	6813      	ldr	r3, [r2, #0]
    bb64:	2b00      	cmp	r3, #0
    bb66:	d105      	bne.n	bb74 <_free_r+0x2c>
    bb68:	6063      	str	r3, [r4, #4]
    bb6a:	6014      	str	r4, [r2, #0]
    bb6c:	0028      	movs	r0, r5
    bb6e:	f000 fb1a 	bl	c1a6 <__malloc_unlock>
    bb72:	bd70      	pop	{r4, r5, r6, pc}
    bb74:	42a3      	cmp	r3, r4
    bb76:	d909      	bls.n	bb8c <_free_r+0x44>
    bb78:	6821      	ldr	r1, [r4, #0]
    bb7a:	1860      	adds	r0, r4, r1
    bb7c:	4283      	cmp	r3, r0
    bb7e:	d1f3      	bne.n	bb68 <_free_r+0x20>
    bb80:	6818      	ldr	r0, [r3, #0]
    bb82:	685b      	ldr	r3, [r3, #4]
    bb84:	1841      	adds	r1, r0, r1
    bb86:	6021      	str	r1, [r4, #0]
    bb88:	e7ee      	b.n	bb68 <_free_r+0x20>
    bb8a:	0013      	movs	r3, r2
    bb8c:	685a      	ldr	r2, [r3, #4]
    bb8e:	2a00      	cmp	r2, #0
    bb90:	d001      	beq.n	bb96 <_free_r+0x4e>
    bb92:	42a2      	cmp	r2, r4
    bb94:	d9f9      	bls.n	bb8a <_free_r+0x42>
    bb96:	6819      	ldr	r1, [r3, #0]
    bb98:	1858      	adds	r0, r3, r1
    bb9a:	42a0      	cmp	r0, r4
    bb9c:	d10b      	bne.n	bbb6 <_free_r+0x6e>
    bb9e:	6820      	ldr	r0, [r4, #0]
    bba0:	1809      	adds	r1, r1, r0
    bba2:	1858      	adds	r0, r3, r1
    bba4:	6019      	str	r1, [r3, #0]
    bba6:	4282      	cmp	r2, r0
    bba8:	d1e0      	bne.n	bb6c <_free_r+0x24>
    bbaa:	6810      	ldr	r0, [r2, #0]
    bbac:	6852      	ldr	r2, [r2, #4]
    bbae:	1841      	adds	r1, r0, r1
    bbb0:	6019      	str	r1, [r3, #0]
    bbb2:	605a      	str	r2, [r3, #4]
    bbb4:	e7da      	b.n	bb6c <_free_r+0x24>
    bbb6:	42a0      	cmp	r0, r4
    bbb8:	d902      	bls.n	bbc0 <_free_r+0x78>
    bbba:	230c      	movs	r3, #12
    bbbc:	602b      	str	r3, [r5, #0]
    bbbe:	e7d5      	b.n	bb6c <_free_r+0x24>
    bbc0:	6821      	ldr	r1, [r4, #0]
    bbc2:	1860      	adds	r0, r4, r1
    bbc4:	4282      	cmp	r2, r0
    bbc6:	d103      	bne.n	bbd0 <_free_r+0x88>
    bbc8:	6810      	ldr	r0, [r2, #0]
    bbca:	6852      	ldr	r2, [r2, #4]
    bbcc:	1841      	adds	r1, r0, r1
    bbce:	6021      	str	r1, [r4, #0]
    bbd0:	6062      	str	r2, [r4, #4]
    bbd2:	605c      	str	r4, [r3, #4]
    bbd4:	e7ca      	b.n	bb6c <_free_r+0x24>
    bbd6:	46c0      	nop			; (mov r8, r8)
    bbd8:	200001b8 	.word	0x200001b8

0000bbdc <_malloc_r>:
    bbdc:	2303      	movs	r3, #3
    bbde:	b570      	push	{r4, r5, r6, lr}
    bbe0:	1ccd      	adds	r5, r1, #3
    bbe2:	439d      	bics	r5, r3
    bbe4:	3508      	adds	r5, #8
    bbe6:	0006      	movs	r6, r0
    bbe8:	2d0c      	cmp	r5, #12
    bbea:	d21e      	bcs.n	bc2a <_malloc_r+0x4e>
    bbec:	250c      	movs	r5, #12
    bbee:	42a9      	cmp	r1, r5
    bbf0:	d81d      	bhi.n	bc2e <_malloc_r+0x52>
    bbf2:	0030      	movs	r0, r6
    bbf4:	f000 fad6 	bl	c1a4 <__malloc_lock>
    bbf8:	4a25      	ldr	r2, [pc, #148]	; (bc90 <_malloc_r+0xb4>)
    bbfa:	6814      	ldr	r4, [r2, #0]
    bbfc:	0021      	movs	r1, r4
    bbfe:	2900      	cmp	r1, #0
    bc00:	d119      	bne.n	bc36 <_malloc_r+0x5a>
    bc02:	4c24      	ldr	r4, [pc, #144]	; (bc94 <_malloc_r+0xb8>)
    bc04:	6823      	ldr	r3, [r4, #0]
    bc06:	2b00      	cmp	r3, #0
    bc08:	d103      	bne.n	bc12 <_malloc_r+0x36>
    bc0a:	0030      	movs	r0, r6
    bc0c:	f000 f844 	bl	bc98 <_sbrk_r>
    bc10:	6020      	str	r0, [r4, #0]
    bc12:	0029      	movs	r1, r5
    bc14:	0030      	movs	r0, r6
    bc16:	f000 f83f 	bl	bc98 <_sbrk_r>
    bc1a:	1c43      	adds	r3, r0, #1
    bc1c:	d12c      	bne.n	bc78 <_malloc_r+0x9c>
    bc1e:	230c      	movs	r3, #12
    bc20:	0030      	movs	r0, r6
    bc22:	6033      	str	r3, [r6, #0]
    bc24:	f000 fabf 	bl	c1a6 <__malloc_unlock>
    bc28:	e003      	b.n	bc32 <_malloc_r+0x56>
    bc2a:	2d00      	cmp	r5, #0
    bc2c:	dadf      	bge.n	bbee <_malloc_r+0x12>
    bc2e:	230c      	movs	r3, #12
    bc30:	6033      	str	r3, [r6, #0]
    bc32:	2000      	movs	r0, #0
    bc34:	bd70      	pop	{r4, r5, r6, pc}
    bc36:	680b      	ldr	r3, [r1, #0]
    bc38:	1b5b      	subs	r3, r3, r5
    bc3a:	d41a      	bmi.n	bc72 <_malloc_r+0x96>
    bc3c:	2b0b      	cmp	r3, #11
    bc3e:	d903      	bls.n	bc48 <_malloc_r+0x6c>
    bc40:	600b      	str	r3, [r1, #0]
    bc42:	18cc      	adds	r4, r1, r3
    bc44:	6025      	str	r5, [r4, #0]
    bc46:	e003      	b.n	bc50 <_malloc_r+0x74>
    bc48:	428c      	cmp	r4, r1
    bc4a:	d10e      	bne.n	bc6a <_malloc_r+0x8e>
    bc4c:	6863      	ldr	r3, [r4, #4]
    bc4e:	6013      	str	r3, [r2, #0]
    bc50:	0030      	movs	r0, r6
    bc52:	f000 faa8 	bl	c1a6 <__malloc_unlock>
    bc56:	0020      	movs	r0, r4
    bc58:	2207      	movs	r2, #7
    bc5a:	300b      	adds	r0, #11
    bc5c:	1d23      	adds	r3, r4, #4
    bc5e:	4390      	bics	r0, r2
    bc60:	1ac3      	subs	r3, r0, r3
    bc62:	d0e7      	beq.n	bc34 <_malloc_r+0x58>
    bc64:	425a      	negs	r2, r3
    bc66:	50e2      	str	r2, [r4, r3]
    bc68:	e7e4      	b.n	bc34 <_malloc_r+0x58>
    bc6a:	684b      	ldr	r3, [r1, #4]
    bc6c:	6063      	str	r3, [r4, #4]
    bc6e:	000c      	movs	r4, r1
    bc70:	e7ee      	b.n	bc50 <_malloc_r+0x74>
    bc72:	000c      	movs	r4, r1
    bc74:	6849      	ldr	r1, [r1, #4]
    bc76:	e7c2      	b.n	bbfe <_malloc_r+0x22>
    bc78:	2303      	movs	r3, #3
    bc7a:	1cc4      	adds	r4, r0, #3
    bc7c:	439c      	bics	r4, r3
    bc7e:	42a0      	cmp	r0, r4
    bc80:	d0e0      	beq.n	bc44 <_malloc_r+0x68>
    bc82:	1a21      	subs	r1, r4, r0
    bc84:	0030      	movs	r0, r6
    bc86:	f000 f807 	bl	bc98 <_sbrk_r>
    bc8a:	1c43      	adds	r3, r0, #1
    bc8c:	d1da      	bne.n	bc44 <_malloc_r+0x68>
    bc8e:	e7c6      	b.n	bc1e <_malloc_r+0x42>
    bc90:	200001b8 	.word	0x200001b8
    bc94:	200001bc 	.word	0x200001bc

0000bc98 <_sbrk_r>:
    bc98:	2300      	movs	r3, #0
    bc9a:	b570      	push	{r4, r5, r6, lr}
    bc9c:	4c06      	ldr	r4, [pc, #24]	; (bcb8 <_sbrk_r+0x20>)
    bc9e:	0005      	movs	r5, r0
    bca0:	0008      	movs	r0, r1
    bca2:	6023      	str	r3, [r4, #0]
    bca4:	f7fb f9ae 	bl	7004 <_sbrk>
    bca8:	1c43      	adds	r3, r0, #1
    bcaa:	d103      	bne.n	bcb4 <_sbrk_r+0x1c>
    bcac:	6823      	ldr	r3, [r4, #0]
    bcae:	2b00      	cmp	r3, #0
    bcb0:	d000      	beq.n	bcb4 <_sbrk_r+0x1c>
    bcb2:	602b      	str	r3, [r5, #0]
    bcb4:	bd70      	pop	{r4, r5, r6, pc}
    bcb6:	46c0      	nop			; (mov r8, r8)
    bcb8:	20000ce4 	.word	0x20000ce4

0000bcbc <setbuf>:
    bcbc:	424a      	negs	r2, r1
    bcbe:	414a      	adcs	r2, r1
    bcc0:	2380      	movs	r3, #128	; 0x80
    bcc2:	b510      	push	{r4, lr}
    bcc4:	0052      	lsls	r2, r2, #1
    bcc6:	00db      	lsls	r3, r3, #3
    bcc8:	f000 f802 	bl	bcd0 <setvbuf>
    bccc:	bd10      	pop	{r4, pc}
	...

0000bcd0 <setvbuf>:
    bcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcd2:	001d      	movs	r5, r3
    bcd4:	4b4f      	ldr	r3, [pc, #316]	; (be14 <setvbuf+0x144>)
    bcd6:	b085      	sub	sp, #20
    bcd8:	681e      	ldr	r6, [r3, #0]
    bcda:	0004      	movs	r4, r0
    bcdc:	000f      	movs	r7, r1
    bcde:	9200      	str	r2, [sp, #0]
    bce0:	2e00      	cmp	r6, #0
    bce2:	d005      	beq.n	bcf0 <setvbuf+0x20>
    bce4:	69b3      	ldr	r3, [r6, #24]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d102      	bne.n	bcf0 <setvbuf+0x20>
    bcea:	0030      	movs	r0, r6
    bcec:	f000 f99c 	bl	c028 <__sinit>
    bcf0:	4b49      	ldr	r3, [pc, #292]	; (be18 <setvbuf+0x148>)
    bcf2:	429c      	cmp	r4, r3
    bcf4:	d150      	bne.n	bd98 <setvbuf+0xc8>
    bcf6:	6874      	ldr	r4, [r6, #4]
    bcf8:	9b00      	ldr	r3, [sp, #0]
    bcfa:	2b02      	cmp	r3, #2
    bcfc:	d005      	beq.n	bd0a <setvbuf+0x3a>
    bcfe:	2b01      	cmp	r3, #1
    bd00:	d900      	bls.n	bd04 <setvbuf+0x34>
    bd02:	e084      	b.n	be0e <setvbuf+0x13e>
    bd04:	2d00      	cmp	r5, #0
    bd06:	da00      	bge.n	bd0a <setvbuf+0x3a>
    bd08:	e081      	b.n	be0e <setvbuf+0x13e>
    bd0a:	0021      	movs	r1, r4
    bd0c:	0030      	movs	r0, r6
    bd0e:	f000 f91d 	bl	bf4c <_fflush_r>
    bd12:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bd14:	2900      	cmp	r1, #0
    bd16:	d008      	beq.n	bd2a <setvbuf+0x5a>
    bd18:	0023      	movs	r3, r4
    bd1a:	3344      	adds	r3, #68	; 0x44
    bd1c:	4299      	cmp	r1, r3
    bd1e:	d002      	beq.n	bd26 <setvbuf+0x56>
    bd20:	0030      	movs	r0, r6
    bd22:	f7ff ff11 	bl	bb48 <_free_r>
    bd26:	2300      	movs	r3, #0
    bd28:	6363      	str	r3, [r4, #52]	; 0x34
    bd2a:	2300      	movs	r3, #0
    bd2c:	61a3      	str	r3, [r4, #24]
    bd2e:	6063      	str	r3, [r4, #4]
    bd30:	89a3      	ldrh	r3, [r4, #12]
    bd32:	061b      	lsls	r3, r3, #24
    bd34:	d503      	bpl.n	bd3e <setvbuf+0x6e>
    bd36:	6921      	ldr	r1, [r4, #16]
    bd38:	0030      	movs	r0, r6
    bd3a:	f7ff ff05 	bl	bb48 <_free_r>
    bd3e:	89a3      	ldrh	r3, [r4, #12]
    bd40:	4a36      	ldr	r2, [pc, #216]	; (be1c <setvbuf+0x14c>)
    bd42:	4013      	ands	r3, r2
    bd44:	81a3      	strh	r3, [r4, #12]
    bd46:	9b00      	ldr	r3, [sp, #0]
    bd48:	2b02      	cmp	r3, #2
    bd4a:	d05a      	beq.n	be02 <setvbuf+0x132>
    bd4c:	ab03      	add	r3, sp, #12
    bd4e:	aa02      	add	r2, sp, #8
    bd50:	0021      	movs	r1, r4
    bd52:	0030      	movs	r0, r6
    bd54:	f000 f9fe 	bl	c154 <__swhatbuf_r>
    bd58:	89a3      	ldrh	r3, [r4, #12]
    bd5a:	4318      	orrs	r0, r3
    bd5c:	81a0      	strh	r0, [r4, #12]
    bd5e:	2d00      	cmp	r5, #0
    bd60:	d124      	bne.n	bdac <setvbuf+0xdc>
    bd62:	9d02      	ldr	r5, [sp, #8]
    bd64:	0028      	movs	r0, r5
    bd66:	f7ff fed3 	bl	bb10 <malloc>
    bd6a:	9501      	str	r5, [sp, #4]
    bd6c:	1e07      	subs	r7, r0, #0
    bd6e:	d142      	bne.n	bdf6 <setvbuf+0x126>
    bd70:	9b02      	ldr	r3, [sp, #8]
    bd72:	9301      	str	r3, [sp, #4]
    bd74:	42ab      	cmp	r3, r5
    bd76:	d139      	bne.n	bdec <setvbuf+0x11c>
    bd78:	2001      	movs	r0, #1
    bd7a:	4240      	negs	r0, r0
    bd7c:	2302      	movs	r3, #2
    bd7e:	89a2      	ldrh	r2, [r4, #12]
    bd80:	4313      	orrs	r3, r2
    bd82:	81a3      	strh	r3, [r4, #12]
    bd84:	2300      	movs	r3, #0
    bd86:	60a3      	str	r3, [r4, #8]
    bd88:	0023      	movs	r3, r4
    bd8a:	3347      	adds	r3, #71	; 0x47
    bd8c:	6023      	str	r3, [r4, #0]
    bd8e:	6123      	str	r3, [r4, #16]
    bd90:	2301      	movs	r3, #1
    bd92:	6163      	str	r3, [r4, #20]
    bd94:	b005      	add	sp, #20
    bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd98:	4b21      	ldr	r3, [pc, #132]	; (be20 <setvbuf+0x150>)
    bd9a:	429c      	cmp	r4, r3
    bd9c:	d101      	bne.n	bda2 <setvbuf+0xd2>
    bd9e:	68b4      	ldr	r4, [r6, #8]
    bda0:	e7aa      	b.n	bcf8 <setvbuf+0x28>
    bda2:	4b20      	ldr	r3, [pc, #128]	; (be24 <setvbuf+0x154>)
    bda4:	429c      	cmp	r4, r3
    bda6:	d1a7      	bne.n	bcf8 <setvbuf+0x28>
    bda8:	68f4      	ldr	r4, [r6, #12]
    bdaa:	e7a5      	b.n	bcf8 <setvbuf+0x28>
    bdac:	2f00      	cmp	r7, #0
    bdae:	d0d9      	beq.n	bd64 <setvbuf+0x94>
    bdb0:	69b3      	ldr	r3, [r6, #24]
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	d102      	bne.n	bdbc <setvbuf+0xec>
    bdb6:	0030      	movs	r0, r6
    bdb8:	f000 f936 	bl	c028 <__sinit>
    bdbc:	9b00      	ldr	r3, [sp, #0]
    bdbe:	2b01      	cmp	r3, #1
    bdc0:	d103      	bne.n	bdca <setvbuf+0xfa>
    bdc2:	89a3      	ldrh	r3, [r4, #12]
    bdc4:	9a00      	ldr	r2, [sp, #0]
    bdc6:	431a      	orrs	r2, r3
    bdc8:	81a2      	strh	r2, [r4, #12]
    bdca:	2008      	movs	r0, #8
    bdcc:	89a3      	ldrh	r3, [r4, #12]
    bdce:	6027      	str	r7, [r4, #0]
    bdd0:	6127      	str	r7, [r4, #16]
    bdd2:	6165      	str	r5, [r4, #20]
    bdd4:	4018      	ands	r0, r3
    bdd6:	d018      	beq.n	be0a <setvbuf+0x13a>
    bdd8:	2001      	movs	r0, #1
    bdda:	4018      	ands	r0, r3
    bddc:	2300      	movs	r3, #0
    bdde:	4298      	cmp	r0, r3
    bde0:	d011      	beq.n	be06 <setvbuf+0x136>
    bde2:	426d      	negs	r5, r5
    bde4:	60a3      	str	r3, [r4, #8]
    bde6:	61a5      	str	r5, [r4, #24]
    bde8:	0018      	movs	r0, r3
    bdea:	e7d3      	b.n	bd94 <setvbuf+0xc4>
    bdec:	9801      	ldr	r0, [sp, #4]
    bdee:	f7ff fe8f 	bl	bb10 <malloc>
    bdf2:	1e07      	subs	r7, r0, #0
    bdf4:	d0c0      	beq.n	bd78 <setvbuf+0xa8>
    bdf6:	2380      	movs	r3, #128	; 0x80
    bdf8:	89a2      	ldrh	r2, [r4, #12]
    bdfa:	9d01      	ldr	r5, [sp, #4]
    bdfc:	4313      	orrs	r3, r2
    bdfe:	81a3      	strh	r3, [r4, #12]
    be00:	e7d6      	b.n	bdb0 <setvbuf+0xe0>
    be02:	2000      	movs	r0, #0
    be04:	e7ba      	b.n	bd7c <setvbuf+0xac>
    be06:	60a5      	str	r5, [r4, #8]
    be08:	e7c4      	b.n	bd94 <setvbuf+0xc4>
    be0a:	60a0      	str	r0, [r4, #8]
    be0c:	e7c2      	b.n	bd94 <setvbuf+0xc4>
    be0e:	2001      	movs	r0, #1
    be10:	4240      	negs	r0, r0
    be12:	e7bf      	b.n	bd94 <setvbuf+0xc4>
    be14:	20000044 	.word	0x20000044
    be18:	0000cf44 	.word	0x0000cf44
    be1c:	fffff35c 	.word	0xfffff35c
    be20:	0000cf64 	.word	0x0000cf64
    be24:	0000cf24 	.word	0x0000cf24

0000be28 <strlen>:
    be28:	2300      	movs	r3, #0
    be2a:	5cc2      	ldrb	r2, [r0, r3]
    be2c:	3301      	adds	r3, #1
    be2e:	2a00      	cmp	r2, #0
    be30:	d1fb      	bne.n	be2a <strlen+0x2>
    be32:	1e58      	subs	r0, r3, #1
    be34:	4770      	bx	lr
	...

0000be38 <__sflush_r>:
    be38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    be3a:	898a      	ldrh	r2, [r1, #12]
    be3c:	0005      	movs	r5, r0
    be3e:	000c      	movs	r4, r1
    be40:	0713      	lsls	r3, r2, #28
    be42:	d460      	bmi.n	bf06 <__sflush_r+0xce>
    be44:	684b      	ldr	r3, [r1, #4]
    be46:	2b00      	cmp	r3, #0
    be48:	dc04      	bgt.n	be54 <__sflush_r+0x1c>
    be4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    be4c:	2b00      	cmp	r3, #0
    be4e:	dc01      	bgt.n	be54 <__sflush_r+0x1c>
    be50:	2000      	movs	r0, #0
    be52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    be54:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    be56:	2f00      	cmp	r7, #0
    be58:	d0fa      	beq.n	be50 <__sflush_r+0x18>
    be5a:	2300      	movs	r3, #0
    be5c:	682e      	ldr	r6, [r5, #0]
    be5e:	602b      	str	r3, [r5, #0]
    be60:	2380      	movs	r3, #128	; 0x80
    be62:	015b      	lsls	r3, r3, #5
    be64:	401a      	ands	r2, r3
    be66:	d034      	beq.n	bed2 <__sflush_r+0x9a>
    be68:	6d60      	ldr	r0, [r4, #84]	; 0x54
    be6a:	89a3      	ldrh	r3, [r4, #12]
    be6c:	075b      	lsls	r3, r3, #29
    be6e:	d506      	bpl.n	be7e <__sflush_r+0x46>
    be70:	6863      	ldr	r3, [r4, #4]
    be72:	1ac0      	subs	r0, r0, r3
    be74:	6b63      	ldr	r3, [r4, #52]	; 0x34
    be76:	2b00      	cmp	r3, #0
    be78:	d001      	beq.n	be7e <__sflush_r+0x46>
    be7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    be7c:	1ac0      	subs	r0, r0, r3
    be7e:	0002      	movs	r2, r0
    be80:	6a21      	ldr	r1, [r4, #32]
    be82:	2300      	movs	r3, #0
    be84:	0028      	movs	r0, r5
    be86:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    be88:	47b8      	blx	r7
    be8a:	89a1      	ldrh	r1, [r4, #12]
    be8c:	1c43      	adds	r3, r0, #1
    be8e:	d106      	bne.n	be9e <__sflush_r+0x66>
    be90:	682b      	ldr	r3, [r5, #0]
    be92:	2b1d      	cmp	r3, #29
    be94:	d831      	bhi.n	befa <__sflush_r+0xc2>
    be96:	4a2c      	ldr	r2, [pc, #176]	; (bf48 <__sflush_r+0x110>)
    be98:	40da      	lsrs	r2, r3
    be9a:	07d3      	lsls	r3, r2, #31
    be9c:	d52d      	bpl.n	befa <__sflush_r+0xc2>
    be9e:	2300      	movs	r3, #0
    bea0:	6063      	str	r3, [r4, #4]
    bea2:	6923      	ldr	r3, [r4, #16]
    bea4:	6023      	str	r3, [r4, #0]
    bea6:	04cb      	lsls	r3, r1, #19
    bea8:	d505      	bpl.n	beb6 <__sflush_r+0x7e>
    beaa:	1c43      	adds	r3, r0, #1
    beac:	d102      	bne.n	beb4 <__sflush_r+0x7c>
    beae:	682b      	ldr	r3, [r5, #0]
    beb0:	2b00      	cmp	r3, #0
    beb2:	d100      	bne.n	beb6 <__sflush_r+0x7e>
    beb4:	6560      	str	r0, [r4, #84]	; 0x54
    beb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    beb8:	602e      	str	r6, [r5, #0]
    beba:	2900      	cmp	r1, #0
    bebc:	d0c8      	beq.n	be50 <__sflush_r+0x18>
    bebe:	0023      	movs	r3, r4
    bec0:	3344      	adds	r3, #68	; 0x44
    bec2:	4299      	cmp	r1, r3
    bec4:	d002      	beq.n	becc <__sflush_r+0x94>
    bec6:	0028      	movs	r0, r5
    bec8:	f7ff fe3e 	bl	bb48 <_free_r>
    becc:	2000      	movs	r0, #0
    bece:	6360      	str	r0, [r4, #52]	; 0x34
    bed0:	e7bf      	b.n	be52 <__sflush_r+0x1a>
    bed2:	2301      	movs	r3, #1
    bed4:	6a21      	ldr	r1, [r4, #32]
    bed6:	0028      	movs	r0, r5
    bed8:	47b8      	blx	r7
    beda:	1c43      	adds	r3, r0, #1
    bedc:	d1c5      	bne.n	be6a <__sflush_r+0x32>
    bede:	682b      	ldr	r3, [r5, #0]
    bee0:	2b00      	cmp	r3, #0
    bee2:	d0c2      	beq.n	be6a <__sflush_r+0x32>
    bee4:	2b1d      	cmp	r3, #29
    bee6:	d001      	beq.n	beec <__sflush_r+0xb4>
    bee8:	2b16      	cmp	r3, #22
    beea:	d101      	bne.n	bef0 <__sflush_r+0xb8>
    beec:	602e      	str	r6, [r5, #0]
    beee:	e7af      	b.n	be50 <__sflush_r+0x18>
    bef0:	2340      	movs	r3, #64	; 0x40
    bef2:	89a2      	ldrh	r2, [r4, #12]
    bef4:	4313      	orrs	r3, r2
    bef6:	81a3      	strh	r3, [r4, #12]
    bef8:	e7ab      	b.n	be52 <__sflush_r+0x1a>
    befa:	2340      	movs	r3, #64	; 0x40
    befc:	430b      	orrs	r3, r1
    befe:	2001      	movs	r0, #1
    bf00:	81a3      	strh	r3, [r4, #12]
    bf02:	4240      	negs	r0, r0
    bf04:	e7a5      	b.n	be52 <__sflush_r+0x1a>
    bf06:	690f      	ldr	r7, [r1, #16]
    bf08:	2f00      	cmp	r7, #0
    bf0a:	d0a1      	beq.n	be50 <__sflush_r+0x18>
    bf0c:	680b      	ldr	r3, [r1, #0]
    bf0e:	600f      	str	r7, [r1, #0]
    bf10:	1bdb      	subs	r3, r3, r7
    bf12:	9301      	str	r3, [sp, #4]
    bf14:	2300      	movs	r3, #0
    bf16:	0792      	lsls	r2, r2, #30
    bf18:	d100      	bne.n	bf1c <__sflush_r+0xe4>
    bf1a:	694b      	ldr	r3, [r1, #20]
    bf1c:	60a3      	str	r3, [r4, #8]
    bf1e:	9b01      	ldr	r3, [sp, #4]
    bf20:	2b00      	cmp	r3, #0
    bf22:	dc00      	bgt.n	bf26 <__sflush_r+0xee>
    bf24:	e794      	b.n	be50 <__sflush_r+0x18>
    bf26:	9b01      	ldr	r3, [sp, #4]
    bf28:	003a      	movs	r2, r7
    bf2a:	6a21      	ldr	r1, [r4, #32]
    bf2c:	0028      	movs	r0, r5
    bf2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    bf30:	47b0      	blx	r6
    bf32:	2800      	cmp	r0, #0
    bf34:	dc03      	bgt.n	bf3e <__sflush_r+0x106>
    bf36:	2340      	movs	r3, #64	; 0x40
    bf38:	89a2      	ldrh	r2, [r4, #12]
    bf3a:	4313      	orrs	r3, r2
    bf3c:	e7df      	b.n	befe <__sflush_r+0xc6>
    bf3e:	9b01      	ldr	r3, [sp, #4]
    bf40:	183f      	adds	r7, r7, r0
    bf42:	1a1b      	subs	r3, r3, r0
    bf44:	9301      	str	r3, [sp, #4]
    bf46:	e7ea      	b.n	bf1e <__sflush_r+0xe6>
    bf48:	20400001 	.word	0x20400001

0000bf4c <_fflush_r>:
    bf4c:	690b      	ldr	r3, [r1, #16]
    bf4e:	b570      	push	{r4, r5, r6, lr}
    bf50:	0005      	movs	r5, r0
    bf52:	000c      	movs	r4, r1
    bf54:	2b00      	cmp	r3, #0
    bf56:	d101      	bne.n	bf5c <_fflush_r+0x10>
    bf58:	2000      	movs	r0, #0
    bf5a:	bd70      	pop	{r4, r5, r6, pc}
    bf5c:	2800      	cmp	r0, #0
    bf5e:	d004      	beq.n	bf6a <_fflush_r+0x1e>
    bf60:	6983      	ldr	r3, [r0, #24]
    bf62:	2b00      	cmp	r3, #0
    bf64:	d101      	bne.n	bf6a <_fflush_r+0x1e>
    bf66:	f000 f85f 	bl	c028 <__sinit>
    bf6a:	4b0b      	ldr	r3, [pc, #44]	; (bf98 <_fflush_r+0x4c>)
    bf6c:	429c      	cmp	r4, r3
    bf6e:	d109      	bne.n	bf84 <_fflush_r+0x38>
    bf70:	686c      	ldr	r4, [r5, #4]
    bf72:	220c      	movs	r2, #12
    bf74:	5ea3      	ldrsh	r3, [r4, r2]
    bf76:	2b00      	cmp	r3, #0
    bf78:	d0ee      	beq.n	bf58 <_fflush_r+0xc>
    bf7a:	0021      	movs	r1, r4
    bf7c:	0028      	movs	r0, r5
    bf7e:	f7ff ff5b 	bl	be38 <__sflush_r>
    bf82:	e7ea      	b.n	bf5a <_fflush_r+0xe>
    bf84:	4b05      	ldr	r3, [pc, #20]	; (bf9c <_fflush_r+0x50>)
    bf86:	429c      	cmp	r4, r3
    bf88:	d101      	bne.n	bf8e <_fflush_r+0x42>
    bf8a:	68ac      	ldr	r4, [r5, #8]
    bf8c:	e7f1      	b.n	bf72 <_fflush_r+0x26>
    bf8e:	4b04      	ldr	r3, [pc, #16]	; (bfa0 <_fflush_r+0x54>)
    bf90:	429c      	cmp	r4, r3
    bf92:	d1ee      	bne.n	bf72 <_fflush_r+0x26>
    bf94:	68ec      	ldr	r4, [r5, #12]
    bf96:	e7ec      	b.n	bf72 <_fflush_r+0x26>
    bf98:	0000cf44 	.word	0x0000cf44
    bf9c:	0000cf64 	.word	0x0000cf64
    bfa0:	0000cf24 	.word	0x0000cf24

0000bfa4 <_cleanup_r>:
    bfa4:	b510      	push	{r4, lr}
    bfa6:	4902      	ldr	r1, [pc, #8]	; (bfb0 <_cleanup_r+0xc>)
    bfa8:	f000 f8b2 	bl	c110 <_fwalk_reent>
    bfac:	bd10      	pop	{r4, pc}
    bfae:	46c0      	nop			; (mov r8, r8)
    bfb0:	0000bf4d 	.word	0x0000bf4d

0000bfb4 <std.isra.0>:
    bfb4:	2300      	movs	r3, #0
    bfb6:	b510      	push	{r4, lr}
    bfb8:	0004      	movs	r4, r0
    bfba:	6003      	str	r3, [r0, #0]
    bfbc:	6043      	str	r3, [r0, #4]
    bfbe:	6083      	str	r3, [r0, #8]
    bfc0:	8181      	strh	r1, [r0, #12]
    bfc2:	6643      	str	r3, [r0, #100]	; 0x64
    bfc4:	81c2      	strh	r2, [r0, #14]
    bfc6:	6103      	str	r3, [r0, #16]
    bfc8:	6143      	str	r3, [r0, #20]
    bfca:	6183      	str	r3, [r0, #24]
    bfcc:	0019      	movs	r1, r3
    bfce:	2208      	movs	r2, #8
    bfd0:	305c      	adds	r0, #92	; 0x5c
    bfd2:	f7ff fdb0 	bl	bb36 <memset>
    bfd6:	4b05      	ldr	r3, [pc, #20]	; (bfec <std.isra.0+0x38>)
    bfd8:	6224      	str	r4, [r4, #32]
    bfda:	6263      	str	r3, [r4, #36]	; 0x24
    bfdc:	4b04      	ldr	r3, [pc, #16]	; (bff0 <std.isra.0+0x3c>)
    bfde:	62a3      	str	r3, [r4, #40]	; 0x28
    bfe0:	4b04      	ldr	r3, [pc, #16]	; (bff4 <std.isra.0+0x40>)
    bfe2:	62e3      	str	r3, [r4, #44]	; 0x2c
    bfe4:	4b04      	ldr	r3, [pc, #16]	; (bff8 <std.isra.0+0x44>)
    bfe6:	6323      	str	r3, [r4, #48]	; 0x30
    bfe8:	bd10      	pop	{r4, pc}
    bfea:	46c0      	nop			; (mov r8, r8)
    bfec:	0000c1a9 	.word	0x0000c1a9
    bff0:	0000c1d1 	.word	0x0000c1d1
    bff4:	0000c209 	.word	0x0000c209
    bff8:	0000c235 	.word	0x0000c235

0000bffc <__sfmoreglue>:
    bffc:	b570      	push	{r4, r5, r6, lr}
    bffe:	2568      	movs	r5, #104	; 0x68
    c000:	1e4a      	subs	r2, r1, #1
    c002:	4355      	muls	r5, r2
    c004:	000e      	movs	r6, r1
    c006:	0029      	movs	r1, r5
    c008:	3174      	adds	r1, #116	; 0x74
    c00a:	f7ff fde7 	bl	bbdc <_malloc_r>
    c00e:	1e04      	subs	r4, r0, #0
    c010:	d008      	beq.n	c024 <__sfmoreglue+0x28>
    c012:	2100      	movs	r1, #0
    c014:	002a      	movs	r2, r5
    c016:	6001      	str	r1, [r0, #0]
    c018:	6046      	str	r6, [r0, #4]
    c01a:	300c      	adds	r0, #12
    c01c:	60a0      	str	r0, [r4, #8]
    c01e:	3268      	adds	r2, #104	; 0x68
    c020:	f7ff fd89 	bl	bb36 <memset>
    c024:	0020      	movs	r0, r4
    c026:	bd70      	pop	{r4, r5, r6, pc}

0000c028 <__sinit>:
    c028:	6983      	ldr	r3, [r0, #24]
    c02a:	b513      	push	{r0, r1, r4, lr}
    c02c:	0004      	movs	r4, r0
    c02e:	2b00      	cmp	r3, #0
    c030:	d128      	bne.n	c084 <__sinit+0x5c>
    c032:	6483      	str	r3, [r0, #72]	; 0x48
    c034:	64c3      	str	r3, [r0, #76]	; 0x4c
    c036:	6503      	str	r3, [r0, #80]	; 0x50
    c038:	4b13      	ldr	r3, [pc, #76]	; (c088 <__sinit+0x60>)
    c03a:	4a14      	ldr	r2, [pc, #80]	; (c08c <__sinit+0x64>)
    c03c:	681b      	ldr	r3, [r3, #0]
    c03e:	6282      	str	r2, [r0, #40]	; 0x28
    c040:	9301      	str	r3, [sp, #4]
    c042:	4298      	cmp	r0, r3
    c044:	d101      	bne.n	c04a <__sinit+0x22>
    c046:	2301      	movs	r3, #1
    c048:	6183      	str	r3, [r0, #24]
    c04a:	0020      	movs	r0, r4
    c04c:	f000 f820 	bl	c090 <__sfp>
    c050:	6060      	str	r0, [r4, #4]
    c052:	0020      	movs	r0, r4
    c054:	f000 f81c 	bl	c090 <__sfp>
    c058:	60a0      	str	r0, [r4, #8]
    c05a:	0020      	movs	r0, r4
    c05c:	f000 f818 	bl	c090 <__sfp>
    c060:	2200      	movs	r2, #0
    c062:	60e0      	str	r0, [r4, #12]
    c064:	2104      	movs	r1, #4
    c066:	6860      	ldr	r0, [r4, #4]
    c068:	f7ff ffa4 	bl	bfb4 <std.isra.0>
    c06c:	2201      	movs	r2, #1
    c06e:	2109      	movs	r1, #9
    c070:	68a0      	ldr	r0, [r4, #8]
    c072:	f7ff ff9f 	bl	bfb4 <std.isra.0>
    c076:	2202      	movs	r2, #2
    c078:	2112      	movs	r1, #18
    c07a:	68e0      	ldr	r0, [r4, #12]
    c07c:	f7ff ff9a 	bl	bfb4 <std.isra.0>
    c080:	2301      	movs	r3, #1
    c082:	61a3      	str	r3, [r4, #24]
    c084:	bd13      	pop	{r0, r1, r4, pc}
    c086:	46c0      	nop			; (mov r8, r8)
    c088:	0000cf20 	.word	0x0000cf20
    c08c:	0000bfa5 	.word	0x0000bfa5

0000c090 <__sfp>:
    c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c092:	4b1e      	ldr	r3, [pc, #120]	; (c10c <__sfp+0x7c>)
    c094:	0007      	movs	r7, r0
    c096:	681e      	ldr	r6, [r3, #0]
    c098:	69b3      	ldr	r3, [r6, #24]
    c09a:	2b00      	cmp	r3, #0
    c09c:	d102      	bne.n	c0a4 <__sfp+0x14>
    c09e:	0030      	movs	r0, r6
    c0a0:	f7ff ffc2 	bl	c028 <__sinit>
    c0a4:	3648      	adds	r6, #72	; 0x48
    c0a6:	68b4      	ldr	r4, [r6, #8]
    c0a8:	6873      	ldr	r3, [r6, #4]
    c0aa:	3b01      	subs	r3, #1
    c0ac:	d504      	bpl.n	c0b8 <__sfp+0x28>
    c0ae:	6833      	ldr	r3, [r6, #0]
    c0b0:	2b00      	cmp	r3, #0
    c0b2:	d007      	beq.n	c0c4 <__sfp+0x34>
    c0b4:	6836      	ldr	r6, [r6, #0]
    c0b6:	e7f6      	b.n	c0a6 <__sfp+0x16>
    c0b8:	220c      	movs	r2, #12
    c0ba:	5ea5      	ldrsh	r5, [r4, r2]
    c0bc:	2d00      	cmp	r5, #0
    c0be:	d00d      	beq.n	c0dc <__sfp+0x4c>
    c0c0:	3468      	adds	r4, #104	; 0x68
    c0c2:	e7f2      	b.n	c0aa <__sfp+0x1a>
    c0c4:	2104      	movs	r1, #4
    c0c6:	0038      	movs	r0, r7
    c0c8:	f7ff ff98 	bl	bffc <__sfmoreglue>
    c0cc:	6030      	str	r0, [r6, #0]
    c0ce:	2800      	cmp	r0, #0
    c0d0:	d1f0      	bne.n	c0b4 <__sfp+0x24>
    c0d2:	230c      	movs	r3, #12
    c0d4:	0004      	movs	r4, r0
    c0d6:	603b      	str	r3, [r7, #0]
    c0d8:	0020      	movs	r0, r4
    c0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0dc:	2301      	movs	r3, #1
    c0de:	0020      	movs	r0, r4
    c0e0:	425b      	negs	r3, r3
    c0e2:	81e3      	strh	r3, [r4, #14]
    c0e4:	3302      	adds	r3, #2
    c0e6:	81a3      	strh	r3, [r4, #12]
    c0e8:	6665      	str	r5, [r4, #100]	; 0x64
    c0ea:	6025      	str	r5, [r4, #0]
    c0ec:	60a5      	str	r5, [r4, #8]
    c0ee:	6065      	str	r5, [r4, #4]
    c0f0:	6125      	str	r5, [r4, #16]
    c0f2:	6165      	str	r5, [r4, #20]
    c0f4:	61a5      	str	r5, [r4, #24]
    c0f6:	2208      	movs	r2, #8
    c0f8:	0029      	movs	r1, r5
    c0fa:	305c      	adds	r0, #92	; 0x5c
    c0fc:	f7ff fd1b 	bl	bb36 <memset>
    c100:	6365      	str	r5, [r4, #52]	; 0x34
    c102:	63a5      	str	r5, [r4, #56]	; 0x38
    c104:	64a5      	str	r5, [r4, #72]	; 0x48
    c106:	64e5      	str	r5, [r4, #76]	; 0x4c
    c108:	e7e6      	b.n	c0d8 <__sfp+0x48>
    c10a:	46c0      	nop			; (mov r8, r8)
    c10c:	0000cf20 	.word	0x0000cf20

0000c110 <_fwalk_reent>:
    c110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c112:	0004      	movs	r4, r0
    c114:	0007      	movs	r7, r0
    c116:	2600      	movs	r6, #0
    c118:	9101      	str	r1, [sp, #4]
    c11a:	3448      	adds	r4, #72	; 0x48
    c11c:	2c00      	cmp	r4, #0
    c11e:	d101      	bne.n	c124 <_fwalk_reent+0x14>
    c120:	0030      	movs	r0, r6
    c122:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c124:	6863      	ldr	r3, [r4, #4]
    c126:	68a5      	ldr	r5, [r4, #8]
    c128:	9300      	str	r3, [sp, #0]
    c12a:	9b00      	ldr	r3, [sp, #0]
    c12c:	3b01      	subs	r3, #1
    c12e:	9300      	str	r3, [sp, #0]
    c130:	d501      	bpl.n	c136 <_fwalk_reent+0x26>
    c132:	6824      	ldr	r4, [r4, #0]
    c134:	e7f2      	b.n	c11c <_fwalk_reent+0xc>
    c136:	89ab      	ldrh	r3, [r5, #12]
    c138:	2b01      	cmp	r3, #1
    c13a:	d908      	bls.n	c14e <_fwalk_reent+0x3e>
    c13c:	220e      	movs	r2, #14
    c13e:	5eab      	ldrsh	r3, [r5, r2]
    c140:	3301      	adds	r3, #1
    c142:	d004      	beq.n	c14e <_fwalk_reent+0x3e>
    c144:	0029      	movs	r1, r5
    c146:	0038      	movs	r0, r7
    c148:	9b01      	ldr	r3, [sp, #4]
    c14a:	4798      	blx	r3
    c14c:	4306      	orrs	r6, r0
    c14e:	3568      	adds	r5, #104	; 0x68
    c150:	e7eb      	b.n	c12a <_fwalk_reent+0x1a>
	...

0000c154 <__swhatbuf_r>:
    c154:	b570      	push	{r4, r5, r6, lr}
    c156:	000e      	movs	r6, r1
    c158:	001d      	movs	r5, r3
    c15a:	230e      	movs	r3, #14
    c15c:	5ec9      	ldrsh	r1, [r1, r3]
    c15e:	b090      	sub	sp, #64	; 0x40
    c160:	0014      	movs	r4, r2
    c162:	2900      	cmp	r1, #0
    c164:	da07      	bge.n	c176 <__swhatbuf_r+0x22>
    c166:	2300      	movs	r3, #0
    c168:	602b      	str	r3, [r5, #0]
    c16a:	89b3      	ldrh	r3, [r6, #12]
    c16c:	061b      	lsls	r3, r3, #24
    c16e:	d411      	bmi.n	c194 <__swhatbuf_r+0x40>
    c170:	2380      	movs	r3, #128	; 0x80
    c172:	00db      	lsls	r3, r3, #3
    c174:	e00f      	b.n	c196 <__swhatbuf_r+0x42>
    c176:	aa01      	add	r2, sp, #4
    c178:	f000 f888 	bl	c28c <_fstat_r>
    c17c:	2800      	cmp	r0, #0
    c17e:	dbf2      	blt.n	c166 <__swhatbuf_r+0x12>
    c180:	22f0      	movs	r2, #240	; 0xf0
    c182:	9b02      	ldr	r3, [sp, #8]
    c184:	0212      	lsls	r2, r2, #8
    c186:	4013      	ands	r3, r2
    c188:	4a05      	ldr	r2, [pc, #20]	; (c1a0 <__swhatbuf_r+0x4c>)
    c18a:	189b      	adds	r3, r3, r2
    c18c:	425a      	negs	r2, r3
    c18e:	4153      	adcs	r3, r2
    c190:	602b      	str	r3, [r5, #0]
    c192:	e7ed      	b.n	c170 <__swhatbuf_r+0x1c>
    c194:	2340      	movs	r3, #64	; 0x40
    c196:	2000      	movs	r0, #0
    c198:	6023      	str	r3, [r4, #0]
    c19a:	b010      	add	sp, #64	; 0x40
    c19c:	bd70      	pop	{r4, r5, r6, pc}
    c19e:	46c0      	nop			; (mov r8, r8)
    c1a0:	ffffe000 	.word	0xffffe000

0000c1a4 <__malloc_lock>:
    c1a4:	4770      	bx	lr

0000c1a6 <__malloc_unlock>:
    c1a6:	4770      	bx	lr

0000c1a8 <__sread>:
    c1a8:	b570      	push	{r4, r5, r6, lr}
    c1aa:	000c      	movs	r4, r1
    c1ac:	250e      	movs	r5, #14
    c1ae:	5f49      	ldrsh	r1, [r1, r5]
    c1b0:	f000 f892 	bl	c2d8 <_read_r>
    c1b4:	2800      	cmp	r0, #0
    c1b6:	db03      	blt.n	c1c0 <__sread+0x18>
    c1b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    c1ba:	181b      	adds	r3, r3, r0
    c1bc:	6563      	str	r3, [r4, #84]	; 0x54
    c1be:	bd70      	pop	{r4, r5, r6, pc}
    c1c0:	89a3      	ldrh	r3, [r4, #12]
    c1c2:	4a02      	ldr	r2, [pc, #8]	; (c1cc <__sread+0x24>)
    c1c4:	4013      	ands	r3, r2
    c1c6:	81a3      	strh	r3, [r4, #12]
    c1c8:	e7f9      	b.n	c1be <__sread+0x16>
    c1ca:	46c0      	nop			; (mov r8, r8)
    c1cc:	ffffefff 	.word	0xffffefff

0000c1d0 <__swrite>:
    c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1d2:	001f      	movs	r7, r3
    c1d4:	898b      	ldrh	r3, [r1, #12]
    c1d6:	0005      	movs	r5, r0
    c1d8:	000c      	movs	r4, r1
    c1da:	0016      	movs	r6, r2
    c1dc:	05db      	lsls	r3, r3, #23
    c1de:	d505      	bpl.n	c1ec <__swrite+0x1c>
    c1e0:	230e      	movs	r3, #14
    c1e2:	5ec9      	ldrsh	r1, [r1, r3]
    c1e4:	2200      	movs	r2, #0
    c1e6:	2302      	movs	r3, #2
    c1e8:	f000 f862 	bl	c2b0 <_lseek_r>
    c1ec:	89a3      	ldrh	r3, [r4, #12]
    c1ee:	4a05      	ldr	r2, [pc, #20]	; (c204 <__swrite+0x34>)
    c1f0:	0028      	movs	r0, r5
    c1f2:	4013      	ands	r3, r2
    c1f4:	81a3      	strh	r3, [r4, #12]
    c1f6:	0032      	movs	r2, r6
    c1f8:	230e      	movs	r3, #14
    c1fa:	5ee1      	ldrsh	r1, [r4, r3]
    c1fc:	003b      	movs	r3, r7
    c1fe:	f000 f81f 	bl	c240 <_write_r>
    c202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c204:	ffffefff 	.word	0xffffefff

0000c208 <__sseek>:
    c208:	b570      	push	{r4, r5, r6, lr}
    c20a:	000c      	movs	r4, r1
    c20c:	250e      	movs	r5, #14
    c20e:	5f49      	ldrsh	r1, [r1, r5]
    c210:	f000 f84e 	bl	c2b0 <_lseek_r>
    c214:	89a3      	ldrh	r3, [r4, #12]
    c216:	1c42      	adds	r2, r0, #1
    c218:	d103      	bne.n	c222 <__sseek+0x1a>
    c21a:	4a05      	ldr	r2, [pc, #20]	; (c230 <__sseek+0x28>)
    c21c:	4013      	ands	r3, r2
    c21e:	81a3      	strh	r3, [r4, #12]
    c220:	bd70      	pop	{r4, r5, r6, pc}
    c222:	2280      	movs	r2, #128	; 0x80
    c224:	0152      	lsls	r2, r2, #5
    c226:	4313      	orrs	r3, r2
    c228:	81a3      	strh	r3, [r4, #12]
    c22a:	6560      	str	r0, [r4, #84]	; 0x54
    c22c:	e7f8      	b.n	c220 <__sseek+0x18>
    c22e:	46c0      	nop			; (mov r8, r8)
    c230:	ffffefff 	.word	0xffffefff

0000c234 <__sclose>:
    c234:	b510      	push	{r4, lr}
    c236:	230e      	movs	r3, #14
    c238:	5ec9      	ldrsh	r1, [r1, r3]
    c23a:	f000 f815 	bl	c268 <_close_r>
    c23e:	bd10      	pop	{r4, pc}

0000c240 <_write_r>:
    c240:	b570      	push	{r4, r5, r6, lr}
    c242:	0005      	movs	r5, r0
    c244:	0008      	movs	r0, r1
    c246:	0011      	movs	r1, r2
    c248:	2200      	movs	r2, #0
    c24a:	4c06      	ldr	r4, [pc, #24]	; (c264 <_write_r+0x24>)
    c24c:	6022      	str	r2, [r4, #0]
    c24e:	001a      	movs	r2, r3
    c250:	f7fa fea2 	bl	6f98 <_write>
    c254:	1c43      	adds	r3, r0, #1
    c256:	d103      	bne.n	c260 <_write_r+0x20>
    c258:	6823      	ldr	r3, [r4, #0]
    c25a:	2b00      	cmp	r3, #0
    c25c:	d000      	beq.n	c260 <_write_r+0x20>
    c25e:	602b      	str	r3, [r5, #0]
    c260:	bd70      	pop	{r4, r5, r6, pc}
    c262:	46c0      	nop			; (mov r8, r8)
    c264:	20000ce4 	.word	0x20000ce4

0000c268 <_close_r>:
    c268:	2300      	movs	r3, #0
    c26a:	b570      	push	{r4, r5, r6, lr}
    c26c:	4c06      	ldr	r4, [pc, #24]	; (c288 <_close_r+0x20>)
    c26e:	0005      	movs	r5, r0
    c270:	0008      	movs	r0, r1
    c272:	6023      	str	r3, [r4, #0]
    c274:	f7fa fee4 	bl	7040 <_close>
    c278:	1c43      	adds	r3, r0, #1
    c27a:	d103      	bne.n	c284 <_close_r+0x1c>
    c27c:	6823      	ldr	r3, [r4, #0]
    c27e:	2b00      	cmp	r3, #0
    c280:	d000      	beq.n	c284 <_close_r+0x1c>
    c282:	602b      	str	r3, [r5, #0]
    c284:	bd70      	pop	{r4, r5, r6, pc}
    c286:	46c0      	nop			; (mov r8, r8)
    c288:	20000ce4 	.word	0x20000ce4

0000c28c <_fstat_r>:
    c28c:	2300      	movs	r3, #0
    c28e:	b570      	push	{r4, r5, r6, lr}
    c290:	4c06      	ldr	r4, [pc, #24]	; (c2ac <_fstat_r+0x20>)
    c292:	0005      	movs	r5, r0
    c294:	0008      	movs	r0, r1
    c296:	0011      	movs	r1, r2
    c298:	6023      	str	r3, [r4, #0]
    c29a:	f7fa fedb 	bl	7054 <_fstat>
    c29e:	1c43      	adds	r3, r0, #1
    c2a0:	d103      	bne.n	c2aa <_fstat_r+0x1e>
    c2a2:	6823      	ldr	r3, [r4, #0]
    c2a4:	2b00      	cmp	r3, #0
    c2a6:	d000      	beq.n	c2aa <_fstat_r+0x1e>
    c2a8:	602b      	str	r3, [r5, #0]
    c2aa:	bd70      	pop	{r4, r5, r6, pc}
    c2ac:	20000ce4 	.word	0x20000ce4

0000c2b0 <_lseek_r>:
    c2b0:	b570      	push	{r4, r5, r6, lr}
    c2b2:	0005      	movs	r5, r0
    c2b4:	0008      	movs	r0, r1
    c2b6:	0011      	movs	r1, r2
    c2b8:	2200      	movs	r2, #0
    c2ba:	4c06      	ldr	r4, [pc, #24]	; (c2d4 <_lseek_r+0x24>)
    c2bc:	6022      	str	r2, [r4, #0]
    c2be:	001a      	movs	r2, r3
    c2c0:	f7fa fed6 	bl	7070 <_lseek>
    c2c4:	1c43      	adds	r3, r0, #1
    c2c6:	d103      	bne.n	c2d0 <_lseek_r+0x20>
    c2c8:	6823      	ldr	r3, [r4, #0]
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	d000      	beq.n	c2d0 <_lseek_r+0x20>
    c2ce:	602b      	str	r3, [r5, #0]
    c2d0:	bd70      	pop	{r4, r5, r6, pc}
    c2d2:	46c0      	nop			; (mov r8, r8)
    c2d4:	20000ce4 	.word	0x20000ce4

0000c2d8 <_read_r>:
    c2d8:	b570      	push	{r4, r5, r6, lr}
    c2da:	0005      	movs	r5, r0
    c2dc:	0008      	movs	r0, r1
    c2de:	0011      	movs	r1, r2
    c2e0:	2200      	movs	r2, #0
    c2e2:	4c06      	ldr	r4, [pc, #24]	; (c2fc <_read_r+0x24>)
    c2e4:	6022      	str	r2, [r4, #0]
    c2e6:	001a      	movs	r2, r3
    c2e8:	f7fa fe2c 	bl	6f44 <_read>
    c2ec:	1c43      	adds	r3, r0, #1
    c2ee:	d103      	bne.n	c2f8 <_read_r+0x20>
    c2f0:	6823      	ldr	r3, [r4, #0]
    c2f2:	2b00      	cmp	r3, #0
    c2f4:	d000      	beq.n	c2f8 <_read_r+0x20>
    c2f6:	602b      	str	r3, [r5, #0]
    c2f8:	bd70      	pop	{r4, r5, r6, pc}
    c2fa:	46c0      	nop			; (mov r8, r8)
    c2fc:	20000ce4 	.word	0x20000ce4
    c300:	0000064c 	.word	0x0000064c
    c304:	0000064c 	.word	0x0000064c
    c308:	00000640 	.word	0x00000640
    c30c:	0000064c 	.word	0x0000064c
    c310:	00000640 	.word	0x00000640
    c314:	0000061a 	.word	0x0000061a
    c318:	0000061a 	.word	0x0000061a
    c31c:	0000064c 	.word	0x0000064c
    c320:	0000064c 	.word	0x0000064c
    c324:	0000064c 	.word	0x0000064c
    c328:	0000064c 	.word	0x0000064c
    c32c:	0000064c 	.word	0x0000064c
    c330:	0000064c 	.word	0x0000064c
    c334:	0000064c 	.word	0x0000064c
    c338:	0000064c 	.word	0x0000064c
    c33c:	0000064c 	.word	0x0000064c
    c340:	0000064c 	.word	0x0000064c
    c344:	0000064c 	.word	0x0000064c
    c348:	0000064c 	.word	0x0000064c
    c34c:	0000064c 	.word	0x0000064c
    c350:	0000064c 	.word	0x0000064c
    c354:	0000064c 	.word	0x0000064c
    c358:	0000064c 	.word	0x0000064c
    c35c:	0000064c 	.word	0x0000064c
    c360:	0000064c 	.word	0x0000064c
    c364:	0000064c 	.word	0x0000064c
    c368:	0000064c 	.word	0x0000064c
    c36c:	0000064c 	.word	0x0000064c
    c370:	0000064c 	.word	0x0000064c
    c374:	0000064c 	.word	0x0000064c
    c378:	0000064c 	.word	0x0000064c
    c37c:	0000064c 	.word	0x0000064c
    c380:	0000064c 	.word	0x0000064c
    c384:	0000064c 	.word	0x0000064c
    c388:	0000064c 	.word	0x0000064c
    c38c:	0000064c 	.word	0x0000064c
    c390:	0000064c 	.word	0x0000064c
    c394:	0000064c 	.word	0x0000064c
    c398:	0000064c 	.word	0x0000064c
    c39c:	0000064c 	.word	0x0000064c
    c3a0:	0000064c 	.word	0x0000064c
    c3a4:	0000064c 	.word	0x0000064c
    c3a8:	0000064c 	.word	0x0000064c
    c3ac:	0000064c 	.word	0x0000064c
    c3b0:	0000064c 	.word	0x0000064c
    c3b4:	0000064c 	.word	0x0000064c
    c3b8:	0000064c 	.word	0x0000064c
    c3bc:	0000064c 	.word	0x0000064c
    c3c0:	0000064c 	.word	0x0000064c
    c3c4:	0000064c 	.word	0x0000064c
    c3c8:	0000064c 	.word	0x0000064c
    c3cc:	0000064c 	.word	0x0000064c
    c3d0:	0000064c 	.word	0x0000064c
    c3d4:	0000064c 	.word	0x0000064c
    c3d8:	0000064c 	.word	0x0000064c
    c3dc:	0000064c 	.word	0x0000064c
    c3e0:	0000064c 	.word	0x0000064c
    c3e4:	0000064c 	.word	0x0000064c
    c3e8:	0000064c 	.word	0x0000064c
    c3ec:	0000064c 	.word	0x0000064c
    c3f0:	0000064c 	.word	0x0000064c
    c3f4:	0000064c 	.word	0x0000064c
    c3f8:	0000064c 	.word	0x0000064c
    c3fc:	0000064c 	.word	0x0000064c
    c400:	00000640 	.word	0x00000640
    c404:	00000640 	.word	0x00000640
    c408:	00000656 	.word	0x00000656
    c40c:	00000656 	.word	0x00000656
    c410:	00000656 	.word	0x00000656
    c414:	00000656 	.word	0x00000656

0000c418 <sd_mmc_trans_units>:
    c418:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000c434 <sd_trans_multipliers>:
    c434:	00000000 0000000a 0000000c 0000000d     ................
    c444:	0000000f 00000014 00000019 0000001e     ................
    c454:	00000023 00000028 0000002d 00000032     #...(...-...2...
    c464:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000c474 <mmc_trans_multipliers>:
    c474:	00000000 0000000a 0000000c 0000000d     ................
    c484:	0000000f 00000014 0000001a 0000001e     ................
    c494:	00000023 00000028 0000002d 00000034     #...(...-...4...
    c4a4:	00000037 0000003c 00000046 00000050     7...<...F...P...
    c4b4:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    c4c4:	22302074 00000000                       t 0"....

0000c4cc <lun_desc>:
    c4cc:	000023ad 00002405 00002451 0000249d     .#...$..Q$...$..
    c4dc:	000024cd 00002551 000025e1 0000c4b4     .$..Q%...%......
    c4ec:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    c4fc:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    c50c:	000060c2 0000613c 0000613c 000060e0     .`..<a..<a...`..
    c51c:	000060da 000060e6 000060c8 000060ec     .`...`...`...`..
    c52c:	00006122 00006408 00006458 00006458     "a...d..Xd..Xd..
    c53c:	00006454 000063fa 0000641a 000063ea     Td...c...d...c..
    c54c:	0000642c 0000643e 000064a6 000064d4     ,d..>d...d...d..
    c55c:	000064d4 000064d0 000064a0 000064ac     .d...d...d...d..
    c56c:	0000649a 000064b2 000064b8              .d...d...d..

0000c578 <LfnOfs>:
    c578:	07050301 12100e09 1c181614 0000001e     ................
    c588:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    c598:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    c5a8:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    c5b8:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    c5c8:	20205441 00202020                       AT     .

0000c5d0 <excvt.4558>:
    c5d0:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    c5e0:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    c5f0:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    c600:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    c610:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    c620:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    c630:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    c640:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000c650 <Tbl>:
    c650:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    c660:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    c670:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    c680:	00d600ff 00f800dc 00d800a3 019200d7     ................
    c690:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    c6a0:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    c6b0:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    c6c0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    c6d0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    c6e0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    c6f0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    c700:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    c710:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    c720:	00da00de 00d900db 00dd00fd 00b400af     ................
    c730:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    c740:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000c750 <tbl_lower.4308>:
    c750:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    c760:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    c770:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    c780:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    c790:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    c7a0:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    c7b0:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    c7c0:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    c7d0:	01050103 01090107 010d010b 0111010f     ................
    c7e0:	01150113 01190117 011d011b 0121011f     ..............!.
    c7f0:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    c800:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    c810:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    c820:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    c830:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    c840:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    c850:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    c860:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    c870:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    c880:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    c890:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    c8a0:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    c8b0:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    c8c0:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    c8d0:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    c8e0:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    c8f0:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    c900:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    c910:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    c920:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000c930 <tbl_upper.4309>:
    c930:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    c940:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    c950:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    c960:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    c970:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    c980:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    c990:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    c9a0:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    c9b0:	01040102 01080106 010c010a 0110010e     ................
    c9c0:	01140112 01180116 011c011a 0120011e     .............. .
    c9d0:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    c9e0:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    c9f0:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    ca00:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    ca10:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    ca20:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    ca30:	03940393 03960395 03980397 039a0399     ................
    ca40:	039c039b 039e039d 03a0039f 03a303a1     ................
    ca50:	03a503a4 03a703a6 03a903a8 041003aa     ................
    ca60:	04120411 04140413 04160415 04180417     ................
    ca70:	041a0419 041c041b 041e041d 0420041f     .............. .
    ca80:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    ca90:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    caa0:	04030402 04050404 04070406 04090408     ................
    cab0:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    cac0:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    cad0:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    cae0:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    caf0:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    cb00:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    cb10:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    cb20:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    cb30:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    cb40:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    cb50:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    cb60:	20216465 63656843 6f79206b 63207275     ed! Check your c
    cb70:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    cb80:	77206d65 206c6c69 74736572 20747261     em will restart 
    cb90:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    cba0:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    cbb0:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    cbc0:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    cbd0:	00000a0d 67616c46 66204120 646e756f     ....Flag A found
    cbe0:	55202120 74616470 20676e69 33206e69      ! Updating in 3
    cbf0:	63657320 73646e6f 0d202120 0000000a      seconds ! .....
    cc00:	67616c46 78742e41 00000074 622e5746     FlagA.txt...FW.b
    cc10:	00006e69 616e6942 69207972 65642073     in..Binary is de
    cc20:	6574656c 0a0d2e64 00000000 74737953     leted.......Syst
    cc30:	77206d65 206c6c69 65736572 6e692074     em will reset in
    cc40:	73203520 6e6f6365 0d2e7364 0000000a      5 seconds......
    cc50:	2e2e2e35 00000a0d 2e2e2e34 00000a0d     5.......4.......
    cc60:	2e2e2e33 00000a0d 2e2e2e32 00000a0d     3.......2.......
    cc70:	2e2e2e31 0a0a0a0d 0000000a 616e6942     1...........Bina
    cc80:	64207972 74656c65 61662065 64656c69     ry delete failed
    cc90:	000a0d21 35455345 2d203631 49584520     !...ESE516 - EXI
    cca0:	4f422054 4f4c544f 52454441 00000000     T BOOTLOADER....
    ccb0:	43204453 20647261 74696e69 65746169     SD Card initiate
    ccc0:	6f632064 63657272 21796c74 00000d0a     d correctly!....
    ccd0:	6e756f4d 69642074 28206b73 6f6d5f66     Mount disk (f_mo
    cce0:	29746e75 0d2e2e2e 0000000a 4941465b     unt)........[FAI
    ccf0:	72205d4c 25207365 000a0d64 5d4b4f5b     L] res %d...[OK]
    cd00:	00000a0d 61657243 61206574 6c696620     ....Create a fil
    cd10:	66282065 65706f5f 2e2e296e 000a0d2e     e (f_open)......
    cd20:	74697257 6f742065 73657420 69662074     Write to test fi
    cd30:	2820656c 75705f66 2e297374 0a0d2e2e     le (f_puts).....
    cd40:	00000000 74736554 2f445320 20434d4d     ....Test SD/MMC 
    cd50:	63617473 00000a6b 4941465b 0a0d5d4c     stack...[FAIL]..
    cd60:	00000000 74736554 20736920 63637573     ....Test is succ
    cd70:	66737365 0a2e6c75 0000000d 6c756f43     essful......Coul
    cd80:	6f6e2064 706f2074 62206e65 72616e69     d not open binar
    cd90:	69662079 0d21656c 0000000a 74697257     y file!.....Writ
    cda0:	6f742065 73657420 69662074 2820656c     e to test file (
    cdb0:	72775f66 29657469 0d2e2e2e 0000000a     f_write)........
    cdc0:	20646e45 5420666f 2e747365 00000d0a     End of Test.....
    cdd0:	43204453 20647261 6c696166 69206465     SD Card failed i
    cde0:	6974696e 6f697461 4320216e 6b636568     nitiation! Check
    cdf0:	6e6f6320 7463656e 736e6f69 000d0a21      connections!...
    ce00:	73617245 72652065 21726f72 00000a0d     Erase error!....
    ce10:	6f727245 202d2072 74736574 67617020     Error - test pag
    ce20:	73692065 746f6e20 61726520 21646573     e is not erased!
    ce30:	00000000 61746144 61726520 20646573     ....Data erased 
    ce40:	63637573 66737365 796c6c75 0a0d2021     successfully! ..
    ce50:	00000000 67616c46 78742e42 00000074     ....FlagB.txt...
    ce60:	65543a30 2e417473 006e6962 65543a30     0:TestA.bin.0:Te
    ce70:	2e427473 006e6962 616e6942 4d207972     stB.bin.Binary M
    ce80:	69737369 0021676e 6c756f43 6f6e2064     issing!.Could no
    ce90:	706f2074 42206e65 72616e69 69662079     t open Binary fi
    cea0:	0d21656c 0000000a 616e6942 46207972     le!.....Binary F
    ceb0:	20656c69 74697277 6f742065 4d564e20     ile write to NVM
    cec0:	69616620 2164656c 00000a0d 74736554      failed!....Test
    ced0:	69727720 74206574 564e206f 6166204d      write to NVM fa
    cee0:	64656c69 000a0d21 74736554 69727720     iled!...Test wri
    cef0:	74206574 564e206f 7573204d 65656363     te to NVM succee
    cf00:	21646564 00000a0d 20435243 63656863     ded!....CRC chec
    cf10:	7573206b 65656363 21646564 00000a0d     k succeeded!....

0000cf20 <_global_impure_ptr>:
    cf20:	20000048                                H.. 

0000cf24 <__sf_fake_stderr>:
	...

0000cf44 <__sf_fake_stdin>:
	...

0000cf64 <__sf_fake_stdout>:
	...

0000cf84 <_init>:
    cf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf86:	46c0      	nop			; (mov r8, r8)
    cf88:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cf8a:	bc08      	pop	{r3}
    cf8c:	469e      	mov	lr, r3
    cf8e:	4770      	bx	lr

0000cf90 <__init_array_start>:
    cf90:	000000dd 	.word	0x000000dd

0000cf94 <_fini>:
    cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf96:	46c0      	nop			; (mov r8, r8)
    cf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    cf9a:	bc08      	pop	{r3}
    cf9c:	469e      	mov	lr, r3
    cf9e:	4770      	bx	lr

0000cfa0 <__fini_array_start>:
    cfa0:	000000b5 	.word	0x000000b5
